### YamlMime:ManagedReference
items:
- uid: System.Web.HttpTaskAsyncHandler
  id: HttpTaskAsyncHandler
  children:
  - System.Web.HttpTaskAsyncHandler.#ctor
  - System.Web.HttpTaskAsyncHandler.IsReusable
  - System.Web.HttpTaskAsyncHandler.ProcessRequest(System.Web.HttpContext)
  - System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(System.Web.HttpContext)
  - System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  - System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  langs:
  - csharp
  name: HttpTaskAsyncHandler
  nameWithType: HttpTaskAsyncHandler
  fullName: System.Web.HttpTaskAsyncHandler
  type: Class
  summary: "파생된 작업 처리기 클래스는 비동기 작업을 처리 하기 위해 구현할 수 있는 메서드를 제공 합니다."
  remarks: "TheHttpTaskAsyncHandler 클래스를 구현 하지 않고도 비동기 작업을 처리 하는 간단한 방법을 제공는 <xref:System.Web.IHttpAsyncHandler.BeginProcessRequest%2A>및 <xref:System.Web.IHttpAsyncHandler.EndProcessRequest%2A>메서드.</xref:System.Web.IHttpAsyncHandler.EndProcessRequest%2A> </xref:System.Web.IHttpAsyncHandler.BeginProcessRequest%2A>  비동기 작업에 대 한 처리기를 만들려면 재정의할 수 있습니다는 <xref:System.Web.HttpTaskAsyncHandler.ProcessRequestAsync%2A>처리 코드 메서드 및 구현 사용자 지정 작업.</xref:System.Web.HttpTaskAsyncHandler.ProcessRequestAsync%2A>"
  syntax:
    content: 'public abstract class HttpTaskAsyncHandler : System.Web.IHttpAsyncHandler'
  inheritance:
  - System.Object
  implements:
  - System.Web.IHttpAsyncHandler
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.HttpTaskAsyncHandler.#ctor
  id: '#ctor'
  parent: System.Web.HttpTaskAsyncHandler
  langs:
  - csharp
  name: HttpTaskAsyncHandler()
  nameWithType: HttpTaskAsyncHandler.HttpTaskAsyncHandler()
  fullName: System.Web.HttpTaskAsyncHandler.HttpTaskAsyncHandler()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "초기화 하는 파생된 클래스의 생성자에서 호출 된 <xref href=&quot;System.Web.HttpTaskAsyncHandler&quot;> </xref> 클래스입니다."
  syntax:
    content: protected HttpTaskAsyncHandler ();
    parameters: []
  overload: System.Web.HttpTaskAsyncHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpTaskAsyncHandler.IsReusable
  id: IsReusable
  parent: System.Web.HttpTaskAsyncHandler
  langs:
  - csharp
  name: IsReusable
  nameWithType: HttpTaskAsyncHandler.IsReusable
  fullName: System.Web.HttpTaskAsyncHandler.IsReusable
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "파생된 클래스에서 재정의 되 면 다른 비동기 작업에 대 한 작업 처리기 클래스 인스턴스를 다시 사용할 수 있는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public virtual bool IsReusable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 처리기를 다시 사용할 수 있습니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다.  기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.HttpTaskAsyncHandler.IsReusable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpTaskAsyncHandler.ProcessRequest(System.Web.HttpContext)
  id: ProcessRequest(System.Web.HttpContext)
  parent: System.Web.HttpTaskAsyncHandler
  langs:
  - csharp
  name: ProcessRequest(HttpContext)
  nameWithType: HttpTaskAsyncHandler.ProcessRequest(HttpContext)
  fullName: System.Web.HttpTaskAsyncHandler.ProcessRequest(HttpContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "파생된 클래스에서 재정의 되 면 동기 작업을 처리 하는 코드를 제공 합니다."
  syntax:
    content: public virtual void ProcessRequest (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "HTTP 컨텍스트입니다."
  overload: System.Web.HttpTaskAsyncHandler.ProcessRequest*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "메서드는 구현 하지만 기본 동기 작업에 대 한 처리를 제공 하지 않습니다."
  platform:
  - net462
- uid: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(System.Web.HttpContext)
  id: ProcessRequestAsync(System.Web.HttpContext)
  parent: System.Web.HttpTaskAsyncHandler
  langs:
  - csharp
  name: ProcessRequestAsync(HttpContext)
  nameWithType: HttpTaskAsyncHandler.ProcessRequestAsync(HttpContext)
  fullName: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(HttpContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "파생된 클래스에서 재정의 되 면 비동기 작업을 처리 하는 코드를 제공 합니다."
  remarks: "비동기 작업에 대 한 사용자 지정 처리기를 만들려면 ProcessRequestAsync 메서드를 재정의 합니다."
  syntax:
    content: public abstract System.Threading.Tasks.Task ProcessRequestAsync (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "HTTP 컨텍스트입니다."
    return:
      type: System.Threading.Tasks.Task
      description: "비동기 작업입니다."
  overload: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  id: System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  isEii: true
  parent: System.Web.HttpTaskAsyncHandler
  langs:
  - csharp
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  fullName: System.Web.HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "http에서 작업을 비동기적으로 처리를 시작 하는 처리기를 작업 합니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Web.HttpTaskAsyncHandler>인스턴스로 캐스팅 되는 <xref:System.Web.IHttpAsyncHandler>인터페이스.</xref:System.Web.IHttpAsyncHandler> </xref:System.Web.HttpTaskAsyncHandler>"
  syntax:
    content: IAsyncResult IHttpAsyncHandler.BeginProcessRequest (System.Web.HttpContext context, AsyncCallback cb, object extraData);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "HTTP 컨텍스트입니다."
    - id: cb
      type: System.AsyncCallback
      description: "메서드가 반환 될 때 호출할 콜백 메서드."
    - id: extraData
      type: System.Object
      description: "작업을 처리 하기 위한 추가 데이터입니다."
    return:
      type: System.IAsyncResult
      description: "비동기 작업에 대 한 상태 데이터를 포함 하는 개체입니다."
  overload: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  id: System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  isEii: true
  parent: System.Web.HttpTaskAsyncHandler
  langs:
  - csharp
  name: System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  fullName: System.Web.HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "HTTP에는 작업의 비동기 end 작업 처리기입니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Web.HttpTaskAsyncHandler>인스턴스로 캐스팅 되는 <xref:System.Web.IHttpAsyncHandler>인터페이스.</xref:System.Web.IHttpAsyncHandler> </xref:System.Web.HttpTaskAsyncHandler>"
  syntax:
    content: void IHttpAsyncHandler.EndProcessRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "비동기 작업의 상태입니다."
  overload: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Web.HttpTaskAsyncHandler.#ctor
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: HttpTaskAsyncHandler()
  nameWithType: HttpTaskAsyncHandler.HttpTaskAsyncHandler()
  fullName: System.Web.HttpTaskAsyncHandler.HttpTaskAsyncHandler()
- uid: System.Web.HttpTaskAsyncHandler.IsReusable
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: IsReusable
  nameWithType: HttpTaskAsyncHandler.IsReusable
  fullName: System.Web.HttpTaskAsyncHandler.IsReusable
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.HttpTaskAsyncHandler.ProcessRequest(System.Web.HttpContext)
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: ProcessRequest(HttpContext)
  nameWithType: HttpTaskAsyncHandler.ProcessRequest(HttpContext)
  fullName: System.Web.HttpTaskAsyncHandler.ProcessRequest(HttpContext)
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(System.Web.HttpContext)
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: ProcessRequestAsync(HttpContext)
  nameWithType: HttpTaskAsyncHandler.ProcessRequestAsync(HttpContext)
  fullName: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(HttpContext)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  fullName: System.Web.HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  fullName: System.Web.HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
- uid: System.Web.HttpTaskAsyncHandler.#ctor*
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: HttpTaskAsyncHandler
  nameWithType: HttpTaskAsyncHandler.HttpTaskAsyncHandler
- uid: System.Web.HttpTaskAsyncHandler.IsReusable*
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: IsReusable
  nameWithType: HttpTaskAsyncHandler.IsReusable
- uid: System.Web.HttpTaskAsyncHandler.ProcessRequest*
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: ProcessRequest
  nameWithType: HttpTaskAsyncHandler.ProcessRequest
- uid: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync*
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: ProcessRequestAsync
  nameWithType: HttpTaskAsyncHandler.ProcessRequestAsync
- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest*
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest
  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest
- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest*
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: System.Web.IHttpAsyncHandler.EndProcessRequest
  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest
