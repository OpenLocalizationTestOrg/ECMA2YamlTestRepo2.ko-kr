### YamlMime:ManagedReference
items:
- uid: System.Collections.SortedList
  id: SortedList
  children:
  - System.Collections.SortedList.#ctor
  - System.Collections.SortedList.#ctor(System.Collections.IComparer)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  - System.Collections.SortedList.#ctor(System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  - System.Collections.SortedList.Add(System.Object,System.Object)
  - System.Collections.SortedList.Capacity
  - System.Collections.SortedList.Clear
  - System.Collections.SortedList.Clone
  - System.Collections.SortedList.Contains(System.Object)
  - System.Collections.SortedList.ContainsKey(System.Object)
  - System.Collections.SortedList.ContainsValue(System.Object)
  - System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  - System.Collections.SortedList.Count
  - System.Collections.SortedList.GetByIndex(System.Int32)
  - System.Collections.SortedList.GetEnumerator
  - System.Collections.SortedList.GetKey(System.Int32)
  - System.Collections.SortedList.GetKeyList
  - System.Collections.SortedList.GetValueList
  - System.Collections.SortedList.IndexOfKey(System.Object)
  - System.Collections.SortedList.IndexOfValue(System.Object)
  - System.Collections.SortedList.IsFixedSize
  - System.Collections.SortedList.IsReadOnly
  - System.Collections.SortedList.IsSynchronized
  - System.Collections.SortedList.Item(System.Object)
  - System.Collections.SortedList.Keys
  - System.Collections.SortedList.Remove(System.Object)
  - System.Collections.SortedList.RemoveAt(System.Int32)
  - System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  - System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  - System.Collections.SortedList.SyncRoot
  - System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.SortedList.TrimToSize
  - System.Collections.SortedList.Values
  langs:
  - csharp
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
  type: Class
  summary: "키에 따라 정렬 된 키와 인덱스로 액세스할 수 있는 키/값 쌍의 컬렉션을 나타냅니다."
  remarks: "이 컬렉션의 제네릭 버전은 <xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>.</xref:System.Collections.Generic.SortedList%602?displayProperty=fullName> 을 참조 하십시오.       SortedList 요소에서 모든 요소와 같은 키를 통해 액세스할 수 <xref:System.Collections.IDictionary>구현 또는 모든 요소와 마찬가지로 해당 인덱스로 <xref:System.Collections.IList>구현.</xref:System.Collections.IList> </xref:System.Collections.IDictionary>       SortedList 개체에는 목록 요소를 저장 두 배열 내부적으로 유지 관리 즉, 하나의 배열로 키와 연결 된 값에 대 한 다른 배열에 대 한 합니다. 각 요소는으로 액세스할 수 있는 키/값 쌍을 <xref:System.Collections.DictionaryEntry>개체입니다.</xref:System.Collections.DictionaryEntry> 키 일 수 없습니다 `null`, 하지만 값이 될 수 있습니다.       SortedList 개체 용량이 SortedList 저장할 수 있는 요소의 수입니다. 요소는 SortedList에 추가 되 면 자동으로 용량 증가 하면 재할당을 통해 필요에 따라 합니다. 호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.SortedList.TrimToSize%2A>하거나 설정 하는 <xref:System.Collections.SortedList.Capacity%2A>속성이 명시적으로.</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A>       매우 큰 SortedList 개체에 대 한 설정 하 여 64 비트 시스템의 2 십억 요소에 최대 용량을 늘릴 수는 `enabled` 에 구성 요소의 특성 `true` 런타임 환경에서 합니다.       SortedList 개체의 각 요소는 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer>는 SortedList를 만들 때 또는 일정에 따라 지정 된 구현의 <xref:System.IComparable>키 자체가 제공 되는 구현.</xref:System.IComparable> </xref:System.Collections.IComparer> 두 경우 모두 SortedList는 중복 키를 허용 하지 않습니다.       인덱스 시퀀스 정렬 순서를 기준으로 합니다. 요소를 추가 하는 SortedList 올바른 정렬 순서에서 삽입 하 고 그에 따라 조정 인덱싱 합니다. 요소를 제거 하는 경우 인덱싱도 그에 따라 조정 됩니다. 따라서 요소가 추가 되거나 SortedList 개체에서 제거 하는 대로 특정 키/값 쌍의 인덱스가 변경 될 수 있습니다.       SortedList 개체에 대 한 작업에 대 한 작업 보다 느릴 수 경향이 <xref:System.Collections.Hashtable>은 정렬로 인해 개체.</xref:System.Collections.Hashtable> 그러나는 SortedList 연결 된 키 또는 인덱스를 통해 값에 대 한 액세스를 허용 하 여 더 많은 융통성을 제공 합니다.       이 컬렉션의 요소는 정수 인덱스를 사용 하 여 액세스할 수 있습니다.  이 컬렉션의 인덱스는&0;부터 시작 합니다.       `foreach` C# 언어의 (`for each` Visual basic에서) 컬렉션의 요소 형식의 개체를 반환 합니다. SortedList 개체의 각 요소는 키/값 쌍에 요소 유형 키의 형식 또는 값의 형식입니다. 대신, 요소 형식이 <xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> 예를 들어: [!code-cpp [클래식 SortedList 예제&#2;](~/add/codesnippet/cpp/t-system.collections.sor_1.cpp)][!code-cs[클래식 SortedList 예제&#2;](~/add/codesnippet/csharp/t-system.collections.sor_1.cs)][!code-vb[클래식 SortedList 예제&#2;](~/add/codesnippet/visualbasic/t-system.collections.sor_1.vb) ] 는 `foreach` 문에 주변 열거자를 컬렉션에 쓰는 것부터 읽기를 허용 합니다.    "
  example:
  - "The following code example shows how to create and initialize a SortedList object and how to print out its keys and values.  \n  \n [!code-cpp[Classic SortedList Example#1](~/add/codesnippet/cpp/t-system.collections.sor_2.cpp)]\n [!code-cs[Classic SortedList Example#1](~/add/codesnippet/csharp/t-system.collections.sor_2.cs)]\n [!code-vb[Classic SortedList Example#1](~/add/codesnippet/visualbasic/t-system.collections.sor_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortedList : ICloneable, System.Collections.IDictionary
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor
  id: '#ctor'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 클래스는 비어 있는 기본 초기 용량을 갖고 있고에 따라 정렬 되는 <xref:System.IComparable>에 추가 된 각 키에서 구현 된 인터페이스는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다.</xref:System.IComparable>"
  remarks: "각 키를 구현 해야 합니다는 <xref:System.IComparable>의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList> </xref:System.IComparable> 요소가 <xref:System.IComparable>있는 <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> 에 추가 된 각 키의 구현</xref:System.IComparable> 에 따라 정렬       용량은 <xref:System.Collections.SortedList>개체는 요소 수는는 <xref:System.Collections.SortedList>보유할 수 있습니다.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라.</xref:System.Collections.SortedList>       컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList>       이 생성자는 o (1) 연산입니다."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_7_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_7_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_7_1.cpp)]"
  syntax:
    content: public SortedList ();
    parameters: []
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 클래스는 비어 있는 기본 초기 용량을 갖고 및 정렬에 따라 지정 된 <xref:System.Collections.IComparer>인터페이스.</xref:System.Collections.IComparer>"
  remarks: "요소가 정렬에 따라 지정 된 <xref:System.Collections.IComparer>구현.</xref:System.Collections.IComparer> 경우는 `comparer` 매개 변수는 `null`, <xref:System.IComparable>각 키의 구현이 사용 됩니다; 따라서 각 키를 구현 해야 합니다는 <xref:System.IComparable>의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       용량은 <xref:System.Collections.SortedList>개체는 요소 수는는 <xref:System.Collections.SortedList>보유할 수 있습니다.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라.</xref:System.Collections.SortedList>       컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList>       이 생성자는 o (1) 연산입니다."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_18_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_18_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_18_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>키를 비교할 때 사용할 구현입니다.</xref:System.Collections.IComparer>       -또는- <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 사용 하 여 <xref:System.IComparable>각 키에서 구현 합니다.</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 지정된 된 사전에서 복사한 요소가 포함 된 클래스가 복사 된 요소 수와 같은 초기 용량 개이고에 따라 정렬 되는 <xref:System.IComparable>각 키에서 구현 된 인터페이스입니다.</xref:System.IComparable>"
  remarks: "각 키를 구현 해야 합니다는 <xref:System.IComparable>의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList> </xref:System.IComparable> 요소가 <xref:System.IComparable>있는 <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> 에 추가 된 각 키의 구현</xref:System.IComparable> 에 따라 정렬       A <xref:System.Collections.Hashtable>개체의 한 예로 <xref:System.Collections.IDictionary>이 생성자에 전달 될 수 있는 구현.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> 새 <xref:System.Collections.SortedList>키와 <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> 에 저장 된 값의 복사본을 포함 하는 개체</xref:System.Collections.SortedList>       용량은 <xref:System.Collections.SortedList>개체는 요소 수는는 <xref:System.Collections.SortedList>보유할 수 있습니다.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라.</xref:System.Collections.SortedList>       컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList>       이 생성자는는 O (`n`) 작업, 여기서 `n` 에 있는 요소의 수는 `d`합니다."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.sor_9_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.sor_9_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.sor_9_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>새 복사할 구현 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다.</xref:System.Collections.IDictionary>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "하나 이상의 요소가 <code> d </code> 구현 하지 않습니다는 <xref:System.IComparable>인터페이스.</xref:System.IComparable>"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 클래스는 비어 있는 지정 된 초기 용량을 갖고 있고에 따라 정렬 되는 <xref:System.IComparable>에 추가 된 각 키에서 구현 된 인터페이스는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다.</xref:System.IComparable>"
  remarks: "각 키를 구현 해야 합니다는 <xref:System.IComparable>의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList> </xref:System.IComparable> 요소가 <xref:System.IComparable>있는 <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> 에 추가 된 각 키의 구현</xref:System.IComparable> 에 따라 정렬       용량은 <xref:System.Collections.SortedList>개체는 요소 수는는 <xref:System.Collections.SortedList>보유할 수 있습니다.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라.</xref:System.Collections.SortedList>       컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList>       이 생성자는는 O (`n`) 작업, 여기서 `n` 은 `initialCapacity`합니다."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.sor_15_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.sor_15_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.sor_15_1.cpp)]"
  syntax:
    content: public SortedList (int initialCapacity);
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: "초기 요소 수는는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체에 포함 될 수 있습니다."
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>initialCapacity</code>가&0; 보다 작습니다."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "사용 가능한 메모리가 부족 만들 수 없는 한 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체를 지정 된 <code> initialCapacity </code>합니다."
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  id: '#ctor(System.Collections.IComparer,System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 클래스는 비어 있는 지정 된 초기 용량을 갖고 및 정렬에 따라 지정 된 <xref:System.Collections.IComparer>인터페이스.</xref:System.Collections.IComparer>"
  remarks: "요소가 정렬에 따라 지정 된 <xref:System.Collections.IComparer>구현.</xref:System.Collections.IComparer> 경우는 `comparer` 매개 변수는 `null`, <xref:System.IComparable>각 키의 구현이 사용 됩니다; 따라서 각 키를 구현 해야 합니다는 <xref:System.IComparable>의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       용량은 <xref:System.Collections.SortedList>개체는 요소 수는는 <xref:System.Collections.SortedList>보유할 수 있습니다.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라.</xref:System.Collections.SortedList>       컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList>       이 생성자는는 O (`n`) 작업, 여기서 `n` 은 `capacity`합니다."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/1806b376-56fc-45e2-aff7-_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/1806b376-56fc-45e2-aff7-_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/1806b376-56fc-45e2-aff7-_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer, int capacity);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>키를 비교할 때 사용할 구현입니다.</xref:System.Collections.IComparer>       -또는- <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 사용 하 여 <xref:System.IComparable>각 키에서 구현 합니다.</xref:System.IComparable>"
    - id: capacity
      type: System.Int32
      description: "초기 요소 수는는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체에 포함 될 수 있습니다."
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>가&0; 보다 작습니다."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "사용 가능한 메모리가 부족 만들 수 없는 한 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체를 지정 된 <code> capacity </code>합니다."
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 복사 된 요소 수와 같은 초기 용량을 가지 하 고 정렬 되어 지정된 된 사전에서 복사한 요소가 포함 된 클래스에 따라 지정 된 <xref:System.Collections.IComparer>인터페이스.</xref:System.Collections.IComparer>"
  remarks: "요소가 정렬에 따라 지정 된 <xref:System.Collections.IComparer>구현.</xref:System.Collections.IComparer> 경우는 `comparer` 매개 변수는 `null`, <xref:System.IComparable>각 키의 구현이 사용 됩니다; 따라서 각 키를 구현 해야 합니다는 <xref:System.IComparable>의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       A <xref:System.Collections.Hashtable>개체의 한 예로 <xref:System.Collections.IDictionary>이 생성자에 전달 될 수 있는 구현.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> 새 <xref:System.Collections.SortedList>키와 <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> 에 저장 된 값의 복사본을 포함 하는 개체</xref:System.Collections.SortedList>       용량은 <xref:System.Collections.SortedList>개체는 요소 수는는 <xref:System.Collections.SortedList>보유할 수 있습니다.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라.</xref:System.Collections.SortedList>       컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList>       이 생성자는는 O (`n`) 작업, 여기서 `n` 에 있는 요소의 수는 `d`합니다."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/653e16d8-524e-4544-8674-_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/653e16d8-524e-4544-8674-_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/653e16d8-524e-4544-8674-_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>새 복사할 구현 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다.</xref:System.Collections.IDictionary>"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>키를 비교할 때 사용할 구현입니다.</xref:System.Collections.IComparer>       -또는- <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 사용 하 여 <xref:System.IComparable>각 키에서 구현 합니다.</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>comparer</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, 및에서 하나 이상의 요소 <code>d</code> 구현 하지 않습니다는 <xref:System.IComparable> 인터페이스입니다."
  platform:
  - net462
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정 된 키와 값을 가진 요소에 추가 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "삽입 지점이 명시적으로 또는 기본적으로 선택 된 비교자에 따라 결정 됩니다 때는 <xref:System.Collections.SortedList>개체가 만들어진.</xref:System.Collections.SortedList>       경우 <xref:System.Collections.SortedList.Count%2A>이미 <xref:System.Collections.SortedList.Capacity%2A>의 용량이 <xref:System.Collections.SortedList>개체가 자동으로 내부 배열을 다시 할당 하 여 증가 하 고 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.Count%2A>       사용할 수도 있습니다는 <xref:System.Collections.SortedList.Item%2A>에 속성 키의 값을 설정 하 여 새 요소를 추가할 수 없습니다.는 <xref:System.Collections.SortedList>개체 (예를 들어 `myCollection[&quot;myNonexistentKey&quot;] = myValue`).</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Item%2A> 그러나 지정된 된 키에 이미 있는 경우는 <xref:System.Collections.SortedList>설정는 <xref:System.Collections.SortedList.Item%2A>속성 이전 값을 덮어씁니다.</xref:System.Collections.SortedList.Item%2A> </xref:System.Collections.SortedList> 반면, Add 메서드는 기존 요소를 수정 하지 않습니다.       요소는 <xref:System.Collections.SortedList>개체의 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer>구현 될 때 지정 되는 <xref:System.Collections.SortedList>가 생성 따라는 <xref:System.IComparable>키 자체가 제공 되는 구현.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       키 일 수 없습니다 `null`, 하지만 값이 될 수 있습니다.       이 메서드는 O는 (`n`) 정렬 되지 않은 데이터에 대 한 작업이 있는 `n` 은 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> o (로그 `n`) 새 요소 목록 끝에 추가 되는 작업입니다. 삽입으로 크기가 조정 작업이 O 되었습니다 (`n`)."
  example:
  - "The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.sor_4_1.cpp)]\n [!code-vb[Classic SortedList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_4_1.vb)]\n [!code-cs[Classic SortedList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.sor_4_1.cs)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "추가할 요소의 키입니다."
    - id: value
      type: System.Object
      description: "추가할 요소의 값입니다. 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.SortedList.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "지정 된 요소 <code> key </code> 에 이미는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다.       -또는- <xref href=&quot;System.Collections.SortedList&quot;> </xref> 사용 하도록 설정 되어는 <xref:System.IComparable>인터페이스 및 <code> key </code> 를 구현 하지 않습니다는 <xref:System.IComparable>인터페이스.</xref:System.IComparable> </xref:System.IComparable>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref> 읽기 전용입니다.       -또는- <xref href=&quot;System.Collections.SortedList&quot;> </xref> 크기가 고정된 되어 있습니다."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "메모리가 충분 한 사용 가능한 요소를 추가할는 <xref href=&quot;System.Collections.SortedList&quot;> </xref>합니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "예외를 throw 하는 비교자입니다."
  platform:
  - net462
- uid: System.Collections.SortedList.Capacity
  id: Capacity
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "용량을 가져오거나 설정 합니다.는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "용량에는 요소의 수가 하는 <xref:System.Collections.SortedList>개체를 저장할 수 있습니다.</xref:System.Collections.SortedList> <xref:System.Collections.SortedList.Count%2A>에서 요소를 실제로 <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> 의 수</xref:System.Collections.SortedList.Count%2A>       용량은 항상 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> 보다 크거나 같은 경우 경우 <xref:System.Collections.SortedList.Count%2A>요소를 추가 하는 동안 용량을 초과 하면, 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여 용량을 증가 시켜 자동으로.</xref:System.Collections.SortedList.Count%2A>       호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.SortedList.TrimToSize%2A>또는 용량 속성을 명시적으로 설정 하 여.</xref:System.Collections.SortedList.TrimToSize%2A> 용량 값을 명시적으로 설정 하는 경우 내부 배열에서 지정 된 용량에 맞게도 다시 할당 합니다.       이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. 속성을 설정 하는 O (`n`) 작업, 여기서 `n` 은 새 용량입니다."
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "요소의 수는는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체에 포함 될 수 있습니다."
  overload: System.Collections.SortedList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "할당 된 값을 사용 하면 현재 수의 요소 보다 작으면는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "시스템에서 사용할 수 있는 메모리가 부족 합니다."
  platform:
  - net462
- uid: System.Collections.SortedList.Clear
  id: Clear
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "모든 요소를 제거는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Collections.SortedList.Count%2A>0으로 설정 된 한 컬렉션의 요소에 다른 개체에 대 한 참조도 해제 됩니다.</xref:System.Collections.SortedList.Count%2A>       <xref:System.Collections.SortedList.Capacity%2A>변경 되지 않습니다.</xref:System.Collections.SortedList.Capacity%2A> 용량을 다시 설정 하는 <xref:System.Collections.SortedList>개체, 호출 <xref:System.Collections.SortedList.TrimToSize%2A>설정 또는 <xref:System.Collections.SortedList.Capacity%2A>속성을 직접.</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A> </xref:System.Collections.SortedList> 빈 트리밍 <xref:System.Collections.SortedList>의 용량 설정는 <xref:System.Collections.SortedList>기본 용량을.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_14_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_14_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_14_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.SortedList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체가 읽기 전용입니다.       -또는- <xref href=&quot;System.Collections.SortedList&quot;> </xref> 크기가 고정된 되어 있습니다."
  platform:
  - net462
- uid: System.Collections.SortedList.Clone
  id: Clone
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "단순 복사본을 만듭니다는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "컬렉션의 단순 복사본은 참조 형식 또는 값 형식, 이지만 참조에서 참조 하는 개체를 복사 하지 않습니다는 컬렉션의 요소에만 복사 합니다. 새 컬렉션에 대 한 참조는 원본 컬렉션에 대 한 참조를 가리키는 동일한 개체를 가리킵니다.       반면, 요소를 복사 하는 컬렉션의 전체 복사본 및 뿐만 아니라 해당 요소에서 직접 또는 간접적으로 참조 하는 모든 항목입니다.       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "단순 복사는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  overload: System.Collections.SortedList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "결정 여부는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체에 특정 키를 포함 합니다."
  remarks: "요소는 <xref:System.Collections.SortedList>개체의 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer>구현 될 때 지정 되는 <xref:System.Collections.SortedList>가 생성 따라는 <xref:System.IComparable>키 자체가 제공 되는 구현.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       구현 <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>.</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName> 포함 <xref:System.Collections.SortedList.ContainsKey%2A>.</xref:System.Collections.SortedList.ContainsKey%2A> 과 동일 하 게 작동       이 메서드는 이진 검색 알고리즘; 사용 따라서이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> .NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_12_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_12_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "찾을 수 있는 키의 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체에 지정 된 요소가 포함 되어 <code> key </code>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.SortedList.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "예외를 throw 하는 비교자입니다."
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "결정 여부는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체에 특정 키를 포함 합니다."
  remarks: "요소는 <xref:System.Collections.SortedList>개체의 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer>구현 될 때 지정 되는 <xref:System.Collections.SortedList>가 생성 따라는 <xref:System.IComparable>키 자체가 제공 되는 구현.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       와 동일 하 게 동작 하는이 메서드는 <xref:System.Collections.SortedList.Contains%2A>메서드.</xref:System.Collections.SortedList.Contains%2A>       이 메서드는 이진 검색 알고리즘; 사용 따라서이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> .NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_16_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_16_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_16_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "찾을 수 있는 키의 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체에 지정 된 요소가 포함 되어 <code> key </code>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.SortedList.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "예외를 throw 하는 비교자입니다."
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "결정 여부는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체에 특정 값이 포함 되어 있습니다."
  remarks: "요소는 <xref:System.Collections.SortedList>사용 하 여 지정 된 값 비교 개체는 <xref:System.Object.Equals%2A>메서드.</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       이 메서드는 선형 검색; 수행 따라서 평균 실행 시간은 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> 비례 즉,이 메서드는는 O (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> .NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_0_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_0_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_0_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "찾을 값은 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다. 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체에 지정 된 요소가 포함 되어 <code> value </code>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.SortedList.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "복사본 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 요소를 사용 하는&1; 차원 <xref:System.Array>배열에 지정된 된 인덱스에서 시작 하는 개체입니다.</xref:System.Array>"
  remarks: "키/값 쌍에 복사 되는 <xref:System.Array>열거자가 반복는 동일한 순서로 개체는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList> </xref:System.Array>       에 있는 키를 복사 하는 <xref:System.Collections.SortedList>를 사용 하 여 `SortedList.Keys.CopyTo`.</xref:System.Collections.SortedList>       값만 복사 하는 <xref:System.Collections.SortedList>를 사용 하 여 `SortedList.Values.CopyTo`.</xref:System.Collections.SortedList>       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.  \n  \n [!code-cs[Classic SortedList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.sor_20_1.cs)]\n [!code-cpp[Classic SortedList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.sor_20_1.cpp)]\n [!code-vb[Classic SortedList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_20_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "1 차원 <xref:System.Array>의 대상인 개체는 <xref:System.Collections.DictionaryEntry>에서 복사한 개체 <xref href=&quot;System.Collections.SortedList&quot;> </xref>.</xref:System.Collections.DictionaryEntry> </xref:System.Array> <xref:System.Array>0부터 시작 하는 인덱스가 있어야 합니다.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "인덱스는&0;부터 시작 `array` 복사가 시작 되는 합니다."
  overload: System.Collections.SortedList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>가&0; 보다 작습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>가 다차원 배열인 경우       -또는-소스에 있는 요소의 수 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체에서 사용 가능한 공간 보다 큽니다. <code>arrayIndex</code> 대상의 끝에 <code>array</code>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "소스의 형식을 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 대상의 형식으로 자동 캐스팅할 수 없는 <code> array </code>합니다."
  platform:
  - net462
- uid: System.Collections.SortedList.Count
  id: Count
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "에 포함 된 요소의 수를 가져옵니다는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "각 요소는으로 액세스할 수 있는 키/값 쌍을 <xref:System.Collections.DictionaryEntry>개체입니다.</xref:System.Collections.DictionaryEntry>       <xref:System.Collections.SortedList.Capacity%2A>요소의 수가 하는 <xref:System.Collections.SortedList>개체를 저장할 수 있습니다.</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Capacity%2A> Count가 실제로 있는 <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> 에 있는 요소 수       <xref:System.Collections.SortedList.Capacity%2A>개수 보다 크거나 같은 경우 항상입니다.</xref:System.Collections.SortedList.Capacity%2A> 개수를 초과 하는 경우 <xref:System.Collections.SortedList.Capacity%2A>요소를 추가 하는 동안 용량이 자동으로 증가 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여.</xref:System.Collections.SortedList.Capacity%2A>       이 속성의 값을 검색 하는 것은 o (1) 작업입니다."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "에 포함 된 요소의 수는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  overload: System.Collections.SortedList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  id: GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정된 된 인덱스에 값을 가져옵니다는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "인덱스 시퀀스 정렬 순서를 기준으로 합니다. 에 삽입 되는 요소가 추가 되 면 <xref:System.Collections.SortedList>올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</xref:System.Collections.SortedList> 요소를 제거 하는 경우 인덱싱도 그에 따라 조정 됩니다. 따라서 특정 키/값 쌍의 인덱스 요소가 추가 되거나에서 제거할 때 변경 될 수 있습니다는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList>       이 메서드는 o (1) 작업."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_8_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_8_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_8_1.vb)]"
  syntax:
    content: public virtual object GetByIndex (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "가져올 값의&0;부터 시작 하는 인덱스입니다."
    return:
      type: System.Object
      description: "지정된 된 인덱스에 있는 값은 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  overload: System.Collections.SortedList.GetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>유효한 인덱스 범위를 벗어났습니다는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  platform:
  - net462
- uid: System.Collections.SortedList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "반환 된 <xref:System.Collections.IDictionaryEnumerator>개체를 반복 하는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "`foreach` C# 언어의 (`for each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.  따라서 사용 하 여 `foreach` 열거자를 직접 조작 하는 대신이 좋습니다.       열거자는 컬렉션의에서 데이터를 읽는 데 사용할 수 있지만 기본 컬렉션을 수정 하는 사용할 수 없습니다.       처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다. <xref:System.Collections.IEnumerator.Reset%2A>또한이 위치로 복원 열거자를 가져옵니다.</xref:System.Collections.IEnumerator.Reset%2A>  이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>정의 되지 않습니다.</xref:System.Collections.IEnumerator.Current%2A> 따라서 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> 의 값을 읽기 전에 컬렉션의 첫 번째 요소로 열거자를</xref:System.Collections.IEnumerator.MoveNext%2A> 호출 해야 합니다.       <xref:System.Collections.IEnumerator.Current%2A>될 때까지 동일한 개체를 반환 <xref:System.Collections.IEnumerator.MoveNext%2A>또는 <xref:System.Collections.IEnumerator.Reset%2A>호출 됩니다.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>설정 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       경우 <xref:System.Collections.IEnumerator.MoveNext%2A>전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A>반환할 수도 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> 마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`, <xref:System.Collections.IEnumerator.Current%2A>정의 되지 않습니다.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>다시, 컬렉션의 첫 번째 요소를 호출할 수 있습니다 <xref:System.Collections.IEnumerator.Reset%2A>그 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> 설정 하려면       열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다. 컬렉션 변경 되 면 추가, 수정 또는 요소를 삭제와 같은 열거자는 무효화 하 고 해당 동작은 정의 되지 않습니다.       열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.  을 열거 하는 동안 스레드로부터 안전을 보장 하려면 전체 열거 동안 컬렉션을 잠글 수 있습니다.  컬렉션에 여러 스레드에서 읽기 및 쓰기에 대 한 액세스를 허용 하려면 사용자 지정 동기화를 구현 해야 합니다.       이 메서드는 o (1) 작업."
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "<xref:System.Collections.IDictionaryEnumerator>개체에 대 한는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.SortedList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정된 된 인덱스에서 키를 가져옵니다는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "인덱스 시퀀스 정렬 순서를 기준으로 합니다. 에 삽입 되는 요소가 추가 되 면 <xref:System.Collections.SortedList>올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</xref:System.Collections.SortedList> 요소를 제거 하는 경우 인덱싱도 그에 따라 조정 됩니다. 따라서 특정 키/값 쌍의 인덱스 요소가 추가 되거나에서 제거할 때 변경 될 수 있습니다는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList>       이 메서드는 o (1) 작업."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_19_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_19_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_19_1.vb)]"
  syntax:
    content: public virtual object GetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "가져올 키의&0;부터 시작 하는 인덱스입니다."
    return:
      type: System.Object
      description: "키의 지정된 된 인덱스에는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  overload: System.Collections.SortedList.GetKey*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>유효한 인덱스 범위를 벗어났습니다는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  platform:
  - net462
- uid: System.Collections.SortedList.GetKeyList
  id: GetKeyList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "키를 가져옵니다는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "반환 된 <xref:System.Collections.IList>개체의 키의 읽기 전용 보기는는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList> </xref:System.Collections.IList> 수정 내용은 기본 <xref:System.Collections.SortedList> <xref:System.Collections.IList>.</xref:System.Collections.IList> 에 바로 반영 됩니다</xref:System.Collections.SortedList>       반환 된 <xref:System.Collections.IList> <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> 키와 같은 순서로 정렬 되는</xref:System.Collections.IList> 요소       이 메서드는 비슷합니다는 <xref:System.Collections.SortedList.Keys%2A>속성이 아니라 반환 된 <xref:System.Collections.IList>개체 대신는 <xref:System.Collections.ICollection>개체.</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Keys%2A>       이 메서드는 o (1) 작업."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_1_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetKeyList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>키를 포함 하는 개체는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다.</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetKeyList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetValueList
  id: GetValueList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "값을 가져옵니다는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "반환 된 <xref:System.Collections.IList>개체는 값의 읽기 전용 보기는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList> </xref:System.Collections.IList> 수정 내용은 기본 <xref:System.Collections.SortedList> <xref:System.Collections.IList>.</xref:System.Collections.IList> 에 바로 반영 됩니다</xref:System.Collections.SortedList>       반환 된 <xref:System.Collections.IList> <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> 값과 같은 순서로 정렬 되는</xref:System.Collections.IList> 요소       이 메서드는 비슷합니다는 <xref:System.Collections.SortedList.Values%2A>속성이 아니라 반환 된 <xref:System.Collections.IList>개체 대신는 <xref:System.Collections.ICollection>개체.</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Values%2A>       이 메서드는 o (1) 작업."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_11_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_11_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_11_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetValueList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>값을 포함 하는 개체는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다.</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetValueList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  id: IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정된 된 키의&0;부터 시작 하는 인덱스를 반환 된 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "요소는 <xref:System.Collections.SortedList>개체의 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer>구현 될 때 지정 되는 <xref:System.Collections.SortedList>를 만들거나 따라는 <xref:System.IComparable>키 자체가 제공 되는 구현.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       인덱스 시퀀스 정렬 순서를 기준으로 합니다. 에 삽입 되는 요소가 추가 되 면 <xref:System.Collections.SortedList>올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</xref:System.Collections.SortedList> 요소를 제거 하는 경우 인덱싱도 그에 따라 조정 됩니다. 따라서 특정 키/값 쌍의 인덱스 요소가 추가 되거나 <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> 에서 제거할 때 변경 될 수 있습니다.       이 메서드는 이진 검색 알고리즘; 사용 따라서이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> .NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_2_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_2_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_2_1.cs)]"
  syntax:
    content: public virtual int IndexOfKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "찾을 수 있는 키의 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
    return:
      type: System.Int32
      description: "0부터 시작 인덱스는 <code> key </code> 매개 변수를 경우 <code> key </code> 에서 발견 되는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체, 그렇지 않으면-1입니다."
  overload: System.Collections.SortedList.IndexOfKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "예외를 throw 하는 비교자입니다."
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  id: IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정된 된 값 중 첫 번째 요소의&0;부터 시작 하는 인덱스를 반환 된 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "인덱스 시퀀스 정렬 순서를 기준으로 합니다. 에 삽입 되는 요소가 추가 되 면 <xref:System.Collections.SortedList>올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</xref:System.Collections.SortedList> 요소를 제거 하는 경우 인덱싱도 그에 따라 조정 됩니다. 따라서 특정 키/값 쌍의 인덱스 요소가 추가 되거나에서 제거할 때 변경 될 수 있습니다는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList>       요소는 <xref:System.Collections.SortedList>사용 하 여 지정 된 값이 비교는 <xref:System.Object.Equals%2A>메서드.</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       이 메서드는; 선형 검색을 사용합니다. 따라서이 메서드는는 O (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> .NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_5_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_5_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_5_1.cs)]"
  syntax:
    content: public virtual int IndexOfValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "찾을 값은 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다. 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Int32
      description: "첫 번째로 나타나는 항목의&0;부터 시작 인덱스는 <code> value </code> 매개 변수를 경우 <code> value </code> 에서 발견 되는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체, 그렇지 않으면-1입니다."
  overload: System.Collections.SortedList.IndexOfValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체 크기가 고정된 되어 있습니다."
  remarks: "컬렉션 크기가 고정된 된 컬렉션 만들어지기는 하지만 기존 요소를 수정할 수는 다음에 추가 하거나 제거할 요소의 수 없습니다.       크기가 고정된 된 컬렉션은 지정 된 추가 및 요소를 제거 하지 못하도록 하는 래퍼 컬렉션 따라서를 추가 하거나 제거할 요소를 포함 하 여 내부 컬렉션을 변경 하는 경우 고정 크기 컬렉션에 해당 변경 내용을 반영 합니다.       이 속성의 값을 검색 하는 것은 o (1) 작업입니다."
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체가 고정 되어 고, 그렇지 않으면 크기가 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.SortedList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체가 읽기 전용입니다."
  remarks: "읽기 전용 컬렉션에서는 컬렉션을 만든 후에 추가, 제거 또는 요소를 수정할 수 없습니다.       읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.       이 속성의 값을 검색 하는 것은 o (1) 작업입니다."
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체 읽기 전용, 되지 않았으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.SortedList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "에 대 한 액세스 여부를 나타내는 값을 가져옵니다는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체가 동기화 되었는지 (스레드로부터 안전함)."
  remarks: "스레드로부터 안전을 보장 하려면는 <xref:System.Collections.SortedList>개체에서 반환 되는 래퍼를 통해 모든 작업을 완료 해야 합니다는 <xref:System.Collections.SortedList.Synchronized%2A>메서드.</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList>       컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다."
  example:
  - "The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_1_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.sor_1_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.sor_1_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.sor_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우에 대 한 액세스는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체가 동기화 되었는지 (스레드로부터 안전함), 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.SortedList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "특정 키와 연결 된 값을 가져오거나 설정는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "Item 속성을 사용 하 여 다음 구문을 지정 하 여 컬렉션의 특정 요소에 액세스: `myCollection[key]`합니다.       에 존재 하지 않는 키의 값을 설정 하 여 새 요소를 추가 하려면이 속성을 사용할 수도 있습니다는 <xref:System.Collections.SortedList>개체 (예를 들어 `myCollection[&quot;myNonexistentKey&quot;] = myValue)`.</xref:System.Collections.SortedList> 그러나 지정된 된 키에 이미 있는 경우는 <xref:System.Collections.SortedList>, 이전 값을 덮어씁니다 항목 속성을 설정 합니다.</xref:System.Collections.SortedList> 반면,는 <xref:System.Collections.SortedList.Add%2A>메서드는 기존 요소를 수정 하지 않습니다.</xref:System.Collections.SortedList.Add%2A>       키 일 수 없습니다 `null`, 하지만 값이 될 수 있습니다. 구분 하기 위해 `null` 지정된 된 키를 찾을 수 없으므로 반환 되는 및 `null` 지정된 된 키의 값은 반환 되는 `null`를 사용 하 여는 <xref:System.Collections.SortedList.Contains%2A>메서드 또는 <xref:System.Collections.SortedList.ContainsKey%2A>목록에 키가 있는지 확인 하는 메서드.</xref:System.Collections.SortedList.ContainsKey%2A> </xref:System.Collections.SortedList.Contains%2A>       요소는 <xref:System.Collections.SortedList>키에 따라 정렬 특정에 따라 하나 <xref:System.Collections.IComparer>구현 될 때 지정 되는 <xref:System.Collections.SortedList>가 생성 따라는 <xref:System.IComparable>키 자체가 제공 되는 구현.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       C# 언어의 키워드를 사용 하 여 구현 하는 대신 인덱서를 정의 하는 <xref:System.Collections.SortedList.Keys%2A>속성.</xref:System.Collections.SortedList.Keys%2A> Visual Basic에서는 동일한 인덱싱 기능을 기본 속성으로 항목을 구현 합니다.       이 속성의 값을 검색 하는 O은 (로그 `n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> 속성을 설정 하는 O (로그 `n`) 키가 이미 <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> 작업 키 목록에 없는 경우 속성을 설정 하는 O (`n`) 정렬 되지 않은 데이터에 대 한 작업 (로그 `n`) 경우 새 요소 목록 끝에 추가 됩니다. 삽입으로 크기가 조정 작업이 O 되었습니다 (`n`)."
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "가져오거나 설정할 값과 연결 된 키입니다."
    return:
      type: System.Object
      description: "와 연결 된 값은 <code> key </code> 에서 매개 변수는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체가 있으면 <code> key </code> 이 고, 그렇지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.SortedList.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "속성을 설정 및 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체가 읽기 전용입니다.       -또는-속성이 설정 되어, <code> key </code> 컬렉션에 존재 하지 않는 및 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 크기가 고정된 되어 있습니다."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "메모리가 충분 한 사용 가능한 요소를 추가할는 <xref href=&quot;System.Collections.SortedList&quot;> </xref>합니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "예외를 throw 하는 비교자입니다."
  platform:
  - net462
- uid: System.Collections.SortedList.Keys
  id: Keys
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "키를 가져옵니다는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Collections.ICollection>개체의 키의 읽기 전용 보기는는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> 수정 내용은 기본 <xref:System.Collections.SortedList> <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> 에 바로 반영 됩니다</xref:System.Collections.SortedList>       <xref:System.Collections.ICollection> <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> 키와 같은 순서로 정렬 되는</xref:System.Collections.ICollection> 요소       이 속성은 비슷합니다는 <xref:System.Collections.SortedList.GetKeyList%2A>메서드이지만 반환은 <xref:System.Collections.ICollection>개체가 아니라는 <xref:System.Collections.IList>개체입니다.</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetKeyList%2A>       이 메서드는 o (1) 작업."
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>키를 포함 하는 개체는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다.</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정된 된 키를 가진 요소를 제거는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "경우는 <xref:System.Collections.SortedList>개체 지정된 키를 가진 요소를 포함 하지 않습니다는 <xref:System.Collections.SortedList>변경 되지 않습니다.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 예외가 throw 되지 않습니다.       목록 처럼 연속 된 요소 컬렉션에서 제거 된 요소 다음에 오는 요소는 빈된 자리를 차지 하도록 위로 이동 합니다. 컬렉션은 지정 된 경우 이동 되는 요소의 인덱스도 업데이트 됩니다. 요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화 되어 있는 컬렉션에는 이러한 동작이 적용 되지 않습니다.       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_6_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_6_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_6_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "제거할 요소의 키입니다."
  overload: System.Collections.SortedList.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체가 읽기 전용입니다.       -또는- <xref href=&quot;System.Collections.SortedList&quot;> </xref> 크기가 고정된 되어 있습니다."
  platform:
  - net462
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정된 된 인덱스에 요소를 제거는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "인덱스 시퀀스 정렬 순서를 기준으로 합니다. 에 삽입 되는 요소가 추가 되 면 <xref:System.Collections.SortedList>올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</xref:System.Collections.SortedList> 요소를 제거 하는 경우 인덱싱도 그에 따라 조정 됩니다. 따라서 특정 키/값 쌍의 인덱스 요소가 추가 되거나에서 제거할 때 변경 될 수 있습니다는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList>       목록 처럼 연속 된 요소 컬렉션에서 제거 된 요소 다음에 오는 요소는 빈된 자리를 차지 하도록 위로 이동 합니다. 컬렉션은 지정 된 경우 이동 되는 요소의 인덱스도 업데이트 됩니다. 요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화 되어 있는 컬렉션에는 이러한 동작이 적용 되지 않습니다.       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_17_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_17_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_17_1.vb)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "제거할 요소의&0;부터 시작 하는 인덱스입니다."
  overload: System.Collections.SortedList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>유효한 인덱스 범위를 벗어났습니다는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref> 읽기 전용입니다.       -또는- <xref href=&quot;System.Collections.SortedList&quot;> </xref> 크기가 고정된 되어 있습니다."
  platform:
  - net462
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  id: SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "특정 인덱스에 값을 대체는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "인덱스 시퀀스 정렬 순서를 기준으로 합니다. 에 삽입 되는 요소가 추가 되 면 <xref:System.Collections.SortedList>올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</xref:System.Collections.SortedList> 요소를 제거 하는 경우 인덱싱도 그에 따라 조정 됩니다. 따라서 특정 키/값 쌍의 인덱스 요소가 추가 되거나에서 제거할 때 변경 될 수 있습니다는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList>       이 메서드는 o (1) 작업."
  example:
  - "The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.  \n  \n [!code-vb[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_13_1.vb)]\n [!code-cs[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_13_1.cs)]\n [!code-cpp[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_13_1.cpp)]"
  syntax:
    content: public virtual void SetByIndex (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "0부터 시작 하는 인덱스를 저장할 `value`합니다."
    - id: value
      type: System.Object
      description: "<xref:System.Object>를 저장 하 고는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.SortedList.SetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>유효한 인덱스 범위를 벗어났습니다는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  platform:
  - net462
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  id: Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "에 대 한 동기화 (스레드로부터 안전한 지) 래퍼를 반환 합니다.는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "스레드로부터 안전을 보장 하려면는 <xref:System.Collections.SortedList>개체를 통해이 래퍼만 모든 작업을 완료 해야 합니다.</xref:System.Collections.SortedList>       컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.sor_10_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.sor_10_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.sor_10_1.vb)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.sor_10_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.sor_10_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_10_2.vb)]"
  syntax:
    content: public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);
    parameters:
    - id: list
      type: System.Collections.SortedList
      description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체를 동기화 합니다."
    return:
      type: System.Collections.SortedList
      description: "A (스레드로부터 안전한 지) 래퍼에 대 한 동기화는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  overload: System.Collections.SortedList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.SortedList.SyncRoot
  id: SyncRoot
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체를 가져옵니다는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "동기화 된 버전을 만들려면는 <xref:System.Collections.SortedList>개체를 가져오려면는 <xref:System.Collections.SortedList.Synchronized%2A>메서드.</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList> 하지만 파생된 클래스의 동기화 된 버전을 제공할 수 있습니다는 <xref:System.Collections.SortedList>SyncRoot 속성을 사용 하 여.</xref:System.Collections.SortedList> 동기화 하는 코드의 SyncRoot에 대 한 작업을 수행 해야는 <xref:System.Collections.SortedList>, <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> 으로 만들어지므로</xref:System.Collections.SortedList> 이렇게 하면 다른 개체에서 파생 된 컬렉션의 적절 한 작업입니다. 특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList>       컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_0_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_0_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_0_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  overload: System.Collections.SortedList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "반환 된 <xref:System.Collections.IEnumerator>반복 하는 <xref href=&quot;System.Collections.SortedList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "[Visual Basic, C#]       `foreach` C# 언어의 (`for each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.  따라서 사용 하 여 `foreach` 열거자를 직접 조작 하는 대신이 좋습니다.       열거자는 컬렉션의에서 데이터를 읽는 데 사용할 수 있지만 기본 컬렉션을 수정 하는 사용할 수 없습니다.       처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다. <xref:System.Collections.IEnumerator.Reset%2A>또한이 위치로 복원 열거자를 가져옵니다.</xref:System.Collections.IEnumerator.Reset%2A> 이 위치에서, 호출 <xref:System.Collections.IEnumerator.Current%2A>예외를 throw 합니다.</xref:System.Collections.IEnumerator.Current%2A> 따라서 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> 의 값을 읽기 전에 컬렉션의 첫 번째 요소로 열거자를</xref:System.Collections.IEnumerator.MoveNext%2A> 호출 해야 합니다.       <xref:System.Collections.IEnumerator.Current%2A>될 때까지 동일한 개체를 반환 <xref:System.Collections.IEnumerator.MoveNext%2A>또는 <xref:System.Collections.IEnumerator.Reset%2A>호출 됩니다.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>설정 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       경우 <xref:System.Collections.IEnumerator.MoveNext%2A>전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A>반환할 수도 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> 마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`호출, <xref:System.Collections.IEnumerator.Current%2A>예외를 throw 합니다.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>다시, 컬렉션의 첫 번째 요소를 호출할 수 있습니다 <xref:System.Collections.IEnumerator.Reset%2A>그 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> 설정 하려면       열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다. 예: 추가, 수정 또는 요소를 삭제, 열거자가 복구할 수 없게 무효화 및 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A> <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> throw</xref:System.Collections.IEnumerator.Reset%2A> 또는</xref:System.Collections.IEnumerator.MoveNext%2A> 을 다음에 호출할 컬렉션 변경 될 경우 사이 컬렉션이 수정 되는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A>및 <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>열거자가 이미 무효로 되 었 하는 경우에 설정 하는 요소를 반환 합니다.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다.       이 메서드는 o (1) 작업."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.SortedList&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.TrimToSize
  id: TrimToSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "용량을 실제로 수의 요소는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "이 메서드는 새 요소가 컬렉션에 추가 될 경우 컬렉션의 메모리 오버 헤드를 최소화할 데 사용할 수 있습니다.       다시 설정 하는 <xref:System.Collections.SortedList>를 초기 상태로 호출 개체는 <xref:System.Collections.SortedList.Clear%2A>메서드 TrimToSize를 호출 하기 전에.</xref:System.Collections.SortedList.Clear%2A> </xref:System.Collections.SortedList> 빈 트리밍 <xref:System.Collections.SortedList>의 용량 설정는 <xref:System.Collections.SortedList>기본 용량을.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_3_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_3_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_3_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.SortedList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체가 읽기 전용입니다.       -또는- <xref href=&quot;System.Collections.SortedList&quot;> </xref> 크기가 고정된 되어 있습니다."
  platform:
  - net462
- uid: System.Collections.SortedList.Values
  id: Values
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "값을 가져옵니다는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Collections.ICollection>개체는 값의 읽기 전용 보기는 <xref:System.Collections.SortedList>개체입니다.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> 수정 내용은 기본 <xref:System.Collections.SortedList> <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> 에 바로 반영 됩니다</xref:System.Collections.SortedList>       <xref:System.Collections.ICollection> <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> 값과 같은 순서로 정렬 되는</xref:System.Collections.ICollection> 요소       이 속성은 비슷합니다는 <xref:System.Collections.SortedList.GetValueList%2A>메서드이지만 반환은 <xref:System.Collections.ICollection>개체가 아니라는 <xref:System.Collections.IList>개체입니다.</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetValueList%2A>       이 메서드는 o (1) 작업."
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>값을 포함 하는 개체는 <xref href=&quot;System.Collections.SortedList&quot;> </xref> 개체입니다.</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Collections.SortedList.#ctor
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.SortedList.#ctor(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
- uid: System.Collections.SortedList.Capacity
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
- uid: System.Collections.SortedList.Clear
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
- uid: System.Collections.SortedList.Clone
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
- uid: System.Collections.SortedList.Contains(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.SortedList.Count
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
- uid: System.Collections.SortedList.GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.SortedList.GetKey(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
- uid: System.Collections.SortedList.GetKeyList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.SortedList.GetValueList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
- uid: System.Collections.SortedList.IsFixedSize
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
- uid: System.Collections.SortedList.Keys
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.SortedList.Remove(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
- uid: System.Collections.SortedList
  parent: System.Collections
  isExternal: false
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
- uid: System.Collections.SortedList.SyncRoot
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.SortedList.TrimToSize
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
- uid: System.Collections.SortedList.Values
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
- uid: System.Collections.SortedList.#ctor*
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList
  nameWithType: SortedList.SortedList
- uid: System.Collections.SortedList.Add*
  parent: System.Collections.SortedList
  isExternal: false
  name: Add
  nameWithType: SortedList.Add
- uid: System.Collections.SortedList.Capacity*
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
- uid: System.Collections.SortedList.Clear*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear
  nameWithType: SortedList.Clear
- uid: System.Collections.SortedList.Clone*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone
  nameWithType: SortedList.Clone
- uid: System.Collections.SortedList.Contains*
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains
  nameWithType: SortedList.Contains
- uid: System.Collections.SortedList.ContainsKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey
  nameWithType: SortedList.ContainsKey
- uid: System.Collections.SortedList.ContainsValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue
  nameWithType: SortedList.ContainsValue
- uid: System.Collections.SortedList.CopyTo*
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo
  nameWithType: SortedList.CopyTo
- uid: System.Collections.SortedList.Count*
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
- uid: System.Collections.SortedList.GetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex
  nameWithType: SortedList.GetByIndex
- uid: System.Collections.SortedList.GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator
  nameWithType: SortedList.GetEnumerator
- uid: System.Collections.SortedList.GetKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey
  nameWithType: SortedList.GetKey
- uid: System.Collections.SortedList.GetKeyList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList
  nameWithType: SortedList.GetKeyList
- uid: System.Collections.SortedList.GetValueList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList
  nameWithType: SortedList.GetValueList
- uid: System.Collections.SortedList.IndexOfKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey
  nameWithType: SortedList.IndexOfKey
- uid: System.Collections.SortedList.IndexOfValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue
  nameWithType: SortedList.IndexOfValue
- uid: System.Collections.SortedList.IsFixedSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item*
  parent: System.Collections.SortedList
  isExternal: false
  name: Item
  nameWithType: SortedList.Item
- uid: System.Collections.SortedList.Keys*
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
- uid: System.Collections.SortedList.Remove*
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove
  nameWithType: SortedList.Remove
- uid: System.Collections.SortedList.RemoveAt*
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt
  nameWithType: SortedList.RemoveAt
- uid: System.Collections.SortedList.SetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex
  nameWithType: SortedList.SetByIndex
- uid: System.Collections.SortedList.Synchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized
  nameWithType: SortedList.Synchronized
- uid: System.Collections.SortedList.SyncRoot*
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.SortedList.TrimToSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize
  nameWithType: SortedList.TrimToSize
- uid: System.Collections.SortedList.Values*
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
