### YamlMime:ManagedReference
items:
- uid: System.Net.Http.MessageProcessingHandler
  id: MessageProcessingHandler
  children:
  - System.Net.Http.MessageProcessingHandler.#ctor
  - System.Net.Http.MessageProcessingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.MessageProcessingHandler.ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.MessageProcessingHandler.ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)
  - System.Net.Http.MessageProcessingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  name: MessageProcessingHandler
  nameWithType: MessageProcessingHandler
  fullName: System.Net.Http.MessageProcessingHandler
  type: Class
  summary: "일부 작은 요청 및/또는 응답 메시지 처리만 수행 하는 처리기에 대 한 기본 형식입니다."
  remarks: "응답 메시지의 실제 생성 내부 처리기에 위임 됩니다. MessageProcessingHandler 요청 및 응답 메시지에는 작업은 빠른 되므로 처리기는 비동기 작업을 필요 하지 않은 경우에 유용 합니다.       가장 일반적인 사용법은이 클래스에서 파생 하 고 재정의 <xref:System.Net.Http.MessageProcessingHandler.ProcessRequest%2A>및 <xref:System.Net.Http.MessageProcessingHandler.ProcessResponse%2A>메서드.</xref:System.Net.Http.MessageProcessingHandler.ProcessResponse%2A> </xref:System.Net.Http.MessageProcessingHandler.ProcessRequest%2A>"
  syntax:
    content: 'public abstract class MessageProcessingHandler : System.Net.Http.DelegatingHandler'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  - System.Net.Http.DelegatingHandler
  implements: []
  inheritedMembers:
  - System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  - System.Net.Http.DelegatingHandler.InnerHandler
  - System.Net.Http.HttpMessageHandler.Dispose
  platform:
  - net462
- uid: System.Net.Http.MessageProcessingHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  name: MessageProcessingHandler()
  nameWithType: MessageProcessingHandler.MessageProcessingHandler()
  fullName: System.Net.Http.MessageProcessingHandler.MessageProcessingHandler()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "인스턴스를 만듭니다는 <xref href=&quot;System.Net.Http.MessageProcessingHandler&quot;> </xref> 클래스입니다."
  syntax:
    content: protected MessageProcessingHandler ();
    parameters: []
  overload: System.Net.Http.MessageProcessingHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.MessageProcessingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  name: MessageProcessingHandler(HttpMessageHandler)
  nameWithType: MessageProcessingHandler.MessageProcessingHandler(HttpMessageHandler)
  fullName: System.Net.Http.MessageProcessingHandler.MessageProcessingHandler(HttpMessageHandler)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "인스턴스를 만듭니다는 <xref href=&quot;System.Net.Http.MessageProcessingHandler&quot;> </xref> 클래스 특정 내부 처리기를 사용 합니다."
  syntax:
    content: protected MessageProcessingHandler (System.Net.Http.HttpMessageHandler innerHandler);
    parameters:
    - id: innerHandler
      type: System.Net.Http.HttpMessageHandler
      description: "HTTP 응답 메시지 처리를 담당 하는 내부 처리기입니다."
  overload: System.Net.Http.MessageProcessingHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.MessageProcessingHandler.ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  name: ProcessRequest(HttpRequestMessage,CancellationToken)
  nameWithType: MessageProcessingHandler.ProcessRequest(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.ProcessRequest(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "서버에 전송 된 각 요청에 처리를 수행 합니다."
  remarks: "응용 프로그램을 서버에 전송 하기 전에 HTTP 요청 메시지의 사용자 지정 처리를 구현 하려면이 메서드를 재정의 합니다."
  syntax:
    content: protected abstract System.Net.Http.HttpRequestMessage ProcessRequest (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "처리할 HTTP 요청 메시지입니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "취소의 통지를 받기 위해 다른 개체나 스레드에서 사용할 수 있는 취소 토큰입니다."
    return:
      type: System.Net.Http.HttpRequestMessage
      description: "처리 된 HTTP 요청 메시지입니다."
  overload: System.Net.Http.MessageProcessingHandler.ProcessRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.MessageProcessingHandler.ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)
  id: ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  name: ProcessResponse(HttpResponseMessage,CancellationToken)
  nameWithType: MessageProcessingHandler.ProcessResponse(HttpResponseMessage,CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.ProcessResponse(HttpResponseMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "서버에서 각 응답 처리를 수행 합니다."
  remarks: "응용 프로그램 서버에서 받은 HTTP 응답 메시지의 사용자 지정 처리를 구현 하려면이 메서드를 재정의 합니다."
  syntax:
    content: protected abstract System.Net.Http.HttpResponseMessage ProcessResponse (System.Net.Http.HttpResponseMessage response, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: response
      type: System.Net.Http.HttpResponseMessage
      description: "HTTP 응답 메시지 처리입니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "취소의 통지를 받기 위해 다른 개체나 스레드에서 사용할 수 있는 취소 토큰입니다."
    return:
      type: System.Net.Http.HttpResponseMessage
      description: "처리 된 HTTP 응답 메시지입니다."
  overload: System.Net.Http.MessageProcessingHandler.ProcessResponse*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.MessageProcessingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: MessageProcessingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "비동기 작업으로 서버에 보내도록 내부 처리기에 HTTP 요청을 보냅니다."
  remarks: "이 작업을 차단 하지 않습니다. SendAsync 메서드의 재정의 가능한 구현을이 비동기 작업으로 서버에 보낼 HTTP 요청을 내부 처리기를 전달 합니다."
  syntax:
    content: protected override sealed System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "서버에 보낼 HTTP 요청 메시지입니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "취소의 통지를 받기 위해 다른 개체나 스레드에서 사용할 수 있는 취소 토큰입니다."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "비동기 작업을 나타내는 작업 개체입니다."
  overload: System.Net.Http.MessageProcessingHandler.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Net.Http.DelegatingHandler
  isExternal: false
  name: System.Net.Http.DelegatingHandler
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Http.MessageProcessingHandler.#ctor
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: MessageProcessingHandler()
  nameWithType: MessageProcessingHandler.MessageProcessingHandler()
  fullName: System.Net.Http.MessageProcessingHandler.MessageProcessingHandler()
- uid: System.Net.Http.MessageProcessingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: MessageProcessingHandler(HttpMessageHandler)
  nameWithType: MessageProcessingHandler.MessageProcessingHandler(HttpMessageHandler)
  fullName: System.Net.Http.MessageProcessingHandler.MessageProcessingHandler(HttpMessageHandler)
- uid: System.Net.Http.HttpMessageHandler
  parent: System.Net.Http
  isExternal: false
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
- uid: System.Net.Http.MessageProcessingHandler.ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: ProcessRequest(HttpRequestMessage,CancellationToken)
  nameWithType: MessageProcessingHandler.ProcessRequest(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.ProcessRequest(HttpRequestMessage,CancellationToken)
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.MessageProcessingHandler.ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: ProcessResponse(HttpResponseMessage,CancellationToken)
  nameWithType: MessageProcessingHandler.ProcessResponse(HttpResponseMessage,CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.ProcessResponse(HttpResponseMessage,CancellationToken)
- uid: System.Net.Http.HttpResponseMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpResponseMessage
  nameWithType: HttpResponseMessage
  fullName: System.Net.Http.HttpResponseMessage
- uid: System.Net.Http.MessageProcessingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: MessageProcessingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.MessageProcessingHandler.#ctor*
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: MessageProcessingHandler
  nameWithType: MessageProcessingHandler.MessageProcessingHandler
- uid: System.Net.Http.MessageProcessingHandler.ProcessRequest*
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: ProcessRequest
  nameWithType: MessageProcessingHandler.ProcessRequest
- uid: System.Net.Http.MessageProcessingHandler.ProcessResponse*
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: ProcessResponse
  nameWithType: MessageProcessingHandler.ProcessResponse
- uid: System.Net.Http.MessageProcessingHandler.SendAsync*
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: SendAsync
  nameWithType: MessageProcessingHandler.SendAsync
