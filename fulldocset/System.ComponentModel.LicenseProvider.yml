### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicenseProvider
  id: LicenseProvider
  children:
  - System.ComponentModel.LicenseProvider.#ctor
  - System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  langs:
  - csharp
  name: LicenseProvider
  nameWithType: LicenseProvider
  fullName: System.ComponentModel.LicenseProvider
  type: Class
  summary: "제공 된 <xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;> </xref> 라이선스 공급자를 구현 하기 위한 기본 클래스입니다."
  remarks: ''
  example:
  - "The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a LicenseProvider that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \n  \n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._164_1.cs)]\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._164_1.vb)]\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._164_1.cpp)]"
  syntax:
    content: public abstract class LicenseProvider
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseProvider.#ctor
  id: '#ctor'
  parent: System.ComponentModel.LicenseProvider
  langs:
  - csharp
  name: LicenseProvider()
  nameWithType: LicenseProvider.LicenseProvider()
  fullName: System.ComponentModel.LicenseProvider.LicenseProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.ComponentModel.LicenseProvider&quot;> </xref> 클래스입니다."
  syntax:
    content: protected LicenseProvider ();
    parameters: []
  overload: System.ComponentModel.LicenseProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  id: GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  parent: System.ComponentModel.LicenseProvider
  langs:
  - csharp
  name: GetLicense(LicenseContext,Type,Object,Boolean)
  nameWithType: LicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  fullName: System.ComponentModel.LicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "파생된 클래스에서 재정의 되 면는 컨텍스트와 라이선스가 거부 예외를 throw 하는지 여부를 지정 하면 인스턴스 또는 구성 요소를 형식에 대 한 라이선스를 가져옵니다."
  syntax:
    content: public abstract System.ComponentModel.License GetLicense (System.ComponentModel.LicenseContext context, Type type, object instance, bool allowExceptions);
    parameters:
    - id: context
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> 사용 허가 받은 개체를 사용할 수 있습니다를 지정 하는 합니다."
    - id: type
      type: System.Type
      description: "A <xref:System.Type>라이선스를 요청 하는 구성 요소를 나타내는입니다.</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "라이선스를 요청 하는 개체입니다."
    - id: allowExceptions
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.ComponentModel.LicenseException&quot;> </xref> 구성 요소; 라이선스를 부여할 수 없는 경우 throw 그렇지 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.ComponentModel.License
      description: "A valid <xref href=&quot;System.ComponentModel.License&quot;></xref>."
  overload: System.ComponentModel.LicenseProvider.GetLicense*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ComponentModel.LicenseProvider.#ctor
  parent: System.ComponentModel.LicenseProvider
  isExternal: false
  name: LicenseProvider()
  nameWithType: LicenseProvider.LicenseProvider()
  fullName: System.ComponentModel.LicenseProvider.LicenseProvider()
- uid: System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  parent: System.ComponentModel.LicenseProvider
  isExternal: false
  name: GetLicense(LicenseContext,Type,Object,Boolean)
  nameWithType: LicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  fullName: System.ComponentModel.LicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.LicenseProvider.#ctor*
  parent: System.ComponentModel.LicenseProvider
  isExternal: false
  name: LicenseProvider
  nameWithType: LicenseProvider.LicenseProvider
- uid: System.ComponentModel.LicenseProvider.GetLicense*
  parent: System.ComponentModel.LicenseProvider
  isExternal: false
  name: GetLicense
  nameWithType: LicenseProvider.GetLicense
