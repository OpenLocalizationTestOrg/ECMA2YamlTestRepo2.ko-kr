### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Selectors.SecurityTokenResolver
  id: SecurityTokenResolver
  children:
  - System.IdentityModel.Selectors.SecurityTokenResolver.#ctor
  - System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityToken},System.Boolean)
  - System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)
  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier)
  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)
  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)
  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)
  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)
  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)
  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)
  langs:
  - csharp
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver
  type: Class
  summary: "키 식별자 나 키 식별자 절이 있는 경우 보안 토큰이 나 키를 검색할 수 있는 유틸리티 클래스를 나타냅니다."
  remarks: "사용 하 여 키 식별자 나 키 식별자 절이 있는 경우 키나 보안을 검색할 SecurityTokenResolver 클래스 토큰입니다. <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>및 <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A>메서드 키 식별자 나 키 식별자 절을 토큰을 검색 합니다.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> </xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A> <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A>및 <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A>하는 키 식별자 절이 있는 키를 검색 합니다.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A> </xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A> 포함 된 메서드는 `Try` 반환 접두사 `false` 은 성공적으로 검색 하는 경우 반면 없는 메서드는 `Try` 접두사 예외를 throw 합니다."
  syntax:
    content: 'public abstract class SecurityTokenResolver : System.IdentityModel.Configuration.ICustomIdentityConfiguration'
  inheritance:
  - System.Object
  implements:
  - System.IdentityModel.Configuration.ICustomIdentityConfiguration
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  name: SecurityTokenResolver()
  nameWithType: SecurityTokenResolver.SecurityTokenResolver()
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.SecurityTokenResolver()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Selectors.SecurityTokenResolver&quot;> </xref> 클래스입니다."
  syntax:
    content: protected SecurityTokenResolver ();
    parameters: []
  overload: System.IdentityModel.Selectors.SecurityTokenResolver.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityToken},System.Boolean)
  id: CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityToken},System.Boolean)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  name: CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>,Boolean)
  nameWithType: SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>,Boolean)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "지정 된 보안 토큰에 대 한 기본 보안 토큰 확인자를 만듭니다."
  remarks: "이 메서드에서 반환 되는 보안 토큰 확인자를 사용 하 여는 <xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>및 <xref:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause%2A>키 식별자와 키 식별자 절을 확인 하도록 지정 된 보안 토큰에 대 한 메서드.</xref:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause%2A> </xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>"
  syntax:
    content: public static System.IdentityModel.Selectors.SecurityTokenResolver CreateDefaultSecurityTokenResolver (System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Tokens.SecurityToken> tokens, bool canMatchLocalId);
    parameters:
    - id: tokens
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityToken}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; 형식의 <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref> 보안 토큰을 보안 토큰 확인 자가 키 식별자 및 키 식별자 절을 해결할 수의 집합이 들어 있는입니다."
    - id: canMatchLocalId
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>해결 하려면는 <xref uid=&quot;langword_csharp_&lt;SecurityTokenReference&gt;&quot; name=&quot;&lt;SecurityTokenReference&gt;&quot; href=&quot;&quot;> </xref> 키 식별자 절 어딘가에 고, 그렇지 않으면 SOAP 메시지에 있는 보안 키를 참조 하는 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.IdentityModel.Selectors.SecurityTokenResolver
      description: "A <xref href=&quot;System.IdentityModel.Selectors.SecurityTokenResolver&quot;> </xref> 키 식별자 및 절에 지정 된 보안 토큰을 일치 하는 확인 되는 <code> tokens </code> 매개 변수입니다."
  overload: System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)
  id: LoadCustomConfiguration(System.Xml.XmlNodeList)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  name: LoadCustomConfiguration(XmlNodeList)
  nameWithType: SecurityTokenResolver.LoadCustomConfiguration(XmlNodeList)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration(XmlNodeList)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "파생된 클래스에서 재정의 되 면 사용자 지정 구성을 XML에서 로드 합니다."
  remarks: "기본적으로에 <xref:System.NotImplementedException>.</xref:System.NotImplementedException> throw 파생된 클래스에서 기능을 제공 하려면이 메서드를 재정의할 수 있습니다."
  syntax:
    content: public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);
    parameters:
    - id: nodelist
      type: System.Xml.XmlNodeList
      description: "사용자 지정 구성 요소입니다."
  overload: System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  id: ResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  name: ResolveSecurityKey(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenResolver.ResolveSecurityKey(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(SecurityKeyIdentifierClause)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "지정 된 키 식별자 절에서 참조 되는 키를 가져옵니다."
  remarks: "<xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A>및 ResolveSecurityKey 메서드는 키 식별자 절을 키로 확인할 수 없는 경우 수행 하는 작업이 서로 다릅니다.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A> <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A>메서드 반환 `false`, ResolveSecurityKey 메서드에서 예외를 throw 하는 반면,.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A>"
  syntax:
    content: public System.IdentityModel.Tokens.SecurityKey ResolveSecurityKey (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> 에 대 한 키를 검색 합니다."
    return:
      type: System.IdentityModel.Tokens.SecurityKey
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> 지정 된 키 식별자 절에서 참조 하는 키입니다."
  overload: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyIdentifierClause</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "에 지정 된 키 식별자 절에 대 한 키를 검색할 수 없습니다는 <code> keyIdentifierClause </code> 매개 변수입니다."
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier)
  id: ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  name: ResolveToken(SecurityKeyIdentifier)
  nameWithType: SecurityTokenResolver.ResolveToken(SecurityKeyIdentifier)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(SecurityKeyIdentifier)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "지정된 된 키 식별자에 포함 된 보안 키 식별자 절 중 하 나와 일치 하는 보안 토큰을 검색 합니다."
  remarks: "<xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A>및 ResolveToken 메서드 키 식별자를 보안 토큰으로 확인할 수 없는 경우 수행 하는 작업이 서로 다릅니다.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A>메서드 반환 `false`, ResolveToken 메서드에서 예외를 throw 하는 반면,.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A>"
  syntax:
    content: public System.IdentityModel.Tokens.SecurityToken ResolveToken (System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier);
    parameters:
    - id: keyIdentifier
      type: System.IdentityModel.Tokens.SecurityKeyIdentifier
      description: "<xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;> </xref> 에 대 한 보안 토큰을 만들어야 합니다."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref> 지정된 된 키 식별자를 나타내는입니다."
  overload: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyIdentifier</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "지정된 된 키 식별자에 대 한 보안 토큰을 만들 수 없습니다."
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  id: ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  name: ResolveToken(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenResolver.ResolveToken(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(SecurityKeyIdentifierClause)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "지정 된 키 식별자 절과 일치 하는 보안 토큰을 검색 합니다."
  remarks: "<xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A>및 ResolveToken 메서드는 키 식별자 절을 보안 토큰으로 확인할 수 없는 경우 수행 하는 작업이 서로 다릅니다.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A>메서드 반환 `false`, ResolveToken 메서드에서 예외를 throw 하는 반면,.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A>"
  syntax:
    content: public System.IdentityModel.Tokens.SecurityToken ResolveToken (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "<xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> 에 대 한 보안 토큰을 만들어야 합니다."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref> 지정 된 키 식별자 절을 나타내는입니다."
  overload: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)
  id: TryResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  name: TryResolveSecurityKey(SecurityKeyIdentifierClause,SecurityKey)
  nameWithType: SecurityTokenResolver.TryResolveSecurityKey(SecurityKeyIdentifierClause,SecurityKey)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(SecurityKeyIdentifierClause,SecurityKey)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "지정 된 키 식별자 절에서 참조 되는 키를 검색 하려고 합니다."
  remarks: "TryResolveSecurityKey 및 <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A>메서드는 키 식별자 절을 키로 확인할 수 없는 경우 수행 하는 작업이 서로 다릅니다.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A> TryResolveSecurityKey 메서드가 반환 `false`반면는 <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A>메서드에서 예외를 throw 합니다.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A>"
  syntax:
    content: public bool TryResolveSecurityKey (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityKey key);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> 에 대 한 키를 검색 합니다."
    - id: key
      type: System.IdentityModel.Tokens.SecurityKey
      description: "이 메서드가 반환 될 때를 포함 한 <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> 지정 된 키 식별자 절에서 참조 되는 키가 들어 있는입니다. 이 매개 변수는 초기화 되지 않은 상태로 전달 됩니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 키 식별자 절;에 대 한는 키를 검색 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyIdentifierClause</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)
  id: TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)
  nameWithType: SecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "지정 된 키 식별자 절에서 참조 되는 키를 검색 하려고 합니다."
  remarks: "TryResolveSecurityKeyCore 메서드에 의해 호출 됩니다는 <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A>및 <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A>메서드.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A> </xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A>"
  syntax:
    content: protected abstract bool TryResolveSecurityKeyCore (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityKey key);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> 에 대 한 키를 검색 합니다."
    - id: key
      type: System.IdentityModel.Tokens.SecurityKey
      description: "이 메서드가 반환 될 때를 포함 한 <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> 지정 된 키 식별자 절에서 참조 되는 키가 들어 있는입니다. 이 매개 변수는 초기화 되지 않은 상태로 전달 됩니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 키 식별자 절;에 대 한는 키를 검색 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  name: TryResolveToken(SecurityKeyIdentifier,SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifier,SecurityToken)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifier,SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "지정된 된 키 식별자에 포함 된 키 식별자 절 중 하 나와 일치 하는 보안 토큰을 검색 하려고 합니다."
  remarks: "TryResolveToken 및 <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>메서드 키 식별자를 보안 토큰으로 확인할 수 없는 경우 수행 하는 작업이 서로 다릅니다.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A> TryResolveToken 메서드가 반환 `false`반면는 <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>메서드에서 예외를 throw 합니다.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>"
  syntax:
    content: public bool TryResolveToken (System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier, out System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: keyIdentifier
      type: System.IdentityModel.Tokens.SecurityKeyIdentifier
      description: "<xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;> </xref> 에 대 한 보안 토큰을 만들어야 합니다."
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "이 메서드가 반환 될 때를 포함 한 <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref> 지정된 된 키 식별자를 나타내는입니다. 이 매개 변수는 초기화 되지 않은 상태로 전달 됩니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정된 된 키 식별자;에 대 한 보안 토큰을 검색할 수 있습니다 때 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyIdentifier</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  name: TryResolveToken(SecurityKeyIdentifierClause,SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifierClause,SecurityToken)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifierClause,SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "지정 된 키 식별자 절과 일치 하는 보안 토큰을 검색 하려고 합니다."
  remarks: "TryResolveToken 및 <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>메서드는 키 식별자 절을 보안 토큰으로 확인할 수 없는 경우 수행 하는 작업이 서로 다릅니다.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A> TryResolveToken 메서드가 반환 `false`반면는 <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>메서드에서 예외를 throw 합니다.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>"
  syntax:
    content: public bool TryResolveToken (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "<xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> 에 대 한 보안 토큰을 만들어야 합니다."
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "이 메서드가 반환 될 때를 포함 한 <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref> 지정 된 키 식별자 절을 나타내는입니다. 이 매개 변수는 초기화 되지 않은 상태로 전달 됩니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 키 식별자 절;에 대 한 보안 토큰을 검색할 수 있습니다 때 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyIdentifierClause</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  name: TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "파생된 클래스에서 재정의 되 면 지정된 된 키 식별자에 포함 된 키 식별자 절 중 하나 이상과 일치 하는 보안 토큰을 검색 하려고 합니다."
  remarks: "TryResolveTokenCore 메서드에 의해 호출 됩니다는 <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A>및 <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>메서드.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A> </xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A>"
  syntax:
    content: protected abstract bool TryResolveTokenCore (System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier, out System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: keyIdentifier
      type: System.IdentityModel.Tokens.SecurityKeyIdentifier
      description: "<xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;> </xref> 에 대 한 보안 토큰을 만들어야 합니다."
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "이 메서드가 반환 될 때를 포함 한 <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref> 지정된 된 키 식별자를 나타내는입니다. 이 매개 변수는 초기화 되지 않은 상태로 전달 됩니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정된 된 키 식별자;에 대 한 보안 토큰을 검색할 수 있습니다 때 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  name: TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "파생된 클래스에서 재정의 되 면 지정 된 키 식별자 절과 일치 하는 보안 토큰을 확인 하려고 합니다."
  remarks: "TryResolveTokenCore 메서드에 의해 호출 됩니다는 <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A>및 <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A>메서드.</xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A> </xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A>"
  syntax:
    content: protected abstract bool TryResolveTokenCore (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "<xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> 에 대 한 보안 토큰을 만들어야 합니다."
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "이 메서드가 반환 될 때를 포함 한 <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref> 지정 된 키 식별자 절을 나타내는입니다. 이 매개 변수는 초기화 되지 않은 상태로 전달 됩니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 키 식별자 절;에 대 한 보안 토큰을 검색할 수 있습니다 때 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.#ctor
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: SecurityTokenResolver()
  nameWithType: SecurityTokenResolver.SecurityTokenResolver()
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.SecurityTokenResolver()
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityToken},System.Boolean)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>,Boolean)
  nameWithType: SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>,Boolean)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>,Boolean)
- uid: System.IdentityModel.Selectors.SecurityTokenResolver
  parent: System.IdentityModel.Selectors
  isExternal: false
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityToken}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<SecurityToken>
  nameWithType: ReadOnlyCollection<SecurityToken>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Tokens.SecurityToken>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IdentityModel.Tokens.SecurityToken>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: SecurityToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: LoadCustomConfiguration(XmlNodeList)
  nameWithType: SecurityTokenResolver.LoadCustomConfiguration(XmlNodeList)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration(XmlNodeList)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: ResolveSecurityKey(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenResolver.ResolveSecurityKey(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(SecurityKeyIdentifierClause)
- uid: System.IdentityModel.Tokens.SecurityKey
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKey
  nameWithType: SecurityKey
  fullName: System.IdentityModel.Tokens.SecurityKey
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: ResolveToken(SecurityKeyIdentifier)
  nameWithType: SecurityTokenResolver.ResolveToken(SecurityKeyIdentifier)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(SecurityKeyIdentifier)
- uid: System.IdentityModel.Tokens.SecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: System.IdentityModel.Tokens.SecurityToken
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifier
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifier
  nameWithType: SecurityKeyIdentifier
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifier
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: ResolveToken(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenResolver.ResolveToken(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(SecurityKeyIdentifierClause)
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: TryResolveSecurityKey(SecurityKeyIdentifierClause,SecurityKey)
  nameWithType: SecurityTokenResolver.TryResolveSecurityKey(SecurityKeyIdentifierClause,SecurityKey)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(SecurityKeyIdentifierClause,SecurityKey)
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)
  nameWithType: SecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: TryResolveToken(SecurityKeyIdentifier,SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifier,SecurityToken)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifier,SecurityToken)
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: TryResolveToken(SecurityKeyIdentifierClause,SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifierClause,SecurityToken)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifierClause,SecurityToken)
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.#ctor*
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver.SecurityTokenResolver
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver*
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: CreateDefaultSecurityTokenResolver
  nameWithType: SecurityTokenResolver.CreateDefaultSecurityTokenResolver
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration*
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: LoadCustomConfiguration
  nameWithType: SecurityTokenResolver.LoadCustomConfiguration
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey*
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: ResolveSecurityKey
  nameWithType: SecurityTokenResolver.ResolveSecurityKey
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken*
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: ResolveToken
  nameWithType: SecurityTokenResolver.ResolveToken
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey*
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: TryResolveSecurityKey
  nameWithType: SecurityTokenResolver.TryResolveSecurityKey
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore*
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: TryResolveSecurityKeyCore
  nameWithType: SecurityTokenResolver.TryResolveSecurityKeyCore
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken*
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: TryResolveToken
  nameWithType: SecurityTokenResolver.TryResolveToken
- uid: System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore*
  parent: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: TryResolveTokenCore
  nameWithType: SecurityTokenResolver.TryResolveTokenCore
