### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.GrammarBuilder
  id: GrammarBuilder
  children:
  - System.Speech.Recognition.GrammarBuilder.#ctor
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.String)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)
  - System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)
  - System.Speech.Recognition.GrammarBuilder.Append(System.String)
  - System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.AppendDictation
  - System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)
  - System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)
  - System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)
  - System.Speech.Recognition.GrammarBuilder.AppendWildcard
  - System.Speech.Recognition.GrammarBuilder.Culture
  - System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)
  langs:
  - csharp
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
  type: Class
  summary: "음성 인식 문법에 대 한 제약 조건을 프로그래밍 방식으로 구축 하기 위한 메커니즘을 제공 합니다."
  remarks: "음성 인식 문법에 정의 된 XML 형식에서 일반적으로 작성 된 [음성 인식 문법 사양 (SRGS) 버전 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)합니다. 사용할 수는 있지만 SRGS 문법을 프로그래밍 방식으로 생성 하는 잘 알고 있다면는 <xref:System.Speech.Recognition.SrgsGrammar>멤버가 요소와 SRGS에 정의 된 특성에 해당 하는 네임 스페이스.</xref:System.Speech.Recognition.SrgsGrammar> SRGS와 모르는 하거나를 효율적으로 수행할 수 여러 가지 일반적인 시나리오; 문법 제작 하는 간단 하 고 프로그래밍 방식으로 접근 방식 GrammarBuilder를 사용할 수 있습니다 및 <xref:System.Speech.Recognition.Choices>클래스.</xref:System.Speech.Recognition.Choices>       GrammarBuilder 개체를 사용 하 여 이루어진 계층적 트리를 만들 <xref:System.Speech.Recognition.Choices>프리앰블 및 각 노드에서 이후 amble 구를 사용 하 여 섞어서 및 의미를 전달 하는 값을 의미 체계를 사용 하 여 시드할 대체 구가 포함 된 개체를 응용 프로그램에 다시.</xref:System.Speech.Recognition.Choices>       사용 하는 GrammarBuilder 만드는 <xref:System.Speech.Recognition.Grammar>개체, 다음 단계를 따르세요.</xref:System.Speech.Recognition.Grammar>      1.  GrammarBuilder 개체를 만듭니다.      2.  와 같은 GrammarBuilder, 제약 조건 추가 <xref:System.String>개체 <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.DictationGrammar>, 및 문법에 대 한 제약 조건을 정의 하는 기타 GrammarBuilder 개체.</xref:System.Speech.Recognition.DictationGrammar> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> </xref:System.String>      3.  중 하나를 사용 하 여는 <xref:System.Speech.Recognition.Grammar.%23ctor%2A>를 만드는 생성자는 <xref:System.Speech.Recognition.Grammar>완료 GrammarBuilder 문법에서 개체.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.Grammar.%23ctor%2A>       GrammarBuilder로 제작할 목록 또는의 단일 아마도 목록을 포함 하는 단일 규칙이 문법에 가장 잘 맞습니다. 여러 규칙 또는 필요로 하는 내부 규칙입니다. 참조할 문법을 프로그래밍 방식으로 작성 하려면의 클래스를 사용 하는 <xref:System.Speech.Recognition.SrgsGrammar>네임 스페이스.</xref:System.Speech.Recognition.SrgsGrammar>       GrammarBuilder 인스턴스의 다른 특정 클래스에서 암시적 변환 하거나 한 GrammarBuilder 문법에 대 한 제약 조건을 포함 하는 두 번째 개체와 결합 하 여 얻을 수 있습니다. 자세한 내용은 참조는 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>및 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>연산자와 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>메서드.</xref:System.Speech.Recognition.GrammarBuilder.Add%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>       규칙에 기존 GrammarBuilder를 추가 하려면 사용 하 여는 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, 및 <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>메서드.</xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> </xref:System.Speech.Recognition.GrammarBuilder.Append%2A> </xref:System.Speech.Recognition.GrammarBuilder.Add%2A>      > [!IMPORTANT] > 음성 인식기에서 동일한 키 이름의 의미 체계는 중복 요소 또는 동일한 의미 체계 요소의 값을 수정할 반복 해 서 수 있는 여러 의미 요소를 포함 하는 음성 인식 문법을 사용 하는 경우 예외를 throw 할 수 있습니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [를 사용 하 여 SemanticResultKey 및 SemanticResultValue 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다.       디버깅에 도움이 되는 <xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A>속성을 문자열로 GrammarBuilder의 현재 상태를 반환 합니다.</xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A>       빌드 및 음성 인식 문법을 사용 하는 방법에 대 한 자세한 내용은 참조 [음성 인식](http://msdn.microsoft.com/en-us/6a7dc524-07fc-4862-8d48-8c10dc64b919) 및 [GrammarBuilder 문법 만드는](http://msdn.microsoft.com/en-us/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)합니다."
  example:
  - "The following example uses  GrammarBuilder and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects. A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken. The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two GrammarBuilder objects into a pair of alternative phrases that the resultant grammar can recognize. Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with GrammarBuilder.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a GrammarBuilder constructed from a <xref:System.Speech.Recognition.Choices> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{DebugSummary}")]

      public class GrammarBuilder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor
  id: '#ctor'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder()
  nameWithType: GrammarBuilder.GrammarBuilder()
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새로 만든 빈 인스턴스를 초기화는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 클래스입니다."
  remarks: "기존 규칙을 추가 하려면 <xref:System.Speech.Recognition.GrammarBuilder>개체를 가져오려면는 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, 및 <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>메서드 및 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>연산자.</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> </xref:System.Speech.Recognition.GrammarBuilder.Append%2A> </xref:System.Speech.Recognition.GrammarBuilder.Add%2A> </xref:System.Speech.Recognition.GrammarBuilder>      > [!IMPORTANT] > 음성 인식기에서 동일한 키 이름의 의미 체계는 중복 요소 또는 동일한 의미 체계 요소의 값을 수정할 반복 해 서 수 있는 여러 의미 요소를 포함 하는 음성 인식 문법을 사용 하는 경우 예외를 throw 할 수 있습니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [를 사용 하 여 SemanticResultKey 및 SemanticResultValue 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다."
  example:
  - "The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects. A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any one of which can be recognized when spoken. The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize. Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the Grammar object from the result.  \n  GrammarBuilder bothPhrases = new GrammarBuilder();  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  bothPhrases.Append(bothChoices);  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public GrammarBuilder ();
    parameters: []
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)
  id: '#ctor(System.Speech.Recognition.Choices)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(Choices)
  nameWithType: GrammarBuilder.GrammarBuilder(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(Choices)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 대안 집합에서 클래스입니다."
  remarks: "대체 단어를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [GrammarBuilder 문법 만들려는 사용 하 여 선택 항목](http://msdn.microsoft.com/en-us/5b18db18-a5f6-46a3-aa77-6d3141544efd)합니다."
  example:
  - "The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects. A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken. The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize. Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.Choices alternateChoices);
    parameters:
    - id: alternateChoices
      type: System.Speech.Recognition.Choices
      description: "대체 집합입니다."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)
  id: '#ctor(System.Speech.Recognition.SemanticResultKey)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(SemanticResultKey)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultKey)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 에서 의미 체계 키 클래스입니다."
  remarks: "만들 때 한 <xref:System.Speech.Recognition.GrammarBuilder>에서 인스턴스는 <xref:System.Speech.Recognition.SemanticResultValue>개체를 인식 결과에서 반환 될 수 있는 문법에 의미 체계 정보를 추가 합니다.</xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 사용 하 여 인식 결과에서 의미 체계 정보에 액세스할 수 있습니다는 <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>속성 <xref:System.Speech.Recognition.RecognizedPhrase>, 이벤트의 처리기에서 제공 되는 `SpeechRecognized` 이벤트.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> 경우는 <xref:System.Speech.Recognition.GrammarBuilder>정의 <xref:System.Speech.Recognition.SemanticResultKey>,이 키와 연결 된 인식 결과에서 의미 체계 정보 검색에 사용할 수 있습니다.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> 예를 참조 <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, 또한 <xref:System.Speech.Recognition.SemanticResultValue>와 <xref:System.Speech.Recognition.SemanticResultKey>.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> 볼 및</xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>      > [!IMPORTANT] > 생성할 때 <xref:System.Speech.Recognition.GrammarBuilder>포함 하는 개체 <xref:System.Speech.Recognition.SemanticResultValue>또는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스를 반복적으로 수정할 수 있는 여러 의미 체계 요소 또는 키 이름이 동일한 의미 체계는 중복 요소를 만들지 않으려면 있는지 확인은 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성의는 <xref:System.Speech.Recognition.SemanticValue>개체.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 음성 인식기에서 이러한 상황이 발생 하는 경우 예외를 throw 합니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [를 사용 하 여 SemanticResultKey 및 SemanticResultValue 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *colorChoice*\" and \"Set background to *colorChoice*\", where *colorChoice* is selected from a set of colors. The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.  \n  \n The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user. For example, if the input contains the phrase, \"Set background to red\", the recognition result contains the semantic value of \"#FF0000\", which you can retrieve using a handler for the `SpeechRecognized` event.  \n  \n The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`. Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  // Include semantic information about each of the colors.  \n  Choices colorChoice = new Choices();  \n  \n  GrammarBuilder colorBuilder = new GrammarBuilder(\"red\");  \n  SemanticResultValue colorValue =  \n    new SemanticResultValue(colorBuilder, \"#FF0000\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"green\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#00FF00\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"blue\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#0000FF\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices object for the two alternative phrases.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  // Create the semantic key for referencing the color information.  \n  SemanticResultKey colorKey =  \n    new SemanticResultKey(\"ColorCode\", bothPhrases);  \n  bothPhrases = new GrammarBuilder(colorKey);  \n  \n  // Construct the Grammar object from the GrammarBuilder.  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.SemanticResultKey key);
    parameters:
    - id: key
      type: System.Speech.Recognition.SemanticResultKey
      description: "의미 체계 키입니다."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)
  id: '#ctor(System.Speech.Recognition.SemanticResultValue)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(SemanticResultValue)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultValue)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 의미 값에서 클래스입니다."
  remarks: "만들 때 한 <xref:System.Speech.Recognition.GrammarBuilder>에서 인스턴스는 <xref:System.Speech.Recognition.SemanticResultValue>개체를 인식 결과에서 반환 될 수 있는 문법에 의미 체계 정보를 추가 합니다.</xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 사용 하 여 인식 결과에서 의미 체계 정보에 액세스할 수 있습니다는 <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>속성 <xref:System.Speech.Recognition.RecognizedPhrase>, 이벤트의 처리기에서 제공 되는 `SpeechRecognized` 이벤트.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> 경우는 <xref:System.Speech.Recognition.GrammarBuilder>정의 <xref:System.Speech.Recognition.SemanticResultKey>,이 키와 연결 된 인식 결과에서 의미 체계 정보 검색에 사용할 수 있습니다.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> 예를 참조 <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, 또한 <xref:System.Speech.Recognition.SemanticResultValue>와 <xref:System.Speech.Recognition.SemanticResultKey>.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> 볼 및</xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>      > [!IMPORTANT] > 생성할 때 <xref:System.Speech.Recognition.GrammarBuilder>포함 하는 개체 <xref:System.Speech.Recognition.SemanticResultValue>또는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스를 반복적으로 수정할 수 있는 여러 의미 체계 요소 또는 키 이름이 동일한 의미 체계는 중복 요소를 만들지 않으려면 있는지 확인은 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성의는 <xref:System.Speech.Recognition.SemanticValue>개체.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 음성 인식기에서 이러한 상황이 발생 하는 경우 예외를 throw 합니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [를 사용 하 여 SemanticResultKey 및 SemanticResultValue 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *colorChoice*\" and \"Set background to *colorChoice*\", where *colorChoice* is selected from a set of colors. The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.  \n  \n The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user. For example, if the input contains the phrase, \"Set background to red\", the recognition result contains the semantic value of \"#FF0000\", which you can retrieve using a handler for the `SpeechRecognized` event.  \n  \n The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`. Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  // Include semantic information about each of the colors.  \n  Choices colorChoice = new Choices();  \n  \n  GrammarBuilder colorBuilder = new GrammarBuilder(\"red\");  \n  SemanticResultValue colorValue =  \n    new SemanticResultValue(colorBuilder, \"#FF0000\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"green\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#00FF00\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"blue\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#0000FF\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  // Create the semantic key for referencing the color information.  \n  SemanticResultKey colorKey =  \n    new SemanticResultKey(\"ColorCode\", bothPhrases);  \n  bothPhrases = new GrammarBuilder(colorKey);  \n  \n  // Construct the grammar from the grammar builder.  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.SemanticResultValue value);
    parameters:
    - id: value
      type: System.Speech.Recognition.SemanticResultValue
      description: "의미 체계 값 이나 이름/값 쌍입니다."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(String)
  nameWithType: GrammarBuilder.GrammarBuilder(String)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 시퀀스에서 단어의 클래스."
  remarks: "구를 음성 인식 문법 인식할 수 있는 정확한 음성된 구를 나타냅니다. 문자열을 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [GrammarBuilder 문법을 만들기 위해 사용 하 여 문자열](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114)합니다."
  example:
  - "The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n After creating a list of acceptable values for *colorChoice* using a <xref:System.Speech.Recognition.Choices> object, the example initializes two <xref:System.Speech.Recognition.GrammarBuilder> objects, `makePhrase` and `setPhrase`, using a string as an argument.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.Choices> object cast to a <xref:System.Speech.Recognition.GrammarBuilder> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the Grammar object from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public GrammarBuilder (string phrase);
    parameters:
    - id: phrase
      type: System.String
      description: "일련의 합니다."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)
  id: '#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 일련의 단어의 하위 집합에 대 한 클래스입니다."
  remarks: "`phrase` 구를 음성 인식 문법 인식할 수 있는 매개 변수를 나타냅니다. `subsetMatchingMode` 매개 변수 전체 구의 성공적으로 인식을 달성 하기 위해 통용 될 구의 하위 집합을 지정 합니다. 문법 항목과 일치 하는 전체 이름을 사용자가 요구 하지 않고 긴 이름이 포함 된 항목의 목록으로 작성 하는 데 사용할 수 있습니다.       일치 하는 모드에 대 한 자세한 내용은 <xref:System.Speech.Recognition.SubsetMatchingMode>.</xref:System.Speech.Recognition.SubsetMatchingMode> 을 참조 하십시오. 문자열을 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [GrammarBuilder 문법을 만들기 위해 사용 하 여 문자열](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114)합니다."
  example:
  - "The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value and a grammar for choosing between the matching mode grammars. If the value of `phrase` is \"one two three four five six seven\", then the Subsequence grammar recognizes the input \"two three four\", but not the input \"one three five\". However, the Ordered Subset grammar recognizes both of these inputs.  \n  \n```c#  \n  \nprivate static IEnumerable<Grammar>  \n  CreateMatchingModeGrammars(string phrase)  \n{  \n  List<Grammar> grammars = new List<Grammar>(5);  \n  \n  Choices modeChoice = new Choices();  \n  Type enumType = typeof(SubsetMatchingMode);  \n  foreach (SubsetMatchingMode mode in Enum.GetValues(enumType))  \n  {  \n    string modeName = Enum.GetName(enumType, mode);  \n    modeName = BreakAtCaps(modeName);  \n  \n    GrammarBuilder builder = new GrammarBuilder(phrase, mode);  \n    Grammar modeGrammar = new Grammar(builder);  \n    modeGrammar.Name = modeName;  \n    modeGrammar.Enabled = false;  \n    grammars.Add(modeGrammar);  \n  \n    modeChoice.Add(modeName);  \n  }  \n  \n  Grammar choiceGrammar = new Grammar(modeChoice);  \n  choiceGrammar.Name = \"choice\";  \n  grammars.Add(choiceGrammar);  \n  \n  return grammars;  \n}  \n  \n// Insert spaces preceding each uppercase letter in a string.   \nprivate static string BreakAtCaps(string item)  \n{  \n  if (item == null || item.Length == 0)  \n  {  \n    return item;  \n  }  \n  \n  StringBuilder sb = new StringBuilder(item[0].ToString());  \n  for (int i = 1; i < item.Length; i++)  \n  {  \n    char c = item[i];  \n    if (char.IsUpper(c))  \n    {  \n      sb.Append(\" \");  \n    }  \n    sb.Append(c);  \n  }  \n  \n  return sb.ToString();  \n}  \n```"
  syntax:
    content: public GrammarBuilder (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);
    parameters:
    - id: phrase
      type: System.String
      description: "일련의 합니다."
    - id: subsetMatchingCriteria
      type: System.Speech.Recognition.SubsetMatchingMode
      description: "음성 인식 문법 구문을 인식를 사용 하 여 일치 하는 모드입니다."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  id: '#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 반복된 요소에서 클래스입니다."
  remarks: "하는 경우의 값 `minRepeat` 가 0 이면 새 <xref:System.Speech.Recognition.GrammarBuilder>는 선택적 요소를 나타냅니다.</xref:System.Speech.Recognition.GrammarBuilder>       값 `minRepeat` 0 보다 크거나 해야의 값 보다 작거나 `maxRepeat`합니다.      > [!IMPORTANT] >에 대 한 반복을 지정 하는 경우 <xref:System.Speech.Recognition.GrammarBuilder>포함 하는 개체 <xref:System.Speech.Recognition.SemanticResultValue>또는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스를 반복적으로 수정할 수 있는 여러 의미 체계 요소 또는 키 이름이 동일한 의미 체계는 중복 요소를 만들지 않으려면 있는지 확인은 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성은 <xref:System.Speech.Recognition.SemanticValue>개체.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 음성 인식기에서 이러한 상황이 발생 하는 경우 예외를 throw 합니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [를 사용 하 여 SemanticResultKey 및 SemanticResultValue 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다."
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza. It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word \"pizza\".  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object from a string array of alternative toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "반복 되는 요소입니다."
    - id: minRepeat
      type: System.Int32
      description: "에 정의 된 요소와 일치 하는 입력 하는 최소 횟수 `builder` 일치 항목이 되기 하기 위해 실행 해야 합니다."
    - id: maxRepeat
      type: System.Int32
      description: "에 정의 된 요소와 일치 하는 입력 하는 최대 횟수 `builder` 일치 항목이 되기에 발생할 수 있습니다."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(String,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,Int32,Int32)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 에서 단어의 시퀀스에서 클래스는 <xref:System.String>횟수를 지정 하 고는 <xref:System.String>반복 될 수 있습니다.</xref:System.String> </xref:System.String>"
  remarks: "하는 경우의 값 `minRepeat` 가 0 이면 새 <xref:System.Speech.Recognition.GrammarBuilder>는 선택적 요소를 나타냅니다.</xref:System.Speech.Recognition.GrammarBuilder>       값 `minRepeat` 0 보다 크거나 해야의 값 보다 작거나 `maxRepeat`합니다. 문자열을 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [GrammarBuilder 문법을 만들기 위해 사용 하 여 문자열](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114)합니다."
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza. It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word \"pizza\".  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object with alternatives for toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (string phrase, int minRepeat, int maxRepeat);
    parameters:
    - id: phrase
      type: System.String
      description: "반복 된 일련의 합니다."
    - id: minRepeat
      type: System.Int32
      description: "구 일치를 입력 하는 최소 횟수 일치 항목이 되기 하기 위해 실행 해야 합니다."
    - id: maxRepeat
      type: System.Int32
      description: "구 일치를 입력 하는 최대 횟수는 일치 항목이 되기에 발생할 수 있습니다."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  id: Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(Choices,GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 를 포함 하는 <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> 개체와 함께 한 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>다음 클래스에서 암시적 변환을 지원:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>이 메서드에 대 한 위에 나열 된 개체는 `builder` 매개 변수.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       자세한 내용은 참조는 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>및 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>연산자.</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      > [!IMPORTANT] > 결합 하면 <xref:System.Speech.Recognition.Choices>및 <xref:System.Speech.Recognition.GrammarBuilder>포함 하는 개체 <xref:System.Speech.Recognition.SemanticResultValue>또는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스를 반복적으로 수정할 수 있는 여러 의미 체계 요소 또는 키 이름이 동일한 의미 체계는 중복 요소를 만들지 않으려면 있는지 확인은 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성의는 <xref:System.Speech.Recognition.SemanticValue>개체.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> 음성 인식기에서 이러한 상황이 발생 하는 경우 예외를 throw 합니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [GrammarBuilder 문법에 추가 의미 체계](https://msdn.microsoft.com/library/hh361581.aspx)합니다."
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "첫 번째 문법 하는 요소를 대체 집합을 나타냅니다."
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "두 번째 문법 요소입니다."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 의 시퀀스는 <code> choices </code> 요소 뒤의 <code> builder </code> 요소입니다."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  id: Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,Choices)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 를 포함 하는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 개체와 함께 한 <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>다음 클래스에서 암시적 변환을 지원:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>이 메서드에 대 한 위에 나열 된 개체는 `builder` 매개 변수.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       자세한 내용은 참조는 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>및 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>연산자.</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      > [!IMPORTANT] > 결합 하면 <xref:System.Speech.Recognition.Choices>및 <xref:System.Speech.Recognition.GrammarBuilder>포함 하는 개체 <xref:System.Speech.Recognition.SemanticResultValue>또는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스 다른 문법 요소와 동일한 키 이름의 또는 반복적으로 수정할 수 있는 여러 의미 체계 요소와 의미 체계는 중복 요소를 만들지 않으려면 있는지 확인은 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성의는 <xref:System.Speech.Recognition.SemanticValue>개체.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> 음성 인식기에서 이러한 상황이 발생 하는 경우 예외를 throw 합니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [를 사용 하 여 SemanticResultKey 및 SemanticResultValue 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "첫 번째 문법 요소입니다."
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "두 번째 문법 하는 요소를 대체 집합을 나타냅니다."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 의 시퀀스는 <code> builder </code> 요소 뒤의 <code> choices </code> 요소입니다."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  id: Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 두 개의 시퀀스를 포함 하는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>다음 클래스에서 암시적 변환을 지원:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>이 메서드에 대 한 위에 나열 된 개체는 `builder1` 또는 `builder2` 매개 변수.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       자세한 내용은 참조는 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>및 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>연산자.</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      > [!IMPORTANT] > 결합 하면 <xref:System.Speech.Recognition.Choices>및 <xref:System.Speech.Recognition.GrammarBuilder>포함 하는 개체 <xref:System.Speech.Recognition.SemanticResultValue>또는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스 다른 문법 요소와 동일한 키 이름의 또는 반복적으로 수정할 수 있는 여러 의미 체계 요소와 의미 체계는 중복 요소를 만들지 않으려면 있는지 확인은 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성의는 <xref:System.Speech.Recognition.SemanticValue>개체.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> 음성 인식기에서 이러한 상황이 발생 하는 경우 예외를 throw 합니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [를 사용 하 여 SemanticResultKey 및 SemanticResultValue 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);
    parameters:
    - id: builder1
      type: System.Speech.Recognition.GrammarBuilder
      description: "첫 번째 문법 요소입니다."
    - id: builder2
      type: System.Speech.Recognition.GrammarBuilder
      description: "두 번째 문법 요소입니다."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 의 시퀀스는 <code> builder1 </code> 요소 뒤의 <code> builder2 </code> 요소입니다."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)
  id: Add(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(GrammarBuilder,String)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 를 포함 하는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 구 뒤 개체입니다."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>다음 클래스에서 암시적 변환을 지원:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>이 메서드에 대 한 위에 나열 된 개체는 `builder` 매개 변수.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       자세한 내용은 참조는 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>및 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>연산자.</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>"
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, string phrase);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "첫 번째 문법 요소입니다."
    - id: phrase
      type: System.String
      description: "두 번째 문법 요소: 일련의 단어를 나타내는입니다."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 의 시퀀스는 <code> builder </code> 요소 뒤의 <code> phrase </code> 요소입니다."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)
  id: Add(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(String,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(String,GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 구문 다음을 포함 하는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>다음 클래스에서 암시적 변환을 지원:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>이 메서드에 대 한 위에 나열 된 개체는 `builder` 매개 변수.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       자세한 내용은 참조는 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>및 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>연산자.</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>"
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (string phrase, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: phrase
      type: System.String
      description: "첫 번째 문법 요소: 일련의 단어를 나타내는입니다."
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "두 번째 문법 요소입니다."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 의 시퀀스는 <code> phrase </code> 요소 뒤의 <code> builder </code> 요소입니다."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)
  id: Append(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(Choices)
  nameWithType: GrammarBuilder.Append(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(Choices)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "현재 문법 요소 시퀀스에 대 한 대안 집합을 추가합니다."
  remarks: "`alternateChoices`현재 요소 시퀀스의 끝에 추가 됩니다.      > [!IMPORTANT] > 추가 하면 <xref:System.Speech.Recognition.Choices>포함 하는 개체 <xref:System.Speech.Recognition.SemanticResultValue>또는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스는 <xref:System.Speech.Recognition.GrammarBuilder>개체를 반복 해 서 수정할 수 있는 여러 의미 체계 요소 또는 키 이름이 동일한 의미 체계는 중복 요소를 만들지 않으려면 있는지 확인는 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성은 <xref:System.Speech.Recognition.SemanticValue>개체입니다.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.Choices> 음성 인식기에서 이러한 상황이 발생 하는 경우 예외를 throw 합니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [이해 SemanticResultValue 및 SemanticResultKey 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다."
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. The example highlights the use of the Append method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.Choices alternateChoices);
    parameters:
    - id: alternateChoices
      type: System.Speech.Recognition.Choices
      description: "집합 추가에 대 한 대안입니다."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)
  id: Append(System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(GrammarBuilder)
  nameWithType: GrammarBuilder.Append(GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "현재 문법 요소 시퀀스를 문법 요소를 추가합니다."
  remarks: "`builder`현재 문법 요소 시퀀스의 끝에 추가 됩니다.      > [!NOTE] > 추가 하면 <xref:System.Speech.Recognition.GrammarBuilder>포함 하는 개체 <xref:System.Speech.Recognition.SemanticResultValue>또는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스는 <xref:System.Speech.Recognition.GrammarBuilder>개체를 반복 해 서 수정할 수 있는 여러 의미 체계 요소 또는 키 이름이 동일한 의미 체계는 중복 요소를 만들지 않으려면 있는지 확인는 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성은 <xref:System.Speech.Recognition.SemanticValue>개체입니다.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 음성 인식기에서 이러한 상황이 발생 하는 경우 예외를 throw 합니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [를 사용 하 여 SemanticResultKey 및 SemanticResultValue 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다."
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar. The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "추가할 문법 요소입니다."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)
  id: Append(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(SemanticResultKey)
  nameWithType: GrammarBuilder.Append(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultKey)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "현재 문법 요소 시퀀스를 의미 체계 키를 추가합니다."
  remarks: "`key`현재 요소 시퀀스의 끝에 추가 됩니다.      > [!IMPORTANT] > 추가 하면 <xref:System.Speech.Recognition.SemanticResultValue>또는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스는 <xref:System.Speech.Recognition.GrammarBuilder>개체를 반복 해 서 수정할 수 있는 여러 의미 체계 요소 또는 키 이름이 동일한 의미 체계는 중복 요소를 만들지 않으려면 있는지 확인는 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성은 <xref:System.Speech.Recognition.SemanticValue>개체입니다.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> 음성 인식기에서 이러한 상황이 발생 하는 경우 예외를 throw 합니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [이해 SemanticResultValue 및 SemanticResultKey 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다."
  example:
  - "The following example is part of a console application for choosing origin and destination cities for a flight. The application recognizes phrases such as \"I want to fly from Miami to Chicago.\" The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize an in-process speech recognition engine.  \n    {  \n      using (SpeechRecognitionEngine recognizer =  \n         new SpeechRecognitionEngine())  \n      {  \n  \n        // Create a Choices object and add  cities and airport codes  \n        // using SemanticResultValue objects.  \n        Choices cities = new Choices();  \n        cities.Add(new SemanticResultValue(\"Chicago\", \"ORD\"));  \n        cities.Add(new SemanticResultValue(\"Boston\", \"BOS\"));  \n        cities.Add(new SemanticResultValue(\"Miami\", \"MIA\"));  \n        cities.Add(new SemanticResultValue(\"Dallas\", \"DFW\"));  \n  \n        // Build the phrase and add SemanticResultKeys.  \n        GrammarBuilder chooseCities = new GrammarBuilder();  \n        chooseCities.Append(\"I want to fly from\");  \n        chooseCities.Append(new SemanticResultKey(\"origin\", cities));  \n        chooseCities.Append(\"to\");  \n        chooseCities.Append(new SemanticResultKey(\"destination\", cities));  \n  \n        // Build a Grammar object from the GrammarBuilder.  \n        Grammar bookFlight = new Grammar(chooseCities);  \n        bookFlight.Name = \"Book Flight\";  \n  \n        // Add a handler for the LoadGrammarCompleted event.  \n        recognizer.LoadGrammarCompleted +=   \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n        // Add a handler for the SpeechRecognized event.  \n        recognizer.SpeechRecognized +=   \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Configure the input to the recognizer.  \n        recognizer.SetInputToDefaultAudioDevice();  \n  \n        // Load the grammar object and start recognition.  \n        recognizer.LoadGrammarAsync(bookFlight);  \n        recognizer.RecognizeAsync();  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.  \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar loaded: \" + e.Grammar.Name);  \n      Console.WriteLine();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech recognized:  \" + e.Result.Text);  \n      Console.WriteLine();  \n      Console.WriteLine(\"Semantic results:\");  \n      Console.WriteLine(\"  The flight origin is \" + e.Result.Semantics[\"origin\"].Value);  \n      Console.WriteLine(\"  The flight destination is \" + e.Result.Semantics[\"destination\"].Value);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.SemanticResultKey key);
    parameters:
    - id: key
      type: System.Speech.Recognition.SemanticResultKey
      description: "의미 체계 키를 추가 합니다."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)
  id: Append(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(SemanticResultValue)
  nameWithType: GrammarBuilder.Append(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultValue)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "현재 문법 요소 시퀀스를 의미 체계 값을 추가합니다."
  remarks: "`value`현재 요소 시퀀스의 끝에 추가 됩니다.      > [!IMPORTANT] > 추가 하면 <xref:System.Speech.Recognition.SemanticResultValue>또는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스는 <xref:System.Speech.Recognition.GrammarBuilder>개체를 반복 해 서 수정할 수 있는 여러 의미 체계 요소 또는 키 이름이 동일한 의미 체계는 중복 요소를 만들지 않으려면 있는지 확인는 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성은 <xref:System.Speech.Recognition.SemanticValue>개체입니다.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> 음성 인식기에서 이러한 상황이 발생 하는 경우 예외를 throw 합니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [이해 SemanticResultValue 및 SemanticResultKey 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다."
  example:
  - "The following example is part of a console application for choosing origin and destination cities for a flight. The application recognizes phrases such as \"I want to fly from Miami to Chicago.\" The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.  \n  \n```c#  \n  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize an in-process speech recognition engine.  \n    {  \n      using (SpeechRecognitionEngine recognizer =  \n         new SpeechRecognitionEngine())  \n      {  \n  \n        // Create GrammarBuilder objects and append SemanticResultValue objects   \n        // that contain cities and airport codes.  \n  \n        GrammarBuilder chicago = new GrammarBuilder();  \n        chicago.Append(new SemanticResultValue(\"Chicago\", \"ORD\"));  \n  \n        GrammarBuilder boston = new GrammarBuilder();  \n        boston.Append(new SemanticResultValue(\"Boston\", \"BOS\"));  \n  \n        GrammarBuilder miami = new GrammarBuilder();  \n        miami.Append(new SemanticResultValue(\"Miami\", \"MIA\"));  \n  \n        GrammarBuilder dallas = new GrammarBuilder();  \n        dallas.Append(new SemanticResultValue(\"Dallas\", \"DFW\"));  \n  \n        // Create a Choices object and add the cities using implicit conversion from   \n        // SemanticResultValue to GrammarBuilder.  \n        Choices cities = new Choices();  \n        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  \n  \n        // Build the phrase and add SemanticResultKeys.  \n        GrammarBuilder chooseCities = new GrammarBuilder();  \n        chooseCities.Append(\"I want to fly from\");  \n        chooseCities.Append(new SemanticResultKey(\"origin\", cities));  \n        chooseCities.Append(\"to\");  \n        chooseCities.Append(new SemanticResultKey(\"destination\", cities));  \n  \n        // Build a Grammar object from the GrammarBuilder.  \n        Grammar bookFlight = new Grammar(chooseCities);  \n        bookFlight.Name = \"Book Flight\";  \n  \n        // Add a handler for the LoadGrammarCompleted event.  \n        recognizer.LoadGrammarCompleted +=   \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n        // Add a handler for the SpeechRecognized event.  \n        recognizer.SpeechRecognized +=   \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Configure the input to the recognizer.  \n        recognizer.SetInputToDefaultAudioDevice();  \n  \n        // Load the grammar object and start recognition.  \n        recognizer.LoadGrammarAsync(bookFlight);  \n        recognizer.RecognizeAsync();  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n    // Handle the LoadGrammarCompleted event.  \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar loaded: \" + e.Grammar.Name);  \n      Console.WriteLine();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech recognized:  \" + e.Result.Text);  \n      Console.WriteLine();  \n      Console.WriteLine(\"Semantic results:\");  \n      Console.WriteLine(\"  The flight origin is \" + e.Result.Semantics[\"origin\"].Value);  \n      Console.WriteLine(\"  The flight destination is \" + e.Result.Semantics[\"destination\"].Value);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.SemanticResultValue value);
    parameters:
    - id: value
      type: System.Speech.Recognition.SemanticResultValue
      description: "의미 체계 추가할 값입니다."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String)
  id: Append(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(String)
  nameWithType: GrammarBuilder.Append(String)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "현재 문법 요소 시퀀스에는 문구를 추가합니다."
  remarks: '`phrase`현재 요소 시퀀스의 끝에 추가 됩니다.'
  syntax:
    content: public void Append (string phrase);
    parameters:
    - id: phrase
      type: System.String
      description: "추가 하는 단어의 시퀀스입니다."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  id: Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.Append(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,SubsetMatchingMode)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "현재 문법 요소 시퀀스를 구문의 하위 집합에 대 한 요소를 추가합니다."
  remarks: "하위 집합 요소가 현재 요소 시퀀스의 끝에 추가 됩니다. 문자열을 사용 하 여 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [GrammarBuilder 문법을 만들기 위해 사용 하 여 문자열](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114)합니다.       하위 집합 일치 모드 중 사용에 대 한 자세한 정보, <xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=fullName>.</xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=fullName> 을 참조 하십시오."
  example:
  - "The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value. For example, the generated grammar `OrderedSubset` recognizes the phrases, \"three four five\" and \"one three five\", and the grammar `Subsequence` recognizes the phrase \"three four five\", but not the phrase, \"one three five\".  \n  \n```c#  \n  \nprivate Grammar[] CreateSubsetMatchTest()  \n{  \n  List<Grammar> grammars = new List<Grammar>(4);  \n  \n  string phrase = \"one two three four five six\";  \n  foreach (SubsetMatchingMode mode in  \n    Enum.GetValues(typeof(SubsetMatchingMode)))  \n  {  \n    GrammarBuilder gb = new GrammarBuilder();  \n    gb.Append(phrase, mode);  \n  \n    Grammar grammar = new Grammar(gb);  \n    grammar.Name = mode.ToString();  \n    grammars.Add(grammar);  \n  }  \n  \n  return grammars.ToArray();  \n}  \n```"
  syntax:
    content: public void Append (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);
    parameters:
    - id: phrase
      type: System.String
      description: "추가 하는 단어의 시퀀스입니다."
    - id: subsetMatchingCriteria
      type: System.Speech.Recognition.SubsetMatchingMode
      description: "문법 구문을 인식를 사용 하 여 일치 하는 모드입니다."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  id: Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "현재 문법 요소 시퀀스를 반복된 문법 요소를 추가합니다."
  remarks: "값 `minRepeat` 0 보다 크거나 해야의 값 보다 작거나 `maxRepeat`합니다.      > [!IMPORTANT] > 추가 하면 <xref:System.Speech.Recognition.GrammarBuilder>포함 하는 개체 <xref:System.Speech.Recognition.SemanticResultValue>또는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스는 <xref:System.Speech.Recognition.GrammarBuilder>개체를 반복 해 서 수정할 수 있는 여러 의미 체계 요소 또는 키 이름이 동일한 의미 체계는 중복 요소를 만들지 않으려면 있는지 확인는 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성은 <xref:System.Speech.Recognition.SemanticValue>개체입니다.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 음성 인식기에서 이러한 상황이 발생 하는 경우 예외를 throw 합니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [이해 SemanticResultValue 및 SemanticResultKey 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다."
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar. The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "추가 반복된 문법 요소입니다."
    - id: minRepeat
      type: System.Int32
      description: "에 정의 된 요소와 일치 하는 입력 하는 최소 횟수 `builder` 일치 항목이 되기 하기 위해 실행 해야 합니다."
    - id: maxRepeat
      type: System.Int32
      description: "에 정의 된 요소와 일치 하는 입력 하는 최대 횟수 `builder` 일치 항목이 되기에 발생할 수 있습니다."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)
  id: Append(System.String,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(String,Int32,Int32)
  nameWithType: GrammarBuilder.Append(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,Int32,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "현재 문법 요소 시퀀스에 반복 되는 문구를 추가합니다."
  remarks: "값 `minRepeat` 0 보다 크거나 해야의 값 보다 작거나 `maxRepeat`합니다."
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar. The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (string phrase, int minRepeat, int maxRepeat);
    parameters:
    - id: phrase
      type: System.String
      description: "추가 하는 단어의 반복 된 시퀀스입니다."
    - id: minRepeat
      type: System.Int32
      description: "일치 하는 입력 하는 최소 횟수 `phrase` 일치 항목이 되기 하기 위해 실행 해야 합니다."
    - id: maxRepeat
      type: System.Int32
      description: "일치 하는 입력 하는 최대 횟수 `phrase` 일치 항목이 되기에 발생할 수 있습니다."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation
  id: AppendDictation
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendDictation()
  nameWithType: GrammarBuilder.AppendDictation()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "기본 받아쓰기 문법의 문법 요소 현재 시퀀스에 추가 합니다."
  remarks: "받아쓰기 문법에 대 한 자세한 내용은 <xref:System.Speech.Recognition.DictationGrammar>.</xref:System.Speech.Recognition.DictationGrammar> 을 참조 하십시오."
  example:
  - "The following example creates a speech recognition grammar that incorporates dictation.  \n  \n```c#  \n  \nGrammarBuilder builder = new GrammarBuilder();  \nbuilder.Append(\"begin\");  \nbuilder.AppendDictation();  \nbuilder.Append(\"end\");  \nGrammar grammarWithDictation = new Grammar(builder);  \ngrammarWithDictation.Name = \"Grammar with Dictation\";  \n```"
  syntax:
    content: public void AppendDictation ();
    parameters: []
  overload: System.Speech.Recognition.GrammarBuilder.AppendDictation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)
  id: AppendDictation(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendDictation(String)
  nameWithType: GrammarBuilder.AppendDictation(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "현재 문법 요소 시퀀스에 지정 된 받아쓰기 문법을 추가합니다."
  remarks: "맞춤법 받아쓰기 문법을 사용 하려면 설정 `category` 를 `spelling`합니다.       받아쓰기 문법에 대 한 자세한 내용은 <xref:System.Speech.Recognition.DictationGrammar>.</xref:System.Speech.Recognition.DictationGrammar> 을 참조 하십시오."
  example:
  - "The following example creates a speech recognition grammar that incorporates the spelling dictation grammar rules.  \n  \n```c#  \n  \nGrammarBuilder builder = new GrammarBuilder();  \nbuilder.Append(\"begin\");  \nbuilder.AppendDictation(\"spelling\");  \nbuilder.Append(\"end\");  \nGrammar grammarWithDictation = new Grammar(builder);  \ngrammarWithDictation.Name = \"Grammar with Dictation\";  \n```"
  syntax:
    content: public void AppendDictation (string category);
    parameters:
    - id: category
      type: System.String
      description: "추가할 받아쓰기 문법의 범주입니다."
  overload: System.Speech.Recognition.GrammarBuilder.AppendDictation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)
  id: AppendRuleReference(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendRuleReference(String)
  nameWithType: GrammarBuilder.AppendRuleReference(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "현재 문법 요소 시퀀스를 문법 정의 파일을 추가합니다."
  remarks: "제공 하는 URI는 `path` 인수는 로컬 또는 원격 될 수 있습니다. 응용 프로그램에는 지정 된 문법 파일의 위치를 읽기 권한이 있어야 합니다.       W3C 음성 인식 문법 사양 (SRGS) 표현 루트 규칙을 정의할 수 있습니다. 이 메서드는 현재 문법 요소 시퀀스를 해당 루트 규칙이 부터는 문법을 추가 합니다. 특정 문법 규칙에 추가 하려면 사용 하 여는 <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>메서드.</xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>"
  example:
  - "The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml. The content of the cities.grxml file appears below the C# code example.  \n  \n```c#  \n  \nprivate static Grammar CreateCitiesGrammar1()  \n{  \n  GrammarBuilder builder = new GrammarBuilder();  \n  builder.AppendRuleReference(\"file://c:/temp/cities.grxml\");  \n  \n  Grammar citiesGrammar = new Grammar(builder);  \n  citiesGrammar.Name = \"Cities Grammar 1\";  \n  return citiesGrammar;  \n}  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-16\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.grxml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item> Seattle </item>  \n      <item> Los Angeles </item>  \n      <item> New York </item>  \n      <item> Miami </item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: public void AppendRuleReference (string path);
    parameters:
    - id: path
      type: System.String
      description: "경로 또는 지원 되는 형식에서 음성 인식 문법을 설명 하는 파일의 유니버설 리소스 식별자 (URI)."
  overload: System.Speech.Recognition.GrammarBuilder.AppendRuleReference*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)
  id: AppendRuleReference(System.String,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendRuleReference(String,String)
  nameWithType: GrammarBuilder.AppendRuleReference(String,String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "현재 문법 요소 시퀀스를 문법 정의 파일의 지정된 된 규칙을 추가합니다."
  remarks: "제공 하는 URI는 `path` 인수는 로컬 또는 원격 될 수 있습니다. 응용 프로그램에는 지정 된 문법 파일의 위치를 읽기 권한이 있어야 합니다.       사용 하 여 사용할 수 있습니다는 <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>루트 규칙이 해당 문자로 시작 하는 문법 파일을 추가 하는 메서드.</xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>"
  example:
  - "The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml. The content of the cities.grxml file appears below the C# code example.  \n  \n```c#  \n  \nprivate static Grammar CreateCitiesGrammar2()  \n{  \n  GrammarBuilder builder = new GrammarBuilder();  \n  builder.Append(\"Does\");  \n  builder.AppendRuleReference(@\"c:\\temp\\cities.grxml\", \"Cities\");  \n  builder.Append(\"have a shuttle\");  \n  \n  Grammar citiesGrammar = new Grammar(builder);  \n  citiesGrammar.Name = \"Cities Grammar 2\";  \n  return citiesGrammar;  \n}  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.grxml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item> Seattle </item>  \n      <item> Los Angeles </item>  \n      <item> New York </item>  \n      <item> Miami </item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: public void AppendRuleReference (string path, string rule);
    parameters:
    - id: path
      type: System.String
      description: "파일 경로 또는 지원 되는 형식에서 음성 인식 문법을 설명 하는 파일의 유니버설 리소스 식별자 (URI)."
    - id: rule
      type: System.String
      description: "에 추가 하려면 규칙의 식별자 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 문법 파일의 기본 루트 규칙을 추가 합니다."
  overload: System.Speech.Recognition.GrammarBuilder.AppendRuleReference*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendWildcard
  id: AppendWildcard
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendWildcard()
  nameWithType: GrammarBuilder.AppendWildcard()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendWildcard()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "현재 문법 요소 시퀀스에 대 한 입력에 일치 하는 인식 문법 요소를 추가 합니다."
  remarks: "와일드 카드 요소의 요소의 현재 시퀀스의 끝에 추가 됩니다.       와일드 카드 요소의 음성된 단어를 찾습니다. 배경 잡음 또는 대기 일치 하지 않습니다."
  example:
  - "The following example creates a grammar that accepts password input as a wildcard. The example attaches a <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=fullName> event handler to the grammar that validates the password input.  \n  \n```c#  \nprivate Grammar CreatePasswordGrammar()  \n{  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey passwordKey =  \n    new SemanticResultKey(\"Password\", wildcardBuilder);  \n  \n  GrammarBuilder passwordBuilder =  \n    new GrammarBuilder(\"My Password is\");  \n  passwordBuilder.Append(passwordKey);  \n  \n  Grammar passwordGrammar = new Grammar(passwordBuilder);  \n  passwordGrammar.Name = \"Password input\";  \n  \n  passwordGrammar.SpeechRecognized +=  \n    new EventHandler<SpeechRecognizedEventArgs>(  \n      PasswordInputHandler);  \n  \n  return passwordGrammar;  \n}  \n  \n// Handle the SpeechRecognized event for the password grammar.  \nprivate void PasswordInputHandler(object sender, SpeechRecognizedEventArgs e)  \n{  \n  if (e.Result == null) return;  \n  \n  RecognitionResult result = e.Result;  \n  SemanticValue semantics = e.Result.Semantics;  \n  \n  if (semantics.ContainsKey(\"Password\"))  \n  {  \n    RecognizedAudio passwordAudio =  \n      result.GetAudioForWordRange(  \n        result.Words[3], result.Words[result.Words.Count - 1]);  \n  \n    if (IsValidPassword(passwordAudio))  \n    {  \n      Console.WriteLine(\"Password accepted.\");  \n  \n      // Add code to handle a valid password here.  \n    }  \n    else  \n    {  \n      Console.WriteLine(\"Invalid password.\");  \n  \n      // Add code to handle an invalid password here.  \n    }  \n  }  \n}  \n  \n// Validate the password input.   \nprivate bool IsValidPassword(RecognizedAudio passwordAudio)  \n{  \n  Console.WriteLine(\"Validating password.\");  \n  \n  // Add password validation code here.  \n  \n  return false;  \n}  \n```"
  syntax:
    content: public void AppendWildcard ();
    parameters: []
  overload: System.Speech.Recognition.GrammarBuilder.AppendWildcard*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Culture
  id: Culture
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Culture
  nameWithType: GrammarBuilder.Culture
  fullName: System.Speech.Recognition.GrammarBuilder.Culture
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "음성 인식 문법의 culture를 가져오거나 설정 합니다."
  remarks: "<xref:System.Speech.Recognition.Grammar.%23ctor%2A>생성자 만듭니다는 <xref:System.Speech.Recognition.Grammar>해당 문화권의 음성 인식기에서 사용할 수 있는 개체입니다.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.Grammar.%23ctor%2A> 문화권 속성은 <xref:System.Speech.Recognition.GrammarBuilder>제공 하는 그룹 문법 생성자에 매개 변수가 결과 음성 인식 문법의 culture를 설정 하는 데 사용 합니다.</xref:System.Speech.Recognition.GrammarBuilder>       Microsoft Windows와 System.Speech API는 모든 유효한 언어 국가 코드를 받습니다. 에 지정 된 언어를 사용 하 여 음성 인식을 수행 하는 `Culture` 속성을 지 원하는 언어 국가 코드를 설치 해야 하는 음성 인식 엔진입니다. Microsoft Windows 7과 함께 제공 된 음성 인식 엔진 다음 언어 국가 코드를 사용 합니다.      -EN-GB 합니다. 영어 (영국)-EN-US입니다. 영어 (미국)-d e d E. 독일어 (독일)-ES-ES 합니다. 스페인어 (스페인)-fr fr. 프랑스어 (프랑스)-JA-JP 합니다. 일본어 (일본)-ZH-CN 합니다. 중국어 (중국)-zh-tw로 제공 합니다. 중국어 (대만) 두 문자 언어 코드 &quot;en&quot;, &quot;fr&quot; 또는 &quot;es&quot; 등도 허용 됩니다."
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza with up to four toppings. It specifically sets the <xref:System.Speech.Recognition.GrammarBuilder> object's culture to English (United States).  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object with alternatives for toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public System.Globalization.CultureInfo Culture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "culture는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>합니다. 기본값은 실행 중인 스레드의 <xref:System.Threading.Thread.CurrentUICulture*>속성.</xref:System.Threading.Thread.CurrentUICulture*>"
  overload: System.Speech.Recognition.GrammarBuilder.Culture*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  id: DebugShowPhrases
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: DebugShowPhrases
  nameWithType: GrammarBuilder.DebugShowPhrases
  fullName: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "에 포함 된 문법의 구조와 내용을 표시 하는 문자열을 가져옵니다는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>합니다."
  remarks: ''
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza with up to four toppings. It writes the status of the <xref:System.Speech.Recognition.GrammarBuilder> to the console before creating the grammar. This method generates the following output:  \n  \n-   `GrammarBuilder status: I would like a [cheese,mushroom,tomato,onion,anchovy,chic ken,pepperoni] and [cheese,mushroom,tomato,onion,anchovy,chicken,pepperoni] pizza`  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object with alternatives for toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Write the contents and structure of the GrammarBuilder to the console.  \n  Console.WriteLine(\"Grammar content and structure: {0}\", gb.DebugShowPhrases);  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public string DebugShowPhrases { get; }
    return:
      type: System.String
      description: "현재 콘텐츠 및 구조는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>합니다."
  overload: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  id: op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(Choices,GrammarBuilder)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 를 포함 하는 <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> 개체와 함께 한 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>변환할 때 다음과 같은 클래스를 지원합니다.</xref:System.Speech.Recognition.GrammarBuilder>      - <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>이 메서드에 대 한 위에 나열 된 개체는 `builder` 매개 변수.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> 자세한 내용은 참조는 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>연산자.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      > [!IMPORTANT] > 결합 하면 <xref:System.Speech.Recognition.Choices>및 <xref:System.Speech.Recognition.GrammarBuilder>포함 하는 개체 <xref:System.Speech.Recognition.SemanticResultValue>또는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스를 반복적으로 수정할 수 있는 여러 의미 체계 요소 또는 키 이름이 동일한 의미 체계는 중복 요소를 만들지 않으려면 있는지 확인은 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성의는 <xref:System.Speech.Recognition.SemanticValue>개체.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> 음성 인식기에서 이러한 상황이 발생 하는 경우 예외를 throw 합니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [이해 SemanticResultValue 및 SemanticResultKey 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다."
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "첫 번째 문법 하는 요소를 대체 집합을 나타냅니다."
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "두 번째 문법 요소입니다."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "반환 된 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 의 시퀀스에 대 한는 <code> choices </code> 매개 변수를 차례로 <code> builder </code> 매개 변수입니다."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  id: op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,Choices)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 를 포함 하는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 이어서는 <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref>합니다."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>다음 클래스에서 변환을 지원:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>이 메서드에 대 한 위에 나열 된 개체는 `builder` 매개 변수.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder> 자세한 내용은 참조는 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>연산자.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      > [!IMPORTANT] > 결합 하면 <xref:System.Speech.Recognition.Choices>및 <xref:System.Speech.Recognition.GrammarBuilder>포함 하는 개체 <xref:System.Speech.Recognition.SemanticResultValue>또는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스를 반복적으로 수정할 수 있는 여러 의미 체계 요소 또는 키 이름이 동일한 의미 체계는 중복 요소를 만들지 않으려면 있는지 확인은 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성의는 <xref:System.Speech.Recognition.SemanticValue>개체.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> 음성 인식기에서 이러한 상황이 발생 하는 경우 예외를 throw 합니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [이해 SemanticResultValue 및 SemanticResultKey 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] { \"red\", \"green\", \"blue\" });  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    (GrammarBuilder)\"Make background\" + colorChoice;  \n  GrammarBuilder setPhrase =  \n    \"Set background to\" + (GrammarBuilder)colorChoice;  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "첫 번째 문법 요소입니다."
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "두 번째 문법 하는 요소를 대체 요소 집합을 나타냅니다."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "반환 된 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 의 시퀀스에 대 한는 <code> builder </code> 매개 변수를 차례로 <code> choices </code> 매개 변수입니다."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  id: op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 두 개의 시퀀스를 포함 하는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>변환할 때 다음과 같은 클래스를 지원합니다.</xref:System.Speech.Recognition.GrammarBuilder>      - <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>이 메서드에 대 한 위에 나열 된 개체는 `builder1` 및 `builder2` 매개 변수.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> 자세한 내용은 참조는 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>연산자.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      > [!IMPORTANT] > 결합 하면 <xref:System.Speech.Recognition.GrammarBuilder>포함 하는 개체 <xref:System.Speech.Recognition.SemanticResultValue>또는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스를 반복적으로 수정할 수 있는 여러 의미 체계 요소 또는 키 이름이 동일한 의미 체계는 중복 요소를 만들지 않으려면 있는지 확인은 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성의는 <xref:System.Speech.Recognition.SemanticValue>개체.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 음성 인식기에서 이러한 상황이 발생 하는 경우 예외를 throw 합니다. 의미 체계 정보를 포함 하는 음성 인식 문법을 작성 하는 방법에 대 한 자세한 내용은 참조 [이해 SemanticResultValue 및 SemanticResultKey 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)합니다."
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);
    parameters:
    - id: builder1
      type: System.Speech.Recognition.GrammarBuilder
      description: "첫 번째 문법 요소입니다."
    - id: builder2
      type: System.Speech.Recognition.GrammarBuilder
      description: "두 번째 문법 요소입니다."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "반환 된 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 의 시퀀스에 대 한는 <code> builder1 </code> 매개 변수를 차례로 <code> builder2 </code> 매개 변수입니다."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  id: op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(GrammarBuilder,String)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,String)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 를 포함 하는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 구를 옵니다."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>변환할 때 다음과 같은 클래스를 지원합니다.</xref:System.Speech.Recognition.GrammarBuilder>      - <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>이 메서드에 대 한 위에 나열 된 개체는 `builder` 매개 변수.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> 자세한 내용은 참조는 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>연산자.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.GrammarBuilder builder, string phrase);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "첫 번째 문법 요소입니다."
    - id: phrase
      type: System.String
      description: "두 번째 문법 요소: 일련의 단어를 나타내는입니다."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "반환 된 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 의 시퀀스에 대 한는 <code> builder </code> 매개 변수를 차례로 <code> phrase </code> 매개 변수입니다."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  id: op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(String,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(String,GrammarBuilder)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 구문 다음을 포함 하는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>합니다."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>변환할 때 다음과 같은 클래스를 지원합니다.</xref:System.Speech.Recognition.GrammarBuilder>      - <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>이 메서드에 대 한 위에 나열 된 개체는 `builder` 매개 변수.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> 자세한 내용은 참조는 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>연산자.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>"
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] { \"red\", \"green\", \"blue\" });  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    (GrammarBuilder)\"Make background\" + colorChoice;  \n  GrammarBuilder setPhrase =  \n    \"Set background to\" + (GrammarBuilder)colorChoice;  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the Grammar object from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (string phrase, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: phrase
      type: System.String
      description: "첫 번째 문법 요소: 일련의 단어를 나타내는입니다."
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "두 번째 문법 요소입니다."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "반환 된 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 의 시퀀스에 대 한는 <code> phrase </code> 매개 변수를 차례로 <code> builder </code> 매개 변수입니다."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)
  id: op_Implicit(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(Choices)
  nameWithType: GrammarBuilder.op_Implicit(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(Choices)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (System.Speech.Recognition.Choices choices);
    parameters:
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "추가할 수 있습니다."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "추가할 수 있습니다."
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)
  id: op_Implicit(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(SemanticResultKey)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultKey)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (System.Speech.Recognition.SemanticResultKey semanticKey);
    parameters:
    - id: semanticKey
      type: System.Speech.Recognition.SemanticResultKey
      description: "추가할 수 있습니다."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "추가할 수 있습니다."
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)
  id: op_Implicit(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(SemanticResultValue)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultValue)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (System.Speech.Recognition.SemanticResultValue semanticValue);
    parameters:
    - id: semanticValue
      type: System.Speech.Recognition.SemanticResultValue
      description: "추가할 수 있습니다."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "추가할 수 있습니다."
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)
  id: op_Implicit(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(String)
  nameWithType: GrammarBuilder.op_Implicit(String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(String)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (string phrase);
    parameters:
    - id: phrase
      type: System.String
      description: "추가할 수 있습니다."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "추가할 수 있습니다."
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.GrammarBuilder.#ctor
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder()
  nameWithType: GrammarBuilder.GrammarBuilder()
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder()
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(Choices)
  nameWithType: GrammarBuilder.GrammarBuilder(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(Choices)
- uid: System.Speech.Recognition.Choices
  parent: System.Speech.Recognition
  isExternal: false
  name: Choices
  nameWithType: Choices
  fullName: System.Speech.Recognition.Choices
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(SemanticResultKey)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultKey)
- uid: System.Speech.Recognition.SemanticResultKey
  parent: System.Speech.Recognition
  isExternal: false
  name: SemanticResultKey
  nameWithType: SemanticResultKey
  fullName: System.Speech.Recognition.SemanticResultKey
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(SemanticResultValue)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultValue)
- uid: System.Speech.Recognition.SemanticResultValue
  parent: System.Speech.Recognition
  isExternal: false
  name: SemanticResultValue
  nameWithType: SemanticResultValue
  fullName: System.Speech.Recognition.SemanticResultValue
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(String)
  nameWithType: GrammarBuilder.GrammarBuilder(String)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
- uid: System.Speech.Recognition.SubsetMatchingMode
  parent: System.Speech.Recognition
  isExternal: false
  name: SubsetMatchingMode
  nameWithType: SubsetMatchingMode
  fullName: System.Speech.Recognition.SubsetMatchingMode
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(String,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(Choices,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,Choices)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(GrammarBuilder,String)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,String)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(String,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(String,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(Choices)
  nameWithType: GrammarBuilder.Append(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(Choices)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(GrammarBuilder)
  nameWithType: GrammarBuilder.Append(GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(SemanticResultKey)
  nameWithType: GrammarBuilder.Append(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultKey)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(SemanticResultValue)
  nameWithType: GrammarBuilder.Append(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultValue)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(String)
  nameWithType: GrammarBuilder.Append(String)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.Append(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,SubsetMatchingMode)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(String,Int32,Int32)
  nameWithType: GrammarBuilder.Append(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendDictation()
  nameWithType: GrammarBuilder.AppendDictation()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation()
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendDictation(String)
  nameWithType: GrammarBuilder.AppendDictation(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation(String)
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendRuleReference(String)
  nameWithType: GrammarBuilder.AppendRuleReference(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String)
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendRuleReference(String,String)
  nameWithType: GrammarBuilder.AppendRuleReference(String,String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String,String)
- uid: System.Speech.Recognition.GrammarBuilder.AppendWildcard
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendWildcard()
  nameWithType: GrammarBuilder.AppendWildcard()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendWildcard()
- uid: System.Speech.Recognition.GrammarBuilder.Culture
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Culture
  nameWithType: GrammarBuilder.Culture
  fullName: System.Speech.Recognition.GrammarBuilder.Culture
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: DebugShowPhrases
  nameWithType: GrammarBuilder.DebugShowPhrases
  fullName: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(Choices,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,Choices)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(GrammarBuilder,String)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,String)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(String,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(String,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(Choices)
  nameWithType: GrammarBuilder.op_Implicit(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(Choices)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(SemanticResultKey)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultKey)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(SemanticResultValue)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultValue)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(String)
  nameWithType: GrammarBuilder.op_Implicit(String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(String)
- uid: System.Speech.Recognition.GrammarBuilder.#ctor*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder.GrammarBuilder
- uid: System.Speech.Recognition.GrammarBuilder.Add*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add
  nameWithType: GrammarBuilder.Add
- uid: System.Speech.Recognition.GrammarBuilder.Append*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append
  nameWithType: GrammarBuilder.Append
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendDictation
  nameWithType: GrammarBuilder.AppendDictation
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendRuleReference
  nameWithType: GrammarBuilder.AppendRuleReference
- uid: System.Speech.Recognition.GrammarBuilder.AppendWildcard*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendWildcard
  nameWithType: GrammarBuilder.AppendWildcard
- uid: System.Speech.Recognition.GrammarBuilder.Culture*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Culture
  nameWithType: GrammarBuilder.Culture
- uid: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: DebugShowPhrases
  nameWithType: GrammarBuilder.DebugShowPhrases
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition
  nameWithType: GrammarBuilder.op_Addition
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit
  nameWithType: GrammarBuilder.op_Implicit
