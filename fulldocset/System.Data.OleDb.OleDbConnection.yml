### YamlMime:ManagedReference
items:
- uid: System.Data.OleDb.OleDbConnection
  id: OleDbConnection
  children:
  - System.Data.OleDb.OleDbConnection.#ctor
  - System.Data.OleDb.OleDbConnection.#ctor(System.String)
  - System.Data.OleDb.OleDbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.OleDb.OleDbConnection.BeginTransaction
  - System.Data.OleDb.OleDbConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.OleDb.OleDbConnection.ChangeDatabase(System.String)
  - System.Data.OleDb.OleDbConnection.Close
  - System.Data.OleDb.OleDbConnection.ConnectionString
  - System.Data.OleDb.OleDbConnection.ConnectionTimeout
  - System.Data.OleDb.OleDbConnection.CreateCommand
  - System.Data.OleDb.OleDbConnection.CreateDbCommand
  - System.Data.OleDb.OleDbConnection.Database
  - System.Data.OleDb.OleDbConnection.DataSource
  - System.Data.OleDb.OleDbConnection.Dispose(System.Boolean)
  - System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  - System.Data.OleDb.OleDbConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])
  - System.Data.OleDb.OleDbConnection.GetSchema
  - System.Data.OleDb.OleDbConnection.GetSchema(System.String)
  - System.Data.OleDb.OleDbConnection.GetSchema(System.String,System.String[])
  - System.Data.OleDb.OleDbConnection.InfoMessage
  - System.Data.OleDb.OleDbConnection.Open
  - System.Data.OleDb.OleDbConnection.Provider
  - System.Data.OleDb.OleDbConnection.ReleaseObjectPool
  - System.Data.OleDb.OleDbConnection.ResetState
  - System.Data.OleDb.OleDbConnection.ServerVersion
  - System.Data.OleDb.OleDbConnection.State
  - System.Data.OleDb.OleDbConnection.System#ICloneable#Clone
  langs:
  - csharp
  name: OleDbConnection
  nameWithType: OleDbConnection
  fullName: System.Data.OleDb.OleDbConnection
  type: Class
  summary: "데이터 원본에 대해 열린 연결을 나타냅니다."
  remarks: "OleDbConnection 개체 데이터 소스에 고유한 연결을 나타냅니다. 클라이언트/서버 데이터베이스 시스템 이므로 네트워크 연결 서버에 해당 합니다. 네이티브 OLE DB 공급자에서 지 원하는 기능에 따라 일부 메서드나 OleDbConnection 개체의 속성을 사용할 수 없습니다 수 있습니다.       OleDbConnection의 인스턴스를 만들 때 모든 속성은 초기 값으로 설정 됩니다. 이러한 값의 목록이 OleDbConnection 생성자를 참조 하십시오.       단일 OleDbConnection에 둘 이상의 DataReader를 열 수 있습니다. 사용 하는 OLE DB 공급자는 단일 연결에서 둘 이상의 DataReader를 지원 하지 않으면, 공급자 각각에 대 한 추가 연결을 암시적으로 엽니다.       OleDbConnection 범위를 벗어나면 닫혀 있지 않습니다. 따라서 명시적으로 닫아야 연결 호출 하 여 <xref:System.Data.OleDb.OleDbConnection.Close%2A>또는 **Dispose**, 또는 OleDbConnection 개체 내에서 사용 하 여 한 `Using` 문.</xref:System.Data.OleDb.OleDbConnection.Close%2A>      > [!NOTE] > 고성능 응용 프로그램을 배포 하려면 있습니다 연결 풀링을 사용 해야 합니다. .NET Framework Data Provider for OLE DB를 사용 하면 공급자 자동으로이 관리 하기 때문에 연결 풀링을 사용할 필요가 없습니다. 연결을 사용 하는 방법에 대 한 자세한 내용은 참조 OLE DB에 대 한.NET Framework Data Provider를 사용 하 여 풀링 [OLE DB, ODBC 및 Oracle 연결 풀링](~/add/includes/ajax-current-ext-md.md)합니다.       심각한 <xref:System.Data.OleDb.OleDbException>(예: SQL Server 심각도 수준이 20 이상인 경우)에서 실행 하는 메서드에서 생성 되는 <xref:System.Data.OleDb.OleDbCommand>는 OleDbConnection 닫혔을 수 있습니다.</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbException> 그러나 사용자는 다시 연결 하 고 계속할 수 있습니다.       OleDbConnection 개체의 인스턴스를 생성 하는 응용 프로그램 설정 선언적 이거나 명령 보안 요청에 의해 코드에 충분 한 권한을 갖도록 모든 직접 및 간접 호출자가 필요할 수 있습니다. OleDbConnection 하면 보안 요구를 사용 하는 <xref:System.Data.OleDb.OleDbPermission>개체입니다.</xref:System.Data.OleDb.OleDbPermission> 사용자가 해당 코드를 사용 하 여 충분 한 권한이 있는지 확인할 수는 <xref:System.Data.OleDb.OleDbPermissionAttribute>개체입니다.</xref:System.Data.OleDb.OleDbPermissionAttribute> 사용자와 관리자에도 사용할 수는 [Caspol.exe (코드 액세스 보안 정책 도구)](~/add/includes/ajax-current-ext-md.md) 컴퓨터, 사용자 및 엔터프라이즈 수준에서 보안 정책을 수정할 수 있습니다. 자세한 내용은 참조 [코드 액세스 보안 및 ADO.NET](~/add/includes/ajax-current-ext-md.md)합니다.       데이터 서버에서 경고 및 정보 메시지를 처리 하는 방법에 대 한 자세한 내용은 참조 [연결 이벤트](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > The OleDbConnection 개체 설정 또는 OLE DB 공급자와 관련 된 동적 속성 검색을 지원 하지 않습니다. OLE DB 공급자에 대 한 연결 문자열에 전달할 수 있는 속성만 지원 됩니다."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbCommand> and an OleDbConnection. The OleDbConnection is opened and set as the <xref:System.Data.OleDb.OleDbCommand.Connection%2A> for the <xref:System.Data.OleDb.OleDbCommand>. The example then calls <xref:System.Data.OleDb.OleDbCommand.ExecuteNonQuery%2A> and closes the connection. To accomplish this, <xref:System.Data.OleDb.OleDbCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is an SQL INSERT statement.  \n  \n [!code-cs[Classic WebData OleDbConnection Example#1](~/add/codesnippet/csharp/t-system.data.oledb.oled_3_1.cs)]\n [!code-vb[Classic WebData OleDbConnection Example#1](~/add/codesnippet/visualbasic/t-system.data.oledb.oled_3_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("InfoMessage")]

      public sealed class OleDbConnection : System.Data.Common.DbConnection, ICloneable, IDisposable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbConnection
  implements:
  - System.ICloneable
  - System.IDisposable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbConnection.DbProviderFactory
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.#ctor
  id: '#ctor'
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: OleDbConnection()
  nameWithType: OleDbConnection.OleDbConnection()
  fullName: System.Data.OleDb.OleDbConnection.OleDbConnection()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref> 클래스입니다."
  remarks: "새 인스턴스가 <xref:System.Data.OleDb.OleDbConnection>만들어지면 읽기/쓰기 속성의 관련된 키워드를 사용 하 여 구체적으로 설정 되어 있지 않으면 다음 초기 값으로 설정 됩니다는 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>속성.</xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> </xref:System.Data.OleDb.OleDbConnection>      | 속성 | 초기 값 |   |----------------|-------------------|   | <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>| 빈 문자열 (&quot;&quot;) |   | <xref:System.Data.OleDb.OleDbConnection.ConnectionTimeout%2A>|&15; |   | <xref:System.Data.OleDb.OleDbConnection.Database%2A>| 빈 문자열 (&quot;&quot;) |   | <xref:System.Data.OleDb.OleDbConnection.DataSource%2A>| 빈 문자열 (&quot;&quot;) |       사용 하 여 이러한 속성에 대 한 값을 변경할 수는 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>속성.</xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> </xref:System.Data.OleDb.OleDbConnection.DataSource%2A> </xref:System.Data.OleDb.OleDbConnection.Database%2A> </xref:System.Data.OleDb.OleDbConnection.ConnectionTimeout%2A> </xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>"
  example:
  - "The following example creates and opens an <xref:System.Data.OleDb.OleDbConnection>.  \n  \n [!code-cs[Classic WebData OleDbConnection.OleDbConnection Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_7_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.OleDbConnection Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_7_1.vb)]"
  syntax:
    content: public OleDbConnection ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: OleDbConnection(String)
  nameWithType: OleDbConnection.OleDbConnection(String)
  fullName: System.Data.OleDb.OleDbConnection.OleDbConnection(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref> 지정 된 연결 문자열을 사용 합니다."
  remarks: "새 인스턴스가 <xref:System.Data.OleDb.OleDbConnection>만들어지면 읽기/쓰기 속성의 관련된 키워드를 사용 하 여 구체적으로 설정 되어 있지 않으면 다음 초기 값으로 설정 됩니다는 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>속성.</xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> </xref:System.Data.OleDb.OleDbConnection>      | 속성 | 초기 값 |   |----------------|-------------------|   | <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>| `connectionString`|   | <xref:System.Data.OleDb.OleDbConnection.ConnectionTimeout%2A>|&15; |   | <xref:System.Data.OleDb.OleDbConnection.Database%2A>| 빈 문자열 (&quot;&quot;) |   | <xref:System.Data.OleDb.OleDbConnection.DataSource%2A>| 빈 문자열 (&quot;&quot;) |       사용 하 여 이러한 속성에 대 한 값을 변경할 수는 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>속성.</xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> </xref:System.Data.OleDb.OleDbConnection.DataSource%2A> </xref:System.Data.OleDb.OleDbConnection.Database%2A> </xref:System.Data.OleDb.OleDbConnection.ConnectionTimeout%2A> </xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>"
  example:
  - "The following example creates and opens an <xref:System.Data.OleDb.OleDbConnection>.  \n  \n [!code-cs[Classic WebData OleDbConnection.OleDbConnection1 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_1_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.OleDbConnection1 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_1_1.vb)]"
  syntax:
    content: public OleDbConnection (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "데이터베이스를 열지 사용 되는 연결 합니다."
  overload: System.Data.OleDb.OleDbConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: OleDbConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.OleDb.OleDbConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "추가할 수 있습니다."
    return:
      type: System.Data.Common.DbTransaction
      description: "추가할 수 있습니다."
  overload: System.Data.OleDb.OleDbConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: OleDbConnection.BeginTransaction()
  fullName: System.Data.OleDb.OleDbConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "현재도 데이터베이스 트랜잭션을 시작 <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> 값입니다."
  remarks: "명시적으로 커밋하거나 사용 하 여 트랜잭션을 롤백하는 <xref:System.Data.OleDb.OleDbTransaction.Commit%2A>또는 <xref:System.Data.OleDb.OleDbTransaction.Rollback%2A>메서드.</xref:System.Data.OleDb.OleDbTransaction.Rollback%2A> </xref:System.Data.OleDb.OleDbTransaction.Commit%2A> .NET Framework Data Provider for OLE DB 트랜잭션 관리 모델을 올바르게 수행 되었는지 확인, 데이터 원본에서 제공 하는 다른 트랜잭션 관리 모델을 사용 하지 마십시오."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and an <xref:System.Data.OleDb.OleDbTransaction>. It also demonstrates how to use the BeginTransaction, <xref:System.Data.OleDb.OleDbTransaction.Commit%2A>, and <xref:System.Data.OleDb.OleDbTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData OleDbConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_23_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_23_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.OleDb.OleDbTransaction
      description: "새 트랜잭션을 나타내는 개체입니다."
  overload: System.Data.OleDb.OleDbConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "병렬 트랜잭션은 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: OleDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.OleDb.OleDbConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "지정 된 격리 수준으로 데이터베이스 트랜잭션을 시작 합니다."
  remarks: "명시적으로 커밋하거나 사용 하 여 트랜잭션을 롤백하는 <xref:System.Data.OleDb.OleDbTransaction.Commit%2A>또는 <xref:System.Data.OleDb.OleDbTransaction.Rollback%2A>메서드.</xref:System.Data.OleDb.OleDbTransaction.Rollback%2A> </xref:System.Data.OleDb.OleDbTransaction.Commit%2A> .NET Framework Data Provider for OLE DB 트랜잭션 관리 모델을 올바르게 수행 되었는지 확인, 데이터 원본에서 제공 하는 다른 트랜잭션 관리 모델을 사용 하지 마십시오.      > [!NOTE] > 격리 수준을 지정 하지 않으면 기본 공급자에 대 한 기본 격리 수준 사용 됩니다. 격리 수준을 BeginTransaction 메서드를 지정 하려면는 오버 로드를 사용 하 여는 `isolationLevel` 매개 변수입니다."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and an <xref:System.Data.OleDb.OleDbTransaction>. It also demonstrates how to use the <xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>, a <xref:System.Data.OleDb.OleDbTransaction.Commit%2A>, and <xref:System.Data.OleDb.OleDbTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData OleDbConnection.BeginTransaction1 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_25_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.BeginTransaction1 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_25_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "트랜잭션을 실행 해야 하는 격리 수준입니다."
    return:
      type: System.Data.OleDb.OleDbTransaction
      description: "새 트랜잭션을 나타내는 개체입니다."
  overload: System.Data.OleDb.OleDbConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "병렬 트랜잭션은 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: OleDbConnection.ChangeDatabase(String)
  fullName: System.Data.OleDb.OleDbConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "열린에 대 한 현재 데이터베이스 변경 <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref>합니다."
  remarks: "제공 된 값이 고 `database` 매개 변수는 올바른 데이터베이스 이름 이어야 합니다. `database` 매개 변수는 null 값, 빈 문자열 또는 공백 문자로 이루어진 문자열에 포함할 수 없습니다."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData OleDbConnection.Database Example#2](~/add/codesnippet/csharp/m-system.data.oledb.oled_20_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.Database Example#2](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_20_1.vb)]"
  syntax:
    content: public override void ChangeDatabase (string value);
    parameters:
    - id: value
      type: System.String
      description: "데이터베이스 이름."
  overload: System.Data.OleDb.OleDbConnection.ChangeDatabase*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "데이터베이스 이름이 올바르지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결이 열려 있지 않습니다."
  - type: System.Data.OleDb.OleDbException
    commentId: T:System.Data.OleDb.OleDbException
    description: "데이터베이스를 변경할 수 없습니다."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Close
  id: Close
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Close()
  nameWithType: OleDbConnection.Close()
  fullName: System.Data.OleDb.OleDbConnection.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "데이터 원본에 연결을 닫습니다."
  remarks: "Close 메서드가 보류 중인 모든 트랜잭션을 롤백합니다. 그런 다음 연결 풀에 대 한 연결을 해제 하거나 연결 풀링을 사용 하지 않도록 설정 하는 경우 연결을 닫습니다. 닫기를 처리 하는 동안 호출 되는 <xref:System.Data.Common.DbConnection.StateChange>이벤트를 더 추가 <xref:System.Data.Common.DbConnection.StateChange>이벤트가 발생 합니다.</xref:System.Data.Common.DbConnection.StateChange> </xref:System.Data.Common.DbConnection.StateChange>       응용 프로그램 닫기 여러 번 호출할 수 있습니다. 예외가 생성 되지 않습니다.      > [!CAUTION] > Close를 호출 하지 않으면 또는 **Dispose** 에 <xref:System.Data.OleDb.OleDbConnection>, <xref:System.Data.OleDb.OleDbDataReader>, 또는 다른 관리 되는 개체에는 `Finalize` 프로그램 클래스의 메서드</xref:System.Data.OleDb.OleDbDataReader> </xref:System.Data.OleDb.OleDbConnection> 종료자에서만 클래스에 직접 속한 관리 되지 않는 리소스를 해제 해야 합니다. 클래스에 관리 되지 않는 리소스가 없는 경우 포함 되지 않습니다는 `Finalize` 클래스 정의에 메서드. 자세한 내용은 참조 [가비지 수집](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: OleDbConnection.ConnectionString
  fullName: System.Data.OleDb.OleDbConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "데이터베이스를 여는 데 사용 하는 문자열을 가져오거나 설정 합니다."
  remarks: "The ConnectionString is designed to match OLE DB connection string format as closely as possible with the following exceptions:  \n  \n-   The \"Provider = `value` \" clause is required. However, you cannot use \"Provider = MSDASQL\" because the .NET Framework Data Provider for OLE DB does not support the OLE DB Provider for ODBC (MSDASQL). To access ODBC data sources, use the <xref:System.Data.Odbc.OdbcConnection> object that is in the <xref:System.Data.Odbc> namespace.  \n  \n-   Unlike ODBC or ADO, the connection string that is returned is the same as the user-set ConnectionString, minus security information if `Persist Security Info` is set to `false` (default). The .NET Framework Data Provider for OLE DB does not persist or return the password in a connection string unless you set the `Persist Security Info` keyword to `true` (not recommended). To maintain a high level of security, it is strongly recommended that you use the `Integrated Security` keyword with `Persist Security Info` set to `false`.  \n  \n You can use the ConnectionString property to connect to a variety of data sources. The following example illustrates several possible connection strings.  \n  \n```  \n\"Provider=MSDAORA; Data Source=ORACLE8i7;Persist Security Info=False;Integrated Security=Yes\"  \n  \n\"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=c:\\bin\\LocalAccess40.mdb\"  \n  \n\"Provider=SQLOLEDB;Data Source=(local);Integrated Security=SSPI\"  \n```  \n  \n If the `Data Source` keyword is not specified in the connection string, the provider will try to connect to the local server if one is available.  \n  \n For more information about connection strings, see [Using Connection String Keywords with SQL Server Native Client](http://go.microsoft.com/fwlink/?LinkId=126696).  \n  \n The ConnectionString property can be set only when the connection is closed. Many of the connection string values have corresponding read-only properties. When the connection string is set, these properties are updated, except when an error is detected. In this case, none of the properties are updated. <xref:System.Data.OleDb.OleDbConnection> properties return only those settings that are contained in the ConnectionString.  \n  \n Resetting the ConnectionString on a closed connection resets all connection string values and related properties. This includes the password. For example, if you set a connection string that includes \"Initial Catalog= AdventureWorks\", and then reset the connection string to \"Provider= SQLOLEDB;Data Source= MySQLServer;IntegratedSecurity=SSPI\", the <xref:System.Data.OleDb.OleDbConnection.Database%2A> property is no longer set to AdventureWorks. (The Initial Catalog value of the connection string corresponds to the `Database` property.)  \n  \n A preliminary validation of the connection string is performed when the property is set. If values for the `Provider`, `Connect Timeout`, `Persist Security Info`, or `OLE DB Services` are included in the string, these values are checked. When an application calls the <xref:System.Data.OleDb.OleDbConnection.Open%2A> method, the connection string is fully validated. If the connection string contains invalid or unsupported properties, a run-time exception, such as <xref:System.ArgumentException>, is generated.  \n  \n> [!CAUTION]\n>  It is possible to supply connection information for an <xref:System.Data.OleDb.OleDbConnection> in a Universal Data Link (UDL) file; however you should avoid doing so. UDL files are not encrypted and expose connection string information in clear text. Because a UDL file is an external file-based resource to your application, it cannot be secured using the .NET Framework.  \n  \n The basic format of a connection string includes a series of keyword/value pairs separated by semicolons. The equal sign (=) connects each keyword and its value. To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotation marks. If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotation marks. The single quotation mark is also useful if the value starts with a double-quote character. Conversely, the double quotation mark can be used if the value starts with a single quotation mark. If the value contains both single-quote and double-quote characters, the quotation-mark character used to enclose the value must be doubled every time it occurs within the value.  \n  \n To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotation marks or double quotation marks. Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotation marks. However, spaces within a string literal keyword or value are preserved. Single or double quotation marks may be used within a connection string without using delimiters (for example, `Data Source= my'Server` or `Data Source= my\"Server`) unless a quotation-mark character is the first or last character in the value.  \n  \n To include an equal sign (=) in a keyword or value, it must be preceded by another equal sign. For example, in the hypothetical connection string  \n  \n```  \n\"key==word=value\"  \n```  \n  \n the keyword is \"key=word\" and the value is \"value\".  \n  \n If a specific keyword in a keyword=value pair occurs multiple times in a connection string, the last occurrence listed is used in the value set.  \n  \n Keywords are not case sensitive.  \n  \n> [!CAUTION]\n>  You should use caution when constructing a connection string based on user input, for example, when retrieving user ID and password information from a dialog box and appending it to the connection string. The application should make sure that a user cannot embed additional connection-string parameters in these values, for example, entering a password as \"validpassword;database= somedb\" in an attempt to attach to a different database. If you use the Extended Properties connection string parameter for OLE DB connections, avoid passing user IDs and passwords because you should avoid storing user IDs and passwords in clear text if you can, and because the default setting of `Persist Security Info= false` does not affect the `Extended Properties` parameter."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and sets some of its properties in the connection string.  \n  \n [!code-cs[Classic WebData OleDbConnection.DataSource Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_4_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.DataSource Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_4_1.vb)]"
  syntax:
    content: public override string ConnectionString { get; set; }
    return:
      type: System.String
      description: "데이터 원본 이름 및 초기 연결을 설정 하는 데 필요한 기타 매개 변수를 포함 하는 OLE DB 공급자 연결 문자열입니다. 기본값은 빈 문자열입니다."
  overload: System.Data.OleDb.OleDbConnection.ConnectionString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "잘못 된 연결 문자열 인수를 제공 했거나 필요한 연결 문자열 인수를 제공 하지 않았습니다."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: OleDbConnection.ConnectionTimeout
  fullName: System.Data.OleDb.OleDbConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "시도 종료 하 고 오류를 생성 하기 전에 연결을 설정 하는 동안 대기할 시간을을 가져옵니다."
  remarks: "값 0은 제한 없음을 나타냄에 피해 야 합니다.는 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>연결 시도 무기한 대기 하기 때문에.</xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and sets some of its properties in the connection string.  \n  \n [!code-vb[Classic WebData OleDbConnection.ConnectionTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_2_1.vb)]\n [!code-cs[Classic WebData OleDbConnection.ConnectionTimeout Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_2_1.cs)]"
  syntax:
    content: public override int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "연결이 열리기 전까지 기다릴 시간 (초) 시간입니다. 기본값은 15 초입니다."
  overload: System.Data.OleDb.OleDbConnection.ConnectionTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "설정 값이 0 보다 작은 경우"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: OleDbConnection.CreateCommand()
  fullName: System.Data.OleDb.OleDbConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "만들고 반환는 <xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref> 연관 된 개체는 <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref>합니다."
  syntax:
    content: public System.Data.OleDb.OleDbCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref> 개체입니다."
  overload: System.Data.OleDb.OleDbConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: OleDbConnection.CreateDbCommand()
  fullName: System.Data.OleDb.OleDbConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "추가할 수 있습니다."
  overload: System.Data.OleDb.OleDbConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Database
  id: Database
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Database
  nameWithType: OleDbConnection.Database
  fullName: System.Data.OleDb.OleDbConnection.Database
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "현재 데이터베이스 이름이 나 연결이 열린 후 사용할 데이터베이스의 이름을 가져옵니다."
  remarks: "데이터베이스 속성을 동적으로 업데이트합니다. SQL 문을 사용 하 여 현재 데이터베이스를 변경 하면 또는 <xref:System.Data.OleDb.OleDbConnection.ChangeDatabase%2A>정보 메시지가 전송 되는 메서드와 속성을 자동으로 업데이트 됩니다.</xref:System.Data.OleDb.OleDbConnection.ChangeDatabase%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData OleDbConnection.Database Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_14_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.Database Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_14_1.vb)]"
  syntax:
    content: public override string Database { get; }
    return:
      type: System.String
      description: "현재 데이터베이스 이름이 나 연결이 열린 후 사용할 데이터베이스의 이름을의 이름입니다. 기본값은 빈 문자열입니다."
  overload: System.Data.OleDb.OleDbConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.DataSource
  id: DataSource
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: OleDbConnection.DataSource
  fullName: System.Data.OleDb.OleDbConnection.DataSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "서버 이름이 나 데이터 원본의 파일 이름을 가져옵니다."
  remarks: "데이터베이스에 대 한 연결이 닫힐 경우는 `DataSource` 속성 값을 반환에 `ConnectionString` 데이터 소스 키워드에 대 한 합니다. 연결이 열려 있는 경우와 `ConnectionString` 데이터 소스 키워드 값으로 시작 &quot;| datadirectory |&quot;, 속성 값을 반환에 `ConnectionString` 데이터 원본 키워드에 대 한 합니다. 속성에 대 한 네이티브 공급자 반환 반환 하는 데이터베이스 연결이 열려 있으면는 `DBPROP_INIT_DATASOURCE,` 비어 있는 경우 네이티브 공급자 `DBPROP_DATASOURCENAME` 반환 됩니다."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData OleDbConnection.DataSource Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_26_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.DataSource Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_26_1.vb)]"
  syntax:
    content: public override string DataSource { get; }
    return:
      type: System.String
      description: "서버 이름 또는 데이터 원본의 파일 이름입니다. 기본값은 빈 문자열입니다."
  overload: System.Data.OleDb.OleDbConnection.DataSource*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: OleDbConnection.Dispose(Boolean)
  fullName: System.Data.OleDb.OleDbConnection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "추가할 수 있습니다."
  overload: System.Data.OleDb.OleDbConnection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  id: EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: OleDbConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(ITransaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "지정된 된 트랜잭션에 분산 트랜잭션으로 참여합니다."
  remarks: "새 ADO.NET 2.0에서 지원은 사용에 대 한는 <xref:System.Data.Common.DbConnection.EnlistTransaction%2A>메서드를 분산된 트랜잭션에 참여 합니다.</xref:System.Data.Common.DbConnection.EnlistTransaction%2A> 연결을 참여 하기 때문에 <xref:System.Transactions.Transaction>인스턴스에 **EnlistTransaction** 에서 사용할 수 있는 기능을 활용는 <xref:System.Transactions>분산 트랜잭션에서, 보다 더 자주 사용 하는 네임 스페이스를 관리 하기 위한 **참여가** 이 목적을 위해.</xref:System.Transactions> </xref:System.Transactions.Transaction> 자세한 내용은 참조 [분산 트랜잭션](~/add/includes/ajax-current-ext-md.md)합니다.       자동 인 리스트 먼 트 하지 않으면 참여가 메서드를 사용 하 여 기존 분산된 트랜잭션에 인 리스트 먼 트 할 수 있습니다. 기존 분산된 트랜잭션에 인 리스트 먼 트 하면 즉, 트랜잭션이 커밋되거나 롤백될 경우 데이터 소스에서 코드에 의해 수정 된도 트랜잭션이 커밋 또는 롤백됨. 분산된 트랜잭션에 대 한 자세한 내용은 참조 [분산 트랜잭션을](../Topic/Distributed%20Transactions.md)합니다.       참여가 예외를 반환 하는 경우 <xref:System.Data.OleDb.OleDbConnection> <xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>.</xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A> 를 사용 하는 트랜잭션이 이미 시작</xref:System.Data.OleDb.OleDbConnection> 그러나 트랜잭션이 데이터 소스에서 시작 된 로컬 트랜잭션 인지 (명시적으로 사용 하 여 BEGIN TRANSACTION 문을 실행 하는 예를 들어 여는 <xref:System.Data.OleDbClient.OleDbCommand>개체), 참여가 로컬 트랜잭션을 롤백하고 요청에 따라 기존 분산된 트랜잭션에 인 리스트 먼 트 합니다.</xref:System.Data.OleDbClient.OleDbCommand> 로컬 트랜잭션이 롤백 되었습니다 및<xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>.</xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A> 를 사용 하 여 시작 되지 않는 모든 로컬 트랜잭션을 관리 해야 하는 통지를 받지 못할"
  syntax:
    content: public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);
    parameters:
    - id: transaction
      type: System.EnterpriseServices.ITransaction
      description: "기존에 대 한 참조 <xref href=&quot;System.EnterpriseServices.ITransaction&quot;> </xref> 를 등록 합니다."
  overload: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: OleDbConnection.EnlistTransaction(Transaction)
  fullName: System.Data.OleDb.OleDbConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "지정된 된 트랜잭션에 분산 트랜잭션으로 참여합니다."
  remarks: '새 ADO.NET 2.0에서 지원은 사용에 대 한는 <xref:System.Data.Common.DbConnection.EnlistTransaction%2A>메서드를 분산된 트랜잭션에 참여 합니다.</xref:System.Data.Common.DbConnection.EnlistTransaction%2A> 연결을 참여 하기 때문에 <xref:System.Transactions.Transaction>인스턴스에 **EnlistTransaction** 에서 사용할 수 있는 기능을 활용는 <xref:System.Transactions>분산 트랜잭션에서, 보다 더 자주 사용 하는 네임 스페이스를 관리 하기 위한 **참여가**, 사용 하는 <xref:System.EnterpriseServices.ITransaction>개체.</xref:System.EnterpriseServices.ITransaction> </xref:System.Transactions> </xref:System.Transactions.Transaction> 역시 약간 다른 의미 체계: 트랜잭션에 연결을 명시적으로 등록 된, 등록 취소 하거나 수 첫 번째 트랜잭션이 완료 될 때까지 다른 트랜잭션에 참여 합니다. 분산된 트랜잭션에 대 한 자세한 내용은 참조 [분산 트랜잭션을](~/add/includes/ajax-current-ext-md.md)합니다.'
  syntax:
    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "기존에 대 한 참조 <xref href=&quot;System.Transactions.Transaction&quot;> </xref> 를 등록 합니다."
  overload: System.Data.OleDb.OleDbConnection.EnlistTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])
  id: GetOleDbSchemaTable(System.Guid,System.Object[])
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: GetOleDbSchemaTable(Guid,Object[])
  nameWithType: OleDbConnection.GetOleDbSchemaTable(Guid,Object[])
  fullName: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(Guid,Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "지정된 된 제한을 적용 한 후에 GUID로 표시 된 대로 및 데이터 원본에서 스키마 정보를 반환 합니다."
  remarks: "스키마 테이블으로 반환 됩니다는 <xref:System.Data.DataTable>있는 동일한 형식으로 지정 된 OLE DB 스키마 행 집합으로는 `schema` 매개 변수.</xref:System.Data.DataTable> 사용 하 여는 `restrictions` 에 반환 될 행을 필터링 하려면 매개 변수는 <xref:System.Data.DataTable>(예를 들어 지정 하 여 테이블 이름, 형식, 소유자 또는 스키마에 대 한 제한).</xref:System.Data.DataTable> 배열에 값을 전달 하는 경우에 빈 문자열이 나 null 값을 포함 하지 않는 배열 요소에 대 한 포함 합니다. 에 빈 배열을 전달 하는 경우 `restrictions`, (각 테이블 마다 하나씩)는 모든 행이 기본 순서로 반환 됩니다. 배열의 값 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 고 원본 테이블에서 열 순서와 일치 제한 배열의 각 요소는 스키마 행 집합의 해당 열의 내용을 비교 합니다. 예를 들어 제한 배열의 첫 번째 요소는 행 집합의 첫 번째 열과 비교 됩니다. 제한 요소는 null이 아니면 경우에 행만 스키마 행 집합에서 제한의 값과 정확히 일치 하는 결과 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 추가 됩니다.       <xref:System.Data.OleDb.OleDbConnection>메서드를 호출 하는 기본 OLE DB **idbschemarowset:: Getrowset** 표준 공용 언어 런타임 변환 규칙을 사용 하는 방법.</xref:System.Data.OleDb.OleDbConnection> 자세한 내용은 참조 [COM 데이터 형식](http://msdn.microsoft.com/en-us/f93ae35d-a416-4218-8700-c8218cc90061)합니다.       <xref:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals>.</xref:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals> 를 사용 하 여 리터럴에 대 한 정보를 검색할 수 있습니다. OLE DB 호출에 해당 정보를 제공 **IDBInfo::GetLiteralInfo** 인터페이스 또는 ADO **Connection.OpenSchema** 메서드는 `adSchemaDBInfoLiterals` 상수입니다."
  example:
  - "The following sample returns a list of tables in a database.  \n  \n [!code-cs[Classic WebData OleDbConnection.GetOleDbSchemaTable Example#1](~/add/codesnippet/csharp/da103458-7630-4900-9261-_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.GetOleDbSchemaTable Example#1](~/add/codesnippet/visualbasic/da103458-7630-4900-9261-_1.vb)]"
  syntax:
    content: public System.Data.DataTable GetOleDbSchemaTable (Guid schema, object[] restrictions);
    parameters:
    - id: schema
      type: System.Guid
      description: "중 하나는 <xref href=&quot;System.Data.OleDb.OleDbSchemaGuid&quot;> </xref> 스키마 테이블을 지정 하는 값입니다."
    - id: restrictions
      type: System.Object[]
      description: "<xref:System.Object>제한 값의 배열입니다.</xref:System.Object> 이러한 제한 열의 순서로 적용 됩니다. 즉, 첫 번째 제한 열에 적용 되는 첫 번째 제한 값, 두 번째 제한 값이 고 두 번째 제한 열에 적용 합니다."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 요청된 스키마 정보가 들어 있는입니다."
  overload: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable*
  exceptions:
  - type: System.Data.OleDb.OleDbException
    commentId: T:System.Data.OleDb.OleDbException
    description: "지정 된 제한 집합이 올바르지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref> 닫혀 있습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "지정한 스키마 행 집합은 OLE DB 공급자에서 지원 되지 않습니다.       -또는- <code> schema </code> 매개 변수 값이 포함 <xref href=&quot;System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals&quot;> </xref> 및 <code> restrictions </code> 매개 변수에 하나 이상의 제한을 포함 합니다."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.GetSchema
  id: GetSchema
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: GetSchema()
  nameWithType: OleDbConnection.GetSchema()
  fullName: System.Data.OleDb.OleDbConnection.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "이 데이터 원본에 대 한 스키마 정보를 반환 <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref>합니다."
  syntax:
    content: public override System.Data.DataTable GetSchema ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 들어 있는입니다."
  overload: System.Data.OleDb.OleDbConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.GetSchema(System.String)
  id: GetSchema(System.String)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: GetSchema(String)
  nameWithType: OleDbConnection.GetSchema(String)
  fullName: System.Data.OleDb.OleDbConnection.GetSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "이 데이터 원본에 대 한 스키마 정보를 반환 <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref> 스키마 이름에 지정된 된 문자열을 사용 하 여 합니다."
  remarks: "때 `collectionName` null로 지정 된 <xref:System.Data.DataTable>를 사용할 수 있는 모든 메타 데이터 및 해당 제한 사항에 대 한 정보가 포함 됩니다.</xref:System.Data.DataTable>"
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName);
    parameters:
    - id: collectionName
      type: System.String
      description: "반환할 스키마의 이름을 지정 합니다."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 들어 있는입니다."
  overload: System.Data.OleDb.OleDbConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.GetSchema(System.String,System.String[])
  id: GetSchema(System.String,System.String[])
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: GetSchema(String,String[])
  nameWithType: OleDbConnection.GetSchema(String,String[])
  fullName: System.Data.OleDb.OleDbConnection.GetSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "이 데이터 원본에 대 한 스키마 정보를 반환 <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref> 스키마 이름 및 제한 값에 대 한 지정 된 문자열 배열에 대 한 지정된 된 문자열을 사용 하 여 합니다."
  remarks: "때 `collectionName` null로 지정 된 <xref:System.Data.DataTable>를 사용할 수 있는 모든 메타 데이터 및 해당 제한 사항에 대 한 정보가 포함 됩니다.</xref:System.Data.DataTable>       `restrictionValues` 매개 변수 제공 *n* 수준의 특정 컬렉션에 대 한 제한 컬렉션에서 지정 된 값입니다. 특정된 제한에 값을 설정 하 고 다른 제한 값을 설정 하지 않으려면, 앞의 제한을 null 하 고 다음 값을 지정 하려면 원하는 제한에 적절 한 값을 설정 해야 합니다.       이 예는 &quot;Table&quot; 컬렉션입니다. 다음과 같은 값 (최소한) 전달 해야는 &quot;Table&quot; 컬렉션에 세 가지 제한 (데이터베이스, 소유자 및 테이블 이름), &quot;칼&quot; 소유자와 연결 된 테이블에만 다시 확보 하려는 경우: null, &quot;칼&quot;입니다. 에 제한 값이 전달 되지 않으면, 기본 값은 해당 제한에 사용 됩니다. 이 null 전달 하는 대로 동일한 매핑을 매개 변수 값에 대 한 빈 문자열을 전달과에서는 다릅니다. 그러면 빈 문자열 (&quot;&quot;)의 지정된 된 매개 변수 값으로 간주 됩니다."
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);
    parameters:
    - id: collectionName
      type: System.String
      description: "반환할 스키마의 이름을 지정 합니다."
    - id: restrictionValues
      type: System.String[]
      description: "요청된 된 스키마에 대 한 제한 값의 집합을 지정합니다."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 들어 있는입니다."
  overload: System.Data.OleDb.OleDbConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.InfoMessage
  id: InfoMessage
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: InfoMessage
  nameWithType: OleDbConnection.InfoMessage
  fullName: System.Data.OleDb.OleDbConnection.InfoMessage
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "공급자에서 경고 또는 정보 메시지를 보낼 때 발생 합니다."
  remarks: "서버에서 보낸 정보 메시지를 처리 하는 클라이언트를 만들어야는 <xref:System.Data.OleDb.OleDbInfoMessageEventHandler>이 이벤트를 수신 하는 대리자입니다.</xref:System.Data.OleDb.OleDbInfoMessageEventHandler>       InfoMessage 이벤트 심각도가 낮은 메시지가 데이터 소스에서 반환 될 때 발생 합니다. 심각도 낮은 메시지는 예외가 발생 하지 않습니다. 이때 10의 심각도 오류 메시지는 Microsoft SQL Server에 대 한 자세한 내용 및 예를 들어, 작은 참조 또는 [연결 이벤트](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public event System.Data.OleDb.OleDbInfoMessageEventHandler InfoMessage;
    return:
      type: System.Data.OleDb.OleDbInfoMessageEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Open
  id: Open
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Open()
  nameWithType: OleDbConnection.Open()
  fullName: System.Data.OleDb.OleDbConnection.Open()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "에 <xref:System.Data.OleDb.OleDbConnection.ConnectionString*>.</xref:System.Data.OleDb.OleDbConnection.ConnectionString*> 지정 하는 속성이 설정 된 데이터베이스 연결을 엽니다."
  remarks: "<xref:System.Data.OleDb.OleDbConnection>사용 가능한 경우 연결 풀에서 열려 있는 연결을 그립니다.</xref:System.Data.OleDb.OleDbConnection> 그렇지 않으면 데이터 원본에 새 연결을 설정 합니다. 단일 <xref:System.Data.OleDb.OleDbConnection>.</xref:System.Data.OleDb.OleDbConnection> 둘 이상의 DataReader를 열 수 있습니다. 사용 하는 OLEDB 공급자는 단일 연결에서 둘 이상의 활성 DataReader를 지원 하지 않으면, OLEDB 공급자 각각에 대 한 추가 연결을 암시적으로 엽니다.      > [!NOTE] > 경우는 <xref:System.Data.OleDb.OleDbConnection>늘어나고의 범위를 닫혀 있지 않습니다.</xref:System.Data.OleDb.OleDbConnection> 따라서 명시적으로 닫아야 연결 호출 하 여 <xref:System.Data.OleDb.OleDbConnection.Close%2A>또는 **Dispose**, 내에서 연결을 사용 하 여 또는 `Using` 문.</xref:System.Data.OleDb.OleDbConnection.Close%2A>"
  syntax:
    content: public override void Open ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.Open*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결이 이미 열려 있습니다."
  - type: System.Data.OleDb.OleDbException
    commentId: T:System.Data.OleDb.OleDbException
    description: "연결을 여는 동안 연결 수준 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Provider
  id: Provider
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Provider
  nameWithType: OleDbConnection.Provider
  fullName: System.Data.OleDb.OleDbConnection.Provider
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "에 지정 된 OLE DB 공급자의 이름을 가져옵니다는 &quot;Provider =&quot; 연결 문자열의 절."
  remarks: ''
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData OleDbConnection.Provider Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_1_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.Provider Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_1_1.vb)]"
  syntax:
    content: public string Provider { get; }
    return:
      type: System.String
      description: "에 지정 된 공급자의 이름에서 &quot;Provider =&quot; 연결 문자열의 절. 기본값은 빈 문자열입니다."
  overload: System.Data.OleDb.OleDbConnection.Provider*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ReleaseObjectPool
  id: ReleaseObjectPool
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ReleaseObjectPool()
  nameWithType: OleDbConnection.ReleaseObjectPool()
  fullName: System.Data.OleDb.OleDbConnection.ReleaseObjectPool()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "나타냅니다는 <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref> 개체 풀 마지막 기본 연결이 해제 되 면 해제 될 수 있습니다."
  remarks: "`ReleaseObjectPool`풀링된 용 예약 될 리소스를 호출할 수 있습니다 <xref:System.Data.OleDb.OleDbConnection>개체입니다.</xref:System.Data.OleDb.OleDbConnection> 연결 개체가 OLE DB 서비스 일반적으로 풀링된 연결을 활성 상태로 유지 된 시간 동안 다시 사용 하지 않는 예를 들어 경우이 메서드를 호출 할 수 있습니다. 참고 메서드만 호출 활성 연결 풀에 존재 하는 실제로 해제 되지 않습니다.       다음 풀을 마지막으로 삭제 하기 전에 발생 해야: 1입니다.  호출 <xref:System.Data.OleDb.OleDbConnection.Close%2A>를 풀에 연결 개체를 반환 합니다.</xref:System.Data.OleDb.OleDbConnection.Close%2A>      2.  시간 제한 초과 풀의 각 연결 개체를 허용 합니다.      3.  풀링된을 호출 합니다.      4.  가비지 수집을 호출 합니다.       반대로, 호출 하는 경우 <xref:System.Data.OleDb.OleDbConnection.Close%2A>모든 활성 연결에서 및 가비지 수집을 호출 하지만 풀링된, 풀링된 개체는 계속 사용할 수에 대 한 예약 된 리소스를 호출 하지 마십시오.</xref:System.Data.OleDb.OleDbConnection.Close%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection>, opens it, displays some of its properties, closes the connection, and releases the object pool to conserve resources.  \n  \n [!code-cs[Classic WebData OleDbConnection.ReleaseObjectPool Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_15_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.ReleaseObjectPool Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_15_1.vb)]"
  syntax:
    content: public static void ReleaseObjectPool ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.ReleaseObjectPool*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ResetState
  id: ResetState
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ResetState()
  nameWithType: OleDbConnection.ResetState()
  fullName: System.Data.OleDb.OleDbConnection.ResetState()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "업데이트는 <xref:System.Data.OleDb.OleDbConnection.State*>의 속성은 <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref> 개체입니다.</xref:System.Data.OleDb.OleDbConnection.State*>"
  remarks: "일부 OLE DB 공급자는 연결의 현재 상태를 확인할 수 있습니다. 예를 들어 데이터베이스 서버가 이후 재생 된 경우 열린 프로그램 <xref:System.Data.OleDb.OleDbConnection>, <xref:System.Data.OleDb.OleDbConnection.State%2A>반환할 속성은 계속 `Open`.</xref:System.Data.OleDb.OleDbConnection.State%2A> </xref:System.Data.OleDb.OleDbConnection> OLE DB Provider는 라이브 연결에서이 정보에 대 한 폴링 지원을 사용 하는 경우 ResetState 메서드를 호출 하 고 확인 된 <xref:System.Data.OleDb.OleDbConnection.State%2A>속성 알려 연결이 더 이상 열릴.</xref:System.Data.OleDb.OleDbConnection.State%2A> ResetState 메서드에서 OLE DB 공급자에서 연결의 현재 상태를 확인 하는 기능에 의존 합니다. OLE DB 공급자가이 기능을 지 원하는 경우를 확인 하려면 DBPROP_CONNECTIONSTATUS 대 한 자세한 내용은 공급자 설명서를 확인 합니다."
  syntax:
    content: public void ResetState ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.ResetState*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: OleDbConnection.ServerVersion
  fullName: System.Data.OleDb.OleDbConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "버전의 클라이언트가 연결 된 서버를 포함 하는 문자열을 가져옵니다."
  remarks: "ServerVersion 속성 OLE DB dbprop_dbmsver와 같습니다 속성에 매핑됩니다. ServerVersion 기본 OLE DB 공급자에서 지원 되지 않는 경우 빈 문자열이 반환 됩니다.       폼의 버전은 *# #. # #. # # #*, 여기서 처음 두 자리는 주 버전, 다음 두 자리는 부 버전 및 마지막&4; 자리는 릴리스 버전입니다. 공급자는 제품 버전을이 형식으로 렌더링 해야 하지만 제품 관련 버전을 추가할 수도 있습니다-예를 들어 &quot;04.01.0000 4.1 Rdb&quot;입니다. 폼의 문자열은 *major.minor.build*여기서 주 및 부는 정확히 두 자리로 관리 빌드 정확히 네 자리로 합니다."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-vb[Classic WebData OleDbConnection.ServerVersion Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_6_1.vb)]\n [!code-cs[Classic WebData OleDbConnection.ServerVersion Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_6_1.cs)]"
  syntax:
    content: public override string ServerVersion { get; }
    return:
      type: System.String
      description: "연결 된 서버의 버전입니다."
  overload: System.Data.OleDb.OleDbConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결이 닫혀 있습니다."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.State
  id: State
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: State
  nameWithType: OleDbConnection.State
  fullName: System.Data.OleDb.OleDbConnection.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "연결의 현재 상태를 가져옵니다."
  remarks: "다음 허용 된 상태 변경은:-에서 `Closed` 를 `Open`를 사용 하 여는 <xref:System.Data.OleDb.OleDbConnection.Open%2A>의 메서드는 <xref:System.Data.OleDb.OleDbConnection>개체입니다.</xref:System.Data.OleDb.OleDbConnection> </xref:System.Data.OleDb.OleDbConnection.Open%2A>      `Open` 를 `Closed`, 하나를 사용 하는 <xref:System.Data.OleDb.OleDbConnection.Close%2A>메서드 또는 **Dispose** 의 메서드는 <xref:System.Data.OleDb.OleDbConnection>개체입니다.</xref:System.Data.OleDb.OleDbConnection> </xref:System.Data.OleDb.OleDbConnection.Close%2A>      > [!NOTE] >.NET Framework의 이전 버전의 State 속성이 호출 증가 된 응용 프로그램 오버 헤드 각 호출에 대해 열린 연결에 대 한 OLE DB DBPROP_CONNECTIONSTATUS 속성을 호출 하면 발생 합니다. .NET Framework 2.0 부터는 더 이상는 문제입니다."
  syntax:
    content: public override System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "비트 조합 된 <xref href=&quot;System.Data.ConnectionState&quot;> </xref> 값입니다. 기본값은 닫힙니다."
  overload: System.Data.OleDb.OleDbConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: OleDbConnection.System.ICloneable.Clone()
  fullName: System.Data.OleDb.OleDbConnection.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "이 멤버에 대 한 참조 &lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;합니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.OleDb.OleDbConnection>인스턴스로 캐스팅 되는 <xref:System.ICloneable>인터페이스.</xref:System.ICloneable> </xref:System.Data.OleDb.OleDbConnection>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "새 <xref:System.Object>이 인스턴스의 복사본입니다.</xref:System.Object>"
  overload: System.Data.OleDb.OleDbConnection.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.Common.DbConnection
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.OleDb.OleDbException
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbException
  nameWithType: OleDbException
  fullName: System.Data.OleDb.OleDbException
- uid: System.Data.OleDb.OleDbConnection.#ctor
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: OleDbConnection()
  nameWithType: OleDbConnection.OleDbConnection()
  fullName: System.Data.OleDb.OleDbConnection.OleDbConnection()
- uid: System.Data.OleDb.OleDbConnection.#ctor(System.String)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: OleDbConnection(String)
  nameWithType: OleDbConnection.OleDbConnection(String)
  fullName: System.Data.OleDb.OleDbConnection.OleDbConnection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.OleDb.OleDbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: OleDbConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.OleDb.OleDbConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: OleDbConnection.BeginTransaction()
  fullName: System.Data.OleDb.OleDbConnection.BeginTransaction()
- uid: System.Data.OleDb.OleDbTransaction
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbTransaction
  nameWithType: OleDbTransaction
  fullName: System.Data.OleDb.OleDbTransaction
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: OleDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.OleDb.OleDbConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.OleDb.OleDbConnection.ChangeDatabase(System.String)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: OleDbConnection.ChangeDatabase(String)
  fullName: System.Data.OleDb.OleDbConnection.ChangeDatabase(String)
- uid: System.Data.OleDb.OleDbConnection.Close
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Close()
  nameWithType: OleDbConnection.Close()
  fullName: System.Data.OleDb.OleDbConnection.Close()
- uid: System.Data.OleDb.OleDbConnection.ConnectionString
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: OleDbConnection.ConnectionString
  fullName: System.Data.OleDb.OleDbConnection.ConnectionString
- uid: System.Data.OleDb.OleDbConnection.ConnectionTimeout
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: OleDbConnection.ConnectionTimeout
  fullName: System.Data.OleDb.OleDbConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.OleDb.OleDbConnection.CreateCommand
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: OleDbConnection.CreateCommand()
  fullName: System.Data.OleDb.OleDbConnection.CreateCommand()
- uid: System.Data.OleDb.OleDbCommand
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbCommand
  nameWithType: OleDbCommand
  fullName: System.Data.OleDb.OleDbCommand
- uid: System.Data.OleDb.OleDbConnection.CreateDbCommand
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: OleDbConnection.CreateDbCommand()
  fullName: System.Data.OleDb.OleDbConnection.CreateDbCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.OleDb.OleDbConnection.Database
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Database
  nameWithType: OleDbConnection.Database
  fullName: System.Data.OleDb.OleDbConnection.Database
- uid: System.Data.OleDb.OleDbConnection.DataSource
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: DataSource
  nameWithType: OleDbConnection.DataSource
  fullName: System.Data.OleDb.OleDbConnection.DataSource
- uid: System.Data.OleDb.OleDbConnection.Dispose(System.Boolean)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: OleDbConnection.Dispose(Boolean)
  fullName: System.Data.OleDb.OleDbConnection.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: OleDbConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(ITransaction)
- uid: System.EnterpriseServices.ITransaction
  parent: System.EnterpriseServices
  isExternal: false
  name: ITransaction
  nameWithType: ITransaction
  fullName: System.EnterpriseServices.ITransaction
- uid: System.Data.OleDb.OleDbConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: OleDbConnection.EnlistTransaction(Transaction)
  fullName: System.Data.OleDb.OleDbConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetOleDbSchemaTable(Guid,Object[])
  nameWithType: OleDbConnection.GetOleDbSchemaTable(Guid,Object[])
  fullName: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(Guid,Object[])
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.OleDb.OleDbConnection.GetSchema
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetSchema()
  nameWithType: OleDbConnection.GetSchema()
  fullName: System.Data.OleDb.OleDbConnection.GetSchema()
- uid: System.Data.OleDb.OleDbConnection.GetSchema(System.String)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetSchema(String)
  nameWithType: OleDbConnection.GetSchema(String)
  fullName: System.Data.OleDb.OleDbConnection.GetSchema(String)
- uid: System.Data.OleDb.OleDbConnection.GetSchema(System.String,System.String[])
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetSchema(String,String[])
  nameWithType: OleDbConnection.GetSchema(String,String[])
  fullName: System.Data.OleDb.OleDbConnection.GetSchema(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.OleDb.OleDbConnection.InfoMessage
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: InfoMessage
  nameWithType: OleDbConnection.InfoMessage
  fullName: System.Data.OleDb.OleDbConnection.InfoMessage
- uid: System.Data.OleDb.OleDbInfoMessageEventHandler
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbInfoMessageEventHandler
  nameWithType: OleDbInfoMessageEventHandler
  fullName: System.Data.OleDb.OleDbInfoMessageEventHandler
- uid: System.Data.OleDb.OleDbConnection.Open
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Open()
  nameWithType: OleDbConnection.Open()
  fullName: System.Data.OleDb.OleDbConnection.Open()
- uid: System.Data.OleDb.OleDbConnection.Provider
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Provider
  nameWithType: OleDbConnection.Provider
  fullName: System.Data.OleDb.OleDbConnection.Provider
- uid: System.Data.OleDb.OleDbConnection.ReleaseObjectPool
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ReleaseObjectPool()
  nameWithType: OleDbConnection.ReleaseObjectPool()
  fullName: System.Data.OleDb.OleDbConnection.ReleaseObjectPool()
- uid: System.Data.OleDb.OleDbConnection.ResetState
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ResetState()
  nameWithType: OleDbConnection.ResetState()
  fullName: System.Data.OleDb.OleDbConnection.ResetState()
- uid: System.Data.OleDb.OleDbConnection.ServerVersion
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ServerVersion
  nameWithType: OleDbConnection.ServerVersion
  fullName: System.Data.OleDb.OleDbConnection.ServerVersion
- uid: System.Data.OleDb.OleDbConnection.State
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: State
  nameWithType: OleDbConnection.State
  fullName: System.Data.OleDb.OleDbConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.OleDb.OleDbConnection.System#ICloneable#Clone
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: OleDbConnection.System.ICloneable.Clone()
  fullName: System.Data.OleDb.OleDbConnection.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.OleDb.OleDbConnection.#ctor*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: OleDbConnection
  nameWithType: OleDbConnection.OleDbConnection
- uid: System.Data.OleDb.OleDbConnection.BeginDbTransaction*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: OleDbConnection.BeginDbTransaction
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: OleDbConnection.BeginTransaction
- uid: System.Data.OleDb.OleDbConnection.ChangeDatabase*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: OleDbConnection.ChangeDatabase
- uid: System.Data.OleDb.OleDbConnection.Close*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Close
  nameWithType: OleDbConnection.Close
- uid: System.Data.OleDb.OleDbConnection.ConnectionString*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: OleDbConnection.ConnectionString
- uid: System.Data.OleDb.OleDbConnection.ConnectionTimeout*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: OleDbConnection.ConnectionTimeout
- uid: System.Data.OleDb.OleDbConnection.CreateCommand*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: CreateCommand
  nameWithType: OleDbConnection.CreateCommand
- uid: System.Data.OleDb.OleDbConnection.CreateDbCommand*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: OleDbConnection.CreateDbCommand
- uid: System.Data.OleDb.OleDbConnection.Database*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Database
  nameWithType: OleDbConnection.Database
- uid: System.Data.OleDb.OleDbConnection.DataSource*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: DataSource
  nameWithType: OleDbConnection.DataSource
- uid: System.Data.OleDb.OleDbConnection.Dispose*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Dispose
  nameWithType: OleDbConnection.Dispose
- uid: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: EnlistDistributedTransaction
  nameWithType: OleDbConnection.EnlistDistributedTransaction
- uid: System.Data.OleDb.OleDbConnection.EnlistTransaction*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: OleDbConnection.EnlistTransaction
- uid: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetOleDbSchemaTable
  nameWithType: OleDbConnection.GetOleDbSchemaTable
- uid: System.Data.OleDb.OleDbConnection.GetSchema*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetSchema
  nameWithType: OleDbConnection.GetSchema
- uid: System.Data.OleDb.OleDbConnection.Open*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Open
  nameWithType: OleDbConnection.Open
- uid: System.Data.OleDb.OleDbConnection.Provider*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Provider
  nameWithType: OleDbConnection.Provider
- uid: System.Data.OleDb.OleDbConnection.ReleaseObjectPool*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ReleaseObjectPool
  nameWithType: OleDbConnection.ReleaseObjectPool
- uid: System.Data.OleDb.OleDbConnection.ResetState*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ResetState
  nameWithType: OleDbConnection.ResetState
- uid: System.Data.OleDb.OleDbConnection.ServerVersion*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ServerVersion
  nameWithType: OleDbConnection.ServerVersion
- uid: System.Data.OleDb.OleDbConnection.State*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: State
  nameWithType: OleDbConnection.State
- uid: System.Data.OleDb.OleDbConnection.System#ICloneable#Clone*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: OleDbConnection.System.ICloneable.Clone
