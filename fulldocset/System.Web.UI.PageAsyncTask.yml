### YamlMime:ManagedReference
items:
- uid: System.Web.UI.PageAsyncTask
  id: PageAsyncTask
  children:
  - System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  - System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  - System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  - System.Web.UI.PageAsyncTask.BeginHandler
  - System.Web.UI.PageAsyncTask.EndHandler
  - System.Web.UI.PageAsyncTask.ExecuteInParallel
  - System.Web.UI.PageAsyncTask.State
  - System.Web.UI.PageAsyncTask.TimeoutHandler
  langs:
  - csharp
  name: PageAsyncTask
  nameWithType: PageAsyncTask
  fullName: System.Web.UI.PageAsyncTask
  type: Class
  summary: "페이지에 등록 하는 비동기 작업에 대 한 정보를 포함 합니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "ASP.NET 버전 2.0을 사용 하면 여러 작업을 페이지를 등록 하 고 페이지를 렌더링 하기 전에 비동기식으로 실행할 수 있습니다. 느리게 처리 하 고 다른 프로세스를 실행 하는 동안 하느라 정체 될 하지 않을 경우 작업을 비동기적으로 실행 되도록 지정 될 수 있습니다. 비동기 작업은 순차적으로 또는 병렬로 실행할 수 있습니다.       PageAsyncTask 개체를 통해 페이지에 등록 해야 합니다는 <xref:System.Web.UI.Page.RegisterAsyncTask%2A>메서드.</xref:System.Web.UI.Page.RegisterAsyncTask%2A> 페이지 자체는 비동기 작업을 실행 하도록 비동기적으로 처리 될 필요가 없습니다. 설정할 수 있습니다는 `Async` 특성을 하나 `true` (에서처럼 다음 코드 예제) 또는 `false` 페이지 지시문 및 비동기 작업은 여전히 비동기적으로 처리 될: `<%@ Page Async=&quot;true&quot; %>` 때는 `Async` 특성이로 설정 된 `false`, 페이지를 실행 하는 스레드는 비동기 작업이 완료 될 때까지 차단 됩니다.       하기 전에 등록 된 모든 비동기 작업의 <xref:System.Web.UI.Page.PreRenderComplete>이벤트에서 실행 될 것 자동으로 페이지 경우 이미 실행 되지 않은 것입니다.</xref:System.Web.UI.Page.PreRenderComplete> 비동기 작업 후에 등록 된는 <xref:System.Web.UI.Page.PreRenderComplete>이벤트를 통해 명시적으로 실행 해야 합니다는 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>메서드.</xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> </xref:System.Web.UI.Page.PreRenderComplete> <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>메서드 시작 되기 전에 작업을 사용할 수도 있습니다는 <xref:System.Web.UI.Page.PreRenderComplete>이벤트.</xref:System.Web.UI.Page.PreRenderComplete> </xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>메서드가 실행 되지 않은 페이지에서 등록 된 모든 비동기 작업을 실행 합니다.</xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>       기본적으로 비동기 작업 45 초 안에 완료 되지 않은 경우 시간 초과 됩니다. Web.config 파일 또는 page 지시문에 다른 제한 시간 값을 지정할 수 있습니다. `<pages>` Web.config 파일의 섹션에 포함 되어는 `asyncTimeout` 특성을 다음과 같이 합니다.       `<system.web>`       `<pages asyncTimeout=&quot;30&quot;>`       `</pages>`       `</system.web>`Page 지시문을 포함 한 `AsyncTimeout` 특성입니다.       `<%@ Page AsyncTimeout=&quot;30&quot; %>`"
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/t-system.web.ui.pageasyn_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/t-system.web.ui.pageasyn_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/t-system.web.ui.pageasyn_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/t-system.web.ui.pageasyn_2.cs)]"
  syntax:
    content: public sealed class PageAsyncTask
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  id: '#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(Func<CancellationToken,Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> 클래스에 작업을 취소할 수 있습니다 하는 이벤트 처리기를 사용 합니다."
  remarks: "이 생성자를 래핑하는 <xref:System.Web.CancellableTaskEventHandler>위임 있도록는 <xref:System.Web.UI.PageAsyncTask>개체 비동기 코드를 통합할 수 있습니다 (에 따라 <xref:System.Threading.Tasks.Task>개체) 기존 ASP.NET Web Forms 비동기 페이지 기능을 사용 합니다.</xref:System.Threading.Tasks.Task> </xref:System.Web.UI.PageAsyncTask> </xref:System.Web.CancellableTaskEventHandler> ASP.NET 신호를 보내는 <xref:System.Threading.CancellationToken>에 전달 되는 개체는 <xref:System.Web.CancellableTaskEventHandler>기반으로 취소에 대 한 대리자는 <xref:System.Web.UI.Page.AsyncTimeout%2A>특성에 설정는 `@ Page` 웹 페이지의 지시문.</xref:System.Web.UI.Page.AsyncTimeout%2A> </xref:System.Web.CancellableTaskEventHandler> </xref:System.Threading.CancellationToken> 경우는 <xref:System.Web.UI.Page.AsyncTimeout%2A>값에 도달한는 <xref:System.Threading.CancellationToken>개체가 신호를 받는.</xref:System.Threading.CancellationToken> </xref:System.Web.UI.Page.AsyncTimeout%2A> `CancellationToken` 매개 변수 <xref:System.Web.CancellableTaskEventHandler>클래스</xref:System.Web.CancellableTaskEventHandler> 의 구현에 의해 호출 되는 비동기 Api에 전달 되어야 합니다"
  syntax:
    content: public PageAsyncTask (Func<System.Threading.CancellationToken,System.Threading.Tasks.Task> handler);
    parameters:
    - id: handler
      type: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}
      description: "이벤트 처리기입니다."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  id: '#ctor(System.Func{System.Threading.Tasks.Task})'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(Func<Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<Task>)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> 클래스에 작업을 처리할 수 있습니다 하는 이벤트 처리기를 사용 합니다."
  syntax:
    content: public PageAsyncTask (Func<System.Threading.Tasks.Task> handler);
    parameters:
    - id: handler
      type: System.Func{System.Threading.Tasks.Task}
      description: "이벤트 처리기입니다."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  id: '#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> 클래스 병렬로 실행에 대 한 기본값을 사용 합니다."
  remarks: "생성자의이 구현에서 <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>속성을 `false` 하므로 비동기 작업이 페이지에 있는 다른 작업을 병렬로 처리 되지 않습니다.</xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>"
  syntax:
    content: public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "비동기 작업을 시작할 때 호출할 처리기입니다."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "제한 시간 내에 작업이 성공적으로 완료 되 면 호출할 처리기입니다."
    - id: timeoutHandler
      type: System.Web.EndEventHandler
      description: "시간 제한 기간 내에서 작업이 성공적으로 완료 되지 않으면 때 호출할 처리기입니다."
    - id: state
      type: System.Object
      description: "작업의 상태를 나타내는 개체입니다."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> beginHandler </code> 매개 변수 또는 <code> endHandler </code> 매개 변수를 지정 하지 않습니다."
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  id: '#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> 클래스 병렬로 실행에 대 한 지정된 된 값을 사용 합니다."
  remarks: "생성자의이 구현에는 페이지에 있는 다른 작업을 병렬로 처리할을 비동기 작업을 쓸지를 설정할 수 있습니다."
  example:
  - "The following code example creates three asynchronous tasks that are processed in parallel to each other. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/3bf006c1-f830-4b70-9cc2-_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/3bf006c1-f830-4b70-9cc2-_1.aspx)]"
  syntax:
    content: public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "비동기 작업을 시작할 때 호출할 처리기입니다."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "제한 시간 내에 작업이 성공적으로 완료 되 면 호출할 처리기입니다."
    - id: timeoutHandler
      type: System.Web.EndEventHandler
      description: "시간 제한 기간 내에서 작업이 성공적으로 완료 되지 않으면 때 호출할 처리기입니다."
    - id: state
      type: System.Object
      description: "작업의 상태를 나타내는 개체입니다."
    - id: executeInParallel
      type: System.Boolean
      description: "작업을 다른 작업과 병렬로 처리할 수 있는지 여부를 나타내는 값입니다."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> beginHandler </code> 매개 변수 또는 <code> endHandler </code> 매개 변수를 지정 하지 않습니다."
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.BeginHandler
  id: BeginHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
  fullName: System.Web.UI.PageAsyncTask.BeginHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "비동기 작업을 시작할 때 호출할 메서드를 가져옵니다."
  remarks: "BeginHandler 대리자 생성자에서 설정 됩니다."
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. A BeginHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_2_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_2_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_2_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_2_2.cs)]"
  syntax:
    content: public System.Web.BeginEventHandler BeginHandler { get; }
    return:
      type: System.Web.BeginEventHandler
      description: "A <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> 비동기 작업을 시작할 때 호출할 메서드를 나타내는 대리자입니다."
  overload: System.Web.UI.PageAsyncTask.BeginHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.EndHandler
  id: EndHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
  fullName: System.Web.UI.PageAsyncTask.EndHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "제한 시간 안에 작업이 성공적으로 완료 되 면 호출할 메서드를 가져옵니다."
  remarks: "EndHandler 대리자 생성자에서 설정 됩니다."
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. An EndHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_0_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_0_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_0_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_0_2.cs)]"
  syntax:
    content: public System.Web.EndEventHandler EndHandler { get; }
    return:
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> 시간 제한 기간 내는 작업이 성공적으로 완료 될 때 호출할 메서드를 나타내는 대리자입니다."
  overload: System.Web.UI.PageAsyncTask.EndHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel
  id: ExecuteInParallel
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
  fullName: System.Web.UI.PageAsyncTask.ExecuteInParallel
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "작업을 다른 작업과 병렬로 처리할 수 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "ExecuteInParallel 속성은 생성자에서 설정 됩니다. 여러 작업은 페이지에 등록 된 시점과 ExecuteInParallel 속성이로 설정 되어 `true`, 해당 작업을 동시에 처리 됩니다. 그러나 ExecuteInParallel 속성이로 설정 된 경우 `false`, 해당 작업은 순차적으로 처리 됩니다. 예를 들어 페이지 두 비동기 작업을 포함 하는 경우 각 5 초 동안 완료를 하 ExecuteInParallel로 설정 된 `true`, 두 작업 모두 5 초 내에 완료 됩니다. ExecuteInParallel로 설정 되어 있으면 `false` 같은 두 개의 태스크, 그런 다음 첫 번째 작업은 5 초 동안 완료 되 고 5 초 후 첫 번째 작업의 완료 된 두 번째 작업은 완료 합니다."
  example:
  - "The following code example defines three asynchronous tasks that are each set to be processed in parallel. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_3_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_3_1.aspx)]"
  syntax:
    content: public bool ExecuteInParallel { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>작업이 다른 작업과; 병렬로 처리 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.PageAsyncTask.ExecuteInParallel*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.State
  id: State
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: State
  nameWithType: PageAsyncTask.State
  fullName: System.Web.UI.PageAsyncTask.State
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "작업의 상태를 나타내는 개체를 가져옵니다."
  remarks: "State 속성은 생성자에서 설정 되 고 비동기 작업을 실행 하는 동안 수정할 수 없습니다. 해당 상태 속성을 고유한 문자열 값을 할당 하 여 페이지에서 비동기 작업을 쉽게 구분할 수 있습니다."
  example:
  - "The following code example creates three asynchronous tasks and gives them unique values for their State properties. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_4_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_4_1.aspx)]"
  syntax:
    content: public object State { get; }
    return:
      type: System.Object
      description: "<xref:System.Object>작업의 상태를 나타내는입니다.</xref:System.Object>"
  overload: System.Web.UI.PageAsyncTask.State*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler
  id: TimeoutHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
  fullName: System.Web.UI.PageAsyncTask.TimeoutHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "제한 시간 안에 작업이 성공적으로 완료 되지 않을 때 호출할 메서드를를 가져옵니다."
  remarks: "TimeoutHandler 대리자 생성자에서 설정 됩니다."
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. A TimeoutHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_1_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_1_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_1_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_1_2.cs)]"
  syntax:
    content: public System.Web.EndEventHandler TimeoutHandler { get; }
    return:
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> 제한 시간 안에 작업이 성공적으로 완료 되지 않을 때 호출할 메서드를 나타내는 대리자입니다."
  overload: System.Web.UI.PageAsyncTask.TimeoutHandler*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(Func<CancellationToken,Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
- uid: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<CancellationToken,Task>
  nameWithType: Func<CancellationToken,Task>
  fullName: System.Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(Func<Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<Task>)
- uid: System.Func{System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.Tasks.Task>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
- uid: System.Web.BeginEventHandler
  parent: System.Web
  isExternal: false
  name: BeginEventHandler
  nameWithType: BeginEventHandler
  fullName: System.Web.BeginEventHandler
- uid: System.Web.EndEventHandler
  parent: System.Web
  isExternal: false
  name: EndEventHandler
  nameWithType: EndEventHandler
  fullName: System.Web.EndEventHandler
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.PageAsyncTask.BeginHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
  fullName: System.Web.UI.PageAsyncTask.BeginHandler
- uid: System.Web.UI.PageAsyncTask.EndHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
  fullName: System.Web.UI.PageAsyncTask.EndHandler
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
  fullName: System.Web.UI.PageAsyncTask.ExecuteInParallel
- uid: System.Web.UI.PageAsyncTask.State
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: State
  nameWithType: PageAsyncTask.State
  fullName: System.Web.UI.PageAsyncTask.State
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
  fullName: System.Web.UI.PageAsyncTask.TimeoutHandler
- uid: System.Web.UI.PageAsyncTask.#ctor*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask
  nameWithType: PageAsyncTask.PageAsyncTask
- uid: System.Web.UI.PageAsyncTask.BeginHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
- uid: System.Web.UI.PageAsyncTask.EndHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
- uid: System.Web.UI.PageAsyncTask.State*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: State
  nameWithType: PageAsyncTask.State
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
