### YamlMime:ManagedReference
items:
- uid: System.CodeDom.CodeTypeDeclaration
  id: CodeTypeDeclaration
  children:
  - System.CodeDom.CodeTypeDeclaration.#ctor
  - System.CodeDom.CodeTypeDeclaration.#ctor(System.String)
  - System.CodeDom.CodeTypeDeclaration.BaseTypes
  - System.CodeDom.CodeTypeDeclaration.IsClass
  - System.CodeDom.CodeTypeDeclaration.IsEnum
  - System.CodeDom.CodeTypeDeclaration.IsInterface
  - System.CodeDom.CodeTypeDeclaration.IsPartial
  - System.CodeDom.CodeTypeDeclaration.IsStruct
  - System.CodeDom.CodeTypeDeclaration.Members
  - System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  - System.CodeDom.CodeTypeDeclaration.PopulateMembers
  - System.CodeDom.CodeTypeDeclaration.TypeAttributes
  - System.CodeDom.CodeTypeDeclaration.TypeParameters
  langs:
  - csharp
  name: CodeTypeDeclaration
  nameWithType: CodeTypeDeclaration
  fullName: System.CodeDom.CodeTypeDeclaration
  type: Class
  summary: "클래스, 구조체, 인터페이스 또는 열거형에 대 한 형식 선언을 나타냅니다."
  remarks: "CodeTypeDeclaration은 클래스, 구조체, 인터페이스 또는 열거형을 선언 하는 코드를 나타내는 데 사용할 수 있습니다. 다른 형식 내에 중첩 된 형식을 선언 하 CodeTypeDeclaration은 사용할 수 있습니다.       <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A>기본 형식 또는 선언 되는 형식의 기본 형식 속성을 지정 합니다.</xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> <xref:System.CodeDom.CodeTypeDeclaration.Members%2A>속성 메서드, 필드, 속성, 설명 및 기타 형식을 포함할 수 있는 형식 멤버를 포함 합니다.</xref:System.CodeDom.CodeTypeDeclaration.Members%2A> <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A>속성 나타냅니다는 <xref:System.Reflection.TypeAttributes>형식 선언에 대 한 종류의 형식 범주를 나타내는 값입니다.</xref:System.Reflection.TypeAttributes> </xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, 및 <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A>메서드 형식이 인지 클래스, 구조체, 열거형 또는 인터페이스 형식으로 각각 나타냅니다.</xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> </xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A> </xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A> </xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>      > [!NOTE] > 일부 프로그래밍 언어에만 참조 형식 또는 클래스의 선언을 지원 합니다. 인터페이스, 열거형 또는 값 형식 선언에 대 한 지원에 대 한 언어별 CodeDOM 코드 생성기를 확인 하려면 호출는 <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>테스트 하기 위해 적절 한 메서드 <xref:System.CodeDom.Compiler.GeneratorSupport>플래그.</xref:System.CodeDom.Compiler.GeneratorSupport> </xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> <xref:System.CodeDom.Compiler.GeneratorSupport>인터페이스에 대 한 지원을 나타냅니다 <xref:System.CodeDom.Compiler.GeneratorSupport>열거형에 대 한 지원을 나타냅니다 및 <xref:System.CodeDom.Compiler.GeneratorSupport>구조와 같은 값 형식에 대 한 지원을 나타냅니다.</xref:System.CodeDom.Compiler.GeneratorSupport> </xref:System.CodeDom.Compiler.GeneratorSupport></xref:System.CodeDom.Compiler.GeneratorSupport>       클래스 또는 구조체 하나의 완전 한 선언, 구현을 작성 하거나 여러 선언으로 분할할 수 있습니다. <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A>속성 형식 선언은 전부 또는 일부 인지를 나타냅니다.</xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> 일부 코드 생성기 <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> <xref:System.CodeDom.Compiler.GeneratorSupport>.</xref:System.CodeDom.Compiler.GeneratorSupport> 플래그로 메서드</xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> 를 호출 하 여이 지원에 대 한 테스트 해야 하므로 부분 형식 선언을 지원합니다"
  example:
  - "This example demonstrates using a CodeTypeDeclaration to declare a type.  \n  \n [!code-cs[CodeTypeDeclarationExample#2](~/add/codesnippet/csharp/t-system.codedom.codetyp_7_1.cs)]\n [!code-vb[CodeTypeDeclarationExample#2](~/add/codesnippet/visualbasic/t-system.codedom.codetyp_7_1.vb)]\n [!code-cpp[CodeTypeDeclarationExample#2](~/add/codesnippet/cpp/t-system.codedom.codetyp_7_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember
  inheritance:
  - System.Object
  - System.CodeDom.CodeObject
  - System.CodeDom.CodeTypeMember
  implements: []
  inheritedMembers:
  - System.CodeDom.CodeObject.UserData
  - System.CodeDom.CodeTypeMember.Attributes
  - System.CodeDom.CodeTypeMember.Comments
  - System.CodeDom.CodeTypeMember.CustomAttributes
  - System.CodeDom.CodeTypeMember.EndDirectives
  - System.CodeDom.CodeTypeMember.LinePragma
  - System.CodeDom.CodeTypeMember.Name
  - System.CodeDom.CodeTypeMember.StartDirectives
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.#ctor
  id: '#ctor'
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: CodeTypeDeclaration()
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration()
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration()
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.CodeDom.CodeTypeDeclaration&quot;> </xref> 클래스입니다."
  syntax:
    content: public CodeTypeDeclaration ();
    parameters: []
  overload: System.CodeDom.CodeTypeDeclaration.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: CodeTypeDeclaration(String)
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration(String)
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.CodeDom.CodeTypeDeclaration&quot;> </xref> 지정 된 이름의 클래스입니다."
  syntax:
    content: public CodeTypeDeclaration (string name);
    parameters:
    - id: name
      type: System.String
      description: "새 형식에 대 한 이름입니다."
  overload: System.CodeDom.CodeTypeDeclaration.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes
  id: BaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: BaseTypes
  nameWithType: CodeTypeDeclaration.BaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.BaseTypes
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "형식의 기본 형식을 가져옵니다."
  remarks: "기본 형식에서 상속 되지 않는 하나 이상의 인터페이스를 구현 하지만 Visual basic에서 클래스를 생성 하려면 포함 해야 <xref:System.Object>BaseTypes 컬렉션의 첫 번째 항목으로.</xref:System.Object>      > [!NOTE] >.NET Framework 버전 2.0 필요 하지 않습니다는 <xref:System.CodeDom.CodeTypeReference>에 대 한 <xref:System.Object>이미 구현 하는 인터페이스 존재 하 고 형식에서 참조 하는 경우.</xref:System.Object> </xref:System.CodeDom.CodeTypeReference> 예를 들어, 구현 하는 경우는 <xref:System.Collections.ICollection>인터페이스 및이 문 사용 하 여 컬렉션에 추가 `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, 불필요 이전 `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` 문.</xref:System.Collections.ICollection>       다음 코드에서는 <xref:System.CodeDom.CodeTypeReference> <xref:System.Object>.</xref:System.Object> 를 참조 하는 컬렉션에</xref:System.CodeDom.CodeTypeReference> 추가       [Visual Basic]      ```   Dim ctd As New CodeTypeDeclaration(&quot;Class1&quot;)   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference(&quot;Interface1&quot;))   ``` [C#] ```   CodeTypeDeclaration ctd = new CodeTypeDeclaration(&quot;Class1&quot;);   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference(&quot;Interface1&quot;));   ``` 위의 코드에서는 다음 Visual Basic 코드를 해당 하는 오류가 발생 합니다.      ```   Public Class Class1   Implements Interface1   ```그러나 실제로 생성 되는 Visual Basic 코드는 다음과 같습니다.      ```   Public Class Class1   Inherits Object   Implements Interface1   ```"
  syntax:
    content: public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }
    return:
      type: System.CodeDom.CodeTypeReferenceCollection
      description: "A <xref href=&quot;System.CodeDom.CodeTypeReferenceCollection&quot;> </xref> 형식의 기본 형식을 나타내는 개체입니다."
  overload: System.CodeDom.CodeTypeDeclaration.BaseTypes*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsClass
  id: IsClass
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsClass
  nameWithType: CodeTypeDeclaration.IsClass
  fullName: System.CodeDom.CodeTypeDeclaration.IsClass
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "형식이 클래스 또는 참조 형식 인지를 나타내는 값을 가져오거나 설정 합니다."
  syntax:
    content: public bool IsClass { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>형식이 클래스 또는 참조 형식입니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.CodeDom.CodeTypeDeclaration.IsClass*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsEnum
  id: IsEnum
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsEnum
  nameWithType: CodeTypeDeclaration.IsEnum
  fullName: System.CodeDom.CodeTypeDeclaration.IsEnum
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "형식이 열거형 인지를 나타내는 값을 가져오거나 설정 합니다."
  syntax:
    content: public bool IsEnum { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>형식이 열거형입니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.CodeDom.CodeTypeDeclaration.IsEnum*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsInterface
  id: IsInterface
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsInterface
  nameWithType: CodeTypeDeclaration.IsInterface
  fullName: System.CodeDom.CodeTypeDeclaration.IsInterface
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "형식이 인터페이스 인지를 나타내는 값을 가져오거나 설정 합니다."
  syntax:
    content: public bool IsInterface { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>형식이 인터페이스입니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.CodeDom.CodeTypeDeclaration.IsInterface*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsPartial
  id: IsPartial
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsPartial
  nameWithType: CodeTypeDeclaration.IsPartial
  fullName: System.CodeDom.CodeTypeDeclaration.IsPartial
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "형식 선언은 전부 또는 일부 인지를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "작성 한 완전 한 선언, 클래스 또는 구조체 구현 하거나 여러 선언으로 분할할 수 있습니다. 구현이 하나의 완전 한 형식 선언에 일반적으로 제공 됩니다. 이 경우 형식 선언 IsPartial 속성을 설정 `false`, 형식 선언의 클래스 또는 구조체 구현에 대 한 모든 세부 정보를 나타낸다는 것을 의미입니다.       부분 형식 선언 쉽게 응용 프로그램의 서로 다른 모듈에는 클래스 또는 구조체 구현의 서로 다른 부분을 빌드할 수 있습니다. 부분 형식 선언은 한 소스 파일에 저장 또는 결국 함께로 컴파일되는 조합된 형식의 구현을 구성 하는 여러 소스 파일에 분산 수 있습니다.       C# 언어 클래스의 부분 형식 선언을 지원 및 통해 구조는 `partial` 키워드입니다. Visual Basic 클래스의 부분 형식 선언을 지원 및와 구조는 `Partial` 키워드입니다. 일부 코드 생성기 <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> <xref:System.CodeDom.Compiler.GeneratorSupport>.</xref:System.CodeDom.Compiler.GeneratorSupport> 플래그로 메서드</xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> 를 호출 하 여이 지원에 대 한 테스트 해야 하므로 부분 형식 선언을 지원합니다      > [!NOTE] > 부분 형식 선언을 클래스와 구조체에 대해 지원 됩니다. 열거형 또는 인터페이스에 대 한 부분 형식 선언을 지정 하면 생성된 된 코드는 컴파일러 오류를 생성 합니다.       여러 선언에서 클래스 또는 구조체 구현을 제공할 때 IsPartial 속성을 설정 `true` 초기 선언 및 모든 추가 선언에 대 한 합니다. 초기 선언 형식을 완전히 지정 해야 액세스 한정자를 포함 하 여 서명 형식, 상속 및 인터페이스를 구현 합니다. 추가 선언 형식 시그니처를 다시 지정할 필요가 없습니다. 추가 선언에 형식 시그니처를 재정의 하는 경우에 일반적으로 컴파일러 오류가 발생 합니다.       Visual Studio 2005 부분 형식을 사용 하 여 디자이너 코드에서 사용자에서 생성 된 코드를 구분 합니다. Visual Basic Windows 응용 프로그램 프로젝트에 사용자 코드에서 정규화 되지 않은 partial 클래스에 배치 되는 `Partial` 키워드; 디자이너에서 제공 된 partial 클래스에 코드가 표시는 `Partial` 키워드 합니다. C#에서 사용자 코드와 디자이너 코드에에서 표시로 식별 되는 partial 클래스는 `partial` 키워드입니다."
  example:
  - "This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to supply a class implementation across multiple declarations. The example builds the initial class declaration statement and sets the IsPartial property to `true`.  \n  \n [!code-cpp[CodeDomPartialTypeExample#3](~/add/codesnippet/cpp/p-system.codedom.codetyp_2_1.cpp)]\n [!code-cs[CodeDomPartialTypeExample#3](~/add/codesnippet/csharp/p-system.codedom.codetyp_2_1.cs)]\n [!code-vb[CodeDomPartialTypeExample#3](~/add/codesnippet/visualbasic/p-system.codedom.codetyp_2_1.vb)]  \n  \n A different method in the example extends the class implementation. This method builds a new type declaration statement for the existing class and sets the IsPartial property to `true`. The compiler combines the two partial type declarations together for the complete class implementation.  \n  \n [!code-cpp[CodeDomPartialTypeExample#7](~/add/codesnippet/cpp/p-system.codedom.codetyp_2_2.cpp)]\n [!code-cs[CodeDomPartialTypeExample#7](~/add/codesnippet/csharp/p-system.codedom.codetyp_2_2.cs)]\n [!code-vb[CodeDomPartialTypeExample#7](~/add/codesnippet/visualbasic/p-system.codedom.codetyp_2_2.vb)]"
  syntax:
    content: public bool IsPartial { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>클래스 또는 구조체 선언이 구현; 부분 표현인 경우 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 선언이 클래스 또는 구조체의 완전 한 구현 하는 경우. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.CodeDom.CodeTypeDeclaration.IsPartial*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsStruct
  id: IsStruct
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsStruct
  nameWithType: CodeTypeDeclaration.IsStruct
  fullName: System.CodeDom.CodeTypeDeclaration.IsStruct
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "형식이 값 형식 (구조체) 인지를 나타내는 값을 가져오거나 설정 합니다."
  syntax:
    content: public bool IsStruct { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>형식이 값 형식입니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.CodeDom.CodeTypeDeclaration.IsStruct*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.Members
  id: Members
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: Members
  nameWithType: CodeTypeDeclaration.Members
  fullName: System.CodeDom.CodeTypeDeclaration.Members
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "표시 된 형식에 대 한 클래스 멤버의 컬렉션을 가져옵니다."
  syntax:
    content: public System.CodeDom.CodeTypeMemberCollection Members { get; }
    return:
      type: System.CodeDom.CodeTypeMemberCollection
      description: "A <xref href=&quot;System.CodeDom.CodeTypeMemberCollection&quot;> </xref> 클래스 멤버를 나타내는 개체입니다."
  overload: System.CodeDom.CodeTypeDeclaration.Members*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  id: PopulateBaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: PopulateBaseTypes
  nameWithType: CodeTypeDeclaration.PopulateBaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  type: Event
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "발생 경우는 <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*>컬렉션에 처음으로 액세스 합니다.</xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*>"
  syntax:
    content: public event EventHandler PopulateBaseTypes;
    return:
      type: System.EventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.PopulateMembers
  id: PopulateMembers
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: PopulateMembers
  nameWithType: CodeTypeDeclaration.PopulateMembers
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateMembers
  type: Event
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "발생 경우는 <xref:System.CodeDom.CodeTypeDeclaration.Members*>컬렉션에 처음으로 액세스 합니다.</xref:System.CodeDom.CodeTypeDeclaration.Members*>"
  syntax:
    content: public event EventHandler PopulateMembers;
    return:
      type: System.EventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes
  id: TypeAttributes
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: TypeAttributes
  nameWithType: CodeTypeDeclaration.TypeAttributes
  fullName: System.CodeDom.CodeTypeDeclaration.TypeAttributes
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "형식의 특성을 가져오거나 설정 합니다."
  remarks: "<xref:System.Reflection.TypeAttributes>동일한 유형의 사용 하는 값을 포함 하는 속성 <xref:System.Reflection>런타임 시 형식 조사할 때.</xref:System.Reflection> </xref:System.Reflection.TypeAttributes> 이러한 플래그의 대부분 일부 언어에 대 한 형식 선언 구문에 일치 하지 않습니다. 결과적으로, 다음 플래그만을 주는지 <xref:System.CodeDom.CodeTypeDeclaration>: <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, 및 <xref:System.Reflection.TypeAttributes>.</xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.CodeDom.CodeTypeDeclaration>      > [!NOTE] > 일부 <xref:System.Reflection.TypeAttributes> <xref:System.CodeDom.CodeTypeMember.Attributes%2A> <xref:System.CodeDom.CodeTypeDeclaration> <xref:System.CodeDom.CodeTypeMember>.</xref:System.CodeDom.CodeTypeMember> 에서 상속 된</xref:System.CodeDom.CodeTypeDeclaration> 속성</xref:System.CodeDom.CodeTypeMember.Attributes%2A> 의 플래그의 의미와 중복 되 면</xref:System.Reflection.TypeAttributes> 같은 플래그 <xref:System.CodeDom.CodeTypeMember.Attributes%2A>속성의 부작용은는 <xref:System.CodeDom.CodeTypeDeclaration>클래스에서 상속 <xref:System.CodeDom.CodeTypeMember>클래스에 중첩 될 수 있도록 합니다.</xref:System.CodeDom.CodeTypeMember> </xref:System.CodeDom.CodeTypeDeclaration> </xref:System.CodeDom.CodeTypeMember.Attributes%2A> 플래그에 대신 TypeAttributes 속성의 플래그를 사용 해야는 <xref:System.CodeDom.CodeTypeMember.Attributes%2A>속성.</xref:System.CodeDom.CodeTypeMember.Attributes%2A>      > [!NOTE] > 표시 범위 플래그를 설정 하기 위한 패턴 (단어를 포함 하는 플래그 `Public` 또는 `Nested`)를 마스킹 모든 표시 범위 플래그를 사용 하 여는 <xref:System.Reflection.TypeAttributes>원하는 표시 범위 플래그를 설정 합니다.</xref:System.Reflection.TypeAttributes> 예를 들어 C# 코드 문을 식별 하는 <xref:System.CodeDom.CodeTypeDeclaration>(라는 `cd`)는 내부 클래스는 있는 그대로 `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</xref:System.CodeDom.CodeTypeDeclaration>  Visual Basic에서는 동일한 값을 설정 하는 코드는 `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`합니다. 표시 범위 플래그에 직접 TypeAttributes 속성 설정 (`cd.TypeAttributes = TypeAttributes.NotPublic;`) 설정 되었을 수 있는 다른 모든 플래그를 지웁니다."
  syntax:
    content: public System.Reflection.TypeAttributes TypeAttributes { get; set; }
    return:
      type: System.Reflection.TypeAttributes
      description: "A <xref:System.Reflection.TypeAttributes>는 형식의 특성을 나타내는 개체입니다.</xref:System.Reflection.TypeAttributes>"
  overload: System.CodeDom.CodeTypeDeclaration.TypeAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters
  id: TypeParameters
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: TypeParameters
  nameWithType: CodeTypeDeclaration.TypeParameters
  fullName: System.CodeDom.CodeTypeDeclaration.TypeParameters
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "형식 선언의 형식 매개 변수를 가져옵니다."
  remarks: "제네릭 형식 선언에 하나 이상의 형식 매개 변수 라는 형식이 지정 되지 않은 또는 합니다. 형식 매개 변수 이름은 제네릭 선언의 본문 안에 있는 형식을 나타냅니다. 예를 들어 제네릭 선언에는 <xref:System.Collections.Generic.List%601>클래스 형식 매개 변수를 포함 합니다. `T`.</xref:System.Collections.Generic.List%601>       제네릭에 대 한 자세한 내용은 참조 하십시오. [.NET Framework 클래스 라이브러리의 제네릭](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }
    return:
      type: System.CodeDom.CodeTypeParameterCollection
      description: "A <xref href=&quot;System.CodeDom.CodeTypeParameterCollection&quot;> </xref> 형식 선언의 형식 매개 변수를 포함 하는 합니다."
  overload: System.CodeDom.CodeTypeDeclaration.TypeParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.CodeDom.CodeTypeMember
  isExternal: false
  name: System.CodeDom.CodeTypeMember
- uid: System.CodeDom.CodeTypeDeclaration.#ctor
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: CodeTypeDeclaration()
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration()
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration()
- uid: System.CodeDom.CodeTypeDeclaration.#ctor(System.String)
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: CodeTypeDeclaration(String)
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration(String)
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: BaseTypes
  nameWithType: CodeTypeDeclaration.BaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.BaseTypes
- uid: System.CodeDom.CodeTypeReferenceCollection
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeReferenceCollection
  nameWithType: CodeTypeReferenceCollection
  fullName: System.CodeDom.CodeTypeReferenceCollection
- uid: System.CodeDom.CodeTypeDeclaration.IsClass
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsClass
  nameWithType: CodeTypeDeclaration.IsClass
  fullName: System.CodeDom.CodeTypeDeclaration.IsClass
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CodeDom.CodeTypeDeclaration.IsEnum
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsEnum
  nameWithType: CodeTypeDeclaration.IsEnum
  fullName: System.CodeDom.CodeTypeDeclaration.IsEnum
- uid: System.CodeDom.CodeTypeDeclaration.IsInterface
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsInterface
  nameWithType: CodeTypeDeclaration.IsInterface
  fullName: System.CodeDom.CodeTypeDeclaration.IsInterface
- uid: System.CodeDom.CodeTypeDeclaration.IsPartial
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsPartial
  nameWithType: CodeTypeDeclaration.IsPartial
  fullName: System.CodeDom.CodeTypeDeclaration.IsPartial
- uid: System.CodeDom.CodeTypeDeclaration.IsStruct
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsStruct
  nameWithType: CodeTypeDeclaration.IsStruct
  fullName: System.CodeDom.CodeTypeDeclaration.IsStruct
- uid: System.CodeDom.CodeTypeDeclaration.Members
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: Members
  nameWithType: CodeTypeDeclaration.Members
  fullName: System.CodeDom.CodeTypeDeclaration.Members
- uid: System.CodeDom.CodeTypeMemberCollection
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeMemberCollection
  nameWithType: CodeTypeMemberCollection
  fullName: System.CodeDom.CodeTypeMemberCollection
- uid: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: PopulateBaseTypes
  nameWithType: CodeTypeDeclaration.PopulateBaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.CodeDom.CodeTypeDeclaration.PopulateMembers
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: PopulateMembers
  nameWithType: CodeTypeDeclaration.PopulateMembers
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateMembers
- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeAttributes
  nameWithType: CodeTypeDeclaration.TypeAttributes
  fullName: System.CodeDom.CodeTypeDeclaration.TypeAttributes
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: true
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeParameters
  nameWithType: CodeTypeDeclaration.TypeParameters
  fullName: System.CodeDom.CodeTypeDeclaration.TypeParameters
- uid: System.CodeDom.CodeTypeParameterCollection
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeParameterCollection
  nameWithType: CodeTypeParameterCollection
  fullName: System.CodeDom.CodeTypeParameterCollection
- uid: System.CodeDom.CodeTypeDeclaration.#ctor*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: CodeTypeDeclaration
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration
- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: BaseTypes
  nameWithType: CodeTypeDeclaration.BaseTypes
- uid: System.CodeDom.CodeTypeDeclaration.IsClass*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsClass
  nameWithType: CodeTypeDeclaration.IsClass
- uid: System.CodeDom.CodeTypeDeclaration.IsEnum*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsEnum
  nameWithType: CodeTypeDeclaration.IsEnum
- uid: System.CodeDom.CodeTypeDeclaration.IsInterface*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsInterface
  nameWithType: CodeTypeDeclaration.IsInterface
- uid: System.CodeDom.CodeTypeDeclaration.IsPartial*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsPartial
  nameWithType: CodeTypeDeclaration.IsPartial
- uid: System.CodeDom.CodeTypeDeclaration.IsStruct*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsStruct
  nameWithType: CodeTypeDeclaration.IsStruct
- uid: System.CodeDom.CodeTypeDeclaration.Members*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: Members
  nameWithType: CodeTypeDeclaration.Members
- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeAttributes
  nameWithType: CodeTypeDeclaration.TypeAttributes
- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeParameters
  nameWithType: CodeTypeDeclaration.TypeParameters
