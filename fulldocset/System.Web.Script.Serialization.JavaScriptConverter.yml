### YamlMime:ManagedReference
items:
- uid: System.Web.Script.Serialization.JavaScriptConverter
  id: JavaScriptConverter
  children:
  - System.Web.Script.Serialization.JavaScriptConverter.#ctor
  - System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  - System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  - System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  langs:
  - csharp
  name: JavaScriptConverter
  nameWithType: JavaScriptConverter
  fullName: System.Web.Script.Serialization.JavaScriptConverter
  type: Class
  summary: "사용자 지정 형식 변환기에 대 한 추상 기본 클래스를 제공합니다."
  remarks: "JavaScriptConverter 클래스 구현 serialization 및 deserialization 프로세스 <xref:System.Web.Script.Serialization.JavaScriptSerializer>클래스가 있습니다..</xref:System.Web.Script.Serialization.JavaScriptSerializer> 기본적으로 지원 되지 않는 관리 되는 형식에 대 한 수 있습니다. Serialization 및 deserialization 프로세스를 보다 자세히 제어 해야 하는 경우에 JavaScriptConverter을 사용할 수 있습니다.       <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A>속성 변환기 서비스는 사용자 지정 변환기를 제공 하는 형식을 나타냅니다.</xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A>       사용자 지정 변환기를 사용 해야 함을 나타내기 위해는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>인스턴스의 변환기 인스턴스를 등록 해야 합니다.</xref:System.Web.Script.Serialization.JavaScriptSerializer> 사용 하는 경우는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>클래스를 직접 사용 해야 합니다는 <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A>변환기를 등록 합니다.</xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> </xref:System.Web.Script.Serialization.JavaScriptSerializer> 그렇지 않으면 ECMAScript (JavaScript)에서 웹 메서드를 호출 하는 경우 사용자 지정 변환기를 사용 하 여 등록할 수 있습니다를 추가 하 여 한 `converters` 구성 파일의 요소입니다. 자세한 내용은 참조 [하는 방법: Microsoft Ajax에서 ASP.NET 서비스 구성](~/add/includes/ajax-current-ext-md.md)합니다.       경우는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>인스턴스 형식에 등록 하는 사용자 지정 변환기가 serializer 호출 하 여 직렬화 되는 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A>메서드.</xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> </xref:System.Web.Script.Serialization.JavaScriptSerializer> 마찬가지로,는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>개체 JSON (JavaScript Notation) 문자열을 역직렬화 하 고 JSON 문자열을 내부 형식에 연결 되어 있어서 serializer 호출 하 여 사용자 지정 변환기를 인식 하는 인스턴스는 <xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A>메서드.</xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> </xref:System.Web.Script.Serialization.JavaScriptSerializer>"
  example:
  - "The following example shows how to create a custom converter for the <xref:System.Web.UI.WebControls.ListItemCollection> class.  \n  \n [!code-cs[System.Web.Script.Serialization#2](~/add/codesnippet/csharp/t-system.web.script.seri_2_1.cs)]\n [!code-vb[System.Web.Script.Serialization#2](~/add/codesnippet/visualbasic/t-system.web.script.seri_2_1.vb)]"
  syntax:
    content: public abstract class JavaScriptConverter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor
  id: '#ctor'
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: JavaScriptConverter()
  nameWithType: JavaScriptConverter.JavaScriptConverter()
  fullName: System.Web.Script.Serialization.JavaScriptConverter.JavaScriptConverter()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Script.Serialization.JavaScriptConverter&quot;> </xref> 클래스입니다."
  syntax:
    content: protected JavaScriptConverter ();
    parameters: []
  overload: System.Web.Script.Serialization.JavaScriptConverter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  id: Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "파생된 클래스에서 재정의 되 면 지정 된 형식의 개체에 제공 된 사전으로 변환 합니다."
  syntax:
    content: public abstract object Deserialize (System.Collections.Generic.IDictionary<string,object> dictionary, Type type, System.Web.Script.Serialization.JavaScriptSerializer serializer);
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "&lt;xref:System.Collections.Generic.IDictionary%602&gt; 이름/값 쌍으로 저장 하는 속성 데이터의 인스턴스입니다."
    - id: type
      type: System.Type
      description: "결과 개체의 형식입니다."
    - id: serializer
      type: System.Web.Script.Serialization.JavaScriptSerializer
      description: "<xref href=&quot;System.Web.Script.Serialization.JavaScriptSerializer&quot;> </xref> 인스턴스."
    return:
      type: System.Object
      description: "Deserialize 된 개체입니다."
  overload: System.Web.Script.Serialization.JavaScriptConverter.Deserialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  id: Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: Serialize(Object,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "파생된 클래스에서 재정의 되 면 이름/값 쌍의 사전을 만듭니다."
  remarks: "사용자 지정 변환기가 등록 되어 있는, 형식을 serialize 하는 경우는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>인스턴스 직렬화 메서드를 호출 합니다.</xref:System.Web.Script.Serialization.JavaScriptSerializer>"
  syntax:
    content: public abstract System.Collections.Generic.IDictionary<string,object> Serialize (object obj, System.Web.Script.Serialization.JavaScriptSerializer serializer);
    parameters:
    - id: obj
      type: System.Object
      description: "직렬화 할 개체입니다."
    - id: serializer
      type: System.Web.Script.Serialization.JavaScriptSerializer
      description: "직렬화를 담당 하는 개체입니다."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "개체의 데이터를 나타내는 키/값 쌍을 포함 하는 개체입니다."
  overload: System.Web.Script.Serialization.JavaScriptConverter.Serialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  id: SupportedTypes
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: SupportedTypes
  nameWithType: JavaScriptConverter.SupportedTypes
  fullName: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "파생된 클래스에서 재정의 되 면 지원 되는 형식의 컬렉션을 가져옵니다."
  remarks: "SupportedTypes 속성 변환기에서 지원 되는 형식을 나열 합니다. 런타임에 <xref:System.Web.Script.Serialization.JavaScriptSerializer>인스턴스가이 속성을 사용 하 여 자신의 해당 사용자 지정 변환기를 관리 되는 형식 매핑을 확인 합니다.</xref:System.Web.Script.Serialization.JavaScriptSerializer>"
  example:
  - "The following example shows how to override the SupportedTypes property in a derived class. In this example, the converter supports only the <xref:System.Web.UI.WebControls.ListItemCollection> type. This code example is part of a larger example provided for the <xref:System.Web.Script.Serialization.JavaScriptConverter> class.  \n  \n [!code-cs[System.Web.Script.Serialization#3](~/add/codesnippet/csharp/p-system.web.script.seri_1.cs)]\n [!code-vb[System.Web.Script.Serialization#3](~/add/codesnippet/visualbasic/p-system.web.script.seri_1.vb)]"
  syntax:
    content: public abstract System.Collections.Generic.IEnumerable<Type> SupportedTypes { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: "구현 하는 개체 &lt;xref:System.Collections.Generic.IEnumerable%601&gt; 변환기에서 지 원하는 형식을 나타내는입니다."
  overload: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: JavaScriptConverter()
  nameWithType: JavaScriptConverter.JavaScriptConverter()
  fullName: System.Web.Script.Serialization.JavaScriptConverter.JavaScriptConverter()
- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,Object>
  nameWithType: IDictionary<String,Object>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Script.Serialization.JavaScriptSerializer
  parent: System.Web.Script.Serialization
  isExternal: false
  name: JavaScriptSerializer
  nameWithType: JavaScriptSerializer
  fullName: System.Web.Script.Serialization.JavaScriptSerializer
- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Serialize(Object,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: SupportedTypes
  nameWithType: JavaScriptConverter.SupportedTypes
  fullName: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
- uid: System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Type>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: JavaScriptConverter
  nameWithType: JavaScriptConverter.JavaScriptConverter
- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Deserialize
  nameWithType: JavaScriptConverter.Deserialize
- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Serialize
  nameWithType: JavaScriptConverter.Serialize
- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: SupportedTypes
  nameWithType: JavaScriptConverter.SupportedTypes
