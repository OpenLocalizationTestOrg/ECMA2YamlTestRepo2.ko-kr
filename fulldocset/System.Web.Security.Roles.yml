### YamlMime:ManagedReference
items:
- uid: System.Web.Security.Roles
  id: Roles
  children:
  - System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  - System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  - System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  - System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  - System.Web.Security.Roles.ApplicationName
  - System.Web.Security.Roles.CacheRolesInCookie
  - System.Web.Security.Roles.CookieName
  - System.Web.Security.Roles.CookiePath
  - System.Web.Security.Roles.CookieProtectionValue
  - System.Web.Security.Roles.CookieRequireSSL
  - System.Web.Security.Roles.CookieSlidingExpiration
  - System.Web.Security.Roles.CookieTimeout
  - System.Web.Security.Roles.CreatePersistentCookie
  - System.Web.Security.Roles.CreateRole(System.String)
  - System.Web.Security.Roles.DeleteCookie
  - System.Web.Security.Roles.DeleteRole(System.String)
  - System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  - System.Web.Security.Roles.Domain
  - System.Web.Security.Roles.Enabled
  - System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  - System.Web.Security.Roles.GetAllRoles
  - System.Web.Security.Roles.GetRolesForUser
  - System.Web.Security.Roles.GetRolesForUser(System.String)
  - System.Web.Security.Roles.GetUsersInRole(System.String)
  - System.Web.Security.Roles.IsUserInRole(System.String)
  - System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  - System.Web.Security.Roles.MaxCachedResults
  - System.Web.Security.Roles.Provider
  - System.Web.Security.Roles.Providers
  - System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  - System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  - System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  - System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  - System.Web.Security.Roles.RoleExists(System.String)
  langs:
  - csharp
  name: Roles
  nameWithType: Roles
  fullName: System.Web.Security.Roles
  type: Class
  summary: "ASP.NET 응용 프로그램에서 권한 확인 하기 위한 역할에 사용자 멤버 자격을 관리 합니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "ASP.NET 역할 관리를 사용 하면 역할 이라고 하는 사용자 그룹에 따라 응용 프로그램에 대 한 권한 부여를 관리할 수 있습니다. 역할에 사용자를 지정 하 여 사용자 이름을 기반으로 하는 권한 부여를 지정 하 다른 부분 또는 위치 대신 또는 외에, 역할에 따라 웹 응용 프로그램의 기능에 대 한 액세스를 제어할 수 있습니다. 예를 들어, 각 역할에 대해 다른 권한을 지정 되어 있는 관리자, 직원, 디렉터 등 역할이 직원 응용 프로그램 있을 수 있습니다.       사용자가 여러 역할에 속할 수 있습니다. 예를 들어 토론 포럼을 사이트의 경우 일부 사용자 역할의 멤버와 중재자 수 있습니다. 사이트에서 서로 다른 권한을 갖도록 각 역할을 정의할 수 있습니다 및 두 역할 모두에 있는 사용자의 권한 집합을 모두 가지게 됩니다.       요소를 사용 하 여 ASP.NET 응용 프로그램에 대 한 역할 관리를 사용 하려면는 `system.web` 다음 예제와 같이 응용 프로그램에 대 한 Web.config 파일에서 섹션.      ```   <configuration>     <connectionStrings>       <add name=&quot;SqlServices&quot; connectionString=&quot;Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;&quot; />     </connectionStrings>        <system.web>       <authentication mode=&quot;Forms&quot; >         <forms loginUrl=&quot;login.aspx&quot;         name=&quot;.ASPXFORMSAUTH&quot; />       </authentication>        <roleManager defaultProvider=&quot;SqlProvider&quot;        enabled=&quot;true&quot;       cacheRolesInCookie=&quot;true&quot;       cookieName=&quot;.ASPROLES&quot;       cookieTimeout=&quot;30&quot;       cookiePath=&quot;/&quot;       cookieRequireSSL=&quot;false&quot;       cookieSlidingExpiration=&quot;true&quot;       cookieProtection=&quot;All&quot; >       <providers>         <add           name=&quot;SqlProvider&quot;           type=&quot;System.Web.Security.SqlRoleProvider&quot;           connectionStringName=&quot;SqlServices&quot;           applicationName=&quot;SampleApplication&quot; />         </providers>       </roleManager>     </system.web>   </configuration>   ```웹 응용 프로그램에 대 한 구성 파일 또는 코드에서 프로그래밍 방식으로 권한 부여 규칙을 지정할 수 있습니다. 예를 들어 Web.config 파일의 다음 섹션 (익명 사용자에 게 거부)를 통해 로그온 하는 사용자 요구 및 액세스할 수 있도록 관리자 역할에 사용자만을 허용 합니다.      ```   <authorization>     <deny users=&quot;?&quot; />     <allow roles=&quot;Administrators&quot; />     <deny users=&quot;*&quot; />   </authorization>   ```사용 하는 경우는 `authorization` 역할, 응용 프로그램 사용자가 기반으로 하는 권한 부여를 지정 하려면 응용 프로그램의 Web.config 파일의 섹션에서 인증 된 사용자 id를 제공 해야 합니다. Windows 또는 폼 인증을 사용 하 여 사용자를 인증할 수 있습니다. 익명 사용자 역할에 할당할 수 없습니다. 역할 또는 별도로 ASP.NET과 함께에서 사용할 수 있습니다 <xref:System.Web.Security.Membership>클래스.</xref:System.Web.Security.Membership>       역할 멤버 자격을 프로그래밍 방식으로 확인 하려면 역할 클래스를 사용할 수 있습니다 또는 <xref:System.Web.UI.Page.User%2A?displayProperty=fullName>속성을는 <xref:System.Web.Security.Roles.IsUserInRole%2A>메서드 또는 있습니다 사용할 수는 <xref:System.Web.UI.Page.User%2A?displayProperty=fullName>속성으로는 <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=fullName>메서드.</xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=fullName> </xref:System.Web.UI.Page.User%2A?displayProperty=fullName> </xref:System.Web.Security.Roles.IsUserInRole%2A> </xref:System.Web.UI.Page.User%2A?displayProperty=fullName> 프로그래밍 방식으로 역할 멤버 자격을 확인 하는 샘플 코드에 대 한이 항목의 예제 섹션을 참조 하십시오.       또한 역할 클래스를 사용 하면를 만들고 역할을 삭제 하 고 사용자를 추가 하거나 역할에서 사용자를 제거할 수 있습니다.      > [!NOTE] > 사용 하도록 응용 프로그램을 구성한 경우는 <xref:System.Web.Security.WindowsTokenRoleProvider>클래스, 역할 또는 역할 멤버 자격을 수정할 수 없습니다.</xref:System.Web.Security.WindowsTokenRoleProvider> <xref:System.Web.Security.WindowsTokenRoleProvider>classverifies 구성원 Windows 보안에서 그룹만.</xref:System.Web.Security.WindowsTokenRoleProvider> 이 경우 ASP.NET 역할 보다는 Windows 사용자 계정 관리 사용 하 여를 생성 및 그룹을 삭제 하 고 그룹 구성원 자격을 관리 해야 합니다.       여러 개의 데이터 원본에 역할 정보를 저장할 수 있습니다.      -사용할 수는 <xref:System.Web.Security.WindowsTokenRoleProvider>Windows 그룹의 구성원 자격에 따라 역할 정보를 검색할 수 있습니다.</xref:System.Web.Security.WindowsTokenRoleProvider>      <xref:System.Web.Security.SqlRoleProvider>클래스</xref:System.Web.Security.SqlRoleProvider> 를 사용 하 여 SQL Server 데이터베이스에 역할 정보를 저장할 수-      -기존 역할 정보 했거나에 역할 정보를 저장 하 고 Windows, 권한 부여 저장소 또는 SQL Server 이외의 데이터 소스에서 역할 정보를 검색할 경우 <xref:System.Web.Security.RoleProvider>추상 클래스</xref:System.Web.Security.RoleProvider> 를 상속 하는 클래스를 만들어 사용자 지정 역할 공급자를 구현할 수 있습니다. 자세한 내용은 참조 [역할 공급자 구현](~/add/includes/ajax-current-ext-md.md)합니다.       사용자의 브라우저에서 쿠키를 사용 하는 경우에 사용자의 컴퓨터에서 쿠키에 해당 사용자에 대 한 역할 정보를 저장할 수 있습니다. 각 페이지 요청에 ASP.NET은 쿠키에서 해당 사용자에 대 한 역할 정보를 읽습니다. 데이터 원본과 함께 역할 정보를 검색 하는 데 필요한 통신을 줄여 응용 프로그램 성능이 향상 됩니다. 사용자에 대 한 역할 정보를 쿠키에 저장할 너무 긴 경우 ASP.NET 쿠키에 가장 최근에 사용한 역할 정보를 저장 하 고 필요에 따라 데이터 원본에 대 한 추가 역할 정보를 조회 합니다. 사용자의 브라우저에서 쿠키를 지원 하지 않거나, 경우에 역할 정보를 쿠키에 캐시 되지 않습니다.       역할 이름 지정 하 여 쿠키에 캐시의 안정성을 향상 시킬 수 있습니다는 <xref:System.Web.Security.Roles.CookieProtectionValue%2A>ASP.NET 역할을 구성할 때 속성.</xref:System.Web.Security.Roles.CookieProtectionValue%2A> 기본 <xref:System.Web.Security.Roles.CookieProtectionValue%2A>은 `All`, 역할 이름 쿠키에 암호화 하 고 쿠키 내용이 변경 되지 않았음을 유효성을 검사 합니다.</xref:System.Web.Security.Roles.CookieProtectionValue%2A>"
  example:
  - "The following example shows the Web.config file for an application configured to use both ASP.NET membership and ASP.NET roles and to use the <xref:System.Web.Security.SqlRoleProvider> to store membership and role information in a SQL Server database. Users are authenticated with forms authentication and only users in the Administrators role are allowed access to the application.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"SqlServices\" connectionString=\"Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;\" />  \n  </connectionStrings>  \n  \n  <system.web>  \n    <authentication mode=\"Forms\" >  \n      <forms loginUrl=\"login.aspx\"  \n      name=\".ASPXFORMSAUTH\" />  \n    </authentication>  \n  \n    <authorization>  \n      <deny users=\"?\" />  \n      <allow roles=\"Administrators\" />  \n      <deny users=\"*\" />  \n    </authorization>  \n  \n    <membership defaultProvider=\"AspNetSqlProvider\" userIsOnlineTimeWindow=\"15\">  \n    </membership>  \n  \n    <roleManager defaultProvider=\"SqlProvider\"   \n      enabled=\"true\"  \n      cacheRolesInCookie=\"true\"  \n      cookieName=\".ASPROLES\"  \n      cookieTimeout=\"30\"  \n      cookiePath=\"/\"  \n      cookieRequireSSL=\"true\"  \n      cookieSlidingExpiration=\"true\"  \n      cookieProtection=\"All\" >  \n  \n      <providers>  \n        <clear />  \n        <add  \n          name=\"SqlProvider\"  \n          type=\"System.Web.Security.SqlRoleProvider\"  \n          connectionStringName=\"SqlServices\"  \n          applicationName=\"SampleApplication\" />  \n        </providers>  \n  \n    </roleManager>  \n  </system.web>  \n</configuration>  \n```  \n  \n The following code example programmatically checks whether the logged-on user is in the Administrators role before allowing the user to view other users' roles.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public static class Roles
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  id: AddUsersToRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUsersToRole(String[],String)
  nameWithType: Roles.AddUsersToRole(String[],String)
  fullName: System.Web.Security.Roles.AddUsersToRole(String[],String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할에 지정된 된 사용자를 추가 합니다."
  remarks: "AddUsersToRole 메서드는 데이터 소스에서 지정된 된 역할에서 지정 된 사용자를 연결할 기본 역할 공급자를 호출 합니다.       응용 프로그램을 사용 하는 경우는 <xref:System.Web.Security.SqlRoleProvider>클래스를 호출 하는 동안 수행 되는 데이터베이스 업데이트가 <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>메서드는 트랜잭션 내에서 이루어집니다.</xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> </xref:System.Web.Security.SqlRoleProvider> 오류가 발생 하는 경우 지정된 된 역할에 이미 있는 사용자 이름과 같이 트랜잭션이 롤백되고 업데이트가 수행 되지 않습니다.      > [!NOTE] > 사용자 이름 및 역할 이름에서 쉼표를 사용할 수 없습니다."
  example:
  - "The following code example adds one or more users to a role or removes a user from a role based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_7_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_7_1.aspx)]"
  syntax:
    content: public static void AddUsersToRole (string[] usernames, string roleName);
    parameters:
    - id: usernames
      type: System.String[]
      description: "지정된 된 역할에 추가할 사용자 이름의 문자열 배열입니다."
    - id: roleName
      type: System.String
      description: "에 지정 된 사용자 이름을 추가할 역할입니다."
  overload: System.Web.Security.Roles.AddUsersToRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -또는-에 있는 요소 중 하나의 <code>usernames</code> 은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는-에 있는 요소 중 하나의 <code>usernames</code> 은 빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는- <code>usernames</code> 중복 요소를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  id: AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUsersToRoles(String[],String[])
  nameWithType: Roles.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.Roles.AddUsersToRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할에 지정된 된 사용자를 추가 합니다."
  remarks: "AddUsersToRoles 메서드는 데이터 소스에서 지정 된 역할에 지정된 된 사용자를 연결할 기본 역할 공급자를 호출 합니다.       응용 프로그램을 사용 하는 경우는 <xref:System.Web.Security.SqlRoleProvider>클래스를 호출 하는 동안 수행 되는 데이터베이스 업데이트가 <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>메서드는 트랜잭션 내에서 이루어집니다.</xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> </xref:System.Web.Security.SqlRoleProvider> 오류가 발생 하는 경우 지정된 된 역할에 이미 있는 사용자 이름과 같이 트랜잭션이 롤백되고 업데이트가 수행 되지 않습니다.      > [!NOTE] > 사용자 이름 및 역할 이름에서 쉼표를 사용할 수 없습니다."
  example:
  - "The following code example adds one or more users to one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_21_1.aspx)]\n [!code-cs[System.Web.Security.Roles#1](~/add/codesnippet/csharp/m-system.web.security.ro_21_1.aspx)]"
  syntax:
    content: public static void AddUsersToRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "지정된 된 역할에 추가할 사용자 이름의 문자열 배열입니다."
    - id: roleNames
      type: System.String[]
      description: "지정 된 사용자 이름을 추가할 역할 이름의 문자열 배열입니다."
  overload: System.Web.Security.Roles.AddUsersToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       One of the users in <code>usernames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "역할 중 하나의 <code> roleNames </code> 은 빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는-에 사용자 중 한 명 <code> usernames </code> 은 빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는- <code> roleNames </code> 중복 요소를 포함 합니다.       -또는- <code> usernames </code> 중복 요소를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  id: AddUserToRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUserToRole(String,String)
  nameWithType: Roles.AddUserToRole(String,String)
  fullName: System.Web.Security.Roles.AddUserToRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할에 지정된 된 사용자를 추가 합니다."
  remarks: "AddUserToRole 메서드는 데이터 소스에서 지정된 된 역할에 지정된 된 사용자를 연결할 기본 역할 공급자를 호출 합니다.      > [!NOTE] > 사용자 이름 및 역할 이름에서 쉼표를 사용할 수 없습니다."
  example:
  - "The following code example adds a user to a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#2](~/add/codesnippet/csharp/m-system.web.security.ro_19_1.aspx)]\n [!code-vb[System.Web.Security.Roles#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_19_1.aspx)]"
  syntax:
    content: public static void AddUserToRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "지정된 된 역할에 추가할 사용자 이름입니다."
    - id: roleName
      type: System.String
      description: "역할에 지정 된 사용자 이름을 추가 하는입니다."
  overload: System.Web.Security.Roles.AddUserToRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는- <code>username</code> 은 빈 문자열 또는 쉼표 (,)를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다.       -또는-사용자는 이미 지정된 된 역할에 할당 됩니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  id: AddUserToRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUserToRoles(String,String[])
  nameWithType: Roles.AddUserToRoles(String,String[])
  fullName: System.Web.Security.Roles.AddUserToRoles(String,String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할에 지정된 된 사용자를 추가 합니다."
  remarks: "AddUserToRoles 메서드는 데이터 소스에서 지정 된 역할에 지정된 된 사용자를 연결할 기본 역할 공급자를 호출 합니다.       응용 프로그램을 사용 하는 경우는 <xref:System.Web.Security.SqlRoleProvider>클래스 AddUserToRoles 메서드를 호출 하는 동안 수행 되는 데이터베이스 업데이트가 트랜잭션 내에서 이루어집니다.</xref:System.Web.Security.SqlRoleProvider> 오류가 발생 하는 경우 지정된 된 역할에 이미 있는 사용자 이름과 같이 트랜잭션이 롤백되고 업데이트가 수행 되지 않습니다.      > [!NOTE] > 사용자 이름 및 역할 이름에서 쉼표를 사용할 수 없습니다."
  example:
  - "The following code example adds a user to one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_20_1.aspx)]\n [!code-cs[System.Web.Security.Roles#3](~/add/codesnippet/csharp/m-system.web.security.ro_20_1.aspx)]"
  syntax:
    content: public static void AddUserToRoles (string username, string[] roleNames);
    parameters:
    - id: username
      type: System.String
      description: "지정된 된 역할에 추가할 사용자 이름입니다."
    - id: roleNames
      type: System.String[]
      description: "역할에 지정 된 사용자 이름을 추가 하는 문자열 배열입니다."
  overload: System.Web.Security.Roles.AddUserToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "역할 중 하나의 <code> roleNames </code> 은 빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는- <code> username </code> 은 빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는- <code> roleNames </code> 중복 요소를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.ApplicationName
  id: ApplicationName
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: ApplicationName
  nameWithType: Roles.ApplicationName
  fullName: System.Web.Security.Roles.ApplicationName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "저장 하 고 역할 정보를 검색할 응용 프로그램의 이름을 가져오거나 설정 합니다."
  remarks: "ApplicationName 속성은 사용 된 <xref:System.Web.Security.Roles>서로 다른 응용 프로그램에 사용자 및 역할을 연결할 클래스를.</xref:System.Web.Security.Roles> 이렇게 하면 여러 응용 프로그램이 동일한 데이터 소스를 사용 하 여 중복 된 사용자 이름이 나 중복 역할 이름 간의 충돌을 일으키지 않고 사용자 및 역할 정보를 저장할 수 있습니다. 여러 ASP.NET 응용 프로그램 ApplicationName 속성에 동일한 값을 지정 하 여 동일한 데이터 소스를 사용할 수 있습니다. ApplicationName 속성을 프로그래밍 방식으로 설정할 수 있습니다 또는 웹 응용 프로그램에 대 한 구성 파일 사용 하 여 선언적으로 설정할 수 있습니다는 `applicationName` 특성입니다.       웹 응용 프로그램을 사용 하는 경우는 <xref:System.Web.Security.SqlRoleProvider>클래스와 값이 지정 되지 않은 `applicationName` 구성 파일의 특성에에서는 <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName>현재 속성 값 <xref:System.Web.HttpContext.Request%2A?displayProperty=fullName>속성을 사용 합니다.</xref:System.Web.HttpContext.Request%2A?displayProperty=fullName> </xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName> </xref:System.Web.Security.SqlRoleProvider>      > [!CAUTION] > 단일 기본 역할 공급자 인스턴스는 모든 요청에 의해 처리에 사용 되므로 <xref:System.Web.HttpApplication>개체를 동시에 실행 되 고 ApplicationName 속성 값을 설정 하는 여러 요청을 할 수 있습니다.</xref:System.Web.HttpApplication> ApplicationName 속성이 스레드로부터 여러 쓰기 작업에 대해 안전 하지 않습니다. 및 응용 프로그램의 여러 사용자에 대 한 예기치 않은 동작이 발생할 수 있습니다 ApplicationName 속성 값을 변경 합니다. 필요한 경우가 아니면 사용자가을 ApplicationName 속성을 설정할 수 있도록 코드를 작성 하지 말아야 합니다. ApplicationName 속성을 설정 필요할 수 있는 응용 프로그램의 예로 여러 응용 프로그램에 대 한 역할 데이터를 관리 하는 관리 응용 프로그램입니다. 단일 사용자 응용 프로그램 및 웹 응용 프로그램이 아닙니다. 이러한 응용 프로그램 이어야 합니다."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `applicationName` attribute to `MyApplication`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string ApplicationName { get; set; }
    return:
      type: System.String
      description: "에 대 한 역할 정보 저장 하거나 검색할 응용 프로그램의 이름입니다."
  overload: System.Web.Security.Roles.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CacheRolesInCookie
  id: CacheRolesInCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
  fullName: System.Web.Security.Roles.CacheRolesInCookie
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "현재 사용자의 역할이 쿠키에 캐시 되는지 여부를 나타내는 값을 가져옵니다."
  remarks: "CacheRolesInCookie 속성이로 설정 된 경우 `true` Web.config 파일에서 각 사용자에 대 한 역할 정보를 쿠키에 저장 됩니다. 역할 관리, 사용자를 특정 역할에 있는지 여부를 검사 하는 경우 데이터 소스에서 역할의 목록을 확인 하는 역할 공급자를 호출 하기 전에 역할 쿠키 검사 됩니다. 쿠키는 최근에 유효성을 검사 하는 역할 이름이 캐시에 동적으로 업데이트 됩니다.       역할 이름 지정 하 여 쿠키에 캐시의 안정성을 향상 시킬 수 있습니다는 <xref:System.Web.Security.Roles.CookieProtectionValue%2A>ASP.NET 역할을 구성할 때 속성.</xref:System.Web.Security.Roles.CookieProtectionValue%2A> 기본 <xref:System.Web.Security.Roles.CookieProtectionValue%2A>은 `All`, 역할 이름 쿠키에 암호화 하 고 쿠키 내용이 변경 되지 않았음을 유효성을 검사 합니다.</xref:System.Web.Security.Roles.CookieProtectionValue%2A>      > [!NOTE] > 없기 때문에 데이터 소스 외에도 역할 이름이 캐시 가능 데이터 소스에서 역할 관리에 대 한 변경 캐시 된 값에 반영 되지 않습니다. 이 경우 사용자 닫은 다음 다시 열어야가 브라우저에서 캐시 된 쿠키 값의 선택을 취소 합니다."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cacheRolesInCookie` attribute to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n   </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CacheRolesInCookie { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 사용자의 역할이 쿠키에 캐시 되 면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Security.Roles.CacheRolesInCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieName
  id: CookieName
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieName
  nameWithType: Roles.CookieName
  fullName: System.Web.Security.Roles.CookieName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "역할 이름이 캐시 되는 쿠키의 이름을 가져옵니다."
  remarks: "설정 하 여 응용 프로그램에 대 한 역할이 캐시 되는 쿠키의 이름을 지정할 수 있습니다는 `cookieName` ASP.NET 응용 프로그램에 대 한 Web.config 파일에는 특성입니다. 응용 프로그램에 대 한 쿠키를 고유 하 게 식별 하려는 경우 또는 쿠키 도메인 쿠키와 같은 여러 응용 프로그램 간에 공유 되는 경우에 유용 합니다."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cookieName` attribute to .ASPROLES.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string CookieName { get; }
    return:
      type: System.String
      description: "역할 이름이 캐시 되는 쿠키의 이름입니다. 기본값은입니다. ASPXROLES 합니다."
  overload: System.Web.Security.Roles.CookieName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookiePath
  id: CookiePath
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookiePath
  nameWithType: Roles.CookiePath
  fullName: System.Web.Security.Roles.CookiePath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "캐시 된 역할 이름 쿠키에 대 한 경로 가져옵니다."
  remarks: "설정 하 여 응용 프로그램에 대 한 역할 캐시 되는 쿠키의 경로 지정할 수 있습니다는 `cookiePath` ASP.NET 응용 프로그램에 대 한 Web.config 파일에는 특성입니다. 쿠키 경로에 대 한 자세한 내용은 <xref:System.Web.HttpCookie.Path%2A>.</xref:System.Web.HttpCookie.Path%2A> 을 참조 하십시오."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cookiePath` attribute to /MyApplication.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string CookiePath { get; }
    return:
      type: System.String
      description: "역할 이름이 캐시 되는 쿠키의 경로입니다. 기본값은 /입니다."
  overload: System.Web.Security.Roles.CookiePath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieProtectionValue
  id: CookieProtectionValue
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
  fullName: System.Web.Security.Roles.CookieProtectionValue
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "역할 이름 쿠키에 캐시 보호 되는 방법을 나타내는 값을 가져옵니다."
  remarks: "역할 캐시 되는 쿠키의 보호를 설정 하 여 응용 프로그램에 대 한 지정할 수 있습니다는 `cookieProtection` ASP.NET 응용 프로그램에 대 한 Web.config 파일에는 특성입니다. `cookieProtection` 특성는 <xref:System.Web.Security.CookieProtection>둘 다 있거나 둘 다 역할 이름은 암호화 되는지 여부를 나타내는 열거형 값 유효성 검사.</xref:System.Web.Security.CookieProtection>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets `cookieProtection` attribute to `Encrypted`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static System.Web.Security.CookieProtection CookieProtectionValue { get; }
    return:
      type: System.Web.Security.CookieProtection
      description: "중 하나는 <xref href=&quot;System.Web.Security.CookieProtection&quot;> </xref> 역할 이름 쿠키에 캐시 하는 보호 되는 방법을 나타내는 열거형 값입니다. 기본값은 <xref uid=&quot;langword_csharp_All&quot; name=&quot;All&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Security.Roles.CookieProtectionValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieRequireSSL
  id: CookieRequireSSL
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
  fullName: System.Web.Security.Roles.CookieRequireSSL
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "서버에 반환 되기 위해 역할 이름 쿠키에 SSL이 필요한 지 여부를 나타내는 값을 가져옵니다."
  remarks: "SSL (Secure Sockets Layer)는 설정 하 여 응용 프로그램에서 서버에 역할 이름 쿠키를 반환 해야 하는지 여부를 지정할 수는 `cookieRequireSSL` ASP.NET 응용 프로그램에 대 한 Web.config 파일에는 특성입니다. 자세한 내용은 <xref:System.Web.HttpCookie.Secure%2A>.</xref:System.Web.HttpCookie.Secure%2A> 을 참조 하십시오."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets `cookieRequireSSL` to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CookieRequireSSL { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>SSL은 서버에 역할 이름 쿠키를 반환 해야 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Security.Roles.CookieRequireSSL*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieSlidingExpiration
  id: CookieSlidingExpiration
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
  fullName: System.Web.Security.Roles.CookieSlidingExpiration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "역할 이름 쿠키 만료 날짜 및 시간 됩니다를 다시 여부를 주기적으로 나타냅니다."
  remarks: "역할 이름 쿠키 만료 날짜와 시간이 다시 설정 됩니다는 각 응답에 사용 하 여 여부를 지정할 수 있습니다는 `cookieSlidingExpiration` ASP.NET 응용 프로그램에 대 한 Web.config 파일에는 특성입니다. 경우 `true`, 쿠키 만료 기한 처음 현재 날짜와 시간으로 설정할와 <xref:System.Web.Security.Roles.CookieTimeout%2A>분에서.</xref:System.Web.Security.Roles.CookieTimeout%2A> 사용자를 적극적으로 ASP.NET 응용 프로그램을 사용 하는 동안 만료 날짜 및 시간 쿠키의 자동으로 새로 고쳐집니다 절반 이상 없는 경우는 <xref:System.Web.Security.Roles.CookieTimeout%2A>나머지.</xref:System.Web.Security.Roles.CookieTimeout%2A> 자세한 내용은 참조는 <xref:System.Web.HttpCookie.Expires%2A>속성.</xref:System.Web.HttpCookie.Expires%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the CookieSlidingExpiration property to `false`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"false\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CookieSlidingExpiration { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>역할 이름 쿠키 만료 날짜 및 시간을 다시 설정; 주기적으로 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Security.Roles.CookieSlidingExpiration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieTimeout
  id: CookieTimeout
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
  fullName: System.Web.Security.Roles.CookieTimeout
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "역할 쿠키가 만료 되기까지의 시간 (분)의 수를 가져옵니다."
  remarks: "CookieTimeout 속성은 사용 때는 <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>속성은 `true` 역할 쿠키에 대 한 분 후에는--활성 시간을 지정 합니다.</xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> CookieTimeout 값을 설정 하려면 추가 `cookieTimeout` ASP.NET 응용 프로그램에 대 한 Web.config 파일의 요소에 특성을 정수 값을 지정 합니다.       경우 <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>은 `false`,이 속성이 무시 됩니다.</xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the CookieTimeout property to 30 minutes.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n  <add  \n    name=\"SqlProvider\"  \n    type=\"System.Web.Security.SqlRoleProvider\"  \n    connectionStringName=\"SqlServices\"  \n    applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static int CookieTimeout { get; }
    return:
      type: System.Int32
      description: "역할 쿠키가 하기 전에 시간을 분 단위로 지정 하는 정수에 만료 됩니다. 기본값은 30 분입니다."
  overload: System.Web.Security.Roles.CookieTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CreatePersistentCookie
  id: CreatePersistentCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
  fullName: System.Web.Security.Roles.CreatePersistentCookie
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "역할 이름 쿠키 또는 영구 세션 기반 인지를 나타내는 값을 가져옵니다."
  remarks: "CreatePersistentCookie 속성 값이 사용 하 여 ASP.NET 응용 프로그램에 대 한 구성에서 설정 된 `createPersistentCookie` 구성 요소의 특성입니다.       때 `false`, 역할 이름 쿠키는 세션 쿠키, 즉, 쿠키는 브라우저를 닫을 때 손실 됩니다. 때 `true`, 역할 이름 쿠키는 여러 브라우저 세션에서 사용할 수 있는 영구 쿠키입니다. 영구 쿠키 만료 날짜와 시간이 현재 날짜와 시간으로 설정과 <xref:System.Web.Security.Roles.CookieTimeout%2A>값 분.</xref:System.Web.Security.Roles.CookieTimeout%2A>"
  syntax:
    content: public static bool CreatePersistentCookie { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>역할 이름 쿠키는 영구 쿠키; 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Security.Roles.CreatePersistentCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CreateRole(System.String)
  id: CreateRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CreateRole(String)
  nameWithType: Roles.CreateRole(String)
  fullName: System.Web.Security.Roles.CreateRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "데이터 원본에 새 역할을 추가 합니다."
  remarks: "CreateRole 메서드 데이터 소스 역할 이름을 추가합니다. CreateRole 호출은 <xref:System.Web.Security.RoleProvider.CreateRole%2A>데이터 원본에 지정된 된 역할을 추가 하려면 기본 역할 공급자의.</xref:System.Web.Security.RoleProvider.CreateRole%2A>      > [!NOTE] > 역할 이름에서 쉼표를 사용할 수 없습니다."
  example:
  - "The following code example creates a new role in the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_12_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_12_1.aspx)]"
  syntax:
    content: public static void CreateRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "만들 역할의 이름입니다."
  overload: System.Web.Security.Roles.CreateRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열입니다.       -또는- <code>roleName</code> 쉼표를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteCookie
  id: DeleteCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteCookie()
  nameWithType: Roles.DeleteCookie()
  fullName: System.Web.Security.Roles.DeleteCookie()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "역할 이름이 캐시 되는 쿠키를 삭제 합니다."
  remarks: "DeleteCookie 메서드는 역할 이름을 캐시에 사용 되는 쿠키의 내용이 지웁니다. 역할 이름은 캐싱에 대 한 자세한 내용은 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A> 을 참조 하십시오."
  example:
  - "The following code example calls the DeleteCookie method to clear any cached role names when a user logs in. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.Security.Roles#5](~/add/codesnippet/visualbasic/m-system.web.security.ro_1_1.aspx)]\n [!code-cs[System.Web.Security.Roles#5](~/add/codesnippet/csharp/m-system.web.security.ro_1_1.aspx)]"
  syntax:
    content: public static void DeleteCookie ();
    parameters: []
  overload: System.Web.Security.Roles.DeleteCookie*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteRole(System.String)
  id: DeleteRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteRole(String)
  nameWithType: Roles.DeleteRole(String)
  fullName: System.Web.Security.Roles.DeleteRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "데이터 소스에서 역할을 제거 합니다."
  remarks: "DeleteRole 메서드는 데이터 소스에서 역할 이름을 제거합니다. DeleteRole 호출은 <xref:System.Web.Security.RoleProvider.DeleteRole%2A>데이터 소스에서 지정된 된 역할을 제거 하려면 기본 역할 공급자의.</xref:System.Web.Security.RoleProvider.DeleteRole%2A>       으로 식별 된 역할은 `roleName` 매개 변수는 하나 이상의 멤버 다음 예외가 throw 되 고 역할이 삭제 되지 것입니다."
  example:
  - "The following code example deletes a role from the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/csharp/m-system.web.security.ro_9_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_9_1.aspx)]"
  syntax:
    content: public static bool DeleteRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "삭제할 역할의 이름입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <code> roleName </code> 고, 그러지 않으면 데이터 원본에서 삭제 된 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Security.Roles.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 또는 쉼표 (,)를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>에 하나 이상의 멤버가 있습니다.       -또는-역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  id: DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteRole(String,Boolean)
  nameWithType: Roles.DeleteRole(String,Boolean)
  fullName: System.Web.Security.Roles.DeleteRole(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "데이터 소스에서 역할을 제거 합니다."
  remarks: "DeleteRole 메서드는 데이터 소스에서 역할 이름을 제거합니다. DeleteRole 호출은 <xref:System.Web.Security.RoleProvider.DeleteRole%2A>데이터 소스에서 지정된 된 역할을 제거 하려면 기본 역할 공급자의.</xref:System.Web.Security.RoleProvider.DeleteRole%2A>       경우 `throwOnPopulatedRole` 은 `true`다음 예외가 throw 됩니다, 그리고 및에서 식별 된 역할의 역할 삭제 되지 것입니다는 `roleName` 매개 변수에 하나 이상의 멤버가 있습니다. 경우 `throwOnPopulatedRole` 은 `false`, 다음 여부 비어 역할은 삭제 됩니다."
  example:
  - "The following code example deletes a role from the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/csharp/m-system.web.security.ro_0_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_0_1.aspx)]"
  syntax:
    content: public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);
    parameters:
    - id: roleName
      type: System.String
      description: "삭제할 역할의 이름입니다."
    - id: throwOnPopulatedRole
      type: System.Boolean
      description: "경우 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, 예외를 throw `roleName` 에 하나 이상의 멤버가 있습니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <code> roleName </code> 데이터 소스에서 삭제 하지 못했으면; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.Roles.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열입니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>하나 이상의 멤버 및 <code>throwOnPopulatedRole</code> 은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다.       -또는-역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.Domain
  id: Domain
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Domain
  nameWithType: Roles.Domain
  fullName: System.Web.Security.Roles.Domain
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "역할 이름 쿠키의 도메인 값을 가져옵니다."
  remarks: "도메인 속성 값이 사용 하 여 ASP.NET 응용 프로그램에 대 한 구성에서 설정 된 `domain` 구성 요소의 특성입니다.       도메인 특성에 대 한 구성에 없는 값을 지정 하는 경우 도메인 속성은 반환 `null` 역할 이름 쿠키 도메인의 기본의 동작에는 <xref:System.Web.HttpCookie><xref:System.Web.HttpCookie.Domain%2A>속성.</xref:System.Web.HttpCookie.Domain%2A></xref:System.Web.HttpCookie>"
  syntax:
    content: public static string Domain { get; }
    return:
      type: System.String
      description: "<xref:System.Web.HttpCookie.Domain*>역할 이름 쿠키의.</xref:System.Web.HttpCookie.Domain*>"
  overload: System.Web.Security.Roles.Domain*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.Enabled
  id: Enabled
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Enabled
  nameWithType: Roles.Enabled
  fullName: System.Web.Security.Roles.Enabled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "현재 웹 응용 프로그램에 대 한 역할 관리를 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: ''
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `enabled` attribute to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>역할 관리를 사용 하면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Security.Roles.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  id: FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: FindUsersInRole(String,String)
  nameWithType: Roles.FindUsersInRole(String,String)
  fullName: System.Web.Security.Roles.FindUsersInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "사용자 이름 일치 시킬 지정 된 사용자 이름에 포함 된 지정된 된 역할에 사용자의 목록을 가져옵니다."
  remarks: "FindUsersInRole의 목록을 반환 사용자 역할에 사용자 이름이 제공 된 일치 하는 항목에 포함 된 `usernameToMatch` 구성 된 `applicationName`합니다. 예를 들어 경우는 `usernameToMatch` 매개 변수는 &quot;사용자,&quot; 다음 사용자가 &quot;user1&quot;, &quot;user2&quot;, &quot;user3&quot;로 설정 되 고에 반환 됩니다. 사용자는 사용자 이름으로 알파벳 순서로 반환 됩니다.       <xref:System.Web.Security.SqlRoleProvider>에 대해 LIKE 절을 사용 하 여 검색 합니다는 `usernameToMatch` 매개 변수.</xref:System.Web.Security.SqlRoleProvider> 지원 되는 SQL Server에 절에서 사용할 수와 같은 와일드 카드는 `usernameToMatch` 매개 변수 값입니다."
  example:
  - "The following code example uses the FindUsersInRole method to display role membership based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.Roles#11](~/add/codesnippet/csharp/m-system.web.security.ro_16_1.aspx)]\n [!code-vb[System.Web.Security.Roles#11](~/add/codesnippet/visualbasic/m-system.web.security.ro_16_1.aspx)]"
  syntax:
    content: public static string[] FindUsersInRole (string roleName, string usernameToMatch);
    parameters:
    - id: roleName
      type: System.String
      description: "검색할 역할입니다."
    - id: usernameToMatch
      type: System.String
      description: "검색할 사용자 이름입니다."
    return:
      type: System.String[]
      description: "사용자 이름이 일치 하는 모든 사용자의 이름이 포함 된 문자열 배열을 <code> usernameToMatch </code> 및 지정된 된 역할의 구성원 인 합니다."
  overload: System.Web.Security.Roles.FindUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic).       -or-       <code>usernameToMatch</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는- <code>usernameToMatch</code> 은 빈 문자열입니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetAllRoles
  id: GetAllRoles
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetAllRoles()
  nameWithType: Roles.GetAllRoles()
  fullName: System.Web.Security.Roles.GetAllRoles()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "응용 프로그램에 대 한 모든 역할의 목록을 가져옵니다."
  remarks: "GetAllRoles 메서드 호출의 <xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=fullName>응용 프로그램에 대 한 데이터 소스에서 모든 역할의 목록을 가져오려면 기본 역할 공급자의.</xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=fullName> 에 지정 된 응용 프로그램에 대 한 역할에 대해서만 <xref:System.Web.Security.Roles.ApplicationName%2A>속성 검색 됩니다.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the GetAllRoles method to get the list of roles for an application and bind the results to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_18_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_18_1.aspx)]"
  syntax:
    content: public static string[] GetAllRoles ();
    parameters: []
    return:
      type: System.String[]
      description: "응용 프로그램에 대 한 데이터 원본에 저장 된 모든 역할의 이름을 포함 하는 문자열 배열입니다."
  overload: System.Web.Security.Roles.GetAllRoles*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetRolesForUser
  id: GetRolesForUser
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetRolesForUser()
  nameWithType: Roles.GetRolesForUser()
  fullName: System.Web.Security.Roles.GetRolesForUser()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "현재 로그온 한 사용자가 속한 역할 목록을 가져옵니다."
  remarks: "<xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName>현재 로그온 한 사용자가 인치 역할 데이터 원본에서 검색 하는 기본 역할 공급자의 메서드</xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName> 를 호출 하는 GetRolesForUser 메서드는 현재 로그온 한 사용자도 식별 되는 <xref:System.Web.HttpContext.User%2A?displayProperty=fullName>현재 <xref:System.Web.HttpContext?displayProperty=fullName>, 또는 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>HTTP가 아닌에 대 한 호스팅 환경.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:System.Web.HttpContext?displayProperty=fullName> </xref:System.Web.HttpContext.User%2A?displayProperty=fullName> 사용자가 로그온 하는 경우 예외가 throw 됩니다. 에 지정 된 응용 프로그램에 대 한 역할에 대해서만 <xref:System.Web.Security.Roles.ApplicationName%2A>속성 검색 됩니다.</xref:System.Web.Security.Roles.ApplicationName%2A>       경우 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>은 `true`, 다음 GetRolesForUser 메서드의 결과 지정된 된 역할 공급자를 사용 하지 않고는 역할 내 캐시에서 반환 될 수 있습니다.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example uses the GetRolesForUser method to retrieve a list of roles for a specified user and bind the returned roles to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_14_1.aspx)]\n [!code-cs[System.Web.Security.Roles#4](~/add/codesnippet/csharp/m-system.web.security.ro_14_1.aspx)]"
  syntax:
    content: public static string[] GetRolesForUser ();
    parameters: []
    return:
      type: System.String[]
      description: "현재 로그온 한 사용자가 속한 모든 역할의 이름을 포함 하는 문자열 배열입니다."
  overload: System.Web.Security.Roles.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "현재 로그온 한 사용자가 없는 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetRolesForUser(System.String)
  id: GetRolesForUser(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetRolesForUser(String)
  nameWithType: Roles.GetRolesForUser(String)
  fullName: System.Web.Security.Roles.GetRolesForUser(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "사용자가 속한 역할 목록을 가져옵니다."
  remarks: "<xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName>역할 기능 사용자가 데이터 원본에서 검색 하는 기본 역할 공급자의 메서드</xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName> 를 호출 하는 GetRolesForUser 메서드는 에 지정 된 응용 프로그램에 대 한 역할에 대해서만 <xref:System.Web.Security.Roles.ApplicationName%2A>속성 검색 됩니다.</xref:System.Web.Security.Roles.ApplicationName%2A>       경우 `username` 현재 로그온 한 사용자에 게 같은지 및 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>은 `true`, 메서드는 역할에서 반환 될 수 있습니다 GetRolesForUser 결과 <xref:System.Web.Security.Roles.Provider%2A>.</xref:System.Web.Security.Roles.Provider%2A> 지정된 하는 대신 캐시</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetRolesForUser%2A> method to retrieve a list of roles for a specified user and bind the returned roles to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_15_1.aspx)]\n [!code-cs[System.Web.Security.Roles#4](~/add/codesnippet/csharp/m-system.web.security.ro_15_1.aspx)]"
  syntax:
    content: public static string[] GetRolesForUser (string username);
    parameters:
    - id: username
      type: System.String
      description: "에 대 한 역할의 목록을 반환할 사용자입니다."
    return:
      type: System.String[]
      description: "지정된 된 사용자가 속한 모든 역할의 이름을 포함 하는 문자열 배열입니다."
  overload: System.Web.Security.Roles.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>username</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>username</code>쉼표 (,)를 포함합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetUsersInRole(System.String)
  id: GetUsersInRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetUsersInRole(String)
  nameWithType: Roles.GetUsersInRole(String)
  fullName: System.Web.Security.Roles.GetUsersInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할에 사용자의 목록을 가져옵니다."
  remarks: "GetUsersInRole 메서드 호출의 <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A>데이터 소스에서 역할에 연결 된 사용자 이름을 검색 하려면 기본 역할 공급자의.</xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> 에 지정 된 응용 프로그램에 대 한 역할에 대해서만 <xref:System.Web.Security.Roles.ApplicationName%2A>속성 검색 됩니다.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the GetUsersInRole method to get a list of the users in a particular role and binds the results to a <xref:System.Web.UI.WebControls.GridView> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_10_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_10_1.aspx)]"
  syntax:
    content: public static string[] GetUsersInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "에 대 한 사용자의 목록을 가져올 역할입니다."
    return:
      type: System.String[]
      description: "지정된 된 역할의 구성원 인 모든 사용자의 이름을 포함 하는 문자열 배열입니다."
  overload: System.Web.Security.Roles.GetUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 또는 쉼표 (,)를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.IsUserInRole(System.String)
  id: IsUserInRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: IsUserInRole(String)
  nameWithType: Roles.IsUserInRole(String)
  fullName: System.Web.Security.Roles.IsUserInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "현재 로그온 한 사용자 지정 된 역할에서 인지를 나타내는 값을 가져옵니다. API은만 ASP.NET 요청 스레드의 컨텍스트 내에서 호출 되며 해당 인가 된 사용 사례에는 스레드로부터 안전 합니다."
  remarks: "IsUserInRole 메서드 호출의 <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=fullName>현재 로그온 한 사용자에 지정 된 응용 프로그램에 대 한 데이터 소스에서 역할에 연결 되는지 확인 하려면 기본 역할 공급자의 메서드는 <xref:System.Web.Security.Roles.ApplicationName%2A>속성.</xref:System.Web.Security.Roles.ApplicationName%2A> </xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=fullName> 현재 로그온 한 사용자도 식별 되는 <xref:System.Web.HttpContext.User%2A?displayProperty=fullName>현재 <xref:System.Web.HttpContext?displayProperty=fullName>, 또는 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>HTTP가 아닌에 대 한 호스팅 환경.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:System.Web.HttpContext?displayProperty=fullName> </xref:System.Web.HttpContext.User%2A?displayProperty=fullName> 사용자가 로그온 하는 경우 예외가 throw 됩니다. 에 지정 된 응용 프로그램에 대 한 역할에 대해서만 <xref:System.Web.Security.Roles.ApplicationName%2A>속성 검색 됩니다.</xref:System.Web.Security.Roles.ApplicationName%2A>       경우 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>은 `true`, 다음 `roleName` 지정된 된 역할 공급자 보다 역할 캐시에 대해 검사할 수 있습니다.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example programmatically checks whether the currently logged-on user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.ro_2_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_2_1.aspx)]"
  syntax:
    content: public static bool IsUserInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "검색할 역할의 이름입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 로그인 한 사용자가 지정된 된 역할에 속하면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Security.Roles.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -또는-현재 로그온 한 사용자가 없는 합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 또는 쉼표 (,)를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  id: IsUserInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: IsUserInRole(String,String)
  nameWithType: Roles.IsUserInRole(String,String)
  fullName: System.Web.Security.Roles.IsUserInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할에 지정된 된 사용자 인지를 나타내는 값을 가져옵니다. API은만 ASP.NET 요청 스레드의 컨텍스트 내에서 호출 되며 해당 인가 된 사용 사례에는 스레드로부터 안전 합니다."
  remarks: "IsUserInRole 메서드 호출의 <xref:System.Web.Security.RoleProvider.IsUserInRole%2A>사용자 이름에 지정 된 응용 프로그램에 대 한 데이터 소스에서 역할에 연결 되는지 확인 하려면 기본 역할 공급자의 메서드는 <xref:System.Web.Security.Roles.ApplicationName%2A>속성.</xref:System.Web.Security.Roles.ApplicationName%2A> </xref:System.Web.Security.RoleProvider.IsUserInRole%2A>       경우 `username` 현재 로그온 한 사용자에 게 같은지 및 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>속성 값은 `true`, `roleName` 지정된 <xref:System.Web.Security.Roles.Provider%2A>.</xref:System.Web.Security.Roles.Provider%2A> 보다는 역할 내 캐시에 대해 검사할 수 있습니다</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example programmatically checks whether a user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.ro_11_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_11_1.aspx)]"
  syntax:
    content: public static bool IsUserInRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "검색할 사용자의 이름입니다."
    - id: roleName
      type: System.String
      description: "검색할 역할의 이름입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정된 된 사용자가 지정된 된 역할의 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Security.Roles.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는- <code>username</code> 쉼표 (,)를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.MaxCachedResults
  id: MaxCachedResults
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
  fullName: System.Web.Security.Roles.MaxCachedResults
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "사용자에 대해 캐시할 역할 이름의 최대 수를 가져옵니다."
  remarks: "사용 하 여 MaxCachedResults 속성이 설정 되어는 `maxCachedResults` 구성 특성입니다. 값은 `maxCachedResults` 구성 특성을&0; 보다 큰 정수 값으로 설정 해야 합니다."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `maxCachedResults` attribute to 10.  \n  \n```  \n<roleManager  \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\"   \n  maxCachedResults=\"10\" />  \n```"
  syntax:
    content: public static int MaxCachedResults { get; }
    return:
      type: System.Int32
      description: "사용자에 대해 캐시할 역할 이름의 최대 수입니다. 기본값은 25입니다."
  overload: System.Web.Security.Roles.MaxCachedResults*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.Provider
  id: Provider
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Provider
  nameWithType: Roles.Provider
  fullName: System.Web.Security.Roles.Provider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "응용 프로그램에 대 한 기본 역할 공급자를 가져옵니다."
  remarks: "공급자 속성을 사용 하면 응용 프로그램에 대 한 기본 역할 공급자를 직접 참조할 수 있습니다. 이 일반적으로 <xref:System.Web.Security.RoleProvider>추상 클래스</xref:System.Web.Security.RoleProvider> 의 일부분이 아닌 역할 공급자의 사용자 지정 멤버에 액세스 사용       예를 들어는 <xref:System.Web.Security.WindowsTokenRoleProvider>의 오버 로드를 포함 하는 클래스는 <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A>메서드를 사용 하 여 사용자가 일반적인 Windows 역할에 있는지 여부를 확인할 수 있도록 하는 <xref:System.Security.Principal.WindowsBuiltInRole>열거형 값입니다.</xref:System.Security.Principal.WindowsBuiltInRole> </xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> </xref:System.Web.Security.WindowsTokenRoleProvider> 에 대 한 참조는 <xref:System.Web.Security.WindowsTokenRoleProvider>응용 프로그램 공급자 속성을 사용 하 여 가져올 수 있습니다 및로 캐스팅 될 수에 대 한 클래스는 <xref:System.Web.Security.WindowsTokenRoleProvider>참조 하기 위해는 <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A>오버 로드.</xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> </xref:System.Web.Security.WindowsTokenRoleProvider> </xref:System.Web.Security.WindowsTokenRoleProvider>       역할 공급자는 여러 응용 프로그램에 대해 구성 된 경우에 다른 역할 공급자를 사용 하 여 액세스할 수는 <xref:System.Web.Security.Roles.Providers%2A>컬렉션.</xref:System.Web.Security.Roles.Providers%2A>"
  example:
  - "The following code example casts the default role provider as a <xref:System.Web.Security.WindowsTokenRoleProvider> and checks whether the currently logged-on user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.WindowsTokenRoleProvider>.  \n  \n [!code-cs[System.Web.Security.WindowsTokenRoleProvider#2](~/add/codesnippet/csharp/p-system.web.security.ro_0_1.aspx)]\n [!code-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/add/codesnippet/visualbasic/p-system.web.security.ro_0_1.aspx)]"
  syntax:
    content: public static System.Web.Security.RoleProvider Provider { get; }
    return:
      type: System.Web.Security.RoleProvider
      description: "<xref:System.Web.Security.RoleProvider>추상 클래스</xref:System.Web.Security.RoleProvider> 를 상속 하는 클래스도 노출 되는 응용 프로그램에 대 한 기본 역할 공급자"
  overload: System.Web.Security.Roles.Provider*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.Providers
  id: Providers
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Providers
  nameWithType: Roles.Providers
  fullName: System.Web.Security.Roles.Providers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "ASP.NET 응용 프로그램에 대 한 역할 공급자의 컬렉션을 가져옵니다."
  remarks: "Web.config 파일에 추가 공급자를 포함 하 여 응용 프로그램에 사용 되는 모든 역할 공급자를 참조 하는 공급자 속성입니다. 역할을 사용할 수 있는 공급자 응용 프로그램에 대해 사용 하 여 제어할 수 있습니다는 `providers` 응용 프로그램에 대 한 Web.config 파일의 섹션의 요소입니다.       다음 예제에서는 모든 기존 공급자 (예: Machine.config 파일에 지정 된 장치)를 제거 하는 섹션 보여주며, 추가 <xref:System.Web.Security.SqlRoleProvider>인스턴스 응용 프로그램에 대 한 역할 공급자로.</xref:System.Web.Security.SqlRoleProvider>      ```   <configuration>     <connectionStrings>       <add name=&quot;SqlServices&quot; connectionString=&quot;Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;&quot; />     </connectionStrings>        <system.web>       <roleManager defaultProvider=&quot;SqlProvider&quot;          enabled=&quot;true&quot;         cacheRolesInCookie=&quot;true&quot;         cookieName=&quot;.ASPROLES&quot;         cookieTimeout=&quot;30&quot;         cookiePath=&quot;/&quot;         cookieRequireSSL=&quot;false&quot;         cookieSlidingExpiration=&quot;true&quot;         cookieProtection=&quot;Encrypted&quot;>            <providers>           <clear/>           <add             name=&quot;SqlProvider&quot;             type=&quot;System.Web.Security.SqlRoleProvider&quot;             connectionStringName=&quot;SqlServices&quot;             applicationName=&quot;MyApplication&quot; />            </providers>          </roleManager>     </system.web>   </configuration>   ```원하는 형식으로 캐스팅 하는 역할 공급자 이름으로 인덱싱에 대 한 강력한 형식의 참조 공급자가 공급자 컬렉션을 가져올 수 있습니다.       사용 하 여 응용 프로그램에 대 한 기본 공급자에 대 한 참조를 가져올 수 있습니다는 <xref:System.Web.Security.Roles.Provider%2A>속성.</xref:System.Web.Security.Roles.Provider%2A>"
  example:
  - "The following code example lists the providers enabled for an application and their respective types.  \n  \n [!code-cs[System.Web.Security.Roles#7](~/add/codesnippet/csharp/p-system.web.security.ro_4_1.aspx)]\n [!code-vb[System.Web.Security.Roles#7](~/add/codesnippet/visualbasic/p-system.web.security.ro_4_1.aspx)]"
  syntax:
    content: public static System.Web.Security.RoleProviderCollection Providers { get; }
    return:
      type: System.Web.Security.RoleProviderCollection
      description: "A <xref href=&quot;System.Web.Security.RoleProviderCollection&quot;> </xref> ASP.NET 응용 프로그램에 대해 구성 된 역할 공급자를 포함 하 합니다."
  overload: System.Web.Security.Roles.Providers*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  id: RemoveUserFromRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUserFromRole(String,String)
  nameWithType: Roles.RemoveUserFromRole(String,String)
  fullName: System.Web.Security.Roles.RemoveUserFromRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할에서 지정된 된 사용자를 제거합니다."
  remarks: "RemoveUserFromRole 메서드는 데이터 소스에서 지정된 된 역할에서 지정된 된 사용자를 제거 하는 기본 역할 공급자를 호출 합니다."
  example:
  - "The following code example removes a user from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_5_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_5_1.aspx)]"
  syntax:
    content: public static void RemoveUserFromRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "지정된 된 역할에서 제거할 사용자입니다."
    - id: roleName
      type: System.String
      description: "지정된 된 사용자를 제거 하려면 역할입니다."
  overload: System.Web.Security.Roles.RemoveUserFromRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 또는 쉼표 (,)를 포함 <code>username</code> 은 빈 문자열 또는 쉼표 (,)를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  id: RemoveUserFromRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUserFromRoles(String,String[])
  nameWithType: Roles.RemoveUserFromRoles(String,String[])
  fullName: System.Web.Security.Roles.RemoveUserFromRoles(String,String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할에서 지정된 된 사용자를 제거합니다."
  remarks: "RemoveUserFromRoles 메서드는 데이터 소스에서 지정된 된 역할에서 지정된 된 사용자를 제거 하는 기본 역할 공급자를 호출 합니다.       응용 프로그램이 사용 하도록 구성 된 경우는 <xref:System.Web.Security.SqlRoleProvider>클래스 RemoveUserFromRoles 메서드를 호출 하는 동안 수행 되는 데이터베이스 업데이트가 트랜잭션 내에서 이루어집니다.</xref:System.Web.Security.SqlRoleProvider> 오류가 발생 하는 경우 지정된 된 역할에 없는 사용자 이름, 같은 트랜잭션이 롤백되고 업데이트가 수행 되지 않습니다."
  example:
  - "The following code example uses the RemoveUserFromRoles method to remove a user from one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#10](~/add/codesnippet/visualbasic/m-system.web.security.ro_17_1.aspx)]\n [!code-cs[System.Web.Security.Roles#10](~/add/codesnippet/csharp/m-system.web.security.ro_17_1.aspx)]"
  syntax:
    content: public static void RemoveUserFromRoles (string username, string[] roleNames);
    parameters:
    - id: username
      type: System.String
      description: "지정된 된 역할에서 제거할 사용자입니다."
    - id: roleNames
      type: System.String[]
      description: "지정된 된 사용자를 제거할 역할 이름의 문자열 배열입니다."
  overload: System.Web.Security.Roles.RemoveUserFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "역할 중 하나의 <code> roleNames </code> 은 빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는- <code> username </code> 은 빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는- <code> roleNames </code> 중복 요소를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  id: RemoveUsersFromRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUsersFromRole(String[],String)
  nameWithType: Roles.RemoveUsersFromRole(String[],String)
  fullName: System.Web.Security.Roles.RemoveUsersFromRole(String[],String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할에서 지정된 된 사용자를 제거합니다."
  remarks: "RemoveUsersFromRole 메서드는 데이터 소스에서 지정된 된 역할에서 지정된 된 사용자를 제거 하는 기본 역할 공급자를 호출 합니다.       응용 프로그램을 사용 하는 경우는 <xref:System.Web.Security.SqlRoleProvider>클래스를 호출 하는 동안 수행 되는 데이터베이스 업데이트가 <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>메서드는 트랜잭션 내에서 이루어집니다.</xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> </xref:System.Web.Security.SqlRoleProvider> 오류가 발생 하는 경우 지정된 된 역할에 없는 사용자 이름, 같은 트랜잭션이 롤백되고 업데이트가 수행 되지 않습니다."
  example:
  - "The following code example uses the RemoveUsersFromRole method to remove one or more users from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#9](~/add/codesnippet/csharp/m-system.web.security.ro_13_1.aspx)]\n [!code-vb[System.Web.Security.Roles#9](~/add/codesnippet/visualbasic/m-system.web.security.ro_13_1.aspx)]"
  syntax:
    content: public static void RemoveUsersFromRole (string[] usernames, string roleName);
    parameters:
    - id: usernames
      type: System.String[]
      description: "지정된 된 역할에서 제거할 사용자 이름의 문자열 배열입니다."
    - id: roleName
      type: System.String
      description: "지정된 된 사용자를 제거할 역할의 이름입니다."
  overload: System.Web.Security.Roles.RemoveUsersFromRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -또는-이름 사용자 중 하나가 <code>usernames</code> 은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는-이름 사용자 중 하나가 <code>usernames</code> 은 빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는- <code>usernames</code> 중복 요소를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  id: RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: Roles.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.Roles.RemoveUsersFromRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할에서 지정된 된 사용자 이름을 제거합니다."
  remarks: "RemoveUsersFromRoles 메서드는 데이터 소스에서 지정된 된 역할에서 지정된 된 사용자를 제거 하는 기본 역할 공급자를 호출 합니다.       응용 프로그램을 사용 하는 경우는 <xref:System.Web.Security.SqlRoleProvider>클래스를 호출 하는 동안 수행 되는 데이터베이스 업데이트가 <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>메서드는 트랜잭션 내에서 이루어집니다.</xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> </xref:System.Web.Security.SqlRoleProvider> 오류가 발생 하는 경우 지정된 된 역할에 없는 사용자 이름, 같은 트랜잭션이 롤백되고 업데이트가 수행 되지 않습니다."
  example:
  - "The following code example uses the RemoveUsersFromRoles method to remove one or more users from one or more roles based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#8](~/add/codesnippet/csharp/6dafcb6b-2398-4825-9291-_1.aspx)]\n [!code-vb[System.Web.Security.Roles#8](~/add/codesnippet/visualbasic/6dafcb6b-2398-4825-9291-_1.aspx)]"
  syntax:
    content: public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "지정된 된 역할에서 제거할 사용자 이름의 문자열 배열입니다."
    - id: roleNames
      type: System.String[]
      description: "지정된 된 사용자를 제거할 역할 이름의 문자열 배열입니다."
  overload: System.Web.Security.Roles.RemoveUsersFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "에 지정 된 역할 중 하나의 <code> roleNames </code> 은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다.       -또는-에 지정 된 사용자 중 하나를 <code> usernames </code> 은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "에 지정 된 역할 중 하나의 <code> roleNames </code> 은 빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는-에 지정 된 사용자 중 하나를 <code> usernames </code> 은 빈 문자열 또는 쉼표 (,)를 포함 합니다.       -또는- <code> roleNames </code> 중복 요소를 포함 합니다.       -또는- <code> usernames </code> 중복 요소를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.Security.Roles.RoleExists(System.String)
  id: RoleExists(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RoleExists(String)
  nameWithType: Roles.RoleExists(String)
  fullName: System.Web.Security.Roles.RoleExists(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할 이름이 역할 데이터 소스에 이미 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "RoleExists 메서드 호출의 `RoleExists` 에 지정 된 응용 프로그램에 대 한 데이터 원본에는 역할 이름이 있는지 확인 하려면 기본 역할 공급자의 메서드는 <xref:System.Web.Security.Roles.ApplicationName%2A>속성.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the RoleExists method to determine whether a role name already exists before creating the role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_4_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_4_1.aspx)]"
  syntax:
    content: public static bool RoleExists (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "데이터 원본에서 검색할 역할의 이름입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>데이터 소스에 있는 역할 이름을 이미 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Security.Roles.RoleExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 또는 쉼표 (,)를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "역할 관리를 사용할 수 없습니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Configuration.Provider.ProviderException
  parent: System.Configuration.Provider
  isExternal: false
  name: ProviderException
  nameWithType: ProviderException
  fullName: System.Configuration.Provider.ProviderException
- uid: System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRole(String[],String)
  nameWithType: Roles.AddUsersToRole(String[],String)
  fullName: System.Web.Security.Roles.AddUsersToRole(String[],String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRoles(String[],String[])
  nameWithType: Roles.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.Roles.AddUsersToRoles(String[],String[])
- uid: System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRole(String,String)
  nameWithType: Roles.AddUserToRole(String,String)
  fullName: System.Web.Security.Roles.AddUserToRole(String,String)
- uid: System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRoles(String,String[])
  nameWithType: Roles.AddUserToRoles(String,String[])
  fullName: System.Web.Security.Roles.AddUserToRoles(String,String[])
- uid: System.Web.Security.Roles.ApplicationName
  parent: System.Web.Security.Roles
  isExternal: false
  name: ApplicationName
  nameWithType: Roles.ApplicationName
  fullName: System.Web.Security.Roles.ApplicationName
- uid: System.Web.Security.Roles.CacheRolesInCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
  fullName: System.Web.Security.Roles.CacheRolesInCookie
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Security.Roles.CookieName
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieName
  nameWithType: Roles.CookieName
  fullName: System.Web.Security.Roles.CookieName
- uid: System.Web.Security.Roles.CookiePath
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookiePath
  nameWithType: Roles.CookiePath
  fullName: System.Web.Security.Roles.CookiePath
- uid: System.Web.Security.Roles.CookieProtectionValue
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
  fullName: System.Web.Security.Roles.CookieProtectionValue
- uid: System.Web.Security.CookieProtection
  parent: System.Web.Security
  isExternal: false
  name: CookieProtection
  nameWithType: CookieProtection
  fullName: System.Web.Security.CookieProtection
- uid: System.Web.Security.Roles.CookieRequireSSL
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
  fullName: System.Web.Security.Roles.CookieRequireSSL
- uid: System.Web.Security.Roles.CookieSlidingExpiration
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
  fullName: System.Web.Security.Roles.CookieSlidingExpiration
- uid: System.Web.Security.Roles.CookieTimeout
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
  fullName: System.Web.Security.Roles.CookieTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Security.Roles.CreatePersistentCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
  fullName: System.Web.Security.Roles.CreatePersistentCookie
- uid: System.Web.Security.Roles.CreateRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreateRole(String)
  nameWithType: Roles.CreateRole(String)
  fullName: System.Web.Security.Roles.CreateRole(String)
- uid: System.Web.Security.Roles.DeleteCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteCookie()
  nameWithType: Roles.DeleteCookie()
  fullName: System.Web.Security.Roles.DeleteCookie()
- uid: System.Web.Security.Roles.DeleteRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole(String)
  nameWithType: Roles.DeleteRole(String)
  fullName: System.Web.Security.Roles.DeleteRole(String)
- uid: System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole(String,Boolean)
  nameWithType: Roles.DeleteRole(String,Boolean)
  fullName: System.Web.Security.Roles.DeleteRole(String,Boolean)
- uid: System.Web.Security.Roles.Domain
  parent: System.Web.Security.Roles
  isExternal: false
  name: Domain
  nameWithType: Roles.Domain
  fullName: System.Web.Security.Roles.Domain
- uid: System.Web.Security.Roles.Enabled
  parent: System.Web.Security.Roles
  isExternal: false
  name: Enabled
  nameWithType: Roles.Enabled
  fullName: System.Web.Security.Roles.Enabled
- uid: System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: FindUsersInRole(String,String)
  nameWithType: Roles.FindUsersInRole(String,String)
  fullName: System.Web.Security.Roles.FindUsersInRole(String,String)
- uid: System.Web.Security.Roles.GetAllRoles
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetAllRoles()
  nameWithType: Roles.GetAllRoles()
  fullName: System.Web.Security.Roles.GetAllRoles()
- uid: System.Web.Security.Roles.GetRolesForUser
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser()
  nameWithType: Roles.GetRolesForUser()
  fullName: System.Web.Security.Roles.GetRolesForUser()
- uid: System.Web.Security.Roles.GetRolesForUser(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser(String)
  nameWithType: Roles.GetRolesForUser(String)
  fullName: System.Web.Security.Roles.GetRolesForUser(String)
- uid: System.Web.Security.Roles.GetUsersInRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetUsersInRole(String)
  nameWithType: Roles.GetUsersInRole(String)
  fullName: System.Web.Security.Roles.GetUsersInRole(String)
- uid: System.Web.Security.Roles.IsUserInRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole(String)
  nameWithType: Roles.IsUserInRole(String)
  fullName: System.Web.Security.Roles.IsUserInRole(String)
- uid: System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole(String,String)
  nameWithType: Roles.IsUserInRole(String,String)
  fullName: System.Web.Security.Roles.IsUserInRole(String,String)
- uid: System.Web.Security.Roles.MaxCachedResults
  parent: System.Web.Security.Roles
  isExternal: false
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
  fullName: System.Web.Security.Roles.MaxCachedResults
- uid: System.Web.Security.Roles.Provider
  parent: System.Web.Security.Roles
  isExternal: false
  name: Provider
  nameWithType: Roles.Provider
  fullName: System.Web.Security.Roles.Provider
- uid: System.Web.Security.RoleProvider
  parent: System.Web.Security
  isExternal: true
  name: RoleProvider
  nameWithType: RoleProvider
  fullName: System.Web.Security.RoleProvider
- uid: System.Web.Security.Roles.Providers
  parent: System.Web.Security.Roles
  isExternal: false
  name: Providers
  nameWithType: Roles.Providers
  fullName: System.Web.Security.Roles.Providers
- uid: System.Web.Security.RoleProviderCollection
  parent: System.Web.Security
  isExternal: false
  name: RoleProviderCollection
  nameWithType: RoleProviderCollection
  fullName: System.Web.Security.RoleProviderCollection
- uid: System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRole(String,String)
  nameWithType: Roles.RemoveUserFromRole(String,String)
  fullName: System.Web.Security.Roles.RemoveUserFromRole(String,String)
- uid: System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRoles(String,String[])
  nameWithType: Roles.RemoveUserFromRoles(String,String[])
  fullName: System.Web.Security.Roles.RemoveUserFromRoles(String,String[])
- uid: System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRole(String[],String)
  nameWithType: Roles.RemoveUsersFromRole(String[],String)
  fullName: System.Web.Security.Roles.RemoveUsersFromRole(String[],String)
- uid: System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: Roles.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.Roles.RemoveUsersFromRoles(String[],String[])
- uid: System.Web.Security.Roles.RoleExists(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RoleExists(String)
  nameWithType: Roles.RoleExists(String)
  fullName: System.Web.Security.Roles.RoleExists(String)
- uid: System.Web.Security.Roles.AddUsersToRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRole
  nameWithType: Roles.AddUsersToRole
- uid: System.Web.Security.Roles.AddUsersToRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRoles
  nameWithType: Roles.AddUsersToRoles
- uid: System.Web.Security.Roles.AddUserToRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRole
  nameWithType: Roles.AddUserToRole
- uid: System.Web.Security.Roles.AddUserToRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRoles
  nameWithType: Roles.AddUserToRoles
- uid: System.Web.Security.Roles.ApplicationName*
  parent: System.Web.Security.Roles
  isExternal: false
  name: ApplicationName
  nameWithType: Roles.ApplicationName
- uid: System.Web.Security.Roles.CacheRolesInCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
- uid: System.Web.Security.Roles.CookieName*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieName
  nameWithType: Roles.CookieName
- uid: System.Web.Security.Roles.CookiePath*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookiePath
  nameWithType: Roles.CookiePath
- uid: System.Web.Security.Roles.CookieProtectionValue*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
- uid: System.Web.Security.Roles.CookieRequireSSL*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
- uid: System.Web.Security.Roles.CookieSlidingExpiration*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
- uid: System.Web.Security.Roles.CookieTimeout*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
- uid: System.Web.Security.Roles.CreatePersistentCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
- uid: System.Web.Security.Roles.CreateRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreateRole
  nameWithType: Roles.CreateRole
- uid: System.Web.Security.Roles.DeleteCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteCookie
  nameWithType: Roles.DeleteCookie
- uid: System.Web.Security.Roles.DeleteRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole
  nameWithType: Roles.DeleteRole
- uid: System.Web.Security.Roles.Domain*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Domain
  nameWithType: Roles.Domain
- uid: System.Web.Security.Roles.Enabled*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Enabled
  nameWithType: Roles.Enabled
- uid: System.Web.Security.Roles.FindUsersInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: FindUsersInRole
  nameWithType: Roles.FindUsersInRole
- uid: System.Web.Security.Roles.GetAllRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetAllRoles
  nameWithType: Roles.GetAllRoles
- uid: System.Web.Security.Roles.GetRolesForUser*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser
  nameWithType: Roles.GetRolesForUser
- uid: System.Web.Security.Roles.GetUsersInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetUsersInRole
  nameWithType: Roles.GetUsersInRole
- uid: System.Web.Security.Roles.IsUserInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole
  nameWithType: Roles.IsUserInRole
- uid: System.Web.Security.Roles.MaxCachedResults*
  parent: System.Web.Security.Roles
  isExternal: false
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
- uid: System.Web.Security.Roles.Provider*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Provider
  nameWithType: Roles.Provider
- uid: System.Web.Security.Roles.Providers*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Providers
  nameWithType: Roles.Providers
- uid: System.Web.Security.Roles.RemoveUserFromRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRole
  nameWithType: Roles.RemoveUserFromRole
- uid: System.Web.Security.Roles.RemoveUserFromRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRoles
  nameWithType: Roles.RemoveUserFromRoles
- uid: System.Web.Security.Roles.RemoveUsersFromRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRole
  nameWithType: Roles.RemoveUsersFromRole
- uid: System.Web.Security.Roles.RemoveUsersFromRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRoles
  nameWithType: Roles.RemoveUsersFromRoles
- uid: System.Web.Security.Roles.RoleExists*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RoleExists
  nameWithType: Roles.RoleExists
