### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageQueueAccessControlEntry
  id: MessageQueueAccessControlEntry
  children:
  - System.Messaging.MessageQueueAccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.MessageQueueAccessRights)
  - System.Messaging.MessageQueueAccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)
  - System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessRights
  langs:
  - csharp
  name: MessageQueueAccessControlEntry
  nameWithType: MessageQueueAccessControlEntry
  fullName: System.Messaging.MessageQueueAccessControlEntry
  type: Class
  summary: "(사용자, 그룹 또는 컴퓨터) 메시지 큐 태스크를 수행 하는 트러스티에 대 한 액세스 권한을 지정 합니다."
  remarks: "Use the MessageQueueAccessControlEntry class to specify rights to apply to a trustee. These rights include peeking, receiving, or sending messages; viewing or modifying queue properties or permissions; and deleting queues. The <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.SetPermissions%2A> method provides overloads for passing an instance of this class directly into the method, or adding it to an instance of <xref:System.Messaging.AccessControlList> so that you can add rights for more than one trustee at a time. The new access right is appended to the end of the queue's discretionary access control list (DACL), which identifies the users and groups that can access the queue.  \n  \n There are some exceptions to this generalization about where the new right is added and its effects. For more information, see <xref:System.Messaging>.  \n  \n An overload of the <xref:System.Messaging.MessageQueueAccessControlEntry.%23ctor%2A> constructor allows you specify a <xref:System.Messaging.AccessControlEntryType> member to indicate whether to allow or deny rights to the trustee. The order in which rights are allowed or denied in the resource's DACL affects whether the trustee has the specified rights. For example, if rights have already been granted to the trustee and you later add an entry that denies them, the system finds the granted rights first, so the user is granted rights you might have intended they be denied. You can use two entry types to override this behavior: `Set` and `Revoke`. For more information about controlling the way in which access rights are determined, see the <xref:System.Messaging.AccessControlEntryType> enumeration topic.  \n  \n The MessageQueueAccessControlEntry class is associated with security based on access control lists (ACLs), which you can use to give users access to the Message Queuing system itself. This is different from code access security, which is implemented through the <xref:System.Messaging.MessageQueuePermission> and related classes. Message Queuing code access security defines queue-specific operations or queue access that an application might require which is subject to security control; it does not represent a right for the application to perform these operations or receive access in and of itself. See the topic [&#91;\\<topic://cpconcodeaccesssecurity>&#93;](http://msdn.microsoft.com/en-us/23a20143-241d-4fe5-9d9f-3933fd594c03) for more information about code access security.  \n  \n To set message queue permissions for a trustee, create a new instance of the <xref:System.Messaging.AccessControlEntry.Trustee%2A> class and pass it into an overload of the <xref:System.Messaging.MessageQueueAccessControlEntry.%23ctor%2A> constructor. Specify the message queue access rights either by passing an instance of <xref:System.Messaging.MessageQueueAccessRights> into the constructor or by setting the <xref:System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessRights%2A> property on an existing MessageQueueAccessControlEntry instance.  \n  \n You can then pass the MessageQueueAccessControlEntry instance directly to the <xref:System.Messaging.MessageQueue.SetPermissions%2A?displayProperty=fullName> method, or alternately add the entry to an instance of <xref:System.Messaging.AccessControlList> before calling <xref:System.Messaging.MessageQueue.SetPermissions%2A>."
  syntax:
    content: 'public class MessageQueueAccessControlEntry : System.Messaging.AccessControlEntry'
  inheritance:
  - System.Object
  - System.Messaging.AccessControlEntry
  implements: []
  inheritedMembers:
  - System.Messaging.AccessControlEntry.CustomAccessRights
  - System.Messaging.AccessControlEntry.EntryType
  - System.Messaging.AccessControlEntry.GenericAccessRights
  - System.Messaging.AccessControlEntry.StandardAccessRights
  - System.Messaging.AccessControlEntry.Trustee
  platform:
  - net462
- uid: System.Messaging.MessageQueueAccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.MessageQueueAccessRights)
  id: '#ctor(System.Messaging.Trustee,System.Messaging.MessageQueueAccessRights)'
  parent: System.Messaging.MessageQueueAccessControlEntry
  langs:
  - csharp
  name: MessageQueueAccessControlEntry(Trustee,MessageQueueAccessRights)
  nameWithType: MessageQueueAccessControlEntry.MessageQueueAccessControlEntry(Trustee,MessageQueueAccessRights)
  fullName: System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessControlEntry(Trustee,MessageQueueAccessRights)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Messaging.MessageQueueAccessControlEntry&quot;> </xref> 클래스를 지정된 하는 트러스티에 지정 된 메시지 큐 액세스 권한을 부여 합니다."
  remarks: "이 생성자의 오버이 로드를 사용 하 여 지정된 트러스티에 대 한 권한을 부여 합니다. 지정 하는 권한은 `rights` 매개 변수는 멤버의 비트 조합은 <xref:System.Messaging.MessageQueueAccessRights>메시지를 받는 큐를 삭제 하 고 큐 속성을 설정 권한을 포함 하는 비트 플래그.</xref:System.Messaging.MessageQueueAccessRights> 생성자는이 인스턴스를 설정 하려면에 전달 된 권한을 사용 하 여 <xref:System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessRights%2A>속성.</xref:System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessRights%2A>       이 인스턴스를 전달 <xref:System.Messaging.MessageQueueAccessControlEntry>의 오버 로드에 직접는 <xref:System.Messaging.MessageQueue.SetPermissions%2A>이 트러스티에만 권한을 부여 하거나이 인스턴스를 추가 하는 메서드는 <xref:System.Messaging.AccessControlList>호출 하기 전에 <xref:System.Messaging.MessageQueue.SetPermissions%2A>하거나 한 번에 여러 트러스티에 대 한 권한을 거부할 수 있습니다.</xref:System.Messaging.MessageQueue.SetPermissions%2A> </xref:System.Messaging.AccessControlList> </xref:System.Messaging.MessageQueue.SetPermissions%2A> </xref:System.Messaging.MessageQueueAccessControlEntry>"
  syntax:
    content: public MessageQueueAccessControlEntry (System.Messaging.Trustee trustee, System.Messaging.MessageQueueAccessRights rights);
    parameters:
    - id: trustee
      type: System.Messaging.Trustee
      description: "A <xref href=&quot;System.Messaging.Trustee&quot;> </xref> 사용자, 그룹, 컴퓨터, 도메인 또는 별칭을 지정 하는 합니다."
    - id: rights
      type: System.Messaging.MessageQueueAccessRights
      description: "비트 조합 된 <xref href=&quot;System.Messaging.MessageQueueAccessRights&quot;> </xref> 트러스티에 권한을 부여할 수 있는 권한의 조합을 정의 하는 값입니다."
  overload: System.Messaging.MessageQueueAccessControlEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueAccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)
  id: '#ctor(System.Messaging.Trustee,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)'
  parent: System.Messaging.MessageQueueAccessControlEntry
  langs:
  - csharp
  name: MessageQueueAccessControlEntry(Trustee,MessageQueueAccessRights,AccessControlEntryType)
  nameWithType: MessageQueueAccessControlEntry.MessageQueueAccessControlEntry(Trustee,MessageQueueAccessRights,AccessControlEntryType)
  fullName: System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessControlEntry(Trustee,MessageQueueAccessRights,AccessControlEntryType)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Messaging.MessageQueueAccessControlEntry&quot;> </xref> 지정된 트러스티 및 메시지 큐 액세스 권한이 있는 클래스입니다. 액세스 유형 (같은 <xref uid=&quot;langword_csharp_Allow&quot; name=&quot;Allow&quot; href=&quot;&quot;> </xref> 또는 <xref uid=&quot;langword_csharp_Deny&quot; name=&quot;Deny&quot; href=&quot;&quot;> </xref>)에 전달 하면 항목 유형에 의해 정의 됩니다."
  remarks: "이 생성자의 오버이 로드를 사용 하 여 지정된 트러스티에 대 한 권한을 부여 하거나 거부 합니다. 지정 하는 권한은 `rights` 매개 변수는 멤버의 비트 조합은 <xref:System.Messaging.MessageQueueAccessRights>메시지를 받는 큐를 삭제 하 고 큐 속성을 설정 권한을 포함 하는 비트 플래그.</xref:System.Messaging.MessageQueueAccessRights> 생성자는이 인스턴스를 설정 하려면에 전달 된 권한을 사용 하 여 <xref:System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessRights%2A>속성.</xref:System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessRights%2A>       권한 부여 나 거부 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Messaging.AccessControlEntryType>항목.</xref:System.Messaging.AccessControlEntryType> 두 멤버 `Allow` 및 `Deny`, 기존 및 상반 있을 수 있습니다 큐의 임의 액세스 제어 목록 (DACL)에 권한이 표시 순서 오른쪽은 부여 여부가 결정 되므로 액세스 권한. 다른 두 멤버 `Set` 및 `Revoke`, 기존의 권한을 덮어씁니다. 해당 동작은 응용 프로그램에 해당 하는 멤버를 사용 합니다.       이 인스턴스에 전달 <xref:System.Messaging.MessageQueueAccessControlEntry>의 오버 로드에 직접는 <xref:System.Messaging.MessageQueue.SetPermissions%2A>권한을 부여 하거나이 트러스티에만 권한을 거부 하거나이 인스턴스를 추가 하는 메서드는 <xref:System.Messaging.AccessControlList>호출 하기 전에 <xref:System.Messaging.MessageQueue.SetPermissions%2A>하거나 한 번에 여러 트러스티에 대 한 권한을 거부할 수 있습니다.</xref:System.Messaging.MessageQueue.SetPermissions%2A> </xref:System.Messaging.AccessControlList> </xref:System.Messaging.MessageQueue.SetPermissions%2A> </xref:System.Messaging.MessageQueueAccessControlEntry>"
  syntax:
    content: public MessageQueueAccessControlEntry (System.Messaging.Trustee trustee, System.Messaging.MessageQueueAccessRights rights, System.Messaging.AccessControlEntryType entryType);
    parameters:
    - id: trustee
      type: System.Messaging.Trustee
      description: "A <xref href=&quot;System.Messaging.Trustee&quot;> </xref> 사용자, 그룹, 컴퓨터, 도메인 또는 별칭을 지정 하는 합니다."
    - id: rights
      type: System.Messaging.MessageQueueAccessRights
      description: "비트 조합 된 <xref href=&quot;System.Messaging.MessageQueueAccessRights&quot;> </xref> 트러스티에 권한을 부여할 수 있는 권한의 조합을 정의 하는 값입니다."
    - id: entryType
      type: System.Messaging.AccessControlEntryType
      description: "중 하나는 <xref href=&quot;System.Messaging.AccessControlEntryType&quot;> </xref> 허용할 것인지를 지정 하는 값을 거부, 설정 또는 지정된 된 권한을 취소 합니다."
  overload: System.Messaging.MessageQueueAccessControlEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessRights
  id: MessageQueueAccessRights
  parent: System.Messaging.MessageQueueAccessControlEntry
  langs:
  - csharp
  name: MessageQueueAccessRights
  nameWithType: MessageQueueAccessControlEntry.MessageQueueAccessRights
  fullName: System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessRights
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "트러스티에 적용 하려면 메시지 큐 관련 권한 집합을 가져오거나 설정 합니다."
  remarks: "MessageQueueAccessRights 속성을 사용 하면 받기, 피킹하 또는 메시지를 작성 또는 큐 속성을 설정 같은 메시지 큐 개체 전용 권한을 지정할 수 있습니다. 이 속성의 값을 <xref:System.Messaging.MessageQueueAccessControlEntry.%23ctor%2A>생성자에 있지만 변경할 수 전에 <xref:System.Messaging.MessageQueueAccessControlEntry> <xref:System.Messaging.MessageQueue.SetPermissions%2A?displayProperty=fullName>.</xref:System.Messaging.MessageQueue.SetPermissions%2A?displayProperty=fullName> 호출에서</xref:System.Messaging.MessageQueueAccessControlEntry> 의이 인스턴스를 사용 하 여 언제 든 지</xref:System.Messaging.MessageQueueAccessControlEntry.%23ctor%2A> 설정한"
  syntax:
    content: public System.Messaging.MessageQueueAccessRights MessageQueueAccessRights { get; set; }
    return:
      type: System.Messaging.MessageQueueAccessRights
      description: "비트 조합 된 <xref href=&quot;System.Messaging.MessageQueueAccessRights&quot;> </xref> 멤버입니다. 기본값을 정의 하 여는 <code> rights </code> 매개 변수를 생성자에 전달 합니다."
  overload: System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Messaging.AccessControlEntry
  isExternal: false
  name: System.Messaging.AccessControlEntry
- uid: System.Messaging.MessageQueueAccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.MessageQueueAccessRights)
  parent: System.Messaging.MessageQueueAccessControlEntry
  isExternal: false
  name: MessageQueueAccessControlEntry(Trustee,MessageQueueAccessRights)
  nameWithType: MessageQueueAccessControlEntry.MessageQueueAccessControlEntry(Trustee,MessageQueueAccessRights)
  fullName: System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessControlEntry(Trustee,MessageQueueAccessRights)
- uid: System.Messaging.Trustee
  parent: System.Messaging
  isExternal: false
  name: Trustee
  nameWithType: Trustee
  fullName: System.Messaging.Trustee
- uid: System.Messaging.MessageQueueAccessRights
  parent: System.Messaging
  isExternal: false
  name: MessageQueueAccessRights
  nameWithType: MessageQueueAccessRights
  fullName: System.Messaging.MessageQueueAccessRights
- uid: System.Messaging.MessageQueueAccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)
  parent: System.Messaging.MessageQueueAccessControlEntry
  isExternal: false
  name: MessageQueueAccessControlEntry(Trustee,MessageQueueAccessRights,AccessControlEntryType)
  nameWithType: MessageQueueAccessControlEntry.MessageQueueAccessControlEntry(Trustee,MessageQueueAccessRights,AccessControlEntryType)
  fullName: System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessControlEntry(Trustee,MessageQueueAccessRights,AccessControlEntryType)
- uid: System.Messaging.AccessControlEntryType
  parent: System.Messaging
  isExternal: false
  name: AccessControlEntryType
  nameWithType: AccessControlEntryType
  fullName: System.Messaging.AccessControlEntryType
- uid: System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessRights
  parent: System.Messaging.MessageQueueAccessControlEntry
  isExternal: false
  name: MessageQueueAccessRights
  nameWithType: MessageQueueAccessControlEntry.MessageQueueAccessRights
  fullName: System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessRights
- uid: System.Messaging.MessageQueueAccessControlEntry.#ctor*
  parent: System.Messaging.MessageQueueAccessControlEntry
  isExternal: false
  name: MessageQueueAccessControlEntry
  nameWithType: MessageQueueAccessControlEntry.MessageQueueAccessControlEntry
- uid: System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessRights*
  parent: System.Messaging.MessageQueueAccessControlEntry
  isExternal: false
  name: MessageQueueAccessRights
  nameWithType: MessageQueueAccessControlEntry.MessageQueueAccessRights
