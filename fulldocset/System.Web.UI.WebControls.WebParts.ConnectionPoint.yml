### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  id: ConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  langs:
  - csharp
  name: ConnectionPoint
  nameWithType: ConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint
  type: Class
  summary: "연결을 정의 하는 것에 대 한 기본 클래스로 사용 되며 소수점 소비자 제어 및 데이터를 공유 하는 웹 파트 연결에서 공급자 컨트롤을 사용할 수 있는 개체입니다."
  remarks: "데이터를 공유 하는 두 개의 서버 컨트롤의 모든 웹 파트 연결으로 구성 됩니다: 한 컨트롤은 소비자, 다른 하나는 공급자입니다. 필수 구성 요소는 웹 파트 연결 및 연결 개체 자체의 논의 알려면는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>클래스 개요.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 모든 웹 파트 연결에는 연결 지점이 필요 합니다. 공급자 및 소비자 제어 각 하나 이상 정의 된 ConnectionPoint 개체 (각각의 필요에 따라 포함 연결 지점이 여러 개) 공유할 수 있는 데이터의 형식과 다른 컨트롤에 컨트롤 연결 방법에 대 한 세부 정보가 포함 된 있어야 합니다. 실제 연결의 경우에 공급자에 고유한 유형의 연결 지점 개체 (기본 ConnectionPoint 클래스에서 파생)는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>인스턴스와 소비자는 자체 개체가 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>인스턴스.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       공급자 연결 지점을 만들려면 개발자가 구현 된 인터페이스 인스턴스는 소비자에 게 반환 하는 공급자를 콜백 메서드를 추가 해야 합니다. 사용 하 여 소스 코드에서 콜백 메서드를 표시 해야 합니다는 `ConnectionProvider` 코드 특성 (참조는 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>클래스).</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 마찬가지로, 소비자 연결 지점을 만들려는 개발자 및 추가 해야 메서드는 인터페이스 인스턴스를 수신 하는 고객에 게 메서드 앞에 표시 해야 합니다는 `ConnectionConsumer` 특성 (참조는 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>클래스).</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>       개발자가 웹 페이지에서 연결을 만들 때 정적 또는 동적 연결으로 만들 수 있습니다. 정적 연결 웹 페이지의 태그에 선언 됩니다. 정적 연결을 선언한 경우 개발자는 연결 지점을 값을 할당 하 여 공급자와 소비자 모두에 사용 되 지정할 수 있습니다는 `ProviderConnectionPointID` 및 `ConsumerConnectionPointID` 내 특성의 `<asp:webpartconnection>` 요소 태그입니다. 이 방법은 연결에 사용할 연결 지점을 식별 하는 정적 연결을 사용 하도록 설정 하기 때문에 소비자 및 공급자 컨트롤 내에 정의 된 연결 지점이 여러 개 있는 경우에 특히 유용 합니다.       개발자의 코드 또는 사용자 인터페이스 (UI)를 통해 사용자가 제공한 동적 연결을 프로그래밍 방식으로 만드는 고 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>컨트롤.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 코드에서 연결을 만들려는 개발자의 인스턴스를 가져올 해야 합니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>호출 하 여 개체는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>에서 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 이 메서드를 호출 하려면 먼저 개발자가 소비자 및 공급자 서버 컨트롤 및 해당 해당 연결 지점 개체에 대 한 참조가 있어야 합니다. 공급자 및 소비자 컨트롤에 대 한 연결 지점에 대 한 참조를 가져오려는 개발자가 먼저 호출 하는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>및 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>에 대 한 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> 이러한 메서드는 적절 한 연결 차례로 연결을 만들기 위한 메서드에 전달 될 수 있는 지점 개체를 반환 합니다.       공급자 및 소비자 연결 지점 개체 인터페이스의 같은 형식을 둘 다 사용할 못하는 호환 및 때 데이터를 공유 직접 연결을 설정할 수 있습니다. 인터페이스 형식이 같은 작동 하지 않는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>인터페이스 인스턴스 공급자에서 소비자가 사용할 수 있는 형식으로 변환할 개체를 사용 해야 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       추상 ConnectionPoint 클래스의 소비자 및 공급자를 모두 컨트롤에 의해 공유 되는 연결 지점 기본 세부 정보를 제공 합니다. 이러한 세부 정보를 포함 하는 여러 속성이 있습니다. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>속성 연결 지점이 한 번에 둘 이상의 연결에 참여할 수 있는지 여부를 나타냅니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 기본적으로 공급자 연결 지점의 여러 연결에 참여할 수 있습니다 및 소비자 연결 지점 수 없습니다. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>속성은 연결 포인트와 연결 된 서버 컨트롤의 형식을 나타냅니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> 것은 아닙니다 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 연결을 설정할 수 있습니다; 서버 컨트롤, ASP.NET 컨트롤, 사용자 지정 컨트롤 또는 사용자 정의 컨트롤을 사용할 수에 배치 하는 경우 연결에 참여 하도록는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>영역.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>속성은 연결을 만드는 사용자를 위해 UI에 표시 될 수 있는 연결점에 대 한 이름을 제공 합니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>속성 자체는 연결 지점 개체에 대 한 문자열 식별자로 사용 합니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>속성은 어떤 유형의 인터페이스 인스턴스 연결 지점에 대 한 이해를 나타냅니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 지정된 된 연결점을 제공 하거나 해당 인터페이스의 인스턴스를 소비 여부 따라 사용자가 인지는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>또는 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>개체입니다.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       ConnectionPoint 클래스에 한 메서드가 있습니다. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>메서드 연결 지점이 현재 연결에 참여할 수 있는지 여부를 나타내는 부울 값을 반환 합니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>       ConnectionPoint 클래스에 공용 필드가 하나 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 이 필드는 연결의 기본 연결 지점을 식별 하는 데 사용 되는 값을 포함 합니다.      > [!NOTE] > 연결 지점 메서드 하나의 필수 매개 변수를 지정 하기 위한 특성 `displayName`ID를 지정 하지 않고 기본 연결 지점 특성을 만들 수 있으므로 이러한 경우에는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>필드에 사용할 기준 값을 제공 합니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example demonstrates the creation of a Web Parts connection that includes the required ConnectionPoint objects. Because the ConnectionPoint class is an abstract base class, instances of its child classes--<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>--are the actual objects used to form a connection.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. You can also create the connection programmatically; the code for doing that is contained in the `Button1_Click` method. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the ConnectionPoint objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. Click the **Disconnect** button to terminate the existing connection. Use the **Display Mode** control to return the page to browse mode. Next, click the **Dynamic Connection** button to create a connection programmatically. Click the **Connection Point Details** button again, to indicate details about the two connection point objects."
  syntax:
    content: public abstract class ConnectionPoint
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  id: AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "연결 지점 여러 개의 동시 연결을 지원 하는지 여부를 나타내는 값을 가져옵니다."
  remarks: "<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>개체는 해당 AllowsMultipleConnections 속성 값을로 설정한 `true` (여는 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>클래스) 기본적으로 설정 하는 웹 파트 컨트롤을 통해 여러 소비자에 대 한 폼 연결 공급자 연결 지점 수,.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute></xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       반면, <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>사용할 개체의 해당 AllowsMultipleConnections 속성 값으로 설정 `false` (여는 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>클래스) 기본적으로 설정 하는 웹 파트 컨트롤 소비자 연결을 허용 하기 때문에 한 번에 하나의 공급자에 연결 하는 작업을 가리킵니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       서로 다른 값을 할당 하 여 여러 연결과 관련 된 기본 동작을 변경할 수는 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>속성 (공급자) 또는 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>속성 (소비자)에서 두 <xref:System.Attribute>연결 특성에 사용 되는 클래스입니다.</xref:System.Attribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> 동시에 여러 공급자에 연결할 수 있는 소비자 연결 지점이 사용 하도록 설정 하면 모든 결과 동기화 문제 코드 처리 해야 합니다."
  example:
  - "The following code example demonstrates the use of the AllowsMultipleConnections property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the AllowsMultipleConnections property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1358_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1358_1.aspx)]"
  syntax:
    content: public bool AllowsMultipleConnections { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>연결 지점에 여러 연결; 지 원하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  id: ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "가져옵니다는 <xref:System.Type>연결점에 연결 된 서버 컨트롤의.</xref:System.Type>"
  remarks: "ControlType 속성의 값은 대체로 <xref:System.Web.UI.WebControls.WebParts.WebPart>유형.</xref:System.Web.UI.WebControls.WebParts.WebPart> 그러나 제대로 사용 하도록 설정 하며에 포함 하는 경우 모든 종류의 사용자 정의 컨트롤 또는 컨트롤 서버 연결에 참여할 수 있으므로 한 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>영역 ControlType 속성 반환할 수 있습니다 이러한 다른 서버 컨트롤 형식 중 하나입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       서버 컨트롤을 때 없는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤에 배치 됩니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>와 래핑되고 영역은 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>역할을 할 수 있도록 런타임에 <xref:System.Web.UI.WebControls.WebParts.WebPart>제어 하 고 연결에 참여할.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> 하지만 이러한 컨트롤은 연결에 관련 된, t y p e 속성 값 반환 하지 않습니다는 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>입력;의 형식이 반환는 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>서버 또는 사용자 정의 컨트롤의 형식인 개체의 자식 컨트롤을.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart>"
  example:
  - "The following code example demonstrates the use of the ControlType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ControlType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_622_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_622_1.aspx)]"
  syntax:
    content: public Type ControlType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type>컨트롤 형식을 나타내는.</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  id: DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "서버 컨트롤에 연결 된 연결 지점의 컬렉션 내에서 기본 연결 지점을 식별 하는 데 사용 하는 문자열을 나타냅니다."
  remarks: "소비자 또는 공급자의 소스 코드에서 연결 지점에 대 한 ID를 지정할 수는 연결점 만들어지면 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤을 사용 하는 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>또는 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>특성.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.WebPart> 그러나 특성이 소스 코드에서 연결 지점에 추가 된 경우에는 `ID` 매개 변수는 선택 사항입니다. ID 특성에 지정 하지 않으면, DefaultID 필드는 기본 연결 지점을 식별 하는 데 사용 되는 문자열을 제공 합니다.       소비자 또는 공급자 컨트롤에 연결 지점이 여러 개 정의 된 경우 각 연결 지점에 대 한 ID를 지정 하는 데 필요한 연결을 만들 때 연결 지점을 구별할 수 있도록 합니다."
  syntax:
    content: public static readonly string DefaultID;
    return:
      type: System.String
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  id: DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "사용자 인터페이스 (UI)에 연결 지점을 나타내는 게 친숙 한 표시 이름으로 사용 되는 문자열을 가져옵니다."
  remarks: "웹 파트 연결을 만들려면 연결에 대 한 공급자 및 소비자 제어 각각 지정 해야 하나 이상 연결 지점에 데이터를 공유 하 고 통신할 수 있도록 하는 메서드. 이러한 연결 지점 메서드를 식별 하려면 개발자는 선택한 방법에는 특성을 지정 합니다. 공급자에는 `ConnectionProvider` 소비자의 경우에 선택 된 콜백 메서드 특성을 설정는 `ConnectionConsumer` 공급자에서 데이터를 포함 하는 인터페이스의 인스턴스를 수신 하는 메서드에 특성이 설정 되어 있습니다. 두이 특성 모두에 대 한 필수 특성을 만들지 선언 하는 오버 로드에 관계 없이 항상 않은 매개 변수가 하나이 고 `displayName` 매개 변수입니다. 개발자는 연결 지점에 대 한 표시 이름으로 사용할 문자열을 할당 해야 하 고 해당 문자열이 DisplayName 속성의 값이 됩니다.       DisplayName 속성 값은 사용자가 연결을 만들 때 웹 페이지의 UI에 표시 됩니다. 예를 들어는 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>컨트롤이 컨트롤 간의 연결을 만드는 사용자에 대 한 UI 생성 페이지에 추가 됩니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 사용자 페이지 연결 디스플레이 모드를 전환 하 고에 연결 동사를 클릭 한 후 한 <xref:System.Web.UI.WebControls.WebParts.WebPart>제어 연결 UI가 나타납니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 연결에 참여할 수 있는 각 컨트롤 UI에 나열 되 고 각 컨트롤 옆에 있는 사용 가능한 연결 지점의 이름을 표시 하는 드롭다운 목록 컨트롤입니다. 사용자가 연결할 하나 이상의 연결점을 선택 해야 합니다. 연결 지점 목록에 표시 되는 값은 DisplayName 속성에서 가져옵니다. 연결을 만들기 위한 사용자 지정 UI를 작성 하는 개발자, 연결점을 나타내는 친숙 한 이름을 제공 하기 위해 유사한 방식에서 DisplayName 속성을 사용할 수 있습니다."
  syntax:
    content: public string DisplayName { get; }
    return:
      type: System.String
      description: "에 대 한 표시 이름을 포함 하는 문자열을 <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> 개체입니다."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  id: GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "연결 지점 연결에 참여할 수 있는지 여부를 나타내는 값을 반환 합니다."
  remarks: "자료의 GetEnabled 메서드 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>클래스는 항상 반환 `true`, 파생된 클래스에서 반환 하는 메서드를 재정의할 수 있지만 `true` 또는 `false` 의 상태에 따라 서로 다른 시간에 `control`.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>"
  example:
  - "The following code example demonstrates the use of the GetEnabled method on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the GetEnabled method on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/a42b3e8f-70fc-455c-a13a-_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/a42b3e8f-70fc-455c-a13a-_1.aspx)]"
  syntax:
    content: public virtual bool GetEnabled (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 연결 지점과 연결 된 다른 서버 컨트롤입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>컨트롤; 대 한 연결에 참여 하도록 연결점을 만들 수 있으면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "연결 지점에 대 한 식별자를 포함 하는 문자열을 가져옵니다."
  remarks: "개발자는 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>또는 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>특성 컨트롤의 소스 코드의 메서드에 메서드는 연결 지점으로 사용할 수 있도록 필요는 없습니다 선언 하는 `ID` 연결 지점 특성에 대 한 매개 변수.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> 필수 속성은는 `displayName` 매개 변수입니다. 연결 지점에 값을 사용 하는 기본 ID가 할당 된 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>필드.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       연결 지점으로 사용 되는 컨트롤에 메서드가 하나만 있으면 연결점에 대 한 ID를 지정할 필요는 없습니다. 연결 지점으로 지정 하는 여러 메서드가 있는 경우 각각에 대 한; ID를 지정 해야 합니다. 그렇지 않으면 예외가 throw 됩니다. 각 연결 지점에 ID를 할당 하 여 해도 웹 페이지에서 연결을 선언 하거나 코드에서 만들 때 사용할 연결 지점을 지정할 수 있습니다."
  example:
  - "The following code example demonstrates the use of the ID property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ID property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1125_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1125_1.aspx)]"
  syntax:
    content: public string ID { get; }
    return:
      type: System.String
      description: "연결 지점에 대 한 식별자를 포함 하는 문자열입니다."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  id: InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "연결 지점에서 사용 되는 인터페이스의 형식을 가져옵니다."
  remarks: "InterfaceType 속성 연결 지점에서 인터페이스의 유형을 나타냅니다. 이 두 개의 호환 되 고 연결을 설정할 수 있는지 확인할 수 수 있습니다. 공급자 연결 지점 InterfaceType 소비자 연결 지점 InterfaceType와에서 다른 경우 두 컨트롤은 호환 되지 않습니다 (이러한 없습니다 연결할 수 있음을 나타내는 직접 변환기 없이), 및 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>개체 연결을 설정 하는 데 사용 해야 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  example:
  - "The following code example demonstrates the use of the InterfaceType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the InterfaceType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_359_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_359_1.aspx)]"
  syntax:
    content: public Type InterfaceType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type>제공 하거나 컨트롤에 의해 소비 하는 인터페이스 형식에 해당 하는.</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled
  nameWithType: ConnectionPoint.GetEnabled
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
