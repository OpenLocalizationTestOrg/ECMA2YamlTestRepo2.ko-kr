### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyBinding
  id: KeyBinding
  children:
  - System.Windows.Input.KeyBinding.#ctor
  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  - System.Windows.Input.KeyBinding.CreateInstanceCore
  - System.Windows.Input.KeyBinding.Gesture
  - System.Windows.Input.KeyBinding.Key
  - System.Windows.Input.KeyBinding.KeyProperty
  - System.Windows.Input.KeyBinding.Modifiers
  - System.Windows.Input.KeyBinding.ModifiersProperty
  langs:
  - csharp
  name: KeyBinding
  nameWithType: KeyBinding
  fullName: System.Windows.Input.KeyBinding
  type: Class
  summary: "바인딩하는 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> 에 <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> (또는 다른 <xref:System.Windows.Input.ICommand>구현).</xref:System.Windows.Input.ICommand>"
  remarks: "KeyBinding 연결는 <xref:System.Windows.Input.KeyGesture>와 <xref:System.Windows.Input.ICommand>에 <xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand> 같은</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.KeyGesture> <xref:System.Windows.Input.RoutedCommand>기본 구현에서 <xref:System.Windows.Input.ICommand>에 대 한 인터페이스는 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 명령 시스템.</xref:System.Windows.Input.ICommand></xref:System.Windows.Input.RoutedCommand>  일반적으로 <xref:System.Windows.Input.KeyGesture>실행 되는 명령을 호출 하지만 명령 동작은 영향을 받기 명령 별 요소와 같은 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>값.</xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> </xref:System.Windows.Input.KeyGesture>  명령에 대 한 자세한 내용은 참조는 [명령 실행 개요](~/add/includes/ajax-current-ext-md.md)합니다.       기능 키와 올바른 숫자 키패드의 키를 제외한 <xref:System.Windows.Input.KeyGesture>하나만 있어야 <xref:System.Windows.Input.Key>하나의 나 더 많은 <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>  기능 키 및 숫자 키패드 키가 필요 없습니다 보조키에 유효한 <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> 되려면 잘못 된 지정할 수는 <xref:System.Windows.Input.KeyGesture>및 통해는 잘못 된 관련된 제스처와 KeyBinding [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 또는 코드.</xref:System.Windows.Input.KeyGesture> 예를 들어,는 만들고 바인딩할 수 없는 없는 유효성 검사는 <xref:System.Windows.Input.KeyGesture>비 키만 또는 한정자 하지만 키를 포함 하.</xref:System.Windows.Input.KeyGesture> 이러한 KeyBinding 연결 된 명령이 호출 하려고 시도 하지 않습니다.       KeyBinding을 정의할 때 [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> 를 지정 하는 방법은 두 가지가 KeyBinding을 설정 하는 첫 번째 방법은 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 정의 하는 것은 <xref:System.Windows.Input.KeyBinding.Gesture%2A>예를 들어 &quot;CTRL + P&quot; 단일 문자열로 키와 한정자를 지정 하는 구문을 사용 하면 키 바인딩 요소의 특성.</xref:System.Windows.Input.KeyBinding.Gesture%2A> 두 번째 방법은 정의 하는 것은 <xref:System.Windows.Input.KeyBinding.Key%2A>특성 및 <xref:System.Windows.Input.KeyBinding.Modifiers%2A>KeyBinding 요소의 특성.</xref:System.Windows.Input.KeyBinding.Modifiers%2A> </xref:System.Windows.Input.KeyBinding.Key%2A> 설정의 두 가지 방법을 모두는 <xref:System.Windows.Input.KeyGesture>동일 하 고 같은 내부 개체를 수정 하지만 할 충돌이 모두 사용 됩니다.</xref:System.Windows.Input.KeyGesture>  경우에는 경우는 <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>의 <xref:System.Windows.Input.KeyBinding.Gesture%2A>특성이 설정 되어 모든, 정의 된 특성 마지막에 사용할 <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding.Gesture%2A> 및</xref:System.Windows.Input.KeyBinding.Modifiers%2A> </xref:System.Windows.Input.KeyBinding.Key%2A> 예를 들어 상황을 잠재적으로 점이 <xref:System.Windows.Input.KeyBinding.Key%2A>집합 마지막 됩니다 이전 제스처의 키 구성 요소는 방금 덮어쓰되 제스처의 한정자를 그대로 둡니다.</xref:System.Windows.Input.KeyBinding.Key%2A> 일반적으로 것이 좋습니다만 사용 하 여 <xref:System.Windows.Input.KeyBinding.Gesture%2A>에서 특성 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)];이 모호성을 방지 하는 가장 효율적인된 구문을 제공 되 고, 제공 serialization에 대 한 가장 간단한 표현입니다.</xref:System.Windows.Input.KeyBinding.Gesture%2A>       KeyBinding 정의할 수 있습니다 또는 클래스 수준에서 특정 개체에 대 한 <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> <xref:System.Windows.Input.CommandManager>클래스</xref:System.Windows.Input.CommandManager> 에</xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> 등록 하 여 KeyBinding을 정의 하는 가장 일반적인 방법은 설정 하는 컨트롤 템플릿을 내인지는 <xref:System.Windows.UIElement.InputBindings%2A>속성 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 하나 이상의 선언 하 여 <xref:System.Windows.Input.MouseBinding>또는 키 바인딩 요소.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.UIElement.InputBindings%2A>"
  example:
  - "The following example creates a KeyBinding and adds it to the <xref:System.Windows.Input.InputBindingCollection> of the root window.  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerkeybindingcodebehind)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerkeybindingcodebehind)]"
  syntax:
    content: 'public class KeyBinding : System.Windows.Input.InputBinding'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  - System.Windows.Input.InputBinding
  implements: []
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.Clone
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.FreezeCore(System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.Command
  - System.Windows.Input.InputBinding.CommandParameter
  - System.Windows.Input.InputBinding.CommandParameterProperty
  - System.Windows.Input.InputBinding.CommandProperty
  - System.Windows.Input.InputBinding.CommandTarget
  - System.Windows.Input.InputBinding.CommandTargetProperty
  - System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding()
  nameWithType: KeyBinding.KeyBinding()
  fullName: System.Windows.Input.KeyBinding.KeyBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref> 클래스입니다."
  syntax:
    content: public KeyBinding ();
    parameters: []
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding(ICommand,KeyGesture)
  nameWithType: KeyBinding.KeyBinding(ICommand,KeyGesture)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,KeyGesture)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref> 사용 하 여 지정 된 클래스 <xref:System.Windows.Input.ICommand>및 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "와 연결할 명령을 `gesture`합니다."
    - id: gesture
      type: System.Windows.Input.KeyGesture
      description: "와 연결할 키 조합을 `command`합니다."
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>command</code>or <code>gesture</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding(ICommand,Key,ModifierKeys)
  nameWithType: KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref> 사용 하 여 지정 된 클래스 <xref:System.Windows.Input.ICommand>와 지정 된 <xref href=&quot;System.Windows.Input.Key&quot;> </xref> 및 <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref> 으로 변환 됩니다는 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "호출 하는 명령입니다."
    - id: key
      type: System.Windows.Input.Key
      description: "와 연결할 키 `command`합니다."
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "와 연결할 한정자 `command`합니다."
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: CreateInstanceCore()
  nameWithType: KeyBinding.CreateInstanceCore()
  fullName: System.Windows.Input.KeyBinding.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "인스턴스를 만듭니다는 <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>합니다."
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: "새 개체입니다."
  overload: System.Windows.Input.KeyBinding.CreateInstanceCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Gesture
  id: Gesture
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Gesture
  nameWithType: KeyBinding.Gesture
  fullName: System.Windows.Input.KeyBinding.Gesture
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "연결 된이 제스처를 가져오거나 설정 합니다. <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>합니다."
  remarks: "기능 키와 숫자 키패드의 키를 제외한는 <xref:System.Windows.Input.KeyGesture>포함 해야 합니다는 <xref:System.Windows.Input.Key>하나의 나 더 많은 <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand> using a <xref:System.Windows.Input.KeyBinding> (the markup and code examples specify different keys but are otherwise equivalent).  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public override System.Windows.Input.InputGesture Gesture { get; set; }
    return:
      type: System.Windows.Input.InputGesture
      description: "키 시퀀스입니다. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Input.KeyBinding.Gesture*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "값 <code> gesture </code> 은지 않습니다으로 설정 하는 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Key
  id: Key
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Key
  nameWithType: KeyBinding.Key
  fullName: System.Windows.Input.KeyBinding.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "가져오거나는 <xref href=&quot;System.Windows.Input.Key&quot;> </xref> 의 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> 이 연관 <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>합니다."
  remarks: "기능 키와 숫자 키패드의 키를 제외한는 <xref:System.Windows.Input.KeyGesture>포함 해야 합니다는 <xref:System.Windows.Input.Key>하나의 나 더 많은 <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>       정의 하는 경우는 <xref:System.Windows.Input.KeyBinding>에 [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> 를 지정 하는 방법은 두 가지가</xref:System.Windows.Input.KeyBinding> 설정 하는 첫 번째 방법은 <xref:System.Windows.Input.KeyBinding>에 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 정의 하는 것은 <xref:System.Windows.Input.KeyBinding.Gesture%2A>특성은 <xref:System.Windows.Input.KeyBinding>예를 들어 &quot;CTRL + P&quot; 단일 문자열로 키 한정자를 지정 하는 구문을 사용 하는 요소를.</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding> 두 번째 방법은 키 특성을 정의 하 고 <xref:System.Windows.Input.KeyBinding.Modifiers%2A>의 특성은 <xref:System.Windows.Input.KeyBinding>요소.</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Modifiers%2A> 설정의 두 가지 방법을 모두는 <xref:System.Windows.Input.KeyGesture>동일 하 고 같은 내부 개체를 수정 하지만 할 충돌이 모두 사용 됩니다.</xref:System.Windows.Input.KeyGesture>  경우에는 경우 키를 <xref:System.Windows.Input.KeyBinding.Modifiers%2A>의 <xref:System.Windows.Input.KeyBinding.Gesture%2A>특성이 설정 되어 모든, 정의 된 특성 마지막에 사용할 <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding.Gesture%2A> 및</xref:System.Windows.Input.KeyBinding.Modifiers%2A> 잠재적으로 있고 있는 경우 예를 들어 키 집합 마지막 됩니다 이전 제스처의 키 구성 요소 바로 덮어쓰게 제스처의 한정자를 그대로 둡니다 있을 수 있습니다. 일반적으로 것이 좋습니다만 사용 하 여 <xref:System.Windows.Input.KeyBinding.Gesture%2A>에서 특성 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)];이 모호성을 방지 하는 가장 효율적인된 구문을 제공 되 고, 제공 serialization에 대 한 가장 간단한 표현입니다.</xref:System.Windows.Input.KeyBinding.Gesture%2A>"
  syntax:
    content: public System.Windows.Input.Key Key { get; set; }
    return:
      type: System.Windows.Input.Key
      description: "핵심 부분은 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>합니다. 기본값은 <xref href=&quot;System.Windows.Input.Key&quot;> </xref>합니다."
  overload: System.Windows.Input.KeyBinding.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.KeyProperty
  id: KeyProperty
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyProperty
  nameWithType: KeyBinding.KeyProperty
  fullName: System.Windows.Input.KeyBinding.KeyProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "식별 된 <xref:System.Windows.Input.KeyBinding.Key*>종속성 속성입니다.</xref:System.Windows.Input.KeyBinding.Key*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty KeyProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Modifiers
  id: Modifiers
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
  fullName: System.Windows.Input.KeyBinding.Modifiers
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "가져오거나는 <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref> 의 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> 이 연관 <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>합니다."
  remarks: "기능 키와 숫자 키패드의 키를 제외한는 <xref:System.Windows.Input.KeyGesture>포함 해야 합니다는 <xref:System.Windows.Input.Key>하나의 나 더 많은 <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>       정의 하는 경우는 <xref:System.Windows.Input.KeyBinding>에 [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> 를 지정 하는 방법은 두 가지가</xref:System.Windows.Input.KeyBinding> 설정 하는 첫 번째 방법은 <xref:System.Windows.Input.KeyBinding>에 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 정의 하는 것은 <xref:System.Windows.Input.KeyBinding.Gesture%2A>특성은 <xref:System.Windows.Input.KeyBinding>예를 들어 &quot;CTRL + P&quot; 단일 문자열로 키 한정자를 지정 하는 구문을 사용 하는 요소를.</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding> 두 번째 방법은 정의 하는 것은 <xref:System.Windows.Input.KeyBinding.Key%2A>특성 및 특성 한정자는 <xref:System.Windows.Input.KeyBinding>요소.</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Key%2A> 설정의 두 가지 방법을 모두는 <xref:System.Windows.Input.KeyGesture>동일 하 고 같은 내부 개체를 수정 하지만 할 충돌이 모두 사용 됩니다.</xref:System.Windows.Input.KeyGesture>  경우에는 경우는 <xref:System.Windows.Input.KeyBinding.Key%2A>, 한정자 및의 <xref:System.Windows.Input.KeyBinding.Gesture%2A>특성이 모두 설정 되어, <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> 에 사용할 마지막 정의 된 특성</xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding.Key%2A> 예를 들어 상황을 잠재적으로 점이 <xref:System.Windows.Input.KeyBinding.Key%2A>집합 마지막 됩니다 이전 제스처의 키 구성 요소는 방금 덮어쓰되 제스처의 한정자를 그대로 둡니다.</xref:System.Windows.Input.KeyBinding.Key%2A> 일반적으로 것이 좋습니다만 사용 하 여 <xref:System.Windows.Input.KeyBinding.Gesture%2A>에서 특성 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)];이 모호성을 방지 하는 가장 효율적인된 구문을 제공 되 고, 제공 serialization에 대 한 가장 간단한 표현입니다.</xref:System.Windows.Input.KeyBinding.Gesture%2A>      <a name=&quot;xamlAttributeUsage_Modifiers&quot;></a># # XAML 특성 사용 ```   <object Modifiers=&quot;oneOrMoreModifierKeys&quot;/>      ``` <a name=&quot;xamlValues_Modifiers&quot;> </a> # # XAML 값 *oneOrMoreModifierKeys* 에 정의 된 하나 이상의 보조 키의 <xref:System.Windows.Input.ModifierKeys>&quot;+&quot; 문자로 구분 열거형.</xref:System.Windows.Input.ModifierKeys>      "
  syntax:
    content: public System.Windows.Input.ModifierKeys Modifiers { get; set; }
    return:
      type: System.Windows.Input.ModifierKeys
      description: "보조 키의 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>합니다.  기본값은 <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>합니다."
  overload: System.Windows.Input.KeyBinding.Modifiers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.ModifiersProperty
  id: ModifiersProperty
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: ModifiersProperty
  nameWithType: KeyBinding.ModifiersProperty
  fullName: System.Windows.Input.KeyBinding.ModifiersProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "식별 된 <xref:System.Windows.Input.KeyBinding.Modifiers*>종속성 속성입니다.</xref:System.Windows.Input.KeyBinding.Modifiers*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ModifiersProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputBinding
  isExternal: false
  name: System.Windows.Input.InputBinding
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Input.KeyBinding.#ctor
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding()
  nameWithType: KeyBinding.KeyBinding()
  fullName: System.Windows.Input.KeyBinding.KeyBinding()
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding(ICommand,KeyGesture)
  nameWithType: KeyBinding.KeyBinding(ICommand,KeyGesture)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,KeyGesture)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.KeyGesture
  parent: System.Windows.Input
  isExternal: false
  name: KeyGesture
  nameWithType: KeyGesture
  fullName: System.Windows.Input.KeyGesture
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding(ICommand,Key,ModifierKeys)
  nameWithType: KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.ModifierKeys
  parent: System.Windows.Input
  isExternal: false
  name: ModifierKeys
  nameWithType: ModifierKeys
  fullName: System.Windows.Input.ModifierKeys
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: CreateInstanceCore()
  nameWithType: KeyBinding.CreateInstanceCore()
  fullName: System.Windows.Input.KeyBinding.CreateInstanceCore()
- uid: System.Windows.Freezable
  parent: System.Windows
  isExternal: false
  name: Freezable
  nameWithType: Freezable
  fullName: System.Windows.Freezable
- uid: System.Windows.Input.KeyBinding.Gesture
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Gesture
  nameWithType: KeyBinding.Gesture
  fullName: System.Windows.Input.KeyBinding.Gesture
- uid: System.Windows.Input.InputGesture
  parent: System.Windows.Input
  isExternal: false
  name: InputGesture
  nameWithType: InputGesture
  fullName: System.Windows.Input.InputGesture
- uid: System.Windows.Input.KeyBinding.Key
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Key
  nameWithType: KeyBinding.Key
  fullName: System.Windows.Input.KeyBinding.Key
- uid: System.Windows.Input.KeyBinding.KeyProperty
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyProperty
  nameWithType: KeyBinding.KeyProperty
  fullName: System.Windows.Input.KeyBinding.KeyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.KeyBinding.Modifiers
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
  fullName: System.Windows.Input.KeyBinding.Modifiers
- uid: System.Windows.Input.KeyBinding.ModifiersProperty
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: ModifiersProperty
  nameWithType: KeyBinding.ModifiersProperty
  fullName: System.Windows.Input.KeyBinding.ModifiersProperty
- uid: System.Windows.Input.KeyBinding.#ctor*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding
  nameWithType: KeyBinding.KeyBinding
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: CreateInstanceCore
  nameWithType: KeyBinding.CreateInstanceCore
- uid: System.Windows.Input.KeyBinding.Gesture*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Gesture
  nameWithType: KeyBinding.Gesture
- uid: System.Windows.Input.KeyBinding.Key*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Key
  nameWithType: KeyBinding.Key
- uid: System.Windows.Input.KeyBinding.Modifiers*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
