### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.Timer
  id: Timer
  children:
  - System.Windows.Forms.Timer.#ctor
  - System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)
  - System.Windows.Forms.Timer.Dispose(System.Boolean)
  - System.Windows.Forms.Timer.Enabled
  - System.Windows.Forms.Timer.Interval
  - System.Windows.Forms.Timer.OnTick(System.EventArgs)
  - System.Windows.Forms.Timer.Start
  - System.Windows.Forms.Timer.Stop
  - System.Windows.Forms.Timer.Tag
  - System.Windows.Forms.Timer.Tick
  - System.Windows.Forms.Timer.ToString
  langs:
  - csharp
  name: Timer
  nameWithType: Timer
  fullName: System.Windows.Forms.Timer
  type: Class
  summary: "사용자가 정의한 간격 이벤트를 발생 시키는 타이머를 구현 합니다. 이 타이머는 Windows Forms 응용 프로그램에서 사용 하기 위해 최적화 되 고 창에 사용 해야 합니다."
  remarks: "타이머는 사용자가 정의한 간격 이벤트를 발생 시키는 데 사용 됩니다. 이 Windows 타이머는 처리를 수행 하 여 UI 스레드를 사용 하는 단일 스레드 환경을 위해 설계 되었습니다. 사용자 코드는 UI 메시지 펌프 하 고 항상 동일한 스레드에서 작동 했거나 다른 스레드로 호출을 마샬링하 필요 합니다.       이 타이머를 사용 하 여 사용 된 <xref:System.Windows.Forms.Timer.Tick>폴링 작업을 수행 하거나 지정 된 기간에 대 한 시작 화면을 표시 하려는 이벤트.</xref:System.Windows.Forms.Timer.Tick> 때마다는 <xref:System.Windows.Forms.Timer.Enabled%2A>속성이로 설정 되어 `true` 및 <xref:System.Windows.Forms.Timer.Interval%2A>속성이&0; 보다 크면는 <xref:System.Windows.Forms.Timer.Tick>기반으로 하는 간격 이벤트는 <xref:System.Windows.Forms.Timer.Interval%2A>속성을 설정 합니다.</xref:System.Windows.Forms.Timer.Interval%2A> </xref:System.Windows.Forms.Timer.Tick> </xref:System.Windows.Forms.Timer.Interval%2A> </xref:System.Windows.Forms.Timer.Enabled%2A>       이 클래스는 간격을 설정 하 고 시작 하 고 타이머를 중지 하는 메서드를 제공 합니다.      > [!NOTE] > Windows Forms Timer 구성 요소는 단일 스레드 고 55 밀리초 정확도 개로 제한 됩니다. 더욱 정확해 다중 스레드 타이머를 필요한 경우 사용 된 <xref:System.Timers.Timer>클래스에 <xref:System.Timers>네임 스페이스.</xref:System.Timers> </xref:System.Timers.Timer>"
  example:
  - "The following example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user as to whether the timer should continue to run.  \n  \n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/t-system.windows.forms.t_2_1.cpp)]\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/t-system.windows.forms.t_2_1.vb)]\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/t-system.windows.forms.t_2_1.cs)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Tick")]

      [System.ComponentModel.DefaultProperty("Interval")]

      [System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")]

      public class Timer : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Windows.Forms.Timer.#ctor
  id: '#ctor'
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Timer()
  nameWithType: Timer.Timer()
  fullName: System.Windows.Forms.Timer.Timer()
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Forms.Timer&quot;> </xref> 클래스입니다."
  remarks: "새 타이머를 만들면 비활성화 됩니다. 즉, <xref:System.Windows.Forms.Timer.Enabled%2A>로 설정 된 `false`.</xref:System.Windows.Forms.Timer.Enabled%2A> 타이머를 사용 하도록 설정 하려면 호출는 <xref:System.Windows.Forms.Timer.Start%2A>메서드나 집합 <xref:System.Windows.Forms.Timer.Enabled%2A>를 `true`.</xref:System.Windows.Forms.Timer.Enabled%2A> </xref:System.Windows.Forms.Timer.Start%2A>       타이머를 사용 하지 않도록 설정 하는 경우 사용 되는 타이머의 범위를 벗어납니다 가비지 수집이 발생할 때 사용 되는 타이머 삭제 됩니다. 범위에 속하지 않은 경우에 타이머가 활성화 되는지, 하는 경우 가비지 수집의 대상이 아닙니다."
  syntax:
    content: public Timer ();
    parameters: []
  overload: System.Windows.Forms.Timer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)
  id: '#ctor(System.ComponentModel.IContainer)'
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Timer(IContainer)
  nameWithType: Timer.Timer(IContainer)
  fullName: System.Windows.Forms.Timer.Timer(IContainer)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Forms.Timer&quot;> </xref> 지정된 된 컨테이너와 함께 클래스입니다."
  remarks: "<xref:System.Windows.Forms.Timer>생성자를 사용 하면 연결할 수는 <xref:System.Windows.Forms.Timer>함께 <xref:System.ComponentModel.Container>개체입니다.</xref:System.ComponentModel.Container> </xref:System.Windows.Forms.Timer> </xref:System.Windows.Forms.Timer> <xref:System.Windows.Forms.Timer> <xref:System.Windows.Forms.Timer> <xref:System.ComponentModel.Container>.</xref:System.ComponentModel.Container> </xref:System.Windows.Forms.Timer> 수명 제어 전달이</xref:System.Windows.Forms.Timer> 연결 하 여 응용 프로그램에서 다양 한 구성 요소를 사용 하 고 동시에 모두 삭제 하려고 할 경우에 유용할 수 있습니다. 예를 들어, 연결 하는 경우는 <xref:System.Windows.Forms.ToolTip>, <xref:System.Windows.Forms.ImageList>, 및 <xref:System.Windows.Forms.Timer>와 <xref:System.ComponentModel.Container>호출, <xref:System.ComponentModel.Container.Dispose%2A>에 <xref:System.ComponentModel.Container>이러한 구성 요소를 모두 삭제 새로 고쳐집니다.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Container.Dispose%2A> </xref:System.ComponentModel.Container> </xref:System.Windows.Forms.Timer> </xref:System.Windows.Forms.ImageList> </xref:System.Windows.Forms.ToolTip>       새 타이머를 만들면 비활성화 됩니다. 즉, <xref:System.Windows.Forms.Timer.Enabled%2A>로 설정 된 `false`.</xref:System.Windows.Forms.Timer.Enabled%2A> 타이머를 사용 하도록 설정 하려면 호출는 <xref:System.Windows.Forms.Timer.Start%2A>메서드나 집합 <xref:System.Windows.Forms.Timer.Enabled%2A>를 `true`.</xref:System.Windows.Forms.Timer.Enabled%2A> </xref:System.Windows.Forms.Timer.Start%2A>       이 인스턴스는 해당 컨테이너 가비지 수집을 해제할 때까지 존재 합니다."
  syntax:
    content: public Timer (System.ComponentModel.IContainer container);
    parameters:
    - id: container
      type: System.ComponentModel.IContainer
      description: "<xref href=&quot;System.ComponentModel.IContainer&quot;> </xref> 타이머에 대 한 컨테이너를 나타내는입니다."
  overload: System.Windows.Forms.Timer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Timer.Dispose(Boolean)
  fullName: System.Windows.Forms.Timer.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "타이머에서 사용 되는 메모리 리소스를 삭제 합니다."
  remarks: "타이머를 사용 하 여 작업을 마쳤으면 Dispose를 호출 합니다. Dispose 메서드는 사용할 수 없는 상태로 타이머를 유지합니다. Dispose를 호출한 후에 가비지 수집에 의해 차지 했던 메모리를 회수 될 수 있도록 타이머에 대 한 모든 참조를 해제 해야 합니다.      > [!NOTE] > 항상 타이머에 대 한 마지막 참조를 해제 하기 전에 Dispose 호출 합니다. 그렇지 않은 경우 가비지 수집 타이머 개체의 소멸자를 호출할 때까지 타이머에서 사용 중인 리소스가 해제 되지 않습니다."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 및 관리 되지 않는 리소스를 해제 합니다. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>관리 되지 않는 리소스만 해제 합니다."
  overload: System.Windows.Forms.Timer.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.Enabled
  id: Enabled
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Enabled
  nameWithType: Timer.Enabled
  fullName: System.Windows.Forms.Timer.Enabled
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "타이머가 실행 중인지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "값은 가비지 수집의 대상이 타이머 하지는 `true`합니다.       호출 된 <xref:System.Windows.Forms.Timer.Start%2A>메서드 사용을 설정 하는 것과 같습니다 `true`.</xref:System.Windows.Forms.Timer.Start%2A> 마찬가지로, 호출 된 <xref:System.Windows.Forms.Timer.Stop%2A>메서드 사용을 설정 하는 것과 같습니다 `false`.</xref:System.Windows.Forms.Timer.Stop%2A>"
  example:
  - "The following example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \n  \n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/p-system.windows.forms.t_233_1.cpp)]\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_233_1.vb)]\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/p-system.windows.forms.t_233_1.cs)]"
  syntax:
    content: public virtual bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>타이머 현재 사용 되 면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Forms.Timer.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.Interval
  id: Interval
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Interval
  nameWithType: Timer.Interval
  fullName: System.Windows.Forms.Timer.Interval
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "전에 시간을 밀리초 단위로 설정 하거나 가져옵니다는 <xref href=&quot;System.Windows.Forms.Timer.Tick&quot;> </xref> 이벤트는 마지막으로 나타나는 항목을 기준으로 <xref href=&quot;System.Windows.Forms.Timer.Tick&quot;> </xref> 이벤트입니다."
  remarks: "간격 (초)을 가져오려면이 수를 1000으로 나눕니다."
  example:
  - "The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \n  \n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/p-system.windows.forms.t_13_1.cpp)]\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_13_1.vb)]\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/p-system.windows.forms.t_13_1.cs)]"
  syntax:
    content: public int Interval { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>하기 전의 밀리초 수를 지정 하는 <xref href=&quot;System.Windows.Forms.Timer.Tick&quot;> </xref> 마지막으로 나타나는 항목을 기준으로 이벤트는 발생 된 <xref href=&quot;System.Windows.Forms.Timer.Tick&quot;> </xref> 이벤트.</xref:System.Int32> 값&1; 보다 작을 수 없습니다."
  overload: System.Windows.Forms.Timer.Interval*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.OnTick(System.EventArgs)
  id: OnTick(System.EventArgs)
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: OnTick(EventArgs)
  nameWithType: Timer.OnTick(EventArgs)
  fullName: System.Windows.Forms.Timer.OnTick(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "발생 된 <xref href=&quot;System.Windows.Forms.Timer.Tick&quot;> </xref> 이벤트입니다."
  remarks: "이 메서드는 각 타이머 틱에 대해 호출 됩니다. <xref:System.Windows.Forms.Timer.Tick>.</xref:System.Windows.Forms.Timer.Tick> 를 통해 추가 된 모든 메서드 호출 상속 하는 경우 <xref:System.Windows.Forms.Timer>,이 메서드를 재정의할 수 있습니다.</xref:System.Windows.Forms.Timer>       이벤트를 발생 시키는 대리자를 통해 이벤트 처리기를 호출 합니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: protected virtual void OnTick (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>이벤트 데이터를 포함 하는.</xref:System.EventArgs> 이 값은 항상 <xref:System.EventArgs>.</xref:System.EventArgs>"
  overload: System.Windows.Forms.Timer.OnTick*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.Start
  id: Start
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Start()
  nameWithType: Timer.Start()
  fullName: System.Windows.Forms.Timer.Start()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "타이머를 시작 합니다."
  remarks: "설정 하 여 타이머를 시작할 수도 있습니다는 <xref:System.Windows.Forms.Timer.Enabled%2A>속성을 `true`.</xref:System.Windows.Forms.Timer.Enabled%2A>"
  example:
  - "The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \n  \n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/m-system.windows.forms.t_9_1.cpp)]\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_9_1.vb)]\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/m-system.windows.forms.t_9_1.cs)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Windows.Forms.Timer.Start*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.Stop
  id: Stop
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Stop()
  nameWithType: Timer.Stop()
  fullName: System.Windows.Forms.Timer.Stop()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "타이머를 중지 합니다."
  remarks: "설정 하 여 타이머를 중지할 수도 있습니다는 <xref:System.Windows.Forms.Timer.Enabled%2A>속성을 `false`.</xref:System.Windows.Forms.Timer.Enabled%2A> A <xref:System.Windows.Forms.Timer>개체를 활성화 하 고 동일한 응용 프로그램 세션 내에서 여러 번 사용 하지 않도록 설정 수 있습니다.</xref:System.Windows.Forms.Timer>       호출 <xref:System.Windows.Forms.Timer.Start%2A>비활성화 한 후 한 <xref:System.Windows.Forms.Timer>중지 하면 호출 하 여는 <xref:System.Windows.Forms.Timer>중단된 된 시간을 다시 시작 합니다.</xref:System.Windows.Forms.Timer> </xref:System.Windows.Forms.Timer> </xref:System.Windows.Forms.Timer.Start%2A> 경우에 <xref:System.Windows.Forms.Timer>5000 밀리초 간격에 대 한 설정 호출 하면 중지 약 3000 밀리초에서 호출 <xref:System.Windows.Forms.Timer.Start%2A>하면는 <xref:System.Windows.Forms.Timer>5000 밀리초 발생 하기 전에 대기 하는 <xref:System.Windows.Forms.Timer.Tick>이벤트.</xref:System.Windows.Forms.Timer.Tick> </xref:System.Windows.Forms.Timer> </xref:System.Windows.Forms.Timer.Start%2A> </xref:System.Windows.Forms.Timer>      > [!NOTE] >에서 중지를 호출 <xref:System.Windows.Forms.Timer>내 Windows Forms 응용 프로그램 수에서 생성 된 메시지가 다른 <xref:System.Windows.Forms.Timer>때문에 즉시 처리 하면 응용 프로그램의 모든 <xref:System.Windows.Forms.Timer>구성 요소가 주 응용 프로그램 스레드에서 작동 합니다.</xref:System.Windows.Forms.Timer> </xref:System.Windows.Forms.Timer> </xref:System.Windows.Forms.Timer> 두 개 있는 경우 <xref:System.Windows.Forms.Timer>구성 요소, 700 밀리초와 500 밀리초로 하나의 집합 하나를 설정 하 고 첫 번째에서 중지를 호출 하면 <xref:System.Windows.Forms.Timer>, 응용 프로그램은 두 번째 구성 요소는 이벤트 콜백을 먼저 표시 될 수 있습니다.</xref:System.Windows.Forms.Timer> </xref:System.Windows.Forms.Timer> 문제가 있는 입증 하는 경우를 사용해는 <xref:System.Threading.Timer>클래스에 <xref:System.Threading>네임 스페이스 대신.</xref:System.Threading> </xref:System.Threading.Timer>"
  example:
  - "The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \n  \n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/m-system.windows.forms.t_32_1.cpp)]\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_32_1.vb)]\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/m-system.windows.forms.t_32_1.cs)]"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Windows.Forms.Timer.Stop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.Tag
  id: Tag
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Tag
  nameWithType: Timer.Tag
  fullName: System.Windows.Forms.Timer.Tag
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "사용자 상태의 일부 형식을 나타내는 임의의 문자열을 가져오거나 설정 합니다."
  syntax:
    content: public object Tag { get; set; }
    return:
      type: System.Object
      description: "사용자 상태의 일부 형식을 나타내는 임의의 문자열입니다."
  overload: System.Windows.Forms.Timer.Tag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.Tick
  id: Tick
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Tick
  nameWithType: Timer.Tick
  fullName: System.Windows.Forms.Timer.Tick
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "지정된 된 타이머 간격이 경과 되 고 타이머가 설정 되어 있는 경우 발생 합니다."
  remarks: "호출 된 <xref:System.Diagnostics.Debug.Assert%2A>에서 메서드는 <xref:System.Diagnostics.Debug>Tick 이벤트 내에서 클래스에는 예상 대로 동작 하지 않을 수, 어설션 대화 상자를 표시와 상자를 반복 해 서 Tick 이벤트를 발생 시키는 Windows를 일으킬 수 있습니다.</xref:System.Diagnostics.Debug> </xref:System.Diagnostics.Debug.Assert%2A> 이 이벤트에서 어설션을 테스트 하지 않는 사용 하는 것이 좋습니다는 <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, 또는 <xref:System.Diagnostics.Debug.WriteLineIf%2A>메서드 대신.</xref:System.Diagnostics.Debug.WriteLineIf%2A> </xref:System.Diagnostics.Debug.WriteLine%2A> </xref:System.Diagnostics.Debug.WriteIf%2A> </xref:System.Diagnostics.Debug.Write%2A>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \n  \n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/e-system.windows.forms.t_22_1.cpp)]\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/e-system.windows.forms.t_22_1.vb)]\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/e-system.windows.forms.t_22_1.cs)]"
  syntax:
    content: public event EventHandler Tick;
    return:
      type: System.EventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.ToString
  id: ToString
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: ToString()
  nameWithType: Timer.ToString()
  fullName: System.Windows.Forms.Timer.ToString()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "나타내는 문자열을 반환 된 <xref href=&quot;System.Windows.Forms.Timer&quot;> </xref>합니다."
  remarks: "ToString 메서드 반환 값을 포함 하는 문자열은 <xref:System.Windows.Forms.Timer.Interval%2A>속성.</xref:System.Windows.Forms.Timer.Interval%2A>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "현재 나타내는 string <xref href=&quot;System.Windows.Forms.Timer&quot;> </xref>합니다."
  overload: System.Windows.Forms.Timer.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.Windows.Forms.Timer.#ctor
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Timer()
  nameWithType: Timer.Timer()
  fullName: System.Windows.Forms.Timer.Timer()
- uid: System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Timer(IContainer)
  nameWithType: Timer.Timer(IContainer)
  fullName: System.Windows.Forms.Timer.Timer(IContainer)
- uid: System.ComponentModel.IContainer
  parent: System.ComponentModel
  isExternal: false
  name: IContainer
  nameWithType: IContainer
  fullName: System.ComponentModel.IContainer
- uid: System.Windows.Forms.Timer.Dispose(System.Boolean)
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Timer.Dispose(Boolean)
  fullName: System.Windows.Forms.Timer.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.Timer.Enabled
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Enabled
  nameWithType: Timer.Enabled
  fullName: System.Windows.Forms.Timer.Enabled
- uid: System.Windows.Forms.Timer.Interval
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Interval
  nameWithType: Timer.Interval
  fullName: System.Windows.Forms.Timer.Interval
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.Timer.OnTick(System.EventArgs)
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: OnTick(EventArgs)
  nameWithType: Timer.OnTick(EventArgs)
  fullName: System.Windows.Forms.Timer.OnTick(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.Forms.Timer.Start
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Start()
  nameWithType: Timer.Start()
  fullName: System.Windows.Forms.Timer.Start()
- uid: System.Windows.Forms.Timer.Stop
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Stop()
  nameWithType: Timer.Stop()
  fullName: System.Windows.Forms.Timer.Stop()
- uid: System.Windows.Forms.Timer.Tag
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Tag
  nameWithType: Timer.Tag
  fullName: System.Windows.Forms.Timer.Tag
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Forms.Timer.Tick
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Tick
  nameWithType: Timer.Tick
  fullName: System.Windows.Forms.Timer.Tick
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Forms.Timer.ToString
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: ToString()
  nameWithType: Timer.ToString()
  fullName: System.Windows.Forms.Timer.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.Timer.#ctor*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Timer
  nameWithType: Timer.Timer
- uid: System.Windows.Forms.Timer.Dispose*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Dispose
  nameWithType: Timer.Dispose
- uid: System.Windows.Forms.Timer.Enabled*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Enabled
  nameWithType: Timer.Enabled
- uid: System.Windows.Forms.Timer.Interval*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Interval
  nameWithType: Timer.Interval
- uid: System.Windows.Forms.Timer.OnTick*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: OnTick
  nameWithType: Timer.OnTick
- uid: System.Windows.Forms.Timer.Start*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Start
  nameWithType: Timer.Start
- uid: System.Windows.Forms.Timer.Stop*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Stop
  nameWithType: Timer.Stop
- uid: System.Windows.Forms.Timer.Tag*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Tag
  nameWithType: Timer.Tag
- uid: System.Windows.Forms.Timer.ToString*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: ToString
  nameWithType: Timer.ToString
