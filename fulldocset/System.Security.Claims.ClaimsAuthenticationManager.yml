### YamlMime:ManagedReference
items:
- uid: System.Security.Claims.ClaimsAuthenticationManager
  id: ClaimsAuthenticationManager
  children:
  - System.Security.Claims.ClaimsAuthenticationManager.#ctor
  - System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)
  - System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)
  langs:
  - csharp
  name: ClaimsAuthenticationManager
  nameWithType: ClaimsAuthenticationManager
  fullName: System.Security.Claims.ClaimsAuthenticationManager
  type: Class
  summary: "클레임 인증 관리자에 대 한 기본 구현을 정의합니다. 클레임 인증 관리자는 처리 파이프라인 실행이 응용 프로그램 코드에 도달 하기 전에 들어오는 보안 주체에서 클레임 컬렉션에 (필터링, 확장, 유효성 검사) 처리 논리를 적용 하기 위한 클레임에 있는 위치를 제공 합니다."
  remarks: "The claims authentication manager provides an extensibility point in the application’s claims processing pipeline that you can use to validate, filter, modify, incoming claims or inject new claims into the set of claims presented by a <xref:System.Security.Claims.ClaimsPrincipal> before the RP application code is executed. You can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal> if your RP application requires it. The default implementation provided by the ClaimsAuthenticationManager class returns the claims in the <xref:System.Security.Claims.ClaimsPrincipal> unmodified; however, you can derive from this class and override the <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method to modify the claims in the <xref:System.Security.Claims.ClaimsPrincipal> (or to return a custom <xref:System.Security.Claims.ClaimsPrincipal>).  \n  \n A typical reason for creating a custom claims authentication manager is to add, remove, or transform claims based on information that is only known by or is, perhaps, better maintained by the RP application. For example, a history of customer purchases in a shopping cart application might be kept in a data base maintained by the RP application and then added to the claims principal returned by the claims authentication manager based on the value of a name claim found in the incoming principal.  \n  \n You can configure your application to use a `ClaimsAuthenticationManager` either programmatically by using the <xref:System.IdentityModel.Configuration.IdentityConfiguration> class or in configuration through the [\\&lt;claimsAuthenticationManager\\&gt;](../Topic/%3CclaimsAuthenticationManager%3E.md) element (which is a child element of the [\\&lt;identityConfiguration\\&gt;](../Topic/%3CidentityConfiguration%3E.md) element). You can override the <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method to provide processing for custom child elements of the `<claimsAuthenticationManager>` element through which your custom manager can be configured. The base implementation of ClaimsAuthenticationManager does not handle any child elements.  \n  \n Configuring your application to use a claims authentication manager ensures that it will be invoked by Windows Identity Foundation (WIF) from the request pipeline."
  example:
  - "The following code shows a simple claims authentication manager that adds a role claim to the incoming principal without performing any check on the incoming claims..  \n  \n [!code-cs[WifWebApplication1#1](~/add/codesnippet/csharp/myclaimsauthenticationmanager/simpleclaimsauthenticatonmanager.cs#1)]  \n  \n The following XML shows the `<claimsAuthenticationManager>` element.  \n  \n```xml  \n<system.identityModel>  \n  <identityConfiguration>  \n    <claimsAuthenticationManager type=\"MyClaimsAuthenticationManager.SimpleClaimsAuthenticatonManager, MyClaimsAuthenticationManager\" />  \n  \n    ...  \n  \n  </identityConfiguration>  \n</system.identityModel>  \n```"
  syntax:
    content: 'public class ClaimsAuthenticationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration'
  inheritance:
  - System.Object
  implements:
  - System.IdentityModel.Configuration.ICustomIdentityConfiguration
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsAuthenticationManager.#ctor
  id: '#ctor'
  parent: System.Security.Claims.ClaimsAuthenticationManager
  langs:
  - csharp
  name: ClaimsAuthenticationManager()
  nameWithType: ClaimsAuthenticationManager.ClaimsAuthenticationManager()
  fullName: System.Security.Claims.ClaimsAuthenticationManager.ClaimsAuthenticationManager()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.Security.Claims
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Claims.ClaimsAuthenticationManager&quot;> </xref> 클래스입니다."
  syntax:
    content: public ClaimsAuthenticationManager ();
    parameters: []
  overload: System.Security.Claims.ClaimsAuthenticationManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)
  id: Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)
  parent: System.Security.Claims.ClaimsAuthenticationManager
  langs:
  - csharp
  name: Authenticate(String,ClaimsPrincipal)
  nameWithType: ClaimsAuthenticationManager.Authenticate(String,ClaimsPrincipal)
  fullName: System.Security.Claims.ClaimsAuthenticationManager.Authenticate(String,ClaimsPrincipal)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.Security.Claims
  summary: "파생된 클래스에서 재정의 되는 경우는 <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> RP 응용 프로그램의 요구 사항과 일치 하는 개체입니다. 기본 구현은 들어오는 수정 하지는 않습니다 <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>합니다."
  remarks: "메서드는 필터링 하려면 파생된 클래스에서이 메서드를 재정의 하는 요청 처리 파이프라인에서 인증 수정 또는 RP 응용 프로그램의 정책에 따라 클레임 보안 주체에 클레임을 삽입 합니다. RP 응용 프로그램의 요구에 따라 반환할 수 있습니다도 <xref:System.Security.Claims.ClaimsPrincipal>.</xref:System.Security.Claims.ClaimsPrincipal> 의 사용자 지정 구현"
  syntax:
    content: public virtual System.Security.Claims.ClaimsPrincipal Authenticate (string resourceName, System.Security.Claims.ClaimsPrincipal incomingPrincipal);
    parameters:
    - id: resourceName
      type: System.String
      description: "요청 중인 리소스의 주소입니다."
    - id: incomingPrincipal
      type: System.Security.Claims.ClaimsPrincipal
      description: "클레임 보안 주체에서 리소스에 액세스 하려고 하는 인증 된 사용자를 나타내는입니다."
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "RP 응용 프로그램에 필요한 모든 수정 내용을 포함 하는 클레임 주체입니다. 기본 구현은 수정 되지 않은 들어오는 클레임 보안 주체를 반환 합니다."
  overload: System.Security.Claims.ClaimsAuthenticationManager.Authenticate*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)
  id: LoadCustomConfiguration(System.Xml.XmlNodeList)
  parent: System.Security.Claims.ClaimsAuthenticationManager
  langs:
  - csharp
  name: LoadCustomConfiguration(XmlNodeList)
  nameWithType: ClaimsAuthenticationManager.LoadCustomConfiguration(XmlNodeList)
  fullName: System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(XmlNodeList)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.Security.Claims
  summary: "파생된 클래스에서 재정의 되 면 사용자 지정 구성을 XML에서 로드 합니다."
  remarks: "The LoadCustomConfiguration method is called by the configuration infrastructure. When this method is called, the `nodelist` will contain the top-level child elements of the [\\&lt;claimsAuthenticationManager\\&gt;](../Topic/%3CclaimsAuthenticationManager%3E.md) element from the configuration file. Each of these elements may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class. If no child elements appear under the `<claimsAuthenticationManager>` element in the configuration file, this method is not called.  \n  \n The default implementation throws a <xref:System.NotImplementedException>. Override this method in your derived class to enable initialization of your claims authentication manager from a configuration file. For example, the configuration elements might describe a policy to be followed when authenticating a claims principal; or they might be used to point to an attribute store from which additional claims are to be added to the principal."
  syntax:
    content: public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);
    parameters:
    - id: nodelist
      type: System.Xml.XmlNodeList
      description: "사용자 지정 구성 요소입니다. 형식의 목록에 각 노드는 <xref href=&quot;System.Xml.XmlElement&quot;> </xref>합니다."
  overload: System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Claims.ClaimsAuthenticationManager.#ctor
  parent: System.Security.Claims.ClaimsAuthenticationManager
  isExternal: false
  name: ClaimsAuthenticationManager()
  nameWithType: ClaimsAuthenticationManager.ClaimsAuthenticationManager()
  fullName: System.Security.Claims.ClaimsAuthenticationManager.ClaimsAuthenticationManager()
- uid: System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)
  parent: System.Security.Claims.ClaimsAuthenticationManager
  isExternal: false
  name: Authenticate(String,ClaimsPrincipal)
  nameWithType: ClaimsAuthenticationManager.Authenticate(String,ClaimsPrincipal)
  fullName: System.Security.Claims.ClaimsAuthenticationManager.Authenticate(String,ClaimsPrincipal)
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)
  parent: System.Security.Claims.ClaimsAuthenticationManager
  isExternal: false
  name: LoadCustomConfiguration(XmlNodeList)
  nameWithType: ClaimsAuthenticationManager.LoadCustomConfiguration(XmlNodeList)
  fullName: System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(XmlNodeList)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Security.Claims.ClaimsAuthenticationManager.#ctor*
  parent: System.Security.Claims.ClaimsAuthenticationManager
  isExternal: false
  name: ClaimsAuthenticationManager
  nameWithType: ClaimsAuthenticationManager.ClaimsAuthenticationManager
- uid: System.Security.Claims.ClaimsAuthenticationManager.Authenticate*
  parent: System.Security.Claims.ClaimsAuthenticationManager
  isExternal: false
  name: Authenticate
  nameWithType: ClaimsAuthenticationManager.Authenticate
- uid: System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration*
  parent: System.Security.Claims.ClaimsAuthenticationManager
  isExternal: false
  name: LoadCustomConfiguration
  nameWithType: ClaimsAuthenticationManager.LoadCustomConfiguration
