### YamlMime:ManagedReference
items:
- uid: System.IO.FileSystemWatcher
  id: FileSystemWatcher
  children:
  - System.IO.FileSystemWatcher.#ctor
  - System.IO.FileSystemWatcher.#ctor(System.String)
  - System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  - System.IO.FileSystemWatcher.BeginInit
  - System.IO.FileSystemWatcher.Changed
  - System.IO.FileSystemWatcher.Created
  - System.IO.FileSystemWatcher.Deleted
  - System.IO.FileSystemWatcher.Dispose(System.Boolean)
  - System.IO.FileSystemWatcher.EnableRaisingEvents
  - System.IO.FileSystemWatcher.EndInit
  - System.IO.FileSystemWatcher.Error
  - System.IO.FileSystemWatcher.Filter
  - System.IO.FileSystemWatcher.IncludeSubdirectories
  - System.IO.FileSystemWatcher.InternalBufferSize
  - System.IO.FileSystemWatcher.NotifyFilter
  - System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  - System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  - System.IO.FileSystemWatcher.Path
  - System.IO.FileSystemWatcher.Renamed
  - System.IO.FileSystemWatcher.Site
  - System.IO.FileSystemWatcher.SynchronizingObject
  - System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  - System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  langs:
  - csharp
  name: FileSystemWatcher
  nameWithType: FileSystemWatcher
  fullName: System.IO.FileSystemWatcher
  type: Class
  summary: "수신 파일 시스템에 알림 이벤트를 발생 시킵니다 디렉터리 또는 파일의 디렉터리를 변경 하는 경우 변경 합니다.       이 형식에 대 한.NET Framework 소스 코드를 찾아보려면 참조는 [참조 소스](http://referencesource.microsoft.com/#System/services/io/system/io/FileSystemWatcher.cs#a9eb0249dc928b09)합니다."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/io/system/io/FileSystemWatcher.cs#a9eb0249dc928b09). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use FileSystemWatcher to watch for changes in a specified directory. You can watch for changes in files and subdirectories of the specified directory. You can create a component to watch files on a local computer, a network drive, or a remote computer.  \n  \n To watch for changes in all files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to an empty string (\"\") or use wildcards (\"*.\\*\"). To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name. For example, to watch for changes in the file MyDoc.txt, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"MyDoc.txt\". You can also watch for changes in a certain type of file. For example, to watch for changes in text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"\\*.txt\".  \n  \n There are several types of changes you can watch for in a directory or file. For example, you can watch for changes in `Attributes`, the `LastWrite` date and time, or the `Size` of files or directories. This is done by setting the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> property to one of the <xref:System.IO.NotifyFilters> values. For more information on the type of changes you can watch, see <xref:System.IO.NotifyFilters>.  \n  \n You can watch for renaming, deletion, or creation of files or directories. For example, to watch for renaming of text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"*.txt\" and call the <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> method with a <xref:System.IO.WatcherChangeTypes> specified for its parameter.  \n  \n The Windows operating system notifies your component of file changes in a buffer created by the FileSystemWatcher. If there are many changes in a short time, the buffer can overflow. This causes the component to lose track of changes in the directory, and it will only provide blanket notification. Increasing the size of the buffer with the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property is expensive, as it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small yet large enough to not miss any file change events. To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties so you can filter out unwanted change notifications.  \n  \n For a list of initial property values for an instance of FileSystemWatcher, see the <xref:System.IO.FileSystemWatcher.%23ctor%2A> constructor.  \n  \n Please note the following when using the FileSystemWatcher class.  \n  \n-   Hidden files are not ignored.  \n  \n-   In some systems, FileSystemWatcher reports changes to files using the short 8.3 file name format. For example, a change to  \"LongFileName.LongExtension\" could be reported as \"LongFil~.Lon\".  \n  \n-   This class contains a link demand and an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission. For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md).  \n  \n-   The maximum size you can set for the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property for monitoring a directory over the network is 64 KB.  \n  \n> [!NOTE]\n>  Running FileSystemWatcher on Windows 98 is not supported.  \n  \n## Copying and moving folders  \n The operating system and FileSystemWatcher object interpret a cut-and-paste action or a move action as a rename action for a folder and its contents. If you cut and paste a folder with files into a folder being watched, the FileSystemWatcher object reports only the folder as new, but not its contents because they are essentially only renamed.  \n  \n To be notified that the contents of folders have been moved or copied into a watched folder, provide <xref:System.IO.FileSystemWatcher.OnChanged%2A> and <xref:System.IO.FileSystemWatcher.OnRenamed%2A> event handler methods as suggested in the following table.  \n  \n|Event Handler|Events Handled|Performs|  \n|-------------------|--------------------|--------------|  \n|<xref:System.IO.FileSystemWatcher.OnChanged%2A>|<xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>|Report changes in file attributes, created files, and deleted files.|  \n|<xref:System.IO.FileSystemWatcher.OnRenamed%2A>|<xref:System.IO.FileSystemWatcher.Renamed>|List the old and new paths of renamed files and folders, expanding recursively if needed.|  \n  \n## Events and Buffer Sizes  \n Note that several factors can affect which file system change events are raised, as described by the following:  \n  \n-   Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by FileSystemWatcher.  \n  \n-   The FileSystemWatcher can watch disks as long as they are not switched or removed. The FileSystemWatcher does not raise events for CDs and DVDs, because time stamps and properties cannot change. Remote computers must have one of the required platforms installed for the component to function properly.  \n  \n-   If multiple FileSystemWatcher objects are watching the same UNC path in Windows XP prior to Service Pack 1, or Windows 2000 SP2 or earlier, then only one of the objects will raise an event. On machines running Windows XP SP1 and newer, Windows 2000 SP3 or newer or Windows Server 2003, all FileSystemWatcher objects will raise the appropriate events.  \n  \n Note that a FileSystemWatcher may miss an event when the buffer size is exceeded. To avoid missing events, follow these guidelines:  \n  \n-   Increase the buffer size by setting the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property.  \n  \n-   Avoid watching files with long file names, because a long file name contributes to filling up the buffer. Consider renaming these files using shorter names.  \n  \n-   Keep your event handling code as short as possible."
  example:
  - "The following example creates a FileSystemWatcher to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/t-system.io.filesystemwa_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/t-system.io.filesystemwa_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/t-system.io.filesystemwa_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Changed")]

      [System.IO.IODescription("FileSystemWatcherDesc")]

      public class FileSystemWatcher : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.ComponentModel.ISupportInitialize
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor
  id: '#ctor'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher()
  nameWithType: FileSystemWatcher.FileSystemWatcher()
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher()
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> 클래스입니다."
  remarks: "You cannot watch a remote computer that does not have Windows NT or Windows 2000. You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.  \n  \n The following table shows initial property values for an instance of <xref:System.IO.FileSystemWatcher>.  \n  \n|Property|Initial Value|  \n|--------------|-------------------|  \n|<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>|bitwise OR combination of `LastWrite`, `FileName`, and `DirectoryName`|  \n|<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>|`false`|  \n|<xref:System.IO.FileSystemWatcher.Filter%2A>|\"*.\\*\" (Watch all files.)|  \n|<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>|`false`|  \n|<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>|8192|  \n|<xref:System.IO.FileSystemWatcher.Path%2A>|empty string (\"\")|  \n  \n> [!NOTE]\n>  The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`."
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> object to watch the directory specified at run time. The <xref:System.IO.FileSystemWatcher> object watches for changes in `LastWrite` and `LastAccess` times, and for the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file displays to the console. When a file is renamed, the old and new paths display to the console.  \n  \n This example uses the <xref:System.Diagnostics> and <xref:System.IO> namespaces.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/m-system.io.filesystemwa_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/m-system.io.filesystemwa_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/m-system.io.filesystemwa_1.vb)]"
  syntax:
    content: public FileSystemWatcher ();
    parameters: []
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher(String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> 클래스를 모니터링 하려면 지정된 된 디렉터리를 지정 합니다."
  remarks: "> [!NOTE]> 구성 요소에 지정 된 디렉터리를 조사 합니다.는 <xref:System.IO.FileSystemWatcher.Path%2A>을 설정 하 고 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>은 `true`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> </xref:System.IO.FileSystemWatcher.Path%2A>       구성 요소는 개인용 컴퓨터, 네트워크 드라이브 또는 원격 컴퓨터에서 파일을 볼 수 있습니다.       Windows NT 또는 Windows 2000 없는 원격 컴퓨터를 볼 수 없습니다. Windows NT 4.0 컴퓨터에서 원격 Windows NT 4.0 컴퓨터를 볼 수 없습니다. <xref:System.IO.FileSystemWatcher.Filter%2A>속성이 기본적으로 모든 파일을 조사 합니다.</xref:System.IO.FileSystemWatcher.Filter%2A>"
  syntax:
    content: public FileSystemWatcher (string path);
    parameters:
    - id: path
      type: System.String
      description: "표준 또는 범용 명명 규칙 (UNC) 표기법에서 모니터링할 디렉터리입니다."
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> path </code> 매개 변수는 빈 문자열 (&quot;&quot;).       -또는-를 통해 지정 된 경로 <code> path </code> 매개 변수가 없습니다."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>가 너무 깁니다."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher(String,String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String,String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> 클래스를 모니터링 하는 파일의 종류와 지정 된 디렉터리를 지정 합니다."
  remarks: "> [!NOTE]> 구성 요소에 지정 된 디렉터리를 조사 합니다.는 <xref:System.IO.FileSystemWatcher.Path%2A>을 설정 하 고 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>은 `true`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> </xref:System.IO.FileSystemWatcher.Path%2A>       구성 요소는 개인용 컴퓨터, 네트워크 드라이브 또는 원격 컴퓨터에서 파일을 볼 수 있습니다.       Windows NT 또는 Windows 2000 없는 원격 컴퓨터를 볼 수 없습니다. Windows NT 4.0 컴퓨터에서 원격 Windows NT 4.0 컴퓨터를 볼 수 없습니다."
  syntax:
    content: public FileSystemWatcher (string path, string filter);
    parameters:
    - id: path
      type: System.String
      description: "표준 또는 범용 명명 규칙 (UNC) 표기법에서 모니터링할 디렉터리입니다."
    - id: filter
      type: System.String
      description: "조사할 파일의 형식입니다. 예를 들어 &quot;*.txt&quot; 모든 텍스트 파일에 변경 내용을 감시 합니다."
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>filter</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> path </code> 매개 변수는 빈 문자열 (&quot;&quot;).       -또는-를 통해 지정 된 경로 <code> path </code> 매개 변수가 없습니다."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>가 너무 깁니다."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.BeginInit
  id: BeginInit
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: BeginInit()
  nameWithType: FileSystemWatcher.BeginInit()
  fullName: System.IO.FileSystemWatcher.BeginInit()
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "초기화를 시작는 <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> 폼에 사용 되거나 다른 구성 요소에서 사용 합니다. 초기화는 런타임에 발생 합니다."
  remarks: "[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] 디자인 환경에서이 메서드를 사용 하 여 구성 요소 초기화를 시작 폼에 사용 되거나 다른 구성 요소에서 사용 합니다. <xref:System.IO.FileSystemWatcher.EndInit%2A>메서드 초기화를 끝냅니다.</xref:System.IO.FileSystemWatcher.EndInit%2A> BeginInit를 사용 하 여 및 <xref:System.IO.FileSystemWatcher.EndInit%2A>메서드는 컨트롤이 완전히 초기화 되기 전에 사용 되지 않습니다.</xref:System.IO.FileSystemWatcher.EndInit%2A>"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.IO.FileSystemWatcher.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Changed
  id: Changed
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Changed
  nameWithType: FileSystemWatcher.Changed
  fullName: System.IO.FileSystemWatcher.Changed
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "파일 또는 디렉터리에서 지정 된 경우에 발생 <xref:System.IO.FileSystemWatcher.Path*>변경 됩니다.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "Changed 이벤트를 때 발생 하는 크기에 변경 내용이 시스템 특성을 마지막 쓰기 시간, 마지막 액세스 시간 또는 파일 또는 디렉터리의 보안 권한을 모니터링 되 고 디렉터리에 있습니다.      > [!NOTE] > 공용 파일 시스템 작업 하나 이상의 이벤트를 발생 시킬 수 있습니다. 파일을 다른 디렉터리로, 여러 한 디렉터리에서 이동할 때에 예를 들어 <xref:System.IO.FileSystemWatcher.OnChanged%2A>및 일부 <xref:System.IO.FileSystemWatcher.OnCreated%2A>및 <xref:System.IO.FileSystemWatcher.OnDeleted%2A>이벤트가 발생할 수 있습니다.</xref:System.IO.FileSystemWatcher.OnDeleted%2A> </xref:System.IO.FileSystemWatcher.OnCreated%2A> </xref:System.IO.FileSystemWatcher.OnChanged%2A> 여러 이벤트를 발생 시키는 따라서 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다. 마찬가지로, 일부 응용 프로그램 (예: 바이러스 백신 소프트웨어) <xref:System.IO.FileSystemWatcher>.</xref:System.IO.FileSystemWatcher> 검색 되는 추가 파일 시스템 이벤트를 발생할 수 있습니다.       사용 하 여 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>이 이벤트가 처리 될 때 발생 하는 알림 수를 제한할 수 있습니다.</xref:System.IO.FileSystemWatcher.NotifyFilter%2A>      > [!NOTE] >의 변경 이벤트는 예기치 않게 파일의 이름이 바뀌었지만 디렉터리 이름을 바꿀 때 발생 하지 않습니다. 조사 하려면 사용 된 <xref:System.IO.FileSystemWatcher.Renamed>이벤트.</xref:System.IO.FileSystemWatcher.Renamed>      > [!NOTE] > 관련 Changed 이벤트는 발생 순서 <xref:System.IO.FileSystemWatcher>이벤트 때 변경 될 수 있습니다는 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>속성은 `null`.</xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> </xref:System.IO.FileSystemWatcher>"
  example:
  - "The following example uses the Changed event to display the file path to the console whenever the watched file is changed.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_0_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_0_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_0_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Changed;
    return:
      type: System.IO.FileSystemEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Created
  id: Created
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Created
  nameWithType: FileSystemWatcher.Created
  fullName: System.IO.FileSystemWatcher.Created
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "파일 또는 디렉터리에서 지정 된 경우에 발생 <xref:System.IO.FileSystemWatcher.Path*>만들어집니다.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a Created event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a Created event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory would raise two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a Created event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.  \n  \n> [!NOTE]\n>  Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.  \n  \n> [!NOTE]\n>  The order in which the Created event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.  \n  \n The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created. If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events."
  example:
  - "The following example uses the Created event to display the file path to the console whenever the watched file is created.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_3_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_3_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_3_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Created;
    return:
      type: System.IO.FileSystemEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Deleted
  id: Deleted
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Deleted
  nameWithType: FileSystemWatcher.Deleted
  fullName: System.IO.FileSystemWatcher.Deleted
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "파일 또는 디렉터리에서 지정 된 경우에 발생 <xref:System.IO.FileSystemWatcher.Path*>삭제 됩니다.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory would raise two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a Deleted event would be raised by FileSystemWatcher1.  \n  \n> [!NOTE]\n>  Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.  \n  \n> [!NOTE]\n>  The order in which the Deleted event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`."
  example:
  - "The following example uses the Deleted event to display the file path to the console whenever the watched file is deleted.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_1_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_1_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_1_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Deleted;
    return:
      type: System.IO.FileSystemEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: FileSystemWatcher.Dispose(Boolean)
  fullName: System.IO.FileSystemWatcher.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public <xref:System.ComponentModel.Component.Dispose%2A>메서드 및 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> <xref:System.ComponentModel.Component.Dispose%2A>보호 된 Dispose 메서드를 호출 하는 `disposing` 매개 변수 설정 `true`합니다.</xref:System.ComponentModel.Component.Dispose%2A> <xref:System.Object.Finalize%2A>Dispose를 호출 `disposing` 로 설정 `false`합니다.</xref:System.Object.Finalize%2A>       경우는 `disposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.IO.Compression.DeflateStream>참조.</xref:System.IO.Compression.DeflateStream> 이 메서드 호출의 <xref:System.ComponentModel.Component.Dispose%2A>각 참조 된 개체의.</xref:System.ComponentModel.Component.Dispose%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.IO.FileSystemWatcher.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents
  id: EnableRaisingEvents
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
  fullName: System.IO.FileSystemWatcher.EnableRaisingEvents
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "구성 요소를 사용 하는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "구성 요소를 EnableRaisingEvents를 설정 하지 않으면 이벤트를 발생 하지 것입니다 `true`합니다.      > [!NOTE] > 구성 요소에 지정 된 디렉터리를 보지 것입니다는 <xref:System.IO.FileSystemWatcher.Path%2A>속성이 설정 되어 이며 EnableRaisingEvents `true`.</xref:System.IO.FileSystemWatcher.Path%2A>       <xref:System.IO.FileSystemWatcher.WaitForChanged%2A>이 속성을 설정 하는 경우에 파일 변경에 응답 하도록 호출 되어야 하는 이벤트 처리기 메서드를 사용 하면 `false`.</xref:System.IO.FileSystemWatcher.WaitForChanged%2A>"
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_2_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_2_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_2_1.vb)]"
  syntax:
    content: public bool EnableRaisingEvents { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>구성 요소를 사용 하면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 디자이너에서 구성 요소를 사용 하 고 경우 [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)], 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IO.FileSystemWatcher.EnableRaisingEvents*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> 개체가 삭제 되었습니다."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "현재 운영 체제가 지원 되지 않은 Microsoft Windows NT 이상입니다."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "에 지정 된 디렉터리 <xref:System.IO.FileSystemWatcher.Path*>찾을 수 없습니다.</xref:System.IO.FileSystemWatcher.Path*>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.IO.FileSystemWatcher.Path*>설정 되지 않았거나 올바르지 않습니다.</xref:System.IO.FileSystemWatcher.Path*>"
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.EndInit
  id: EndInit
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: EndInit()
  nameWithType: FileSystemWatcher.EndInit()
  fullName: System.IO.FileSystemWatcher.EndInit()
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "초기화를 종료 한 <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> 폼에 사용 되거나 다른 구성 요소에서 사용 합니다. 초기화는 런타임에 발생 합니다."
  remarks: "[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] 디자인 환경에서이 메서드를 사용 하 여 구성 요소 초기화를 끝냅니다 폼에 사용 되거나 다른 구성 요소에서 사용 합니다. <xref:System.IO.FileSystemWatcher.BeginInit%2A>메서드 초기화를 시작 합니다.</xref:System.IO.FileSystemWatcher.BeginInit%2A> 사용 하 여 <xref:System.IO.FileSystemWatcher.BeginInit%2A>하 고 컨트롤을 완전히 초기화 되기 전에 사용 되지 않도록 하 EndInit 메서드.</xref:System.IO.FileSystemWatcher.BeginInit%2A>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.IO.FileSystemWatcher.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Error
  id: Error
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Error
  nameWithType: FileSystemWatcher.Error
  fullName: System.IO.FileSystemWatcher.Error
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "발생 경우 인스턴스의 <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> 가 계속 변경 되거나 내부 버퍼 오버플로가 발생 하는 경우를 모니터링할 수 없습니다."
  remarks: "이 이벤트는 것을 방지는 <xref:System.IO.FileSystemWatcher>개체에서 변경 사항을 모니터링 합니다.</xref:System.IO.FileSystemWatcher> 예를 들어는 개체가 원격 디렉터리의 변경 내용을 모니터링 하는 경우 해당 디렉터리에 대 한 연결이 손실에 오류 이벤트가 발생 합니다.       구성 요소를 만들고 Api에 전달 하는 버퍼에 이러한 변경 내용을 저장 하 고 시스템 파일 변경 내용을 알려 줍니다. 짧은 시간 동안 많은 변경 된 버퍼 오버플로될 수 있습니다. 이 인해 디렉터리에 변경 내용 추적이 구성 요소 및 알림만 제공 합니다. 버퍼의 크기를 늘리면 비용이 많이 듭니다, 그리고 비에 있기 때문에 메모리를 디스크에 유지 하므로 스와핑할 수 없으므로 가능한 한 작게 버퍼를 호출 합니다. 버퍼 오버플로 방지 하려면 사용 된 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.Filter%2A>, 및 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>원치 않는 필터링 할 속성 변경 알림을.</xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> </xref:System.IO.FileSystemWatcher.Filter%2A> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>      > [!NOTE] > 공용 파일 시스템 작업 하나 이상의 이벤트를 발생 시킬 수 있습니다. 파일을 다른 디렉터리로, 여러 한 디렉터리에서 이동할 때에 예를 들어 <xref:System.IO.FileSystemWatcher.OnChanged%2A>및 일부 <xref:System.IO.FileSystemWatcher.OnCreated%2A>및 <xref:System.IO.FileSystemWatcher.OnDeleted%2A>이벤트가 발생할 수 있습니다.</xref:System.IO.FileSystemWatcher.OnDeleted%2A> </xref:System.IO.FileSystemWatcher.OnCreated%2A> </xref:System.IO.FileSystemWatcher.OnChanged%2A> 여러 이벤트를 발생 시키는 따라서 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다. 마찬가지로, 일부 응용 프로그램 (예: 바이러스 백신 소프트웨어) <xref:System.IO.FileSystemWatcher>.</xref:System.IO.FileSystemWatcher> 검색 되는 추가 파일 시스템 이벤트를 발생할 수 있습니다."
  syntax:
    content: public event System.IO.ErrorEventHandler Error;
    return:
      type: System.IO.ErrorEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Filter
  id: Filter
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Filter
  nameWithType: FileSystemWatcher.Filter
  fullName: System.IO.FileSystemWatcher.Filter
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "모니터링할 디렉터리에 파일을 확인 하는 데 필터 문자열을 가져오거나 설정 합니다."
  remarks: "To watch changes in all files, set the Filter property to an empty string (\"\"). To watch a specific file, set the Filter property to the file name. For example, to watch for changes in the file MyDoc.txt, set the Filter property to \"MyDoc.txt\". You can also watch for changes in a certain type of file. For example, to watch for changes in any text files, set the Filter property to \"*.txt\". Use of multiple filters such as \"\\*.txt&#124;\\*.doc\" is not supported.  \n  \n The Filter property can be changed after the <xref:System.IO.FileSystemWatcher> object has started receiving events.  \n  \n For more information about filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.  \n  \n Filter accepts wildcards for matching files, as shown in the following examples.  \n  \n|Filter string|Watches the following files|  \n|-------------------|---------------------------------|  \n|*.\\*|All files (default). An empty string (\"\") also watches all files.|  \n|*.txt|All files with a \"txt\" extension.|  \n|*recipe.doc|All files ending in \"recipe\" with a \"doc\" extension.|  \n|win*.xml|All files beginning with \"win\" with an \"xml\" extension.|  \n|Sales*200?.xls|Matches the following:<br /><br /> Sales July 2001.xlsSales Aug 2002.xlsSales March 2004.xls<br /><br /> but does not match:<br /><br /> Sales Nov 1999.xls|  \n|MyReport.Doc|Watches only MyReport.doc|"
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_3_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_3_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_3_1.vb)]"
  syntax:
    content: public string Filter { get; set; }
    return:
      type: System.String
      description: "필터 문자열입니다. 기본값은 &quot;*. \\*&quot; (모든 파일을 감시합니다.)"
  overload: System.IO.FileSystemWatcher.Filter*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories
  id: IncludeSubdirectories
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
  fullName: System.IO.FileSystemWatcher.IncludeSubdirectories
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "지정된 된 경로 내에서 하위 디렉터리를 모니터링 해야 하는지를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "IncludeSubdirectories 설정 `true` 한 파일 및 지정 된 디렉터리 내에 포함 된 디렉터리에 대 한 변경 알림을 조사 하려는 경우는 <xref:System.IO.FileSystemWatcher.Path%2A>속성 및 그 하위 디렉터리입니다.</xref:System.IO.FileSystemWatcher.Path%2A> IncludeSubdirectories 속성을 설정 `false` 내부 버퍼에 보낸 알림 수를 줄일 수 있습니다. 원하지 않는 알림을 필터링에 대 한 자세한 내용은 참조는 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>및 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>속성.</xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>       때 `true`, IncludeSubdirectories 직계 자식 디렉터리 뿐 아니라 전체 하위 트리를 통해는 재귀적입니다. 파일 또는 디렉터리 하위 트리 내에 상대 경로 <xref:System.IO.FileSystemEventArgs.Name%2A> <xref:System.IO.FileSystemEventArgs>및 <xref:System.IO.RenamedEventArgs.OldName%2A>, <xref:System.IO.RenamedEventArgs>변경 내용에 따라 >for를 감시 하</xref:System.IO.RenamedEventArgs> 는 속성</xref:System.IO.RenamedEventArgs.OldName%2A> </xref:System.IO.FileSystemEventArgs> 의 속성</xref:System.IO.FileSystemEventArgs.Name%2A> 에서 반환 <xref:System.IO.FileSystemEventArgs.FullPath%2A> <xref:System.IO.FileSystemEventArgs>및 <xref:System.IO.RenamedEventArgs.OldFullPath%2A> <xref:System.IO.RenamedEventArgs>>for를 감시 하는 변경 내용에 따라</xref:System.IO.RenamedEventArgs> , 속성</xref:System.IO.RenamedEventArgs.OldFullPath%2A> </xref:System.IO.FileSystemEventArgs> 의 속성</xref:System.IO.FileSystemEventArgs.FullPath%2A> 에서 정규화 된 경로 가져올 수 있습니다.       디렉터리를 만드는 경우에 디렉터리의 하위 트리를 감시 하는, 이며 IncludeSubdirectories `true`, 해당 디렉터리 자동으로 조사 됩니다."
  syntax:
    content: public bool IncludeSubdirectories { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하위 디렉터리를 모니터링 하려는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IO.FileSystemWatcher.IncludeSubdirectories*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.InternalBufferSize
  id: InternalBufferSize
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
  fullName: System.IO.FileSystemWatcher.InternalBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "내부 버퍼의 바이트 단위로 크기를 가져오거나 설정 합니다."
  remarks: "4KB로 또는 그에 버퍼를 설정할 수 있지만 64 KB를 초과 해서는 안 됩니다. 4096 바이트 보다 작다고 InternalBufferSize 속성으로 설정 하려고 하면 사용자가 값 무시 되 고 InternalBufferSize 속성이 4096 바이트로 설정 되어 있습니다. 최상의 성능을 위해 Intel 기반 컴퓨터에서 4KB의 배수를 사용 합니다.       구성 요소를 만들고 Api에 전달 하는 버퍼에 이러한 변경 내용을 저장 하 고 시스템 파일 변경 내용이 구성 요소에 알립니다. 각 이벤트의 메모리를 파일 이름을 제외한 16 바이트까지 사용할 수 있습니다. 짧은 시간 동안 많은 변경 된 버퍼 오버플로될 수 있습니다. 이 인해 디렉터리에 변경 내용 추적이 구성 요소 및 알림만 제공 합니다. 버퍼의 크기 증가 방지할 수 없습니다. 파일 시스템 변경 이벤트. 그러나 버퍼 크기 증가 비용이 많이 들며, 비페이징 메모리는 디스크에 따라서 버퍼를 가능한 한 작게 유지 스와핑할 수 없으므로 사용 하므로. 버퍼 오버플로 방지 하려면 사용 된 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>및 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>원치 않는 필터링 할 속성 변경 알림을.</xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>"
  syntax:
    content: public int InternalBufferSize { get; set; }
    return:
      type: System.Int32
      description: "내부 버퍼 크기 (바이트)입니다. 기본값은 8192 (8KB)입니다."
  overload: System.IO.FileSystemWatcher.InternalBufferSize*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.NotifyFilter
  id: NotifyFilter
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
  fullName: System.IO.FileSystemWatcher.NotifyFilter
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "조사할 변경 내용 유형을 가져오거나 설정 합니다."
  remarks: "멤버를 결합할 수는 <xref:System.IO.NotifyFilters>변경 한 번에 둘 이상의 유형을 조사 하는 열거형입니다.</xref:System.IO.NotifyFilters> 예를 들어 파일의 크기 변경에 대 한과 변경에 대 한를 살펴볼 수 있습니다는 `LastWrite` 시간입니다. 이 이벤트를 발생 시키는 변경 되거나 파일 또는 폴더 크기가 변경 되는 `LastWrite` 파일 또는 폴더의 시간입니다.       이것이 필터링 원하지 않는 알림의 수입니다. 원하지 않는 알림을 필터링에 대 한 자세한 내용은 참조는 <xref:System.IO.FileSystemWatcher.Filter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, 및 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>속성.</xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> </xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> </xref:System.IO.FileSystemWatcher.Filter%2A>"
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_0_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_0_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_0_1.vb)]"
  syntax:
    content: public System.IO.NotifyFilters NotifyFilter { get; set; }
    return:
      type: System.IO.NotifyFilters
      description: "중 하나는 <xref href=&quot;System.IO.NotifyFilters&quot;> </xref> 값입니다. 기본값은의 비트 OR 조합 <xref uid=&quot;langword_csharp_LastWrite&quot; name=&quot;LastWrite&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_FileName&quot; name=&quot;FileName&quot; href=&quot;&quot;> </xref>, 및 <xref uid=&quot;langword_csharp_DirectoryName&quot; name=&quot;DirectoryName&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IO.FileSystemWatcher.NotifyFilter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "값의 유효한 비트 OR 조합이는 <xref href=&quot;System.IO.NotifyFilters&quot;> </xref> 값입니다."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "설정 되는 값이 올바르지 않습니다."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  id: OnChanged(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnChanged(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnChanged(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnChanged(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "발생 된 <xref href=&quot;System.IO.FileSystemWatcher.Changed&quot;> </xref> 이벤트입니다."
  remarks: "OnChanged 크기 변경 될 때 호출 되 시스템 특성을 마지막 쓰기 시간, 마지막 액세스 시간 또는 파일 또는 디렉터리의 보안 권한을 모니터링 되 고 디렉터리에 있습니다.       사용 하 여는 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>될 때 발생 하는 이벤트 수를 제한 하는 속성은 <xref:System.IO.FileSystemWatcher.Changed>이벤트를 처리 합니다.</xref:System.IO.FileSystemWatcher.Changed> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>       <xref:System.IO.FileSystemWatcher.OnCreated%2A>파일을 작성 하는 즉시 발생 합니다.</xref:System.IO.FileSystemWatcher.OnCreated%2A> 파일 되 고 있으면 복사 하거나 전송 확인된 된 디렉터리는 <xref:System.IO.FileSystemWatcher.OnCreated%2A>이벤트가 발생 바로 뒤에 하나 이상의 OnChanged 이벤트.</xref:System.IO.FileSystemWatcher.OnCreated%2A>       이벤트를 발생 시키는 대리자를 통해 이벤트 처리기를 호출 합니다. 자세한 내용은 참조 [이벤트](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: protected void OnChanged (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "A <xref href=&quot;System.IO.FileSystemEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.IO.FileSystemWatcher.OnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  id: OnCreated(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnCreated(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnCreated(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnCreated(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "발생 된 <xref href=&quot;System.IO.FileSystemWatcher.Created&quot;> </xref> 이벤트입니다."
  remarks: "OnCreated is called when a file or directory is created in the directory being monitored.  \n  \n Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" and paste it into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised in FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory raises two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised in FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised in FileSystemWatcher1.  \n  \n The OnCreated event is raised as soon as a file is created. If a file is being copied or transferred into a watched directory, the OnCreated event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnCreated (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "A <xref href=&quot;System.IO.FileSystemEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.IO.FileSystemWatcher.OnCreated*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  id: OnDeleted(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnDeleted(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "발생 된 <xref href=&quot;System.IO.FileSystemWatcher.Deleted&quot;> </xref> 이벤트입니다."
  remarks: "OnDeleted is called when a file or directory, within the directory being monitored, is deleted.  \n  \n Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory raises two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnDeleted (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "A <xref href=&quot;System.IO.FileSystemEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.IO.FileSystemWatcher.OnDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  id: OnError(System.IO.ErrorEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnError(ErrorEventArgs)
  nameWithType: FileSystemWatcher.OnError(ErrorEventArgs)
  fullName: System.IO.FileSystemWatcher.OnError(ErrorEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "발생 된 <xref href=&quot;System.IO.FileSystemWatcher.Error&quot;> </xref> 이벤트입니다."
  remarks: "OnError는 오류가 발생할 때 호출 됩니다.       이벤트를 발생 시키는 대리자를 통해 이벤트 처리기를 호출 합니다. 자세한 내용은 참조 [이벤트](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: protected void OnError (System.IO.ErrorEventArgs e);
    parameters:
    - id: e
      type: System.IO.ErrorEventArgs
      description: "<xref href=&quot;System.IO.ErrorEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.IO.FileSystemWatcher.OnError*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  id: OnRenamed(System.IO.RenamedEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnRenamed(RenamedEventArgs)
  nameWithType: FileSystemWatcher.OnRenamed(RenamedEventArgs)
  fullName: System.IO.FileSystemWatcher.OnRenamed(RenamedEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "발생 된 <xref href=&quot;System.IO.FileSystemWatcher.Renamed&quot;> </xref> 이벤트입니다."
  remarks: "OnRenamed 파일 또는 디렉터리는 모니터링 중인 디렉터리 내에서 이름을 바꿀 때 호출 됩니다.       이벤트를 발생 시키는 대리자를 통해 이벤트 처리기를 호출 합니다. 자세한 내용은 참조 [이벤트](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: protected void OnRenamed (System.IO.RenamedEventArgs e);
    parameters:
    - id: e
      type: System.IO.RenamedEventArgs
      description: "A <xref href=&quot;System.IO.RenamedEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.IO.FileSystemWatcher.OnRenamed*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Path
  id: Path
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Path
  nameWithType: FileSystemWatcher.Path
  fullName: System.IO.FileSystemWatcher.Path
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "조사할 디렉터리의 경로 가져오거나 설정 합니다."
  remarks: "This is a fully qualified path to a directory. If the <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> property is `true`, this directory is the root at which the system watches for changes; otherwise it is the only directory watched. To watch a specific file, set the Path property to the fully qualified, correct directory, and the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.  \n  \n The Path property supports Universal Naming Convention (UNC) paths.  \n  \n> [!NOTE]\n>  This property must be set before the component can watch for changes.  \n  \n When a directory is renamed, the <xref:System.IO.FileSystemWatcher> automatically reattaches itself to the newly renamed item. For example, if you set the Path property to \"C:\\My Documents\" and then manually rename the directory to \"C:\\Your Documents\", the component continues listening for change notifications on the newly renamed directory. However, when you ask for the Path property, it contains the old path. This happens because the component determines what directory watches based on the handle, rather than the name of the directory. Renaming does not affect the handle. So, if you destroy the component, and then recreate it without updating the Path property, your application will fail because the directory no longer exists."
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_1_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_1_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_1_1.vb)]"
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "모니터링할 경로입니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.IO.FileSystemWatcher.Path*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "지정 된 경로가 존재 하지 않거나 찾을 수 없습니다.       -또는-지정된 된 경로 와일드 카드 문자가 포함 되어 있습니다.       -또는-지정된 된 경로 잘못 된 경로 문자가 있습니다."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Renamed
  id: Renamed
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Renamed
  nameWithType: FileSystemWatcher.Renamed
  fullName: System.IO.FileSystemWatcher.Renamed
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "파일 또는 디렉터리에서 지정 된 경우에 발생 <xref:System.IO.FileSystemWatcher.Path*>이름이 바뀝니다.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "감시 하는 디렉터리의 이름을 바꾸지 알림이 발생 하지 않습니다. 알림은 감시 하는 디렉터리 내의 항목에 대해서만 발생 합니다."
  example:
  - "The following example uses the Renamed event to display the file path to the console whenever the watched file is renamed.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_2_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_2_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_2_1.vb)]"
  syntax:
    content: public event System.IO.RenamedEventHandler Renamed;
    return:
      type: System.IO.RenamedEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Site
  id: Site
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Site
  nameWithType: FileSystemWatcher.Site
  fullName: System.IO.FileSystemWatcher.Site
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "가져오거나는 <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> 에 대 한는 <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref>합니다."
  remarks: "사이트 바인딩는 <xref:System.ComponentModel.Component>에 <xref:System.ComponentModel.Design.IDesignerHost.Container%2A>서로 통신할 수 있도록 할 뿐만 아니라 컨테이너에서 해당 구성 요소를 관리할 수 있는 방법을 제공 합니다.</xref:System.ComponentModel.Design.IDesignerHost.Container%2A> </xref:System.ComponentModel.Component>"
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "An <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.IO.FileSystemWatcher&quot;></xref>."
  overload: System.IO.FileSystemWatcher.Site*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.SynchronizingObject
  id: SynchronizingObject
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
  fullName: System.IO.FileSystemWatcher.SynchronizingObject
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "디렉터리를 변경한 결과로 발생 하는 이벤트 처리기 호출을 마샬링하는 데 사용 되는 개체를 가져오거나 설정 합니다."
  remarks: "SynchronizingObject 다음과 같은 경우 `null`를 처리 하는 메서드가 <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, 및 <xref:System.IO.FileSystemWatcher.Renamed>시스템 스레드 풀의 스레드라도에서 이벤트를 호출 합니다.</xref:System.IO.FileSystemWatcher.Renamed> </xref:System.IO.FileSystemWatcher.Deleted> </xref:System.IO.FileSystemWatcher.Created> </xref:System.IO.FileSystemWatcher.Changed> 시스템 스레드 풀에 대 한 자세한 내용은 <xref:System.Threading.ThreadPool>.</xref:System.Threading.ThreadPool> 을 참조 하십시오.       경우는 <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, 및 <xref:System.IO.FileSystemWatcher.Renamed>이벤트가 같은 visual Windows Forms 구성 요소에 의해 처리 되는 <xref:System.Windows.Forms.Button>, 작동 하지 않을 수 시스템 스레드 풀을 통해 구성 요소를 액세스 하거나 예외가 발생할 수 있습니다.</xref:System.Windows.Forms.Button> </xref:System.IO.FileSystemWatcher.Renamed> </xref:System.IO.FileSystemWatcher.Deleted> </xref:System.IO.FileSystemWatcher.Created> </xref:System.IO.FileSystemWatcher.Changed> SynchronizingObject는 Windows Forms는 구성 요소를 처리 하는 메서드를 설정 하 여이 문제를 방지는 <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, 및 <xref:System.IO.FileSystemWatcher.Renamed>구성 요소를 만든 동일한 스레드에서 호출 되는 이벤트입니다.</xref:System.IO.FileSystemWatcher.Renamed> </xref:System.IO.FileSystemWatcher.Deleted> </xref:System.IO.FileSystemWatcher.Created> </xref:System.IO.FileSystemWatcher.Changed>       경우는 <xref:System.IO.FileSystemWatcher>안에서 사용 [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] Windows Forms 디자이너에서 SynchronizingObject로 자동 설정 <xref:System.IO.FileSystemWatcher>.</xref:System.IO.FileSystemWatcher> 를 포함 하는 컨트롤</xref:System.IO.FileSystemWatcher> 예를 들어, 배치 하는 경우는 <xref:System.IO.FileSystemWatcher>form1 디자이너에서 (에서 상속 되 <xref:System.Windows.Forms.Form>)의 SynchronizingObject 속성 <xref:System.IO.FileSystemWatcher>Form1의 인스턴스로 설정 됩니다.</xref:System.IO.FileSystemWatcher> </xref:System.Windows.Forms.Form> </xref:System.IO.FileSystemWatcher>"
  syntax:
    content: public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }
    return:
      type: System.ComponentModel.ISynchronizeInvoke
      description: "<xref href=&quot;System.ComponentModel.ISynchronizeInvoke&quot;> </xref> 디렉터리를 변경한 결과로 발생 하는 이벤트 처리기 호출을 마샬링하는 데 사용 되는 개체를 나타내는입니다. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IO.FileSystemWatcher.SynchronizingObject*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  id: WaitForChanged(System.IO.WatcherChangeTypes)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: WaitForChanged(WatcherChangeTypes)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "모니터링할 변경의 유형을 지정, 발생 한 변경 내용에 대 한 특정 정보를 포함 하는 구조를 반환 하는 동기 메서드."
  remarks: "이 메서드는 발생 하 고 다음을 반환 하는 첫 번째 변경 사항을 때까지 무기한 기다립니다. 이 WaitForChanged를 사용할 때와 같은 `timeout` 매개 변수가-1로 설정 합니다.      > [!NOTE] >이 메서드를 사용 하면 변경 되어도 파일에 응답 하도록 호출 되어야 하는 이벤트 처리기는 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>속성이 `false`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>       일부 시스템에서 <xref:System.IO.FileSystemWatcher>간단한 8.3 파일 이름 형식을 사용 하 여 파일에 변경 내용을 보고 합니다.</xref:System.IO.FileSystemWatcher> &quot;LongFileName.LongExtension&quot;에 대 한 변경으로 보고 예를 들어 &quot;LongFi ~ 합니다. Lon &quot;입니다."
  syntax:
    content: public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType);
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "<xref href=&quot;System.IO.WatcherChangeTypes&quot;> </xref> 을 조사 합니다."
    return:
      type: System.IO.WaitForChangedResult
      description: "A <xref href=&quot;System.IO.WaitForChangedResult&quot;> </xref> 발생 한 변경 내용에 대 한 특정 정보가 들어 있는입니다."
  overload: System.IO.FileSystemWatcher.WaitForChanged*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  id: WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: WaitForChanged(WatcherChangeTypes,Int32)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "변경 하려는 모니터는 시간 (밀리초)을 초과할 때까지 대기의 유형을 지정, 발생 한 변경 내용에 대 한 특정 정보를 포함 하는 구조를 반환 하는 동기 메서드."
  remarks: "이 메서드는 변경이 발생 하거나 시간이 초과 될 때까지 대기 합니다. 값이-1은 `timeout` 매개 변수는 무기한 대기를 의미 합니다.      > [!NOTE] >이 메서드를 사용 하면 변경 되어도 파일에 응답 하도록 호출 되어야 하는 이벤트 처리기는 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>속성이 `false`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>       일부 시스템에서 <xref:System.IO.FileSystemWatcher>간단한 8.3 파일 이름 형식을 사용 하 여 파일에 변경 내용을 보고 합니다.</xref:System.IO.FileSystemWatcher> &quot;LongFileName.LongExtension&quot;에 대 한 변경으로 보고 예를 들어 &quot;LongFi ~ 합니다. Lon &quot;입니다."
  syntax:
    content: public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType, int timeout);
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "<xref href=&quot;System.IO.WatcherChangeTypes&quot;> </xref> 을 조사 합니다."
    - id: timeout
      type: System.Int32
      description: "시간 (밀리초)을 초과할 때까지 대기 합니다."
    return:
      type: System.IO.WaitForChangedResult
      description: "A <xref href=&quot;System.IO.WaitForChangedResult&quot;> </xref> 발생 한 변경 내용에 대 한 특정 정보가 들어 있는입니다."
  overload: System.IO.FileSystemWatcher.WaitForChanged*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.IO.FileSystemWatcher.#ctor
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher()
  nameWithType: FileSystemWatcher.FileSystemWatcher()
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher()
- uid: System.IO.FileSystemWatcher.#ctor(System.String)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher(String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher(String,String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String,String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String,String)
- uid: System.IO.FileSystemWatcher.BeginInit
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: BeginInit()
  nameWithType: FileSystemWatcher.BeginInit()
  fullName: System.IO.FileSystemWatcher.BeginInit()
- uid: System.IO.FileSystemWatcher.Changed
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Changed
  nameWithType: FileSystemWatcher.Changed
  fullName: System.IO.FileSystemWatcher.Changed
- uid: System.IO.FileSystemEventHandler
  parent: System.IO
  isExternal: false
  name: FileSystemEventHandler
  nameWithType: FileSystemEventHandler
  fullName: System.IO.FileSystemEventHandler
- uid: System.IO.FileSystemWatcher.Created
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Created
  nameWithType: FileSystemWatcher.Created
  fullName: System.IO.FileSystemWatcher.Created
- uid: System.IO.FileSystemWatcher.Deleted
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Deleted
  nameWithType: FileSystemWatcher.Deleted
  fullName: System.IO.FileSystemWatcher.Deleted
- uid: System.IO.FileSystemWatcher.Dispose(System.Boolean)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: FileSystemWatcher.Dispose(Boolean)
  fullName: System.IO.FileSystemWatcher.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
  fullName: System.IO.FileSystemWatcher.EnableRaisingEvents
- uid: System.IO.FileSystemWatcher.EndInit
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EndInit()
  nameWithType: FileSystemWatcher.EndInit()
  fullName: System.IO.FileSystemWatcher.EndInit()
- uid: System.IO.FileSystemWatcher.Error
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Error
  nameWithType: FileSystemWatcher.Error
  fullName: System.IO.FileSystemWatcher.Error
- uid: System.IO.ErrorEventHandler
  parent: System.IO
  isExternal: false
  name: ErrorEventHandler
  nameWithType: ErrorEventHandler
  fullName: System.IO.ErrorEventHandler
- uid: System.IO.FileSystemWatcher.Filter
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Filter
  nameWithType: FileSystemWatcher.Filter
  fullName: System.IO.FileSystemWatcher.Filter
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
  fullName: System.IO.FileSystemWatcher.IncludeSubdirectories
- uid: System.IO.FileSystemWatcher.InternalBufferSize
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
  fullName: System.IO.FileSystemWatcher.InternalBufferSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.FileSystemWatcher.NotifyFilter
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
  fullName: System.IO.FileSystemWatcher.NotifyFilter
- uid: System.IO.NotifyFilters
  parent: System.IO
  isExternal: false
  name: NotifyFilters
  nameWithType: NotifyFilters
  fullName: System.IO.NotifyFilters
- uid: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnChanged(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnChanged(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnChanged(FileSystemEventArgs)
- uid: System.IO.FileSystemEventArgs
  parent: System.IO
  isExternal: false
  name: FileSystemEventArgs
  nameWithType: FileSystemEventArgs
  fullName: System.IO.FileSystemEventArgs
- uid: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnCreated(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnCreated(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnCreated(FileSystemEventArgs)
- uid: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnDeleted(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnDeleted(FileSystemEventArgs)
- uid: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnError(ErrorEventArgs)
  nameWithType: FileSystemWatcher.OnError(ErrorEventArgs)
  fullName: System.IO.FileSystemWatcher.OnError(ErrorEventArgs)
- uid: System.IO.ErrorEventArgs
  parent: System.IO
  isExternal: false
  name: ErrorEventArgs
  nameWithType: ErrorEventArgs
  fullName: System.IO.ErrorEventArgs
- uid: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnRenamed(RenamedEventArgs)
  nameWithType: FileSystemWatcher.OnRenamed(RenamedEventArgs)
  fullName: System.IO.FileSystemWatcher.OnRenamed(RenamedEventArgs)
- uid: System.IO.RenamedEventArgs
  parent: System.IO
  isExternal: false
  name: RenamedEventArgs
  nameWithType: RenamedEventArgs
  fullName: System.IO.RenamedEventArgs
- uid: System.IO.FileSystemWatcher.Path
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Path
  nameWithType: FileSystemWatcher.Path
  fullName: System.IO.FileSystemWatcher.Path
- uid: System.IO.FileSystemWatcher.Renamed
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Renamed
  nameWithType: FileSystemWatcher.Renamed
  fullName: System.IO.FileSystemWatcher.Renamed
- uid: System.IO.RenamedEventHandler
  parent: System.IO
  isExternal: false
  name: RenamedEventHandler
  nameWithType: RenamedEventHandler
  fullName: System.IO.RenamedEventHandler
- uid: System.IO.FileSystemWatcher.Site
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Site
  nameWithType: FileSystemWatcher.Site
  fullName: System.IO.FileSystemWatcher.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.IO.FileSystemWatcher.SynchronizingObject
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
  fullName: System.IO.FileSystemWatcher.SynchronizingObject
- uid: System.ComponentModel.ISynchronizeInvoke
  parent: System.ComponentModel
  isExternal: false
  name: ISynchronizeInvoke
  nameWithType: ISynchronizeInvoke
  fullName: System.ComponentModel.ISynchronizeInvoke
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged(WatcherChangeTypes)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
- uid: System.IO.WaitForChangedResult
  parent: System.IO
  isExternal: false
  name: WaitForChangedResult
  nameWithType: WaitForChangedResult
  fullName: System.IO.WaitForChangedResult
- uid: System.IO.WatcherChangeTypes
  parent: System.IO
  isExternal: false
  name: WatcherChangeTypes
  nameWithType: WatcherChangeTypes
  fullName: System.IO.WatcherChangeTypes
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged(WatcherChangeTypes,Int32)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
- uid: System.IO.FileSystemWatcher.#ctor*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher
  nameWithType: FileSystemWatcher.FileSystemWatcher
- uid: System.IO.FileSystemWatcher.BeginInit*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: BeginInit
  nameWithType: FileSystemWatcher.BeginInit
- uid: System.IO.FileSystemWatcher.Dispose*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Dispose
  nameWithType: FileSystemWatcher.Dispose
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
- uid: System.IO.FileSystemWatcher.EndInit*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EndInit
  nameWithType: FileSystemWatcher.EndInit
- uid: System.IO.FileSystemWatcher.Filter*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Filter
  nameWithType: FileSystemWatcher.Filter
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
- uid: System.IO.FileSystemWatcher.InternalBufferSize*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
- uid: System.IO.FileSystemWatcher.NotifyFilter*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
- uid: System.IO.FileSystemWatcher.OnChanged*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnChanged
  nameWithType: FileSystemWatcher.OnChanged
- uid: System.IO.FileSystemWatcher.OnCreated*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnCreated
  nameWithType: FileSystemWatcher.OnCreated
- uid: System.IO.FileSystemWatcher.OnDeleted*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnDeleted
  nameWithType: FileSystemWatcher.OnDeleted
- uid: System.IO.FileSystemWatcher.OnError*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnError
  nameWithType: FileSystemWatcher.OnError
- uid: System.IO.FileSystemWatcher.OnRenamed*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnRenamed
  nameWithType: FileSystemWatcher.OnRenamed
- uid: System.IO.FileSystemWatcher.Path*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Path
  nameWithType: FileSystemWatcher.Path
- uid: System.IO.FileSystemWatcher.Site*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Site
  nameWithType: FileSystemWatcher.Site
- uid: System.IO.FileSystemWatcher.SynchronizingObject*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
- uid: System.IO.FileSystemWatcher.WaitForChanged*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged
  nameWithType: FileSystemWatcher.WaitForChanged
