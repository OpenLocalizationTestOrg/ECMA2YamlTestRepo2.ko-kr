### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.MouseWheelEventArgs
  id: MouseWheelEventArgs
  children:
  - System.Windows.Input.MouseWheelEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Int32)
  - System.Windows.Input.MouseWheelEventArgs.Delta
  - System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  langs:
  - csharp
  name: MouseWheelEventArgs
  nameWithType: MouseWheelEventArgs
  fullName: System.Windows.Input.MouseWheelEventArgs
  type: Class
  summary: "보고서의 마우스 장치 마우스 휠 델타 값으로 변경 하는 다양 한 이벤트에 대 한 데이터를 제공 합니다."
  remarks: "MouseWheelEventArgs 다음과 같은 이벤트와 함께 사용 됩니다:- <xref:System.Windows.UIElement.MouseWheel?displayProperty=fullName>- <xref:System.Windows.ContentElement.MouseWheel?displayProperty=fullName>- <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>(연결 된 이벤트)- <xref:System.Windows.UIElement.PreviewMouseWheel?displayProperty=fullName>- <xref:System.Windows.ContentElement.PreviewMouseWheel?displayProperty=fullName>- <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>(연결 된 이벤트)는 <xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A>속성이 마우스 휠을 위쪽으로 이동 되는 경우 양수 또는 (사용자 반대쪽) 앞으로 또는 마우스 휠 아래로 이동 되는 경우 음수 또는 뒤로 (사용자)입니다.</xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A> </xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewMouseWheel?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewMouseWheel?displayProperty=fullName> </xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> </xref:System.Windows.ContentElement.MouseWheel?displayProperty=fullName> </xref:System.Windows.UIElement.MouseWheel?displayProperty=fullName>       이 이벤트는 작은 마우스 휠 움직임에도 발생 합니다. 일부 시나리오에 대 한 델타 특정 임계값을 초과 하는지 여부를 확인 하 여 작은 마우스 휠 델타를 조절 하는 처리기를 구현 하기에 적합 한지 합니다. 그렇지 않으면 마우스 휠을 델타 마우스 휠 이동에 연결 된 모든 UI 업데이트 되지 않을 정도로 작은 있던 경우에 대 한 처리기를 호출할 수 있습니다. 정확 하 게 처리기에서 임계값 동작을 구현 방법과 해야 임계값에는 전적으로 구현 합니다."
  example:
  - "The following example moves a <xref:System.Windows.Controls.TextBox> up if the mouse wheel <xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A> is positive and moves the <xref:System.Windows.Controls.TextBox> down if the mouse wheel <xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A> is negative. The <xref:System.Windows.Controls.TextBox> is attached to a <xref:System.Windows.Controls.Canvas>.  \n  \n [!code-vb[mousesnippetsample#MouseWheelDelta](~/add/codesnippet/visualbasic/mousesnippetsample/window1.xaml.vb#mousewheeldelta)]\n [!code-cs[mousesnippetsample#MouseWheelDelta](~/add/codesnippet/csharp/MouseSnippetSample/Window1.xaml.cs#mousewheeldelta)]"
  syntax:
    content: 'public class MouseWheelEventArgs : System.Windows.Input.MouseEventArgs'
  inheritance:
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  - System.Windows.Input.InputEventArgs
  - System.Windows.Input.MouseEventArgs
  implements: []
  inheritedMembers:
  - System.Windows.Input.InputEventArgs.Device
  - System.Windows.Input.InputEventArgs.Timestamp
  - System.Windows.Input.MouseEventArgs.GetPosition(System.Windows.IInputElement)
  - System.Windows.Input.MouseEventArgs.LeftButton
  - System.Windows.Input.MouseEventArgs.MiddleButton
  - System.Windows.Input.MouseEventArgs.MouseDevice
  - System.Windows.Input.MouseEventArgs.RightButton
  - System.Windows.Input.MouseEventArgs.StylusDevice
  - System.Windows.Input.MouseEventArgs.XButton1
  - System.Windows.Input.MouseEventArgs.XButton2
  - System.Windows.RoutedEventArgs.Handled
  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.Windows.RoutedEventArgs.RoutedEvent
  - System.Windows.RoutedEventArgs.Source
  platform:
  - net462
- uid: System.Windows.Input.MouseWheelEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Int32)
  id: '#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Int32)'
  parent: System.Windows.Input.MouseWheelEventArgs
  langs:
  - csharp
  name: MouseWheelEventArgs(MouseDevice,Int32,Int32)
  nameWithType: MouseWheelEventArgs.MouseWheelEventArgs(MouseDevice,Int32,Int32)
  fullName: System.Windows.Input.MouseWheelEventArgs.MouseWheelEventArgs(MouseDevice,Int32,Int32)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref> 클래스입니다."
  syntax:
    content: public MouseWheelEventArgs (System.Windows.Input.MouseDevice mouse, int timestamp, int delta);
    parameters:
    - id: mouse
      type: System.Windows.Input.MouseDevice
      description: "이 이벤트와 관련 된 마우스 장치입니다."
    - id: timestamp
      type: System.Int32
      description: "입력이 발생 한 시간입니다."
    - id: delta
      type: System.Int32
      description: "휠을 양 변경 되었습니다."
  overload: System.Windows.Input.MouseWheelEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.MouseWheelEventArgs.Delta
  id: Delta
  parent: System.Windows.Input.MouseWheelEventArgs
  langs:
  - csharp
  name: Delta
  nameWithType: MouseWheelEventArgs.Delta
  fullName: System.Windows.Input.MouseWheelEventArgs.Delta
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "마우스 휠이 변경 되는 금액을 나타내는 값을 가져옵니다."
  remarks: "이 값의 유효 상한 및 하 한 범위는 잠재적으로 장치 구현이 나 이벤트를 발생 하 고 지정 되지 않은 하는 다른 호출자에 게 제공 됩니다."
  example:
  - "The following example moves a <xref:System.Windows.Controls.TextBox> up if the mouse wheel Delta is positive and moves the <xref:System.Windows.Controls.TextBox> down if the mouse wheel Delta is negative. The <xref:System.Windows.Controls.TextBox> is attached to a <xref:System.Windows.Controls.Canvas>.  \n  \n [!code-vb[mousesnippetsample#MouseWheelDelta](~/add/codesnippet/visualbasic/mousesnippetsample/window1.xaml.vb#mousewheeldelta)]\n [!code-cs[mousesnippetsample#MouseWheelDelta](~/add/codesnippet/csharp/MouseSnippetSample/Window1.xaml.cs#mousewheeldelta)]"
  syntax:
    content: public int Delta { get; }
    return:
      type: System.Int32
      description: "휠을 양 변경 되었습니다. 이 기간은 (사용자 반대쪽) 위쪽 방향으로 마우스 휠을 돌릴 경우 더하거나 빼는 (사용자)을 향해 아래로 방향으로 마우스 휠을 회전 하는 경우입니다."
  overload: System.Windows.Input.MouseWheelEventArgs.Delta*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  id: InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.MouseWheelEventArgs
  langs:
  - csharp
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: MouseWheelEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(Delegate,Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이벤트 시스템 효율성을 높일 수 있는 형식별 방법으로 이벤트 처리기를 호출 합니다."
  remarks: "이 구현와으로 <xref:System.Windows.Input.MouseWheelEventHandler>다음 호출 합니다.</xref:System.Windows.Input.MouseWheelEventHandler> 제네릭 처리기 캐스팅 이 구현 패턴 및는 이유에 대 한 내용은 참조 하십시오. <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>및 [라우트된 이벤트 개요](~/add/includes/ajax-current-ext-md.md).</xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>"
  syntax:
    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);
    parameters:
    - id: genericHandler
      type: System.Delegate
      description: "제네릭 처리기 유형별 방식에서으로 호출입니다."
    - id: genericTarget
      type: System.Object
      description: "대상 처리기가 호출입니다."
  overload: System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.MouseEventArgs
  isExternal: false
  name: System.Windows.Input.MouseEventArgs
- uid: System.Windows.Input.MouseWheelEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Int32)
  parent: System.Windows.Input.MouseWheelEventArgs
  isExternal: false
  name: MouseWheelEventArgs(MouseDevice,Int32,Int32)
  nameWithType: MouseWheelEventArgs.MouseWheelEventArgs(MouseDevice,Int32,Int32)
  fullName: System.Windows.Input.MouseWheelEventArgs.MouseWheelEventArgs(MouseDevice,Int32,Int32)
- uid: System.Windows.Input.MouseDevice
  parent: System.Windows.Input
  isExternal: false
  name: MouseDevice
  nameWithType: MouseDevice
  fullName: System.Windows.Input.MouseDevice
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Input.MouseWheelEventArgs.Delta
  parent: System.Windows.Input.MouseWheelEventArgs
  isExternal: false
  name: Delta
  nameWithType: MouseWheelEventArgs.Delta
  fullName: System.Windows.Input.MouseWheelEventArgs.Delta
- uid: System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.MouseWheelEventArgs
  isExternal: false
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: MouseWheelEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(Delegate,Object)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.MouseWheelEventArgs.#ctor*
  parent: System.Windows.Input.MouseWheelEventArgs
  isExternal: false
  name: MouseWheelEventArgs
  nameWithType: MouseWheelEventArgs.MouseWheelEventArgs
- uid: System.Windows.Input.MouseWheelEventArgs.Delta*
  parent: System.Windows.Input.MouseWheelEventArgs
  isExternal: false
  name: Delta
  nameWithType: MouseWheelEventArgs.Delta
- uid: System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler*
  parent: System.Windows.Input.MouseWheelEventArgs
  isExternal: false
  name: InvokeEventHandler
  nameWithType: MouseWheelEventArgs.InvokeEventHandler
