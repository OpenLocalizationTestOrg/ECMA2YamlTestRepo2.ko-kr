### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.ReflectionPermission
  id: ReflectionPermission
  children:
  - System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)
  - System.Security.Permissions.ReflectionPermission.Copy
  - System.Security.Permissions.ReflectionPermission.Flags
  - System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.ReflectionPermission.IsUnrestricted
  - System.Security.Permissions.ReflectionPermission.ToXml
  - System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: ReflectionPermission
  nameWithType: ReflectionPermission
  fullName: System.Security.Permissions.ReflectionPermission
  type: Class
  summary: "Public이 아닌 형식과 멤버를 통해에 대 한 액세스 제어는 <xref href=&quot;System.Reflection&quot;> </xref> Api입니다. 일부 기능을 제어는 <xref href=&quot;System.Reflection.Emit&quot;> </xref> Api입니다."
  remarks: "ReflectionPermission, 없이 코드가 리플렉션을 사용 하 여 개체의 공용 멤버에만 액세스할 수 있습니다. ReflectionPermission 및 적절 한 코드 <xref:System.Security.Permissions.ReflectionPermissionFlag>플래그에 액세스할 수는 `protected` 및 `private` 개체의 멤버입니다.</xref:System.Security.Permissions.ReflectionPermissionFlag>      > [!CAUTION] > ReflectionPermission public이 아닌 형식과 멤버에 액세스할 수 있습니다, 때문에 부여 하지 않으면 ReflectionPermission 인터넷 코드를 제외 하 고 있는 것이 좋습니다는 <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>플래그.</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> <xref:System.Security.Permissions.ReflectionPermissionFlag>public이 아닌 멤버와 public이 아닌 멤버의 권한 부여 집합, 같아야 하는 제한 또는 public이 아닌 멤버에 액세스 하는 코드의 권한 부여 집합의 하위 집합에 대 한 액세스를 허용 합니다.</xref:System.Security.Permissions.ReflectionPermissionFlag>       리플렉션의 특정 기능은 디버그 기호 내보내기 등 내보내기와 ReflectionPermission 필요는 <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>플래그.</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>       자세한 내용은 참조는 <xref:System.Security.Permissions.ReflectionPermissionFlag>열거형.</xref:System.Security.Permissions.ReflectionPermissionFlag>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ReflectionPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: ReflectionPermission(PermissionState)
  nameWithType: ReflectionPermission.ReflectionPermission(PermissionState)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref> 클래스 지정 된 대로 완전 제한 또는 무제한 권한을 사용 합니다."
  remarks: "완전 제한 중 하나를 생성 (`None`) 또는 `Unrestricted` 메타 데이터에 액세스 합니다."
  example:
  - "The following code example shows the use of the ReflectionPermission constructor. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#7](~/add/codesnippet/visualbasic/a6514c98-a52a-4b79-a783-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#7](~/add/codesnippet/csharp/a6514c98-a52a-4b79-a783-_1.cs)]"
  syntax:
    content: public ReflectionPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "중 하나는 <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref> 값입니다."
  overload: System.Security.Permissions.ReflectionPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> state </code> 매개 변수의 유효한 값이 아닙니다 <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)
  id: '#ctor(System.Security.Permissions.ReflectionPermissionFlag)'
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: ReflectionPermission(ReflectionPermissionFlag)
  nameWithType: ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref> 지정 된 액세스는 클래스입니다."
  remarks: ''
  example:
  - "The following code example shows the use of the ReflectionPermission constructor. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#8](~/add/codesnippet/visualbasic/d03b017b-73f9-4633-80a5-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#8](~/add/codesnippet/csharp/d03b017b-73f9-4633-80a5-_1.cs)]"
  syntax:
    content: public ReflectionPermission (System.Security.Permissions.ReflectionPermissionFlag flag);
    parameters:
    - id: flag
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "중 하나는 <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;> </xref> 값입니다."
  overload: System.Security.Permissions.ReflectionPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> flag </code> 매개 변수의 유효한 값이 아닙니다 <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Copy
  id: Copy
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: ReflectionPermission.Copy()
  fullName: System.Security.Permissions.ReflectionPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "만들고 현재 사용 권한의 동일한 복사본을 반환 합니다."
  remarks: "사용 권한의 복사본은 원래 사용 권한과 리소스에 동일한 액세스를 권한을 나타냅니다."
  example:
  - "The following code example shows the behavior of the Copy method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#5](~/add/codesnippet/visualbasic/m-system.security.permis_6_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#5](~/add/codesnippet/csharp/m-system.security.permis_6_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "현재 사용 권한의 복사본입니다."
  overload: System.Security.Permissions.ReflectionPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Flags
  id: Flags
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Flags
  nameWithType: ReflectionPermission.Flags
  fullName: System.Security.Permissions.ReflectionPermission.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "현재 사용 권한에 대해 허용 된 리플렉션 형식을 가져오거나 설정 합니다."
  remarks: ''
  example:
  - "The following code example shows the use of the Flags property. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/visualbasic/p-system.security.permis_7_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/csharp/p-system.security.permis_7_1.cs)]"
  syntax:
    content: public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }
    return:
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "현재 사용 권한의 설정 플래그입니다."
  overload: System.Security.Permissions.ReflectionPermission.Flags*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "이 속성에 잘못 된 값을 설정 하려고 시도 합니다. 참조 <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;> </xref> 유효한 값에 대 한 합니다."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: ReflectionPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.ReflectionPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "지정 된 상태의 XML 인코딩을 사용 권한을 다시 만듭니다."
  remarks: ''
  example:
  - "The following code example shows the behavior of the FromXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/visualbasic/31379e48-984f-4b70-8613-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/csharp/31379e48-984f-4b70-8613-_1.cs)]"
  syntax:
    content: public override void FromXml (System.Security.SecurityElement esd);
    parameters:
    - id: esd
      type: System.Security.SecurityElement
      description: "XML 사용 권한을 다시 만드는 데 사용할 인코딩입니다."
  overload: System.Security.Permissions.ReflectionPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>esd</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> esd </code> 매개 변수가 올바른 권한 요소가 아닙니다.       -또는- <code> esd </code> 매개 변수의 버전 번호가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: ReflectionPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "만들고 있는 현재 사용 권한 및 지정한 사용 권한의 공통 사용 권한을 반환 합니다."
  remarks: "두 사용 권한의 공통 사항에는 모두 공통으로 설명 하는 작업 집합을 설명 하는 권한입니다. 원래 사용 권한을 모두 전달 하는 요구만 교집합에 전달 합니다."
  example:
  - "The following code example shows the behavior of the Intersect method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#4](~/add/codesnippet/visualbasic/0231533f-ad3c-4735-a9a6-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#4](~/add/codesnippet/csharp/0231533f-ad3c-4735-a9a6-_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "현재 사용 권한 집합과 교차 하는 사용 권한입니다. 현재 사용 권한과 동일한 형식 이어야 합니다."
    return:
      type: System.Security.IPermission
      description: "현재 사용 권한 및 지정한 사용 권한의의 교차 부분을 나타내는 새 사용 권한. 이 새로운 사용 권한은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 교집합이 비어 있는 경우."
  overload: System.Security.Permissions.ReflectionPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code> 매개 변수가 않습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 아니고 현재 사용 권한과 동일한 형식이 있습니다."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: ReflectionPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "현재 사용 권한이 지정된 된 사용 권한의 하위 집합 인지 확인 합니다."
  remarks: "현재 권한은 현재 사용 권한이 지정된 된 사용 하 여 완전히 포함 된 작업의 집합을 지정 하는 경우 지정된 된 사용 권한의 하위 집합입니다. 예를 들어 c:\\example.txt 있는 사용 권한을의 하위 집합인 c: \\에 대 한 액세스를 나타내는 사용 권한의\\\\합니다. 이 메서드가 반환 하는 경우 `true`, 현재 사용 권한과 동일한 액세스 보호 된 리소스에 지정된 된 사용은 보다를 나타냅니다."
  example:
  - "The following code example shows the behavior of the IsSubsetOf method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/visualbasic/4d20fd34-7dad-48da-8000-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/csharp/4d20fd34-7dad-48da-8000-_1.cs)]"
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "권한 하위 집합 관계에 대해 테스트 하는 것입니다. 이 사용 권한은 현재 권한과 동일한 형식 이어야 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 사용 권한이 지정 된 사용 권한의 하위 집합이 면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Permissions.ReflectionPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code> 매개 변수가 않습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 아니고 현재 사용 권한과 동일한 형식이 있습니다."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: ReflectionPermission.IsUnrestricted()
  fullName: System.Security.Permissions.ReflectionPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "현재 사용 권한이 제한 되지 않았는지 여부를 나타내는 값을 반환 합니다."
  remarks: "무제한 권한 권한으로 보호 하는 모든 리소스에 대 한 액세스를 나타냅니다."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 사용 권한이 제한 된; 없는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Permissions.ReflectionPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: ReflectionPermission.ToXml()
  fullName: System.Security.Permissions.ReflectionPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "사용 권한 및 현재 상태의 XML 인코딩을 만듭니다."
  remarks: ''
  example:
  - "The following code example shows the behavior of the ToXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/visualbasic/m-system.security.permis_18_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/csharp/m-system.security.permis_18_1.cs)]"
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "모든 상태 정보를 포함 하는 권한의 XML 인코딩입니다."
  overload: System.Security.Permissions.ReflectionPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: ReflectionPermission.Union(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "현재 사용 권한 및 지정된 된 사용 권한을 합한 사용 권한을 만듭니다."
  remarks: "Union에 대 한 호출의 결과는 현재 사용 권한 및 지정한 사용 권한의 둘 다로 나타나는 모든 작업을 나타내는 권한입니다. 사용 권한 중 하나를 전달 하는 모든 요청의 합집합을 통과 합니다."
  example:
  - "The following code example shows the behavior of the Union method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#3](~/add/codesnippet/visualbasic/e04a2468-b512-4092-a730-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#3](~/add/codesnippet/csharp/e04a2468-b512-4092-a730-_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "현재 사용 권한과 결합할 사용 권한 현재 사용 권한과 동일한 형식 이어야 합니다."
    return:
      type: System.Security.IPermission
      description: "현재 사용 권한 및 지정한 사용 권한의 합집합을 나타내는 새 사용 권한."
  overload: System.Security.Permissions.ReflectionPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> other </code> 매개 변수가 않습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 아니고 현재 사용 권한과 동일한 형식이 있습니다."
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ReflectionPermission(PermissionState)
  nameWithType: ReflectionPermission.ReflectionPermission(PermissionState)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ReflectionPermission(ReflectionPermissionFlag)
  nameWithType: ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
- uid: System.Security.Permissions.ReflectionPermissionFlag
  parent: System.Security.Permissions
  isExternal: false
  name: ReflectionPermissionFlag
  nameWithType: ReflectionPermissionFlag
  fullName: System.Security.Permissions.ReflectionPermissionFlag
- uid: System.Security.Permissions.ReflectionPermission.Copy
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Copy()
  nameWithType: ReflectionPermission.Copy()
  fullName: System.Security.Permissions.ReflectionPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.ReflectionPermission.Flags
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermission.Flags
  fullName: System.Security.Permissions.ReflectionPermission.Flags
- uid: System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: ReflectionPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.ReflectionPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: ReflectionPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Intersect(IPermission)
- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: ReflectionPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: ReflectionPermission.IsUnrestricted()
  fullName: System.Security.Permissions.ReflectionPermission.IsUnrestricted()
- uid: System.Security.Permissions.ReflectionPermission.ToXml
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ToXml()
  nameWithType: ReflectionPermission.ToXml()
  fullName: System.Security.Permissions.ReflectionPermission.ToXml()
- uid: System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: ReflectionPermission.Union(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Union(IPermission)
- uid: System.Security.Permissions.ReflectionPermission.#ctor*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ReflectionPermission
  nameWithType: ReflectionPermission.ReflectionPermission
- uid: System.Security.Permissions.ReflectionPermission.Copy*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Copy
  nameWithType: ReflectionPermission.Copy
- uid: System.Security.Permissions.ReflectionPermission.Flags*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermission.Flags
- uid: System.Security.Permissions.ReflectionPermission.FromXml*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: FromXml
  nameWithType: ReflectionPermission.FromXml
- uid: System.Security.Permissions.ReflectionPermission.Intersect*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Intersect
  nameWithType: ReflectionPermission.Intersect
- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: ReflectionPermission.IsSubsetOf
- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: ReflectionPermission.IsUnrestricted
- uid: System.Security.Permissions.ReflectionPermission.ToXml*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ToXml
  nameWithType: ReflectionPermission.ToXml
- uid: System.Security.Permissions.ReflectionPermission.Union*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Union
  nameWithType: ReflectionPermission.Union
