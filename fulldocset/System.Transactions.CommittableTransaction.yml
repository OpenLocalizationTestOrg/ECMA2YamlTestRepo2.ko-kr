### YamlMime:ManagedReference
items:
- uid: System.Transactions.CommittableTransaction
  id: CommittableTransaction
  children:
  - System.Transactions.CommittableTransaction.#ctor
  - System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  - System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  - System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  - System.Transactions.CommittableTransaction.Commit
  - System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  - System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  - System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  langs:
  - csharp
  name: CommittableTransaction
  nameWithType: CommittableTransaction
  fullName: System.Transactions.CommittableTransaction
  type: Class
  summary: "커밋할 수 있는 트랜잭션에 대해 설명합니다."
  remarks: "CommittableTransaction 클래스를 사용 하지 않고 트랜잭션을 사용 하도록 응용 프로그램에 대 한 명시적으로 제공 된 <xref:System.Transactions.TransactionScope>암시적으로 클래스.</xref:System.Transactions.TransactionScope> 와 달리는 <xref:System.Transactions.TransactionScope>클래스, 응용 프로그램 기록기를 명시적으로 호출 하는 데 필요한는 <xref:System.Transactions.CommittableTransaction.Commit%2A>및 <xref:System.Transactions.Transaction.Rollback%2A>커밋하거나 트랜잭션을 중단 하 고 메서드.</xref:System.Transactions.Transaction.Rollback%2A> </xref:System.Transactions.CommittableTransaction.Commit%2A> </xref:System.Transactions.TransactionScope> 그러나 작성자만 콘텐츠 팩 트랜잭션의 트랜잭션을 커밋할 수 있습니다. 따라서, 커밋할 수 있는 트랜잭션에의 복사본을 얻은 <xref:System.Transactions.Transaction.Clone%2A>메서드는 커밋할 수 없습니다.</xref:System.Transactions.Transaction.Clone%2A>      > [!NOTE] > 암시적 트랜잭션을 사용 하 여 만드는 것이 좋습니다.는 <xref:System.Transactions.TransactionScope>클래스, 앰비언트 트랜잭션 컨텍스트에 자동으로 관리 되도록.</xref:System.Transactions.TransactionScope> 또한 사용 해야는 <xref:System.Transactions.TransactionScope>및 <xref:System.Transactions.DependentTransaction>여러 함수 호출이 나 여러 스레드 호출에서 동일한 트랜잭션 사용 해야 하는 응용 프로그램에 대 한 클래스입니다.</xref:System.Transactions.DependentTransaction> </xref:System.Transactions.TransactionScope> 이 모델에 대 한 자세한 내용은 참조는 [구현 하는 암시적 트랜잭션을 사용 하 여 트랜잭션 범위](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) 항목입니다.       CommittableTransaction 만드는 사용자 코드에서 실행 되는 앰비언트 트랜잭션을 자동으로 설정 하지 않습니다. 가져오거나 정적을 호출 하 여 앰비언트 트랜잭션을 설정할 수 있습니다 <xref:System.Transactions.Transaction.Current%2A>은 전역 <xref:System.Transactions.Transaction>개체입니다.</xref:System.Transactions.Transaction> </xref:System.Transactions.Transaction.Current%2A> 앰비언트 트랜잭션에 대 한 자세한 내용은의 &quot;Managing 트랜잭션 흐름 TransactionScopeOption를 사용 하 여&quot; 섹션을 참조 하십시오.는 [구현 하는 암시적 트랜잭션을 사용 하 여 트랜잭션 범위](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) 항목입니다. 앰비언트 트랜잭션이 설정 되지 않은 경우 리소스 관리자에 대 한 작업 해당 트랜잭션의 일부가 아닙니다. 명시적으로 설정 하 고 리소스 관리자 올바른 트랜잭션 컨텍스트 내에서 작동 하도록 앰비언트 트랜잭션이 다시 설정 해야 합니다.       CommittableTransaction의 커밋된 될 때까지 트랜잭션과 관련된 된 모든 리소스가 잠겨 있습니다.       CommittableTransaction 개체를 다시 사용할 수 없습니다. 커밋 또는 롤백 되었는지가, 되 면 트랜잭션에서 다시 사용 하거나 현재 앰비언트 트랜잭션 컨텍스트로 설정 될 수 없습니다."
  example:
  - "The following sample creates two new instances of CommittableTransaction, commits and rolls back them respectively.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: 'public sealed class CommittableTransaction : System.Transactions.Transaction, IAsyncResult'
  inheritance:
  - System.Object
  - System.Transactions.Transaction
  implements:
  - System.IAsyncResult
  inheritedMembers:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor
  id: '#ctor'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction()
  nameWithType: CommittableTransaction.CommittableTransaction()
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction()
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> 클래스입니다."
  remarks: ''
  example:
  - "The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> and commits it.  \n  \n [!code-cs[Tx_CommittableTx#1](~/add/codesnippet/csharp/m-system.transactions.co_1.cs)]\n [!code-vb[Tx_CommittableTx#1](~/add/codesnippet/visualbasic/m-system.transactions.co_1.vb)]"
  syntax:
    content: public CommittableTransaction ();
    parameters: []
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Windows 98, Windows 98 Second Edition 또는 Windows Millennium Edition에서 트랜잭션을 만들고 하려고 했습니다."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  id: '#ctor(System.TimeSpan)'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction(TimeSpan)
  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> 지정된 된 <code> timeout </code> 값입니다."
  syntax:
    content: public CommittableTransaction (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "중단 되기 전에 트랜잭션이 있을 수는 최대 기간입니다."
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Windows 98, Windows 98 Second Edition 또는 Windows Millennium Edition에서 트랜잭션을 만들고 하려고 했습니다."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  id: '#ctor(System.Transactions.TransactionOptions)'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction(TransactionOptions)
  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TransactionOptions)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> 지정 된 트랜잭션 옵션을 사용 하 여 클래스입니다."
  remarks: ''
  example:
  - "The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> with options, and aborts it.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public CommittableTransaction (System.Transactions.TransactionOptions options);
    parameters:
    - id: options
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> 트랜잭션 옵션을 사용 하 여 새 트랜잭션을 나타내는 구조입니다."
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Windows 98, Windows 98 Second Edition 또는 Windows Millennium Edition에서 트랜잭션을 만들고 하려고 했습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>options</code>잘못 되었습니다."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  id: BeginCommit(System.AsyncCallback,System.Object)
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: BeginCommit(AsyncCallback,Object)
  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback,Object)
  fullName: System.Transactions.CommittableTransaction.BeginCommit(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "트랜잭션을 커밋하는 비동기적으로 시도 시작 합니다."
  remarks: "이 메서드는 트랜잭션이 완료 되기 전에 즉시 반환 합니다. 트랜잭션 후 다른 스레드에서 커밋 및 `asyncCallback` 완료 되지 않았을 때 대리자가 호출 됩니다. 이 메서드가 호출 된 후 나타나지 않으면 트랜잭션 결과 <xref:System.Transactions.CommittableTransaction.EndCommit%2A>.</xref:System.Transactions.CommittableTransaction.EndCommit%2A> 를 호출 하기 전에      > [!NOTE] >는 커밋 프로세스가이 메서드 호출 내 동기적으로 완료 될 수 있습니다."
  syntax:
    content: public IAsyncResult BeginCommit (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>해당 트랜잭션이 완료 될 때 호출 되는 대리자입니다.</xref:System.AsyncCallback> 이 매개 변수 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>,이 경우 응용 프로그램은 트랜잭션 완료의 알림을 받지 않습니다. 대신, 응용 프로그램을 사용 해야 합니다는 <xref:System.IAsyncResult>완료 여부를 확인 하 고 대기, 인터페이스 또는 호출 <xref:System.Transactions.CommittableTransaction.EndCommit*>완료를 기다리는.</xref:System.Transactions.CommittableTransaction.EndCommit*> </xref:System.IAsyncResult>"
    - id: asyncState
      type: System.Object
      description: "개체에 연결 된 비동기 커밋과 임의의 상태 정보를 포함 될 수 있습니다. 이 개체는 콜백에 전달 되 고에서 해석 되지 않습니다 <xref href=&quot;System.Transactions&quot;> </xref>합니다. Null 참조일 수 있습니다."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>을 비동기 작업의 상태를 확인 하거나 작업이 완료 될 때까지 대기 하는 호출자가 사용할 수 있는 인터페이스입니다.</xref:System.IAsyncResult>"
  overload: System.Transactions.CommittableTransaction.BeginCommit*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.Commit
  id: Commit
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: CommittableTransaction.Commit()
  fullName: System.Transactions.CommittableTransaction.Commit()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "트랜잭션을 커밋하는 시도 합니다."
  remarks: "이 메서드는 트랜잭션에 참여 하도록 등록 된 모든 개체 폴링을 수행 하 고 독립적으로 커밋 또는 트랜잭션을 여부를 나타낼 수 있습니다. 트랜잭션을 선택한 참가 요소 롤백됩니다 않으며이 메서드는 <xref:System.Transactions.TransactionException>예외.</xref:System.Transactions.TransactionException> 이 트랜잭션에 대 한 일반적으로 발생 하 고 코드를 catch 하 고 이러한 예외를 처리 해야 합니다.       커밋 및 <xref:System.Transactions.CommittableTransaction.EndCommit%2A>트랜잭션 처리의 첫 번째 단계 완료 될 때까지 차단 합니다.</xref:System.Transactions.CommittableTransaction.EndCommit%2A> 첫 번째 단계는 모든 리소스 관리자 한 후 종료 하 고 트랜잭션에 인 리스트 먼 트 트랜잭션 결과에 투표 했 고 <xref:System.Transactions.TransactionManager>가 지 속력 있게 커밋하거나 트랜잭션을 중단 하 고 결정 됩니다.</xref:System.Transactions.TransactionManager> 처리의 두 번째 단계는 항상 비동기입니다. 따라서은 커밋된 데이터를 바로에서 지정된 된 트랜잭션 내에서 사용할 수 있다는 즉시 나중에이 데이터를 다른 트랜잭션이 사용 하지 않을 때 아닙니다.       이 메서드 차단 트랜잭션 처리의 첫 번째 단계 완료 될 때까지, 매우 주의 해야는 Windows Form (WinForm) 응용 프로그램 또는 교착 상태에서이 메서드를 사용 하는 경우 발생할 수 있습니다 때문에. (예: 단추 클릭), 하나의 WinForm 컨트롤 이벤트 내에서이 메서드를 호출 하 고 동기를 사용 하는 경우 <xref:System.Windows.Forms.Control.Invoke%2A>컨트롤 교착 상태가 발생 하는 트랜잭션을 처리 하는 동안 일부 UI 작업 (예를 들어 변경 색)을 수행 하는 메서드.</xref:System.Windows.Forms.Control.Invoke%2A> 때문에 이것이 <xref:System.Windows.Forms.Control.Invoke%2A>메서드는 동기적 이므로 UI 스레드 작업을 완료 될 때까지 작업자 스레드를 차단 합니다.</xref:System.Windows.Forms.Control.Invoke%2A> 시나리오에서 UI 스레드 또한 트랜잭션을 커밋하는 작업자 스레드 대기 됩니다. 결과를 계속할 수 없는 및 범위는 커밋이 완료에 대 한 무기한 대기입니다. 사용 해야 <xref:System.Windows.Forms.Control.BeginInvoke%2A>대신 <xref:System.Windows.Forms.Control.Invoke%2A>비동기적이 고 교착 상태가 발생할 가능성이 적으므로 이기 때문에 가능 합니다.</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control.BeginInvoke%2A>"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Transactions.CommittableTransaction.Commit*
  exceptions:
  - type: System.Transactions.TransactionInDoubtException
    commentId: T:System.Transactions.TransactionInDoubtException
    description: "트랜잭션에 대해 커밋을 호출 되 고 트랜잭션이 트랜잭션이 <xref href=&quot;System.Transactions.TransactionStatus&quot;> </xref>합니다."
  - type: System.Transactions.TransactionAbortedException
    commentId: T:System.Transactions.TransactionAbortedException
    description: "커밋 라고 하 고 트랜잭션이 처음으로 롤백합니다."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  id: EndCommit(System.IAsyncResult)
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: EndCommit(IAsyncResult)
  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)
  fullName: System.Transactions.CommittableTransaction.EndCommit(IAsyncResult)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "트랜잭션을 커밋하는 비동기적으로 시도 끝냅니다."
  remarks: "에 대 한 매개 변수로 지정 된 콜백 대리자에서이 메서드를 호출 해야는 <xref:System.Transactions.CommittableTransaction.BeginCommit%2A>메서드를 비동기 커밋과 관련 된 정리 작업을 완료 합니다.</xref:System.Transactions.CommittableTransaction.BeginCommit%2A> 또한이 메서드는 대리자를 기다리지 않고 초기 호출할 수 있습니다. 이 메서드를 호출 하는 시점에서는 트랜잭션이 완료 되지 않은 경우이 메서드는 완료 되기를 기다립니다.      > [!CAUTION] >는 <xref:System.IAsyncResult.CompletedSynchronously%2A>속성에서 반환 되 `asyncResult` 항상 `false`작업이 동기적으로 완료 하는 경우에.</xref:System.IAsyncResult.CompletedSynchronously%2A>       <xref:System.Transactions.CommittableTransaction.Commit%2A>및 트랜잭션 처리의 첫 번째 단계 완료 될 때까지 EndCommit 블록을 추가 합니다.</xref:System.Transactions.CommittableTransaction.Commit%2A> 첫 번째 단계는 모든 리소스 관리자 한 후 종료 하 고 트랜잭션에 인 리스트 먼 트 트랜잭션 결과에 투표 했 고 <xref:System.Transactions.TransactionManager>가 지 속력 있게 커밋하거나 트랜잭션을 중단 하 고 결정 됩니다.</xref:System.Transactions.TransactionManager> 처리의 두 번째 단계는 항상 비동기입니다. 따라서은 커밋된 데이터를 바로에서 지정된 된 트랜잭션 내에서 사용할 수 있다는 즉시 나중에이 데이터를 다른 트랜잭션이 사용 하지 않을 때 아닙니다."
  syntax:
    content: public void EndCommit (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>비동기 커밋과 관련 된 개체입니다.</xref:System.IAsyncResult>"
  overload: System.Transactions.CommittableTransaction.EndCommit*
  exceptions:
  - type: System.Transactions.TransactionAbortedException
    commentId: T:System.Transactions.TransactionAbortedException
    description: "<xref:System.Transactions.CommittableTransaction.BeginCommit*>호출 되 고 트랜잭션이 처음으로 롤백합니다.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  id: System#IAsyncResult#AsyncState
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "마지막 매개 변수로 제공 된 개체를 가져옵니다는 <xref:System.Transactions.CommittableTransaction.BeginCommit*>메서드를 호출 합니다.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  syntax:
    content: object System.IAsyncResult.AsyncState { get; }
    return:
      type: System.Object
      description: "마지막 매개 변수로 제공 된 개체는 <xref:System.Transactions.CommittableTransaction.BeginCommit*>메서드를 호출 합니다.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  id: System#IAsyncResult#AsyncWaitHandle
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "가져옵니다는 <xref:System.Threading.WaitHandle>비동기 작업이 완료 되기를 기다리는 데 사용 되는.</xref:System.Threading.WaitHandle>"
  syntax:
    content: System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "A <xref:System.Threading.WaitHandle>비동기 작업이 완료 되기를 기다리는 데 사용 되는.</xref:System.Threading.WaitHandle>"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  id: System#IAsyncResult#CompletedSynchronously
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "비동기 커밋 작업이 동기적으로 완료 여부를 나타내는 표시를 가져옵니다."
  syntax:
    content: bool System.IAsyncResult.CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>비동기 커밋 작업이 동기적으로; 완료 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 이 속성은 항상 반환 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 작업이 동기적으로 완료 하는 경우에 합니다."
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  id: System#IAsyncResult#IsCompleted
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "비동기 커밋 작업이 완료 되었는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: bool System.IAsyncResult.IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 작업을 완료 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Transactions.Transaction
  isExternal: false
  name: System.Transactions.Transaction
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Transactions.TransactionInDoubtException
  parent: System.Transactions
  isExternal: false
  name: TransactionInDoubtException
  nameWithType: TransactionInDoubtException
  fullName: System.Transactions.TransactionInDoubtException
- uid: System.Transactions.TransactionAbortedException
  parent: System.Transactions
  isExternal: false
  name: TransactionAbortedException
  nameWithType: TransactionAbortedException
  fullName: System.Transactions.TransactionAbortedException
- uid: System.Transactions.CommittableTransaction.#ctor
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction()
  nameWithType: CommittableTransaction.CommittableTransaction()
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction()
- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction(TimeSpan)
  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction(TransactionOptions)
  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TransactionOptions)
- uid: System.Transactions.TransactionOptions
  parent: System.Transactions
  isExternal: false
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: System.Transactions.TransactionOptions
- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: BeginCommit(AsyncCallback,Object)
  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback,Object)
  fullName: System.Transactions.CommittableTransaction.BeginCommit(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Transactions.CommittableTransaction.Commit
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: Commit()
  nameWithType: CommittableTransaction.Commit()
  fullName: System.Transactions.CommittableTransaction.Commit()
- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: EndCommit(IAsyncResult)
  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)
  fullName: System.Transactions.CommittableTransaction.EndCommit(IAsyncResult)
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted
- uid: System.Transactions.CommittableTransaction.#ctor*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction
  nameWithType: CommittableTransaction.CommittableTransaction
- uid: System.Transactions.CommittableTransaction.BeginCommit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: BeginCommit
  nameWithType: CommittableTransaction.BeginCommit
- uid: System.Transactions.CommittableTransaction.Commit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: Commit
  nameWithType: CommittableTransaction.Commit
- uid: System.Transactions.CommittableTransaction.EndCommit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: EndCommit
  nameWithType: CommittableTransaction.EndCommit
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
