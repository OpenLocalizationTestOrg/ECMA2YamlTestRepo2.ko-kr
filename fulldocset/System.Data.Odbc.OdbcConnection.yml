### YamlMime:ManagedReference
items:
- uid: System.Data.Odbc.OdbcConnection
  id: OdbcConnection
  children:
  - System.Data.Odbc.OdbcConnection.#ctor
  - System.Data.Odbc.OdbcConnection.#ctor(System.String)
  - System.Data.Odbc.OdbcConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.Odbc.OdbcConnection.BeginTransaction
  - System.Data.Odbc.OdbcConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Odbc.OdbcConnection.ChangeDatabase(System.String)
  - System.Data.Odbc.OdbcConnection.Close
  - System.Data.Odbc.OdbcConnection.ConnectionString
  - System.Data.Odbc.OdbcConnection.ConnectionTimeout
  - System.Data.Odbc.OdbcConnection.CreateCommand
  - System.Data.Odbc.OdbcConnection.CreateDbCommand
  - System.Data.Odbc.OdbcConnection.Database
  - System.Data.Odbc.OdbcConnection.DataSource
  - System.Data.Odbc.OdbcConnection.Dispose(System.Boolean)
  - System.Data.Odbc.OdbcConnection.Driver
  - System.Data.Odbc.OdbcConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  - System.Data.Odbc.OdbcConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.Odbc.OdbcConnection.GetSchema
  - System.Data.Odbc.OdbcConnection.GetSchema(System.String)
  - System.Data.Odbc.OdbcConnection.GetSchema(System.String,System.String[])
  - System.Data.Odbc.OdbcConnection.InfoMessage
  - System.Data.Odbc.OdbcConnection.Open
  - System.Data.Odbc.OdbcConnection.ReleaseObjectPool
  - System.Data.Odbc.OdbcConnection.ServerVersion
  - System.Data.Odbc.OdbcConnection.State
  - System.Data.Odbc.OdbcConnection.System#ICloneable#Clone
  langs:
  - csharp
  name: OdbcConnection
  nameWithType: OdbcConnection
  fullName: System.Data.Odbc.OdbcConnection
  type: Class
  summary: "데이터 원본에 대해 열린 연결을 나타냅니다."
  remarks: "OdbcConnection 개체를 고유 하 게 연결할을 연결 문자열 또는 ODBC 데이터 원본 이름 (DSN)를 사용 하 여 만든 데이터 소스에 나타냅니다. 클라이언트/서버 데이터베이스 시스템 이므로 네트워크 연결 서버에 해당 합니다. 네이티브 ODBC 드라이버에서 지 원하는 기능에 따라 일부 메서드나 OdbcConnection 개체의 속성을 사용할 수 없습니다 수 있습니다.       OdbcConnection 개체가 ODBC 환경 및 연결 핸들 등의 네이티브 리소스를 사용합니다. 항상 명시적으로를 호출 하 여 모든 OdbcConnection 개체를 닫아야 <xref:System.Data.Odbc.OdbcConnection.Close%2A>또는 **Dispose** 는 OdbcConnection 하기 전에 개체 라인으로 전환 범위를 벗어난 내에서 연결을 배치 하 여 한 `Using` 문.</xref:System.Data.Odbc.OdbcConnection.Close%2A> 이렇게 하지 않으면 가비지 컬렉션에 이러한 네이티브 리소스를 해제 상태로 유지 합니다. 그 수 하지 즉시 해제 합니다. 이 차례로 수 결국 리소스가 부족 하거나 최대 한도 도달 하는 기본 드라이버입니다. 일시적인 오류가 발생 되었습니다. 예를 들어 발생할 수 있습니다 `Maximum Connections` -많은 연결이 가비지 수집기에 의해 삭제를 기다리고 있는 동안 합니다. 연결을 명시적으로 닫는 확장성 하 고 전체 응용 프로그램 성능을 향상 시키는 네이티브 리소스를 보다 효율적으로 사용할 수 있습니다.      > [!NOTE] > 고성능 응용 프로그램을 배포 하려면 하면 자주 연결 풀링을 사용 해야 합니다. 그러나.NET Framework Data Provider for ODBC를 사용 하면 않아도 공급자 자동으로이 관리 하기 때문에 연결 풀링을 사용할 수 있도록 합니다.       한 경우의 `Execute` 의 메서드는 <xref:System.Data.Odbc.OdbcCommand>클래스 하면 심각한 <xref:System.Data.Odbc.OdbcException>(예: SQL Server 심각도 수준이 20 이상인)는 OdbcConnection 닫힐 수 있습니다.</xref:System.Data.Odbc.OdbcException> </xref:System.Data.Odbc.OdbcCommand> 그러나 사용자는 다시 연결 하 고 계속할 수 있습니다.       OdbcConnection 개체의 인스턴스를 생성 하는 응용 프로그램 설정 선언적 이거나 명령 보안 요청에 의해 코드에 충분 한 권한을 갖도록 모든 직접 및 간접 호출자가 필요할 수 있습니다. OdbcConnection 사용 하 여 보안 요청을 만듭니다는 <xref:System.Data.Odbc.OdbcPermission>개체입니다.</xref:System.Data.Odbc.OdbcPermission> 사용자가 해당 코드를 사용 하 여 충분 한 권한이 있는지 확인할 수는 <xref:System.Data.Odbc.OdbcPermissionAttribute>개체입니다.</xref:System.Data.Odbc.OdbcPermissionAttribute> 사용자와 관리자가 컴퓨터, 사용자 및 엔터프라이즈 수준에서 보안 정책을 수정 하려면 코드 액세스 보안 정책 도구 (Caspol.exe) 사용할 수 있습니다. 자세한 내용은 참조 [코드 액세스 보안 및 ADO.NET](~/add/includes/ajax-current-ext-md.md)합니다.       데이터 소스에서 경고 및 정보 메시지를 처리 하는 방법에 대 한 자세한 내용은 참조 [연결 이벤트](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcCommand> and an OdbcConnection. The OdbcConnection is opened and set as the <xref:System.Data.Odbc.OdbcCommand.Connection%2A> property. The example then calls <xref:System.Data.Odbc.OdbcCommand.ExecuteNonQuery%2A>, and closes the connection. To accomplish this, the <xref:System.Data.Odbc.OdbcCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is an SQL INSERT statement.  \n  \n [!code-vb[Classic WebData OdbcConnection#1](~/add/codesnippet/visualbasic/t-system.data.odbc.odbcc_3_1.vb)]\n [!code-cs[Classic WebData OdbcConnection#1](~/add/codesnippet/csharp/t-system.data.odbc.odbcc_3_1.cs)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("InfoMessage")]

      public sealed class OdbcConnection : System.Data.Common.DbConnection, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbConnection
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbConnection.DbProviderFactory
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.#ctor
  id: '#ctor'
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: OdbcConnection()
  nameWithType: OdbcConnection.OdbcConnection()
  fullName: System.Data.Odbc.OdbcConnection.OdbcConnection()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.Odbc.OdbcConnection&quot;> </xref> 클래스입니다."
  remarks: "새 인스턴스 <xref:System.Data.Odbc.OdbcConnection>만들어지면 쓰기 전용 및 읽기 전용 속성의 관련된 키워드를 사용 하 여 구체적으로 설정 되어 있지 않으면 다음 초기 값으로 설정 됩니다는 <xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A>속성.</xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A> </xref:System.Data.Odbc.OdbcConnection>      | 속성 | 초기 값 |   |----------------|-------------------|   | <xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A>| 빈 문자열 (&quot;&quot;) |   | <xref:System.Data.Odbc.OdbcConnection.ConnectionTimeout%2A>|&15; |   | <xref:System.Data.Odbc.OdbcConnection.Database%2A>| 빈 문자열 (&quot;&quot;) |       사용 하 여 이러한 속성에 대 한 값을 변경할 수는 <xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A>속성.</xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A> </xref:System.Data.Odbc.OdbcConnection.Database%2A> </xref:System.Data.Odbc.OdbcConnection.ConnectionTimeout%2A> </xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A>"
  example:
  - "The following example creates and opens an <xref:System.Data.Odbc.OdbcConnection>.  \n  \n [!code-cs[Classic WebData OdbcConnection.OdbcConnection#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcc_9_1.cs)]\n [!code-vb[Classic WebData OdbcConnection.OdbcConnection#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcc_9_1.vb)]"
  syntax:
    content: public OdbcConnection ();
    parameters: []
  overload: System.Data.Odbc.OdbcConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: OdbcConnection(String)
  nameWithType: OdbcConnection.OdbcConnection(String)
  fullName: System.Data.Odbc.OdbcConnection.OdbcConnection(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.Odbc.OdbcConnection&quot;> </xref> 지정 된 연결 문자열을 사용 합니다."
  remarks: "새 인스턴스 <xref:System.Data.Odbc.OdbcConnection>만들어지면 쓰기 전용 및 읽기 전용 속성의 관련된 키워드를 사용 하 여 구체적으로 설정 되어 있지 않으면 다음 초기 값으로 설정 됩니다는 <xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A>속성.</xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A> </xref:System.Data.Odbc.OdbcConnection>      | 속성 | 초기 값 |   |----------------|-------------------|   | <xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A>| `connectionString`|   | <xref:System.Data.Odbc.OdbcConnection.ConnectionTimeout%2A>|&15; |   | <xref:System.Data.Odbc.OdbcConnection.Database%2A>| 빈 문자열 (&quot;&quot;) |       사용 하 여 이러한 속성에 대 한 값을 변경할 수는 <xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A>속성.</xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A> </xref:System.Data.Odbc.OdbcConnection.Database%2A> </xref:System.Data.Odbc.OdbcConnection.ConnectionTimeout%2A> </xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A>"
  example:
  - "The following example creates and opens an <xref:System.Data.Odbc.OdbcConnection>.  \n  \n [!code-vb[Classic WebData OdbcConnection.OdbcConnection1#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcc_3_1.vb)]\n [!code-cs[Classic WebData OdbcConnection.OdbcConnection1#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcc_3_1.cs)]"
  syntax:
    content: public OdbcConnection (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "사용 하 여 데이터 원본에 사용 되는 연결 합니다."
  overload: System.Data.Odbc.OdbcConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: OdbcConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.Odbc.OdbcConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  syntax:
    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "추가할 수 있습니다."
    return:
      type: System.Data.Common.DbTransaction
      description: "추가할 수 있습니다."
  overload: System.Data.Odbc.OdbcConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: OdbcConnection.BeginTransaction()
  fullName: System.Data.Odbc.OdbcConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "데이터 소스에서 트랜잭션을 시작합니다."
  remarks: "커밋하거나 트랜잭션을 명시적으로 사용 해야는 <xref:System.Data.Odbc.OdbcTransaction.Commit%2A>또는 <xref:System.Data.Odbc.OdbcTransaction.Rollback%2A>메서드.</xref:System.Data.Odbc.OdbcTransaction.Rollback%2A> </xref:System.Data.Odbc.OdbcTransaction.Commit%2A>       .NET Framework Data Provider for ODBC 트랜잭션 관리 모델을 올바르게 수행 되었는지 확인, 데이터 원본에서 제공 하는 다른 트랜잭션 관리 모델을 사용 하지 마십시오.      > [!NOTE] > 격리 수준을 지정 하지 않으면 격리 수준을 사용 하 고 드라이버에 의해 결정 됩니다. 격리 수준을 BeginTransaction 메서드를 지정 하려면는 오버 로드를 사용 하 여는 `isolevel` 매개 변수입니다."
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcConnection> and an <xref:System.Data.Odbc.OdbcTransaction>. It also demonstrates how to use the BeginTransaction, <xref:System.Data.Odbc.OdbcTransaction.Commit%2A>, and <xref:System.Data.Odbc.OdbcTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData OdbcConnection.BeginTransaction1#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcc_6_1.cs)]\n [!code-vb[Classic WebData OdbcConnection.BeginTransaction1#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcc_6_1.vb)]"
  syntax:
    content: public System.Data.Odbc.OdbcTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.Odbc.OdbcTransaction
      description: "새 트랜잭션을 나타내는 개체입니다."
  overload: System.Data.Odbc.OdbcConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "트랜잭션이 현재 활성 상태입니다. 병렬 트랜잭션은 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: OdbcConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Odbc.OdbcConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "지정 된 데이터 원본에서 트랜잭션을 시작 <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> 값입니다."
  remarks: "커밋하거나 트랜잭션을 명시적으로 사용 해야는 <xref:System.Data.Odbc.OdbcTransaction.Commit%2A>또는 <xref:System.Data.Odbc.OdbcTransaction.Rollback%2A>메서드.</xref:System.Data.Odbc.OdbcTransaction.Rollback%2A> </xref:System.Data.Odbc.OdbcTransaction.Commit%2A>       .NET Framework Data Provider for ODBC 트랜잭션 관리 모델을 올바르게 수행 되었는지 확인, 데이터 원본에서 제공 하는 다른 트랜잭션 관리 모델을 사용 하지 마십시오."
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcConnection> and an <xref:System.Data.Odbc.OdbcTransaction>. It also demonstrates how to use the <xref:System.Data.Odbc.OdbcConnection.BeginTransaction%2A>, <xref:System.Data.Odbc.OdbcTransaction.Commit%2A>, and <xref:System.Data.Odbc.OdbcTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData OdbcConnection.BeginTransaction1#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcc_4_1.cs)]\n [!code-vb[Classic WebData OdbcConnection.BeginTransaction1#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcc_4_1.vb)]"
  syntax:
    content: public System.Data.Odbc.OdbcTransaction BeginTransaction (System.Data.IsolationLevel isolevel);
    parameters:
    - id: isolevel
      type: System.Data.IsolationLevel
      description: "이 연결에 대 한 트랜잭션 격리 수준입니다. 격리 수준을 지정 하지 않으면 드라이버에 대 한 기본 격리 수준이 사용 됩니다."
    return:
      type: System.Data.Odbc.OdbcTransaction
      description: "새 트랜잭션을 나타내는 개체입니다."
  overload: System.Data.Odbc.OdbcConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "트랜잭션이 현재 활성 상태입니다. 병렬 트랜잭션은 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: OdbcConnection.ChangeDatabase(String)
  fullName: System.Data.Odbc.OdbcConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "연결 된 열려 있는 현재 데이터베이스 변경 <xref href=&quot;System.Data.Odbc.OdbcConnection&quot;> </xref>합니다."
  remarks: "`value` 매개 변수는 유효한 데이터베이스 이름을 포함 해야 하며 null 값, 빈 문자열을 포함할 수 없습니다 (&quot;&quot;), 또는 빈 문자로 구성 된 문자열입니다."
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcConnection> and changes the current database.  \n  \n [!code-cs[Classic WebData OdbcConnection.Database#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcc_1_1.cs)]\n [!code-vb[Classic WebData OdbcConnection.Database#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcc_1_1.vb)]"
  syntax:
    content: public override void ChangeDatabase (string value);
    parameters:
    - id: value
      type: System.String
      description: "데이터베이스 이름."
  overload: System.Data.Odbc.OdbcConnection.ChangeDatabase*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "데이터베이스 이름이 올바르지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결이 열려 있지 않습니다."
  - type: System.Data.Odbc.OdbcException
    commentId: T:System.Data.Odbc.OdbcException
    description: "데이터베이스를 변경할 수 없습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.Close
  id: Close
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: Close()
  nameWithType: OdbcConnection.Close()
  fullName: System.Data.Odbc.OdbcConnection.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "데이터 원본에 연결을 닫습니다."
  remarks: "Close 메서드가 보류 중인 모든 트랜잭션을 롤백합니다. 그런 다음 연결 풀에 대 한 연결을 해제 하거나 연결 풀링을 사용 하지 않도록 설정 하는 경우 연결을 닫습니다. 닫기를 처리 하는 동안 호출 되는 <xref:System.Data.Common.DbConnection.StateChange>이벤트를 더 추가 <xref:System.Data.Common.DbConnection.StateChange>이벤트가 발생 합니다.</xref:System.Data.Common.DbConnection.StateChange> </xref:System.Data.Common.DbConnection.StateChange>       응용 프로그램 닫기 한 번 이상 하지 않고 호출할 수 예외를 생성 합니다.      > [!NOTE] >.NET Framework Data Provider for ODBC를 사용 하면 ODBC 드라이버 관리자는 자동으로이 관리 하기 때문에 연결 풀링을 사용할 필요가 없습니다. 사용 하도록 설정 하는 방법 및 연결 풀링을 사용 하지 않도록 설정 하는 방법에 대 한 자세한 내용은 Microsoft ODBC Open Database Connectivity () 설명서를 참조 합니다.      > [!CAUTION] > Close를 호출 하지 않으면 또는 `Dispose` 연결, DataReader, 또는 다른 관리 개체에는 `Finalize` 클래스의 메서드로 합니다. 종료자에서만 클래스에 직접 속한 관리 되지 않는 리소스를 해제 해야 합니다. 클래스에 관리 되지 않는 리소스가 없는 경우 포함 되지 않습니다는 `Finalize` 클래스 정의에 메서드. 자세한 내용은 참조 [가비지 수집](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcConnection>, opens it, displays some of its properties, and then closes the connection.  \n  \n [!code-vb[Classic WebData OdbcConnection.Close#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcc_0_1.vb)]\n [!code-cs[Classic WebData OdbcConnection.Close#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcc_0_1.cs)]"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.Odbc.OdbcConnection.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: OdbcConnection.ConnectionString
  fullName: System.Data.Odbc.OdbcConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "데이터 소스를 여는 데 사용 하는 문자열을 가져오거나 설정 합니다."
  remarks: "The ConnectionString property is designed to match ODBC connection string format as closely as possible. The ConnectionString can be set only when the connection is closed, and as soon as it is set it is passed, unchanged, to the Driver Manager and the underlying driver. Therefore, the syntax for the ConnectionString must exactly match what the Driver Manager and underlying driver support.  \n  \n You can use the ConnectionString property to connect to a variety of data sources. This includes an ODBC data source name (DSN). The following example illustrates several possible connection strings.  \n  \n```  \n\"Driver={SQL Server};Server=(local);Trusted_Connection=Yes;Database=AdventureWorks;\"  \n  \n\"Driver={Microsoft ODBC for Oracle};Server=ORACLE8i7;Persist Security Info=False;Trusted_Connection=Yes\"  \n  \n\"Driver={Microsoft Access Driver (*.mdb)};DBQ=c:\\bin\\Northwind.mdb\"  \n  \n\"Driver={Microsoft Excel Driver (*.xls)};DBQ=c:\\bin\\book1.xls\"  \n  \n\"Driver={Microsoft Text Driver (*.txt; *.csv)};DBQ=c:\\bin\"  \n  \n\"DSN=dsnname\"  \n```  \n  \n> [!NOTE]\n>  The .NET Framework Data Provider for ODBC does not support the `Persist Security Info` keyword that is supported by other .NET Framework data providers. However, the ConnectionString property behaves as if `Persist Security Info` were set to `false`. This means that you cannot retrieve the password from the ConnectionString property if the connection has been opened. When the ConnectionString property is read from an <xref:System.Data.Odbc.OdbcConnection> object that has been opened, the connection string is returned minus the password. You cannot change this behavior; therefore, if the application requires the password, store it separately before calling <xref:System.Data.Odbc.OdbcConnection.Open%2A>.  \n  \n Many of the settings specified in the string have corresponding read-only properties (for example, `Server=(local)`, which corresponds to the <xref:System.Data.Odbc.OdbcConnection.DataSource%2A> property). These properties are updated after the connection is opened, except when an error is detected. In this case, none of the properties are updated. <xref:System.Data.Odbc.OdbcConnection> properties (such as <xref:System.Data.Odbc.OdbcConnection.Database%2A>) return only default settings or those settings specified in the ConnectionString.  \n  \n In the Microsoft .NET Framework version 1.0, validation of the connection string does not occur until an application calls the <xref:System.Data.Odbc.OdbcConnection.Open%2A> method. It is the responsibility of the underlying ODBC driver to validate the connection string. If the connection string contains invalid or unsupported properties, the driver may raise an <xref:System.Data.Odbc.OdbcException> at run time.  \n  \n However, in the .NET Framework version 1.1 and later versions, some basic validation of the connection string occurs as soon as you set the ConnectionString property. At that time, the data provider verifies that the connection string meets the \"keyword=value;...\" format, but it does not verify whether keywords or values are valid. The remaining verification is performed by the underlying ODBC driver when the application calls the <xref:System.Data.Odbc.OdbcConnection.Open%2A> method.  \n  \n An ODBC connection string has the following syntax:  \n  \n```  \nconnection-string ::= empty-string[;] | attribute[;] | attribute; connection-string  \nempty-string ::=  \nattribute ::= attribute-keyword=attribute-value | DRIVER=[{]attribute-value[}]  \nattribute-keyword ::= DSN | UID | PWD  \n | driver-defined-attribute-keyword  \nattribute-value ::= character-string  \ndriver-defined-attribute-keyword ::= identifier  \n```  \n  \n where `character-string` has zero or more characters; `identifier` has one or more characters; `attribute-keyword` is not case sensitive; `attribute-value` can be case sensitive; and the value of the DSN keyword does not consist only of blanks.  \n  \n Because of connection string and initialization file grammar, keywords and attribute values should be avoided that contain the characters []{}(),;?*=!@ not enclosed with braces. The value of the DSN keyword cannot consist only of blanks and should not contain leading blanks. Because of the grammar of the system information, keywords and data source names cannot contain the backslash (\\\\) character.  \n  \n Applications do not have to add braces around the attribute value after the Driver keyword unless the attribute contains a semicolon (;), in which case the braces are required. If the attribute value that the driver receives includes braces, the driver should not remove them but they should be part of the returned connection string.  \n  \n A DSN or connection string value enclosed with braces ({}) that contains any of the characters []{}(),;?*=!@ is passed intact to the driver. However, when you use these characters in a keyword, the Driver Manager returns an error when you work with file DSNs, but passes the connection string to the driver for regular connection strings. Avoid using embedded braces in a keyword value.  \n  \n The connection string may include any number of driver-defined keywords. Because the DRIVER keyword does not use information from the system, the driver must define enough keywords so that a driver can connect to a data source using only the information in the connection string. The driver defines which keywords are required to connect to the data source.  \n  \n If any keywords are repeated in the connection string, there is no guarantee which value will be selected.  \n  \n> [!NOTE]\n>  If an ODBC driver supports connection strings longer than 1024 characters, you can use a data source name (DSN) to exceed the maximum length limitation."
  syntax:
    content: public override string ConnectionString { get; set; }
    return:
      type: System.String
      description: "초기 연결을 설정 하는 데 필요한 데이터 원본 이름 등의 설정을 포함 하는 ODBC 드라이버 연결 문자열입니다. 기본값은 빈 문자열 (&quot;&quot;). 최대 길이 1024 자입니다."
  overload: System.Data.Odbc.OdbcConnection.ConnectionString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: OdbcConnection.ConnectionTimeout
  fullName: System.Data.Odbc.OdbcConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "시도 종료 하 고 오류를 생성 하기 전에 연결을 설정 하는 동안 대기할 시간을 가져오거나 설정 합니다."
  remarks: "SQL Server 및 OLE DB 용.NET Framework 데이터 공급자와 달리.NET Framework Data Provider for ODBC 지원 하지 않습니다는 연결 문자열 값으로이 속성을 설정할 유효한 ODBC 연결 키워드 이기 때문에. 연결 제한 시간을 지정 하려면 <xref:System.Data.Odbc.OdbcConnection.Open%2A>.</xref:System.Data.Odbc.OdbcConnection.Open%2A> 를 호출 하기 전에 ConnectionTimeout 속성 설정 이 ODBC를 설정 하는 `SQLSetConnectAttr` SQL_ATTR_LOGIN_TIMOUT 특성입니다."
  syntax:
    content: public int ConnectionTimeout { get; set; }
    return:
      type: System.Int32
      description: "연결이 열리기 전까지 기다릴 시간 (초) 시간입니다. 기본값은 15 초입니다."
  overload: System.Data.Odbc.OdbcConnection.ConnectionTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "설정 값이 0 보다 작은 경우"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: OdbcConnection.CreateCommand()
  fullName: System.Data.Odbc.OdbcConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "만들고 반환는 <xref href=&quot;System.Data.Odbc.OdbcCommand&quot;> </xref> 연관 된 개체는 <xref href=&quot;System.Data.Odbc.OdbcConnection&quot;> </xref>합니다."
  syntax:
    content: public System.Data.Odbc.OdbcCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.Odbc.OdbcCommand
      description: "<xref href=&quot;System.Data.Odbc.OdbcCommand&quot;> </xref> 개체입니다."
  overload: System.Data.Odbc.OdbcConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: OdbcConnection.CreateDbCommand()
  fullName: System.Data.Odbc.OdbcConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  syntax:
    content: protected override System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "추가할 수 있습니다."
  overload: System.Data.Odbc.OdbcConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.Database
  id: Database
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: Database
  nameWithType: OdbcConnection.Database
  fullName: System.Data.Odbc.OdbcConnection.Database
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "현재 데이터베이스 이름이 나 연결이 열린 후 사용할 데이터베이스의 이름을 가져옵니다."
  remarks: "처음에 데이터베이스 속성은 연결 문자열에 설정 됩니다. 데이터베이스 속성을 사용 하 여 업데이트할 수는 <xref:System.Data.Odbc.OdbcConnection.ChangeDatabase%2A>메서드.</xref:System.Data.Odbc.OdbcConnection.ChangeDatabase%2A> SQL 문을 사용 하 여 현재 데이터베이스를 변경 하면 또는 <xref:System.Data.Odbc.OdbcConnection.ChangeDatabase%2A>정보 메시지가 전송 되는 메서드와 다음 속성이 업데이트 됩니다.</xref:System.Data.Odbc.OdbcConnection.ChangeDatabase%2A>       데이터베이스 속성을 검색 하는 ODBC 함수를 호출 하는 것은 `SQLGetInfo` 와 `Attribute` 매개 변수가 SQL_ATTR_CURRENT_CATALOG로 설정 합니다."
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcConnection> and changes the current database.  \n  \n [!code-cs[Classic WebData OdbcConnection.Database#1](~/add/codesnippet/csharp/p-system.data.odbc.odbcc_1_1.cs)]\n [!code-vb[Classic WebData OdbcConnection.Database#1](~/add/codesnippet/visualbasic/p-system.data.odbc.odbcc_1_1.vb)]"
  syntax:
    content: public override string Database { get; }
    return:
      type: System.String
      description: "현재 데이터베이스의 이름입니다. 기본값은 빈 문자열 (&quot;&quot;) 연결을 열어야 합니다."
  overload: System.Data.Odbc.OdbcConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.DataSource
  id: DataSource
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: OdbcConnection.DataSource
  fullName: System.Data.Odbc.OdbcConnection.DataSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "서버 이름이 나 데이터 원본의 파일 이름을 가져옵니다."
  remarks: "DataSource 속성을 검색 하는 ODBC 함수를 호출 하는 것은 `SQLGetInfo` 와 `InfoType` 매개 변수가 SQL_SERVER_NAME로 설정 합니다."
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcConnection> and displays the backend data source name.  \n  \n [!code-vb[Classic WebData OdbcConnection.DataSource#1](~/add/codesnippet/visualbasic/p-system.data.odbc.odbcc_3_1.vb)]\n [!code-cs[Classic WebData OdbcConnection.DataSource#1](~/add/codesnippet/csharp/p-system.data.odbc.odbcc_3_1.cs)]"
  syntax:
    content: public override string DataSource { get; }
    return:
      type: System.String
      description: "서버 이름 또는 데이터 원본의 파일 이름입니다. 기본값은 빈 문자열 (&quot;&quot;) 연결을 열어야 합니다."
  overload: System.Data.Odbc.OdbcConnection.DataSource*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: OdbcConnection.Dispose(Boolean)
  fullName: System.Data.Odbc.OdbcConnection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "추가할 수 있습니다."
  overload: System.Data.Odbc.OdbcConnection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.Driver
  id: Driver
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: Driver
  nameWithType: OdbcConnection.Driver
  fullName: System.Data.Odbc.OdbcConnection.Driver
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "현재 연결에 대해 지정 된 ODBC 드라이버의 이름을 가져옵니다."
  remarks: "드라이버 속성을 검색 하는 ODBC 함수를 호출 하는 것은 `SQLGetInfo` 와 `InfoType` 매개 변수가 SQL_DRIVER_NAME로 설정 합니다."
  syntax:
    content: public string Driver { get; }
    return:
      type: System.String
      description: "ODBC 드라이버의 이름입니다. 이 일반적으로 DLL 이름 (예를 들어 Sqlsrv32.dll)입니다. 기본값은 빈 문자열 (&quot;&quot;) 연결을 열어야 합니다."
  overload: System.Data.Odbc.OdbcConnection.Driver*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  id: EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: OdbcConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.Odbc.OdbcConnection.EnlistDistributedTransaction(ITransaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "지정된 된 트랜잭션에 분산 트랜잭션으로 참여합니다."
  remarks: "새 ADO.NET 2.0에서 지원은 사용에 대 한는 <xref:System.Data.Common.DbConnection.EnlistTransaction%2A>메서드를 분산된 트랜잭션에 참여 합니다.</xref:System.Data.Common.DbConnection.EnlistTransaction%2A> 연결을 참여 하기 때문에 <xref:System.Transactions.Transaction>인스턴스에 **EnlistTransaction** 에서 사용할 수 있는 기능을 활용는 <xref:System.Transactions>분산 트랜잭션에서, 보다 더 자주 사용 하는 네임 스페이스를 관리 하기 위한 **참여가** 이 목적을 위해.</xref:System.Transactions> </xref:System.Transactions.Transaction> 자세한 내용은 참조 [분산 트랜잭션](~/add/includes/ajax-current-ext-md.md)합니다.       계속 사용 하 여 기존 분산된 트랜잭션에 참여할 수 있습니다는 <xref:System.Data.OdbcClient.OdbcConnection.EnlistDistributedTransaction%2A>메서드 자동 인 리스트 먼 트를 사용 하지 않도록 설정 합니다.</xref:System.Data.OdbcClient.OdbcConnection.EnlistDistributedTransaction%2A> 기존 분산된 트랜잭션에 인 리스트 먼 트 하면 즉, 트랜잭션이 커밋되거나 롤백될 경우 데이터 소스에서 코드에 의해 수정 된도 트랜잭션이 커밋 또는 롤백됨. 분산된 트랜잭션에 대 한 자세한 내용은 참조 [분산 트랜잭션을](../Topic/Distributed%20Transactions.md)합니다.       참여가 예외를 반환 하는 경우 <xref:System.Data.OdbcClient.OdbcConnection> <xref:System.Data.OdbcClient.OdbcConnection.BeginTransaction%2A>.</xref:System.Data.OdbcClient.OdbcConnection.BeginTransaction%2A> 를 사용 하는 트랜잭션이 이미 시작</xref:System.Data.OdbcClient.OdbcConnection> 그러나 트랜잭션이 데이터 소스에서 시작 된 로컬 트랜잭션 인지 (명시적으로 사용 하 여 BEGIN TRANSACTION 문을 실행 하는 예를 들어 여는 <xref:System.Data.OdbcClient.OdbcCommand>개체), 참여가 로컬 트랜잭션을 롤백하고 요청에 따라 기존 분산된 트랜잭션에 인 리스트 먼 트 합니다.</xref:System.Data.OdbcClient.OdbcCommand> 로컬 트랜잭션이 롤백 되었습니다 및 <xref:System.Data.OdbcClient.OdbcConnection.BeginTransaction%2A>.</xref:System.Data.OdbcClient.OdbcConnection.BeginTransaction%2A> 를 사용 하 여 시작 되지 않는 모든 로컬 트랜잭션을 관리 해야 하는 통지를 받지 못할"
  syntax:
    content: public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);
    parameters:
    - id: transaction
      type: System.EnterpriseServices.ITransaction
      description: "기존에 대 한 참조 <xref href=&quot;System.EnterpriseServices.ITransaction&quot;> </xref> 를 등록 합니다."
  overload: System.Data.Odbc.OdbcConnection.EnlistDistributedTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: OdbcConnection.EnlistTransaction(Transaction)
  fullName: System.Data.Odbc.OdbcConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "지정된 된 트랜잭션에 분산 트랜잭션으로 참여합니다."
  remarks: '새 ADO.NET 2.0에서 지원은 사용에 대 한는 <xref:System.Data.Common.DbConnection.EnlistTransaction%2A>메서드를 분산된 트랜잭션에 참여 합니다.</xref:System.Data.Common.DbConnection.EnlistTransaction%2A> 연결을 참여 하기 때문에 <xref:System.Transactions.Transaction>인스턴스에 **EnlistTransaction** 에서 사용할 수 있는 기능을 활용는 <xref:System.Transactions>분산 트랜잭션에서, 보다 더 자주 사용 하는 네임 스페이스를 관리 하기 위한 **참여가**, 사용 하는 **System.EnterpriseServices.ITransaction** 개체.</xref:System.Transactions> </xref:System.Transactions.Transaction> 역시 약간 다른 의미 체계: 트랜잭션에 연결을 명시적으로 등록 된, 등록 취소 하거나 수 첫 번째 트랜잭션이 완료 될 때까지 다른 트랜잭션에 참여 합니다. 분산된 트랜잭션에 대 한 자세한 내용은 참조 [분산 트랜잭션을](~/add/includes/ajax-current-ext-md.md)합니다.'
  syntax:
    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "기존에 대 한 참조 <xref href=&quot;System.Transactions.Transaction&quot;> </xref> 를 등록 합니다."
  overload: System.Data.Odbc.OdbcConnection.EnlistTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.GetSchema
  id: GetSchema
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: GetSchema()
  nameWithType: OdbcConnection.GetSchema()
  fullName: System.Data.Odbc.OdbcConnection.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "이 데이터 원본에 대 한 스키마 정보를 반환 <xref href=&quot;System.Data.Odbc.OdbcConnection&quot;> </xref>합니다."
  syntax:
    content: public override System.Data.DataTable GetSchema ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 들어 있는입니다."
  overload: System.Data.Odbc.OdbcConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.GetSchema(System.String)
  id: GetSchema(System.String)
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: GetSchema(String)
  nameWithType: OdbcConnection.GetSchema(String)
  fullName: System.Data.Odbc.OdbcConnection.GetSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "이 데이터 원본에 대 한 스키마 정보를 반환 <xref href=&quot;System.Data.Odbc.OdbcConnection&quot;> </xref> 스키마 이름에 지정된 된 이름을 사용 합니다."
  remarks: "때 `collectionName` 매개 변수가 null 이면는 <xref:System.Data.DataTable>사용 가능한 모든 메타 데이터 및 모든 제한 사항에 대 한 정보를 포함 합니다.</xref:System.Data.DataTable>      > [!NOTE] >에 적용 되는 모든 제한은 `SQLStatistics` 에 적용 된 메서드는 `ODBCConnection.GetSchema(&quot;`인덱스`&quot;)` 컬렉션입니다."
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName);
    parameters:
    - id: collectionName
      type: System.String
      description: "반환할 스키마의 이름을 지정 합니다."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 들어 있는입니다."
  overload: System.Data.Odbc.OdbcConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.GetSchema(System.String,System.String[])
  id: GetSchema(System.String,System.String[])
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: GetSchema(String,String[])
  nameWithType: OdbcConnection.GetSchema(String,String[])
  fullName: System.Data.Odbc.OdbcConnection.GetSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "이 데이터 원본에 대 한 스키마 정보를 반환 <xref href=&quot;System.Data.Odbc.OdbcConnection&quot;> </xref> 스키마 이름 및 제한 값에 대 한 지정 된 문자열 배열에 대 한 지정된 된 문자열을 사용 하 여 합니다."
  remarks: "때 `collectionName` null로 지정 된 <xref:System.Data.DataTable>를 사용할 수 있는 모든 메타 데이터 및 해당 제한 사항에 대 한 정보를 포함 합니다.</xref:System.Data.DataTable>       `restrictionValues` 매개 변수 제공 *n* 수준의 특정 컬렉션에 대 한 제한 컬렉션에서 지정 된 값입니다. 특정된 제한에 값을 설정 하 고 다른 제한 값을 설정 하지 않으려면, 앞의 제한을 null 하 고 다음 값을 지정 하려면 원하는 제한에 적절 한 값을 설정 해야 합니다.       이 예는 &quot;Table&quot; 컬렉션입니다. &quot;Table&quot; 컬렉션에 세 가지 제한 (데이터베이스, 소유자 및 테이블 이름) 및 &quot;칼&quot; 소유자와 연결 된 테이블에만 다시 확보 하려는 경우 적어도 다음 값에 전달 해야: null, &quot;칼&quot;입니다. 에 제한 값이 전달 되지 않으면, 기본 값은 해당 제한에 사용 됩니다. 이 null 전달 하는 대로 동일한 매핑을 매개 변수 값에 대 한 빈 문자열을 전달과에서는 다릅니다. 그러면 빈 문자열 (&quot;&quot;)의 지정된 된 매개 변수 값으로 간주 됩니다.      > [!NOTE] > SQLStatistics 메서드에 적용 되는 모든 제한은 ODBCConnection.GetSchema(&quot;indexes&quot;) 컬렉션에 적용 됩니다."
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);
    parameters:
    - id: collectionName
      type: System.String
      description: "반환할 스키마의 이름을 지정 합니다."
    - id: restrictionValues
      type: System.String[]
      description: "요청된 된 스키마에 대 한 제한 값의 집합을 지정합니다."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 들어 있는입니다."
  overload: System.Data.Odbc.OdbcConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.InfoMessage
  id: InfoMessage
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: InfoMessage
  nameWithType: OdbcConnection.InfoMessage
  fullName: System.Data.Odbc.OdbcConnection.InfoMessage
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "ODBC 드라이버는 경고 또는 정보 메시지를 보낼 때 발생 합니다."
  remarks: "서버에서 보낸 정보 메시지를 처리 하는 클라이언트를 만들어야는 <xref:System.Data.Odbc.OdbcInfoMessageEventHandler>이 이벤트를 수신 하는 대리자입니다.</xref:System.Data.Odbc.OdbcInfoMessageEventHandler>"
  syntax:
    content: public event System.Data.Odbc.OdbcInfoMessageEventHandler InfoMessage;
    return:
      type: System.Data.Odbc.OdbcInfoMessageEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.Open
  id: Open
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: Open()
  nameWithType: OdbcConnection.Open()
  fullName: System.Data.Odbc.OdbcConnection.Open()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "에 <xref:System.Data.Odbc.OdbcConnection.ConnectionString*>.</xref:System.Data.Odbc.OdbcConnection.ConnectionString*> 지정 된 속성 설정을 사용 하 여 데이터 원본에 대 한 연결을 엽니다."
  remarks: "<xref:System.Data.Odbc.OdbcConnection>사용 가능한 경우 연결 풀에서 열려 있는 연결을 그립니다.</xref:System.Data.Odbc.OdbcConnection> 그렇지 않으면 데이터 원본에 새 연결을 설정 합니다.      > [!NOTE] > 경우는 <xref:System.Data.Odbc.OdbcConnection>범위를 벗어나면 나타나는 연결은 자동으로 닫히지 않습니다.</xref:System.Data.Odbc.OdbcConnection> 따라서 명시적으로 닫아야 연결 호출 하 여 <xref:System.Data.Odbc.OdbcConnection.Close%2A>, **Dispose**, 내에서 연결을 배치 하 여 한 `Using` 문.</xref:System.Data.Odbc.OdbcConnection.Close%2A>"
  syntax:
    content: public override void Open ();
    parameters: []
  overload: System.Data.Odbc.OdbcConnection.Open*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "이 메서드의 기본 클래스에서 지원 하지 않는 기능과 대신 파생된 클래스에서 구현 해야 합니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.ReleaseObjectPool
  id: ReleaseObjectPool
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: ReleaseObjectPool()
  nameWithType: OdbcConnection.ReleaseObjectPool()
  fullName: System.Data.Odbc.OdbcConnection.ReleaseObjectPool()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "마지막 기본 연결이 해제 되 면 ODBC 드라이버 관리자 환경 핸들이 해제 될 수 있음을 나타냅니다."
  remarks: "`ReleaseObjectPool`ODBC 환경 핸들을 해제 하기 위해 호출할 수 있습니다. 예를 들어 연결 개체는 다시 사용할 수 없습니다 하는 경우이 메서드를 호출 할 수 있습니다. 환경에서 모든 연결이 닫히면 환경이 삭제 될 수 있습니다. 참고 메서드 호출, 환경에는 활성 연결 실제로 해제 되지 않습니다.       환경을 마지막으로 삭제 하기 전에 다음 발생 해야: 1입니다.  호출 <xref:System.Data.Odbc.OdbcConnection.Close%2A>를 해제 하는 <xref:System.Data.Odbc.OdbcConnection>환경에서.</xref:System.Data.Odbc.OdbcConnection> </xref:System.Data.Odbc.OdbcConnection.Close%2A>      2.  제한 시간이 초과 각 연결 개체를 허용 합니다.      3.  풀링된을 호출 합니다.      4.  가비지 수집을 호출 합니다.       반대로, 호출 하는 경우 <xref:System.Data.Odbc.OdbcConnection.Close%2A>모든 활성 연결에서 및 가비지 수집을 호출 하지만 풀링된을 호출 하지 않으면, 환경에 대해 예약 된 리소스에 계속 사용할 수 있습니다.</xref:System.Data.Odbc.OdbcConnection.Close%2A>       환경 핸들 해제 된 후 새에 대 한 요청 <xref:System.Data.Odbc.OdbcConnection>새 환경을 만듭니다.</xref:System.Data.Odbc.OdbcConnection>"
  syntax:
    content: public static void ReleaseObjectPool ();
    parameters: []
  overload: System.Data.Odbc.OdbcConnection.ReleaseObjectPool*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: OdbcConnection.ServerVersion
  fullName: System.Data.Odbc.OdbcConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "버전의 클라이언트가 연결 된 서버를 포함 하는 문자열을 가져옵니다."
  remarks: "ServerVersion 빈 문자열 기본 ODBC 드라이버에서 지원 되지 않는 경우 (&quot;&quot;)이 반환 됩니다.       ServerVersion 속성의 형식은 &quot;*# #. # #. # # #*,&quot; 여기서 처음 두 자리는 주 버전, 다음 두 자리는 부 버전 및 마지막&4; 자리는 릴리스 버전입니다. 드라이버는 제품 버전을이 형식으로 렌더링 해야 하지만 제품 관련 버전 문자열을 추가할 수도 있습니다 (예를 들어 &quot;04.01.0000 4.1 Rdb&quot;). 이 문자열은 형식 &quot;*major.minor.build*&quot; 여기서 *주요* 및 *부* 는 정확히 두 자리로 및 *빌드* 는 정확히 네 자리 숫자입니다."
  syntax:
    content: public override string ServerVersion { get; }
    return:
      type: System.String
      description: "연결 된 서버의 버전입니다."
  overload: System.Data.Odbc.OdbcConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결이 닫혀 있습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.State
  id: State
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: State
  nameWithType: OdbcConnection.State
  fullName: System.Data.Odbc.OdbcConnection.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "연결의 현재 상태를 가져옵니다."
  remarks: "다음에 허용 된 상태 변경은:-에서 `Closed` 를 `Open`를 사용 하 여는 <xref:System.Data.Odbc.OdbcConnection.Open%2A>메서드.</xref:System.Data.Odbc.OdbcConnection.Open%2A>      `Open` 를 `Closed`, 하나를 사용 하는 <xref:System.Data.Odbc.OdbcConnection.Close%2A>또는 **Dispose** 메서드.</xref:System.Data.Odbc.OdbcConnection.Close%2A>      > [!NOTE] > 각 이러한 호출은 연결이 여전히 유효한 지 여부를 확인 하려면 기본 ODBC 드라이버에 대 한 SQL_ATTR_CONNECTION_DEAD 호출 하기 때문에로 인해 응용 프로그램 오버 헤드가 증가 State 속성에 대해 열린 연결에서 호출 합니다."
  syntax:
    content: public override System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "비트 조합 된 <xref href=&quot;System.Data.ConnectionState&quot;> </xref> 값입니다. 기본값은 <xref uid=&quot;langword_csharp_Closed&quot; name=&quot;Closed&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Odbc.OdbcConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcConnection.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.Odbc.OdbcConnection
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: OdbcConnection.System.ICloneable.Clone()
  fullName: System.Data.Odbc.OdbcConnection.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "이 멤버에 대 한 참조 &lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;합니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.Odbc.OdbcConnection>인스턴스로 캐스팅 되는 <xref:System.ICloneable>인터페이스.</xref:System.ICloneable> </xref:System.Data.Odbc.OdbcConnection>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "새 <xref:System.Object>이 인스턴스의 복사본입니다.</xref:System.Object>"
  overload: System.Data.Odbc.OdbcConnection.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.Common.DbConnection
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.Odbc.OdbcException
  parent: System.Data.Odbc
  isExternal: false
  name: OdbcException
  nameWithType: OdbcException
  fullName: System.Data.Odbc.OdbcException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Data.Odbc.OdbcConnection.#ctor
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: OdbcConnection()
  nameWithType: OdbcConnection.OdbcConnection()
  fullName: System.Data.Odbc.OdbcConnection.OdbcConnection()
- uid: System.Data.Odbc.OdbcConnection.#ctor(System.String)
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: OdbcConnection(String)
  nameWithType: OdbcConnection.OdbcConnection(String)
  fullName: System.Data.Odbc.OdbcConnection.OdbcConnection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Odbc.OdbcConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: OdbcConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.Odbc.OdbcConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.Odbc.OdbcConnection.BeginTransaction
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: OdbcConnection.BeginTransaction()
  fullName: System.Data.Odbc.OdbcConnection.BeginTransaction()
- uid: System.Data.Odbc.OdbcTransaction
  parent: System.Data.Odbc
  isExternal: false
  name: OdbcTransaction
  nameWithType: OdbcTransaction
  fullName: System.Data.Odbc.OdbcTransaction
- uid: System.Data.Odbc.OdbcConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: OdbcConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Odbc.OdbcConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.Odbc.OdbcConnection.ChangeDatabase(System.String)
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: OdbcConnection.ChangeDatabase(String)
  fullName: System.Data.Odbc.OdbcConnection.ChangeDatabase(String)
- uid: System.Data.Odbc.OdbcConnection.Close
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: Close()
  nameWithType: OdbcConnection.Close()
  fullName: System.Data.Odbc.OdbcConnection.Close()
- uid: System.Data.Odbc.OdbcConnection.ConnectionString
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: ConnectionString
  nameWithType: OdbcConnection.ConnectionString
  fullName: System.Data.Odbc.OdbcConnection.ConnectionString
- uid: System.Data.Odbc.OdbcConnection.ConnectionTimeout
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: OdbcConnection.ConnectionTimeout
  fullName: System.Data.Odbc.OdbcConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Odbc.OdbcConnection.CreateCommand
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: OdbcConnection.CreateCommand()
  fullName: System.Data.Odbc.OdbcConnection.CreateCommand()
- uid: System.Data.Odbc.OdbcCommand
  parent: System.Data.Odbc
  isExternal: false
  name: OdbcCommand
  nameWithType: OdbcCommand
  fullName: System.Data.Odbc.OdbcCommand
- uid: System.Data.Odbc.OdbcConnection.CreateDbCommand
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: OdbcConnection.CreateDbCommand()
  fullName: System.Data.Odbc.OdbcConnection.CreateDbCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.Odbc.OdbcConnection.Database
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: Database
  nameWithType: OdbcConnection.Database
  fullName: System.Data.Odbc.OdbcConnection.Database
- uid: System.Data.Odbc.OdbcConnection.DataSource
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: DataSource
  nameWithType: OdbcConnection.DataSource
  fullName: System.Data.Odbc.OdbcConnection.DataSource
- uid: System.Data.Odbc.OdbcConnection.Dispose(System.Boolean)
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: OdbcConnection.Dispose(Boolean)
  fullName: System.Data.Odbc.OdbcConnection.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Odbc.OdbcConnection.Driver
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: Driver
  nameWithType: OdbcConnection.Driver
  fullName: System.Data.Odbc.OdbcConnection.Driver
- uid: System.Data.Odbc.OdbcConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: OdbcConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.Odbc.OdbcConnection.EnlistDistributedTransaction(ITransaction)
- uid: System.EnterpriseServices.ITransaction
  parent: System.EnterpriseServices
  isExternal: false
  name: ITransaction
  nameWithType: ITransaction
  fullName: System.EnterpriseServices.ITransaction
- uid: System.Data.Odbc.OdbcConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: OdbcConnection.EnlistTransaction(Transaction)
  fullName: System.Data.Odbc.OdbcConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.Odbc.OdbcConnection.GetSchema
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: GetSchema()
  nameWithType: OdbcConnection.GetSchema()
  fullName: System.Data.Odbc.OdbcConnection.GetSchema()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Odbc.OdbcConnection.GetSchema(System.String)
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: GetSchema(String)
  nameWithType: OdbcConnection.GetSchema(String)
  fullName: System.Data.Odbc.OdbcConnection.GetSchema(String)
- uid: System.Data.Odbc.OdbcConnection.GetSchema(System.String,System.String[])
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: GetSchema(String,String[])
  nameWithType: OdbcConnection.GetSchema(String,String[])
  fullName: System.Data.Odbc.OdbcConnection.GetSchema(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Odbc.OdbcConnection.InfoMessage
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: InfoMessage
  nameWithType: OdbcConnection.InfoMessage
  fullName: System.Data.Odbc.OdbcConnection.InfoMessage
- uid: System.Data.Odbc.OdbcInfoMessageEventHandler
  parent: System.Data.Odbc
  isExternal: false
  name: OdbcInfoMessageEventHandler
  nameWithType: OdbcInfoMessageEventHandler
  fullName: System.Data.Odbc.OdbcInfoMessageEventHandler
- uid: System.Data.Odbc.OdbcConnection.Open
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: Open()
  nameWithType: OdbcConnection.Open()
  fullName: System.Data.Odbc.OdbcConnection.Open()
- uid: System.Data.Odbc.OdbcConnection.ReleaseObjectPool
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: ReleaseObjectPool()
  nameWithType: OdbcConnection.ReleaseObjectPool()
  fullName: System.Data.Odbc.OdbcConnection.ReleaseObjectPool()
- uid: System.Data.Odbc.OdbcConnection.ServerVersion
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: ServerVersion
  nameWithType: OdbcConnection.ServerVersion
  fullName: System.Data.Odbc.OdbcConnection.ServerVersion
- uid: System.Data.Odbc.OdbcConnection.State
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: State
  nameWithType: OdbcConnection.State
  fullName: System.Data.Odbc.OdbcConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.Odbc.OdbcConnection.System#ICloneable#Clone
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: OdbcConnection.System.ICloneable.Clone()
  fullName: System.Data.Odbc.OdbcConnection.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Odbc.OdbcConnection.#ctor*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: OdbcConnection
  nameWithType: OdbcConnection.OdbcConnection
- uid: System.Data.Odbc.OdbcConnection.BeginDbTransaction*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: OdbcConnection.BeginDbTransaction
- uid: System.Data.Odbc.OdbcConnection.BeginTransaction*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: OdbcConnection.BeginTransaction
- uid: System.Data.Odbc.OdbcConnection.ChangeDatabase*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: OdbcConnection.ChangeDatabase
- uid: System.Data.Odbc.OdbcConnection.Close*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: Close
  nameWithType: OdbcConnection.Close
- uid: System.Data.Odbc.OdbcConnection.ConnectionString*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: ConnectionString
  nameWithType: OdbcConnection.ConnectionString
- uid: System.Data.Odbc.OdbcConnection.ConnectionTimeout*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: OdbcConnection.ConnectionTimeout
- uid: System.Data.Odbc.OdbcConnection.CreateCommand*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: CreateCommand
  nameWithType: OdbcConnection.CreateCommand
- uid: System.Data.Odbc.OdbcConnection.CreateDbCommand*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: OdbcConnection.CreateDbCommand
- uid: System.Data.Odbc.OdbcConnection.Database*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: Database
  nameWithType: OdbcConnection.Database
- uid: System.Data.Odbc.OdbcConnection.DataSource*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: DataSource
  nameWithType: OdbcConnection.DataSource
- uid: System.Data.Odbc.OdbcConnection.Dispose*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: Dispose
  nameWithType: OdbcConnection.Dispose
- uid: System.Data.Odbc.OdbcConnection.Driver*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: Driver
  nameWithType: OdbcConnection.Driver
- uid: System.Data.Odbc.OdbcConnection.EnlistDistributedTransaction*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: EnlistDistributedTransaction
  nameWithType: OdbcConnection.EnlistDistributedTransaction
- uid: System.Data.Odbc.OdbcConnection.EnlistTransaction*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: OdbcConnection.EnlistTransaction
- uid: System.Data.Odbc.OdbcConnection.GetSchema*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: GetSchema
  nameWithType: OdbcConnection.GetSchema
- uid: System.Data.Odbc.OdbcConnection.Open*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: Open
  nameWithType: OdbcConnection.Open
- uid: System.Data.Odbc.OdbcConnection.ReleaseObjectPool*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: ReleaseObjectPool
  nameWithType: OdbcConnection.ReleaseObjectPool
- uid: System.Data.Odbc.OdbcConnection.ServerVersion*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: ServerVersion
  nameWithType: OdbcConnection.ServerVersion
- uid: System.Data.Odbc.OdbcConnection.State*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: State
  nameWithType: OdbcConnection.State
- uid: System.Data.Odbc.OdbcConnection.System#ICloneable#Clone*
  parent: System.Data.Odbc.OdbcConnection
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: OdbcConnection.System.ICloneable.Clone
