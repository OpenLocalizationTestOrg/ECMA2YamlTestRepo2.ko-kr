### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbDataAdapter
  id: DbDataAdapter
  children:
  - System.Data.Common.DbDataAdapter.#ctor
  - System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  - System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  - System.Data.Common.DbDataAdapter.ClearBatch
  - System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.DefaultSourceTableName
  - System.Data.Common.DbDataAdapter.DeleteCommand
  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DbDataAdapter.ExecuteBatch
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillCommandBehavior
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  - System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  - System.Data.Common.DbDataAdapter.GetFillParameters
  - System.Data.Common.DbDataAdapter.InitializeBatching
  - System.Data.Common.DbDataAdapter.InsertCommand
  - System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  - System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.Common.DbDataAdapter.SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  - System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  - System.Data.Common.DbDataAdapter.TerminateBatching
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.UpdateBatchSize
  - System.Data.Common.DbDataAdapter.UpdateCommand
  langs:
  - csharp
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
  type: Class
  summary: "구현을 지원는 <xref href=&quot;System.Data.IDbDataAdapter&quot;> </xref> 인터페이스입니다. DbDataAdapter의 상속 자가 강력한 형식을 제공 하는 함수 집합을 구현 하지만 완벽 하 게 구현 하는 데 필요한 기능을 대부분 상속는 **DataAdapter**합니다."
  remarks: "DbDataAdapter 클래스에서 상속 된 <xref:System.Data.Common.DataAdapter>클래스 및 구현 하는 클래스를 사용 하면는 **DataAdapter** 관계형 데이터베이스와 함께 사용 하기 위한.</xref:System.Data.Common.DataAdapter>       응용 프로그램을 직접 DbDataAdapter 인터페이스의 인스턴스를 만들지 않습니다 되지만 상속 되는 클래스의 인스턴스를 만듭니다 <xref:System.Data.IDbDataAdapter>및 DbDataAdapter.</xref:System.Data.IDbDataAdapter>       DbDataAdapter를 상속 하는 클래스는 상속 된 멤버를 구현 하 고 일반적으로 공급자 특정 기능을 추가 하려면 추가 멤버를 정의 해야 합니다. 예를 들어 DbDataAdapter 클래스 정의 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>속성과 DbDataAdapter 인터페이스 정의의&8; 개 오버 로드는 <xref:System.Data.IDataAdapter.Fill%2A>메서드.</xref:System.Data.IDataAdapter.Fill%2A> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> 차례로 <xref:System.Data.OleDb.OleDbDataAdapter>클래스 상속의 <xref:System.Data.Common.DbDataAdapter.Fill%2A>메서드를 추가 두 오버 로드를 정의 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>는 ADO 레코드 집합 개체를 매개 변수로 사용 하는.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: 'public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DataAdapter
  implements:
  - System.Data.IDbDataAdapter
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "새 인스턴스를 초기화 한 **DataAdapter** 클래스입니다."
  remarks: "인스턴스를 만들 때 <xref:System.Data.Common.DbDataAdapter>, 다음 읽기/쓰기 속성은 다음 초기 값으로 설정 됩니다.</xref:System.Data.Common.DbDataAdapter>      | 속성 | 초기 값 |   |----------------|-------------------|   | <xref:System.Data.IDbDataAdapter.SelectCommand%2A>| 새 <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.InsertCommand%2A>| 새 <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>| 새 <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>| 새 <xref:System.Data.IDbCommand>. |   | <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>| `MissingMappingAction.Passthrough`|   | <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>| `MissingSchemaAction.Add`|       속성에 대 한 별도 호출을 통해 이러한 속성의 값을 변경할 수 있습니다.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.UpdateCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.DeleteCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.InsertCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.SelectCommand%2A>"
  syntax:
    content: protected DbDataAdapter ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  id: '#ctor(System.Data.Common.DbDataAdapter)'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "새 인스턴스를 초기화 한 <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref> 동일한 형식의 기존 개체에서 클래스입니다."
  remarks: "이 오버 로드는 <xref:System.Data.Common.DbDataAdapter>생성자는 사용 하기 위한.NET Framework 데이터 공급자가 복제 구현에서 사용 하기 위해 비슷한 생성자를 구현 하는 경우.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.Common.DbDataAdapter
      description: "A <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref> 새 만드는 데 개체 <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  id: AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 <xref href=&quot;System.Data.IDbCommand&quot;> </xref> 현재 일괄 처리에 있습니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter>이 메서드에서 throw <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> 상속 된 클래스 <xref:System.Data.Common.DbDataAdapter>일괄 처리에 대 한 지원을 제공 하려면이 메서드를 재정의 합니다.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual int AddToBatch (System.Data.IDbCommand command);
    parameters:
    - id: command
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> 일괄 처리에 추가 합니다."
    return:
      type: System.Int32
      description: "추가 하기 전에 일괄 처리의 명령 수는 <xref href=&quot;System.Data.IDbCommand&quot;> </xref>합니다."
  overload: System.Data.Common.DbDataAdapter.AddToBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "어댑터는 일괄 처리를 지원 하지 않습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  id: ClearBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "모든 제거 <xref href=&quot;System.Data.IDbCommand&quot;> </xref> 일괄 처리에서 개체입니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter>이 메서드에서 throw <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> 상속 된 클래스 <xref:System.Data.Common.DbDataAdapter>일괄 처리에 대 한 지원을 제공 하려면이 메서드를 재정의 합니다.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void ClearBatch ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.ClearBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "어댑터는 일괄 처리를 지원 하지 않습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> 클래스입니다."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "<xref href=&quot;System.Data.DataRow&quot;> </xref> 데이터 소스를 업데이트 하는 데 사용 합니다."
    - id: command
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> <xref:System.Data.IDataAdapter.Update*>.</xref:System.Data.IDataAdapter.Update*> 하는 동안 실행"
    - id: statementType
      type: System.Data.StatementType
      description: "명령에 대 한 업데이트 인지 삽입, 삭제 또는 SELECT 문입니다."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatedEventArgs
      description: "새 인스턴스는 <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> 클래스입니다."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> 클래스입니다."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "<xref href=&quot;System.Data.DataRow&quot;> </xref> 데이터 소스를 업데이트 하는 합니다."
    - id: command
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> <xref:System.Data.IDataAdapter.Update*>.</xref:System.Data.IDataAdapter.Update*> 실행 하려면"
    - id: statementType
      type: System.Data.StatementType
      description: "명령에 대 한 업데이트 인지 삽입, 삭제 또는 SELECT 문입니다."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatingEventArgs
      description: "새 인스턴스는 <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> 클래스입니다."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  id: DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "사용 하는 기본 이름을 <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref> 매핑 테이블에 대 한 개체입니다."
  remarks: "&quot;Table&quot;은 사용 되는 기본 이름을 <xref:System.Data.Common.DataAdapter>개체 테이블 매핑에.</xref:System.Data.Common.DataAdapter>       DefaultSourceTableName는 응용 프로그램에서 사용 되는 테이블 매핑을 추가 하는 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A>, 하지만 지정 하지 않는 한 <xref:System.Data.DataTable>이름.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public const string DefaultSourceTableName;
    return:
      type: System.String
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  id: DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터 집합에서 레코드를 삭제 하기 위한 명령의 가져오거나 설정 합니다."
  remarks: "동안 <xref:System.Data.Common.DbDataAdapter.Update%2A>경우이 속성은 설정 되지 않으며 기본 키 정보에 있는지는 <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>자동으로 생성 됩니다.</xref:System.Data.IDbDataAdapter.DeleteCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_3_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_3_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand DeleteCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> 하는 동안 사용 <xref:System.Data.IDataAdapter.Update*>데이터 집합에서 삭제 된 행에 대 한 데이터 원본에서 레코드를 삭제 합니다.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Data.Common.DbDataAdapter.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  id: ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "현재 일괄 처리를 실행합니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter>이 메서드에서 throw <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> 상속 된 클래스 <xref:System.Data.Common.DbDataAdapter>일괄 처리에 대 한 지원을 제공 하려면이 메서드를 재정의 합니다.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual int ExecuteBatch ();
    parameters: []
    return:
      type: System.Int32
      description: "일괄 처리의 마지막 명령에서 반환 하는 값입니다."
  overload: System.Data.Common.DbDataAdapter.ExecuteBatch*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 하거나 행의 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  remarks: "Fill 메서드 SELECT 문을 사용 하 여 데이터 원본에서 데이터를 검색 합니다. <xref:System.Data.IDbConnection>select 명령에서 연관 된 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다.</xref:System.Data.IDbConnection> 경우는 <xref:System.Data.IDbConnection>는 채우기가 호출 되기 전에 종료를 열어 데이터를 검색 한 다음 닫을.</xref:System.Data.IDbConnection> 채우기가 호출 되기 전에 연결이 열려 있으면 열린 상태로 유지 합니다.       데이터 테이블을 채우는 동안 오류 또는 예외가 발생 하는 경우 오류가 발생 하기 전에 추가 된 행은 데이터 테이블에 남아 있습니다. 작업의 나머지 부분에서는 중단 됩니다.       에 테이블이 추가 명령을 모든 행을 반환 하지 않으면는 <xref:System.Data.DataSet>, 예외가 발생 하지 않습니다.</xref:System.Data.DataSet>       경우는 <xref:System.Data.Common.DbDataAdapter>개체 중복 된 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 &quot;*columnname*1&quot; &quot;*columnname*2&quot;,&quot;*columnname*3&quot; 등.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet>       지정 된 쿼리가 여러 결과 반환 하는 경우 결과 집합 쿼리를 반환 하는 각 행에 대 한 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예: &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 없는 테이블이 생성 된 행을 반환 하지 않는 쿼리에 대 한 선택 쿼리 뒤에 삽입 쿼리를 처리 하는 경우 때문에 선택 쿼리에 대해 생성 된 테이블 생성 되는 첫 번째 테이블에 있기 때문에 &quot;Table&quot; 이라는 됩니다. 열 및 테이블 이름을 사용 하 여 응용 프로그램 명명 패턴과 충돌 하지 않도록 확인 해야 합니다.       <xref:System.Data.DataSet>경우 결과 중 하나에 오류가 있으면 일괄 처리 SQL 문과 같이 여러 결과 반환 모든 후속 결과 건너뛰고 지정 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 추가 되지 않습니다</xref:System.Data.DataSet> 를 채우는 데 사용 된 SELECT 문에서       때 호출의 내용을 새로 고치려면 채우기 후속를 사용 하는 <xref:System.Data.DataSet>, 두 조건이 충족 되어야 합니다: 1.</xref:System.Data.DataSet>  SQL 문을 처음 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 를 채우는 데 사용 되는 같아야 합니다.      2.  **키** 열 정보가 있어야 합니다.       기본 키 정보가 있는 경우 중복 행은 조정을 한 번만에 <xref:System.Data.DataTable> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 해당 하는</xref:System.Data.DataTable> 통해 기본 키 정보가 설정할 수 있습니다 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>를 지정 하 여는 <xref:System.Data.DataTable.PrimaryKey%2A>속성은 <xref:System.Data.DataTable>, 하거나 설정 하 여는 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>속성을 `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       경우는 `SelectCommand` OUTER JOIN의 결과 반환 된 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 결과 대 한 값</xref:System.Data.DataTable.PrimaryKey%2A> 을 설정 하지 않습니다 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 참조 [기본 키 정의](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] >의 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>만 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 여러 결과 대 한 스키마 정보를 검색 하려면 사용 채우기는 <xref:System.Data.MissingSchemaAction>로 설정 `AddWithKey`.</xref:System.Data.MissingSchemaAction>"
  syntax:
    content: public override int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> 레코드로 채울 및 필요한 경우 스키마입니다."
    return:
      type: System.Int32
      description: "행 수가 성공적으로 추가 하거나 새로 고쳐지지는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다. 이 행을 반환 하지 않는 문에 의해 영향을 받는 행을 포함 되지 않습니다."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  id: Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 하거나 지정된 된 범위에서의 행을 새로 고칩니다는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 사용 하 여 데이터 소스에 맞게는 <xref href=&quot;System.Data.DataTable&quot;> </xref> 이름입니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter.Fill%2A>연결 된 지정 된 SELECT 문에서 사용 하 여 데이터 원본에서 행을 검색 하는 메서드 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>속성.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> SELECT 문은 연결 된 연결 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다. 하기 전에 연결이 닫히거나 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A>은 호출은 열 데이터를 검색 하려면 다음 닫힙니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.Fill%2A>는 호출을 열린 상태로 유지 합니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       <xref:System.Data.Common.DbDataAdapter.Fill%2A>대상에 행을 추가 하는 작업을 다음 <xref:System.Data.DataTable>개체에 <xref:System.Data.DataSet>만들기는 <xref:System.Data.DataTable>경우 이미 없는 개체.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 만들 때 <xref:System.Data.DataTable>개체는 <xref:System.Data.Common.DbDataAdapter.Fill%2A>작업은 일반적으로 열 이름 메타 데이터만 만듭니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> 그러나 경우는 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>속성이 `AddWithKey`, 적절 한 기본 키와 제약 조건도 만들어집니다.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       경우는 <xref:System.Data.Common.DbDataAdapter>중복 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 &quot;*columnname*1&quot; &quot;*columnname*2&quot;,&quot;*columnname*3&quot; 등.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet> 여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>각 결과 집합은 별도 테이블에 배치 됩니다.</xref:System.Data.DataSet>       오버 로드가 <xref:System.Data.Common.DbDataAdapter.Fill%2A>생긴다는 `DataTable` 대로 매개 변수 에서만 첫 번째 결과 가져옵니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> 오버 로드를 사용 하 여 <xref:System.Data.Common.DbDataAdapter.Fill%2A>생긴다는 `DataSet` 여러 결과를 얻으려면 매개 변수로.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       <xref:System.Data.Common.DbDataAdapter.Fill%2A>메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet>여러 개 포함 된 <xref:System.Data.DataTable>개체 이름이 대/소문자만 다른.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 이러한 상황에서는 <xref:System.Data.Common.DbDataAdapter.Fill%2A>해당 테이블을 찾지 대/소문자 구분 비교를 수행 하 고 있는 정확한 일치 항목이 없는 경우 새 테이블을 만듭니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);    dataset.Tables.Add(&quot;AAA&quot;);    adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.       adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A>라고 및 <xref:System.Data.DataSet>하나만 포함 되어 <xref:System.Data.DataTable>이름이만 대/소문자는 <xref:System.Data.DataTable>업데이트 됩니다.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 이 시나리오에서는 비교는 대/소문자 구분 합니다. 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```<xref:System.Data.Common.DbDataAdapter.Fill%2A>여러 번에 같은 <xref:System.Data.DataTable>했습니다.</xref:System.Data.DataTable> 메서드</xref:System.Data.Common.DbDataAdapter.Fill%2A> 를 사용할 수 있습니다. 기본 키가 있는 경우 이미 존재 하는 일치 하는 행과 들어오는 행이 병합 됩니다. 기본 키가 없으면 들어오는 행을 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 추가       경우는 `SelectCommand` OUTER JOIN의 결과 반환 된 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 결과 대 한 값</xref:System.Data.DataTable.PrimaryKey%2A> 을 설정 하지 않습니다 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 참조 [기본 키 정의](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] >의 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.Fill%2A>및 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>.NET Framework 데이터에 대 한 공급자만 첫 번째 결과 대 한 스키마 정보를 검색 합니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public int Fill (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "이름에서 <xref href=&quot;System.Data.DataTable&quot;> </xref> 테이블 매핑에 사용 하도록 합니다."
    return:
      type: System.Int32
      description: "행 수가 성공적으로 추가 하거나 새로 고쳐지지는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다. 이 행을 반환 하지 않는 문에 의해 영향을 받는 행을 포함 되지 않습니다."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "원본 테이블이 올바르지 않습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  id: Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 하거나 행의 <xref href=&quot;System.Data.DataSet&quot;> </xref> 사용 하 여 데이터 소스에 맞게는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 및 <xref href=&quot;System.Data.DataTable&quot;> </xref> 이름입니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter.Fill%2A>메서드 SELECT 문을 사용 하 여 데이터 원본에서 데이터를 검색 합니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.IDbConnection>select 명령에서 연관 된 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다.</xref:System.Data.IDbConnection> 경우는 <xref:System.Data.IDbConnection>전에 닫은 <xref:System.Data.Common.DbDataAdapter.Fill%2A>은 호출은 열 데이터를 검색 하려면 다음 닫힙니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.Fill%2A>는 호출을 열린 상태로 유지 합니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       에 테이블이 추가 명령을 모든 행을 반환 하지 않으면는 <xref:System.Data.DataSet>, 예외가 발생 하지 않습니다.</xref:System.Data.DataSet>       경우는 <xref:System.Data.Common.DbDataAdapter>개체 중복 된 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴 &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; 및 등을 사용 하 여 후속 열에 대 한 이름을 생성 합니다.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet>       지정 된 쿼리가 여러 결과 반환 하는 경우 각 결과 집합은 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예: &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 없는 테이블이 생성 된 행을 반환 하지 않는 쿼리에 대 한 선택 쿼리 뒤에 삽입 쿼리를 처리 하는 경우 이후 select 쿼리에 대해 생성 되는 테이블을 이름이 &quot;Table&quot; 생성 되는 첫 번째 테이블에 있기 때문에 있습니다. 열 및 테이블 이름을 사용 하 여 응용 프로그램 명명 패턴과 충돌 하지 않도록 확인 해야 합니다.       <xref:System.Data.Common.DbDataAdapter.Fill%2A>메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet>여러 개 포함 된 <xref:System.Data.DataTable>개체 이름이 대/소문자만 다른.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 이러한 상황에서는 <xref:System.Data.Common.DbDataAdapter.Fill%2A>해당 테이블을 찾지 대/소문자 구분 비교를 수행 하 고 있는 정확한 일치 항목이 없는 경우 새 테이블을 만듭니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A>라고 및 <xref:System.Data.DataSet>하나만 포함 되어 <xref:System.Data.DataTable>이름이만 대/소문자는 <xref:System.Data.DataTable>업데이트 됩니다.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 이 시나리오에서는 비교는 대/소문자 구분 합니다. 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```데이터 테이블을 채우는 동안 오류 또는 예외가 발생 하는 경우 오류가 발생 하기 전에 추가 된 행은 데이터 테이블에 남아 있습니다. 작업의 나머지 부분에서는 중단 됩니다.       채우는 데 사용 된 SELECT 문에서 <xref:System.Data.DataSet>다음에 주의 SQL 문을 일괄 처리 수와 같은 여러 결과 반환:-모든 후속 결과 건너뛰고 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 추가 되지 결과 중 하나에 오류가,</xref:System.Data.DataSet>       다음을 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A>내용 새로 고침에 대 한 호출에서 <xref:System.Data.DataSet>, 두 조건이 충족 되어야 합니다: 1.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>  SQL 문을 처음 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 를 채우는 데 사용 되는 같아야 합니다.      2.  **키** 열 정보가 있어야 합니다. 기본 키 정보가 있는 경우 중복 행은 조정을 한 번만에 <xref:System.Data.DataTable> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 해당 하는</xref:System.Data.DataTable> 통해 기본 키 정보가 설정할 수 있습니다 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>를 지정 하 여는 <xref:System.Data.DataTable.PrimaryKey%2A>속성은 <xref:System.Data.DataTable>, 하거나 설정 하 여는 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>속성을 `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       경우는 `SelectCommand` OUTER JOIN의 결과 반환 된 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 결과 대 한 값</xref:System.Data.DataTable.PrimaryKey%2A> 을 설정 하지 않습니다 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 참조[기본 키 정의](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] >의 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>만 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 여러 결과 대 한 스키마 정보를 검색 하려면 사용 <xref:System.Data.Common.DbDataAdapter.Fill%2A>와 <xref:System.Data.MissingSchemaAction>로 설정 `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with rows from the categories table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_3_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_3_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> 레코드로 채울 및 필요한 경우 스키마입니다."
    - id: srcTable
      type: System.String
      description: "테이블 매핑에 사용할 원본 테이블의 이름입니다."
    return:
      type: System.Int32
      description: "행 수가 성공적으로 추가 하거나 새로 고쳐지지는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다. 이 행을 반환 하지 않는 문에 의해 영향을 받는 행을 포함 되지 않습니다."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "원본 테이블이 올바르지 않습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 하거나 행을 <xref href=&quot;System.Data.DataTable&quot;> </xref> 사용 하 여 지정 된 데이터 원본에 맞게 <xref href=&quot;System.Data.DataTable&quot;> </xref>, <xref href=&quot;System.Data.IDbCommand&quot;> </xref> 및 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>합니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter.Fill%2A>연결 된 지정 된 SELECT 문에서 사용 하 여 데이터 원본에서 행을 검색 하는 메서드 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>속성.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> SELECT 문은 연결 된 연결 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다. 연결 하기 전에 닫혀 있으면 <xref:System.Data.Common.DbDataAdapter.Fill%2A>는 호출을 열어 데이터를 검색 한 다음 닫을.</xref:System.Data.Common.DbDataAdapter.Fill%2A> 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.Fill%2A>는 호출을 열린 상태로 유지 합니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       <xref:System.Data.Common.DbDataAdapter.Fill%2A>지정된 된 대상에 행을 추가 하는 작업을 다음 <xref:System.Data.DataTable>개체는 <xref:System.Data.DataSet>만들기는 <xref:System.Data.DataTable>경우 이미 없는 개체.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 만들 때 한 <xref:System.Data.DataTable>개체는 <xref:System.Data.Common.DbDataAdapter.Fill%2A>작업은 일반적으로 열 이름 메타 데이터만 만듭니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> 그러나 경우는 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>속성이 `AddWithKey`, 적절 한 기본 키와 제약 조건도 만들어집니다.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       경우는 <xref:System.Data.Common.DbDataAdapter>개체 중복 된 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 합니다 &quot;*columnname*1&quot; &quot;*columnname*2&quot;,&quot;*columnname*3&quot; 등.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet>       오버 로드가 <xref:System.Data.Common.DbDataAdapter.Fill%2A>생긴다는 `DataTable` 대로 매개 변수 에서만 첫 번째 결과 가져옵니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> 오버 로드를 사용 하 여 <xref:System.Data.Common.DbDataAdapter.Fill%2A>생긴다는 `DataSet` 여러 결과를 얻으려면 매개 변수로.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       <xref:System.Data.Common.DbDataAdapter.Fill%2A>여러 번에 같은 <xref:System.Data.DataTable>했습니다.</xref:System.Data.DataTable> 메서드</xref:System.Data.Common.DbDataAdapter.Fill%2A> 를 사용할 수 있습니다. 기본 키가 있는 경우 이미 존재 하는 일치 하는 행과 들어오는 행이 병합 됩니다. 기본 키가 없으면 들어오는 행을 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 추가       경우는 `SelectCommand` OUTER JOIN의 결과 반환 된 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 결과 대 한 값</xref:System.Data.DataTable.PrimaryKey%2A> 을 설정 하지 않습니다 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 참조 [기본 키 정의](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] >의 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>만 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 여러 결과 대 한 스키마 정보를 검색 하려면 사용 <xref:System.Data.Common.DbDataAdapter.Fill%2A>와 <xref:System.Data.MissingSchemaAction>로 설정 `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 레코드로 채울 및 필요한 경우 스키마입니다."
    - id: command
      type: System.Data.IDbCommand
      description: "SQL SELECT 문을 데이터 원본에서 행을 검색 하는 데 사용 합니다."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "중 하나는 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> 값입니다."
    return:
      type: System.Int32
      description: "행 수가 성공적으로 추가 하거나 새로 고쳐지지는 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다. 이 행을 반환 하지 않는 문에 의해 영향을 받는 행을 포함 되지 않습니다."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  id: Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 하거나 행을 <xref href=&quot;System.Data.DataTable&quot;> </xref> 지정된 된 레코드부터 시작 하 고 지정 된 최대 레코드 수가까지 검색 데이터 원본에 맞게 합니다."
  remarks: "<xref:System.Data.Common.DataAdapter.Fill%2A>연결 된 지정 된 SELECT 문에서 사용 하 여 데이터 원본에서 행을 검색 하는 메서드 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>속성.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DataAdapter.Fill%2A> SELECT 문은 연결 된 연결 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다. 연결 하기 전에 닫혀 있으면 <xref:System.Data.Common.DataAdapter.Fill%2A>은 열 데이터를 검색 하 고 닫으면은 호출.</xref:System.Data.Common.DataAdapter.Fill%2A> 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DataAdapter.Fill%2A>는 호출을 열린 상태로 유지 합니다.</xref:System.Data.Common.DataAdapter.Fill%2A>       <xref:System.Data.Common.DataAdapter.Fill%2A>대상에 행을 추가 하는 작업을 다음 <xref:System.Data.DataTable>개체에 <xref:System.Data.DataSet>만들기는 <xref:System.Data.DataTable>경우 이미 없는 개체.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DataAdapter.Fill%2A> 만들 때 <xref:System.Data.DataTable>개체는 <xref:System.Data.Common.DataAdapter.Fill%2A>작업은 일반적으로 열 이름 메타 데이터만 만듭니다.</xref:System.Data.Common.DataAdapter.Fill%2A> </xref:System.Data.DataTable> 그러나 경우는 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>속성이 `AddWithKey`, 적절 한 기본 키와 제약 조건도 만들어집니다.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       경우는 `SelectCommand` OUTER JOIN의 결과 반환 된 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 결과 대 한 값</xref:System.Data.DataTable.PrimaryKey%2A> 을 설정 하지 않습니다 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 참조 [기본 키 정의](~/add/includes/ajax-current-ext-md.md)합니다.       데이터 어댑터를 채우는 동안 중복 된 열을 발견 하는 경우는 <xref:System.Data.DataTable>, 패턴 &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; 및 등을 사용 하 여 후속 열에 대 한 이름을 생성 합니다.</xref:System.Data.DataTable> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet> 여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>, 각 결과 집합은 별도 테이블에 배치 됩니다.</xref:System.Data.DataSet> 추가 결과 집합이 지정한 테이블 이름 (예: &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 응용 프로그램 명명 패턴과 충돌 하지 않도록 확인 해야 합니다.       채우는 데 사용 된 SELECT 문에서 <xref:System.Data.DataSet>여러 결과 반환 일괄 처리 SQL 문과 같은 결과 중 하나에 오류가 포함 되어 있는 경우 모든 후속 결과 건너뛰고 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 추가 되지</xref:System.Data.DataSet>       <xref:System.Data.Common.DataAdapter.Fill%2A>여러 번에 같은 <xref:System.Data.DataTable>했습니다.</xref:System.Data.DataTable> 메서드</xref:System.Data.Common.DataAdapter.Fill%2A> 를 사용할 수 있습니다. 기본 키가 있는 경우 이미 존재 하는 일치 하는 행과 들어오는 행이 병합 됩니다. 기본 키가 없으면 들어오는 행을 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 추가      > [!NOTE] >의 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>만 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 여러 결과 대 한 스키마 정보를 검색 하려면 사용 <xref:System.Data.Common.DbDataAdapter.Fill%2A>와 <xref:System.Data.MissingSchemaAction>로 설정 `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public int Fill (int startRecord, int maxRecords, System.Data.DataTable[] dataTables);
    parameters:
    - id: startRecord
      type: System.Int32
      description: "시작 하려면&0;부터 시작 레코드 번호입니다."
    - id: maxRecords
      type: System.Int32
      description: "검색할 레코드의 최대 수입니다."
    - id: dataTables
      type: System.Data.DataTable[]
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> 데이터 원본에서 채울 개체입니다."
    return:
      type: System.Int32
      description: "행 수가 성공적으로 추가 하거나 새로 고쳐지지는 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다. 이 값 행을 반환 하지 않는 문에 의해 영향을 받는 행을 포함 하지 않습니다."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 하거나 지정된 된 범위에서의 행을 새로 고칩니다는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 사용 하 여 데이터 소스에 맞게는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 및 <xref href=&quot;System.Data.DataTable&quot;> </xref> 이름입니다."
  remarks: "A `maxRecords` 값 0은 시작 레코드 후 검색 된 모든 레코드가 가져옵니다. 경우 `maxRecords` 보다 크면 남은 행 수가 없으면 오류가 발생 하 고 나머지 행이 반환 됩니다.       해당 select 명령이 여러 결과 반환 하는 문인 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A>만 적용 됩니다 `maxRecords` 첫 번째 결과를.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       <xref:System.Data.Common.DbDataAdapter.Fill%2A>메서드 SELECT 문을 사용 하 여 데이터 원본에서 데이터를 검색 합니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.IDbConnection>SELECT 문과 연결 된 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다.</xref:System.Data.IDbConnection> 경우는 <xref:System.Data.IDbConnection>전에 닫은 <xref:System.Data.Common.DbDataAdapter.Fill%2A>는 호출을 열어 데이터를 검색 한 다음 닫습니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.Fill%2A>는 호출을 열린 상태로 유지 합니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       에 테이블이 추가 명령을 모든 행을 반환 하지 않으면는 <xref:System.Data.DataSet>, 예외가 발생 하지 않지만.</xref:System.Data.DataSet>       경우는 <xref:System.Data.Common.DbDataAdapter>개체 중복 된 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 합니다 &quot;*columnname*1&quot; &quot;*columnname*2&quot;,&quot;*columnname*3&quot; 등.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet>       지정 된 쿼리가 여러 결과 반환 하는 경우 각 결과 집합은 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예: &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 없는 테이블이 생성 된 행을 반환 하지 않는 쿼리에 대 한 선택 쿼리 뒤에 삽입 쿼리를 처리 하는 경우 때문에 선택 쿼리에 대해 생성 된 테이블 생성 되는 첫 번째 테이블에 있기 때문에 &quot;Table&quot; 라는 합니다. 열 및 테이블 이름을 사용 하 여 응용 프로그램 명명 패턴과 충돌 하지 않도록 확인 해야 합니다.       <xref:System.Data.Common.DbDataAdapter.Fill%2A>메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet>여러 개 포함 된 <xref:System.Data.DataTable>개체 이름이 대/소문자만 다른.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 이러한 상황에서는 <xref:System.Data.Common.DbDataAdapter.Fill%2A>해당 테이블을 찾지 대/소문자 구분 비교를 수행 하 고 있는 정확한 일치 항목이 없는 경우 새 테이블을 만듭니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A>라고 및 <xref:System.Data.DataSet>하나만 포함 되어 <xref:System.Data.DataTable>이름이만 대/소문자는 <xref:System.Data.DataTable>업데이트 됩니다.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 이 시나리오에서는 비교는 대/소문자 구분 합니다. 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```데이터 테이블을 채우는 동안 오류 또는 예외가 발생 하는 경우 오류가 발생 하기 전에 추가 된 행은 데이터 테이블에 남아 있습니다. 작업의 나머지 부분에서는 중단 됩니다.       채우는 데 사용 된 SELECT 문에서 <xref:System.Data.DataSet>일괄 처리 SQL 문과 같은 여러 결과가 반환 될 다음에 주의:-SQL 문 일괄 처리에서 여러 결과 처리할 때 `maxRecords` 첫 번째 결과에 적용 됩니다.</xref:System.Data.DataSet> 장으로 나뉜 결과 (.NET Framework Data Provider for OLE DB만)를 포함 하는 행에도 마찬가지입니다. 최상위 결과 의해 제한 됩니다 `maxRecords`, 하지만 모든 자식 행이 추가 됩니다.      -모든 후속 결과 건너뛰고 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 추가 되지 결과 중 하나에 오류가 있는 경우       다음을 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A>내용 새로 고침에 대 한 호출에서 <xref:System.Data.DataSet>, 두 조건이 충족 되어야 합니다: 1.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>  SQL 문을 처음 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 를 채우는 데 사용 되는 같아야 합니다.      2.  **키** 열 정보가 있어야 합니다.       기본 키 정보가 있는 경우 중복 행 조정 되며 한 번만 사용할 <xref:System.Data.DataTable> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 해당 하는</xref:System.Data.DataTable> 통해 기본 키 정보가 설정할 수 있습니다 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>를 지정 하 여는 <xref:System.Data.DataTable.PrimaryKey%2A>속성은 <xref:System.Data.DataTable>, 하거나 설정 하 여는 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>속성을 `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       경우는 `SelectCommand` OUTER JOIN의 결과 반환 된 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 결과 대 한 값</xref:System.Data.DataTable.PrimaryKey%2A> 을 설정 하지 않습니다 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 참조 [기본 키 정의](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] >의 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>만 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 여러 결과 대 한 스키마 정보를 검색 하려면 사용 <xref:System.Data.Common.DbDataAdapter.Fill%2A>와 <xref:System.Data.MissingSchemaAction>로 설정 `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] >는 `DataSet` 가리키는 레코드 개수 보다 많은 포함 되지 것입니다 `maxRecords`합니다. 하지만, 쿼리에 의해 생성 된 전체 결과 집합은 여전히 서버에서 반환 됩니다."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with 15 rows, beginning at row 10, from the **Categories** table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/visualbasic/db016a7d-8591-46f9-abcc-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/csharp/db016a7d-8591-46f9-abcc-_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> 레코드로 채울 및 필요한 경우 스키마입니다."
    - id: startRecord
      type: System.Int32
      description: "시작 하려면&0;부터 시작 레코드 번호입니다."
    - id: maxRecords
      type: System.Int32
      description: "검색할 레코드의 최대 수입니다."
    - id: srcTable
      type: System.String
      description: "테이블 매핑에 사용할 원본 테이블의 이름입니다."
    return:
      type: System.Int32
      description: "행 수가 성공적으로 추가 하거나 새로 고쳐지지는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다. 이 행을 반환 하지 않는 문에 의해 영향을 받는 행을 포함 되지 않습니다."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> 올바르지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "원본 테이블이 올바르지 않습니다.       -또는-연결이 유효 하지 않습니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "연결을 찾을 수 없습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> startRecord </code> 매개 변수는 0 보다 작습니다.       -또는- <code> maxRecords </code> 매개 변수는 0 보다 작습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 하거나 지정된 된 범위에서의 행을 새로 고칩니다는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 사용 하 여 데이터 소스에 맞게는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 및 <xref href=&quot;System.Data.DataTable&quot;> </xref> 이름입니다."
  remarks: "A `maxRecords` 값 0은 시작 레코드 후 검색 된 모든 레코드가 가져옵니다. 경우 `maxRecords` 보다 크면 남은 행 수가 없으면 오류가 발생 하 고 나머지 행이 반환 됩니다.       Fill 메서드 SELECT 문을 사용 하 여 데이터 원본에서 데이터를 검색 합니다. <xref:System.Data.IDbConnection>SELECT 문과 연결 된 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다.</xref:System.Data.IDbConnection> 경우는 <xref:System.Data.IDbConnection>전에 닫은 <xref:System.Data.Common.DbDataAdapter.Fill%2A>은 호출은 열 데이터를 검색 하려면 다음 닫힙니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.Fill%2A>는 호출을 열린 상태로 유지 합니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       에 테이블이 추가 명령을 모든 행을 반환 하지 않으면는 <xref:System.Data.DataSet>, 예외가 발생 하지 않지만.</xref:System.Data.DataSet>       경우는 <xref:System.Data.Common.DbDataAdapter>개체 중복 된 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 합니다 &quot;*columnname*1&quot; &quot;*columnname*2&quot;,&quot;*columnname*3&quot; 등.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet>       지정 된 쿼리가 여러 결과 반환 하는 경우 각 결과 집합은 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예: &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 없는 테이블이 생성 된 행을 반환 하지 않는 쿼리에 대 한 선택 쿼리 뒤에 삽입 쿼리를 처리 하는 경우 이후 select 쿼리에 대해 생성 되는 테이블을 이름이 &quot;Table&quot; 생성 되는 첫 번째 테이블에 있기 때문에 있습니다. 열 및 테이블 이름을 사용 하 여 응용 프로그램 명명 패턴과 충돌 하지 않도록 확인 해야 합니다.       Fill 메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet>여러 개 포함 된 <xref:System.Data.DataTable>개체 이름이 대/소문자만 다른.</xref:System.Data.DataTable> </xref:System.Data.DataSet> 이러한 상황에서는 <xref:System.Data.Common.DbDataAdapter.Fill%2A>해당 테이블을 찾지 대/소문자 구분 비교를 수행 하 고 있는 정확한 일치 항목이 없는 경우 새 테이블을 만듭니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A>라고 및 <xref:System.Data.DataSet>하나만 포함 되어 <xref:System.Data.DataTable>이름이만 대/소문자는 <xref:System.Data.DataTable>업데이트 됩니다.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 이 시나리오에서는 비교는 대/소문자 구분 합니다. 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```데이터 테이블을 채우는 동안 오류 또는 예외가 발생 하는 경우 오류가 발생 하기 전에 추가 된 행은 데이터 테이블에 남아 있습니다. 작업의 나머지 부분에서는 중단 됩니다.       채우는 데 사용 된 SELECT 문에서 <xref:System.Data.DataTable>SQL 문을 일괄 처리에서 다음에 유의 같은 여러 결과 반환 하는 개체: SQL 문 일괄 처리에서 여러 결과 처리할 때- `maxRecords` 첫 번째 결과에 적용 됩니다.</xref:System.Data.DataTable> 장으로 나뉜 결과 (.NET Framework Data Provider for OLE DB만)를 포함 하는 행에도 마찬가지입니다. 최상위 결과 의해 제한 됩니다 `maxRecords`, 하지만 모든 자식 행이 추가 됩니다.      -결과 중 하나에 오류가 있으면 모든 후속 결과 건너뜁니다.      > [!NOTE] >는 `DataSet` 가리키는 레코드 개수 보다 많은 포함 되지 것입니다 `maxRecords`합니다. 그러나 쿼리에 의해 생성 되는 전체 결과 집합은 여전히 서버에서 반환 됩니다."
  syntax:
    content: protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> 데이터 원본에서 채울 개체입니다."
    - id: startRecord
      type: System.Int32
      description: "시작 하려면&0;부터 시작 레코드 번호입니다."
    - id: maxRecords
      type: System.Int32
      description: "검색할 레코드의 최대 수입니다."
    - id: command
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> 채우기 하기 위해 실행 되는 <xref href=&quot;System.Data.DataTable&quot;> </xref> 개체입니다."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "중 하나는 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> 값입니다."
    return:
      type: System.Int32
      description: "행의 수에 추가 하거나 데이터 테이블에서 새로 고쳐집니다."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> 올바르지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "원본 테이블이 올바르지 않습니다.       -또는-연결이 유효 하지 않습니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "연결을 찾을 수 없습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> startRecord </code> 매개 변수는 0 보다 작습니다.       -또는- <code> maxRecords </code> 매개 변수는 0 보다 작습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 하거나 지정된 된 범위에서의 행을 새로 고칩니다는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 사용 하 여 데이터 소스에 맞게는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 및 원본 테이블 이름, 명령 문자열 및 명령 동작입니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter.Fill%2A>연결 된 지정 된 SELECT 문에서 사용 하 여 데이터 원본에서 행을 검색 하는 메서드 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>속성.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> SELECT 문은 연결 된 연결 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다. 하기 전에 연결이 닫히거나 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A>은 호출은 열 데이터를 검색 하려면 다음 닫힙니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.Fill%2A>는 호출을 열린 상태로 유지 합니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       <xref:System.Data.Common.DbDataAdapter.Fill%2A>대상에 행을 추가 하는 작업을 다음 <xref:System.Data.DataTable>개체에 <xref:System.Data.DataSet>만들기는 <xref:System.Data.DataTable>경우 이미 없는 개체.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 만들 때 <xref:System.Data.DataTable>개체는 <xref:System.Data.Common.DbDataAdapter.Fill%2A>작업은 일반적으로 열 이름 메타 데이터만 만듭니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> 그러나 경우는 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>속성이 `AddWithKey`, 적절 한 기본 키와 제약 조건도 만들어집니다.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       경우는 <xref:System.Data.Common.DbDataAdapter>중복 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 &quot;*columnname*1&quot; &quot;*columnname*2&quot;,&quot;*columnname*3&quot; 등.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet> 여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>각 결과 집합은 별도 테이블에 배치 됩니다.</xref:System.Data.DataSet> 추가 결과 집합이 지정한 테이블 이름 (예: &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 응용 프로그램 명명 패턴과 충돌 하지 않도록 확인 해야 합니다.       <xref:System.Data.Common.DbDataAdapter.Fill%2A>메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet>여러 개 포함 된 <xref:System.Data.DataTable>개체 이름이 대/소문자만 다른.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 이러한 상황에서는 <xref:System.Data.Common.DbDataAdapter.Fill%2A>해당 테이블을 찾지 대/소문자 구분 비교를 수행 하 고 있는 정확한 일치 항목이 없는 경우 새 테이블을 만듭니다.</xref:System.Data.Common.DbDataAdapter.Fill%2A> 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A>라고 및 <xref:System.Data.DataSet>하나만 포함 되어 <xref:System.Data.DataTable>이름이만 대/소문자는 <xref:System.Data.DataTable>업데이트 됩니다.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 이 시나리오에서는 비교는 대/소문자 구분 합니다. 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```<xref:System.Data.Common.DbDataAdapter.Fill%2A>여러 번에 같은 <xref:System.Data.DataTable>했습니다.</xref:System.Data.DataTable> 메서드</xref:System.Data.Common.DbDataAdapter.Fill%2A> 를 사용할 수 있습니다. 기본 키가 있는 경우 이미 존재 하는 일치 하는 행과 들어오는 행이 병합 됩니다. 기본 키가 없으면 들어오는 행을 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 추가       경우는 `SelectCommand` OUTER JOIN의 결과 반환 된 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 결과 대 한 값</xref:System.Data.DataTable.PrimaryKey%2A> 을 설정 하지 않습니다 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 참조[기본 키 정의](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] >의 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.Fill%2A>및 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>.NET Framework 데이터에 대 한 공급자만 첫 번째 결과 대 한 스키마 정보를 검색 합니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> 레코드로 채울 및 필요한 경우 스키마입니다."
    - id: startRecord
      type: System.Int32
      description: "시작 하려면&0;부터 시작 레코드 번호입니다."
    - id: maxRecords
      type: System.Int32
      description: "검색할 레코드의 최대 수입니다."
    - id: srcTable
      type: System.String
      description: "테이블 매핑에 사용할 원본 테이블의 이름입니다."
    - id: command
      type: System.Data.IDbCommand
      description: "SQL SELECT 문을 데이터 원본에서 행을 검색 하는 데 사용 합니다."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "중 하나는 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> 값입니다."
    return:
      type: System.Int32
      description: "행 수가 성공적으로 추가 하거나 새로 고쳐지지는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다. 이 행을 반환 하지 않는 문에 의해 영향을 받는 행을 포함 되지 않습니다."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "원본 테이블이 올바르지 않습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> startRecord </code> 매개 변수는 0 보다 작습니다.       -또는- <code> maxRecords </code> 매개 변수는 0 보다 작습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  id: FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터 어댑터를 채우는 데 사용 되는 명령의 동작을 가져오거나 설정 합니다."
  syntax:
    content: protected System.Data.CommandBehavior FillCommandBehavior { get; set; }
    return:
      type: System.Data.CommandBehavior
      description: "<xref href=&quot;System.Data.CommandBehavior&quot;> </xref> 데이터 어댑터를 채우는 데 사용 되는 명령입니다."
  overload: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 <xref href=&quot;System.Data.DataTable&quot;> </xref> 지정 된 &quot;Table&quot; 이라는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 데이터 원본의 기반으로 지정 하는 스키마와 일치 하도록 구성 하 고 <xref href=&quot;System.Data.SchemaType&quot;> </xref>합니다."
  remarks: "이 메서드는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 를 사용 하 여 데이터 원본에서 스키마 정보를 검색 합니다.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>작업을 추가합니다 <xref:System.Data.DataTable> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 대상</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 그런 다음 열을 추가 <xref:System.Data.DataColumnCollection>의 <xref:System.Data.DataTable>, 다음을 구성 하 고 <xref:System.Data.DataColumn>속성 데이터 원본에 존재 하는 경우:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> 설정 해야 <xref:System.Data.DataColumn.AutoIncrementStep%2A>및 <xref:System.Data.DataColumn.AutoIncrementSeed%2A>별도로.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>또한 구성 된 <xref:System.Data.DataTable.PrimaryKey%2A>및 <xref:System.Data.DataTable.Constraints%2A>다음 규칙에 따라 속성:-의 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 대 한 기본 키 열으로 사용 하</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 여 하나 이상의 기본 키 열이 반환 하는 경우</xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -기본 키 열이 반환 되지 고유 열이 표시 되지만 경우 고유 열 경우, 그리고 모든 고유 열이 null이 아닌 경우에 기본 키로 사용 됩니다. 열이 null을 허용 하는 경우는 <xref:System.Data.UniqueConstraint>에 추가 되는 <xref:System.Data.ConstraintCollection>, 하지만 <xref:System.Data.DataTable.PrimaryKey%2A>속성이 설정 되지 않았습니다.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      - <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 대 한 기본 키 열으로 기본 키 열은 사용 기본 키 열과 고유 열이 모두 반환 하는 경우       기본 키와 unique 제약 조건에 추가 된 <xref:System.Data.ConstraintCollection>선행 규칙에 있지만 다른 제약 조건에 따라 형식이 추가 되지 않습니다.</xref:System.Data.ConstraintCollection>       고유 클러스터형 인덱스가 하나 이상의 SQL Server 테이블의 열에 정의 된 및 기본 키 제약 조건을 별도의 열 집합에 정의 되어 클러스터형된 인덱스에 있는 열의 이름이 반환 됩니다. 기본 키 열 이름으로를 반환 하려면 기본 키 인덱스의 이름을 지정 하는 SELECT 문을 사용 하 여 쿼리 힌트를 사용 합니다. 쿼리 힌트를 지정 하는 방법에 대 한 자세한 내용은 참조 [쿼리 힌트 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)합니다.       기본 키 정보 중에 사용 되 <xref:System.Data.Common.DbDataAdapter.Fill%2A>찾기 및 바꾸기 키 열이 일치 행.</xref:System.Data.Common.DbDataAdapter.Fill%2A> 이것이 원하는 동작을 사용 하 여 <xref:System.Data.Common.DbDataAdapter.Fill%2A>스키마 정보를 요청 하지 않고.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       경우는 <xref:System.Data.IDataAdapter>중복 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 &quot;*columnname*1&quot; &quot;*columnname*2&quot;,&quot;*columnname*3&quot; 등.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet> 여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>각 결과 집합은 별도 테이블에 배치 됩니다.</xref:System.Data.DataSet> 추가 결과 집합이 지정한 테이블 이름 (예를 들어 &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 응용 프로그램 명명 패턴과 충돌 하지 않도록 확인 해야 합니다.       <xref:System.Data.IDbConnection>select 명령에서 연관 된 개체는 유효 해야 합니다. 하지만 열 필요는 없습니다.</xref:System.Data.IDbConnection> 경우는 <xref:System.Data.IDbConnection>전에 닫은 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>은 호출은 열 데이터를 검색 하려면 다음 닫힙니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.IDbConnection> 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>은 라는 것을 남겨 둘지.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>      > [!NOTE] >의 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>만 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 여러 결과 대 한 스키마 정보를 검색 하려면 사용 <xref:System.Data.Common.DbDataAdapter.Fill%2A>와 <xref:System.Data.MissingSchemaAction>로 설정 `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>,.NET Framework Data Provider for SQL Server를 실행 중인 문의 FOR BROWSE 절을 추가 합니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 사용자는 사용 하는 SET FMTONLY ON 문 같은 잠재적인 파생 작업이 알고 있어야 합니다. 자세한 내용은 SQL Server 온라인 설명서를 참조 하십시오."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/visualbasic/5283d285-2680-48b0-856a-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/csharp/5283d285-2680-48b0-856a-_1.cs)]"
  syntax:
    content: public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> 에서 스키마를 삽입할 합니다."
    - id: schemaType
      type: System.Data.SchemaType
      description: "중 하나는 <xref href=&quot;System.Data.SchemaType&quot;> </xref> 스키마를 삽입 하는 방법을 지정 하는 값입니다."
    return:
      type: System.Data.DataTable[]
      description: "컬렉션에 대 한 참조 <xref href=&quot;System.Data.DataTable&quot;> </xref> 에 추가 된 개체는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "지정 된 스키마를 구성 <xref href=&quot;System.Data.DataTable&quot;> </xref> 지정한 <xref href=&quot;System.Data.SchemaType&quot;> </xref>합니다."
  remarks: "FillSchema 메서드 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 를 사용 하 여 데이터 원본에서 스키마를 검색 합니다. 와 연결 된 연결 개체는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>유효 해야 하지만 열려 있이 필요는 없습니다.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> FillSchema가 호출 되기 전에 연결이 닫혀 있는 경우 데이터를 검색에 대 한 열은 다음 종료 합니다. FillSchema가 호출 되기 전에 연결이 열려 있으면 열린 상태로 유지 합니다.       FillSchema 작업에 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 를 반환합니다. 그런 다음 열을 추가 <xref:System.Data.DataColumnCollection>의 <xref:System.Data.DataTable>, 다음을 구성 하 고 <xref:System.Data.DataColumn>속성 데이터 원본에 존재 하는 경우:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> 설정 해야 <xref:System.Data.DataColumn.AutoIncrementStep%2A>및 <xref:System.Data.DataColumn.AutoIncrementSeed%2A>별도로.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A>FillSchema 또한 구성는 <xref:System.Data.DataTable.PrimaryKey%2A>및 <xref:System.Data.DataTable.Constraints%2A>다음 규칙에 따라 속성:-경우는 <xref:System.Data.DataTable.PrimaryKey%2A>에 대해 이미 정의 `DataTable`, 또는 `DataTable` 데이터가 들어는 `PrimaryKey` 속성을 설정 하지 것입니다.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -하나 이상의 기본 키 열에서 반환 되는 경우는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>에 대 한 기본 키 열으로 사용 되는 `DataTable`.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>      -기본 키 열이 반환 되지 고유 열이 표시 되지만 경우 고유 열 경우, 그리고 모든 고유 열이 null이 아닌 경우에 기본 키로 사용 됩니다. 열이 null을 허용 하는 경우는 <xref:System.Data.UniqueConstraint>에 추가 되는 <xref:System.Data.ConstraintCollection>, 되지만 `PrimaryKey` 속성이 설정 되지 않았습니다.</xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -기본 키 열에 대 한 기본 키 열으로 사용 되는 기본 키 열과 고유 열이 모두 반환 하는 경우는 `DataTable`합니다.       기본 키와 unique 제약 조건에 추가 된 <xref:System.Data.ConstraintCollection>선행 규칙에 있지만 다른 제약 조건에 따라 형식이 추가 되지 않습니다.</xref:System.Data.ConstraintCollection> 이 프로세스 서버에 여러 번 왕복 해야 할 수 있습니다.       고유 클러스터형 인덱스가 하나 이상의 SQL Server 테이블의 열에 정의 된 및 기본 키 제약 조건을 별도의 열 집합에 정의 되어 클러스터형된 인덱스에 있는 열의 이름이 반환 됩니다. 기본 키 열 이름으로를 반환 하려면 기본 키 인덱스의 이름을 지정 하는 SELECT 문을 사용 하 여 쿼리 힌트를 사용 합니다. 쿼리 힌트를 지정 하는 방법에 대 한 자세한 내용은 참조 [쿼리 힌트 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)합니다.       경우는 <xref:System.Data.Common.DbDataAdapter>중복 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 &quot;*columnname*1&quot; &quot;*columnname*2&quot;,&quot;*columnname*3&quot; 등.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet> 여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>각 결과 집합은 별도 테이블에 배치 됩니다.</xref:System.Data.DataSet> 추가 결과 집합이 지정한 테이블 이름 (예를 들어 &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 응용 프로그램 명명 패턴과 충돌 하지 않도록 확인 해야 합니다.       FillSchema 모든 행을 반환 하지 않습니다. <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 행을 추가 하는 메서드</xref:System.Data.Common.DbDataAdapter.Fill%2A> 를 사용 하 여      > [!NOTE] > 여러 개의 결과 반환 하는 SQL 문을 일괄 처리, 구현의 FillSchema.NET Framework Data provider for OLE DB만 첫 번째 결과 대 한 스키마 정보를 검색 합니다. 여러 결과 대 한 스키마 정보를 검색 하려면 사용 <xref:System.Data.Common.DbDataAdapter.Fill%2A>와 <xref:System.Data.MissingSchemaAction>로 설정 `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       FillSchema를 사용할 때.NET Framework Data Provider for SQL Server를 실행 중인 문의 FOR BROWSE 절을 추가 합니다. 사용자는 사용 하는 SET FMTONLY ON 문 같은 잠재적인 파생 작업이 알고 있어야 합니다. 자세한 내용은 SQL Server 온라인 설명서를 참조 하십시오."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/visualbasic/658ac10a-3a87-4693-8b37-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/csharp/658ac10a-3a87-4693-8b37-_1.cs)]"
  syntax:
    content: public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> 하 여 데이터 원본에서 스키마로 채워집니다."
    - id: schemaType
      type: System.Data.SchemaType
      description: "중 하나는 <xref href=&quot;System.Data.SchemaType&quot;> </xref> 값입니다."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 데이터 소스에서 반환 된 스키마 정보를 포함 하 합니다."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 <xref href=&quot;System.Data.DataTable&quot;> </xref> 지정 된 <xref href=&quot;System.Data.DataSet&quot;> </xref> 지정 된 기준으로 데이터 소스 스키마와 일치 하도록 스키마를 구성 하 고 <xref href=&quot;System.Data.SchemaType&quot;> </xref> 및 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다."
  remarks: "이 메서드는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 를 사용 하 여 데이터 원본에서 스키마 정보를 검색 합니다.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>작업을 추가합니다 <xref:System.Data.DataTable> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 대상</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 그런 다음 열을 추가 <xref:System.Data.DataColumnCollection>의 <xref:System.Data.DataTable>, 다음을 구성 하 고 <xref:System.Data.DataColumn>속성 데이터 원본에 존재 하는 경우:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> 설정 해야 <xref:System.Data.DataColumn.AutoIncrementStep%2A>및 <xref:System.Data.DataColumn.AutoIncrementSeed%2A>별도로.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>또한 구성 된 <xref:System.Data.DataTable.PrimaryKey%2A>및 <xref:System.Data.DataTable.Constraints%2A>다음 규칙에 따라 속성:-의 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 대 한 기본 키 열으로 사용 하</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 여 하나 이상의 기본 키 열이 반환 하는 경우</xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -기본 키 열이 반환 되지 고유 열이 표시 되지만 경우 고유 열 경우, 그리고 모든 고유 열이 null이 아닌 경우에 기본 키로 사용 됩니다. 열이 null을 허용 하는 경우는 <xref:System.Data.UniqueConstraint>에 추가 되는 <xref:System.Data.ConstraintCollection>, 하지만 <xref:System.Data.DataTable.PrimaryKey%2A>속성이 설정 되지 않았습니다.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      - <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 대 한 기본 키 열으로 기본 키 열은 사용 기본 키 열과 고유 열이 모두 반환 하는 경우       기본 키와 unique 제약 조건에 추가 된 <xref:System.Data.ConstraintCollection>선행 규칙에 있지만 다른 제약 조건에 따라 형식이 추가 되지 않습니다.</xref:System.Data.ConstraintCollection>       고유 클러스터형 인덱스가 하나 이상의 SQL Server 테이블의 열에 정의 된 및 기본 키 제약 조건을 별도의 열 집합에 정의 되어 클러스터형된 인덱스에 있는 열의 이름이 반환 됩니다. 기본 키 열 이름으로를 반환 하려면 기본 키 인덱스의 이름을 지정 하는 SELECT 문을 사용 하 여 쿼리 힌트를 사용 합니다. 쿼리 힌트를 지정 하는 방법에 대 한 자세한 내용은 참조 [쿼리 힌트 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)합니다.       기본 키 정보 중에 사용 되 <xref:System.Data.Common.DbDataAdapter.Fill%2A>찾기 및 바꾸기 키 열이 일치 행.</xref:System.Data.Common.DbDataAdapter.Fill%2A> 이것이 원하는 동작을 사용 하 여 <xref:System.Data.Common.DbDataAdapter.Fill%2A>스키마 정보를 요청 하지 않고.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       경우는 <xref:System.Data.Common.DbDataAdapter>중복 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 &quot;*columnname*1&quot; &quot;*columnname*2&quot;,&quot;*columnname*3&quot; 등.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet> 여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>각 결과 집합은 별도 테이블에 배치 됩니다.</xref:System.Data.DataSet> 추가 결과 집합이 지정한 테이블 이름 (예를 들어 &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 응용 프로그램 명명 패턴과 충돌 하지 않도록 확인 해야 합니다.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet>여러 개 포함 된 <xref:System.Data.DataTable>개체 이름이 대/소문자만 다른.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 이러한 상황에서는 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>해당 테이블을 찾지 대/소문자 구분 비교를 수행 하 고 있는 정확한 일치 항목이 없는 경우 새 테이블을 만듭니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>라고 및 <xref:System.Data.DataSet>하나만 포함 되어 <xref:System.Data.DataTable>이름이만 대/소문자는 <xref:System.Data.DataTable>업데이트 됩니다.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 이 시나리오에서는 비교는 대/소문자 구분 합니다. 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```<xref:System.Data.IDbConnection>select 명령에서 연관 된 개체는 유효 해야 합니다. 하지만 열 필요는 없습니다.</xref:System.Data.IDbConnection> 경우는 <xref:System.Data.IDbConnection>전에 닫은 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>은 호출은 열 데이터를 검색 하려면 다음 닫힙니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.IDbConnection> 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>은 라는 것을 남겨 둘지.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>      > [!NOTE] >의 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>만 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 여러 결과 대 한 스키마 정보를 검색 하려면 사용 <xref:System.Data.Common.DbDataAdapter.Fill%2A>와 <xref:System.Data.MissingSchemaAction>로 설정 `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>,.NET Framework Data Provider for SQL Server를 실행 중인 문의 FOR BROWSE 절을 추가 합니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 사용자는 사용 하는 SET FMTONLY ON 문 같은 잠재적인 파생 작업이 알고 있어야 합니다. 자세한 내용은 SQL Server 온라인 설명서를 참조 하십시오."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/visualbasic/c7e2b899-0a44-4d9d-9e8d-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/csharp/c7e2b899-0a44-4d9d-9e8d-_1.cs)]"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> 에서 스키마를 삽입할 합니다."
    - id: schemaType
      type: System.Data.SchemaType
      description: "중 하나는 <xref href=&quot;System.Data.SchemaType&quot;> </xref> 스키마를 삽입 하는 방법을 지정 하는 값입니다."
    - id: srcTable
      type: System.String
      description: "테이블 매핑에 사용할 원본 테이블의 이름입니다."
    return:
      type: System.Data.DataTable[]
      description: "컬렉션에 대 한 참조 <xref href=&quot;System.Data.DataTable&quot;> </xref> 에 추가 된 개체는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "스키마를 얻을 수 있는 원본 테이블을 찾을 수 없습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "지정 된 스키마를 구성 <xref href=&quot;System.Data.DataTable&quot;> </xref> 지정한 <xref href=&quot;System.Data.SchemaType&quot;> </xref>, 명령 문자열 및 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> 값입니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter.FillSchema%2A> <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 를 사용 하 여 데이터 원본에서 스키마를 검색 하는 메서드</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 와 연결 된 연결 개체는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>유효 해야 하지만 열려 있이 필요는 없습니다.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 하기 전에 연결이 닫히거나 경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>은 호출은 열 데이터를 검색 하려면 다음 닫힙니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>는 호출을 열린 상태로 유지 합니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>작업을 추가합니다 <xref:System.Data.DataTable> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 대상</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 그런 다음 열을 추가 <xref:System.Data.DataColumnCollection>의 <xref:System.Data.DataTable>, 다음을 구성 하 고 <xref:System.Data.DataColumn>속성 데이터 원본에 존재 하는 경우:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> 설정 해야 <xref:System.Data.DataColumn.AutoIncrementStep%2A>및 <xref:System.Data.DataColumn.AutoIncrementSeed%2A>별도로.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>또한 구성 된 <xref:System.Data.DataTable.PrimaryKey%2A>및 <xref:System.Data.DataTable.Constraints%2A>다음 규칙에 따라 속성:-의 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 대 한 기본 키 열으로 사용 하</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 여 하나 이상의 기본 키 열이 반환 하는 경우</xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -기본 키 열이 반환 되지 고유 열이 표시 되지만 경우 고유 열 경우, 그리고 모든 고유 열이 null이 아닌 경우에 기본 키로 사용 됩니다. 열이 null을 허용 하는 경우는 <xref:System.Data.UniqueConstraint>에 추가 되는 <xref:System.Data.ConstraintCollection>, 하지만 <xref:System.Data.DataTable.PrimaryKey%2A>속성이 설정 되지 않았습니다.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      - <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 대 한 기본 키 열으로 기본 키 열은 사용 기본 키 열과 고유 열이 모두 반환 하는 경우       기본 키와 unique 제약 조건에 추가 된 <xref:System.Data.ConstraintCollection>선행 규칙에 있지만 다른 제약 조건에 따라 형식이 추가 되지 않습니다.</xref:System.Data.ConstraintCollection>       고유 클러스터형 인덱스가 하나 이상의 SQL Server 테이블의 열에 정의 된 및 기본 키 제약 조건을 별도의 열 집합에 정의 되어 클러스터형된 인덱스에 있는 열의 이름이 반환 됩니다. 기본 키 열 이름으로를 반환 하려면 기본 키 인덱스의 이름을 지정 하는 SELECT 문을 사용 하 여 쿼리 힌트를 사용 합니다. 쿼리 힌트를 지정 하는 방법에 대 한 자세한 내용은 참조 [쿼리 힌트 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)합니다.       경우는 <xref:System.Data.IDataAdapter>중복 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 &quot;*columnname*1&quot; &quot;*columnname*2&quot;,&quot;*columnname*3&quot; 등.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet> 여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>각 결과 집합은 별도 테이블에 배치 됩니다.</xref:System.Data.DataSet> 추가 결과 집합이 지정한 테이블 이름 (예를 들어 &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 응용 프로그램 명명 패턴과 충돌 하지 않도록 확인 해야 합니다.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>모든 행을 반환 하지 않습니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 행을 추가 하는 메서드</xref:System.Data.Common.DbDataAdapter.Fill%2A> 를 사용 하 여      > [!NOTE] >의 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>만 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 여러 결과 대 한 스키마 정보를 검색 하려면 사용 <xref:System.Data.Common.DbDataAdapter.Fill%2A>와 <xref:System.Data.MissingSchemaAction>로 설정 `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>,.NET Framework Data Provider for SQL Server를 실행 중인 문의 FOR BROWSE 절을 추가 합니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 사용자는 사용 하는 SET FMTONLY ON 문 같은 잠재적인 파생 작업이 알고 있어야 합니다. 자세한 내용은 SQL Server 온라인 설명서를 참조 하십시오."
  syntax:
    content: protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> 하 여 데이터 원본에서 스키마로 채워집니다."
    - id: schemaType
      type: System.Data.SchemaType
      description: "중 하나는 <xref href=&quot;System.Data.SchemaType&quot;> </xref> 값입니다."
    - id: command
      type: System.Data.IDbCommand
      description: "SQL SELECT 문을 데이터 원본에서 행을 검색 하는 데 사용 합니다."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "중 하나는 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> 값입니다."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 포함 된 개체 데이터 소스에서 반환 합니다."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 <xref href=&quot;System.Data.DataTable&quot;> </xref> 지정 된 <xref href=&quot;System.Data.DataSet&quot;> </xref> 데이터 원본의 기반으로 지정 하는 스키마와 일치 하도록 구성 하 고 <xref href=&quot;System.Data.SchemaType&quot;> </xref>합니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter.FillSchema%2A> <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 를 사용 하 여 데이터 원본에서 스키마를 검색 하는 메서드</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 와 연결 된 연결 개체는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>유효 해야 하지만 열려 있이 필요는 없습니다.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 하기 전에 연결이 닫히거나 경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>은 호출은 열 데이터를 검색 하려면 다음 닫힙니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>는 호출을 열린 상태로 유지 합니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>작업을 추가합니다 <xref:System.Data.DataTable> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 대상</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 그런 다음 열을 추가 <xref:System.Data.DataColumnCollection>의 <xref:System.Data.DataTable>, 다음을 구성 하 고 <xref:System.Data.DataColumn>속성 데이터 원본에 존재 하는 경우:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> 설정 해야 <xref:System.Data.DataColumn.AutoIncrementStep%2A>및 <xref:System.Data.DataColumn.AutoIncrementSeed%2A>별도로.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>또한 구성 된 <xref:System.Data.DataTable.PrimaryKey%2A>및 <xref:System.Data.DataTable.Constraints%2A>다음 규칙에 따라 속성:-의 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 대 한 기본 키 열으로 사용 하</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 여 하나 이상의 기본 키 열이 반환 하는 경우</xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -기본 키 열이 반환 되지 고유 열이 표시 되지만 경우 고유 열 경우, 그리고 모든 고유 열이 null이 아닌 경우에 기본 키로 사용 됩니다. 열이 null을 허용 하는 경우는 <xref:System.Data.UniqueConstraint>에 추가 되는 <xref:System.Data.ConstraintCollection>, 하지만 <xref:System.Data.DataTable.PrimaryKey%2A>속성이 설정 되지 않았습니다.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      - <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 대 한 기본 키 열으로 기본 키 열은 사용 기본 키 열과 고유 열이 모두 반환 하는 경우       기본 키와 unique 제약 조건에 추가 된 <xref:System.Data.ConstraintCollection>선행 규칙에 있지만 다른 제약 조건에 따라 형식이 추가 되지 않습니다.</xref:System.Data.ConstraintCollection>       고유 클러스터형 인덱스가 하나 이상의 SQL Server 테이블의 열에 정의 된 및 기본 키 제약 조건을 별도의 열 집합에 정의 되어 클러스터형된 인덱스에 있는 열의 이름이 반환 됩니다. 기본 키 열 이름으로를 반환 하려면 기본 키 인덱스의 이름을 지정 하는 SELECT 문을 사용 하 여 쿼리 힌트를 사용 합니다. 쿼리 힌트를 지정 하는 방법에 대 한 자세한 내용은 참조 [쿼리 힌트 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)합니다.       경우는 <xref:System.Data.IDataAdapter>중복 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 &quot;*columnname*1&quot; &quot;*columnname*2&quot;,&quot;*columnname*3&quot; 등.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet> 여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>각 결과 집합은 별도 테이블에 배치 됩니다.</xref:System.Data.DataSet> 추가 결과 집합이 지정한 테이블 이름 (예를 들어 &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 응용 프로그램 명명 패턴과 충돌 하지 않도록 확인 해야 합니다.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet>여러 개 포함 된 <xref:System.Data.DataTable>개체 이름이 대/소문자만 다른.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 이러한 상황에서는 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>해당 테이블을 찾지 대/소문자 구분 비교를 수행 하 고 있는 정확한 일치 항목이 없는 경우 새 테이블을 만듭니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>라고 및 <xref:System.Data.DataSet>하나만 포함 되어 <xref:System.Data.DataTable>이름이만 대/소문자는 <xref:System.Data.DataTable>업데이트 됩니다.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 이 시나리오에서는 비교는 대/소문자 구분 합니다. 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>모든 행을 반환 하지 않습니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 행을 추가 하는 메서드</xref:System.Data.Common.DbDataAdapter.Fill%2A> 를 사용 하 여      > [!NOTE] >의 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>만 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 여러 결과 대 한 스키마 정보를 검색 하려면 사용 <xref:System.Data.Common.DbDataAdapter.Fill%2A>와 <xref:System.Data.MissingSchemaAction>로 설정 `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>,.NET Framework Data Provider for SQL Server를 실행 중인 문의 FOR BROWSE 절을 추가 합니다.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 사용자는 사용 하는 SET FMTONLY ON 문 같은 잠재적인 파생 작업이 알고 있어야 합니다. 자세한 내용은 SQL Server 온라인 설명서를 참조 하십시오."
  syntax:
    content: protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> 하 여 데이터 원본에서 스키마로 채워집니다."
    - id: schemaType
      type: System.Data.SchemaType
      description: "중 하나는 <xref href=&quot;System.Data.SchemaType&quot;> </xref> 값입니다."
    - id: command
      type: System.Data.IDbCommand
      description: "SQL SELECT 문을 데이터 원본에서 행을 검색 하는 데 사용 합니다."
    - id: srcTable
      type: System.String
      description: "테이블 매핑에 사용할 원본 테이블의 이름입니다."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "중 하나는 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> 값입니다."
    return:
      type: System.Data.DataTable[]
      description: "배열을 <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보를 포함 하는 개체 데이터 소스에서 반환 합니다."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  id: GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "반환 된 <xref href=&quot;System.Data.IDataParameter&quot;> </xref> 에서 현재 일괄 처리에서 명령 중 하나입니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter>이 메서드에서 throw <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> 상속 된 클래스 <xref:System.Data.Common.DbDataAdapter>일괄 처리에 대 한 지원을 제공 하려면이 메서드를 재정의 합니다.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "인덱스에서 매개 변수를 검색 하기 위한 명령입니다."
    - id: parameterIndex
      type: System.Int32
      description: "명령에 매개 변수의 인덱스입니다."
    return:
      type: System.Data.IDataParameter
      description: "<xref href=&quot;System.Data.IDataParameter&quot;> </xref> 지정 합니다."
  overload: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "어댑터는 일괄 처리를 지원 하지 않습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  id: GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "더 큰 일괄 처리 된 업데이트 내에서 개별 업데이트 시도 대 한 정보를 반환합니다."
  remarks: "일괄 처리 업데이트 논리를 지 원하는 데이터 공급자는 일련의 <xref:System.Data.Common.DbDataAdapter>클래스</xref:System.Data.Common.DbDataAdapter> 의 가상 메서드를 재정의 해야 합니다. `GetBatchedRecordsAffected`이러한 가상 메서드 중 하나를 나타냅니다. `DbDataAdapter` 클래스가 의존 `GetBatchedRecordsAffected` 해당 표시는 일괄 처리 내에서 개별 업데이트 시도의 성공 여부를 확인 하려면 <xref:System.Data.DataRow>적절 하 게.</xref:System.Data.DataRow>"
  syntax:
    content: protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "일괄 처리 내 개별 명령의&0;부터 시작 하는 열 서 수입니다."
    - id: recordsAffected
      type: System.Int32
      description: "지정된 된 명령을 일괄 처리 내 데이터 저장소에 영향을 받는 행의 수입니다."
    - id: error
      type: System.Exception
      description: "<xref:System.Exception>지정된 된 명령 실행 하는 동안 발생 합니다.</xref:System.Exception> 반환 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual basic에서) 경우 예외가 발생 하지 않습니다."
    return:
      type: System.Boolean
      description: "더 큰 일괄 처리 된 업데이트 내에서 개별 업데이트 시도 대 한 정보입니다."
  overload: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "SQL SELECT 문을 실행할 때 사용자가 설정 된 매개 변수를 가져옵니다."
  syntax:
    content: public override System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "배열을 <xref href=&quot;System.Data.IDataParameter&quot;> </xref> 사용자가 매개 변수를 포함 하는 개체를 설정 합니다."
  overload: System.Data.Common.DbDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  id: InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "일괄 처리를 초기화는 <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>합니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter>이 메서드에서 throw <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> 상속 된 클래스 <xref:System.Data.Common.DbDataAdapter>일괄 처리에 대 한 지원을 제공 하려면이 메서드를 재정의 합니다.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void InitializeBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.InitializeBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "어댑터는 일괄 처리를 지원 하지 않습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  id: InsertCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터 원본에 새 레코드를 삽입 하는 데 사용 하는 명령을 가져오거나 설정 합니다."
  remarks: "동안 <xref:System.Data.Common.DbDataAdapter.Update%2A>경우이 속성은 설정 되지 않으며 기본 키 정보에 있는지는 <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.InsertCommand%2A>자동으로 생성 됩니다.</xref:System.Data.IDbDataAdapter.InsertCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand InsertCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.IDbCommand&quot;> </xref> 하는 동안 사용 <xref:System.Data.IDataAdapter.Update*>데이터 집합의 새 행에 대 한 데이터 원본에서 레코드를 삽입 합니다.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "발생 된 <xref uid=&quot;langword_csharp_RowUpdated&quot; name=&quot;RowUpdated&quot; href=&quot;&quot;> </xref> .NET Framework 데이터 공급자의 이벤트입니다."
  remarks: '이벤트를 발생 시키는 대리자를 통해 이벤트 처리기를 호출 합니다. 에 대 한 개요 [NIB: 이벤트를 발생 시키는](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)합니다.'
  syntax:
    content: protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatedEventArgs
      description: "A <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "발생 된 <xref uid=&quot;langword_csharp_RowUpdating&quot; name=&quot;RowUpdating&quot; href=&quot;&quot;> </xref> .NET Framework 데이터 공급자의 이벤트입니다."
  remarks: '이벤트를 발생 시키는 대리자를 통해 이벤트 처리기를 호출 합니다. 에 대 한 개요 [NIB: 이벤트를 발생 시키는](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)합니다.'
  syntax:
    content: protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatingEventArgs
      description: "<xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdating*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  id: SelectCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터 원본에서 레코드를 선택 하는 데 사용 하는 명령을 가져오거나 설정 합니다."
  remarks: ''
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_1_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_1_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand SelectCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.IDbCommand&quot;> </xref> 중 사용 되는 <xref:System.Data.IDataAdapter.Update*>데이터 집합에 배치 하기 위해 데이터 원본에서 레코드를 선택 합니다.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  id: System#Data#IDbDataAdapter#DeleteCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터 집합에서 레코드를 삭제 하기 위한 SQL 문을 가져오거나 설정 합니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.Common.DbDataAdapter>인스턴스로 캐스팅 되는 <xref:System.Data.IDbDataAdapter>인터페이스.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       자세한 내용은 <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.</xref:System.Data.IDbDataAdapter.DeleteCommand%2A> 을 참조 하십시오."
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> 하는 동안 사용 <xref:System.Data.Common.DbDataAdapter.Update*>데이터 집합에서 삭제 된 행에 대 한 데이터 원본에서 레코드를 삭제 합니다.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  id: System#Data#IDbDataAdapter#InsertCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터 원본에 새 레코드를 삽입 하는 데 사용 되는 SQL 문을 가져오거나 설정 합니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.Common.DbDataAdapter>인스턴스로 캐스팅 되는 <xref:System.Data.IDbDataAdapter>인터페이스.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       자세한 내용은 <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.</xref:System.Data.IDbDataAdapter.InsertCommand%2A> 을 참조 하십시오."
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> 하는 동안 사용 <xref:System.Data.Common.DbDataAdapter.Update*>데이터 집합의 새 행에 대 한 데이터 원본에서 레코드를 삽입 합니다.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  id: System#Data#IDbDataAdapter#SelectCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터 원본에서 레코드를 선택 하는 데 사용 되는 SQL 문을 가져오거나 설정 합니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.Common.DbDataAdapter>인스턴스로 캐스팅 되는 <xref:System.Data.IDbDataAdapter>인터페이스.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       자세한 내용은 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 을 참조 하십시오."
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> 중 사용 되는 <xref:System.Data.Common.DbDataAdapter.Update*>데이터 집합에 배치 하기 위해 데이터 원본에서 레코드를 선택 합니다.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  id: System#Data#IDbDataAdapter#UpdateCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터 원본에서 레코드를 업데이트 하는 데 사용 되는 SQL 문을 가져오거나 설정 합니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.Common.DbDataAdapter>인스턴스로 캐스팅 되는 <xref:System.Data.IDbDataAdapter>인터페이스.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       자세한 내용은 <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.</xref:System.Data.IDbDataAdapter.UpdateCommand%2A> 을 참조 하십시오."
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> 하는 동안 사용 <xref:System.Data.Common.DbDataAdapter.Update*>데이터 집합의 수정 된 행에 대 한 데이터 원본에서 레코드를 업데이트 합니다.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "현재 인스턴스의 복사본 인 새 개체를 만듭니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.Common.DbDataAdapter>인스턴스로 캐스팅 되는 <xref:System.ICloneable>인터페이스.</xref:System.ICloneable> </xref:System.Data.Common.DbDataAdapter>       자세한 내용은 <xref:System.ICloneable.Clone%2A?displayProperty=fullName>.</xref:System.ICloneable.Clone%2A?displayProperty=fullName> 을 참조 하십시오."
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "이 인스턴스의 복사본 인 새 개체입니다."
  overload: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  id: TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "일괄 처리를 종료는 <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>합니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter>이 메서드에서 throw <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> 상속 된 클래스 <xref:System.Data.Common.DbDataAdapter>일괄 처리에 대 한 지원을 제공 하려면이 메서드를 재정의 합니다.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void TerminateBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.TerminateBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "어댑터는 일괄 처리를 지원 하지 않습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  id: Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터베이스의 값을 삽입, 업데이트 또는 삭제할 행에서 지정된 된 배열에 각각에 대 한 각 INSERT, UPDATE 또는 DELETE 문을 실행 하 여 업데이트 된 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  remarks: "응용 프로그램 호출 하는 경우는 <xref:System.Data.Common.DbDataAdapter.Update%2A>메서드는 <xref:System.Data.Common.DbDataAdapter>검사 하는 <xref:System.Data.DataRow.RowState%2A>속성을 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 구성 된 인덱스 순서에 따라 각 행에 대해 반복적으로 필요한 INSERT, UPDATE 또는 DELETE 문을 실행 하 고</xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> 예를 들어 <xref:System.Data.Common.DbDataAdapter.Update%2A>DELETE 문을 INSERT 문과 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 행의 순서로 인해 다른 DELETE 문을 먼저 실행 될 수 있습니다</xref:System.Data.Common.DbDataAdapter.Update%2A>       이러한 문은 일괄 처리 프로세스로 수행 되지 않습니다 용도로 각 행은 개별적으로 업데이트 됩니다. 응용 프로그램에서 호출할 수는 <xref:System.Data.DataSet.GetChanges%2A>명령문 (예를 들어 업데이트 하기 전에 삽입)의 시퀀스를 제어 해야 할 경우에.</xref:System.Data.DataSet.GetChanges%2A> 자세한 내용은 참조 [Dataadapter로 데이터 원본 업데이트](~/add/includes/ajax-current-ext-md.md)합니다.       경우 INSERT, UPDATE 또는 DELETE 문이 지정 되지 않았습니다는 <xref:System.Data.Common.DbDataAdapter.Update%2A>메서드 예외를 생성 합니다.</xref:System.Data.Common.DbDataAdapter.Update%2A> 만들 수 있습니다는 <xref:System.Data.SqlClient.SqlCommandBuilder>또는 <xref:System.Data.OleDb.OleDbCommandBuilder>설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> 를 설정 하지 않는 추가적인 모든 SQL 문을 그러면는 **CommandBuilder**합니다. 이 세대 논리 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 키 열 정보를 적용. 자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다.       <xref:System.Data.Common.DbDataAdapter.Update%2A>메서드는 업데이트를 수행 하기 전에 첫 번째 매핑에 나열 된 테이블에서 행을 검색 합니다.</xref:System.Data.Common.DbDataAdapter.Update%2A> <xref:System.Data.Common.DbDataAdapter.Update%2A>다음의 값을 사용 하 여 행을 새로 고치는 <xref:System.Data.IDbCommand.UpdatedRowSource%2A>속성.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> 반환 된 추가 행은 무시 됩니다.       모든 데이터에 다시 로드 되는 <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 하는 조정 된 검사 <xref:System.Data.DataSet>행 및 모든 출력 매개 변수는 명령에서 반환 된.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> 행이 성공적으로 업데이트 한 후 해당 행에 변경 내용은 허용 됩니다.       사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>, 실행의 순서는 다음과 같습니다: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  값은 <xref:System.Data.DataRow>매개 변수 값으로 이동 됩니다.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  명령을 실행합니다.      4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`, 첫 번째 반환 결과 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 에 놓입니다.      5.  출력 매개 변수가 있는 경우 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 배치      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>가 호출 됩니다.</xref:System.Data.DataRow.AcceptChanges%2A>       <xref:System.Data.Common.DbDataAdapter>일반적으로 이와 관련 된 매개 변수 컬렉션을 포함</xref:System.Data.Common.DbDataAdapter> 하는와 연결 된 각 명령 매개 변수를 통해 현재 행에 매핑됩니다.는 `SourceColumn` 및 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스입니다. `SourceColumn`참조 하는 <xref:System.Data.DataTable>열 하는 <xref:System.Data.Common.DbDataAdapter>현재 행에 대 한 매개 변수 값을 가져오기에 대 한 참조.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`테이블 매핑이 적용 되기 전에 매핑되지 않은 열 이름을 참조 합니다. 경우 `SourceColumn` 참조 존재 하지 않는 열에는 다음 중 하나에 따라 다른 동작이 수행 <xref:System.Data.MissingMappingAction>값.</xref:System.Data.MissingMappingAction>      | 열거형 값 | 수행 작업 |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| 매핑이 없는 있는 경우에 <xref:System.Data.DataSet>원본 열 이름 및 테이블 이름을 사용 합니다. |   | `MissingMappingAction.Ignore`| A <xref:System.SystemException>생성 됩니다.</xref:System.SystemException> </xref:System.Data.DataSet> 매핑이 명시적으로 설정 된 경우, 입력된 매개 변수는 일반적으로 오류가의 결과 대 한 누락 된 매핑이 있습니다. |   | `MissingMappingAction.Error`| <xref:System.SystemException>생성 됩니다. |       `SourceColumn` 속성은 또한 출력에 대 한 값에 매핑할 사용 입/출력 매개 변수를 또는 `DataSet`.</xref:System.SystemException> 존재 하지 않는 열을 참조 하는 경우 예외가 생성 됩니다.       `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스 Original, Current 또는 Proposed 버전 열 값의 사용 여부를 결정 합니다. 낙관적 동시성 위반을 확인 하는 UPDATE 문의 WHERE 절에 원래 값을 포함 하려면이 기능은 주로 사용 됩니다.      > [!NOTE] > 행을 업데이트 하는 동안 오류가 발생 하는 경우 예외가 throw 되 고 업데이트의 실행이 중단 됩니다. 설정 오류가 발생 하는 경우 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>속성을 `true` <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> 를 호출 하기 전에</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 내에서 각 행 마다 별로 오류를 선택할 수 있습니다는 `RowUpdated` DataAdapter의 이벤트입니다. 내에서 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 `RowUpdated` <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> 속성</xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 을 설정 하는 이벤트"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataRow[] dataRows);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "배열을 <xref href=&quot;System.Data.DataRow&quot;> </xref> 개체 데이터 소스를 업데이트 하는 데 사용 합니다."
    return:
      type: System.Int32
      description: "성공적으로 업데이트 된 행 수는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> 올바르지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "원본 테이블이 올바르지 않습니다."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "더 <xref href=&quot;System.Data.DataRow&quot;> </xref> 업데이트할 합니다.       -또는-No <xref href=&quot;System.Data.DataTable&quot;> </xref> 업데이트할 합니다.       -또는-No <xref href=&quot;System.Data.DataSet&quot;> </xref> 는 원본으로 사용할 수 있습니다."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "INSERT, UPDATE 또는 DELETE 문을 실행 하려고 영향을 받는&0; 개 레코드에서 발생 했습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터베이스의 값을 삽입, 업데이트 또는 지정 된 행을 삭제 각각에 대 한 각 INSERT, UPDATE 또는 DELETE 문을 실행 하 여 업데이트 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  remarks: "응용 프로그램에서 Update 메서드를 호출 하는 경우는 <xref:System.Data.Common.DbDataAdapter>검사 하는 <xref:System.Data.DataRow.RowState%2A>속성을 반복적으로 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 구성 된 인덱스 순서에 따라 각 행에 대 한 필요한 INSERT, UPDATE 또는 DELETE 문을 실행 하 고</xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> 예를 들어 업데이트는 INSERT 문과 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 행의 순서로 인해 다른 DELETE 문이 올 DELETE 문의 실행 될 수 있습니다.       이러한 문은 일괄 처리 프로세스로 수행 되지 않습니다 용도로 각 행은 개별적으로 업데이트 됩니다. 응용 프로그램에서 호출할 수는 <xref:System.Data.DataSet.GetChanges%2A>명령문 (예를 들어 업데이트 하기 전에 삽입)의 시퀀스를 제어 해야 할 경우에.</xref:System.Data.DataSet.GetChanges%2A> 자세한 내용은 참조 [Dataadapter로 데이터 원본 업데이트](~/add/includes/ajax-current-ext-md.md)합니다.       INSERT, UPDATE 또는 DELETE 문을 하지 지정 되었는지 여부, 큐브의 Update 메서드에 예외를 생성 합니다. 만들 수 있습니다는 <xref:System.Data.SqlClient.SqlCommandBuilder>또는 <xref:System.Data.OleDb.OleDbCommandBuilder>설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> 를 설정 하지 않는 추가적인 모든 SQL 문을 그러면는 **CommandBuilder**합니다. 이 세대 논리 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 키 열 정보를 적용. 자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다.       큐브의 Update 메서드에 대 한 업데이트를 수행 하기 전에 첫 번째 매핑에 나열 된 테이블에서 행을 검색 합니다. 업데이트는 다음의 값을 사용 하 여 행을 새로 고치는 <xref:System.Data.IDbCommand.UpdatedRowSource%2A>속성.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> 반환 된 추가 행은 무시 됩니다.       모든 데이터에 다시 로드 되는 <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 하는 조정 된 검사 <xref:System.Data.DataSet>행 및 모든 출력 매개 변수는 명령에서 반환 된.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> 행이 성공적으로 업데이트 한 후 해당 행에 변경 내용은 허용 됩니다.       업데이트를 사용할 경우의 실행 순서는 다음과 같습니다: 1.  값은 <xref:System.Data.DataRow>매개 변수 값으로 이동 됩니다.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  명령을 실행합니다.      4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`는 첫 번째 반환 결과 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 에 놓입니다.      5.  출력 매개 변수가 있는 경우 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 배치      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>가 호출 됩니다.</xref:System.Data.DataRow.AcceptChanges%2A>       <xref:System.Data.Common.DbDataAdapter>일반적으로 이와 관련 된 매개 변수 컬렉션을 포함</xref:System.Data.Common.DbDataAdapter> 하는와 연결 된 각 명령 매개 변수를 통해 현재 행에 매핑됩니다.는 `SourceColumn` 및 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스입니다. `SourceColumn`참조 하는 <xref:System.Data.DataTable>열 하는 <xref:System.Data.Common.DbDataAdapter>현재 행에 대 한 매개 변수 값을 가져오기에 대 한 참조.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`테이블 매핑이 적용 되기 전에 매핑되지 않은 열 이름을 참조 합니다. 경우 `SourceColumn` 참조 존재 하지 않는 열에는 다음 중 하나에 따라 다른 동작이 수행 <xref:System.Data.MissingMappingAction>값.</xref:System.Data.MissingMappingAction>      | 열거형 값 | 수행 작업 |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| 매핑이 없는 있는 경우에 <xref:System.Data.DataSet>원본 열 이름 및 테이블 이름을 사용 합니다. |   | `MissingMappingAction.Ignore`| A <xref:System.SystemException>생성 됩니다.</xref:System.SystemException> </xref:System.Data.DataSet> 매핑이 명시적으로 설정 된 경우, 입력된 매개 변수는 일반적으로 오류가의 결과 대 한 누락 된 매핑이 있습니다. |   | `MissingMappingAction.Error`| <xref:System.SystemException>생성 됩니다. |       `SourceColumn` 속성은 또한 출력에 대 한 값에 매핑할 사용 입/출력 매개 변수를 또는 `DataSet`.</xref:System.SystemException> 존재 하지 않는 열을 참조 하는 경우 예외가 생성 됩니다.       `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스 Original, Current 또는 Proposed 버전 열 값의 사용 여부를 결정 합니다. 낙관적 동시성 위반을 확인 하는 UPDATE 문의 WHERE 절에 원래 값을 포함 하려면이 기능은 주로 사용 됩니다.      > [!NOTE] > 행을 업데이트 하는 동안 오류가 발생 하는 경우 예외가 throw 되 고 업데이트의 실행이 중단 됩니다. 설정 오류가 발생 하는 경우 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>속성을 `true` 업데이트를 호출 하기 전에.</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 내에서 각 행 마다 별로 오류를 선택할 수 있습니다는 `RowUpdated` DataAdapter의 이벤트입니다. 내에서 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 `RowUpdated` <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> 속성</xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 을 설정 하는 이벤트"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_4_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_4_1.cs)]"
  syntax:
    content: public override int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> 데이터 소스를 업데이트 하는 데 사용 합니다."
    return:
      type: System.Int32
      description: "성공적으로 업데이트 된 행 수는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "원본 테이블이 올바르지 않습니다."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "INSERT, UPDATE 또는 DELETE 문을 실행 하려고 영향을 받는&0; 개 레코드에서 발생 했습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  id: Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터베이스의 값을 삽입, 업데이트 또는 지정 된 행을 삭제 각각에 대 한 각 INSERT, UPDATE 또는 DELETE 문을 실행 하 여 업데이트 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다."
  remarks: "응용 프로그램 호출 하는 경우는 <xref:System.Data.Common.DbDataAdapter.Update%2A>메서드는 <xref:System.Data.Common.DbDataAdapter>검사 하는 <xref:System.Data.DataRow.RowState%2A>속성을 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 구성 된 인덱스 순서에 따라 각 행에 대해 반복적으로 필요한 INSERT, UPDATE 또는 DELETE 문을 실행 하 고</xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> 예를 들어 <xref:System.Data.Common.DbDataAdapter.Update%2A>DELETE 문을 INSERT 문과 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 행의 순서로 인해 다른 DELETE 문을 먼저 실행 될 수 있습니다</xref:System.Data.Common.DbDataAdapter.Update%2A>       이러한 문은 일괄 처리 프로세스로 수행 되지 않습니다 용도로 각 행은 개별적으로 업데이트 됩니다. 응용 프로그램에서 호출할 수는 <xref:System.Data.DataSet.GetChanges%2A>명령문 (예를 들어 업데이트 하기 전에 삽입)의 시퀀스를 제어 해야 할 경우에.</xref:System.Data.DataSet.GetChanges%2A> 자세한 내용은 참조 [Dataadapter로 데이터 원본 업데이트](~/add/includes/ajax-current-ext-md.md)합니다.       경우 INSERT, UPDATE 또는 DELETE 문이 지정 되지 않았습니다는 <xref:System.Data.Common.DbDataAdapter.Update%2A>메서드 예외를 생성 합니다.</xref:System.Data.Common.DbDataAdapter.Update%2A> 만들 수 있습니다는 <xref:System.Data.SqlClient.SqlCommandBuilder>또는 <xref:System.Data.OleDb.OleDbCommandBuilder>설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> 를 설정 하지 않는 추가적인 모든 SQL 문을 그러면는 **CommandBuilder**합니다. 이 세대 논리 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 키 열 정보를 적용. 자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다.       <xref:System.Data.Common.DbDataAdapter.Update%2A>메서드는 업데이트를 수행 하기 전에 첫 번째 매핑에 나열 된 테이블에서 행을 검색 합니다.</xref:System.Data.Common.DbDataAdapter.Update%2A> <xref:System.Data.Common.DbDataAdapter.Update%2A>다음의 값을 사용 하 여 행을 새로 고치는 <xref:System.Data.IDbCommand.UpdatedRowSource%2A>속성.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> 반환 된 추가 행은 무시 됩니다.       모든 데이터에 다시 로드 되는 <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 하는 조정 된 검사 <xref:System.Data.DataSet>행 및 모든 출력 매개 변수는 명령에서 반환 된.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> 행이 성공적으로 업데이트 한 후 해당 행에 변경 내용은 허용 됩니다.       사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>, 실행의 순서는 다음과 같습니다: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  값은 <xref:System.Data.DataRow>매개 변수 값으로 이동 됩니다.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  명령을 실행합니다.      4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`는 첫 번째 반환 결과 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 에 놓입니다.      5.  출력 매개 변수가 있는 경우 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 배치      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>가 호출 됩니다.</xref:System.Data.DataRow.AcceptChanges%2A>       <xref:System.Data.Common.DbDataAdapter>일반적으로 이와 관련 된 매개 변수 컬렉션을 포함</xref:System.Data.Common.DbDataAdapter> 하는와 연결 된 각 명령 매개 변수를 통해 현재 행에 매핑됩니다.는 `SourceColumn` 및 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스입니다. `SourceColumn`참조 하는 <xref:System.Data.DataTable>열 하는 <xref:System.Data.Common.DbDataAdapter>현재 행에 대 한 매개 변수 값을 가져오기에 대 한 참조.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`테이블 매핑이 적용 되기 전에 매핑되지 않은 열 이름을 참조 합니다. 경우 `SourceColumn` 참조 존재 하지 않는 열에는 다음 중 하나에 따라 다른 동작이 수행 <xref:System.Data.MissingMappingAction>값.</xref:System.Data.MissingMappingAction>      | 열거형 값 | 수행 작업 |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| 매핑이 없는 있는 경우에 <xref:System.Data.DataSet>원본 열 이름 및 테이블 이름을 사용 합니다. |   | `MissingMappingAction.Ignore`| A <xref:System.SystemException>생성 됩니다.</xref:System.SystemException> </xref:System.Data.DataSet> 매핑이 명시적으로 설정 된 경우, 입력된 매개 변수는 일반적으로 오류가의 결과 대 한 누락 된 매핑이 있습니다. |   | `MissingMappingAction.Error`| <xref:System.SystemException>생성 됩니다. |       `SourceColumn` 속성은 또한 출력에 대 한 값에 매핑할 사용 입/출력 매개 변수를 또는 `DataSet`.</xref:System.SystemException> 존재 하지 않는 열을 참조 하는 경우 예외가 생성 됩니다.       `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스 Original, Current 또는 Proposed 버전 열 값의 사용 여부를 결정 합니다. 낙관적 동시성 위반을 확인 하는 UPDATE 문의 WHERE 절에 원래 값을 포함 하려면이 기능은 주로 사용 됩니다.      > [!NOTE] > 행을 업데이트 하는 동안 오류가 발생 하는 경우 예외가 throw 되 고 업데이트의 실행이 중단 됩니다. 설정 오류가 발생 하는 경우 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>속성을 `true` <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> 를 호출 하기 전에</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 내에서 각 행 마다 별로 오류를 선택할 수 있습니다는 `RowUpdated` DataAdapter의 이벤트입니다. 내에서 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 `RowUpdated` <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> 속성</xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 을 설정 하는 이벤트"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_1_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_1_1.cs)]"
  syntax:
    content: public int Update (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> 데이터 소스를 업데이트 하는 데 사용 합니다."
    return:
      type: System.Int32
      description: "성공적으로 업데이트 된 행 수는 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> 올바르지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "원본 테이블이 올바르지 않습니다."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "더 <xref href=&quot;System.Data.DataRow&quot;> </xref> 업데이트할 합니다.       -또는-No <xref href=&quot;System.Data.DataTable&quot;> </xref> 업데이트할 합니다.       -또는-No <xref href=&quot;System.Data.DataSet&quot;> </xref> 는 원본으로 사용할 수 있습니다."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "INSERT, UPDATE 또는 DELETE 문을 실행 하려고 영향을 받는&0; 개 레코드에서 발생 했습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  id: Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터베이스의 값을 삽입, 업데이트 또는 삭제할 행의 지정 된 배열에 각각에 대 한 각 INSERT, UPDATE 또는 DELETE 문을 실행 하 여 업데이트 <xref href=&quot;System.Data.DataSet&quot;> </xref> 개체입니다."
  remarks: "응용 프로그램 호출 하는 경우는 <xref:System.Data.Common.DbDataAdapter.Update%2A>메서드는 <xref:System.Data.Common.DbDataAdapter>검사 하는 <xref:System.Data.DataRow.RowState%2A>속성을 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 구성 된 인덱스 순서에 따라 각 행에 대해 반복적으로 필요한 INSERT, UPDATE 또는 DELETE 문을 실행 하 고</xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> 예를 들어 <xref:System.Data.Common.DbDataAdapter.Update%2A>DELETE 문을 INSERT 문과 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 행의 순서로 인해 다른 DELETE 문을 먼저 실행 될 수 있습니다</xref:System.Data.Common.DbDataAdapter.Update%2A>       이러한 문은 일괄 처리 프로세스로 수행 되지 않습니다 용도로 각 행은 개별적으로 업데이트 됩니다. 응용 프로그램에서 호출할 수는 <xref:System.Data.DataSet.GetChanges%2A>명령문 (예를 들어 업데이트 하기 전에 삽입)의 시퀀스를 제어 해야 할 경우에.</xref:System.Data.DataSet.GetChanges%2A> 자세한 내용은 참조 [Dataadapter로 데이터 원본 업데이트](~/add/includes/ajax-current-ext-md.md)합니다.       경우 INSERT, UPDATE 또는 DELETE 문이 지정 되지 않았습니다는 <xref:System.Data.Common.DbDataAdapter.Update%2A>메서드 예외를 생성 합니다.</xref:System.Data.Common.DbDataAdapter.Update%2A> 만들 수 있습니다는 <xref:System.Data.SqlClient.SqlCommandBuilder>또는 <xref:System.Data.OleDb.OleDbCommandBuilder>설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> 를 설정 하지 않는 추가적인 모든 SQL 문을 그러면는 **CommandBuilder**합니다. 이 세대 논리 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 키 열 정보를 적용. 자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다.       <xref:System.Data.Common.DbDataAdapter.Update%2A>메서드는 업데이트를 수행 하기 전에 첫 번째 매핑에 나열 된 테이블에서 행을 검색 합니다.</xref:System.Data.Common.DbDataAdapter.Update%2A> <xref:System.Data.Common.DbDataAdapter.Update%2A>다음의 값을 사용 하 여 행을 새로 고치는 <xref:System.Data.IDbCommand.UpdatedRowSource%2A>속성.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> 반환 된 추가 행은 무시 됩니다.       모든 데이터에 다시 로드 되는 <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 하는 조정 된 검사 <xref:System.Data.DataSet>행 및 모든 출력 매개 변수는 명령에서 반환 된.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> 행이 성공적으로 업데이트 한 후 해당 행에 변경 내용은 허용 됩니다.       사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>, 실행의 순서는 다음과 같습니다: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  값은 <xref:System.Data.DataRow>매개 변수 값으로 이동 됩니다.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  명령을 실행합니다.      4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`는 첫 번째 반환 결과 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 에 놓입니다.      5.  출력 매개 변수가 있는 경우 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 배치      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>가 호출 됩니다.</xref:System.Data.DataRow.AcceptChanges%2A>       <xref:System.Data.Common.DbDataAdapter>일반적으로 이와 관련 된 매개 변수 컬렉션을 포함</xref:System.Data.Common.DbDataAdapter> 하는와 연결 된 각 명령 매개 변수를 통해 현재 행에 매핑됩니다.는 `SourceColumn` 및 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스입니다. `SourceColumn`참조 하는 <xref:System.Data.DataTable>열 하는 <xref:System.Data.Common.DbDataAdapter>현재 행에 대 한 매개 변수 값을 가져오기에 대 한 참조.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`테이블 매핑이 적용 되기 전에 매핑되지 않은 열 이름을 참조 합니다. 경우 `SourceColumn` 참조 존재 하지 않는 열에는 다음 중 하나에 따라 다른 동작이 수행 <xref:System.Data.MissingMappingAction>값.</xref:System.Data.MissingMappingAction>      | 열거형 값 | 수행 작업 |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| 매핑이 없는 있는 경우에 <xref:System.Data.DataSet>원본 열 이름 및 테이블 이름을 사용 합니다. |   | `MissingMappingAction.Ignore`| A <xref:System.SystemException>생성 됩니다.</xref:System.SystemException> </xref:System.Data.DataSet> 매핑이 명시적으로 설정 된 경우, 입력된 매개 변수는 일반적으로 오류가의 결과 대 한 누락 된 매핑이 있습니다. |   | `MissingMappingAction.Error`| <xref:System.SystemException>생성 됩니다. |       `SourceColumn` 속성은 또한 출력에 대 한 값에 매핑할 사용 입/출력 매개 변수를 또는 `DataSet`.</xref:System.SystemException> 존재 하지 않는 열을 참조 하는 경우 예외가 생성 됩니다.       `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스 Original, Current 또는 Proposed 버전 열 값의 사용 여부를 결정 합니다. 낙관적 동시성 위반을 확인 하는 UPDATE 문의 WHERE 절에 원래 값을 포함 하려면이 기능은 주로 사용 됩니다.      > [!NOTE] > 행을 업데이트 하는 동안 오류가 발생 하는 경우 예외가 throw 되 고 업데이트의 실행이 중단 됩니다. 설정 오류가 발생 하는 경우 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>속성을 `true` <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> 를 호출 하기 전에</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 내에서 각 행 마다 별로 오류를 선택할 수 있습니다는 `RowUpdated` DataAdapter의 이벤트입니다. 내에서 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 `RowUpdated` <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> 속성</xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 을 설정 하는 이벤트"
  syntax:
    content: protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "배열을 <xref href=&quot;System.Data.DataRow&quot;> </xref> 개체 데이터 소스를 업데이트 하는 데 사용 합니다."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "<xref:System.Data.IDataAdapter.TableMappings*>사용할 컬렉션입니다.</xref:System.Data.IDataAdapter.TableMappings*>"
    return:
      type: System.Int32
      description: "성공적으로 업데이트 된 행 수는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> 올바르지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "원본 테이블이 올바르지 않습니다."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "더 <xref href=&quot;System.Data.DataRow&quot;> </xref> 업데이트할 합니다.       -또는-No <xref href=&quot;System.Data.DataTable&quot;> </xref> 업데이트할 합니다.       -또는-No <xref href=&quot;System.Data.DataSet&quot;> </xref> 는 원본으로 사용할 수 있습니다."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "INSERT, UPDATE 또는 DELETE 문을 실행 하려고 영향을 받는&0; 개 레코드에서 발생 했습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  id: Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터베이스의 값을 삽입, 업데이트 또는 삭제할 행에 각각에 대 한 각 INSERT, UPDATE 또는 DELETE 문을 실행 하 여 업데이트 된 <xref href=&quot;System.Data.DataSet&quot;> </xref> 지정 된 <xref href=&quot;System.Data.DataTable&quot;> </xref> 이름입니다."
  remarks: "응용 프로그램 호출 하는 경우는 <xref:System.Data.Common.DbDataAdapter.Update%2A>메서드는 <xref:System.Data.Common.DbDataAdapter>검사 하는 <xref:System.Data.DataRow.RowState%2A>속성을 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 구성 된 인덱스 순서에 따라 각 행에 대해 반복적으로 필요한 INSERT, UPDATE 또는 DELETE 문을 실행 하 고</xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> 예를 들어 <xref:System.Data.Common.DbDataAdapter.Update%2A>DELETE 문을 INSERT 문과 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 행의 순서로 인해 다른 DELETE 문을 먼저 실행 될 수 있습니다</xref:System.Data.Common.DbDataAdapter.Update%2A>       이러한 문은 일괄 처리 프로세스로 수행 되지 않습니다 용도로 각 행은 개별적으로 업데이트 됩니다. 응용 프로그램에서 호출할 수는 <xref:System.Data.DataSet.GetChanges%2A>명령문의 시퀀스를 제어 해야 할 경우에 (예를 들어 업데이트 하기 전에 삽입).</xref:System.Data.DataSet.GetChanges%2A> 자세한 내용은 참조 [Dataadapter로 데이터 원본 업데이트](~/add/includes/ajax-current-ext-md.md)합니다.       경우 INSERT, UPDATE 또는 DELETE 문이 지정 되지 않았습니다는 <xref:System.Data.Common.DbDataAdapter.Update%2A>메서드 예외를 생성 합니다.</xref:System.Data.Common.DbDataAdapter.Update%2A> 만들 수 있습니다는 <xref:System.Data.SqlClient.SqlCommandBuilder>또는 <xref:System.Data.OleDb.OleDbCommandBuilder>설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> 를 설정 하지 않는 추가적인 모든 SQL 문을 그러면는 **CommandBuilder**합니다. 이 세대 논리 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 키 열 정보를 적용. 자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다.       <xref:System.Data.Common.DbDataAdapter.Update%2A>메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet>여러 개 포함 된 <xref:System.Data.DataTable>개체 이름이 대/소문자만 다른.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> 여러 테이블을 이름이 같지만 서로 다른 경우에 존재 하는 경우는 `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A>해당 테이블을 찾지 대/소문자 구분 비교를 수행 하 고 있는 정확한 일치 항목이 없는 경우 예외를 생성 합니다.</xref:System.Data.Common.DbDataAdapter.Update%2A> 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet ds = new DataSet();    ds.Tables.Add(&quot;aaa&quot;);    ds.Tables.Add(&quot;AAA&quot;);    adapter.Update(ds, &quot;aaa&quot;); // Updates &quot;aaa&quot;, which already exists in the DataSet.    adapter.Update(ds, &quot;AAA&quot;); // Updates &quot;AAA&quot;, which already exists in the DataSet.       adapter.Update(ds, &quot;Aaa&quot;); // Results in an exception.   ```경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>라고 및 <xref:System.Data.DataSet>하나만 포함 되어 <xref:System.Data.DataTable>이름이만 대/소문자는 <xref:System.Data.DataTable>업데이트 됩니다.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> 이 시나리오에서는 비교는 대/소문자 구분 합니다. 다음 C# 코드는이 동작을 보여 줍니다.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Update(dataset, &quot;AAA&quot;); // Updates table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```<xref:System.Data.Common.DbDataAdapter.Update%2A>메서드는 업데이트를 수행 하기 전에 첫 번째 매핑에 나열 된 테이블에서 행을 검색 합니다.</xref:System.Data.Common.DbDataAdapter.Update%2A> <xref:System.Data.Common.DbDataAdapter.Update%2A>다음의 값을 사용 하 여 행을 새로 고치는 <xref:System.Data.IDbCommand.UpdatedRowSource%2A>속성.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> 반환 된 추가 행은 무시 됩니다.       모든 데이터에 다시 로드 되는 <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 하는 조정 된 검사 <xref:System.Data.DataSet>행 및 모든 출력 매개 변수는 명령에서 반환 된.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> 행이 성공적으로 업데이트 한 후 해당 행에 변경 내용은 허용 됩니다.       사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>, 실행의 순서는 다음과 같습니다: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  값은 <xref:System.Data.DataRow>매개 변수 값으로 이동 됩니다.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  명령을 실행합니다.      4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`는 첫 번째 반환 결과 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 에 놓입니다.      5.  출력 매개 변수가 있는 경우 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 배치      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>가 호출 됩니다.</xref:System.Data.DataRow.AcceptChanges%2A>       <xref:System.Data.Common.DbDataAdapter>일반적으로 이와 관련 된 매개 변수 컬렉션을 포함</xref:System.Data.Common.DbDataAdapter> 하는와 연결 된 각 명령 매개 변수를 통해 현재 행에 매핑됩니다.는 `SourceColumn` 및 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스입니다. `SourceColumn`참조 하는 <xref:System.Data.DataTable>열 하는 <xref:System.Data.Common.DbDataAdapter>현재 행에 대 한 매개 변수 값을 가져오기에 대 한 참조.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`테이블 매핑이 적용 되기 전에 매핑되지 않은 열 이름을 참조 합니다. 경우 `SourceColumn` 참조 존재 하지 않는 열에는 다음 중 하나에 따라 다른 동작이 수행 <xref:System.Data.MissingMappingAction>값.</xref:System.Data.MissingMappingAction>      | 열거형 값 | 수행 작업 |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| 매핑이 없는 있는 경우에 <xref:System.Data.DataSet>원본 열 이름 및 테이블 이름을 사용 합니다. |   | `MissingMappingAction.Ignore`| A <xref:System.SystemException>생성 됩니다.</xref:System.SystemException> </xref:System.Data.DataSet> 매핑이 명시적으로 설정 된 경우, 입력된 매개 변수는 일반적으로 오류가의 결과 대 한 누락 된 매핑이 있습니다. |   | `MissingMappingAction.Error`| <xref:System.SystemException>생성 됩니다. |       `SourceColumn` 속성은 또한 출력에 대 한 값에 매핑할 사용 입/출력 매개 변수를 또는 `DataSet`.</xref:System.SystemException> 존재 하지 않는 열을 참조 하는 경우 예외가 생성 됩니다.       `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스 Original, Current 또는 Proposed 버전 열 값의 사용 여부를 결정 합니다. 낙관적 동시성 위반을 확인 하는 UPDATE 문의 WHERE 절에 원래 값을 포함 하려면이 기능은 주로 사용 됩니다.      > [!NOTE] > 행을 업데이트 하는 동안 오류가 발생 하는 경우 예외가 throw 되 고 업데이트의 실행이 중단 됩니다. 설정 오류가 발생 하는 경우 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>속성을 `true` <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> 를 호출 하기 전에</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 내에서 각 행 마다 별로 오류를 선택할 수 있습니다는 `RowUpdated` DataAdapter의 이벤트입니다. 내에서 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 `RowUpdated` <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> 속성</xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 을 설정 하는 이벤트"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/csharp/m-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> 데이터 소스를 업데이트 하는 데 있습니다."
    - id: srcTable
      type: System.String
      description: "테이블 매핑에 사용할 원본 테이블의 이름입니다."
    return:
      type: System.Int32
      description: "성공적으로 업데이트 된 행 수는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> 올바르지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "원본 테이블이 올바르지 않습니다."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "INSERT, UPDATE 또는 DELETE 문을 실행 하려고 영향을 받는&0; 개 레코드에서 발생 했습니다."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  id: UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "가져옵니다 또는 일괄 처리 지원을 사용 하지 않도록 설정 하거나 사용 하는 값을 설정 하 고 일괄 처리에서 실행 될 수 있는 명령 수를 지정 합니다."
  remarks: "UpdateBatchSize 속성을 사용 하 여 데이터 소스에 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 변경 내용으로 업데이트 하려면 데이터 공급자가 일괄 처리를 지 원하는 서버에 왕복 횟수를 줄여 응용 프로그램 성능을 향상 시킬 수이 있습니다. ADO.NET 2.0에서는이 속성은 SQL Server (SqlClient) 및 Oracle (OracleClient)에 대 한.NET 데이터 공급자에 대 한 지원.       너무 큰 배치를 실행 하면 성능이 저하 될 수 없습니다. 따라서 응용 프로그램을 구현 하기 전에 최적의 배치 크기 설정을 테스트 해야 합니다.       <xref:System.ArgumentOutOfRangeException>0 보다 작은 값은 숫자로 설정 되 면 throw 됩니다.</xref:System.ArgumentOutOfRangeException>"
  syntax:
    content: public virtual int UpdateBatchSize { get; set; }
    return:
      type: System.Int32
      description: "처리할 일괄 처리당 행 수입니다.       <table><thead><tr><th> 값은       </th><th> 효과       </th></tr></thead><tbody><tr><td> 0       </td><td> 일괄 처리 크기에는 제한이 없습니다.       </td></tr><tr><td> 1       </td><td> 일괄 처리 업데이트를 사용 하지 않습니다.       </td></tr><tr><td> &gt; 1       </td><td> UpdateBatchSize 작업의 일괄 처리를 사용 하 여 한 번에 변경 내용이 보내집니다.       </td></tr></tbody></table>       연결 된 모든 명령을이 값 1이 아닌 값을 설정 하는 경우는 <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref> 있어야 해당 <> </> *> 속성이로 설정 * *None* * 또는 * *출력 매개 변수** 합니다. 그렇지 않으면 예외가 throw 됩니다."
  overload: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  id: UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터 원본에서 레코드를 업데이트 하는 데 사용 되는 명령을 가져오거나 설정 합니다."
  remarks: "동안 <xref:System.Data.Common.DbDataAdapter.Update%2A>경우이 속성은 설정 되지 않으며 기본 키 정보에 있는지는 <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>자동으로 생성 됩니다.</xref:System.Data.IDbDataAdapter.UpdateCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand UpdateCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.IDbCommand&quot;> </xref> 하는 동안 사용 <xref:System.Data.IDataAdapter.Update*>데이터 집합의 수정 된 행에 대 한 데이터 원본에서 레코드를 업데이트 합니다.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.UpdateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DataAdapter
  isExternal: false
  name: System.Data.Common.DataAdapter
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.Common.DbDataAdapter.#ctor
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
- uid: System.Data.Common.DbDataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatedEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatedEventArgs
  nameWithType: RowUpdatedEventArgs
  fullName: System.Data.Common.RowUpdatedEventArgs
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Data.Common.DataTableMapping
  parent: System.Data.Common
  isExternal: false
  name: DataTableMapping
  nameWithType: DataTableMapping
  fullName: System.Data.Common.DataTableMapping
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatingEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatingEventArgs
  nameWithType: RowUpdatingEventArgs
  fullName: System.Data.Common.RowUpdatingEventArgs
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
- uid: System.Data.IDataParameter
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.#ctor*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch
  nameWithType: DbDataAdapter.AddToBatch
- uid: System.Data.Common.DbDataAdapter.ClearBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch
  nameWithType: DbDataAdapter.ClearBatch
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent
- uid: System.Data.Common.DbDataAdapter.DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.Dispose*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose
  nameWithType: DbDataAdapter.Dispose
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch
  nameWithType: DbDataAdapter.ExecuteBatch
- uid: System.Data.Common.DbDataAdapter.Fill*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill
  nameWithType: DbDataAdapter.Fill
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: DbDataAdapter.FillSchema
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter
  nameWithType: DbDataAdapter.GetBatchedParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected
- uid: System.Data.Common.DbDataAdapter.GetFillParameters*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: DbDataAdapter.GetFillParameters
- uid: System.Data.Common.DbDataAdapter.InitializeBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching
  nameWithType: DbDataAdapter.InitializeBatching
- uid: System.Data.Common.DbDataAdapter.InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated
  nameWithType: DbDataAdapter.OnRowUpdated
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating
  nameWithType: DbDataAdapter.OnRowUpdating
- uid: System.Data.Common.DbDataAdapter.SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: DbDataAdapter.System.ICloneable.Clone
- uid: System.Data.Common.DbDataAdapter.TerminateBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching
  nameWithType: DbDataAdapter.TerminateBatching
- uid: System.Data.Common.DbDataAdapter.Update*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update
  nameWithType: DbDataAdapter.Update
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
