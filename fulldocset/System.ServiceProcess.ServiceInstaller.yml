### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceInstaller
  id: ServiceInstaller
  children:
  - System.ServiceProcess.ServiceInstaller.#ctor
  - System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  - System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  - System.ServiceProcess.ServiceInstaller.Description
  - System.ServiceProcess.ServiceInstaller.DisplayName
  - System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  - System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceInstaller.ServiceName
  - System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  - System.ServiceProcess.ServiceInstaller.StartType
  - System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  langs:
  - csharp
  name: ServiceInstaller
  nameWithType: ServiceInstaller
  fullName: System.ServiceProcess.ServiceInstaller
  type: Class
  summary: "확장 하는 클래스를 설치 <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref> 여 서비스를 구현 합니다. 이 클래스는 서비스 응용 프로그램을 설치할 때 설치 유틸리티에 의해 호출 됩니다."
  remarks: "The ServiceInstaller does work specific to the service with which it is associated. It is used by the installation utility to write registry values associated with the service to a subkey within the HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services registry key. The service is identified by its ServiceName within this subkey. The subkey also includes the name of the executable or .dll to which the service belongs.  \n  \n To install a service, create a project installer class that inherits from the <xref:System.Configuration.Install.Installer> class, and set the <xref:System.ComponentModel.RunInstallerAttribute> attribute on the class to `true`. Within your project, create one <xref:System.ServiceProcess.ServiceProcessInstaller> instance per service application, and one ServiceInstaller instance for each service in the application. Within your project installer class constructor, set the installation properties for the service using the <xref:System.ServiceProcess.ServiceProcessInstaller> and ServiceInstaller instances, and add the instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n> [!NOTE]\n>  It is recommended that you use the constructor for adding installer instances; however, if you need to add to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> method, be sure to perform the same additions to the collection in the <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method.  \n  \n For all classes deriving from the <xref:System.Configuration.Install.Installer> class, the state of the <xref:System.Configuration.Install.Installer.Installers%2A> collection must be the same in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods. However, you can avoid the maintenance of the collection across the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods if you add installer instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in your custom installer class constructor.When the install utility is called, it looks for the <xref:System.ComponentModel.RunInstallerAttribute> attribute. If the attribute is `true`, the utility installs all the services that were added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection that were associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false` or does not exist, the install utility ignores the project installer.  \n  \n The <xref:System.ServiceProcess.ServiceProcessInstaller> associated with your project installation class installs information common to all ServiceInstaller instances in the project. If this service has anything that separates it from the other services in the installation project, that service-specific information is installed by this method.  \n  \n> [!NOTE]\n>  It is crucial that the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the class you derived from <xref:System.ServiceProcess.ServiceBase>. Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> property for the service is set within the Main() function of the service application's executable. The Service Control Manager uses the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName> property to locate the service within this executable.  \n  \n You can modify other properties on the ServiceInstaller either before or after adding it to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer. For example, a service's <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> may be set to start the service automatically at reboot or require a user to start the service manually.  \n  \n Normally, you will not call the methods on ServiceInstaller within your code; they are generally called only by the install utility. The install utility automatically calls the <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> and <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> methods during the installation process. It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (or <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) on all previously installed components.  \n  \n The installation utility calls <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> to remove the object.  \n  \n An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>. This state information is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance, and each ServiceInstaller instance is installed by the utility. It is usually unnecessary for your code to modify state information explicitly.  \n  \n When the installation is performed, it automatically creates an <xref:System.Diagnostics.EventLogInstaller> to install the event log source associated with the <xref:System.ServiceProcess.ServiceBase> derived class. The <xref:System.Diagnostics.EventLog.Log%2A> property for this source is set by the <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor to the computer's Application log. When you set the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> of the ServiceInstaller (which should be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the service), the <xref:System.Diagnostics.EventLog.Source%2A> is automatically set to the same value. In an installation failure, the source's installation is rolled-back along with previously installed services.  \n  \n The <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method tries to stop the service if it is running. Whether this succeeds or not, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> undoes the changes made by <xref:System.ServiceProcess.ServiceInstaller.Install%2A>. If a new source was created for event logging, the source is deleted."
  example:
  - "The following example creates a project installer, called `MyProjectInstaller`, which inherits from <xref:System.Configuration.Install.Installer>. It is assumed there is a service executable that contains two services, \"Hello-World Service 1\" and \"Hello-World Service 2\". Within the constructor for `MyProjectInstaller` (which would be called by the install utility), ServiceInstaller objects are created for each of these services, and a <xref:System.ServiceProcess.ServiceProcessInstaller> is created for the executable. For the install utility to recognize `MyProjectInstaller` as a valid installer, the <xref:System.ComponentModel.RunInstallerAttribute> attribute is set to `true`.  \n  \n Optional properties are set on the process installer and the service installers before the installers are added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection. When the install utility accesses `MyProjectInstaller`, the objects added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection through a call to <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=fullName> will be installed in turn. During the process, the installer maintains state information indicating which objects have been installed, so each can be backed out in turn, if an installation failure occurs.  \n  \n Normally, you would not create an instance of your project installer class explicitly. You would create it and add the <xref:System.ComponentModel.RunInstallerAttribute> attribute to the syntax, but it is the install utility that actually calls, and therefore instantiates, the class.  \n  \n [!code-cpp[Classic ServiceInstaller Example#1](~/add/codesnippet/cpp/t-system.serviceprocess._4_1.cpp)]\n [!code-cs[Classic ServiceInstaller Example#1](~/add/codesnippet/csharp/t-system.serviceprocess._4_1.cs)]\n [!code-vb[Classic ServiceInstaller Example#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._4_1.vb)]"
  syntax:
    content: 'public class ServiceInstaller : System.Configuration.Install.ComponentInstaller'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Configuration.Install.Installer
  - System.Configuration.Install.ComponentInstaller
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Configuration.Install.Installer.AfterInstall
  - System.Configuration.Install.Installer.AfterRollback
  - System.Configuration.Install.Installer.AfterUninstall
  - System.Configuration.Install.Installer.BeforeInstall
  - System.Configuration.Install.Installer.BeforeRollback
  - System.Configuration.Install.Installer.BeforeUninstall
  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Committed
  - System.Configuration.Install.Installer.Committing
  - System.Configuration.Install.Installer.Context
  - System.Configuration.Install.Installer.HelpText
  - System.Configuration.Install.Installer.Installers
  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Parent
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServiceInstaller()
  nameWithType: ServiceInstaller.ServiceInstaller()
  fullName: System.ServiceProcess.ServiceInstaller.ServiceInstaller()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.ServiceProcess.ServiceInstaller&quot;> </xref> 클래스입니다."
  remarks: "서비스를 설치 하려면에서 상속 되는 프로젝트 설치 관리자 클래스를 만듭니다는 <xref:System.Configuration.Install.Installer>클래스는 <xref:System.ComponentModel.RunInstallerAttribute>특성을 클래스의 `true`.</xref:System.ComponentModel.RunInstallerAttribute> </xref:System.Configuration.Install.Installer> 프로젝트 내에서 하나를 만들 <xref:System.ServiceProcess.ServiceProcessInstaller>개와 서비스 응용 프로그램 마다 인스턴스 <xref:System.ServiceProcess.ServiceInstaller>응용 프로그램의 각 서비스에 대 한 인스턴스.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> 프로젝트 설치 관리자 클래스 생성자를 사용 하 여 서비스에 대 한 설치 속성을 설정는 <xref:System.ServiceProcess.ServiceProcessInstaller>및 <xref:System.ServiceProcess.ServiceInstaller>인스턴스와 인스턴스를 추가할는 <xref:System.Configuration.Install.Installer.Installers%2A>컬렉션.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller>       ServiceInstaller 생성자를 자동으로 생성 한 이벤트 로그 소스 <xref:System.Diagnostics.EventLog.Log%2A>컴퓨터의 응용 프로그램 로그와 <xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller> 속성은</xref:System.Diagnostics.EventLog.Log%2A> 설정 하는 경우는 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>의 <xref:System.ServiceProcess.ServiceInstaller>, 동일 해야는 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName>, 서비스는 <xref:System.Diagnostics.EventLog.Source%2A>이벤트 로그의 속성이 동일한 값으로 자동 설정 됩니다.</xref:System.Diagnostics.EventLog.Source%2A> </xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 원본 설치 오류가 발생할 경우 자동으로 삭제 됩니다.       ServiceInstaller 생성자 집합은 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>속성을 `ServiceStartMode.Manual` 사용자는 서비스를 시작 하도록 지정 하려면.</xref:System.ServiceProcess.ServiceInstaller.StartType%2A> 속성을 다시 설정할 수 있습니다 `ServiceStartMode.Automatic` 컴퓨터 재부팅 시 서비스가 시작을 지정할 수 있습니다."
  syntax:
    content: public ServiceInstaller ();
    parameters: []
  overload: System.ServiceProcess.ServiceInstaller.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  id: CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceInstaller.CopyFromComponent(IComponent)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "인스턴스에서 속성을 복사 <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref> 을이 설치 관리자입니다."
  remarks: "이 메서드는 코드 내에서 거의 호출 됩니다. CopyFromComponent은 일반적으로 디자이너에 의해서만 호출 됩니다.       서비스 이름을 저장 하는 CopyFromComponent는 `component` 매개 변수를는 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>의 <xref:System.ServiceProcess.ServiceInstaller>인스턴스.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> (매개 변수는 <xref:System.ServiceProcess.ServiceBase>에서 파생 되는 클래스의 인스턴스 수 있어야 하므로 `component` <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName>속성 보장 됩니다.)      > [!NOTE] > Visual Studio 디자이너를 사용 하는 경우이 메서드는 사용자가 클릭할 때 디자인 타임에 `Add Installer` 설치 관리자로이 클래스를 지정 하는 구성 요소에.</xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceBase> 라이브 구성 요소에서 있고 설치 중에 사용 하기 위해 저장 하는 모든 정보를 사용 하는 설치 관리자입니다."
  syntax:
    content: public override void CopyFromComponent (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> 복사해 올 원본입니다."
  overload: System.ServiceProcess.ServiceInstaller.CopyFromComponent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "이 설치 관리자와 연결 되는 구성 요소에서 상속 되지 않는 <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  id: DelayedAutoStart
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
  fullName: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "다른 자동으로 시작된 서비스가 실행 되 고 시작 서비스를 지연할지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "DelayedAutoStart 속성 모든 서비스에 적용 될 수 있지만 서비스의 시작 모드 <xref:System.ServiceProcess.ServiceStartMode>.</xref:System.ServiceProcess.ServiceStartMode> 아닌 경우 무시 됩니다. 설정은 시스템이 시작 하는 다음에 적용이 됩니다. 서비스 제어 관리자는 서비스에 대 한 특정 시작 시간을 보장 하지 않습니다.       지연 된 자동 시작 서비스는 로드 순서 그룹의 구성원 일 수는 없지만 다른 자동 시작 서비스에 종속 될 수 있습니다. 로드 하기 전에 지연 된 자동 시작 서비스를 호출 하는 응용 프로그램, 호출이 실패 합니다.       지연 된 자동 시작을 지원 하지 않는 운영 체제에서이 속성을 설정에 영향을 주지 않습니다."
  syntax:
    content: public bool DelayedAutoStart { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>자동 지연에는 서비스의 시작 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ServiceProcess.ServiceInstaller.DelayedAutoStart*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Description
  id: Description
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Description
  nameWithType: ServiceInstaller.Description
  fullName: System.ServiceProcess.ServiceInstaller.Description
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "서비스에 대 한 설명을 가져오거나 설정 합니다."
  remarks: "사용자에 게 설치 된 서비스의 용도 설명 하기 위해 Description 속성을 사용 합니다. 사용자 설치 된 서비스에 대 한 세부 정보를 표시 하는 응용 프로그램의 서비스 설명을 볼 수 있습니다.       Windows XP를 사용 하면 서비스 제어 명령줄 유틸리티 (Sc.exe) 인 서비스 설명을 볼 수 있습니다 또는 내에서 서비스 설명을 볼 수 있습니다 예를 들어는 **서비스** 의 노드는 **컴퓨터 관리** 콘솔."
  example:
  - "The following code example sets the installation properties for a new Windows service application. The example sets the service name, along with the display name and description. After assigning the installation properties for the service, the example adds the <xref:System.ServiceProcess.ServiceInstaller> object to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n [!code-cs[ServiceProcess_ServiceInstaller#3](~/add/codesnippet/csharp/p-system.serviceprocess._7_1.cs)]\n [!code-vb[ServiceProcess_ServiceInstaller#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._7_1.vb)]"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "서비스의 설명입니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.ServiceProcess.ServiceInstaller.Description*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.DisplayName
  id: DisplayName
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
  fullName: System.ServiceProcess.ServiceInstaller.DisplayName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "사용자에 게 서비스를 식별 하는 이름을 나타냅니다."
  remarks: "The DisplayName is used, for example, in the Service Control Manager to provide a user-readable descriptive name for the service. The DisplayName is a registry value, but is never used as a registry key. Therefore, restrictions on the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property value do not apply. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> is used as the HKEY_LOCAL_MACHINES\\System\\CurrentControlSet\\Services registry key, so it is restricted.  \n  \n The display name is never used by the install utility to identify the service, so there are no restrictions on the choice of name, as there is for the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property."
  syntax:
    content: public string DisplayName { get; set; }
    return:
      type: System.String
      description: "대화형 도구에는 자주 사용 하는 서비스와 연결 된 이름입니다."
  overload: System.ServiceProcess.ServiceInstaller.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  id: Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Install(IDictionary)
  nameWithType: ServiceInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Install(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "레지스트리에 서비스 응용 프로그램 정보를 작성 하 여 서비스를 설치 합니다. 이 메서드는 적절 한 메서드를 자동으로 처리 하는 설치 도구에서 사용할 제공 됩니다."
  remarks: "일반적으로 메서드를 호출 하지 것입니다 <xref:System.ServiceProcess.ServiceInstaller>; 코드 내에서 일반적으로에서 호출 설치 유틸리티.</xref:System.ServiceProcess.ServiceInstaller> 설치 유틸리티는 자동으로 설치 하는 동안 설치 메서드를 호출합니다. 백업를 필요에 따라 호출 하 여 <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>예외를 생성 하는 개체입니다.</xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>       이미 설치 된, 프로젝트 설치 관리자의 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> 를 사용 하 여 구성 요소에 대해 자동으로 정보를 유지 하는 응용 프로그램의 설치 루틴 이 상태 정보로 설치로 전달 된는 `stateSaver` 매개 변수를 계속 업데이트 됩니다는 <xref:System.ServiceProcess.ServiceProcessInstaller>인스턴스와 각 <xref:System.ServiceProcess.ServiceInstaller>인스턴스가 유틸리티에 의해 설치 된.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> 일반적으로 코드의 명시적으로이 상태 정보를 수정할 필요는 없습니다.       <xref:System.ServiceProcess.ServiceProcessInstaller>관련 설치 클래스 설치 프로젝트 정보는 모든에 공통 된 <xref:System.ServiceProcess.ServiceInstaller>프로젝트의 인스턴스.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> 이 서비스에 아무 것도 설치 프로젝트의 다른 서비스에서 구분 하는 경우 해당 서비스 관련 정보는이 메서드에 의해 설치 됩니다.       서비스를 설치 하려면에서 상속 되는 프로젝트 설치 관리자 클래스를 만듭니다는 <xref:System.Configuration.Install.Installer>클래스는 <xref:System.ComponentModel.RunInstallerAttribute>특성을 클래스의 `true`.</xref:System.ComponentModel.RunInstallerAttribute> </xref:System.Configuration.Install.Installer> 프로젝트 내에서 하나를 만들 <xref:System.ServiceProcess.ServiceProcessInstaller>개와 서비스 응용 프로그램 마다 인스턴스 <xref:System.ServiceProcess.ServiceInstaller>응용 프로그램의 각 서비스에 대 한 인스턴스.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> 프로젝트 설치 관리자 클래스 생성자를 사용 하 여 서비스에 대 한 설치 속성을 설정는 <xref:System.ServiceProcess.ServiceProcessInstaller>및 <xref:System.ServiceProcess.ServiceInstaller>인스턴스와 인스턴스를 추가할는 <xref:System.Configuration.Install.Installer.Installers%2A>컬렉션.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller>      그러나 > [!NOTE] >; 설치 관리자 인스턴스를 추가 하기 위한 생성자를 사용 하는 것이 좋습니다.에 추가 해야 하는 경우는 <xref:System.Configuration.Install.Installer.Installers%2A>설치 하는 메서드의 컬렉션을 컬렉션에 동일한 추가 수행 해야는 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>메서드.</xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> </xref:System.Configuration.Install.Installer.Installers%2A>       파생 된 모든 클래스에 대 한는 <xref:System.Configuration.Install.Installer>클래스의 상태는 <xref:System.Configuration.Install.Installer.Installers%2A>컬렉션에서 설치에 동일 해야 하 고 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>메서드.</xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> </xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.Configuration.Install.Installer> 그러나 설치에서 컬렉션의 유지 관리를 방지할 수 있습니다 및 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>설치 관리자 인스턴스를 추가 하는 경우 메서드는 <xref:System.Configuration.Install.Installer.Installers%2A>사용자 지정 설치 관리자 클래스 생성자의 컬렉션에에서.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>"
  syntax:
    content: public override void Install (System.Collections.IDictionary stateSaver);
    parameters:
    - id: stateSaver
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>설치와 관련 된 컨텍스트 정보가 포함 된.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Install*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "설치에는 <xref href=&quot;System.ServiceProcess.ServiceProcessInstaller&quot;> </xref> 실행 파일에 대 한 합니다.       -또는-어셈블리의 파일 이름은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 빈 문자열입니다.       -또는-서비스 이름이 잘못 되었습니다.       -또는-서비스 제어 관리자를 열 수 없습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "서비스에 대 한 표시 이름은 255 자 길이입니다."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템은 서비스에 대 한 핸들을 생성 하지 못했습니다.       -또는-해당 이름의 서비스가 이미 설치 되어 있습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  id: IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "두 명의 설치 관리자가 동일한 서비스를 설치 하는지 여부를 나타냅니다."
  remarks: "IsEquivalentInstaller를 나타내며, 예를 들어 두 명의 설치 관리자가 동일한 사용자 계정에서 동일한 서비스를 설치 하는지 여부를"
  syntax:
    content: public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);
    parameters:
    - id: otherInstaller
      type: System.Configuration.Install.ComponentInstaller
      description: "A <xref href=&quot;System.Configuration.Install.ComponentInstaller&quot;> </xref> 현재 설치 관리자를 비교 하는입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>호출 하는 경우 <xref:System.ServiceProcess.ServiceInstaller.Install*>에서 설치이 관리자 모두는 유발 동일한 설치 하 고, 그렇지 않으면 서비스 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceProcess.ServiceInstaller.Install*>"
  overload: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  id: Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Rollback(IDictionary)
  nameWithType: ServiceInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Rollback(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "설치 과정에서 레지스트리에 기록 하는 서비스 응용 프로그램 정보를 롤백합니다. 이 메서드는 적절 한 메서드를 자동으로 처리 하는 설치 도구에서 사용할 제공 됩니다."
  remarks: "일반적으로 메서드를 호출 하지 것입니다 <xref:System.ServiceProcess.ServiceInstaller>; 코드 내에서 일반적으로에서 호출 설치 유틸리티.</xref:System.ServiceProcess.ServiceInstaller> 설치 유틸리티를 자동으로 호출 된 <xref:System.ServiceProcess.ServiceInstaller.Install%2A>설치 과정에서 메서드.</xref:System.ServiceProcess.ServiceInstaller.Install%2A> 필요한 경우 개체에 롤백 호출 하 여 예외를 생성 하는 경우를 백업 합니다.       응용 프로그램의 설치 루틴 프로젝트 설치 관리자의 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> 를 사용 하 여 구성 요소가 이미 설치 되어 자동으로 정보를 유지 관리 이 상태 정보로 롤백에 전달 된는 `savedState` 매개 변수를 계속 업데이트 됩니다는 <xref:System.ServiceProcess.ServiceProcessInstaller>인스턴스와 각 <xref:System.ServiceProcess.ServiceInstaller>인스턴스가 유틸리티에 의해 설치 된.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> 일반적으로 코드의 명시적으로이 상태 정보를 수정할 필요는 없습니다."
  syntax:
    content: public override void Rollback (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>설치와 관련 된 컨텍스트 정보가 포함 된.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Rollback*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.ServiceName
  id: ServiceName
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
  fullName: System.ServiceProcess.ServiceInstaller.ServiceName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "이 서비스를 식별 하는 시스템에서 사용 하는 이름을 나타냅니다. 이 속성은 동일 해야는 &lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName&gt; 설치 하려는 서비스의 합니다."
  remarks: "It is crucial that the ServiceName be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the class you derived from <xref:System.ServiceProcess.ServiceBase>. Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> property for the service is set within the Main() function of the service application's executable. The Service Control Manager uses the ServiceName property to locate the service within this executable.  \n  \n When you set the ServiceName of the service installer, the <xref:System.Diagnostics.EventLog.Source%2A> of the associated event log is set to the same value. This allows the service to automatically log service commands (such as Start and Stop) calls to the Application log on the computer.  \n  \n> [!NOTE]\n>  If a source by the same name already exists on the computer, but in a log other than the Application log, an exception will be thrown. If the source exists and is associated with the Application log, that source is used to report command calls to the service, and no exception is thrown.  \n  \n The ServiceName cannot be `null` or have zero length. Its maximum size is 256 characters. It also cannot contain forward or backward slashes, '/' or '\\\\', or characters from the ASCII character set with value less than decimal value 32."
  syntax:
    content: public string ServiceName { get; set; }
    return:
      type: System.String
      description: "서비스를 설치할 수의 이름입니다. 이 값은 서비스를 설치 하는 설치 유틸리티 시도 하기 전에 설정 되어야 합니다."
  overload: System.ServiceProcess.ServiceInstaller.ServiceName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ServiceName 속성 올바르지 않습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  id: ServicesDependedOn
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "이 서비스를 실행에 대 한 실행 되어야 하는 서비스를 나타냅니다."
  remarks: "서비스를 시작 하기 전에 실행 되 고 다른 서비스에 필요할 수 있습니다. 이 속성의 정보는 레지스트리에서 키에 기록 됩니다. 사용자 (또는 자동 시작 시 시스템) 서비스를 실행 하려고 합니다 (SCM (서비스 제어 관리자)는 각 배열에 있는 서비스를 이미 시작한 것을 확인 합니다.       모든 서비스 배열의 다음를 실행 하지 않는 경우 SCM 컴퓨터를 시작 하려고 시도 합니다. 에 `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>.</xref:System.ServiceProcess.ServiceInstaller.StartType%2A>       이 서비스가 종속 된 모든 서비스를 시작 하지 못하면이 서비스가 시작 되지 않습니다. 이 문제를 감지할 시스템 수준에서 처리 예외가 있기 때문에 시스템 시작 되지 않은 경우에 예외가 throw 되지 않습니다. 서비스 시작 실패를 처리 하 고 코드에서이 구현 하는 방법을 결정 합니다. 일반적으로 서비스를 시작 하지 못한 경우에 시작 시 사용자에 게는 대화 상자가 나타납니다.       서비스가 시작 되지 않으면 응용 프로그램 이벤트 로그 항목이 기록 됩니다.       이 서비스가 종속 된 서비스는 동일한 실행 파일에 포함 되도록 필요가 없습니다."
  syntax:
    content: public string[] ServicesDependedOn { get; set; }
    return:
      type: System.String[]
      description: "이 설치 관리자 서비스가 실행 될 수 전에 실행 해야 하는 서비스의 배열입니다."
  overload: System.ServiceProcess.ServiceInstaller.ServicesDependedOn*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.StartType
  id: StartType
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: StartType
  nameWithType: ServiceInstaller.StartType
  fullName: System.ServiceProcess.ServiceInstaller.StartType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "이 서비스를 시작할 시기와 방법을 나타냅니다."
  remarks: "서비스를 자동으로 다시 부팅 후 시작할 수 있는지 또는 사용자 서비스를 수동으로 시작 해야 지정 하는 시작 형식을 설정 합니다. 서비스도 비활성화 될 수를 시작할 수 없습니다, 수동으로 또는 프로그래밍 방식으로 사용 될 때까지 지정 합니다.       변경할 수 없습니다 <xref:System.ServiceProcess.ServiceInstaller>설치 후 속성 값.</xref:System.ServiceProcess.ServiceInstaller> StartType를 변경 하려면 제거 했다가 사용자가 서비스를 다시 설치 해야 하거나 수동으로 서비스 제어 관리자를 사용 하 여 설정을 변경 합니다."
  syntax:
    content: public System.ServiceProcess.ServiceStartMode StartType { get; set; }
    return:
      type: System.ServiceProcess.ServiceStartMode
      description: "A <xref href=&quot;System.ServiceProcess.ServiceStartMode&quot;> </xref> 서비스를 시작 하는 방식을 나타내는입니다. 기본값은 <xref uid=&quot;langword_csharp_Manual&quot; name=&quot;Manual&quot; href=&quot;&quot;> </xref>, 지정는 서비스가 다시 부팅 후 자동으로 시작 되지 것입니다."
  overload: System.ServiceProcess.ServiceInstaller.StartType*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "시작 모드의 값이 아닙니다는 <xref href=&quot;System.ServiceProcess.ServiceStartMode&quot;> </xref> 열거 합니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  id: Uninstall(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Uninstall(IDictionary)
  nameWithType: ServiceInstaller.Uninstall(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Uninstall(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "레지스트리에서 항목에 대 한 정보를 제거 하 여 서비스를 제거 합니다."
  remarks: "제거 하기 전에 서비스를 중지 하는 첫 번째 시도 제거 합니다. 서비스를 중지할 수 없으면 예외는 발생 하지, 및 메서드는 서비스의 제거가 계속 합니다.       일반적으로 메서드를 호출 하지 것입니다 <xref:System.ServiceProcess.ServiceInstaller>; 코드 내에서 일반적으로에서 호출 설치 유틸리티.</xref:System.ServiceProcess.ServiceInstaller> InstallUtil 하는 데 서비스를 제거할 수 있을 뿐만 아니라를 설치 합니다. 제거 명령줄 호출에서 스위치를 사용 합니다.       응용 프로그램 제거 루틴의 구성 요소에 대 한 자동으로 정보를 유지 관리 프로젝트 설치 관리자의 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> 를 사용 하 여 제거 하 고 이 상태 정보로는 제거에 전달 된는 `savedState` 매개 변수를 계속 업데이트 됩니다는 <xref:System.ServiceProcess.ServiceProcessInstaller>인스턴스와 각 <xref:System.ServiceProcess.ServiceInstaller>인스턴스가 유틸리티에 의해 설치 된.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> 일반적으로 코드의 명시적으로이 상태 정보를 수정할 필요는 없습니다.       파생 된 모든 클래스에 대 한는 <xref:System.Configuration.Install.Installer>클래스의 상태는 <xref:System.Configuration.Install.Installer.Installers%2A>컬렉션에서 동일 해야는 <xref:System.ServiceProcess.ServiceInstaller.Install%2A>및 메서드를 제거 합니다.</xref:System.ServiceProcess.ServiceInstaller.Install%2A> </xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.Configuration.Install.Installer> 그러나 컬렉션을 유지 관리를 방지할 수 있습니다는 <xref:System.ServiceProcess.ServiceInstaller.Install%2A>설치 관리자 인스턴스를 추가 하는 경우 메서드를 제거 하 고는 <xref:System.Configuration.Install.Installer.Installers%2A>사용자 지정 설치 관리자 클래스 생성자의 컬렉션에에서.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller.Install%2A>       메커니즘은 없습니다 롤백 제거에 대 한 하나의 서비스를 제거 하지 못하면이 영향을 주지 않도록 다른 서비스 (일반적으로 내 동일한 설치 프로젝트의 경우)을 제거 하 고 있습니다."
  syntax:
    content: public override void Uninstall (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>설치와 관련 된 컨텍스트 정보가 포함 된.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Uninstall*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "서비스 제어 관리자를 열 수 없습니다.       -또는-시스템 서비스에 대 한 핸들을 가져올 수 없습니다."
  platform:
  - net462
references:
- uid: System.Configuration.Install.ComponentInstaller
  isExternal: false
  name: System.Configuration.Install.ComponentInstaller
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ServiceProcess.ServiceInstaller.#ctor
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceInstaller()
  nameWithType: ServiceInstaller.ServiceInstaller()
  fullName: System.ServiceProcess.ServiceInstaller.ServiceInstaller()
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceInstaller.CopyFromComponent(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
  fullName: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceProcess.ServiceInstaller.Description
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Description
  nameWithType: ServiceInstaller.Description
  fullName: System.ServiceProcess.ServiceInstaller.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceInstaller.DisplayName
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
  fullName: System.ServiceProcess.ServiceInstaller.DisplayName
- uid: System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Install(IDictionary)
  nameWithType: ServiceInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Install(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
- uid: System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Rollback(IDictionary)
  nameWithType: ServiceInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Rollback(IDictionary)
- uid: System.ServiceProcess.ServiceInstaller.ServiceName
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
  fullName: System.ServiceProcess.ServiceInstaller.ServiceName
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceInstaller.StartType
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: StartType
  nameWithType: ServiceInstaller.StartType
  fullName: System.ServiceProcess.ServiceInstaller.StartType
- uid: System.ServiceProcess.ServiceStartMode
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceStartMode
  nameWithType: ServiceStartMode
  fullName: System.ServiceProcess.ServiceStartMode
- uid: System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Uninstall(IDictionary)
  nameWithType: ServiceInstaller.Uninstall(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Uninstall(IDictionary)
- uid: System.ServiceProcess.ServiceInstaller.#ctor*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceInstaller
  nameWithType: ServiceInstaller.ServiceInstaller
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: CopyFromComponent
  nameWithType: ServiceInstaller.CopyFromComponent
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
- uid: System.ServiceProcess.ServiceInstaller.Description*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Description
  nameWithType: ServiceInstaller.Description
- uid: System.ServiceProcess.ServiceInstaller.DisplayName*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
- uid: System.ServiceProcess.ServiceInstaller.Install*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Install
  nameWithType: ServiceInstaller.Install
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: IsEquivalentInstaller
  nameWithType: ServiceInstaller.IsEquivalentInstaller
- uid: System.ServiceProcess.ServiceInstaller.Rollback*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Rollback
  nameWithType: ServiceInstaller.Rollback
- uid: System.ServiceProcess.ServiceInstaller.ServiceName*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
- uid: System.ServiceProcess.ServiceInstaller.StartType*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: StartType
  nameWithType: ServiceInstaller.StartType
- uid: System.ServiceProcess.ServiceInstaller.Uninstall*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Uninstall
  nameWithType: ServiceInstaller.Uninstall
