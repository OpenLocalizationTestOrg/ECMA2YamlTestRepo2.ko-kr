### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.ApplicationServices.User
  id: User
  children:
  - Microsoft.VisualBasic.ApplicationServices.User.#ctor
  - Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  - Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser
  - Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  - Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  - Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  - Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)
  - Microsoft.VisualBasic.ApplicationServices.User.Name
  langs:
  - csharp
  name: User
  nameWithType: User
  fullName: Microsoft.VisualBasic.ApplicationServices.User
  type: Class
  summary: "현재 사용자에 대 한 정보에 대 한 액세스를 제공합니다."
  remarks: "의해 노출 되는 메서드와 속성은 `My.User` 개체는 현재 사용자에 대 한 정보에 대 한 액세스를 제공 합니다. &quot;현재 사용자&quot;의 의미는 Windows 및 웹 응용 프로그램 간에 약간 다릅니다. Windows 응용 프로그램에서 현재 사용자는 응용 프로그램을 실행 하는 사용자가 있습니다. 웹 응용 프로그램에서 현재 사용자는 사용자 응용 프로그램에 액세스입니다.       `My.User` 속성에 액세스할 수도 <xref:System.Security.Principal.IPrincipal>현재 사용자에 대 한.</xref:System.Security.Principal.IPrincipal> Principal 개체를 해당 사용자의 id 및 사용자가 속한 모든 역할을 포함 하 여 사용자의 보안 컨텍스트를 나타냅니다.       Windows 응용 프로그램의 경우이 속성은 동일한 기능을 제공 된 <xref:System.Threading.Thread.CurrentPrincipal%2A>속성.</xref:System.Threading.Thread.CurrentPrincipal%2A> 웹 응용 프로그램에서는이 속성은 동일한 기능을 제공 된 <xref:System.Web.HttpContext.User%2A>반환 되는 개체의 속성은 <xref:System.Web.HttpContext.Current%2A>속성.</xref:System.Web.HttpContext.Current%2A> </xref:System.Web.HttpContext.User%2A>      > [!NOTE] >에 대 한 Windows 응용 프로그램을 기반으로 하는 프로젝트만는 **Windows 응용 프로그램** 서식 파일 초기화는 `My.User` 기본적으로는 개체입니다. 다른 모든 Windows 프로젝트 형식에 초기화 해야 합니다는 `My.User` 호출 하 여 개체는 <xref:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser%2A>메서드 <xref:System.Threading.Thread.CurrentPrincipal%2A>.</xref:System.Threading.Thread.CurrentPrincipal%2A> 값을 할당 하 여 명시적으로 또는</xref:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser%2A>      > [!NOTE] >는 `My.User` 개체 이러한 운영 체제 로그온 한 사용자의 개념을 지원 하지 않으므로 Windows 95, Windows 98에서 실행 될 경우 현재 Windows 사용자에 대 한 정보를 보고할 수 없습니다. 사용 하려면 사용자 지정 인증을 구현 해야 합니다는 `My.User` 이러한 운영 체제에는 개체입니다."
  example:
  - "This example checks if the application is using Windows or custom authentication, and uses that information to parse the `My.User.Name` property.  \n  \n [!code-vb[VbVbalrMyUser#3](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#3)]"
  syntax:
    content: public class User
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: User()
  nameWithType: User.User()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.User()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "새 인스턴스를 초기화는 <xref href=&quot;Microsoft.VisualBasic.ApplicationServices.User&quot;> </xref> 클래스입니다."
  remarks: "의해 노출 되는 메서드와 속성은 `My.User` 개체는 현재 사용자에 대 한 정보에 대 한 액세스를 제공 합니다."
  syntax:
    content: public User ();
    parameters: []
  overload: Microsoft.VisualBasic.ApplicationServices.User.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  id: CurrentPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: CurrentPrincipal
  nameWithType: User.CurrentPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "현재 보안 주체 (역할 기반 보안)을 가져오거나 설정 합니다."
  remarks: "설정할 수 있습니다는 `My.User.CurrentPrincipal` 속성을 구현 하는 개체는 <xref:System.Security.Principal.IPrincipal>인터페이스를 사용자 지정 인증을 사용 하도록 설정 합니다.</xref:System.Security.Principal.IPrincipal>       대부분의 프로젝트 형식에서이 속성 가져오고 스레드의 현재 보안 주체를 설정 합니다. ASP.NET 응용 프로그램에서이 속성 가져오고 현재 HTTP 요청의 사용자 id에 대 한 보안 정보를 설정 합니다.       고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 **모든** 탭 합니다.      ## 프로젝트 형식에 따라 가용성 | | |   |-|-|   | 프로젝트 형식을 | 사용 가능한 |   | Windows 응용 프로그램 | **Yes**|   | 클래스 라이브러리 | **Yes**|   | 콘솔 응용 프로그램 | **Yes**|   | Windows 컨트롤 라이브러리 | **Yes**|   | 웹 컨트롤 라이브러리 | **Yes**|   | Windows 서비스 | **Yes**|   | 웹 사이트 | **Yes**|"
  example:
  - "This example checks if the application is using Windows or custom authentication, and uses that information to parse `My.User.Name` property.  \n  \n [!code-vb[VbVbalrMyUser#3](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#3)]"
  syntax:
    content: public System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "A <xref:System.Security.Principal.IPrincipal>보안 컨텍스트를 나타내는 값입니다.</xref:System.Security.Principal.IPrincipal>"
  overload: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 보안 주체를 설정 하는 데 필요한 사용 권한이 없습니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser
  id: InitializeWithWindowsUser
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: InitializeWithWindowsUser()
  nameWithType: User.InitializeWithWindowsUser()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "응용 프로그램을 시작한 Windows 사용자에 게는 스레드의 현재 보안 주체를 설정 합니다."
  remarks: "사용할 수는 `My.User.InitializeWithWindowsUser` 메서드를 응용 프로그램을 시작한 Windows 사용자에 게는 스레드의 현재 보안 주체를 설정 합니다. Windows 응용 프로그램에서 Visual Basic 응용 프로그램 모델 시작 시 기본적으로이 메서드를 호출합니다. 다른 프로젝트 형식에서 설정 해야이 메서드를 명시적으로 호출 하 여 또는 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> 값을 할당 하 여 스레드의 현재 보안 주체       Windows 프로젝트에는 `My.User` 스레드의 현재 보안 주체를 기반으로 하는 개체; 이므로이 메서드는 정보를 변경할 수 `My.User` 반환 합니다. ASP.NET 응용 프로그램에서 `My.User` 개체는 현재 HTTP 요청 사용자 id를 기반으로 하며이 메서드에 의해 영향을 받지 않습니다.      > [!NOTE] >의 정확한 동작은 `My.User` 개체에 응용 프로그램이 실행 되는 운영 체제 및 응용 프로그램 종류에 따라 달라 집니다. 자세한 내용은 참조는 <xref:Microsoft.VisualBasic.ApplicationServices.User>클래스 개요.</xref:Microsoft.VisualBasic.ApplicationServices.User>       고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 **모든** 탭 합니다.      ## 프로젝트 형식에 따라 가용성 | | |   |-|-|   | 프로젝트 형식을 | 사용 가능한 |   | Windows 응용 프로그램 | **Yes**|   | 클래스 라이브러리 | **Yes**|   | 콘솔 응용 프로그램 | **Yes**|   | Windows 컨트롤 라이브러리 | **Yes**|   | 웹 컨트롤 라이브러리 | **Yes**|   | Windows 서비스 | **Yes**|   | 웹 사이트 | **Yes**|"
  syntax:
    content: public void InitializeWithWindowsUser ();
    parameters: []
  overload: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  id: InternalPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: InternalPrincipal
  nameWithType: User.InternalPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "현재 사용자를 나타내는 principal 개체를 가져오거나 설정 합니다."
  remarks: "에 <xref:Microsoft.VisualBasic.ApplicationServices.User>개체를이 속성을 래핑하는 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>속성.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:Microsoft.VisualBasic.ApplicationServices.User> 다른 기능을 제공 하기 위해 파생된 클래스에서이 메서드를 재정의 합니다. 예를 들어는 <xref:Microsoft.VisualBasic.ApplicationServices.WebUser.InternalPrincipal%2A?displayProperty=fullName>속성이이 속성을 재정의 합니다.</xref:Microsoft.VisualBasic.ApplicationServices.WebUser.InternalPrincipal%2A?displayProperty=fullName>"
  syntax:
    content: protected virtual System.Security.Principal.IPrincipal InternalPrincipal { get; set; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "<xref:System.Security.Principal.IPrincipal>현재 사용자를 나타내는 개체입니다.</xref:System.Security.Principal.IPrincipal>"
  overload: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  id: IsAuthenticated
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: User.IsAuthenticated
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "사용자 인증 되었는지 여부를 나타내는 값을 가져옵니다."
  remarks: "`My.User.IsAuthenticated` 속성을 사용 하면 현재 사용자가 인증 된 경우를 확인 하는 코드입니다.      > [!NOTE] >의 정확한 동작은 `My.User` 개체 및 응용 프로그램이 실행 되는 운영 체제에서 응용 프로그램의 종류에 따라 다릅니다. 자세한 내용은 참조는 <xref:Microsoft.VisualBasic.ApplicationServices.User>클래스 개요.</xref:Microsoft.VisualBasic.ApplicationServices.User>      ## 프로젝트 형식에 따라 가용성 | | |   |-|-|   | 프로젝트 형식을 | 사용 가능한 |   | Windows 응용 프로그램 | **Yes**|   | 클래스 라이브러리 | **Yes**|   | 콘솔 응용 프로그램 | **Yes**|   | Windows 컨트롤 라이브러리 | **Yes**|   | 웹 컨트롤 라이브러리 | **Yes**|   | Windows 서비스 | **Yes**|   | 웹 사이트 | **Yes**|"
  example:
  - "This example verifies that the user has been authenticated before accessing a resource.  \n  \n [!code-vb[VbVbalrMyUser#2](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#2)]"
  syntax:
    content: public bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>사용자가 인증 되었으면 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  id: IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: IsInRole(BuiltInRole)
  nameWithType: User.IsInRole(BuiltInRole)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(BuiltInRole)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "현재 사용자가 지정된 된 역할에 속하는지 여부를 결정 합니다."
  remarks: "`My.User.IsInRole` 메서드를 사용 하면 현재 사용자 지정된 된 역할의 멤버 인지 확인 하는 코드입니다.       오버 로드는 `My.User.IsInRole` 에 쉽게 액세스할 수를 제공 하는 문자열을 사용 하는 메서드는 <xref:System.Security.Principal.IPrincipal.IsInRole%2A>메서드는 현재 보안 주체의.</xref:System.Security.Principal.IPrincipal.IsInRole%2A>       오버 로드는 `My.User.IsInRole` 를 받는 메서드에 `BuiltInRole` 열거형 현재 보안 주체에 따라 다르게 동작 합니다. Windows 사용자 계정 이면 (<xref:System.Security.Principal.WindowsPrincipal>),이 함수는 변환 `role` 을 해당 <xref:System.Security.Principal.WindowsBuiltInRole>열거형 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> 호출의 결과 반환 하 고</xref:System.Security.Principal.WindowsBuiltInRole> </xref:System.Security.Principal.WindowsPrincipal> 이 함수에 열거형 값의 이름을 전달 합니다. 현재 보안 주체가 다른 보안 주체 이면 `role` 주체의 <xref:System.Security.Principal.IPrincipal.IsInRole%2A>메서드.</xref:System.Security.Principal.IPrincipal.IsInRole%2A>      > [!NOTE] >의 정확한 동작은 `My.User` 개체 및 응용 프로그램이 실행 되는 운영 체제에서 응용 프로그램의 종류에 따라 다릅니다. 자세한 내용은 참조는 <xref:Microsoft.VisualBasic.ApplicationServices.User>클래스 개요.</xref:Microsoft.VisualBasic.ApplicationServices.User>      ## 프로젝트 형식에 따라 가용성 | | |   |-|-|   | 프로젝트 형식을 | 사용 가능한 |   | Windows 응용 프로그램 | **Yes**|   | 클래스 라이브러리 | **Yes**|   | 콘솔 응용 프로그램 | **Yes**|   | Windows 컨트롤 라이브러리 | **Yes**|   | 웹 컨트롤 라이브러리 | **Yes**|   | Windows 서비스 | **Yes**|   | 웹 사이트 | **Yes**|"
  example:
  - "This example checks if the user is an administrator before accessing a resource.  \n  \n [!code-vb[VbVbalrMyUser#1](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#1)]"
  syntax:
    content: public bool IsInRole (Microsoft.VisualBasic.ApplicationServices.BuiltInRole role);
    parameters:
    - id: role
      type: Microsoft.VisualBasic.ApplicationServices.BuiltInRole
      description: "구성원 자격을 확인할에 대 한 기본 제공 Windows 역할입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>현재 사용자가 지정된 된 역할의 멤버인 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.VisualBasic.ApplicationServices.User.IsInRole*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)
  id: IsInRole(System.String)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: IsInRole(String)
  nameWithType: User.IsInRole(String)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "현재 사용자가 지정된 된 역할에 속하는지 여부를 결정 합니다."
  remarks: "`My.User.IsInRole` 메서드를 사용 하면 현재 사용자 지정된 된 역할의 멤버 인지 확인 하는 코드입니다.       오버 로드는 `My.User.IsInRole` 에 쉽게 액세스할 수를 제공 하는 문자열을 사용 하는 메서드는 <xref:System.Security.Principal.IPrincipal.IsInRole%2A>메서드는 현재 보안 주체의.</xref:System.Security.Principal.IPrincipal.IsInRole%2A>       오버 로드는 `My.User.IsInRole` 를 받는 메서드에 `BuiltInRole` 열거형 현재 보안 주체에 따라 다르게 동작 합니다. Windows 사용자 계정 이면 (<xref:System.Security.Principal.WindowsPrincipal>),이 함수는 변환 `role` 을 해당 <xref:System.Security.Principal.WindowsBuiltInRole>열거형 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> 호출의 결과 반환 하 고</xref:System.Security.Principal.WindowsBuiltInRole> </xref:System.Security.Principal.WindowsPrincipal> 이 함수에 열거형 값의 이름을 전달 합니다. 현재 보안 주체가 다른 보안 주체 이면 `role` 주체의 <xref:System.Security.Principal.IPrincipal.IsInRole%2A>메서드.</xref:System.Security.Principal.IPrincipal.IsInRole%2A>      > [!NOTE] >의 정확한 동작은 `My.User` 개체 및 응용 프로그램이 실행 되는 운영 체제에서 응용 프로그램의 종류에 따라 다릅니다. 자세한 내용은 참조는 <xref:Microsoft.VisualBasic.ApplicationServices.User>클래스 개요.</xref:Microsoft.VisualBasic.ApplicationServices.User>      ## 프로젝트 형식에 따라 가용성 | | |   |-|-|   | 프로젝트 형식을 | 사용 가능한 |   | Windows 응용 프로그램 | **Yes**|   | 클래스 라이브러리 | **Yes**|   | 콘솔 응용 프로그램 | **Yes**|   | Windows 컨트롤 라이브러리 | **Yes**|   | 웹 컨트롤 라이브러리 | **Yes**|   | Windows 서비스 | **Yes**|   | 웹 사이트 | **Yes**|"
  example:
  - "This example checks if the user is an administrator before accessing a resource.  \n  \n [!code-vb[VbVbalrMyUser#1](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#1)]"
  syntax:
    content: public bool IsInRole (string role);
    parameters:
    - id: role
      type: System.String
      description: "멤버 자격을 확인 하려는 역할의 이름입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>현재 사용자가 지정된 된 역할의 멤버인 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.VisualBasic.ApplicationServices.User.IsInRole*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.Name
  id: Name
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: Name
  nameWithType: User.Name
  fullName: Microsoft.VisualBasic.ApplicationServices.User.Name
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "현재 사용자의 이름을 가져옵니다."
  remarks: "You can use the `My.User` object to get information about the current user.  \n  \n The principal that authenticates the user also controls the format of the user name. By default, an application uses Windows authentication, and the user name has the format DOMAIN\\USERNAME. A custom implementation of the principal does not necessarily use the same format.  \n  \n> [!NOTE]\n>  The `My.User.Name` property returns an empty string when run under Windows 95 and Windows 98 because those operating systems do not recognize user names.  \n  \n> [!NOTE]\n>  The exact behavior of the `My.User` object depends on the type of the application and on the operating system on which the application runs. For more information, see the <xref:Microsoft.VisualBasic.ApplicationServices.User> class overview.  \n  \n## Availability by Project Type  \n  \n|||  \n|-|-|  \n|Project type|Available|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|**Yes**|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example checks if the application is using Windows or custom authentication, and uses that information to parse the `My.User.Name` property.  \n  \n [!code-vb[VbVbalrMyUser#3](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#3)]"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 현재 사용자의 이름입니다."
  overload: Microsoft.VisualBasic.ApplicationServices.User.Name*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: Microsoft.VisualBasic.ApplicationServices.User.#ctor
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: User()
  nameWithType: User.User()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.User()
- uid: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: CurrentPrincipal
  nameWithType: User.CurrentPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InitializeWithWindowsUser()
  nameWithType: User.InitializeWithWindowsUser()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser()
- uid: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InternalPrincipal
  nameWithType: User.InternalPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsAuthenticated
  nameWithType: User.IsAuthenticated
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsInRole(BuiltInRole)
  nameWithType: User.IsInRole(BuiltInRole)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(BuiltInRole)
- uid: Microsoft.VisualBasic.ApplicationServices.BuiltInRole
  parent: Microsoft.VisualBasic.ApplicationServices
  isExternal: false
  name: BuiltInRole
  nameWithType: BuiltInRole
  fullName: Microsoft.VisualBasic.ApplicationServices.BuiltInRole
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsInRole(String)
  nameWithType: User.IsInRole(String)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.ApplicationServices.User.Name
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: Name
  nameWithType: User.Name
  fullName: Microsoft.VisualBasic.ApplicationServices.User.Name
- uid: Microsoft.VisualBasic.ApplicationServices.User.#ctor*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: User
  nameWithType: User.User
- uid: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: CurrentPrincipal
  nameWithType: User.CurrentPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InitializeWithWindowsUser
  nameWithType: User.InitializeWithWindowsUser
- uid: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InternalPrincipal
  nameWithType: User.InternalPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsAuthenticated
  nameWithType: User.IsAuthenticated
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsInRole
  nameWithType: User.IsInRole
- uid: Microsoft.VisualBasic.ApplicationServices.User.Name*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: Name
  nameWithType: User.Name
