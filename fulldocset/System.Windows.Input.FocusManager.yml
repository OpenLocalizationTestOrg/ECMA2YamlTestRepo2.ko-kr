### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.FocusManager
  id: FocusManager
  children:
  - System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.FocusedElementProperty
  - System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GotFocusEvent
  - System.Windows.Input.FocusManager.IsFocusScopeProperty
  - System.Windows.Input.FocusManager.LostFocusEvent
  - System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  - System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  langs:
  - csharp
  name: FocusManager
  nameWithType: FocusManager
  fullName: System.Windows.Input.FocusManager
  type: Class
  summary: "확인 및 포커스 범위를 설정 및 범위 내에서 포커스가 있는 요소를 설정 하기 위한 정적 메서드, 연결 된 속성 및 이벤트 집합을 제공 합니다."
  remarks: "[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] 두 가지 개념인 포커스와: 키보드 포커스와 논리 포커스 합니다.       키보드 포커스는 키보드 입력을 받고 현재 요소에 적용 됩니다.  키보드 포커스가 있는 요소는 하나만 있을 수 있습니다.  키보드 포커스를이 요소에 <xref:System.Windows.IInputElement.IsKeyboardFocused%2A>로 설정 `true`.</xref:System.Windows.IInputElement.IsKeyboardFocused%2A>  <xref:System.Windows.Input.Keyboard.FocusedElement%2A?displayProperty=fullName>키보드 포커스가 있는 요소를 반환합니다.</xref:System.Windows.Input.Keyboard.FocusedElement%2A?displayProperty=fullName>       논리적 포커스와 관련 된 <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>특정 포커스 범위 내에서.</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>       포커스 범위는 컨테이너 요소를 추적 하는 <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>해당 범위 내에서.</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  기본적으로는 <xref:System.Windows.Window>클래스는 마찬가지로 포커스 범위는 <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, 및 <xref:System.Windows.Controls.ToolBar>클래스.</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  포커스 범위를 요소에 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A>로 설정 `true`.</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       논리 포커스를 가진 요소가 여러 개 있을 수 있지만 단일 포커스 범위 내에서 논리적 포커스를 가진 요소가 하나만 존재할 합니다.  요소가 논리 포커스와 키보드 포커스를가지고 있지 않습니다 되지만 키보드 포커스를 가진 요소가 논리 포커스를 갖게 됩니다.  포커스 범위 내에서 포커스가 범위를 정의 하는 것이 불가능 합니다.  부모 포커스 범위 및 자식 포커스 범위에 <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>.</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName> 를 가질 수 있습니다이 경우       다음 시나리오에서 키보드 포커스와 논리적 포커스 변경 하는 방법을 보여 줍니다.는 [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] 는 <xref:System.Windows.Window> <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.Menu> <xref:System.Windows.Controls.MenuItem>.</xref:System.Windows.Controls.MenuItem> 가</xref:System.Windows.Controls.Menu> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Window> 있는 응용 프로그램  키보드 포커스가 변경 될 때는 <xref:System.Windows.Controls.TextBox>에 <xref:System.Windows.Controls.MenuItem>, <xref:System.Windows.Controls.TextBox>키보드 포커스를 잃지에 대 한 논리 포커스를 유지 하지만 <xref:System.Windows.Window>포커스 범위.</xref:System.Windows.Window> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.MenuItem> </xref:System.Windows.Controls.TextBox>  <xref:System.Windows.Controls.MenuItem>키보드 활성화 되 고에 대 한 논리적 포커스를 가져옵니다는 <xref:System.Windows.Controls.Menu>포커스 범위.</xref:System.Windows.Controls.Menu> </xref:System.Windows.Controls.MenuItem>  키보드 포커스 루트 <xref:System.Windows.Window> <xref:System.Windows.Window>포커스 범위 논리적 포커스와 키보드 포커스,이 경우 <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> 변수인 가져옵니다</xref:System.Windows.Window> 의 요소를</xref:System.Windows.Window> 반환 하는 경우  <xref:System.Windows.Controls.TextBox>논리 포커스와 키보드 포커스가 되었습니다.</xref:System.Windows.Controls.TextBox>  <xref:System.Windows.Controls.MenuItem>키보드 포커스를 잃을 대 한 논리적 포커스를 유지 하지만 <xref:System.Windows.Controls.Menu>포커스 범위.</xref:System.Windows.Controls.Menu> </xref:System.Windows.Controls.MenuItem>       기본값 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A>에 <xref:System.Windows.Window>, <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ToolBar>, 및 <xref:System.Windows.Controls.ContextMenu>은 `true`.</xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window> </xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       포커스에 자세한 내용은 참조는 [입력 개요](~/add/includes/ajax-current-ext-md.md) 및 [포커스 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public static class FocusManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "에 대 한 처리기는 <xref:System.Windows.Input.FocusManager.GotFocus>연결 된 이벤트입니다.</xref:System.Windows.Input.FocusManager.GotFocus>"
  syntax:
    content: public static void AddGotFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref> 또는 <xref href=&quot;System.Windows.ContentElement&quot;> </xref> 을이 이벤트를 수신 대기 합니다."
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "추가할 이벤트 처리기입니다."
  overload: System.Windows.Input.FocusManager.AddGotFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "에 대 한 처리기는 <xref:System.Windows.Input.FocusManager.LostFocus>연결 된 이벤트입니다.</xref:System.Windows.Input.FocusManager.LostFocus>"
  syntax:
    content: public static void AddLostFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref> 또는 <xref href=&quot;System.Windows.ContentElement&quot;> </xref> 을이 이벤트를 수신 대기 합니다."
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "추가할 이벤트 처리기입니다."
  overload: System.Windows.Input.FocusManager.AddLostFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.FocusedElementProperty
  id: FocusedElementProperty
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: FocusedElementProperty
  nameWithType: FocusManager.FocusedElementProperty
  fullName: System.Windows.Input.FocusManager.FocusedElementProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "식별 된 <xref:System.Windows.Input.FocusManager.FocusedElement*>연결 된 속성입니다.</xref:System.Windows.Input.FocusManager.FocusedElement*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty FocusedElementProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  id: GetFocusedElement(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetFocusedElement(DependencyObject)
  nameWithType: FocusManager.GetFocusedElement(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusedElement(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "지정한 포커스 범위 내에서 논리적 포커스를 가진 요소를 가져옵니다."
  remarks: "<xref:System.Windows.Input.FocusManager.FocusedElement%2A>특정 포커스 범위에 대 한 논리 포커스가 있는 요소입니다.</xref:System.Windows.Input.FocusManager.FocusedElement%2A>  이 개체가 되거나 키보드 포커스를 사용할 수 없습니다.  키보드 포커스 키보드 입력을 받는 요소를 가리킵니다.  논리 포커스 포커스와 키보드 포커스, 자세한 내용은 참조는 [입력 개요](~/add/includes/ajax-current-ext-md.md)합니다.       경우 `element` 않습니다 포커스 범위가이 메서드는 반환 `null`합니다.       사용 하 여 <xref:System.Windows.Input.FocusManager.SetFocusedElement%2A>, 지정 된 포커스 범위 내에서 논리적 포커스를 가진 요소를 지정할 수 있습니다.</xref:System.Windows.Input.FocusManager.SetFocusedElement%2A>"
  example:
  - "The following example sets the element with logical focus by using the <xref:System.Windows.Input.FocusManager.SetFocusedElement%2A> and it gets the element with logical focus by using the GetFocusedElement.  \n  \n [!code-cs[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focusgetsetfocusedelement)]\n [!code-vb[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focusgetsetfocusedelement)]"
  syntax:
    content: public static System.Windows.IInputElement GetFocusedElement (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "지정한 포커스 범위에 논리 포커스가 있는 요소입니다."
    return:
      type: System.Windows.IInputElement
      description: "지정된 된 포커스 범위 논리 포커스가 있는 요소입니다."
  overload: System.Windows.Input.FocusManager.GetFocusedElement*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  id: GetFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetFocusScope(DependencyObject)
  nameWithType: FocusManager.GetFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusScope(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "가 지정 된 요소의 가장 가까운 상위 항목을 결정 <xref:System.Windows.Input.FocusManager.IsFocusScope*>로 설정 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Input.FocusManager.IsFocusScope*>"
  remarks: "기본값 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A>에 <xref:System.Windows.Window>, <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ToolBar>, <xref:System.Windows.Controls.ContextMenu>은 `true`.</xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window> </xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       포커스 범위는 컨테이너 요소를 추적 하는 <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>해당 범위 내에서.</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  기본적으로는 <xref:System.Windows.Window>클래스는 마찬가지로 포커스 범위는 <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, 및 <xref:System.Windows.Controls.ToolBar>클래스.</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  포커스 범위를 요소에 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A>로 설정 `true`.</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       논리 포커스 포커스와 키보드 포커스, 자세한 내용은 참조는 [입력 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public static System.Windows.DependencyObject GetFocusScope (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "에 대 한 가장 가까운 포커스 범위를 가져올 요소입니다."
    return:
      type: System.Windows.DependencyObject
      description: "지정된 된 요소에 대 한 포커스 범위입니다."
  overload: System.Windows.Input.FocusManager.GetFocusScope*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  id: GetIsFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetIsFocusScope(DependencyObject)
  nameWithType: FocusManager.GetIsFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetIsFocusScope(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "확인 여부를 지정 된 <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> 포커스 범위입니다."
  remarks: "포커스 범위는 컨테이너 요소를 추적 하는 <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>해당 범위 내에서.</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  기본적으로는 <xref:System.Windows.Window>클래스는 마찬가지로 포커스 범위는 <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, 및 <xref:System.Windows.Controls.ToolBar>클래스.</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  포커스 범위를 요소에 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A>로 설정 `true`.</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       논리 포커스 포커스와 키보드 포커스, 자세한 내용은 참조는 [입력 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public static bool GetIsFocusScope (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "연결된 속성을 읽을 요소입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <xref:System.Windows.Input.FocusManager.IsFocusScope*>로 설정 된 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 지정 된 요소의; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Input.FocusManager.IsFocusScope*>"
  overload: System.Windows.Input.FocusManager.GetIsFocusScope*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GotFocusEvent
  id: GotFocusEvent
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GotFocusEvent
  nameWithType: FocusManager.GotFocusEvent
  fullName: System.Windows.Input.FocusManager.GotFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "식별 된 <xref:System.Windows.Input.FocusManager.GotFocus>연결 된 이벤트입니다.</xref:System.Windows.Input.FocusManager.GotFocus>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.IsFocusScopeProperty
  id: IsFocusScopeProperty
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: IsFocusScopeProperty
  nameWithType: FocusManager.IsFocusScopeProperty
  fullName: System.Windows.Input.FocusManager.IsFocusScopeProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "식별 된 <xref:System.Windows.Input.FocusManager.IsFocusScope*>연결 된 속성입니다.</xref:System.Windows.Input.FocusManager.IsFocusScope*>"
  remarks: "기본값 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A>에 <xref:System.Windows.Window>, <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ToolBar>, <xref:System.Windows.Controls.ContextMenu>은 `true`.</xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window> </xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       포커스 범위는 컨테이너 요소를 추적 하는 <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>해당 범위 내에서.</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  기본적으로는 <xref:System.Windows.Window>클래스는 마찬가지로 포커스 범위는 <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, 및 <xref:System.Windows.Controls.ToolBar>클래스.</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  포커스 범위를 요소에 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A>로 설정 `true`.</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       논리 포커스 포커스와 키보드 포커스, 자세한 내용은 참조는 [입력 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsFocusScopeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.LostFocusEvent
  id: LostFocusEvent
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: LostFocusEvent
  nameWithType: FocusManager.LostFocusEvent
  fullName: System.Windows.Input.FocusManager.LostFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "식별 된 <xref:System.Windows.Input.FocusManager.LostFocus>연결 된 이벤트입니다.</xref:System.Windows.Input.FocusManager.LostFocus>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "에 대 한 처리기를 제거는 <xref:System.Windows.Input.FocusManager.GotFocus>연결 된 이벤트입니다.</xref:System.Windows.Input.FocusManager.GotFocus>"
  syntax:
    content: public static void RemoveGotFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref> 또는 <xref href=&quot;System.Windows.ContentElement&quot;> </xref> 을이 이벤트를 수신 대기 합니다."
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "이벤트 처리기가 제거 됩니다."
  overload: System.Windows.Input.FocusManager.RemoveGotFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "에 대 한 처리기를 제거는 <xref:System.Windows.Input.FocusManager.LostFocus>연결 된 이벤트입니다.</xref:System.Windows.Input.FocusManager.LostFocus>"
  syntax:
    content: public static void RemoveLostFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref> 또는 <xref href=&quot;System.Windows.ContentElement&quot;> </xref> 을이 이벤트를 수신 대기 합니다."
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "이벤트 처리기가 제거 됩니다."
  overload: System.Windows.Input.FocusManager.RemoveLostFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  id: SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: SetFocusedElement(DependencyObject,IInputElement)
  nameWithType: FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  fullName: System.Windows.Input.FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "지정된 된 요소에 포커스를 논리 설정 합니다."
  remarks: "<xref:System.Windows.Input.FocusManager.FocusedElement%2A>특정 포커스 범위에 대 한 논리 포커스가 있는 요소입니다.</xref:System.Windows.Input.FocusManager.FocusedElement%2A>  이 개체가 되거나 키보드 포커스를 사용할 수 없습니다.  키보드 포커스 키보드 입력을 받는 요소를 가리킵니다.  논리 포커스 포커스와 키보드 포커스, 자세한 내용은 참조는 [입력 개요](~/add/includes/ajax-current-ext-md.md)합니다.       요소가 포커스 범위의 상위 포커스 범위를 지정 하는 것이 불가능 합니다.  예를 들어 경우는 <xref:System.Windows.Controls.StackPanel>포커스 범위와 해당 부모는 <xref:System.Windows.Window>포커스 범위는 <xref:System.Windows.Controls.TextBox>의 자식은 <xref:System.Windows.Controls.StackPanel>지정할 수는 <xref:System.Windows.Window>SetFocusedElement를 호출할 때 포커스 범위로.</xref:System.Windows.Window> </xref:System.Windows.Controls.StackPanel> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Window> </xref:System.Windows.Controls.StackPanel>  <xref:System.Windows.Controls.TextBox>그러면 <xref:System.Windows.Input.FocusManager.FocusedElement%2A>모두에 대 한는 <xref:System.Windows.Window>포커스 범위 및 <xref:System.Windows.Controls.StackPanel>포커스 범위.</xref:System.Windows.Controls.StackPanel> </xref:System.Windows.Window> </xref:System.Windows.Input.FocusManager.FocusedElement%2A> </xref:System.Windows.Controls.TextBox>       SetFocusedElement 지정된 된 포커스 범위에 지정 된 요소가 논리 포커스를 표시 하 고 요소가 키보드 포커스를 시도 합니다."
  example:
  - "The following example sets the element with logical focus by using the SetFocusedElement and it gets the element with logical focus by using the <xref:System.Windows.Input.FocusManager.GetFocusedElement%2A>.  \n  \n [!code-cs[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focusgetsetfocusedelement)]\n [!code-vb[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focusgetsetfocusedelement)]"
  syntax:
    content: public static void SetFocusedElement (System.Windows.DependencyObject element, System.Windows.IInputElement value);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "지정된 된 요소에 <xref:System.Windows.Input.FocusManager.FocusedElement*>.</xref:System.Windows.Input.FocusManager.FocusedElement*> 을 포커스 범위"
    - id: value
      type: System.Windows.IInputElement
      description: "논리 포커스를 요소입니다."
  overload: System.Windows.Input.FocusManager.SetFocusedElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  id: SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: SetIsFocusScope(DependencyObject,Boolean)
  nameWithType: FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  fullName: System.Windows.Input.FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "지정 된 <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> 포커스 범위로 합니다."
  remarks: "포커스 범위는 컨테이너 요소를 추적 하는 <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>해당 범위 내에서.</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  기본적으로는 <xref:System.Windows.Window>클래스는 마찬가지로 포커스 범위는 <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, 및 <xref:System.Windows.Controls.ToolBar>클래스.</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  포커스 범위를 요소에 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A>로 설정 `true`.</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       논리 포커스 포커스와 키보드 포커스, 자세한 내용은 참조는 [입력 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The follow example makes an element a focus scope by using SetIsFocusScope.  \n  \n [!code-cs[focussnippets#FocusSetIsFocusScope](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focussetisfocusscope)]\n [!code-vb[focussnippets#FocusSetIsFocusScope](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focussetisfocusscope)]"
  syntax:
    content: public static void SetIsFocusScope (System.Windows.DependencyObject element, bool value);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "포커스 범위를 만들 요소입니다."
    - id: value
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 `element` 포커스 범위, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Input.FocusManager.SetIsFocusScope*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.RoutedEventHandler
  parent: System.Windows
  isExternal: false
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.FocusedElementProperty
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: FocusedElementProperty
  nameWithType: FocusManager.FocusedElementProperty
  fullName: System.Windows.Input.FocusManager.FocusedElementProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusedElement(DependencyObject)
  nameWithType: FocusManager.GetFocusedElement(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusedElement(DependencyObject)
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusScope(DependencyObject)
  nameWithType: FocusManager.GetFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusScope(DependencyObject)
- uid: System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetIsFocusScope(DependencyObject)
  nameWithType: FocusManager.GetIsFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetIsFocusScope(DependencyObject)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.FocusManager.GotFocusEvent
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GotFocusEvent
  nameWithType: FocusManager.GotFocusEvent
  fullName: System.Windows.Input.FocusManager.GotFocusEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Input.FocusManager.IsFocusScopeProperty
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: IsFocusScopeProperty
  nameWithType: FocusManager.IsFocusScopeProperty
  fullName: System.Windows.Input.FocusManager.IsFocusScopeProperty
- uid: System.Windows.Input.FocusManager.LostFocusEvent
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: LostFocusEvent
  nameWithType: FocusManager.LostFocusEvent
  fullName: System.Windows.Input.FocusManager.LostFocusEvent
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetFocusedElement(DependencyObject,IInputElement)
  nameWithType: FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  fullName: System.Windows.Input.FocusManager.SetFocusedElement(DependencyObject,IInputElement)
- uid: System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetIsFocusScope(DependencyObject,Boolean)
  nameWithType: FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  fullName: System.Windows.Input.FocusManager.SetIsFocusScope(DependencyObject,Boolean)
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddGotFocusHandler
  nameWithType: FocusManager.AddGotFocusHandler
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddLostFocusHandler
  nameWithType: FocusManager.AddLostFocusHandler
- uid: System.Windows.Input.FocusManager.GetFocusedElement*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusedElement
  nameWithType: FocusManager.GetFocusedElement
- uid: System.Windows.Input.FocusManager.GetFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusScope
  nameWithType: FocusManager.GetFocusScope
- uid: System.Windows.Input.FocusManager.GetIsFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetIsFocusScope
  nameWithType: FocusManager.GetIsFocusScope
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveGotFocusHandler
  nameWithType: FocusManager.RemoveGotFocusHandler
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveLostFocusHandler
  nameWithType: FocusManager.RemoveLostFocusHandler
- uid: System.Windows.Input.FocusManager.SetFocusedElement*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetFocusedElement
  nameWithType: FocusManager.SetFocusedElement
- uid: System.Windows.Input.FocusManager.SetIsFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetIsFocusScope
  nameWithType: FocusManager.SetIsFocusScope
