### YamlMime:ManagedReference
items:
- uid: System.Transactions.IEnlistmentNotification
  id: IEnlistmentNotification
  children:
  - System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)
  - System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)
  - System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)
  - System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)
  langs:
  - csharp
  name: IEnlistmentNotification
  nameWithType: IEnlistmentNotification
  fullName: System.Transactions.IEnlistmentNotification
  type: Interface
  summary: "참여할 때 트랜잭션 관리자에 대 한&2; 단계 커밋 알림 콜백을 제공 하는 리소스 관리자를 구현 해야 하는 인터페이스에 설명 합니다."
  remarks: "리소스 관리자가 트랜잭션에 참여할 수 순서로 트랜잭션 관리자를 통해 트랜잭션에 참여 해야 합니다. <xref:System.Transactions.Transaction>클래스 이름이로 시작 하는 메서드 집합을 정의 `Enlist` 이 기능을 제공 합니다.</xref:System.Transactions.Transaction> 서로 다른 `Enlist` 메서드는 리소스 관리자가 있을 수 있는 인 리스트 먼 트의 다른 형식에 해당 합니다.       이 클래스는 참여할 때 트랜잭션 관리자에 대 한&2; 단계 커밋 알림 콜백을 제공 하는 리소스 관리자를 구현 해야 하는 인터페이스를 설명 합니다. IEnlistmentNotification 인터페이스의 각 리소스 관리자 구현에 대 한 사용 하 여 등록 해야 하는 <xref:System.Transactions.Transaction.EnlistVolatile%2A>메서드 또는 <xref:System.Transactions.Transaction.EnlistDurable%2A>의 메서드는 <xref:System.Transactions.Transaction>일시적 또는 지 속성에 리소스 인지에 따라 클래스.</xref:System.Transactions.Transaction> </xref:System.Transactions.Transaction.EnlistDurable%2A> </xref:System.Transactions.Transaction.EnlistVolatile%2A> 인 리스트 먼 트 및 2PC에 대 한 자세한 내용은 참조 하십시오. [트랜잭션에서 참가자 인 리스트 먼 트 리소스](~/add/includes/ajax-current-ext-md.md) 및 [단일 단계 및 다중 단계에서 트랜잭션 커밋](~/add/includes/ajax-current-ext-md.md) 각각.       트랜잭션 관리자&2; 단계 커밋 프로토콜의 각 단계에서 다음과 같은 방법으로 참여 한 개체를에 알립니다.      | 메서드 | 설명 |   |------------|-----------------|   | <xref:System.Transactions.IEnlistmentNotification.Prepare%2A>| 참여 한 개체의이 메서드에 콜백으로 사용는 트랜잭션 관리자가는 트랜잭션의 첫 번째 단계는 트랜잭션 관리자가 트랜잭션을 커밋할 수 있는 여부 참가 하는 경우. |   | <xref:System.Transactions.IEnlistmentNotification.Commit%2A>| 이 메서드는 참여 한 개체의 경우으로 사용 됩니다 콜백을 트랜잭션 관리자가 트랜잭션 두 번째 단계 트랜잭션이 커밋됩니다. |   | <xref:System.Transactions.IEnlistmentNotification.Rollback%2A>| 이 메서드는 참여 한 개체의 콜백으로 사용는 트랜잭션 관리자가 트랜잭션의 두 번째 단계 (즉, 롤백됩니다) 트랜잭션이 중단 되는 경우. |   | <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>| 참여 한 개체의이 메서드에 콜백으로 사용는 트랜잭션 관리자가 트랜잭션의 두 번째 단계는 트랜잭션이 확실 하지 않은 경우. |      > [!NOTE] > 알아야 할 특정 순서 대로 순차적으로 또는 알림을 전송 하지 않을 수 있습니다.</xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> </xref:System.Transactions.IEnlistmentNotification.Rollback%2A> </xref:System.Transactions.IEnlistmentNotification.Commit%2A> </xref:System.Transactions.IEnlistmentNotification.Prepare%2A>"
  example:
  - "The following example shows an implementation of this interface, as well as enlisting the object as a participant in a transaction using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method.  \n  \n [!code-cs[Tx_Enlist#1](~/add/codesnippet/csharp/t-system.transactions.ie_1.cs)]\n [!code-vb[Tx_Enlist#1](~/add/codesnippet/visualbasic/t-system.transactions.ie_1.vb)]"
  syntax:
    content: public interface IEnlistmentNotification
  implements: []
  platform:
  - net462
- uid: System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)
  id: Commit(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  langs:
  - csharp
  name: Commit(Enlistment)
  nameWithType: IEnlistmentNotification.Commit(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.Commit(Enlistment)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "알립니다 참여 한 트랜잭션이 커밋되는 개체입니다."
  remarks: "트랜잭션 관리자는 모든 참가자가 트랜잭션을 커밋하는 지시할 때 커밋의 두 번째 단계는 참여 한 개체의이 메서드를 호출 합니다.       트랜잭션을 완료 하 고 다음 TM 호출 하 여 완료 되었음을 알립니다 하는 데 필요한 작업을 수행한 리소스 관리자는 <xref:System.Transactions.Enlistment.Done%2A>에서 메서드는 `enlistment` 매개 변수.</xref:System.Transactions.Enlistment.Done%2A>       리소스 관리자가, 영속적 참여 하지만 호출 하 여 응답 하지 않는 경우 <xref:System.Transactions.Enlistment.Done%2A>메서드, 트랜잭션 관리자는 리소스 관리자의 호출이 완료 받았는지 있는지 확인 해야 합니다.</xref:System.Transactions.Enlistment.Done%2A> 따라서 트랜잭션 관리자에 대 한 응답 대기 및 관련 정보가이 거래를 유지 합니다.  경우 <xref:System.Transactions.Enlistment.Done%2A>은 호출 되지 정보의이 부분을 무기한 보관 됩니다 메모리에 또는 시스템 수준 리소스에.</xref:System.Transactions.Enlistment.Done%2A> 따라서 리소스를 회수할 수 없게 됩니다. 분산 트랜잭션에서이 수는 MSDTC 로그가 가득 MSDTC 프로세스를 중단 하는 합니다. 관리 하는 트랜잭션의 경우 <xref:System.Transactions>,이 인해 리소스 관리자의 프로세스의 메모리 소비량에 점진적으로 지속적으로 증가 합니다.</xref:System.Transactions> 따라서 호출 하는 데 중요는 <xref:System.Transactions.Enlistment.Done%2A>메서드 리소스 관리자 작업을 완료 한 후에 준비 작업.</xref:System.Transactions.Enlistment.Done%2A>"
  syntax:
    content: public void Commit (System.Transactions.Enlistment enlistment);
    parameters:
    - id: enlistment
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref> 트랜잭션 관리자에 대 한 응답을 보내는 데 사용 되는 개체입니다."
  overload: System.Transactions.IEnlistmentNotification.Commit*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)
  id: InDoubt(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  langs:
  - csharp
  name: InDoubt(Enlistment)
  nameWithType: IEnlistmentNotification.InDoubt(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.InDoubt(Enlistment)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "참여 한 트랜잭션이 상태가 확실 하지 않은 개체를 알립니다."
  remarks: "이 메서드는 트랜잭션 관리자가 단일 지속형 리소스를 단일 단계 커밋 작업을 호출 하 고 지속적인 리소스 연결을 트랜잭션 결과 가져오기 전에 손실 된 후 일시적 리소스에 대해 호출 됩니다. 해당 시점에 트랜잭션 결과 안전 하 게 확인할 수 없습니다.       호출 하지 않아야으로 InDoubt 트랜잭션에 대 한 최종 상태로 간주, <xref:System.Transactions.IEnlistmentNotification.Commit%2A>또는 <xref:System.Transactions.IEnlistmentNotification.Rollback%2A>InDoubt를 호출한 후.</xref:System.Transactions.IEnlistmentNotification.Rollback%2A> </xref:System.Transactions.IEnlistmentNotification.Commit%2A>      > [!NOTE] > 일시적 리소스에 대 한이 메서드의 구현 영향을 받는 데이터에 대해 이해 하는 복구 또는 제약 작업을 수행 해야 합니다.  도 호출 해야는 <xref:System.Transactions.Enlistment.Done%2A>에서 메서드는에 `enlistment` 의 작업 완료 될 때 매개 변수.</xref:System.Transactions.Enlistment.Done%2A>       리소스 관리자가, 영속적 참여 하지만 호출 하 여 응답 하지 않는 경우 <xref:System.Transactions.Enlistment.Done%2A>메서드, 트랜잭션 관리자는 리소스 관리자 InDoubt 호출 받았는지 있는지 확인 해야 합니다.</xref:System.Transactions.Enlistment.Done%2A> 따라서 트랜잭션 관리자에 대 한 응답 대기 및 관련 정보가이 거래를 유지 합니다.  경우 <xref:System.Transactions.Enlistment.Done%2A>은 호출 되지 정보의이 부분을 무기한 보관 됩니다 메모리에 또는 시스템 수준 리소스에.</xref:System.Transactions.Enlistment.Done%2A> 따라서 리소스를 회수할 수 없게 됩니다. 분산 트랜잭션에서이 수는 MSDTC 로그가 가득 MSDTC 프로세스를 중단 하는 합니다. 관리 하는 트랜잭션의 경우 <xref:System.Transactions>,이 인해 리소스 관리자의 프로세스의 메모리 소비량에 점진적으로 지속적으로 증가 합니다.</xref:System.Transactions> 따라서 호출 하는 데 중요는 <xref:System.Transactions.Enlistment.Done%2A>메서드 리소스 관리자 작업을 완료 한 후에 준비 작업.</xref:System.Transactions.Enlistment.Done%2A>"
  syntax:
    content: public void InDoubt (System.Transactions.Enlistment enlistment);
    parameters:
    - id: enlistment
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref> 트랜잭션 관리자에 대 한 응답을 보내는 데 사용 되는 개체입니다."
  overload: System.Transactions.IEnlistmentNotification.InDoubt*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)
  id: Prepare(System.Transactions.PreparingEnlistment)
  parent: System.Transactions.IEnlistmentNotification
  langs:
  - csharp
  name: Prepare(PreparingEnlistment)
  nameWithType: IEnlistmentNotification.Prepare(PreparingEnlistment)
  fullName: System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "참여 한 트랜잭션이 커밋 준비를 하 고 개체를 알립니다."
  remarks: "트랜잭션 관리자는이 메서드를 호출 참여 한 리소스의 관리자 커밋의 1 단계 묻는 메시지가 나타나면 참가자가 트랜잭션을 커밋할 수 있는 여부.       로깅해야 영구 리소스 관리자를 구현 하는 경우에이 단계 동안 레코드를 준비 합니다. 레코드 복구를 수행 하는 데 필요한 모든 정보를 포함 해야 합니다. 여기에는 <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A>속성에서 트랜잭션 관리자에 전달 되는 <xref:System.Transactions.TransactionManager.Reenlist%2A>복구 하는 동안 메서드.</xref:System.Transactions.TransactionManager.Reenlist%2A> </xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> 복구에 대 한 자세한 내용은 참조 하십시오. [복구 수행](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)합니다.       리소스 관리자 호출 하기 전에 완료 해야 하는 모든 작업을 완료 된 <xref:System.Transactions.PreparingEnlistment.Prepared%2A>의 메서드는 `preparingEnlistment` 커밋 결정을 나타내는 매개 변수를.</xref:System.Transactions.PreparingEnlistment.Prepared%2A> 이 프로세스를 완료 커밋, 롤백 또는 의심 스러운에서 모든 2 단계 알림을 받기 전에 확인 해야 합니다. 2 단계 알림을 인라인 호출 하는 동일한 스레드에서 발생할 수 있으므로이는 <xref:System.Transactions.PreparingEnlistment.Prepared%2A>메서드 1 단계에서.</xref:System.Transactions.PreparingEnlistment.Prepared%2A> 따라서 해야 모든 작업 후의 <xref:System.Transactions.PreparingEnlistment.Prepared%2A>2 단계 알림을 받기 전에 끝내 야 기대할 수 있는 호출 (예를 들어 잠금 해제).</xref:System.Transactions.PreparingEnlistment.Prepared%2A>       메서드를 호출할 수도 있습니다는 `preparingEnlistment` 롤백에 대 한 투표를 나타내기 위해 매개 변수입니다.       호출 해야이 메서드의 구현이에 참여 하지 않고 원하는 개체를 단순히 관찰 하 고 트랜잭션이 진행 상황에 반응 하는 경우는 <xref:System.Transactions.Enlistment.Done%2A>의 메서드는 `preparingEnlistment` 의 작업 완료 될 때 매개 변수.</xref:System.Transactions.Enlistment.Done%2A> 이렇게 하면 리소스 관리자 게 2 단계 알림을 표시 되지 않습니다."
  syntax:
    content: public void Prepare (System.Transactions.PreparingEnlistment preparingEnlistment);
    parameters:
    - id: preparingEnlistment
      type: System.Transactions.PreparingEnlistment
      description: "A <xref href=&quot;System.Transactions.PreparingEnlistment&quot;> </xref> 트랜잭션 관리자에 대 한 응답을 보내는 데 사용 되는 개체입니다."
  overload: System.Transactions.IEnlistmentNotification.Prepare*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)
  id: Rollback(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  langs:
  - csharp
  name: Rollback(Enlistment)
  nameWithType: IEnlistmentNotification.Rollback(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.Rollback(Enlistment)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "참여 한 트랜잭션이 롤백되고 개체에 알립니다 (중단)."
  remarks: "트랜잭션 관리자 트랜잭션이 롤백되고 ()으로 인해 중단 된 하나 이상의 트랜잭션 참가자가 트랜잭션을 커밋할 수 없을 때 참여 한 개체의이 메서드를 호출 합니다.       트랜잭션을 완료 하 고 다음 TM 호출 하 여 완료 되었음을 알립니다 하는 데 필요한 작업을 수행한 리소스 관리자는 <xref:System.Transactions.Enlistment.Done%2A>에서 메서드는 `enlistment` 매개 변수.</xref:System.Transactions.Enlistment.Done%2A>       리소스 관리자가, 영속적 참여 하지만 호출 하 여 응답 하지 않는 경우 <xref:System.Transactions.Enlistment.Done%2A>메서드, 트랜잭션 관리자는 리소스 관리자 롤백 호출을 받았는지 있는지 확인 해야 합니다.</xref:System.Transactions.Enlistment.Done%2A> 따라서 트랜잭션 관리자에 대 한 응답 대기 및 관련 정보가이 거래를 유지 합니다.  경우 <xref:System.Transactions.Enlistment.Done%2A>은 호출 되지 정보의이 부분을 무기한 보관 됩니다 메모리에 또는 시스템 수준 리소스에.</xref:System.Transactions.Enlistment.Done%2A> 따라서 리소스를 회수할 수 없게 됩니다. 분산 트랜잭션에서이 수는 MSDTC 로그가 가득 MSDTC 프로세스를 중단 하는 합니다. 관리 하는 트랜잭션의 경우 <xref:System.Transactions>,이 인해 리소스 관리자의 프로세스의 메모리 소비량에 점진적으로 지속적으로 증가 합니다.</xref:System.Transactions> 따라서 호출 하는 데 중요는 <xref:System.Transactions.Enlistment.Done%2A>메서드 리소스 관리자 작업을 완료 한 후에 준비 작업.</xref:System.Transactions.Enlistment.Done%2A>"
  syntax:
    content: public void Rollback (System.Transactions.Enlistment enlistment);
    parameters:
    - id: enlistment
      type: System.Transactions.Enlistment
      description: "A <xref href=&quot;System.Transactions.Enlistment&quot;> </xref> 트랜잭션 관리자에 대 한 응답을 보내는 데 사용 되는 개체입니다."
  overload: System.Transactions.IEnlistmentNotification.Rollback*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Commit(Enlistment)
  nameWithType: IEnlistmentNotification.Commit(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.Commit(Enlistment)
- uid: System.Transactions.Enlistment
  parent: System.Transactions
  isExternal: false
  name: Enlistment
  nameWithType: Enlistment
  fullName: System.Transactions.Enlistment
- uid: System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: InDoubt(Enlistment)
  nameWithType: IEnlistmentNotification.InDoubt(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.InDoubt(Enlistment)
- uid: System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Prepare(PreparingEnlistment)
  nameWithType: IEnlistmentNotification.Prepare(PreparingEnlistment)
  fullName: System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment)
- uid: System.Transactions.PreparingEnlistment
  parent: System.Transactions
  isExternal: false
  name: PreparingEnlistment
  nameWithType: PreparingEnlistment
  fullName: System.Transactions.PreparingEnlistment
- uid: System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Rollback(Enlistment)
  nameWithType: IEnlistmentNotification.Rollback(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.Rollback(Enlistment)
- uid: System.Transactions.IEnlistmentNotification.Commit*
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Commit
  nameWithType: IEnlistmentNotification.Commit
- uid: System.Transactions.IEnlistmentNotification.InDoubt*
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: InDoubt
  nameWithType: IEnlistmentNotification.InDoubt
- uid: System.Transactions.IEnlistmentNotification.Prepare*
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Prepare
  nameWithType: IEnlistmentNotification.Prepare
- uid: System.Transactions.IEnlistmentNotification.Rollback*
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Rollback
  nameWithType: IEnlistmentNotification.Rollback
