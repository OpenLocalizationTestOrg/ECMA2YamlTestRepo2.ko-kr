### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyObject
  id: DependencyObject
  children:
  - System.Windows.DependencyObject.#ctor
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  langs:
  - csharp
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
  type: Class
  summary: "종속성 속성 시스템에 참가 하는 개체를 나타냅니다."
  remarks: "DependencyObject 클래스를 사용 하면 [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] 많은 파생된 클래스에서 속성 시스템 서비스입니다.       속성 시스템의 기본 기능은 속성 값을 계산 하 고 변경 된 값에 대 한 시스템 알림을 제공 하는 것입니다. 속성 시스템에 참가 하는 또 다른 주요 클래스는 <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> <xref:System.Windows.DependencyProperty>속성 시스템에 종속성 속성의 등록을 사용할 수 있게 하 고 기본 클래스로 DependencyObject 종속성 속성을 사용 하는 개체를 활성화 하는 반면 id와 각 종속성 속성에 대 한 정보를 제공 합니다.</xref:System.Windows.DependencyProperty>       DependencyObject 서비스 및 특징은 다음과 같습니다:-호스팅 지원 되는 종속성 속성입니다. 종속성 속성의 <xref:System.Windows.DependencyProperty.Register%2A>메서드를 프로그램 클래스의 public 정적 필드와 메서드의 반환 값을 저장 하 고</xref:System.Windows.DependencyProperty.Register%2A> 호출 하 여 등록      -연결 된 속성을 호스팅 지원 합니다. 연결된 된 속성의 <xref:System.Windows.DependencyProperty.RegisterAttached%2A>공용 정적 읽기 전용의 필드로 프로그램 클래스 메서드의 반환 값을 저장 하 고 메서드를</xref:System.Windows.DependencyProperty.RegisterAttached%2A> 호출 하 여 등록 (추가 멤버 요구 사항도;이 나타냅니다는 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 연결 된 속성에 대 한 특정 구현 합니다. 자세한 내용은 참조 [연결 된 속성 개요](~/add/includes/ajax-current-ext-md.md).) 그런 다음 DependencyObject에서 파생 되는 임의의 클래스에 연결 된 속성을 설정할 수 있습니다.      -Get, set 및 DependencyObject에 존재 하는 종속성 속성의 값에 대 한 유틸리티 메서드를 선택 취소 합니다.      -메타 데이터를 지원 하도록 강제 지정, 속성 변경 알림 및 종속성 속성에 대 한 재정의 콜백을 또는 연결 된 속성입니다. 또한 DependencyObject 클래스는 종속성 속성에 대 한 소유자 당 속성 메타 데이터를 지원합니다.      -에서 파생 된 클래스에 대 한 공통 기본 클래스 A <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, 또는 <xref:System.Windows.Media.Visual>.</xref:System.Windows.Media.Visual> </xref:System.Windows.Freezable> </xref:System.Windows.ContentElement> (<xref:System.Windows.UIElement>, 다른의 클래스를 포함 하는 클래스 계층에 <xref:System.Windows.Media.Visual>.)</xref:System.Windows.Media.Visual> </xref:System.Windows.UIElement>"
  example:
  - "The following example derives from DependencyObject to create a new abstract class. The class then registers an attached property and includes support members for that attached property.  \n  \n [!code-cs[WPFAquariumSln#DOMain](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#domain)]\n [!code-vb[WPFAquariumSln#DOMain](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#domain)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))]

      [System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))]

      public class DependencyObject : System.Windows.Threading.DispatcherObject
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.DependencyObject.#ctor
  id: '#ctor'
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: DependencyObject()
  nameWithType: DependencyObject.DependencyObject()
  fullName: System.Windows.DependencyObject.DependencyObject()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> 클래스입니다."
  syntax:
    content: public DependencyObject ();
    parameters: []
  overload: System.Windows.DependencyObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  id: ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "속성의 로컬 값을 지웁니다. 지울 속성으로 지정 됩니다는 <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> 식별자입니다."
  remarks: "ClearValue를 호출 하 여 속성 값을 지우면 반드시 얻지 종속성 속성 종속성 속성 메타 데이터에 지정 된 기본값입니다. 만 속성을 지우면 적용 된 로컬 값을 지웁니다. 자세한 내용은 참조 [종속성 속성 값 우선 순위](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example iterates all properties that have local values set on an object, then calls ClearValue to clear the values of each such property.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public void ClearValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "지울 종속성 속성으로 식별 한 <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> 개체 참조입니다."
  overload: System.Windows.DependencyObject.ClearValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "봉인 된에서 ClearValue 호출 하려고 <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  id: ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyPropertyKey)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "읽기 전용 속성의 로컬 값을 지웁니다. 지울 속성으로 지정 됩니다는 <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref>합니다."
  remarks: "A <xref:System.Windows.DependencyPropertyKey>속성 시스템 작업에 대 한 읽기 전용 종속성 속성을 식별 합니다.</xref:System.Windows.DependencyPropertyKey> 읽기 전용 종속성 속성을 정의 하는 클래스를 공용 액세스로이 키를 노출 해야 합니다. 공개적으로 노출 되는 키를 부정 되는 속성의 읽기 전용 문자 공용 코드 경로 제공 하는 경우와 같은 메서드 <xref:System.Windows.DependencyObject.ClearValue%2A>또는 <xref:System.Windows.DependencyObject.SetValue%2A>클래스 또는 키를 참조 하는 어셈블리 외부에서 호출 합니다.</xref:System.Windows.DependencyObject.SetValue%2A> </xref:System.Windows.DependencyObject.ClearValue%2A>       ClearValue를 호출 하 여 속성 값을 지우면 반드시 얻지 종속성 속성 종속성 속성 메타 데이터에 지정 된 기본값입니다. 만 값을 지우면 적용 된 로컬 값을 지웁니다. 자세한 내용은 참조 [종속성 속성 값 우선 순위](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void ClearValue (System.Windows.DependencyPropertyKey key);
    parameters:
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "지울 종속성 속성에 대 한 키입니다."
  overload: System.Windows.DependencyObject.ClearValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "호출 하려고 <xref:System.Windows.DependencyObject.ClearValue*>에서 봉인 된 <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>.</xref:System.Windows.DependencyObject.ClearValue*>"
  platform:
  - net462
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  id: CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "지정된 된 종속성 속성의 값을 강제 변환합니다. 하나를 호출 하 여 이렇게 <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> 함수 호출에 있는 종속성 속성에 대 한 속성 메타 데이터에 지정 된 <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>합니다."
  remarks: "호출 CoerceValue를 통해 명시적으로 호출 되는 것 외에도 <xref:System.Windows.CoerceValueCallback>종속성에 대 한 속성 또한 내부적으로 호출 됩니다 하 여 종속성 속성 값이 다시 계산 될 때마다는 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 속성 시스템.</xref:System.Windows.CoerceValueCallback>       CoerceValue 메서드를 호출할 때 사용자가 지정한 속성에 대 한 강제 값 콜백이 호출 됩니다. 일반적으로 강제 변환에 대 한 조건을 알고 있는 경우에 강제 값 콜백이 있는지 알고 있는 경우에 및 CoerceValue를 호출 합니다.       클래스 처리 또는 종속 방식으로 다른 사용자의 값에 영향을 주는 관련된 속성의 속성 변경 콜백 내 CoerceValue를 호출 하기 위한 가장 일반적인 시나리오가입니다. 자세한 내용은 참조 [종속성 속성의 콜백 및 유효성 검사](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example calls CoerceValue within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class. This is a common pattern for introducing true value dependencies between dependency properties.  \n  \n [!code-cs[DPCallbackOverride#OnPCCurrent](~/add/codesnippet/csharp/DPCallbackOverride/SDKSampleLibrary/class1.cs#onpccurrent)]\n [!code-vb[DPCallbackOverride#OnPCCurrent](~/add/codesnippet/visualbasic/DPCallbackOverride.sdksamplelibrary/class1.vb#onpccurrent)]"
  syntax:
    content: public void CoerceValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "강제 변환할 종속성 속성의 식별자입니다."
  overload: System.Windows.DependencyObject.CoerceValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "지정 된 <code> dp </code> 또는 해당 값이 잘못 되었거나 존재 하지 않습니다."
  platform:
  - net462
- uid: System.Windows.DependencyObject.DependencyObjectType
  id: DependencyObjectType
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
  fullName: System.Windows.DependencyObject.DependencyObjectType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "가져옵니다는 <xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref> 를 래핑하는 [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] 이 인스턴스의 형식입니다."
  remarks: "이 속성은 메서드에서 반환 되는 개체의 반환 값 형식이 있으면 유용 <xref:System.Windows.DependencyObject>속성 시스템 관련 작업을 해당 형식에 따라 수행 하려는.</xref:System.Windows.DependencyObject> 예를 들어 것이 호출 하는 것이 효율적 <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29>를 사용 하는 <xref:System.Windows.DependencyObjectType>보다는 [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] 유형.</xref:System.Windows.DependencyObjectType> </xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> <xref:System.Windows.DependencyObjectType>빠른 조회를 지원합니다.</xref:System.Windows.DependencyObjectType>"
  example:
  - "In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property. The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.  \n  \n `public DOClass() : base()`  \n  \n `{`  \n  \n `__customPropertyCache = (CustomDP)`  \n  \n `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  \n  \n `}`"
  syntax:
    content: public System.Windows.DependencyObjectType DependencyObjectType { get; }
    return:
      type: System.Windows.DependencyObjectType
      description: "A <xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref> 를 래핑하는 [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] 이 인스턴스의 형식입니다."
  overload: System.Windows.DependencyObject.DependencyObjectType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: DependencyObject.Equals(Object)
  fullName: System.Windows.DependencyObject.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "제공 된 확인 <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> 현재 해당 <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>합니다."
  remarks: "이 구현은 참조 일치만 이며 포함된 된 속성의 값이 같은지를 확인 하려고 하지 않습니다."
  syntax:
    content: public override sealed bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref href=&quot;System.Windows.DependencyObject&quot;> </xref> 현재 인스턴스와 비교할 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>두 인스턴스가 동일 하면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.DependencyObject.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetHashCode
  id: GetHashCode
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: DependencyObject.GetHashCode()
  fullName: System.Windows.DependencyObject.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "이 대 한 해시 코드를 가져옵니다 <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>합니다."
  syntax:
    content: public override sealed int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "부호 있는 32 비트 정수 해시 코드입니다."
  overload: System.Windows.DependencyObject.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator
  id: GetLocalValueEnumerator
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetLocalValueEnumerator()
  nameWithType: DependencyObject.GetLocalValueEnumerator()
  fullName: System.Windows.DependencyObject.GetLocalValueEnumerator()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "종속성 속성을이 값이 설정 로컬로 확인 하기 위한 특수 열거자를 만듭니다 <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>합니다."
  remarks: "A *로컬 값* 에 의해 설정 된 종속성 속성 값이 <xref:System.Windows.DependencyObject.SetValue%2A>속성 시스템의 다른 측면을,.</xref:System.Windows.DependencyObject.SetValue%2A>       <xref:System.Windows.LocalValueEnumerator>GetLocalValueEnumerator 로컬로 설정 된 속성을 열거 하는 데 사용 수 호출 하 여 얻은 값에 <xref:System.Windows.DependencyObject>인스턴스.</xref:System.Windows.DependencyObject> </xref:System.Windows.LocalValueEnumerator> 이러한 속성으로 열거자에 표시 됩니다는 <xref:System.Windows.LocalValueEntry>특정 참조 하는 속성이 있는 개체를 <xref:System.Windows.DependencyProperty>과 해당 값.</xref:System.Windows.DependencyProperty> </xref:System.Windows.LocalValueEntry> 이 기술은 로컬에서 설정한 열거의 값 사용할 수 있습니다 최적화 또는 기타 처리의 로컬 값 등의 속성 값을 결정 하는 <xref:System.Windows.DependencyObject>된 변경.</xref:System.Windows.DependencyObject>      > [!IMPORTANT] > 반환 된 <xref:System.Windows.LocalValueEnumerator>포함 될 수 있습니다 <xref:System.Windows.LocalValueEntry>은 읽기 전용 종속성 속성 또는 속성 시스템에 의해 값이 계산 되는 종속성 속성에 대 한 레코드.</xref:System.Windows.LocalValueEntry> </xref:System.Windows.LocalValueEnumerator> 예를 들어 너비가 레이아웃을 통해 설정된 된 하는 시각적 프레임 워크 요소 <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</xref:System.Windows.FrameworkElement.ActualWidth%2A> 로컬 값을를 보고 합니다. 다시 설정 하기 위해 로컬 값을 가져오는 경우 확인 된 <xref:System.Windows.DependencyProperty.ReadOnly%2A>속성 식별자의 각 값 <xref:System.Windows.LocalValueEntry>되었는지 확인 하는 <xref:System.Windows.DependencyProperty>에 읽기 전용이 아닌지.</xref:System.Windows.DependencyProperty> </xref:System.Windows.LocalValueEntry> </xref:System.Windows.DependencyProperty.ReadOnly%2A>"
  example:
  - "The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();
    parameters: []
    return:
      type: System.Windows.LocalValueEnumerator
      description: "로컬 값을 특수 한 열거자입니다."
  overload: System.Windows.DependencyObject.GetLocalValueEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  id: GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "종속성 속성의 현재 유효 값이 인스턴스에서 반환 된 <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>합니다."
  remarks: "*유효 값* 값을 요청 하는 모든 호출자에 게 속성 시스템에 의해 반환 되는 속성의 값입니다. 유효한 값은 속성의 시스템 값 우선 순위에 참여 하는 가능한 모든 입력을 계산 하는 속성 시스템의 결과입니다. 강제 변환 및 애니메이션 포함 됩니다. 자세한 내용은 참조 [종속성 속성 값 우선 순위](~/add/includes/ajax-current-ext-md.md)합니다.       이 메서드는 <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> 를 반환 하지 않습니다. <xref:System.Windows.DependencyProperty>다양 한 기능 되기도 하 내부적으로 강제 변환 콜백을 통해 노출에 사용 되는 속성 시스템에 대 한 센티널 값.</xref:System.Windows.DependencyProperty>       속성의 형식은 확실 하지 않은 경우에 보다 구체적인 되는지 확인 하려면 요청 된 종속성 속성의 식별자를 쿼리할 수 있습니다 <xref:System.Windows.DependencyProperty.PropertyType%2A>반환 값을 변환할 수 있습니다.</xref:System.Windows.DependencyProperty.PropertyType%2A>"
  syntax:
    content: public object GetValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "<xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> 에 대 한 값을 검색할 속성의 식별자입니다."
    return:
      type: System.Object
      description: "현재 유효 값을 반환합니다."
  overload: System.Windows.DependencyObject.GetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "지정 된 <code> dp </code> 해당 값이 잘못 되었거나 지정 된 또는 <code> dp </code> 존재 하지 않습니다."
  platform:
  - net462
- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  id: InvalidateProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: InvalidateProperty(DependencyProperty)
  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.InvalidateProperty(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "지정된 된 종속성 속성에 대 한 유효한 값을 다시 평가합니다."
  remarks: "InvalidateProperty, 연결 및 적용 가능한 모든를 호출 하는 경우 <xref:System.Windows.CoerceValueCallback>또는 <xref:System.Windows.PropertyChangedCallback>해당 종속성 속성을 호출할 수에 대 한 함수를 등록 합니다.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       로컬 값이 설정 되어 있는 속성에 InvalidateProperty를 호출 하는 로컬 값 우선 순위가 애니메이션 제외 하 고 다른 속성 시스템 입력 해도 아무런 영향이 미칠 됩니다. 호출할 수 있습니다 <xref:System.Windows.DependencyObject.ClearValue%2A>, InvalidateProperty를 호출 합니다.</xref:System.Windows.DependencyObject.ClearValue%2A> 자세한 내용은 참조 [종속성 속성 값 우선 순위](~/add/includes/ajax-current-ext-md.md)합니다.       InvalidateProperty 호출 대부분 종속성 속성의 시나리오에 반드시 적용 되지 않습니다. 종속성 속성 값 변경을 다른 구성 요소의 무효화 되, 속성 시스템을 무효화 하 고 종속성 속성을 자동으로 다시 평가 합니다. 그러나 여전히 몇 가지 적절 한 시나리오가 있습니다 InvalidateProperty 유용 합니다. 강제 내부의 InvalidateProperty을 사용할 수는 특히, 값 또는 속성 변경 다른 종속성 속성에 대 한 콜백입니다. 권장 되는 구현할 수 있는 데이터 원본에 대 한 바인딩을 다시 검사를 강제로 InvalidateProperty을 사용할 수도 있습니다 <xref:System.ComponentModel.INotifyPropertyChanged>알림 메커니즘 (아마도 데이터 클래스에서 파생 될 수 없습니다 또는 데이터 메서드는 정적 멤버를 사용할 경우).</xref:System.ComponentModel.INotifyPropertyChanged>"
  example:
  - "The following example calls InvalidateProperty on a custom property, whenever properties that are involved in the invalidated property's calculations change. This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.  \n  \n [!code-cs[PropertySystemEsoterics#InvalidateProperty](~/add/codesnippet/csharp/PropertySystemEsoterics/SDKSampleLibrary/class1.cs#invalidateproperty)]\n [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/add/codesnippet/visualbasic/PropertySystemEsoterics.sdksamplelibrary/class1.vb#invalidateproperty)]"
  syntax:
    content: public void InvalidateProperty (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "<xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> 을 무효화 하는 속성의 식별자입니다."
  overload: System.Windows.DependencyObject.InvalidateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.IsSealed
  id: IsSealed
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
  fullName: System.Windows.DependencyObject.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "(읽기 전용)이이 인스턴스가 현재 봉인 되어 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "이 값은 내부적으로 설정 합니다."
  syntax:
    content: public bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 인스턴스는 봉인 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.DependencyObject.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "때마다 호출에서이 종속성 속성의 유효 값 <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> 업데이트 되었습니다. 변경 된 특정 종속성 속성이 이벤트 데이터에서 보고 됩니다."
  remarks: "일반적으로 개별 속성 변경 내용을 검색 하거나 사례 당 기준 속성 무효화 수행이 메서드를 사용 하는 것이 없습니다. OnPropertyChanged 속성의 광범위 한 분류에 대 한 특정 정보가 알려져 있는 경우는 일반적인 무효화 패턴을 수정 하는 데 사용 됩니다. 예를 들어 변경는 <xref:System.Windows.Freezable>유형의 값에 변경 될 수는 <xref:System.Windows.Freezable>, 다른 내에서 변경 내용이 있는 하위 속성 일 수 또는 <xref:System.Windows.Freezable>참조.</xref:System.Windows.Freezable> </xref:System.Windows.Freezable> </xref:System.Windows.Freezable> <xref:System.Windows.Freezable>OnPropertyChanged 재정의 구현 내부 정보를 사용 하 여 여부를 확인 속성 하위 속성, 두 경우 모두에 대 한 기본 클래스를 적절 한 논리를 제공 합니다.</xref:System.Windows.Freezable>       OnPropertyChanged 개체의 수명 동안 여러 번 호출 될 수도 있습니다. 따라서 특정 속성의 메타 데이터를 무시 하 고 다음 연결 전체 속성 시스템에 대 한 더 나은 성능을 얻을 수 있습니다 <xref:System.Windows.CoerceValueCallback>또는 <xref:System.Windows.PropertyChangedCallback>개별 속성에 대 한 함수.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback> 그러나, 사용이 메서드는 경우는 <xref:System.Windows.DependencyObject>많은 수의 값을 상호 연관 된 종속성 속성을 포함 하는 렌더링 동작 다시 실행 해야 다양 한 관련 속성 무효화의 경우와 같은 논리를 포함 하는 경우 또는.</xref:System.Windows.DependencyObject>"
  syntax:
    content: protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "종속성 속성 식별자, 형식에 대 한 속성 메타 데이터 및 이전 및 새 값을 포함 하는 이벤트 데이터입니다."
  overload: System.Windows.DependencyObject.OnPropertyChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  id: ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "있는 경우 종속성 속성의 로컬 값을 반환 합니다."
  remarks: "사용 해야 <xref:System.Windows.DependencyObject.GetValue%2A>종속성 속성에 대 한 가장 일반적으로 &quot;get&quot; 작업에 대 한.</xref:System.Windows.DependencyObject.GetValue%2A> ReadLocalValue 반환 하지 않습니다 다양 한 상황에 대 한 유효한 값에는 값은 로컬로 설정 되지.       스타일, 테마, 서식 파일에서 설정 된 값, 메타 데이터 또는 속성 값 상속 기본값 로컬 값으로 간주 되지 않습니다. 그러나, 바인딩 및 다른 식을 확인 된 후 로컬 값으로 간주 됩니다.       이 메서드가 반환 <xref:System.Windows.DependencyProperty.UnsetValue>.</xref:System.Windows.DependencyProperty.UnsetValue> 지역 값을 설정 하는 경우       반환 된 값이 아닌 다른 <xref:System.Windows.DependencyProperty.UnsetValue>, 반환 값으로 변환 될 수 있는 더 구체적인 형식 인지 확인 하는 요청 된 종속성 속성의 메타 데이터를 쿼리할 수 있습니다.</xref:System.Windows.DependencyProperty.UnsetValue>"
  syntax:
    content: public object ReadLocalValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "<xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> 에 대 한 값을 검색할 속성의 식별자입니다."
    return:
      type: System.Object
      description: "로컬 값을 반환 하거나 값인 <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> 지역 값이 설정 된 경우."
  overload: System.Windows.DependencyObject.ReadLocalValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  id: SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetCurrentValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(DependencyProperty,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "해당 값 소스를 변경 하지 않고 종속성 속성의 값을 설정 합니다."
  remarks: "이 메서드는 프로그래밍 방식으로 응용 프로그램의 속성을 선언 된 사용을 해제 하지 않고 그 속성 중 하나의 값을 설정 하는 구성 요소에서 사용 됩니다. SetCurrentValue 메서드 속성이 아니라 기존의 트리거, 데이터 바인딩의 유효 값을 변경 하 고 스타일은 계속 작동 합니다."
  syntax:
    content: public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "설정할 종속성 속성의 식별자입니다."
    - id: value
      type: System.Object
      description: "새 로컬 값입니다."
  overload: System.Windows.DependencyObject.SetCurrentValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "봉인 된 속성 또는 읽기 전용 종속성 속성을 수정 하려고 했습니다. <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>에 대해 등록 된 올바른 유형이 아니었습니다는 <code>dp</code> 속성입니다."
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  id: SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyProperty,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "종속성 속성 식별자로 지정 되는 종속성 속성의 로컬 값을 설정 합니다."
  remarks: "제공 된 형식에 처음 등록 된 종속성 속성에 대해 선언 된 형식을 일치 하지 않으면, 예외가 throw 됩니다. `value` 매개 변수는 항상 적절 한 형식으로 제공 되어야 합니다.       예외 조건을 영향을 받는 <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>설정 되는 종속성 속성의 종속성 속성 식별자에 있는.</xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> 그렇지 않으면 일반 형식 검사 조건 (예: 네이티브 형식이 Double 인 경우 문자열 전달) 제공 된 값에 실패할 수 있습니다."
  syntax:
    content: public void SetValue (System.Windows.DependencyProperty dp, object value);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "설정할 종속성 속성의 식별자입니다."
    - id: value
      type: System.Object
      description: "새 로컬 값입니다."
  overload: System.Windows.DependencyObject.SetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "봉인 된 속성 또는 읽기 전용 종속성 속성을 수정 하려고 했습니다. <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>에 대해 등록 된 올바른 유형이 아니었습니다는 <code>dp</code> 속성입니다."
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  id: SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetValue(DependencyPropertyKey,Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyPropertyKey,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "로 지정 되는 읽기 전용 종속성 속성의 로컬 값을 설정 하는 <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref> 종속성 속성의 식별자입니다."
  remarks: "이 서명은 사용자 지정 클래스에서 정의 된 읽기 전용 종속성 속성의 값을 설정 하는 경우에 일반적으로 사용 됩니다. 일반적으로 SetValue 종속성 속성에 대해 결정된 된 값을 제공 하는 내부 논리를 구현 하는 해당 종속성 속성을 등록 된 유형에 서만 호출 됩니다. 자세한 내용은 참조 [읽기 전용 종속성 속성](~/add/includes/ajax-current-ext-md.md)합니다.       제공 된 형식에 처음 등록 된 종속성 속성에 대해 선언 된 형식을 일치 하지 않으면, 예외가 throw 됩니다. `value` 매개 변수는 항상 적절 한 형식으로 제공 되어야 합니다. 예외 조건을 영향을 받는 <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>설정 되는 종속성 속성의 종속성 속성 식별자에 있는.</xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>"
  example:
  - "The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] wrapper.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public void SetValue (System.Windows.DependencyPropertyKey key, object value);
    parameters:
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "<xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref> 설정할 속성의 식별자입니다."
    - id: value
      type: System.Object
      description: "새 로컬 값입니다."
  overload: System.Windows.DependencyObject.SetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  id: ShouldSerializeProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ShouldSerializeProperty(DependencyProperty)
  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.ShouldSerializeProperty(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Serialization 프로세스가 지정된 된 종속성 속성에 대 한 값을 serialize 해야 하는지 여부를 나타내는 값을 반환 합니다."
  remarks: "기본 구현은 반환 `true` 는 종속성 속성에 <xref:System.Windows.DependencyObject>.</xref:System.Windows.DependencyObject> 에 설정 된 로컬 값이 포함 되는 모든 경우"
  syntax:
    content: protected virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Serialize 해야 하는 종속성 속성의 식별자입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>제공 되는 종속성 속성 값을 직렬화; 해야 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.DependencyObject.ShouldSerializeProperty*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.DependencyObject.#ctor
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObject()
  nameWithType: DependencyObject.DependencyObject()
  fullName: System.Windows.DependencyObject.DependencyObject()
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyProperty)
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyPropertyKey)
- uid: System.Windows.DependencyPropertyKey
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyKey
  nameWithType: DependencyPropertyKey
  fullName: System.Windows.DependencyPropertyKey
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(DependencyProperty)
- uid: System.Windows.DependencyObject.DependencyObjectType
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
  fullName: System.Windows.DependencyObject.DependencyObjectType
- uid: System.Windows.DependencyObjectType
  parent: System.Windows
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObjectType
  fullName: System.Windows.DependencyObjectType
- uid: System.Windows.DependencyObject.Equals(System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: Equals(Object)
  nameWithType: DependencyObject.Equals(Object)
  fullName: System.Windows.DependencyObject.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.DependencyObject.GetHashCode
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetHashCode()
  nameWithType: DependencyObject.GetHashCode()
  fullName: System.Windows.DependencyObject.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetLocalValueEnumerator()
  nameWithType: DependencyObject.GetLocalValueEnumerator()
  fullName: System.Windows.DependencyObject.GetLocalValueEnumerator()
- uid: System.Windows.LocalValueEnumerator
  parent: System.Windows
  isExternal: false
  name: LocalValueEnumerator
  nameWithType: LocalValueEnumerator
  fullName: System.Windows.LocalValueEnumerator
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(DependencyProperty)
- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: InvalidateProperty(DependencyProperty)
  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.InvalidateProperty(DependencyProperty)
- uid: System.Windows.DependencyObject.IsSealed
  parent: System.Windows.DependencyObject
  isExternal: false
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
  fullName: System.Windows.DependencyObject.IsSealed
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(DependencyProperty)
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetCurrentValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(DependencyProperty,Object)
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyProperty,Object)
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue(DependencyPropertyKey,Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyPropertyKey,Object)
- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ShouldSerializeProperty(DependencyProperty)
  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.ShouldSerializeProperty(DependencyProperty)
- uid: System.Windows.DependencyObject.#ctor*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject.DependencyObject
- uid: System.Windows.DependencyObject.ClearValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue
  nameWithType: DependencyObject.ClearValue
- uid: System.Windows.DependencyObject.CoerceValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: CoerceValue
  nameWithType: DependencyObject.CoerceValue
- uid: System.Windows.DependencyObject.DependencyObjectType*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
- uid: System.Windows.DependencyObject.Equals*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: Equals
  nameWithType: DependencyObject.Equals
- uid: System.Windows.DependencyObject.GetHashCode*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetHashCode
  nameWithType: DependencyObject.GetHashCode
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetLocalValueEnumerator
  nameWithType: DependencyObject.GetLocalValueEnumerator
- uid: System.Windows.DependencyObject.GetValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetValue
  nameWithType: DependencyObject.GetValue
- uid: System.Windows.DependencyObject.InvalidateProperty*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: InvalidateProperty
  nameWithType: DependencyObject.InvalidateProperty
- uid: System.Windows.DependencyObject.IsSealed*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
- uid: System.Windows.DependencyObject.OnPropertyChanged*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: OnPropertyChanged
  nameWithType: DependencyObject.OnPropertyChanged
- uid: System.Windows.DependencyObject.ReadLocalValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ReadLocalValue
  nameWithType: DependencyObject.ReadLocalValue
- uid: System.Windows.DependencyObject.SetCurrentValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetCurrentValue
  nameWithType: DependencyObject.SetCurrentValue
- uid: System.Windows.DependencyObject.SetValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue
  nameWithType: DependencyObject.SetValue
- uid: System.Windows.DependencyObject.ShouldSerializeProperty*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ShouldSerializeProperty
  nameWithType: DependencyObject.ShouldSerializeProperty
