### YamlMime:ManagedReference
items:
- uid: System.Data.IDbTransaction
  id: IDbTransaction
  children:
  - System.Data.IDbTransaction.Commit
  - System.Data.IDbTransaction.Connection
  - System.Data.IDbTransaction.IsolationLevel
  - System.Data.IDbTransaction.Rollback
  langs:
  - csharp
  name: IDbTransaction
  nameWithType: IDbTransaction
  fullName: System.Data.IDbTransaction
  type: Interface
  summary: "데이터 원본에서 수행할 트랜잭션을 나타냅니다 및 관계형 데이터베이스에 액세스 하는.NET Framework 데이터 공급자에 의해 구현 됩니다."
  remarks: "IDbTransaction 인터페이스는 데이터 원본에서 수행할 트랜잭션을 나타내는 트랜잭션 클래스를 구현 하 상속 하는 클래스를 허용 합니다. 트랜잭션 클래스에 대 한 자세한 내용은 참조 [트랜잭션 및 동시성](~/add/includes/ajax-current-ext-md.md)합니다.       응용 프로그램을 직접 IDbTransaction 인터페이스의 인스턴스를 만들지 않는 있지만 IDbTransaction 상속 하는 클래스의 인스턴스를 만듭니다.       IDbTransaction 상속 된 클래스는 상속 된 멤버를 구현 하 고 일반적으로 공급자 특정 기능을 추가 하려면 추가 멤버를 정의 해야 합니다. 예를 들어 IDbTransaction 인터페이스 정의 <xref:System.Data.IDbTransaction.Commit%2A>메서드.</xref:System.Data.IDbTransaction.Commit%2A> 차례로 <xref:System.Data.OleDb.OleDbTransaction>이 속성을 상속 하 고 정의 하는 클래스는 <xref:System.Data.OleDb.OleDbTransaction.Begin%2A>메서드.</xref:System.Data.OleDb.OleDbTransaction.Begin%2A> </xref:System.Data.OleDb.OleDbTransaction>"
  example:
  - "The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection> and <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/t-system.data.idbtransac_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/t-system.data.idbtransac_1.vb)]"
  syntax:
    content: 'public interface IDbTransaction : IDisposable'
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.Data.IDbTransaction.Commit
  id: Commit
  parent: System.Data.IDbTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: IDbTransaction.Commit()
  fullName: System.Data.IDbTransaction.Commit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "데이터베이스 트랜잭션을 커밋합니다."
  remarks: ''
  example:
  - "The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.idbtransac_0_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.idbtransac_0_1.vb)]"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Data.IDbTransaction.Commit*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "트랜잭션을 커밋하는 동안 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "트랜잭션이 이미 커밋 또는 롤백됩니다.       -또는-연결이 끊어졌습니다."
  platform:
  - net462
- uid: System.Data.IDbTransaction.Connection
  id: Connection
  parent: System.Data.IDbTransaction
  langs:
  - csharp
  name: Connection
  nameWithType: IDbTransaction.Connection
  fullName: System.Data.IDbTransaction.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "트랜잭션에 연결 된 연결 개체를 지정 합니다."
  remarks: "단일 응용 프로그램에는 각각&0; 개 이상의 트랜잭션을 사용 하 여 여러 데이터베이스 연결을 있을 수 있습니다. 이 속성을 사용 하면 특정 트랜잭션과 연관 된 연결 개체를 확인할 수 있습니다."
  syntax:
    content: public System.Data.IDbConnection Connection { get; }
    return:
      type: System.Data.IDbConnection
      description: "거래와 연결할 연결 개체입니다."
  overload: System.Data.IDbTransaction.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbTransaction.IsolationLevel
  id: IsolationLevel
  parent: System.Data.IDbTransaction
  langs:
  - csharp
  name: IsolationLevel
  nameWithType: IDbTransaction.IsolationLevel
  fullName: System.Data.IDbTransaction.IsolationLevel
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> 이 트랜잭션에 대 한 합니다."
  remarks: "병렬 트랜잭션은 지원 되지 않습니다. 따라서는 <xref:System.Data.IsolationLevel>전체 트랜잭션에 적용 됩니다.</xref:System.Data.IsolationLevel>"
  syntax:
    content: public System.Data.IsolationLevel IsolationLevel { get; }
    return:
      type: System.Data.IsolationLevel
      description: "<xref href=&quot;System.Data.IsolationLevel&quot;> </xref> 이 트랜잭션에 대 한 합니다. 기본값은 <xref uid=&quot;langword_csharp_ReadCommitted&quot; name=&quot;ReadCommitted&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.IDbTransaction.IsolationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbTransaction.Rollback
  id: Rollback
  parent: System.Data.IDbTransaction
  langs:
  - csharp
  name: Rollback()
  nameWithType: IDbTransaction.Rollback()
  fullName: System.Data.IDbTransaction.Rollback()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "보류 상태에서 트랜잭션을 롤백합니다."
  remarks: "트랜잭션이 롤백할 수 보류 상태에서 (후 <xref:System.Data.IDbConnection.BeginTransaction%2A>호출 하기 전에 <xref:System.Data.IDbTransaction.Commit%2A>라고).</xref:System.Data.IDbTransaction.Commit%2A> </xref:System.Data.IDbConnection.BeginTransaction%2A>"
  example:
  - "The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.idbtransac_1_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.idbtransac_1_1.vb)]"
  syntax:
    content: public void Rollback ();
    parameters: []
  overload: System.Data.IDbTransaction.Rollback*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "트랜잭션을 커밋하는 동안 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "트랜잭션이 이미 커밋 또는 롤백됩니다.       -또는-연결이 끊어졌습니다."
  platform:
  - net462
references:
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.IDbTransaction.Commit
  parent: System.Data.IDbTransaction
  isExternal: false
  name: Commit()
  nameWithType: IDbTransaction.Commit()
  fullName: System.Data.IDbTransaction.Commit()
- uid: System.Data.IDbTransaction.Connection
  parent: System.Data.IDbTransaction
  isExternal: false
  name: Connection
  nameWithType: IDbTransaction.Connection
  fullName: System.Data.IDbTransaction.Connection
- uid: System.Data.IDbConnection
  parent: System.Data
  isExternal: false
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
- uid: System.Data.IDbTransaction.IsolationLevel
  parent: System.Data.IDbTransaction
  isExternal: false
  name: IsolationLevel
  nameWithType: IDbTransaction.IsolationLevel
  fullName: System.Data.IDbTransaction.IsolationLevel
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.IDbTransaction.Rollback
  parent: System.Data.IDbTransaction
  isExternal: false
  name: Rollback()
  nameWithType: IDbTransaction.Rollback()
  fullName: System.Data.IDbTransaction.Rollback()
- uid: System.Data.IDbTransaction.Commit*
  parent: System.Data.IDbTransaction
  isExternal: false
  name: Commit
  nameWithType: IDbTransaction.Commit
- uid: System.Data.IDbTransaction.Connection*
  parent: System.Data.IDbTransaction
  isExternal: false
  name: Connection
  nameWithType: IDbTransaction.Connection
- uid: System.Data.IDbTransaction.IsolationLevel*
  parent: System.Data.IDbTransaction
  isExternal: false
  name: IsolationLevel
  nameWithType: IDbTransaction.IsolationLevel
- uid: System.Data.IDbTransaction.Rollback*
  parent: System.Data.IDbTransaction
  isExternal: false
  name: Rollback
  nameWithType: IDbTransaction.Rollback
