### YamlMime:ManagedReference
items:
- uid: System.Runtime.Hosting.ApplicationActivator
  id: ApplicationActivator
  children:
  - System.Runtime.Hosting.ApplicationActivator.#ctor
  - System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  - System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  - System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  langs:
  - csharp
  name: ApplicationActivator
  nameWithType: ApplicationActivator
  fullName: System.Runtime.Hosting.ApplicationActivator
  type: Class
  summary: "어셈블리 매니페스트 기반 활성화에 대 한 기본 클래스를 제공 합니다."
  remarks: "각 ApplicationActivator 클래스의 지정 된 인스턴스는 단일 <xref:System.AppDomain>있는 모든 정품 인증 하기 위해 호출 라우팅됩니다.</xref:System.AppDomain> <xref:System.AppDomainManager>현재 <xref:System.AppDomain>이 목적을 위해 자체 사용자 지정 ApplicationActivator를 제공할 수 있습니다.</xref:System.AppDomain> </xref:System.AppDomainManager> 사용자 지정 ApplicationActivator 제공 하지 않으면 기본 인스턴스가 ApplicationActivator 생성 됩니다.       다음 단계는 기본 동작 설명 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>메서드 구현: 1.</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>  확인는 <xref:System.ActivationContext>활성화 된 일치 되도록 추가 기능에 <xref:System.ActivationContext>현재 도메인; 그렇지 않으면 2 단계로 진행 됩니다.</xref:System.ActivationContext> </xref:System.ActivationContext> 그렇지 않은 경우 어셈블리를 실행 하 고 개체 핸들에 래핑된 결과 반환 합니다.      2.  에 새 <xref:System.AppDomain>.</xref:System.AppDomain> 에서 추가 기능 활성화 다음 단계를 새 <xref:System.AppDomain> <xref:System.Runtime.Hosting.ActivationArguments>추가 기능에 대 한</xref:System.Runtime.Hosting.ActivationArguments> 사용 하 여</xref:System.AppDomain> 초기화를 수행합니다          1.  새 <xref:System.AppDomainSetup> <xref:System.Runtime.Hosting.ActivationArguments>포함 된 추가 기능에 대 한 활성화 컨텍스트 개체를</xref:System.Runtime.Hosting.ActivationArguments> 사용 하 여 개체를</xref:System.AppDomainSetup> 만듭니다.          2.  호출 된 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>방법을 사용 하 여 새 도메인을 만들 수는 <xref:System.AppDomainSetup>개체입니다.</xref:System.AppDomainSetup> </xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>          3.  <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> <xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=fullName> <xref:System.Security.Policy.ApplicationTrust>추가 기능에 대 한 개체</xref:System.Security.Policy.ApplicationTrust> 를 획득 하는 메서드</xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=fullName> 를 호출합니다 하는 메서드</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> 경우는 <xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A>속성에서 반환 `true`, 추가 기능에 실행 됩니다.</xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A> 그렇지 않으면 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>throw 한 <xref:System.Security.Policy.PolicyException>나타내는 실행 권한을 획득 하지 못했습니다.</xref:System.Security.Policy.PolicyException> </xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>          4.  추가 기능에 신뢰할 수 있는 경우 실행 한 다음 새 <xref:System.AppDomain>만들어지고 구성에 대 한는 <xref:System.ActivationContext>의 추가 기능 및 추가 기능이 로드 되 고 실행 합니다.</xref:System.ActivationContext> </xref:System.AppDomain>          5.  추가 기능을 활성화 결과 개체 핸들에 래핑되어 반환 됩니다.       사용자 지정 활성기 상황의 특정 집합의 추가 기능 활성화를 조정할 수 있습니다. 예를 들어 기존 사용자 지정 활성기를 찾을 수 <xref:System.AppDomain>기능을 활성화이 추가 될 때마다 새 도메인을 만드는 대신.</xref:System.AppDomain>       다음 단계는 기존에 있는 추가 기능이 활성화 하는 사용자 지정 ApplicationActivator의 동작을 설명 <xref:System.AppDomain>: 1.</xref:System.AppDomain>  사용자 지정 활성기 같은 도메인을 찾습니다 <xref:System.ActivationContext>로 활성화 되는 추가 기능에.</xref:System.ActivationContext>      2.  경우 <xref:System.ActivationContext>사용한 적 프로세스에는 새 <xref:System.AppDomain>이 <xref:System.ActivationContext>호출 하 여는 <xref:System.AppDomain.CreateDomain%2A>메서드를 직접 또는이 활동 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>기본 클래스에</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> 위임</xref:System.AppDomain.CreateDomain%2A> </xref:System.ActivationContext> 에 대 한</xref:System.AppDomain> 사용자 지정 활성기 만들기 전에</xref:System.ActivationContext>      3.  기존 도메인 그룹과 동일한 경우 <xref:System.ActivationContext>, 활성기 위임할 수 있는 다음는 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>메서드를 호출 하는 대상 도메인에 ApplicationActivator.</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> </xref:System.ActivationContext> <xref:System.AppDomain>.</xref:System.AppDomain> 대상에 있는 ApplicationActivator에 대 한 도메인 간 호출 수 있다고이 note"
  example:
  - "The following code example shows how to obtain an ApplicationActivator object from the current <xref:System.AppDomain.DomainManager%2A> for a manifest-based application.  \n  \n [!code-vb[System.Runtime.Hosting.ApplicationActivator#1](~/add/codesnippet/visualbasic/t-system.runtime.hosting_0_1.vb)]\n [!code-cs[System.Runtime.Hosting.ApplicationActivator#1](~/add/codesnippet/csharp/t-system.runtime.hosting_0_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ApplicationActivator
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor
  id: '#ctor'
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: ApplicationActivator()
  nameWithType: ApplicationActivator.ApplicationActivator()
  fullName: System.Runtime.Hosting.ApplicationActivator.ApplicationActivator()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Runtime.Hosting.ApplicationActivator&quot;> </xref> 클래스입니다."
  syntax:
    content: public ApplicationActivator ();
    parameters: []
  overload: System.Runtime.Hosting.ApplicationActivator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  id: CreateInstance(System.ActivationContext)
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstance(ActivationContext)
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "지정 된 활성화 컨텍스트를 사용 하는 응용 프로그램을 활성화할 수의 인스턴스를 만듭니다."
  remarks: "이 메서드는 응용 프로그램의 매니페스트 기반 활성화를 위한 것입니다."
  syntax:
    content: public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "<xref href=&quot;System.ActivationContext&quot;> </xref> 활성화할 응용 프로그램을 식별 하는 합니다."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref> 응용 프로그램 실행의 반환 값에 대 한 래퍼입니다. 반환 값을 실제 개체에 액세스 하기 위해 래핑을 해제 해야 합니다."
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  id: CreateInstance(System.ActivationContext,System.String[])
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstance(ActivationContext,String[])
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext,String[])
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "지정 된 활성화 컨텍스트 및 사용자 지정 활성화 데이터로 사용 하는 응용 프로그램을 활성화할 수의 인스턴스를 만듭니다."
  remarks: "이 메서드는 응용 프로그램의 매니페스트 기반 활성화를 위한 것입니다. 정품 인증 데이터 URL의 쿼리 문자열 부분은 같은 정보로 구성 됩니다."
  syntax:
    content: public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "<xref href=&quot;System.ActivationContext&quot;> </xref> 활성화할 응용 프로그램을 식별 하는 합니다."
    - id: activationCustomData
      type: System.String[]
      description: "사용자 지정 활성화 데이터입니다."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref> 응용 프로그램 실행의 반환 값에 대 한 래퍼입니다. 반환 값을 실제 개체에 액세스 하기 위해 래핑을 해제 해야 합니다."
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  id: CreateInstanceHelper(System.AppDomainSetup)
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstanceHelper(AppDomainSetup)
  nameWithType: ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "지정 된를 사용 하 여 응용 프로그램의 인스턴스를 만들고 <xref href=&quot;System.AppDomainSetup&quot;> </xref> 개체입니다."
  remarks: "이 메서드는 응용 프로그램의 매니페스트 기반 활성화를 위한 것입니다."
  syntax:
    content: protected static System.Runtime.Remoting.ObjectHandle CreateInstanceHelper (AppDomainSetup adSetup);
    parameters:
    - id: adSetup
      type: System.AppDomainSetup
      description: "<xref href=&quot;System.AppDomainSetup&quot;> </xref> 개체 <xref:System.AppDomainSetup.ActivationArguments*>속성 활성화할 응용 프로그램을 식별 합니다.</xref:System.AppDomainSetup.ActivationArguments*>"
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref> 응용 프로그램 실행의 반환 값에 대 한 래퍼입니다. 반환 값을 실제 개체에 액세스 하기 위해 래핑을 해제 해야 합니다."
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.AppDomainSetup.ActivationArguments*> property of <code>adSetup </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.</xref:System.AppDomainSetup.ActivationArguments*>"
  - type: System.Security.Policy.PolicyException
    commentId: T:System.Security.Policy.PolicyException
    description: "응용 프로그램 인스턴스는 현재 응용 프로그램 도메인에서 정책 설정을 실행 되도록이 응용 프로그램에 대 한 권한을 제공 하지 않으므로 실행 하지 못했습니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Policy.PolicyException
  parent: System.Security.Policy
  isExternal: false
  name: PolicyException
  nameWithType: PolicyException
  fullName: System.Security.Policy.PolicyException
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: ApplicationActivator()
  nameWithType: ApplicationActivator.ApplicationActivator()
  fullName: System.Runtime.Hosting.ApplicationActivator.ApplicationActivator()
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance(ActivationContext)
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.ActivationContext
  parent: System
  isExternal: false
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance(ActivationContext,String[])
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext,String[])
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstanceHelper(AppDomainSetup)
  nameWithType: ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
- uid: System.AppDomainSetup
  parent: System
  isExternal: false
  name: AppDomainSetup
  nameWithType: AppDomainSetup
  fullName: System.AppDomainSetup
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: ApplicationActivator
  nameWithType: ApplicationActivator.ApplicationActivator
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance
  nameWithType: ApplicationActivator.CreateInstance
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstanceHelper
  nameWithType: ApplicationActivator.CreateInstanceHelper
