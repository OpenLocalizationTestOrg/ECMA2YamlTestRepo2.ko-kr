### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Channels.IReplyChannel
  id: IReplyChannel
  children:
  - System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  - System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  - System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  - System.ServiceModel.Channels.IReplyChannel.LocalAddress
  - System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  - System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  - System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  - System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  langs:
  - csharp
  name: IReplyChannel
  nameWithType: IReplyChannel
  fullName: System.ServiceModel.Channels.IReplyChannel
  type: Interface
  summary: "메시징 끝점 간 요청-회신 통신의 수신측에 있도록 하기 위해 채널이 구현 해야 하는 인터페이스를 정의 합니다."
  remarks: "IReplyChannel 인터페이스 동기 및 비동기 variant가 포함 됩니다는 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>메서드가 반환 된 <xref:System.ServiceModel.Channels.RequestContext>수신된 된 요청에 응답을 생성 하는 데 사용 하는.</xref:System.ServiceModel.Channels.RequestContext> </xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>       계약 수신, 수신 시도 및 대기에 대 한-메시지 기능의 동기 및 비동기 variant가 포함 됩니다.       IReplyChannel 반드시 단일 발신자에 바인딩되어 있지 않습니다. 다른 채널과 채널 인터페이스는 발신자와 응답 채널 간의 상관 관계를 제공 하지만 기본 계약 이와 같은 제한이 없습니다.       끌어오기 모델은 메시지를 받을 IReplyChannel으로 사용 됩니다. 이 모델은 호출 구성 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>(또는 해당 변형 중 하나) 이며 다음 메시지가 도착할 때까지 대기 합니다.</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>"
  syntax:
    content: 'public interface IReplyChannel : System.ServiceModel.Channels.IChannel'
  implements:
  - System.ServiceModel.Channels.IChannel
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  id: BeginReceiveRequest(System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginReceiveRequest(AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "기본 제한 시간으로 사용 가능한 요청을 수신 하기 위해 비동기 작업을 시작 합니다."
  remarks: "BeginReceiveRequest 메서드를 호출 하기 위한 표준 패턴을 구현 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest>비동기적으로.</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> 기본 제한 시간은 1 분입니다. 연결을 구성 하는 데 사용 하는 바인딩 수신 시간 제한을 설정 되 면 해당 값이 사용 됩니다. 사용 하 여 <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>이 다른 값을 재정의 하는 호출 하 여 명시적 시간 제한을 지정 하려는 경우.</xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>       수신 된 요청 메시지가 사용 되는 바인딩에서 허용 하는 크기는 최대 메시지 큰 경우는 <xref:System.ServiceModel.QuotaExceededException>throw 됩니다.</xref:System.ServiceModel.QuotaExceededException> 설정 하는 최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>속성.</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 기본값은 65536 바이트입니다."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#1](~/add/codesnippet/csharp/b714b94c-13fc-4c03-a779-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceiveRequest (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>비동기에 대 한 알림을 받는 대리자 수신 요청 작업을 완료 합니다.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "요청 작업의 비동기 receive와 연결 된 상태 정보를 포함 하는 응용 프로그램이 지정한는 개체입니다."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>비동기 요청 수신을 참조 하는.</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "지정 된 시간 제한으로 사용할 수 있는 요청을 수신 하기 위해 비동기 작업을 시작 합니다."
  remarks: "BeginReceiveRequest 메서드를 호출 하기 위한 표준 패턴을 구현 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29>비동기적으로.</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> 이 메서드에 설정 시간 제한은 연결을 구성 하는 데 사용 되는 바인딩에 설정 된 수신 시간 제한을 재정의 합니다.       수신 된 요청 메시지가 사용 되는 바인딩에서 허용 하는 크기는 최대 메시지 큰 경우는 <xref:System.ServiceModel.QuotaExceededException>throw 됩니다.</xref:System.ServiceModel.QuotaExceededException> 설정 하는 최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>속성.</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 기본값은 65536 바이트입니다."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#2](~/add/codesnippet/csharp/6f48cd8d-c63c-4708-86c4-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>사용 가능한 요청 수신 대기 하는 시간 간격을 지정 하는.</xref:System.TimeSpan>"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>비동기에 대 한 알림을 받는 대리자 수신 요청 작업을 완료 합니다.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "요청 작업의 비동기 receive와 연결 된 상태 정보를 포함 하는 응용 프로그램이 지정한는 개체입니다."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>비동기 요청 수신을 참조 하는.</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "지정 된 시간 제한 및 연결 된 상태 개체가 있는 요청 메시지를 수신 하기 위한 비동기 작업을 시작 합니다."
  remarks: "대기 하지 않고 계속 하려면 응용 프로그램 처리 해야 하는 경우 비동기 BeginTryReceiveRequest 메서드를 사용 합니다. 동기 중 하나를 사용 하 여 <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29>메서드가 있는 경우 현재 스레드를 시간 제한 간격을 초과할 때까지 또는 요청 메시지에 응답 하는 동안 차단할 수 있습니다.</xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29>       이 메서드는 콜백을 통해 작업에 대 한 이벤트 처리기 id의 알림을 받습니다. 작업이 메시지를 채널에 사용할 수 있거나 시간 초과가 발생할 때까지 완료 되지 않습니다."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#5](~/add/codesnippet/csharp/cdb71277-0f0f-4e22-85af-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginTryReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>요청 수신 작업에서 반환 제한 시간 초과 되기 전에 완료 해야 기간을 지정 하는 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.TimeSpan>"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>비동기에 대 한 알림을 받는 대리자 수신 요청 작업을 완료 합니다.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "요청 작업의 비동기 receive와 연결 된 상태 정보를 포함 하는 응용 프로그램이 지정한는 개체입니다."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>는 비동기 요청 수신 작업을 참조 하는.</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "지정 된 시간 제한 및 연결 된 상태 개체가 있는 비동기 요청 작업을 시작 합니다."
  remarks: "동기 버전을 사용 하 여 <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29>메서드를 차단 하 여 요청 메시지를 큐에 도착할 때까지 대기 하는 동안 현재 스레드는 것이 좋습니다.</xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> 지정 된까지 스레드가 차단 `timeout`합니다.       이 메서드는 콜백을 통해 작업에 대 한 이벤트 처리기 id의 알림을 받습니다. 요청 메시지를 채널에 사용할 수 있거나 시간 초과가 발생할 때까지 작업이 완료 되지 않습니다."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#10](~/add/codesnippet/csharp/80573a5a-f5c0-4be0-a875-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginWaitForRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>사용 가능한 요청 수신 대기 하는 시간 간격을 지정 하는.</xref:System.TimeSpan>"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>비동기에 대 한 알림을 받는 대리자 수신 요청 작업을 완료 합니다.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "요청 작업의 비동기 receive와 연결 된 상태 정보를 포함 하는 응용 프로그램이 지정한는 개체입니다."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>요청 메시지가 도착할 때까지 대기 하는 비동기 작업을 참조 하는.</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  id: EndReceiveRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndReceiveRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndReceiveRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "사용 가능한 요청을 수신 하기 위한 비동기 작업을 완료 합니다."
  remarks: "수신 된 요청 메시지가 사용 되는 바인딩에서 허용 하는 크기는 최대 메시지 큰 경우는 <xref:System.ServiceModel.QuotaExceededException>throw 됩니다.</xref:System.ServiceModel.QuotaExceededException> 설정 하는 최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>속성.</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 기본값은 65536 바이트입니다."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#3](~/add/codesnippet/csharp/c3561a14-d2f1-46f1-99c2-_1.cs)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext EndReceiveRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>에 대 한 호출에서 반환 되는 <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive*>메서드.</xref:System.ServiceModel.Channels.IInputChannel.BeginReceive*> </xref:System.IAsyncResult>"
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>요청에 대 한 회신을 생성 하는 데 사용 합니다.</xref:System.ServiceModel.Channels.RequestContext>"
  overload: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  id: EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndTryReceiveRequest(IAsyncResult,RequestContext)
  nameWithType: IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "요청 메시지를 받고 지정된 된 비동기 작업을 완료 합니다."
  remarks: ''
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#6](~/add/codesnippet/csharp/2c432ec9-bfc6-46e4-8a1c-_1.cs)]"
  syntax:
    content: public bool EndTryReceiveRequest (IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>에 대 한 호출에서 반환 되는 &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt; 메서드.</xref:System.IAsyncResult>"
    - id: context
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>받은.</xref:System.ServiceModel.Channels.RequestContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 시간 간격이 경과 되기 전에; 요청 메시지를 수신 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  id: EndWaitForRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndWaitForRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndWaitForRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "비동기 대기에 대 한-요청 메시지를 지정 된 작업을 완료 합니다."
  remarks: ''
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#11](~/add/codesnippet/csharp/fc7d466d-2acc-417f-aa1b-_1.cs)]"
  syntax:
    content: public bool EndWaitForRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>식별 하는 &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt; 작업 및 최종 결과 검색 하려는.</xref:System.IAsyncResult>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 시간 간격이 경과 되기 전에; 요청이 수신 되는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress
  id: LocalAddress
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
  fullName: System.ServiceModel.Channels.IReplyChannel.LocalAddress
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "이 응답 채널이 메시지 수신 하는 주소를 가져옵니다."
  remarks: ''
  example:
  - "The following code illustrates how to implement this property:  \n  \n [!code-cs[S_UE_MessageInterceptor#0](~/add/codesnippet/csharp/p-system.servicemodel.ch_2_1.cs)]"
  syntax:
    content: public System.ServiceModel.EndpointAddress LocalAddress { get; }
    return:
      type: System.ServiceModel.EndpointAddress
      description: "<xref:System.ServiceModel.EndpointAddress>이 응답 채널이 메시지 수신 하는.</xref:System.ServiceModel.EndpointAddress>"
  overload: System.ServiceModel.Channels.IReplyChannel.LocalAddress*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  id: ReceiveRequest
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: ReceiveRequest()
  nameWithType: IReplyChannel.ReceiveRequest()
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "사용 가능한 경우 수신 된 요청의 컨텍스트를 반환 합니다. 컨텍스트를 사용할 수 없는 하나도 사용할 수 있을 때까지 기다립니다."
  remarks: "<xref:System.ServiceModel.Channels.RequestContext>요청 메시지와 메시지에 응답 하기 위한 메커니즘을 캡슐화 합니다.</xref:System.ServiceModel.Channels.RequestContext>       ReceiveRequest 여러 번 호출할 수 있습니다 또는 동시에 합니다. 수신 된 요청 별로 하나의 ReceiveRequest 호출만 완료 됩니다.       수신 된 요청 메시지가 사용 되는 바인딩에서 허용 하는 크기는 최대 메시지 큰 경우는 <xref:System.ServiceModel.QuotaExceededException>throw 됩니다.</xref:System.ServiceModel.QuotaExceededException> 설정 하는 최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>속성.</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 기본값은 65536 바이트입니다."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#7](~/add/codesnippet/csharp/m-system.servicemodel.ch_9_1.cs)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext ReceiveRequest ();
    parameters: []
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>응답을 생성 하는 데 사용 합니다.</xref:System.ServiceModel.Channels.RequestContext>"
  overload: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  id: ReceiveRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: ReceiveRequest(TimeSpan)
  nameWithType: IReplyChannel.ReceiveRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(TimeSpan)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "사용 가능한 경우 수신 된 요청의 컨텍스트를 반환 합니다. 컨텍스트를 사용할 수 없는 하나도 사용할 수 있을 때까지 기다립니다."
  remarks: "<xref:System.ServiceModel.Channels.RequestContext>요청 메시지와 메시지에 응답 하기 위한 메커니즘을 캡슐화 합니다.</xref:System.ServiceModel.Channels.RequestContext>       <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>여러 번 호출할 수 있습니다 또는 동시에 합니다.</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> 하나의 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>호출이 완료 당 요청을 받았습니다.</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>       수신 된 요청 메시지가 사용 되는 바인딩에서 허용 하는 크기는 최대 메시지 큰 경우는 <xref:System.ServiceModel.QuotaExceededException>throw 됩니다.</xref:System.ServiceModel.QuotaExceededException> 설정 하는 최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>속성.</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 기본값은 65536 바이트입니다."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#8](~/add/codesnippet/csharp/m-system.servicemodel.ch_3_1.cs)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext ReceiveRequest (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>수신 요청 작업이 제한 시간 초과 반환 되기 전에 완료 해야 기간을 지정 하는 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.TimeSpan>"
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>응답을 생성 하는 데 사용 합니다.</xref:System.ServiceModel.Channels.RequestContext>"
  overload: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  id: TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: TryReceiveRequest(TimeSpan,RequestContext)
  nameWithType: IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "지정 된 시간 간격이 경과 되기 전에 요청이 수신 되는지 여부를 나타내는 값을 반환 합니다."
  remarks: "현재 스레드를 큐에 도착 하는 요청 메시지를 기다리는 동안 차단 되었을 때 TryReceiveRequest를 사용 합니다. 지정 된까지 스레드가 차단 `timeout`합니다. 응용 프로그램 처리를 대기 하지 않고 계속 필요한 경우 사용 하 여 비동기 <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>메서드.</xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#4](~/add/codesnippet/csharp/78581c5e-1028-4e54-ba3b-_1.cs)]"
  syntax:
    content: public bool TryReceiveRequest (TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>수신 요청 작업이 제한 시간 초과 반환 되기 전에 완료 해야 기간을 지정 하는 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.TimeSpan>"
    - id: context
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>받은.</xref:System.ServiceModel.Channels.RequestContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 시간 간격이 경과 되기 전에; 요청 메시지를 수신 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  id: WaitForRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: WaitForRequest(TimeSpan)
  nameWithType: IReplyChannel.WaitForRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(TimeSpan)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "지정 된 시간 간격이 경과 되기 전에 요청 메시지를 수신 하는지 여부를 나타내는 값을 반환 합니다."
  remarks: "호출 WaitForRequest 수신 되거나 어떤 식으로든에서 처리 되 고 요청 메시지에서 발생 하지 않습니다.       <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>주로 사용자 위치는 트랜잭션을 사용 하 여 메시지를 수신 하려는 트랜잭션 처리 시나리오에 대 한 메서드가 있습니다.</xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 사용 하면 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>여기에 일반적으로 사용자 트랜잭션을 만들고 해야 다음 호출 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>트랜잭션이 시간이 초과 되기 전에, 가능 하지 않을 수 있는 메시지가 도착 하기를 기대 하 고.</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> </xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>       대신, 사용자 수 WaitForRequest를 호출 하 고 시간 제한 (무한도 가능)을 지정 합니다. 다음 메시지가 도착할 때 트랜잭션을 열고 호출 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>및 확실 한 후 트랜잭션이 만료 되기 전에 메시지를 가져올 수 있습니다.</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>       현재 스레드를 메시지가 큐에 도착 하기를 기다리는 동안 차단 되었을 때 WaitForRequest를 사용 합니다. 지정 된까지 스레드가 차단 `timeout`합니다. 응용 프로그램 처리를 대기 하지 않고 계속 필요한 경우 사용 하 여 비동기 <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>메서드.</xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#9](~/add/codesnippet/csharp/m-system.servicemodel.ch_6_1.cs)]"
  syntax:
    content: public bool WaitForRequest (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>요청 기간을 지정 하는 작업에서 반환 제한 시간 초과 되기 전에 완료 해야 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.TimeSpan>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 시간 간격이 경과 되기 전에; 요청이 수신 되는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ServiceModel.Channels.IReplyChannel.WaitForRequest*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest(AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndReceiveRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndReceiveRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(IAsyncResult)
- uid: System.ServiceModel.Channels.RequestContext
  parent: System.ServiceModel.Channels
  isExternal: true
  name: RequestContext
  nameWithType: RequestContext
  fullName: System.ServiceModel.Channels.RequestContext
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndTryReceiveRequest(IAsyncResult,RequestContext)
  nameWithType: IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndWaitForRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndWaitForRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(IAsyncResult)
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
  fullName: System.ServiceModel.Channels.IReplyChannel.LocalAddress
- uid: System.ServiceModel.EndpointAddress
  parent: System.ServiceModel
  isExternal: true
  name: EndpointAddress
  nameWithType: EndpointAddress
  fullName: System.ServiceModel.EndpointAddress
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest()
  nameWithType: IReplyChannel.ReceiveRequest()
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest()
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest(TimeSpan)
  nameWithType: IReplyChannel.ReceiveRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(TimeSpan)
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: TryReceiveRequest(TimeSpan,RequestContext)
  nameWithType: IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: WaitForRequest(TimeSpan)
  nameWithType: IReplyChannel.WaitForRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(TimeSpan)
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest
  nameWithType: IReplyChannel.BeginReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginTryReceiveRequest
  nameWithType: IReplyChannel.BeginTryReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginWaitForRequest
  nameWithType: IReplyChannel.BeginWaitForRequest
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndReceiveRequest
  nameWithType: IReplyChannel.EndReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndTryReceiveRequest
  nameWithType: IReplyChannel.EndTryReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndWaitForRequest
  nameWithType: IReplyChannel.EndWaitForRequest
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest
  nameWithType: IReplyChannel.ReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: TryReceiveRequest
  nameWithType: IReplyChannel.TryReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: WaitForRequest
  nameWithType: IReplyChannel.WaitForRequest
