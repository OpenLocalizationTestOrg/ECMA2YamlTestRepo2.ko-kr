### YamlMime:ManagedReference
items:
- uid: System.Windows.Data.Binding
  id: Binding
  children:
  - System.Windows.Data.Binding.#ctor
  - System.Windows.Data.Binding.#ctor(System.String)
  - System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.AsyncState
  - System.Windows.Data.Binding.BindsDirectlyToSource
  - System.Windows.Data.Binding.Converter
  - System.Windows.Data.Binding.ConverterCulture
  - System.Windows.Data.Binding.ConverterParameter
  - System.Windows.Data.Binding.DoNothing
  - System.Windows.Data.Binding.ElementName
  - System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  - System.Windows.Data.Binding.IndexerName
  - System.Windows.Data.Binding.IsAsync
  - System.Windows.Data.Binding.Mode
  - System.Windows.Data.Binding.NotifyOnSourceUpdated
  - System.Windows.Data.Binding.NotifyOnTargetUpdated
  - System.Windows.Data.Binding.NotifyOnValidationError
  - System.Windows.Data.Binding.Path
  - System.Windows.Data.Binding.RelativeSource
  - System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  - System.Windows.Data.Binding.ShouldSerializePath
  - System.Windows.Data.Binding.ShouldSerializeSource
  - System.Windows.Data.Binding.ShouldSerializeValidationRules
  - System.Windows.Data.Binding.Source
  - System.Windows.Data.Binding.SourceUpdatedEvent
  - System.Windows.Data.Binding.TargetUpdatedEvent
  - System.Windows.Data.Binding.UpdateSourceExceptionFilter
  - System.Windows.Data.Binding.UpdateSourceTrigger
  - System.Windows.Data.Binding.ValidatesOnDataErrors
  - System.Windows.Data.Binding.ValidatesOnExceptions
  - System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  - System.Windows.Data.Binding.ValidationRules
  - System.Windows.Data.Binding.XmlNamespaceManagerProperty
  - System.Windows.Data.Binding.XPath
  langs:
  - csharp
  name: Binding
  nameWithType: Binding
  fullName: System.Windows.Data.Binding
  type: Class
  summary: "바인딩 대상 개체의 속성을 연결 하는 바인딩의 정의에 고급 액세스 제공 (일반적으로 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 요소), 임의 데이터 원본 (예를 들어 데이터베이스는 [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)] 파일 또는 데이터를 포함 하는 모든 개체)."
  remarks: "[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]데이터 바인딩 응용 프로그램 데이터와 상호 작용 하는 간단 하 고 일관적인 방법을 제공 합니다. 데이터 바인딩을 사용 하면 두 개의 다른 개체의 속성 값을 동기화 할 수 있습니다.       바인딩을 설정 하려면 바인딩 클래스 또는 <xref:System.Windows.Data.BindingBase>.</xref:System.Windows.Data.BindingBase> 상속 하는 다른 클래스 중 하나를 사용합니다 바인딩 개체에 관계 없이 및 데이터 원본의 특성, 각 바인딩에 다음 그림에서 설명 하는 모델을 따릅니다.       ![기본 데이터 바인딩 다이어그램](~/add/media/databindingmostbasic.png &quot;기본 데이터 바인딩 다이어그램&quot;) 그림에서는 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 데이터 바인딩 개념입니다.      -각 바인딩에 일반적으로 이러한 네 가지 구성 요소는: 대상 속성 바인딩 대상 개체, 바인딩 소스 및 <xref:System.Windows.Data.Binding.Path%2A>사용할 바인딩 소스에서 값으로.</xref:System.Windows.Data.Binding.Path%2A> 예를 들어의 콘텐츠를 바인딩할 경우는 <xref:System.Windows.Controls.TextBox>대상 개체는 Employee 개체의 Name 속성에는 <xref:System.Windows.Controls.TextBox>, target 속성이 <xref:System.Windows.Controls.TextBox.Text%2A>속성을 사용 하는 값은 이름 및 원본 개체는 Employee 개체.</xref:System.Windows.Controls.TextBox.Text%2A> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.TextBox>      -Target 속성에는 종속성 속성 이어야 합니다. 즉, 필드를 바인딩할 수 없습니다. 속성을 대부분 <xref:System.Windows.UIElement>개체는 종속성 속성 및 읽기 전용 것을 제외한 대부분의 종속성 속성을 기본적으로 데이터 바인딩을 지원 합니다.</xref:System.Windows.UIElement> ( <xref:System.Windows.DependencyObject>형식만 종속성 속성을 정의할 수와 모든 <xref:System.Windows.UIElement>개체 <xref:System.Windows.DependencyObject>에서 파생)      -그림에서을 지정 하지 않지만 용도로 사용자 지정 바인딩 소스 개체는 제한 되지 않는지 [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] 개체입니다.</xref:System.Windows.DependencyObject> </xref:System.Windows.UIElement> </xref:System.Windows.DependencyObject> [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]데이터 바인딩 형식으로 데이터를 지원 [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] 개체 및 [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]합니다. 바인딩 소스 몇 가지 예를 제공 하는 것을 <xref:System.Windows.UIElement>, 목록 개체는 [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] 연결 된 개체에 [!INCLUDE[TLA#tla_adonet](~/add/includes/tlasharptla-adonet-md.md)] 데이터 또는 웹 서비스 또는 들어 있는 XmlNode 프로그램 [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)] 데이터.</xref:System.Windows.UIElement>       사용 하 여는 <xref:System.Windows.Data.Binding.Mode%2A>속성을 통해 데이터 흐름의 방향을 지정 합니다.</xref:System.Windows.Data.Binding.Mode%2A> 단방향 또는 양방향 바인딩이 소스 변경 내용을 검색 하려면 원본 <xref:System.ComponentModel.INotifyPropertyChanged>.</xref:System.ComponentModel.INotifyPropertyChanged> 같은 적절 한 속성 변경 알림 메커니즘을 구현 해야 합니다. 예를 들어 참조 [하는 방법: 속성 변경 알림을 구현](~/add/includes/ajax-current-ext-md.md)합니다. <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>속성 소스 업데이트의 타이밍을 지정 합니다.</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> 자세한 내용은의 &quot;기본 데이터 바인딩 개념&quot; 참조 [데이터 바인딩 개요](~/add/includes/ajax-current-ext-md.md)합니다.      <a name=&quot;xamlAttributeUsage_PriorityBinding&quot;></a># # XAML 특성 사용 ```   <object property=&quot;{Binding  declaration}&quot;/>   ``` <a name=&quot;xamlValues_PriorityBinding&quot;> </a> # # XAML 값 *선언* 쉼표 (,)로 구분 된&0; 개 이상의 특성 할당 클래스입니다.       자세한 내용은 참조 [바인딩 태그 확장](~/add/includes/ajax-current-ext-md.md) 또는 [바인딩 선언 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: 'public class Binding : System.Windows.Data.BindingBase'
  inheritance:
  - System.Windows.Markup.MarkupExtension
  - System.Windows.Data.BindingBase
  implements: []
  inheritedMembers:
  - System.Windows.Data.BindingBase.BindingGroupName
  - System.Windows.Data.BindingBase.Delay
  - System.Windows.Data.BindingBase.FallbackValue
  - System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)
  - System.Windows.Data.BindingBase.ShouldSerializeFallbackValue
  - System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue
  - System.Windows.Data.BindingBase.StringFormat
  - System.Windows.Data.BindingBase.TargetNullValue
  platform:
  - net462
- uid: System.Windows.Data.Binding.#ctor
  id: '#ctor'
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Binding()
  nameWithType: Binding.Binding()
  fullName: System.Windows.Data.Binding.Binding()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Data.Binding&quot;> </xref> 클래스입니다."
  syntax:
    content: public Binding ();
    parameters: []
  overload: System.Windows.Data.Binding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Binding(String)
  nameWithType: Binding.Binding(String)
  fullName: System.Windows.Data.Binding.Binding(String)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Data.Binding&quot;> </xref> 클래스 초기 경로 사용 합니다."
  syntax:
    content: public Binding (string path);
    parameters:
    - id: path
      type: System.String
      description: "초기 <xref:System.Windows.Data.Binding.Path*>바인딩에 대 한.</xref:System.Windows.Data.Binding.Path*>"
  overload: System.Windows.Data.Binding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "에 대 한 처리기는 <xref:System.Windows.Data.Binding.SourceUpdated>연결 된 이벤트입니다.</xref:System.Windows.Data.Binding.SourceUpdated>"
  remarks: "이 메서드는 지원에 연결 된 이벤트 사용 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  syntax:
    content: public static void AddSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref> 또는 <xref href=&quot;System.Windows.ContentElement&quot;> </xref> 하는 이벤트를 수신 대기 합니다."
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "추가할 처리기입니다."
  overload: System.Windows.Data.Binding.AddSourceUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "에 대 한 처리기는 <xref:System.Windows.Data.Binding.TargetUpdated>연결 된 이벤트입니다.</xref:System.Windows.Data.Binding.TargetUpdated>"
  remarks: "이 메서드는 지원에 연결 된 이벤트 사용 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  syntax:
    content: public static void AddTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref> 또는 <xref href=&quot;System.Windows.ContentElement&quot;> </xref> 하는 이벤트를 수신 대기 합니다."
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "추가할 처리기입니다."
  overload: System.Windows.Data.Binding.AddTargetUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AsyncState
  id: AsyncState
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AsyncState
  nameWithType: Binding.AsyncState
  fullName: System.Windows.Data.Binding.AsyncState
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "비동기 데이터 디스패처에 전달 되는 불투명 한 데이터를 가져오거나 설정 합니다."
  syntax:
    content: public object AsyncState { get; set; }
    return:
      type: System.Object
      description: "데이터는 비동기 데이터 발송자에 전달 합니다."
  overload: System.Windows.Data.Binding.AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.BindsDirectlyToSource
  id: BindsDirectlyToSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
  fullName: System.Windows.Data.Binding.BindsDirectlyToSource
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "평가할지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref:System.Windows.Data.Binding.Path*>데이터 항목을 기준으로 또는 <xref href=&quot;System.Windows.Data.DataSourceProvider&quot;> </xref> 개체입니다.</xref:System.Windows.Data.Binding.Path*>"
  remarks: "일반적인 동작 (이 속성이 `false`)에 대 한 특별 한 처리 포함 <xref:System.Windows.Data.DataSourceProvider>개체입니다.</xref:System.Windows.Data.DataSourceProvider> 바인딩 엔진 평가 하는 경우에 <xref:System.Windows.Data.Binding.Path%2A>에서 가져온 개체를 기준으로 <xref:System.Windows.Data.DataSourceProvider.Data%2A>속성.</xref:System.Windows.Data.DataSourceProvider.Data%2A> </xref:System.Windows.Data.Binding.Path%2A> 에 대 한 바인딩을 수신 대기 하는 또한는 <xref:System.Windows.Data.DataSourceProvider.DataChanged>이벤트 및 그에 따라 반응 합니다.</xref:System.Windows.Data.DataSourceProvider.DataChanged> 이 속성을 설정 `true` 의 속성에 바인딩 파일에 대 한 액세스를 제공 하 고이 동작 재정의 <xref:System.Windows.Data.DataSourceProvider>개체 자체입니다.</xref:System.Windows.Data.DataSourceProvider>"
  syntax:
    content: public bool BindsDirectlyToSource { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>데이터 항목 자체;에 상대적인 경로 계산 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.BindsDirectlyToSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Converter
  id: Converter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Converter
  nameWithType: Binding.Converter
  fullName: System.Windows.Data.Binding.Converter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "사용할 변환기를 가져오거나 설정 합니다."
  remarks: "바인딩 소스 값과 대상 값 사이의 형식 변환 수행 하려고 하는 기본 변환기를 암시적으로 사용 합니다. 기본 변환기를 반환 하는 경우 변환을 수행할 수 없는 `null`합니다.       구현 하는 클래스 사용자 지정 값 변환기는 바인딩으로 연결 하려는 경우 만든는 <xref:System.Windows.Data.IValueConverter>인터페이스에 대 한 구현을 제공 하 고는 <xref:System.Windows.Data.IValueConverter.Convert%2A>및 <xref:System.Windows.Data.IValueConverter.ConvertBack%2A>메서드.</xref:System.Windows.Data.IValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IValueConverter.Convert%2A> </xref:System.Windows.Data.IValueConverter> 값 변환기 형식 간에 데이터 변경, 문자 집합을 같은 문화권 정보 사이 변환 하거나 프레젠테이션의 다른 기능을 수정할 수 있습니다. &quot;데이터 변환&quot; 참조 일반적인 변환 시나리오의 예는 [데이터 바인딩 개요](~/add/includes/ajax-current-ext-md.md)합니다.      <a name=&quot;xamlAttributeUsage_Converter&quot;></a># # XAML 특성 사용 ```   <object Converter=&quot;myConverter&quot;/>   ``` <a name=&quot;xamlValues_Converter&quot;> </a> # # XAML 값 *myConverter* 구현 하는 클래스에 대 한 리소스 참조는 <xref:System.Windows.Data.IValueConverter>구현이 포함 된 인터페이스는 <xref:System.Windows.Data.IValueConverter.Convert%2A>및 <xref:System.Windows.Data.IValueConverter.ConvertBack%2A>메서드.</xref:System.Windows.Data.IValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IValueConverter.Convert%2A> </xref:System.Windows.Data.IValueConverter>       값 변환기를 참조 하려면 사용 된 [StaticResource 태그 확장](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.Windows.Data.IValueConverter Converter { get; set; }
    return:
      type: System.Windows.Data.IValueConverter
      description: "형식의 값 <xref href=&quot;System.Windows.Data.IValueConverter&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.Converter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ConverterCulture
  id: ConverterCulture
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
  fullName: System.Windows.Data.Binding.ConverterCulture
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "변환기를 평가할 문화권을 가져오거나 설정 합니다."
  remarks: "이 속성을 설정 하지 않으면 바인딩 엔진에서 사용 된 `Language` 바인딩 대상 개체의 속성입니다. [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] &quot;EN-US&quot;를 기본값으로 사용 하거나 속성을 명시적으로 설정 된 경우 페이지의 루트 요소 (또는 요소)에서 값이 상속 합니다.       데이터 변환에 대 한 내용은의 데이터 변환 섹션을 참조 하십시오.는 [데이터 바인딩 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.Globalization.CultureInfo ConverterCulture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.ConverterCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ConverterParameter
  id: ConverterParameter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
  fullName: System.Windows.Data.Binding.ConverterParameter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "<xref:System.Windows.Data.Binding.Converter*>.</xref:System.Windows.Data.Binding.Converter*> 에 전달할 매개 변수를 가져오거나 설정 합니다."
  remarks: "개체 변환 하는 방법을 지정 하려면 ConverterParameter 속성을 사용할 수 있습니다.  이 속성은 바인딩에서 사용 하는 변환기를 추가 정보를 전달 합니다.  에 전달 된 값에는 ConverterParameter을 지정 하면는 <xref:System.Windows.Data.IValueConverter.Convert%2A>및 <xref:System.Windows.Data.IValueConverter.ConvertBack%2A>와 메서드는 `parameter` 매개 변수.</xref:System.Windows.Data.IValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IValueConverter.Convert%2A>       예를 들어 참조 [하는 방법: 생성 된 항목의 목록 바인딩된에 따라 값](~/add/includes/ajax-current-ext-md.md)합니다. 그 예에서의 구현을 보여 줍니다.는 <xref:System.Windows.Data.IMultiValueConverter>않지만 여전히 사용에 적용 됩니다.</xref:System.Windows.Data.IMultiValueConverter>"
  syntax:
    content: public object ConverterParameter { get; set; }
    return:
      type: System.Object
      description: "<xref:System.Windows.Data.Binding.Converter*>.</xref:System.Windows.Data.Binding.Converter*> 에 전달할 매개 변수 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.ConverterParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.DoNothing
  id: DoNothing
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: DoNothing
  nameWithType: Binding.DoNothing
  fullName: System.Windows.Data.Binding.DoNothing
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "반환 된 값으로는 작업은 수행 하지 바인딩 엔진에 지시 하는 데 사용 합니다."
  remarks: "바인딩 소스 속성 또는 변환기는 바인딩 엔진 작업을 수행 하지 않도록 지시 하려면 DoNothing 반환할 수 있습니다. 바인딩 엔진을 다음으로 이동 하지 바인딩 대상 값을 전송 하지 않도록 지시 하기 위해 <xref:System.Windows.Data.Binding>에 <xref:System.Windows.Data.PriorityBinding>, 또는를 사용 하지 않는 `FallBackValue` 값 또는 기본값.</xref:System.Windows.Data.PriorityBinding> </xref:System.Windows.Data.Binding>"
  syntax:
    content: public static readonly object DoNothing;
    return:
      type: System.Object
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ElementName
  id: ElementName
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ElementName
  nameWithType: Binding.ElementName
  fullName: System.Windows.Data.Binding.ElementName
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "바인딩 소스 개체로 사용할 요소의 이름을 가져오거나 설정 합니다."
  remarks: "이 속성은 응용 프로그램에서 다른 요소의 속성에 바인딩할 때 유용 합니다. 예를 들어, 사용 하려는 경우는 <xref:System.Windows.Controls.Slider>응용 프로그램에서 다른 컨트롤의 높이를 조정할 바인딩할 경우 또는 <xref:System.Windows.Controls.ContentControl.Content%2A>사용자 컨트롤의는 <xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A>속성의 프로그램 <xref:System.Windows.Controls.ListBox>컨트롤.</xref:System.Windows.Controls.ListBox> </xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A> </xref:System.Windows.Controls.ContentControl.Content%2A> </xref:System.Windows.Controls.Slider>       기본적으로 바인딩은 상속으로 지정 된 데이터 컨텍스트는 `DataContext` 속성에 설정 된 경우. 그러나 ElementName 속성은의 원본을 명시적으로 설정할 수는 방법 중 하나는 <xref:System.Windows.Data.Binding>상속 된 데이터 컨텍스트를 재정의 하 고.</xref:System.Windows.Data.Binding> 자세한 내용은 참조 [하는 방법: 바인딩 소스를 지정](~/add/includes/ajax-current-ext-md.md)합니다.       <xref:System.Windows.Data.Binding.Source%2A>및 <xref:System.Windows.Data.Binding.RelativeSource%2A>의 속성은 <xref:System.Windows.Data.Binding>클래스도 설정할 수 있도록는 바인딩 소스를 명시적으로.</xref:System.Windows.Data.Binding> </xref:System.Windows.Data.Binding.RelativeSource%2A> </xref:System.Windows.Data.Binding.Source%2A> 그러나 ElementName, 세 개의 속성 중 하나만 <xref:System.Windows.Data.Binding.Source%2A>, 및 <xref:System.Windows.Data.Binding.RelativeSource%2A>집합 각각에 대 한 바인딩 해야, 또는 충돌이 발생할 수 있습니다.</xref:System.Windows.Data.Binding.RelativeSource%2A> </xref:System.Windows.Data.Binding.Source%2A> 바인딩 소스 충돌 하는 경우이 속성에서 예외를 throw 합니다."
  syntax:
    content: public string ElementName { get; set; }
    return:
      type: System.String
      description: "값은 <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> 속성 또는 [X:name 지시문](~/add/includes/ajax-current-ext-md.md) 원하는 요소입니다. 적절 한에 등록 되어 있는 경우에 코드의 요소를 참조할 수 <xref:System.Windows.NameScope>통해 <xref uid=&quot;langword_csharp_RegisterName&quot; name=&quot;RegisterName&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.NameScope> 자세한 내용은 참조 [WPF XAML 이름 범위](~/add/includes/ajax-current-ext-md.md)합니다.       기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.ElementName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  id: GetXmlNamespaceManager(System.Windows.DependencyObject)
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: GetXmlNamespaceManager(DependencyObject)
  nameWithType: Binding.GetXmlNamespaceManager(DependencyObject)
  fullName: System.Windows.Data.Binding.GetXmlNamespaceManager(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "반환 된 [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] 지정된 된 개체에 연결 된 바인딩에 사용 되는 네임 스페이스 관리자 개체입니다."
  remarks: "이 메서드는 연결된 속성의 사용에 대 한 지원의 <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>연결 된 속성입니다.</xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>       [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]네임 스페이스 관리자 바인딩에 데이터에서 제공 하는 경우에 적용 되는 [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)] 바인딩 소스 (<xref:System.Windows.Data.XmlDataProvider> 개체).</xref:System.Windows.Data.XmlDataProvider>       네임 스페이스 관리자는 원래 데이터 소스를 만들 또는 이후에 호출 하 여 구체적으로 적용 되지 않은 경우 <xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A>바인딩에 대 한 다음이 메서드는 반환 `null`.</xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A>       이 메서드는 항상 반환 `null` 바인딩에 데이터가 없으면 [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]합니다."
  syntax:
    content: public static System.Xml.XmlNamespaceManager GetXmlNamespaceManager (System.Windows.DependencyObject target);
    parameters:
    - id: target
      type: System.Windows.DependencyObject
      description: "네임 스페이스 정보를 얻을 수 있는 개체입니다."
    return:
      type: System.Xml.XmlNamespaceManager
      description: "보기에 사용 되는 반환 된 개체 [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)] 전달된 된 개체 요소의 바인딩과 관련 된 네임 스페이스입니다. 로이 개체를 캐스팅 해야 &lt;xref:System.Xml.XmlNamespaceManager?displayProperty=fullName&gt;합니다."
  overload: System.Windows.Data.Binding.GetXmlNamespaceManager*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> target </code> 매개 변수 여야 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Windows.Data.Binding.IndexerName
  id: IndexerName
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: IndexerName
  nameWithType: Binding.IndexerName
  fullName: System.Windows.Data.Binding.IndexerName
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "로 사용 된 <xref:System.ComponentModel.PropertyChangedEventArgs.PropertyName*>의 &lt;xref:System.ComponentModel.PropertyChangedEventArgs?displayProperty=fullName&gt; 인덱서 속성이 변경 되었음을 나타내도록.</xref:System.ComponentModel.PropertyChangedEventArgs.PropertyName*>"
  syntax:
    content: public const string IndexerName;
    return:
      type: System.String
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.IsAsync
  id: IsAsync
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: IsAsync
  nameWithType: Binding.IsAsync
  fullName: System.Windows.Data.Binding.IsAsync
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "표시 하는 값을 가져오거나 설정 합니다. 여부는 <xref href=&quot;System.Windows.Data.Binding&quot;> </xref> 가져오고 값을 비동기적으로 설정 해야 합니다."
  remarks: "IsAsync 속성을 사용 하는 경우는 `get` 바인딩 소스 속성의 접근자에는 시간이 오래 걸릴 수 있습니다. 한 가지 예는 있는 이미지 속성을는 `get` 는 웹에서 다운로드 하는 접근자입니다. IsAsync 설정 `true` 차단 되지 않습니다는 [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] 다운로드 하는 동안 합니다.       바인딩 값을 받을 기다리는 동안 보고 된 <xref:System.Windows.Data.BindingBase.FallbackValue%2A>기본값인 바인딩 대상 속성, 사용 가능한 경우.</xref:System.Windows.Data.BindingBase.FallbackValue%2A>       그러나 있으면 안 IsAsync 속성을 사용 해야 하는 많은 시나리오입니다. [!INCLUDE[TLA2#tla_net](~/add/includes/tla2sharptla-net-md.md)] 지침 속성 필드 집합 보다 더 느린 대량 주문 인을 정의 하는 것이 좋습니다. 클래스를 만들 때 고려 너무 느린 작업 외부의 처리는 `get` 접근자 및 결과 캐시 합니다. 자세한 내용은 참조 [NIB: 메서드와 속성 사이의 선택](http://msdn.microsoft.com/en-us/55825e8f-7e2e-448a-9505-7217cc91b1af)합니다."
  syntax:
    content: public bool IsAsync { get; set; }
    return:
      type: System.Boolean
      description: "기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.IsAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Mode
  id: Mode
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Mode
  nameWithType: Binding.Mode
  fullName: System.Windows.Data.Binding.Mode
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "바인딩에서 데이터 흐름의 방향을 나타내는 값을 가져오거나 설정 합니다."
  remarks: "<xref:System.Windows.Data.BindingMode> <xref:System.Windows.Data.BindingMode> <xref:System.ComponentModel.INotifyPropertyChanged>.</xref:System.ComponentModel.INotifyPropertyChanged> 를 구현 해야 바인딩, 기본 데이터</xref:System.Windows.Data.BindingMode> 및</xref:System.Windows.Data.BindingMode> 지원 하기 위해 자세한 내용은 참조 [하는 방법: 속성 변경 알림을 구현](~/add/includes/ajax-current-ext-md.md)합니다.       에 대 한 <xref:System.Windows.Data.BindingMode>또는 <xref:System.Windows.Data.BindingMode>바인딩을 설정 하 여 대상 소스로 업데이트를 제어할 수는 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>속성.</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> </xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.BindingMode> 자세한 내용은 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>.</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> 을 참조 하십시오.       서로 다른 바인딩 모드에 대 한 자세한 내용은 참조 하십시오. [데이터 바인딩 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.Windows.Data.BindingMode Mode { get; set; }
    return:
      type: System.Windows.Data.BindingMode
      description: "중 하나는 <xref href=&quot;System.Windows.Data.BindingMode&quot;> </xref> 값입니다. 기본값은 <xref href=&quot;System.Windows.Data.BindingMode&quot;> </xref>, 대상 종속성 속성의 기본 바인딩 모드 값을 반환 하 합니다. 그러나 각 종속성 속성에 대 한 기본값이 다릅니다. 일반적으로 텍스트 상자 및 확인란 처럼 사용자가 편집 가능한 컨트롤 속성의 기본값은 양방향 바인딩으로 설정 되지만 대부분의 다른 속성 기본값은 단방향 바인딩으로 설정 합니다.       종속성 속성이 단방향 또는 양방향 기본적으로 바인드 되는지를 결정 하는 프로그래밍 방법을 사용 하 여 속성의 속성 메타 데이터를 가져오려는 <> </> *> 다음의 부울 값을 확인 하 고는 <> </> *> 속성."
  overload: System.Windows.Data.Binding.Mode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated
  id: NotifyOnSourceUpdated
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
  fullName: System.Windows.Data.Binding.NotifyOnSourceUpdated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "발생시킬지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref:System.Windows.Data.Binding.SourceUpdated>값은 바인딩 대상에서에서 바인딩 소스로 전송 될 때 이벤트.</xref:System.Windows.Data.Binding.SourceUpdated>"
  syntax:
    content: public bool NotifyOnSourceUpdated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref:System.Windows.Data.Binding.SourceUpdated>바인딩 소스 값이 고, 그렇지 않으면 업데이트 된 경우 이벤트를 발생 하도록 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Data.Binding.SourceUpdated> 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.NotifyOnSourceUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated
  id: NotifyOnTargetUpdated
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
  fullName: System.Windows.Data.Binding.NotifyOnTargetUpdated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "발생시킬지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref:System.Windows.Data.Binding.TargetUpdated>값이 바인딩 소스에서 바인딩 대상으로 전송 될 때 이벤트.</xref:System.Windows.Data.Binding.TargetUpdated>"
  syntax:
    content: public bool NotifyOnTargetUpdated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref:System.Windows.Data.Binding.TargetUpdated>바인딩 대상 값이 고, 그렇지 않으면 업데이트 된 경우 이벤트를 발생 하도록 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Data.Binding.TargetUpdated> 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.NotifyOnTargetUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnValidationError
  id: NotifyOnValidationError
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
  fullName: System.Windows.Data.Binding.NotifyOnValidationError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "발생시킬지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref:System.Windows.Controls.Validation.Error>바인딩된 개체에서 연결 된 이벤트입니다.</xref:System.Windows.Controls.Validation.Error>"
  remarks: "바인딩에 다음과 같은 경우 <xref:System.Windows.Data.Binding.ValidationRules%2A>연결 된 바인딩 엔진 검사 때마다 각 규칙 source 속성을 대상 속성 값을 전송 합니다.</xref:System.Windows.Data.Binding.ValidationRules%2A> 규칙 값을 무효화 하는 경우 바인딩 엔진 만듭니다는 <xref:System.Windows.Controls.ValidationError>개체에 추가 합니다.는 <xref:System.Windows.Controls.Validation>.<xref:System.Windows.Controls.Validation.Errors%2A> 바인딩된 개체의 컬렉션입니다.</xref:System.Windows.Controls.Validation.Errors%2A> </xref:System.Windows.Controls.Validation> </xref:System.Windows.Controls.ValidationError> 경우는 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>속성이 비어는 <xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName>개체의 연결된 속성이로 설정 되어 `true`.</xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName> </xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> 경우 NotifyOnValidationError 속성의는 <xref:System.Windows.Data.Binding>로 설정 되어 `true`, 바인딩 엔진에서 발생 한 다음는 <xref:System.Windows.Controls.Validation.Error?displayProperty=fullName>연결 된 개체에는 이벤트입니다.</xref:System.Windows.Controls.Validation.Error?displayProperty=fullName> </xref:System.Windows.Data.Binding>       유효성 검사 프로세스를 대 한 자세한 내용은 데이터 유효성 검사 섹션을 참조 하십시오.는 [데이터 바인딩 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public bool NotifyOnValidationError { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref:System.Windows.Controls.Validation.Error>연결 된 이벤트는 고, 그렇지 않으면 원본 업데이트 중에 유효성 검사 오류가 있을 때 바인딩된 개체에서 발생 해야 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Controls.Validation.Error> 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.NotifyOnValidationError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Path
  id: Path
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Path
  nameWithType: Binding.Path
  fullName: System.Windows.Data.Binding.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "바인딩 소스 속성에 경로 가져오거나 설정 합니다."
  remarks: "일반적으로 각 바인딩에 이러한 네 가지 구성 요소: 바인딩 대상 개체, 대상 속성, 바인딩 소스 및 사용 하는 바인딩 원본의 값에 대 한 경로입니다. 이러한 데이터 바인딩 개념에 대 한 자세한 내용은 참조 [데이터 바인딩 개요](~/add/includes/ajax-current-ext-md.md)합니다.       에 바인딩 소스 값을 지정 하려면 경로 속성을 사용:-가장 간단한 경우 속성 값은 바인딩의 경우와 같은 사용할 소스 개체의 속성 이름 경로 `Path=PropertyName`합니다.      -속성의 하위 속성에 사용한 것과 비슷한 구문을 사용 하 여 지정할 수 있습니다 [!INCLUDE[TLA#tla_cshrp](~/add/includes/tlasharptla-cshrp-md.md)]합니다. 예를 들어, 절 `Path=ShoppingCart.Order` 하위 속성에 바인딩을 가져오거나 설정 `Order` 개체 또는 속성의 `ShoppingCart`합니다.      -연결된 된 속성에 바인딩할에 연결 된 속성 주위에 괄호를 배치 합니다. 예를 들어, 연결된 된 속성에 바인딩할 <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName>, 구문은 `Path=(DockPanel.Dock)`.</xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName>      -속성의 인덱서 속성 이름 뒤에 인덱서가 적용 되는 대괄호 안에 지정할 수 있습니다. 예를 들어, 절 `Path=ShoppingCart[0]` 속성의 내부 인덱싱 리터럴 문자열 &quot;0&quot;을 처리 하는 방법에 해당 하는 인덱스에 바인딩을 가져오거나 설정 합니다. 여러 인덱서가 지원 됩니다.      -인덱서과 하위 속성 함께 사용할 수 있습니다는 `Path` 절; 예를 들면 `Path=ShoppingCart.ShippingInfo[MailingAddress,Street].` -내부 인덱서 쉼표 (,)로 구분 된 여러 인덱서 매개 변수를 포함할 수 있습니다. 각 매개 변수의 형식은 괄호와 함께 지정할 수 있습니다. 예를 들어 할 수 있습니다 `Path=&quot;[(sys:Int32)42,(sys:Int32)24]&quot;`여기서 `sys` 매핑되는 `System` 네임 스페이스입니다.      -원본 컬렉션 뷰의 경우, 현재 항목 슬래시 (/)로 지정할 수 있습니다. 예를 들어 절 `Path=/` 보기에서 현재 항목에 바인딩을 가져오거나 설정 합니다. 원본 컬렉션 경우이 구문은 기본 컬렉션 뷰의 현재 항목을 지정 합니다.      -속성 이름과 슬래시를 조합 하 속성 컬렉션을 이동할 수 있습니다. 예를 들어 `Path=/Offices/ManagerName` 포함 하는 소스 컬렉션의 현재 항목을 지정 된 `Offices` 속성 컬렉션입니다. 현재 항목은 포함 하는 개체는 `ManagerName` 속성입니다.      -필요에 따라 현재 소스에 바인딩하는 마침표 (.) 경로 사용할 수 있습니다. 예를 들어 `Text=&quot;{Binding}&quot;` 같습니다 `Text=&quot;{Binding Path=.}&quot;`합니다.       경로 구문에 대 한 정보를 참조 하십시오. [바인딩 선언 개요](~/add/includes/ajax-current-ext-md.md) 또는 [PropertyPath XAML 구문](~/add/includes/ajax-current-ext-md.md)합니다.       에 대 한 [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] 바인딩 참조는 <xref:System.Windows.Data.Binding.XPath%2A>속성.</xref:System.Windows.Data.Binding.XPath%2A>       전체 개체에 바인딩할 경로 속성을 지정할 필요가 없습니다. 자세한 내용은의 &quot;를 지정 하는 경로 값에&quot; 참조 [데이터 바인딩 개요](../Topic/Data%20Binding%20Overview.md)합니다."
  example:
  - "The following example shows a style trigger that creates a <xref:System.Windows.Controls.ToolTip> that reports a validation error message. The value of the setter binds to the error content of the current <xref:System.Windows.Controls.TextBox> (the <xref:System.Windows.Controls.TextBox> using the style) using the <xref:System.Windows.Data.Binding.RelativeSource%2A> property. For more information on this example, see [How to: Implement Binding Validation](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-xml[BindValidation#5](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#5)]"
  syntax:
    content: public System.Windows.PropertyPath Path { get; set; }
    return:
      type: System.Windows.PropertyPath
      description: "바인딩 소스에 대 한 경로입니다. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RelativeSource
  id: RelativeSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RelativeSource
  nameWithType: Binding.RelativeSource
  fullName: System.Windows.Data.Binding.RelativeSource
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "바인딩 대상의 위치를 기준으로 해당 위치를 지정 하 여 바인딩 소스를 가져오거나 설정 합니다."
  remarks: "이 속성은 동일한 개체의 다른 속성에 속성 개체 중 하나를 바인딩할 하거나 스타일이 나 템플릿을에서 바인딩을 정의 하는 데 주로 사용 됩니다.       기본적으로 바인딩은 상속으로 지정 된 데이터 컨텍스트는 `DataContext` 속성에 설정 된 경우. 그러나 RelativeSource 속성은의 원본을 명시적으로 설정할 수는 방법 중 하나는 <xref:System.Windows.Data.Binding>상속 된 데이터 컨텍스트를 재정의 하 고.</xref:System.Windows.Data.Binding> 자세한 내용은 참조 [하는 방법: 바인딩 소스를 지정](~/add/includes/ajax-current-ext-md.md)합니다.       <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName>및 <xref:System.Windows.Data.Binding.Source%2A?displayProperty=fullName>속성도 설정할 수 있도록는 바인딩 소스를 명시적으로.</xref:System.Windows.Data.Binding.Source%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName> 그러나 세 개의 속성 중 하나만 <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, 및 각 바인딩에 대해 RelativeSource를 설정할지 또는 충돌이 발생할 수 있습니다.</xref:System.Windows.Data.Binding.Source%2A> </xref:System.Windows.Data.Binding.ElementName%2A> 바인딩 소스 충돌 하는 경우이 속성에서 예외를 throw 합니다.       에 대 한 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 정보 참조 [RelativeSource MarkupExtension](~/add/includes/ajax-current-ext-md.md)합니다.      <a name=&quot;xamlTextUsage_RelativeSource&quot;></a># # XAML 텍스트 사용"
  example:
  - "The following example shows a style trigger that creates a <xref:System.Windows.Controls.ToolTip> that reports a validation error message. The value of the setter binds to the error content of the current <xref:System.Windows.Controls.TextBox> (the <xref:System.Windows.Controls.TextBox> using the style) using the RelativeSource property. For more information on this example, see [How to: Implement Binding Validation](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-xml[BindValidation#5](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#5)]  \n  \n To see the full example, see [Binding Validation Sample](http://go.microsoft.com/fwlink/?LinkID=159972)."
  syntax:
    content: public System.Windows.Data.RelativeSource RelativeSource { get; set; }
    return:
      type: System.Windows.Data.RelativeSource
      description: "A <xref href=&quot;System.Windows.Data.RelativeSource&quot;> </xref> 사용할 바인딩 소스의 상대 위치를 지정 하는 개체입니다. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.RelativeSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "에 대 한 처리기를 제거는 <xref:System.Windows.Data.Binding.SourceUpdated>연결 된 이벤트입니다.</xref:System.Windows.Data.Binding.SourceUpdated>"
  remarks: "이 메서드는 지원에 연결 된 이벤트 사용 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  syntax:
    content: public static void RemoveSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref> 또는 <xref href=&quot;System.Windows.ContentElement&quot;> </xref> 하는 이벤트를 수신 대기 합니다."
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "제거할 처리기입니다."
  overload: System.Windows.Data.Binding.RemoveSourceUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "에 대 한 처리기를 제거는 <xref:System.Windows.Data.Binding.TargetUpdated>연결 된 이벤트입니다.</xref:System.Windows.Data.Binding.TargetUpdated>"
  remarks: "이 메서드는 지원에 연결 된 이벤트 사용 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  syntax:
    content: public static void RemoveTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref> 또는 <xref href=&quot;System.Windows.ContentElement&quot;> </xref> 하는 이벤트를 수신 대기 합니다."
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "제거할 처리기입니다."
  overload: System.Windows.Data.Binding.RemoveTargetUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  id: SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  nameWithType: Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  fullName: System.Windows.Data.Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "지정된 된 요소에 연결 된 바인딩에 사용 되는 네임 스페이스 관리자 개체를 설정 합니다."
  remarks: "이 메서드는 연결된 속성의 사용에 대 한 지원의 <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>연결 된 속성입니다.</xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>"
  syntax:
    content: public static void SetXmlNamespaceManager (System.Windows.DependencyObject target, System.Xml.XmlNamespaceManager value);
    parameters:
    - id: target
      type: System.Windows.DependencyObject
      description: "네임 스페이스 정보를 얻을 수 있는 개체입니다."
    - id: value
      type: System.Xml.XmlNamespaceManager
      description: "&lt;xref:System.Xml.XmlNamespaceManager?displayProperty=fullName&gt; 전달된 된 요소에서 네임 스페이스 평가에 사용 하도록 합니다."
  overload: System.Windows.Data.Binding.SetXmlNamespaceManager*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>target</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializePath
  id: ShouldSerializePath
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializePath()
  nameWithType: Binding.ShouldSerializePath()
  fullName: System.Windows.Data.Binding.ShouldSerializePath()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "표시 여부는 <xref:System.Windows.Data.Binding.Path*>속성을 유지 해야 합니다.</xref:System.Windows.Data.Binding.Path*>"
  remarks: "이 `ShouldSerialize` 메서드가 때문에 제공 되는 <xref:System.Windows.Data.Binding.Path%2A>속성 간단한 기본 값이 없는.</xref:System.Windows.Data.Binding.Path%2A> 이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다. <xref:System.Windows.Data.Binding>또는 <xref:System.Windows.Data.Binding>.</xref:System.Windows.Data.Binding> 통합 제어 자체 개발</xref:System.Windows.Data.Binding> 에 대 한 디자이너를 하거나 개발 하는 경우 일반적으로이 메서드를 호출"
  syntax:
    content: public bool ShouldSerializePath ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>속성 값이 기본값에서 변경 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.ShouldSerializePath*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializeSource
  id: ShouldSerializeSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializeSource()
  nameWithType: Binding.ShouldSerializeSource()
  fullName: System.Windows.Data.Binding.ShouldSerializeSource()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "표시 여부는 <xref:System.Windows.Data.Binding.Source*>속성을 유지 해야 합니다.</xref:System.Windows.Data.Binding.Source*>"
  remarks: "이 `ShouldSerialize` 메서드가 때문에 제공 되는 <xref:System.Windows.Data.Binding.Source%2A>속성 간단한 기본 값이 없는.</xref:System.Windows.Data.Binding.Source%2A> 이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다. <xref:System.Windows.Data.Binding>또는 <xref:System.Windows.Data.Binding>.</xref:System.Windows.Data.Binding> 통합 제어 자체 개발</xref:System.Windows.Data.Binding> 에 대 한 디자이너를 하거나 개발 하는 경우 일반적으로이 메서드를 호출"
  syntax:
    content: public bool ShouldSerializeSource ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>속성 값이 기본값에서 변경 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.ShouldSerializeSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules
  id: ShouldSerializeValidationRules
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializeValidationRules()
  nameWithType: Binding.ShouldSerializeValidationRules()
  fullName: System.Windows.Data.Binding.ShouldSerializeValidationRules()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "표시 여부는 <xref:System.Windows.Data.Binding.ValidationRules*>속성을 유지 해야 합니다.</xref:System.Windows.Data.Binding.ValidationRules*>"
  remarks: "이 `ShouldSerialize` 메서드가 때문에 제공 되는 <xref:System.Windows.Data.Binding.ValidationRules%2A>속성 간단한 기본 값이 없는.</xref:System.Windows.Data.Binding.ValidationRules%2A> 이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다. <xref:System.Windows.Data.Binding>또는 <xref:System.Windows.Data.Binding>.</xref:System.Windows.Data.Binding> 통합 제어 자체 개발</xref:System.Windows.Data.Binding> 에 대 한 디자이너를 하거나 개발 하는 경우 일반적으로이 메서드를 호출"
  syntax:
    content: public bool ShouldSerializeValidationRules ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>속성 값이 기본값에서 변경 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.ShouldSerializeValidationRules*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Source
  id: Source
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Source
  nameWithType: Binding.Source
  fullName: System.Windows.Data.Binding.Source
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "바인딩 소스로 사용할 개체를 가져오거나 설정 합니다."
  remarks: "기본적으로 바인딩은 상속으로 지정 된 데이터 컨텍스트는 `DataContext` 속성에 설정 된 경우. 그러나 Source 속성은의 원본을 명시적으로 설정할 수는 방법 중 하나는 <xref:System.Windows.Data.Binding>상속 된 데이터 컨텍스트를 재정의 하 고.</xref:System.Windows.Data.Binding> 대신 Source 속성을 사용할 수 있는 여러 속성을 동일한 데이터 컨텍스트를 상속 하는 범위를 설정의 기능을 필요 하지 않은 경우는 `DataContext` 속성입니다.       <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName>및 <xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=fullName>속성도 설정할 수 있도록는 바인딩 소스를 명시적으로.</xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName> 그러나 세 개의 속성 중 하나만 <xref:System.Windows.Data.Binding.ElementName%2A>, 원본 및 <xref:System.Windows.Data.Binding.RelativeSource%2A>집합 각각에 대 한 바인딩 해야, 또는 충돌이 발생할 수 있습니다.</xref:System.Windows.Data.Binding.RelativeSource%2A> </xref:System.Windows.Data.Binding.ElementName%2A> 바인딩 소스 충돌 하는 경우이 속성에서 예외를 throw 합니다.       이 속성을 지우려면 <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>.</xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName> 로 설정      <a name=&quot;xamlAttributeUsage_Source&quot;></a># # XAML 특성 사용 ```   <object Source=&quot;object&quot;/>   ``` <a name=&quot;xamlValues_Source&quot;> </a> # # XAML 값 *개체* 기존 개체입니다.       기존 개체를 참조 하려면 사용 된 [StaticResource 태그 확장](~/add/includes/ajax-current-ext-md.md)"
  example:
  - "In this example, you have a `Person` object with a string property named `PersonName`. The `Person` object is defined in the namespace called `SDKSample`.  \n  \n The following example instantiates the `Person` object with a `PersonName` property value of `Joe`. This is done in the `Resources` section and assigned an `x:Key`.  \n  \n [!code-xml[SimpleBinding#Instantiation](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#instantiation)]  \n[!code-xml[SimpleBinding#2](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#2)]  \n[!code-xml[SimpleBinding#EndWindow](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#endwindow)]  \n  \n To bind to the `PersonName` property you would do the following:  \n  \n [!code-xml[SimpleBinding#BDO1](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#bdo1)]  \n  \n As a result, the <xref:System.Windows.Controls.TextBlock> appears with the value \"Joe\".  \n  \n In the following example, the Source values of the <xref:System.Windows.Data.Binding> objects are set to the `static` property <xref:System.Windows.Application.Current%2A?displayProperty=fullName>:  \n  \n [!code-xml[DataBindingLab#ComboBoxMultiBinding](~/add/codesnippet/xaml/DataBindingLab/AddProductWindow.xaml#comboboxmultibinding)]  \n  \n For the full example, see [Data Binding Demo](http://go.microsoft.com/fwlink/?LinkID=163703)."
  syntax:
    content: public object Source { get; set; }
    return:
      type: System.Object
      description: "바인딩 소스로 사용할 개체입니다."
  overload: System.Windows.Data.Binding.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.SourceUpdatedEvent
  id: SourceUpdatedEvent
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: SourceUpdatedEvent
  nameWithType: Binding.SourceUpdatedEvent
  fullName: System.Windows.Data.Binding.SourceUpdatedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "식별 된 <xref:System.Windows.Data.Binding.SourceUpdated>연결 된 이벤트입니다.</xref:System.Windows.Data.Binding.SourceUpdated>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent SourceUpdatedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.TargetUpdatedEvent
  id: TargetUpdatedEvent
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: TargetUpdatedEvent
  nameWithType: Binding.TargetUpdatedEvent
  fullName: System.Windows.Data.Binding.TargetUpdatedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "식별 된 <xref:System.Windows.Data.Binding.TargetUpdated>연결 된 이벤트입니다.</xref:System.Windows.Data.Binding.TargetUpdated>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TargetUpdatedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  id: UpdateSourceExceptionFilter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
  fullName: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "바인딩 소스 값을 업데이트 하는 동안 바인딩 엔진에서 발생 하는 예외를 처리 하기 위한 사용자 지정 논리를 제공 하는 데 사용할 수 있는 처리기를 가져오거나 설정 합니다. 만 연결한 경우에 적용 됩니다는 <xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref> 바인딩을 사용 합니다."
  remarks: "<xref:System.Windows.Controls.ExceptionValidationRule>바인딩 소스 속성을 업데이트 하는 동안 발생 한 예외를 검사 하는 기본 제공 유효성 검사 규칙.</xref:System.Windows.Controls.ExceptionValidationRule> 연결한 경우는 <xref:System.Windows.Controls.ExceptionValidationRule>와 프로그램 <xref:System.Windows.Data.Binding>개체를 이러한 예외를 처리 하기 위한 사용자 지정 논리를 제공 하는 처리기를 설정 하려면이 속성을 사용할 수 있습니다.</xref:System.Windows.Data.Binding> </xref:System.Windows.Controls.ExceptionValidationRule> 에 UpdateSourceExceptionFilter 지정 되지 않은 경우는 <xref:System.Windows.Data.Binding>, 바인딩 엔진을 만듭니다는 <xref:System.Windows.Controls.ValidationError>예외와에 추가 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>바인딩된 요소의 컬렉션입니다.</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> </xref:System.Windows.Controls.ValidationError> </xref:System.Windows.Data.Binding>"
  example:
  - "The <xref:System.Windows.Controls.TextBox.Text%2A> property of the following <xref:System.Windows.Controls.TextBox> is data-bound to a source property `Age3` that is of type `int`. The <xref:System.Windows.Controls.ExceptionValidationRule> checks for exceptions that are thrown during the update of the source property (such as when the user enters a value that cannot be converted to an integer).  \n  \n [!code-xml[BindValidation#tbExceptionFilter](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#tbexceptionfilter)]  \n  \n You can provide custom logic to handle those exceptions. The following example shows how to use the UpdateSourceExceptionFilter property to set an <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n [!code-cs[BindValidation#filtercallback](~/add/codesnippet/csharp/BindingValidation/Window1.xaml.cs#filtercallback)]  \n  \n The following is an example implementation of an <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n [!code-cs[BindValidation#Handler](~/add/codesnippet/csharp/BindingValidation/Window1.xaml.cs#handler)]  \n  \n The <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback> can also return `null`, the exception itself, or a <xref:System.Windows.Controls.ValidationError>. For more information, see <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n For the complete sample, see [Binding Validation Sample](http://go.microsoft.com/fwlink/?LinkID=159972)."
  syntax:
    content: public System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceExceptionFilterCallback
      description: "바인딩 소스 값을 업데이트 하는 동안 바인딩 엔진에서 발생 하는 예외를 처리 하기 위한 사용자 지정 논리를 제공 하는 메서드."
  overload: System.Windows.Data.Binding.UpdateSourceExceptionFilter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.UpdateSourceTrigger
  id: UpdateSourceTrigger
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
  fullName: System.Windows.Data.Binding.UpdateSourceTrigger
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "바인딩 소스 업데이트의 타이밍을 결정 하는 값을 가져오거나 설정 합니다."
  remarks: "바인딩 <xref:System.Windows.Data.BindingMode>또는 <xref:System.Windows.Data.BindingMode>대상 속성에 대 한 변경 내용을 수신 대기 하 고 소스 전파.</xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.BindingMode> 이 소스 업데이트 라고 합니다. 일반적으로 이러한 업데이트는 대상 속성이 변경 될 때마다 발생 합니다. 다른 단순 컨트롤 및 확인란에 대 한 문제가 것만 일반적으로 텍스트 필드에 적합 합니다. 업데이트 하면 새 값을 커밋하기 전에 입력 오류를 수정 하 고 백스페이스를 일반적인 기회 사용자 거부 하 고 모든 키 입력에는 성능이 저하 될 수 있습니다. 따라서 UpdateSourceTrigger 기본값인은 <xref:System.Windows.Controls.TextBox.Text%2A>속성은 <xref:System.Windows.Data.UpdateSourceTrigger>아닌 <xref:System.Windows.Data.UpdateSourceTrigger>.</xref:System.Windows.Data.UpdateSourceTrigger> </xref:System.Windows.Data.UpdateSourceTrigger> </xref:System.Windows.Controls.TextBox.Text%2A>       UpdateSourceTrigger 값을 설정 하면 <xref:System.Windows.Data.UpdateSourceTrigger>를 호출 해야 합니다는 <xref:System.Windows.Data.BindingExpression.UpdateSource%2A>소스에 다시 메서드 또는 변경 내용을 전파 하지 것입니다.</xref:System.Windows.Data.BindingExpression.UpdateSource%2A> </xref:System.Windows.Data.UpdateSourceTrigger>"
  syntax:
    content: public System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceTrigger
      description: "중 하나는 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> 값입니다. 기본값은 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>, 기본값을 반환 하는 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> 대상 종속성 속성의 값입니다. 그러나 대부분의 종속성 속성에 대 한 기본 값은 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>, 동안는 <> </> *> 속성의 기본값은 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>합니다.       종속성 속성의 기본 UpdateSourceTrigger 값을 확인 하는 프로그래밍 방식으로 사용 하 여 속성의 속성 메타 데이터를 가져오려는 <> </> *>의 값을 확인 한 다음는 <xref:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*>속성.</xref:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*>"
  overload: System.Windows.Data.Binding.UpdateSourceTrigger*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors
  id: ValidatesOnDataErrors
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnDataErrors
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "포함할지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref href=&quot;System.Windows.Controls.DataErrorValidationRule&quot;> </xref>합니다."
  remarks: "사용 하는 대신 제공이 속성은 <xref:System.Windows.Controls.DataErrorValidationRule>요소 명시적으로.</xref:System.Windows.Controls.DataErrorValidationRule> <xref:System.Windows.Controls.DataErrorValidationRule>에 의해 발생 하는 오류를 검사 하는 기본 제공 유효성 검사 규칙의 <xref:System.ComponentModel.IDataErrorInfo>소스 개체의 구현.</xref:System.ComponentModel.IDataErrorInfo> </xref:System.Windows.Controls.DataErrorValidationRule> 오류가 발생 하는 경우 바인딩 엔진 만듭니다는 <xref:System.Windows.Controls.ValidationError>오류로 추가 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>바인딩된 요소의 컬렉션입니다.</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> </xref:System.Windows.Controls.ValidationError> 오류가 없는 다른 규칙 유효성 검사 문제를 발생 하지 않는 한이 유효성 검사 피드백을 지웁니다.       ValidatesOnDataErrors는.NET Framework 버전 3.5에서에서 도입 되었습니다.  자세한 내용은 참조 [.NET Framework 버전 및 종속성](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following examples uses <xref:System.ComponentModel.IDataErrorInfo> and ValidatesOnDataErrors to validate user input in a <xref:System.Windows.Controls.TextBox>. The first example creates a data type that implements <xref:System.ComponentModel.IDataErrorInfo> to report validation errors.  \n  \n [!code-cs[BindingValidationAttributesSnippets#IDataErrorInfoData](~/add/codesnippet/csharp/bindingvalidationattributessnippets/data.cs#idataerrorinfodata)]\n [!code-vb[BindingValidationAttributesSnippets#IDataErrorInfoData](~/add/codesnippet/visualbasic/bindingvalidationattributessnippets/window1.xaml.vb#idataerrorinfodata)]  \n  \n The following example binds the `Age` property to the <xref:System.Windows.Controls.TextBox> and sets ValidatesOnDataErrors to `true` on the <xref:System.Windows.Data.Binding>.  When the user enters an invalid value, a red border appears in the <xref:System.Windows.Controls.TextBox> and the <xref:System.Windows.Controls.ToolTip> reports the error message.  \n  \n [!code-xml[BindingValidationAttributesSnippets#IDataErrorInfoXaml](~/add/codesnippet/xaml/bindingvalidationattributessnippets/window1.xaml#idataerrorinfoxaml)]"
  syntax:
    content: public bool ValidatesOnDataErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>포함 하는 <xref href=&quot;System.Windows.Controls.DataErrorValidationRule&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.ValidatesOnDataErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnExceptions
  id: ValidatesOnExceptions
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
  fullName: System.Windows.Data.Binding.ValidatesOnExceptions
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "포함할지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref>합니다."
  remarks: "사용 하는 대신 제공이 속성은 <xref:System.Windows.Controls.ExceptionValidationRule>요소 명시적으로.</xref:System.Windows.Controls.ExceptionValidationRule> <xref:System.Windows.Controls.ExceptionValidationRule>source 속성을 업데이트 하는 동안 throw 되는 예외를 확인 하는 기본 제공 유효성 검사 규칙은.</xref:System.Windows.Controls.ExceptionValidationRule> 예외가 발생 하는 경우 바인딩 엔진 만듭니다는 <xref:System.Windows.Controls.ValidationError>예외와에 추가 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>바인딩된 요소의 컬렉션입니다.</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> </xref:System.Windows.Controls.ValidationError> 오류가 없는 다른 규칙 유효성 검사 문제를 발생 하지 않는 한이 유효성 검사 피드백을 지웁니다.       ValidatesOnExceptions는.NET Framework 버전 3.5에서에서 도입 되었습니다.  자세한 내용은 참조 [.NET Framework 버전 및 종속성](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following examples use ValidatesOnExceptions to validate user input in a <xref:System.Windows.Controls.TextBox>. The first example creates a data type that throws an exception when the `Age` property is set to an invalid property.  \n  \n [!code-cs[BindingValidationAttributesSnippets#ThrowExceptionData](~/add/codesnippet/csharp/bindingvalidationattributessnippets/data.cs#throwexceptiondata)]\n [!code-vb[BindingValidationAttributesSnippets#ThrowExceptionData](~/add/codesnippet/visualbasic/bindingvalidationattributessnippets/window1.xaml.vb#throwexceptiondata)]  \n  \n The following example binds the `Age` property to the <xref:System.Windows.Controls.TextBox> and sets ValidatesOnExceptions to `true` on the <xref:System.Windows.Data.Binding>. When the user enters an invalid value, a red border appears in the <xref:System.Windows.Controls.TextBox> and the <xref:System.Windows.Controls.ToolTip> reports the error message.  \n  \n [!code-xml[BindingValidationAttributesSnippets#ThrowExceptionXaml](~/add/codesnippet/xaml/bindingvalidationattributessnippets/window1.xaml#throwexceptionxaml)]"
  syntax:
    content: public bool ValidatesOnExceptions { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>포함 하는 <xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.ValidatesOnExceptions*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  id: ValidatesOnNotifyDataErrors
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "포함할지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref href=&quot;System.Windows.Controls.NotifyDataErrorValidationRule&quot;> </xref>합니다."
  remarks: "ValidatesOnNotifyDataErrors 다음과 같은 경우 `true`, 바인딩을 확인 하 고 <xref:System.ComponentModel.INotifyDataErrorInfo>.</xref:System.ComponentModel.INotifyDataErrorInfo> 를 구현 하는 데이터 원본에 의해 발생 하는 오류를 보고 합니다."
  syntax:
    content: public bool ValidatesOnNotifyDataErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>포함 하는 <xref href=&quot;System.Windows.Controls.NotifyDataErrorValidationRule&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidationRules
  id: ValidationRules
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidationRules
  nameWithType: Binding.ValidationRules
  fullName: System.Windows.Data.Binding.ValidationRules
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "사용자 입력의 유효성을 검사 하는 규칙의 컬렉션을 가져옵니다."
  remarks: "[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 데이터 바인딩 모델을 사용 하면 Validationrule와 연결할 수 있습니다 프로그램 <xref:System.Windows.Data.Binding>또는 <xref:System.Windows.Data.MultiBinding>개체입니다.</xref:System.Windows.Data.MultiBinding> </xref:System.Windows.Data.Binding> 파생 하 여 사용자 지정 규칙을 만들 수는 <xref:System.Windows.Controls.ValidationRule>클래스 및 구현는 <xref:System.Windows.Controls.ValidationRule.Validate%2A>메서드를 하거나 사용할 수 있습니다는 기본 제공 <xref:System.Windows.Controls.ExceptionValidationRule>, 원본 업데이트 중에 예외가 있는 경우 값을 무효화 하는.</xref:System.Windows.Controls.ExceptionValidationRule> </xref:System.Windows.Controls.ValidationRule.Validate%2A> </xref:System.Windows.Controls.ValidationRule>       바인딩 엔진에서는 각 검사 <xref:System.Windows.Controls.ValidationRule>될 때마다 바인딩 소스 속성에는 입력된 값 (바인딩 대상 속성 값)을 전송 되는 바인딩과 연결 된.</xref:System.Windows.Controls.ValidationRule> 유효성 검사 프로세스를 대 한 자세한 내용은 데이터 유효성 검사 섹션을 참조 하십시오.는 [데이터 바인딩 개요](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] >에서이 속성을 설정할 수 [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] 표시 된 컬렉션 구문을 사용 하거나 컬렉션 개체에 액세스 하 고와 같은 여러 메서드를 사용 하 여 `Add`합니다. 컬렉션 개체에 액세스 하려면 속성은 읽기 전용 컬렉션 자체는 읽기 / 쓰기 이지만 합니다.      <a name=&quot;xamlPropertyElementUsage_ValidationRules&quot;></a># # XAML 속성 요소 사용 ```   <object>     <object.ValidationRules>       oneOrMoreValidationRules     </object.ValidationRules>   </object>      ``` <a name=&quot;xamlValues_ValidationRules&quot;> </a> # # XAML 값 *oneOrMoreValidationRules* 하나 이상의 <xref:System.Windows.Controls.ValidationRule>개체입니다.</xref:System.Windows.Controls.ValidationRule>       <xref:System.Windows.Controls.ExceptionValidationRule>클래스 또는 <xref:System.Windows.Controls.ValidationRule>클래스</xref:System.Windows.Controls.ValidationRule> 서브클래싱 하 여 사용자 지정 규칙을 만들</xref:System.Windows.Controls.ExceptionValidationRule> 를 사용할 수 있습니다."
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule> ValidationRules { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Windows.Controls.ValidationRule}
      description: "컬렉션 <xref href=&quot;System.Windows.Controls.ValidationRule&quot;> </xref> 개체입니다."
  overload: System.Windows.Data.Binding.ValidationRules*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  id: XmlNamespaceManagerProperty
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: XmlNamespaceManagerProperty
  nameWithType: Binding.XmlNamespaceManagerProperty
  fullName: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "식별 된 <xref:System.Windows.Data.Binding.XmlNamespaceManager*>연결 된 속성입니다.</xref:System.Windows.Data.Binding.XmlNamespaceManager*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty XmlNamespaceManagerProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.XPath
  id: XPath
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: XPath
  nameWithType: Binding.XPath
  fullName: System.Windows.Data.Binding.XPath
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "가져오거나는 <xref uid=&quot;langword_csharp_XPath&quot; name=&quot;XPath&quot; href=&quot;&quot;> </xref> 에 값을 반환 하는 쿼리는 [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] 사용할 바인딩 소스입니다."
  remarks: "바인딩 소스 [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] 대신 데이터는 [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] 개체 대신 XPath 속성은 사용 된 <xref:System.Windows.Data.Binding.Path%2A>의 경로를 사용 하 여 바인딩 소스에 값을 나타내는 속성을.</xref:System.Windows.Data.Binding.Path%2A>       XPath 속성을 설정 하 여 만드는 `XPath` 노드 또는 노드의 컬렉션을 선택 하는 쿼리 (<xref:System.Xml.XmlElement?displayProperty=fullName> 및 <xref:System.Xml.XmlAttribute?displayProperty=fullName>에서 파생 되 <xref:System.Xml.XmlNode?displayProperty=fullName>).</xref:System.Xml.XmlNode?displayProperty=fullName> </xref:System.Xml.XmlAttribute?displayProperty=fullName> </xref:System.Xml.XmlElement?displayProperty=fullName> <xref:System.Xml.XmlNode?displayProperty=fullName>이 [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] 개체를 사용 하 여 해당 속성에 바인딩할 수 있습니다는 <xref:System.Windows.Data.Binding.Path%2A>속성.</xref:System.Windows.Data.Binding.Path%2A></xref:System.Xml.XmlNode?displayProperty=fullName>       <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>메서드 핸들은 `XPath` XPath 속성에서 식을.</xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName> `XPath`함수는 지원 되지 않습니다. 에 대 한 `XPath` 식 정보 참조는 <xref:System.Xml.XmlNode.SelectNodes%2A>설명서 및 &quot;예&quot; 섹션에 제공 된 몇 가지 예입니다.</xref:System.Xml.XmlNode.SelectNodes%2A>       LINQ to XML 개체 <xref:System.Xml.Linq.XDocument>및 <xref:System.Xml.Linq.XElement>사용 하지 않는 `XPath`.</xref:System.Xml.Linq.XElement> </xref:System.Xml.Linq.XDocument> 자세한 내용은 참조 [하는 방법: XML 쿼리 결과 대 한 XDocument, XElement, 또는 LINQ를 바인딩할](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public string XPath { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_XPath&quot; name=&quot;XPath&quot; href=&quot;&quot;> </xref> 쿼리 합니다. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.Binding.XPath*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Data.BindingBase
  isExternal: false
  name: System.Windows.Data.BindingBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Data.Binding.#ctor
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding()
  nameWithType: Binding.Binding()
  fullName: System.Windows.Data.Binding.Binding()
- uid: System.Windows.Data.Binding.#ctor(System.String)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding(String)
  nameWithType: Binding.Binding(String)
  fullName: System.Windows.Data.Binding.Binding(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<DataTransferEventArgs>
  nameWithType: EventHandler<DataTransferEventArgs>
  fullName: System.EventHandler<System.Windows.Data.DataTransferEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Data.DataTransferEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Data.DataTransferEventArgs
    name: DataTransferEventArgs
    nameWithType: DataTransferEventArgs
    fullName: DataTransferEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.AsyncState
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AsyncState
  nameWithType: Binding.AsyncState
  fullName: System.Windows.Data.Binding.AsyncState
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Data.Binding.BindsDirectlyToSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
  fullName: System.Windows.Data.Binding.BindsDirectlyToSource
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Data.Binding.Converter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Converter
  nameWithType: Binding.Converter
  fullName: System.Windows.Data.Binding.Converter
- uid: System.Windows.Data.IValueConverter
  parent: System.Windows.Data
  isExternal: false
  name: IValueConverter
  nameWithType: IValueConverter
  fullName: System.Windows.Data.IValueConverter
- uid: System.Windows.Data.Binding.ConverterCulture
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
  fullName: System.Windows.Data.Binding.ConverterCulture
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Data.Binding.ConverterParameter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
  fullName: System.Windows.Data.Binding.ConverterParameter
- uid: System.Windows.Data.Binding.DoNothing
  parent: System.Windows.Data.Binding
  isExternal: false
  name: DoNothing
  nameWithType: Binding.DoNothing
  fullName: System.Windows.Data.Binding.DoNothing
- uid: System.Windows.Data.Binding.ElementName
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ElementName
  nameWithType: Binding.ElementName
  fullName: System.Windows.Data.Binding.ElementName
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: GetXmlNamespaceManager(DependencyObject)
  nameWithType: Binding.GetXmlNamespaceManager(DependencyObject)
  fullName: System.Windows.Data.Binding.GetXmlNamespaceManager(DependencyObject)
- uid: System.Xml.XmlNamespaceManager
  parent: System.Xml
  isExternal: true
  name: XmlNamespaceManager
  nameWithType: XmlNamespaceManager
  fullName: System.Xml.XmlNamespaceManager
- uid: System.Windows.Data.Binding.IndexerName
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IndexerName
  nameWithType: Binding.IndexerName
  fullName: System.Windows.Data.Binding.IndexerName
- uid: System.Windows.Data.Binding.IsAsync
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IsAsync
  nameWithType: Binding.IsAsync
  fullName: System.Windows.Data.Binding.IsAsync
- uid: System.Windows.Data.Binding.Mode
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Mode
  nameWithType: Binding.Mode
  fullName: System.Windows.Data.Binding.Mode
- uid: System.Windows.Data.BindingMode
  parent: System.Windows.Data
  isExternal: false
  name: BindingMode
  nameWithType: BindingMode
  fullName: System.Windows.Data.BindingMode
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
  fullName: System.Windows.Data.Binding.NotifyOnSourceUpdated
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
  fullName: System.Windows.Data.Binding.NotifyOnTargetUpdated
- uid: System.Windows.Data.Binding.NotifyOnValidationError
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
  fullName: System.Windows.Data.Binding.NotifyOnValidationError
- uid: System.Windows.Data.Binding.Path
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Path
  nameWithType: Binding.Path
  fullName: System.Windows.Data.Binding.Path
- uid: System.Windows.PropertyPath
  parent: System.Windows
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
- uid: System.Windows.Data.Binding.RelativeSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RelativeSource
  nameWithType: Binding.RelativeSource
  fullName: System.Windows.Data.Binding.RelativeSource
- uid: System.Windows.Data.RelativeSource
  parent: System.Windows.Data
  isExternal: false
  name: RelativeSource
  nameWithType: RelativeSource
  fullName: System.Windows.Data.RelativeSource
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  nameWithType: Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  fullName: System.Windows.Data.Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
- uid: System.Windows.Data.Binding.ShouldSerializePath
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializePath()
  nameWithType: Binding.ShouldSerializePath()
  fullName: System.Windows.Data.Binding.ShouldSerializePath()
- uid: System.Windows.Data.Binding.ShouldSerializeSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeSource()
  nameWithType: Binding.ShouldSerializeSource()
  fullName: System.Windows.Data.Binding.ShouldSerializeSource()
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeValidationRules()
  nameWithType: Binding.ShouldSerializeValidationRules()
  fullName: System.Windows.Data.Binding.ShouldSerializeValidationRules()
- uid: System.Windows.Data.Binding.Source
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Source
  nameWithType: Binding.Source
  fullName: System.Windows.Data.Binding.Source
- uid: System.Windows.Data.Binding.SourceUpdatedEvent
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SourceUpdatedEvent
  nameWithType: Binding.SourceUpdatedEvent
  fullName: System.Windows.Data.Binding.SourceUpdatedEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Data.Binding.TargetUpdatedEvent
  parent: System.Windows.Data.Binding
  isExternal: false
  name: TargetUpdatedEvent
  nameWithType: Binding.TargetUpdatedEvent
  fullName: System.Windows.Data.Binding.TargetUpdatedEvent
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
  fullName: System.Windows.Data.Binding.UpdateSourceExceptionFilter
- uid: System.Windows.Data.UpdateSourceExceptionFilterCallback
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceExceptionFilterCallback
  nameWithType: UpdateSourceExceptionFilterCallback
  fullName: System.Windows.Data.UpdateSourceExceptionFilterCallback
- uid: System.Windows.Data.Binding.UpdateSourceTrigger
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
  fullName: System.Windows.Data.Binding.UpdateSourceTrigger
- uid: System.Windows.Data.UpdateSourceTrigger
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: UpdateSourceTrigger
  fullName: System.Windows.Data.UpdateSourceTrigger
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnDataErrors
- uid: System.Windows.Data.Binding.ValidatesOnExceptions
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
  fullName: System.Windows.Data.Binding.ValidatesOnExceptions
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
- uid: System.Windows.Data.Binding.ValidationRules
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidationRules
  nameWithType: Binding.ValidationRules
  fullName: System.Windows.Data.Binding.ValidationRules
- uid: System.Collections.ObjectModel.Collection{System.Windows.Controls.ValidationRule}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ValidationRule>
  nameWithType: Collection<ValidationRule>
  fullName: System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Windows.Controls.ValidationRule>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Controls.ValidationRule
    name: ValidationRule
    nameWithType: ValidationRule
    fullName: ValidationRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XmlNamespaceManagerProperty
  nameWithType: Binding.XmlNamespaceManagerProperty
  fullName: System.Windows.Data.Binding.XmlNamespaceManagerProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Data.Binding.XPath
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XPath
  nameWithType: Binding.XPath
  fullName: System.Windows.Data.Binding.XPath
- uid: System.Windows.Data.Binding.#ctor*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding
  nameWithType: Binding.Binding
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddSourceUpdatedHandler
  nameWithType: Binding.AddSourceUpdatedHandler
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddTargetUpdatedHandler
  nameWithType: Binding.AddTargetUpdatedHandler
- uid: System.Windows.Data.Binding.AsyncState*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AsyncState
  nameWithType: Binding.AsyncState
- uid: System.Windows.Data.Binding.BindsDirectlyToSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
- uid: System.Windows.Data.Binding.Converter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Converter
  nameWithType: Binding.Converter
- uid: System.Windows.Data.Binding.ConverterCulture*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
- uid: System.Windows.Data.Binding.ConverterParameter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
- uid: System.Windows.Data.Binding.ElementName*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ElementName
  nameWithType: Binding.ElementName
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: GetXmlNamespaceManager
  nameWithType: Binding.GetXmlNamespaceManager
- uid: System.Windows.Data.Binding.IsAsync*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IsAsync
  nameWithType: Binding.IsAsync
- uid: System.Windows.Data.Binding.Mode*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Mode
  nameWithType: Binding.Mode
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
- uid: System.Windows.Data.Binding.NotifyOnValidationError*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
- uid: System.Windows.Data.Binding.Path*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Path
  nameWithType: Binding.Path
- uid: System.Windows.Data.Binding.RelativeSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RelativeSource
  nameWithType: Binding.RelativeSource
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveSourceUpdatedHandler
  nameWithType: Binding.RemoveSourceUpdatedHandler
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveTargetUpdatedHandler
  nameWithType: Binding.RemoveTargetUpdatedHandler
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SetXmlNamespaceManager
  nameWithType: Binding.SetXmlNamespaceManager
- uid: System.Windows.Data.Binding.ShouldSerializePath*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializePath
  nameWithType: Binding.ShouldSerializePath
- uid: System.Windows.Data.Binding.ShouldSerializeSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeSource
  nameWithType: Binding.ShouldSerializeSource
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeValidationRules
  nameWithType: Binding.ShouldSerializeValidationRules
- uid: System.Windows.Data.Binding.Source*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Source
  nameWithType: Binding.Source
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
- uid: System.Windows.Data.Binding.UpdateSourceTrigger*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
- uid: System.Windows.Data.Binding.ValidatesOnExceptions*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
- uid: System.Windows.Data.Binding.ValidationRules*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidationRules
  nameWithType: Binding.ValidationRules
- uid: System.Windows.Data.Binding.XPath*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XPath
  nameWithType: Binding.XPath
