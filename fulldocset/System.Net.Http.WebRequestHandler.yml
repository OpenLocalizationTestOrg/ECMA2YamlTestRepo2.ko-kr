### YamlMime:ManagedReference
items:
- uid: System.Net.Http.WebRequestHandler
  id: WebRequestHandler
  children:
  - System.Net.Http.WebRequestHandler.#ctor
  - System.Net.Http.WebRequestHandler.AllowPipelining
  - System.Net.Http.WebRequestHandler.AuthenticationLevel
  - System.Net.Http.WebRequestHandler.CachePolicy
  - System.Net.Http.WebRequestHandler.ClientCertificates
  - System.Net.Http.WebRequestHandler.ContinueTimeout
  - System.Net.Http.WebRequestHandler.ImpersonationLevel
  - System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  - System.Net.Http.WebRequestHandler.ReadWriteTimeout
  - System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  - System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  langs:
  - csharp
  name: WebRequestHandler
  nameWithType: WebRequestHandler
  fullName: System.Net.Http.WebRequestHandler
  type: Class
  summary: "Windows 스토어 앱 이나 다른 환경에 사용할 수 없는 데스크톱 관련 기능을 제공합니다."
  remarks: "이 클래스를 사용 하 여 전송 처리기 구현 <xref:System.Net.HttpWebRequest>인스턴스를 서버에 HTTP 요청을 보냅니다.</xref:System.Net.HttpWebRequest>"
  syntax:
    content: 'public class WebRequestHandler : System.Net.Http.HttpClientHandler'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  - System.Net.Http.HttpClientHandler
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpClientHandler.AllowAutoRedirect
  - System.Net.Http.HttpClientHandler.AutomaticDecompression
  - System.Net.Http.HttpClientHandler.ClientCertificateOptions
  - System.Net.Http.HttpClientHandler.CookieContainer
  - System.Net.Http.HttpClientHandler.Credentials
  - System.Net.Http.HttpClientHandler.Dispose(System.Boolean)
  - System.Net.Http.HttpClientHandler.MaxAutomaticRedirections
  - System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize
  - System.Net.Http.HttpClientHandler.PreAuthenticate
  - System.Net.Http.HttpClientHandler.Proxy
  - System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression
  - System.Net.Http.HttpClientHandler.SupportsProxy
  - System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration
  - System.Net.Http.HttpClientHandler.UseCookies
  - System.Net.Http.HttpClientHandler.UseDefaultCredentials
  - System.Net.Http.HttpClientHandler.UseProxy
  - System.Net.Http.HttpMessageHandler.Dispose
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: WebRequestHandler()
  nameWithType: WebRequestHandler.WebRequestHandler()
  fullName: System.Net.Http.WebRequestHandler.WebRequestHandler()
  type: Constructor
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Net.Http.WebRequestHandler&quot;> </xref> 클래스입니다."
  syntax:
    content: public WebRequestHandler ();
    parameters: []
  overload: System.Net.Http.WebRequestHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.AllowPipelining
  id: AllowPipelining
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
  fullName: System.Net.Http.WebRequestHandler.AllowPipelining
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "요청을 인터넷 리소스에 파이프라인 할 것인지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "응용 프로그램 파이프라인된 연결에 대 한 기본 설정을 나타내기 위해 AllowPipelining 속성을 사용 합니다. AllowPipelining 다음과 같은 경우 `true`, 응용 프로그램을 지 원하는 서버에 연결을 파이프라인된을 만듭니다."
  syntax:
    content: public bool AllowPipelining { get; set; }
    return:
      type: System.Boolean
      description: "<xref:System.Boolean>입니다.</xref:System.Boolean> 반환       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>요청 파이프라인 되는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.Http.WebRequestHandler.AllowPipelining*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel
  id: AuthenticationLevel
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
  fullName: System.Net.Http.WebRequestHandler.AuthenticationLevel
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "인증 및이 요청에 사용 되는 가장 수준을 나타내는 값을 가져오거나 설정 합니다."
  remarks: "상호 인증을 클라이언트와 서버 모두 해당 id를 설정 하는 자격 증명을 제공 합니다. <xref:System.Net.Security.AuthenticationLevel>및 <xref:System.Net.Security.AuthenticationLevel>값은 Kerberos 인증과 관련이 있습니다.</xref:System.Net.Security.AuthenticationLevel> </xref:System.Net.Security.AuthenticationLevel> Kerberos 인증을 직접 지원 될 수 있습니다 또는 보안 협상 프로토콜은 실제 보안 프로토콜을 선택 하는 데 사용 되는 경우에 사용할 수 있습니다. 인증 프로토콜에 대 한 자세한 내용은 참조 [인터넷 인증](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.Net.Security.AuthenticationLevel AuthenticationLevel { get; set; }
    return:
      type: System.Net.Security.AuthenticationLevel
      description: "<xref:System.Net.Security.AuthenticationLevel>입니다.</xref:System.Net.Security.AuthenticationLevel> 반환       비트 조합은 <xref:System.Net.Security.AuthenticationLevel>값.</xref:System.Net.Security.AuthenticationLevel>  기본값은 <xref:System.Net.Security.AuthenticationLevel>.</xref:System.Net.Security.AuthenticationLevel>"
  overload: System.Net.Http.WebRequestHandler.AuthenticationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.CachePolicy
  id: CachePolicy
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
  fullName: System.Net.Http.WebRequestHandler.CachePolicy
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "이 요청에 대 한 캐시 정책을 가져오거나 설정 합니다."
  remarks: "현재 캐시 정책 및 캐시에 요청된 된 리소스의 현재 상태는 응답을 캐시에서 검색할 수 있는지 여부를 결정 합니다. 일반적으로 캐시 된 응답이 사용 하 여 응용 프로그램 성능을 향상 시킵니다. 하지만 캐시에 응답 서버에 대 한 응답을 일치 하지 않습니다 위험이 있습니다.       기본 캐시 정책을 설정 하 여 또는 Machine.config 구성 파일에 지정할 수 있습니다는 <xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A>속성.</xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A>       리소스에 대 한 응답 스트림을 검색 하는 스트림의 끝에 대 한 읽기 경우에 리소스의 복사본을 캐시에 추가 됩니다. 이므로 동일한 리소스에 대 한 다른 요청에는이 요청에 대 한 캐시 정책 수준에 따라 캐시 된 복사본을 사용할 수 있습니다."
  syntax:
    content: public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }
    return:
      type: System.Net.Cache.RequestCachePolicy
      description: "Returns <xref href=&quot;System.Net.Cache.RequestCachePolicy&quot;></xref>.       A <xref href=&quot;System.Net.Cache.RequestCachePolicy&quot;> </xref> 캐시 정책을 정의 하는 개체입니다. 기본값은 <xref:System.Net.WebRequest.DefaultCachePolicy*>.</xref:System.Net.WebRequest.DefaultCachePolicy*>"
  overload: System.Net.Http.WebRequestHandler.CachePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ClientCertificates
  id: ClientCertificates
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
  fullName: System.Net.Http.WebRequestHandler.ClientCertificates
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "이 요청과 관련 된 보안 인증서의 컬렉션을 가져오거나 설정 합니다."
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "Returns <xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;></xref>.       이 요청과 관련 된 보안 인증서의 컬렉션입니다."
  overload: System.Net.Http.WebRequestHandler.ClientCertificates*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout
  id: ContinueTimeout
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
  fullName: System.Net.Http.WebRequestHandler.ContinueTimeout
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "크기를 가져오거나 설정 합니다. 100에 대 한 대기는 응용 프로그램 시간을 밀리초 단위로-데이터를 업로드 하기 전에 서버에서 계속 합니다."
  syntax:
    content: public TimeSpan ContinueTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>입니다.</xref:System.TimeSpan> 반환       응용 프로그램 100에 대 한 대기 시간을 밀리초 단위로-데이터를 업로드 하기 전에 서버에서 계속 합니다. 기본값은 350 밀리초입니다."
  overload: System.Net.Http.WebRequestHandler.ContinueTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
  fullName: System.Net.Http.WebRequestHandler.ImpersonationLevel
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "현재 요청에 대 한 가장 수준을 가져오거나 설정 합니다."
  remarks: "가장 수준에는 서버에서 클라이언트의 자격 증명을 사용 하는 방법을 결정 합니다."
  syntax:
    content: public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; set; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "<xref:System.Security.Principal.TokenImpersonationLevel>입니다.</xref:System.Security.Principal.TokenImpersonationLevel> 반환       요청에 대 한 가장 수준입니다. 기본값은 <xref:System.Security.Principal.TokenImpersonationLevel>.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Http.WebRequestHandler.ImpersonationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  id: MaxResponseHeadersLength
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
  fullName: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "응답 헤더의 최대 허용된 길이 가져오거나 설정 합니다."
  remarks: "응답 헤더의 길이가 응답 상태 표시줄 및 HTTP 프로토콜의 일부로 수신 된 모든 추가 제어 문자가 포함 되어 있습니다. 값이-1 이면 응답 헤더;에 제한 되지 않습니다 0은 모든 요청에 실패 하는 값입니다.       값에 기본적으로 MaxResponseHeadersLength 속성을 명시적으로 설정 하지는 <xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A>속성.</xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A>       받은 응답 헤더의 길이가 MaxResponseHeadersLength 속성의 값을 초과 하는 경우 응답에 액세스 하면 예외가 throw 됩니다."
  syntax:
    content: public int MaxResponseHeadersLength { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>입니다.</xref:System.Int32> 반환       응답 헤더의 킬로바이트 (1024 바이트) 길이입니다."
  overload: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  id: ReadWriteTimeout
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
  fullName: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "요청을 작성 하거나 서버에서 응답을 읽을 때 시간 제한을 밀리초 단위로 설정 하거나 가져옵니다."
  syntax:
    content: public int ReadWriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>입니다.</xref:System.Int32> 반환       쓰기 또는 읽기가 시간 초과 되기 전의 시간 (밀리초)의 수입니다. 기본값은 300, 000 밀리초 (5 분)입니다."
  overload: System.Net.Http.WebRequestHandler.ReadWriteTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  id: ServerCertificateValidationCallback
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
  fullName: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "서버 인증서를 확인 하는 콜백 메서드를 가져오거나 설정 합니다."
  remarks: "ServerCertificateValidationCallback 이면 `null`, 잘 알려진 표준 인증 기관을 사용 하 여 서버 인증서를 확인 합니다."
  syntax:
    content: public System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
    return:
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "Returns <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref>.       콜백 메서드를 서버 인증서의 유효성을 검사 합니다."
  overload: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  id: UnsafeAuthenticatedConnectionSharing
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  fullName: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "고속 NTLM 인증 연결 공유가 허용 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "이 속성에 대 한 기본값은 `false`, 때문에 현재 연결을 요청을 완료 한 후 닫아야 합니다. 새 요청을 발급 될 때마다 응용 프로그램 인증 시퀀스를 통해 이동 해야 합니다. 이 속성은로 설정 하는 경우 `true`, 인증이 수행 후 응답을 검색 하는 데 사용 하는 연결이 열려 있습니다. 이 경우 된 다른 요청으로이 속성이 설정 `true` 다시 인증 하지 않고 연결을 사용할 수 있습니다. 즉, 사용자 A에 대 한 연결을 인증 하는 경우 사용자 B 다시 사용할 수 있습니다 A의 연결&1;. 사용자의 자격 증명에 따라 B의 사용자 요청이 행은      > [!CAUTION] > 한지 관리 문제가 시스템에서이 속성을 설정할 때 확인 해야 하는 인증을 거치지 않고 연결을 사용 하도록 응용 프로그램에 대 한 수 있기 때문에 `true`합니다. 응용 프로그램에서 여러 사용자에 게 요청 하는 경우 (가장 하는 여러 사용자 계정) 의존 하 여 리소스를 보호 하는 인증, 않으면이 속성을 설정 하지 `true` 아래 설명 된 대로 연결 그룹을 사용 하지 않는 한 합니다.       경우이 메커니즘을 사용 하도록 설정 하려는 경우에 성능 문제가 발생 하는 응용 프로그램은 Windows 통합된 인증으로 웹 서버에서 실행 되 고 합니다.       이 설정을 사용 하면 시스템 보안 위험을 엽니다. 설정 하는 경우는 <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A>속성을 `true` 를 다음 예방 조치를 취하십시오:-연결이 악용을 방지 하려면 보호 된 환경에서 응용 프로그램을 실행 합니다.</xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A>       백 엔드 서버를 제어 하는 경우 대신 해야 할 인증 지 속성을 해제 합니다. 어느 정도 성능이 향상 되지만 더 안전 합니다. 자세한 내용은 MSDN library에서 AuthPersistence 검색 [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)합니다."
  syntax:
    content: public bool UnsafeAuthenticatedConnectionSharing { get; set; }
    return:
      type: System.Boolean
      description: "<xref:System.Boolean>입니다.</xref:System.Boolean> 반환       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>인증 된 연결을 열어 유지 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Http.HttpClientHandler
  isExternal: false
  name: System.Net.Http.HttpClientHandler
- uid: System.Net.Http.WebRequestHandler.#ctor
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: WebRequestHandler()
  nameWithType: WebRequestHandler.WebRequestHandler()
  fullName: System.Net.Http.WebRequestHandler.WebRequestHandler()
- uid: System.Net.Http.WebRequestHandler.AllowPipelining
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
  fullName: System.Net.Http.WebRequestHandler.AllowPipelining
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
  fullName: System.Net.Http.WebRequestHandler.AuthenticationLevel
- uid: System.Net.Security.AuthenticationLevel
  parent: System.Net.Security
  isExternal: true
  name: AuthenticationLevel
  nameWithType: AuthenticationLevel
  fullName: System.Net.Security.AuthenticationLevel
- uid: System.Net.Http.WebRequestHandler.CachePolicy
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
  fullName: System.Net.Http.WebRequestHandler.CachePolicy
- uid: System.Net.Cache.RequestCachePolicy
  parent: System.Net.Cache
  isExternal: false
  name: RequestCachePolicy
  nameWithType: RequestCachePolicy
  fullName: System.Net.Cache.RequestCachePolicy
- uid: System.Net.Http.WebRequestHandler.ClientCertificates
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
  fullName: System.Net.Http.WebRequestHandler.ClientCertificates
- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509CertificateCollection
  nameWithType: X509CertificateCollection
  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
  fullName: System.Net.Http.WebRequestHandler.ContinueTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
  fullName: System.Net.Http.WebRequestHandler.ImpersonationLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: true
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
  fullName: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
  fullName: System.Net.Http.WebRequestHandler.ReadWriteTimeout
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
  fullName: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  fullName: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
- uid: System.Net.Http.WebRequestHandler.#ctor*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: WebRequestHandler
  nameWithType: WebRequestHandler.WebRequestHandler
- uid: System.Net.Http.WebRequestHandler.AllowPipelining*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
- uid: System.Net.Http.WebRequestHandler.CachePolicy*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
- uid: System.Net.Http.WebRequestHandler.ClientCertificates*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
