### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.ObjectChangeConflict
  id: ObjectChangeConflict
  children:
  - System.Data.Linq.ObjectChangeConflict.IsDeleted
  - System.Data.Linq.ObjectChangeConflict.IsResolved
  - System.Data.Linq.ObjectChangeConflict.MemberConflicts
  - System.Data.Linq.ObjectChangeConflict.Object
  - System.Data.Linq.ObjectChangeConflict.Resolve
  - System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode)
  - System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode,System.Boolean)
  langs:
  - csharp
  name: ObjectChangeConflict
  nameWithType: ObjectChangeConflict
  fullName: System.Data.Linq.ObjectChangeConflict
  type: Class
  summary: "하나 이상의 낙관적 동시성 충돌에 대 한 업데이트 시도를 나타냅니다."
  remarks: "이 시나리오는 업데이트 시도가 실패 클라이언트가 마지막으로 읽은 후 데이터베이스 값이 업데이트 되어입니다.       다음 예제에는 충돌의 개체에 대 한 정보를 검색 하는 방법을 보여 줍니다."
  example:
  - >-
    [!code-cs[System.Data.Linq.ObjectChangeConflict#1](~/add/codesnippet/csharp/objconflict/program.cs#1)]
     [!code-vb[System.Data.Linq.ObjectChangeConflict#1](~/add/codesnippet/visualbasic/objconflict/module1.vb#1)]
  syntax:
    content: public sealed class ObjectChangeConflict
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.ObjectChangeConflict.IsDeleted
  id: IsDeleted
  parent: System.Data.Linq.ObjectChangeConflict
  langs:
  - csharp
  name: IsDeleted
  nameWithType: ObjectChangeConflict.IsDeleted
  fullName: System.Data.Linq.ObjectChangeConflict.IsDeleted
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "데이터베이스에서 충돌이 발생 한 개체를 삭제 되었는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public bool IsDeleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>개체가 삭제 되었습니다."
  overload: System.Data.Linq.ObjectChangeConflict.IsDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ObjectChangeConflict.IsResolved
  id: IsResolved
  parent: System.Data.Linq.ObjectChangeConflict
  langs:
  - csharp
  name: IsResolved
  nameWithType: ObjectChangeConflict.IsResolved
  fullName: System.Data.Linq.ObjectChangeConflict.IsResolved
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "이 개체에 대 한 충돌 이미 해결 여부를 나타내는 값을 가져옵니다."
  remarks: "이 속성은 읽기 전용 및 충돌을 해결 하는 대로 자동으로 업데이트 됩니다."
  syntax:
    content: public bool IsResolved { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>충돌 해결 되었습니다 하는 경우."
  overload: System.Data.Linq.ObjectChangeConflict.IsResolved*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ObjectChangeConflict.MemberConflicts
  id: MemberConflicts
  parent: System.Data.Linq.ObjectChangeConflict
  langs:
  - csharp
  name: MemberConflicts
  nameWithType: ObjectChangeConflict.MemberConflicts
  fullName: System.Data.Linq.ObjectChangeConflict.MemberConflicts
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "업데이트가 실패를 발생 시킨 모든 멤버 충돌의 컬렉션을 가져옵니다."
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.MemberChangeConflict> MemberConflicts { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.MemberChangeConflict}
      description: "컬렉션 멤버 충돌입니다."
  overload: System.Data.Linq.ObjectChangeConflict.MemberConflicts*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ObjectChangeConflict.Object
  id: Object
  parent: System.Data.Linq.ObjectChangeConflict
  langs:
  - csharp
  name: Object
  nameWithType: ObjectChangeConflict.Object
  fullName: System.Data.Linq.ObjectChangeConflict.Object
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "충돌에서 개체를 가져옵니다."
  syntax:
    content: public object Object { get; }
    return:
      type: System.Object
      description: "충돌이 발생 한 개체입니다."
  overload: System.Data.Linq.ObjectChangeConflict.Object*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ObjectChangeConflict.Resolve
  id: Resolve
  parent: System.Data.Linq.ObjectChangeConflict
  langs:
  - csharp
  name: Resolve()
  nameWithType: ObjectChangeConflict.Resolve()
  fullName: System.Data.Linq.ObjectChangeConflict.Resolve()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "현재 값을 유지 하 고 최신 데이터베이스 값과 일치 하도록 원래 기준 값 다시 설정 하 여 멤버 충돌을 해결 합니다."
  syntax:
    content: public void Resolve ();
    parameters: []
  overload: System.Data.Linq.ObjectChangeConflict.Resolve*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode)
  id: Resolve(System.Data.Linq.RefreshMode)
  parent: System.Data.Linq.ObjectChangeConflict
  langs:
  - csharp
  name: Resolve(RefreshMode)
  nameWithType: ObjectChangeConflict.Resolve(RefreshMode)
  fullName: System.Data.Linq.ObjectChangeConflict.Resolve(RefreshMode)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "지정 된를 사용 하 여 멤버 충돌을 해결 <xref href=&quot;System.Data.Linq.RefreshMode&quot;> </xref>합니다."
  remarks: "다음 예에서는 <xref:System.Data.Linq.RefreshMode>.</xref:System.Data.Linq.RefreshMode> 에 대 한 다양 한 값을 사용 하 여 생성 되는 결과 보여 줍니다."
  example:
  - "The following example overwrites current values with values from the database.  \n  \n [!code-cs[System.Data.Linq.RefreshMode#1](~/add/codesnippet/csharp/refreshmode/program.cs#1)]\n [!code-vb[System.Data.Linq.RefreshMode#1](~/add/codesnippet/visualbasic/refreshmode/module1.vb#1)]  \n  \n The following example shows how to swap the original value with the values retrieved from the dtabase. No current value is modified.  \n  \n [!code-cs[System.Data.Linq.RefreshMode#2](~/add/codesnippet/csharp/refreshmode/program.cs#2)]\n [!code-vb[System.Data.Linq.RefreshMode#2](~/add/codesnippet/visualbasic/refreshmode/module1.vb#2)]  \n  \n The following example keeps the current values that have been changed, but updates the other values with database values.  \n  \n [!code-cs[System.Data.Linq.RefreshMode#3](~/add/codesnippet/csharp/refreshmode/program.cs#3)]\n [!code-vb[System.Data.Linq.RefreshMode#3](~/add/codesnippet/visualbasic/refreshmode/module1.vb#3)]"
  syntax:
    content: public void Resolve (System.Data.Linq.RefreshMode refreshMode);
    parameters:
    - id: refreshMode
      type: System.Data.Linq.RefreshMode
      description: "적절 한 옵션 <xref href=&quot;System.Data.Linq.RefreshMode&quot;> </xref>합니다."
  overload: System.Data.Linq.ObjectChangeConflict.Resolve*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode,System.Boolean)
  id: Resolve(System.Data.Linq.RefreshMode,System.Boolean)
  parent: System.Data.Linq.ObjectChangeConflict
  langs:
  - csharp
  name: Resolve(RefreshMode,Boolean)
  nameWithType: ObjectChangeConflict.Resolve(RefreshMode,Boolean)
  fullName: System.Data.Linq.ObjectChangeConflict.Resolve(RefreshMode,Boolean)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "현재 값을 유지 하 고 원래 기준 값을 다시 설정 하는 멤버 충돌을 해결 합니다."
  syntax:
    content: public void Resolve (System.Data.Linq.RefreshMode refreshMode, bool autoResolveDeletes);
    parameters:
    - id: refreshMode
      type: System.Data.Linq.RefreshMode
      description: "적절 한 옵션 <xref href=&quot;System.Data.Linq.RefreshMode&quot;> </xref>합니다."
    - id: autoResolveDeletes
      type: System.Boolean
      description: "때 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, 자동으로 더 이상 데이터베이스에 있는 수정된 된 개체에서 발생 하는 해결 충돌 합니다."
  overload: System.Data.Linq.ObjectChangeConflict.Resolve*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.ObjectChangeConflict.IsDeleted
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: IsDeleted
  nameWithType: ObjectChangeConflict.IsDeleted
  fullName: System.Data.Linq.ObjectChangeConflict.IsDeleted
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.ObjectChangeConflict.IsResolved
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: IsResolved
  nameWithType: ObjectChangeConflict.IsResolved
  fullName: System.Data.Linq.ObjectChangeConflict.IsResolved
- uid: System.Data.Linq.ObjectChangeConflict.MemberConflicts
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: MemberConflicts
  nameWithType: ObjectChangeConflict.MemberConflicts
  fullName: System.Data.Linq.ObjectChangeConflict.MemberConflicts
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.MemberChangeConflict}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<MemberChangeConflict>
  nameWithType: ReadOnlyCollection<MemberChangeConflict>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.MemberChangeConflict>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Data.Linq.MemberChangeConflict>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Linq.MemberChangeConflict
    name: MemberChangeConflict
    nameWithType: MemberChangeConflict
    fullName: MemberChangeConflict
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.ObjectChangeConflict.Object
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: Object
  nameWithType: ObjectChangeConflict.Object
  fullName: System.Data.Linq.ObjectChangeConflict.Object
- uid: System.Data.Linq.ObjectChangeConflict.Resolve
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: Resolve()
  nameWithType: ObjectChangeConflict.Resolve()
  fullName: System.Data.Linq.ObjectChangeConflict.Resolve()
- uid: System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode)
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: Resolve(RefreshMode)
  nameWithType: ObjectChangeConflict.Resolve(RefreshMode)
  fullName: System.Data.Linq.ObjectChangeConflict.Resolve(RefreshMode)
- uid: System.Data.Linq.RefreshMode
  parent: System.Data.Linq
  isExternal: false
  name: RefreshMode
  nameWithType: RefreshMode
  fullName: System.Data.Linq.RefreshMode
- uid: System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode,System.Boolean)
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: Resolve(RefreshMode,Boolean)
  nameWithType: ObjectChangeConflict.Resolve(RefreshMode,Boolean)
  fullName: System.Data.Linq.ObjectChangeConflict.Resolve(RefreshMode,Boolean)
- uid: System.Data.Linq.ObjectChangeConflict.IsDeleted*
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: IsDeleted
  nameWithType: ObjectChangeConflict.IsDeleted
- uid: System.Data.Linq.ObjectChangeConflict.IsResolved*
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: IsResolved
  nameWithType: ObjectChangeConflict.IsResolved
- uid: System.Data.Linq.ObjectChangeConflict.MemberConflicts*
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: MemberConflicts
  nameWithType: ObjectChangeConflict.MemberConflicts
- uid: System.Data.Linq.ObjectChangeConflict.Object*
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: Object
  nameWithType: ObjectChangeConflict.Object
- uid: System.Data.Linq.ObjectChangeConflict.Resolve*
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: Resolve
  nameWithType: ObjectChangeConflict.Resolve
