### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  id: SessionSecurityTokenHandler
  children:
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  langs:
  - csharp
  name: SessionSecurityTokenHandler
  nameWithType: SessionSecurityTokenHandler
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  type: Class
  summary: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenHandler&quot;> </xref> 형식의 보안 토큰을 처리 하는 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>합니다."
  remarks: "The SessionSecurityTokenHandler class serializes, deserializes, and validates session tokens. Session tokens are tokens of type <xref:System.IdentityModel.Tokens.SessionSecurityToken>. The SessionSecurityTokenHandler class serializes the tokens to and from cookie format. By default, the class serializes tokens into WS-Secure Conversation Feb2005 or WS-Secure Conversation 1.3 `<wsc:SecurityContextToken>` elements. Session tokens are used by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule> (WSFAM) and the <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM) to store information about a session, this is primarily the <xref:System.Security.Claims.ClaimsPrincipal> associated with the authenticated user and the session start and expiration times.  \n  \n In passive scenarios, the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule> calls into the <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM) from the authentication pipeline to create a session token from the <xref:System.Security.Claims.ClaimsPrincipal> that represents the authenticated user. The SAM uses its configured SessionSecurityTokenHandler to create the token and to serialize it into a cookie (and to deserialize the token from a cookie on subsequent requests). The SAM uses an instance of its configured <xref:System.IdentityModel.Services.CookieHandler> class to write the cookie back to the HTTP Response. This cookie is then returned to the client and on subsequent requests the client can present the cookie rather than making a round trip back to the identity provider to re-obtain a security token. For more information about how sessions operate with WIF, see [WIF Session Management](~/add/includes/ajax-current-ext-md.md).  \n  \n> [!NOTE]\n>  The \\<securityTokenHandlers> configuration element can be used to specify a SessionSecurityTokenHandler that has the responsibility for securing the application’s sessions. Developers should use caution when changing this configuration setting, as a misconfigured system could result in application compromise. For example, specifying a derived  HYPERLINK \"http://msdn.microsoft.com/en-us/library/hh193426%28v=vs.110%29.aspx\" \\t \"_blank\" SessionSecurityTokenHandler and passing an empty Transforms (CookieTransform) collection to the base, would result in the users identity being serialized into a cookie that was not protected. This could allow an attacker to modify the identity and therefore change access privileges.  \n  \n If the session token is in reference mode, that is, its <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName> property is `true`, the session token handler only serializes properties of the session token that are needed to regenerate its key in the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>. In the default case, the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey> class is used to represent cache keys, and the token handler writes the <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=fullName> and <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=fullName> properties of the token. If the session token is not in reference mode, that is, the <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName> property is `false`, then, in addition to the properties mentioned previously, the handler invokes the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> method on a byte array serialized from the token and stores the resulting value in the cookie as well. For more details about how the token is serialized, see the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName> method.  \n  \n The <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> property gets the list of transforms that are applied to the session token in the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> method. All transforms derive from the <xref:System.IdentityModel.CookieTransform> class. In the default case the <xref:System.IdentityModel.DeflateCookieTransform> and the <xref:System.IdentityModel.ProtectedDataCookieTransform> are applied. The <xref:System.IdentityModel.ProtectedDataCookieTransform> uses the Data Protection API (DPAPI) to protect the cookie material. DPAPI uses a key that is specific to the computer on which it is running in its protection algorithms. For this reason, the default session token handler is not usable in Web farm scenarios because, in such scenarios, tokens written on one computer may need to be read on another computer. You can use many strategies to circumvent this issue. For example, you can:  \n  \n-   Replace the default SessionSecurityTokenHandler with the <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>. The <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler> enables you to specify signing and encryption keys under the ASP.NET `<machineKey>` element in the configuration file.  \n  \n-   Provide a handler for the <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=fullName> event in the global.asax.cs file and replace the default session token handler with an instance of SessionSecurityTokenHandler that has a list of transforms that includes the <xref:System.IdentityModel.RsaSignatureCookieTransform> and the <xref:System.IdentityModel.RsaEncryptionCookieTransform>. You can create the new instance by invoking one of the constructors that takes a list of transforms.  \n  \n-   Derive a custom transform from the <xref:System.IdentityModel.CookieTransform> base class and use the method above to include it in the list of transforms to be applied.  \n  \n-   Derive a custom token handler from SessionSecurityTokenHandler and implement your own mechanism.  \n  \n For more information about using sessions in Web farm scenarios, see [WIF and Web Farms](~/add/includes/ajax-current-ext-md.md).  \n  \n The SessionSecurityTokenHandler is included in the default token handler collection; however, you can replace it with a custom session token handler by first specifying a [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E.md) element under the [\\&lt;securityTokenHandlers\\&gt;](../Topic/%3CsecurityTokenHandlers%3E.md) element to remove the default handler from the collection and then adding your custom token handler using the [\\&lt;add\\&gt;](../Topic/%3Cadd%3E.md) element. By default, you can specify the default token lifetime by including the [\\&lt;sessionTokenRequirement\\&gt;](../Topic/%3CsessionTokenRequirement%3E.md) element under the `<add>` element. You can design a custom token handler to take custom configuration elements under the `<add>` element by overriding the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A> method to provide the logic to process them."
  example:
  - "The following XML shows how to replace the default session security token handler in a token handler collection with an instance of the <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler> class in configuration.  \n  \n```xml  \n<securityTokenHandlers>  \n  <remove type=\"System.IdentityModel.Tokens.SessionSecurityTokenHandler, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" />  \n  <add type=\"System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" />  \n</securityTokenHandlers>  \n```"
  syntax:
    content: 'public class SessionSecurityTokenHandler : System.IdentityModel.Tokens.SecurityTokenHandler'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityTokenHandler
  implements: []
  inheritedMembers:
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  - System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  - System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)
  - System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: SessionSecurityTokenHandler()
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler()
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;> </xref> 토큰 수명 및 기본 쿠키 변환을 사용 하는 클래스입니다."
  remarks: "<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A>속성 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime>및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms>.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> 초기화 됩니다</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>"
  syntax:
    content: public SessionSecurityTokenHandler ();
    parameters: []
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})
  id: '#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})'
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;> </xref> 지정된 된 쿠키를 사용 하는 클래스를 변환 합니다."
  remarks: "<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>속성은 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime>.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime> 으로 초기화</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>"
  syntax:
    content: public SessionSecurityTokenHandler (System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform> transforms);
    parameters:
    - id: transforms
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
      description: "인코딩 또는 디코딩 쿠키를 적용 하려면 변환 합니다. 설정 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>속성.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>transforms</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)
  id: '#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)'
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;> </xref> 지정된 쿠키 변환 및 토큰 수명을 사용 하는 클래스입니다."
  syntax:
    content: public SessionSecurityTokenHandler (System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform> transforms, TimeSpan tokenLifetime);
    parameters:
    - id: transforms
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
      description: "인코딩 또는 디코딩 쿠키를 적용 하려면 변환 합니다. 설정 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>속성.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>"
    - id: tokenLifetime
      type: System.TimeSpan
      description: "토큰에 대 한 기본 수명입니다. 설정 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime*>속성.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime*>"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>transforms</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>tokenLifetime</code>보다 작거나 같음 &lt;xref:System.TimeSpan.Zero?displayProperty=fullName&gt;합니다."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)
  id: ApplyTransforms(System.Byte[],System.Boolean)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ApplyTransforms(Byte[],Boolean)
  nameWithType: SessionSecurityTokenHandler.ApplyTransforms(Byte[],Boolean)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(Byte[],Boolean)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "로 지정 된 변환을 적용는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>속성을 인코딩 또는 디코딩할 지정된 된 쿠키입니다.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>"
  remarks: "에 표시 된 순서로 적용 쿠키 인코딩을 변환 하는 경우는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A>속성.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> 쿠키를 디코딩, 반대 순서로 적용 됩니다.       호출 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>및 [qualifyHint/False / autoUpgrade = = True](~/add/includes/ajax-current-ext-md.md) 메서드를 인코딩 및 디코딩하는 쿠키 자료.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>"
  syntax:
    content: protected virtual byte[] ApplyTransforms (byte[] cookie, bool outbound);
    parameters:
    - id: cookie
      type: System.Byte[]
      description: "쿠키는 동안 변형 됩니다."
    - id: outbound
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>쿠키로 인코딩되어야; 경우 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 쿠키를 디코딩할 수 있습니다."
    return:
      type: System.Byte[]
      description: "인코딩 / 디코딩된 쿠키입니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>속성은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  id: CanReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CanReadToken(XmlReader)
  nameWithType: SessionSecurityTokenHandler.CanReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "판독기가에 있는지 여부를 나타내는 값을 반환 합니다. 한 <xref uid=&quot;langword_csharp_&lt;wsc:SecurityContextToken&gt;&quot; name=&quot;&lt;wsc:SecurityContextToken&gt;&quot; href=&quot;&quot;> </xref> 요소입니다."
  syntax:
    content: public override bool CanReadToken (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>들어오는 통해 <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref>.</xref:System.Xml.XmlReader> 판독기에 위치 해야는 <xref uid=&quot;langword_csharp_&lt;wsc:SecurityContextToken&gt;&quot; name=&quot;&lt;wsc:SecurityContextToken&gt;&quot; href=&quot;&quot;> </xref> 요소입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>판독기가 가리키는 경우는 <xref uid=&quot;langword_csharp_&lt;wsc:SecurityContextToken&gt;&quot; name=&quot;&lt;wsc:SecurityContextToken&gt;&quot; href=&quot;&quot;> </xref> 요소, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  id: CanValidateToken
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CanValidateToken
  nameWithType: SessionSecurityTokenHandler.CanValidateToken
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "이 처리기 형식의 토큰의 유효성 검사를 지원 하는지 여부를 나타내는 값을 가져옵니다 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>합니다."
  syntax:
    content: public override bool CanValidateToken { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>처리기가 지 원하는 형식의 토큰의 유효성을 검사 하는 경우 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  id: CanWriteToken
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CanWriteToken
  nameWithType: SessionSecurityTokenHandler.CanWriteToken
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "이 처리기 형식의 토큰을 쓸 수 있는지 여부를 나타내는 값을 가져옵니다 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>합니다."
  syntax:
    content: public override bool CanWriteToken { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>처리기 형식의 토큰을 쓸 수 있는 경우 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  id: CookieElementName
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CookieElementName
  nameWithType: SessionSecurityTokenHandler.CookieElementName
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "쿠키 요소에 대 한 이름을 가져옵니다."
  remarks: "이 속성에서 사용 되는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A>요소는 인코딩된 토큰 자료를 작성 하거나 읽을 수를 확인 하는 메서드.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>"
  syntax:
    content: public virtual string CookieElementName { get; }
    return:
      type: System.String
      description: "쿠키 요소에 대 한 이름입니다. 기본 요소 이름은 &quot;쿠키&quot;입니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  id: CookieNamespace
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CookieNamespace
  nameWithType: SessionSecurityTokenHandler.CookieNamespace
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "쿠키 요소에 대 한 네임 스페이스를 가져옵니다."
  remarks: "이 속성에서 사용 되는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A>는 인코딩된 토큰 자료를 작성 하거나 읽을 수는 요소의 네임 스페이스를 확인 하는 메서드.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>"
  syntax:
    content: public virtual string CookieNamespace { get; }
    return:
      type: System.String
      description: "쿠키 요소에 대 한 네임 스페이스입니다. 기본 네임 스페이스 &quot;http://schemas.microsoft.com/ws/2006/05/security&quot;입니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  id: CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  nameWithType: SessionSecurityTokenHandler.CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "만듭니다는 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> 토큰은 유효 지정 된 클레임 보안 주체 및 시간 범위를 기반 합니다."
  syntax:
    content: public virtual System.IdentityModel.Tokens.SessionSecurityToken CreateSessionSecurityToken (System.Security.Claims.ClaimsPrincipal principal, string context, string endpointId, DateTime validFrom, DateTime validTo);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "클레임 주체입니다."
    - id: context
      type: System.String
      description: "호출자 정의 컨텍스트 문자열입니다."
    - id: endpointId
      type: System.String
      description: "토큰 범위는 끝점의 식별자입니다."
    - id: validFrom
      type: System.DateTime
      description: "토큰 유효 해지는 시간 인스턴트입니다."
    - id: validTo
      type: System.DateTime
      description: "시간이 지나면 인스턴트 토큰은 더 이상 유효 합니다."
    return:
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "생성 된 세션 보안 토큰입니다. 새 세션 토큰에서 속성이 지정 된 매개 변수에 따라 설정 됩니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>principal</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>속성은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  id: CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CreateToken(SecurityTokenDescriptor)
  nameWithType: SessionSecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정된 된 토큰 설명자를 기반으로 보안 토큰을 만듭니다."
  remarks: '만들고 토큰 설명자의 다음 속성을 사용 하 여 세션 보안 토큰을 반환: <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A?displayProperty=fullName>, 및 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A?displayProperty=fullName>.</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A?displayProperty=fullName> </xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A?displayProperty=fullName> 경우는 <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.SaveBootstrapContext%2A?displayProperty=fullName>속성이 설정 되어 `true` 로 지정 된 토큰 처리기 구성에는 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>속성 부트스트랩 컨텍스트가에서 만들어집니다는 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Token%2A?displayProperty=fullName>속성 세션 토큰에 저장 됩니다.</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Token%2A?displayProperty=fullName> </xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> </xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.SaveBootstrapContext%2A?displayProperty=fullName>'
  syntax:
    content: public override System.IdentityModel.Tokens.SecurityToken CreateToken (System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);
    parameters:
    - id: tokenDescriptor
      type: System.IdentityModel.Tokens.SecurityTokenDescriptor
      description: "토큰을 만드는 데 사용할 토큰 설명자입니다."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "생성 된 보안 토큰입니다. 이 인스턴스의 됩니다 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>tokenDescriptor</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>속성은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
  id: DefaultCookieTransforms
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: DefaultCookieTransforms
  nameWithType: SessionSecurityTokenHandler.DefaultCookieTransforms
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
  type: Field
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "읽기 전용 컬렉션에 쿠키를 적용 하는 기본 변환 목록이 포함 된 <xref href=&quot;System.IdentityModel.DeflateCookieTransform&quot;> </xref> 및 <xref href=&quot;System.IdentityModel.ProtectedDataCookieTransform&quot;> </xref>합니다."
  syntax:
    content: public static readonly System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform> DefaultCookieTransforms;
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  id: DefaultLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: DefaultLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  type: Field
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "쿠키에 대 한 기본 수명을&10; 시간을 지정 하는 상수입니다."
  syntax:
    content: public static readonly TimeSpan DefaultLifetime;
    return:
      type: System.TimeSpan
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  id: DefaultTokenLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: DefaultTokenLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultTokenLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "기본 토큰 수명은 가져옵니다."
  syntax:
    content: public static TimeSpan DefaultTokenLifetime { get; }
    return:
      type: System.TimeSpan
      description: "기본 토큰 수명은 합니다. Always <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime&quot;></xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers
  id: GetTokenTypeIdentifiers
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: GetTokenTypeIdentifiers()
  nameWithType: SessionSecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "이 처리기에서 처리할 수 있는 토큰 유형을 대 한 토큰 형식을 Uri를 가져옵니다."
  remarks: '다음 형식 Uri 지원 됩니다: &quot;http://schemas.microsoft.com/ws/2006/05/servicemodel/tokens/SecureConversation&quot;, &quot;http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/sct&quot; 및 &quot;http://schemas.xmlsoap.org/ws/2005/02/sc/sct&quot;입니다.'
  syntax:
    content: public override string[] GetTokenTypeIdentifiers ();
    parameters: []
    return:
      type: System.String[]
      description: "이 처리기에서 처리할 수 있는 토큰 유형에 대 한 토큰 유형 식별자 Uri입니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)
  id: LoadCustomConfiguration(System.Xml.XmlNodeList)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: LoadCustomConfiguration(XmlNodeList)
  nameWithType: SessionSecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "사용자 지정 구성을 XML에서 로드 합니다."
  remarks: "초기화 하는 구성 인프라에 의해 호출 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>인스턴스.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 초기화 합니다는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>속성은 `lifetime` 특성에는 [ \\&lt; sessionTokenRequirement\\&gt;](../Topic/%3CsessionTokenRequirement%3E.md) 구성 파일의 요소입니다.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>"
  syntax:
    content: public override void LoadCustomConfiguration (System.Xml.XmlNodeList customConfigElements);
    parameters:
    - id: customConfigElements
      type: System.Xml.XmlNodeList
      description: "사용자 지정 구성 요소입니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>customConfigElements</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "지정 된 구성을 <code> customConfigElements </code> 올바르지 않습니다. 예를 들어 없기는 <xref uid=&quot;langword_csharp_&lt;sessionTokenRequirement&gt;&quot; name=&quot;&lt;sessionTokenRequirement&gt;&quot; href=&quot;&quot;> </xref> 요소를 포함 하나 이상 <xref uid=&quot;langword_csharp_&lt;sessionTokenRequirement&gt;&quot; name=&quot;&lt;sessionTokenRequirement&gt;&quot; href=&quot;&quot;> </xref> 요소, 유효한 <xref:System.TimeSpan>에서 값을 읽을 수 없습니다는 <xref uid=&quot;langword_csharp_lifetime&quot; name=&quot;lifetime&quot; href=&quot;&quot;> </xref> 특성 또는 <xref uid=&quot;langword_csharp_lifetime&quot; name=&quot;lifetime&quot; href=&quot;&quot;> </xref> 작은 값을 지정 하는 특성 보다 &lt;xref:System.TimeSpan.Zero?displayProperty=fullName&gt;.</xref:System.TimeSpan>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  id: ReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ReadToken(XmlReader)
  nameWithType: SessionSecurityTokenHandler.ReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "읽고는 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> 지정된 된 XML 판독기를 사용 하 여 합니다."
  remarks: "테이블 또는 Ws-secure Conversation Feb2005 Ws-secure Conversation 1.3 판독기를 배치 해야 `<wsc:SecurityContextToken>` 요소입니다.       기본 구현에서는 호출는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=fullName>기본 토큰 확인 자가 사용 하는 방법.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=fullName>"
  syntax:
    content: public override System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>들어오는 통해 <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref>.</xref:System.Xml.XmlReader>"
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "주체를 읽어의 인스턴스는 세션 보안 토큰 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IdentityModel.Tokens.SecurityTokenException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenException
    description: "에 판독기가 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> 또는 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> 읽을 수 없습니다."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)
  id: ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ReadToken(Byte[],SecurityTokenResolver)
  nameWithType: SessionSecurityTokenHandler.ReadToken(Byte[],SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(Byte[],SecurityTokenResolver)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "읽고는 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> 의 지정 된 토큰 확인자를 사용 하 여 바이트 스트림에서 합니다."
  remarks: "기본 구현은 만듭니다는 <xref:System.Xml.XmlDictionaryReader>토큰을 통해 호출 하는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=fullName>메서드.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=fullName> </xref:System.Xml.XmlDictionaryReader>"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (byte[] token, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);
    parameters:
    - id: token
      type: System.Byte[]
      description: "토큰을 포함 하는 바이트 스트림."
    - id: tokenResolver
      type: System.IdentityModel.Selectors.SecurityTokenResolver
      description: "사용 하도록 토큰 확인자입니다."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> 를 읽었습니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  id: ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ReadToken(XmlReader,SecurityTokenResolver)
  nameWithType: SessionSecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "읽고는 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> 지정 된 XML 판독기 및 토큰 확인자를 사용 하 여 합니다."
  remarks: "테이블 또는 Ws-secure Conversation Feb2005 Ws-secure Conversation 1.3 판독기를 배치 해야 `<wsc:SecurityContextToken>` 요소입니다.       <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>클래스</xref:System.IdentityModel.Tokens.SessionSecurityTokenCache> 의 인스턴스 토큰 캐시에서 읽힙니다 토큰 자료 캐시 되 면 그렇지 않으면 토큰 자료의 자식 요소에서 읽기는 `<wsc:SecurityContextToken>` 변수로 지정 된 요소는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A>및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A>속성 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>메서드를 호출 하는 쿠키를 디코딩할.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A>       세션 토큰을 serialize 하는 방법에 대 한 자세한 내용은 `<SecurityContextToken` 요소 참조는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>메서드.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>"
  syntax:
    content: public override System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>들어오는 통해 <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref>.</xref:System.Xml.XmlReader>"
    - id: tokenResolver
      type: System.IdentityModel.Selectors.SecurityTokenResolver
      description: "A <xref href=&quot;System.IdentityModel.Selectors.SecurityTokenResolver&quot;> </xref> 확인 하는 데 수 있는 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>합니다."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "주체를 읽어의 인스턴스는 세션 보안 토큰 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>tokenResolver</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IdentityModel.Tokens.SecurityTokenException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenException
    description: "에 판독기가 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> 또는 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> 읽을 수 없습니다."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})
  id: SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: SetTransforms(IEnumerable<CookieTransform>)
  nameWithType: SessionSecurityTokenHandler.SetTransforms(IEnumerable<CookieTransform>)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(IEnumerable<CookieTransform>)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "쿠키에 적용할 변환을 설정 합니다."
  remarks: "변환에서 반환 된 목록 설정에서 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A>속성.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> 변환은 표시 되는 쿠키를 인코딩할 때 목록에서 한 역순으로 쿠키를 디코딩하는 경우에 순서 대로 적용 됩니다.      > [!WARNING] > 경우는 `transforms` 매개 변수는 `null`에서 예외가 throw 됩니다는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>을 인코딩 또는 디코딩하려면 쿠키 호출 될 때 메서드.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>"
  syntax:
    content: protected void SetTransforms (System.Collections.Generic.IEnumerable<System.IdentityModel.CookieTransform> transforms);
    parameters:
    - id: transforms
      type: System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform}
      description: "사용할 변환 합니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  id: TokenLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: TokenLifetime
  nameWithType: SessionSecurityTokenHandler.TokenLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "토큰 수명을 가져오거나 설정 합니다."
  remarks: "기본적으로 하는 경우는 [ \\&lt; sessionTokenRequirement\\&gt;](../Topic/%3CsessionTokenRequirement%3E.md) 구성 파일에 TokenLifetime 속성은 값으로 초기화 하는 요소를 지정 된 `lifetime` 하 여 특성는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A>메서드.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A>"
  syntax:
    content: public virtual TimeSpan TokenLifetime { get; set; }
    return:
      type: System.TimeSpan
      description: "토큰 수명입니다. 기본값은 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "보다 작거나&0;이 하는 시간 범위를 설정 하려고 발생 합니다."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  id: TokenType
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: TokenType
  nameWithType: SessionSecurityTokenHandler.TokenType
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "이 처리기를 처리 하는 토큰의 형식을 가져옵니다."
  syntax:
    content: public override Type TokenType { get; }
    return:
      type: System.Type
      description: "The <xref:System.Type> of <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>.</xref:System.Type>"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  id: Transforms
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: Transforms
  nameWithType: SessionSecurityTokenHandler.Transforms
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "쿠키에 적용 될는 변환을 가져옵니다."
  remarks: "에 변환을 적용 되는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>메서드.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform> Transforms { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
      description: "쿠키에 적용할 변환 목록입니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)
  id: ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ValidateSession(SessionSecurityToken)
  nameWithType: SessionSecurityTokenHandler.ValidateSession(SessionSecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(SessionSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정한 토큰과 연결 된 세션이 계속 유효한 지 여부를 결정 합니다. 유효성을 검사 하 여 확인할는 <> </> *> 및 <> </> *> 지정된 된 토큰의 속성입니다. 세션을 더 이상 사용할 경우 예외가 throw 됩니다."
  remarks: "토큰이 유효 하지 않은 경우 해당 <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>나중에 발생 하는 값이 속성은 보다 <xref:System.DateTime.UtcNow%2A>, if 또는 <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> <xref:System.DateTime.UtcNow%2A>.</xref:System.DateTime.UtcNow%2A> 이전에 발생 하는 값이 속성은</xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> 해당</xref:System.DateTime.UtcNow%2A> </xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>       호출 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A>세션 유효성을 검사 합니다.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A>"
  syntax:
    content: protected virtual void ValidateSession (System.IdentityModel.Tokens.SessionSecurityToken securityToken);
    parameters:
    - id: securityToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "검사할 토큰입니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>securityToken</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>속성은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>"
  - type: System.IdentityModel.Tokens.SecurityTokenNotYetValidException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException
    description: "<> </> *> 토큰의 속성은 보다 이후 <> </> *> 합니다."
  - type: System.IdentityModel.Tokens.SecurityTokenExpiredException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenExpiredException
    description: "<> </> *> 토큰의 속성은 이전의 <> </> *> 합니다."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  id: ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ValidateToken(SecurityToken)
  nameWithType: SessionSecurityTokenHandler.ValidateToken(SecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정된 된 토큰의 유효성을 검사 하 고 해당 클레임을 반환 합니다."
  remarks: "호출 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession%2A>토큰 유효성 검사 메서드.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession%2A>"
  syntax:
    content: public override System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity> ValidateToken (System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "토큰 유효성을 검사할 수입니다. 할당할 수 있어야 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>합니다."
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
      description: "토큰에 포함 하는 id입니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: >-
      <code>token</code>
          <xref uid="langword_csharp_null" name="null" href=""></xref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>token</code>할당할 수 없으면 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)
  id: ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ValidateToken(SessionSecurityToken,String)
  nameWithType: SessionSecurityTokenHandler.ValidateToken(SessionSecurityToken,String)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(SessionSecurityToken,String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정 된 세션 토큰의 유효성을 검사 하 고 해당 클레임을 반환 합니다."
  remarks: "수행 되도록 지정된 된 토큰 범위 지정 된 끝점 ID에 한,이 경우 호출 하는 검사는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>메서드; <xref:System.IdentityModel.Tokens.SecurityTokenException>.</xref:System.IdentityModel.Tokens.SecurityTokenException> 그렇지 않으면 throw</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>      > [!IMPORTANT] > 세션 토큰을는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>않는 속성이 `null` 빈 범위를 전역으로 지정할 것으로 간주 됩니다.</xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A> 이 인해 잠재적인 보안 위험이 있습니다. 이러한 이유로 확인 해야 하는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>세션 토큰에서 속성을 설정 합니다.</xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>"
  syntax:
    content: public virtual System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity> ValidateToken (System.IdentityModel.Tokens.SessionSecurityToken token, string endpointId);
    parameters:
    - id: token
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "토큰 유효성을 검사할 수입니다. 할당할 수 있어야 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>합니다."
    - id: endpointId
      type: System.String
      description: "토큰 범위는 끝점의 식별자입니다."
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
      description: "토큰에 포함 하는 id입니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>token</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>endpointId</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>token</code>할당할 수 없으면 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>합니다."
  - type: System.IdentityModel.Tokens.SecurityTokenException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenException
    description: "<xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId*>지정된 된 토큰의 속성이 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 비어 있고 해당 값으로 지정 된 된 것과 다른 아니거나는 <code> endpointId </code> 매개 변수.</xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId*>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)
  id: WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: WriteToken(SessionSecurityToken)
  nameWithType: SessionSecurityTokenHandler.WriteToken(SessionSecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(SessionSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "바이트 배열에 지정된 된 토큰을 serialize합니다."
  remarks: "통해 만들고 XML 작성기 하 여 지정된 된 토큰을 serialize 한 <xref:System.IO.MemoryStream>을 호출 하는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>메서드.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName> </xref:System.IO.MemoryStream> 자세한 내용을 보려면 오버 로드 하는 참조 하십시오."
  syntax:
    content: public virtual byte[] WriteToken (System.IdentityModel.Tokens.SessionSecurityToken sessionToken);
    parameters:
    - id: sessionToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "쓸 토큰입니다."
    return:
      type: System.Byte[]
      description: "인코딩된 바이트 배열입니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sessiontoken</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  id: WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: WriteToken(XmlWriter,SecurityToken)
  nameWithType: SessionSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정된 된 XML 작성기를 사용 하 여 지정된 된 토큰을 serialize 합니다."
  remarks: "기본 구현은 Ws-secure Conversation Feb2005 또는 Ws-secure Conversation 1.3 지정된 된 토큰을 serialize `<wsc:SecurityContextToken>` 값에 따라 요소는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion%2A?displayProperty=fullName>속성.</xref:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion%2A?displayProperty=fullName> <xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A?displayProperty=fullName>속성으로 serialize 되는 `Id` 특성.</xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A?displayProperty=fullName> <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=fullName>속성으로 serialize 되는 `<Identifier>` 자식 요소입니다.</xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=fullName> 그렇지 않은 경우 `null` 는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=fullName>속성으로 serialize 되는 `<Instance>` 요소.</xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=fullName> 마지막으로, 하는 경우는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName>속성은 `false`, 전체 토큰이 전달 되는 이진 배열로 serialize 되는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>메서드를 인코딩할 수 있습니다.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> </xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName> 인코딩된 토큰이 base64 인코딩 값으로에 기록 된 요소와 지정 된 네임 스페이스는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A>및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A>속성.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A> 경우는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName>속성은 `true`, 토큰은 serialize 되지 않습니다.</xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName>"
  syntax:
    content: public override void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "토큰을 serialize 하는 데 사용할 XML 작성기입니다."
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "직렬화 할 토큰입니다. 인스턴스 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>writer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>token</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>token</code>할당할 수 없으면 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>합니다.       -또는- <xref:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion*> 토큰의 처리기에서 지원 되지 않는 Ws-secure Conversation의 버전을 지정 합니다."
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: System.IdentityModel.Tokens.SecurityTokenHandler
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IdentityModel.Tokens.SecurityTokenException
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenException
  nameWithType: SecurityTokenException
  fullName: System.IdentityModel.Tokens.SecurityTokenException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IdentityModel.Tokens.SecurityTokenNotYetValidException
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenNotYetValidException
  nameWithType: SecurityTokenNotYetValidException
  fullName: System.IdentityModel.Tokens.SecurityTokenNotYetValidException
- uid: System.IdentityModel.Tokens.SecurityTokenExpiredException
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenExpiredException
  nameWithType: SecurityTokenExpiredException
  fullName: System.IdentityModel.Tokens.SecurityTokenExpiredException
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SessionSecurityTokenHandler()
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler()
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler()
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<CookieTransform>
  nameWithType: ReadOnlyCollection<CookieTransform>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IdentityModel.CookieTransform>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.CookieTransform
    name: CookieTransform
    nameWithType: CookieTransform
    fullName: CookieTransform
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ApplyTransforms(Byte[],Boolean)
  nameWithType: SessionSecurityTokenHandler.ApplyTransforms(Byte[],Boolean)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(Byte[],Boolean)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanReadToken(XmlReader)
  nameWithType: SessionSecurityTokenHandler.CanReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanValidateToken
  nameWithType: SessionSecurityTokenHandler.CanValidateToken
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanWriteToken
  nameWithType: SessionSecurityTokenHandler.CanWriteToken
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CookieElementName
  nameWithType: SessionSecurityTokenHandler.CookieElementName
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CookieNamespace
  nameWithType: SessionSecurityTokenHandler.CookieNamespace
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  nameWithType: SessionSecurityTokenHandler.CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
- uid: System.IdentityModel.Tokens.SessionSecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SessionSecurityToken
  nameWithType: SessionSecurityToken
  fullName: System.IdentityModel.Tokens.SessionSecurityToken
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CreateToken(SecurityTokenDescriptor)
  nameWithType: SessionSecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
- uid: System.IdentityModel.Tokens.SecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: System.IdentityModel.Tokens.SecurityToken
- uid: System.IdentityModel.Tokens.SecurityTokenDescriptor
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenDescriptor
  nameWithType: SecurityTokenDescriptor
  fullName: System.IdentityModel.Tokens.SecurityTokenDescriptor
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: DefaultCookieTransforms
  nameWithType: SessionSecurityTokenHandler.DefaultCookieTransforms
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: DefaultLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: DefaultTokenLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultTokenLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: GetTokenTypeIdentifiers()
  nameWithType: SessionSecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: LoadCustomConfiguration(XmlNodeList)
  nameWithType: SessionSecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ReadToken(XmlReader)
  nameWithType: SessionSecurityTokenHandler.ReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(XmlReader)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ReadToken(Byte[],SecurityTokenResolver)
  nameWithType: SessionSecurityTokenHandler.ReadToken(Byte[],SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(Byte[],SecurityTokenResolver)
- uid: System.IdentityModel.Selectors.SecurityTokenResolver
  parent: System.IdentityModel.Selectors
  isExternal: false
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ReadToken(XmlReader,SecurityTokenResolver)
  nameWithType: SessionSecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SetTransforms(IEnumerable<CookieTransform>)
  nameWithType: SessionSecurityTokenHandler.SetTransforms(IEnumerable<CookieTransform>)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(IEnumerable<CookieTransform>)
- uid: System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<CookieTransform>
  nameWithType: IEnumerable<CookieTransform>
  fullName: System.Collections.Generic.IEnumerable<System.IdentityModel.CookieTransform>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IdentityModel.CookieTransform>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.CookieTransform
    name: CookieTransform
    nameWithType: CookieTransform
    fullName: CookieTransform
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: TokenLifetime
  nameWithType: SessionSecurityTokenHandler.TokenLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: TokenType
  nameWithType: SessionSecurityTokenHandler.TokenType
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: Transforms
  nameWithType: SessionSecurityTokenHandler.Transforms
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateSession(SessionSecurityToken)
  nameWithType: SessionSecurityTokenHandler.ValidateSession(SessionSecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(SessionSecurityToken)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateToken(SecurityToken)
  nameWithType: SessionSecurityTokenHandler.ValidateToken(SecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(SecurityToken)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<ClaimsIdentity>
  nameWithType: ReadOnlyCollection<ClaimsIdentity>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateToken(SessionSecurityToken,String)
  nameWithType: SessionSecurityTokenHandler.ValidateToken(SessionSecurityToken,String)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(SessionSecurityToken,String)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: WriteToken(SessionSecurityToken)
  nameWithType: SessionSecurityTokenHandler.WriteToken(SessionSecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(SessionSecurityToken)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: WriteToken(XmlWriter,SecurityToken)
  nameWithType: SessionSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SessionSecurityTokenHandler
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ApplyTransforms
  nameWithType: SessionSecurityTokenHandler.ApplyTransforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanReadToken
  nameWithType: SessionSecurityTokenHandler.CanReadToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanValidateToken
  nameWithType: SessionSecurityTokenHandler.CanValidateToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanWriteToken
  nameWithType: SessionSecurityTokenHandler.CanWriteToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CookieElementName
  nameWithType: SessionSecurityTokenHandler.CookieElementName
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CookieNamespace
  nameWithType: SessionSecurityTokenHandler.CookieNamespace
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CreateSessionSecurityToken
  nameWithType: SessionSecurityTokenHandler.CreateSessionSecurityToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CreateToken
  nameWithType: SessionSecurityTokenHandler.CreateToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: DefaultTokenLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultTokenLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: GetTokenTypeIdentifiers
  nameWithType: SessionSecurityTokenHandler.GetTokenTypeIdentifiers
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: LoadCustomConfiguration
  nameWithType: SessionSecurityTokenHandler.LoadCustomConfiguration
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ReadToken
  nameWithType: SessionSecurityTokenHandler.ReadToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SetTransforms
  nameWithType: SessionSecurityTokenHandler.SetTransforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: TokenLifetime
  nameWithType: SessionSecurityTokenHandler.TokenLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: TokenType
  nameWithType: SessionSecurityTokenHandler.TokenType
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: Transforms
  nameWithType: SessionSecurityTokenHandler.Transforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateSession
  nameWithType: SessionSecurityTokenHandler.ValidateSession
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateToken
  nameWithType: SessionSecurityTokenHandler.ValidateToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: WriteToken
  nameWithType: SessionSecurityTokenHandler.WriteToken
