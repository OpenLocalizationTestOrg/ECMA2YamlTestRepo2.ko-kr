### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventSourceCreationData
  id: EventSourceCreationData
  children:
  - System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  - System.Diagnostics.EventSourceCreationData.CategoryCount
  - System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  - System.Diagnostics.EventSourceCreationData.LogName
  - System.Diagnostics.EventSourceCreationData.MachineName
  - System.Diagnostics.EventSourceCreationData.MessageResourceFile
  - System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  - System.Diagnostics.EventSourceCreationData.Source
  langs:
  - csharp
  name: EventSourceCreationData
  nameWithType: EventSourceCreationData
  fullName: System.Diagnostics.EventSourceCreationData
  type: Class
  summary: "로컬 컴퓨터나 원격 컴퓨터에서 이벤트 로그 소스를 만드는 데 구성 설정을 나타냅니다."
  remarks: "이벤트 로그에 지역화 된 엔트리를 쓰기 위한 새 원본을 구성 하려면 EventSourceCreationData 클래스를 사용 합니다. 이 클래스를 사용 하 여 이벤트 로그에서 읽을 필요는 없습니다.       이 클래스에는 새 이벤트 소스 및 관련된 이벤트 로그에 대 한 구성 설정을 정의합니다. 관련된 이벤트 로그는 로컬 컴퓨터 또는 원격 컴퓨터에 있을 수 있습니다. 로컬 컴퓨터에서 기존 또는 새 이벤트 로그에 대 한 새 소스를 만들려면 설정는 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>및 <xref:System.Diagnostics.EventSourceCreationData.Source%2A>EventSourceCreationData 및 호출의 속성은 <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>메서드.</xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> </xref:System.Diagnostics.EventSourceCreationData.Source%2A> </xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 이 메서드가 만드는에서 지정한는 <xref:System.Diagnostics.EventSourceCreationData.Source%2A>속성 및 레지스터 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>.</xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 에 지정 된 이벤트 로그에</xref:System.Diagnostics.EventSourceCreationData.Source%2A> 이벤트 소스 이 동작은 <xref:System.Diagnostics.EventLogInstaller>이벤트 로그에 대 한 이벤트 소스를 등록 하는 클래스</xref:System.Diagnostics.EventLogInstaller> 를 사용 하는 것과 비슷합니다.       사용 <xref:System.Diagnostics.EventLog.WriteEvent%2A>및 <xref:System.Diagnostics.EventLog.WriteEntry%2A>이벤트 로그에 이벤트를 쓰는 메서드</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A> 이벤트를 작성 하는 이벤트 소스를 지정 해야 합니다. 만들 하며 소스와 첫 번째 항목을 기록 하기 전에 이벤트 소스를 구성 합니다.       응용 프로그램의 설치 하는 동안 새 이벤트 소스를 만듭니다. 이렇게 하면 운영 체제 등록 된 이벤트 소스 목록과 해당 구성을 새로 고칠 수 있습니다. 운영 체제에서 이벤트 소스 목록을 새로 고치지 않은 경우 새 소스를 사용 하 여 이벤트 쓰려고 쓰기 작업이 실패 합니다. 사용 하 여 새 원본을 구성할 수는 <xref:System.Diagnostics.EventLogInstaller>, 또는 사용 하는 <xref:System.Diagnostics.EventLog.CreateEventSource%2A>메서드.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> 새 이벤트 소스를 만들려면 컴퓨터에 관리자 권한이 있어야 합니다.       기존 이벤트 로그 또는 새 이벤트 로그에 대 한 이벤트 소스를 만들 수 있습니다. 새 이벤트 로그에 대 한 새 원본을 만들 때 해당 로그에 대 한 소스를 등록 하는 시스템 하지만 첫 번째 항목에 기록할 때 까지는 로그가 만들어지지 않습니다.       각 소스; 한 번에 하나의 이벤트 로그에 쓸 수만 그러나 응용 프로그램 여러 이벤트 로그에 쓸 여러 소스를 사용할 수 있습니다. 예를 들어 응용 프로그램에 다른 이벤트 로그 또는 서로 다른 리소스 파일에 대해 구성 된 여러 소스가 해야 합니다.       기존 소스 구성 세부 정보를 변경 하려면 소스를 삭제 하 고 새 구성으로 만듭니다. 다른 응용 프로그램이 나 구성 요소는 기존 소스를 사용 하는 경우 기존 소스를 삭제 하는 대신 업데이트 된 구성으로 새 소스를 만듭니다.       이벤트 범주, 메시지 문자열에 대 한 지역화 된 리소스가 포함 된 이벤트 소스를 등록할 수 있습니다. 응용 프로그램 이벤트 로그 항목에서는 실제 문자열을 지정 하지 않고 리소스 식별자를 사용 하 여 쓸 수 있습니다. 이벤트 뷰어에서 리소스 식별자를 사용 하 여을 찾아 현재 언어 설정에 따라 지역화 된 리소스 파일에서 해당 문자열을 표시 합니다. 이벤트 범주, 메시지 및 매개 변수 삽입 문자열에 대 한 별도 파일을 등록할 수 있습니다 또는 모든 세 가지 유형의 문자열에 같은 리소스 파일을 등록할 수 있습니다. 사용 하 여는 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, 및 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>원본을 구성 하 여 이벤트 로그에 지역화 된 엔트리를 쓸 속성</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> 응용 프로그램 이벤트 로그에 직접 문자열 값을 쓰는, 이러한 속성을 설정할 필요가 없습니다.       지역화 된 엔트리 또는 직접 문자열을 작성 하기 위한 소스를 구성 합니다. <xref:System.Diagnostics.EventLog.WriteEntry%2A>메서드 이벤트 로그에 직접 지정된 된 문자열을 씁니다; 지역화할 수 있는 메시지 리소스 파일을 사용 하지 않습니다.</xref:System.Diagnostics.EventLog.WriteEntry%2A> 사용 하 여는 <xref:System.Diagnostics.EventLog.WriteEvent%2A>메서드가 지역화 된 메시지 리소스 파일을 사용 하 여 이벤트를 작성할 수 있습니다.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       리소스 식별자와 문자열 값을 사용 하 여 항목을 기록 하는 응용 프로그램을 두 개의 별도 소스를 등록 해야 합니다. 예를 들어 리소스 파일에 대해 하나의 소스를 구성 하 고 해당 소스 <xref:System.Diagnostics.EventLog.WriteEvent%2A>이벤트 로그에 대 한 리소스 식별자를 사용 하 여 항목을 작성 하는 메서드</xref:System.Diagnostics.EventLog.WriteEvent%2A> 를 사용 하 여 그런 다음 리소스 파일 없이 다른 소스를 만들고 해당 소스를 사용 하 여는 <xref:System.Diagnostics.EventLog.WriteEntry%2A>메서드를 해당 소스를 사용 하 여 이벤트 로그에 직접 씁니다.</xref:System.Diagnostics.EventLog.WriteEntry%2A>"
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. The code example verifies that the source does not conflict with an existing event source, and then creates the new event source for the specified event log.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_7_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_7_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_7_1.cs)]"
  syntax:
    content: public class EventSourceCreationData
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: EventSourceCreationData(String,String)
  nameWithType: EventSourceCreationData.EventSourceCreationData(String,String)
  fullName: System.Diagnostics.EventSourceCreationData.EventSourceCreationData(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Diagnostics.EventSourceCreationData&quot;> </xref> 지정 된 이벤트 소스와 이벤트 로그 이름 사용 합니다."
  remarks: "엔트리를 쓸 프로그램 이벤트 로그에 이벤트 로그에 대 한 이벤트 소스를 먼저 만들어야 합니다. 새 소스를 등록 하려면 초기화는 <xref:System.Diagnostics.EventSourceCreationData>인스턴스를 응용 프로그램, 그리고 호출에 대 한 인스턴스 속성을 구성 된 <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>메서드.</xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> </xref:System.Diagnostics.EventSourceCreationData> 소스를 등록 한 후 항목을 사용 하 여 원본에서 작성할 수 있습니다는 <xref:System.Diagnostics.EventLog.WriteEvent%2A>또는 <xref:System.Diagnostics.EventLog.WriteEntry%2A>메서드.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A>       이벤트 범주, 메시지 문자열에 대 한 지역화 된 리소스가 포함 된 이벤트 소스를 등록할 수 있습니다. 응용 프로그램 이벤트 로그 항목에서는 실제 문자열을 지정 하지 않고 리소스 식별자를 사용 하 여 쓸 수 있습니다. 이벤트 뷰어에서 리소스 식별자를 사용 하 여을 찾아 현재 언어 설정에 따라 지역화 된 리소스 파일에서 해당 문자열을 표시 합니다. 이벤트 범주, 메시지 및 매개 변수 삽입 문자열에 대 한 별도 파일을 등록할 수 있습니다 또는 모든 세 가지 유형의 문자열에 같은 리소스 파일을 등록할 수 있습니다. 사용 하 여는 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, 및 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>원본을 구성 하 여 이벤트 로그에 지역화 된 엔트리를 쓸 속성</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> 응용 프로그램 이벤트 로그에 직접 문자열 값을 쓰는, 이러한 속성을 설정할 필요가 없습니다.       지역화 된 엔트리 또는 직접 문자열을 작성 하기 위한 소스를 구성 합니다. 리소스 식별자와 문자열 값을 사용 하 여 항목을 기록 하는 응용 프로그램을 두 개의 별도 소스를 등록 해야 합니다. 예를 들어 리소스 파일에 대해 하나의 소스를 구성 하 고 해당 소스 <xref:System.Diagnostics.EventLog.WriteEvent%2A>이벤트 로그에 대 한 리소스 식별자를 사용 하 여 항목을 작성 하는 메서드</xref:System.Diagnostics.EventLog.WriteEvent%2A> 를 사용 하 여 그런 다음 리소스 파일 없이 다른 소스를 만들고 해당 소스 <xref:System.Diagnostics.EventLog.WriteEntry%2A>이벤트 로그에 직접 문자열을 작성 하는 메서드</xref:System.Diagnostics.EventLog.WriteEntry%2A> 를 사용 하 여       다음 표에서 <xref:System.Diagnostics.EventSourceCreationData>.</xref:System.Diagnostics.EventSourceCreationData> 에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 초기 값 |   |--------------|-------------------|   | <xref:System.Diagnostics.EventSourceCreationData.Source%2A>| `source` 매개 변수입니다. |   | <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>| `logName` 매개 변수입니다. |   | <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>| 로컬 컴퓨터 (&quot;.&quot;). |   | <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|&0; |   | <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>| `null` (`Nothing` Visual basic에서). |   | <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>| `null` (`Nothing` Visual basic에서). |   | <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>| `null` (`Nothing` in Visual Basic).|</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A></xref:System.Diagnostics.EventSourceCreationData.MachineName%2A></xref:System.Diagnostics.EventSourceCreationData.LogName%2A></xref:System.Diagnostics.EventSourceCreationData.Source%2A>"
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/80a35863-8201-4059-9f79-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/80a35863-8201-4059-9f79-_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/80a35863-8201-4059-9f79-_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public EventSourceCreationData (string source, string logName);
    parameters:
    - id: source
      type: System.String
      description: "항목의 소스로 이벤트 로그에 등록 하는 이름입니다."
    - id: logName
      type: System.String
      description: "소스 엔트리는 기록 된 로그의 이름입니다."
  overload: System.Diagnostics.EventSourceCreationData.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount
  id: CategoryCount
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
  fullName: System.Diagnostics.EventSourceCreationData.CategoryCount
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "범주 리소스 파일에서 범주의 수를 가져오거나 설정 합니다."
  remarks: "CategoryCount를 사용 하 여 및 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>지역화 된 범주 문자열을 사용 하 여 이벤트를 작성 하는 속성.</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> 이벤트 뷰어에서 이벤트를 쓸 때 범주를 제공 하는 경우 이벤트 항목에 대 한 범주를 표시 합니다. 이벤트 로그 범주는 필터 이벤트 나 이벤트에 추가 정보를 제공 하는 응용 프로그램 정의 문자열입니다. 예를 들어 응용 프로그램이 서로 다른 구성 요소 또는 여러 작업에 대 한 별도 범주를 정의할 수 있습니다.       이벤트 범주는 선택 사항입니다. 응용 프로그램 범주를 사용 하지 않는 경우는 CategoryCount를 설정 하지 마십시오 및 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>속성.</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>       에 있는 Platform SDK 설명서의 &quot;메시지 컴파일러&quot; 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [http://msdn.microsoft.com](http://msdn.microsoft.com/)합니다."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_2_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_2_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_2_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public int CategoryCount { get; set; }
    return:
      type: System.Int32
      description: "범주 리소스 파일에 있는 범주 수를 지정 합니다. 기본값은&0;입니다."
  overload: System.Diagnostics.EventSourceCreationData.CategoryCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "속성이 설정 된 음수 값 또는 값 보다 큰 &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;합니다."
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  id: CategoryResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "원본에 대 한 범주 문자열이 포함 된 리소스 파일의 경로 가져오거나 설정 합니다."
  remarks: "사용 하 여 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>지역화 된 범주 문자열 CategoryResourceFile 쓸 속성을 사용 하 여 이벤트 및.</xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> 이벤트 뷰어에서 이벤트를 쓸 때 범주를 제공 하는 경우 이벤트 항목에 대 한 범주를 표시 합니다. 이벤트 로그 범주는 필터 이벤트 나 이벤트에 추가 정보를 제공 하는 응용 프로그램 정의 문자열입니다. 예를 들어 응용 프로그램이 서로 다른 구성 요소 또는 여러 작업에 대 한 별도 범주를 정의할 수 있습니다.       이벤트 범주는 선택 사항입니다. 응용 프로그램 범주를 사용 하지 않는 경우 설정 하지 마십시오는 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>및 CategoryResourceFile 속성.</xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>       에 있는 Platform SDK 설명서의 &quot;메시지 컴파일러&quot; 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [http://msdn.microsoft.com](http://msdn.microsoft.com/)합니다."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_10_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_10_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_10_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string CategoryResourceFile { get; set; }
    return:
      type: System.String
      description: "범주 리소스 파일의 경로입니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.CategoryResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.LogName
  id: LogName
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: LogName
  nameWithType: EventSourceCreationData.LogName
  fullName: System.Diagnostics.EventSourceCreationData.LogName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "소스 엔트리를 쓰는 이벤트 로그의 이름을 가져오거나 설정 합니다."
  remarks: "Use the LogName property to identify the event log that your application writes entries to using the new source. The event log can be a new log or an existing log. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log. If you do not explicitly set the LogName property, the event log defaults to the Application log.  \n  \n> [!NOTE]\n>  The Security log is read-only.  \n  \n To target an existing log for the new source, set the LogName property to the existing event log name. To create a new event log for the source, you must set the LogName property. Event log names must consist of printable characters, and cannot include the characters '*', '?', or '\\\\'. The first 8 characters of the event log name must be different from the first 8 characters of existing names of event logs on the specified computer.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the LogName property with the \".evt\" file name extension."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_19_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_19_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_19_1.cs)]"
  syntax:
    content: public string LogName { get; set; }
    return:
      type: System.String
      description: "이벤트 로그의 이름입니다. 이 응용 프로그램, 시스템 또는 사용자 지정 로그 이름을 수 있습니다. 기본값은 &quot;Application&quot;으로 지정 합니다."
  overload: System.Diagnostics.EventSourceCreationData.LogName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.MachineName
  id: MachineName
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
  fullName: System.Diagnostics.EventSourceCreationData.MachineName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "이벤트 원본을 등록할 컴퓨터의 이름을 가져오거나 설정 합니다."
  remarks: "MachineName 값에는 빈 문자열일 수 없습니다. 로컬 컴퓨터에 기본적으로 컴퓨터 이름을 명시적으로 설정 하지 않으면 (&quot;.&quot;).       원격 컴퓨터에서 소스를 등록할 때 충분 한 권한이 있는 레지스트리 값을 쓸 해당 컴퓨터에서 관리자 권한이 있어야 합니다."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_21_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_21_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_21_1.cs)]"
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "이벤트 소스 등록을 시스템의 이름입니다. 기본값은 로컬 컴퓨터 (&quot;.&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "컴퓨터 이름이 올바르지 않습니다."
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  id: MessageResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "서식 지정은 원본에 대 한 문자열 메시지를 포함 하는 메시지 리소스 파일의 경로 가져오거나 설정 합니다."
  remarks: "지역화 된 이벤트 메시지를 쓰거나 이벤트 로그 소스를 구성 하려면 MessageResourceFile 속성을 사용 합니다. 이벤트 메시지는 사용자에 게 이벤트를 설명 하는 응용 프로그램 정의 문자열입니다.       응용 프로그램 리소스 식별자를 사용 하 여 이벤트 로그 항목을 쓸 수 있습니다. 리소스 식별자는 MessageResourceFile에 있는 메시지를 인덱싱합니다. 이벤트 뷰어에서 리소스 식별자를 사용 하 여을 찾아 현재 언어 설정에 따라 지역화 된 메시지 리소스 파일에서 해당 문자열을 표시 합니다.       지역화 된 엔트리 또는 직접 문자열을 작성 하기 위한 이벤트 소스를 구성 합니다. 사용 하 여는 <xref:System.Diagnostics.EventLog.WriteEvent%2A>메서드가 메시지 리소스 파일을 사용 하 여 구성 하는 원본에 대 한 지역화 된 엔트리를 작성할 수 있습니다.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       응용 프로그램이 문자열을 쓰는 이벤트 메시지를 직접 지역화 된 리소스 파일의 리소스 식별자를 사용 하는 대신 MessageResourceFile 속성을 설정 하지 마십시오.       에 있는 Platform SDK 설명서의 &quot;메시지 컴파일러&quot; 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [http://msdn.microsoft.com](http://msdn.microsoft.com/)합니다."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_3_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_3_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_3_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string MessageResourceFile { get; set; }
    return:
      type: System.String
      description: "메시지 리소스 파일의 경로입니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.MessageResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  id: ParameterResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "원본에 대 한 메시지 매개 변수 문자열을 포함 하는 리소스 파일의 경로 가져오거나 설정 합니다."
  remarks: "ParameterResourceFile 속성을 사용 하 여 삽입 된 매개 변수 문자열이 포함 된 지역화 된 이벤트 메시지를 작성 하는 이벤트 로그 소스를 구성할 수 있습니다. 에 지정 된 각 지역화 된 이벤트 메시지는 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>속성에는 입력 문자열에 대 한 자리 표시 자가 포함 될 수 있습니다.</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 이러한 자리 표시자 위치 이벤트 메시지 내에서 언어에 관계 없이 문자열에 대 한 리소스 식별자를 지정 하는 데 사용 됩니다. 이벤트 뷰어는 ParameterResourceFile에서 해당 문자열을 사용 하 여 자리 표시자를 채우고 및 지역화 된 이벤트 항목에 대 한 이벤트 로그 메시지의 형식을 지정 합니다.       메시지 텍스트 파일의 다음 섹션에서 매개 변수 자리 표시자와 문자열을 정의 하는 예를 들어: ```      MessageId = 1501   Severity = Success   Facility = Application   SymbolicName = COMPONENT_STARTING   Language=English   Component %%6050 is starting.   .   ``` 매개 변수 리소스 파일 내에서 삽입 문자열 함께 정의 되어야 합니다는 자리 표시자에 해당 하는 리소스 식별자 아래와 같이: ```   MessageId = 6050   Severity = Success   Facility = Application   SymbolicName = COMPONENT_NAME_MSGID   Language=English   TRIGGER.EXE   .   ``` 지역화 된 엔트리 또는 직접 문자열을 작성 하기 위한 이벤트 소스를 구성 해야 합니다. 사용 하 여는 <xref:System.Diagnostics.EventLog.WriteEvent%2A>메서드가 메시지 리소스 파일을 사용 하 여 구성 하는 원본에 대 한 지역화 된 엔트리를 작성할 수 있습니다.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       응용 프로그램 이벤트 로그에 직접 이벤트 메시지 문자열을 쓰는 경우 또는 경우에 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>ParameterResourceFile 속성을 설정 하지 않고, 속성 매개 변수 삽입 자리 표시자를 사용 하 여 메시지를 포함 되지 않았습니다.</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>       에 있는 Platform SDK 설명서의 &quot;메시지 컴파일러&quot; 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [http://msdn.microsoft.com](http://msdn.microsoft.com/)합니다."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_31_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_31_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_31_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, the message defined for resource identifier 1004 uses a placeholder for a parameter string defined for resource identifier 5002.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string ParameterResourceFile { get; set; }
    return:
      type: System.String
      description: "매개 변수는 리소스 파일의 경로입니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.ParameterResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.Source
  id: Source
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: Source
  nameWithType: EventSourceCreationData.Source
  fullName: System.Diagnostics.EventSourceCreationData.Source
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "이벤트 소스로 이벤트 로그와 등록할 이름을 설정 하거나 가져옵니다."
  remarks: "응용 프로그램의 이름 또는 대형 응용 프로그램 내에서 구성 요소의 이름을 원본 이름은 종종입니다. <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>메서드는 소스를 사용 하 여 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>, <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>새 소스 및 해당 관련된 이벤트 로그에 대 한 대상 컴퓨터에서 레지스트리 값을 만들기 위한 속성</xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> 및</xref:System.Diagnostics.EventSourceCreationData.LogName%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> 새 소스 이름이 기존 원본 이름 또는 대상 컴퓨터에서 기존 이벤트 로그 이름과 일치할 수 없습니다.       원본에 대 한 레지스트리 값을 생성 한 후 응용 프로그램 소스를 사용 하 여 구성된 된 이벤트 로그에 엔트리를 쓸 수 있습니다.       각 소스; 한 번에 하나의 이벤트 로그에 쓸 수만 그러나 응용 프로그램 여러 이벤트 로그에 쓸 여러 소스를 사용할 수 있습니다. 예를 들어 응용 프로그램에 다른 이벤트 로그 또는 서로 다른 리소스 파일에 대해 구성 된 여러 소스가 필요할 수 있습니다."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_13_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_13_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_13_1.cs)]"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "항목의 소스로 이벤트 로그에 등록 하는 이름입니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.Source*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: EventSourceCreationData(String,String)
  nameWithType: EventSourceCreationData.EventSourceCreationData(String,String)
  fullName: System.Diagnostics.EventSourceCreationData.EventSourceCreationData(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
  fullName: System.Diagnostics.EventSourceCreationData.CategoryCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
- uid: System.Diagnostics.EventSourceCreationData.LogName
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: LogName
  nameWithType: EventSourceCreationData.LogName
  fullName: System.Diagnostics.EventSourceCreationData.LogName
- uid: System.Diagnostics.EventSourceCreationData.MachineName
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
  fullName: System.Diagnostics.EventSourceCreationData.MachineName
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.MessageResourceFile
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
- uid: System.Diagnostics.EventSourceCreationData.Source
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: Source
  nameWithType: EventSourceCreationData.Source
  fullName: System.Diagnostics.EventSourceCreationData.Source
- uid: System.Diagnostics.EventSourceCreationData.#ctor*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: EventSourceCreationData
  nameWithType: EventSourceCreationData.EventSourceCreationData
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
- uid: System.Diagnostics.EventSourceCreationData.LogName*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: LogName
  nameWithType: EventSourceCreationData.LogName
- uid: System.Diagnostics.EventSourceCreationData.MachineName*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
- uid: System.Diagnostics.EventSourceCreationData.Source*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: Source
  nameWithType: EventSourceCreationData.Source
