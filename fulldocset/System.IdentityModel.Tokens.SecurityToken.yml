### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SecurityToken
  id: SecurityToken
  children:
  - System.IdentityModel.Tokens.SecurityToken.#ctor
  - System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1
  - System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1
  - System.IdentityModel.Tokens.SecurityToken.Id
  - System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  - System.IdentityModel.Tokens.SecurityToken.ValidFrom
  - System.IdentityModel.Tokens.SecurityToken.ValidTo
  langs:
  - csharp
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: System.IdentityModel.Tokens.SecurityToken
  type: Class
  summary: "모든 보안 토큰을 구현 하는 데 사용 되는 기본 클래스를 나타냅니다."
  remarks: "인증 자격 증명을 제공 하거나 메시지를 보호 하려면 보안 토큰을 사용 합니다.       보안 토큰 인증 자격 증명, 암호화 키 자료를 제공 하는 데 사용 하거나 수는 보안 토큰 서비스 (STS)를 주제에 대 한 클레임의 컬렉션에서 발급 한 보안 토큰의 경우. 모든 보안 토큰 SecurityToken 클래스에서 파생 됩니다.       .NET 4.5 부터는 Windows Identity Foundation (WIF)가.NET Framework에 완전히 통합 되었으며 및 WIF에 의해 노출 하는 클래스는 기본 방법은 코드의 보안 토큰을 처리 합니다. WIF에서 보안 토큰으로 serialize 되 고 역직렬화 하 고 해당 xml에서 표현 되며 유효성을 검사 하는 <xref:System.IdentityModel.Tokens.SecurityTokenHandler>기본 클래스에서</xref:System.IdentityModel.Tokens.SecurityTokenHandler> 파생 된 클래스를 사용 하 여 뿐 아니라 토큰이 올바른지를 확인 하지만 반환 하는 토큰 유효성을 검사 하는 <xref:System.Security.Claims.ClaimsIdentity>인증 및 권한 부여 결정에 사용할 수 있는 토큰을 통한 인스턴스.</xref:System.Security.Claims.ClaimsIdentity> <xref:System.Security.Claims.ClaimsIdentity>토큰 처리기의 구현에 의해 생성 되는 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>클레임은 토큰에 내장 경우와 마찬가지로 잘 자체를 입력 하는 토큰에 포함 된 클레임에 있는 메서드의.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> </xref:System.Security.Claims.ClaimsIdentity>       WIF는 다음과 같은 유형의 보안 토큰에 대 한 지원 포함:- <xref:System.IdentityModel.Tokens.Saml2SecurityToken>: SAML 2.0 어설션 기반으로 하는 보안 토큰을 나타냅니다.</xref:System.IdentityModel.Tokens.Saml2SecurityToken> 일반적으로이 토큰 유형이 WS-트러스트 또는 WS-페더레이션 보안 토큰 요청 (RST)에 대 한 응답에서 보안 토큰 서비스에서 발생 됩니다.      - <xref:System.IdentityModel.Tokens.SamlSecurityToken>: SAML 1.1 어설션 기반으로 하는 보안 토큰을 나타냅니다.</xref:System.IdentityModel.Tokens.SamlSecurityToken> 일반적으로이 토큰 유형이 WS-트러스트 또는 WS-페더레이션 보안 토큰 요청 (RST)에 대 한 응답에서 보안 토큰 서비스에서 발생 됩니다.      - <xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken>및 <xref:System.IdentityModel.Tokens.KerberosReceiverSecurityToken>: 수신 하거나 SOAP 메시지에서 전송 되는 Kerberos 티켓을 기반으로 하는 보안 토큰을 나타내는 <xref:System.IdentityModel.Tokens.RsaSecurityToken>: RSA 알고리즘을 사용 하 여 만든 키를 기반으로 하는 보안 토큰을 나타냅니다.</xref:System.IdentityModel.Tokens.RsaSecurityToken> </xref:System.IdentityModel.Tokens.KerberosReceiverSecurityToken> </xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken>      - <xref:System.IdentityModel.Tokens.SessionSecurityToken>: 세션에 대 한 정보를 포함 하는 보안 토큰을 나타냅니다.</xref:System.IdentityModel.Tokens.SessionSecurityToken>      - <xref:System.IdentityModel.Tokens.UserNameSecurityToken>: 사용자 이름 및 암호를 기반으로 하는 보안 토큰을 나타냅니다.</xref:System.IdentityModel.Tokens.UserNameSecurityToken>      - <xref:System.IdentityModel.Tokens.WindowsSecurityToken>: Windows 도메인 또는 사용자 계정의 id를 기반으로 하는 보안 토큰을 나타냅니다.</xref:System.IdentityModel.Tokens.WindowsSecurityToken>      - <xref:System.IdentityModel.Tokens.X509SecurityToken>: X.509 인증서를 기반으로 하는 보안 토큰을 나타냅니다.</xref:System.IdentityModel.Tokens.X509SecurityToken>      - <xref:System.IdentityModel.Tokens.X509WindowsSecurityToken>: Windows 도메인 사용자 또는 로컬 컴퓨터 사용자 계정에 매핑되는 X.509 인증서를 기반으로 하는 보안 토큰을 나타냅니다.</xref:System.IdentityModel.Tokens.X509WindowsSecurityToken>       두 개의 다른 보안 토큰 클래스 <xref:System.IdentityModel.Tokens.GenericXmlSecurityToken>및 <xref:System.IdentityModel.Tokens.EncryptedSecurityToken>는 일반적인 사례를 처리 하는 데 사용할 수 있습니다.</xref:System.IdentityModel.Tokens.EncryptedSecurityToken> </xref:System.IdentityModel.Tokens.GenericXmlSecurityToken>       세 가지 주요 범주에 말하는 보안 토큰을 해당 하는 광범위 하 게:-토큰을 수행 하거나 암호화를 참조 하는 키 자료. 예를 들어는 <xref:System.IdentityModel.Tokens.RsaSecurityToken>및 <xref:System.IdentityModel.Tokens.X509SecurityToken>형식은이 목적을 위해 종종 사용 됩니다.</xref:System.IdentityModel.Tokens.X509SecurityToken> </xref:System.IdentityModel.Tokens.RsaSecurityToken>      -사용자가 이미 인증 된 자격 증명을 나타내는 토큰입니다. 예를 들어는 <xref:System.IdentityModel.Tokens.UserNameSecurityToken>, <xref:System.IdentityModel.Tokens.WindowsSecurityToken>, 및 인증서를 사용 하 여 인증 된 사용자의 경우는 <xref:System.IdentityModel.Tokens.X509SecurityToken>형식.</xref:System.IdentityModel.Tokens.X509SecurityToken> </xref:System.IdentityModel.Tokens.WindowsSecurityToken> </xref:System.IdentityModel.Tokens.UserNameSecurityToken>      -WS-트러스트 또는 Ws-federation 프로토콜을 사용 하 여 보안 토큰 요청에 대 한 응답에서 보안 토큰 서비스 (STS)에서 발급 된 토큰입니다. 에이 헤더가 반환 일반적으로 `wst:RequestSecurityTokenResponse` XML 조각입니다. <xref:System.IdentityModel.Tokens.Saml2SecurityToken>및 <xref:System.IdentityModel.Tokens.SamlSecurityToken>형식 이러한 토큰을 나타내는 데 가장 자주 사용 되.</xref:System.IdentityModel.Tokens.SamlSecurityToken> </xref:System.IdentityModel.Tokens.Saml2SecurityToken>       특별 한 토큰 형식에는 <xref:System.IdentityModel.Tokens.SessionSecurityToken>, 활성 또는 수동 시나리오에서 세션을 사용 하는 경우에 보안 주체를 다시 만드는 데 필요한 정보를 포함 합니다.</xref:System.IdentityModel.Tokens.SessionSecurityToken>       기능을 추가 하려면 기존 토큰 형식에는 토큰에 추가 하는 모든 새 요소를 지원 하기 위해 특정 형식 및 연결 된 토큰 처리기에서 파생할 수 있습니다. 새 토큰 형식에 대 한 지원을 추가할 SecurityToken 클래스에서 직접 파생 될 수 있습니다. 이렇게 하면 클래스를 만드는 토큰 처리기 <xref:System.IdentityModel.Tokens.SecurityTokenHandler>클래스</xref:System.IdentityModel.Tokens.SecurityTokenHandler> 에서 파생 해야 합니다. 토큰 사용 하는 방법을 따라 할 수도 있습니다 <xref:System.IdentityModel.Tokens.IssuerTokenResolver> <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>클래스</xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> 에서 파생 하 여 하나 이상의 사용자 지정 키 식별자 절 형식을 모두 클래스</xref:System.IdentityModel.Tokens.IssuerTokenResolver> 에서 파생 하 여 사용자 지정 토큰 확인자를 만들려면"
  example:
  - "The code examples that are used in the SecurityToken topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the implementation of the `SimpleWebToken` class. This class extends SecurityToken.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#2](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#2)]"
  syntax:
    content: public abstract class SecurityToken
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: SecurityToken()
  nameWithType: SecurityToken.SecurityToken()
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityToken()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "초기화 하는 파생된 클래스의 생성자에 의해 호출 된 <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref> 클래스입니다."
  syntax:
    content: protected SecurityToken ();
    parameters: []
  overload: System.IdentityModel.Tokens.SecurityToken.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1
  id: CanCreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: CanCreateKeyIdentifierClause()
  nameWithType: SecurityToken.CanCreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  syntax:
    content: 'public virtual bool CanCreateKeyIdentifierClause<T> () where T : System.IdentityModel.Tokens.SecurityKeyIdentifierClause;'
    parameters: []
    return:
      type: System.Boolean
      description: "추가할 수 있습니다."
  overload: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause<T>*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1
  id: CreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: CreateKeyIdentifierClause()
  nameWithType: SecurityToken.CreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  syntax:
    content: 'public virtual T CreateKeyIdentifierClause<T> () where T : System.IdentityModel.Tokens.SecurityKeyIdentifierClause;'
    parameters: []
    return:
      type: T
      description: "추가할 수 있습니다."
  overload: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause<T>*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.Id
  id: Id
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: Id
  nameWithType: SecurityToken.Id
  fullName: System.IdentityModel.Tokens.SecurityToken.Id
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "보안 토큰의 고유 식별자를 가져옵니다."
  remarks: "보안 토큰이 XML로 serialize 되는 경우에 일반적으로 `Id` 특성이 보안 토큰은 Id 속성의 값으로 설정 됩니다."
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the Id property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#4](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#4)]"
  syntax:
    content: public abstract string Id { get; }
    return:
      type: System.String
      description: "보안 토큰의 고유 식별자입니다."
  overload: System.IdentityModel.Tokens.SecurityToken.Id*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  id: MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "이 인스턴스의 키 식별자가 지정 된 키 식별자로 확인 될 수 있는지 여부를 나타내는 값을 반환 합니다."
  remarks: "기본 구현은 형식의 키 식별자 절을 지원<xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause></xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause>"
  syntax:
    content: public virtual bool MatchesKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> 이 인스턴스와 비교할 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <code> keyIdentifierClause </code> 는 <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> 동일한 고유 식별자를 갖고는 <xref:System.IdentityModel.Tokens.SecurityToken.Id*>속성, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.IdentityModel.Tokens.SecurityToken.Id*>"
  overload: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  id: ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정 된 키 식별자 절에 대 한 키를 가져옵니다."
  remarks: "ResolveKeyIdentifierClause 메서드 호출의 <xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>를 먼저 지정 된 키 식별자 절이이 인스턴스와 같은 인지를 확인 합니다.</xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>       첫 번째 요소를 반환 하는 기본 구현은 <xref:System.IdentityModel.Tokens.SecurityToken.SecurityKeys%2A>컬렉션은 컬렉션이 비어 있지 않은 경우 <xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>반환 `true`, 그렇지 않으면 반환 `null`.</xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A> </xref:System.IdentityModel.Tokens.SecurityToken.SecurityKeys%2A>"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityKey ResolveKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> 에 대 한 키를 가져와야 합니다."
    return:
      type: System.IdentityModel.Tokens.SecurityKey
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> 키를 나타내는입니다."
  overload: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  id: SecurityKeys
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: SecurityKeys
  nameWithType: SecurityToken.SecurityKeys
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "보안 토큰과 연결 된 암호화 키를 가져옵니다."
  remarks: "사용 하 여는 <xref:System.IdentityModel.Tokens.SamlSecurityToken.SecurityKeys%2A>속성을 토큰 또는 SOAP 메시지를 보호 하기 위해이 보안 토큰에 대 한 암호화 키를 설정 합니다.</xref:System.IdentityModel.Tokens.SamlSecurityToken.SecurityKeys%2A> 키 데 사용할 수, 특히, 디지털 서명 또는 토큰 또는 SOAP 메시지를 암호화 합니다."
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the SecurityKeys property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#5](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#5)]"
  syntax:
    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Tokens.SecurityKey> SecurityKeys { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityKey}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; 형식의 <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> 보안 토큰과 연결 된 키 집합이 들어 있는입니다."
  overload: System.IdentityModel.Tokens.SecurityToken.SecurityKeys*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.ValidFrom
  id: ValidFrom
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: ValidFrom
  nameWithType: SecurityToken.ValidFrom
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidFrom
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "첫 번째 시작을이 보안 토큰이 유효한 시간을 가져옵니다."
  remarks: "ValidFrom를 사용 하 여 및 <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>속성의 기간을 결정 하는 <xref:System.IdentityModel.Tokens.SecurityToken>토큰은 유효 합니다.</xref:System.IdentityModel.Tokens.SecurityToken> </xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> ValidFrom 및 <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>속성 시간과 첫 번째는 보안 토큰은 각각 유효한 시간 나타냅니다.</xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>"
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the ValidFrom property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#6](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#6)]  \n[!code-cs[WifCustomTokenST#8](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#8)]"
  syntax:
    content: public abstract DateTime ValidFrom { get; }
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime>시작 시간을이 보안 토큰이 먼저 유효한 나타내는입니다.</xref:System.DateTime>"
  overload: System.IdentityModel.Tokens.SecurityToken.ValidFrom*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.ValidTo
  id: ValidTo
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: ValidTo
  nameWithType: SecurityToken.ValidTo
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidTo
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "이 보안 토큰이 유효한 시간을 마지막을 종료 가져옵니다."
  remarks: "사용 하 여는 <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>및 ValidTo 속성은 기간을 결정 하는 <xref:System.IdentityModel.Tokens.SecurityToken>토큰은 유효 합니다.</xref:System.IdentityModel.Tokens.SecurityToken> </xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>ValidTo 속성 보안 토큰의 유효, 각각 시간에 첫 번째 및 마지막 기간의 시작 종료를 나타냅니다.</xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>"
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the ValidTo property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#7](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#7)]  \n[!code-cs[WifCustomTokenST#8](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#8)]"
  syntax:
    content: public abstract DateTime ValidTo { get; }
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime>하는 마지막 종료 나타내는이 보안 토큰이 유효한 시간을.</xref:System.DateTime>"
  overload: System.IdentityModel.Tokens.SecurityToken.ValidTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IdentityModel.Tokens.SecurityToken.#ctor
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityToken()
  nameWithType: SecurityToken.SecurityToken()
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityToken()
- uid: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CanCreateKeyIdentifierClause()
  nameWithType: SecurityToken.CanCreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CreateKeyIdentifierClause()
  nameWithType: SecurityToken.CreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause()
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.IdentityModel.Tokens.SecurityToken.Id
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: Id
  nameWithType: SecurityToken.Id
  fullName: System.IdentityModel.Tokens.SecurityToken.Id
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
- uid: System.IdentityModel.Tokens.SecurityKey
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKey
  nameWithType: SecurityKey
  fullName: System.IdentityModel.Tokens.SecurityKey
- uid: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityKeys
  nameWithType: SecurityToken.SecurityKeys
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityKey}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<SecurityKey>
  nameWithType: ReadOnlyCollection<SecurityKey>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Tokens.SecurityKey>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IdentityModel.Tokens.SecurityKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: SecurityKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Tokens.SecurityToken.ValidFrom
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidFrom
  nameWithType: SecurityToken.ValidFrom
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidFrom
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IdentityModel.Tokens.SecurityToken.ValidTo
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidTo
  nameWithType: SecurityToken.ValidTo
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidTo
- uid: System.IdentityModel.Tokens.SecurityToken.#ctor*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityToken
  nameWithType: SecurityToken.SecurityToken
- uid: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause<T>*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CanCreateKeyIdentifierClause<T>
  nameWithType: SecurityToken.CanCreateKeyIdentifierClause<T>
- uid: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause<T>*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CreateKeyIdentifierClause<T>
  nameWithType: SecurityToken.CreateKeyIdentifierClause<T>
- uid: System.IdentityModel.Tokens.SecurityToken.Id*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: Id
  nameWithType: SecurityToken.Id
- uid: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: MatchesKeyIdentifierClause
  nameWithType: SecurityToken.MatchesKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ResolveKeyIdentifierClause
  nameWithType: SecurityToken.ResolveKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityToken.SecurityKeys*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityKeys
  nameWithType: SecurityToken.SecurityKeys
- uid: System.IdentityModel.Tokens.SecurityToken.ValidFrom*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidFrom
  nameWithType: SecurityToken.ValidFrom
- uid: System.IdentityModel.Tokens.SecurityToken.ValidTo*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidTo
  nameWithType: SecurityToken.ValidTo
