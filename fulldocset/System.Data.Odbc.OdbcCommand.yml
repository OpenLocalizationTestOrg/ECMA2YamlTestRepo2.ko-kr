### YamlMime:ManagedReference
items:
- uid: System.Data.Odbc.OdbcCommand
  id: OdbcCommand
  children:
  - System.Data.Odbc.OdbcCommand.#ctor
  - System.Data.Odbc.OdbcCommand.#ctor(System.String)
  - System.Data.Odbc.OdbcCommand.#ctor(System.String,System.Data.Odbc.OdbcConnection)
  - System.Data.Odbc.OdbcCommand.#ctor(System.String,System.Data.Odbc.OdbcConnection,System.Data.Odbc.OdbcTransaction)
  - System.Data.Odbc.OdbcCommand.Cancel
  - System.Data.Odbc.OdbcCommand.CommandText
  - System.Data.Odbc.OdbcCommand.CommandTimeout
  - System.Data.Odbc.OdbcCommand.CommandType
  - System.Data.Odbc.OdbcCommand.Connection
  - System.Data.Odbc.OdbcCommand.CreateDbParameter
  - System.Data.Odbc.OdbcCommand.CreateParameter
  - System.Data.Odbc.OdbcCommand.DbConnection
  - System.Data.Odbc.OdbcCommand.DbParameterCollection
  - System.Data.Odbc.OdbcCommand.DbTransaction
  - System.Data.Odbc.OdbcCommand.DesignTimeVisible
  - System.Data.Odbc.OdbcCommand.Dispose(System.Boolean)
  - System.Data.Odbc.OdbcCommand.ExecuteDbDataReader(System.Data.CommandBehavior)
  - System.Data.Odbc.OdbcCommand.ExecuteNonQuery
  - System.Data.Odbc.OdbcCommand.ExecuteReader
  - System.Data.Odbc.OdbcCommand.ExecuteReader(System.Data.CommandBehavior)
  - System.Data.Odbc.OdbcCommand.ExecuteScalar
  - System.Data.Odbc.OdbcCommand.Parameters
  - System.Data.Odbc.OdbcCommand.Prepare
  - System.Data.Odbc.OdbcCommand.ResetCommandTimeout
  - System.Data.Odbc.OdbcCommand.System#ICloneable#Clone
  - System.Data.Odbc.OdbcCommand.Transaction
  - System.Data.Odbc.OdbcCommand.UpdatedRowSource
  langs:
  - csharp
  name: OdbcCommand
  nameWithType: OdbcCommand
  fullName: System.Data.Odbc.OdbcCommand
  type: Class
  summary: "SQL 문 또는 데이터 원본에 대해 실행할 저장된 프로시저를 나타냅니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "데이터 원본에 대해 명령을 실행 하기 위한 다음 메서드를 제공 하는 OdbcCommand 클래스: | 항목 | 설명 |   |----------|-----------------|   | <xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A>| 행을 반환 하는 명령을 실행 합니다. |   | <xref:System.Data.Odbc.OdbcCommand.ExecuteNonQuery%2A>| SQL INSERT, DELETE, UPDATE 및 SET 문과 같은 명령을 실행 합니다. |   | <xref:System.Data.Odbc.OdbcCommand.ExecuteScalar%2A>| 예를 들어 집계 값을 단일 값을 데이터베이스에서 검색 합니다. |       다시 설정할 수 있습니다는 <xref:System.Data.Odbc.OdbcCommand.CommandText%2A>속성 및 OdbcCommand 개체 다시 사용 합니다.</xref:System.Data.Odbc.OdbcCommand.CommandText%2A> </xref:System.Data.Odbc.OdbcCommand.ExecuteScalar%2A> </xref:System.Data.Odbc.OdbcCommand.ExecuteNonQuery%2A> </xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A> 그러나를 닫아야는 <xref:System.Data.Odbc.OdbcDataReader>전에 이전 또는 새 명령을 실행할 수 있습니다.</xref:System.Data.Odbc.OdbcDataReader>       명령 실행으로 인해 심각한 경우 <xref:System.Data.Odbc.OdbcException>같은 SQL Server 심각도 20 이상의 <xref:System.Data.Odbc.OdbcConnection>닫힐 수 있습니다.</xref:System.Data.Odbc.OdbcConnection> </xref:System.Data.Odbc.OdbcException> 그러나 사용자는 다시 연결 하 고 계속할 수 있습니다."
  example:
  - "The following example uses <xref:System.Data.Odbc.OdbcCommand.ExecuteNonQuery%2A>.  \n  \n [!code-cs[Classic WebData OdbcCommand#1](~/add/codesnippet/csharp/t-system.data.odbc.odbcc_0_1.cs)]\n [!code-vb[Classic WebData OdbcCommand#1](~/add/codesnippet/visualbasic/t-system.data.odbc.odbcc_0_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("RecordsAffected")]

      [System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.OdbcCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem(true)]

      public sealed class OdbcCommand : System.Data.Common.DbCommand, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbCommand
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  - System.Data.Common.DbCommand.ExecuteNonQueryAsync
  - System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbCommand.ExecuteReaderAsync
  - System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior)
  - System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  - System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbCommand.ExecuteScalarAsync
  - System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbCommand.System#Data#IDbCommand#Connection
  - System.Data.Common.DbCommand.System#Data#IDbCommand#CreateParameter
  - System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader
  - System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)
  - System.Data.Common.DbCommand.System#Data#IDbCommand#Parameters
  - System.Data.Common.DbCommand.System#Data#IDbCommand#Transaction
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.#ctor
  id: '#ctor'
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: OdbcCommand()
  nameWithType: OdbcCommand.OdbcCommand()
  fullName: System.Data.Odbc.OdbcCommand.OdbcCommand()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.Odbc.OdbcCommand&quot;> </xref> 클래스입니다."
  remarks: "기본 생성자는 모든 필드를를 기본값으로 초기화합니다. 다음 표에서 <xref:System.Data.Odbc.OdbcCommand>안내 하십시오.</xref:System.Data.Odbc.OdbcCommand> 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 초기 값 |   |----------------|-------------------|   | <xref:System.Data.Odbc.OdbcCommand.CommandText%2A>| 빈 문자열 (&quot;&quot;) |   | <xref:System.Data.Odbc.OdbcCommand.CommandTimeout%2A>|&30; |   | <xref:System.Data.Odbc.OdbcCommand.CommandType%2A>| `Text`|   | <xref:System.Data.Odbc.OdbcCommand.Connection%2A>|null|</xref:System.Data.Odbc.OdbcCommand.Connection%2A></xref:System.Data.Odbc.OdbcCommand.CommandType%2A></xref:System.Data.Odbc.OdbcCommand.CommandTimeout%2A></xref:System.Data.Odbc.OdbcCommand.CommandText%2A>"
  syntax:
    content: public OdbcCommand ();
    parameters: []
  overload: System.Data.Odbc.OdbcCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: OdbcCommand(String)
  nameWithType: OdbcCommand.OdbcCommand(String)
  fullName: System.Data.Odbc.OdbcCommand.OdbcCommand(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.Odbc.OdbcCommand&quot;> </xref> 쿼리 텍스트와 함께 클래스입니다."
  syntax:
    content: public OdbcCommand (string cmdText);
    parameters:
    - id: cmdText
      type: System.String
      description: "쿼리 텍스트입니다."
  overload: System.Data.Odbc.OdbcCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.#ctor(System.String,System.Data.Odbc.OdbcConnection)
  id: '#ctor(System.String,System.Data.Odbc.OdbcConnection)'
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: OdbcCommand(String,OdbcConnection)
  nameWithType: OdbcCommand.OdbcCommand(String,OdbcConnection)
  fullName: System.Data.Odbc.OdbcCommand.OdbcCommand(String,OdbcConnection)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.Odbc.OdbcCommand&quot;> </xref> 쿼리 텍스트와 함께 클래스 및 <xref href=&quot;System.Data.Odbc.OdbcConnection&quot;> </xref> 개체입니다."
  syntax:
    content: public OdbcCommand (string cmdText, System.Data.Odbc.OdbcConnection connection);
    parameters:
    - id: cmdText
      type: System.String
      description: "쿼리 텍스트입니다."
    - id: connection
      type: System.Data.Odbc.OdbcConnection
      description: "<xref href=&quot;System.Data.Odbc.OdbcConnection&quot;> </xref> 데이터 원본에 대 한 연결을 나타내는 개체입니다."
  overload: System.Data.Odbc.OdbcCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.#ctor(System.String,System.Data.Odbc.OdbcConnection,System.Data.Odbc.OdbcTransaction)
  id: '#ctor(System.String,System.Data.Odbc.OdbcConnection,System.Data.Odbc.OdbcTransaction)'
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: OdbcCommand(String,OdbcConnection,OdbcTransaction)
  nameWithType: OdbcCommand.OdbcCommand(String,OdbcConnection,OdbcTransaction)
  fullName: System.Data.Odbc.OdbcCommand.OdbcCommand(String,OdbcConnection,OdbcTransaction)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.Odbc.OdbcCommand&quot;> </xref> 쿼리 텍스트와 함께 클래스는 <xref href=&quot;System.Data.Odbc.OdbcConnection&quot;> </xref> 개체 및 <xref:System.Data.Odbc.OdbcCommand.Transaction*>.</xref:System.Data.Odbc.OdbcCommand.Transaction*>"
  remarks: "다음 표에서 <xref:System.Data.Odbc.OdbcCommand>.</xref:System.Data.Odbc.OdbcCommand> 이 구현의 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 초기 값 |   |----------------|-------------------|   | <xref:System.Data.Odbc.OdbcCommand.CommandText%2A>| `cmdText`|   | <xref:System.Data.Odbc.OdbcCommand.CommandTimeout%2A>|&30; |   | <xref:System.Data.Odbc.OdbcCommand.CommandType%2A>| `Text`|   | <xref:System.Data.Odbc.OdbcCommand.Connection%2A>| 새 <xref:System.Data.Odbc.OdbcConnection>하는 값에 대 한는 `connection` 매개 변수입니다. |       관련된 속성을 설정 하 여 이러한 매개 변수 중 하나에 대 한 값을 변경할 수 있습니다.</xref:System.Data.Odbc.OdbcConnection> </xref:System.Data.Odbc.OdbcCommand.Connection%2A> </xref:System.Data.Odbc.OdbcCommand.CommandType%2A> </xref:System.Data.Odbc.OdbcCommand.CommandTimeout%2A> </xref:System.Data.Odbc.OdbcCommand.CommandText%2A>"
  syntax:
    content: public OdbcCommand (string cmdText, System.Data.Odbc.OdbcConnection connection, System.Data.Odbc.OdbcTransaction transaction);
    parameters:
    - id: cmdText
      type: System.String
      description: "쿼리 텍스트입니다."
    - id: connection
      type: System.Data.Odbc.OdbcConnection
      description: "<xref href=&quot;System.Data.Odbc.OdbcConnection&quot;> </xref> 데이터 원본에 대 한 연결을 나타내는 개체입니다."
    - id: transaction
      type: System.Data.Odbc.OdbcTransaction
      description: "트랜잭션은 <xref href=&quot;System.Data.Odbc.OdbcCommand&quot;> </xref> 실행 합니다."
  overload: System.Data.Odbc.OdbcCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.Cancel
  id: Cancel
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: Cancel()
  nameWithType: OdbcCommand.Cancel()
  fullName: System.Data.Odbc.OdbcCommand.Cancel()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "실행을 취소 하려고 한 <xref href=&quot;System.Data.Odbc.OdbcCommand&quot;> </xref>합니다."
  remarks: "가 취소할 경우 아무 동작도 발생 합니다. 그러나 처리 중인 명령을 취소 시도가 실패 하는 경우 예외가 생성 되지 않습니다.       스레드 하나에 대 한 쿼리를 취소 하려면 취소는 다른 스레드에서 호출 되어야 합니다. 비동기적으로 명령을 실행할 수 없습니다 때문에 <xref:System.Data.Odbc.OdbcCommand>, 다른 스레드에서 명령을 취소 하려면 하나의 스레드를 동기적으로 실행 해야 합니다.</xref:System.Data.Odbc.OdbcCommand> 즉는 <xref:System.Data.Odbc.OdbcCommand>개체 두 스레드에서 액세스할 수 있어야 합니다.</xref:System.Data.Odbc.OdbcCommand>"
  syntax:
    content: public override void Cancel ();
    parameters: []
  overload: System.Data.Odbc.OdbcCommand.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.CommandText
  id: CommandText
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: CommandText
  nameWithType: OdbcCommand.CommandText
  fullName: System.Data.Odbc.OdbcCommand.CommandText
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "SQL 문 또는 데이터 원본에 대해 실행할 저장된 프로시저를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "경우는 <xref:System.Data.IDbCommand.CommandType%2A>속성이 `StoredProcedure`, 표준 ODBC 저장 프로시저 이스케이프 시퀀스를 사용 하 여 CommandText 속성을 설정 해야 합니다.</xref:System.Data.IDbCommand.CommandType%2A> CommandText 저장된 프로시저의 이름으로 설정 해도 다른.NET Framework 데이터 공급자에 대해서와 마찬가지로 작동 하지 않습니다.       외부 조인 및 스칼라 함수 호출 등의 여러 언어 기능은 데이터 원본에 일반적으로 구현 됩니다. 이러한 기능에 대 한 구문에도 일반적으로 데이터 소스 관련 됩니다. ODBC는 다음 언어 기능에 대 한 표준 구문을 포함 하는 이스케이프 시퀀스를 정의 하는 따라서: 숫자와 같이-날짜, 시간, 타임 스탬프 및 날짜/시간 간격 리터럴-스칼라 함수, 문자열 및 데이터 형식 변환 함수-같은 조건자 이스케이프 문자-외부 조인은-프로시저 호출 ODBC에서 사용 되는 이스케이프 시퀀스는 다음과 같습니다: ```   {extension}   ``` 이 이스케이프 시퀀스를 인식 하 고 ODBC 드라이버에서 구문 분석 합니다. 그런 다음 데이터 소스 관련 문법와 이스케이프 시퀀스 대체합니다.       프로시저는 실행 가능한 개체 데이터 소스에 저장 합니다. 일반적으로 미리 컴파일된 하나 이상의 SQL 문 프로시저 호출에 대 한 이스케이프 시퀀스는 ```   {[?=]call procedure-name[([parameter][,[parameter]]...)]}   ``` 여기서 `procedure-name` 프로시저의 이름을 지정 하 고 `parameter` 프로시저 매개 변수를 지정 합니다.       명령이 Execute 메서드 중 하나를 호출 하면이 저장된 프로시저를 실행 합니다 (예를 들어 <xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A>또는 <xref:System.Data.Odbc.OdbcCommand.ExecuteNonQuery%2A>).</xref:System.Data.Odbc.OdbcCommand.ExecuteNonQuery%2A> </xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A>       설정할 수 없습니다.는 <xref:System.Data.Odbc.OdbcCommand.Connection%2A>, <xref:System.Data.Odbc.OdbcCommand.CommandType%2A>및 CommandText 속성은 현재 연결 execute 또는 인출 작업을 수행 하는 경우.</xref:System.Data.Odbc.OdbcCommand.CommandType%2A> </xref:System.Data.Odbc.OdbcCommand.Connection%2A>       ODBC.NET 공급자는 SQL 문 또는 저장된 프로시저에 의해 호출에 매개 변수 전달에 대 한 명명 된 매개 변수를 지원 하지 않습니다는 <xref:System.Data.Odbc.OdbcCommand>때 <xref:System.Data.Odbc.OdbcCommand.CommandType%2A>로 설정 된 `Text`.</xref:System.Data.Odbc.OdbcCommand.CommandType%2A> </xref:System.Data.Odbc.OdbcCommand> 이 경우 물음표 (?) 자리 표시자를 사용 해야 합니다. 예를 들어: ```   SELECT * FROM Customers WHERE CustomerID = ?   ``` 순서를 따라서 <xref:System.Data.Odbc.OdbcParameter>개체에 추가 됩니다는 <xref:System.Data.Odbc.OdbcParameterCollection>매개 변수에 물음표 자리 표시자의 위치와 직접 일치 해야 합니다.</xref:System.Data.Odbc.OdbcParameterCollection> </xref:System.Data.Odbc.OdbcParameter>       매개 변수에 null 값이 있으면.NET Framework Data Provider for ODBC 여전히 해당 매개 변수를 바인딩합니다 하지만 null 값이 아니라 SQL_DEFAULT_PARAM을 사용 하 여 정의 된 기본 매개 변수를 사용 합니다. 예를 들어는 <xref:System.Data.Odbc.OdbcParameterCollection>: ```   {1, null, 2}   ``` CommandText 속성에 전달 되: ```   {call sp(?, ?, ?)}   ``` .NET Framework Data Provider for ODBC는 첫 번째 매개 변수 값 1, 2, 값에 세 번째 매개 변수 및 SQL_DEFAULT_PARAM으로 두 번째 매개 변수 바인딩 하면.</xref:System.Data.Odbc.OdbcParameterCollection> 그러나이 동작은 드라이버에 따라 다릅니다. 드라이버는이 기능을 지원 하지 않는 경우 바로 전달 하지 마십시오 값에서 매개 변수. 예를 들어 사용는 <xref:System.Data.Odbc.OdbcParameterCollection>: ```   {1, 2}   ``` CommandText 속성에서 다음을 설정 하 고: ```   {call sp(?, null, ?)}   ```       >  [!NOTE] > 매개 변수를 생략 하면 다른 매개 변수에서 구분 하는 쉼표 여전히 표시 해야 합니다.</xref:System.Data.Odbc.OdbcParameterCollection> 입력 또는 입/출력 매개 변수를 생략 하면 프로시저는 매개 변수의 기본값을 사용 합니다. SQL_DEFAULT_PARAM으로 매개 변수에 바인딩된 길이/표시기 버퍼의 값을 설정 하는 입력 또는 입/출력 매개 변수의 기본값을 지정 하는 다른 방법은 합니다."
  syntax:
    content: public override string CommandText { get; set; }
    return:
      type: System.String
      description: "SQL 문 또는 저장된 프로시저를 실행 합니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Data.Odbc.OdbcCommand.CommandText*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.CommandTimeout
  id: CommandTimeout
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: CommandTimeout
  nameWithType: OdbcCommand.CommandTimeout
  fullName: System.Data.Odbc.OdbcCommand.CommandTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "명령을 실행 하는 시도 종료 하 고 오류를 생성 하기 전 대기 시간을 가져오거나 설정 합니다."
  remarks: "영 (0)의 값은 대기 시간이 없는 아니라 대기 시간에 제한이 없음을 지정을 피해 야 합니다."
  syntax:
    content: public override int CommandTimeout { get; set; }
    return:
      type: System.Int32
      description: "명령이 실행 될 때까지 기다리는 시간 (초) 시간입니다. 기본값은 30초입니다."
  overload: System.Data.Odbc.OdbcCommand.CommandTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.CommandType
  id: CommandType
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: CommandType
  nameWithType: OdbcCommand.CommandType
  fullName: System.Data.Odbc.OdbcCommand.CommandType
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "표시 하는 값을 가져오거나 설정 합니다. 방법을 <xref:System.Data.Odbc.OdbcCommand.CommandText*>속성을 해석 합니다.</xref:System.Data.Odbc.OdbcCommand.CommandText*>"
  remarks: "에서는 CommandType 속성이로 설정 된 경우 `StoredProcedure`를 설정 해야는 <xref:System.Data.Odbc.OdbcCommand.CommandText%2A>속성을 전체 ODBC 호출 구문.</xref:System.Data.Odbc.OdbcCommand.CommandText%2A> Execute 메서드 중 하나를 호출 하면 다음 명령이이 저장된 프로시저 실행 (예를 들어 <xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A>또는 <xref:System.Data.Odbc.OdbcCommand.ExecuteNonQuery%2A>).</xref:System.Data.Odbc.OdbcCommand.ExecuteNonQuery%2A> </xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A>       <xref:System.Data.Odbc.OdbcCommand.Connection%2A>, CommandType 및 <xref:System.Data.Odbc.OdbcCommand.CommandText%2A>현재 연결 execute 또는 인출 작업을 수행 하는 경우 속성을 설정할 수 없습니다.</xref:System.Data.Odbc.OdbcCommand.CommandText%2A> </xref:System.Data.Odbc.OdbcCommand.Connection%2A>       .NET Framework Data Provider for ODBC에 명명 된 전달은 지원 되지 않습니다 SQL 문 또는 <xref:System.Data.Odbc.OdbcCommand>.</xref:System.Data.Odbc.OdbcCommand> 호출한 저장된 프로시저 매개 변수 두이 경우 모두에서 물음표 (?) 자리 표시자를 사용 합니다. 예를 들어: ```   SELECT * FROM Customers WHERE CustomerID = ?   ``` 순서 <xref:System.Data.Odbc.OdbcParameter>개체에 추가 됩니다는 <xref:System.Data.Odbc.OdbcParameterCollection>매개 변수에 물음표 자리 표시자의 위치와 직접 일치 해야 합니다.</xref:System.Data.Odbc.OdbcParameterCollection> </xref:System.Data.Odbc.OdbcParameter>      > [!NOTE] > The.NET Framework Data Provider for ODBC 지원 하지 않습니다는 <xref:System.Data.CommandType>설정인 `TableDirect`.</xref:System.Data.CommandType>"
  syntax:
    content: public override System.Data.CommandType CommandType { get; set; }
    return:
      type: System.Data.CommandType
      description: "중 하나는 <xref href=&quot;System.Data.CommandType&quot;> </xref> 값입니다. 기본값은 <xref uid=&quot;langword_csharp_Text&quot; name=&quot;Text&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Odbc.OdbcCommand.CommandType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "값이 유효한 <xref href=&quot;System.Data.CommandType&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.Connection
  id: Connection
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: Connection
  nameWithType: OdbcCommand.Connection
  fullName: System.Data.Odbc.OdbcCommand.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "가져오거나는 <xref href=&quot;System.Data.Odbc.OdbcConnection&quot;> </xref> 의이 인스턴스에서 사용 되는 <xref href=&quot;System.Data.Odbc.OdbcCommand&quot;> </xref>합니다."
  remarks: "연결을 설정할 수 없습니다 <xref:System.Data.Odbc.OdbcCommand.CommandType%2A>, 및 <xref:System.Data.Odbc.OdbcCommand.CommandText%2A>속성은 현재 연결 execute 또는 인출 작업을 수행 하는 경우.</xref:System.Data.Odbc.OdbcCommand.CommandText%2A> </xref:System.Data.Odbc.OdbcCommand.CommandType%2A>       트랜잭션을 진행 중인 동안 연결을 설정 하는 경우와 <xref:System.Data.Odbc.OdbcCommand.Transaction%2A>속성이 null이 아니면는 <xref:System.InvalidOperationException>생성 됩니다.</xref:System.InvalidOperationException> </xref:System.Data.Odbc.OdbcCommand.Transaction%2A> 트랜잭션이 커밋 또는 롤백 후 연결을 설정 하는 경우 및 <xref:System.Data.Odbc.OdbcCommand.Transaction%2A>속성이 null이 아니면는 <xref:System.Data.Odbc.OdbcCommand.Transaction%2A>속성은 null 값으로 설정 됩니다.</xref:System.Data.Odbc.OdbcCommand.Transaction%2A> </xref:System.Data.Odbc.OdbcCommand.Transaction%2A>"
  syntax:
    content: public System.Data.Odbc.OdbcConnection Connection { get; set; }
    return:
      type: System.Data.Odbc.OdbcConnection
      description: "데이터 원본에 연결 합니다. 기본값은 null 값입니다."
  overload: System.Data.Odbc.OdbcCommand.Connection*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "트랜잭션을 진행 중인 동안 연결 속성이 변경 되었습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.CreateDbParameter
  id: CreateDbParameter
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: CreateDbParameter()
  nameWithType: OdbcCommand.CreateDbParameter()
  fullName: System.Data.Odbc.OdbcCommand.CreateDbParameter()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  syntax:
    content: protected override System.Data.Common.DbParameter CreateDbParameter ();
    parameters: []
    return:
      type: System.Data.Common.DbParameter
      description: "추가할 수 있습니다."
  overload: System.Data.Odbc.OdbcCommand.CreateDbParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.CreateParameter
  id: CreateParameter
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: CreateParameter()
  nameWithType: OdbcCommand.CreateParameter()
  fullName: System.Data.Odbc.OdbcCommand.CreateParameter()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "새 인스턴스를 만듭니다는 <xref href=&quot;System.Data.Odbc.OdbcParameter&quot;> </xref> 개체입니다."
  remarks: "CreateParameter 메서드는 <xref:System.Data.IDbCommand.CreateParameter%2A>.</xref:System.Data.IDbCommand.CreateParameter%2A> 의 강력한 형식의 버전"
  syntax:
    content: public System.Data.Odbc.OdbcParameter CreateParameter ();
    parameters: []
    return:
      type: System.Data.Odbc.OdbcParameter
      description: "<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;> </xref> 개체입니다."
  overload: System.Data.Odbc.OdbcCommand.CreateParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.DbConnection
  id: DbConnection
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: DbConnection
  nameWithType: OdbcCommand.DbConnection
  fullName: System.Data.Odbc.OdbcCommand.DbConnection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  syntax:
    content: protected override System.Data.Common.DbConnection DbConnection { get; set; }
    return:
      type: System.Data.Common.DbConnection
      description: "추가할 수 있습니다."
  overload: System.Data.Odbc.OdbcCommand.DbConnection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.DbParameterCollection
  id: DbParameterCollection
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: DbParameterCollection
  nameWithType: OdbcCommand.DbParameterCollection
  fullName: System.Data.Odbc.OdbcCommand.DbParameterCollection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  syntax:
    content: protected override System.Data.Common.DbParameterCollection DbParameterCollection { get; }
    return:
      type: System.Data.Common.DbParameterCollection
      description: "추가할 수 있습니다."
  overload: System.Data.Odbc.OdbcCommand.DbParameterCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.DbTransaction
  id: DbTransaction
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: DbTransaction
  nameWithType: OdbcCommand.DbTransaction
  fullName: System.Data.Odbc.OdbcCommand.DbTransaction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  syntax:
    content: protected override System.Data.Common.DbTransaction DbTransaction { get; set; }
    return:
      type: System.Data.Common.DbTransaction
      description: "추가할 수 있습니다."
  overload: System.Data.Odbc.OdbcCommand.DbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.DesignTimeVisible
  id: DesignTimeVisible
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: DesignTimeVisible
  nameWithType: OdbcCommand.DesignTimeVisible
  fullName: System.Data.Odbc.OdbcCommand.DesignTimeVisible
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "명령 개체를 사용자 지정 된 인터페이스 컨트롤에 표시 되어야 하는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  syntax:
    content: public override bool DesignTimeVisible { get; set; }
    return:
      type: System.Boolean
      description: '**true 이면**명령 개체를 컨트롤에 표시 되지 않으면 해야 하면, **false**합니다. 기본값은 **true**합니다.'
  overload: System.Data.Odbc.OdbcCommand.DesignTimeVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: OdbcCommand.Dispose(Boolean)
  fullName: System.Data.Odbc.OdbcCommand.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "추가할 수 있습니다."
  overload: System.Data.Odbc.OdbcCommand.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.ExecuteDbDataReader(System.Data.CommandBehavior)
  id: ExecuteDbDataReader(System.Data.CommandBehavior)
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: ExecuteDbDataReader(CommandBehavior)
  nameWithType: OdbcCommand.ExecuteDbDataReader(CommandBehavior)
  fullName: System.Data.Odbc.OdbcCommand.ExecuteDbDataReader(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  syntax:
    content: protected override System.Data.Common.DbDataReader ExecuteDbDataReader (System.Data.CommandBehavior behavior);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "추가할 수 있습니다."
    return:
      type: System.Data.Common.DbDataReader
      description: "추가할 수 있습니다."
  overload: System.Data.Odbc.OdbcCommand.ExecuteDbDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.ExecuteNonQuery
  id: ExecuteNonQuery
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: ExecuteNonQuery()
  nameWithType: OdbcCommand.ExecuteNonQuery()
  fullName: System.Data.Odbc.OdbcCommand.ExecuteNonQuery()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "에 대해 SQL 문을 실행은 <xref:System.Data.Odbc.OdbcCommand.Connection*>영향을 받는 행 수를 반환 합니다.</xref:System.Data.Odbc.OdbcCommand.Connection*>"
  remarks: "ExecuteNonQuery를 사용 하 여 (예를 들어 데이터베이스의 구조를 쿼리 또는 테이블과 같은 데이터베이스 개체 만들기); 카탈로그 작업을 수행 하려면 또는 사용 하지 않고 데이터베이스에 데이터를 변경 하는 <xref:System.Data.DataSet>를 실행 하는 UPDATE, INSERT 또는 DELETE 문에.</xref:System.Data.DataSet>       또한 기본 ODBC 드라이버에서이 기능을 지 원하는 경우 여러 SQL 문을 실행할 수 ExecuteNonQuery를 사용할 수 있습니다. 이 경우 반환 값은 명령에 모든 문의 영향을 받는 행의 수입니다.       ExecuteNonQuery 행을 반환 하지만 모든 출력 매개 변수 또는 반환 값 매개 변수에 매핑된 데이터로 채워집니다.       UPDATE, INSERT 및 DELETE 문에 대 한 반환 값은 명령에 의해 영향을 받는 행 수입니다. 문의 다른 모든 형식에 대 한 반환 값은-1입니다. 롤백이 발생 하는 경우 반환 값-1 이기도 합니다.       트리거가 있으면 테이블 및 데이터에 추가 되거나 테이블에서 변경 되는, 반환 값에는 트리거의 영향을 받는 행의 수와 삽입 또는 업데이트 작업을 모두 영향을 받는 행 수가 포함 됩니다."
  syntax:
    content: public override int ExecuteNonQuery ();
    parameters: []
    return:
      type: System.Int32
      description: "UPDATE, INSERT 및 DELETE 문에 대 한 반환 값은 명령에 의해 영향을 받는 행 수입니다. 문의 다른 모든 형식에 대 한 반환 값은-1입니다."
  overload: System.Data.Odbc.OdbcCommand.ExecuteNonQuery*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결이 존재 하지 않습니다.       -또는-는 연결이 열려 있지 않습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.ExecuteReader
  id: ExecuteReader
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: ExecuteReader()
  nameWithType: OdbcCommand.ExecuteReader()
  fullName: System.Data.Odbc.OdbcCommand.ExecuteReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "보냅니다는 <> </> *>에 <> </> *>와 빌드는 <xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref>합니다."
  remarks: "설정 해야는 <xref:System.Data.Odbc.OdbcCommand.CommandText%2A>속성을 저장된 프로시저에 대 한 전체 ODBC 호출 구문.</xref:System.Data.Odbc.OdbcCommand.CommandText%2A> ExecuteReader를 호출 하는 경우이 저장된 프로시저를 실행 하는 명령입니다.       동안는 <xref:System.Data.Odbc.OdbcDataReader>사용 하는 경우 연결 <xref:System.Data.Odbc.OdbcConnection>중인 <xref:System.Data.Odbc.OdbcDataReader>.</xref:System.Data.Odbc.OdbcDataReader> </xref:System.Data.Odbc.OdbcConnection> </xref:System.Data.Odbc.OdbcDataReader> 이 상태 동안에 없는 다른 작업을 수행할 수 <xref:System.Data.Odbc.OdbcConnection>닫지 합니다.</xref:System.Data.Odbc.OdbcConnection> 이 때 까지는 <xref:System.Data.Odbc.OdbcDataReader.Close%2A>의 메서드는 <xref:System.Data.Odbc.OdbcDataReader>호출 됩니다.</xref:System.Data.Odbc.OdbcDataReader> </xref:System.Data.Odbc.OdbcDataReader.Close%2A>"
  syntax:
    content: public System.Data.Odbc.OdbcDataReader ExecuteReader ();
    parameters: []
    return:
      type: System.Data.Odbc.OdbcDataReader
      description: "<xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref> 개체입니다."
  overload: System.Data.Odbc.OdbcCommand.ExecuteReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.ExecuteReader(System.Data.CommandBehavior)
  id: ExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: ExecuteReader(CommandBehavior)
  nameWithType: OdbcCommand.ExecuteReader(CommandBehavior)
  fullName: System.Data.Odbc.OdbcCommand.ExecuteReader(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "보냅니다는 <> </> *>에 <> </> *>, 및 빌드는 <xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref> 중 하나를 사용 하는 <xref uid=&quot;langword_csharp_CommandBehavior&quot; name=&quot;CommandBehavior&quot; href=&quot;&quot;> </xref> 값입니다."
  remarks: "SQL 문의 단일 행만 반환 될 경우 지정 `SingleRow` 로 <xref:System.Data.CommandBehavior>값에는 응용 프로그램의 성능을 향상 시킬 수 있습니다.</xref:System.Data.CommandBehavior>       설정 해야는 <xref:System.Data.Odbc.OdbcCommand.CommandText%2A>속성을 저장된 프로시저에 대 한 전체 ODBC 호출 구문.</xref:System.Data.Odbc.OdbcCommand.CommandText%2A> 명령이 <xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A>.</xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A> 를 호출 하는 경우이 저장된 프로시저 실행       <xref:System.Data.Odbc.OdbcDataReader>크기가 큰 이진 값를 효율적으로 읽을 수 있는 특별 한 모드를 지원 합니다.</xref:System.Data.Odbc.OdbcDataReader> 자세한 내용은 참조는 `SequentialAccess` <xref:System.Data.CommandBehavior>.</xref:System.Data.CommandBehavior> 에 대 한 설정      > [!NOTE] >는 `SequentialAccess` 값 <xref:System.Data.CommandBehavior>제한 하지는 설정; 할 <xref:System.Data.Odbc.OdbcDataReader>.</xref:System.Data.Odbc.OdbcDataReader> 이상 순차적 액세스 해야</xref:System.Data.CommandBehavior> SQL Server ODBC 드라이버를 사용할 경우 예를 들어 `SequentialAccess` 모드로 이동할 수 있습니다의 첫 번째 열에는 <xref:System.Data.Odbc.OdbcDataReader>를 읽은 후 다른 모든 열을 통해 순차적으로 행.</xref:System.Data.Odbc.OdbcDataReader>       동안는 <xref:System.Data.Odbc.OdbcDataReader>사용 하는 경우 연결 <xref:System.Data.Odbc.OdbcConnection>중인 <xref:System.Data.Odbc.OdbcDataReader>.</xref:System.Data.Odbc.OdbcDataReader> </xref:System.Data.Odbc.OdbcConnection> </xref:System.Data.Odbc.OdbcDataReader> 이 상태 동안에 없는 다른 작업을 수행할 수 <xref:System.Data.Odbc.OdbcConnection>닫지 합니다.</xref:System.Data.Odbc.OdbcConnection> 이 대/소문자를 호출 하기 전에 <xref:System.Data.Odbc.OdbcDataReader.Close%2A?displayProperty=fullName>메서드.</xref:System.Data.Odbc.OdbcDataReader.Close%2A?displayProperty=fullName> 경우는 <xref:System.Data.Odbc.OdbcDataReader>사용 하 여 만든 <xref:System.Data.CommandBehavior>로 설정 `CloseConnection`닫는는 <xref:System.Data.Odbc.OdbcDataReader>연결을 자동으로 닫힙니다.</xref:System.Data.Odbc.OdbcDataReader> </xref:System.Data.CommandBehavior> </xref:System.Data.Odbc.OdbcDataReader>"
  syntax:
    content: public System.Data.Odbc.OdbcDataReader ExecuteReader (System.Data.CommandBehavior behavior);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "중 하나는 <xref uid=&quot;langword_csharp_System.Data.CommandBehavior&quot; name=&quot;System.Data.CommandBehavior&quot; href=&quot;&quot;> </xref> 값입니다."
    return:
      type: System.Data.Odbc.OdbcDataReader
      description: "<xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref> 개체입니다."
  overload: System.Data.Odbc.OdbcCommand.ExecuteReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.ExecuteScalar
  id: ExecuteScalar
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: ExecuteScalar()
  nameWithType: OdbcCommand.ExecuteScalar()
  fullName: System.Data.Odbc.OdbcCommand.ExecuteScalar()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "쿼리를 실행 하 고 쿼리에서 반환 된 결과 집합의 첫 번째 행의 첫 번째 열을 반환 합니다. 다른 열 이나 행은 무시 됩니다."
  remarks: "ExecuteScalar 메서드를 사용 하 여 데이터 원본에서 단일 값 (예를 들어 집계 값)을 검색 합니다. 이렇게 하려면 <xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A> <xref:System.Data.Odbc.OdbcDataReader>.</xref:System.Data.Odbc.OdbcDataReader> 반환 되는 데이터에서 단일 값을 생성 하는 데 필요한 다음 작업을 수행 하 고 메서드를</xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A> 사용 하 여 보다 적은 코드가 필요"
  syntax:
    content: public override object ExecuteScalar ();
    parameters: []
    return:
      type: System.Object
      description: "결과의 첫 번째 행의 첫 번째 열이 설정 되었거나 null 참조 결과 집합이 비어 있습니다."
  overload: System.Data.Odbc.OdbcCommand.ExecuteScalar*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.Parameters
  id: Parameters
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: Parameters
  nameWithType: OdbcCommand.Parameters
  fullName: System.Data.Odbc.OdbcCommand.Parameters
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "Gets the <xref href=&quot;System.Data.Odbc.OdbcParameterCollection&quot;></xref>."
  remarks: "때 <xref:System.Data.Odbc.OdbcCommand.CommandType%2A>로 설정 된 `Text`,.NET Framework Data Provider for ODBC에 명명 된 전달은 지원 되지 않습니다 SQL 문 또는 <xref:System.Data.Odbc.OdbcCommand>.</xref:System.Data.Odbc.OdbcCommand> 호출한 저장된 프로시저 매개 변수</xref:System.Data.Odbc.OdbcCommand.CommandType%2A> 두이 경우 모두에서 물음표 (?) 자리 표시자를 사용 합니다. 예를 들어: ```   SELECT * FROM Customers WHERE CustomerID = ?   ``` 순서 <xref:System.Data.Odbc.OdbcParameter>개체에 추가 됩니다는 <xref:System.Data.Odbc.OdbcParameterCollection>명령 텍스트에서 매개 변수에 물음표 자리 표시자의 위치와 직접 일치 해야 합니다.</xref:System.Data.Odbc.OdbcParameterCollection> </xref:System.Data.Odbc.OdbcParameter>      > [!NOTE] > 컬렉션의 매개 변수를 실행 하면 쿼리의 요구 사항을 일치 하지 않으면 오류가 발생할 수 있습니다."
  syntax:
    content: public System.Data.Odbc.OdbcParameterCollection Parameters { get; }
    return:
      type: System.Data.Odbc.OdbcParameterCollection
      description: "SQL 문 또는 저장된 프로시저의 매개 변수입니다. 기본값은 빈 컬렉션입니다."
  overload: System.Data.Odbc.OdbcCommand.Parameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.Prepare
  id: Prepare
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: Prepare()
  nameWithType: OdbcCommand.Prepare()
  fullName: System.Data.Odbc.OdbcCommand.Prepare()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "데이터 원본에 명령의 준비 된 또는 컴파일된 버전을 만듭니다."
  remarks: "Prepare 메서드를 호출 합니다 `SQLPrepare` 함수입니다. 데이터 원본 및 기본 ODBC 드라이버의 기능에 따라 데이터 형식 같은 매개 변수 정보 문이 준비 되거나 실행 되지 않은 경우 모든 매개 변수가 바인딩되면 모든 매개 변수에 연결 되어 있으면 때 체크 수 있습니다. 응용 프로그램에 동일한 <xref:System.Data.Odbc.OdbcCommand>.</xref:System.Data.Odbc.OdbcCommand> 에서 새 SQL 문을 준비 하기 전에 SQL 문을 이전에 적용 하는 모든 매개 변수 바인딩 해제 해야 점에 상호 운용성을 극대화 이 새 SQL 문을에 적용 되 고 이전 매개 변수 정보가 발생 하는 오류를 방지할 수 있습니다.       메서드는 모든 매개 변수 값, 준비를 호출한 후에 지정 된 값 보다 큽니다. Execute를 호출 하는 경우는 <xref:System.Data.Odbc.OdbcParameter.Size%2A>속성이 자동으로 매개 변수의 원래 지정 된 크기로 잘리고 잘림 오류가 반환 되지 않습니다.</xref:System.Data.Odbc.OdbcParameter.Size%2A>       출력 매개 변수 (준비) 여부는 사용자 지정 데이터 형식이 있어야 합니다. 최대 <xref:System.Data.Odbc.OdbcParameter.Size%2A>.</xref:System.Data.Odbc.OdbcParameter.Size%2A> 가변 길이 데이터 형식 지정도 지정 해야"
  syntax:
    content: public override void Prepare ();
    parameters: []
  overload: System.Data.Odbc.OdbcCommand.Prepare*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *> 설정 되지 않았습니다.       -or-       The <>*> is not <xref:System.Data.Odbc.OdbcConnection.Open*>.</xref:System.Data.Odbc.OdbcConnection.Open*>"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.ResetCommandTimeout
  id: ResetCommandTimeout
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: ResetCommandTimeout()
  nameWithType: OdbcCommand.ResetCommandTimeout()
  fullName: System.Data.Odbc.OdbcCommand.ResetCommandTimeout()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "다시 설정 된 <xref:System.Data.Odbc.OdbcCommand.CommandTimeout*>속성의 기본값을.</xref:System.Data.Odbc.OdbcCommand.CommandTimeout*>"
  remarks: "기본값은 <xref:System.Data.Odbc.OdbcCommand.CommandTimeout%2A>30 초입니다.</xref:System.Data.Odbc.OdbcCommand.CommandTimeout%2A>"
  syntax:
    content: public void ResetCommandTimeout ();
    parameters: []
  overload: System.Data.Odbc.OdbcCommand.ResetCommandTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: OdbcCommand.System.ICloneable.Clone()
  fullName: System.Data.Odbc.OdbcCommand.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "이 멤버에 대 한 참조 &lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;합니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.Odbc.OdbcCommand>인스턴스로 캐스팅 되는 <xref:InterfaceName>인터페이스.</xref:InterfaceName> </xref:System.Data.Odbc.OdbcCommand>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "새 [T; System.Object](~/add/includes/ajax-current-ext-md.md) 이 인스턴스의 복사본입니다."
  overload: System.Data.Odbc.OdbcCommand.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.Transaction
  id: Transaction
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: Transaction
  nameWithType: OdbcCommand.Transaction
  fullName: System.Data.Odbc.OdbcCommand.Transaction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "가져오거나는 <xref href=&quot;System.Data.Odbc.OdbcTransaction&quot;> </xref> 는 <xref href=&quot;System.Data.Odbc.OdbcCommand&quot;> </xref> 실행 합니다."
  remarks: "특정 값으로 이미 설정 되어 있으며 명령을 실행 중 경우 트랜잭션 속성을 설정할 수 없습니다. 트랜잭션 속성을 설정 하는 경우는 <xref:System.Data.Odbc.OdbcTransaction>동일 하 게 연결 되어 있지 않은 개체 <xref:System.Data.Odbc.OdbcConnection>로 <xref:System.Data.Odbc.OdbcCommand>개체, 문을 실행 하려고 하면 다음에 예외가 throw 됩니다.</xref:System.Data.Odbc.OdbcCommand> </xref:System.Data.Odbc.OdbcConnection> </xref:System.Data.Odbc.OdbcTransaction>"
  syntax:
    content: public System.Data.Odbc.OdbcTransaction Transaction { get; set; }
    return:
      type: System.Data.Odbc.OdbcTransaction
      description: "An <xref href=&quot;System.Data.Odbc.OdbcTransaction&quot;></xref>. 기본값은 null 값입니다."
  overload: System.Data.Odbc.OdbcCommand.Transaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcCommand.UpdatedRowSource
  id: UpdatedRowSource
  parent: System.Data.Odbc.OdbcCommand
  langs:
  - csharp
  name: UpdatedRowSource
  nameWithType: OdbcCommand.UpdatedRowSource
  fullName: System.Data.Odbc.OdbcCommand.UpdatedRowSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "지정 하는 값을 가져오거나 설정 합니다. 방법을 **업데이트** 메서드는 명령 결과를 적용 해야는 **DataRow**합니다."
  remarks: "기본 <xref:System.Data.UpdateRowSource>값은 **둘 다** 명령이 자동으로 생성, 하지 않는 한와 마찬가지로 <xref:System.Data.Odbc.OdbcCommandBuilder>,이 경우 기본값은 **None**.</xref:System.Data.Odbc.OdbcCommandBuilder> </xref:System.Data.UpdateRowSource>       UpdatedRowSource 속성을 사용 하는 방법에 대 한 자세한 내용은 참조 [DataAdapter 매개 변수](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public override System.Data.UpdateRowSource UpdatedRowSource { get; set; }
    return:
      type: System.Data.UpdateRowSource
      description: "중 하나는 <xref href=&quot;System.Data.UpdateRowSource&quot;> </xref> 값입니다."
  overload: System.Data.Odbc.OdbcCommand.UpdatedRowSource*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbCommand
  isExternal: false
  name: System.Data.Common.DbCommand
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.Odbc.OdbcCommand.#ctor
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: OdbcCommand()
  nameWithType: OdbcCommand.OdbcCommand()
  fullName: System.Data.Odbc.OdbcCommand.OdbcCommand()
- uid: System.Data.Odbc.OdbcCommand.#ctor(System.String)
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: OdbcCommand(String)
  nameWithType: OdbcCommand.OdbcCommand(String)
  fullName: System.Data.Odbc.OdbcCommand.OdbcCommand(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Odbc.OdbcCommand.#ctor(System.String,System.Data.Odbc.OdbcConnection)
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: OdbcCommand(String,OdbcConnection)
  nameWithType: OdbcCommand.OdbcCommand(String,OdbcConnection)
  fullName: System.Data.Odbc.OdbcCommand.OdbcCommand(String,OdbcConnection)
- uid: System.Data.Odbc.OdbcConnection
  parent: System.Data.Odbc
  isExternal: false
  name: OdbcConnection
  nameWithType: OdbcConnection
  fullName: System.Data.Odbc.OdbcConnection
- uid: System.Data.Odbc.OdbcCommand.#ctor(System.String,System.Data.Odbc.OdbcConnection,System.Data.Odbc.OdbcTransaction)
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: OdbcCommand(String,OdbcConnection,OdbcTransaction)
  nameWithType: OdbcCommand.OdbcCommand(String,OdbcConnection,OdbcTransaction)
  fullName: System.Data.Odbc.OdbcCommand.OdbcCommand(String,OdbcConnection,OdbcTransaction)
- uid: System.Data.Odbc.OdbcTransaction
  parent: System.Data.Odbc
  isExternal: false
  name: OdbcTransaction
  nameWithType: OdbcTransaction
  fullName: System.Data.Odbc.OdbcTransaction
- uid: System.Data.Odbc.OdbcCommand.Cancel
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: Cancel()
  nameWithType: OdbcCommand.Cancel()
  fullName: System.Data.Odbc.OdbcCommand.Cancel()
- uid: System.Data.Odbc.OdbcCommand.CommandText
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: CommandText
  nameWithType: OdbcCommand.CommandText
  fullName: System.Data.Odbc.OdbcCommand.CommandText
- uid: System.Data.Odbc.OdbcCommand.CommandTimeout
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: CommandTimeout
  nameWithType: OdbcCommand.CommandTimeout
  fullName: System.Data.Odbc.OdbcCommand.CommandTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Odbc.OdbcCommand.CommandType
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: CommandType
  nameWithType: OdbcCommand.CommandType
  fullName: System.Data.Odbc.OdbcCommand.CommandType
- uid: System.Data.CommandType
  parent: System.Data
  isExternal: false
  name: CommandType
  nameWithType: CommandType
  fullName: System.Data.CommandType
- uid: System.Data.Odbc.OdbcCommand.Connection
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: Connection
  nameWithType: OdbcCommand.Connection
  fullName: System.Data.Odbc.OdbcCommand.Connection
- uid: System.Data.Odbc.OdbcCommand.CreateDbParameter
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: CreateDbParameter()
  nameWithType: OdbcCommand.CreateDbParameter()
  fullName: System.Data.Odbc.OdbcCommand.CreateDbParameter()
- uid: System.Data.Common.DbParameter
  parent: System.Data.Common
  isExternal: false
  name: DbParameter
  nameWithType: DbParameter
  fullName: System.Data.Common.DbParameter
- uid: System.Data.Odbc.OdbcCommand.CreateParameter
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: CreateParameter()
  nameWithType: OdbcCommand.CreateParameter()
  fullName: System.Data.Odbc.OdbcCommand.CreateParameter()
- uid: System.Data.Odbc.OdbcParameter
  parent: System.Data.Odbc
  isExternal: false
  name: OdbcParameter
  nameWithType: OdbcParameter
  fullName: System.Data.Odbc.OdbcParameter
- uid: System.Data.Odbc.OdbcCommand.DbConnection
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: DbConnection
  nameWithType: OdbcCommand.DbConnection
  fullName: System.Data.Odbc.OdbcCommand.DbConnection
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.Odbc.OdbcCommand.DbParameterCollection
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: DbParameterCollection
  nameWithType: OdbcCommand.DbParameterCollection
  fullName: System.Data.Odbc.OdbcCommand.DbParameterCollection
- uid: System.Data.Common.DbParameterCollection
  parent: System.Data.Common
  isExternal: false
  name: DbParameterCollection
  nameWithType: DbParameterCollection
  fullName: System.Data.Common.DbParameterCollection
- uid: System.Data.Odbc.OdbcCommand.DbTransaction
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: DbTransaction
  nameWithType: OdbcCommand.DbTransaction
  fullName: System.Data.Odbc.OdbcCommand.DbTransaction
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.Odbc.OdbcCommand.DesignTimeVisible
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: DesignTimeVisible
  nameWithType: OdbcCommand.DesignTimeVisible
  fullName: System.Data.Odbc.OdbcCommand.DesignTimeVisible
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Odbc.OdbcCommand.Dispose(System.Boolean)
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: OdbcCommand.Dispose(Boolean)
  fullName: System.Data.Odbc.OdbcCommand.Dispose(Boolean)
- uid: System.Data.Odbc.OdbcCommand.ExecuteDbDataReader(System.Data.CommandBehavior)
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: ExecuteDbDataReader(CommandBehavior)
  nameWithType: OdbcCommand.ExecuteDbDataReader(CommandBehavior)
  fullName: System.Data.Odbc.OdbcCommand.ExecuteDbDataReader(CommandBehavior)
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.Odbc.OdbcCommand.ExecuteNonQuery
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: ExecuteNonQuery()
  nameWithType: OdbcCommand.ExecuteNonQuery()
  fullName: System.Data.Odbc.OdbcCommand.ExecuteNonQuery()
- uid: System.Data.Odbc.OdbcCommand.ExecuteReader
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: ExecuteReader()
  nameWithType: OdbcCommand.ExecuteReader()
  fullName: System.Data.Odbc.OdbcCommand.ExecuteReader()
- uid: System.Data.Odbc.OdbcDataReader
  parent: System.Data.Odbc
  isExternal: false
  name: OdbcDataReader
  nameWithType: OdbcDataReader
  fullName: System.Data.Odbc.OdbcDataReader
- uid: System.Data.Odbc.OdbcCommand.ExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: ExecuteReader(CommandBehavior)
  nameWithType: OdbcCommand.ExecuteReader(CommandBehavior)
  fullName: System.Data.Odbc.OdbcCommand.ExecuteReader(CommandBehavior)
- uid: System.Data.Odbc.OdbcCommand.ExecuteScalar
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: ExecuteScalar()
  nameWithType: OdbcCommand.ExecuteScalar()
  fullName: System.Data.Odbc.OdbcCommand.ExecuteScalar()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Odbc.OdbcCommand.Parameters
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: Parameters
  nameWithType: OdbcCommand.Parameters
  fullName: System.Data.Odbc.OdbcCommand.Parameters
- uid: System.Data.Odbc.OdbcParameterCollection
  parent: System.Data.Odbc
  isExternal: false
  name: OdbcParameterCollection
  nameWithType: OdbcParameterCollection
  fullName: System.Data.Odbc.OdbcParameterCollection
- uid: System.Data.Odbc.OdbcCommand.Prepare
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: Prepare()
  nameWithType: OdbcCommand.Prepare()
  fullName: System.Data.Odbc.OdbcCommand.Prepare()
- uid: System.Data.Odbc.OdbcCommand.ResetCommandTimeout
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: ResetCommandTimeout()
  nameWithType: OdbcCommand.ResetCommandTimeout()
  fullName: System.Data.Odbc.OdbcCommand.ResetCommandTimeout()
- uid: System.Data.Odbc.OdbcCommand.System#ICloneable#Clone
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: OdbcCommand.System.ICloneable.Clone()
  fullName: System.Data.Odbc.OdbcCommand.System.ICloneable.Clone()
- uid: System.Data.Odbc.OdbcCommand.Transaction
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: Transaction
  nameWithType: OdbcCommand.Transaction
  fullName: System.Data.Odbc.OdbcCommand.Transaction
- uid: System.Data.Odbc.OdbcCommand.UpdatedRowSource
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: UpdatedRowSource
  nameWithType: OdbcCommand.UpdatedRowSource
  fullName: System.Data.Odbc.OdbcCommand.UpdatedRowSource
- uid: System.Data.UpdateRowSource
  parent: System.Data
  isExternal: false
  name: UpdateRowSource
  nameWithType: UpdateRowSource
  fullName: System.Data.UpdateRowSource
- uid: System.Data.Odbc.OdbcCommand.#ctor*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: OdbcCommand
  nameWithType: OdbcCommand.OdbcCommand
- uid: System.Data.Odbc.OdbcCommand.Cancel*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: Cancel
  nameWithType: OdbcCommand.Cancel
- uid: System.Data.Odbc.OdbcCommand.CommandText*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: CommandText
  nameWithType: OdbcCommand.CommandText
- uid: System.Data.Odbc.OdbcCommand.CommandTimeout*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: CommandTimeout
  nameWithType: OdbcCommand.CommandTimeout
- uid: System.Data.Odbc.OdbcCommand.CommandType*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: CommandType
  nameWithType: OdbcCommand.CommandType
- uid: System.Data.Odbc.OdbcCommand.Connection*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: Connection
  nameWithType: OdbcCommand.Connection
- uid: System.Data.Odbc.OdbcCommand.CreateDbParameter*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: CreateDbParameter
  nameWithType: OdbcCommand.CreateDbParameter
- uid: System.Data.Odbc.OdbcCommand.CreateParameter*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: CreateParameter
  nameWithType: OdbcCommand.CreateParameter
- uid: System.Data.Odbc.OdbcCommand.DbConnection*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: DbConnection
  nameWithType: OdbcCommand.DbConnection
- uid: System.Data.Odbc.OdbcCommand.DbParameterCollection*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: DbParameterCollection
  nameWithType: OdbcCommand.DbParameterCollection
- uid: System.Data.Odbc.OdbcCommand.DbTransaction*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: DbTransaction
  nameWithType: OdbcCommand.DbTransaction
- uid: System.Data.Odbc.OdbcCommand.DesignTimeVisible*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: DesignTimeVisible
  nameWithType: OdbcCommand.DesignTimeVisible
- uid: System.Data.Odbc.OdbcCommand.Dispose*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: Dispose
  nameWithType: OdbcCommand.Dispose
- uid: System.Data.Odbc.OdbcCommand.ExecuteDbDataReader*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: ExecuteDbDataReader
  nameWithType: OdbcCommand.ExecuteDbDataReader
- uid: System.Data.Odbc.OdbcCommand.ExecuteNonQuery*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: ExecuteNonQuery
  nameWithType: OdbcCommand.ExecuteNonQuery
- uid: System.Data.Odbc.OdbcCommand.ExecuteReader*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: ExecuteReader
  nameWithType: OdbcCommand.ExecuteReader
- uid: System.Data.Odbc.OdbcCommand.ExecuteScalar*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: ExecuteScalar
  nameWithType: OdbcCommand.ExecuteScalar
- uid: System.Data.Odbc.OdbcCommand.Parameters*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: Parameters
  nameWithType: OdbcCommand.Parameters
- uid: System.Data.Odbc.OdbcCommand.Prepare*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: Prepare
  nameWithType: OdbcCommand.Prepare
- uid: System.Data.Odbc.OdbcCommand.ResetCommandTimeout*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: ResetCommandTimeout
  nameWithType: OdbcCommand.ResetCommandTimeout
- uid: System.Data.Odbc.OdbcCommand.System#ICloneable#Clone*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: OdbcCommand.System.ICloneable.Clone
- uid: System.Data.Odbc.OdbcCommand.Transaction*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: Transaction
  nameWithType: OdbcCommand.Transaction
- uid: System.Data.Odbc.OdbcCommand.UpdatedRowSource*
  parent: System.Data.Odbc.OdbcCommand
  isExternal: false
  name: UpdatedRowSource
  nameWithType: OdbcCommand.UpdatedRowSource
