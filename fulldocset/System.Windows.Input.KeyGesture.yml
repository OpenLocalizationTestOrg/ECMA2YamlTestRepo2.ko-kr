### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyGesture
  id: KeyGesture
  children:
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  - System.Windows.Input.KeyGesture.DisplayString
  - System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  - System.Windows.Input.KeyGesture.Key
  - System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  - System.Windows.Input.KeyGesture.Modifiers
  langs:
  - csharp
  name: KeyGesture
  nameWithType: KeyGesture
  fullName: System.Windows.Input.KeyGesture
  type: Class
  summary: "명령을 호출 하는 데 사용할 수 있는 키보드 조합을 정의 합니다."
  remarks: "대부분의 경우에는 KeyGesture 연결 해야 하 나와 나 더 많은 <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> 이 규칙에 예외에는 기능 키 및 자체로 유효한 KeyGesture 될 수 있는 숫자 키패드 키입니다. 예를 들어 한 KeyGesture에서 F12 키를 사용 하 여 만들 수 있습니다 있지만 X를 사용 하는 KeyGesture에 키 것 해야 한정자 키입니다.       있습니다 수 일반적으로 צ ְ ײ는 <xref:System.Windows.Input.KeyBinding>를 KeyGesture에 바인딩하는 <xref:System.Windows.Input.ICommand>명령이 KeyGesture 발생할 때 호출 될 수 있도록 합니다.</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.KeyBinding>       KeyGesture에 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 사용, 속성에 일반적으로 설정 된 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 은 <xref:System.Windows.Input.KeyBinding.Gesture%2A>, 여기서 제스처는 표준 키와 보조 키의 경우에서.</xref:System.Windows.Input.KeyBinding.Gesture%2A> 설정할 수도 있습니다는 <xref:System.Windows.Input.KeyBinding.Gesture%2A>기능 키 또는 한정자만 속성 키 조합을.</xref:System.Windows.Input.KeyBinding.Gesture%2A> 그러나 것이 더 일반적 설정 하는 <xref:System.Windows.Input.KeyBinding.Key%2A>경우 의도 한 명령 바인딩은 없는 한정자를 사용 하는 기능 키 속성 또는 <xref:System.Windows.Input.KeyBinding.Modifiers%2A>보조키만 의도 한 명령 바인딩은 인지.</xref:System.Windows.Input.KeyBinding.Modifiers%2A> </xref:System.Windows.Input.KeyBinding.Key%2A>      <a name=&quot;xamlAttributeUsage_KeyGesture&quot;></a># # XAML 특성 사용 ```   <object property=&quot;oneOrMoreModifierKeys+key&quot;/>   - or -   <object property=&quot;functionKey&quot;/>   ``` <a name=&quot;xamlValues_KeyGesture&quot;> </a> # # XAML 값 `functionKey` <xref:System.Windows.Input.Key>단일 키 값을 기능 키 (F1-12) 또는 숫자 키패드 키 중 하나 여야 합니다.</xref:System.Windows.Input.Key>                 `oneOrMoreModifierKeys`에 정의 된 하나 이상의 보조 키의 <xref:System.Windows.Input.ModifierKeys>&quot;+&quot; 문자로 구분 열거형.</xref:System.Windows.Input.ModifierKeys>       `key`    <xref:System.Windows.Input.Key>단일 키 값입니다.</xref:System.Windows.Input.Key>"
  example:
  - "The following example shows how to bind the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command to a KeyGesture using a <xref:System.Windows.Input.KeyBinding>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]  \n  \n The following example shows how to use KeyGesture in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Note that the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage does not directly declare a `<KeyGesture>` element. That object element usage is not possible because KeyGesture does not expose a public default constructor. Instead, the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage uses the typeconverter behavior to declare an entire KeyGesture inline as the `Gesture` attribute value.  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))]

      public class KeyGesture : System.Windows.Input.InputGesture
  inheritance:
  - System.Object
  - System.Windows.Input.InputGesture
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  id: '#ctor(System.Windows.Input.Key)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key)
  nameWithType: KeyGesture.KeyGesture(Key)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> 지정된 된 <xref href=&quot;System.Windows.Input.Key&quot;> </xref>합니다."
  remarks: "대부분의 경우에는 <xref:System.Windows.Input.KeyGesture>하 나와 연결 되어야 합니다 또는 내용은 <xref:System.Windows.Input.ModifierKeys>참조 하십시오.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture>  이 규칙에 대 한 예외는 기능 키 및 유효한 될 수 있는 숫자 키패드 키 <xref:System.Windows.Input.KeyGesture>자체로.</xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>.  The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithnomodifier)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithnomodifier)]"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "이 제스처와 연결 된 키입니다."
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>key</code>유효 하지 않거나 <xref href=&quot;System.Windows.Input.Key&quot;> </xref>합니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>유효 하지 않거나 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key,ModifierKeys)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> 지정된 된 <xref href=&quot;System.Windows.Input.Key&quot;> </xref> 및 <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>합니다."
  remarks: "대부분의 경우에는 <xref:System.Windows.Input.KeyGesture>하 나와 연결 되어야 합니다 또는 내용은 <xref:System.Windows.Input.ModifierKeys>참조 하십시오.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture> 이 규칙에 대 한 예외는 기능 키 및 유효한 될 수 있는 숫자 키패드 키 <xref:System.Windows.Input.KeyGesture>자체로.</xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>. The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "제스처와 연결 된 키입니다."
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "제스처와 관련 된 보조키입니다."
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>modifiers</code>is not a valid <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>       -or-       <code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>및 <code>modifiers</code> 유효한 형성 하지 않습니다 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key,ModifierKeys,String)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> 지정된 된 <xref href=&quot;System.Windows.Input.Key&quot;> </xref>, <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>, 문자열을 표시 합니다."
  remarks: "<xref:System.Windows.Input.KeyGesture.DisplayString%2A>속성이로 설정 되 고 `displayString` 매개 변수.</xref:System.Windows.Input.KeyGesture.DisplayString%2A>"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "제스처와 연결 된 키입니다."
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "제스처와 관련 된 보조키입니다."
    - id: displayString
      type: System.String
      description: "문자열 표현을 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>합니다."
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>modifiers</code>is not a valid <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>       -or-       <code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>displayString</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>및 <code>modifiers</code> 유효한 형성 하지 않습니다 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.DisplayString
  id: DisplayString
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
  fullName: System.Windows.Input.KeyGesture.DisplayString
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이 문자열 표현을 가져옵니다 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>합니다."
  remarks: "표시 문자열 하는 생성자에서 설정 되지 않은 경우 빈 문자열이 반환 됩니다.       이 속성이 비어 있으면 <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>메서드는 문자열에서 생성 <xref:System.Windows.Input.KeyGesture.Key%2A>및 <xref:System.Windows.Input.KeyGesture.Modifiers%2A>.</xref:System.Windows.Input.KeyGesture.Modifiers%2A> </xref:System.Windows.Input.KeyGesture.Key%2A> 반환</xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>"
  syntax:
    content: public string DisplayString { get; }
    return:
      type: System.String
      description: "이 대 한 표시 문자열 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>합니다. 기본값은 <xref:System.String.Empty>.</xref:System.String.Empty>"
  overload: System.Windows.Input.KeyGesture.DisplayString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  id: GetDisplayStringForCulture(System.Globalization.CultureInfo)
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: GetDisplayStringForCulture(CultureInfo)
  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)
  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "표시 하는 데 사용할 수 있는 문자열을 반환 된 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>합니다."
  remarks: "표시 문자열은 문자열; 반환 하는 생성자에 의해 설정 된 경우 그렇지 않으면 문자열에서 만들어집니다는 <xref:System.Windows.Input.KeyGesture.Key%2A>및 <xref:System.Windows.Input.KeyGesture.Modifiers%2A>제어 되지 필요한 변환을 모두와 지정 된 <xref:System.Globalization.CultureInfo>개체입니다.</xref:System.Globalization.CultureInfo> </xref:System.Windows.Input.KeyGesture.Modifiers%2A> </xref:System.Windows.Input.KeyGesture.Key%2A>"
  syntax:
    content: public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Culture 관련 정보입니다."
    return:
      type: System.String
      description: "표시할 문자열을"
  overload: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Key
  id: Key
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Key
  nameWithType: KeyGesture.Key
  fullName: System.Windows.Input.KeyGesture.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이 연결 된 키를 가져옵니다 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>합니다."
  remarks: "대부분의 경우에는 <xref:System.Windows.Input.KeyGesture>하 나와 연결 되어야 합니다 또는 내용은 <xref:System.Windows.Input.ModifierKeys>참조 하십시오.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture>  이 규칙에 대 한 예외는 기능 키 및 유효한 될 수 있는 숫자 키패드 키 <xref:System.Windows.Input.KeyGesture>자체로.</xref:System.Windows.Input.KeyGesture>"
  syntax:
    content: public System.Windows.Input.Key Key { get; }
    return:
      type: System.Windows.Input.Key
      description: "제스처와 연결 된 키입니다.  기본값은 <xref href=&quot;System.Windows.Input.Key&quot;> </xref>합니다."
  overload: System.Windows.Input.KeyGesture.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  id: Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Matches(Object,InputEventArgs)
  nameWithType: KeyGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "결정 여부이 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> 연결 된 지정 된 입력과 일치 <xref href=&quot;System.Windows.Input.InputEventArgs&quot;> </xref> 개체입니다."
  remarks: '`targetElement`특정 요소에는 명령을 호출할지 여부에 보다 구체적인 결정을 내리는 데 사용할 수 수 있습니다.'
  example:
  - "The following example shows how to test whether a <xref:System.Windows.Input.KeyGesture> matches the input associated with an instance of an <xref:System.Windows.Input.InputEventArgs>. A <xref:System.Windows.UIElement.KeyDown> event handler is created that compares the event data with the <xref:System.Windows.Input.KeyGesture> by using the Matches method.  \n  \n [!code-cs[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keydownhandlerkeygesturematches)]\n [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keydownhandlerkeygesturematches)]"
  syntax:
    content: public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);
    parameters:
    - id: targetElement
      type: System.Object
      description: "대상입니다."
    - id: inputEventArgs
      type: System.Windows.Input.InputEventArgs
      description: "입력된 이벤트 데이터를이 제스처 비교입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 이벤트 데이터 일치 하는 경우 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Input.KeyGesture.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Modifiers
  id: Modifiers
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
  fullName: System.Windows.Input.KeyGesture.Modifiers
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "와 연결 된 보조 키를 가져옵니다 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>합니다."
  remarks: "대부분의 경우에는 <xref:System.Windows.Input.KeyGesture>하 나와 연결 되어야 합니다 또는 내용은 <xref:System.Windows.Input.ModifierKeys>참조 하십시오.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture> 이 규칙에 대 한 예외는 기능 키 및 유효한 될 수 있는 숫자 키패드 키 <xref:System.Windows.Input.KeyGesture>자체로.</xref:System.Windows.Input.KeyGesture> 예를 들어 만들 수 있습니다는 <xref:System.Windows.Input.KeyGesture>에서 F12 키를 사용 하 여에 키 이지만 X를 사용 하는 <xref:System.Windows.Input.KeyGesture>보조키와 쌍으로 연결할 수 있어야 합니다.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyGesture>"
  syntax:
    content: public System.Windows.Input.ModifierKeys Modifiers { get; }
    return:
      type: System.Windows.Input.ModifierKeys
      description: "제스처와 관련 된 보조키입니다. 기본값은 <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>합니다."
  overload: System.Windows.Input.KeyGesture.Modifiers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputGesture
  isExternal: false
  name: System.Windows.Input.InputGesture
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key)
  nameWithType: KeyGesture.KeyGesture(Key)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key,ModifierKeys)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)
- uid: System.Windows.Input.ModifierKeys
  parent: System.Windows.Input
  isExternal: false
  name: ModifierKeys
  nameWithType: ModifierKeys
  fullName: System.Windows.Input.ModifierKeys
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key,ModifierKeys,String)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Input.KeyGesture.DisplayString
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
  fullName: System.Windows.Input.KeyGesture.DisplayString
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: GetDisplayStringForCulture(CultureInfo)
  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)
  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Input.KeyGesture.Key
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Key
  nameWithType: KeyGesture.Key
  fullName: System.Windows.Input.KeyGesture.Key
- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Matches(Object,InputEventArgs)
  nameWithType: KeyGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.InputEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: InputEventArgs
  nameWithType: InputEventArgs
  fullName: System.Windows.Input.InputEventArgs
- uid: System.Windows.Input.KeyGesture.Modifiers
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
  fullName: System.Windows.Input.KeyGesture.Modifiers
- uid: System.Windows.Input.KeyGesture.#ctor*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture
  nameWithType: KeyGesture.KeyGesture
- uid: System.Windows.Input.KeyGesture.DisplayString*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: GetDisplayStringForCulture
  nameWithType: KeyGesture.GetDisplayStringForCulture
- uid: System.Windows.Input.KeyGesture.Key*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Key
  nameWithType: KeyGesture.Key
- uid: System.Windows.Input.KeyGesture.Matches*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Matches
  nameWithType: KeyGesture.Matches
- uid: System.Windows.Input.KeyGesture.Modifiers*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
