### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.ICommandSource
  id: ICommandSource
  children:
  - System.Windows.Input.ICommandSource.Command
  - System.Windows.Input.ICommandSource.CommandParameter
  - System.Windows.Input.ICommandSource.CommandTarget
  langs:
  - csharp
  name: ICommandSource
  nameWithType: ICommandSource
  fullName: System.Windows.Input.ICommandSource
  type: Interface
  summary: "명령을 호출 하는 방법을 알고 있는 개체를 정의 합니다."
  remarks: "명령 소스가 명령을 특정 개체에서 호출 하는 방법을 정의 합니다.  예를 들어 경우는 <xref:System.Windows.Controls.Button>명령, 명령 연결 되어 때 호출 되는 <xref:System.Windows.Controls.Button>를 클릭 합니다.</xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.Button>       명령 소스가 일반적으로 비활성화 됩니다 현재 명령 대상에서 연결 된 명령을 실행할 수 없는 경우.  예를 들어 한 <xref:System.Windows.Controls.MenuItem>연관는 <xref:System.Windows.Input.ApplicationCommands.Paste%2A>명령 회색으로 표시 될 때는 <xref:System.Windows.Input.ApplicationCommands.Paste%2A>현재 명령 대상에서 명령을 실행할 수 없습니다.</xref:System.Windows.Input.ApplicationCommands.Paste%2A> </xref:System.Windows.Input.ApplicationCommands.Paste%2A> </xref:System.Windows.Controls.MenuItem>       명령 소스를 수신 하는 일반적으로 <xref:System.Windows.Input.ICommand.CanExecuteChanged>명령에는 이벤트입니다.</xref:System.Windows.Input.ICommand.CanExecuteChanged>  이 키보드 포커스를 손실 등 명령 대상에서 조건이 변경 되 면 명령 소스를 알립니다.  명령 소스가 사용 하 여 명령을 확인할 수 있습니다는 <xref:System.Windows.Input.ICommand.CanExecute%2A>메서드.</xref:System.Windows.Input.ICommand.CanExecute%2A>       클래스 중 일부 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] ICommandSource은 구현 하는: <xref:System.Windows.Controls.Primitives.ButtonBase>, <xref:System.Windows.Controls.MenuItem>, 및 <xref:System.Windows.Documents.Hyperlink>.</xref:System.Windows.Documents.Hyperlink> </xref:System.Windows.Controls.MenuItem> </xref:System.Windows.Controls.Primitives.ButtonBase>       에 [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] 명령 시스템에서는 <xref:System.Windows.Input.InputBinding.CommandTarget%2A>속성에는 ICommandSource 인 적용 가능한 경우에 <xref:System.Windows.Input.ICommand>은 <xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>  경우는 <xref:System.Windows.Input.InputBinding.CommandTarget%2A>는 ICommandSource에 설정 되어 있으며 해당 명령이 없습니다는 <xref:System.Windows.Input.RoutedCommand>, 명령 대상이 무시 됩니다.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>"
  syntax:
    content: public interface ICommandSource
  implements: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.Command
  id: Command
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: Command
  nameWithType: ICommandSource.Command
  fullName: System.Windows.Input.ICommandSource.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "명령 소스가 호출 될 때 실행할 명령을 가져옵니다."
  syntax:
    content: public System.Windows.Input.ICommand Command { get; }
    return:
      type: System.Windows.Input.ICommand
      description: "명령 소스가 호출 될 때 실행 되는 명령입니다."
  overload: System.Windows.Input.ICommandSource.Command*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.CommandParameter
  id: CommandParameter
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
  fullName: System.Windows.Input.ICommandSource.CommandParameter
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "나타냅니다 사용자 실행 될 때 명령에 전달 될 수 있는 데이터 값을 정의 합니다."
  remarks: "일반적으로 CommandParameter 실행 될 때 명령에 특정 정보를 전달 하는 데 사용 됩니다.  데이터 형식은 명령에 의해 정의 됩니다."
  syntax:
    content: public object CommandParameter { get; }
    return:
      type: System.Object
      description: "명령 별 데이터입니다."
  overload: System.Windows.Input.ICommandSource.CommandParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.CommandTarget
  id: CommandTarget
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
  fullName: System.Windows.Input.ICommandSource.CommandTarget
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "명령이 실행 되는 개체입니다."
  remarks: "에 [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] 명령 시스템에서는 <xref:System.Windows.Input.InputBinding.CommandTarget%2A>속성에는 <xref:System.Windows.Input.ICommandSource>인 적용 가능한 경우에 <xref:System.Windows.Input.ICommand>은 <xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>  경우는 <xref:System.Windows.Input.InputBinding.CommandTarget%2A>에 설정 된 한 <xref:System.Windows.Input.ICommandSource>해당 명령이 않습니다는 <xref:System.Windows.Input.RoutedCommand>, 명령 대상이 무시 됩니다.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>       와 함께 사용할 경우는 <xref:System.Windows.Input.RoutedCommand>, 명령 대상 개체를은 <xref:System.Windows.Input.CommandManager.Executed>및 <xref:System.Windows.Input.CommandManager.CanExecute>이벤트가 발생 합니다.</xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.RoutedCommand> CommandTarget 속성을 설정 하지 않으면 경우 키보드 포커스가 있는 요소를 대상으로 사용할 됩니다."
  syntax:
    content: public System.Windows.IInputElement CommandTarget { get; }
    return:
      type: System.Windows.IInputElement
      description: "명령이 실행 되는 개체입니다."
  overload: System.Windows.Input.ICommandSource.CommandTarget*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.ICommandSource.Command
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: Command
  nameWithType: ICommandSource.Command
  fullName: System.Windows.Input.ICommandSource.Command
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.ICommandSource.CommandParameter
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
  fullName: System.Windows.Input.ICommandSource.CommandParameter
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.ICommandSource.CommandTarget
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
  fullName: System.Windows.Input.ICommandSource.CommandTarget
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.ICommandSource.Command*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: Command
  nameWithType: ICommandSource.Command
- uid: System.Windows.Input.ICommandSource.CommandParameter*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
- uid: System.Windows.Input.ICommandSource.CommandTarget*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
