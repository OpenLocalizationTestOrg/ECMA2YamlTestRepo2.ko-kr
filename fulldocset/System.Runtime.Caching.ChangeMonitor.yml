### YamlMime:ManagedReference
items:
- uid: System.Runtime.Caching.ChangeMonitor
  id: ChangeMonitor
  children:
  - System.Runtime.Caching.ChangeMonitor.#ctor
  - System.Runtime.Caching.ChangeMonitor.Dispose
  - System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  - System.Runtime.Caching.ChangeMonitor.HasChanged
  - System.Runtime.Caching.ChangeMonitor.InitializationComplete
  - System.Runtime.Caching.ChangeMonitor.IsDisposed
  - System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  - System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  - System.Runtime.Caching.ChangeMonitor.UniqueId
  langs:
  - csharp
  name: ChangeMonitor
  nameWithType: ChangeMonitor
  fullName: System.Runtime.Caching.ChangeMonitor
  type: Class
  summary: "캐시 항목에 따라 데이터의 상태 변경을 모니터링 하는 파생 된 사용자 지정 형식에 대 한 기본 클래스를 제공 합니다."
  remarks: "ChangeMonitor 클래스는 특정 캐시 구현에 대해 특수화 된 파생된 모니터링 클래스에 대 한 기본 클래스로 사용 됩니다. ChangeMonitor 인스턴스 데이터에 따라 캐시 항목의 상태 변경을 모니터링 합니다. 예를 들어 항목 내용이 캐시 된 파일 또는 데이터 엔터티를 수 있습니다. 파일 또는 데이터 엔터티가 업데이트 되는 경우 연결 된 캐시 항목 수 변경 합니다. 모니터링할 수 있는 공통 항목 데이터 엔터티 (예: 데이터베이스 필드, 값, 행 또는 테이블), 다른 캐시 항목 및 파일 및 파일 특성을 포함 합니다.       종속성 변경 종속성의 상태 변경이입니다. 일반적인 캐시 구현에서 ChangeMonitor 인스턴스 종속성이 변경 되는 캐시를에 알립니다. 후 캐시 삽입 된 캐시 항목을 무효화 같은 필요한 동작을 수행 합니다.       다양 한 특정 데이터 저장소에 대 한 종속성 변경을 모니터링 하려면 파생된 ChangeMonitor 클래스를 사용자 지정할 수 있습니다. 예를 들어 파일 시스템, 실제 메모리 또는 데이터베이스에 대 한 캐시 구현이 있습니다. ChangeMonitor 클래스는 캐시를 외부에서 발생 하는 변경 내용을 검사 하 고 변경 내용을 캐시 한 다음 경고 합니다.       [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] ChangeMonitor 클래스에서 파생 되는 다음 클래스를 포함:- <xref:System.Runtime.Caching.CacheEntryChangeMonitor>- <xref:System.Runtime.Caching.FileChangeMonitor>- <xref:System.Runtime.Caching.HostFileChangeMonitor>- <xref:System.Runtime.Caching.SqlChangeMonitor>각이 클래스는 다른 종류의 종속성을 사용 합니다.</xref:System.Runtime.Caching.SqlChangeMonitor> </xref:System.Runtime.Caching.HostFileChangeMonitor> </xref:System.Runtime.Caching.FileChangeMonitor> </xref:System.Runtime.Caching.CacheEntryChangeMonitor> 예를 들어 파생 <xref:System.Runtime.Caching.FileChangeMonitor>클래스에는 캐시 항목에 종속 된 파일 시스템 데이터 (파일 및 폴더)에 대 한 캐시의 변경 내용을 모니터링.</xref:System.Runtime.Caching.FileChangeMonitor>"
  syntax:
    content: 'public abstract class ChangeMonitor : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.#ctor
  id: '#ctor'
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: ChangeMonitor()
  nameWithType: ChangeMonitor.ChangeMonitor()
  fullName: System.Runtime.Caching.ChangeMonitor.ChangeMonitor()
  type: Constructor
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> 클래스입니다. 이 생성자는 기본 클래스를 초기화 하는 파생된 클래스의 생성자에서 호출 됩니다."
  remarks: "<xref:System.Runtime.Caching.ChangeMonitor>클래스에 기본 생성자입니다.</xref:System.Runtime.Caching.ChangeMonitor> 그러나에서 상속 하는 기본 <xref:System.Runtime.Caching.ChangeMonitor>클래스 및 사용자 지정 변경 모니터링 정의 동작은 생성자에서 초기화를 수행 해야 합니다.</xref:System.Runtime.Caching.ChangeMonitor> 자세한 내용은 상속자 참고 사항 섹션에 대 한 메모를 참조 하세요."
  syntax:
    content: protected ChangeMonitor ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.Dispose
  id: Dispose
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: Dispose()
  nameWithType: ChangeMonitor.Dispose()
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "현재 인스턴스에서 사용 되는 모든 리소스를 해제는 <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> 클래스입니다."
  remarks: "Dispose 메서드를 호출 하는 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>한 번만 호출 되는 처음으로 파생 된 클래스의 메서드.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Dispose 메서드를 후속 호출에는 효과가 없습니다. 메서드가 호출 된 후의 <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>속성이 `true`.</xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>       <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>삭제 하기 위해 오버 로드를 호출 해야 합니다는 <xref:System.Runtime.Caching.ChangeMonitor>인스턴스.</xref:System.Runtime.Caching.ChangeMonitor> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 다음은 dispose 메서드를 호출 하는 것에 대 한 규칙:-는 삭제 해야 하는 호출자의 항목은 캐시에 삽입 되 면 전에 <xref:System.Runtime.Caching.ChangeMonitor>인스턴스.</xref:System.Runtime.Caching.ChangeMonitor>      -한 번 캐시 항목 및 <xref:System.Runtime.Caching.ChangeMonitor>연결 된 인스턴스를 캐시 되었는지 확인 해야 하는 캐시 구현자에 전달 되 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>삽입이 실패 하는 경우에 호출 됩니다.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor>      항목 및 연결 된 후 <xref:System.Runtime.Caching.ChangeMonitor>인스턴스가 캐시에 전달 된, 때문에 호출자에 게가 종속성을 삭제 해야 때는 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>메서드가 호출 되 면 호출이 종속성이 변경 된 것 처럼 처리 됩니다.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor> 결과적으로 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>메서드는 자동으로 호출 합니다.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      -고려 이러한 규칙을는 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>다음 방법 중 하나에서 메서드를 호출 해야:-파생된 변경 모니터 인스턴스를 캐시에 삽입 하지 않도록 결정은 사용자가 Dispose 메서드 오버 로드를 호출 해야 합니다.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>          -캐시 구현은 구현 변경 모니터 인스턴스 개체 캐시에 삽입 하려고 시도 하지만 삽입이 실패 하는 경우 Dispose 오버 로드를 호출 하는 일을 담당 합니다. 삽입 시도가 예외를 발생 시키는 캐시 구현 관련 된 모든 종속성을 삭제 해야 합니다.          -캐시 항목이 제거 된 경우 캐시 구현 종속성도 삭제 해야 합니다.       내부 구현은 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>메서드를 자동으로 호출 된 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>후 하는 콜백을 호출할 메서드를 통해 등록 된는 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>메서드.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      > [!NOTE] > 이벤트 발생 하는 동안이 자동 dispose 경우에 발생의 초기화는 <xref:System.Runtime.Caching.ChangeMonitor>인스턴스가 이전에 완료 되었습니다.</xref:System.Runtime.Caching.ChangeMonitor>       파생 된 변경 모니터의 생성자가 호출 하는 경우는 <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>메서드를 변경 모니터의 상태가 이미 변경 하는 경우 (즉, 상태가 모니터링 되는 이미 변경 생성자가 여전히 활성화 하는 경우) 다음 <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>메서드는 변경 모니터를 자동으로 삭제 합니다.</xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> </xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>      > [!NOTE] > 사용자가 Dispose 메서드를 호출 하지 않아야 합니다. 그러나 메서드를 호출에서 사용자를 방지할 수 없습니다. 따라서, 그럴 경우는 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>메서드가 호출 됩니다.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 이 경우 캐시 항목에는 종속성이 변경 하는 경우 알림이 전송 됩니다.       파생된 클래스 Dispose 메서드를 재정의 하지 않도록 하려면는 메서드는 명시적 인터페이스 구현 없습니다."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.Dispose*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "초기화 기본 Dispose 메서드를 호출한 변경 모니터 파생된 클래스에서 완료 되지 않았습니다."
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ChangeMonitor.Dispose(Boolean)
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "모든 관리 및 관리 되지 않는 리소스를 해제에 대 한 참조는 <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> 인스턴스. 이 오버 로드는 변경 모니터 파생된 클래스에서 구현 되어야 합니다."
  remarks: "때의 값 `disposing` 값은 `true`, 스레드와 관리 되지 않는 리소스를 모두 삭제 되 고 파생된 변경 모니터 인스턴스 가비지 수집 될 수 있도록이 개체에 대 한 참조가 해제 됩니다. 변수는 기본 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>메서드 구현 된 Dispose 메서드는 한 번만 호출 합니다.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>"
  syntax:
    content: protected abstract void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 및 관리 되지 않는 리소스에 대 한 참조를 해제 하는 <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> 인스턴스이거나 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다. 때 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 이 전달 되 면 메서드는 Dispose를 <xref uid=&quot;langword_csharp_finalizer&quot; name=&quot;finalizer&quot; href=&quot;&quot;> </xref> 스레드 및 관리 되는 모든 외부 참조는 가비지 수집 이미 였 기 때문에 더 이상 유효 합니다."
  overload: System.Runtime.Caching.ChangeMonitor.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged
  id: HasChanged
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
  fullName: System.Runtime.Caching.ChangeMonitor.HasChanged
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "상태에 의해 모니터링 되는 중임을 나타내는 값을 가져옵니다는 <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> 클래스가 변경 되었습니다."
  remarks: "파생 된이 속성의 값을 확인할 수 있습니다 <xref:System.Runtime.Caching.ChangeMonitor>클래스 종속성이 변경 되었는지 여부를 확인 하려면.</xref:System.Runtime.Caching.ChangeMonitor>       값으로 설정 됩니다 `true` 종속성 변경이 발생할 경우 (즉는 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>메서드는).</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 이후에 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>메서드가 파생된 클래스에서 호출 되 면 HasChanged 속성의 값이 됩니다 `true`여부에 관계 없이 <xref:System.Runtime.Caching.OnChangedCallback>를 호출 하 여 인스턴스 अ ध는 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>메서드.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      > [!NOTE] > 호출자 종속 변경 되었는지 여부를 확인 하려면 HasChanged 속성을 확인할 수 있습니다. 그러나 다중 스레드 환경에서는 간단 하 고 더 많은 유지 관리 가능한 접근 하는 것 HasChanged 속성을 검사 하지 않고 캐시 구현에 데이터를 삽입 합니다. 캐시 구현 해야 HasChanged 속성 확인 및 하지 삽입 수행 하거나 해야 하나 이상의 연결 된 종속성 이미 변경 된 경우 작업을 설정 합니다."
  syntax:
    content: public bool HasChanged { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우에 의해 모니터링 되는 상태는 <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> 인스턴스가 변경; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Runtime.Caching.ChangeMonitor.HasChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete
  id: InitializationComplete
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: InitializationComplete()
  nameWithType: ChangeMonitor.InitializationComplete()
  fullName: System.Runtime.Caching.ChangeMonitor.InitializationComplete()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "초기화가 완료 되었음을 나타내기 위해 파생된 클래스의 생성자에서 호출 됩니다."
  remarks: "종속성이 파생된 클래스에서 초기화가 완료 되기 전에 변경 하는 경우 파생된 클래스의 생성자를 호출 해야 합니다는 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>메서드.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>       때는 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>메서드가 호출 되는 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>자동으로 속성이 `true` 변경 모니터에 의해.</xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 결과적으로, 변경 모니터 생성자 InitializationComplete 메서드를 호출할 때 기본 클래스를 자동으로 호출 된 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>메서드.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 초기화가 완료 되 면 하는 경우는 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>메서드는 파생된 변경 모니터 인스턴스를 자동으로 삭제 합니다.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>"
  syntax:
    content: protected void InitializationComplete ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.InitializationComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed
  id: IsDisposed
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
  fullName: System.Runtime.Caching.ChangeMonitor.IsDisposed
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "파생된 인스턴스의 함을 나타내는 값을 가져옵니다는 <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> 삭제 됩니다."
  remarks: "속성이로 설정 되어 `true` 기본 후 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>메서드 호출의 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>인스턴스를 삭제 하려면 파생된 클래스에서 메서드.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>"
  syntax:
    content: public bool IsDisposed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>인스턴스가; 삭제 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Runtime.Caching.ChangeMonitor.IsDisposed*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  id: NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: NotifyOnChanged(OnChangedCallback)
  nameWithType: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  fullName: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "콜백을 등록 하 게 알리는 캐시 구현자에 의해 호출는 <xref href=&quot;System.Runtime.Caching.ObjectCache&quot;> </xref> 통해는 <xref href=&quot;System.Runtime.Caching.OnChangedCallback&quot;> </xref> 종속성이 변경 하는 경우 위임 합니다."
  remarks: "캐시 구현자 변경 모니터 자신을 연결 하려면이 메서드를 사용 합니다. 통과 연결 하나 이상의 캐시 항목을 사용 하 여 모니터를 변경,는 <xref:System.Runtime.Caching.CacheItemPolicy>캐시 항목 채워진된 변경 모니터 속성을 사용 하 여 인스턴스.</xref:System.Runtime.Caching.CacheItemPolicy> 반복에 대 한 지원 변경 모니터 캐시 구현자는는 <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>속성과 레지스터는 <xref:System.Runtime.Caching.OnChangedCallback>각 대리자 발견 하는 모니터를 변경 합니다.</xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>       때문에 <xref:System.Runtime.Caching.OnChangedCallback>구체적인 변경 모니터 구현은 선택적 상태 정보를 전달할 수, 대리자는 선택적 상태 매개 변수를 포함 합니다.</xref:System.Runtime.Caching.OnChangedCallback> 캐시 구현자 명시적 종속성 상태 사용자 지정 변경 모니터 콜백의 일부로 전달 하는 유형의을 수행할 수 있는지 여부를 결정 합니다.      > [!NOTE] > 기본 캐시 확장성 API에는 상태 형식에 대 한 명시적 종속성 요구 사항이 있습니다.       NotifyOnChanged 메서드의 구현에서는 자동으로 모니터의 상태가 이미 NotifyOnChanged 메서드를 호출 하는 시간에 변경 되었는지 여부를 결정 합니다. 경우는 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>속성은 `true`, 메서드를 자동으로 호출 합니다는 <xref:System.Runtime.Caching.OnChangedCallback>통해 등록 된 이벤트 처리기는 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>메서드.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> 이 캐시 구현 캐시를 구현 하는 모니터를 가져오고, 최대 연결 시간으로 변경 모니터를 만들면 시간에서 기본 모니터링된 상태가 변경 되었을 수 있기 때문에 발생 합니다. 경우 상태가 이미 변경 후에 전달 되는 개체는 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>방법은 `null`.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>       NotifyOnChanged 메서드는 한 번만 호출할 수 있으며 후속 호출에서 예외가 throw 됩니다."
  syntax:
    content: public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);
    parameters:
    - id: onChangedCallback
      type: System.Runtime.Caching.OnChangedCallback
      description: "종속성이 변경 될 때 호출 되는 메서드에 대 한 참조입니다."
  overload: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "콜백 메서드가 이미 호출 되었습니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>onChangedCallback</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  id: OnChanged(System.Object)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: OnChanged(Object)
  nameWithType: ChangeMonitor.OnChanged(Object)
  fullName: System.Runtime.Caching.ChangeMonitor.OnChanged(Object)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "종속성이 변경 될 때 이벤트를 발생 시키는 파생된 클래스에서 호출 합니다."
  remarks: "일반적으로 OnChanged 메서드는 종속성이 변경 될 때 호출 됩니다. OnChanged 메서드 변경 모니터 인스턴스가 삭제 되지만 콜백을 호출 하지 않으면 이미 있는 경우에 삭제 작업이 수행 되는 경우에 호출 합니다.       전에 OnChanged 메서드가 호출 되는 경우는 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>메서드가 호출 되 면 OnChanged 메서드에 대 한 호출의 상태 데이터는 캐시 구현에 의해 저장 됩니다.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> 또한 하는 콜백에 <xref:System.Runtime.Caching.OnChangedCallback>즉시 메서드 때는 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>메서드가 호출 됩니다.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback>"
  syntax:
    content: protected void OnChanged (object state);
    parameters:
    - id: state
      type: System.Object
      description: "변경 이벤트에 대 한 데이터입니다. 이 값 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Runtime.Caching.ChangeMonitor.OnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId
  id: UniqueId
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
  fullName: System.Runtime.Caching.ChangeMonitor.UniqueId
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "나타내는 값을 가져옵니다는 <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> 클래스 인스턴스."
  remarks: "UniqueId 속성 값 일반적으로 구성 됩니다 종속성 연결 이름의 문자열 데이터의 고유 하 게 하 여 모니터링 되는 데이터 식별자는 <xref:System.Runtime.Caching.ChangeMonitor>인스턴스.</xref:System.Runtime.Caching.ChangeMonitor> UniqueId 속성의 값은 문자열입니다. 고유 ID를 할당 하는 문자열의 값이 사용 된 <xref:System.Runtime.Caching.ChangeMonitor>인스턴스.</xref:System.Runtime.Caching.ChangeMonitor>"
  syntax:
    content: public abstract string UniqueId { get; }
    return:
      type: System.String
      description: "변경 모니터 인스턴스에 대 한 식별자입니다."
  overload: System.Runtime.Caching.ChangeMonitor.UniqueId*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Runtime.Caching.ChangeMonitor.#ctor
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: ChangeMonitor()
  nameWithType: ChangeMonitor.ChangeMonitor()
  fullName: System.Runtime.Caching.ChangeMonitor.ChangeMonitor()
- uid: System.Runtime.Caching.ChangeMonitor.Dispose
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose()
  nameWithType: ChangeMonitor.Dispose()
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose()
- uid: System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ChangeMonitor.Dispose(Boolean)
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
  fullName: System.Runtime.Caching.ChangeMonitor.HasChanged
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: InitializationComplete()
  nameWithType: ChangeMonitor.InitializationComplete()
  fullName: System.Runtime.Caching.ChangeMonitor.InitializationComplete()
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
  fullName: System.Runtime.Caching.ChangeMonitor.IsDisposed
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: NotifyOnChanged(OnChangedCallback)
  nameWithType: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  fullName: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(OnChangedCallback)
- uid: System.Runtime.Caching.OnChangedCallback
  parent: System.Runtime.Caching
  isExternal: false
  name: OnChangedCallback
  nameWithType: OnChangedCallback
  fullName: System.Runtime.Caching.OnChangedCallback
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: OnChanged(Object)
  nameWithType: ChangeMonitor.OnChanged(Object)
  fullName: System.Runtime.Caching.ChangeMonitor.OnChanged(Object)
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
  fullName: System.Runtime.Caching.ChangeMonitor.UniqueId
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Caching.ChangeMonitor.#ctor*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: ChangeMonitor
  nameWithType: ChangeMonitor.ChangeMonitor
- uid: System.Runtime.Caching.ChangeMonitor.Dispose*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose
  nameWithType: ChangeMonitor.Dispose
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: InitializationComplete
  nameWithType: ChangeMonitor.InitializationComplete
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: NotifyOnChanged
  nameWithType: ChangeMonitor.NotifyOnChanged
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: OnChanged
  nameWithType: ChangeMonitor.OnChanged
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
