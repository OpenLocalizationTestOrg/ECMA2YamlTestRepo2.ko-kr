### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.TraceListener
  id: TraceListener
  children:
  - System.Diagnostics.TraceListener.#ctor
  - System.Diagnostics.TraceListener.#ctor(System.String)
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Close
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Dispose(System.Boolean)
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.Flush
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.Name
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.String)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  langs:
  - csharp
  name: TraceListener
  nameWithType: TraceListener
  fullName: System.Diagnostics.TraceListener
  type: Class
  summary: "제공 된 <xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;> </xref> 추적 및 디버그 출력 모니터링 하는 수신기에 대 한 기본 클래스입니다."
  remarks: "For examples of how to implement a TraceListener, see the <xref:System.Diagnostics.DefaultTraceListener>, <xref:System.Diagnostics.TextWriterTraceListener> and the <xref:System.Diagnostics.EventLogTraceListener> classes.  \n  \n You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.  \n  \n-   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file. In Visual Basic, add the `/d:DEBUG=True` flag to the compiler command line.  \n  \n-   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In Visual Basic, add the `/d:TRACE=True` flag to the compiler command line.  \n  \n To add a trace listener, edit the configuration file that corresponds to the name of your application. Within this file, you can add a listener, set its type and set its parameter, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted similar to the following example.  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <trace autoflush=\"false\" indentsize=\"4\">  \n      <listeners>  \n        <add name=\"myListener\" type=\"System.Diagnostics.TextWriterTraceListener\" initializeData=\"TextWriterOutput.log\" />  \n        <remove name=\"Default\" />  \n      </listeners>  \n    </trace>  \n  </system.diagnostics>  \n</configuration>  \n```  \n  \n For more information on using configuration files for tracing, see [\\&lt;system.diagnostics\\&gt;](../Topic/%3Csystem.diagnostics%3E%20Element.md)."
  syntax:
    content: 'public abstract class TraceListener : MarshalByRefObject, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceListener()
  nameWithType: TraceListener.TraceListener()
  fullName: System.Diagnostics.TraceListener.TraceListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> 클래스입니다."
  remarks: "다음 표에서 <xref:System.Diagnostics.TraceListener>안내 하십시오.</xref:System.Diagnostics.TraceListener> 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 기본 값 |   |--------------|-------------------|   | 이름 | 빈 문자열 (&quot;&quot;). | | 들여쓰기 |&0;. |   | IndentSize | 공백&4; 개입니다. |"
  syntax:
    content: protected TraceListener ();
    parameters: []
  overload: System.Diagnostics.TraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceListener(String)
  nameWithType: TraceListener.TraceListener(String)
  fullName: System.Diagnostics.TraceListener.TraceListener(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> 클래스 수신기로 지정된 된 이름을 사용 합니다."
  syntax:
    content: protected TraceListener (string name);
    parameters:
    - id: name
      type: System.String
      description: "이름에서 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>합니다."
  overload: System.Diagnostics.TraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Attributes
  id: Attributes
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Attributes
  nameWithType: TraceListener.Attributes
  fullName: System.Diagnostics.TraceListener.Attributes
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "응용 프로그램 구성 파일에 정의 된 사용자 지정 추적 수신기 특성을 가져옵니다."
  remarks: "클래스에서 상속 되는 <xref:System.Diagnostics.TraceListener>클래스를 재정의 하 여 사용자 지정 특성을 추가할 수는 <xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A>메서드 및 사용자 지정 특성 이름의 문자열 배열을 반환 합니다.</xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A> </xref:System.Diagnostics.TraceListener> Attributes 속성 응용 프로그램의 구성 파일에서 참조 되는 사용자 지정 특성을 식별 합니다. 예를 들어 다음 구성 파일 예제에에서는 <xref:System.Diagnostics.DelimitedListTraceListener>사용자 지정 특성 &quot;구분 기호&quot;를 참조 합니다.</xref:System.Diagnostics.DelimitedListTraceListener> 이 경우 특성 속성 반환는 <xref:System.Collections.Specialized.StringDictionary>&quot;구분 기호&quot; 문자열이 포함 된.</xref:System.Collections.Specialized.StringDictionary>      ```   <listeners>     <add name=&quot;delimitedListener&quot;        type=&quot;System.Diagnostics.DelimitedListTraceListener&quot;        delimiter=&quot;:&quot;        initializeData=&quot;delimitedOutput.txt&quot;        traceOutputOptions=&quot;ProcessId, DateTime&quot; />     <remove name=&quot;Default&quot; />   </listeners>   ```참조 되지 않은 사용자 지정 특성을 열거 되지 않습니다.  자세한 내용은 참조는 <xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A>메서드.</xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A>"
  syntax:
    content: public System.Collections.Specialized.StringDictionary Attributes { get; }
    return:
      type: System.Collections.Specialized.StringDictionary
      description: "A <xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref> 추적 수신기에 대 한 사용자 지정 특성이 포함 합니다."
  overload: System.Diagnostics.TraceListener.Attributes*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Close
  id: Close
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: TraceListener.Close()
  fullName: System.Diagnostics.TraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "파생된 클래스에서 재정의 되 면 더 이상 추적 또는 디버깅 출력을 받지 않도록 출력 스트림을 닫습니다."
  remarks: "이 메서드를 사용 하 여 출력 하는 경우 파일에 같은 <xref:System.Diagnostics.TextWriterTraceListener>.</xref:System.Diagnostics.TextWriterTraceListener> 이 메서드를 호출한 후 개체를 다시 초기화 해야 합니다."
  syntax:
    content: public virtual void Close ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Dispose
  id: Dispose
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Dispose()
  nameWithType: TraceListener.Dispose()
  fullName: System.Diagnostics.TraceListener.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>합니다."
  remarks: "사용 하는 리소스를 사용 하면 Dispose를 호출는 <xref:System.Diagnostics.TraceListener>다른 용도에 다시 할당 됩니다.</xref:System.Diagnostics.TraceListener> Dispose에 대 한 자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: TraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.TraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public <xref:System.Diagnostics.TraceListener.Dispose%2A>메서드 및 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> </xref:System.Diagnostics.TraceListener.Dispose%2A> `Dispose`보호 된 호출 <xref:System.Diagnostics.TraceListener.Dispose%2A>메서드는 `disposing` 매개 변수 설정 `true`.</xref:System.Diagnostics.TraceListener.Dispose%2A> <xref:System.Object.Finalize%2A>호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</xref:System.Object.Finalize%2A>       경우는 `disposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Diagnostics.TraceListener>참조.</xref:System.Diagnostics.TraceListener> 이 메서드 호출에서 `Dispose` 각 참조 된 개체의 메서드."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Diagnostics.TraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Fail(System.String)
  id: Fail(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Fail(String)
  nameWithType: TraceListener.Fail(String)
  fullName: System.Diagnostics.TraceListener.Fail(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "오류 메시지를 내보냅니다 구현할 때 만든 수신기에는 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> 클래스입니다."
  remarks: "기본 동작은 응용 프로그램 사용자 인터페이스 모드로 실행 중일 때 메시지 상자에 지정된 된 메시지를 표시 하는 <xref:System.Diagnostics.TraceListener>인스턴스에 <xref:System.Diagnostics.TraceListenerCollection>컬렉션.</xref:System.Diagnostics.TraceListenerCollection> </xref:System.Diagnostics.TraceListener> 기본적으로 <xref:System.Diagnostics.TraceListenerCollection>컬렉션에 <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> 의 인스턴스가 있는</xref:System.Diagnostics.TraceListenerCollection> 추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener>를 하거나 컬렉션에서 제거 합니다.</xref:System.Diagnostics.TraceListener>"
  syntax:
    content: public virtual void Fail (string message);
    parameters:
    - id: message
      type: System.String
      description: "내보낼 메시지입니다."
  overload: System.Diagnostics.TraceListener.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)
  id: Fail(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Fail(String,String)
  nameWithType: TraceListener.Fail(String,String)
  fullName: System.Diagnostics.TraceListener.Fail(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "오류를 내보냅니다 구현할 때 만든 메시지와 자세한 오류 메시지는 수신기를는 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> 클래스입니다."
  remarks: "기본 동작은 응용 프로그램이 실행 하는 사용자 인터페이스 모드로 때 메시지 상자에 메시지와 자세한 메시지를 표시 하는 <xref:System.Diagnostics.TraceListener>인스턴스에 <xref:System.Diagnostics.TraceListenerCollection>컬렉션.</xref:System.Diagnostics.TraceListenerCollection> </xref:System.Diagnostics.TraceListener> 기본적으로 <xref:System.Diagnostics.TraceListenerCollection>컬렉션에 <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> 의 인스턴스가 있는</xref:System.Diagnostics.TraceListenerCollection> 추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener>를 하거나 컬렉션에서 제거 합니다.</xref:System.Diagnostics.TraceListener>"
  syntax:
    content: public virtual void Fail (string message, string detailMessage);
    parameters:
    - id: message
      type: System.String
      description: "내보낼 메시지입니다."
    - id: detailMessage
      type: System.String
      description: "내보낼 자세한 메시지입니다."
  overload: System.Diagnostics.TraceListener.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Filter
  id: Filter
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Filter
  nameWithType: TraceListener.Filter
  fullName: System.Diagnostics.TraceListener.Filter
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "가져오고 추적 수신기에 대 한 추적 필터를 설정 합니다."
  remarks: "차단 스위치에서 추적 소스를 제공 하는 것 이상의 계층을 제공 하는 추적 수신기에 추적 필터를 추가할 수 있습니다. 예를 들어는 <xref:System.Diagnostics.EventTypeFilter>수신기에서 출력 된 이벤트 형식을 제어 하는 추적 수신기에 추가할 수 있습니다.</xref:System.Diagnostics.EventTypeFilter>  스위치 조건이 충족 하기 때문에 호출 되는 수신기에 추적 출력을 보낼 수 있는지 확인 하려면 있는 경우 해당 필터를 쿼리할 수 있습니다."
  example:
  - "The following code example shows how to use the Filter property to add a source filter to a console trace listener. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \n  \n [!code-cs[System.Diagnostics.TraceSource2#28](~/add/codesnippet/csharp/p-system.diagnostics.tra_6_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource2#28](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_6_1.vb)]"
  syntax:
    content: public System.Diagnostics.TraceFilter Filter { get; set; }
    return:
      type: System.Diagnostics.TraceFilter
      description: "파생 된 개체는 <xref href=&quot;System.Diagnostics.TraceFilter&quot;> </xref> 기본 클래스입니다."
  overload: System.Diagnostics.TraceListener.Filter*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Flush
  id: Flush
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Flush()
  nameWithType: TraceListener.Flush()
  fullName: System.Diagnostics.TraceListener.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "파생된 클래스에서 재정의 되 면 출력 버퍼를 플러시합니다."
  syntax:
    content: public virtual void Flush ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes
  id: GetSupportedAttributes
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: GetSupportedAttributes()
  nameWithType: TraceListener.GetSupportedAttributes()
  fullName: System.Diagnostics.TraceListener.GetSupportedAttributes()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "추적 수신기에서 지 원하는 사용자 지정 특성을 가져옵니다."
  remarks: "기본 구현에서는 GetSupportedAttributes 반환 `null`합니다."
  example:
  - "The following code sample shows an override of the GetSupportedAttributes method for a custom trace listener.  \n  \n [!code-cs[System.Diagnostics.TraceListener.CustomAttributes#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_22_1.cs)]\n [!code-vb[System.Diagnostics.TraceListener.CustomAttributes#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_22_1.vb)]"
  syntax:
    content: protected virtual string[] GetSupportedAttributes ();
    parameters: []
    return:
      type: System.String[]
      description: "추적 수신기에서 지 원하는 사용자 지정 특성 이름을 지정 하는 문자열 배열을 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 사용자 지정 특성이 없는 경우."
  overload: System.Diagnostics.TraceListener.GetSupportedAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IndentLevel
  id: IndentLevel
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
  fullName: System.Diagnostics.TraceListener.IndentLevel
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "들여쓰기 수준을 가져오거나 설정 합니다."
  remarks: "IndentLevel 속성은 들여쓰기로 지정 된 횟수를 나타냅니다는 <xref:System.Diagnostics.TraceListener.IndentSize%2A>속성이 적용 됩니다.</xref:System.Diagnostics.TraceListener.IndentSize%2A> 이 속성은 스레드/요청 별로 저장 됩니다."
  syntax:
    content: public int IndentLevel { get; set; }
    return:
      type: System.Int32
      description: "들여쓰기 수준입니다. 기본값은&0;입니다."
  overload: System.Diagnostics.TraceListener.IndentLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IndentSize
  id: IndentSize
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IndentSize
  nameWithType: TraceListener.IndentSize
  fullName: System.Diagnostics.TraceListener.IndentSize
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "들여쓰기의 공백 수를 가져오거나 설정 합니다."
  remarks: "속성은 스레드/요청 별로 저장 됩니다."
  syntax:
    content: public int IndentSize { get; set; }
    return:
      type: System.Int32
      description: "들여쓰기의 공백 수를 지정 합니다. 기본값은 공백&4; 개입니다."
  overload: System.Diagnostics.TraceListener.IndentSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "값은&0; 보다 작은 집합 작업이 실패 했습니다."
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IsThreadSafe
  id: IsThreadSafe
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
  fullName: System.Diagnostics.TraceListener.IsThreadSafe
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "안전한 추적 수신기가 스레드로부터 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "IsThreadSafe의 값은 수신기를 쓸 때 전역 잠금을 사용할 것인지 결정 사용 됩니다. IsThreadSafe 값이 `false`, 전역 잠금을 <xref:System.Diagnostics.Trace.UseGlobalLock%2A>.</xref:System.Diagnostics.Trace.UseGlobalLock%2A> 값에 관계 없이 사용 됩니다 전역 잠금을 IsThreadSafe의 값은 경우에 사용 하지 `true` 의 값과 <xref:System.Diagnostics.Trace.UseGlobalLock%2A>은 `false`.</xref:System.Diagnostics.Trace.UseGlobalLock%2A> 기본 동작은 전역를 사용 하는 수신기에 쓸 때마다 잠금."
  syntax:
    content: public virtual bool IsThreadSafe { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>추적 수신기가 스레드로부터 안전 합니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Diagnostics.TraceListener.IsThreadSafe*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Name
  id: Name
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Name
  nameWithType: TraceListener.Name
  fullName: System.Diagnostics.TraceListener.Name
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "이 대 한 이름을 가져오거나 설정 합니다. <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>합니다."
  remarks: "구성 하 고 수신기에 액세스 하는 이름을 사용할 수 있습니다는 <xref:System.Diagnostics.TraceListenerCollection>컬렉션.</xref:System.Diagnostics.TraceListenerCollection>"
  syntax:
    content: public virtual string Name { get; set; }
    return:
      type: System.String
      description: "이 대 한 이름을 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>합니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Diagnostics.TraceListener.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.NeedIndent
  id: NeedIndent
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
  fullName: System.Diagnostics.TraceListener.NeedIndent
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "출력의 들여쓰기 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: '**참고** 는 <xref:System.Diagnostics.TraceListener.WriteIndent%2A>메서드를 호출한는 <xref:System.Diagnostics.DefaultTraceListener>및 <xref:System.Diagnostics.TextWriterTraceListener>클래스, NeedIndent 속성 값을 설정 `false` 불필요 한 들여쓰기 나중 않으려면.</xref:System.Diagnostics.TextWriterTraceListener> </xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.TraceListener.WriteIndent%2A> NeedIndent 속성을 설정 해야 `true` 될 때마다 추적 출력을 합니다.'
  syntax:
    content: protected bool NeedIndent { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>출력을 들여쓰기; 해야 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Diagnostics.TraceListener.NeedIndent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "추적을 기록 정보, 데이터 개체 및 이벤트 정보를 수신기 별 출력 합니다."
  remarks: "> [!IMPORTANT]>이 메서드는 응용 프로그램 코드에서 직접 하지만의 멤버만 호출할 수 없습니다는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource>추적 데이터를 출력을 작성 하는 클래스입니다.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       기본 구현 쓰기는 `eventCache`, `source`, `eventType` 및 `id` 머리글 및 바닥글 추적의 매개 변수입니다. `data` 매개 변수는 추적 메시지의 본문으로 기록 됩니다. `ToString` 데이터 개체의 메서드는 개체에 <xref:System.String>.</xref:System.String> 를 변환 하는"
  syntax:
    content: public virtual void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> 프로세스 ID, 스레드 ID 및 스택 추적 정보가 현재 포함 된 개체입니다."
    - id: source
      type: System.String
      description: "일반적으로 추적 이벤트를 생성 하는 응용 프로그램의 이름을 출력을 식별 하는 데 사용 되는 이름입니다."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "중 하나는 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> 추적을 발생 시킨 이벤트의 유형을 지정 하는 값입니다."
    - id: id
      type: System.Int32
      description: "이벤트에 대 한 숫자 식별자입니다."
    - id: data
      type: System.Object
      description: "내보낼 추적 데이터입니다."
  overload: System.Diagnostics.TraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "추적 정보, 배열 데이터 개체 및 이벤트 정보를 수신기 별 출력에 씁니다."
  remarks: "> [!IMPORTANT]>이 메서드는 응용 프로그램 코드에서 직접 하지만의 멤버만 호출할 수 없습니다는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource>추적 데이터를 출력을 작성 하는 클래스입니다.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       기본 구현은의 값을 쓰는 `source`, `eventType` 및 `id` 헤더와 매개 변수입니다. 데이터 개체를 사용 하 여 문자열로 변환 되는 `ToString` 각 개체의 메서드. `eventCache` 데이터 바닥글의 값에 의존 하는 출력 데이터의 특성으로 기록 됩니다는 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>속성.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> 프로세스 ID, 스레드 ID 및 스택 추적 정보가 현재 포함 된 개체입니다."
    - id: source
      type: System.String
      description: "일반적으로 추적 이벤트를 생성 하는 응용 프로그램의 이름을 출력을 식별 하는 데 사용 되는 이름입니다."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "중 하나는 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> 추적을 발생 시킨 이벤트의 유형을 지정 하는 값입니다."
    - id: id
      type: System.Int32
      description: "이벤트에 대 한 숫자 식별자입니다."
    - id: data
      type: System.Object[]
      description: "데이터로 내보낼 개체의 배열입니다."
  overload: System.Diagnostics.TraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "쓰기 추적 및 이벤트 정보를 수신기 별 출력 합니다."
  remarks: "> [!IMPORTANT]>이 메서드는 응용 프로그램 코드에서 직접 하지만의 멤버만 호출할 수 없습니다는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource>추적 데이터를 출력을 작성 하는 클래스입니다.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       기본 구현은의 값을 쓰는 `source`, `eventType` 및 `id` 헤더와 매개 변수입니다. `eventCache` 데이터 바닥글의 값에 의존 하는 출력 데이터의 특성으로 기록 됩니다는 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>속성.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> 프로세스 ID, 스레드 ID 및 스택 추적 정보가 현재 포함 된 개체입니다."
    - id: source
      type: System.String
      description: "일반적으로 추적 이벤트를 생성 하는 응용 프로그램의 이름을 출력을 식별 하는 데 사용 되는 이름입니다."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "중 하나는 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> 추적을 발생 시킨 이벤트의 유형을 지정 하는 값입니다."
    - id: id
      type: System.Int32
      description: "이벤트에 대 한 숫자 식별자입니다."
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "추적 정보, 메시지 및 이벤트 정보를 수신기 별 출력에 씁니다."
  remarks: "> [!IMPORTANT]>이 메서드는 응용 프로그램 코드에서 직접 하지만의 멤버만 호출할 수 없습니다는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource>추적 데이터를 출력을 작성 하는 클래스입니다.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       기본 구현은의 값을 쓰는 `source`, `eventType` 및 `id` 매개 변수를 헤더로 올는 `message` 데이터입니다. `eventCache` 데이터 바닥글의 값에 의존 하는 출력 데이터의 특성으로 기록 됩니다는 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>속성.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> 프로세스 ID, 스레드 ID 및 스택 추적 정보가 현재 포함 된 개체입니다."
    - id: source
      type: System.String
      description: "일반적으로 추적 이벤트를 생성 하는 응용 프로그램의 이름을 출력을 식별 하는 데 사용 되는 이름입니다."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "중 하나는 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> 추적을 발생 시킨 이벤트의 유형을 지정 하는 값입니다."
    - id: id
      type: System.Int32
      description: "이벤트에 대 한 숫자 식별자입니다."
    - id: message
      type: System.String
      description: "쓸 메시지입니다."
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "추적 정보, 형식이 지정 된 배열 개체 및 이벤트 정보를 수신기 별 출력에 씁니다."
  remarks: "> [!IMPORTANT]>이 메서드는 응용 프로그램 코드에서 직접 하지만의 멤버만 호출할 수 없습니다는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource>추적 데이터를 출력을 작성 하는 클래스입니다.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       기본 구현은의 값을 쓰는 `source`, `eventType` 및 `id` 헤더와 매개 변수입니다. `args` 개체 배열을 사용 하는 문자열로 변환할는 <xref:System.String.Format%2A>전달 하는 메서드는 `format` 문자열 및 `args` 추적의 메시지 부분으로 된 문자열의 서식을 지정 하려면 배열.</xref:System.String.Format%2A> `eventCache` 데이터 바닥글의 값에 의존 하는 출력 데이터의 특성으로 기록 됩니다는 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>속성.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> 프로세스 ID, 스레드 ID 및 스택 추적 정보가 현재 포함 된 개체입니다."
    - id: source
      type: System.String
      description: "일반적으로 추적 이벤트를 생성 하는 응용 프로그램의 이름을 출력을 식별 하는 데 사용 되는 이름입니다."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "중 하나는 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> 추적을 발생 시킨 이벤트의 유형을 지정 하는 값입니다."
    - id: id
      type: System.Int32
      description: "이벤트에 대 한 숫자 식별자입니다."
    - id: format
      type: System.String
      description: "개체에 해당 하는&0; 개 이상의 서식 항목이 포함 된 형식 문자열은 `args` 배열입니다."
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> 형식을 지정할 개체가&0; 개 이상 포함 된 배열입니다."
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceOutputOptions
  id: TraceOutputOptions
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
  fullName: System.Diagnostics.TraceListener.TraceOutputOptions
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "추적 출력 옵션을 가져오거나 설정 합니다."
  remarks: "TraceOutputOptions 속성 추적 출력의 선택적 콘텐츠를 결정합니다. 속성 특히 코드의 섹션에 대 한 추가 데이터를 포함 하도록 구성 파일에서 또는 프로그래밍 방식으로 실행 하는 동안 설정할 수 있습니다. 예를 들어 콘솔 추적 수신기는 TraceOutputOptions 속성을 설정할 수 있습니다 <xref:System.Diagnostics.TraceOptions?displayProperty=fullName>추적 출력에 호출 스택 정보를 추가 합니다.</xref:System.Diagnostics.TraceOptions?displayProperty=fullName>       <xref:System.Diagnostics.TraceOptions>열거형은 다음과 같은 클래스 및 메서드를 사용 되지 않습니다.- <xref:System.Diagnostics.EventLogTraceListener>클래스 수 있기 때문에 많은 양의 데이터를 로그에 기록</xref:System.Diagnostics.EventLogTraceListener> </xref:System.Diagnostics.TraceOptions>      - `Write` 및 `WriteLine` 의 메서드는 <xref:System.Diagnostics.ConsoleTraceListener>, <xref:System.Diagnostics.DefaultTraceListener>, 및 <xref:System.Diagnostics.TextWriterTraceListener>클래스.</xref:System.Diagnostics.TextWriterTraceListener> </xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.ConsoleTraceListener>      - <xref:System.Diagnostics.TraceListener.Write%2A>의 <xref:System.Diagnostics.TraceListener>파생된 클래스에서 재정의 되지 않는 경우 클래스</xref:System.Diagnostics.TraceListener> 및 <xref:System.Diagnostics.TraceListener.WriteLine%2A>메서드</xref:System.Diagnostics.TraceListener.WriteLine%2A> </xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example shows the setting of the TraceOutputOptions property for a console trace listener. The console trace listener is one of the listeners enumerated in the <xref:System.Diagnostics.TraceSource.Listeners%2A> property of a trace source. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \n  \n [!code-cs[System.Diagnostics.TraceSource2#16](~/add/codesnippet/csharp/p-system.diagnostics.tra_9_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource2#16](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_9_1.vb)]"
  syntax:
    content: public System.Diagnostics.TraceOptions TraceOutputOptions { get; set; }
    return:
      type: System.Diagnostics.TraceOptions
      description: "열거형 값의 비트 조합입니다. 기본값은 <xref href=&quot;System.Diagnostics.TraceOptions&quot;> </xref>합니다."
  overload: System.Diagnostics.TraceListener.TraceOutputOptions*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "값이 유효 집합 작업이 실패 했습니다."
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  id: TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  nameWithType: TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  fullName: System.Diagnostics.TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "추적 정보, 메시지, 관련된 작업 id 및 이벤트 정보를 수신기 별 출력에 씁니다."
  remarks: "> [!IMPORTANT]>이 메서드는 응용 프로그램 코드에서 직접 하지만의 멤버만 호출할 수 없습니다는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource>추적 데이터를 출력을 작성 하는 클래스입니다.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>관련된 추적의 상관 관계에 대 한 메서드를 사용 합니다.</xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> TraceTransfer 메서드 호출의 <xref:System.Diagnostics.TraceListener.TraceEvent%2A>eventType 수준을 설정에서 호출을 처리 하기 위해 메서드 <xref:System.Diagnostics.TraceEventType>및 `relatedActivityId` <xref:System.Guid>메시지에 추가 하는 문자열로.</xref:System.Guid> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.TraceListener.TraceEvent%2A>"
  syntax:
    content: public virtual void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> 프로세스 ID, 스레드 ID 및 스택 추적 정보가 현재 포함 된 개체입니다."
    - id: source
      type: System.String
      description: "일반적으로 추적 이벤트를 생성 하는 응용 프로그램의 이름을 출력을 식별 하는 데 사용 되는 이름입니다."
    - id: id
      type: System.Int32
      description: "이벤트에 대 한 숫자 식별자입니다."
    - id: message
      type: System.String
      description: "쓸 메시지입니다."
    - id: relatedActivityId
      type: System.Guid
      description: "A <xref:System.Guid>관련된 작업을 식별 하는 개체입니다.</xref:System.Guid>"
  overload: System.Diagnostics.TraceListener.TraceTransfer*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.Object)
  id: Write(System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(Object)
  nameWithType: TraceListener.Write(Object)
  fullName: System.Diagnostics.TraceListener.Write(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "개체의 값을 씁니다 <xref:System.Object.ToString*>구현할 때 만든 수신기에 대 한 메서드는 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> 클래스</xref:System.Object.ToString*>"
  syntax:
    content: public virtual void Write (object o);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>쓰려는 정규화 된 클래스 이름이.</xref:System.Object>"
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: TraceListener.Write(String)
  fullName: System.Diagnostics.TraceListener.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "파생된 클래스에서 재정의 되 면 지정 된 메시지를 기록 파생된 클래스에서 만든 수신기에 있습니다."
  syntax:
    content: public abstract void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "쓸 메시지입니다."
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)
  id: Write(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(Object,String)
  nameWithType: TraceListener.Write(Object,String)
  fullName: System.Diagnostics.TraceListener.Write(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "범주 이름 및 개체의 값을 씁니다 <xref:System.Object.ToString*>구현할 때 만든 수신기에 대 한 메서드는 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> 클래스</xref:System.Object.ToString*>"
  syntax:
    content: public virtual void Write (object o, string category);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>쓰려는 정규화 된 클래스 이름이.</xref:System.Object>"
    - id: category
      type: System.String
      description: "출력을 구성 하는 데 사용 되는 범주 이름입니다."
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)
  id: Write(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(String,String)
  nameWithType: TraceListener.Write(String,String)
  fullName: System.Diagnostics.TraceListener.Write(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "범주 이름 및 기록 메시지 수신기를 구현할 때 만든는 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> 클래스입니다."
  syntax:
    content: public virtual void Write (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "쓸 메시지입니다."
    - id: category
      type: System.String
      description: "출력을 구성 하는 데 사용 되는 범주 이름입니다."
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteIndent
  id: WriteIndent
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteIndent()
  nameWithType: TraceListener.WriteIndent()
  fullName: System.Diagnostics.TraceListener.WriteIndent()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "이 클래스를 구현할 때 만든 수신기에 들여쓰기를 기록 하 고 다시 설정 된 <xref:System.Diagnostics.TraceListener.NeedIndent*>속성을 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.TraceListener.NeedIndent*>"
  remarks: "이 메서드는 들여쓰기 하 고 다시 설정 된 <xref:System.Diagnostics.TraceListener.NeedIndent%2A>속성을 `false`.</xref:System.Diagnostics.TraceListener.NeedIndent%2A> 이 메서드를 호출 <xref:System.Diagnostics.TraceListener.NeedIndent%2A>은 `true` 재정의 하는 경우는 <xref:System.Diagnostics.TraceListener.Write%2A>및 <xref:System.Diagnostics.TraceListener.WriteLine%2A>메서드.</xref:System.Diagnostics.TraceListener.WriteLine%2A> </xref:System.Diagnostics.TraceListener.Write%2A> </xref:System.Diagnostics.TraceListener.NeedIndent%2A> 기본적으로이 메서드는 들여쓰기에 빈 공간을 사용 합니다. 들여쓰기의 크기의 값에 따라 결정 되는 <xref:System.Diagnostics.TraceListener.IndentSize%2A>및 <xref:System.Diagnostics.TraceListener.IndentLevel%2A>속성.</xref:System.Diagnostics.TraceListener.IndentLevel%2A> </xref:System.Diagnostics.TraceListener.IndentSize%2A> <xref:System.Diagnostics.TraceListener.IndentLevel%2A>속성으로 지정 된 크기의 들여쓰기 횟수를 나타내는 <xref:System.Diagnostics.TraceListener.IndentSize%2A>속성이 적용 됩니다.</xref:System.Diagnostics.TraceListener.IndentSize%2A> </xref:System.Diagnostics.TraceListener.IndentLevel%2A> 이 메서드는 <xref:System.Diagnostics.DefaultTraceListener>및 <xref:System.Diagnostics.TextWriterTraceListener>클래스.</xref:System.Diagnostics.TextWriterTraceListener> </xref:System.Diagnostics.DefaultTraceListener>"
  syntax:
    content: protected virtual void WriteIndent ();
    parameters: []
  overload: System.Diagnostics.TraceListener.WriteIndent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(Object)
  nameWithType: TraceListener.WriteLine(Object)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "개체의 값을 씁니다 <xref:System.Object.ToString*>구현할 때 만든 수신기에 대 한 메서드는 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> 클래스, 줄 종결자를 차례로 나옵니다.</xref:System.Object.ToString*>"
  remarks: "구현 하는 일반적인 줄 종결자는 캐리지 리턴 줄 바꿈 (\\r)."
  syntax:
    content: public virtual void WriteLine (object o);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>쓰려는 정규화 된 클래스 이름이.</xref:System.Object>"
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: TraceListener.WriteLine(String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "파생된 클래스에서 재정의 되 면 수신기에 메시지를 만든 씁니다 줄 종결자 파생된 클래스에 있습니다."
  remarks: "구현 하는 일반적인 줄 종결자는 캐리지 리턴 줄 바꿈 (\\r)."
  syntax:
    content: public abstract void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "쓸 메시지입니다."
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  id: WriteLine(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(Object,String)
  nameWithType: TraceListener.WriteLine(Object,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "범주 이름 및 개체의 값을 씁니다 <xref:System.Object.ToString*>구현할 때 만든 수신기에 대 한 메서드는 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> 클래스를 다음 줄 종결자.</xref:System.Object.ToString*>"
  remarks: "구현 하는 일반적인 줄 종결자는 캐리지 리턴 줄 바꿈 (\\r)."
  syntax:
    content: public virtual void WriteLine (object o, string category);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>쓰려는 정규화 된 클래스 이름이.</xref:System.Object>"
    - id: category
      type: System.String
      description: "출력을 구성 하는 데 사용 되는 범주 이름입니다."
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  id: WriteLine(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(String,String)
  nameWithType: TraceListener.WriteLine(String,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "범주 이름 및 기록 메시지 수신기를 구현할 때 만든는 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> 클래스, 줄 종결자를 차례로 나옵니다."
  remarks: "구현 하는 일반적인 줄 종결자는 캐리지 리턴 줄 바꿈 (\\r)."
  syntax:
    content: public virtual void WriteLine (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "쓸 메시지입니다."
    - id: category
      type: System.String
      description: "출력을 구성 하는 데 사용 되는 범주 이름입니다."
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Diagnostics.TraceListener.#ctor
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener()
  nameWithType: TraceListener.TraceListener()
  fullName: System.Diagnostics.TraceListener.TraceListener()
- uid: System.Diagnostics.TraceListener.#ctor(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener(String)
  nameWithType: TraceListener.TraceListener(String)
  fullName: System.Diagnostics.TraceListener.TraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.TraceListener.Attributes
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Attributes
  nameWithType: TraceListener.Attributes
  fullName: System.Diagnostics.TraceListener.Attributes
- uid: System.Collections.Specialized.StringDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: System.Collections.Specialized.StringDictionary
- uid: System.Diagnostics.TraceListener.Close
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Close()
  nameWithType: TraceListener.Close()
  fullName: System.Diagnostics.TraceListener.Close()
- uid: System.Diagnostics.TraceListener.Dispose
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose()
  nameWithType: TraceListener.Dispose()
  fullName: System.Diagnostics.TraceListener.Dispose()
- uid: System.Diagnostics.TraceListener.Dispose(System.Boolean)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: TraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.TraceListener.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.TraceListener.Fail(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail(String)
  nameWithType: TraceListener.Fail(String)
  fullName: System.Diagnostics.TraceListener.Fail(String)
- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail(String,String)
  nameWithType: TraceListener.Fail(String,String)
  fullName: System.Diagnostics.TraceListener.Fail(String,String)
- uid: System.Diagnostics.TraceListener.Filter
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Filter
  nameWithType: TraceListener.Filter
  fullName: System.Diagnostics.TraceListener.Filter
- uid: System.Diagnostics.TraceFilter
  parent: System.Diagnostics
  isExternal: false
  name: TraceFilter
  nameWithType: TraceFilter
  fullName: System.Diagnostics.TraceFilter
- uid: System.Diagnostics.TraceListener.Flush
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Flush()
  nameWithType: TraceListener.Flush()
  fullName: System.Diagnostics.TraceListener.Flush()
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: GetSupportedAttributes()
  nameWithType: TraceListener.GetSupportedAttributes()
  fullName: System.Diagnostics.TraceListener.GetSupportedAttributes()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.TraceListener.IndentLevel
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
  fullName: System.Diagnostics.TraceListener.IndentLevel
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.TraceListener.IndentSize
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentSize
  nameWithType: TraceListener.IndentSize
  fullName: System.Diagnostics.TraceListener.IndentSize
- uid: System.Diagnostics.TraceListener.IsThreadSafe
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
  fullName: System.Diagnostics.TraceListener.IsThreadSafe
- uid: System.Diagnostics.TraceListener.Name
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Name
  nameWithType: TraceListener.Name
  fullName: System.Diagnostics.TraceListener.Name
- uid: System.Diagnostics.TraceListener.NeedIndent
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
  fullName: System.Diagnostics.TraceListener.NeedIndent
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: System.Diagnostics.TraceListener.TraceOutputOptions
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
  fullName: System.Diagnostics.TraceListener.TraceOutputOptions
- uid: System.Diagnostics.TraceOptions
  parent: System.Diagnostics
  isExternal: false
  name: TraceOptions
  nameWithType: TraceOptions
  fullName: System.Diagnostics.TraceOptions
- uid: System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  nameWithType: TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  fullName: System.Diagnostics.TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Diagnostics.TraceListener.Write(System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(Object)
  nameWithType: TraceListener.Write(Object)
  fullName: System.Diagnostics.TraceListener.Write(Object)
- uid: System.Diagnostics.TraceListener.Write(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(String)
  nameWithType: TraceListener.Write(String)
  fullName: System.Diagnostics.TraceListener.Write(String)
- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(Object,String)
  nameWithType: TraceListener.Write(Object,String)
  fullName: System.Diagnostics.TraceListener.Write(Object,String)
- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(String,String)
  nameWithType: TraceListener.Write(String,String)
  fullName: System.Diagnostics.TraceListener.Write(String,String)
- uid: System.Diagnostics.TraceListener.WriteIndent
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteIndent()
  nameWithType: TraceListener.WriteIndent()
  fullName: System.Diagnostics.TraceListener.WriteIndent()
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(Object)
  nameWithType: TraceListener.WriteLine(Object)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object)
- uid: System.Diagnostics.TraceListener.WriteLine(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: TraceListener.WriteLine(String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String)
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(Object,String)
  nameWithType: TraceListener.WriteLine(Object,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object,String)
- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(String,String)
  nameWithType: TraceListener.WriteLine(String,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String,String)
- uid: System.Diagnostics.TraceListener.#ctor*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener
  nameWithType: TraceListener.TraceListener
- uid: System.Diagnostics.TraceListener.Attributes*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Attributes
  nameWithType: TraceListener.Attributes
- uid: System.Diagnostics.TraceListener.Close*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Close
  nameWithType: TraceListener.Close
- uid: System.Diagnostics.TraceListener.Dispose*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose
  nameWithType: TraceListener.Dispose
- uid: System.Diagnostics.TraceListener.Fail*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail
  nameWithType: TraceListener.Fail
- uid: System.Diagnostics.TraceListener.Filter*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Filter
  nameWithType: TraceListener.Filter
- uid: System.Diagnostics.TraceListener.Flush*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Flush
  nameWithType: TraceListener.Flush
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: GetSupportedAttributes
  nameWithType: TraceListener.GetSupportedAttributes
- uid: System.Diagnostics.TraceListener.IndentLevel*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
- uid: System.Diagnostics.TraceListener.IndentSize*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentSize
  nameWithType: TraceListener.IndentSize
- uid: System.Diagnostics.TraceListener.IsThreadSafe*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
- uid: System.Diagnostics.TraceListener.Name*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Name
  nameWithType: TraceListener.Name
- uid: System.Diagnostics.TraceListener.NeedIndent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
- uid: System.Diagnostics.TraceListener.TraceData*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData
  nameWithType: TraceListener.TraceData
- uid: System.Diagnostics.TraceListener.TraceEvent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: TraceListener.TraceEvent
- uid: System.Diagnostics.TraceListener.TraceOutputOptions*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
- uid: System.Diagnostics.TraceListener.TraceTransfer*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceTransfer
  nameWithType: TraceListener.TraceTransfer
- uid: System.Diagnostics.TraceListener.Write*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write
  nameWithType: TraceListener.Write
- uid: System.Diagnostics.TraceListener.WriteIndent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteIndent
  nameWithType: TraceListener.WriteIndent
- uid: System.Diagnostics.TraceListener.WriteLine*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine
  nameWithType: TraceListener.WriteLine
