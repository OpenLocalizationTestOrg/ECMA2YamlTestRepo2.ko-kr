### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.Mapping.MetaType
  id: MetaType
  children:
  - System.Data.Linq.Mapping.MetaType.#ctor
  - System.Data.Linq.Mapping.MetaType.Associations
  - System.Data.Linq.Mapping.MetaType.CanInstantiate
  - System.Data.Linq.Mapping.MetaType.DataMembers
  - System.Data.Linq.Mapping.MetaType.DBGeneratedIdentityMember
  - System.Data.Linq.Mapping.MetaType.DerivedTypes
  - System.Data.Linq.Mapping.MetaType.Discriminator
  - System.Data.Linq.Mapping.MetaType.GetDataMember(System.Reflection.MemberInfo)
  - System.Data.Linq.Mapping.MetaType.GetInheritanceType(System.Type)
  - System.Data.Linq.Mapping.MetaType.GetTypeForInheritanceCode(System.Object)
  - System.Data.Linq.Mapping.MetaType.HasAnyLoadMethod
  - System.Data.Linq.Mapping.MetaType.HasAnyValidateMethod
  - System.Data.Linq.Mapping.MetaType.HasInheritance
  - System.Data.Linq.Mapping.MetaType.HasInheritanceCode
  - System.Data.Linq.Mapping.MetaType.HasUpdateCheck
  - System.Data.Linq.Mapping.MetaType.IdentityMembers
  - System.Data.Linq.Mapping.MetaType.InheritanceBase
  - System.Data.Linq.Mapping.MetaType.InheritanceCode
  - System.Data.Linq.Mapping.MetaType.InheritanceDefault
  - System.Data.Linq.Mapping.MetaType.InheritanceRoot
  - System.Data.Linq.Mapping.MetaType.InheritanceTypes
  - System.Data.Linq.Mapping.MetaType.IsEntity
  - System.Data.Linq.Mapping.MetaType.IsInheritanceDefault
  - System.Data.Linq.Mapping.MetaType.Model
  - System.Data.Linq.Mapping.MetaType.Name
  - System.Data.Linq.Mapping.MetaType.OnLoadedMethod
  - System.Data.Linq.Mapping.MetaType.OnValidateMethod
  - System.Data.Linq.Mapping.MetaType.PersistentDataMembers
  - System.Data.Linq.Mapping.MetaType.Table
  - System.Data.Linq.Mapping.MetaType.Type
  - System.Data.Linq.Mapping.MetaType.VersionMember
  langs:
  - csharp
  name: MetaType
  nameWithType: MetaType
  fullName: System.Data.Linq.Mapping.MetaType
  type: Class
  summary: "데이터베이스 테이블의 열에 도메인 개체 유형의 매핑을 나타냅니다."
  syntax:
    content: public abstract class MetaType
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.#ctor
  id: '#ctor'
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: MetaType()
  nameWithType: MetaType.MetaType()
  fullName: System.Data.Linq.Mapping.MetaType.MetaType()
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.Linq.Mapping.MetaType&quot;> </xref> 클래스입니다."
  syntax:
    content: protected MetaType ();
    parameters: []
  overload: System.Data.Linq.Mapping.MetaType.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.Associations
  id: Associations
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: Associations
  nameWithType: MetaType.Associations
  fullName: System.Data.Linq.Mapping.MetaType.Associations
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "모든 연결의 열거형을 가져옵니다."
  syntax:
    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaAssociation> Associations { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaAssociation}
      description: "연결의 컬렉션입니다."
  overload: System.Data.Linq.Mapping.MetaType.Associations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.CanInstantiate
  id: CanInstantiate
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: CanInstantiate
  nameWithType: MetaType.CanInstantiate
  fullName: System.Data.Linq.Mapping.MetaType.CanInstantiate
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "쿼리의 결과로 기본 형식을 인스턴스화할 수 있는지 여부를 가져옵니다."
  syntax:
    content: public abstract bool CanInstantiate { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>내부 형식; 쿼리의 결과가로 인스턴스화할 수 있습니다 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Linq.Mapping.MetaType.CanInstantiate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.DataMembers
  id: DataMembers
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: DataMembers
  nameWithType: MetaType.DataMembers
  fullName: System.Data.Linq.Mapping.MetaType.DataMembers
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "모든 데이터 멤버 (필드 및 속성)의 열거형을 가져옵니다."
  syntax:
    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaDataMember> DataMembers { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaDataMember}
      description: "데이터 멤버의 컬렉션입니다."
  overload: System.Data.Linq.Mapping.MetaType.DataMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.DBGeneratedIdentityMember
  id: DBGeneratedIdentityMember
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: DBGeneratedIdentityMember
  nameWithType: MetaType.DBGeneratedIdentityMember
  fullName: System.Data.Linq.Mapping.MetaType.DBGeneratedIdentityMember
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "자동 생성 된 id 열을 나타내는 멤버를 가져옵니다."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaDataMember DBGeneratedIdentityMember { get; }
    return:
      type: System.Data.Linq.Mapping.MetaDataMember
      description: "자동 생성 된 id 열을 나타내는 멤버 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우 자동 생성 된 id 열이 없습니다."
  overload: System.Data.Linq.Mapping.MetaType.DBGeneratedIdentityMember*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.DerivedTypes
  id: DerivedTypes
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: DerivedTypes
  nameWithType: MetaType.DerivedTypes
  fullName: System.Data.Linq.Mapping.MetaType.DerivedTypes
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "상속 계층 구조에서 직접 파생 된 형식의의 열거형을 가져옵니다."
  syntax:
    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaType> DerivedTypes { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaType}
      description: "메타 유형의 열거형입니다."
  overload: System.Data.Linq.Mapping.MetaType.DerivedTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.Discriminator
  id: Discriminator
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: Discriminator
  nameWithType: MetaType.Discriminator
  fullName: System.Data.Linq.Mapping.MetaType.Discriminator
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "상속 판별자 열을 나타내는 멤버를 가져옵니다."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaDataMember Discriminator { get; }
    return:
      type: System.Data.Linq.Mapping.MetaDataMember
      description: "상속 판별자 열을 나타내는 멤버 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> none 이면 합니다."
  overload: System.Data.Linq.Mapping.MetaType.Discriminator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.GetDataMember(System.Reflection.MemberInfo)
  id: GetDataMember(System.Reflection.MemberInfo)
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: GetDataMember(MemberInfo)
  nameWithType: MetaType.GetDataMember(MemberInfo)
  fullName: System.Data.Linq.Mapping.MetaType.GetDataMember(MemberInfo)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "가져옵니다는 <xref href=&quot;System.Data.Linq.Mapping.MetaDataMember&quot;> </xref> 지정 된 멤버와 연결 합니다."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaDataMember GetDataMember (System.Reflection.MemberInfo member);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: "멤버를 연결 된 <xref href=&quot;System.Data.Linq.Mapping.MetaDataMember&quot;> </xref> 필요할 수도 있습니다."
    return:
      type: System.Data.Linq.Mapping.MetaDataMember
      description: "<xref href=&quot;System.Data.Linq.Mapping.MetaDataMember&quot;> </xref> 것이 고, 그렇지 않으면 지정된 된 멤버와 연결 하는 경우 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Linq.Mapping.MetaType.GetDataMember*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.GetInheritanceType(System.Type)
  id: GetInheritanceType(System.Type)
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: GetInheritanceType(Type)
  nameWithType: MetaType.GetInheritanceType(Type)
  fullName: System.Data.Linq.Mapping.MetaType.GetInheritanceType(Type)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "가져옵니다는 <xref href=&quot;System.Data.Linq.Mapping.MetaType&quot;> </xref> 상속 하위 형식에 대 한 합니다."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaType GetInheritanceType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "하위 형식입니다."
    return:
      type: System.Data.Linq.Mapping.MetaType
      description: "<xref href=&quot;System.Data.Linq.Mapping.MetaType&quot;> </xref> 상속 하위 형식에 대 한 합니다."
  overload: System.Data.Linq.Mapping.MetaType.GetInheritanceType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.GetTypeForInheritanceCode(System.Object)
  id: GetTypeForInheritanceCode(System.Object)
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: GetTypeForInheritanceCode(Object)
  nameWithType: MetaType.GetTypeForInheritanceCode(Object)
  fullName: System.Data.Linq.Mapping.MetaType.GetTypeForInheritanceCode(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "지정 된 상속 코드와 관련 된 메타 유형을 가져옵니다."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaType GetTypeForInheritanceCode (object code);
    parameters:
    - id: code
      type: System.Object
      description: "상속 코드입니다."
    return:
      type: System.Data.Linq.Mapping.MetaType
      description: "지정 된 상속 코드와 관련 된 메타 형식입니다."
  overload: System.Data.Linq.Mapping.MetaType.GetTypeForInheritanceCode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.HasAnyLoadMethod
  id: HasAnyLoadMethod
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: HasAnyLoadMethod
  nameWithType: MetaType.HasAnyLoadMethod
  fullName: System.Data.Linq.Mapping.MetaType.HasAnyLoadMethod
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "나타내는 값을 가져옵니다 여부 현재 <xref href=&quot;System.Data.Linq.Mapping.MetaType&quot;> </xref> 또는 해당 기본 형식에는 `OnLoaded` 메서드."
  syntax:
    content: public abstract bool HasAnyLoadMethod { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>메타 형식 또는 기본 메타-형식에 있으면는 `OnLoaded` 메서드, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Linq.Mapping.MetaType.HasAnyLoadMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.HasAnyValidateMethod
  id: HasAnyValidateMethod
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: HasAnyValidateMethod
  nameWithType: MetaType.HasAnyValidateMethod
  fullName: System.Data.Linq.Mapping.MetaType.HasAnyValidateMethod
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Data.Linq.Mapping.MetaType&quot;> </xref> 또는 해당 기본 형식에는 `OnValidate` 메서드."
  syntax:
    content: public abstract bool HasAnyValidateMethod { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>메타 형식 또는 기본 메타-형식에 있으면는 `OnValidate` 메서드, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Linq.Mapping.MetaType.HasAnyValidateMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.HasInheritance
  id: HasInheritance
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: HasInheritance
  nameWithType: MetaType.HasInheritance
  fullName: System.Data.Linq.Mapping.MetaType.HasInheritance
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "형식에 매핑된 상속 계층의 일부 인지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public abstract bool HasInheritance { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>형식이 매핑된 상속 계층;의 일부인 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Linq.Mapping.MetaType.HasInheritance*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.HasInheritanceCode
  id: HasInheritanceCode
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: HasInheritanceCode
  nameWithType: MetaType.HasInheritanceCode
  fullName: System.Data.Linq.Mapping.MetaType.HasInheritanceCode
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "이 형식이 상속 코드를 정의 하는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public abstract bool HasInheritanceCode { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 형식이 상속 코드; 정의 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Linq.Mapping.MetaType.HasInheritanceCode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.HasUpdateCheck
  id: HasUpdateCheck
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: HasUpdateCheck
  nameWithType: MetaType.HasUpdateCheck
  fullName: System.Data.Linq.Mapping.MetaType.HasUpdateCheck
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "형식에 영구 멤버를 낙관적 동시성 충돌에 대 한 테스트 해야 하는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public abstract bool HasUpdateCheck { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>형식에 있는 경우 영구 멤버가 <xref href=&quot;System.Data.Linq.Mapping.UpdateCheck&quot;> </xref> 이외의 다른 정책 <xref href=&quot;System.Data.Linq.Mapping.UpdateCheck&quot;> </xref>고, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Linq.Mapping.MetaType.HasUpdateCheck*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.IdentityMembers
  id: IdentityMembers
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: IdentityMembers
  nameWithType: MetaType.IdentityMembers
  fullName: System.Data.Linq.Mapping.MetaType.IdentityMembers
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "형식의 고유 id를 정의 하는 모든 데이터 멤버의 열거형을 가져옵니다."
  syntax:
    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaDataMember> IdentityMembers { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaDataMember}
      description: "형식의 고유 id를 정의 하는 멤버의 열거형입니다."
  overload: System.Data.Linq.Mapping.MetaType.IdentityMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.InheritanceBase
  id: InheritanceBase
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: InheritanceBase
  nameWithType: MetaType.InheritanceBase
  fullName: System.Data.Linq.Mapping.MetaType.InheritanceBase
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "상속 계층 구조에서 기본 메타 형식을 가져옵니다."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaType InheritanceBase { get; }
    return:
      type: System.Data.Linq.Mapping.MetaType
      description: "현재 상속 계층 구조에 대 한 기본 메타 형식입니다."
  overload: System.Data.Linq.Mapping.MetaType.InheritanceBase*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.InheritanceCode
  id: InheritanceCode
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: InheritanceCode
  nameWithType: MetaType.InheritanceCode
  fullName: System.Data.Linq.Mapping.MetaType.InheritanceCode
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "이 형식이 상속 코드를 정의 하는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public abstract object InheritanceCode { get; }
    return:
      type: System.Object
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 형식이 상속 코드; 정의 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Linq.Mapping.MetaType.InheritanceCode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.InheritanceDefault
  id: InheritanceDefault
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: InheritanceDefault
  nameWithType: MetaType.InheritanceDefault
  fullName: System.Data.Linq.Mapping.MetaType.InheritanceDefault
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "이 형식이 상속 계층의 기본값으로 사용 되는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaType InheritanceDefault { get; }
    return:
      type: System.Data.Linq.Mapping.MetaType
      description: "상속 매핑의에서 기본 형식에 대 한 메타 데이터입니다."
  overload: System.Data.Linq.Mapping.MetaType.InheritanceDefault*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.InheritanceRoot
  id: InheritanceRoot
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: InheritanceRoot
  nameWithType: MetaType.InheritanceRoot
  fullName: System.Data.Linq.Mapping.MetaType.InheritanceRoot
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "상속 계층의 루트 형식을 가져옵니다."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaType InheritanceRoot { get; }
    return:
      type: System.Data.Linq.Mapping.MetaType
      description: "루트 형식입니다."
  overload: System.Data.Linq.Mapping.MetaType.InheritanceRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.InheritanceTypes
  id: InheritanceTypes
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: InheritanceTypes
  nameWithType: MetaType.InheritanceTypes
  fullName: System.Data.Linq.Mapping.MetaType.InheritanceTypes
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "상속 계층 구조에서 정의한 모든 형식의 컬렉션을 가져옵니다."
  syntax:
    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaType> InheritanceTypes { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaType}
      description: "현재 상속 계층 구조에 있는 메타 유형의 컬렉션입니다."
  overload: System.Data.Linq.Mapping.MetaType.InheritanceTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.IsEntity
  id: IsEntity
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: IsEntity
  nameWithType: MetaType.IsEntity
  fullName: System.Data.Linq.Mapping.MetaType.IsEntity
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Data.Linq.Mapping.MetaType&quot;> </xref> 엔터티 형식입니다."
  syntax:
    content: public abstract bool IsEntity { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Data.Linq.Mapping.MetaType&quot;> </xref> 엔터티 형식인 고, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Linq.Mapping.MetaType.IsEntity*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.IsInheritanceDefault
  id: IsInheritanceDefault
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: IsInheritanceDefault
  nameWithType: MetaType.IsInheritanceDefault
  fullName: System.Data.Linq.Mapping.MetaType.IsInheritanceDefault
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "이 형식이 상속 계층의 기본값으로 사용 되는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public abstract bool IsInheritanceDefault { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 형식이 상속 계층 구조;의 기본값으로 사용 되는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Linq.Mapping.MetaType.IsInheritanceDefault*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.Model
  id: Model
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: Model
  nameWithType: MetaType.Model
  fullName: System.Data.Linq.Mapping.MetaType.Model
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "가져옵니다는 <xref href=&quot;System.Data.Linq.Mapping.MetaModel&quot;> </xref> 이 들어 있는 <xref href=&quot;System.Data.Linq.Mapping.MetaType&quot;> </xref>합니다."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaModel Model { get; }
    return:
      type: System.Data.Linq.Mapping.MetaModel
      description: "포함 하는 메타 모델입니다."
  overload: System.Data.Linq.Mapping.MetaType.Model*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.Name
  id: Name
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: Name
  nameWithType: MetaType.Name
  fullName: System.Data.Linq.Mapping.MetaType.Name
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "이름을 가져옵니다는 <xref href=&quot;System.Data.Linq.Mapping.MetaType&quot;> </xref>합니다."
  remarks: "이 이름은 공용 언어 런타임 (CLR) 형식 이름으로 동일 합니다."
  syntax:
    content: public abstract string Name { get; }
    return:
      type: System.String
      description: "현재 메타 형식의 이름입니다."
  overload: System.Data.Linq.Mapping.MetaType.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.OnLoadedMethod
  id: OnLoadedMethod
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: OnLoadedMethod
  nameWithType: MetaType.OnLoadedMethod
  fullName: System.Data.Linq.Mapping.MetaType.OnLoadedMethod
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "에 대 한 정보를 가져옵니다는 `OnLoaded` 이 메타 형식에 포함 된 메서드의 합니다."
  syntax:
    content: public abstract System.Reflection.MethodInfo OnLoadedMethod { get; }
    return:
      type: System.Reflection.MethodInfo
      description: "에 대 한 설명을 `OnLoaded` 이 메타 형식에 대 한 메서드."
  overload: System.Data.Linq.Mapping.MetaType.OnLoadedMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.OnValidateMethod
  id: OnValidateMethod
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: OnValidateMethod
  nameWithType: MetaType.OnValidateMethod
  fullName: System.Data.Linq.Mapping.MetaType.OnValidateMethod
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "에 대 한 정보를 가져옵니다는 `OnValidate` 이 메타 형식에 포함 된 메서드의 합니다."
  syntax:
    content: public abstract System.Reflection.MethodInfo OnValidateMethod { get; }
    return:
      type: System.Reflection.MethodInfo
      description: "에 대 한 설명을 `OnValidate` 이 메타 형식에 대 한 메서드."
  overload: System.Data.Linq.Mapping.MetaType.OnValidateMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.PersistentDataMembers
  id: PersistentDataMembers
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: PersistentDataMembers
  nameWithType: MetaType.PersistentDataMembers
  fullName: System.Data.Linq.Mapping.MetaType.PersistentDataMembers
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "모든 영구 데이터 멤버의 컬렉션을 가져옵니다."
  remarks: "영구 데이터 멤버는 필드와 속성을 데이터베이스 열에 매핑되는입니다."
  syntax:
    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaDataMember> PersistentDataMembers { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaDataMember}
      description: "현재 형식에는 모든 메타 데이터 멤버의 컬렉션입니다."
  overload: System.Data.Linq.Mapping.MetaType.PersistentDataMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.Table
  id: Table
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: Table
  nameWithType: MetaType.Table
  fullName: System.Data.Linq.Mapping.MetaType.Table
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "가져옵니다는 <xref href=&quot;System.Data.Linq.Mapping.MetaTable&quot;> </xref> 이 사용 하 여 하 <xref href=&quot;System.Data.Linq.Mapping.MetaType&quot;> </xref> 행 정의 대 한 합니다."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaTable Table { get; }
    return:
      type: System.Data.Linq.Mapping.MetaTable
      description: "메타-사용 하는 테이블 현재 메타 형식 해당 행 정의 합니다."
  overload: System.Data.Linq.Mapping.MetaType.Table*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.Type
  id: Type
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: Type
  nameWithType: MetaType.Type
  fullName: System.Data.Linq.Mapping.MetaType.Type
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "내부 공용 언어 런타임 (CLR) 형식을 가져옵니다."
  syntax:
    content: public abstract Type Type { get; }
    return:
      type: System.Type
      description: "연결 된 CLR 형식입니다."
  overload: System.Data.Linq.Mapping.MetaType.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaType.VersionMember
  id: VersionMember
  parent: System.Data.Linq.Mapping.MetaType
  langs:
  - csharp
  name: VersionMember
  nameWithType: MetaType.VersionMember
  fullName: System.Data.Linq.Mapping.MetaType.VersionMember
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "이 행 버전이 나 타임 스탬프 열을 가져옵니다 <xref href=&quot;System.Data.Linq.Mapping.MetaType&quot;> </xref>합니다."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaDataMember VersionMember { get; }
    return:
      type: System.Data.Linq.Mapping.MetaDataMember
      description: "이 메타 형식에 대 한 행 버전 또는 타임 스탬프 열을 나타내는 메타 데이터 멤버 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> none 이면 합니다."
  overload: System.Data.Linq.Mapping.MetaType.VersionMember*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.Mapping.MetaType.#ctor
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: MetaType()
  nameWithType: MetaType.MetaType()
  fullName: System.Data.Linq.Mapping.MetaType.MetaType()
- uid: System.Data.Linq.Mapping.MetaType.Associations
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: Associations
  nameWithType: MetaType.Associations
  fullName: System.Data.Linq.Mapping.MetaType.Associations
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaAssociation}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<MetaAssociation>
  nameWithType: ReadOnlyCollection<MetaAssociation>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaAssociation>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Data.Linq.Mapping.MetaAssociation>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Linq.Mapping.MetaAssociation
    name: MetaAssociation
    nameWithType: MetaAssociation
    fullName: MetaAssociation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.Mapping.MetaType.CanInstantiate
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: CanInstantiate
  nameWithType: MetaType.CanInstantiate
  fullName: System.Data.Linq.Mapping.MetaType.CanInstantiate
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.Mapping.MetaType.DataMembers
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: DataMembers
  nameWithType: MetaType.DataMembers
  fullName: System.Data.Linq.Mapping.MetaType.DataMembers
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaDataMember}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<MetaDataMember>
  nameWithType: ReadOnlyCollection<MetaDataMember>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaDataMember>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Data.Linq.Mapping.MetaDataMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Linq.Mapping.MetaDataMember
    name: MetaDataMember
    nameWithType: MetaDataMember
    fullName: MetaDataMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.Mapping.MetaType.DBGeneratedIdentityMember
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: DBGeneratedIdentityMember
  nameWithType: MetaType.DBGeneratedIdentityMember
  fullName: System.Data.Linq.Mapping.MetaType.DBGeneratedIdentityMember
- uid: System.Data.Linq.Mapping.MetaDataMember
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaDataMember
  nameWithType: MetaDataMember
  fullName: System.Data.Linq.Mapping.MetaDataMember
- uid: System.Data.Linq.Mapping.MetaType.DerivedTypes
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: DerivedTypes
  nameWithType: MetaType.DerivedTypes
  fullName: System.Data.Linq.Mapping.MetaType.DerivedTypes
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaType}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<MetaType>
  nameWithType: ReadOnlyCollection<MetaType>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaType>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Data.Linq.Mapping.MetaType>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Linq.Mapping.MetaType
    name: MetaType
    nameWithType: MetaType
    fullName: MetaType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.Mapping.MetaType.Discriminator
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: Discriminator
  nameWithType: MetaType.Discriminator
  fullName: System.Data.Linq.Mapping.MetaType.Discriminator
- uid: System.Data.Linq.Mapping.MetaType.GetDataMember(System.Reflection.MemberInfo)
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: GetDataMember(MemberInfo)
  nameWithType: MetaType.GetDataMember(MemberInfo)
  fullName: System.Data.Linq.Mapping.MetaType.GetDataMember(MemberInfo)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Data.Linq.Mapping.MetaType.GetInheritanceType(System.Type)
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: GetInheritanceType(Type)
  nameWithType: MetaType.GetInheritanceType(Type)
  fullName: System.Data.Linq.Mapping.MetaType.GetInheritanceType(Type)
- uid: System.Data.Linq.Mapping.MetaType
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaType
  nameWithType: MetaType
  fullName: System.Data.Linq.Mapping.MetaType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.Linq.Mapping.MetaType.GetTypeForInheritanceCode(System.Object)
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: GetTypeForInheritanceCode(Object)
  nameWithType: MetaType.GetTypeForInheritanceCode(Object)
  fullName: System.Data.Linq.Mapping.MetaType.GetTypeForInheritanceCode(Object)
- uid: System.Data.Linq.Mapping.MetaType.HasAnyLoadMethod
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: HasAnyLoadMethod
  nameWithType: MetaType.HasAnyLoadMethod
  fullName: System.Data.Linq.Mapping.MetaType.HasAnyLoadMethod
- uid: System.Data.Linq.Mapping.MetaType.HasAnyValidateMethod
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: HasAnyValidateMethod
  nameWithType: MetaType.HasAnyValidateMethod
  fullName: System.Data.Linq.Mapping.MetaType.HasAnyValidateMethod
- uid: System.Data.Linq.Mapping.MetaType.HasInheritance
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: HasInheritance
  nameWithType: MetaType.HasInheritance
  fullName: System.Data.Linq.Mapping.MetaType.HasInheritance
- uid: System.Data.Linq.Mapping.MetaType.HasInheritanceCode
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: HasInheritanceCode
  nameWithType: MetaType.HasInheritanceCode
  fullName: System.Data.Linq.Mapping.MetaType.HasInheritanceCode
- uid: System.Data.Linq.Mapping.MetaType.HasUpdateCheck
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: HasUpdateCheck
  nameWithType: MetaType.HasUpdateCheck
  fullName: System.Data.Linq.Mapping.MetaType.HasUpdateCheck
- uid: System.Data.Linq.Mapping.MetaType.IdentityMembers
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: IdentityMembers
  nameWithType: MetaType.IdentityMembers
  fullName: System.Data.Linq.Mapping.MetaType.IdentityMembers
- uid: System.Data.Linq.Mapping.MetaType.InheritanceBase
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: InheritanceBase
  nameWithType: MetaType.InheritanceBase
  fullName: System.Data.Linq.Mapping.MetaType.InheritanceBase
- uid: System.Data.Linq.Mapping.MetaType.InheritanceCode
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: InheritanceCode
  nameWithType: MetaType.InheritanceCode
  fullName: System.Data.Linq.Mapping.MetaType.InheritanceCode
- uid: System.Data.Linq.Mapping.MetaType.InheritanceDefault
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: InheritanceDefault
  nameWithType: MetaType.InheritanceDefault
  fullName: System.Data.Linq.Mapping.MetaType.InheritanceDefault
- uid: System.Data.Linq.Mapping.MetaType.InheritanceRoot
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: InheritanceRoot
  nameWithType: MetaType.InheritanceRoot
  fullName: System.Data.Linq.Mapping.MetaType.InheritanceRoot
- uid: System.Data.Linq.Mapping.MetaType.InheritanceTypes
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: InheritanceTypes
  nameWithType: MetaType.InheritanceTypes
  fullName: System.Data.Linq.Mapping.MetaType.InheritanceTypes
- uid: System.Data.Linq.Mapping.MetaType.IsEntity
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: IsEntity
  nameWithType: MetaType.IsEntity
  fullName: System.Data.Linq.Mapping.MetaType.IsEntity
- uid: System.Data.Linq.Mapping.MetaType.IsInheritanceDefault
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: IsInheritanceDefault
  nameWithType: MetaType.IsInheritanceDefault
  fullName: System.Data.Linq.Mapping.MetaType.IsInheritanceDefault
- uid: System.Data.Linq.Mapping.MetaType.Model
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: Model
  nameWithType: MetaType.Model
  fullName: System.Data.Linq.Mapping.MetaType.Model
- uid: System.Data.Linq.Mapping.MetaModel
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaModel
  nameWithType: MetaModel
  fullName: System.Data.Linq.Mapping.MetaModel
- uid: System.Data.Linq.Mapping.MetaType.Name
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: Name
  nameWithType: MetaType.Name
  fullName: System.Data.Linq.Mapping.MetaType.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Linq.Mapping.MetaType.OnLoadedMethod
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: OnLoadedMethod
  nameWithType: MetaType.OnLoadedMethod
  fullName: System.Data.Linq.Mapping.MetaType.OnLoadedMethod
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Data.Linq.Mapping.MetaType.OnValidateMethod
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: OnValidateMethod
  nameWithType: MetaType.OnValidateMethod
  fullName: System.Data.Linq.Mapping.MetaType.OnValidateMethod
- uid: System.Data.Linq.Mapping.MetaType.PersistentDataMembers
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: PersistentDataMembers
  nameWithType: MetaType.PersistentDataMembers
  fullName: System.Data.Linq.Mapping.MetaType.PersistentDataMembers
- uid: System.Data.Linq.Mapping.MetaType.Table
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: Table
  nameWithType: MetaType.Table
  fullName: System.Data.Linq.Mapping.MetaType.Table
- uid: System.Data.Linq.Mapping.MetaTable
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaTable
  nameWithType: MetaTable
  fullName: System.Data.Linq.Mapping.MetaTable
- uid: System.Data.Linq.Mapping.MetaType.Type
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: Type
  nameWithType: MetaType.Type
  fullName: System.Data.Linq.Mapping.MetaType.Type
- uid: System.Data.Linq.Mapping.MetaType.VersionMember
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: VersionMember
  nameWithType: MetaType.VersionMember
  fullName: System.Data.Linq.Mapping.MetaType.VersionMember
- uid: System.Data.Linq.Mapping.MetaType.#ctor*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: MetaType
  nameWithType: MetaType.MetaType
- uid: System.Data.Linq.Mapping.MetaType.Associations*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: Associations
  nameWithType: MetaType.Associations
- uid: System.Data.Linq.Mapping.MetaType.CanInstantiate*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: CanInstantiate
  nameWithType: MetaType.CanInstantiate
- uid: System.Data.Linq.Mapping.MetaType.DataMembers*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: DataMembers
  nameWithType: MetaType.DataMembers
- uid: System.Data.Linq.Mapping.MetaType.DBGeneratedIdentityMember*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: DBGeneratedIdentityMember
  nameWithType: MetaType.DBGeneratedIdentityMember
- uid: System.Data.Linq.Mapping.MetaType.DerivedTypes*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: DerivedTypes
  nameWithType: MetaType.DerivedTypes
- uid: System.Data.Linq.Mapping.MetaType.Discriminator*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: Discriminator
  nameWithType: MetaType.Discriminator
- uid: System.Data.Linq.Mapping.MetaType.GetDataMember*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: GetDataMember
  nameWithType: MetaType.GetDataMember
- uid: System.Data.Linq.Mapping.MetaType.GetInheritanceType*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: GetInheritanceType
  nameWithType: MetaType.GetInheritanceType
- uid: System.Data.Linq.Mapping.MetaType.GetTypeForInheritanceCode*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: GetTypeForInheritanceCode
  nameWithType: MetaType.GetTypeForInheritanceCode
- uid: System.Data.Linq.Mapping.MetaType.HasAnyLoadMethod*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: HasAnyLoadMethod
  nameWithType: MetaType.HasAnyLoadMethod
- uid: System.Data.Linq.Mapping.MetaType.HasAnyValidateMethod*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: HasAnyValidateMethod
  nameWithType: MetaType.HasAnyValidateMethod
- uid: System.Data.Linq.Mapping.MetaType.HasInheritance*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: HasInheritance
  nameWithType: MetaType.HasInheritance
- uid: System.Data.Linq.Mapping.MetaType.HasInheritanceCode*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: HasInheritanceCode
  nameWithType: MetaType.HasInheritanceCode
- uid: System.Data.Linq.Mapping.MetaType.HasUpdateCheck*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: HasUpdateCheck
  nameWithType: MetaType.HasUpdateCheck
- uid: System.Data.Linq.Mapping.MetaType.IdentityMembers*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: IdentityMembers
  nameWithType: MetaType.IdentityMembers
- uid: System.Data.Linq.Mapping.MetaType.InheritanceBase*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: InheritanceBase
  nameWithType: MetaType.InheritanceBase
- uid: System.Data.Linq.Mapping.MetaType.InheritanceCode*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: InheritanceCode
  nameWithType: MetaType.InheritanceCode
- uid: System.Data.Linq.Mapping.MetaType.InheritanceDefault*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: InheritanceDefault
  nameWithType: MetaType.InheritanceDefault
- uid: System.Data.Linq.Mapping.MetaType.InheritanceRoot*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: InheritanceRoot
  nameWithType: MetaType.InheritanceRoot
- uid: System.Data.Linq.Mapping.MetaType.InheritanceTypes*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: InheritanceTypes
  nameWithType: MetaType.InheritanceTypes
- uid: System.Data.Linq.Mapping.MetaType.IsEntity*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: IsEntity
  nameWithType: MetaType.IsEntity
- uid: System.Data.Linq.Mapping.MetaType.IsInheritanceDefault*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: IsInheritanceDefault
  nameWithType: MetaType.IsInheritanceDefault
- uid: System.Data.Linq.Mapping.MetaType.Model*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: Model
  nameWithType: MetaType.Model
- uid: System.Data.Linq.Mapping.MetaType.Name*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: Name
  nameWithType: MetaType.Name
- uid: System.Data.Linq.Mapping.MetaType.OnLoadedMethod*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: OnLoadedMethod
  nameWithType: MetaType.OnLoadedMethod
- uid: System.Data.Linq.Mapping.MetaType.OnValidateMethod*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: OnValidateMethod
  nameWithType: MetaType.OnValidateMethod
- uid: System.Data.Linq.Mapping.MetaType.PersistentDataMembers*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: PersistentDataMembers
  nameWithType: MetaType.PersistentDataMembers
- uid: System.Data.Linq.Mapping.MetaType.Table*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: Table
  nameWithType: MetaType.Table
- uid: System.Data.Linq.Mapping.MetaType.Type*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: Type
  nameWithType: MetaType.Type
- uid: System.Data.Linq.Mapping.MetaType.VersionMember*
  parent: System.Data.Linq.Mapping.MetaType
  isExternal: false
  name: VersionMember
  nameWithType: MetaType.VersionMember
