### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SemanticResultValue
  id: SemanticResultValue
  children:
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  - System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  langs:
  - csharp
  name: SemanticResultValue
  nameWithType: SemanticResultValue
  fullName: System.Speech.Recognition.SemanticResultValue
  type: Class
  summary: "의미 체계 값을 나타내며 필요에 따라 음성 인식 문법의 구성 요소와 값을 연결 합니다."
  remarks: "SemanticResultValue 및 <xref:System.Speech.Recognition.SemanticResultKey>개체 <xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.Choices>에 <xref:System.Speech.Recognition.Grammar>.</xref:System.Speech.Recognition.Grammar> 에 대 한 의미 체계 구조를 디자인 하는 가장 쉬운 방법은,</xref:System.Speech.Recognition.Choices> 및</xref:System.Speech.Recognition.GrammarBuilder> 와 함께</xref:System.Speech.Recognition.SemanticResultKey> 사용 인스턴스를 가져와서 구의 의미 체계 정보에 액세스 <xref:System.Speech.Recognition.SemanticValue>, <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> <xref:System.Speech.Recognition.RecognizedPhrase>.</xref:System.Speech.Recognition.RecognizedPhrase> 속성</xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> 을 통해</xref:System.Speech.Recognition.SemanticValue>      > [!NOTE] >으로 정의 된 SemanticResultValue 개체에 의해 관리 되는 값 <xref:System.Object>인스턴스가 해당 생성자에 전달 합니다.</xref:System.Object> 이 내부 형식의 <xref:System.Object>해야 `bool`, `int`, `float`, 또는 `string`.</xref:System.Object> 다른 종류의 생성 되지 것입니다는 <xref:System.Speech.Recognition.Grammar>는 SemanticResultValue 사용 하 여 인스턴스.</xref:System.Speech.Recognition.Grammar>       SemanticResultValue 인스턴스를 사용 하는 일반적인의 인식할 수 있는 구성 요소 인스턴스를 연결는 <xref:System.Speech.Recognition.Grammar>, 규칙, 구 등 또는 <xref:System.Speech.Recognition.Choices>개체입니다.</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.Grammar> 연결 된 구성 요소를 사용 하 여 인식 작업의 일환으로, 반환 된 구의 의미 체계에는 값을 정의 하는 SemanticResultValue ´ ù.       SemanticResultValue 인스턴스는 SemanticResultValue를 만드는 데 생성자에 따라 문법 요소를 연결 하기 위한 두 가지 기본적인 방법이 있습니다.      -경우에 값 (의 인스턴스에서 지정 된 <xref:System.Object>)가 사용을 SemanticResultValue 개체를 생성 하는 SemanticResultValue 외에 선행 하는 문법 구성 요소와 연결 됩니다. 한 <xref:System.Speech.Recognition.GrammarBuilder>개체.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Object>           예를 들어 if 아래 코드 조각에에서는 <xref:System.Speech.Recognition.Grammar>이 사용 하 여 생성 <xref:System.Speech.Recognition.GrammarBuilder>단어 &quot;백그라운드&quot;의 값을 인식 하는 인스턴스 `true` 인식된 된 구와 의미 체계에 설정 됩니다.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar>          ```c#       GrammarBuilder backgroundGB=new GrammarBuilder(&quot;background&quot;);       backgroundGB.Append(new SemanticResultValue(true));       ```자세한 내용은 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29> 설명은 참조 하십시오.      -구 또는 특정 인 문자열 값일 경우 <xref:System.Speech.Recognition.GrammarBuilder>인스턴스가 사용 되는 함께 한 <xref:System.Object>SemanticResultValue 값, 값이 자동으로 연결 문자열 값 구문으로 지정 하는 또는 <xref:System.Speech.Recognition.GrammarBuilder>인스턴스.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Object> </xref:System.Speech.Recognition.GrammarBuilder>  경우 구 또는 <xref:System.Speech.Recognition.GrammarBuilder>인식된 된 구와의 의미 체계에 할당할 값, 개체 인식 프로세스에 사용 됩니다.</xref:System.Speech.Recognition.GrammarBuilder>           다음 예제에서는이 설명 하 고 <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>및 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29> </xref:System.Speech.Recognition.GrammarBuilder.Append%2A> 를 명시적으로 호출을 사용 하 고 이전 예제에서 기능적 인식 논리는 단어 &quot;백그라운드&quot; 값을 사용 하는 경우 `true` 인식 된 의미 체계에 추가 됩니다.          ```c#       fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;background&quot;, true));       ```자세한 내용은 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29>및 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>.</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29> </xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29> 설명은 참조 하십시오.       <xref:System.Speech.Recognition.Grammar>인식에서 모든 SemanticResultValue 인스턴스 <xref:System.Speech.Recognition.SemanticValue> <xref:System.Speech.Recognition.Grammar>.</xref:System.Speech.Recognition.Grammar> 에서 사용 하는 개체</xref:System.Speech.Recognition.SemanticValue> 중 하나에 연결 해야</xref:System.Speech.Recognition.Grammar> 하는에서 사용할 이 SemanticResultValue 의미 체계 키를 연결 하 여 수행 됩니다.       SemanticResultValue에 의미 체계 키를 명시적으로 연결 수를 사용 하는 <xref:System.Speech.Recognition.SemanticResultKey>개체입니다.</xref:System.Speech.Recognition.SemanticResultKey>  SemanticResultValue 인스턴스 키에 명시적으로 연결 된 기본 <xref:System.Speech.Recognition.SemanticValue>.</xref:System.Speech.Recognition.SemanticValue> 루트 키에 연결       SemanticResultValue 설정 하는 데 사용 된 후의 <xref:System.Speech.Recognition.SemanticValue.Value%2A>기본 루트 키 또는 특정 태그가 지정 됩니다 여부에 관계 없이 <xref:System.Speech.Recognition.SemanticResultKey>, 해당 값을 수정 해서는 안 또는 인식 작업 하는 동안 예외가 발생 합니다.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticValue.Value%2A>       다음 예제에서는 설정 하 고 다음의 루트의 <xref:System.Speech.Recognition.SemanticValue.Value%2A> <xref:System.Speech.Recognition.Grammar>.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticValue.Value%2A> 를 수정 하기 때문에 예외가 발생 합니다.      ```c#   GrammarBuilder gb=new GrammarBuilder();   gb.Append(new SemanticResultValue(&quot;One&quot;));   gb.Append(new SemanticResultValue(&quot;Two&quot;));   ```반면에 다음 예제에서 코드는 허용 됩니다. 에 포함 된 SemanticResultValue의 여러 인스턴스를 정의 하지만 <xref:System.Speech.Recognition.Choices>개체 및 사용할 키의 값을 설정 하는 하나의 `bgOrfgText`.</xref:System.Speech.Recognition.Choices>      ```c#   Choices fgOrbgChoice = new Choices();   fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;background&quot;));   fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;foreground&quot;));   SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(&quot;BgOrFgText&quot;, fgOrbgChoice);   ```SemanticResultValue 사용에 대 한 자세한 내용은 및 <xref:System.Speech.Recognition.SemanticResultKey>개체 참조 [이해 SemanticResultValue 및 SemanticResultKey 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c) 및 [는 SemanticResultValue를 추출 하는 SemanticResultKey 사용](http://msdn.microsoft.com/en-us/198e29b8-845f-4cec-a25e-f55c0eaf46aa) 에 [.NET Framework 4.0에 대 한 시스템 음성 프로그래밍 가이드](http://msdn.microsoft.com/en-us/610116c7-3817-40ff-857b-5d41e8511043).</xref:System.Speech.Recognition.SemanticResultKey>"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\".  SemanticResultValue and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(new SemanticResultValue(introGB, String.Format(\"Command: {0}\", introString)));  \n  }    \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n                       cmdIntro,  \n                       new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")]

      public class SemanticResultValue
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(Object)
  nameWithType: SemanticResultValue.SemanticResultValue(Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> 클래스 및 의미 체계 값을 지정 합니다."
  remarks: "A `SemanticResultValue` 이 속성에서 반환 생성자 특정 문법 요소와 연결 되어 있지 않습니다. 인스턴스를 사용 하 여 명시적는 연결을 설정할 수 있어야 `SemanticResultValue` <xref:System.Speech.Recognition.GrammarBuilder>.</xref:System.Speech.Recognition.GrammarBuilder> 와 함께       예를 들어 if 아래 코드 조각에에서는 <xref:System.Speech.Recognition.Grammar>이 사용 하 여 생성 <xref:System.Speech.Recognition.GrammarBuilder>단어 &quot;백그라운드&quot;의 값을 인식 하는 인스턴스 `true` 인식된 된 구와 의미 체계에 설정 됩니다.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar>      ```c#   GrammarBuilder backgroundGB=new GrammarBuilder(&quot;background&quot;);   backgroundGB.Append(new SemanticResultValue(true));   ```"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```c#  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }           \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n        cmdIntro,   \n        new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public SemanticResultValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "관리 하는 값 <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>합니다. Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  id: '#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(GrammarBuilder,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> 클래스와 사용 하 여 값 의미 체계 연결는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 개체입니다."
  remarks: "문법 요소에서 지정 된 경우 <xref:System.Speech.Recognition.GrammarBuilder>인식 논리에 사용 되는 `value` 인식 되는 출력의 의미 체계에 설정 됩니다.</xref:System.Speech.Recognition.GrammarBuilder>       인식 논리 경우 아래 코드 조각에 사용 하 여 생성 된 <xref:System.Speech.Recognition.GrammarBuilder>인스턴스 (`myGb`) 사용 하 여는 <xref:System.Speech.Recognition.Choices>개체 (`myChoice`) 식별 입력을, 값 `true` 인식 된 의미 체계에 추가 됩니다.</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder>      ```c#   myGb.Append(new SemanticResultValue(myChoice, true);   ```으로 <xref:System.Speech.Recognition.GrammarBuilder>에 대 한 암시적 변환을 지 원하는 <xref:System.Speech.Recognition.Choices>, `SemanticResultValue`, 및 <xref:System.Speech.Recognition.SemanticResultKey>,이 생성자는 해당 개체도 사용할 수 있습니다.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder>"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```c#  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }           \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n    }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n                      cmdIntro,  \n                      new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "인식에서 사용할 문법 구성 요소입니다."
    - id: value
      type: System.Object
      description: "관리 하는 값 <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>합니다. Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  id: '#ctor(System.String,System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(String,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(String,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(String,Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> 클래스와 사용 하 여 값 의미 체계 연결을 <xref:System.String>개체.</xref:System.String>"
  remarks: "지정한 문자열은 경우 `phrase` 인식 논리에 사용 되는 `value` 인식 되는 출력의 의미 체계에 설정 됩니다.       인식 논리를 사용 하 여 생성 하는 경우 다음 코드 조각에는 <xref:System.Speech.Recognition.GrammarBuilder>인스턴스 (`myGb`) 문자열 &quot;담보 대출 내&quot;를 사용 하 여 식별 입력을, 값 `true` 인식 된 의미 체계에 추가 됩니다.</xref:System.Speech.Recognition.GrammarBuilder>      ```c#   myGb.Append(new SemanticResultValue(&quot;my mortgage&quot;, true);   ```"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }  \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(cmdIntro,  \n                         new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public SemanticResultValue (string phrase, object value);
    parameters:
    - id: phrase
      type: System.String
      description: "인식에서 사용할 구입니다."
    - id: value
      type: System.Object
      description: "관리 하는 값 <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>합니다. Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  id: ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: ToGrammarBuilder()
  nameWithType: SemanticResultValue.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "인스턴스를 반환 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 현재에서 생성 된 <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> 인스턴스."
  remarks: "ToGrammarBuilder의 사용은을 사용 하는 <xref:System.Speech.Recognition.GrammarBuilder>사용 하는 생성자는 <xref:System.Speech.Recognition.SemanticResultValue>인수로 (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>).</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder>"
  example:
  - "The following example creates <xref:System.Speech.Recognition.Grammar> objects that support commands to change the background color.  \n  \n A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the [Add(GrammarBuilder\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])?qualifyHint=False&autoUpgrade=False) method with <xref:System.Speech.Recognition.GrammarBuilder> instances that are obtained from the <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> method on the `SemanticResultValue` objects created from color strings.  \n  \n A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in the `colorChoice` instance.  \n  \n```c#  \n  \nprivate Grammar CreateGrammarBuilderRGBSemantics()   \n{  \n  \n  // Create a set of choices, each a lookup from a color name to RBG.  \n  // Choices constructors do not take a SemanticResultValue parameter, so  \n  // cast SemanticResultValue to GrammarBuilder.  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    SemanticResultValue colorValue =   \n        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  \n    colorChoice.Add(colorValue.ToGrammarBuilder());  \n  }  \n  \n  SemanticResultKey choiceKey = new SemanticResultKey(\"rgb\", colorChoice);  \n  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  \n  \n  // Create two intermediate grammars with an introductory phrase and the  \n  // color choice.  \n  GrammarBuilder makeBackgroundBuilder = \"Make background\";  \n  makeBackgroundBuilder.Append(choiceBuilder);  \n  \n  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder(\"Configure background as\");  \n  configureBackgroundBuilder.Append((new SemanticResultKey(\"rgb\", colorChoice)).ToGrammarBuilder());  \n  \n  // Create the final grammar, which recognizes either intermediate grammar.  \n  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  \n  grammar.Name = \"Set Background Color\";  \n  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();
    parameters: []
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "인스턴스를 반환 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 현재에서 생성 된 <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> 인스턴스."
  overload: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(Object)
  nameWithType: SemanticResultValue.SemanticResultValue(Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(Object)
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(GrammarBuilder,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(String,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(String,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: ToGrammarBuilder()
  nameWithType: SemanticResultValue.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder()
- uid: System.Speech.Recognition.SemanticResultValue.#ctor*
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue
  nameWithType: SemanticResultValue.SemanticResultValue
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder*
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: ToGrammarBuilder
  nameWithType: SemanticResultValue.ToGrammarBuilder
