### YamlMime:ManagedReference
items:
- uid: System.Web.WebSockets.AspNetWebSocket
  id: AspNetWebSocket
  children:
  - System.Web.WebSockets.AspNetWebSocket.Abort
  - System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Web.WebSockets.AspNetWebSocket.CloseStatus
  - System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
  - System.Web.WebSockets.AspNetWebSocket.Dispose
  - System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  - System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  - System.Web.WebSockets.AspNetWebSocket.State
  - System.Web.WebSockets.AspNetWebSocket.SubProtocol
  langs:
  - csharp
  name: AspNetWebSocket
  nameWithType: AspNetWebSocket
  fullName: System.Web.WebSockets.AspNetWebSocket
  type: Class
  summary: "웹 서버와 ASP.NET 응용 프로그램에서 클라이언트 간의 실시간 양방향 연결을 나타냅니다."
  syntax:
    content: 'public sealed class AspNetWebSocket : System.Net.WebSockets.WebSocket'
  inheritance:
  - System.Object
  - System.Net.WebSockets.WebSocket
  implements: []
  inheritedMembers:
  - System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  - System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  - System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  - System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  - System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  - System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  - System.Net.WebSockets.WebSocket.RegisterPrefixes
  - System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.Abort
  id: Abort
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: Abort()
  nameWithType: AspNetWebSocket.Abort()
  fullName: System.Web.WebSockets.AspNetWebSocket.Abort()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "모든 보류 중인 I/O 작업의 취소는 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref> 개체 및 개체의 상태를 설정 하 여 추가 I/O 작업을 시작 하는 데 수 없도록 합니다."
  remarks: "Abort 메서드 호출 된 후 속성 및 I/O 작업을 포함 하지 않는 메서드를 계속 액세스할 수 있습니다."
  syntax:
    content: public override void Abort ();
    parameters: []
  overload: System.Web.WebSockets.AspNetWebSocket.Abort*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "개체가 이전에 삭제 되었습니다."
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: AspNetWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "클라이언트 연결을 닫으려면 비동기 메시지를 보냅니다. 서버 연결을 닫으려면 요청을 시작 하는 경우 메서드가 반환 되기 전에 요청을 승인 하는 데 클라이언트에 대 한 대기 합니다."
  remarks: "CloseAsync를 사용할 수 있습니다 및 <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A>을 모두 클라이언트에 의해 또는 서버에서 시작 요청에 대 한 메서드는 <xref:System.Web.WebSockets.AspNetWebSocket>연결.</xref:System.Web.WebSockets.AspNetWebSocket> </xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> 마찬가지로 클라이언트에서 시작 된 요청을 처리 하는 두 가지 방법: 클라이언트가 연결을 닫으려면 서버에는 메시지를 보내면, 서버가 이러한 방법 중 하나를 호출 하 고 클라이언트에 승인을 보냅니다 하 고 반환 합니다.       서버에서 시작 요청에 대 한 두 가지 메서드는 다르게 작동합니다. CloseAsync 메서드는 연결을 종료 메시지를 클라이언트에 대 한 응답 잠시 기다린 후 다음 반환을 보냅니다. 클라이언트에서 보낸 모든 추가 데이터에 대 한 서버를 기다리지 않습니다. 반면,는 <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A>메서드 연결을 닫으려면 클라이언트에 메시지를 보내고 응답을 받기 위해 대기 하지 않고 반환 합니다.</xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> 메서드가 반환 후 호출할 수 있습니다는 <xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A>메서드는 클라이언트가 보내는 승인 나 추가 데이터를 처리 합니다.</xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A>"
  syntax:
    content: public override System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "닫기 작업의 상태 코드입니다."
    - id: statusDescription
      type: System.String
      description: "닫기 작업의 상태 메시지입니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "보류 중인 작업을 취소 하는 개체입니다."
    return:
      type: System.Threading.Tasks.Task
      description: "작업에 대 한 참조입니다."
  overload: System.Web.WebSockets.AspNetWebSocket.CloseAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref> 개체가 이전에 삭제 되었습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref> 중단 된 상태 개체입니다.       -또는-보내는 작업은 사용할 수 없습니다.       -또는-수신 작업은 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: AspNetWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "클라이언트 연결을 닫으려면 비동기 메시지를 보냅니다. 서버 연결을 닫으려면 요청을 시작 하는 경우 메서드는 응답을 받기 위해 대기 하지 않고 반환 합니다."
  remarks: "사용할 수는 <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A>및를 닫으려면 모두 클라이언트에 의해 또는 서버에서 시작 요청에 대 한 CloseOutputAsync 메서드는 <xref:System.Web.WebSockets.AspNetWebSocket>연결.</xref:System.Web.WebSockets.AspNetWebSocket> </xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> 마찬가지로 클라이언트에서 시작 된 요청을 처리 하는 두 가지 방법: 클라이언트가 연결을 닫으려면 서버에는 메시지를 보내면, 서버가 이러한 방법 중 하나를 호출 하 고 클라이언트에 승인을 보냅니다 하 고 반환 합니다.       서버에서 시작 요청에 대 한 두 가지 메서드는 다르게 작동합니다. <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A>메서드 연결을 닫으려면 클라이언트에 메시지를 보냅니다, 응답을 대기 하 고 다음을 반환 합니다.</xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> 클라이언트에서 보낸 모든 추가 데이터에 대 한 서버를 기다리지 않습니다. 반면, CloseOutputAsync 메서드는 연결을 닫으려면 클라이언트에 메시지를 보냅니다 하 고 응답을 받기 위해 대기 하지 않고 반환 합니다. 메서드가 반환 후 호출할 수 있습니다는 <xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A>메서드는 클라이언트가 보내는 승인 나 추가 데이터를 처리 합니다.</xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A>"
  syntax:
    content: public override System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "닫기 작업의 상태 코드입니다."
    - id: statusDescription
      type: System.String
      description: "닫기 작업의 상태 메시지입니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "보류 중인 작업을 취소 하는 개체입니다."
    return:
      type: System.Threading.Tasks.Task
      description: "작업에 대 한 참조입니다."
  overload: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "개체가 이전에 삭제 되었습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref> 중단 된 상태 개체입니다.       -또는-보내는 작업은 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatus
  id: CloseStatus
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: CloseStatus
  nameWithType: AspNetWebSocket.CloseStatus
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseStatus
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "그 이유를 나타내는 상태 코드를 가져옵니다는 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref> 개체가 닫혔습니다."
  syntax:
    content: public override Nullable<System.Net.WebSockets.WebSocketCloseStatus> CloseStatus { get; }
    return:
      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
      description: "상태 코드입니다."
  overload: System.Web.WebSockets.AspNetWebSocket.CloseStatus*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "개체가 이전에 삭제 되었습니다."
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
  id: CloseStatusDescription
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: CloseStatusDescription
  nameWithType: AspNetWebSocket.CloseStatusDescription
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "이유를 설명 하는 상태 메시지를 가져옵니다는 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref> 개체가 닫혔습니다."
  syntax:
    content: public override string CloseStatusDescription { get; }
    return:
      type: System.String
      description: "상태 메시지입니다."
  overload: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "개체가 이전에 삭제 되었습니다."
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.Dispose
  id: Dispose
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: Dispose()
  nameWithType: AspNetWebSocket.Dispose()
  fullName: System.Web.WebSockets.AspNetWebSocket.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "사용 하는 모든 리소스를 해제 한 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref> 개체입니다."
  remarks: "ASP.NET에서 Dispose 메서드를 자동으로 호출 된 <xref:System.Web.WebSockets.AspNetWebSocket>실행 중인 코드에서 완료 된 후에 남아 있는 모든 리소스를 해제 하는 개체입니다.</xref:System.Web.WebSockets.AspNetWebSocket>"
  syntax:
    content: public override void Dispose ();
    parameters: []
  overload: System.Web.WebSockets.AspNetWebSocket.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: AspNetWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "원격 클라이언트에서 단일 메시지 조각을 수신합니다."
  syntax:
    content: public override System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync (ArraySegment<byte> buffer, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "메시지 데이터를 포함 하는 배열입니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "보류 중인 작업을 취소 하는 개체입니다."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
      description: "메시지를 표시 하는 작업에 대 한 참조입니다."
  overload: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref> 개체가 이전에 삭제 되었습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref> 중단 된 상태 개체입니다.       -또는-수신 작업은 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: AspNetWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "단일 메시지 조각이 원격 클라이언트에 보냅니다."
  syntax:
    content: public override System.Threading.Tasks.Task SendAsync (ArraySegment<byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "메시지 데이터를 포함 하는 배열입니다."
    - id: messageType
      type: System.Net.WebSockets.WebSocketMessageType
      description: "메시지 형식입니다."
    - id: endOfMessage
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>조각 전체 메시지; 끝날 임을 나타내기 위해 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "보류 중인 작업을 취소 하는 개체입니다."
    return:
      type: System.Threading.Tasks.Task
      description: "메시지를 보내는 작업에 대 한 참조입니다."
  overload: System.Web.WebSockets.AspNetWebSocket.SendAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref> 개체가 삭제 되었습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref> 중단 된 상태 개체입니다.       -또는-보내는 작업은 사용할 수 없습니다."
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.State
  id: State
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: State
  nameWithType: AspNetWebSocket.State
  fullName: System.Web.WebSockets.AspNetWebSocket.State
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "열림 또는 닫힘 상태를 나타내는 값을 가져옵니다는 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref> 개체입니다."
  syntax:
    content: public override System.Net.WebSockets.WebSocketState State { get; }
    return:
      type: System.Net.WebSockets.WebSocketState
      description: "현재 상태입니다."
  overload: System.Web.WebSockets.AspNetWebSocket.State*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "개체가 이전에 삭제 되었습니다."
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.SubProtocol
  id: SubProtocol
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: SubProtocol
  nameWithType: AspNetWebSocket.SubProtocol
  fullName: System.Web.WebSockets.AspNetWebSocket.SubProtocol
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "원격 클라이언트와 서버를 통해 데이터를 교환 하는 데 사용할 수 있는 응용 프로그램별 프로토콜의 이름을 가져옵니다는 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref> 연결 합니다."
  syntax:
    content: public override string SubProtocol { get; }
    return:
      type: System.String
      description: "프로토콜의 이름입니다."
  overload: System.Web.WebSockets.AspNetWebSocket.SubProtocol*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "개체가 이전에 삭제 되었습니다."
  platform:
  - net462
references:
- uid: System.Net.WebSockets.WebSocket
  isExternal: false
  name: System.Net.WebSockets.WebSocket
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.WebSockets.AspNetWebSocket.Abort
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: Abort()
  nameWithType: AspNetWebSocket.Abort()
  fullName: System.Web.WebSockets.AspNetWebSocket.Abort()
- uid: System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: AspNetWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.WebSockets.WebSocketCloseStatus
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketCloseStatus
  nameWithType: WebSocketCloseStatus
  fullName: System.Net.WebSockets.WebSocketCloseStatus
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: AspNetWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatus
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: AspNetWebSocket.CloseStatus
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseStatus
- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
  parent: System
  isExternal: true
  name: Nullable<WebSocketCloseStatus>
  nameWithType: Nullable<WebSocketCloseStatus>
  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    nameWithType: WebSocketCloseStatus
    fullName: WebSocketCloseStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: AspNetWebSocket.CloseStatusDescription
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
- uid: System.Web.WebSockets.AspNetWebSocket.Dispose
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: Dispose()
  nameWithType: AspNetWebSocket.Dispose()
  fullName: System.Web.WebSockets.AspNetWebSocket.Dispose()
- uid: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: AspNetWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<WebSocketReceiveResult>
  nameWithType: Task<WebSocketReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.WebSocketReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    nameWithType: WebSocketReceiveResult
    fullName: WebSocketReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: AspNetWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
- uid: System.Net.WebSockets.WebSocketMessageType
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketMessageType
  nameWithType: WebSocketMessageType
  fullName: System.Net.WebSockets.WebSocketMessageType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.WebSockets.AspNetWebSocket.State
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: State
  nameWithType: AspNetWebSocket.State
  fullName: System.Web.WebSockets.AspNetWebSocket.State
- uid: System.Net.WebSockets.WebSocketState
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  nameWithType: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState
- uid: System.Web.WebSockets.AspNetWebSocket.SubProtocol
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: AspNetWebSocket.SubProtocol
  fullName: System.Web.WebSockets.AspNetWebSocket.SubProtocol
- uid: System.Web.WebSockets.AspNetWebSocket.Abort*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: Abort
  nameWithType: AspNetWebSocket.Abort
- uid: System.Web.WebSockets.AspNetWebSocket.CloseAsync*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseAsync
  nameWithType: AspNetWebSocket.CloseAsync
- uid: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseOutputAsync
  nameWithType: AspNetWebSocket.CloseOutputAsync
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatus*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: AspNetWebSocket.CloseStatus
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: AspNetWebSocket.CloseStatusDescription
- uid: System.Web.WebSockets.AspNetWebSocket.Dispose*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: Dispose
  nameWithType: AspNetWebSocket.Dispose
- uid: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: ReceiveAsync
  nameWithType: AspNetWebSocket.ReceiveAsync
- uid: System.Web.WebSockets.AspNetWebSocket.SendAsync*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: SendAsync
  nameWithType: AspNetWebSocket.SendAsync
- uid: System.Web.WebSockets.AspNetWebSocket.State*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: State
  nameWithType: AspNetWebSocket.State
- uid: System.Web.WebSockets.AspNetWebSocket.SubProtocol*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: AspNetWebSocket.SubProtocol
