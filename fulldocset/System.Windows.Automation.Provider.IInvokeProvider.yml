### YamlMime:ManagedReference
items:
- uid: System.Windows.Automation.Provider.IInvokeProvider
  id: IInvokeProvider
  children:
  - System.Windows.Automation.Provider.IInvokeProvider.Invoke
  langs:
  - csharp
  name: IInvokeProvider
  nameWithType: IInvokeProvider
  fullName: System.Windows.Automation.Provider.IInvokeProvider
  type: Interface
  summary: "또는 시작 하 고,는 명확한 단일 작업을 수행 하 고, 활성화 되었을 때 상태를 유지 하지 않는 하는 컨트롤에 대 한 UI 자동화 클라이언트 액세스를 지원 하도록 메서드 및 속성을 노출 합니다."
  remarks: "지원 해야 하는 UI 자동화 공급자에서 구현 되는 <xref:System.Windows.Automation.InvokePattern>컨트롤 패턴.</xref:System.Windows.Automation.InvokePattern>       동일한 동작이 다른 컨트롤 패턴 공급자를 통해 노출 되지 않는 경우 IInvokeProvider를 구현 하는 컨트롤입니다. 예를 들어 경우는 <xref:System.Windows.Automation.InvokePattern.Invoke%2A>메서드가 동일한 작업을 수행 된 <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A>또는 <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A>메서드를 컨트롤 IInvokeProvider를 구현 하지 않아야 합니다.</xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> </xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> </xref:System.Windows.Automation.InvokePattern.Invoke%2A>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("54fcb24b-e18e-47a2-b4d3-eccbe77599a2")]

      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]

      public interface IInvokeProvider
  implements: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IInvokeProvider.Invoke
  id: Invoke
  parent: System.Windows.Automation.Provider.IInvokeProvider
  langs:
  - csharp
  name: Invoke()
  nameWithType: IInvokeProvider.Invoke()
  fullName: System.Windows.Automation.Provider.IInvokeProvider.Invoke()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "컨트롤을 활성화 하 고 해당 명확한 단일 작업을 시작 하는 요청을 보냅니다."
  remarks: "호출는 비동기 호출 이며 차단 하지 않고 즉시 반환 해야 합니다.      > [!NOTE] >이 문제는 직접 또는 간접적으로 호출 되 면 모달 대화 상자를 시작 하는 컨트롤에 특히 중요 합니다. 이벤트를 발생 시킨 모든 UI 자동화 클라이언트는 모달 대화 상자를 닫을 때까지 차단 된 상태로 유지 됩니다.       생성 호출의 <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent>이벤트.</xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> 가능 하면 컨트롤이 연결된 된 작업을 완료 된 후의 이벤트를 발생 시켜야 합니다.       <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent>다음과 같은 시나리오에서 호출 요청을 처리 하기 전에 발생 해야:-수 없으면 하거나 작업 될 때까지 대기 하는 유용한 완료 되었습니다.</xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent>      -작업에는 사용자 상호 작용이 필요합니다.      -작업은 시간이 오래 걸리므로 않으며 중요 한 기간에 대 한 차단 호출 클라이언트가 합니다."
  example:
  - "The following example implements the Invoke method on the MouseDown event handler of a control. Assume that `providerControl` is a member variable that was initialized when the class was constructed.  \n  \n [!code-cs[UIAProvider_snip#106](~/add/codesnippet/csharp/UIAProvider/Invoker.cs#106)]"
  syntax:
    content: public void Invoke ();
    parameters: []
  overload: System.Windows.Automation.Provider.IInvokeProvider.Invoke*
  exceptions:
  - type: System.Windows.Automation.ElementNotEnabledException
    commentId: T:System.Windows.Automation.ElementNotEnabledException
    description: "컨트롤을 해제 합니다."
  platform:
  - net462
references:
- uid: System.Windows.Automation.ElementNotEnabledException
  parent: System.Windows.Automation
  isExternal: false
  name: ElementNotEnabledException
  nameWithType: ElementNotEnabledException
  fullName: System.Windows.Automation.ElementNotEnabledException
- uid: System.Windows.Automation.Provider.IInvokeProvider.Invoke
  parent: System.Windows.Automation.Provider.IInvokeProvider
  isExternal: false
  name: Invoke()
  nameWithType: IInvokeProvider.Invoke()
  fullName: System.Windows.Automation.Provider.IInvokeProvider.Invoke()
- uid: System.Windows.Automation.Provider.IInvokeProvider.Invoke*
  parent: System.Windows.Automation.Provider.IInvokeProvider
  isExternal: false
  name: Invoke
  nameWithType: IInvokeProvider.Invoke
