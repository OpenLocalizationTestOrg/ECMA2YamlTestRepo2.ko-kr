### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Description.IContractBehaviorAttribute
  id: IContractBehaviorAttribute
  children:
  - System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract
  langs:
  - csharp
  name: IContractBehaviorAttribute
  nameWithType: IContractBehaviorAttribute
  fullName: System.ServiceModel.Description.IContractBehaviorAttribute
  type: Interface
  summary: "계약을 지정 구현 하는 특성이 &lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName&gt; 인터페이스가 활성화 되어 있습니다."
  remarks: "도 사용 되는 특성에서 IContractBehaviorAttribute 인터페이스를 구현는 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>서비스 형식에 계약 동작 특성을 사용 하도록 설정 하지만 해당 응용 프로그램에 지정 된 계약을 제한 하는 개체는 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A>속성.</xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> </xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>       필요는 없습니다 IContractBehaviorAttribute 사용자 지정 계약 동작 특성을 구현 하 고 계약 인터페이스 또는 이중 콜백 특성이 적용 되는 경우 클래스의 값에는 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A>속성은 무시 됩니다.</xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A>       자세한 내용은 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>.</xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> 을 참조 하십시오."
  example:
  - "The following code example assumes a custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider?displayProperty=fullName> implementation called `ObjectProviderBehavior` that provides a \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n To insert the instance provider customization, the example shows how to implement a custom attribute (`SingletonBehaviorAttribute`) that implements <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> to insert the custom service instance provider. It also implements IContractBehaviorAttribute, which binds its application to the `ISampleService` contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public interface IContractBehaviorAttribute
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract
  id: TargetContract
  parent: System.ServiceModel.Description.IContractBehaviorAttribute
  langs:
  - csharp
  name: TargetContract
  nameWithType: IContractBehaviorAttribute.TargetContract
  fullName: System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "계약 동작을 적용 하는 계약의 형식을 가져옵니다."
  remarks: "계약 동작을 계약을 지정 하려면 TargetContract 속성을 구현 적용 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>특성이 서비스 클래스에 적용 되</xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> 는 구현"
  example:
  - "The following code example assumes a custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider?displayProperty=fullName> implementation called `ObjectProviderBehavior` that provides a \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n To insert the instance provider customization, the example shows how to implement a custom attribute (`SingletonBehaviorAttribute`) that implements <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its application to the `ISampleService` contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public Type TargetContract { get; }
    return:
      type: System.Type
      description: "계약 동작을 적용 하는 계약입니다."
  overload: System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract
  parent: System.ServiceModel.Description.IContractBehaviorAttribute
  isExternal: false
  name: TargetContract
  nameWithType: IContractBehaviorAttribute.TargetContract
  fullName: System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract*
  parent: System.ServiceModel.Description.IContractBehaviorAttribute
  isExternal: false
  name: TargetContract
  nameWithType: IContractBehaviorAttribute.TargetContract
