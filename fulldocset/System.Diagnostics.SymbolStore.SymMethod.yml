### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.SymbolStore.SymMethod
  id: SymMethod
  children:
  - System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)
  - System.Diagnostics.SymbolStore.SymMethod.Dispose
  - System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)
  - System.Diagnostics.SymbolStore.SymMethod.Finalize
  - System.Diagnostics.SymbolStore.SymMethod.GetNamespace
  - System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.SymMethod.GetParameters
  - System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)
  - System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  - System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  - System.Diagnostics.SymbolStore.SymMethod.RootScope
  - System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal
  - System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  - System.Diagnostics.SymbolStore.SymMethod.Token
  langs:
  - csharp
  name: SymMethod
  nameWithType: SymMethod
  fullName: System.Diagnostics.SymbolStore.SymMethod
  type: Class
  summary: "기호 저장소 내의 메서드를 나타냅니다."
  remarks: "SymMethod 클래스 메서드의 시퀀스 위치, 어휘 범위 매개 변수 정보와 같은 기호 관련 특성에만 액세스를 제공합니다. 사용 하 여는 <xref:System.Reflection>클래스의 메서드 형식 관련 특성을 읽을 수 있습니다.</xref:System.Reflection>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SymMethod : System.Diagnostics.SymbolStore.SymMethodBase, IDisposable, System.Diagnostics.SymbolStore.ISymbolMethod
  inheritance:
  - System.Object
  - System.Diagnostics.SymbolStore.SymMethodBase
  implements:
  - System.Diagnostics.SymbolStore.ISymbolMethod
  - System.IDisposable
  inheritedMembers:
  - System.Diagnostics.SymbolStore.SymMethodBase.{dtor}
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)
  id: '#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)'
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: SymMethod(ISymUnmanagedMethod*)
  nameWithType: SymMethod.SymMethod(ISymUnmanagedMethod*)
  fullName: System.Diagnostics.SymbolStore.SymMethod.SymMethod(ISymUnmanagedMethod*)
  type: Constructor
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  syntax:
    content: public SymMethod (System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod* pMethod);
    parameters:
    - id: pMethod
      type: System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*
      description: "추가할 수 있습니다."
  overload: System.Diagnostics.SymbolStore.SymMethod.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose
  id: Dispose
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Dispose()
  nameWithType: SymMethod.Dispose()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "현재 인스턴스에서 사용 하는 리소스를 해제는 <xref href=&quot;System.Diagnostics.SymbolStore.SymMethod&quot;> </xref> 클래스입니다."
  syntax:
    content: public override sealed void Dispose ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.SymMethod.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SymMethod.Dispose(Boolean)
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose(Boolean)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "에 의해 호출 된 <> </> *> 및 <> </> *>의 현재 인스턴스에서 사용 되는 스레드와 관리 되지 않는 리소스를 해제 하는 메서드는 <xref href=&quot;System.Diagnostics.SymbolStore.SymMethod&quot;> </xref> 클래스입니다."
  remarks: "공개적으로만이 메서드는 <xref:System.Diagnostics.SymbolStore.SymMethod.Dispose%2A>및 <xref:System.Diagnostics.SymbolStore.SymMethod.Finalize%2A>방식의이 메서드를 직접 호출 하지 않습니다.</xref:System.Diagnostics.SymbolStore.SymMethod.Finalize%2A> </xref:System.Diagnostics.SymbolStore.SymMethod.Dispose%2A>"
  syntax:
    content: protected virtual void Dispose (bool A_0);
    parameters:
    - id: A_0
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Diagnostics.SymbolStore.SymMethod.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize
  id: Finalize
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Finalize()
  nameWithType: SymMethod.Finalize()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Finalize()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "관리 되지 않는 리소스를 해제 하 고 기타 정리 작업 하기 전에 수행 된 <xref href=&quot;System.Diagnostics.SymbolStore.SymMethod&quot;> </xref> 가비지 수집에서 회수 합니다."
  remarks: "이 메서드를 재정의 <xref:System.Object.Finalize%2A>.</xref:System.Object.Finalize%2A> 응용 프로그램 코드,이 메서드를 호출 하지 않아야 개체의 `Finalize` 메서드를 호출 하 여 가비지 수집기의 종료를 사용 하지 않도록 설정 된 경우가 아니면 자동으로 가비지 수집 중 호출 됩니다는 <xref:System.GC.SuppressFinalize%2A>메서드.</xref:System.GC.SuppressFinalize%2A>"
  syntax:
    content: ~SymMethod ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.SymMethod.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace
  id: GetNamespace
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetNamespace()
  nameWithType: SymMethod.GetNamespace()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetNamespace()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "throw 한 <xref:System.NotSupportedException>모든 경우에에서.</xref:System.NotSupportedException>"
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolNamespace GetNamespace ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolNamespace
      description: "throw 한 <xref:System.NotSupportedException>모든 경우에에서.</xref:System.NotSupportedException>"
  overload: System.Diagnostics.SymbolStore.SymMethod.GetNamespace*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "모든 경우"
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  id: GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetOffset(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "지정된 된 위치에 해당 하는 메서드 내에서 오프셋 Microsoft intermediate language를 MSIL ()를 가져옵니다."
  syntax:
    content: public virtual int GetOffset (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);
    parameters:
    - id: document
      type: System.Diagnostics.SymbolStore.ISymbolDocument
      description: "오프셋이 요청 된 문서입니다."
    - id: line
      type: System.Int32
      description: "오프셋이 요청 된 문서 줄."
    - id: column
      type: System.Int32
      description: "오프셋이 요청 된 문서 열입니다."
    return:
      type: System.Int32
      description: "문서에서 지정 된 위치에 대 한 현재 메서드 내의 IL 오프셋입니다."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters
  id: GetParameters
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetParameters()
  nameWithType: SymMethod.GetParameters()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetParameters()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "현재 메서드의 매개 변수를 가져옵니다."
  remarks: "매개 변수는 메서드의 서명 내에서 정의 된 순서 대로 반환 됩니다. 메서드 매개 변수가 없는 경우 반환 된 배열은 비어 있습니다."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolVariable[] GetParameters ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolVariable[]
      description: "현재 메서드의 매개 변수 배열입니다."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  id: GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetRanges(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Microsoft는 지정 된 위치가이 메서드에 설명 되어 MSIL (intermediate language) 오프셋과 범위에 해당 하는 시작 및 종료 오프셋된 쌍의 배열을 가져옵니다."
  remarks: "배열이 형식에서 정수 배열 {{시작 날짜&1; end1}, {시작 날짜&2; end2}...} 이며 여기서 각 쌍 메서드 내의 IL 오프셋된 범위는 합니다. 범위는 수는 2로 나눈 값 배열의 길이입니다."
  syntax:
    content: public virtual int[] GetRanges (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);
    parameters:
    - id: document
      type: System.Diagnostics.SymbolStore.ISymbolDocument
      description: "문서 IL 오프셋 범위가 요청 됩니다."
    - id: line
      type: System.Int32
      description: "IL 오프셋된 범위가 요청 되는 문서 줄."
    - id: column
      type: System.Int32
      description: "문서를 열 IL 오프셋 범위가 요청 됩니다."
    return:
      type: System.Int32[]
      description: "시작 및 종료 IL의 배열 오프셋 쌍입니다."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetRanges*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)
  id: GetScope(System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetScope(Int32)
  nameWithType: SymMethod.GetScope(Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetScope(Int32)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "메서드 내의 오프셋에 해당 하는 최대 포함 어휘 범위를 반환 합니다."
  remarks: "사용할 수는 <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope%2A>지역 변수 검색을 시작 하는 메서드.</xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope%2A>"
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope GetScope (int offset);
    parameters:
    - id: offset
      type: System.Int32
      description: "검색할 메서드 내의 IL 오프셋입니다."
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "메서드 내에서 지정된 된 IL 오프셋에 대 한 최대 포함 어휘 범위입니다."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetScope*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  id: GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  nameWithType: SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "현재 메서드의 시퀀스 위치를 가져오고 지정된 된 배열에 정보를 저장 합니다."
  remarks: "시퀀스 위치의 원본 파일 위치와 IL 오프셋 간의 매핑 사용 됩니다.  각 시퀀스 요소는 IL 오프셋 구성 되며 시작 및 끝 줄/열으로 지정 된 원본 파일 지역 번호를 기준으로 한 <xref:System.Diagnostics.SymbolStore.ISymbolDocument>개체입니다.</xref:System.Diagnostics.SymbolStore.ISymbolDocument>  모든 배열의 특정 인덱스에 있는 각 요소는 특정 시퀀스 위치에 해당합니다. 호출자에 게 반환 될 정보를 보관 하는 미리 할당 된 배열을 제공 해야 합니다. 배열에 있는 모든 값을 덮어씁니다. 사용 하 여 <xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A>모든 시퀀스 위치의 수를 가져오고 적절 한 크기의 배열을 만듭니다.</xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A> 시퀀스 위치의 오프셋을 기준으로 정렬 하 고 메서드의 모든 문서에 대 한. <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints%2A>각 배열의 크기를 확인 하 고는 시퀀스 정보를 각각을 배치 합니다.</xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints%2A> 모든 배열이 `null`, 해당 배열에 대 한 데이터가 반환 되지 않습니다."
  syntax:
    content: public virtual void GetSequencePoints (int[] offsets, System.Diagnostics.SymbolStore.ISymbolDocument[] documents, int[] lines, int[] columns, int[] endLines, int[] endColumns);
    parameters:
    - id: offsets
      type: System.Int32[]
      description: "시퀀스 위치에 대 한 메서드의 시작 부분에서 오프셋 되는 IL을 저장할 배열입니다."
    - id: documents
      type: System.Diagnostics.SymbolStore.ISymbolDocument[]
      description: "시퀀스 위치가 있는 문서를 저장할 배열입니다."
    - id: lines
      type: System.Int32[]
      description: "에 시퀀스 위치가 있는 문서의 줄을 저장할 배열입니다."
    - id: columns
      type: System.Int32[]
      description: "시퀀스 위치가 있는 문서의에서 열을 저장 하는 배열입니다."
    - id: endLines
      type: System.Int32[]
      description: "시퀀스 위치가 끝나는 문서의 줄 배열입니다."
    - id: endColumns
      type: System.Int32[]
      description: "시퀀스 위치가 끝나는 문서의 열 배열입니다."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  id: GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  nameWithType: SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "throw 한 <xref:System.NotSupportedException>모든 경우에에서.</xref:System.NotSupportedException>"
  syntax:
    content: public virtual bool GetSourceStartEnd (System.Diagnostics.SymbolStore.ISymbolDocument[] docs, int[] lines, int[] columns);
    parameters:
    - id: docs
      type: System.Diagnostics.SymbolStore.ISymbolDocument[]
      description: "이 매개 변수는 사용 되지 않습니다."
    - id: lines
      type: System.Int32[]
      description: "이 매개 변수는 사용 되지 않습니다."
    - id: columns
      type: System.Int32[]
      description: "이 매개 변수는 사용 되지 않습니다."
    return:
      type: System.Boolean
      description: "throw 한 <xref:System.NotSupportedException>모든 경우에에서.</xref:System.NotSupportedException>"
  overload: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "모든 경우"
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope
  id: RootScope
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: RootScope
  nameWithType: SymMethod.RootScope
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScope
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "현재 메서드의 루트 어휘 범위를 가져옵니다. 이 범위는 전체 메서드를 포함합니다."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope RootScope { get; }
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "전체 메서드를 포함 하는 루트 어휘 범위입니다."
  overload: System.Diagnostics.SymbolStore.SymMethod.RootScope*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal
  id: RootScopeInternal
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: RootScopeInternal()
  nameWithType: SymMethod.RootScopeInternal()
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "현재 메서드의 루트 어휘 범위를 가져옵니다. 이 범위는 전체 메서드를 포함합니다."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope RootScopeInternal ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "전체 메서드를 포함 하는 루트 어휘 범위입니다."
  overload: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  id: SequencePointCount
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: SequencePointCount
  nameWithType: SymMethod.SequencePointCount
  fullName: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "메서드에 있는 시퀀스 위치의 수를 가져옵니다."
  syntax:
    content: public virtual int SequencePointCount { get; }
    return:
      type: System.Int32
      description: "메서드에 있는 시퀀스 위치의 수입니다."
  overload: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Token
  id: Token
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Token
  nameWithType: SymMethod.Token
  fullName: System.Diagnostics.SymbolStore.SymMethod.Token
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "가져옵니다는 <xref href=&quot;System.Diagnostics.SymbolStore.SymbolToken&quot;> </xref> 현재 메서드의 메타 데이터를 포함 합니다."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.SymbolToken Token { get; }
    return:
      type: System.Diagnostics.SymbolStore.SymbolToken
      description: "현재 메서드의 메타 데이터 토큰입니다."
  overload: System.Diagnostics.SymbolStore.SymMethod.Token*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Diagnostics.SymbolStore.SymMethodBase
  isExternal: false
  name: System.Diagnostics.SymbolStore.SymMethodBase
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SymMethod(ISymUnmanagedMethod*)
  nameWithType: SymMethod.SymMethod(ISymUnmanagedMethod*)
  fullName: System.Diagnostics.SymbolStore.SymMethod.SymMethod(ISymUnmanagedMethod*)
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Dispose()
  nameWithType: SymMethod.Dispose()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose()
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SymMethod.Dispose(Boolean)
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Finalize()
  nameWithType: SymMethod.Finalize()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Finalize()
- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetNamespace()
  nameWithType: SymMethod.GetNamespace()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetNamespace()
- uid: System.Diagnostics.SymbolStore.ISymbolNamespace
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolNamespace
  nameWithType: ISymbolNamespace
  fullName: System.Diagnostics.SymbolStore.ISymbolNamespace
- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetOffset(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.SymbolStore.ISymbolDocument
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocument
  nameWithType: ISymbolDocument
  fullName: System.Diagnostics.SymbolStore.ISymbolDocument
- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetParameters()
  nameWithType: SymMethod.GetParameters()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetParameters()
- uid: System.Diagnostics.SymbolStore.ISymbolVariable[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolVariable
  nameWithType: ISymbolVariable
  fullName: System.Diagnostics.SymbolStore.ISymbolVariable[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolVariable
    name: ISymbolVariable
    nameWithType: ISymbolVariable
    fullName: ISymbolVariable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetRanges(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetScope(Int32)
  nameWithType: SymMethod.GetScope(Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetScope(Int32)
- uid: System.Diagnostics.SymbolStore.ISymbolScope
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolScope
  nameWithType: ISymbolScope
  fullName: System.Diagnostics.SymbolStore.ISymbolScope
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  nameWithType: SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
- uid: System.Diagnostics.SymbolStore.ISymbolDocument[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocument
  nameWithType: ISymbolDocument
  fullName: System.Diagnostics.SymbolStore.ISymbolDocument[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolDocument
    name: ISymbolDocument
    nameWithType: ISymbolDocument
    fullName: ISymbolDocument[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  nameWithType: SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScope
  nameWithType: SymMethod.RootScope
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScope
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScopeInternal()
  nameWithType: SymMethod.RootScopeInternal()
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal()
- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SequencePointCount
  nameWithType: SymMethod.SequencePointCount
  fullName: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
- uid: System.Diagnostics.SymbolStore.SymMethod.Token
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Token
  nameWithType: SymMethod.Token
  fullName: System.Diagnostics.SymbolStore.SymMethod.Token
- uid: System.Diagnostics.SymbolStore.SymbolToken
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: SymbolToken
  nameWithType: SymbolToken
  fullName: System.Diagnostics.SymbolStore.SymbolToken
- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SymMethod
  nameWithType: SymMethod.SymMethod
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Dispose
  nameWithType: SymMethod.Dispose
- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Finalize
  nameWithType: SymMethod.Finalize
- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetNamespace
  nameWithType: SymMethod.GetNamespace
- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetOffset
  nameWithType: SymMethod.GetOffset
- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetParameters
  nameWithType: SymMethod.GetParameters
- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetRanges
  nameWithType: SymMethod.GetRanges
- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetScope
  nameWithType: SymMethod.GetScope
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSequencePoints
  nameWithType: SymMethod.GetSequencePoints
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSourceStartEnd
  nameWithType: SymMethod.GetSourceStartEnd
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScope
  nameWithType: SymMethod.RootScope
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScopeInternal
  nameWithType: SymMethod.RootScopeInternal
- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SequencePointCount
  nameWithType: SymMethod.SequencePointCount
- uid: System.Diagnostics.SymbolStore.SymMethod.Token*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Token
  nameWithType: SymMethod.Token
