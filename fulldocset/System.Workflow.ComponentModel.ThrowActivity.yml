### YamlMime:ManagedReference
items:
- uid: System.Workflow.ComponentModel.ThrowActivity
  id: ThrowActivity
  children:
  - System.Workflow.ComponentModel.ThrowActivity.#ctor
  - System.Workflow.ComponentModel.ThrowActivity.#ctor(System.String)
  - System.Workflow.ComponentModel.ThrowActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.ThrowActivity.Fault
  - System.Workflow.ComponentModel.ThrowActivity.FaultProperty
  - System.Workflow.ComponentModel.ThrowActivity.FaultType
  - System.Workflow.ComponentModel.ThrowActivity.FaultTypeProperty
  - System.Workflow.ComponentModel.ThrowActivity.Initialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType(System.Type,System.Boolean)
  - System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription
  - System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)
  - System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)
  langs:
  - csharp
  name: ThrowActivity
  nameWithType: ThrowActivity
  fullName: System.Workflow.ComponentModel.ThrowActivity
  type: Class
  summary: "예외의 throw를 모델링 합니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]예외 throw의 선언적 모델링을 허용 하는 ThrowActivity 목적은입니다. ThrowActivity는 기능적으로 <xref:System.Workflow.Activities.CodeActivity>활동 코드 병행 처리기가 표시 된 예외를 throw 합니다.</xref:System.Workflow.Activities.CodeActivity>"
  example:
  - "The following code shows the use of a single throw activity in a workflow to implement exception handling. This code example is part of the Throw SDK sample and is from the ThrowWorkflow.cs file. For more information, see [Using Throw](http://msdn.microsoft.com/en-us/aa5b9546-ec95-4e43-8337-20e26f8d71cc).  \n  \n [!code-cs[WF_Samples#178](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#178)]\n [!code-vb[WF_Samples#178](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#178)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer(typeof(System.Workflow.ComponentModel.Design.ThrowDesigner), typeof(System.ComponentModel.Design.IDesigner))]

      [System.ComponentModel.ToolboxItem(typeof(System.Workflow.ComponentModel.Design.ActivityToolboxItem))]

      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.ComponentModel.ThrowActivity), "Resources.Throw.png")]

      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public sealed class ThrowActivity : System.Workflow.ComponentModel.Activity, System.Workflow.ComponentModel.Design.ITypeFilterProvider, System.Workflow.ComponentModel.IDynamicPropertyTypeProvider
  inheritance:
  - System.Object
  - System.Workflow.ComponentModel.DependencyObject
  - System.Workflow.ComponentModel.Activity
  implements:
  - System.Workflow.ComponentModel.Design.ITypeFilterProvider
  - System.Workflow.ComponentModel.IDynamicPropertyTypeProvider
  inheritedMembers:
  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty
  - System.Workflow.ComponentModel.Activity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.Activity.Canceling
  - System.Workflow.ComponentModel.Activity.CancelingEvent
  - System.Workflow.ComponentModel.Activity.Clone
  - System.Workflow.ComponentModel.Activity.Closed
  - System.Workflow.ComponentModel.Activity.ClosedEvent
  - System.Workflow.ComponentModel.Activity.Compensating
  - System.Workflow.ComponentModel.Activity.CompensatingEvent
  - System.Workflow.ComponentModel.Activity.Description
  - System.Workflow.ComponentModel.Activity.Enabled
  - System.Workflow.ComponentModel.Activity.Executing
  - System.Workflow.ComponentModel.Activity.ExecutingEvent
  - System.Workflow.ComponentModel.Activity.ExecutionResult
  - System.Workflow.ComponentModel.Activity.ExecutionStatus
  - System.Workflow.ComponentModel.Activity.Faulting
  - System.Workflow.ComponentModel.Activity.FaultingEvent
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)
  - System.Workflow.ComponentModel.Activity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)
  - System.Workflow.ComponentModel.Activity.IsDynamicActivity
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.Name
  - System.Workflow.ComponentModel.Activity.OnActivityExecutionContextLoad(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.OnActivityExecutionContextUnload(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.Parent
  - System.Workflow.ComponentModel.Activity.QualifiedName
  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)
  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)
  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.StatusChanged
  - System.Workflow.ComponentModel.Activity.StatusChangedEvent
  - System.Workflow.ComponentModel.Activity.ToString
  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)
  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)
  - System.Workflow.ComponentModel.Activity.Uninitialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId
  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.DesignMode
  - System.Workflow.ComponentModel.DependencyObject.Dispose
  - System.Workflow.ComponentModel.DependencyObject.Dispose(System.Boolean)
  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)
  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.InitializeProperties
  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)
  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject
  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)
  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.Site
  - System.Workflow.ComponentModel.DependencyObject.UserData
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.#ctor
  id: '#ctor'
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: ThrowActivity()
  nameWithType: ThrowActivity.ThrowActivity()
  fullName: System.Workflow.ComponentModel.ThrowActivity.ThrowActivity()
  type: Constructor
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Workflow.ComponentModel.ThrowActivity&quot;> </xref> 클래스입니다."
  remarks: ''
  example:
  - "The following code shows the use of a single throw activity in a workflow to implement exception handling. This example includes invoking the constructor. This code example is part of the Throw SDK sample and is from the ThrowWorkflow.cs file. For more information, see [Using Throw](http://msdn.microsoft.com/en-us/aa5b9546-ec95-4e43-8337-20e26f8d71cc).  \n  \n [!code-cs[WF_Samples#178](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#178)]\n [!code-vb[WF_Samples#178](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#178)]"
  syntax:
    content: public ThrowActivity ();
    parameters: []
  overload: System.Workflow.ComponentModel.ThrowActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: ThrowActivity(String)
  nameWithType: ThrowActivity.ThrowActivity(String)
  fullName: System.Workflow.ComponentModel.ThrowActivity.ThrowActivity(String)
  type: Constructor
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Workflow.ComponentModel.ThrowActivity&quot;> </xref> 클래스와 해당 이름을 초기화 합니다."
  syntax:
    content: public ThrowActivity (string name);
    parameters:
    - id: name
      type: System.String
      description: "활동의 사용자 정의 이름입니다."
  overload: System.Workflow.ComponentModel.ThrowActivity.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identifier</code>가 null 참조 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual basic에서)."
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: Execute(ActivityExecutionContext)
  nameWithType: ThrowActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.ThrowActivity.Execute(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  syntax:
    content: protected override sealed System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "추가할 수 있습니다."
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "추가할 수 있습니다."
  overload: System.Workflow.ComponentModel.ThrowActivity.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.Fault
  id: Fault
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: Fault
  nameWithType: ThrowActivity.Fault
  fullName: System.Workflow.ComponentModel.ThrowActivity.Fault
  type: Property
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "throw 해야 하는 예외 개체를 가져오거나 설정 합니다.는 <xref href=&quot;System.Workflow.ComponentModel.ThrowActivity&quot;> </xref>합니다."
  remarks: "여 간접적으로 액세스 하지 각 public 속성 및 이러한 유형의 이벤트를 해당 종속성 속성을 확인 합니다. 이 종속성 속성은 라는 공용 정적 필드 `XProperty` 또는 `XEvent`여기서 X는 해당 하는 속성입니다."
  syntax:
    content: public Exception Fault { get; set; }
    return:
      type: System.Exception
      description: "<xref:System.Exception>이 인스턴스와 연결 된.</xref:System.Exception>"
  overload: System.Workflow.ComponentModel.ThrowActivity.Fault*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.FaultProperty
  id: FaultProperty
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: FaultProperty
  nameWithType: ThrowActivity.FaultProperty
  fullName: System.Workflow.ComponentModel.ThrowActivity.FaultProperty
  type: Field
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "<xref href=&quot;System.Workflow.ComponentModel.DependencyProperty&quot;> </xref> 나타내는 <xref:System.Workflow.ComponentModel.ThrowActivity.Fault*>이 인스턴스에 대 한 속성.</xref:System.Workflow.ComponentModel.ThrowActivity.Fault*>"
  remarks: '[!INCLUDE[DependencyPropertyRemark](~/add/includes/dependencypropertyremark-md.md)]'
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty FaultProperty;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.FaultType
  id: FaultType
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: FaultType
  nameWithType: ThrowActivity.FaultType
  fullName: System.Workflow.ComponentModel.ThrowActivity.FaultType
  type: Property
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "에 의해 throw 해야 예외의 유형을 가져오거나 설정 합니다.는 <xref href=&quot;System.Workflow.ComponentModel.ThrowActivity&quot;> </xref>합니다."
  remarks: ''
  example:
  - "The following code shows the usage of a single throw activity within a workflow to implement exception handling. This example shows setting the FaultType to `null`. This code example is part of the Throw SDK sample and is from the ThrowWorkflow.cs file. For more information, see [Using Throw](http://msdn.microsoft.com/en-us/aa5b9546-ec95-4e43-8337-20e26f8d71cc).  \n  \n [!code-cs[WF_Samples#178](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#178)]\n [!code-vb[WF_Samples#178](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#178)]"
  syntax:
    content: public Type FaultType { get; set; }
    return:
      type: System.Type
      description: "이 인스턴스와 연결 된 오류를 나타내는 형식입니다."
  overload: System.Workflow.ComponentModel.ThrowActivity.FaultType*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.FaultTypeProperty
  id: FaultTypeProperty
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: FaultTypeProperty
  nameWithType: ThrowActivity.FaultTypeProperty
  fullName: System.Workflow.ComponentModel.ThrowActivity.FaultTypeProperty
  type: Field
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "<xref href=&quot;System.Workflow.ComponentModel.DependencyProperty&quot;> </xref> 나타내는 <xref:System.Workflow.ComponentModel.ThrowActivity.FaultType*>이 인스턴스에 대 한 속성.</xref:System.Workflow.ComponentModel.ThrowActivity.FaultType*>"
  remarks: "여 간접적으로 액세스 하지 각 public 속성 및 이러한 유형의 이벤트를 해당 종속성 속성을 확인 합니다. 이 종속성 속성은 라는 공용 정적 필드 `XProperty` 또는 `XEvent`여기서 X는 해당 하는 속성입니다.       [!INCLUDE[DependencyPropertyRemark](~/add/includes/dependencypropertyremark-md.md)]"
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty FaultTypeProperty;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.Initialize(System.IServiceProvider)
  id: Initialize(System.IServiceProvider)
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: Initialize(IServiceProvider)
  nameWithType: ThrowActivity.Initialize(IServiceProvider)
  fullName: System.Workflow.ComponentModel.ThrowActivity.Initialize(IServiceProvider)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  syntax:
    content: protected override void Initialize (IServiceProvider provider);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "추가할 수 있습니다."
  overload: System.Workflow.ComponentModel.ThrowActivity.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType(System.Type,System.Boolean)
  id: System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType(System.Type,System.Boolean)
  isEii: true
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type,Boolean)
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type,Boolean)
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type,Boolean)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "나타내는 값을 반환 하는지 여부를 지정 된 <xref:System.Type>필터링 할 수 있습니다.</xref:System.Type>"
  syntax:
    content: bool ITypeFilterProvider.CanFilterType (Type type, bool throwOnError);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>필터링에 대 한 확인 하려면</xref:System.Type>"
    - id: throwOnError
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>예외를 throw 하는 경우는 <xref:System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType*>처리 되 고, 그러지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType*>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 지정된 된 형식을 필터링 할 수 있습니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription
  id: System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription
  isEii: true
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
  type: Property
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "클래스 브라우저 대화 상자에 표시할 필터 설명을 가져옵니다."
  syntax:
    content: string System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription { get; }
    return:
      type: System.String
      description: "A <xref:System.String>필터에 대 한 설명을 포함 하는.</xref:System.String>"
  overload: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)
  id: System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)
  isEii: true
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider,String)
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider,String)
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider,String)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "지정된 된 속성에 대 한 액세스 형식을 반환합니다."
  remarks: "속성은 서로 올바르게 바인딩되어 있는지 검사 하기 위해 컴파일 시 사용 합니다. 이 인터페이스가 없는이 정보는 속성 getter/setter에서 직접 유추 됩니다."
  syntax:
    content: System.Workflow.ComponentModel.Compiler.AccessTypes IDynamicPropertyTypeProvider.GetAccessType (IServiceProvider serviceProvider, string propertyName);
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
      description: "구현 하는 개체 <xref:System.IServiceProvider>필요할 경우 디자인 타임 서비스에 대 한 액세스를 제공할 수 있습니다.</xref:System.IServiceProvider>"
    - id: propertyName
      type: System.String
      description: "속성의 이름입니다."
    return:
      type: System.Workflow.ComponentModel.Compiler.AccessTypes
      description: "<xref href=&quot;System.Workflow.ComponentModel.Compiler.AccessTypes&quot;> </xref> 속성의 액세스 수준을 나타내는 열거형 값입니다."
  overload: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)
  id: System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)
  isEii: true
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider,String)
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider,String)
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider,String)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "반환 된 <xref:System.Type>지정된 된 속성의.</xref:System.Type>"
  remarks: "속성은 서로 올바르게 바인딩되어 있는지 검사 하기 위해 컴파일 시 사용 합니다."
  syntax:
    content: Type IDynamicPropertyTypeProvider.GetPropertyType (IServiceProvider serviceProvider, string propertyName);
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
      description: "구현 하는 개체 <xref:System.IServiceProvider>필요할 경우 디자인 타임 서비스에 대 한 액세스를 제공할 수 있습니다.</xref:System.IServiceProvider>"
    - id: propertyName
      type: System.String
      description: "속성의 이름입니다."
    return:
      type: System.Type
      description: "<xref:System.Type>이름이로 전달 되는 속성에 대 한는 <code> propertyName  </code>매개 변수.</xref:System.Type>"
  overload: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Workflow.ComponentModel.Activity
  isExternal: false
  name: System.Workflow.ComponentModel.Activity
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Workflow.ComponentModel.ThrowActivity.#ctor
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: ThrowActivity()
  nameWithType: ThrowActivity.ThrowActivity()
  fullName: System.Workflow.ComponentModel.ThrowActivity.ThrowActivity()
- uid: System.Workflow.ComponentModel.ThrowActivity.#ctor(System.String)
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: ThrowActivity(String)
  nameWithType: ThrowActivity.ThrowActivity(String)
  fullName: System.Workflow.ComponentModel.ThrowActivity.ThrowActivity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.ComponentModel.ThrowActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: Execute(ActivityExecutionContext)
  nameWithType: ThrowActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.ThrowActivity.Execute(ActivityExecutionContext)
- uid: System.Workflow.ComponentModel.ActivityExecutionStatus
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionStatus
  nameWithType: ActivityExecutionStatus
  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus
- uid: System.Workflow.ComponentModel.ActivityExecutionContext
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionContext
  nameWithType: ActivityExecutionContext
  fullName: System.Workflow.ComponentModel.ActivityExecutionContext
- uid: System.Workflow.ComponentModel.ThrowActivity.Fault
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: Fault
  nameWithType: ThrowActivity.Fault
  fullName: System.Workflow.ComponentModel.ThrowActivity.Fault
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Workflow.ComponentModel.ThrowActivity.FaultProperty
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: FaultProperty
  nameWithType: ThrowActivity.FaultProperty
  fullName: System.Workflow.ComponentModel.ThrowActivity.FaultProperty
- uid: System.Workflow.ComponentModel.DependencyProperty
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Workflow.ComponentModel.DependencyProperty
- uid: System.Workflow.ComponentModel.ThrowActivity.FaultType
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: FaultType
  nameWithType: ThrowActivity.FaultType
  fullName: System.Workflow.ComponentModel.ThrowActivity.FaultType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Workflow.ComponentModel.ThrowActivity.FaultTypeProperty
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: FaultTypeProperty
  nameWithType: ThrowActivity.FaultTypeProperty
  fullName: System.Workflow.ComponentModel.ThrowActivity.FaultTypeProperty
- uid: System.Workflow.ComponentModel.ThrowActivity.Initialize(System.IServiceProvider)
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: Initialize(IServiceProvider)
  nameWithType: ThrowActivity.Initialize(IServiceProvider)
  fullName: System.Workflow.ComponentModel.ThrowActivity.Initialize(IServiceProvider)
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType(System.Type,System.Boolean)
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type,Boolean)
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type,Boolean)
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider,String)
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider,String)
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider,String)
- uid: System.Workflow.ComponentModel.Compiler.AccessTypes
  parent: System.Workflow.ComponentModel.Compiler
  isExternal: false
  name: AccessTypes
  nameWithType: AccessTypes
  fullName: System.Workflow.ComponentModel.Compiler.AccessTypes
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider,String)
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider,String)
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider,String)
- uid: System.Workflow.ComponentModel.ThrowActivity.#ctor*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: ThrowActivity
  nameWithType: ThrowActivity.ThrowActivity
- uid: System.Workflow.ComponentModel.ThrowActivity.Execute*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: Execute
  nameWithType: ThrowActivity.Execute
- uid: System.Workflow.ComponentModel.ThrowActivity.Fault*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: Fault
  nameWithType: ThrowActivity.Fault
- uid: System.Workflow.ComponentModel.ThrowActivity.FaultType*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: FaultType
  nameWithType: ThrowActivity.FaultType
- uid: System.Workflow.ComponentModel.ThrowActivity.Initialize*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: Initialize
  nameWithType: ThrowActivity.Initialize
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType
