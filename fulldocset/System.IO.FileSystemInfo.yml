### YamlMime:ManagedReference
items:
- uid: System.IO.FileSystemInfo
  id: FileSystemInfo
  children:
  - System.IO.FileSystemInfo.#ctor
  - System.IO.FileSystemInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.IO.FileSystemInfo.Attributes
  - System.IO.FileSystemInfo.CreationTime
  - System.IO.FileSystemInfo.CreationTimeUtc
  - System.IO.FileSystemInfo.Delete
  - System.IO.FileSystemInfo.Exists
  - System.IO.FileSystemInfo.Extension
  - System.IO.FileSystemInfo.FullName
  - System.IO.FileSystemInfo.FullPath
  - System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.IO.FileSystemInfo.LastAccessTime
  - System.IO.FileSystemInfo.LastAccessTimeUtc
  - System.IO.FileSystemInfo.LastWriteTime
  - System.IO.FileSystemInfo.LastWriteTimeUtc
  - System.IO.FileSystemInfo.Name
  - System.IO.FileSystemInfo.OriginalPath
  - System.IO.FileSystemInfo.Refresh
  langs:
  - csharp
  name: FileSystemInfo
  nameWithType: FileSystemInfo
  fullName: System.IO.FileSystemInfo
  type: Class
  summary: "모두에 대 한 기본 클래스를 제공 <xref href=&quot;System.IO.FileInfo&quot;> </xref> 및 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체입니다."
  remarks: "The FileSystemInfo class contains methods that are common to file and directory manipulation. A FileSystemInfo object can represent either a file or a directory, thus serving as the basis for <xref:System.IO.FileInfo> or <xref:System.IO.DirectoryInfo> objects. Use this base class when parsing a lot of files and directories.  \n  \n A derived class can inherit from FileSystemInfo only if the derived class has the AllAccess permission from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.  \n  \n In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \n  \n-   \"c:\\\\\\MyDir\\\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.  \n  \n-   \"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.  \n  \n-   \"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.  \n  \n-   \"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows how to loop through all the files and directories, querying some information about each entry.  \n  \n [!code-cs[FileSystemInfo#1](~/add/codesnippet/csharp/t-system.io.filesysteminfo_1.cs)]\n [!code-cpp[FileSystemInfo#1](~/add/codesnippet/cpp/t-system.io.filesysteminfo_1.cpp)]\n [!code-vb[FileSystemInfo#1](~/add/codesnippet/visualbasic/t-system.io.filesysteminfo_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class FileSystemInfo : MarshalByRefObject, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.IO.FileSystemInfo.#ctor
  id: '#ctor'
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: FileSystemInfo()
  nameWithType: FileSystemInfo.FileSystemInfo()
  fullName: System.IO.FileSystemInfo.FileSystemInfo()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IO.FileSystemInfo&quot;> </xref> 클래스입니다."
  remarks: "공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: protected FileSystemInfo ();
    parameters: []
  overload: System.IO.FileSystemInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: FileSystemInfo(SerializationInfo,StreamingContext)
  nameWithType: FileSystemInfo.FileSystemInfo(SerializationInfo,StreamingContext)
  fullName: System.IO.FileSystemInfo.FileSystemInfo(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IO.FileSystemInfo&quot;> </xref> serialize 된 데이터 클래스입니다."
  remarks: "공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: protected FileSystemInfo (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> throw 되는 예외에 대 한 직렬화 된 개체 데이터를 보유 하 합니다."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>소스 또는 대상에 대 한 컨텍스트 정보를 포함 하는.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.IO.FileSystemInfo.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "지정 된 <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> null입니다."
  platform:
  - net462
- uid: System.IO.FileSystemInfo.Attributes
  id: Attributes
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: Attributes
  nameWithType: FileSystemInfo.Attributes
  fullName: System.IO.FileSystemInfo.Attributes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "현재 파일이 나 디렉터리에 대 한 특성을 가져오거나 설정 합니다."
  remarks: "특성 속성의 값은 미리 캐시 하는 경우의 현재 인스턴스는 <xref:System.IO.FileSystemInfo>개체는 다음 중 하나에서 반환 된 <xref:System.IO.DirectoryInfo>메서드:- <xref:System.IO.DirectoryInfo.GetDirectories%2A>- <xref:System.IO.DirectoryInfo.GetFiles%2A>- <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>- <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>- <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>- <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>최신 값을 가져오려면 호출는 <xref:System.IO.FileSystemInfo.Refresh%2A>메서드.</xref:System.IO.FileSystemInfo.Refresh%2A> </xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> </xref:System.IO.DirectoryInfo.EnumerateFiles%2A> </xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> </xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> </xref:System.IO.DirectoryInfo.GetFiles%2A> </xref:System.IO.DirectoryInfo.GetDirectories%2A> </xref:System.IO.DirectoryInfo> </xref:System.IO.FileSystemInfo>       이 속성의 값은 압축 된 보관 파일, 디렉터리, 숨김, 오프 라인, 읽기 전용, 시스템 및 임시 파일 특성 플래그의 조합입니다.       비트 OR 연산자를 사용 하 여이 값을 설정 하면 (`|` C# 또는 `Or` Visual basic에서) 둘 이상의 값을 적용 합니다. 특성 속성에서 기존 값을 유지 하려면 할당에서 Attributes 속성의 값을 포함 합니다. 예를 들면 다음과 같습니다.`exampleFile.Attributes = exampleFile.Attributes | FileAttributes.ReadOnly;`"
  example:
  - "The following example demonstrates the Attributes property. This code example is part of a larger example provided for the <xref:System.IO.FileSystemInfo> class.  \n  \n [!code-cs[FileSystemInfo#2](~/add/codesnippet/csharp/p-system.io.filesystemin_3_1.cs)]\n [!code-cpp[FileSystemInfo#2](~/add/codesnippet/cpp/p-system.io.filesystemin_3_1.cpp)]\n [!code-vb[FileSystemInfo#2](~/add/codesnippet/visualbasic/p-system.io.filesystemin_3_1.vb)]"
  syntax:
    content: public System.IO.FileAttributes Attributes { get; set; }
    return:
      type: System.IO.FileAttributes
      description: "<xref href=&quot;System.IO.FileAttributes&quot;></xref>현재 <xref href=&quot;System.IO.FileSystemInfo&quot;> </xref>합니다."
  overload: System.IO.FileSystemInfo.Attributes*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "지정 된 파일이 존재 하지 않습니다."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "지정 된 경로가 잘못 되었습니다. 예를 들어, 매핑되지 않은 드라이브에입니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "호출자에 게는 잘못 된 파일 특성을 설정 하려고 합니다.       -또는-사용자 특성 값을 설정 하려고 시도 하지만 쓰기 권한이 없습니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<xref:System.IO.FileSystemInfo.Refresh*>데이터를 초기화할 수 없습니다.</xref:System.IO.FileSystemInfo.Refresh*>"
  platform:
  - net462
- uid: System.IO.FileSystemInfo.CreationTime
  id: CreationTime
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: CreationTime
  nameWithType: FileSystemInfo.CreationTime
  fullName: System.IO.FileSystemInfo.CreationTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "현재 파일이 나 디렉터리의 생성 시간을 가져오거나 설정 합니다."
  remarks: "**참고** 운영 체제에 의해 값을 가진 지속적으로 업데이트 되지 않을 수 있습니다는 네이티브 함수를 사용 하기 때문에이 메서드가 정확 하지 않은 값을 반환할 수 있습니다.       경우 CreationTime 속성의 값은 미리 캐시의 현재 인스턴스는 <xref:System.IO.FileSystemInfo>개체는 다음 중 하나에서 반환 된 <xref:System.IO.DirectoryInfo>메서드:- <xref:System.IO.DirectoryInfo.GetDirectories%2A>- <xref:System.IO.DirectoryInfo.GetFiles%2A>- <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>- <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>- <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>- <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>최신 값을 가져오려면 호출는 <xref:System.IO.FileSystemInfo.Refresh%2A>메서드.</xref:System.IO.FileSystemInfo.Refresh%2A> </xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> </xref:System.IO.DirectoryInfo.EnumerateFiles%2A> </xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> </xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> </xref:System.IO.DirectoryInfo.GetFiles%2A> </xref:System.IO.DirectoryInfo.GetDirectories%2A> </xref:System.IO.DirectoryInfo> </xref:System.IO.FileSystemInfo>       <xref:System.IO.FileSystemInfo>개체가 존재 하지 않는이 속성은 반환 12시 자정 서 기 1601 년 1 월 1 일</xref:System.IO.FileSystemInfo> 에서 파일이 설명 하는 경우 (협정 세계시) Utc (협정 세계시)를 현지 시간으로 조정 합니다.       NTFS로 포맷 된 드라이브에 파일 메타 정보, 같은 파일을 만든 시간, 짧은 시간 동안 캐시할 수 있습니다. 이 프로세스는 파일 터널링 이라고 합니다. 결과적으로, 덮어쓰기 또는 기존 파일을 대체 하는 경우 파일의 생성 시간을 명시적으로 설정 해야 할 수도 있습니다.       이 속성 값은 `null` 경우 포함 하는 파일 시스템의 <xref:System.IO.FileSystemInfo>개체가이 정보를 지원 하지 않습니다.</xref:System.IO.FileSystemInfo>"
  example:
  - "The following example demonstrates the CreationTime property. This code example is part of a larger example provided for the <xref:System.IO.FileSystemInfo> class.  \n  \n [!code-cs[FileSystemInfo#2](~/add/codesnippet/csharp/p-system.io.filesystemin_4_1.cs)]\n [!code-cpp[FileSystemInfo#2](~/add/codesnippet/cpp/p-system.io.filesystemin_4_1.cpp)]\n [!code-vb[FileSystemInfo#2](~/add/codesnippet/visualbasic/p-system.io.filesystemin_4_1.vb)]"
  syntax:
    content: public DateTime CreationTime { get; set; }
    return:
      type: System.DateTime
      description: "만든 날짜와 시간을 현재 <xref href=&quot;System.IO.FileSystemInfo&quot;> </xref> 개체입니다."
  overload: System.IO.FileSystemInfo.CreationTime*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<xref:System.IO.FileSystemInfo.Refresh*>데이터를 초기화할 수 없습니다.</xref:System.IO.FileSystemInfo.Refresh*>"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "지정 된 경로가 잘못 되었습니다. 예를 들어, 매핑되지 않은 드라이브에입니다."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "현재 운영 체제가 지원 되지 않은 Windows NT 이상입니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "호출자에 게는 잘못 된 만든 시간을 설정 하려고 합니다."
  platform:
  - net462
- uid: System.IO.FileSystemInfo.CreationTimeUtc
  id: CreationTimeUtc
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: CreationTimeUtc
  nameWithType: FileSystemInfo.CreationTimeUtc
  fullName: System.IO.FileSystemInfo.CreationTimeUtc
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "현재 파일 또는 디렉터리의 생성 시간 (UTC) 협정 세계 표준시에서를 가져오거나 설정 합니다."
  remarks: "**참고** 운영 체제에 의해 값을 가진 지속적으로 업데이트 되지 않을 수 있습니다는 네이티브 함수를 사용 하기 때문에이 메서드가 정확 하지 않은 값을 반환할 수 있습니다.       경우 CreationTimeUtc 속성의 값은 미리 캐시의 현재 인스턴스는 <xref:System.IO.FileSystemInfo>개체는 다음 중 하나에서 반환 된 <xref:System.IO.DirectoryInfo>메서드:- <xref:System.IO.DirectoryInfo.GetDirectories%2A>- <xref:System.IO.DirectoryInfo.GetFiles%2A>- <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>- <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>- <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>- <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>최신 값을 가져오려면 호출는 <xref:System.IO.FileSystemInfo.Refresh%2A>메서드.</xref:System.IO.FileSystemInfo.Refresh%2A> </xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> </xref:System.IO.DirectoryInfo.EnumerateFiles%2A> </xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> </xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> </xref:System.IO.DirectoryInfo.GetFiles%2A> </xref:System.IO.DirectoryInfo.GetDirectories%2A> </xref:System.IO.DirectoryInfo> </xref:System.IO.FileSystemInfo>       <xref:System.IO.FileSystemInfo>개체가 존재 하지 않는이 속성은 반환 12시 자정 서 기 1601 년 1 월 1 일</xref:System.IO.FileSystemInfo> 에서 파일이 설명 하는 경우 (협정 세계시) Utc (협정 세계시)입니다.       NTFS로 포맷 된 드라이브에 파일 메타 정보, 같은 파일을 만든 시간, 짧은 시간 동안 캐시할 수 있습니다. 이 프로세스는 파일 터널링 이라고 합니다. 결과적으로, 덮어쓰기 또는 기존 파일을 대체 하는 경우 파일의 생성 시간을 명시적으로 설정 해야 할 수도 있습니다.       이 속성 값은 `null` 경우 포함 하는 파일 시스템의 <xref:System.IO.FileSystemInfo>개체가이 정보를 지원 하지 않습니다.</xref:System.IO.FileSystemInfo>"
  syntax:
    content: public DateTime CreationTimeUtc { get; set; }
    return:
      type: System.DateTime
      description: "만든 날짜와 현재 UTC 형식으로 시간 <xref href=&quot;System.IO.FileSystemInfo&quot;> </xref> 개체입니다."
  overload: System.IO.FileSystemInfo.CreationTimeUtc*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<xref:System.IO.FileSystemInfo.Refresh*>데이터를 초기화할 수 없습니다.</xref:System.IO.FileSystemInfo.Refresh*>"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "지정 된 경로가 잘못 되었습니다. 예를 들어, 매핑되지 않은 드라이브에입니다."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "현재 운영 체제가 지원 되지 않은 Windows NT 이상입니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "호출자에 게는 잘못 된 액세스 시간을 설정 하려고 합니다."
  platform:
  - net462
- uid: System.IO.FileSystemInfo.Delete
  id: Delete
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: Delete()
  nameWithType: FileSystemInfo.Delete()
  fullName: System.IO.FileSystemInfo.Delete()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "파일 또는 디렉터리를 삭제합니다."
  syntax:
    content: public abstract void Delete ();
    parameters: []
  overload: System.IO.FileSystemInfo.Delete*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "지정 된 경로가 잘못 되었습니다. 예를 들어, 매핑되지 않은 드라이브에입니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: '파일 또는 디렉터리에 대해 열린 핸들이 있고 운영 체제가 Windows XP 또는 이전 버전입니다. 이 열린 핸들은 디렉터리 및 파일을 열거 하면 발생할 수 있습니다. 자세한 내용은 참조 [하는 방법: 디렉터리 및 파일 열거](~/add/includes/ajax-current-ext-md.md)합니다.'
  platform:
  - net462
- uid: System.IO.FileSystemInfo.Exists
  id: Exists
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: Exists
  nameWithType: FileSystemInfo.Exists
  fullName: System.IO.FileSystemInfo.Exists
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "파일이 나 디렉터리가 있는지를 나타내는 값을 가져옵니다."
  remarks: "공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public abstract bool Exists { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>파일 또는 디렉터리에 있으면; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IO.FileSystemInfo.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemInfo.Extension
  id: Extension
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: Extension
  nameWithType: FileSystemInfo.Extension
  fullName: System.IO.FileSystemInfo.Extension
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "파일의 확장명 부분을 나타내는 문자열을 가져옵니다."
  remarks: "The `Extension` property returns the <xref:System.IO.FileSystemInfo> extension, including the period (.). For example, for a file c:\\NewFile.txt, this property returns \".txt\".  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/add/includes/ajax-current-ext-md.md)|  \n|Write to a text file.|[How to: Write Text to a File](../Topic/How%20to:%20Write%20Text%20to%20a%20File.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/add/includes/ajax-current-ext-md.md)|  \n|Retrieve the fully qualified path of a file.|<xref:System.IO.Path.GetFullPath%2A>|  \n|Retrieve only the file name a path.|<xref:System.IO.Path.GetFileNameWithoutExtension%2A>|  \n|Retrieve only the directory name from a path.|<xref:System.IO.Path.GetDirectoryName%2A>|  \n|Change the extension of a file.|<xref:System.IO.Path.ChangeExtension%2A>|"
  syntax:
    content: public string Extension { get; }
    return:
      type: System.String
      description: "포함 하는 문자열은 <xref href=&quot;System.IO.FileSystemInfo&quot;> </xref> 확장 합니다."
  overload: System.IO.FileSystemInfo.Extension*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemInfo.FullName
  id: FullName
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: FullName
  nameWithType: FileSystemInfo.FullName
  fullName: System.IO.FileSystemInfo.FullName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "디렉터리 또는 파일의 전체 경로 가져옵니다."
  remarks: "For example, for a file c:\\NewFile.txt, this property returns \"c:\\NewFile.txt\".  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates the FullName property. This code example is part of a larger example provided for the <xref:System.IO.FileSystemInfo> class.  \n  \n [!code-cs[FileSystemInfo#2](~/add/codesnippet/csharp/p-system.io.filesystemin_0_1.cs)]\n [!code-cpp[FileSystemInfo#2](~/add/codesnippet/cpp/p-system.io.filesystemin_0_1.cpp)]\n [!code-vb[FileSystemInfo#2](~/add/codesnippet/visualbasic/p-system.io.filesystemin_0_1.vb)]"
  syntax:
    content: public virtual string FullName { get; }
    return:
      type: System.String
      description: "전체 경로 포함 하는 문자열입니다."
  overload: System.IO.FileSystemInfo.FullName*
  exceptions:
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "정규화 된 경로 및 파일 이름은 260 자 이상입니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.FileSystemInfo.FullPath
  id: FullPath
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: FullPath
  nameWithType: FileSystemInfo.FullPath
  fullName: System.IO.FileSystemInfo.FullPath
  type: Field
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "디렉터리 또는 파일의 정규화 된 경로 나타냅니다."
  syntax:
    content: protected string FullPath;
    return:
      type: System.String
      description: "추가할 수 있습니다."
  exceptions:
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "정규화 된 경로가 260 자 이상입니다."
  platform:
  - net462
- uid: System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: FileSystemInfo.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.IO.FileSystemInfo.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "설정의 <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> 개체 파일 이름 및 추가 예외 정보를 사용 합니다."
  remarks: "공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> throw 되는 예외에 대 한 직렬화 된 개체 데이터를 보유 하 합니다."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>소스 또는 대상에 대 한 컨텍스트 정보를 포함 하는.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.IO.FileSystemInfo.GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemInfo.LastAccessTime
  id: LastAccessTime
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: LastAccessTime
  nameWithType: FileSystemInfo.LastAccessTime
  fullName: System.IO.FileSystemInfo.LastAccessTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "현재 파일 또는 디렉터리를 마지막 액세스 시간을 가져오거나 설정 합니다."
  remarks: "**참고** 운영 체제에 의해 값을 가진 지속적으로 업데이트 되지 않을 수 있습니다는 네이티브 함수를 사용 하기 때문에이 메서드가 정확 하지 않은 값을 반환할 수 있습니다.       <xref:System.IO.FileSystemInfo>개체가 존재 하지 않는이 속성은 반환 12시 자정 서 기 1601 년 1 월 1 일</xref:System.IO.FileSystemInfo> 에서 파일이 설명 하는 경우 (협정 세계시) Utc (협정 세계시)를 현지 시간으로 조정 합니다.       값은 <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>속성은 미리 캐시 하는 경우의 현재 인스턴스는 <xref:System.IO.FileSystemInfo>다음 중 하나에서 개체를 반환 했습니다 <xref:System.IO.DirectoryInfo>메서드:- <xref:System.IO.DirectoryInfo.GetDirectories%2A>- <xref:System.IO.DirectoryInfo.GetFiles%2A>- <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>- <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>- <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>- <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>최신 값을 가져오려면 호출는 <xref:System.IO.FileSystemInfo.Refresh%2A>메서드.</xref:System.IO.FileSystemInfo.Refresh%2A> </xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> </xref:System.IO.DirectoryInfo.EnumerateFiles%2A> </xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> </xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> </xref:System.IO.DirectoryInfo.GetFiles%2A> </xref:System.IO.DirectoryInfo.GetDirectories%2A> </xref:System.IO.DirectoryInfo> </xref:System.IO.FileSystemInfo> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>"
  example:
  - "The following code example demonstrates the updating of the LastAccessTime property through a \"touch\" operation. In this example, the file is \"touched\", updating the <xref:System.IO.FileSystemInfo.CreationTime%2A>, LastAccessTime and <xref:System.IO.FileSystemInfo.LastWriteTime%2A> properties to the current date and time.  \n  \n [!code-cs[System.IO.FileSystemInfo_touch#00](~/add/codesnippet/csharp/p-system.io.filesystemin_2_1.cs)]\n [!code-vb[System.IO.FileSystemInfo_touch#00](~/add/codesnippet/visualbasic/p-system.io.filesystemin_2_1.vb)]"
  syntax:
    content: public DateTime LastAccessTime { get; set; }
    return:
      type: System.DateTime
      description: "현재 파일이 나 디렉터리를 마지막으로 액세스 한 시간입니다."
  overload: System.IO.FileSystemInfo.LastAccessTime*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<xref:System.IO.FileSystemInfo.Refresh*>데이터를 초기화할 수 없습니다.</xref:System.IO.FileSystemInfo.Refresh*>"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "현재 운영 체제가 지원 되지 않은 Windows NT 이상입니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "호출자에 게 잘못 된 액세스 시간을 설정 하려고 합니다."
  platform:
  - net462
- uid: System.IO.FileSystemInfo.LastAccessTimeUtc
  id: LastAccessTimeUtc
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: LastAccessTimeUtc
  nameWithType: FileSystemInfo.LastAccessTimeUtc
  fullName: System.IO.FileSystemInfo.LastAccessTimeUtc
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "시간을 utc (협정 세계시), 된 현재 파일이 나 디렉터리를 마지막으로 액세스를 가져오거나 설정 합니다."
  remarks: "**참고** 운영 체제에 의해 값을 가진 지속적으로 업데이트 되지 않을 수 있습니다는 네이티브 함수를 사용 하기 때문에이 메서드가 정확 하지 않은 값을 반환할 수 있습니다.       경우 LastAccessTimeUtc 속성의 값은 미리 캐시의 현재 인스턴스는 <xref:System.IO.FileSystemInfo>개체는 다음 중 하나에서 반환 된 <xref:System.IO.DirectoryInfo>메서드:- <xref:System.IO.DirectoryInfo.GetDirectories%2A>- <xref:System.IO.DirectoryInfo.GetFiles%2A>- <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>- <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>- <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>- <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>최신 값을 가져오려면 호출는 <xref:System.IO.FileSystemInfo.Refresh%2A>메서드.</xref:System.IO.FileSystemInfo.Refresh%2A> </xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> </xref:System.IO.DirectoryInfo.EnumerateFiles%2A> </xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> </xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> </xref:System.IO.DirectoryInfo.GetFiles%2A> </xref:System.IO.DirectoryInfo.GetDirectories%2A> </xref:System.IO.DirectoryInfo> </xref:System.IO.FileSystemInfo>       <xref:System.IO.FileSystemInfo>개체가 존재 하지 않는이 속성은 반환 12시 자정 서 기 1601 년 1 월 1 일</xref:System.IO.FileSystemInfo> 에서 파일이 설명 하는 경우 (협정 세계시) Utc (협정 세계시)입니다.       공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public DateTime LastAccessTimeUtc { get; set; }
    return:
      type: System.DateTime
      description: "UTC 시간을 현재 파일이 나 디렉터리에 마지막으로 액세스 합니다."
  overload: System.IO.FileSystemInfo.LastAccessTimeUtc*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<xref:System.IO.FileSystemInfo.Refresh*>데이터를 초기화할 수 없습니다.</xref:System.IO.FileSystemInfo.Refresh*>"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "현재 운영 체제가 지원 되지 않은 Windows NT 이상입니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "호출자에 게는 잘못 된 액세스 시간을 설정 하려고 합니다."
  platform:
  - net462
- uid: System.IO.FileSystemInfo.LastWriteTime
  id: LastWriteTime
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: LastWriteTime
  nameWithType: FileSystemInfo.LastWriteTime
  fullName: System.IO.FileSystemInfo.LastWriteTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "때 현재 파일 또는 디렉터리를 마지막으로 쓴 시간을 가져오거나 설정 합니다."
  remarks: "**참고** 운영 체제에 의해 값을 가진 지속적으로 업데이트 되지 않을 수 있습니다는 네이티브 함수를 사용 하기 때문에이 메서드가 정확 하지 않은 값을 반환할 수 있습니다.       LastWriteTime 속성의 값은 미리 캐시 하는 경우의 현재 인스턴스는 <xref:System.IO.FileSystemInfo>개체는 다음 중 하나에서 반환 된 <xref:System.IO.DirectoryInfo>메서드:- <xref:System.IO.DirectoryInfo.GetDirectories%2A>- <xref:System.IO.DirectoryInfo.GetFiles%2A>- <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>- <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>- <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>- <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>최신 값을 가져오려면 호출는 <xref:System.IO.FileSystemInfo.Refresh%2A>메서드.</xref:System.IO.FileSystemInfo.Refresh%2A> </xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> </xref:System.IO.DirectoryInfo.EnumerateFiles%2A> </xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> </xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> </xref:System.IO.DirectoryInfo.GetFiles%2A> </xref:System.IO.DirectoryInfo.GetDirectories%2A> </xref:System.IO.DirectoryInfo> </xref:System.IO.FileSystemInfo>       <xref:System.IO.FileSystemInfo>개체가 존재 하지 않는이 속성은 반환 12시 자정 서 기 1601 년 1 월 1 일</xref:System.IO.FileSystemInfo> 에서 파일이 설명 하는 경우 (협정 세계시) Utc (협정 세계시)를 현지 시간으로 조정 합니다.       이 속성 값은 `null` 파일 시스템 파일을 포함 하는이 정보를 지원 하지 않는 경우."
  example:
  - "The following code example demonstrates the updating of the LastWriteTime property through a \"touch\" operation. In this example, the file is \"touched\", updating the <xref:System.IO.FileSystemInfo.CreationTime%2A>, <xref:System.IO.FileSystemInfo.LastAccessTime%2A> and LastWriteTime properties to the current date and time.  \n  \n [!code-cs[System.IO.FileSystemInfo_touch#00](~/add/codesnippet/csharp/p-system.io.filesystemin_1_1.cs)]\n [!code-vb[System.IO.FileSystemInfo_touch#00](~/add/codesnippet/visualbasic/p-system.io.filesystemin_1_1.vb)]"
  syntax:
    content: public DateTime LastWriteTime { get; set; }
    return:
      type: System.DateTime
      description: "현재 파일에 마지막으로 쓴 시간입니다."
  overload: System.IO.FileSystemInfo.LastWriteTime*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<xref:System.IO.FileSystemInfo.Refresh*>데이터를 초기화할 수 없습니다.</xref:System.IO.FileSystemInfo.Refresh*>"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "현재 운영 체제가 지원 되지 않은 Windows NT 이상입니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "호출자에 게는 잘못 된 쓰기 시간을 설정 하려고 합니다."
  platform:
  - net462
- uid: System.IO.FileSystemInfo.LastWriteTimeUtc
  id: LastWriteTimeUtc
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: LastWriteTimeUtc
  nameWithType: FileSystemInfo.LastWriteTimeUtc
  fullName: System.IO.FileSystemInfo.LastWriteTimeUtc
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "현재 파일이 나 디렉터리에 마지막으로 쓴 때 세계시 (UTC) 시간을 설정 하거나 가져옵니다."
  remarks: "**참고** 운영 체제에 의해 값을 가진 지속적으로 업데이트 되지 않을 수 있습니다는 네이티브 함수를 사용 하기 때문에이 메서드가 정확 하지 않은 값을 반환할 수 있습니다.       경우 LastWriteTimeUtc 속성의 값은 미리 캐시의 현재 인스턴스는 <xref:System.IO.FileSystemInfo>개체는 다음 중 하나에서 반환 된 <xref:System.IO.DirectoryInfo>메서드:- <xref:System.IO.DirectoryInfo.GetDirectories%2A>- <xref:System.IO.DirectoryInfo.GetFiles%2A>- <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>- <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>- <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>- <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>최신 값을 가져오려면 호출는 <xref:System.IO.FileSystemInfo.Refresh%2A>메서드.</xref:System.IO.FileSystemInfo.Refresh%2A> </xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> </xref:System.IO.DirectoryInfo.EnumerateFiles%2A> </xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> </xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> </xref:System.IO.DirectoryInfo.GetFiles%2A> </xref:System.IO.DirectoryInfo.GetDirectories%2A> </xref:System.IO.DirectoryInfo> </xref:System.IO.FileSystemInfo>       <xref:System.IO.FileSystemInfo>개체가 존재 하지 않는이 속성은 반환 12시 자정 서 기 1601 년 1 월 1 일</xref:System.IO.FileSystemInfo> 에서 파일이 설명 하는 경우 (협정 세계시) Utc (협정 세계시)입니다.       이 속성 값은 `null` 파일 시스템 파일을 포함 하는이 정보를 지원 하지 않는 경우."
  syntax:
    content: public DateTime LastWriteTimeUtc { get; set; }
    return:
      type: System.DateTime
      description: "현재 파일에 마지막으로 쓴 UTC 시간입니다."
  overload: System.IO.FileSystemInfo.LastWriteTimeUtc*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<xref:System.IO.FileSystemInfo.Refresh*>데이터를 초기화할 수 없습니다.</xref:System.IO.FileSystemInfo.Refresh*>"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "현재 운영 체제가 지원 되지 않은 Windows NT 이상입니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "호출자에 게는 잘못 된 쓰기 시간을 설정 하려고 합니다."
  platform:
  - net462
- uid: System.IO.FileSystemInfo.Name
  id: Name
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: Name
  nameWithType: FileSystemInfo.Name
  fullName: System.IO.FileSystemInfo.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "파일에 대 한 파일의 이름을 가져옵니다. 디렉터리의 경우 계층에 있는 경우 계층 구조에서 마지막 디렉터리의 이름을 가져옵니다. 그렇지 않은 경우는 <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> 속성 디렉터리의 이름을 가져옵니다."
  remarks: "For a directory, `Name` returns only the name of the parent directory, such as Dir, not c:\\Dir. For a subdirectory, `Name` returns only the name of the subdirectory, such as Sub1, not c:\\Dir\\Sub1.  \n  \n For a file, `Name` returns only the file name and file name extension, such as MyFile.txt, not c:\\Dir\\Myfile.txt."
  syntax:
    content: public abstract string Name { get; }
    return:
      type: System.String
      description: "부모 디렉터리의 이름, 계층에 있는 마지막 디렉터리의 이름 또는 파일 이름 확장명을 포함 하는 파일의 이름을 나타내는 문자열입니다."
  overload: System.IO.FileSystemInfo.Name*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemInfo.OriginalPath
  id: OriginalPath
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: OriginalPath
  nameWithType: FileSystemInfo.OriginalPath
  fullName: System.IO.FileSystemInfo.OriginalPath
  type: Field
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "원래 사용자가 지정한 상대 또는 절대 경로입니다."
  remarks: "공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: protected string OriginalPath;
    return:
      type: System.String
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemInfo.Refresh
  id: Refresh
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: Refresh()
  nameWithType: FileSystemInfo.Refresh()
  fullName: System.IO.FileSystemInfo.Refresh()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "개체의 상태를 새로 고칩니다."
  remarks: "`FileSystemInfo.Refresh`현재 파일 시스템에서 파일의 스냅숏을 만듭니다. `Refresh`파일 시스템 올바르지 않거나 오래 된 정보를 반환 하는 경우에 기본 파일 시스템을 수정할 수 없습니다. 예: Windows 98 플랫폼에서 발생할 수 있습니다.       호출 해야 `Refresh` 특성 정보 또는 정보를 가져오는 동안 오래 된 됩니다."
  syntax:
    content: public void Refresh ();
    parameters: []
  overload: System.IO.FileSystemInfo.Refresh*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "디스크 드라이브와 같은 장치가 준비 되지 않았습니다."
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.FileSystemInfo.#ctor
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FileSystemInfo()
  nameWithType: FileSystemInfo.FileSystemInfo()
  fullName: System.IO.FileSystemInfo.FileSystemInfo()
- uid: System.IO.FileSystemInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FileSystemInfo(SerializationInfo,StreamingContext)
  nameWithType: FileSystemInfo.FileSystemInfo(SerializationInfo,StreamingContext)
  fullName: System.IO.FileSystemInfo.FileSystemInfo(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.IO.FileSystemInfo.Attributes
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Attributes
  nameWithType: FileSystemInfo.Attributes
  fullName: System.IO.FileSystemInfo.Attributes
- uid: System.IO.FileAttributes
  parent: System.IO
  isExternal: false
  name: FileAttributes
  nameWithType: FileAttributes
  fullName: System.IO.FileAttributes
- uid: System.IO.FileSystemInfo.CreationTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: CreationTime
  nameWithType: FileSystemInfo.CreationTime
  fullName: System.IO.FileSystemInfo.CreationTime
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IO.FileSystemInfo.CreationTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: CreationTimeUtc
  nameWithType: FileSystemInfo.CreationTimeUtc
  fullName: System.IO.FileSystemInfo.CreationTimeUtc
- uid: System.IO.FileSystemInfo.Delete
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Delete()
  nameWithType: FileSystemInfo.Delete()
  fullName: System.IO.FileSystemInfo.Delete()
- uid: System.IO.FileSystemInfo.Exists
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Exists
  nameWithType: FileSystemInfo.Exists
  fullName: System.IO.FileSystemInfo.Exists
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.FileSystemInfo.Extension
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Extension
  nameWithType: FileSystemInfo.Extension
  fullName: System.IO.FileSystemInfo.Extension
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileSystemInfo.FullName
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FullName
  nameWithType: FileSystemInfo.FullName
  fullName: System.IO.FileSystemInfo.FullName
- uid: System.IO.FileSystemInfo.FullPath
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FullPath
  nameWithType: FileSystemInfo.FullPath
  fullName: System.IO.FileSystemInfo.FullPath
- uid: System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: FileSystemInfo.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.IO.FileSystemInfo.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.IO.FileSystemInfo.LastAccessTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastAccessTime
  nameWithType: FileSystemInfo.LastAccessTime
  fullName: System.IO.FileSystemInfo.LastAccessTime
- uid: System.IO.FileSystemInfo.LastAccessTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastAccessTimeUtc
  nameWithType: FileSystemInfo.LastAccessTimeUtc
  fullName: System.IO.FileSystemInfo.LastAccessTimeUtc
- uid: System.IO.FileSystemInfo.LastWriteTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastWriteTime
  nameWithType: FileSystemInfo.LastWriteTime
  fullName: System.IO.FileSystemInfo.LastWriteTime
- uid: System.IO.FileSystemInfo.LastWriteTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastWriteTimeUtc
  nameWithType: FileSystemInfo.LastWriteTimeUtc
  fullName: System.IO.FileSystemInfo.LastWriteTimeUtc
- uid: System.IO.FileSystemInfo.Name
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Name
  nameWithType: FileSystemInfo.Name
  fullName: System.IO.FileSystemInfo.Name
- uid: System.IO.FileSystemInfo.OriginalPath
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: OriginalPath
  nameWithType: FileSystemInfo.OriginalPath
  fullName: System.IO.FileSystemInfo.OriginalPath
- uid: System.IO.FileSystemInfo.Refresh
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Refresh()
  nameWithType: FileSystemInfo.Refresh()
  fullName: System.IO.FileSystemInfo.Refresh()
- uid: System.IO.FileSystemInfo.#ctor*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FileSystemInfo
  nameWithType: FileSystemInfo.FileSystemInfo
- uid: System.IO.FileSystemInfo.Attributes*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Attributes
  nameWithType: FileSystemInfo.Attributes
- uid: System.IO.FileSystemInfo.CreationTime*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: CreationTime
  nameWithType: FileSystemInfo.CreationTime
- uid: System.IO.FileSystemInfo.CreationTimeUtc*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: CreationTimeUtc
  nameWithType: FileSystemInfo.CreationTimeUtc
- uid: System.IO.FileSystemInfo.Delete*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Delete
  nameWithType: FileSystemInfo.Delete
- uid: System.IO.FileSystemInfo.Exists*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Exists
  nameWithType: FileSystemInfo.Exists
- uid: System.IO.FileSystemInfo.Extension*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Extension
  nameWithType: FileSystemInfo.Extension
- uid: System.IO.FileSystemInfo.FullName*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FullName
  nameWithType: FileSystemInfo.FullName
- uid: System.IO.FileSystemInfo.GetObjectData*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: GetObjectData
  nameWithType: FileSystemInfo.GetObjectData
- uid: System.IO.FileSystemInfo.LastAccessTime*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastAccessTime
  nameWithType: FileSystemInfo.LastAccessTime
- uid: System.IO.FileSystemInfo.LastAccessTimeUtc*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastAccessTimeUtc
  nameWithType: FileSystemInfo.LastAccessTimeUtc
- uid: System.IO.FileSystemInfo.LastWriteTime*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastWriteTime
  nameWithType: FileSystemInfo.LastWriteTime
- uid: System.IO.FileSystemInfo.LastWriteTimeUtc*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastWriteTimeUtc
  nameWithType: FileSystemInfo.LastWriteTimeUtc
- uid: System.IO.FileSystemInfo.Name*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Name
  nameWithType: FileSystemInfo.Name
- uid: System.IO.FileSystemInfo.Refresh*
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Refresh
  nameWithType: FileSystemInfo.Refresh
