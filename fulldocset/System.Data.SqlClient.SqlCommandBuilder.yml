### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlCommandBuilder
  id: SqlCommandBuilder
  children:
  - System.Data.SqlClient.SqlCommandBuilder.#ctor
  - System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)
  - System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  - System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
  - System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
  - System.Data.SqlClient.SqlCommandBuilder.DataAdapter
  - System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)
  - System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand
  - System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)
  - System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand
  - System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)
  - System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)
  - System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)
  - System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)
  - System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)
  - System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand
  - System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)
  - System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)
  - System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)
  - System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
  - System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
  - System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
  - System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  - System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)
  langs:
  - csharp
  name: SqlCommandBuilder
  nameWithType: SqlCommandBuilder
  fullName: System.Data.SqlClient.SqlCommandBuilder
  type: Class
  summary: "변경 내용을 조정 하는 데 사용 되는 단일 테이블 명령을 자동으로 생성 한 <xref href=&quot;System.Data.DataSet&quot;> </xref> 와 연결 된 SQL Server 데이터베이스입니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "<xref:System.Data.SqlClient.SqlDataAdapter>변경 내용을 조정 하는 데 필요한 TRANSACT-SQL 문을 자동으로 생성 되지 않습니다는 <xref:System.Data.DataSet>와 SQL Server의 연결 된 인스턴스.</xref:System.Data.DataSet> </xref:System.Data.SqlClient.SqlDataAdapter> 그러나 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> <xref:System.Data.SqlClient.SqlDataAdapter>.</xref:System.Data.SqlClient.SqlDataAdapter> 의 속성</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> 을 설정 하는 경우 단일 테이블 업데이트에 대 한 TRANSACT-SQL 문을 자동으로 생성 하는 SqlCommandBuilder 개체를 만들 수 있습니다. 그런 다음 설정 하지 않으면 모든 추가 TRANSACT-SQL 문이 SqlCommandBuilder에 의해 생성 됩니다.       SqlCommandBuilder 자체에 대 한 수신기로 등록 <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>설정할 때마다 이벤트는 <xref:System.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A>속성.</xref:System.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A> </xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> 만 연결할 수 있습니다 <xref:System.Data.SqlClient.SqlDataAdapter>개체나 SqlCommandBuilder 서로 한 번에.</xref:System.Data.SqlClient.SqlDataAdapter>       SqlCommandBuilder 사용 하 여 INSERT, UPDATE 또는 DELETE 문을 생성 하려면는 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>속성을 필수 메타 데이터 집합을 자동으로 검색 합니다.</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> 변경 하는 경우는 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>후 메타 데이터를 검색 한 첫 번째 업데이트 이후 호출 해야 하는 등의 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>메서드 메타 데이터를 업데이트 합니다.</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> </xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>       `SelectCommand` 고유 열 이나 기본 키를 하나 이상 반환 해야 합니다. 아무 특성도 없으면는 **InvalidOperation** 예외가 생성 되 고 명령은 생성 되지 않습니다.       SqlCommandBuilder 또한 사용 하 여는 <xref:System.Data.SqlClient.SqlCommand.Connection%2A>, <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> <xref:System.Data.SqlClient.SqlCommand.Transaction%2A>에 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>.</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> 참조 되는 속성</xref:System.Data.SqlClient.SqlCommand.Transaction%2A> 및</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> </xref:System.Data.SqlClient.SqlCommand.Connection%2A> 호출 해야 합니다 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>경우 또는 이러한 속성 중 하나 이상이 수정 되는 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>자체 바뀝니다.</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 그렇지 않은 경우는 <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, 및 <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>속성 이전 값을 유지 합니다.</xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> </xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> </xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>       호출 하는 경우 <xref:System.ComponentModel.Component.Dispose%2A>는 SqlCommandBuilder에서 분리는 <xref:System.Data.SqlClient.SqlDataAdapter>, 생성된 된 명령을 더 이상 사용 됩니다.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.ComponentModel.Component.Dispose%2A>"
  example:
  - "The following example uses the <xref:System.Data.SqlClient.SqlCommand>, along <xref:System.Data.SqlClient.SqlDataAdapter> and <xref:System.Data.SqlClient.SqlConnection>, to select rows from a data source. The example is passed a connection string, a query string that is a Transact-SQL SELECT statement, and a string that is the name of the database table. The example then creates a SqlCommandBuilder.  \n  \n [!code-vb[Classic WebData SqlCommandBuilder#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._12_1.vb)]\n [!code-cs[Classic WebData SqlCommandBuilder#1](~/add/codesnippet/csharp/t-system.data.sqlclient._12_1.cs)]"
  syntax:
    content: 'public sealed class SqlCommandBuilder : System.Data.Common.DbCommandBuilder'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbCommandBuilder
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbCommandBuilder.ConflictOption
  - System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)
  - System.Data.Common.DbCommandBuilder.RefreshSchema
  - System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.Common.DbCommandBuilder.SetAllValues
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: SqlCommandBuilder()
  nameWithType: SqlCommandBuilder.SqlCommandBuilder()
  fullName: System.Data.SqlClient.SqlCommandBuilder.SqlCommandBuilder()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;> </xref> 클래스입니다."
  syntax:
    content: public SqlCommandBuilder ();
    parameters: []
  overload: System.Data.SqlClient.SqlCommandBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)
  id: '#ctor(System.Data.SqlClient.SqlDataAdapter)'
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: SqlCommandBuilder(SqlDataAdapter)
  nameWithType: SqlCommandBuilder.SqlCommandBuilder(SqlDataAdapter)
  fullName: System.Data.SqlClient.SqlCommandBuilder.SqlCommandBuilder(SqlDataAdapter)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;> </xref> 클래스와 연결 된 <xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Data.SqlClient.SqlCommandBuilder>자체에 대 한 수신기로 등록 <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>에서 생성 되는 이벤트는 <xref:System.Data.SqlClient.SqlDataAdapter>이 속성에 지정 된.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> </xref:System.Data.SqlClient.SqlCommandBuilder>       새 인스턴스를 만들 때 <xref:System.Data.SqlClient.SqlCommandBuilder>, 모든 기존 <xref:System.Data.SqlClient.SqlCommandBuilder>이 연관 <xref:System.Data.SqlClient.SqlDataAdapter>해제 됩니다.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder>"
  syntax:
    content: public SqlCommandBuilder (System.Data.SqlClient.SqlDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.SqlClient.SqlDataAdapter
      description: "이름에서 <xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  id: ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  nameWithType: SqlCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void ApplyParameterInfo (System.Data.Common.DbParameter parameter, System.Data.DataRow datarow, System.Data.StatementType statementType, bool whereClause);
    parameters:
    - id: parameter
      type: System.Data.Common.DbParameter
      description: "추가할 수 있습니다."
    - id: datarow
      type: System.Data.DataRow
      description: "추가할 수 있습니다."
    - id: statementType
      type: System.Data.StatementType
      description: "추가할 수 있습니다."
    - id: whereClause
      type: System.Boolean
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
  id: CatalogLocation
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: CatalogLocation
  nameWithType: SqlCommandBuilder.CatalogLocation
  fullName: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "설정 하거나 가져옵니다는 <xref href=&quot;System.Data.Common.CatalogLocation&quot;> </xref> 인스턴스의 <xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;> </xref> 클래스입니다."
  syntax:
    content: public override System.Data.Common.CatalogLocation CatalogLocation { get; set; }
    return:
      type: System.Data.Common.CatalogLocation
      description: "A <xref href=&quot;System.Data.Common.CatalogLocation&quot;></xref> object."
  overload: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
  id: CatalogSeparator
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: CatalogSeparator
  nameWithType: SqlCommandBuilder.CatalogSeparator
  fullName: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "인스턴스는 카탈로그 구분 기호로 사용 되는 문자열을 가져오거나 설정 합니다.는 <xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;> </xref> 클래스입니다."
  syntax:
    content: public override string CatalogSeparator { get; set; }
    return:
      type: System.String
      description: "인스턴스와 함께 사용 하 여 카탈로그 구분 기호를 나타내는 스트링을 <xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;> </xref> 클래스입니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.DataAdapter
  id: DataAdapter
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: DataAdapter
  nameWithType: SqlCommandBuilder.DataAdapter
  fullName: System.Data.SqlClient.SqlCommandBuilder.DataAdapter
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "가져오거나는 <xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;> </xref> 개체는 TRANSACT-SQL 문이 자동으로 생성 됩니다."
  remarks: "<xref:System.Data.SqlClient.SqlCommandBuilder>자체에 대 한 수신기로 등록 <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>에서 생성 되는 이벤트는 <xref:System.Data.SqlClient.SqlDataAdapter>이 속성에 지정 된.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> </xref:System.Data.SqlClient.SqlCommandBuilder>       새 인스턴스를 만들 때 <xref:System.Data.SqlClient.SqlCommandBuilder>, 모든 기존 <xref:System.Data.SqlClient.SqlCommandBuilder>이 연관 <xref:System.Data.SqlClient.SqlDataAdapter>해제 됩니다.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder>"
  syntax:
    content: public System.Data.SqlClient.SqlDataAdapter DataAdapter { get; set; }
    return:
      type: System.Data.SqlClient.SqlDataAdapter
      description: "A <xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;></xref> object."
  overload: System.Data.SqlClient.SqlCommandBuilder.DataAdapter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)
  id: DeriveParameters(System.Data.SqlClient.SqlCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: DeriveParameters(SqlCommand)
  nameWithType: SqlCommandBuilder.DeriveParameters(SqlCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(SqlCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "에 지정 된 저장된 프로시저에서 매개 변수 정보를 검색 된 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 채웁니다는 <xref:System.Data.SqlClient.SqlCommand.Parameters*>는 지정 된 컬렉션 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 개체입니다.</xref:System.Data.SqlClient.SqlCommand.Parameters*>"
  remarks: "`DeriveParameters`에 대 한 모든 기존 매개 변수 정보는 `SqlDbCommand`합니다.       `DeriveParameters`정보를 가져올 데이터베이스를 추가로 호출을 해야 합니다. 매개 변수 정보는 사전에 알고 있는 경우 정보를 명시적으로 설정 하 여 매개 변수 컬렉션을 채우는 데 더 효율적입니다.       만 사용할 수 있습니다 `DeriveParameters` 저장된 프로시저와 함께 합니다. 사용할 수 없습니다 `DeriveParameters` 확장된 저장된 프로시저를 합니다. 사용할 수 없습니다 `DeriveParameters` 채우는 데는 <xref:System.Data.SqlClient.SqlParameterCollection>임의의 Transact SQL 문, 매개 변수가 있는 SELECT 문 처럼.</xref:System.Data.SqlClient.SqlParameterCollection>       자세한 내용은 참조 [구성 매개 변수 및 매개 변수 데이터 형식](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public static void DeriveParameters (System.Data.SqlClient.SqlCommand command);
    parameters:
    - id: command
      type: System.Data.SqlClient.SqlCommand
      description: "<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 있는 매개 변수 정보 파생 되어야 하는 저장된 프로시저를 참조 합니다. 파생 된 매개 변수를 추가 <xref:System.Data.SqlClient.SqlCommand.Parameters*>의 컬렉션은 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>.</xref:System.Data.SqlClient.SqlCommand.Parameters*>"
  overload: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "명령 텍스트가 잘못 된 저장된 프로시저 이름이 아닙니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand
  id: GetDeleteCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetDeleteCommand()
  nameWithType: SqlCommandBuilder.GetDeleteCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "자동으로 생성 된 가져옵니다 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 데이터베이스에서 삭제를 수행 하는 데 필요한 개체입니다."
  remarks: "반환 하기 때문에 응용 프로그램 문제 해결을 위해 GetDeleteCommand 방법을 사용할 수는 <xref:System.Data.SqlClient.SqlCommand>실행할 개체입니다.</xref:System.Data.SqlClient.SqlCommand>       또한 수정 된 명령 기반으로 GetDeleteCommand를 사용할 수 있습니다. GetDeleteCommand를 호출 하 고 수정 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>값을 명시적으로 <xref:System.Data.SqlClient.SqlDataAdapter>.</xref:System.Data.SqlClient.SqlDataAdapter> 에 설정할</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 수 예를 들어       먼저 SQL 문의 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>문을 어떤 식으로든에서 변경 하는 경우.</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 그렇지 않은 경우는 GetDeleteCommand 됩니다 여전히 정보를에서 사용는 이전 문을 올바르지 않을 수 있습니다. 응용 프로그램 중 하나를 호출 하는 경우에 SQL 문을 생성할 먼저는 <xref:System.Data.Common.DbDataAdapter.Update%2A>또는 GetDeleteCommand.</xref:System.Data.Common.DbDataAdapter.Update%2A>       자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetDeleteCommand ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "자동으로 생성 된 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 삭제를 수행 하는 데 필요한 개체입니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)
  id: GetDeleteCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetDeleteCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetDeleteCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "자동으로 생성 된 가져옵니다 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 데이터베이스에서 삭제를 수행 하는 데 필요한 개체입니다."
  remarks: "응용 프로그램이 사용할 수는 <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>반환 하기 때문에 목적으로 하는 문제 해결에 대 한 메서드는 <xref:System.Data.SqlClient.SqlCommand>실행할 개체입니다.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>       사용할 수도 있습니다 <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>의 수정 된 명령 기반으로 합니다.</xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> 예를 들어 <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>수정 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>값을 명시적으로 <xref:System.Data.SqlClient.SqlDataAdapter>.</xref:System.Data.SqlClient.SqlDataAdapter> 를 설정</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 하 고</xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> 을 호출할 수 있습니다.       먼저 SQL 문의 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>문을 어떤 식으로든에서 변경 하는 경우.</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 그렇지 않은 경우는 <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>정보 올바르지 않을 수 있는 이전 문의를 계속 사용 됩니다.</xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> SQL 문은 처음으로 생성 됩니다는 응용 프로그램 중 하나 <xref:System.Data.Common.DbDataAdapter.Update%2A>나 <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.</xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> 호출 하는 경우       매개 변수 이름을 생성할 때의 기본 동작을 사용 하는 @p1, @p2, 다양 한 매개 변수 대. 전달 `true` 에 대 한는 `useColumnsForParameterNames` 매개 변수에 <xref:System.Data.OleDb.OleDbCommandBuilder>대신 열 이름에 따라 매개 변수를 생성 합니다.</xref:System.Data.OleDb.OleDbCommandBuilder> 다음 조건에 해당 하는 경우에이 작업은 성공:- <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>에서 반환 되는 **GetSchema** 메서드를 호출 하 고 있는 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>컬렉션이 지정 하 고 길이 생성 된 매개 변수 이름 보다 크거나 같은.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>      -생성 된 매개 변수 이름에 지정 된 조건에 부합는 <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>에서 반환 되는 **GetSchema** 메서드를 호출 하 고 있는 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>변수.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>      -A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>에서 반환 되는 **GetSchema** 메서드를 호출 하 고 있는 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>컬렉션을 지정 합니다.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>       자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetDeleteCommand (bool useColumnsForParameterNames);
    parameters:
    - id: useColumnsForParameterNames
      type: System.Boolean
      description: "경우 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, 가능한 경우 열 이름이 일치 하는 매개 변수 이름을 생성 합니다. 경우 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, 생성 @p1, @p2등입니다."
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "자동으로 생성 된 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 를 삭제 하는 데 필요한 개체입니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand
  id: GetInsertCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetInsertCommand()
  nameWithType: SqlCommandBuilder.GetInsertCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "자동으로 생성 된 가져옵니다 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 데이터베이스에서 삽입을 수행 하는 데 필요한 개체입니다."
  remarks: "반환 하기 때문에 응용 프로그램 문제 해결을 위해 GetInsertCommand 방법을 사용할 수는 <xref:System.Data.SqlClient.SqlCommand>실행할 개체입니다.</xref:System.Data.SqlClient.SqlCommand>       또한 수정 된 명령 기반으로 GetInsertCommand를 사용할 수 있습니다. GetInsertCommand를 호출 하 고 수정 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>값을 명시적으로 <xref:System.Data.SqlClient.SqlDataAdapter>.</xref:System.Data.SqlClient.SqlDataAdapter> 에 설정할</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 수 예를 들어       TRANSACT-SQL 문을 처음을 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>문을 어떤 식으로든에서 변경 하는 경우.</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 그렇지 않은 경우는 GetInsertCommand 됩니다 여전히 정보를에서 사용는 이전 문을 올바르지 않을 수 있습니다. TRANSACT-SQL 문을 처음으로 생성 됩니다는 응용 프로그램 중 하나를 호출 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>또는 GetInsertCommand.</xref:System.Data.Common.DbDataAdapter.Update%2A>       자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetInsertCommand ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "자동으로 생성 된 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 개체가 삽입 하는 데 필요 합니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)
  id: GetInsertCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetInsertCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetInsertCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "자동으로 생성 된 가져옵니다 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 데이터베이스에서 삽입을 수행 하는 데 필요한 개체입니다."
  remarks: "응용 프로그램이 사용할 수는 <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>반환 하기 때문에 목적으로 하는 문제 해결에 대 한 메서드는 <xref:System.Data.SqlClient.SqlCommand>실행할 개체입니다.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>       사용할 수도 있습니다 <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>의 수정 된 명령 기반으로 합니다.</xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> 예를 들어 <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>수정 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>값을 명시적으로 <xref:System.Data.SqlClient.SqlDataAdapter>.</xref:System.Data.SqlClient.SqlDataAdapter> 를 설정</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 하 고</xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> 을 호출할 수 있습니다.       TRANSACT-SQL 문을 처음을 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>문을 어떤 식으로든에서 변경 하는 경우.</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 그렇지 않은 경우는 <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>정보 올바르지 않을 수 있는 이전 문의를 계속 사용 됩니다.</xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> TRANSACT-SQL 문은 처음으로 생성 됩니다는 응용 프로그램 중 하나 <xref:System.Data.Common.DbDataAdapter.Update%2A>나 <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.</xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> 호출 하는 경우       매개 변수 이름을 생성할 때의 기본 동작을 사용 하는 @p1, @p2, 다양 한 매개 변수 대. 전달 `true` 에 대 한는 `useColumnsForParameterNames` 매개 변수에 <xref:System.Data.OleDb.OleDbCommandBuilder>대신 열 이름에 따라 매개 변수를 생성 합니다.</xref:System.Data.OleDb.OleDbCommandBuilder> 다음 조건에 해당 하는 경우에이 작업은 성공:- <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>에서 반환 되는 **GetSchema** 메서드를 호출 하 고 있는 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>컬렉션이 지정 하 고 길이 생성 된 매개 변수 이름 보다 크거나 같은.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>      -생성 된 매개 변수 이름에 지정 된 조건에 부합는 <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>에서 반환 되는 **GetSchema** 메서드를 호출 하 고 있는 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>변수.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>      -A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>에서 반환 되는 **GetSchema** 메서드를 호출 하 고 있는 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>컬렉션을 지정 합니다.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>       자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetInsertCommand (bool useColumnsForParameterNames);
    parameters:
    - id: useColumnsForParameterNames
      type: System.Boolean
      description: "경우 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, 가능한 경우 열 이름이 일치 하는 매개 변수 이름을 생성 합니다. 경우 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, 생성 @p1, @p2등입니다."
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "자동으로 생성 된 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 삽입 하는 데 필요한 개체입니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)
  id: GetParameterName(System.Int32)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetParameterName(Int32)
  nameWithType: SqlCommandBuilder.GetParameterName(Int32)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override string GetParameterName (int parameterOrdinal);
    parameters:
    - id: parameterOrdinal
      type: System.Int32
      description: "추가할 수 있습니다."
    return:
      type: System.String
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)
  id: GetParameterName(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetParameterName(String)
  nameWithType: SqlCommandBuilder.GetParameterName(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override string GetParameterName (string parameterName);
    parameters:
    - id: parameterName
      type: System.String
      description: "추가할 수 있습니다."
    return:
      type: System.String
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)
  id: GetParameterPlaceholder(System.Int32)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetParameterPlaceholder(Int32)
  nameWithType: SqlCommandBuilder.GetParameterPlaceholder(Int32)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override string GetParameterPlaceholder (int parameterOrdinal);
    parameters:
    - id: parameterOrdinal
      type: System.Int32
      description: "추가할 수 있습니다."
    return:
      type: System.String
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)
  id: GetSchemaTable(System.Data.Common.DbCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetSchemaTable(DbCommand)
  nameWithType: SqlCommandBuilder.GetSchemaTable(DbCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(DbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.DataTable GetSchemaTable (System.Data.Common.DbCommand srcCommand);
    parameters:
    - id: srcCommand
      type: System.Data.Common.DbCommand
      description: "추가할 수 있습니다."
    return:
      type: System.Data.DataTable
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand
  id: GetUpdateCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetUpdateCommand()
  nameWithType: SqlCommandBuilder.GetUpdateCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "자동으로 생성 된 가져옵니다 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 데이터베이스에서 업데이트를 수행 하는 데 필요한 개체입니다."
  remarks: "반환 하기 때문에 응용 프로그램 문제 해결을 위해 GetUpdateCommand 방법을 사용할 수는 <xref:System.Data.SqlClient.SqlCommand>실행할 개체입니다.</xref:System.Data.SqlClient.SqlCommand>       또한 수정 된 명령 기반으로 GetUpdateCommand를 사용할 수 있습니다. GetUpdateCommand를 호출 하 고 수정 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>값을 명시적으로 <xref:System.Data.SqlClient.SqlDataAdapter>.</xref:System.Data.SqlClient.SqlDataAdapter> 에 설정할</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 수 예를 들어       TRANSACT-SQL 문을 처음을 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>문을 어떤 식으로든에서 변경 하는 경우.</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 그렇지 않은 경우는 GetUpdateCommand 됩니다 여전히 정보를에서 사용는 이전 문을 올바르지 않을 수 있습니다. TRANSACT-SQL 문을 처음으로 생성 됩니다는 응용 프로그램 중 하나를 호출 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>또는 GetUpdateCommand.</xref:System.Data.Common.DbDataAdapter.Update%2A>       자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetUpdateCommand ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "자동으로 생성 된 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 업데이트 하는 데 필요한 개체입니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)
  id: GetUpdateCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetUpdateCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetUpdateCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "자동으로 생성 된 가져옵니다 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 데이터베이스에서 업데이트를 수행 하는 데 필요한 개체입니다."
  remarks: "응용 프로그램이 사용할 수는 <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>반환 하기 때문에 목적으로 하는 문제 해결에 대 한 메서드는 <xref:System.Data.SqlClient.SqlCommand>실행할 개체입니다.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>       사용할 수도 있습니다 <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>의 수정 된 명령 기반으로 합니다.</xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> 예를 들어 <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>수정 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>값을 명시적으로 <xref:System.Data.SqlClient.SqlDataAdapter>.</xref:System.Data.SqlClient.SqlDataAdapter> 를 설정</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 하 고</xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> 을 호출할 수 있습니다.       TRANSACT-SQL 문을 처음을 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>문을 어떤 식으로든에서 변경 하는 경우.</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 그렇지 않은 경우는 <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>정보 올바르지 않을 수 있는 이전 문의를 계속 사용 됩니다.</xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> TRANSACT-SQL 문은 처음으로 생성 됩니다는 응용 프로그램 중 하나 <xref:System.Data.Common.DbDataAdapter.Update%2A>나 <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.</xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> 호출 하는 경우       매개 변수 이름을 생성할 때의 기본 동작을 사용 하는 @p1, @p2, 다양 한 매개 변수 대. 전달 `true` 에 대 한는 `useColumnsForParameterNames` 매개 변수에 <xref:System.Data.OleDb.OleDbCommandBuilder>대신 열 이름에 따라 매개 변수를 생성 합니다.</xref:System.Data.OleDb.OleDbCommandBuilder> 다음 조건에 해당 하는 경우에이 작업은 성공:- <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>에서 반환 되는 **GetSchema** 메서드를 호출 하 고 있는 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>컬렉션이 지정 하 고 길이 생성 된 매개 변수 이름 보다 크거나 같은.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>      -생성 된 매개 변수 이름에 지정 된 조건에 부합는 <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>에서 반환 되는 **GetSchema** 메서드를 호출 하 고 있는 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>변수.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>      -A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>에서 반환 되는 **GetSchema** 메서드를 호출 하 고 있는 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>컬렉션을 지정 합니다.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>       자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetUpdateCommand (bool useColumnsForParameterNames);
    parameters:
    - id: useColumnsForParameterNames
      type: System.Boolean
      description: "경우 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, 가능한 경우 열 이름이 일치 하는 매개 변수 이름을 생성 합니다. 경우 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, 생성 @p1, @p2등입니다."
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "자동으로 생성 된 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 업데이트를 수행 하는 데 필요한 개체입니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)
  id: InitializeCommand(System.Data.Common.DbCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: InitializeCommand(DbCommand)
  nameWithType: SqlCommandBuilder.InitializeCommand(DbCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(DbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbCommand InitializeCommand (System.Data.Common.DbCommand command);
    parameters:
    - id: command
      type: System.Data.Common.DbCommand
      description: "추가할 수 있습니다."
    return:
      type: System.Data.Common.DbCommand
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)
  id: QuoteIdentifier(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: QuoteIdentifier(String)
  nameWithType: SqlCommandBuilder.QuoteIdentifier(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "제공 되는 올바른 카탈로그에서는 따옴표가 없는 식별자 올바른 반환 형식의 해당 식별자를 따옴표로 묶을 합니다. 여기에 식별자에 포함 된 따옴표를 이스케이프 합니다."
  syntax:
    content: public override string QuoteIdentifier (string unquotedIdentifier);
    parameters:
    - id: unquotedIdentifier
      type: System.String
      description: "원래 따옴표가 없는 식별자입니다."
    return:
      type: System.String
      description: "따옴표 붙은 식별자의 버전입니다. 식별자에 포함 된 따옴표가 이스케이프 올바르게 됩니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
  id: QuotePrefix
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: QuotePrefix
  nameWithType: SqlCommandBuilder.QuotePrefix
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "시작 문자 또는 SQL Server 데이터베이스 개체와 같은 테이블 또는 열 이름에 포함 된 공백이 나 예약 된 토큰과 등의 문자를 지정할 때 사용할 문자를 나타내는 값을 가져오거나 설정 합니다."
  remarks: >-
    > [!NOTE]

    >  Although you cannot change the QuotePrefix or <xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> properties after an insert, update, or delete command has been generated, you can change their settings after calling the `Update` method of a DataAdapter.
  syntax:
    content: public override string QuotePrefix { get; set; }
    return:
      type: System.String
      description: "시작 문자 또는 문자를 사용 합니다. 기본값은 빈 문자열입니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "DELETE 명령을 생성 한 후 또는 삽입, 업데이트,이 속성을 변경할 수 없습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
  id: QuoteSuffix
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: QuoteSuffix
  nameWithType: SqlCommandBuilder.QuoteSuffix
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "끝 문자 (들) 같은 테이블 또는 열 이름 공백 또는 예약 된 토큰과 같은 문자가 포함 된 SQL Server 데이터베이스 개체를 지정할 때 사용할 값을 가져오거나 설정 합니다."
  remarks: >-
    > [!NOTE]

    >  Although you cannot change the <xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> or QuoteSuffix properties after an insert, update, or delete operation has been generated, you can change their settings after calling the `Update` method of a DataAdapter.
  syntax:
    content: public override string QuoteSuffix { get; set; }
    return:
      type: System.String
      description: "끝 문자 (들) 사용 하도록 합니다. 기본값은 빈 문자열입니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "삽입, 업데이트 또는 삭제 명령이 생성 한 후에이 속성을 변경할 수 없습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
  id: SchemaSeparator
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: SchemaSeparator
  nameWithType: SqlCommandBuilder.SchemaSeparator
  fullName: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "스키마 식별자는 다른 식별자와 구분 기호에 사용할 문자를 가져오거나 설정 합니다."
  remarks: "일반적으로 데이터베이스 서버는 식별자에 대 한 스키마를 스키마 이름과 식별자 일부 문자로 구분 하 여 나타냅니다. 예를 들어 SQL Server는 전체 식별자 Person.CustomerName, &quot;Person&quot; 스키마 이름이 고 &quot;CustomerName&quot;는 식별자 등을 만드는 마침표를 사용 합니다. 이 속성을 설정 개발자를이 동작을 수정할 수 있습니다."
  syntax:
    content: public override string SchemaSeparator { get; set; }
    return:
      type: System.String
      description: "스키마 구분 기호로 사용할 문자입니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  id: SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: SetRowUpdatingHandler(DbDataAdapter)
  nameWithType: SqlCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
  fullName: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void SetRowUpdatingHandler (System.Data.Common.DbDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.Common.DbDataAdapter
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)
  id: UnquoteIdentifier(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: UnquoteIdentifier(String)
  nameWithType: SqlCommandBuilder.UnquoteIdentifier(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "따옴표 붙은 식별자가 제공 따옴표가 없는 올바른 형식의 해당 식별자를 반환합니다. 여기에 식별자에 포함 된 따옴표를 올바르게 이스케이프 취소 됩니다."
  syntax:
    content: public override string UnquoteIdentifier (string quotedIdentifier);
    parameters:
    - id: quotedIdentifier
      type: System.String
      description: "포함 된 따옴표 제거 하는 식별자입니다."
    return:
      type: System.String
      description: "포함 된 따옴표가 이스케이프 되지 않은 제대로 따옴표가 없는 식별자입니다."
  overload: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: System.Data.Common.DbCommandBuilder
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SqlCommandBuilder()
  nameWithType: SqlCommandBuilder.SqlCommandBuilder()
  fullName: System.Data.SqlClient.SqlCommandBuilder.SqlCommandBuilder()
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SqlCommandBuilder(SqlDataAdapter)
  nameWithType: SqlCommandBuilder.SqlCommandBuilder(SqlDataAdapter)
  fullName: System.Data.SqlClient.SqlCommandBuilder.SqlCommandBuilder(SqlDataAdapter)
- uid: System.Data.SqlClient.SqlDataAdapter
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlDataAdapter
  nameWithType: SqlDataAdapter
  fullName: System.Data.SqlClient.SqlDataAdapter
- uid: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  nameWithType: SqlCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
- uid: System.Data.Common.DbParameter
  parent: System.Data.Common
  isExternal: false
  name: DbParameter
  nameWithType: DbParameter
  fullName: System.Data.Common.DbParameter
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: CatalogLocation
  nameWithType: SqlCommandBuilder.CatalogLocation
  fullName: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
- uid: System.Data.Common.CatalogLocation
  parent: System.Data.Common
  isExternal: false
  name: CatalogLocation
  nameWithType: CatalogLocation
  fullName: System.Data.Common.CatalogLocation
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: CatalogSeparator
  nameWithType: SqlCommandBuilder.CatalogSeparator
  fullName: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlCommandBuilder.DataAdapter
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: DataAdapter
  nameWithType: SqlCommandBuilder.DataAdapter
  fullName: System.Data.SqlClient.SqlCommandBuilder.DataAdapter
- uid: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: DeriveParameters(SqlCommand)
  nameWithType: SqlCommandBuilder.DeriveParameters(SqlCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(SqlCommand)
- uid: System.Data.SqlClient.SqlCommand
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetDeleteCommand()
  nameWithType: SqlCommandBuilder.GetDeleteCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand()
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetDeleteCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetDeleteCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(Boolean)
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetInsertCommand()
  nameWithType: SqlCommandBuilder.GetInsertCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand()
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetInsertCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetInsertCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(Boolean)
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterName(Int32)
  nameWithType: SqlCommandBuilder.GetParameterName(Int32)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterName(String)
  nameWithType: SqlCommandBuilder.GetParameterName(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(String)
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterPlaceholder(Int32)
  nameWithType: SqlCommandBuilder.GetParameterPlaceholder(Int32)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(Int32)
- uid: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetSchemaTable(DbCommand)
  nameWithType: SqlCommandBuilder.GetSchemaTable(DbCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(DbCommand)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetUpdateCommand()
  nameWithType: SqlCommandBuilder.GetUpdateCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand()
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetUpdateCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetUpdateCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(Boolean)
- uid: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: InitializeCommand(DbCommand)
  nameWithType: SqlCommandBuilder.InitializeCommand(DbCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(DbCommand)
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuoteIdentifier(String)
  nameWithType: SqlCommandBuilder.QuoteIdentifier(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(String)
- uid: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuotePrefix
  nameWithType: SqlCommandBuilder.QuotePrefix
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuoteSuffix
  nameWithType: SqlCommandBuilder.QuoteSuffix
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
- uid: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SchemaSeparator
  nameWithType: SqlCommandBuilder.SchemaSeparator
  fullName: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
- uid: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SetRowUpdatingHandler(DbDataAdapter)
  nameWithType: SqlCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
  fullName: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
- uid: System.Data.Common.DbDataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
- uid: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: UnquoteIdentifier(String)
  nameWithType: SqlCommandBuilder.UnquoteIdentifier(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(String)
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SqlCommandBuilder
  nameWithType: SqlCommandBuilder.SqlCommandBuilder
- uid: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: ApplyParameterInfo
  nameWithType: SqlCommandBuilder.ApplyParameterInfo
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: CatalogLocation
  nameWithType: SqlCommandBuilder.CatalogLocation
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: CatalogSeparator
  nameWithType: SqlCommandBuilder.CatalogSeparator
- uid: System.Data.SqlClient.SqlCommandBuilder.DataAdapter*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: DataAdapter
  nameWithType: SqlCommandBuilder.DataAdapter
- uid: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: DeriveParameters
  nameWithType: SqlCommandBuilder.DeriveParameters
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetDeleteCommand
  nameWithType: SqlCommandBuilder.GetDeleteCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetInsertCommand
  nameWithType: SqlCommandBuilder.GetInsertCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterName
  nameWithType: SqlCommandBuilder.GetParameterName
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterPlaceholder
  nameWithType: SqlCommandBuilder.GetParameterPlaceholder
- uid: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetSchemaTable
  nameWithType: SqlCommandBuilder.GetSchemaTable
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetUpdateCommand
  nameWithType: SqlCommandBuilder.GetUpdateCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: InitializeCommand
  nameWithType: SqlCommandBuilder.InitializeCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuoteIdentifier
  nameWithType: SqlCommandBuilder.QuoteIdentifier
- uid: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuotePrefix
  nameWithType: SqlCommandBuilder.QuotePrefix
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuoteSuffix
  nameWithType: SqlCommandBuilder.QuoteSuffix
- uid: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SchemaSeparator
  nameWithType: SqlCommandBuilder.SchemaSeparator
- uid: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SetRowUpdatingHandler
  nameWithType: SqlCommandBuilder.SetRowUpdatingHandler
- uid: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: UnquoteIdentifier
  nameWithType: SqlCommandBuilder.UnquoteIdentifier
