### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.ExceptionHandler
  id: ExceptionHandler
  children:
  - System.ServiceModel.Dispatcher.ExceptionHandler.#ctor
  - System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  - System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  - System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)
  - System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  langs:
  - csharp
  name: ExceptionHandler
  nameWithType: ExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler
  type: Class
  summary: "내에서 발생 하는 처리 되지 않은 예외에 대 한 예외 핸들러를 만드는 ExceptionHandler 클래스를 확장 하 고 [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] 런타임."
  remarks: "ExceptionHandler 클래스를 확장 하 고 재정의 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>예외가 응용 프로그램을 종료 해야 하는지 여부를 결정 하는 메서드.</xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 그런 다음 사용자 지정 ExceptionHandler 클래스의 새 인스턴스를 만들고 정적 할당 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A>또는 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A>속성을 만들기 전에 [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] 클라이언트 또는 서비스.</xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> </xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A>"
  example:
  - "The following code example shows an implementation of the ExceptionHandler abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.  \n  \n [!code-cs[S_UEExceptionHandler#0](~/add/codesnippet/csharp/s_ueexceptionhandler.cs/program.cs#0)]\n [!code-vb[S_UEExceptionHandler#0](~/add/codesnippet/visualbasic/s_ueexceptionhandler.cs/module1.vb#0)]  \n  \n The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] runtime.  \n  \n [!code-cs[S_UEExceptionHandler#1](~/add/codesnippet/csharp/s_ueexceptionhandler.cs/program.cs#1)]\n [!code-vb[S_UEExceptionHandler#1](~/add/codesnippet/visualbasic/s_ueexceptionhandler.cs/module1.vb#1)]"
  syntax:
    content: public abstract class ExceptionHandler
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: ExceptionHandler()
  nameWithType: ExceptionHandler.ExceptionHandler()
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.ExceptionHandler()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;> </xref> 클래스입니다."
  syntax:
    content: protected ExceptionHandler ();
    parameters: []
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  id: AlwaysHandle
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: AlwaysHandle
  nameWithType: ExceptionHandler.AlwaysHandle
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "인스턴스를 가져옵니다 <xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;> </xref> 하는 모든 예외를 처리 합니다."
  syntax:
    content: public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }
    return:
      type: System.ServiceModel.Dispatcher.ExceptionHandler
      description: "<xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;> </xref> 반환 하는 개체 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 모든 예외에 대 한 합니다."
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  id: AsynchronousThreadExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: AsynchronousThreadExceptionHandler
  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "현재를 가져오거나 설정 합니다. <xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;> </xref> 응용 프로그램 도메인에 대 한 구현 합니다."
  remarks: "기본적으로 AsynchronousThreadExceptionHandler 속성은 `null`, 처리 되지 않은 비동기 예외가 및 [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] 스레드 응용 프로그램을 종료 합니다.  이 속성을 설정는 <xref:System.ServiceModel.Dispatcher.ExceptionHandler>개체를 수신 하 고 이러한 예외에 응답 합니다.</xref:System.ServiceModel.Dispatcher.ExceptionHandler>       비동기 처리 되지 않은 예외가 발생 하는 경우 [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] 스레드와 도달 하면이이 처리기에 응용 프로그램 도메인의 상태가 손상 될 수 있습니다.  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>반환 해서는 안 됩니다 `true` 이러한 예외에 대 한 합니다.</xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>"
  syntax:
    content: public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }
    return:
      type: System.ServiceModel.Dispatcher.ExceptionHandler
      description: "사용자 지정 할당 <xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;> </xref> 받는 개체 처리 되지 않은 비동기에서 발생 하는 예외 [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] 스레드입니다."
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)
  id: HandleException(System.Exception)
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: HandleException(Exception)
  nameWithType: ExceptionHandler.HandleException(Exception)
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "파생된 클래스에서 재정의 되는 경우 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 예외가 처리 되었으면 또는 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 응용 프로그램이 종료 하 고 예외를 다시 throw 해야 합니다."
  remarks: "HandleException 속성은 반환 `true` 예외가 처리 되었습니다. 반환 하는 경우 `false` 또는 throw 원래 예외가 다른 예외를 다시 throw 됩니다."
  example:
  - "The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the HandleException method.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] runtime.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public abstract bool HandleException (Exception exception);
    parameters:
    - id: exception
      type: System.Exception
      description: "발생 한 예외 내에서 [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] 런타임과 있는 응용 프로그램을 종료할 수 있습니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>예외가 처리 되었습니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  id: TransportExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: TransportExceptionHandler
  nameWithType: ExceptionHandler.TransportExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "현재 전송을 가져오거나 설정 합니다. <xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;> </xref> 응용 프로그램 도메인에 대 한 구현 합니다."
  remarks: "기본적으로 TransportExceptionHandler 속성의 값으로 설정 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, 내에서 처리 되지 않은 예외를 일으키는 [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] 전송 시스템에서 무시 됩니다.</xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>  이 속성의 인스턴스로 설정 <xref:System.ServiceModel.Dispatcher.ExceptionHandler>수신 하 여 이러한 예외를 대응.</xref:System.ServiceModel.Dispatcher.ExceptionHandler>       전역에서 처리 되지 않은 예외가 발생 하는 경우 [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] 전송 하 고이 처리기에 수신 응용 프로그램 도메인의 상태가 손상 된 가능성이 있습니다. <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>반환할 수 `false` 종료 되 게 응용 프로그램에 대 한 이러한 예외에 대 한 합니다.</xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>"
  syntax:
    content: public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }
    return:
      type: System.ServiceModel.Dispatcher.ExceptionHandler
      description: "사용자 지정 <xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;> </xref> 받는 개체 처리 되지 않은 전역 내에서 발생 하는 예외 [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] 전송 합니다."
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: ExceptionHandler()
  nameWithType: ExceptionHandler.ExceptionHandler()
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.ExceptionHandler()
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AlwaysHandle
  nameWithType: ExceptionHandler.AlwaysHandle
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
- uid: System.ServiceModel.Dispatcher.ExceptionHandler
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: ExceptionHandler
  nameWithType: ExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AsynchronousThreadExceptionHandler
  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: HandleException(Exception)
  nameWithType: ExceptionHandler.HandleException(Exception)
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: TransportExceptionHandler
  nameWithType: ExceptionHandler.TransportExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: ExceptionHandler
  nameWithType: ExceptionHandler.ExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AlwaysHandle
  nameWithType: ExceptionHandler.AlwaysHandle
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AsynchronousThreadExceptionHandler
  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: HandleException
  nameWithType: ExceptionHandler.HandleException
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: TransportExceptionHandler
  nameWithType: ExceptionHandler.TransportExceptionHandler
