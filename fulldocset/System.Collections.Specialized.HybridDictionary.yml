### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.HybridDictionary
  id: HybridDictionary
  children:
  - System.Collections.Specialized.HybridDictionary.#ctor
  - System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)
  - System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)
  - System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)
  - System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
  - System.Collections.Specialized.HybridDictionary.Clear
  - System.Collections.Specialized.HybridDictionary.Contains(System.Object)
  - System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.HybridDictionary.Count
  - System.Collections.Specialized.HybridDictionary.GetEnumerator
  - System.Collections.Specialized.HybridDictionary.IsFixedSize
  - System.Collections.Specialized.HybridDictionary.IsReadOnly
  - System.Collections.Specialized.HybridDictionary.IsSynchronized
  - System.Collections.Specialized.HybridDictionary.Item(System.Object)
  - System.Collections.Specialized.HybridDictionary.Keys
  - System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  - System.Collections.Specialized.HybridDictionary.SyncRoot
  - System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Specialized.HybridDictionary.Values
  langs:
  - csharp
  name: HybridDictionary
  nameWithType: HybridDictionary
  fullName: System.Collections.Specialized.HybridDictionary
  type: Class
  summary: "구현 <xref uid=&quot;langword_csharp_IDictionary&quot; name=&quot;IDictionary&quot; href=&quot;&quot;> </xref> 를 사용 하 여 한 <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> 컬렉션이 소형을 및로 전환 합니다는 <xref href=&quot;System.Collections.Hashtable&quot;> </xref> 컬렉션이 커지면 합니다."
  remarks: "이 클래스에는 사전의 요소 수가 알 수 없는 경우에 권장 됩니다. 향상 된 성능을 활용 한 <xref:System.Collections.Specialized.ListDictionary>컬렉션이 작은 <xref:System.Collections.Hashtable> <xref:System.Collections.Specialized.ListDictionary>.</xref:System.Collections.Specialized.ListDictionary> 보다 더 큰 컬렉션을 처리 하</xref:System.Collections.Hashtable> 는 전환의 유연성을 제공 하 고</xref:System.Collections.Specialized.ListDictionary>       컬렉션의 초기 크기는 <xref:System.Collections.Specialized.ListDictionary>컬렉션에는 <xref:System.Collections.Hashtable> <xref:System.Collections.Specialized.ListDictionary> <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.Specialized.ListDictionary> 에서 요소를 복사 하는 오버 헤드를 방지 하기 위해</xref:System.Collections.Hashtable> 저장 됩니다</xref:System.Collections.Specialized.ListDictionary> 에 대 한 최적의 크기 보다 큰 경우       생성자는 사용자 컬렉션 문자열을 비교할 때 대/소문자를 무시 하는지 여부를 지정할 수 있게 하는 부울 매개 변수를 허용 합니다. 및 <xref:System.Object.GetHashCode%2A?displayProperty=fullName> <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> 키 구현을 사용 하 여 대/소문자 구분 컬렉션의 경우 대/소문자 구분 컬렉션의 경우 서 수 대/소문자 구분을 간단한 비교는 고정 문화권의 대/소문자 규칙을 따르는 수행 합니다. 기본적으로 컬렉션은 대/소문자 구분 합니다. 고정 문화권에 대 한 자세한 내용은 <xref:System.Globalization.CultureInfo?displayProperty=fullName>.</xref:System.Globalization.CultureInfo?displayProperty=fullName> 을 참조 하십시오.       키가 null 일 수 있지만 값 수 있습니다.       `foreach` C# 언어의 (`For Each` Visual basic에서) 컬렉션의 요소 형식의 개체를 반환 합니다. HybridDictionary의 각 요소는 키/값 쌍에 요소 유형 키의 형식 또는 값의 형식입니다. 대신, 요소 형식이 <xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> 예를 들어: [!code-cpp [System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/cpp/t-system.collections.spe_3_1.cpp)][!code-cs[System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/csharp/t-system.collections.spe_3_1.cs)][!code-vb[System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/visualbasic/t-system.collections.spe_3_1.vb) ] 는 `foreach` 문에 열거자를 컬렉션에 쓰는 것부터 읽기 가능 주변 래퍼입니다.    "
  example:
  - "The following code example demonstrates several of the properties and methods of HybridDictionary.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/cpp/t-system.collections.spe_3_2.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/csharp/t-system.collections.spe_3_2.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/visualbasic/t-system.collections.spe_3_2.vb)]"
  syntax:
    content: 'public class HybridDictionary : System.Collections.IDictionary'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: HybridDictionary()
  nameWithType: HybridDictionary.HybridDictionary()
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "빈 대/소문자 구분 만듭니다 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>합니다."
  remarks: "기본적으로는 컬렉션은 대/소문자 구분 멤버와의 키의 구현을 사용 하 여 <xref:System.Object.GetHashCode%2A?displayProperty=fullName>해시 코드 공급자와 키의 구현으로 <xref:System.Object.Equals%2A?displayProperty=fullName>비교자로.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName>       비교자 두 키가 같은지 여부를 결정 합니다. 모든 키에는 <xref:System.Collections.Specialized.HybridDictionary>고유 해야 합니다.</xref:System.Collections.Specialized.HybridDictionary>       이 생성자는 o (1) 연산입니다."
  example:
  - "The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/cpp/m-system.collections.spe_9_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/csharp/m-system.collections.spe_9_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/visualbasic/m-system.collections.spe_9_1.vb)]"
  syntax:
    content: public HybridDictionary ();
    parameters: []
  overload: System.Collections.Specialized.HybridDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: HybridDictionary(Boolean)
  nameWithType: HybridDictionary.HybridDictionary(Boolean)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "빈 만듭니다 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 와 지정 된 대/소문자 구분 합니다."
  remarks: "경우 `caseInsensitive` 은 `false`, 컬렉션 및 <xref:System.Object.GetHashCode%2A?displayProperty=fullName> <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> 키 구현을 사용 하 여 경우 `caseInsensitive` 은 `true`, 컬렉션 간단한 서 수 대/소문자 비구분 비교 수행, 고정 문화권의 대/소문자 규칙을 따르는 합니다. 고정 문화권에 대 한 자세한 내용은 <xref:System.Globalization.CultureInfo?displayProperty=fullName>.</xref:System.Globalization.CultureInfo?displayProperty=fullName> 을 참조 하십시오.       이 생성자는 o (1) 연산입니다."
  syntax:
    content: public HybridDictionary (bool caseInsensitive);
    parameters:
    - id: caseInsensitive
      type: System.Boolean
      description: "나타내는 부울입니다 여부는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 대/소문자가 있습니다."
  overload: System.Collections.Specialized.HybridDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: HybridDictionary(Int32)
  nameWithType: HybridDictionary.HybridDictionary(Int32)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "대/소문자 구분 만듭니다 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 지정 된 초기 크기입니다."
  remarks: "컬렉션의 초기 크기는 <xref:System.Collections.Specialized.ListDictionary>컬렉션에는 <xref:System.Collections.Hashtable> <xref:System.Collections.Specialized.ListDictionary> <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.Specialized.ListDictionary> 에서 요소를 복사 하는 오버 헤드를 방지 하기 위해</xref:System.Collections.Hashtable> 저장 됩니다</xref:System.Collections.Specialized.ListDictionary> 에 대 한 최적의 크기 보다 큰 경우       기본적으로는 컬렉션은 대/소문자 구분 멤버와의 키의 구현을 사용 하 여 <xref:System.Object.GetHashCode%2A?displayProperty=fullName>해시 코드 공급자와 키의 구현으로 <xref:System.Object.Equals%2A?displayProperty=fullName>비교자로.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName>       비교자 두 키가 같은지 여부를 결정 합니다. 모든 키에는 <xref:System.Collections.Specialized.HybridDictionary>고유 해야 합니다.</xref:System.Collections.Specialized.HybridDictionary>       이 생성자는는 O (`n`) 작업, 여기서 `n` 은 `initialSize`합니다."
  syntax:
    content: public HybridDictionary (int initialSize);
    parameters:
    - id: initialSize
      type: System.Int32
      description: "항목의 대략적인 수 하는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 처음 포함 될 수 있습니다."
  overload: System.Collections.Specialized.HybridDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)
  id: '#ctor(System.Int32,System.Boolean)'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: HybridDictionary(Int32,Boolean)
  nameWithType: HybridDictionary.HybridDictionary(Int32,Boolean)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Int32,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "만듭니다는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 지정한 처음 크기와 대/소문자 구분 합니다."
  remarks: "컬렉션의 초기 크기는 <xref:System.Collections.Specialized.ListDictionary>컬렉션에는 <xref:System.Collections.Hashtable> <xref:System.Collections.Specialized.ListDictionary> <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.Specialized.ListDictionary> 에서 요소를 복사 하는 오버 헤드를 방지 하기 위해</xref:System.Collections.Hashtable> 저장 됩니다</xref:System.Collections.Specialized.ListDictionary> 에 대 한 최적의 크기 보다 큰 경우       경우 `caseInsensitive` 은 `false`, 컬렉션 및 <xref:System.Object.GetHashCode%2A?displayProperty=fullName> <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> 키 구현을 사용 하 여 경우 `caseInsensitive` 은 `true`, 컬렉션 간단한 서 수 대/소문자 비구분 비교 수행, 고정 문화권의 대/소문자 규칙을 따르는 합니다. 고정 문화권에 대 한 자세한 내용은 <xref:System.Globalization.CultureInfo?displayProperty=fullName>.</xref:System.Globalization.CultureInfo?displayProperty=fullName> 을 참조 하십시오.       이 생성자는는 O (`n`) 작업, 여기서 `n` 은 `initialSize`합니다."
  syntax:
    content: public HybridDictionary (int initialSize, bool caseInsensitive);
    parameters:
    - id: initialSize
      type: System.Int32
      description: "항목의 대략적인 수 하는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 처음 포함 될 수 있습니다."
    - id: caseInsensitive
      type: System.Boolean
      description: "나타내는 부울입니다 여부는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 대/소문자가 있습니다."
  overload: System.Collections.Specialized.HybridDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: HybridDictionary.Add(Object,Object)
  fullName: System.Collections.Specialized.HybridDictionary.Add(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "지정 된 키와 값에 항목을 추가 하는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>합니다."
  remarks: "개체의 상태와 해시 코드 값 간에 상관 관계가 있는 일반적으로 쓰일 수 없습니다 키로 합니다. 예를 들어 문자열 개체는 키로 사용 하기 위해 StringBuilder 개체 보다 더 나은입니다.       키 일 수 없습니다 `null`, 값과는 수입니다.       사용할 수도 있습니다는 <xref:System.Collections.Specialized.HybridDictionary.Item%2A>에 속성 키의 값을 설정 하 여 새 요소를 추가할 수 없습니다.는 <xref:System.Collections.Specialized.HybridDictionary>; 예를 들어 `myCollection[&quot;myNonexistentKey&quot;] = myValue`.</xref:System.Collections.Specialized.HybridDictionary> </xref:System.Collections.Specialized.HybridDictionary.Item%2A> 그러나 지정된 된 키에 이미 있는 경우는 <xref:System.Collections.Specialized.HybridDictionary>설정는 <xref:System.Collections.Specialized.HybridDictionary.Item%2A>속성 이전 값을 덮어씁니다.</xref:System.Collections.Specialized.HybridDictionary.Item%2A> </xref:System.Collections.Specialized.HybridDictionary> 반면, Add 메서드는 기존 요소를 수정 하지 않습니다.       요소의 수는 <xref:System.Collections.Specialized.ListDictionary> <xref:System.Collections.Specialized.ListDictionary> <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.Specialized.ListDictionary> 에서 요소가 복사 되는</xref:System.Collections.Specialized.ListDictionary> 에 대 한 최적의 크기 보다 큰 상태일 때는 그러나 이것은 한 번입니다. 컬렉션 <xref:System.Collections.Hashtable>요소 수가 a <xref:System.Collections.Specialized.ListDictionary> <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> 컬렉션은 유지에</xref:System.Collections.Specialized.ListDictionary> 대 한 최적의 크기 보다 작으면 및</xref:System.Collections.Hashtable> 이미 저장 되어       이 메서드는 o (1) 작업."
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/cpp/200580ad-8659-4e63-8e92-_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/csharp/200580ad-8659-4e63-8e92-_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/visualbasic/200580ad-8659-4e63-8e92-_1.vb)]"
  syntax:
    content: public void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "추가할 항목의 키입니다."
    - id: value
      type: System.Object
      description: "추가할 항목의 값입니다. 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.Specialized.HybridDictionary.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "같은 키를 가진 항목에 이미 있습니다.는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Clear
  id: Clear
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Clear()
  nameWithType: HybridDictionary.Clear()
  fullName: System.Collections.Specialized.HybridDictionary.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "항목을 모두 제거 된 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>합니다."
  remarks: "<xref:System.Collections.Specialized.HybridDictionary.Count%2A>가&0;으로 설정 하 고 컬렉션의 요소에 다른 개체에 대 한 참조도 해제 됩니다.</xref:System.Collections.Specialized.HybridDictionary.Count%2A>       컬렉션에 <xref:System.Collections.Hashtable>컬렉션은 <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> 에 이미 저장 되어 있는 경우       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Specialized.HybridDictionary.Count%2A>.</xref:System.Collections.Specialized.HybridDictionary.Count%2A>"
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_31_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_31_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_31_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Specialized.HybridDictionary.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: HybridDictionary.Contains(Object)
  fullName: System.Collections.Specialized.HybridDictionary.Contains(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "결정 여부는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 특정 키가 들어 있습니다."
  remarks: "이 메서드는 o (1) 작업.       컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>에 대 한 메서드 `key` 확인 하려면 여부 `item` 존재 합니다.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> .NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example searches for an element in a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_Contains#1](~/add/codesnippet/cpp/m-system.collections.spe_37_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_Contains#1](~/add/codesnippet/csharp/m-system.collections.spe_37_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_Contains#1](~/add/codesnippet/visualbasic/m-system.collections.spe_37_1.vb)]"
  syntax:
    content: public bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "찾을 수 있는 키의 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 지정 된 항목이 고, 그렇지 않으면 키 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.Specialized.HybridDictionary.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: HybridDictionary.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.HybridDictionary.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "복사본의 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 엔트리를&1; 차원 <xref:System.Array>지정된 된 인덱스에 있는 인스턴스에.</xref:System.Array>"
  remarks: "<xref:System.Array>열거자 <xref:System.Collections.Specialized.HybridDictionary>.</xref:System.Collections.Specialized.HybridDictionary> 을 반복 하는 같은 순서로</xref:System.Array> 요소가 복사 되       에 있는 키를 복사 하는 <xref:System.Collections.Specialized.HybridDictionary>를 사용 하 여 `HybridDictionary.Keys.CopyTo`.</xref:System.Collections.Specialized.HybridDictionary>       값만 복사 하는 <xref:System.Collections.Specialized.HybridDictionary>를 사용 하 여 `HybridDictionary.Values.CopyTo`.</xref:System.Collections.Specialized.HybridDictionary>       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Specialized.HybridDictionary.Count%2A>.</xref:System.Collections.Specialized.HybridDictionary.Count%2A>"
  example:
  - "The following code example copies the elements of a <xref:System.Collections.Specialized.HybridDictionary> to an array.  \n  \n [!code-cs[System.Collections.Specialized.HybridDictionary_CopyTo#1](~/add/codesnippet/csharp/0bfe553c-62f4-44ed-b908-_1.cs)]\n [!code-cpp[System.Collections.Specialized.HybridDictionary_CopyTo#1](~/add/codesnippet/cpp/0bfe553c-62f4-44ed-b908-_1.cpp)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_CopyTo#1](~/add/codesnippet/visualbasic/0bfe553c-62f4-44ed-b908-_1.vb)]"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "1 차원 <xref:System.Array>의 대상인은 <xref:System.Collections.DictionaryEntry>에서 복사한 개체 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>.</xref:System.Collections.DictionaryEntry> </xref:System.Array> <xref:System.Array>0부터 시작 하는 인덱스가 있어야 합니다.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "인덱스는&0;부터 시작 `array` 복사가 시작 되는 합니다."
  overload: System.Collections.Specialized.HybridDictionary.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>가 다차원 배열인 경우       -또는-소스에 있는 요소의 수 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 에서 사용 가능한 공간 보다 큰 <code>arrayIndex</code> 대상의 끝에 <code>array</code>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "소스의 형식을 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 대상의 형식으로 자동 캐스팅할 수 없는 <code> array </code>합니다."
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Count
  id: Count
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Count
  nameWithType: HybridDictionary.Count
  fullName: System.Collections.Specialized.HybridDictionary.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "에 포함 된 키/값 쌍의 수를 가져옵니다는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>합니다."
  remarks: ''
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_9_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_9_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_9_1.vb)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "에 포함 된 키/값 쌍의 수는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>합니다.       이 속성의 값을 검색 하는 것은 o (1) 작업입니다."
  overload: System.Collections.Specialized.HybridDictionary.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: HybridDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.HybridDictionary.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "반환 된 <xref:System.Collections.IDictionaryEnumerator>반복 하는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "`foreach` C# 언어의 (`for each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.  따라서 사용 하 여 `foreach` 열거자를 직접 조작 하는 대신이 좋습니다.       열거자는 컬렉션의에서 데이터를 읽는 데 사용할 수 있지만 기본 컬렉션을 수정 하는 사용할 수 없습니다.       처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다. <xref:System.Collections.IEnumerator.Reset%2A>또한이 위치로 복원 열거자를 가져옵니다.</xref:System.Collections.IEnumerator.Reset%2A>  이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>정의 되지 않습니다.</xref:System.Collections.IEnumerator.Current%2A> 따라서 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> 의 값을 읽기 전에 컬렉션의 첫 번째 요소로 열거자를</xref:System.Collections.IEnumerator.MoveNext%2A> 호출 해야 합니다.       <xref:System.Collections.IEnumerator.Current%2A>될 때까지 동일한 개체를 반환 <xref:System.Collections.IEnumerator.MoveNext%2A>또는 <xref:System.Collections.IEnumerator.Reset%2A>호출 됩니다.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>설정 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       경우 <xref:System.Collections.IEnumerator.MoveNext%2A>전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A>반환할 수도 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> 마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`, <xref:System.Collections.IEnumerator.Current%2A>정의 되지 않습니다.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>다시, 컬렉션의 첫 번째 요소를 호출할 수 있습니다 <xref:System.Collections.IEnumerator.Reset%2A>그 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> 설정 하려면       열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다. 컬렉션 변경 되 면 추가, 수정 또는 요소를 삭제와 같은 열거자는 무효화 하 고 해당 동작은 정의 되지 않습니다.       열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.  을 열거 하는 동안 스레드로부터 안전을 보장 하려면 전체 열거 동안 컬렉션을 잠글 수 있습니다.  컬렉션에 여러 스레드에서 읽기 및 쓰기에 대 한 액세스를 허용 하려면 사용자 지정 동기화를 구현 해야 합니다.       이 메서드는 o (1) 작업."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/m-system.collections.spe_19_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/m-system.collections.spe_19_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/m-system.collections.spe_19_1.vb)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.Specialized.HybridDictionary.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: HybridDictionary.IsFixedSize
  fullName: System.Collections.Specialized.HybridDictionary.IsFixedSize
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 크기가 고정된 되어 있습니다."
  remarks: "<xref:System.Collections.Specialized.HybridDictionary>에 필요 하기 때문에 IsFixedSize 속성을 구현 하는 <xref:System.Collections.IDictionary?displayProperty=fullName>인터페이스.</xref:System.Collections.IDictionary?displayProperty=fullName></xref:System.Collections.Specialized.HybridDictionary>       컬렉션 크기가 고정된 된 컬렉션을 만든 후 기존 요소를 수정할 수 있습니다에 추가 하거나 제거할 요소의 수 없습니다.       크기가 고정된 된 컬렉션은 지정 된 추가 및 요소를 제거 하지 못하도록 하는 래퍼 컬렉션 따라서를 추가 하거나 제거할 요소를 포함 하 여 내부 컬렉션을 변경 하는 경우 고정 크기 컬렉션에 해당 변경 내용을 반영 합니다.       이 속성의 값을 검색 하는 것은 o (1) 작업입니다."
  syntax:
    content: public bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "이 속성은 항상 반환 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.Specialized.HybridDictionary.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: HybridDictionary.IsReadOnly
  fullName: System.Collections.Specialized.HybridDictionary.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 읽기 전용입니다."
  remarks: "<xref:System.Collections.Specialized.HybridDictionary>에 필요 하기 때문에 IsReadOnly 속성을 구현 하는 <xref:System.Collections.IDictionary?displayProperty=fullName>인터페이스.</xref:System.Collections.IDictionary?displayProperty=fullName></xref:System.Collections.Specialized.HybridDictionary>       읽기 전용 컬렉션에서는 컬렉션을 만든 후에 추가, 제거 또는 요소를 수정할 수 없습니다.       읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.       이 속성의 값을 검색 하는 것은 o (1) 작업입니다."
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "이 속성은 항상 반환 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.Specialized.HybridDictionary.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: HybridDictionary.IsSynchronized
  fullName: System.Collections.Specialized.HybridDictionary.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref> 이 동기화 되었으면 (스레드로부터 안전 하 게 보호)."
  remarks: "<xref:System.Collections.Specialized.HybridDictionary>에 필요 하기 때문에 IsSynchronized 속성을 구현 하는 <xref:System.Collections.ICollection?displayProperty=fullName>인터페이스.</xref:System.Collections.ICollection?displayProperty=fullName></xref:System.Collections.Specialized.HybridDictionary>       파생된 클래스의 동기화 된 버전을 제공할 수 있습니다는 <xref:System.Collections.Specialized.HybridDictionary>를 사용 하 여 <xref:System.Collections.Specialized.HybridDictionary.SyncRoot%2A>속성.</xref:System.Collections.Specialized.HybridDictionary.SyncRoot%2A> </xref:System.Collections.Specialized.HybridDictionary>       컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.HybridDictionary.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/cpp/p-system.collections.spe_5_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/csharp/p-system.collections.spe_5_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/visualbasic/p-system.collections.spe_5_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "이 속성은 항상 반환 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.Specialized.HybridDictionary.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Item(Object)
  nameWithType: HybridDictionary.Item(Object)
  fullName: System.Collections.Specialized.HybridDictionary.Item(Object)
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "지정된 된 키와 연결 된 값을 가져오거나 설정 합니다."
  remarks: "이 속성은 다음 구문을 사용 하 여 컬렉션의 특정 요소를 액세스 하는 기능 제공: `myCollection[key]`합니다.       에 존재 하지 않는 키의 값을 설정 하 여 새 요소를 추가 하는 항목 속성을 사용할 수도 있습니다는 <xref:System.Collections.Specialized.HybridDictionary>; 예를 들어 `myCollection[&quot;myNonexistentKey&quot;] = myValue`.</xref:System.Collections.Specialized.HybridDictionary> 그러나 지정된 된 키에 이미 있는 경우는 <xref:System.Collections.Specialized.HybridDictionary>, 이전 값을 덮어씁니다 항목 속성을 설정 합니다.</xref:System.Collections.Specialized.HybridDictionary> 반면,는 <xref:System.Collections.Specialized.HybridDictionary.Add%2A>메서드는 기존 요소를 수정 하지 않습니다.</xref:System.Collections.Specialized.HybridDictionary.Add%2A>       키 일 수 없습니다 `null`, 값과는 수입니다. 구분 하기 위해 `null` 지정된 된 키를 찾을 수 없으므로 반환 되는 및 `null` 지정된 된 키의 값은 반환 되는 `null`를 사용 하 여는 <xref:System.Collections.Specialized.HybridDictionary.Contains%2A>목록에 키가 있는지 확인 하는 메서드.</xref:System.Collections.Specialized.HybridDictionary.Contains%2A>       C# 언어는 키워드를 사용 하 여 항목 속성을 구현 하는 대신 인덱서를 정의 합니다. Visual Basic에서는 동일한 인덱싱 기능을 기본 속성으로 항목을 구현 합니다.       이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. o (1) 작업 이기도 속성을 설정 합니다."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_27_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_27_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_27_1.vb)]"
  syntax:
    content: public object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "키 값을 가져오거나 설정 합니다."
    return:
      type: System.Object
      description: "지정된 된 키와 연결 된 값입니다. 지정된 된 키가 없으면 get 반환 하려고 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, 지정된 된 키를 사용 하 여 새 항목을 만듭니다 설정 하려고 시도 합니다."
  overload: System.Collections.Specialized.HybridDictionary.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Keys
  id: Keys
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Keys
  nameWithType: HybridDictionary.Keys
  fullName: System.Collections.Specialized.HybridDictionary.Keys
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "가져옵니다는 <xref:System.Collections.ICollection>키를 포함 하는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "에 있는 값의 순서는 <xref:System.Collections.ICollection>지정 되어 있지에 연결 된 값과 순서가 동일 하지만 <xref:System.Collections.ICollection>에서 반환 되는 <xref:System.Collections.Specialized.HybridDictionary.Values%2A>메서드.</xref:System.Collections.Specialized.HybridDictionary.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       반환 된 <xref:System.Collections.ICollection>정적 복사 하지 않습니다; 대신 <xref:System.Collections.ICollection>원래 <xref:System.Collections.Specialized.HybridDictionary>.</xref:System.Collections.Specialized.HybridDictionary> 의 키를 다시 참조할</xref:System.Collections.ICollection> </xref:System.Collections.ICollection> 따라서 <xref:System.Collections.Specialized.HybridDictionary>계속 <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> 반영</xref:System.Collections.Specialized.HybridDictionary> 변경       이 속성의 값을 검색 하는 것은 o (1) 작업입니다."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_20_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_20_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_20_1.vb)]"
  syntax:
    content: public System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>키를 포함 하는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Collections.Specialized.HybridDictionary.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: HybridDictionary.Remove(Object)
  fullName: System.Collections.Specialized.HybridDictionary.Remove(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "지정된 된 키를 가지는 엔트리를 제거는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>합니다."
  remarks: "경우는 <xref:System.Collections.Specialized.HybridDictionary>지정된 키를 가진 요소가 포함 되지 않습니다는 <xref:System.Collections.Specialized.HybridDictionary>변경 되지 않습니다.</xref:System.Collections.Specialized.HybridDictionary> </xref:System.Collections.Specialized.HybridDictionary> 예외가 throw 되지 않습니다.       컬렉션 <xref:System.Collections.Hashtable>요소의 수는 <xref:System.Collections.Specialized.ListDictionary> <xref:System.Collections.Hashtable> <xref:System.Collections.Hashtable>다시에 <xref:System.Collections.Specialized.ListDictionary>.</xref:System.Collections.Specialized.ListDictionary> 로</xref:System.Collections.Hashtable> 에서 요소를 복사 하는 오버 헤드를 방지 하기 위해</xref:System.Collections.Hashtable> 에서 컬렉션은 유지에</xref:System.Collections.Specialized.ListDictionary> 대 한 최적의 크기로 아래 연결 되 고</xref:System.Collections.Hashtable> 이미 저장 되어       이 메서드는 o (1) 작업."
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_0_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_0_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_0_1.vb)]"
  syntax:
    content: public void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "제거할 엔트리의 키입니다."
  overload: System.Collections.Specialized.HybridDictionary.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.SyncRoot
  id: SyncRoot
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: SyncRoot
  nameWithType: HybridDictionary.SyncRoot
  fullName: System.Collections.Specialized.HybridDictionary.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체를 가져옵니다는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>합니다."
  remarks: "파생된 클래스의 동기화 된 버전을 제공할 수 있습니다는 <xref:System.Collections.Specialized.HybridDictionary>SyncRoot 속성을 사용 하 여.</xref:System.Collections.Specialized.HybridDictionary> 동기화 하는 코드의 SyncRoot에 대 한 작업을 수행 해야는 <xref:System.Collections.Specialized.HybridDictionary>, <xref:System.Collections.Specialized.HybridDictionary>.</xref:System.Collections.Specialized.HybridDictionary> 으로 만들어지므로</xref:System.Collections.Specialized.HybridDictionary> 이렇게 하면 다른 개체에서 파생 된 컬렉션의 적절 한 작업입니다. 특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <xref:System.Collections.Specialized.HybridDictionary>개체입니다.</xref:System.Collections.Specialized.HybridDictionary>       컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/cpp/p-system.collections.spe_22_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/csharp/p-system.collections.spe_22_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/visualbasic/p-system.collections.spe_22_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>합니다."
  overload: System.Collections.Specialized.HybridDictionary.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: HybridDictionary.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Specialized.HybridDictionary.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "반환 된 <xref:System.Collections.IEnumerator>반복 하는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "`foreach` C# 언어의 (`for each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.  따라서 사용 하 여 `foreach` 열거자를 직접 조작 하는 대신이 좋습니다.       열거자는 컬렉션의에서 데이터를 읽는 데 사용할 수 있지만 기본 컬렉션을 수정 하는 사용할 수 없습니다.       처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다. <xref:System.Collections.IEnumerator.Reset%2A>또한이 위치로 복원 열거자를 가져옵니다.</xref:System.Collections.IEnumerator.Reset%2A> 이 위치에서, 호출 <xref:System.Collections.IEnumerator.Current%2A>예외를 throw 합니다.</xref:System.Collections.IEnumerator.Current%2A> 따라서 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> 의 값을 읽기 전에 컬렉션의 첫 번째 요소로 열거자를</xref:System.Collections.IEnumerator.MoveNext%2A> 호출 해야 합니다.       <xref:System.Collections.IEnumerator.Current%2A>될 때까지 동일한 개체를 반환 <xref:System.Collections.IEnumerator.MoveNext%2A>또는 <xref:System.Collections.IEnumerator.Reset%2A>호출 됩니다.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>설정 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       경우 <xref:System.Collections.IEnumerator.MoveNext%2A>전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A>반환할 수도 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> 마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`호출, <xref:System.Collections.IEnumerator.Current%2A>예외를 throw 합니다.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>다시, 컬렉션의 첫 번째 요소를 호출할 수 있습니다 <xref:System.Collections.IEnumerator.Reset%2A>그 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> 설정 하려면       열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다. 예: 추가, 수정 또는 요소를 삭제, 열거자가 복구할 수 없게 무효화 및 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A> <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> throw</xref:System.Collections.IEnumerator.Reset%2A> 또는</xref:System.Collections.IEnumerator.MoveNext%2A> 을 다음에 호출할 컬렉션 변경 될 경우 사이 컬렉션이 수정 되는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A>및 <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>열거자가 이미 무효로 되 었 하는 경우에 설정 하는 요소를 반환 합니다.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다.       이 메서드는 o (1) 작업."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/cfcf8780-64b5-47b8-8217-_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/cfcf8780-64b5-47b8-8217-_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/cfcf8780-64b5-47b8-8217-_1.vb)]"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Values
  id: Values
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Values
  nameWithType: HybridDictionary.Values
  fullName: System.Collections.Specialized.HybridDictionary.Values
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "가져옵니다는 <xref:System.Collections.ICollection>값을 포함 하는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "에 있는 값의 순서는 <xref:System.Collections.ICollection>지정 되어 있지는 연결 된 키와 순서가 동일 하지만 <xref:System.Collections.ICollection>에서 반환 되는 <xref:System.Collections.Specialized.HybridDictionary.Keys%2A>메서드.</xref:System.Collections.Specialized.HybridDictionary.Keys%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       반환 된 <xref:System.Collections.ICollection>정적 복사 하지 않습니다; 대신 <xref:System.Collections.ICollection> <xref:System.Collections.Specialized.HybridDictionary>.</xref:System.Collections.Specialized.HybridDictionary> 원래에서 값을 다시 참조</xref:System.Collections.ICollection> </xref:System.Collections.ICollection> 따라서 <xref:System.Collections.Specialized.HybridDictionary>계속 <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> 반영</xref:System.Collections.Specialized.HybridDictionary> 변경       이 속성의 값을 검색 하는 것은 o (1) 작업입니다."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_14_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_14_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_14_1.vb)]"
  syntax:
    content: public System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>값을 포함 하는 <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Collections.Specialized.HybridDictionary.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.Specialized.HybridDictionary.#ctor
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: HybridDictionary()
  nameWithType: HybridDictionary.HybridDictionary()
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary()
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: HybridDictionary(Boolean)
  nameWithType: HybridDictionary.HybridDictionary(Boolean)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: HybridDictionary(Int32)
  nameWithType: HybridDictionary.HybridDictionary(Int32)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: HybridDictionary(Int32,Boolean)
  nameWithType: HybridDictionary.HybridDictionary(Int32,Boolean)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Int32,Boolean)
- uid: System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Add(Object,Object)
  nameWithType: HybridDictionary.Add(Object,Object)
  fullName: System.Collections.Specialized.HybridDictionary.Add(Object,Object)
- uid: System.Collections.Specialized.HybridDictionary.Clear
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Clear()
  nameWithType: HybridDictionary.Clear()
  fullName: System.Collections.Specialized.HybridDictionary.Clear()
- uid: System.Collections.Specialized.HybridDictionary.Contains(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Contains(Object)
  nameWithType: HybridDictionary.Contains(Object)
  fullName: System.Collections.Specialized.HybridDictionary.Contains(Object)
- uid: System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: HybridDictionary.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.HybridDictionary.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Specialized.HybridDictionary.Count
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Count
  nameWithType: HybridDictionary.Count
  fullName: System.Collections.Specialized.HybridDictionary.Count
- uid: System.Collections.Specialized.HybridDictionary.GetEnumerator
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: GetEnumerator()
  nameWithType: HybridDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.HybridDictionary.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Specialized.HybridDictionary.IsFixedSize
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: IsFixedSize
  nameWithType: HybridDictionary.IsFixedSize
  fullName: System.Collections.Specialized.HybridDictionary.IsFixedSize
- uid: System.Collections.Specialized.HybridDictionary.IsReadOnly
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: IsReadOnly
  nameWithType: HybridDictionary.IsReadOnly
  fullName: System.Collections.Specialized.HybridDictionary.IsReadOnly
- uid: System.Collections.Specialized.HybridDictionary.IsSynchronized
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: IsSynchronized
  nameWithType: HybridDictionary.IsSynchronized
  fullName: System.Collections.Specialized.HybridDictionary.IsSynchronized
- uid: System.Collections.Specialized.HybridDictionary.Item(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Item(Object)
  nameWithType: HybridDictionary.Item(Object)
  fullName: System.Collections.Specialized.HybridDictionary.Item(Object)
- uid: System.Collections.Specialized.HybridDictionary.Keys
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Keys
  nameWithType: HybridDictionary.Keys
  fullName: System.Collections.Specialized.HybridDictionary.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Remove(Object)
  nameWithType: HybridDictionary.Remove(Object)
  fullName: System.Collections.Specialized.HybridDictionary.Remove(Object)
- uid: System.Collections.Specialized.HybridDictionary.SyncRoot
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: SyncRoot
  nameWithType: HybridDictionary.SyncRoot
  fullName: System.Collections.Specialized.HybridDictionary.SyncRoot
- uid: System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: HybridDictionary.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Specialized.HybridDictionary.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Specialized.HybridDictionary.Values
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Values
  nameWithType: HybridDictionary.Values
  fullName: System.Collections.Specialized.HybridDictionary.Values
- uid: System.Collections.Specialized.HybridDictionary.#ctor*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: HybridDictionary
  nameWithType: HybridDictionary.HybridDictionary
- uid: System.Collections.Specialized.HybridDictionary.Add*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Add
  nameWithType: HybridDictionary.Add
- uid: System.Collections.Specialized.HybridDictionary.Clear*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Clear
  nameWithType: HybridDictionary.Clear
- uid: System.Collections.Specialized.HybridDictionary.Contains*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Contains
  nameWithType: HybridDictionary.Contains
- uid: System.Collections.Specialized.HybridDictionary.CopyTo*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: CopyTo
  nameWithType: HybridDictionary.CopyTo
- uid: System.Collections.Specialized.HybridDictionary.Count*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Count
  nameWithType: HybridDictionary.Count
- uid: System.Collections.Specialized.HybridDictionary.GetEnumerator*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: GetEnumerator
  nameWithType: HybridDictionary.GetEnumerator
- uid: System.Collections.Specialized.HybridDictionary.IsFixedSize*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: IsFixedSize
  nameWithType: HybridDictionary.IsFixedSize
- uid: System.Collections.Specialized.HybridDictionary.IsReadOnly*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: IsReadOnly
  nameWithType: HybridDictionary.IsReadOnly
- uid: System.Collections.Specialized.HybridDictionary.IsSynchronized*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: IsSynchronized
  nameWithType: HybridDictionary.IsSynchronized
- uid: System.Collections.Specialized.HybridDictionary.Item*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Item
  nameWithType: HybridDictionary.Item
- uid: System.Collections.Specialized.HybridDictionary.Keys*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Keys
  nameWithType: HybridDictionary.Keys
- uid: System.Collections.Specialized.HybridDictionary.Remove*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Remove
  nameWithType: HybridDictionary.Remove
- uid: System.Collections.Specialized.HybridDictionary.SyncRoot*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: SyncRoot
  nameWithType: HybridDictionary.SyncRoot
- uid: System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: HybridDictionary.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Specialized.HybridDictionary.Values*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Values
  nameWithType: HybridDictionary.Values
