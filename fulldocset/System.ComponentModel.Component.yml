### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Component
  id: Component
  children:
  - System.ComponentModel.Component.#ctor
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.Finalize
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  langs:
  - csharp
  name: Component
  nameWithType: Component
  fullName: System.ComponentModel.Component
  type: Class
  summary: "에 대 한 기본 구현을 제공는 <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> 응용 프로그램 간에 공유 하는 인터페이스 및 수 있도록 개체입니다."
  remarks: "구성 요소는 참조로 마샬링하는 공용 언어 런타임에서 모든 구성 요소에 대 한 기본 클래스입니다. 구성 요소를 원격 가능 함 및 <xref:System.MarshalByRefObject>클래스</xref:System.MarshalByRefObject> 에서 파생 구성의 구현을 제공는 <xref:System.ComponentModel.IComponent>인터페이스.</xref:System.ComponentModel.IComponent> <xref:System.ComponentModel.MarshalByValueComponent>의 구현을 제공 <xref:System.ComponentModel.IComponent>하 값으로 마샬링합니다.</xref:System.ComponentModel.IComponent> </xref:System.ComponentModel.MarshalByValueComponent>       구현 하는 개체의 구성 요소를 호스팅할 수는 <xref:System.ComponentModel.IContainer>인터페이스를 하 고 쿼리 하 고 해당 컨테이너에서 서비스를 가져올 수 있습니다.</xref:System.ComponentModel.IContainer> 컨테이너 만듭니다는 <xref:System.ComponentModel.ISite>포함 된 각 구성 요소에 대 한.</xref:System.ComponentModel.ISite> 컨테이너는 사이트를 사용 하 여 구성 요소를 관리 하 고 해당 컨테이너와 통신 하는 구성 요소에서 사용 됩니다.       구성 요소는 리소스를 명시적으로 해제를 호출 하 여 해당 <xref:System.ComponentModel.Component.Dispose%2A>메서드에 대 한 암시적 호출을 통해 자동 메모리 관리를 위해 대기 하지 않고는 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> 경우는 <xref:System.ComponentModel.Container>삭제 되는 모든 구성 요소는 <xref:System.ComponentModel.Container>도 삭제 됩니다.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Container>"
  syntax:
    content: >-
      [System.ComponentModel.DesignerCategory("Component")]

      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class Component : MarshalByRefObject, IDisposable, System.ComponentModel.IComponent
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.ComponentModel.IComponent
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ComponentModel.Component.#ctor
  id: '#ctor'
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Component()
  nameWithType: Component.Component()
  fullName: System.ComponentModel.Component.Component()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref> 클래스입니다."
  syntax:
    content: public Component ();
    parameters: []
  overload: System.ComponentModel.Component.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.CanRaiseEvents
  id: CanRaiseEvents
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: CanRaiseEvents
  nameWithType: Component.CanRaiseEvents
  fullName: System.ComponentModel.Component.CanRaiseEvents
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "구성 요소 이벤트를 발생 시킬 수 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "이 속성의 기본 구현에서는 항상 반환 `true`합니다. 클래스에서 상속 되는 <xref:System.ComponentModel.Component>클래스는 이벤트의 발생을 사용 하지 않도록 설정 하는 기능을 제공 하려면이 속성을 재정의 해야 합니다.</xref:System.ComponentModel.Component> 예를 들어는 <xref:System.Windows.Forms.Control>ActiveX 컨트롤에서 컨트롤을 호스트할 경우이 클래스는 <xref:System.Windows.Forms.Control.CanRaiseEvents%2A>속성에서 반환 `false` ActiveX 컨트롤에 있는 경우 이벤트.</xref:System.Windows.Forms.Control.CanRaiseEvents%2A> </xref:System.Windows.Forms.Control>"
  syntax:
    content: protected virtual bool CanRaiseEvents { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>구성 요소에는 이벤트를 발생 시킬 수 있으면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ComponentModel.Component.CanRaiseEvents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.Container
  id: Container
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Container
  nameWithType: Component.Container
  fullName: System.ComponentModel.Component.Container
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "가져옵니다는 <xref href=&quot;System.ComponentModel.IContainer&quot;> </xref> 를 포함 하는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref>합니다."
  remarks: "컨테이너의 구성 요소는 목록의 선입 선출 컨테이너 내에서 구성 요소의 순서를 정의 하기도 하는 추적 됩니다. 추가 된 마지막 구성 요소는 목록에서 마지막 구성 요소입니다."
  syntax:
    content: public System.ComponentModel.IContainer Container { get; }
    return:
      type: System.ComponentModel.IContainer
      description: "<xref href=&quot;System.ComponentModel.IContainer&quot;> </xref> 를 포함 하는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref>, 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref> 캡슐화 되지 않습니다는 <xref href=&quot;System.ComponentModel.IContainer&quot;> </xref>합니다."
  overload: System.ComponentModel.Component.Container*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.DesignMode
  id: DesignMode
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: DesignMode
  nameWithType: Component.DesignMode
  fullName: System.ComponentModel.Component.DesignMode
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref> 가 현재 디자인 모드에 있습니다."
  remarks: "디자인 모드 표시기에 저장 됩니다는 <xref:System.ComponentModel.ISite>이므로, 하는 경우는 <xref:System.ComponentModel.Component>없는 <xref:System.ComponentModel.ISite>이 속성의 값은 연결 된 `false`.</xref:System.ComponentModel.ISite> </xref:System.ComponentModel.Component> </xref:System.ComponentModel.ISite>"
  syntax:
    content: protected bool DesignMode { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref> 가 디자인 모드에 있으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ComponentModel.Component.DesignMode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.Dispose
  id: Dispose
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Dispose()
  nameWithType: Component.Dispose()
  fullName: System.ComponentModel.Component.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref>합니다."
  remarks: "<xref:System.ComponentModel.Component>.</xref:System.ComponentModel.Component> 를 사용 하 여 작업을 마쳤으면 Dispose를 호출 합니다. Dispose 메서드는 <xref:System.ComponentModel.Component>불안정 한 상태가.</xref:System.ComponentModel.Component> Dispose를 호출한 후에 대 한 모든 참조를 해제 해야는 <xref:System.ComponentModel.Component>가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.ComponentModel.Component>차지한.</xref:System.ComponentModel.Component> </xref:System.ComponentModel.Component> 자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md) 및 [Dispose 메서드를 구현](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > <xref:System.ComponentModel.Component>.</xref:System.ComponentModel.Component> 에 대 한 마지막 참조를 해제 하기 전에 항상 호출 삭제 사용 중인 리소스가 가비지 수집기 호출할 때까지 해제 되지 것입니다 그렇지 않은 경우는 <xref:System.ComponentModel.Component>개체의 `Finalize` 메서드.</xref:System.ComponentModel.Component>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.ComponentModel.Component.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Component.Dispose(Boolean)
  fullName: System.ComponentModel.Component.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public <xref:System.ComponentModel.Component.Dispose%2A>메서드 및 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> `Dispose()`보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다. <xref:System.Object.Finalize%2A>호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</xref:System.Object.Finalize%2A>       경우는 `disposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.ComponentModel.Component>참조.</xref:System.ComponentModel.Component> 이 메서드 호출에서 `Dispose()` 각 참조 된 개체의 메서드."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.ComponentModel.Component.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.Disposed
  id: Disposed
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Disposed
  nameWithType: Component.Disposed
  fullName: System.ComponentModel.Component.Disposed
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "구성 요소를 호출 하 여 삭제 될 때 발생는 <xref:System.ComponentModel.Component.Dispose*>메서드.</xref:System.ComponentModel.Component.Dispose*>"
  remarks: '삭제 된 대리자를 만들 때 이벤트를 처리 하는 메서드를 식별 합니다. 이벤트를 이벤트 처리기를 연결 하려면 대리자의 인스턴스 이벤트에 추가 합니다. 대리자를 제거 하지 않으면 이벤트가 발생할 때마다 이벤트 처리기가 호출 됩니다. 이벤트 처리기 대리자에 대 한 자세한 내용은 참조 [NIB: 이벤트 및 대리자](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)합니다.'
  syntax:
    content: public event EventHandler Disposed;
    return:
      type: System.EventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.Events
  id: Events
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Events
  nameWithType: Component.Events
  fullName: System.ComponentModel.Component.Events
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "이에 연결 된 이벤트 처리기의 목록을 가져옵니다 <xref href=&quot;System.ComponentModel.Component&quot;> </xref>합니다."
  remarks: '이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.'
  syntax:
    content: protected System.ComponentModel.EventHandlerList Events { get; }
    return:
      type: System.ComponentModel.EventHandlerList
      description: "<xref href=&quot;System.ComponentModel.EventHandlerList&quot;> </xref> 이 구성 요소에 대 한 대리자를 제공 하는 합니다."
  overload: System.ComponentModel.Component.Events*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.Finalize
  id: Finalize
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Finalize()
  nameWithType: Component.Finalize()
  fullName: System.ComponentModel.Component.Finalize()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "관리 되지 않는 리소스를 해제 하 고 기타 정리 작업 하기 전에 수행 된 <xref href=&quot;System.ComponentModel.Component&quot;> </xref> 가비지 수집에서 회수 합니다."
  remarks: "이 메서드를 재정의 <xref:System.Object.Finalize%2A>.</xref:System.Object.Finalize%2A> 응용 프로그램 코드,이 메서드를 호출 하지 않아야 개체의 `Finalize` 메서드를 호출 하 여 가비지 수집기의 종료를 사용 하지 않도록 설정 된 경우가 아니면 자동으로 가비지 수집 중 호출 됩니다는 <xref:System.GC.SuppressFinalize%2A>메서드.</xref:System.GC.SuppressFinalize%2A>       자세한 내용은 참조 [Finalize 메서드 및 소멸자](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md), 및 [Finalize 메서드를 재정의](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)합니다."
  syntax:
    content: ~Component ();
    parameters: []
  overload: System.ComponentModel.Component.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.GetService(System.Type)
  id: GetService(System.Type)
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: GetService(Type)
  nameWithType: Component.GetService(Type)
  fullName: System.ComponentModel.Component.GetService(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "제공 하는 서비스를 나타내는 개체를 반환 된 <xref href=&quot;System.ComponentModel.Component&quot;> </xref> 또는 해당 <xref href=&quot;System.ComponentModel.Container&quot;> </xref>합니다."
  remarks: "이 메서드는 파생된 클래스에서 재정의할 수 있습니다."
  syntax:
    content: protected virtual object GetService (Type service);
    parameters:
    - id: service
      type: System.Type
      description: "제공 되는 서비스는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref>합니다."
    return:
      type: System.Object
      description: "<xref:System.Object>제공 하는 서비스를 나타내는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref>, 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref> 지정된 된 서비스를 제공 하지 않습니다.</xref:System.Object>"
  overload: System.ComponentModel.Component.GetService*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.Site
  id: Site
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Site
  nameWithType: Component.Site
  fullName: System.ComponentModel.Component.Site
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "가져오거나는 <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> 의 <xref href=&quot;System.ComponentModel.Component&quot;> </xref>합니다."
  remarks: "<xref:System.ComponentModel.Component> <xref:System.ComponentModel.ISite>는 <xref:System.ComponentModel.IContainer> <xref:System.ComponentModel.IContainer> <xref:System.ComponentModel.ISite>.를</xref:System.ComponentModel.ISite> 할당</xref:System.ComponentModel.IContainer> 하 고</xref:System.ComponentModel.IContainer> 추가 된 경우</xref:System.ComponentModel.ISite> </xref:System.ComponentModel.Component> <xref:System.ComponentModel.IContainer> <xref:System.ComponentModel.ISite> <xref:System.ComponentModel.Component>.</xref:System.ComponentModel.Component> </xref:System.ComponentModel.ISite> 할당 해야</xref:System.ComponentModel.IContainer> 구성 요소의 값을 변경 <xref:System.ComponentModel.ISite>반드시 변경 않습니다 사이트의 이름에서 <xref:System.ComponentModel.Component>에 할당 됩니다.</xref:System.ComponentModel.Component> </xref:System.ComponentModel.ISite> 사이트 속성을 설정 하 여 <xref:System.ComponentModel.IContainer>.</xref:System.ComponentModel.IContainer> 해야       속성 값이 `null` 경우 <xref:System.ComponentModel.Component>해당 <xref:System.ComponentModel.IContainer>.</xref:System.ComponentModel.IContainer> 제거</xref:System.ComponentModel.Component> 할당 `null` 이 속성에 반드시 제거 되는 <xref:System.ComponentModel.Component> <xref:System.ComponentModel.IContainer>.</xref:System.ComponentModel.IContainer> </xref:System.ComponentModel.Component>       A <xref:System.ComponentModel.Component>이름을 있을 수도 있습니다.</xref:System.ComponentModel.Component> 경우는 <xref:System.ComponentModel.Component>되는 이름이 지정 된 경우 이름은 해야 다른 <xref:System.ComponentModel.Component>해당 <xref:System.ComponentModel.IContainer>.</xref:System.ComponentModel.IContainer> 내의 개체</xref:System.ComponentModel.Component> 간에 고유</xref:System.ComponentModel.Component> <xref:System.ComponentModel.ISite> <xref:System.ComponentModel.Component>따라서 이름을 지정할 수 있습니다만 <xref:System.ComponentModel.Component> <xref:System.ComponentModel.ISite>와 연결 된</xref:System.ComponentModel.ISite> 있는지</xref:System.ComponentModel.Component> ;</xref:System.ComponentModel.Component> 의 이름을 저장합니다</xref:System.ComponentModel.ISite>"
  syntax:
    content: public virtual System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "<xref href=&quot;System.ComponentModel.ISite&quot;> </xref> 연관는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref>, 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref> 캡슐화 되지 않습니다는 <xref href=&quot;System.ComponentModel.IContainer&quot;> </xref>, <xref href=&quot;System.ComponentModel.Component&quot;> </xref> 가 없습니다는 <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> 연관 또는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref> 에서 제거 되 해당 <xref href=&quot;System.ComponentModel.IContainer&quot;> </xref>합니다."
  overload: System.ComponentModel.Component.Site*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.ToString
  id: ToString
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: ToString()
  nameWithType: Component.ToString()
  fullName: System.ComponentModel.Component.ToString()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "반환 된 <xref:System.String>의 이름을 포함 하는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref>있는 경우.</xref:System.String> 이 메서드를 재정의 해야 합니다."
  remarks: "A <xref:System.ComponentModel.Component>이름을 없을 수 있습니다.</xref:System.ComponentModel.Component> 경우는 <xref:System.ComponentModel.Component>되는 이름이 지정 된 경우 이름은 다른 <xref:System.ComponentModel.Component>해당 <xref:System.ComponentModel.IContainer>.</xref:System.ComponentModel.IContainer> 내의 개체</xref:System.ComponentModel.Component> 간에 고유</xref:System.ComponentModel.Component>       <xref:System.ComponentModel.ISite> <xref:System.ComponentModel.Component>.</xref:System.ComponentModel.Component> 이름을 저장합니다</xref:System.ComponentModel.ISite> <xref:System.ComponentModel.Component> <xref:System.ComponentModel.ISite>는 <xref:System.ComponentModel.IContainer> <xref:System.ComponentModel.IContainer> <xref:System.ComponentModel.ISite>.를</xref:System.ComponentModel.ISite> 할당</xref:System.ComponentModel.IContainer> 하 고</xref:System.ComponentModel.IContainer> 추가 된 경우</xref:System.ComponentModel.ISite> 를 하나만 사용할 수 있습니다</xref:System.ComponentModel.Component>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A <xref:System.String>의 이름을 포함 하는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref>, 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우는 <xref href=&quot;System.ComponentModel.Component&quot;> </xref> 명명 되지 않았습니다.</xref:System.String>"
  overload: System.ComponentModel.Component.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ComponentModel.Component.#ctor
  parent: System.ComponentModel.Component
  isExternal: false
  name: Component()
  nameWithType: Component.Component()
  fullName: System.ComponentModel.Component.Component()
- uid: System.ComponentModel.Component.CanRaiseEvents
  parent: System.ComponentModel.Component
  isExternal: false
  name: CanRaiseEvents
  nameWithType: Component.CanRaiseEvents
  fullName: System.ComponentModel.Component.CanRaiseEvents
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Component.Container
  parent: System.ComponentModel.Component
  isExternal: false
  name: Container
  nameWithType: Component.Container
  fullName: System.ComponentModel.Component.Container
- uid: System.ComponentModel.IContainer
  parent: System.ComponentModel
  isExternal: false
  name: IContainer
  nameWithType: IContainer
  fullName: System.ComponentModel.IContainer
- uid: System.ComponentModel.Component.DesignMode
  parent: System.ComponentModel.Component
  isExternal: false
  name: DesignMode
  nameWithType: Component.DesignMode
  fullName: System.ComponentModel.Component.DesignMode
- uid: System.ComponentModel.Component.Dispose
  parent: System.ComponentModel.Component
  isExternal: false
  name: Dispose()
  nameWithType: Component.Dispose()
  fullName: System.ComponentModel.Component.Dispose()
- uid: System.ComponentModel.Component.Dispose(System.Boolean)
  parent: System.ComponentModel.Component
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Component.Dispose(Boolean)
  fullName: System.ComponentModel.Component.Dispose(Boolean)
- uid: System.ComponentModel.Component.Disposed
  parent: System.ComponentModel.Component
  isExternal: false
  name: Disposed
  nameWithType: Component.Disposed
  fullName: System.ComponentModel.Component.Disposed
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.ComponentModel.Component.Events
  parent: System.ComponentModel.Component
  isExternal: false
  name: Events
  nameWithType: Component.Events
  fullName: System.ComponentModel.Component.Events
- uid: System.ComponentModel.EventHandlerList
  parent: System.ComponentModel
  isExternal: false
  name: EventHandlerList
  nameWithType: EventHandlerList
  fullName: System.ComponentModel.EventHandlerList
- uid: System.ComponentModel.Component.Finalize
  parent: System.ComponentModel.Component
  isExternal: false
  name: Finalize()
  nameWithType: Component.Finalize()
  fullName: System.ComponentModel.Component.Finalize()
- uid: System.ComponentModel.Component.GetService(System.Type)
  parent: System.ComponentModel.Component
  isExternal: false
  name: GetService(Type)
  nameWithType: Component.GetService(Type)
  fullName: System.ComponentModel.Component.GetService(Type)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.Component.Site
  parent: System.ComponentModel.Component
  isExternal: false
  name: Site
  nameWithType: Component.Site
  fullName: System.ComponentModel.Component.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.ComponentModel.Component.ToString
  parent: System.ComponentModel.Component
  isExternal: false
  name: ToString()
  nameWithType: Component.ToString()
  fullName: System.ComponentModel.Component.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.Component.#ctor*
  parent: System.ComponentModel.Component
  isExternal: false
  name: Component
  nameWithType: Component.Component
- uid: System.ComponentModel.Component.CanRaiseEvents*
  parent: System.ComponentModel.Component
  isExternal: false
  name: CanRaiseEvents
  nameWithType: Component.CanRaiseEvents
- uid: System.ComponentModel.Component.Container*
  parent: System.ComponentModel.Component
  isExternal: false
  name: Container
  nameWithType: Component.Container
- uid: System.ComponentModel.Component.DesignMode*
  parent: System.ComponentModel.Component
  isExternal: false
  name: DesignMode
  nameWithType: Component.DesignMode
- uid: System.ComponentModel.Component.Dispose*
  parent: System.ComponentModel.Component
  isExternal: false
  name: Dispose
  nameWithType: Component.Dispose
- uid: System.ComponentModel.Component.Events*
  parent: System.ComponentModel.Component
  isExternal: false
  name: Events
  nameWithType: Component.Events
- uid: System.ComponentModel.Component.Finalize*
  parent: System.ComponentModel.Component
  isExternal: false
  name: Finalize
  nameWithType: Component.Finalize
- uid: System.ComponentModel.Component.GetService*
  parent: System.ComponentModel.Component
  isExternal: false
  name: GetService
  nameWithType: Component.GetService
- uid: System.ComponentModel.Component.Site*
  parent: System.ComponentModel.Component
  isExternal: false
  name: Site
  nameWithType: Component.Site
- uid: System.ComponentModel.Component.ToString*
  parent: System.ComponentModel.Component
  isExternal: false
  name: ToString
  nameWithType: Component.ToString
