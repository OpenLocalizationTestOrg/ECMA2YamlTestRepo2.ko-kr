### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.EventWaitHandleAccessRule
  id: EventWaitHandleAccessRule
  children:
  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  langs:
  - csharp
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule
  type: Class
  summary: "허용 되거나 거부 된 사용자 또는 그룹에 대 한 액세스 권한 집합을 나타냅니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "EventWaitHandleAccessRule 클래스에는 명명 된 시스템 이벤트에 대 한 Windows 액세스 제어 보안을 관리 하기 위한.NET Framework가 제공 하는 클래스 집합 중 하나입니다. 이러한 클래스와의 관계는 기본 Windows 액세스 제어 구조에 대해 간략하게 <xref:System.Security.AccessControl.EventWaitHandleSecurity>.</xref:System.Security.AccessControl.EventWaitHandleSecurity> 을 참조 하십시오.      > [!NOTE] > 명명 된 시스템 이벤트 Windows 액세스 제어 보안은에 대해서만 의미가 있습니다. 경우는 <xref:System.Threading.EventWaitHandle>개체가 로컬 이벤트를 나타내는 액세스 제어는 관련이 없습니다.</xref:System.Threading.EventWaitHandle>       명명된 된 이벤트에 현재 적용 된 규칙 목록이 사용는 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>가져올 메서드를 한 <xref:System.Security.AccessControl.EventWaitHandleSecurity>개체를 사용 하 여 해당 <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>메서드 EventWaitHandleAccessRule 개체의 컬렉션을 가져옵니다.</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.EventWaitHandleSecurity> </xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>       EventWaitHandleAccessRule 개체 내부 임의 액세스 제어 목록 (DACL)에서 액세스 제어 항목으로 일대일로 매핑되지 않습니다. 이벤트에 대 한 모든 액세스 규칙 집합이 나타나면 집합은 현재 모든 액세스 제어 항목을 나타내는 데 필요한 규칙의 최소 수를 포함 합니다.      > [!NOTE] > 기본 액세스 제어 항목 변경 적용 하 고 규칙을 제거 합니다. 규칙의 정보는 액세스 제어 항목의 가장 작은 수를 유지 하기 위해 가능 하면 병합 됩니다. 따라서 규칙의 현재 목록을 가져오면 유사할 수 있습니다 하지 정확 하 게 사용자가 추가한 모든 규칙의 목록입니다.       EventWaitHandleAccessRule 개체를 사용 하 여 액세스 권한을 허용 하거나 거부할 사용자 또는 그룹을 지정 합니다. 개체는 항상 나타냅니다는 EventWaitHandleAccessRule 액세스가 허용 또는 둘 다 하지 액세스가 거부 합니다.       명명된 된 시스템 이벤트에는 규칙을 적용 하려면 사용 하 여는 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>가져올 메서드를는 <xref:System.Security.AccessControl.EventWaitHandleSecurity>개체입니다.</xref:System.Security.AccessControl.EventWaitHandleSecurity> </xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> 수정 된 <xref:System.Security.AccessControl.EventWaitHandleSecurity>추가 규칙을 사용 하 여 해당 메서드를 사용 하 여 개체는 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>메서드를 보안 개체를 다시 연결 합니다.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!IMPORTANT] > 변경 하면는 <xref:System.Security.AccessControl.EventWaitHandleSecurity>개체를 호출 하기 전에 명명된 된 이벤트의 액세스 수준을 영향을 주지 않습니다는 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>명명된 된 이벤트에 변경 된 보안 개체를 할당 하는 메서드.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.EventWaitHandleSecurity>       EventWaitHandleAccessRule 개체는 변경할 수 없습니다. 이벤트에 대 한 보안의 메서드를 사용 하 여 수정 되는 <xref:System.Security.AccessControl.EventWaitHandleSecurity>규칙을 추가 하거나 제거 하는 클래스, 이렇게 하면 기본 액세스 제어 항목 수정 됩니다.</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!NOTE] > 동기화 개체에 대 한 보안은 Windows 98 또는 Windows Millennium Edition에 대 한 지원 되지 않습니다."
  example:
  - "The following code example demonstrates the creation and use of EventWaitHandleAccessRule objects. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_0_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_0_1.vb)]"
  syntax:
    content: 'public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule'
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> 사용자 또는 액세스 권한으로 규칙이 적용 되는 그룹을 지정 하는 클래스 및 지정 된 액세스 권한을 허용 또는 거부 여부."
  remarks: "대기는 <xref:System.Threading.EventWaitHandle>(호출 하 여는 <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>또는 <xref:System.Threading.WaitHandle.WaitAll%2A>메서드), 사용자에 게 있어야 <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>액세스.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.EventWaitHandle> 호출 하 여 이벤트 신호를 보내는 <xref:System.Threading.EventWaitHandle.Set%2A>메서드를 호출 하 여 신호를 보내지 않은 상태로 되돌리려면는 <xref:System.Threading.EventWaitHandle.Reset%2A>메서드를 사용자에 게 있어야 <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>액세스.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.EventWaitHandle.Reset%2A> </xref:System.Threading.EventWaitHandle.Set%2A> 신호를 보내는 <xref:System.Threading.EventWaitHandle>개체를 다음 호출 하 여 대기는 <xref:System.Threading.WaitHandle.SignalAndWait%2A>메서드를 사용자에 게 있어야 <xref:System.Security.AccessControl.EventWaitHandleRights>및 <xref:System.Security.AccessControl.EventWaitHandleRights>액세스.</xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Threading.WaitHandle.SignalAndWait%2A> </xref:System.Threading.EventWaitHandle>"
  syntax:
    content: public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "사용자 또는 규칙 그룹에 적용 됩니다. 형식 이어야 합니다 <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> 또는 형식으로 <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> 변환할 수 있는 <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>합니다."
    - id: eventRights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "비트 조합 <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> 권한을 지정 하는 값을 허용 또는 거부 합니다."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "중 하나는 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> 권한 허용 여부를 지정 하는 값입니다."
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>잘못 된 값을 지정합니다.       -또는- <code>type</code> 잘못 된 값을 지정 합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -또는- <code>eventRights</code> 은&0;입니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>형식이 <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> 아니고과 같은 형식 <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> 변환할 수 있는 <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> 사용자 또는 규칙을 적용할 액세스 권한, 그룹의 이름을 지정 하는 클래스 및 지정 된 액세스 권한을 허용 또는 거부 여부."
  remarks: "대기는 <xref:System.Threading.EventWaitHandle>(호출 하 여는 <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>또는 <xref:System.Threading.WaitHandle.WaitAll%2A>메서드), 사용자에 게 있어야 <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>액세스.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.EventWaitHandle> 호출 하 여 이벤트 신호를 보내는 <xref:System.Threading.EventWaitHandle.Set%2A>메서드를 호출 하 여 신호를 보내지 않은 상태로 되돌리려면는 <xref:System.Threading.EventWaitHandle.Reset%2A>메서드를 사용자에 게 있어야 <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>액세스.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.EventWaitHandle.Reset%2A> </xref:System.Threading.EventWaitHandle.Set%2A> 신호를 보내는 <xref:System.Threading.EventWaitHandle>개체를 다음 호출 하 여 대기는 <xref:System.Threading.WaitHandle.SignalAndWait%2A>메서드를 사용자에 게 있어야 <xref:System.Security.AccessControl.EventWaitHandleRights>및 <xref:System.Security.AccessControl.EventWaitHandleRights>액세스.</xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Threading.WaitHandle.SignalAndWait%2A> </xref:System.Threading.EventWaitHandle>       이 생성자는 만들기는 <xref:System.Security.Principal.NTAccount>개체를 전달 하 여 `identity` 에 <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>생성자 및 새로 만든 전달 <xref:System.Security.Principal.NTAccount>개체는 <xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29>생성자.</xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example demonstrates the use of this constructor to create <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/ffb3828f-bc0d-4880-b857-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/ffb3828f-bc0d-4880-b857-_1.vb)]"
  syntax:
    content: public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "사용자 또는 그룹의 이름 규칙에 적용 됩니다."
    - id: eventRights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "비트 조합 <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> 권한을 지정 하는 값을 허용 또는 거부 합니다."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "중 하나는 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> 권한 허용 여부를 지정 하는 값입니다."
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>잘못 된 값을 지정합니다.       -또는- <code>type</code> 잘못 된 값을 지정 합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>0입니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -또는- <code>identity</code> 은 길이가&0; 인 문자열입니다.       -또는- <code>identity</code> 512 자 보다 깁니다."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  id: EventWaitHandleRights
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "액세스 규칙에 따라 허용 되거나 거부 권한을 가져옵니다."
  remarks: "<xref:System.Security.AccessControl.EventWaitHandleAccessRule>개체는 변경할 수 없습니다.</xref:System.Security.AccessControl.EventWaitHandleAccessRule> 다른 사용자, 서로 다른 권한을 또는 다른를 나타내는 새 액세스 규칙을 만들 수 있습니다 <xref:System.Security.AccessControl.AccessControlType>, 있지만 기존 액세스 규칙을 수정할 수 없습니다.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example demonstrates the use of the EventWaitHandleRights property to display the rights in the set of rules contained in an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/p-system.security.access_2_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/p-system.security.access_2_1.vb)]"
  syntax:
    content: public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }
    return:
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "비트 조합 <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> 값 된 권한을 나타내는 허용 또는 액세스 규칙에 의해 거부 합니다."
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.EventWaitHandleRights
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights*
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
