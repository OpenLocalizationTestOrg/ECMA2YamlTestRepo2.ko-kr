### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  id: FormViewUpdatedEventArgs
  children:
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues
  langs:
  - csharp
  name: FormViewUpdatedEventArgs
  nameWithType: FormViewUpdatedEventArgs
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  type: Class
  summary: "에 대 한 데이터를 제공는 <xref href=&quot;System.Web.UI.WebControls.FormView.ItemUpdated&quot;> </xref> 이벤트입니다."
  remarks: "<xref:System.Web.UI.WebControls.FormView>발생는 <xref:System.Web.UI.WebControls.FormView.ItemUpdated>업데이트 단추 이벤트 (된 단추 해당 `CommandName` 속성이 &quot;업데이트&quot;로 설정) 컨트롤 내에서 클릭 하면 후의 <xref:System.Web.UI.WebControls.FormView>레코드를 업데이트 합니다.</xref:System.Web.UI.WebControls.FormView> </xref:System.Web.UI.WebControls.FormView.ItemUpdated> </xref:System.Web.UI.WebControls.FormView> 이 옵션을 사용 하면이 이벤트가 발생할 때마다 업데이트 작업의 결과 확인 하는 등의 사용자 정의 루틴을 수행 하는 이벤트 처리 메서드를 제공할 수 있습니다.       FormViewUpdatedEventArgs 개체는 영향을 받는 레코드 수를 확인할 수 있는 이벤트 처리 메서드 및 발생할 수 있는 모든 예외를 전달 됩니다. 업데이트 작업에 의해 영향 받는 레코드 수를 확인 하려면 사용 하 여는 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>속성.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> 사용 하 여는 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>속성 예외가 발생 한 것인지 확인 합니다.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> 설정 하 여 이벤트 처리 메서드에서 예외가 처리 되었는지 여부를 나타낼 수도 있습니다는 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>속성.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> 사용 하 여 업데이트 된 레코드에 대 한 원래 키 필드 값에 액세스 해야 하는 경우는 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>속성.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> 키가 아닌 필드의 원래 값을 사용 하 여 액세스할 수는 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A>속성.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> 업데이트 된 값 (키 필드를 편집 하려면 사용자를 허용 하는 경우 업데이트 된 키 필드 값을 포함)를 사용 하 여 액세스는 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>속성.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>       기본적으로는 <xref:System.Web.UI.WebControls.FormView>제어가 반환 하 여 지정 된 모드는 <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>속성 업데이트 작업 후.</xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> </xref:System.Web.UI.WebControls.FormView> 업데이트 작업 중에 발생 한 예외를 처리할 때 상태로 유지할 수 있습니다는 <xref:System.Web.UI.WebControls.FormView>컨트롤을 설정 하 여 편집 모드에는 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>속성을 `true`.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> </xref:System.Web.UI.WebControls.FormView>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.       목록이 FormViewUpdatedEventArgs 클래스의 인스턴스에 대 한 초기 속성 값에 대 한 참조는 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.%23ctor%2A>생성자.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.%23ctor%2A>"
  example:
  - "The following example demonstrates how to use the FormViewUpdatedEventArgs object passed to the event-handling method for the <xref:System.Web.UI.WebControls.FormView.ItemUpdated> event to determine whether an exception occurred during an update operation.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_148_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_148_1.aspx)]"
  syntax:
    content: 'public class FormViewUpdatedEventArgs : EventArgs'
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)
  id: '#ctor(System.Int32,System.Exception)'
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: FormViewUpdatedEventArgs(Int32,Exception)
  nameWithType: FormViewUpdatedEventArgs.FormViewUpdatedEventArgs(Int32,Exception)
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.FormViewUpdatedEventArgs(Int32,Exception)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.FormViewUpdatedEventArgs&quot;> </xref> 클래스입니다."
  remarks: "<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs>클래스</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> 의 새 인스턴스를 초기화 하려면이 생성자를 사용 합니다.       다음 표에서 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs>클래스</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> 의 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 초기 값 |   |--------------|-------------------|   | <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>| 값은 `affectedRows` 매개 변수입니다. |   | <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>| 에 포함 된 <xref:System.Exception?displayProperty=fullName>개체는 `e` 매개 변수입니다. |   | <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>| 로 초기화 `false`. |   | <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>| 로 초기화 `false`. |      > [!NOTE] > 이벤트를 발생 시킬 때이 생성자는 주로 컨트롤 개발자가 사용 됩니다.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> </xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> </xref:System.Exception?displayProperty=fullName> </xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>"
  syntax:
    content: public FormViewUpdatedEventArgs (int affectedRows, Exception e);
    parameters:
    - id: affectedRows
      type: System.Int32
      description: "업데이트 작업에 영향을 받는 행의 수입니다."
    - id: e
      type: System.Exception
      description: "<xref:System.Exception>업데이트 작업을 수행 하는 동안 발생 한 예외를 나타내는입니다.</xref:System.Exception> 예외가 발생 하는 경우 사용 하 여 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 이 매개 변수에 대 한 합니다."
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows
  id: AffectedRows
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: AffectedRows
  nameWithType: FormViewUpdatedEventArgs.AffectedRows
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "업데이트 작업에 영향을 받은 행 수를 가져옵니다."
  remarks: "받는 속성을 사용 하 여 업데이트 작업에 영향을 받는 레코드 수를 결정 합니다. 이 속성은 일반적으로 레코드의 정확한 수는 다음과 같은 상황에서 업데이트 되었는지 확인 하는 데 사용 됩니다.-레코드가 하나만 업데이트 되었는지 확인 합니다. 경우에 따라 잘못 작성 된 update 문이 여러 개의 레코드를 업데이트할 수 있습니다.      -예외 발생 시 키 지 않는 업데이트 작업 중 오류가 발생 하면 레코드가 업데이트 되었는지 확인 하십시오.      -때와 같은 충돌 감지 (낙관적 동시성 검사)를 지 원하는 데이터 소스 제어는 레코드가 업데이트 되었는지 확인는 <xref:System.Web.UI.WebControls.SqlDataSource>및 <xref:System.Web.UI.WebControls.ObjectDataSource>제어에 해당 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>속성이로 설정 된 `ConflictOptions.CompareAllValues` 열거형 값입니다.</xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.SqlDataSource> 이 설정에 따라 다른 사용자가 동시에 수정 된 레코드를 업데이트할 수 있습니다."
  example:
  - "The following example demonstrates how to use the AffectedRows property to verify that a record was updated.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1281_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1281_1.aspx)]"
  syntax:
    content: public int AffectedRows { get; }
    return:
      type: System.Int32
      description: "업데이트 작업에 영향을 받는 행의 수입니다."
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception
  id: Exception
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: Exception
  nameWithType: FormViewUpdatedEventArgs.Exception
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "(있는 경우) 예외를 가져옵니다는 업데이트 작업 동안 예외가 발생 합니다."
  remarks: "(있는 경우) 예외를 확인 하려면 예외 속성을 사용 하는 업데이트 작업 중에 발생 합니다. 이 속성을 반환 하는 경우 예외가 발생 된, `null`합니다.      > [!NOTE] > 예외가 발생 했습니다. 이벤트 처리기에서 예외를 처리 하려는 설정 해야는 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>속성을 `true`, 그렇지 않으면 예외를 다시 throw 된 <xref:System.Web.UI.WebControls.FormView>컨트롤.</xref:System.Web.UI.WebControls.FormView> </xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>"
  example:
  - "The following example demonstrates how to use the Exception property to determine whether an exception occurred during an update operation.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_564_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_564_1.aspx)]"
  syntax:
    content: public Exception Exception { get; }
    return:
      type: System.Exception
      description: "<xref:System.Exception>업데이트 작업 중에 발생 하는 예외를 나타내는 개체입니다.</xref:System.Exception>"
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled
  id: ExceptionHandled
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: ExceptionHandled
  nameWithType: FormViewUpdatedEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "업데이트 작업 중에 발생 하는 예외 처리 되었는지 여부를 이벤트 처리기를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "업데이트 작업 중 예외가 발생 한 경우, ExceptionHandled 속성 처리 되었는지 나타내는 예외 이벤트에 처리기를 사용 합니다. 이 속성이로 설정 된 경우 `true`, 예외 처리 된 것으로 간주 되어 의해 다시 throw 되지 않습니다는 <xref:System.Web.UI.WebControls.FormView>컨트롤.</xref:System.Web.UI.WebControls.FormView> 이 속성은로 설정 하는 경우 `false`, 예외가 다시 throw 됩니다. 발생 한 예외를 확인 하려면는 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>속성.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>"
  example:
  - "The following example demonstrates how to use the ExceptionHandled property to indicate that the exception was handled in the event handler.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_345_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_345_1.aspx)]"
  syntax:
    content: public bool ExceptionHandled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>예외 이벤트에 처리기; 처리 된 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode
  id: KeepInEditMode
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: KeepInEditMode
  nameWithType: FormViewUpdatedEventArgs.KeepInEditMode
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "나타내는 값을 가져오거나 여부는 <xref href=&quot;System.Web.UI.WebControls.FormView&quot;> </xref> 업데이트 작업 후 컨트롤 편집 모드에 유지 해야 합니다."
  remarks: "기본적으로는 <xref:System.Web.UI.WebControls.FormView>제어가 반환 하 여 지정 된 모드는 <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>속성 업데이트 작업 후.</xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> </xref:System.Web.UI.WebControls.FormView> KeepInEditMode 속성을 사용 하 여 지정할 수 있는지 여부를 <xref:System.Web.UI.WebControls.FormView>컨트롤 편집 모드에 유지 해야 합니다.</xref:System.Web.UI.WebControls.FormView> 계속 하려면는 <xref:System.Web.UI.WebControls.FormView>편집 모드에 컨트롤을이 속성을 설정 `true`.</xref:System.Web.UI.WebControls.FormView>      > [!NOTE] > 상황이 발생 하면 (예: 예외 발생) 정상적인 경우 다르게 동작 하도록 컨트롤을 필요로 하는 경우에이 속성을 사용 해야 합니다. 경우는 <xref:System.Web.UI.WebControls.FormView>컨트롤이 기본적으로 편집 모드로 유지으로 설정 해야 합니다는 <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>속성 대신.</xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> </xref:System.Web.UI.WebControls.FormView>"
  example:
  - "The following example demonstrates how to use the KeepInEditMode property to keep a <xref:System.Web.UI.WebControls.FormView> control in edit mode when an exception occurs.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1052_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1052_1.aspx)]"
  syntax:
    content: public bool KeepInEditMode { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>업데이트 작업 후 편집 모드를 유지 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys
  id: Keys
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: Keys
  nameWithType: FormViewUpdatedEventArgs.Keys
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "업데이트 된 레코드에 대 한 원래 키 필드 이름/값 쌍을 포함 하는 사전을 가져옵니다."
  remarks: "키 속성에 나열 된 키 필드의 원래 값이 포함 된 <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>속성의는 <xref:System.Web.UI.WebControls.FormView>컨트롤.</xref:System.Web.UI.WebControls.FormView> </xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> 업데이트 된 레코드에 대 한 키 필드의 값에 액세스 하려면 키 속성을 사용 합니다. 예를 들어 업데이트 된 레코드의 로그를 유지할 이러한 값을 사용할 수 있습니다.      > [!NOTE] > 키 필드의 값을 업데이트 하는 사용자를 허용 하는 경우는 <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A>속성 키 필드의 원래 값을 포함 합니다.</xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> 업데이트 된 값에 저장 됩니다는 <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>속성.</xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>       키 속성은 반환 된 <xref:System.Collections.Specialized.OrderedDictionary>구현 하는 개체는 <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName>인터페이스.</xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> </xref:System.Collections.Specialized.OrderedDictionary> <xref:System.Collections.Specialized.OrderedDictionary>개체에 포함 되어 <xref:System.Collections.DictionaryEntry?displayProperty=fullName>업데이트 된 레코드의 필드를 나타내는 개체입니다.</xref:System.Collections.DictionaryEntry?displayProperty=fullName> </xref:System.Collections.Specialized.OrderedDictionary> 필드 이름에 액세스 하려면 사용 하 여는 <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A>의 속성은 <xref:System.Collections.Specialized.OrderedDictionary>개체입니다.</xref:System.Collections.Specialized.OrderedDictionary> </xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> 마찬가지로, 사용 하 여 필드 값에 액세스할 수 있습니다는 <xref:System.Collections.Specialized.OrderedDictionary.Values%2A>속성.</xref:System.Collections.Specialized.OrderedDictionary.Values%2A>      > [!NOTE] >를 사용할 수도 있습니다의 인덱서는 <xref:System.Collections.Specialized.OrderedDictionary>직접 값 필드에 액세스 하는 개체입니다.</xref:System.Collections.Specialized.OrderedDictionary> 데이터 소스 필드 순서를 사용 하는 컨트롤 (예: <xref:System.Web.UI.WebControls.AccessDataSource>) 인덱스로 필드 값에 액세스할 수 있습니다.</xref:System.Web.UI.WebControls.AccessDataSource>"
  example:
  - "The following example demonstrates how to use the Keys property to access the values of the key field for an updated record.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_531_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_531_1.aspx)]"
  syntax:
    content: public System.Collections.Specialized.IOrderedDictionary Keys { get; }
    return:
      type: System.Collections.Specialized.IOrderedDictionary
      description: "<xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> 업데이트 된 레코드에 대 한 원래 키 필드 이름/값 쌍의 사전에 들어 있는입니다."
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues
  id: NewValues
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: NewValues
  nameWithType: FormViewUpdatedEventArgs.NewValues
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "업데이트 된 레코드에 대 한 새 필드 이름/값 쌍을 포함 하는 사전을 가져옵니다."
  remarks: "새 값 속성을 사용 하 여 업데이트 된 레코드에 대 한 새 필드 값에 액세스 하도록 합니다. 예를 들어 업데이트 된 레코드의 로그를 유지할 이러한 값을 사용할 수 있습니다.      > [!NOTE] > 키 필드의 값을 업데이트 하는 사용자를 허용 하는 경우는 <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A>속성 키 필드의 원래 값을 포함 합니다.</xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> 업데이트 된 값에 저장 됩니다는 <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>속성.</xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>       NewValues 속성은 반환 된 <xref:System.Collections.Specialized.OrderedDictionary>구현 하는 개체는 <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName>인터페이스.</xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> </xref:System.Collections.Specialized.OrderedDictionary> <xref:System.Collections.Specialized.OrderedDictionary>개체에 포함 되어 <xref:System.Collections.DictionaryEntry?displayProperty=fullName>업데이트 된 레코드의 필드를 나타내는 개체입니다.</xref:System.Collections.DictionaryEntry?displayProperty=fullName> </xref:System.Collections.Specialized.OrderedDictionary> 필드 이름에 액세스 하려면 사용 하 여는 <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A>의 속성은 <xref:System.Collections.Specialized.OrderedDictionary>개체입니다.</xref:System.Collections.Specialized.OrderedDictionary> </xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> 마찬가지로, 사용 하 여 필드 값에 액세스할 수 있습니다는 <xref:System.Collections.Specialized.OrderedDictionary.Values%2A>속성.</xref:System.Collections.Specialized.OrderedDictionary.Values%2A>      > [!NOTE] >를 사용할 수도 있습니다의 인덱서는 <xref:System.Collections.Specialized.OrderedDictionary>직접 값 필드에 액세스 하는 개체입니다.</xref:System.Collections.Specialized.OrderedDictionary> 데이터 소스 필드 순서를 사용 하는 컨트롤 (예: <xref:System.Web.UI.WebControls.AccessDataSource>) 인덱스로 필드 값에 액세스할 수 있습니다.</xref:System.Web.UI.WebControls.AccessDataSource>"
  example:
  - "The following example demonstrates how to use the NewValues property to access the new values entered by the user for the non-key fields of the updated record.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_253_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_253_1.aspx)]"
  syntax:
    content: public System.Collections.Specialized.IOrderedDictionary NewValues { get; }
    return:
      type: System.Collections.Specialized.IOrderedDictionary
      description: "<xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> 업데이트 된 레코드에 대 한 새 필드 이름/값 쌍의 사전에 들어 있는입니다."
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues
  id: OldValues
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: OldValues
  nameWithType: FormViewUpdatedEventArgs.OldValues
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "업데이트 된 레코드에 대 한 키가 아닌 필드의 원래 이름/값 쌍을 포함 하는 사전을 가져옵니다."
  remarks: "업데이트 된 레코드에 대 한 키가 아닌 필드의 원래 값에 액세스 하려면 OldValues 속성을 사용 합니다. 예를 들어 업데이트 된 레코드의 로그를 유지할 이러한 값을 사용할 수 있습니다. 와 같은 충돌 감지 (낙관적 동시성 검사)를 지 원하는 데이터 소스 제어는 <xref:System.Web.UI.WebControls.SqlDataSource>및 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤와 해당 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>속성이로 설정는 `ConflictOptions.CompareAllValues` 또한 업데이트 작업이 수행 되기 전에 데이터베이스의 레코드에 대해 이러한 원래 값을 비교 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.SqlDataSource> 레코드가 수정 된 경우 다른 사용자가 동시에, 레코드 업데이트 되지 않습니다.      > [!NOTE] >는 <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A>속성 키 필드가 포함 되지 않습니다.</xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A> 키 필드의 값을 업데이트 하려는 사용자를 허용 하는 경우 키 필드의 원래 값에 저장 됩니다는 <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A>속성.</xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> 업데이트 된 값에 저장 됩니다는 <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>속성.</xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>       <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>속성에서 반환 된 <xref:System.Collections.Specialized.OrderedDictionary>구현 하는 개체는 <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName>인터페이스.</xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> </xref:System.Collections.Specialized.OrderedDictionary> </xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> <xref:System.Collections.Specialized.OrderedDictionary>개체에 포함 되어 <xref:System.Collections.DictionaryEntry?displayProperty=fullName>업데이트 된 레코드의 필드를 나타내는 개체입니다.</xref:System.Collections.DictionaryEntry?displayProperty=fullName> </xref:System.Collections.Specialized.OrderedDictionary> 필드 이름에 액세스 하려면 사용 하 여는 <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A>의 속성은 <xref:System.Collections.Specialized.OrderedDictionary>개체입니다.</xref:System.Collections.Specialized.OrderedDictionary> </xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> 마찬가지로, 사용 하 여 필드 값에 액세스할 수 있습니다는 <xref:System.Collections.Specialized.OrderedDictionary.Values%2A>속성.</xref:System.Collections.Specialized.OrderedDictionary.Values%2A>      > [!NOTE] >를 사용할 수도 있습니다의 인덱서는 <xref:System.Collections.Specialized.OrderedDictionary>직접 값 필드에 액세스 하는 개체입니다.</xref:System.Collections.Specialized.OrderedDictionary> 데이터 소스 필드 순서를 사용 하는 컨트롤 (예: <xref:System.Web.UI.WebControls.AccessDataSource>) 인덱스로 필드 값에 액세스할 수 있습니다.</xref:System.Web.UI.WebControls.AccessDataSource>"
  example:
  - "The following example demonstrates how to use the OldValues property to access the original values of the non-key fields for the updated record.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_164_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_164_1.aspx)]"
  syntax:
    content: public System.Collections.Specialized.IOrderedDictionary OldValues { get; }
    return:
      type: System.Collections.Specialized.IOrderedDictionary
      description: "<xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> 업데이트 된 레코드에 대 한 필드의 원래 이름/값 쌍의 사전에 들어 있는입니다."
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: FormViewUpdatedEventArgs(Int32,Exception)
  nameWithType: FormViewUpdatedEventArgs.FormViewUpdatedEventArgs(Int32,Exception)
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.FormViewUpdatedEventArgs(Int32,Exception)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: AffectedRows
  nameWithType: FormViewUpdatedEventArgs.AffectedRows
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: Exception
  nameWithType: FormViewUpdatedEventArgs.Exception
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: FormViewUpdatedEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: KeepInEditMode
  nameWithType: FormViewUpdatedEventArgs.KeepInEditMode
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: Keys
  nameWithType: FormViewUpdatedEventArgs.Keys
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys
- uid: System.Collections.Specialized.IOrderedDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: IOrderedDictionary
  nameWithType: IOrderedDictionary
  fullName: System.Collections.Specialized.IOrderedDictionary
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: NewValues
  nameWithType: FormViewUpdatedEventArgs.NewValues
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: OldValues
  nameWithType: FormViewUpdatedEventArgs.OldValues
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: FormViewUpdatedEventArgs
  nameWithType: FormViewUpdatedEventArgs.FormViewUpdatedEventArgs
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: AffectedRows
  nameWithType: FormViewUpdatedEventArgs.AffectedRows
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: Exception
  nameWithType: FormViewUpdatedEventArgs.Exception
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: FormViewUpdatedEventArgs.ExceptionHandled
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: KeepInEditMode
  nameWithType: FormViewUpdatedEventArgs.KeepInEditMode
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: Keys
  nameWithType: FormViewUpdatedEventArgs.Keys
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: NewValues
  nameWithType: FormViewUpdatedEventArgs.NewValues
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: OldValues
  nameWithType: FormViewUpdatedEventArgs.OldValues
