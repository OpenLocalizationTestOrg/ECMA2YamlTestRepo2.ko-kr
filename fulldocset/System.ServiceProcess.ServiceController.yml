### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceController
  id: ServiceController
  children:
  - System.ServiceProcess.ServiceController.#ctor
  - System.ServiceProcess.ServiceController.#ctor(System.String)
  - System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  - System.ServiceProcess.ServiceController.CanPauseAndContinue
  - System.ServiceProcess.ServiceController.CanShutdown
  - System.ServiceProcess.ServiceController.CanStop
  - System.ServiceProcess.ServiceController.Close
  - System.ServiceProcess.ServiceController.Continue
  - System.ServiceProcess.ServiceController.DependentServices
  - System.ServiceProcess.ServiceController.DisplayName
  - System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  - System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  - System.ServiceProcess.ServiceController.GetDevices
  - System.ServiceProcess.ServiceController.GetDevices(System.String)
  - System.ServiceProcess.ServiceController.GetServices
  - System.ServiceProcess.ServiceController.GetServices(System.String)
  - System.ServiceProcess.ServiceController.MachineName
  - System.ServiceProcess.ServiceController.Pause
  - System.ServiceProcess.ServiceController.Refresh
  - System.ServiceProcess.ServiceController.ServiceHandle
  - System.ServiceProcess.ServiceController.ServiceName
  - System.ServiceProcess.ServiceController.ServicesDependedOn
  - System.ServiceProcess.ServiceController.ServiceType
  - System.ServiceProcess.ServiceController.Start
  - System.ServiceProcess.ServiceController.Start(System.String[])
  - System.ServiceProcess.ServiceController.StartType
  - System.ServiceProcess.ServiceController.Status
  - System.ServiceProcess.ServiceController.Stop
  - System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  - System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  langs:
  - csharp
  name: ServiceController
  nameWithType: ServiceController
  fullName: System.ServiceProcess.ServiceController
  type: Class
  summary: "Windows 서비스를 나타내며 실행 중이거나 중지 된 서비스에 연결, 조작 또는 항목에 대 한 정보를 가져올 수 있습니다."
  remarks: "연결 하 고 기존 서비스의 동작을 제어 하는 ServiceController 클래스를 사용할 수 있습니다. ServiceController 클래스의 인스턴스를 만들 때 특정 Windows 서비스와 상호 작용 하도록 속성을 설정 합니다. 그런 다음 시작, 중지, 그렇지 않으면 서비스를 관리 하는 클래스를 사용할 수 있습니다.       대부분 관리 목적에서 ServiceController 구성 요소를 사용 합니다. 예를 들어 ServiceController 인스턴스를 통해 서비스에 사용자 지정 명령을 보냅니다 하는 Windows 또는 웹 응용 프로그램을 만들 수 있습니다. 서비스 제어 관리자 (SCM) Microsoft Management Console 스냅인을 사용 하는 사용자 지정 명령의 지원 하지 않으므로 유용 하 게 것.       작용할 서비스를 식별 하는 데 두 개의 속성을 설정 해야 ServiceController의 인스턴스를 만든 후: 컴퓨터 이름 및 제어 하려는 서비스의 이름입니다.      > [!NOTE] > 기본적으로 <xref:System.ServiceProcess.ServiceController.MachineName%2A>로컬 컴퓨터로 설정 되어 있으므로 다른 컴퓨터를 가리키도록 인스턴스 설정 하려는 경우가 아니면 변경할 필요가 없습니다.</xref:System.ServiceProcess.ServiceController.MachineName%2A>       일반적으로 서비스 작성자가 특정 명령과 연결 된 동작을 사용자 지정 코드를 작성 합니다. 예를 들어, 서비스에 응답 하는 코드를 포함할 수 있습니다는 <xref:System.ServiceProcess.ServiceBase.OnPause%2A?displayProperty=fullName>명령입니다.</xref:System.ServiceProcess.ServiceBase.OnPause%2A?displayProperty=fullName> 경우에 대 한 사용자 지정 처리는 <xref:System.ServiceProcess.ServiceController.Pause%2A>시스템 서비스가 일시 중지 되기 전에 작업 실행.</xref:System.ServiceProcess.ServiceController.Pause%2A>       서비스가 처리할 수 있는 명령 집합이 속성에 따라 다릅니다. 예를 들어, 설정할 수는 <xref:System.ServiceProcess.ServiceController.CanStop%2A>를 서비스에 대 한 속성 `false`.</xref:System.ServiceProcess.ServiceController.CanStop%2A> 이 설정은 렌더링는 `Stop` 해당 서비스에서 사용할 수 없는 명령;에 필요한 단추를 사용 하지 않도록 설정 하 여 SCM에서 서비스를 중지 되지 않도록 합니다. 사용자 코드에서 서비스를 중지 하려고 하면 시스템에서 오류가 발생 하 고 오류 메시지를 표시 &quot;를 중지 하지 못했습니다 `servicename`.&quot;"
  example:
  - "The following example demonstrates the use of the ServiceController class to control the `SimpleService` service example.  \n  \n [!code-cs[ServiceControllerClass#1](~/add/codesnippet/csharp/t-system.serviceprocess._6_1.cs)]\n [!code-vb[ServiceControllerClass#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._6_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.ServiceProcess.Design.ServiceControllerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ServiceProcess.ServiceProcessDescription("ServiceControllerDesc")]

      public class ServiceController : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController()
  nameWithType: ServiceController.ServiceController()
  fullName: System.ServiceProcess.ServiceController.ServiceController()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 특정 서비스와 연결 되지 않은 클래스입니다."
  syntax:
    content: public ServiceController ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController(String)
  nameWithType: ServiceController.ServiceController(String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String)
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 로컬 컴퓨터에 기존 서비스와 연결 된 클래스를 합니다."
  remarks: ''
  example:
  - "The following example demonstrates the use of the ServiceController constructor to create a <xref:System.ServiceProcess.ServiceController> object that is used to control a sample service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/m-system.serviceprocess._0_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/m-system.serviceprocess._0_1.vb)]"
  syntax:
    content: public ServiceController (string name);
    parameters:
    - id: name
      type: System.String
      description: "시스템에 서비스를 식별 하는 이름입니다. 서비스에 대 한 표시 이름을 수도 있습니다."
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>잘못 되었습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController(String,String)
  nameWithType: ServiceController.ServiceController(String,String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String,String)
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 지정된 된 컴퓨터에서 기존 서비스와 연결 된 클래스를 합니다."
  remarks: "에 대 한는 `machineName` 사용할 수 있습니다 매개 변수를 &quot;.&quot; 로컬 컴퓨터를 나타낼 수 있습니다."
  syntax:
    content: public ServiceController (string name, string machineName);
    parameters:
    - id: name
      type: System.String
      description: "시스템에 서비스를 식별 하는 이름입니다. 서비스에 대 한 표시 이름을 수도 있습니다."
    - id: machineName
      type: System.String
      description: "서비스가 상주 하는 컴퓨터입니다."
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>잘못 되었습니다.       -또는- <code>machineName</code> 올바르지 않습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue
  id: CanPauseAndContinue
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceController.CanPauseAndContinue
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "서비스를 중지 하거나 시작할 수 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanPauseAndContinue property to determine whether a service can pause and continue. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._8_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._8_1.vb)]"
  syntax:
    content: public bool CanPauseAndContinue { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>서비스를 일시 중지할 수 있고 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ServiceProcess.ServiceController.CanPauseAndContinue*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanShutdown
  id: CanShutdown
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
  fullName: System.ServiceProcess.ServiceController.CanShutdown
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "시스템이 종료 될 때 서비스 알림을 받을지 여부를 나타내는 값을 가져옵니다."
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanShutdown property to determine whether a service provides a handler for a shutdown event. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._6_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._6_1.vb)]"
  syntax:
    content: public bool CanShutdown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>시스템이 종료 될 때;는 서비스가 알림을 받아야 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ServiceProcess.ServiceController.CanShutdown*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanStop
  id: CanStop
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanStop
  nameWithType: ServiceController.CanStop
  fullName: System.ServiceProcess.ServiceController.CanStop
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "시작 된 후 서비스를 중지할 수 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanStop property to determine whether a service provides a handler for a stop event. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._1_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._1_1.vb)]"
  syntax:
    content: public bool CanStop { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>서비스를 중지할 수 있습니다 및 <xref:System.ServiceProcess.ServiceBase.OnStop*>메서드 호출 되 고, 그러지 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceProcess.ServiceBase.OnStop*>"
  overload: System.ServiceProcess.ServiceController.CanStop*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Close
  id: Close
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Close()
  nameWithType: ServiceController.Close()
  fullName: System.ServiceProcess.ServiceController.Close()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "연결을 끊고 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 서비스에서 인스턴스 및 인스턴스가 할당 된 모든 리소스를 해제 합니다."
  remarks: "닫기를 해제와 관련 된 모든 핸들의 <xref:System.ServiceProcess.ServiceController>인스턴스.</xref:System.ServiceProcess.ServiceController>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Close*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Continue
  id: Continue
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Continue()
  nameWithType: ServiceController.Continue()
  fullName: System.ServiceProcess.ServiceController.Continue()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "일시 중지 된 후에 서비스를 계속 합니다."
  remarks: "계속 하기를 호출 하는 서비스에 대 한 상태가 처음으로 변경 됩니다 `ContinuePending` 그런 다음 계속 메서드의 반환 값으로 변경 될 및 `Running`합니다.       서비스 컨트롤러 상태가 될 때까지 계속 서비스에 대해 호출할 수 없습니다 `Paused`합니다."
  example:
  - "The following example demonstrates the use of the Continue method to continue a paused service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#5](~/add/codesnippet/csharp/m-system.serviceprocess._2_1.cs)]\n [!code-vb[ServiceControllerClass#5](~/add/codesnippet/visualbasic/m-system.serviceprocess._2_1.vb)]"
  syntax:
    content: public void Continue ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Continue*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.DependentServices
  id: DependentServices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: DependentServices
  nameWithType: ServiceController.DependentServices
  fullName: System.ServiceProcess.ServiceController.DependentServices
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "이 연결 된 서비스에 종속 된 서비스의 집합을 가져옵니다 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 인스턴스."
  remarks: "응용 프로그램에서 호출 하는 경우 시스템을 중지 하는 서비스를 나타내는 DependentServices 배열 <xref:System.ServiceProcess.ServiceController.Stop%2A>이 서비스에 대 한.</xref:System.ServiceProcess.ServiceController.Stop%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that are dependent on the Event Log service.  \n  \n [!code-cs[ServiceController#3](~/add/codesnippet/csharp/p-system.serviceprocess._4_1.cs)]\n [!code-cpp[ServiceController#3](~/add/codesnippet/cpp/p-system.serviceprocess._4_1.cpp)]\n [!code-vb[ServiceController#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._4_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceController[] DependentServices { get; }
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "배열을 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 각각이 서비스에 의존 하는 서비스와 연결 된 인스턴스."
  overload: System.ServiceProcess.ServiceController.DependentServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.DisplayName
  id: DisplayName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: DisplayName
  nameWithType: ServiceController.DisplayName
  fullName: System.ServiceProcess.ServiceController.DisplayName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "서비스에 사용할 이름을 가져오거나 설정 합니다."
  remarks: "DisplayName을 빈 문자열로 설정할 수 있습니다 (&quot;&quot;),이 속성을 설정 하지만 `null` 예외를 throw 합니다."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that are dependent on the Event Log service.  \n  \n [!code-cs[ServiceController#3](~/add/codesnippet/csharp/p-system.serviceprocess._3_1.cs)]\n [!code-cpp[ServiceController#3](~/add/codesnippet/cpp/p-system.serviceprocess._3_1.cpp)]\n [!code-vb[ServiceController#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._3_1.vb)]"
  syntax:
    content: public string DisplayName { get; set; }
    return:
      type: System.String
      description: "서비스를 식별 하는 데 사용할 수 있는 서비스의 이름입니다."
  overload: System.ServiceProcess.ServiceController.DisplayName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "DisplayName이 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ServiceController.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceController.Dispose(Boolean)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public `Dispose()`메서드 및 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> `Dispose()`보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다. <xref:System.Object.Finalize%2A>호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</xref:System.Object.Finalize%2A>       경우는 `disposing` 매개 변수가 true 이면이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.ServiceProcess.ServiceController>참조.</xref:System.ServiceProcess.ServiceController> 이 메서드 호출에서 `Dispose()` 각 참조 된 개체의 메서드."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.ServiceProcess.ServiceController.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  id: ExecuteCommand(System.Int32)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ExecuteCommand(Int32)
  nameWithType: ServiceController.ExecuteCommand(Int32)
  fullName: System.ServiceProcess.ServiceController.ExecuteCommand(Int32)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "서비스에서 사용자 지정 명령을 실행합니다."
  remarks: "명령 실행을 호출 하는 경우에 서비스의 상태 변경 되지 않습니다. 서비스가 시작 된 경우 상태가 유지 되 고 `Running`합니다. 서비스가 중지 된 상태가 유지 되 고 `Stopped`등입니다. 사용자 지정 명령, 처리 서비스 재정의 해야 합니다는 <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>메서드 변수로 지정 된 명령에 대 한 처리기를 제공 하 고는 `command` 매개 변수.</xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>"
  example:
  - "The following code example shows the use of the ExecuteCommand method to execute custom commands in the `SimpleService` service example.  \n  \n [!code-cs[ServiceContoller_ExecuteCommand#1](~/add/codesnippet/csharp/m-system.serviceprocess._5_1.cs)]\n [!code-vb[ServiceContoller_ExecuteCommand#1](~/add/codesnippet/visualbasic/m-system.serviceprocess._5_1.vb)]"
  syntax:
    content: public void ExecuteCommand (int command);
    parameters:
    - id: command
      type: System.Int32
      description: "실행할 사용자 지정 명령을 나타내는 응용 프로그램 정의 명령 플래그입니다. 값은 128 및 256의 사이 여야 합니다."
  overload: System.ServiceProcess.ServiceController.ExecuteCommand*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetDevices
  id: GetDevices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetDevices()
  nameWithType: ServiceController.GetDevices()
  fullName: System.ServiceProcess.ServiceController.GetDevices()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "로컬 컴퓨터에서 장치 드라이버 서비스를 검색합니다."
  remarks: "GetDevices 장치 드라이버 서비스는 로컬 컴퓨터에서 반환합니다. 비 장치 드라이버 서비스 또는 드라이버가 아닌 서비스를 검색 하려면는 <xref:System.ServiceProcess.ServiceController.GetServices%2A>메서드.</xref:System.ServiceProcess.ServiceController.GetServices%2A> 함께 두 메서드는 컴퓨터에서 모든 서비스에 대 한 액세스를 제공합니다."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the device driver services on the local computer.  \n  \n [!code-cs[ServiceController#5](~/add/codesnippet/csharp/m-system.serviceprocess._6_1.cs)]\n [!code-cpp[ServiceController#5](~/add/codesnippet/cpp/m-system.serviceprocess._6_1.cpp)]\n [!code-vb[ServiceController#5](~/add/codesnippet/visualbasic/m-system.serviceprocess._6_1.vb)]"
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetDevices ();
    parameters: []
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "형식의 배열 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 에 있는 각 요소는 로컬 컴퓨터에 장치 드라이버 서비스와 연결 합니다."
  overload: System.ServiceProcess.ServiceController.GetDevices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetDevices(System.String)
  id: GetDevices(System.String)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetDevices(String)
  nameWithType: ServiceController.GetDevices(String)
  fullName: System.ServiceProcess.ServiceController.GetDevices(String)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "지정된 된 컴퓨터에 장치 드라이버 서비스를 검색합니다."
  remarks: "<xref:System.ServiceProcess.ServiceController.GetDevices%2A>지정된 된 컴퓨터에서 장치 드라이버 서비스를 반환합니다.</xref:System.ServiceProcess.ServiceController.GetDevices%2A> 비 장치 드라이버 서비스 또는 드라이버가 아닌 서비스를 검색 하려면는 <xref:System.ServiceProcess.ServiceController.GetServices%2A>메서드.</xref:System.ServiceProcess.ServiceController.GetServices%2A> 함께 두 메서드는 컴퓨터에서 모든 서비스에 대 한 액세스를 제공합니다."
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetDevices (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "장치 드라이버 서비스를 검색할 컴퓨터입니다."
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "형식의 배열 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 에 있는 각 요소는 지정된 된 컴퓨터에서 장치 드라이버 서비스와 연결 합니다."
  overload: System.ServiceProcess.ServiceController.GetDevices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> machineName </code> 매개 변수의 구문이 잘못 되었습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetServices
  id: GetServices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetServices()
  nameWithType: ServiceController.GetServices()
  fullName: System.ServiceProcess.ServiceController.GetServices()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "장치 드라이버 서비스를 제외 하 고 로컬 컴퓨터에서 모든 서비스를 검색합니다."
  remarks: "GetServices만 비 장치 드라이버 서비스와 서비스는 로컬 컴퓨터에서 드라이버를 반환 합니다. 장치 드라이버 서비스를 검색 하려면는 <xref:System.ServiceProcess.ServiceController.GetDevices%2A>메서드.</xref:System.ServiceProcess.ServiceController.GetDevices%2A> 함께 두 메서드는 컴퓨터에서 모든 서비스에 대 한 액세스를 제공합니다."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the services that are running on the local computer.  \n  \n [!code-cs[ServiceController#6](~/add/codesnippet/csharp/m-system.serviceprocess._7_1.cs)]\n [!code-cpp[ServiceController#6](~/add/codesnippet/cpp/m-system.serviceprocess._7_1.cpp)]\n [!code-vb[ServiceController#6](~/add/codesnippet/visualbasic/m-system.serviceprocess._7_1.vb)]"
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetServices ();
    parameters: []
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "형식의 배열 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 에 있는 각 요소는 로컬 컴퓨터에는 서비스와 연결 합니다."
  overload: System.ServiceProcess.ServiceController.GetServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetServices(System.String)
  id: GetServices(System.String)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetServices(String)
  nameWithType: ServiceController.GetServices(String)
  fullName: System.ServiceProcess.ServiceController.GetServices(String)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "장치 드라이버 서비스를 제외 하 고 지정된 된 컴퓨터에서 모든 서비스를 검색합니다."
  remarks: "<xref:System.ServiceProcess.ServiceController.GetServices%2A>지정 된 컴퓨터에서 드라이버가 아닌 서비스와 비 장치 드라이버 서비스에만 반환 합니다.</xref:System.ServiceProcess.ServiceController.GetServices%2A> 장치 드라이버 서비스를 검색 하려면는 <xref:System.ServiceProcess.ServiceController.GetDevices%2A>메서드.</xref:System.ServiceProcess.ServiceController.GetDevices%2A> 함께 두 메서드는 컴퓨터에서 모든 서비스에 대 한 액세스를 제공합니다."
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetServices (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "서비스를 검색할 컴퓨터입니다."
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "형식의 배열 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 에 있는 각 요소는 지정된 된 컴퓨터에는 서비스와 연결 합니다."
  overload: System.ServiceProcess.ServiceController.GetServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> machineName </code> 매개 변수의 구문이 잘못 되었습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.MachineName
  id: MachineName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: MachineName
  nameWithType: ServiceController.MachineName
  fullName: System.ServiceProcess.ServiceController.MachineName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "이 서비스가 상주 하는 컴퓨터의 이름을 가져오거나 설정 합니다."
  remarks: "컴퓨터 이름 앞에 백슬래시 문자 없이이 서비스를 실행 하는 서버의 이름인 (\\\\\\\\)."
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "이 연결 된 서비스를 실행 하는 컴퓨터의 이름을 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 인스턴스. 기본값은 로컬 컴퓨터 (&quot;.&quot;)."
  overload: System.ServiceProcess.ServiceController.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "MachineName 구문이 잘못 되었습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Pause
  id: Pause
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Pause()
  nameWithType: ServiceController.Pause()
  fullName: System.ServiceProcess.ServiceController.Pause()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "서비스 작업을 일시 중단합니다."
  remarks: "호출할 수 없습니다 <xref:System.ServiceProcess.ServiceController.Continue%2A>서비스 컨트롤러 상태는 해당 서비스에 대해 `Paused`.</xref:System.ServiceProcess.ServiceController.Continue%2A>"
  example:
  - "The following example demonstrates the use of the Pause method to pause a service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#4](~/add/codesnippet/csharp/m-system.serviceprocess._4_1.cs)]\n [!code-vb[ServiceControllerClass#4](~/add/codesnippet/visualbasic/m-system.serviceprocess._4_1.vb)]"
  syntax:
    content: public void Pause ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Pause*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Refresh
  id: Refresh
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Refresh()
  nameWithType: ServiceController.Refresh()
  fullName: System.ServiceProcess.ServiceController.Refresh()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "속성의 현재 값을 다시 설정 하 여 속성 값을 새로 고칩니다."
  remarks: "새로 고침 메서드를 사용 하면는 <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>, <xref:System.ServiceProcess.ServiceController.DependentServices%2A>, 및 <xref:System.ServiceProcess.ServiceController.Status%2A>속성이 다음 참조 될 때 현재 값으로 다시 설정 됩니다.</xref:System.ServiceProcess.ServiceController.Status%2A> </xref:System.ServiceProcess.ServiceController.DependentServices%2A> </xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>"
  example:
  - "The following example demonstrates the use of the Refresh method to obtain the status of a service. The code instructs a service to pause, and then waits for the status to reflect the change. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#4](~/add/codesnippet/csharp/m-system.serviceprocess._3_1.cs)]\n [!code-vb[ServiceControllerClass#4](~/add/codesnippet/visualbasic/m-system.serviceprocess._3_1.vb)]"
  syntax:
    content: public void Refresh ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceHandle
  id: ServiceHandle
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
  fullName: System.ServiceProcess.ServiceController.ServiceHandle
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "서비스에 대 한 핸들을 가져옵니다."
  syntax:
    content: public System.Runtime.InteropServices.SafeHandle ServiceHandle { get; }
    return:
      type: System.Runtime.InteropServices.SafeHandle
      description: "A <xref:System.Runtime.InteropServices.SafeHandle>서비스에 대 한 핸들을 포함 하는.</xref:System.Runtime.InteropServices.SafeHandle>"
  overload: System.ServiceProcess.ServiceController.ServiceHandle*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceName
  id: ServiceName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceName
  nameWithType: ServiceController.ServiceName
  fullName: System.ServiceProcess.ServiceController.ServiceName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "이 인스턴스가 참조 하는 서비스를 식별 하는 이름을 가져오거나 설정 합니다."
  remarks: "ServiceName 서비스의 서비스 제어 관리자를 식별합니다. 이 속성을 변경 하면는 <xref:System.ServiceProcess.ServiceController>다른 서비스에 바인딩하는 변경 되지 않습니다 어떤 서비스 제어 관리자의 Microsoft Management Console 스냅인 표시 인스턴스.</xref:System.ServiceProcess.ServiceController>       이 속성의 값이 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>해당 <xref:System.ServiceProcess.ServiceInstaller>클래스</xref:System.ServiceProcess.ServiceInstaller> 의 속성</xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 에 대 한 서비스에 대 한 기록 된 이름과 동일 해야 사용자 지정 서비스를 구현 하는 경우 코드에서 ServiceName은 일반적으로 설정는 `main()` 실행 파일의 함수입니다.       ServiceName 속성을 다시 설정 하는 경우 속성을 설정 하는 메서드가이 인스턴스를 설정 하는 <xref:System.ServiceProcess.ServiceController.DisplayName%2A>빈 문자열 (&quot;&quot;).</xref:System.ServiceProcess.ServiceController.DisplayName%2A>"
  syntax:
    content: public string ServiceName { get; set; }
    return:
      type: System.String
      description: "서비스를 식별 하는 이름이 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 인스턴스가 참조 합니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.ServiceProcess.ServiceController.ServiceName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "ServiceName은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ServiceName 속성의 구문이 잘못 되었습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn
  id: ServicesDependedOn
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceController.ServicesDependedOn
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "이 서비스에 종속 하는 서비스의 집합입니다."
  remarks: "ServicesDependedOn 배열에 있는 모든 서비스를 실행 하지 않는 경우이 서비스를 시작할 수 없습니다."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that the Messenger service is dependent on.  \n  \n [!code-cs[ServiceController#4](~/add/codesnippet/csharp/p-system.serviceprocess._2_1.cs)]\n [!code-cpp[ServiceController#4](~/add/codesnippet/cpp/p-system.serviceprocess._2_1.cpp)]\n [!code-vb[ServiceController#4](~/add/codesnippet/visualbasic/p-system.serviceprocess._2_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceController[] ServicesDependedOn { get; }
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "배열을 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 각각이 서비스를 실행에 대 한 실행 되어야 하는 서비스와 연결 된 인스턴스."
  overload: System.ServiceProcess.ServiceController.ServicesDependedOn*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceType
  id: ServiceType
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceType
  nameWithType: ServiceController.ServiceType
  fullName: System.ServiceProcess.ServiceController.ServiceType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "이 개체가 참조 하는 서비스의 유형을 가져옵니다."
  remarks: "서비스 유형 시스템에서 서비스 사용 방식을 나타냅니다. ServiceType이 속성의 값의 비트 OR 연산자를 사용 하 여 결합 된 플래그의 집합을 나타냅니다."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the device driver services on the local computer.  \n  \n [!code-cs[ServiceController#5](~/add/codesnippet/csharp/p-system.serviceprocess._9_1.cs)]\n [!code-cpp[ServiceController#5](~/add/codesnippet/cpp/p-system.serviceprocess._9_1.cpp)]\n [!code-vb[ServiceController#5](~/add/codesnippet/visualbasic/p-system.serviceprocess._9_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceType ServiceType { get; }
    return:
      type: System.ServiceProcess.ServiceType
      description: "중 하나는 <xref href=&quot;System.ServiceProcess.ServiceType&quot;> </xref> 네트워크 서비스 형식을 나타내는 데 사용 되는 값입니다."
  overload: System.ServiceProcess.ServiceController.ServiceType*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Start
  id: Start
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Start()
  nameWithType: ServiceController.Start()
  fullName: System.ServiceProcess.ServiceController.Start()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "인수를 전달 하는 서비스를 시작 합니다."
  remarks: "호출할 수 없습니다 <xref:System.ServiceProcess.ServiceController.Stop%2A>서비스 컨트롤러 상태는 해당 서비스에 대해 `Running`.</xref:System.ServiceProcess.ServiceController.Stop%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check whether the Alerter service is stopped. If the service is stopped, the example starts the service and waits until the service status is set to <xref:System.ServiceProcess.ServiceControllerStatus>.  \n  \n [!code-cs[ServiceController#1](~/add/codesnippet/csharp/m-system.serviceprocess._8_1.cs)]\n [!code-cpp[ServiceController#1](~/add/codesnippet/cpp/m-system.serviceprocess._8_1.cpp)]\n [!code-vb[ServiceController#1](~/add/codesnippet/visualbasic/m-system.serviceprocess._8_1.vb)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Start*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Start(System.String[])
  id: Start(System.String[])
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Start(String[])
  nameWithType: ServiceController.Start(String[])
  fullName: System.ServiceProcess.ServiceController.Start(String[])
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "지정된 된 인수를 전달 하면서 서비스를 시작 합니다."
  remarks: "호출할 수 없습니다 <xref:System.ServiceProcess.ServiceController.Stop%2A>서비스 컨트롤러 상태는 해당 서비스에 대해 `Running`.</xref:System.ServiceProcess.ServiceController.Stop%2A>"
  syntax:
    content: public void Start (string[] args);
    parameters:
    - id: args
      type: System.String[]
      description: "배열 시작 될 때 서비스에 전달할 인수입니다."
  overload: System.ServiceProcess.ServiceController.Start*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 시작할 수 없습니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>args</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -또는-배열 멤버는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.StartType
  id: StartType
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: StartType
  nameWithType: ServiceController.StartType
  fullName: System.ServiceProcess.ServiceController.StartType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "서비스에서 표시 하는 방법을 나타내는 값을 가져옵니다는 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> 시작 개체입니다."
  syntax:
    content: public System.ServiceProcess.ServiceStartMode StartType { get; }
    return:
      type: System.ServiceProcess.ServiceStartMode
      description: "서비스 시작 방법을 지정 하는 값입니다."
  overload: System.ServiceProcess.ServiceController.StartType*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Status
  id: Status
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Status
  nameWithType: ServiceController.Status
  fullName: System.ServiceProcess.ServiceController.Status
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "이 인스턴스에서 참조 하는 서비스의 상태를 가져옵니다."
  remarks: "상태는 서비스의 현재 상태를 나타냅니다. 가능한 값의 집합 상태 변경 명령이 보류 중인지 여부를 나타내는 몇 개가 포함 되어 있습니다."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check the current status of the Telnet service. If the service is stopped, the example starts the service. If the service is running, the example stops the service.  \n  \n [!code-cs[ServiceController#2](~/add/codesnippet/csharp/p-system.serviceprocess._0_1.cs)]\n [!code-cpp[ServiceController#2](~/add/codesnippet/cpp/p-system.serviceprocess._0_1.cpp)]\n [!code-vb[ServiceController#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._0_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceControllerStatus Status { get; }
    return:
      type: System.ServiceProcess.ServiceControllerStatus
      description: "중 하나는 <xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;> </xref> 서비스가 실행 중지 또는 일시 중지 또는 시작, 중지, 일시 중지, 여부 명령을 계속 보류 중입니다. 되었는지를 나타내는 값입니다."
  overload: System.ServiceProcess.ServiceController.Status*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Stop
  id: Stop
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Stop()
  nameWithType: ServiceController.Stop()
  fullName: System.ServiceProcess.ServiceController.Stop()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "이 서비스 및이 서비스에 종속 되는 서비스를 중지 합니다."
  remarks: "해당 작업에 대 한이 서비스에 종속 된 모든 서비스가이 서비스를 중지 하기 전에 중지 됩니다. <xref:System.ServiceProcess.ServiceController.DependentServices%2A>이 여기에 종속 된 서비스의 집합을 포함 하는 속성.</xref:System.ServiceProcess.ServiceController.DependentServices%2A>       이 서비스에 종속 하는 서비스를 중지 하는 경우 부모 서비스의 중지 메서드 내에서이 서비스에서 중지 메서드를 호출 합니다. <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>속성이이 서비스에 종속 된 서비스를 포함 합니다.</xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check the current status of the Telnet service. If the service is stopped, the example starts the service. If the service is running, the example stops the service.  \n  \n [!code-cs[ServiceController#2](~/add/codesnippet/csharp/m-system.serviceprocess._1_1.cs)]\n [!code-cpp[ServiceController#2](~/add/codesnippet/cpp/m-system.serviceprocess._1_1.cpp)]\n [!code-vb[ServiceController#2](~/add/codesnippet/visualbasic/m-system.serviceprocess._1_1.vb)]"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Stop*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "시스템 API에 액세스 하는 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "서비스를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  id: WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: WaitForStatus(ServiceControllerStatus)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "지정된 된 상태에 도달 하기 위해 서비스에 대 한 무한 대기 합니다."
  remarks: "WaitForStatus를 사용 하 여 응용 프로그램의 서비스에 필요한 상태에 도달할 때까지 처리를 일시 중단 합니다.      > [!NOTE] >는 <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>메서드 간의 각 상태를 확인 하는 약 250 밀리초를 대기 합니다.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>관찰 된 서비스를 변경 하는 대/소문자를 검색할 수 없는 `desiredStatus` 해당 간격에 대 한 다음 다른 상태를 즉시 합니다.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check whether the Alerter service is stopped. If the service is stopped, the example starts the service and waits until the service status is set to <xref:System.ServiceProcess.ServiceControllerStatus>.  \n  \n [!code-cs[ServiceController#1](~/add/codesnippet/csharp/82fc1460-0a6f-432e-81a5-_1.cs)]\n [!code-cpp[ServiceController#1](~/add/codesnippet/cpp/82fc1460-0a6f-432e-81a5-_1.cpp)]\n [!code-vb[ServiceController#1](~/add/codesnippet/visualbasic/82fc1460-0a6f-432e-81a5-_1.vb)]"
  syntax:
    content: public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus);
    parameters:
    - id: desiredStatus
      type: System.ServiceProcess.ServiceControllerStatus
      description: "에 대 한 대기 상태입니다."
  overload: System.ServiceProcess.ServiceController.WaitForStatus*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code> desiredStatus </code> 매개 변수에서 정의 된 값 중 하나는 <xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;> </xref> 열거 합니다."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  id: WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: WaitForStatus(ServiceControllerStatus,TimeSpan)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "지정된 된 상태에 도달 하는 서비스 또는 지정 된 제한 시간이 만료 될 때까지 대기 합니다."
  remarks: "사용 하 여 <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>서비스가 필요한 상태에 도달한 될 때까지 처리의 응용 프로그램 일시 중단 합니다.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>      > [!NOTE] >는 <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>메서드 간의 각 상태를 확인 하는 약 250 밀리초를 대기 합니다.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>관찰 된 서비스를 변경 하는 대/소문자를 검색할 수 없는 `desiredStatus` 해당 간격에 대 한 다음 다른 상태를 즉시 합니다.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>"
  syntax:
    content: public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus, TimeSpan timeout);
    parameters:
    - id: desiredStatus
      type: System.ServiceProcess.ServiceControllerStatus
      description: "에 대 한 대기 상태입니다."
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan>서비스가 지정 된 상태에 도달할 때까지 대기 하는 시간을 지정 하는 개체입니다.</xref:System.TimeSpan>"
  overload: System.ServiceProcess.ServiceController.WaitForStatus*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code> desiredStatus </code> 매개 변수에서 정의 된 값 중 하나는 <xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;> </xref> 열거 합니다."
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "에 지정 된 값은 <code> timeout </code> 만료 된 매개 변수입니다."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ServiceProcess.TimeoutException
  parent: System.ServiceProcess
  isExternal: false
  name: TimeoutException
  nameWithType: TimeoutException
  fullName: System.ServiceProcess.TimeoutException
- uid: System.ServiceProcess.ServiceController.#ctor
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController()
  nameWithType: ServiceController.ServiceController()
  fullName: System.ServiceProcess.ServiceController.ServiceController()
- uid: System.ServiceProcess.ServiceController.#ctor(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController(String)
  nameWithType: ServiceController.ServiceController(String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController(String,String)
  nameWithType: ServiceController.ServiceController(String,String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String,String)
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceController.CanPauseAndContinue
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceProcess.ServiceController.CanShutdown
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
  fullName: System.ServiceProcess.ServiceController.CanShutdown
- uid: System.ServiceProcess.ServiceController.CanStop
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanStop
  nameWithType: ServiceController.CanStop
  fullName: System.ServiceProcess.ServiceController.CanStop
- uid: System.ServiceProcess.ServiceController.Close
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Close()
  nameWithType: ServiceController.Close()
  fullName: System.ServiceProcess.ServiceController.Close()
- uid: System.ServiceProcess.ServiceController.Continue
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Continue()
  nameWithType: ServiceController.Continue()
  fullName: System.ServiceProcess.ServiceController.Continue()
- uid: System.ServiceProcess.ServiceController.DependentServices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DependentServices
  nameWithType: ServiceController.DependentServices
  fullName: System.ServiceProcess.ServiceController.DependentServices
- uid: System.ServiceProcess.ServiceController[]
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceController
  nameWithType: ServiceController
  fullName: System.ServiceProcess.ServiceController[]
  spec.csharp:
  - uid: System.ServiceProcess.ServiceController
    name: ServiceController
    nameWithType: ServiceController
    fullName: ServiceController[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceController.DisplayName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DisplayName
  nameWithType: ServiceController.DisplayName
  fullName: System.ServiceProcess.ServiceController.DisplayName
- uid: System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ServiceController.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceController.Dispose(Boolean)
- uid: System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ExecuteCommand(Int32)
  nameWithType: ServiceController.ExecuteCommand(Int32)
  fullName: System.ServiceProcess.ServiceController.ExecuteCommand(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ServiceProcess.ServiceController.GetDevices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices()
  nameWithType: ServiceController.GetDevices()
  fullName: System.ServiceProcess.ServiceController.GetDevices()
- uid: System.ServiceProcess.ServiceController.GetDevices(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices(String)
  nameWithType: ServiceController.GetDevices(String)
  fullName: System.ServiceProcess.ServiceController.GetDevices(String)
- uid: System.ServiceProcess.ServiceController.GetServices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices()
  nameWithType: ServiceController.GetServices()
  fullName: System.ServiceProcess.ServiceController.GetServices()
- uid: System.ServiceProcess.ServiceController.GetServices(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices(String)
  nameWithType: ServiceController.GetServices(String)
  fullName: System.ServiceProcess.ServiceController.GetServices(String)
- uid: System.ServiceProcess.ServiceController.MachineName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: MachineName
  nameWithType: ServiceController.MachineName
  fullName: System.ServiceProcess.ServiceController.MachineName
- uid: System.ServiceProcess.ServiceController.Pause
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Pause()
  nameWithType: ServiceController.Pause()
  fullName: System.ServiceProcess.ServiceController.Pause()
- uid: System.ServiceProcess.ServiceController.Refresh
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Refresh()
  nameWithType: ServiceController.Refresh()
  fullName: System.ServiceProcess.ServiceController.Refresh()
- uid: System.ServiceProcess.ServiceController.ServiceHandle
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
  fullName: System.ServiceProcess.ServiceController.ServiceHandle
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: true
  name: SafeHandle
  nameWithType: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.ServiceProcess.ServiceController.ServiceName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceName
  nameWithType: ServiceController.ServiceName
  fullName: System.ServiceProcess.ServiceController.ServiceName
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceController.ServicesDependedOn
- uid: System.ServiceProcess.ServiceController.ServiceType
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceType
  nameWithType: ServiceController.ServiceType
  fullName: System.ServiceProcess.ServiceController.ServiceType
- uid: System.ServiceProcess.ServiceType
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceType
  nameWithType: ServiceType
  fullName: System.ServiceProcess.ServiceType
- uid: System.ServiceProcess.ServiceController.Start
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start()
  nameWithType: ServiceController.Start()
  fullName: System.ServiceProcess.ServiceController.Start()
- uid: System.ServiceProcess.ServiceController.Start(System.String[])
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start(String[])
  nameWithType: ServiceController.Start(String[])
  fullName: System.ServiceProcess.ServiceController.Start(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceController.StartType
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: StartType
  nameWithType: ServiceController.StartType
  fullName: System.ServiceProcess.ServiceController.StartType
- uid: System.ServiceProcess.ServiceStartMode
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceStartMode
  nameWithType: ServiceStartMode
  fullName: System.ServiceProcess.ServiceStartMode
- uid: System.ServiceProcess.ServiceController.Status
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Status
  nameWithType: ServiceController.Status
  fullName: System.ServiceProcess.ServiceController.Status
- uid: System.ServiceProcess.ServiceControllerStatus
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceControllerStatus
  nameWithType: ServiceControllerStatus
  fullName: System.ServiceProcess.ServiceControllerStatus
- uid: System.ServiceProcess.ServiceController.Stop
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Stop()
  nameWithType: ServiceController.Stop()
  fullName: System.ServiceProcess.ServiceController.Stop()
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus(ServiceControllerStatus)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus)
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus(ServiceControllerStatus,TimeSpan)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceProcess.ServiceController.#ctor*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController
  nameWithType: ServiceController.ServiceController
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
- uid: System.ServiceProcess.ServiceController.CanShutdown*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
- uid: System.ServiceProcess.ServiceController.CanStop*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanStop
  nameWithType: ServiceController.CanStop
- uid: System.ServiceProcess.ServiceController.Close*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Close
  nameWithType: ServiceController.Close
- uid: System.ServiceProcess.ServiceController.Continue*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Continue
  nameWithType: ServiceController.Continue
- uid: System.ServiceProcess.ServiceController.DependentServices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DependentServices
  nameWithType: ServiceController.DependentServices
- uid: System.ServiceProcess.ServiceController.DisplayName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DisplayName
  nameWithType: ServiceController.DisplayName
- uid: System.ServiceProcess.ServiceController.Dispose*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Dispose
  nameWithType: ServiceController.Dispose
- uid: System.ServiceProcess.ServiceController.ExecuteCommand*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ExecuteCommand
  nameWithType: ServiceController.ExecuteCommand
- uid: System.ServiceProcess.ServiceController.GetDevices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices
  nameWithType: ServiceController.GetDevices
- uid: System.ServiceProcess.ServiceController.GetServices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices
  nameWithType: ServiceController.GetServices
- uid: System.ServiceProcess.ServiceController.MachineName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: MachineName
  nameWithType: ServiceController.MachineName
- uid: System.ServiceProcess.ServiceController.Pause*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Pause
  nameWithType: ServiceController.Pause
- uid: System.ServiceProcess.ServiceController.Refresh*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Refresh
  nameWithType: ServiceController.Refresh
- uid: System.ServiceProcess.ServiceController.ServiceHandle*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
- uid: System.ServiceProcess.ServiceController.ServiceName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceName
  nameWithType: ServiceController.ServiceName
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
- uid: System.ServiceProcess.ServiceController.ServiceType*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceType
  nameWithType: ServiceController.ServiceType
- uid: System.ServiceProcess.ServiceController.Start*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start
  nameWithType: ServiceController.Start
- uid: System.ServiceProcess.ServiceController.StartType*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: StartType
  nameWithType: ServiceController.StartType
- uid: System.ServiceProcess.ServiceController.Status*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Status
  nameWithType: ServiceController.Status
- uid: System.ServiceProcess.ServiceController.Stop*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Stop
  nameWithType: ServiceController.Stop
- uid: System.ServiceProcess.ServiceController.WaitForStatus*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus
  nameWithType: ServiceController.WaitForStatus
