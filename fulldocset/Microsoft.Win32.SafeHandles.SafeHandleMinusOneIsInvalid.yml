### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid
  id: SafeHandleMinusOneIsInvalid
  children:
  - Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)
  - Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid
  langs:
  - csharp
  name: SafeHandleMinusOneIsInvalid
  nameWithType: SafeHandleMinusOneIsInvalid
  fullName: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid
  type: Class
  summary: "잘못 된 핸들 값이-1 의미 하는 Win32 safehandle 구현에 대 한 기본 클래스를 제공 합니다."
  remarks: "이 클래스는 <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName>클래스</xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName> 에서 파생 값이-1 사용 하 여 잘못 된 핸들의 형식을 설명 합니다. (예: 파일, 레지스트리 핸들)에 대 한이 클래스의 추가 파생이 추가로 특수화할 수 있습니다. 참조는 <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>SafeHandleMinusOneIsInvalid에서 파생 된 클래스의 예에 대 한 클래스입니다.</xref:Microsoft.Win32.SafeHandles.SafeFileHandle>      > [!WARNING] >이 형식이 구현 하는 <xref:System.IDisposable>인터페이스.</xref:System.IDisposable> 형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다. 직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A>에서 메서드는 `try``catch` 블록.</xref:System.IDisposable.Dispose%2A> 작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다. 자세한 내용은의 &quot;를 사용 하는 개체는 구현 IDisposable&quot; 섹션을 참조 하십시오.는 <xref:System.IDisposable>인터페이스 항목.</xref:System.IDisposable>"
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public abstract class SafeHandleMinusOneIsInvalid : System.Runtime.InteropServices.SafeHandle
  inheritance:
  - System.Runtime.InteropServices.SafeHandle
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid
  langs:
  - csharp
  name: SafeHandleMinusOneIsInvalid(Boolean)
  nameWithType: SafeHandleMinusOneIsInvalid.SafeHandleMinusOneIsInvalid(Boolean)
  fullName: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.SafeHandleMinusOneIsInvalid(Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  summary: "새 인스턴스를 초기화는 <xref href=&quot;Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid&quot;> </xref> 핸들 안정적으로 해제 될 인지를 지정 하는 클래스입니다."
  syntax:
    content: protected SafeHandleMinusOneIsInvalid (bool ownsHandle);
    parameters:
    - id: ownsHandle
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>종료 단계 안정적으로 핸들을 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 되지 않게 하려면 (권장 하지 않음)."
  overload: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid
  id: IsInvalid
  parent: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid
  langs:
  - csharp
  name: IsInvalid
  nameWithType: SafeHandleMinusOneIsInvalid.IsInvalid
  fullName: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid
  type: Property
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  summary: "핸들이 유효한 지 여부를 나타내는 값을 가져옵니다."
  remarks: "공용 언어 런타임에서 중요 한 종료를 수행할지 여부를 확인 하려면이 속성을 사용 합니다."
  syntax:
    content: public override bool IsInvalid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>핸들이 잘못 되었습니다; 없는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: System.Runtime.InteropServices.SafeHandle
- uid: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)
  parent: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid
  isExternal: false
  name: SafeHandleMinusOneIsInvalid(Boolean)
  nameWithType: SafeHandleMinusOneIsInvalid.SafeHandleMinusOneIsInvalid(Boolean)
  fullName: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.SafeHandleMinusOneIsInvalid(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid
  parent: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid
  isExternal: false
  name: IsInvalid
  nameWithType: SafeHandleMinusOneIsInvalid.IsInvalid
  fullName: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid
- uid: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor*
  parent: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid
  isExternal: false
  name: SafeHandleMinusOneIsInvalid
  nameWithType: SafeHandleMinusOneIsInvalid.SafeHandleMinusOneIsInvalid
- uid: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid*
  parent: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid
  isExternal: false
  name: IsInvalid
  nameWithType: SafeHandleMinusOneIsInvalid.IsInvalid
