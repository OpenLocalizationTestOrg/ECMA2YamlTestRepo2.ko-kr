### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.AceEnumerator
  id: AceEnumerator
  children:
  - System.Security.AccessControl.AceEnumerator.Current
  - System.Security.AccessControl.AceEnumerator.MoveNext
  - System.Security.AccessControl.AceEnumerator.Reset
  - System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: AceEnumerator
  nameWithType: AceEnumerator
  fullName: System.Security.AccessControl.AceEnumerator
  type: Class
  summary: "액세스 제어 목록 (ACL)에 (Ace)의 액세스 제어 항목을 반복 하는 기능을 제공 합니다."
  syntax:
    content: 'public sealed class AceEnumerator : System.Collections.IEnumerator'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerator
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.Current
  id: Current
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: AceEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "현재 요소를 가져옵니다는 <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> 컬렉션입니다. 이 속성은 프로젝트의 형식에 적합 한 버전을 가져옵니다."
  syntax:
    content: public System.Security.AccessControl.GenericAce Current { get; }
    return:
      type: System.Security.AccessControl.GenericAce
      description: "현재 요소는 <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> 컬렉션입니다."
  overload: System.Security.AccessControl.AceEnumerator.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.MoveNext
  id: MoveNext
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: AceEnumerator.MoveNext()
  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "열거자의 다음 요소로 이동는 <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> 컬렉션입니다."
  remarks: "열거자를 만든 후 또는 호출한 후에 <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>메서드, 열거자가 컬렉션의 첫 번째 요소 앞에 위치 하 고 MoveNext 메서드가 처음 호출 열거자를 컬렉션의 첫 번째 요소로 이동 합니다.</xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       컬렉션의 끝이 전달 된 후에 이후에 MoveNext 호출 반환 `false` 될 때까지 <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>호출 됩니다.</xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다. 컬렉션에 요소를 삭제 또는 추가, 수정 등의 변화 경우 열거자는 무효화 및 MoveNext 또는 <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> throw</xref:System.Security.AccessControl.AceEnumerator.Reset%2A> 을 다음에 호출"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>열거자를 다음 요소로 이동 성공 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 열거자가 컬렉션의 끝을 통과 하는 경우."
  overload: System.Security.AccessControl.AceEnumerator.MoveNext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "컬렉션은 열거자를 만든 후 수정 되었습니다."
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.Reset
  id: Reset
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: AceEnumerator.Reset()
  fullName: System.Security.AccessControl.AceEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "첫 번째 요소 앞의 초기 위치에 열거자를 설정 합니다.는 <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> 컬렉션입니다."
  remarks: "열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다. 열거자는 무효화 및을 다음에 호출할 경우, 추가 같은 요소를, 수정 또는 삭제 컬렉션에 내용이는 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>메서드나 Reset 메서드를 throw 한 <xref:System.InvalidOperationException></xref:System.InvalidOperationException> </xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.AccessControl.AceEnumerator.Reset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "컬렉션은 열거자를 만든 후 수정 되었습니다."
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "컬렉션의 현재 요소를 가져옵니다."
  remarks: "열거자를 만든 후 또는 호출한 후에 <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>호출 해야 합니다는 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>하 여 열거자 IEnumerator.Current;의 값을 읽기 전에 컬렉션의 첫 번째 요소로 메서드 IEnumerator.Current 그렇지 않으면 정의 되지 않습니다.</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> </xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       마지막으로 호출 하는 경우 또한 예외를 throw IEnumerator.Current <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>반환 `false`, 컬렉션의 끝을 나타내는.</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>       IEnumerator.Current가 열거자의 위치를 이동 하지 않으며 IEnumerator.Current 연속으로 호출 될 때까지 동일한 개체를 반환 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>또는 <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>호출 됩니다.</xref:System.Security.AccessControl.AceEnumerator.Reset%2A> </xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>       열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다. 컬렉션에 요소를 삭제 또는 추가, 수정 등의 변화 경우 열거자는 무효화, 및을 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> throw</xref:System.Security.AccessControl.AceEnumerator.Reset%2A> 하거나</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> 다음에 호출 사이 컬렉션이 수정 되는 경우 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>IEnumerator.Current, IEnumerator.Current로 설정 되어 요소 반환 열거자가 이미 무효로 되 었 하는 경우에.</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "컬렉션의 현재 요소를 반환합니다."
  overload: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "컬렉션은 열거자를 만든 후 수정 되었습니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.AccessControl.AceEnumerator.Current
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Current
  nameWithType: AceEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.Current
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.AceEnumerator.MoveNext
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: AceEnumerator.MoveNext()
  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.AceEnumerator.Reset
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Reset()
  nameWithType: AceEnumerator.Reset()
  fullName: System.Security.AccessControl.AceEnumerator.Reset()
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current
- uid: System.Security.AccessControl.AceEnumerator.Current*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Current
  nameWithType: AceEnumerator.Current
- uid: System.Security.AccessControl.AceEnumerator.MoveNext*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: AceEnumerator.MoveNext
- uid: System.Security.AccessControl.AceEnumerator.Reset*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Reset
  nameWithType: AceEnumerator.Reset
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
