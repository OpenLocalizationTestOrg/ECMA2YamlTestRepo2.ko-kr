### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.Registry
  id: Registry
  children:
  - Microsoft.Win32.Registry.ClassesRoot
  - Microsoft.Win32.Registry.CurrentConfig
  - Microsoft.Win32.Registry.CurrentUser
  - Microsoft.Win32.Registry.DynData
  - Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  - Microsoft.Win32.Registry.LocalMachine
  - Microsoft.Win32.Registry.PerformanceData
  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  - Microsoft.Win32.Registry.Users
  langs:
  - csharp
  name: Registry
  nameWithType: Registry
  fullName: Microsoft.Win32.Registry
  type: Class
  summary: "제공 <xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref> Windows 레지스트리의 루트 키를 나타내는 개체 및 <xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;> </xref> 키/값 쌍에 액세스 하는 메서드."
  remarks: "이 클래스는 Windows를 실행 하는 컴퓨터의 레지스트리에 있는 표준 루트 키의 집합을 제공 합니다. 레지스트리는 응용 프로그램, 사용자 및 기본 시스템 설정에 대 한 정보에 대 한 저장소 기능으로, 예를 들어 응용 프로그램에서 레지스트리를 사용 하 여 응용 프로그램을 닫은 후 유지 하는 정보를 저장 하기 위한 및 응용 프로그램을 다시 로드할 때 동일한 정보에 액세스할 수 있습니다. 예를 들어, 색 기본 설정을, 화면 위치 또는 창 크기를 저장할 수 있습니다. 레지스트리에서 다른 위치에 정보를 저장 하 여 각 사용자에 대해이 데이터를 제어할 수 있습니다.       기본 또는 루트 <xref:Microsoft.Win32.RegistryKey>의해 노출 되는 인스턴스는 `Registry` 클래스 하위 키와 레지스트리 값에 대 한 기본 저장소 메커니즘을 나타냅니다.</xref:Microsoft.Win32.RegistryKey> 레지스트리의 유무에 따라 다르기 때문에 모든 키가 읽기 전용입니다. 에 의해 노출 되는 키 `Registry` 됩니다: <xref:Microsoft.Win32.Registry.CurrentUser>사용자 기본 설정에 대 한 정보를 저장 합니다.</xref:Microsoft.Win32.Registry.CurrentUser>       <xref:Microsoft.Win32.Registry.LocalMachine>로컬 컴퓨터에 대 한 구성 정보를 저장합니다.</xref:Microsoft.Win32.Registry.LocalMachine>       <xref:Microsoft.Win32.Registry.ClassesRoot>형식 (및 클래스)에 대 한 정보 및 해당 속성을 저장합니다.</xref:Microsoft.Win32.Registry.ClassesRoot>       <xref:Microsoft.Win32.Registry.Users>기본 사용자 구성에 대 한 정보를 저장합니다.</xref:Microsoft.Win32.Registry.Users>       <xref:Microsoft.Win32.Registry.PerformanceData>소프트웨어 구성 요소에 대 한 성능 정보를 저장합니다.</xref:Microsoft.Win32.Registry.PerformanceData>       <xref:Microsoft.Win32.Registry.CurrentConfig>사용자 관련 되지 않은 하드웨어 정보를 저장합니다.</xref:Microsoft.Win32.Registry.CurrentConfig>       <xref:Microsoft.Win32.Registry.DynData>동적 데이터를 저장합니다.</xref:Microsoft.Win32.Registry.DynData>       레지스트리에서 정보를 저장/검색에 루트 키를 식별 한 후 사용할 수 있습니다는 <xref:Microsoft.Win32.RegistryKey>클래스를 추가 하거나, 하위 키를 제거 하 고 지정된 된 키에 대 한 값을 조작 합니다.</xref:Microsoft.Win32.RegistryKey>       하드웨어 장치 플러그 앤 플레이 인터페이스를 사용 하 여 자동으로 정보를 배치할 수 있습니다. 장치 드라이버를 설치 하기 위한 소프트웨어 표준 api를 작성 하 여 레지스트리에서 정보를 배치할 수 있습니다.      ## 가져오기 및 설정 값의.NET Framework 버전 2.0에 대 한 정적 메서드 레지스트리 클래스도 포함 되어 `static` <xref:Microsoft.Win32.Registry.GetValue%2A>및 <xref:Microsoft.Win32.Registry.SetValue%2A>설정 및 레지스트리 키에서 값을 검색 하기 위한 방법입니다.</xref:Microsoft.Win32.Registry.SetValue%2A> </xref:Microsoft.Win32.Registry.GetValue%2A> 이러한 메서드 열고 레지스트리 키에 유사한 메서드가 뿐만 아니라 각 시간 하므로 수행 하지 않는 사용은 <xref:Microsoft.Win32.RegistryKey>클래스, 많은 수의 값에 액세스할 때.</xref:Microsoft.Win32.RegistryKey>       <xref:Microsoft.Win32.RegistryKey>클래스도 값 형식의 데이터를 검색 하기 전에 테스트 하 고 키를 삭제 하려면 레지스트리 키에 대 한 Windows 액세스 제어 보안을 설정할 수 있는 메서드를 제공 합니다.</xref:Microsoft.Win32.RegistryKey>"
  example:
  - "This section contains two code examples. The first example demonstrates root keys, and the second example demonstrates the `static`<xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods.  \n  \n Example 1  \n  \n The following code example demonstrates how to retrieve the subkeys of the HKEY_USERS key, and print their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in `RegistryKey` to manipulate that key.  \n  \n [!code-cs[Classic Registry.Users Example#1](~/add/codesnippet/csharp/t-microsoft.win32.registry_1.cs)]\n [!code-cpp[Classic Registry.Users Example#1](~/add/codesnippet/cpp/t-microsoft.win32.registry_1.cpp)]\n [!code-vb[Classic Registry.Users Example#1](~/add/codesnippet/visualbasic/t-microsoft.win32.registry_1.vb)]  \n  \n Example 2  \n  \n The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/t-microsoft.win32.registry_2.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/t-microsoft.win32.registry_2.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/t-microsoft.win32.registry_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class Registry
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.ClassesRoot
  id: ClassesRoot
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: ClassesRoot
  nameWithType: Registry.ClassesRoot
  fullName: Microsoft.Win32.Registry.ClassesRoot
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "문서 및 해당 형식과 관련 된 속성의 유형 (또는 클래스)을 정의 합니다. 이 필드는 Windows 레지스트리 기본 키 HKEY_CLASSES_ROOT를 읽습니다."
  remarks: "기존 응용 프로그램과 OLE 응용 프로그램 모두에이 키에 저장 된 데이터를 사용 합니다. 또한이 키 DDE 및 OLE 지원에 대 한 정보를 저장 하 여 Windows 3.1 등록 데이터베이스와 이전 버전과 호환성을 제공 합니다. 파일 뷰어 및 사용자 인터페이스 확장 OLE 클래스 식별자가이 키를 저장 한 처리 서버는이 키에 등록 됩니다."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-vb[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_4_1.vb)]\n [!code-cpp[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_4_1.cpp)]\n [!code-cs[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_4_1.cs)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey ClassesRoot;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.CurrentConfig
  id: CurrentConfig
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: CurrentConfig
  nameWithType: Registry.CurrentConfig
  fullName: Microsoft.Win32.Registry.CurrentConfig
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "사용자와 관련 되지 않은 하드웨어에 대 한 구성 정보를 포함 합니다. 이 필드는 Windows 레지스트리 기본 키 HKEY_CURRENT_CONFIG를 읽습니다."
  remarks: "이 멤버는 <xref:Microsoft.Win32.Registry.LocalMachine>.</xref:Microsoft.Win32.Registry.LocalMachine> 내의 하위 키에 매핑된       이 멤버를 사용 하는 예제는 시스템이 네트워크에 연결 되었는지 여부에 따라 해당 데이터에 대 한 다른 서버 이름을 저장 하는 응용 프로그램."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_1_1.cpp)]\n [!code-vb[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_1_1.vb)]\n [!code-cs[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_1_1.cs)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey CurrentConfig;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.CurrentUser
  id: CurrentUser
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: CurrentUser
  nameWithType: Registry.CurrentUser
  fullName: Microsoft.Win32.Registry.CurrentUser
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "현재 사용자 기본 설정에 대 한 정보를 포함합니다. 이 필드의 Windows 레지스트리 기본 키 HKEY_CURRENT_USER를 읽습니다."
  remarks: "이 키에 저장 된 정보에는 환경 변수와 프로그램 그룹, 색, 프린터, 네트워크 연결 및 응용 프로그램 기본 설정에 대 한 데이터의 설정이 포함 됩니다. 이 키는 쉽게 현재 사용자의 설정을 만들 수 있습니다. 이 키를 소프트웨어 공급 업체 응용 프로그램 내에서 사용할 현재 사용자 고유의 기본 설정을 저장 합니다. 예를 들어 Microsoft에서 해당 응용 프로그램을 Microsoft 키 아래에 자체 하위 키를 만드는 각 응용 프로그램을 사용 하면 HKEY_CURRENT_USER\\Software\\Microsoft 키를 만듭니다."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.CurrentUser Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_6_1.cpp)]\n [!code-cs[Classic Registry.CurrentUser Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_6_1.cs)]\n [!code-vb[Classic Registry.CurrentUser Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_6_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey CurrentUser;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.DynData
  id: DynData
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: DynData
  nameWithType: Registry.DynData
  fullName: Microsoft.Win32.Registry.DynData
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "동적 레지스트리 데이터를 포함합니다. 이 필드는 Windows 레지스트리 기본 키 HKEY_DYN_DATA를 읽습니다."
  remarks: "Windows 98 또는 Windows Me 레지스트리는 정적 데이터 (레지스트리에 디스크에 저장 되어)와 (변경 하는 대부분의 경우 성능 통계 등)는 동적 데이터를 모두 지원 합니다. 이 동적 데이터 영역이 로컬과 원격으로 실행할 수 있는 Win32 응용 프로그램에 가상 장치 드라이버 (Vxd) 실시간으로 데이터를 제공할 수 있는 메커니즘을입니다. 시스템 모니터를를 원격 Windows 98 또는 Windows Me 시스템에서 성능 통계를 제공할 수도 있습니다.       Vxd 성능 데이터에 제한 되지 않습니다. 에서 전달 링 0 링 3 효율적으로 CPU를 독점 하지 않으면 모든 데이터를 제공할 수 있습니다. 레지스트리 값 (또는 여러 개의 값)을 반환 하는 함수에 대 한 포인터를 저장 하 여 동적 데이터를 지원 합니다. 때 레지스트리 호출 쿼리 값을 사용 하는 연관 된 동적 키 함수가 호출 되어 원하는 값 또는 값을 반환 합니다.      > [!NOTE] > 동적 키 동적 레지스트리 데이터를 처리 하도록 Microsoft Windows 95에서 도입 되었습니다. Windows 98 또는 Windows 내에 지원 됩니다."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key. Note that this example can return no results, since there might not be dynamic data available, or you might not be running Windows 98/ME. Using this key may cause an error on other systems.  \n  \n [!code-vb[Classic Registry.DynData Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_3_1.vb)]\n [!code-cs[Classic Registry.DynData Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_3_1.cs)]\n [!code-cpp[Classic Registry.DynData Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_3_1.cpp)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey DynData;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "추가할 수 있습니다."
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "운영 체제는 동적 데이터;를 지원 하지 않습니다. 즉, 않습니다 Windows 98, Windows 98 Second Edition 또는 Windows Me (Millennium Edition Windows)."
  platform:
  - net462
- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  id: GetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: GetValue(String,String,Object)
  nameWithType: Registry.GetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.GetValue(String,String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "지정된 된 레지스트리 키에서 지정된 된 이름과 연관 된 값을 검색 합니다. 지정된 된 키에 이름이 없으면 사용자가 제공한 기본 값을 반환 합니다. 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 지정된 된 키가 없는 경우."
  remarks: "The string `valueName` is not case-sensitive.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To retrieve this unnamed value, specify either `null` or the empty string (\"\") for `valuName`.  \n  \n Valid root names are HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" accesses key/value pairs for the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root.  \n  \n When the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method retrieves expandable string values (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), it expands environment strings using data from the local environment. If a value containing expandable references to environment variables has been stored as a string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), rather than as an expandable string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), <xref:Microsoft.Win32.RegistryKey.GetValue%2A> does not expand it. You can expand such a string after it has been retrieved by calling the <xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  The recommended way to retrieve data from HKEY_PERFORMANCE_DATA is to use the <xref:System.Diagnostics.PerformanceCounter> class rather than the <xref:Microsoft.Win32.RegistryKey.GetValue%2A?displayProperty=fullName> method.  \n  \n The GetValue and <xref:Microsoft.Win32.Registry.SetValue%2A> methods open and close registry keys each time they are used, so they do not perform as well as the methods of the <xref:Microsoft.Win32.RegistryKey> class if you access a large number of values.  \n  \n <xref:Microsoft.Win32.RegistryKey> also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/m-microsoft.win32.regist_14_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/m-microsoft.win32.regist_14_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/m-microsoft.win32.regist_14_1.cpp)]"
  syntax:
    content: public static object GetValue (string keyName, string valueName, object defaultValue);
    parameters:
    - id: keyName
      type: System.String
      description: "에서는 올바른 레지스트리 루트를 &quot;HKEY_CURRENT_USER&quot; 등으로 시작 하는 키의 전체 레지스트리 경로입니다."
    - id: valueName
      type: System.String
      description: "이름/값 쌍의 이름입니다."
    - id: defaultValue
      type: System.Object
      description: "경우에 반환할 값 `valueName` 존재 하지 않습니다."
    return:
      type: System.Object
      description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>하위 키로 지정 된 경우 <code> keyName </code> 존재 하지 않는 연결 된 값, <code> valueName </code>, 또는 <code> defaultValue </code> 경우 <code> valueName </code> 찾을 수 없습니다."
  overload: Microsoft.Win32.Registry.GetValue*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "사용자에는 레지스트리 키에서 읽는 데 필요한 사용 권한이 없습니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref> 포함 된 지정 된 값 삭제 되도록 표시 되었습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>올바른 레지스트리 루트와 함께 시작 되지 않습니다."
  platform:
  - net462
- uid: Microsoft.Win32.Registry.LocalMachine
  id: LocalMachine
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: LocalMachine
  nameWithType: Registry.LocalMachine
  fullName: Microsoft.Win32.Registry.LocalMachine
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "로컬 컴퓨터에 대 한 구성 데이터를 포함합니다. 이 필드는 Windows 레지스트리 기본 키를 읽습니다."
  remarks: "`LocalMachine`5 개의 키가 포함 된: 해당 하드웨어 및 매핑 및 사용자 모드 코드와 함께 커널 모드 드라이버를 연결 하는 관련된 데이터를 사용 하는 방식으로 장치 드라이버, 하드웨어는 컴퓨터의 실제 하드웨어에 설명 합니다. 이 키의 모든 데이터는 시스템이 시작 될 때마다 다시 만들어집니다. 설명 하위 키 실제 컴퓨터 하드웨어에 설명 합니다. DeviceMap 하위 키에는 드라이버의 특정 클래스 기타 데이터를 포함 합니다. ResourceMap 하위 키 장치 드라이버는 하드웨어 리소스를 요청에 대해 설명 합니다. Windows NT 진단 프로그램 (Winmsdp.exe)는 읽기 쉬운 형식으로 내용에 보고할 수 있습니다.       SAM 디렉터리 서비스 데이터베이스의 Windows 2000 Server의 도메인에 대 한 사용자 및 그룹 계정에 대 한 보안 정보 (SAM 디렉터리 서비스 데이터베이스 라고 하는 보안 계정 관리자는 하는 데 사용).       보안에는 특정 사용자 권한과 같은 로컬 보안 정책에 포함합니다. 이 키는 Windows 2000 보안 하위 시스템에 의해서만 사용 됩니다.       컴퓨터당 소프트웨어 데이터베이스 소프트웨어입니다. 이 키를 사용 하면 다양 한 항목의 기타 구성 데이터와 함께 로컬 컴퓨터에 설치 된 소프트웨어에 대 한 데이터가 있습니다.       시스템 컨트롤 시스템 시작, 장치 드라이버 로드, Windows 2000 서비스 및 운영 체제 동작 합니다.       아래와 유사한 데이터가 있는 경우 규칙에 따라 <xref:Microsoft.Win32.Registry.CurrentUser>고 LocalMachine과의 데이터에서 <xref:Microsoft.Win32.Registry.CurrentUser>우선적으로 적용 합니다.</xref:Microsoft.Win32.Registry.CurrentUser> </xref:Microsoft.Win32.Registry.CurrentUser> 그러나이 키의 값도 확장 (대신 수 대체) Registry.LocalMachine의 데이터. 또한 일부 항목 (예: 항목 로드 하는 장치 드라이버)는 Registry.LocalMachine 외부에 있는 경우에 의미가 없습니다."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cs[Classic Registry.LocalMachine Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_0_1.cs)]\n [!code-cpp[Classic Registry.LocalMachine Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_0_1.cpp)]\n [!code-vb[Classic Registry.LocalMachine Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_0_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey LocalMachine;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.PerformanceData
  id: PerformanceData
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: PerformanceData
  nameWithType: Registry.PerformanceData
  fullName: Microsoft.Win32.Registry.PerformanceData
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "소프트웨어 구성 요소에 대 한 성능 정보를 포함합니다. 이 필드는 Windows 레지스트리 기본 키 HKEY_PERFORMANCE_DATA를 읽습니다."
  remarks: "각 소프트웨어 구성 요소는 카운터를 설치 하 고 실행 하는 동안 카운터 데이터를 기록 하는 경우 해당 개체에 대 한 키를 만듭니다. 에 액세스할 때 처럼 다른 레지스트리 데이터를 사용 하 여이 데이터에 액세스할 수는 <xref:Microsoft.Win32.RegistryKey>함수.</xref:Microsoft.Win32.RegistryKey>       레지스트리를 사용 하 여 성능 데이터를 수집 하지만 데이터 레지스트리 데이터베이스에 저장 되지 않습니다. 대신,이 키를 사용 하 여 레지스트리를 액세스 하면 시스템을 적절 한 시스템 개체 관리자에서 데이터를 수집 합니다.       로컬 시스템에서 성능 데이터를 가져오려면는 <xref:Microsoft.Win32.RegistryKey.GetValue%2A>Registry.PerformanceData 키가 있는 메서드를.</xref:Microsoft.Win32.RegistryKey.GetValue%2A> 첫 번째 호출 (필요가 없습니다 명시적으로 키를 먼저 열지) 키를 엽니다. 하지만 사용 해야는 <xref:Microsoft.Win32.RegistryKey.Close%2A>메서드를 성능 데이터를 가져오는 작업을 마쳤으면 키에 대 한 핸들을 닫습니다.</xref:Microsoft.Win32.RegistryKey.Close%2A> 사용자 설치 하거나 해당 성능 데이터를 사용 중인 동안 소프트웨어 구성 요소를 제거할 수 없습니다.       원격 시스템에서 성능 데이터를 가져오려면 사용 해야 합니다는 <xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A>Registry.PerformanceData 키 및 원격 시스템의 컴퓨터 이름으로 메서드를.</xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A> 이 호출은 원격 시스템에 대 한 성능 데이터를 나타내는 키를 검색 합니다. 데이터를 검색 하려면 <xref:Microsoft.Win32.RegistryKey.GetValue%2A>Registry.PerformanceData 키 대신이 키를 사용 하 여.</xref:Microsoft.Win32.RegistryKey.GetValue%2A>      > [!NOTE] > Windows Server 2003에 사용자 이상 속해야 성능 모니터 사용자 그룹에이 기본 키의 하위 키에 액세스할 수 있습니다."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key. Note that this example can often return no results, since there might be no performance data.  \n  \n [!code-cs[Classic Registry.PerformanceData Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_2_1.cs)]\n [!code-cpp[Classic Registry.PerformanceData Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_2_1.cpp)]\n [!code-vb[Classic Registry.PerformanceData Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_2_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey PerformanceData;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  id: SetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: SetValue(String,String,Object)
  nameWithType: Registry.SetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "지정된 된 레지스트리 키에 지정 된 이름/값 쌍을 설정 합니다. 지정된 된 키가 없는 경우 자동으로 만들어집니다."
  remarks: "Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues to have the 255-character restriction.  \n  \n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.  \n  \n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \n  \n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".  \n  \n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \n  \n> [!NOTE]\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \n  \n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores 64-bit integers as strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>). To store 64-bit numbers as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> values, use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \n  \n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores all string values as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> objects, even if they contain expandable references to environment variables. To save string values as expandable strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \n  \n This overload is equivalent to calling the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload with <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/m-microsoft.win32.regist_8_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/m-microsoft.win32.regist_8_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/m-microsoft.win32.regist_8_1.cpp)]"
  syntax:
    content: public static void SetValue (string keyName, string valueName, object value);
    parameters:
    - id: keyName
      type: System.String
      description: "에서는 올바른 레지스트리 루트를 &quot;HKEY_CURRENT_USER&quot; 등으로 시작 하는 키의 전체 레지스트리 경로입니다."
    - id: valueName
      type: System.String
      description: "이름/값 쌍의 이름입니다."
    - id: value
      type: System.Object
      description: "저장할 값입니다."
  overload: Microsoft.Win32.Registry.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>올바른 레지스트리 루트와 함께 시작 되지 않습니다.       -또는- <code>keyName</code> 되는 최대 허용 길이 (255 자)를 초과 합니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref> 읽기 전용 이며 따라서 쓸 수 없습니다. 않으면 예를 들어 루트 수준 노드입니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "사용자 만들기 또는 레지스트리 키를 수정 하는 데 필요한 사용 권한이 없습니다."
  platform:
  - net462
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  id: SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: SetValue(String,String,Object,RegistryValueKind)
  nameWithType: Registry.SetValue(String,String,Object,RegistryValueKind)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object,RegistryValueKind)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "지정 된 레지스트리 데이터 형식을 사용 하 여 지정 된 레지스트리 키의 이름/값 쌍을 설정 합니다. 지정된 된 키가 없는 경우 자동으로 만들어집니다."
  remarks: "Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues have the 255-character restriction.  \n  \n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.  \n  \n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \n  \n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".  \n  \n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \n  \n> [!NOTE]\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \n  \n If the type of the specified `value` does not match the specified `valueKind`, and the data cannot be converted, <xref:System.ArgumentException> is thrown. For example, you can store a <xref:System.Int64?displayProperty=fullName> as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, but only if its value is less than the maximum value of a <xref:System.Int32?displayProperty=fullName>. You cannot store a single string value as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  If boxed values are passed for <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, the conversion is done using the invariant culture.  \n  \n> [!NOTE]\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/7747259a-b475-4eec-8a66-_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/7747259a-b475-4eec-8a66-_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/7747259a-b475-4eec-8a66-_1.cpp)]"
  syntax:
    content: public static void SetValue (string keyName, string valueName, object value, Microsoft.Win32.RegistryValueKind valueKind);
    parameters:
    - id: keyName
      type: System.String
      description: "에서는 올바른 레지스트리 루트를 &quot;HKEY_CURRENT_USER&quot; 등으로 시작 하는 키의 전체 레지스트리 경로입니다."
    - id: valueName
      type: System.String
      description: "이름/값 쌍의 이름입니다."
    - id: value
      type: System.Object
      description: "저장할 값입니다."
    - id: valueKind
      type: Microsoft.Win32.RegistryValueKind
      description: "데이터를 저장할 때 사용할 레지스트리 데이터 형식입니다."
  overload: Microsoft.Win32.Registry.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>올바른 레지스트리 루트와 함께 시작 되지 않습니다.       -또는- <code>keyName</code> 되는 최대 허용 길이 (255 자)를 초과 합니다.       -또는-유형의 <code>value</code> 하 여 지정 된 레지스트리 데이터 형식과 일치 하지 않습니다 <code>valueKind</code>, 따라서 데이터 수를 변환할 수 없는 합니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref> 읽기 전용 이며 따라서 쓸 수 없는 않으면 예를 들어 루트 수준 노드인 또는 키가 아직 열려 있지 쓰기 권한으로 합니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "사용자 만들기 또는 레지스트리 키를 수정 하는 데 필요한 사용 권한이 없습니다."
  platform:
  - net462
- uid: Microsoft.Win32.Registry.Users
  id: Users
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: Users
  nameWithType: Registry.Users
  fullName: Microsoft.Win32.Registry.Users
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "기본 사용자 구성에 대 한 정보를 포함합니다. 이 필드는 Windows 레지스트리 기본 키 HKEY_USERS를 읽습니다."
  remarks: "이 키는 컴퓨터의 각 사용자에 대 한 분기를 포함합니다. 사용자 기본 설정을 변경 하지 않은 경우 기본 구성은 로컬 컴퓨터에서 새 사용자 및 기본 현재 사용자에 대해 제공 됩니다. 때문에 Windows 98 / ME에서는 Registry.Users, 응용 프로그램이 사용자 관련 정보 Windows 2000에서는 동일한 방식으로 액세스할 수 있습니다. 각 사용자의 정보는 로컬 또는 네트워크 서버에 저장할 수 있는 별도 파일에 저장 됩니다. Windows 98 설정을 사용자와 다른 한 컴퓨터에서 이동할 수 있도록 사용자의 현재 시스템에이 파일을 복사할 수 나 / 합니다."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cs[Classic Registry.Users Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_5_1.cs)]\n [!code-cpp[Classic Registry.Users Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_5_1.cpp)]\n [!code-vb[Classic Registry.Users Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_5_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey Users;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: Microsoft.Win32.Registry.ClassesRoot
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: ClassesRoot
  nameWithType: Registry.ClassesRoot
  fullName: Microsoft.Win32.Registry.ClassesRoot
- uid: Microsoft.Win32.RegistryKey
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryKey
  nameWithType: RegistryKey
  fullName: Microsoft.Win32.RegistryKey
- uid: Microsoft.Win32.Registry.CurrentConfig
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: CurrentConfig
  nameWithType: Registry.CurrentConfig
  fullName: Microsoft.Win32.Registry.CurrentConfig
- uid: Microsoft.Win32.Registry.CurrentUser
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: CurrentUser
  nameWithType: Registry.CurrentUser
  fullName: Microsoft.Win32.Registry.CurrentUser
- uid: Microsoft.Win32.Registry.DynData
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: DynData
  nameWithType: Registry.DynData
  fullName: Microsoft.Win32.Registry.DynData
- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: GetValue(String,String,Object)
  nameWithType: Registry.GetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.GetValue(String,String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Win32.Registry.LocalMachine
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: LocalMachine
  nameWithType: Registry.LocalMachine
  fullName: Microsoft.Win32.Registry.LocalMachine
- uid: Microsoft.Win32.Registry.PerformanceData
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: PerformanceData
  nameWithType: Registry.PerformanceData
  fullName: Microsoft.Win32.Registry.PerformanceData
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue(String,String,Object)
  nameWithType: Registry.SetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object)
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue(String,String,Object,RegistryValueKind)
  nameWithType: Registry.SetValue(String,String,Object,RegistryValueKind)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object,RegistryValueKind)
- uid: Microsoft.Win32.RegistryValueKind
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryValueKind
  nameWithType: RegistryValueKind
  fullName: Microsoft.Win32.RegistryValueKind
- uid: Microsoft.Win32.Registry.Users
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: Users
  nameWithType: Registry.Users
  fullName: Microsoft.Win32.Registry.Users
- uid: Microsoft.Win32.Registry.GetValue*
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: GetValue
  nameWithType: Registry.GetValue
- uid: Microsoft.Win32.Registry.SetValue*
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue
  nameWithType: Registry.SetValue
