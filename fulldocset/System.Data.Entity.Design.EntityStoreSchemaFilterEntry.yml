### YamlMime:ManagedReference
items:
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  id: EntityStoreSchemaFilterEntry
  children:
  - System.Data.Entity.Design.EntityStoreSchemaFilterEntry.#ctor(System.String,System.String,System.String)
  - System.Data.Entity.Design.EntityStoreSchemaFilterEntry.#ctor(System.String,System.String,System.String,System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes,System.Data.Entity.Design.EntityStoreSchemaFilterEffect)
  - System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Catalog
  - System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Effect
  - System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Name
  - System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Schema
  - System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Types
  langs:
  - csharp
  name: EntityStoreSchemaFilterEntry
  nameWithType: EntityStoreSchemaFilterEntry
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  type: Class
  summary: "단일 필터 항목을 나타냅니다. 필터를 허용 하거나 생성 하는 동안 특정 데이터베이스 개체를 제외 하기 위해 사용 됩니다."
  syntax:
    content: public class EntityStoreSchemaFilterEntry
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  langs:
  - csharp
  name: EntityStoreSchemaFilterEntry(String,String,String)
  nameWithType: EntityStoreSchemaFilterEntry.EntityStoreSchemaFilterEntry(String,String,String)
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.EntityStoreSchemaFilterEntry(String,String,String)
  type: Constructor
  assemblies:
  - System.Data.Entity.Design
  namespace: System.Data.Entity.Design
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.Entity.Design.EntityStoreSchemaFilterEntry&quot;> </xref> 지정 된 카탈로그, 스키마 및 이름 필터를 사용 하 여 클래스입니다."
  syntax:
    content: public EntityStoreSchemaFilterEntry (string catalog, string schema, string name);
    parameters:
    - id: catalog
      type: System.String
      description: "적절 한 카탈로그를 선택 하는 데 패턴입니다."
    - id: schema
      type: System.String
      description: "적절 한 스키마 또는 스키마에 제한 되지 않는 null을 선택 하는 데 패턴입니다."
    - id: name
      type: System.String
      description: "적절 한 이름 또는 이름으로 제한 되지 않는 null을 선택 하는 데 패턴입니다."
  overload: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.#ctor(System.String,System.String,System.String,System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes,System.Data.Entity.Design.EntityStoreSchemaFilterEffect)
  id: '#ctor(System.String,System.String,System.String,System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes,System.Data.Entity.Design.EntityStoreSchemaFilterEffect)'
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  langs:
  - csharp
  name: EntityStoreSchemaFilterEntry(String,String,String,EntityStoreSchemaFilterObjectTypes,EntityStoreSchemaFilterEffect)
  nameWithType: EntityStoreSchemaFilterEntry.EntityStoreSchemaFilterEntry(String,String,String,EntityStoreSchemaFilterObjectTypes,EntityStoreSchemaFilterEffect)
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.EntityStoreSchemaFilterEntry(String,String,String,EntityStoreSchemaFilterObjectTypes,EntityStoreSchemaFilterEffect)
  type: Constructor
  assemblies:
  - System.Data.Entity.Design
  namespace: System.Data.Entity.Design
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.Entity.Design.EntityStoreSchemaFilterEntry&quot;> </xref> 클래스 지정 된 카탈로그, 스키마, 이름 및 유형 필터 및 필터 효과 설정을 합니다."
  syntax:
    content: public EntityStoreSchemaFilterEntry (string catalog, string schema, string name, System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes types, System.Data.Entity.Design.EntityStoreSchemaFilterEffect effect);
    parameters:
    - id: catalog
      type: System.String
      description: "적절 한 카탈로그 또는 카탈로그에 제한 되지 않는 null을 선택 하는 데 패턴입니다."
    - id: schema
      type: System.String
      description: "적절 한 스키마 또는 스키마에 제한 되지 않는 null을 선택 하는 데 패턴입니다."
    - id: name
      type: System.String
      description: "적절 한 이름 또는 이름으로 제한 되지 않는 null을 선택 하는 데 패턴입니다."
    - id: types
      type: System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes
      description: "이 필터를 적용 하는 개체의 형식입니다."
    - id: effect
      type: System.Data.Entity.Design.EntityStoreSchemaFilterEffect
      description: "<xref href=&quot;System.Data.Entity.Design.EntityStoreSchemaFilterEffect&quot;> </xref> 를 허용할지 아니면 지정된 된 필터와 일치 하는 항목을 제외할지 여부를 나타내는 값입니다."
  overload: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Catalog
  id: Catalog
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  langs:
  - csharp
  name: Catalog
  nameWithType: EntityStoreSchemaFilterEntry.Catalog
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Catalog
  type: Property
  assemblies:
  - System.Data.Entity.Design
  namespace: System.Data.Entity.Design
  summary: "적절 한 카탈로그를 선택 하는 사용할 수 있는 패턴을 가져옵니다."
  syntax:
    content: public string Catalog { get; }
    return:
      type: System.String
      description: "카탈로그의 일부는 데이터베이스 이름을 Catalog.Schema.Name 서식이 있는 데이터베이스 이름입니다."
  overload: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Catalog*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Effect
  id: Effect
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  langs:
  - csharp
  name: Effect
  nameWithType: EntityStoreSchemaFilterEntry.Effect
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Effect
  type: Property
  assemblies:
  - System.Data.Entity.Design
  namespace: System.Data.Entity.Design
  summary: "이 필터로 결과 미치는 영향을 가져옵니다."
  syntax:
    content: public System.Data.Entity.Design.EntityStoreSchemaFilterEffect Effect { get; }
    return:
      type: System.Data.Entity.Design.EntityStoreSchemaFilterEffect
      description: "<xref href=&quot;System.Data.Entity.Design.EntityStoreSchemaFilterEffect&quot;> </xref> 를 허용할지 아니면 지정된 된 필터와 일치 하는 항목을 제외할지 여부를 나타내는 값입니다."
  overload: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Effect*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Name
  id: Name
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  langs:
  - csharp
  name: Name
  nameWithType: EntityStoreSchemaFilterEntry.Name
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Name
  type: Property
  assemblies:
  - System.Data.Entity.Design
  namespace: System.Data.Entity.Design
  summary: "적절 한 이름을 선택 하는 패턴을 가져옵니다."
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "데이터베이스 이름은 Catalog.Schema.Name 서식이 있는 데이터베이스 이름의 이름 부분입니다."
  overload: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Schema
  id: Schema
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  langs:
  - csharp
  name: Schema
  nameWithType: EntityStoreSchemaFilterEntry.Schema
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Schema
  type: Property
  assemblies:
  - System.Data.Entity.Design
  namespace: System.Data.Entity.Design
  summary: "적절 한 스키마를 선택 하는 사용할 수 있는 패턴을 가져옵니다."
  syntax:
    content: public string Schema { get; }
    return:
      type: System.String
      description: "데이터베이스 이름은 Catalog.Schema.Name 서식이 있는 데이터베이스 이름의 스키마 부분입니다."
  overload: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Schema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Types
  id: Types
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  langs:
  - csharp
  name: Types
  nameWithType: EntityStoreSchemaFilterEntry.Types
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Types
  type: Property
  assemblies:
  - System.Data.Entity.Design
  namespace: System.Data.Entity.Design
  summary: "이 필터에 적용 되는 개체의 형식을 가져옵니다."
  syntax:
    content: public System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes Types { get; }
    return:
      type: System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes
      description: "<xref href=&quot;System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes&quot;> </xref> 에 필터를 적용할 개체 유형을 나타내는 값입니다."
  overload: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Types*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.#ctor(System.String,System.String,System.String)
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  isExternal: false
  name: EntityStoreSchemaFilterEntry(String,String,String)
  nameWithType: EntityStoreSchemaFilterEntry.EntityStoreSchemaFilterEntry(String,String,String)
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.EntityStoreSchemaFilterEntry(String,String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.#ctor(System.String,System.String,System.String,System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes,System.Data.Entity.Design.EntityStoreSchemaFilterEffect)
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  isExternal: false
  name: EntityStoreSchemaFilterEntry(String,String,String,EntityStoreSchemaFilterObjectTypes,EntityStoreSchemaFilterEffect)
  nameWithType: EntityStoreSchemaFilterEntry.EntityStoreSchemaFilterEntry(String,String,String,EntityStoreSchemaFilterObjectTypes,EntityStoreSchemaFilterEffect)
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.EntityStoreSchemaFilterEntry(String,String,String,EntityStoreSchemaFilterObjectTypes,EntityStoreSchemaFilterEffect)
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes
  parent: System.Data.Entity.Design
  isExternal: false
  name: EntityStoreSchemaFilterObjectTypes
  nameWithType: EntityStoreSchemaFilterObjectTypes
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEffect
  parent: System.Data.Entity.Design
  isExternal: false
  name: EntityStoreSchemaFilterEffect
  nameWithType: EntityStoreSchemaFilterEffect
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEffect
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Catalog
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  isExternal: false
  name: Catalog
  nameWithType: EntityStoreSchemaFilterEntry.Catalog
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Catalog
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Effect
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  isExternal: false
  name: Effect
  nameWithType: EntityStoreSchemaFilterEntry.Effect
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Effect
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Name
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  isExternal: false
  name: Name
  nameWithType: EntityStoreSchemaFilterEntry.Name
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Name
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Schema
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  isExternal: false
  name: Schema
  nameWithType: EntityStoreSchemaFilterEntry.Schema
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Schema
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Types
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  isExternal: false
  name: Types
  nameWithType: EntityStoreSchemaFilterEntry.Types
  fullName: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Types
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.#ctor*
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  isExternal: false
  name: EntityStoreSchemaFilterEntry
  nameWithType: EntityStoreSchemaFilterEntry.EntityStoreSchemaFilterEntry
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Catalog*
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  isExternal: false
  name: Catalog
  nameWithType: EntityStoreSchemaFilterEntry.Catalog
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Effect*
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  isExternal: false
  name: Effect
  nameWithType: EntityStoreSchemaFilterEntry.Effect
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Name*
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  isExternal: false
  name: Name
  nameWithType: EntityStoreSchemaFilterEntry.Name
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Schema*
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  isExternal: false
  name: Schema
  nameWithType: EntityStoreSchemaFilterEntry.Schema
- uid: System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Types*
  parent: System.Data.Entity.Design.EntityStoreSchemaFilterEntry
  isExternal: false
  name: Types
  nameWithType: EntityStoreSchemaFilterEntry.Types
