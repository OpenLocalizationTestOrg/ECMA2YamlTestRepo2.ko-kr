### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlResolver
  id: XmlResolver
  children:
  - System.Xml.XmlResolver.#ctor
  - System.Xml.XmlResolver.Credentials
  - System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)
  - System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  - System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)
  - System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)
  langs:
  - csharp
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
  type: Class
  summary: "여는 식별자 URI (Uniform Resource)을 명명 된 외부 XML 리소스를 확인 합니다."
  remarks: "XmlResolver 형식이 엔터티, 문서 유형 정의 (Dtd) 또는 스키마와 같은 외부 XML 리소스를 확인에 사용 됩니다. 사용 하는 것도 프로세스 포함 및 스타일 시트 XSL (Extensible Language) 스타일 시트 또는 XML 스키마 정의 언어 (XSD) 스키마에 요소를 가져옵니다.       XmlResolver 보안 자격 증명 처리, 데이터 원본에 연결을 열어 리소스 스트림 또는 다른 개체 형식의 형태로 반환 등의 리소스에 대 한 연결을 협상의 모든 측면을 처리 합니다. XmlResolver를 호출 하는 개체에 스트림 해석의 작업이 있습니다.       <xref:System.Xml>네임 스페이스는 XmlResolver 클래스의 두 가지 구체적 구현을 포함:- <xref:System.Xml.XmlUrlResolver>모든 클래스에 대 한 기본 해결 프로그램은는 <xref:System.Xml>네임 스페이스.</xref:System.Xml> </xref:System.Xml.XmlUrlResolver> </xref:System.Xml> 지원 된 `file://` 및 `http://` 프로토콜 및 <xref:System.Net.WebRequest?displayProperty=fullName>클래스</xref:System.Net.WebRequest?displayProperty=fullName> 와에서 요청 성능 향상을 위해 클래스를 확장의 예 참조는 <xref:System.Xml.XmlUrlResolver>참조 페이지.</xref:System.Xml.XmlUrlResolver>      - <xref:System.Xml.XmlSecureResolver>object 개체 배치 및 액세스할 수 있는 리소스를 제한 하 여 다른 XmlResolver 개체를 보호 하는 데 도움이 됩니다.</xref:System.Xml.XmlSecureResolver> 예를 들어는 <xref:System.Xml.XmlSecureResolver>특정 인터넷 사이트나 영역에 대 한 액세스 하지 못할 수 있습니다.</xref:System.Xml.XmlSecureResolver>       만들 수 있으며 해결 프로그램을 직접 지정. 판독기는 기본 해결 프로그램을 지정 하지 않으면, <xref:System.Xml.XmlUrlResolver>사용자 자격 증명 없이.</xref:System.Xml.XmlUrlResolver>       설정 하 여 사용할 지정 된 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName>속성과 전달은 <xref:System.Xml.XmlReaderSettings>개체를 <xref:System.Xml.XmlReader.Create%2A>메서드.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName>       사용 리소스에 인증을 요구 하는 시스템에 저장 된 경우는 <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=fullName>속성을 통해 필요한 자격 증명을 지정 합니다.</xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=fullName>      ## 인증 자격 증명을 제공 하 여 XML 데이터 읽기를 포함 하는 파일 제한 된 액세스 정책이 있을 수 있습니다. 사용 하 여 네트워크 리소스에 액세스 하는 데 인증이 필요는 <xref:System.Xml.XmlResolver.Credentials%2A>속성을 통해 필요한 자격 증명을 지정 합니다.</xref:System.Xml.XmlResolver.Credentials%2A> 경우는 <xref:System.Xml.XmlResolver.Credentials%2A>속성이 설정 되지 않은 경우 자격 증명으로 설정 됩니다 `null`.</xref:System.Xml.XmlResolver.Credentials%2A>       예를 들어 인증을 위해 웹에서 데이터를 요청할 때 자격 증명이 필요 하다는 것으로 가정 합니다. 웹 가상 디렉터리에서 익명 액세스를 허용 하지 않는 한 설정 해야 합니다는 <xref:System.Xml.XmlResolver.Credentials%2A>속성 자격 증명을 제공 합니다.</xref:System.Xml.XmlResolver.Credentials%2A> 다음 예제에서는 <xref:System.Xml.XmlReader>사용 하는 개체는 <xref:System.Xml.XmlUrlResolver>http://localhost/bookstore/inventory.xml 사이트에 액세스 하는 기본 자격 증명을 사용 합니다.</xref:System.Xml.XmlUrlResolver> </xref:System.Xml.XmlReader>       [!code-cpp[XmlReaderSettings.cctor#2](~/add/codesnippet/cpp/t-system.xml.xmlresolver_1.cpp)][!code-cs[XmlReaderSettings.cctor#2](~/add/codesnippet/csharp/t-system.xml.xmlresolver_1.cs)][!code-vb[XmlReaderSettings.cctor#2](~/add/codesnippet/visualbasic/t-system.xml.xmlresolver_1.vb) ] 다른 Uri에 대 한 서로 다른 자격 증명을 제공 하 고 캐시에 추가할 수 있습니다.     이러한 자격 증명은 XML의 원본 소스와 다른 Uri에 대 한 인증을 확인 하는 데 사용 됩니다. 다음 예에서는 자격 증명 캐시에 추가 하는 방법을 보여 줍니다.       [!code-vb[XslCompiledTransform.Load#11](~/add/codesnippet/visualbasic/t-system.xml.xmlresolver_2.vb)][!code-cs[XslCompiledTransform.Load#11](~/add/codesnippet/csharp/t-system.xml.xmlresolver_2.cs) ] # # 보안 고려 사항 XmlResolver 클래스와 함께 작업 하는 경우 다음 항목을 고려 하십시오.        -XmlResolver 개체는 사용자 자격 증명과 같은 중요 한 정보를 포함할 수 있습니다. XmlResolver 개체 캐싱과 XmlResolver 개체 신뢰할 수 없는 구성 요소에 전달 하지 않아야 하는 경우 주의 해야 합니다.      -XmlResolver 클래스를 사용 하는 클래스 속성을 디자인 하는 경우 쓰기 전용 속성으로 속성을 정의 합니다. XmlResolver를 사용 하려면를 지정 하는 속성을 사용할 수 있지만 XmlResolver 개체를 반환 하는 데 사용 될 수 없습니다.      -에 전달 된 URI를 가정할 수 없습니다 응용 프로그램에서 신뢰할 수 없는 코드에서 XmlResolver 개체를 허용 하는 경우는 <xref:System.Xml.XmlResolver.GetEntity%2A>메서드가 반환한 것과 동일한 됩니다는 <xref:System.Xml.XmlResolver.ResolveUri%2A>메서드.</xref:System.Xml.XmlResolver.ResolveUri%2A> </xref:System.Xml.XmlResolver.GetEntity%2A> XmlResolver 클래스에서 파생 된 클래스에서 재정의할 수는 <xref:System.Xml.XmlResolver.GetEntity%2A>메서드 데이터를 반환할 원래 URI에 포함 된 다릅니다.</xref:System.Xml.XmlResolver.GetEntity%2A>      -응용 프로그램 메모리에 대 한 서비스 거부를 줄일 수는 <xref:System.Xml.XmlResolver.GetEntity%2A>메서드를 구현 하 여 프로그램 <xref:System.Runtime.InteropServices.ComTypes.IStream>읽은 바이트 수를 제한 하는.</xref:System.Runtime.InteropServices.ComTypes.IStream> </xref:System.Xml.XmlResolver.GetEntity%2A> 이렇게 하면 악의적인 코드 여기서 바이트는 무한 스트림을 전달 하려고 하는 상황에 대비해는 <xref:System.Xml.XmlResolver.GetEntity%2A>메서드.</xref:System.Xml.XmlResolver.GetEntity%2A>"
  example:
  - "The following example creates an <xref:System.Xml.XmlUrlResolver> with default credentials. A <xref:System.Xml.XmlReader> is used to read and display the resulting data stream.  \n  \n [!code-cs[XmlResolver_ex#1](~/add/codesnippet/csharp/t-system.xml.xmlresolver_3.cs)]\n [!code-vb[XmlResolver_ex#1](~/add/codesnippet/visualbasic/t-system.xml.xmlresolver_3.vb)]"
  syntax:
    content: public abstract class XmlResolver
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.XmlResolver.#ctor
  id: '#ctor'
  parent: System.Xml.XmlResolver
  langs:
  - csharp
  name: XmlResolver()
  nameWithType: XmlResolver.XmlResolver()
  fullName: System.Xml.XmlResolver.XmlResolver()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xml.XmlResolver&quot;> </xref> 클래스입니다."
  remarks: "이 생성자는이 형식으로 상태를 초기화 하는 파생된 클래스 생성자에서 호출 됩니다."
  syntax:
    content: protected XmlResolver ();
    parameters: []
  overload: System.Xml.XmlResolver.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlResolver.Credentials
  id: Credentials
  parent: System.Xml.XmlResolver
  langs:
  - csharp
  name: Credentials
  nameWithType: XmlResolver.Credentials
  fullName: System.Xml.XmlResolver.Credentials
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "파생된 클래스에서 재정의 되 면 웹 요청을 인증 하는 데 사용 되는 자격 증명을 설정 합니다."
  remarks: "가상 디렉터리는 인증에 필요 하지 않으면이 속성을 설정할 필요가 없습니다. 그렇지 않으면 사용자의 자격 증명이 제공 되어야 합니다.       다음 C# 코드에서 자격 증명을 설정는 <xref:System.Xml.XmlResolver>개체입니다.</xref:System.Xml.XmlResolver>      ```   NetworkCredential nc = new NetWorkCredential(UserName,SecurelyStoredPassword,Domain);   XmlUrlResolver resolver = new XmlUrlResolver();   resolver.Credentials = nc;   ```다양 한 Uri에 다른 자격 증명을 연결 하 고 캐시에 추가할 수 있습니다. 다음 XML의 원본 소스와 다른 Uri에 대 한 인증을 확인 하려면 자격 증명을 사용할 수 있습니다.      ```   NetworkCredential myCred = new NetworkCredential(UserName,SecurelyStoredPassword,Domain);    CredentialCache myCache = new CredentialCache();    myCache.Add(new Uri(&quot;http://www.contoso.com/&quot;), &quot;Basic&quot;, myCred);    myCache.Add(new Uri(&quot;http://app.contoso.com/&quot;), &quot;Basic&quot;, myCred);   XmlUrlResolver resolver = new XmlUrlResolver();   resolver.Credentials = myCache;   ```"
  example:
  - See <xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=fullName> for an example that uses this property.
  syntax:
    content: public virtual System.Net.ICredentials Credentials { set; }
    return:
      type: System.Net.ICredentials
      description: "웹 요청을 인증 하는 데 사용할 자격 증명입니다. 기본값은이 속성을 설정 하지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, 즉는 <xref uid=&quot;langword_csharp_XmlResolver&quot; name=&quot;XmlResolver&quot; href=&quot;&quot;> </xref> 에 사용자 자격 증명이 없습니다."
  overload: System.Xml.XmlResolver.Credentials*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)
  id: GetEntity(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlResolver
  langs:
  - csharp
  name: GetEntity(Uri,String,Type)
  nameWithType: XmlResolver.GetEntity(Uri,String,Type)
  fullName: System.Xml.XmlResolver.GetEntity(Uri,String,Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "파생된 클래스에서 재정의 되 면 실제 리소스가 포함 된 개체로 URI를 매핑합니다."
  remarks: "이 메서드는 호출자가 URI가 나타내는 실제 리소스를 포함 하는 개체에 지정된 된 URI에 매핑할 때 사용 됩니다. 반환 된 개체의 형식이 negotiable; 그러나 구현 <xref:System.IO.Stream?displayProperty=fullName>.</xref:System.IO.Stream?displayProperty=fullName> 지원 항상 해야       이 메서드의 비동기 버전 <xref:System.Xml.XmlResolver.GetEntityAsync%2A>.</xref:System.Xml.XmlResolver.GetEntityAsync%2A> 을 참조 하십시오.      > [!IMPORTANT] > 응용 프로그램을 구현 하 여 메모리 GetEntity 메서드에 대 한 서비스 거부를 줄일 수는 <xref:System.Runtime.InteropServices.ComTypes.IStream>읽은 바이트 수를 제한 하는.</xref:System.Runtime.InteropServices.ComTypes.IStream> 이렇게 하면 악의적인 코드 여기서 GetEntity 메서드에 무한 바이트 스트림을 전달 하려고 하는 상황을 방지 합니다."
  example:
  - See <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName> for an example using this method.
  syntax:
    content: public abstract object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);
    parameters:
    - id: absoluteUri
      type: System.Uri
      description: "<xref:System.Xml.XmlResolver.ResolveUri*>.</xref:System.Xml.XmlResolver.ResolveUri*> 에서 반환 된 URI"
    - id: role
      type: System.String
      description: "현재 사용 되지 않습니다."
    - id: ofObjectToReturn
      type: System.Type
      description: "반환할 개체의 형식입니다. 현재 버전 System.IO.Stream 개체를 반환 합니다."
    return:
      type: System.Object
      description: "Stream 개체 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 스트림 외의 다른 형식을 지정 합니다."
  overload: System.Xml.XmlResolver.GetEntity*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>ofObjectToReturn</code>않습니다는 <xref uid=&quot;langword_csharp_Stream&quot; name=&quot;Stream&quot; href=&quot;&quot;> </xref> 유형입니다."
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "지정된 된 URI는 절대 URI가 아닙니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>absoluteUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Exception
    commentId: T:System.Exception
    description: "런타임 오류 (예를 들어 중단 된 서버 연결)입니다."
  platform:
  - net462
- uid: System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  id: GetEntityAsync(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlResolver
  langs:
  - csharp
  name: GetEntityAsync(Uri,String,Type)
  nameWithType: XmlResolver.GetEntityAsync(Uri,String,Type)
  fullName: System.Xml.XmlResolver.GetEntityAsync(Uri,String,Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "실제 리소스가 포함 된 개체로 URI를 비동기적으로 매핑합니다."
  remarks: "이 비동기 버전의 <xref:System.Xml.XmlResolver.GetEntity%2A>, 같은 기능을 갖춘.</xref:System.Xml.XmlResolver.GetEntity%2A> 이 메서드를 사용 하려면 설정 해야 합니다는 <xref:System.Xml.XmlReaderSettings.Async%2A>나타내는 플래그입니다. `true`.</xref:System.Xml.XmlReaderSettings.Async%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task<object> GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);
    parameters:
    - id: absoluteUri
      type: System.Uri
      description: "<xref:System.Xml.XmlResolver.ResolveUri*>.</xref:System.Xml.XmlResolver.ResolveUri*> 에서 반환 된 URI"
    - id: role
      type: System.String
      description: "현재 사용 되지 않습니다."
    - id: ofObjectToReturn
      type: System.Type
      description: "반환할 개체의 형식입니다. 현재 버전에만 반환 <xref:System.IO.Stream>개체입니다.</xref:System.IO.Stream>"
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "Stream 개체 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 스트림 외의 다른 형식을 지정 합니다."
  overload: System.Xml.XmlResolver.GetEntityAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)
  id: ResolveUri(System.Uri,System.String)
  parent: System.Xml.XmlResolver
  langs:
  - csharp
  name: ResolveUri(Uri,String)
  nameWithType: XmlResolver.ResolveUri(Uri,String)
  fullName: System.Xml.XmlResolver.ResolveUri(Uri,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "파생된 클래스에서 재정의 되 면 기본 및 상대 Uri에서 절대 URI를 확인 합니다."
  remarks: "이 URI를 기준으로 하는 엔터티에 대 한 후속 요청에 대 한 기본 URI로 절대 URI는 사용할 수 있습니다."
  example:
  - See <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName> for an example that uses this method.
  syntax:
    content: public virtual Uri ResolveUri (Uri baseUri, string relativeUri);
    parameters:
    - id: baseUri
      type: System.Uri
      description: "기본 URI는 상대 URI를 확인 하는 데 사용 합니다."
    - id: relativeUri
      type: System.String
      description: "확인할 URI입니다. 절대 또는 상대 URI 수 있습니다. 경우 절대이 값이 대체는 `baseUri` 값입니다. 경우 상대와 결합 하 여는 `baseUri` 를 절대 URI를 확인 합니다."
    return:
      type: System.Uri
      description: "절대 URI 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 상대 URI를 확인할 수 없는 경우."
  overload: System.Xml.XmlResolver.ResolveUri*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>relativeUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)
  id: SupportsType(System.Uri,System.Type)
  parent: System.Xml.XmlResolver
  langs:
  - csharp
  name: SupportsType(Uri,Type)
  nameWithType: XmlResolver.SupportsType(Uri,Type)
  fullName: System.Xml.XmlResolver.SupportsType(Uri,Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "이외의 형식을 반환 하도록 확인자를 사용 하면 &lt;xref:System.IO.Stream?displayProperty=fullName&gt;합니다."
  syntax:
    content: public virtual bool SupportsType (Uri absoluteUri, Type type);
    parameters:
    - id: absoluteUri
      type: System.Uri
      description: "URI입니다."
    - id: type
      type: System.Type
      description: "반환할 형식입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <code> type </code> 지원 되 고, 그러지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xml.XmlResolver.SupportsType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Xml.XmlResolver.#ctor
  parent: System.Xml.XmlResolver
  isExternal: false
  name: XmlResolver()
  nameWithType: XmlResolver.XmlResolver()
  fullName: System.Xml.XmlResolver.XmlResolver()
- uid: System.Xml.XmlResolver.Credentials
  parent: System.Xml.XmlResolver
  isExternal: false
  name: Credentials
  nameWithType: XmlResolver.Credentials
  fullName: System.Xml.XmlResolver.Credentials
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: true
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlResolver
  isExternal: false
  name: GetEntity(Uri,String,Type)
  nameWithType: XmlResolver.GetEntity(Uri,String,Type)
  fullName: System.Xml.XmlResolver.GetEntity(Uri,String,Type)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlResolver
  isExternal: false
  name: GetEntityAsync(Uri,String,Type)
  nameWithType: XmlResolver.GetEntityAsync(Uri,String,Type)
  fullName: System.Xml.XmlResolver.GetEntityAsync(Uri,String,Type)
- uid: System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)
  parent: System.Xml.XmlResolver
  isExternal: false
  name: ResolveUri(Uri,String)
  nameWithType: XmlResolver.ResolveUri(Uri,String)
  fullName: System.Xml.XmlResolver.ResolveUri(Uri,String)
- uid: System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)
  parent: System.Xml.XmlResolver
  isExternal: false
  name: SupportsType(Uri,Type)
  nameWithType: XmlResolver.SupportsType(Uri,Type)
  fullName: System.Xml.XmlResolver.SupportsType(Uri,Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlResolver.#ctor*
  parent: System.Xml.XmlResolver
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver.XmlResolver
- uid: System.Xml.XmlResolver.Credentials*
  parent: System.Xml.XmlResolver
  isExternal: false
  name: Credentials
  nameWithType: XmlResolver.Credentials
- uid: System.Xml.XmlResolver.GetEntity*
  parent: System.Xml.XmlResolver
  isExternal: false
  name: GetEntity
  nameWithType: XmlResolver.GetEntity
- uid: System.Xml.XmlResolver.GetEntityAsync*
  parent: System.Xml.XmlResolver
  isExternal: false
  name: GetEntityAsync
  nameWithType: XmlResolver.GetEntityAsync
- uid: System.Xml.XmlResolver.ResolveUri*
  parent: System.Xml.XmlResolver
  isExternal: false
  name: ResolveUri
  nameWithType: XmlResolver.ResolveUri
- uid: System.Xml.XmlResolver.SupportsType*
  parent: System.Xml.XmlResolver
  isExternal: false
  name: SupportsType
  nameWithType: XmlResolver.SupportsType
