### YamlMime:ManagedReference
items:
- uid: System.Security.Principal.WindowsImpersonationContext
  id: WindowsImpersonationContext
  children:
  - System.Security.Principal.WindowsImpersonationContext.Dispose
  - System.Security.Principal.WindowsImpersonationContext.Dispose(System.Boolean)
  - System.Security.Principal.WindowsImpersonationContext.Undo
  langs:
  - csharp
  name: WindowsImpersonationContext
  nameWithType: WindowsImpersonationContext
  fullName: System.Security.Principal.WindowsImpersonationContext
  type: Class
  summary: "가장 작업 전의 Windows 사용자를 나타냅니다."
  remarks: "이 클래스 사용자는 다른 사용자를 가장 한 후 사용자의 id를 되돌립니다.      > [!IMPORTANT] >이 형식이 구현 하는 <xref:System.IDisposable>인터페이스.</xref:System.IDisposable> 형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다. 직접 형식의 삭제 하려면 해당 <xref:System.IDisposable.Dispose%2A>에서 메서드는 `try` / `catch` 블록.</xref:System.IDisposable.Dispose%2A> 작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다. 자세한 내용은의 &quot;를 사용 하는 개체는 구현 IDisposable&quot; 섹션을 참조 하십시오.는 <xref:System.IDisposable>인터페이스 항목.</xref:System.IDisposable>"
  example:
  - "The following example demonstrates how to impersonate a user and then revert to the original identity.  \n  \n [!code-cpp[WindowsIdentity Impersonation#1](~/add/codesnippet/cpp/t-system.security.princi_4_1.cpp)]\n [!code-cs[WindowsIdentity Impersonation#1](~/add/codesnippet/csharp/t-system.security.princi_4_1.cs)]\n [!code-vb[WindowsIdentity Impersonation#1](~/add/codesnippet/visualbasic/t-system.security.princi_4_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class WindowsImpersonationContext : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose
  id: Dispose
  parent: System.Security.Principal.WindowsImpersonationContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: WindowsImpersonationContext.Dispose()
  fullName: System.Security.Principal.WindowsImpersonationContext.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Security.Principal.WindowsImpersonationContext&quot;> </xref>합니다."
  remarks: "<xref:System.Security.Principal.WindowsImpersonationContext>.</xref:System.Security.Principal.WindowsImpersonationContext> 를 사용 하 여 작업을 마쳤으면 Dispose를 호출 합니다. Dispose 메서드는 <xref:System.Security.Principal.WindowsImpersonationContext>불안정 한 상태가.</xref:System.Security.Principal.WindowsImpersonationContext> Dispose를 호출한 후에 대 한 모든 참조를 해제 해야는 <xref:System.Security.Principal.WindowsImpersonationContext>가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Security.Principal.WindowsImpersonationContext>차지한.</xref:System.Security.Principal.WindowsImpersonationContext> </xref:System.Security.Principal.WindowsImpersonationContext> 자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md) 및 [Dispose 메서드를 구현](~/add/includes/ajax-current-ext-md.md)합니다.       **참고:** <xref:System.Security.Principal.WindowsImpersonationContext>.</xref:System.Security.Principal.WindowsImpersonationContext> 에 대 한 마지막 참조를 해제 하기 전에 항상 호출 삭제 사용 중인 리소스가 가비지 수집기 호출할 때까지 해제 되지 것입니다 그렇지 않은 경우는 <xref:System.Security.Principal.WindowsImpersonationContext>개체의 **Finalize** 메서드.</xref:System.Security.Principal.WindowsImpersonationContext>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Principal.WindowsImpersonationContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsImpersonationContext
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: WindowsImpersonationContext.Dispose(Boolean)
  fullName: System.Security.Principal.WindowsImpersonationContext.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Security.Principal.WindowsImpersonationContext&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public `Dispose()`메서드 및 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> `Dispose()`보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다. <xref:System.Object.Finalize%2A>호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</xref:System.Object.Finalize%2A>       경우는 `disposing` 매개 변수가 true 이면이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Security.Principal.WindowsImpersonationContext>참조.</xref:System.Security.Principal.WindowsImpersonationContext> 이 메서드 호출에서 `Dispose()` 각 참조 된 개체의 메서드."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Security.Principal.WindowsImpersonationContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsImpersonationContext.Undo
  id: Undo
  parent: System.Security.Principal.WindowsImpersonationContext
  langs:
  - csharp
  name: Undo()
  nameWithType: WindowsImpersonationContext.Undo()
  fullName: System.Security.Principal.WindowsImpersonationContext.Undo()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "이 개체가 나타내는 Windows 사용자에 게 사용자 컨텍스트를 되돌립니다."
  remarks: ''
  example:
  - "The following example shows how to impersonate a Windows identity using a specified user token.  \n  \n [!code-cpp[Classic WindowsImpersonationContext.Undo Example#1](~/add/codesnippet/cpp/m-system.security.princi_8_1.cpp)]\n [!code-cs[Classic WindowsImpersonationContext.Undo Example#1](~/add/codesnippet/csharp/m-system.security.princi_8_1.cs)]\n [!code-vb[Classic WindowsImpersonationContext.Undo Example#1](~/add/codesnippet/visualbasic/m-system.security.princi_8_1.vb)]"
  syntax:
    content: public void Undo ();
    parameters: []
  overload: System.Security.Principal.WindowsImpersonationContext.Undo*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Id를 되돌리려면 이외의 다른 목적을 위해이 메서드를 사용 하려고 시도 합니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Dispose()
  nameWithType: WindowsImpersonationContext.Dispose()
  fullName: System.Security.Principal.WindowsImpersonationContext.Dispose()
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: WindowsImpersonationContext.Dispose(Boolean)
  fullName: System.Security.Principal.WindowsImpersonationContext.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.WindowsImpersonationContext.Undo
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Undo()
  nameWithType: WindowsImpersonationContext.Undo()
  fullName: System.Security.Principal.WindowsImpersonationContext.Undo()
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose*
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Dispose
  nameWithType: WindowsImpersonationContext.Dispose
- uid: System.Security.Principal.WindowsImpersonationContext.Undo*
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Undo
  nameWithType: WindowsImpersonationContext.Undo
