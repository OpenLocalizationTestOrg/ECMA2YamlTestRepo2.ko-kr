### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.PrincipalPermission
  id: PrincipalPermission
  children:
  - System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)
  - System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)
  - System.Security.Permissions.PrincipalPermission.Copy
  - System.Security.Permissions.PrincipalPermission.Demand
  - System.Security.Permissions.PrincipalPermission.Equals(System.Object)
  - System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.PrincipalPermission.GetHashCode
  - System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.PrincipalPermission.IsUnrestricted
  - System.Security.Permissions.PrincipalPermission.ToString
  - System.Security.Permissions.PrincipalPermission.ToXml
  - System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: PrincipalPermission
  nameWithType: PrincipalPermission
  fullName: System.Security.Permissions.PrincipalPermission
  type: Class
  summary: "현재 보안 주체는 확인할 수 있습니다 (참조 <xref:System.Security.Principal.IPrincipal>) 선언적 코딩 스타일과 명령적 보안 동작을 모두에 대해 정의 된 언어 구문을 사용 하 여.</xref:System.Security.Principal.IPrincipal> 이 클래스는 상속 될 수 없습니다."
  remarks: "Id 정보 (사용자 이름 및 역할)의 생성자에 전달 하 여 PrincipalPermission 활성 보안 주체의 id이이 정보와 일치 하는지 요구를 사용할 수 있습니다.       활성 일치 하도록 <xref:System.Security.Principal.IPrincipal>및 관련 된 <xref:System.Security.Principal.IIdentity>, 지정 된 id 및 역할 모두 일치 해야 합니다.</xref:System.Security.Principal.IIdentity> </xref:System.Security.Principal.IPrincipal> 경우 `null` identity 문자열을 사용 하면 모든 id와 일치 하는 요청으로 해석 됩니다. 사용 하 여 `null` 역할 문자열에는 모든 역할 일치 합니다. 암시, 전달 `null` 에 대 한 매개 변수 `name` 또는 `role` PrincipalPermission을 일치시킬지 id 및 모든 <xref:System.Security.Principal.IPrincipal>.</xref:System.Security.Principal.IPrincipal> 역할 하 게 결정 하는 PrincipalPermission 수행할 이기도 여부는 <xref:System.Security.Principal.IIdentity>인증 된 또는 인증 되지 않은 엔터티를 나타냅니다.</xref:System.Security.Principal.IIdentity> 이 경우 `name` 및 `role` 무시 됩니다.       대부분의 기타 권한을 달리 PrincipalPermission <xref:System.Security.CodeAccessPermission>.</xref:System.Security.CodeAccessPermission> 확장 되지 않습니다. 그러나 구현,는 <xref:System.Security.IPermission>인터페이스.</xref:System.Security.IPermission> 이 PrincipalPermission 코드 액세스 권한이; 없기 때문에 즉, 한 실행 어셈블리의 id에 따라 부여 되지 합니다. 대신, 코드 작업을 수행할 수 있습니다 (<xref:System.Security.Permissions.PrincipalPermission.Demand%2A>, <xref:System.Security.Permissions.PrincipalPermission.Union%2A>, <xref:System.Security.Permissions.PrincipalPermission.Intersect%2A>등) 코드 액세스 및 코드 id 권한을 이러한 동작을 수행 하는 방식과 동일한 방식으로 현재 사용자 id와 비교 합니다.</xref:System.Security.Permissions.PrincipalPermission.Intersect%2A> </xref:System.Security.Permissions.PrincipalPermission.Union%2A> </xref:System.Security.Permissions.PrincipalPermission.Demand%2A>      > [!IMPORTANT] > 보안 주체 권한 요청 하기 전에 현재 응용 프로그램 도메인의 주 정책을 <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> 열거형 값으로 설정 하는 데 필요한은 기본적으로 주 정책 <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> 설정 주체 정책 설정 하지 않으면 경우 <xref:System.Security.Principal.PrincipalPolicy>, 보안 주체 권한 요청이 실패 합니다.</xref:System.Security.Principal.PrincipalPolicy> 보안 주체 권한을 요청 하기 전에 다음 코드를 실행 해야: >>`AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`"
  example:
  - "The following example requires the active principal to be an administrator. The `name` parameter is `null`, which enables any user who is an administrator to pass the demand.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cs[Classic PrincipalPermission Example#1](~/add/codesnippet/csharp/t-system.security.permis_19_1.cs)]\n [!code-vb[Classic PrincipalPermission Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_19_1.vb)]\n [!code-cpp[Classic PrincipalPermission Example#1](~/add/codesnippet/cpp/t-system.security.permis_19_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class PrincipalPermission : System.Security.IPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  implements:
  - System.Security.IPermission
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: PrincipalPermission(PermissionState)
  nameWithType: PrincipalPermission.PrincipalPermission(PermissionState)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> 지정된 된 <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>합니다."
  remarks: "`None`일치 하는 인증 되지 않은 주 서버 (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> 은 빈 문자열 (&quot;&quot;), no <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>, <xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A>은 `false`).</xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> `Unrestricted`일치 하는 모든 보안 주체 (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> 은 `null`, <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>은 `null`).</xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A>      > [!NOTE] >이 생성자를와 다른 사용 권한이 디자인의 일관성을 위해 포함 하지만 실제로 유용 하지 않습니다."
  syntax:
    content: public PrincipalPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "중 하나는 <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref> 값입니다."
  overload: System.Security.Permissions.PrincipalPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> state </code> 매개 변수가 유효 하지 않거나 <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: PrincipalPermission(String,String)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> 지정 된 항목에 대 한 클래스 <code> name </code> 및 <code> role </code>합니다."
  remarks: "두는 `name` 매개 변수 및 `role` 일치 하도록 활성 <xref:System.Security.Principal.IPrincipal>및 관련된 <xref:System.Security.Principal.IIdentity>.</xref:System.Security.Principal.IIdentity> </xref:System.Security.Principal.IPrincipal> 이 권한에 대 한 매개 변수 일치 해야 합니다 설정 `name` 를 `null` 를 역할에 사용자를 확인 합니다."
  example:
  - "The following example requires the active principal to be an administrator. The `name` parameter is `null`, which enables any user who is an administrator to pass the demand.  \n  \n **Note** In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cs[Classic PrincipalPermission Example#1](~/add/codesnippet/csharp/b42fc3af-7a7c-4eef-9f54-_1.cs)]\n [!code-vb[Classic PrincipalPermission Example#1](~/add/codesnippet/visualbasic/b42fc3af-7a7c-4eef-9f54-_1.vb)]\n [!code-cpp[Classic PrincipalPermission Example#1](~/add/codesnippet/cpp/b42fc3af-7a7c-4eef-9f54-_1.cpp)]"
  syntax:
    content: public PrincipalPermission (string name, string role);
    parameters:
    - id: name
      type: System.String
      description: "이름에서 <xref:System.Security.Principal.IPrincipal>개체의 사용자.</xref:System.Security.Principal.IPrincipal>"
    - id: role
      type: System.String
      description: "역할은 <xref:System.Security.Principal.IPrincipal>개체의 사용자 (예: 관리자).</xref:System.Security.Principal.IPrincipal>"
  overload: System.Security.Permissions.PrincipalPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: PrincipalPermission(String,String,Boolean)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String,Boolean)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> 지정 된 항목에 대 한 클래스 <code> name </code>, <code> role </code>, 및 인증 상태입니다."
  remarks: "두는 `name` 매개 변수 및 `role` 일치 하도록 활성 <xref:System.Security.Principal.IPrincipal>및 관련된 <xref:System.Security.Principal.IIdentity>.</xref:System.Security.Principal.IIdentity> </xref:System.Security.Principal.IPrincipal> 이 권한에 대 한 매개 변수 일치 해야 합니다"
  syntax:
    content: public PrincipalPermission (string name, string role, bool isAuthenticated);
    parameters:
    - id: name
      type: System.String
      description: "이름에서 <xref:System.Security.Principal.IPrincipal>개체의 사용자.</xref:System.Security.Principal.IPrincipal>"
    - id: role
      type: System.String
      description: "역할은 <xref:System.Security.Principal.IPrincipal>개체의 사용자 (예: 관리자).</xref:System.Security.Principal.IPrincipal>"
    - id: isAuthenticated
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>사용자가 인증 되었는지; 나타내는 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Permissions.PrincipalPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Copy
  id: Copy
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: PrincipalPermission.Copy()
  fullName: System.Security.Permissions.PrincipalPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "만들고 현재 사용 권한의 동일한 복사본을 반환 합니다."
  remarks: "사용 권한의 복사본은 원래 사용 권한과 동일한 보안 주체 및 id를 나타냅니다."
  syntax:
    content: public System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "현재 사용 권한의 복사본입니다."
  overload: System.Security.Permissions.PrincipalPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Demand
  id: Demand
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Demand()
  nameWithType: PrincipalPermission.Demand()
  fullName: System.Security.Permissions.PrincipalPermission.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "런타임에 현재 보안 주체가 현재 사용 권한이 지정 된 보안 주체가 일치 하는지 여부를 결정 합니다."
  remarks: "하지 않으면 <xref:System.Security.SecurityException>은 요청이 성공 하면 발생 합니다.</xref:System.Security.SecurityException>       이 메서드를 호출 스레드로 연결 된 주 서버에 대해 작동 합니다.      > [!IMPORTANT] > Demand 메서드를 호출 하기 전에 해야 하는 현재 응용 프로그램 도메인의 주 정책을 <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> 열거형 값으로 설정 기본적으로 보안 주체 정책은 <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> 설정 주체 정책 설정 하지 않으면 경우 <xref:System.Security.Principal.PrincipalPolicy>, 보안 주체 권한 요청이 실패 합니다.</xref:System.Security.Principal.PrincipalPolicy> 보안 주체 권한 요청 발생 하기 전에 다음 코드를 실행 해야: >>`AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.Permissions.PrincipalPermission.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "현재 보안 주체가 현재 사용 권한이 지정 된 보안 주체에 대 한 보안 검사를 전달 하지 않습니다.       -또는-현재 <xref:System.Security.Principal.IPrincipal>은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Security.Principal.IPrincipal>"
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PrincipalPermission.Equals(Object)
  fullName: System.Security.Permissions.PrincipalPermission.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "확인 여부를 지정 된 <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> 현재 개체가 같은지 <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref>합니다."
  remarks: "자세한 내용은 <xref:System.Object.Equals%2A>.</xref:System.Object.Equals%2A> 을 참조 하십시오."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> 현재와 비교할 개체 <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref>합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하는 경우 지정 된 <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> 현재 같은지 <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> 개체; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Permissions.PrincipalPermission.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PrincipalPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.PrincipalPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "지정 된 상태의 XML 인코딩을 사용 권한을 다시 만듭니다."
  syntax:
    content: public void FromXml (System.Security.SecurityElement elem);
    parameters:
    - id: elem
      type: System.Security.SecurityElement
      description: "XML 사용 권한을 다시 만드는 데 사용할 인코딩입니다."
  overload: System.Security.Permissions.PrincipalPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>elem</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> elem </code> 매개 변수가 올바른 권한 요소가 아닙니다.       -또는- <code> elem </code> 매개 변수의 버전 번호가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.GetHashCode
  id: GetHashCode
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PrincipalPermission.GetHashCode()
  fullName: System.Security.Permissions.PrincipalPermission.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "에 대 한 해시 코드를 가져옵니다는 <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> 개체 해시 알고리즘 및 데이터 해시 테이블 같은 구조에 적합 합니다."
  remarks: "두 인스턴스가 같은 권한의 대 한 해시 코드 서로 다를 수 있으므로 해시 코드를 사용 두 개를 비교 하 <xref:System.Security.Permissions.PrincipalPermission>개체입니다.</xref:System.Security.Permissions.PrincipalPermission>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "현재에 대 한 해시 코드 <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> 개체입니다."
  overload: System.Security.Permissions.PrincipalPermission.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: PrincipalPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "만들고 있는 현재 사용 권한 및 지정한 사용 권한의 공통 사용 권한을 반환 합니다."
  remarks: "이 메서드는 <xref:System.Security.Permissions.PrincipalPermission>.</xref:System.Security.Permissions.PrincipalPermission> 유용 하므로 두 명의 사용자가 교차 되지 예를 들어 [!code-cpp [System.Security.Permissions.PrincipalPermission#1](~/add/codesnippet/cpp/7be5e612-f4dc-44d9-9530-_1.cpp)][!code-cs[System.Security.Permissions.PrincipalPermission#1](~/add/codesnippet/csharp/7be5e612-f4dc-44d9-9530-_1.cs)][!code-vb[System.Security.Permissions.PrincipalPermission#1](~/add/codesnippet/visualbasic/7be5e612-f4dc-44d9-9530-_1.vb) ] 같습니다 [!code-cpp [System.Security.Permissions.PrincipalPermission#2](~/add/codesnippet/cpp/7be5e612-f4dc-44d9-9530-_2.cpp)][!code-cs[System.Security.Permissions.PrincipalPermission#2](~/add/codesnippet/csharp/7be5e612-f4dc-44d9-9530-_2.cs)][!code-vb[System.Security.Permissions.PrincipalPermission#2](~/add/codesnippet/visualbasic/7be5e612-f4dc-44d9-9530-_2.vb) ] Bob와 중인 id 나타내는 동시에 합니다.         실제로 `pp1.Demand()` 경우 인증 되지 않은 사용자에만 성공 (빈 문자열과 같은 이름의 (&quot;&quot;))는 관리자 역할을 수행 하도록 허용 합니다."
  syntax:
    content: public System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "현재 사용 권한 집합과 교차 하는 사용 권한입니다. 현재 사용 권한과 동일한 형식 이어야 합니다."
    return:
      type: System.Security.IPermission
      description: "현재 사용 권한 및 지정한 사용 권한의의 교차 부분을 나타내는 새 사용 권한. 이 새로운 사용 권한은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 교집합이 비어 있는 경우."
  overload: System.Security.Permissions.PrincipalPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code> 매개 변수가 않습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 및 현재 사용 권한과 동일한 클래스의 인스턴스가 아닙니다."
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: PrincipalPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "현재 사용 권한이 지정된 된 사용 권한의 하위 집합 인지 확인 합니다."
  remarks: "현재 권한은 현재 사용 권한에 대 한 성공 하는 모든 요구 사항에 대 한 지정한 사용 권한에 성공 하는 경우 지정된 된 사용 권한의 하위 집합입니다."
  example:
  - "The following example defines instances of <xref:System.Security.Permissions.PrincipalPermission> corresponding to three distinct users. Two additional instances are then created as groups of users. `pp1` represents Bob and Louise, `pp2` represents Bob, Louise, and Greg.  \n  \n [!code-cpp[Classic PrincipalPermission.IsSubsetOf Example#1](~/add/codesnippet/cpp/88c77b70-6ab7-4d6b-914d-_1.cpp)]\n [!code-vb[Classic PrincipalPermission.IsSubsetOf Example#1](~/add/codesnippet/visualbasic/88c77b70-6ab7-4d6b-914d-_1.vb)]\n [!code-cs[Classic PrincipalPermission.IsSubsetOf Example#1](~/add/codesnippet/csharp/88c77b70-6ab7-4d6b-914d-_1.cs)]  \n  \n With the preceding declarations, `pp1.IsSubsetOf(pp2)` returns `true`, and `pp2.IsSubsetOf(pp1)` returns `false`."
  syntax:
    content: public bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "권한 하위 집합 관계에 대해 테스트 하는 것입니다. 이 사용 권한은 현재 권한과 동일한 형식 이어야 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 사용 권한이 지정 된 사용 권한의 하위 집합이 면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Permissions.PrincipalPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code> 매개 변수는 현재 사용 권한과 동일한 유형의 하지 않은 개체입니다."
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PrincipalPermission.IsUnrestricted()
  fullName: System.Security.Permissions.PrincipalPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "현재 사용 권한이 제한 되지 않았는지 여부를 나타내는 값을 반환 합니다."
  remarks: "무제한 <xref:System.Security.Permissions.PrincipalPermission>모든 보안 주체와 일치 합니다.</xref:System.Security.Permissions.PrincipalPermission>"
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 사용 권한이 제한 된; 없는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Permissions.PrincipalPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.ToString
  id: ToString
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: ToString()
  nameWithType: PrincipalPermission.ToString()
  fullName: System.Security.Permissions.PrincipalPermission.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "페이지를 만들고 현재 사용 권한이 나타내는 문자열을 반환 합니다."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "현재 사용 권한의 표현입니다."
  overload: System.Security.Permissions.PrincipalPermission.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: PrincipalPermission.ToXml()
  fullName: System.Security.Permissions.PrincipalPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "사용 권한 및 현재 상태의 XML 인코딩을 만듭니다."
  syntax:
    content: public System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "모든 상태 정보를 포함 하는 권한의 XML 인코딩입니다."
  overload: System.Security.Permissions.PrincipalPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: PrincipalPermission.Union(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "현재 사용 권한 및 지정된 된 사용 권한을 합한 사용 권한을 만듭니다."
  remarks: "공용 구조체의 지정 된 개별 집합이 기준을 나타내는 사용 권한을 만듭니다 <xref:System.Security.Permissions.PrincipalPermission>개체입니다.</xref:System.Security.Permissions.PrincipalPermission> 조밀 하 게 테스트 하는 조건 집합을 나타내는 데 유용 합니다. 선언이 포함 된 예를 들어 [!code-cpp [System.Security.Permissions.PrincipalPermission#3](~/add/codesnippet/cpp/dd443af0-98ea-4e3c-9761-_1.cpp)][!code-cs[System.Security.Permissions.PrincipalPermission#3](~/add/codesnippet/csharp/dd443af0-98ea-4e3c-9761-_1.cs)][!code-vb[System.Security.Permissions.PrincipalPermission#3](~/add/codesnippet/visualbasic/dd443af0-98ea-4e3c-9761-_1.vb) ] `(ppBob.Union(ppLouise)).Demand()` 현재 보안 주체 관리자나 기술 지원 중인의 관리자 역할의 역할에서 Bob을 나타내는 경우 성공 합니다.           "
  syntax:
    content: public System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "현재 사용 권한과 결합할 사용 권한 현재 사용 권한과 동일한 형식 이어야 합니다."
    return:
      type: System.Security.IPermission
      description: "현재 사용 권한 및 지정한 사용 권한의 합집합을 나타내는 새 사용 권한."
  overload: System.Security.Permissions.PrincipalPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> other </code> 매개 변수는 현재 사용 권한과 동일한 유형의 하지 않은 개체입니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission(PermissionState)
  nameWithType: PrincipalPermission.PrincipalPermission(PermissionState)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission(String,String)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission(String,String,Boolean)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String,Boolean)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.PrincipalPermission.Copy
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Copy()
  nameWithType: PrincipalPermission.Copy()
  fullName: System.Security.Permissions.PrincipalPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.PrincipalPermission.Demand
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Demand()
  nameWithType: PrincipalPermission.Demand()
  fullName: System.Security.Permissions.PrincipalPermission.Demand()
- uid: System.Security.Permissions.PrincipalPermission.Equals(System.Object)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Equals(Object)
  nameWithType: PrincipalPermission.Equals(Object)
  fullName: System.Security.Permissions.PrincipalPermission.Equals(Object)
- uid: System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PrincipalPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.PrincipalPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.PrincipalPermission.GetHashCode
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: GetHashCode()
  nameWithType: PrincipalPermission.GetHashCode()
  fullName: System.Security.Permissions.PrincipalPermission.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: PrincipalPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Intersect(IPermission)
- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: PrincipalPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.IsSubsetOf(IPermission)
- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PrincipalPermission.IsUnrestricted()
  fullName: System.Security.Permissions.PrincipalPermission.IsUnrestricted()
- uid: System.Security.Permissions.PrincipalPermission.ToString
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToString()
  nameWithType: PrincipalPermission.ToString()
  fullName: System.Security.Permissions.PrincipalPermission.ToString()
- uid: System.Security.Permissions.PrincipalPermission.ToXml
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToXml()
  nameWithType: PrincipalPermission.ToXml()
  fullName: System.Security.Permissions.PrincipalPermission.ToXml()
- uid: System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: PrincipalPermission.Union(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Union(IPermission)
- uid: System.Security.Permissions.PrincipalPermission.#ctor*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission
  nameWithType: PrincipalPermission.PrincipalPermission
- uid: System.Security.Permissions.PrincipalPermission.Copy*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Copy
  nameWithType: PrincipalPermission.Copy
- uid: System.Security.Permissions.PrincipalPermission.Demand*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Demand
  nameWithType: PrincipalPermission.Demand
- uid: System.Security.Permissions.PrincipalPermission.Equals*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Equals
  nameWithType: PrincipalPermission.Equals
- uid: System.Security.Permissions.PrincipalPermission.FromXml*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: FromXml
  nameWithType: PrincipalPermission.FromXml
- uid: System.Security.Permissions.PrincipalPermission.GetHashCode*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: GetHashCode
  nameWithType: PrincipalPermission.GetHashCode
- uid: System.Security.Permissions.PrincipalPermission.Intersect*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Intersect
  nameWithType: PrincipalPermission.Intersect
- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: PrincipalPermission.IsSubsetOf
- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: PrincipalPermission.IsUnrestricted
- uid: System.Security.Permissions.PrincipalPermission.ToString*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToString
  nameWithType: PrincipalPermission.ToString
- uid: System.Security.Permissions.PrincipalPermission.ToXml*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToXml
  nameWithType: PrincipalPermission.ToXml
- uid: System.Security.Permissions.PrincipalPermission.Union*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Union
  nameWithType: PrincipalPermission.Union
