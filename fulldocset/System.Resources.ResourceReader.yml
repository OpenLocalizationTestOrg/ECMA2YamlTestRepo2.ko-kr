### YamlMime:ManagedReference
items:
- uid: System.Resources.ResourceReader
  id: ResourceReader
  children:
  - System.Resources.ResourceReader.#ctor(System.IO.Stream)
  - System.Resources.ResourceReader.#ctor(System.String)
  - System.Resources.ResourceReader.Close
  - System.Resources.ResourceReader.Dispose
  - System.Resources.ResourceReader.GetEnumerator
  - System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)
  - System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: ResourceReader
  nameWithType: ResourceReader
  fullName: System.Resources.ResourceReader
  type: Class
  summary: "순차 리소스 이름/값 쌍을 읽어 이진 리소스 (.resources) 파일의 리소스를 열거 합니다.       **보안 정보**: 신뢰할 수 없는 데이터를 사용 하 여이 클래스의 메서드를 호출 하는 것은 보안상 위험 합니다. 신뢰할 수 있는 데이터에만 클래스에서 메서드를 호출 합니다. 자세한 내용은 참조 [신뢰할 수 없는 데이터 보안 위험](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)합니다."
  remarks: "The ResourceReader class provides a standard implementation of the <xref:System.Resources.IResourceReader> interface. A ResourceReader instance represents either a standalone .resources file or a .resources file that is embedded in an assembly. It is used to enumerate the resources in a .resources file and retrieve its name/value pairs. It differs from the <xref:System.Resources.ResourceManager> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly. The <xref:System.Resources.ResourceManager> class is used to retrieve resources whose names are known in advance, whereas the ResourceReader class is useful for retrieving resources whose number or precise names are not known at compile time. For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance. Resources can then be named generically (such as `Section1`, `Section1Item1`, `Section1Item2`, and so on) and retrieved by using a ResourceReader object.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  \n  \n For more information about using the ResourceReader class, see the following sections:  \n  \n-   [Instantiating a ResourceReader object](#instantiate)  \n  \n-   [Enumerating a ResourceReader object's resources](#enumerate)  \n  \n    -   [Retrieving resources by using IDictionaryEnumerator properties](#idictionaryenumerator)  \n  \n    -   [Retrieving resources by name with GetResourceData](#getresourcedata)  \n  \n<a name=\"instantiate\"></a>   \n## Instantiating a ResourceReader Object  \n A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by [Resgen.exe (Resource File Generator)](~/add/includes/ajax-current-ext-md.md). A ResourceReader object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.  \n  \n To instantiate a ResourceReader object that reads from a standalone .resources file, use the ResourceReader class constructor with either an input stream or a string that contains the .resources file name. The following example illustrates both approaches. The first instantiates a ResourceReader object that represents a .resources file named `Resources1.resources` by using its file name. The second instantiates a ResourceReader object that represents a .resources file named `Resources2.resources` by using a stream created from the file.  \n  \n [!code-cs[System.Resources.ResourceReader.Class#2](~/add/codesnippet/csharp/t-system.resources.resou_0_1.cs)]\n [!code-vb[System.Resources.ResourceReader.Class#2](~/add/codesnippet/visualbasic/t-system.resources.resou_0_1.vb)]  \n  \n To create a ResourceReader object that represents an embedded .resources file, instantiate an <xref:System.Reflection.Assembly> object from the assembly in which the .resources file is embedded. Its <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=fullName> method returns a <xref:System.IO.Stream> object that can be passed to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor. The following example instantiates a ResourceReader object that represents an embedded .resources file.  \n  \n [!code-cs[System.Resources.ResourceReader.Class#3](~/add/codesnippet/csharp/t-system.resources.resou_0_2.cs)]\n [!code-vb[System.Resources.ResourceReader.Class#3](~/add/codesnippet/visualbasic/t-system.resources.resou_0_2.vb)]  \n  \n<a name=\"enumerate\"></a>   \n## Enumerating a ResourceReader Object's Resources  \n To enumerate the resources in a .resources file, you call the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method, which returns an <xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName> object. You call the `IDictionaryEnumerator.MoveNext` method to move from one resource to the next. The method returns `false` when all the resources in the .resources file have been enumerated.  \n  \n> [!NOTE]\n>  Although the ResourceReader class implements the <xref:System.Collections.IEnumerable> interface and the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName> method, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName> method does not provide the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName> implementation. Instead, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName> method  returns an <xref:System.Collections.IDictionaryEnumerator> interface object that provides access to each resource's name/value pair.  \n  \n You can retrieve the individual resources in the collection in two ways:  \n  \n-   You can iterate each resource in the <xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName> collection and use <xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName> properties to retrieve the resource name and value. We recommend this technique when all the resources are of the same type, or you know the data type of each resource.  \n  \n-   You can retrieve the name of each resource when you iterate the <xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName> collection and call the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve the resource's data. We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.  \n  \n<a name=\"idictionaryenumerator\"></a>   \n### Retrieving Resources by Using IDictionaryEnumerator Properties  \n The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name/value pair. After you call the `IDictionaryEnumerator.MoveNext` method to move to each resource in the collection, you can retrieve the resource name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> property and the resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property.  \n  \n The following example shows how to retrieve the name and value of each resource in a .resources file by using the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> properties. To run the example, create the following text file named ApplicationResources.txt to define string resources.  \n  \n```  \nTitle=\"Contact Information\"  \nLabel1=\"First Name:\"  \nLabel2=\"Middle Name:\"  \nLabel3=\"Last Name:\"  \nLabel4=\"SSN:\"  \nLabel5=\"Street Address:\"  \nLabel6=\"City:\"  \nLabel7=\"State:\"  \nLabel8=\"Zip Code:\"  \nLabel9=\"Home Phone:\"  \nLabel10=\"Business Phone:\"  \nLabel11=\"Mobile Phone:\"  \nLabel12=\"Other Phone:\"  \nLabel13=\"Fax:\"  \nLabel14=\"Email Address:\"  \nLabel15=\"Alternate Email Address:\"  \n```  \n  \n You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:  \n  \n **resgen ApplicationResources.txt**  \n  \n The following example then uses the ResourceReader class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.  \n  \n [!code-cs[System.Resources.ResourceReader.Class#1](~/add/codesnippet/csharp/t-system.resources.resou_0_3.cs)]\n [!code-vb[System.Resources.ResourceReader.Class#1](~/add/codesnippet/visualbasic/t-system.resources.resou_0_3.vb)]  \n  \n The attempt to retrieve resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property can throw the following exceptions:  \n  \n-   A <xref:System.FormatException> if the data is not in the expected format.  \n  \n-   A <xref:System.IO.FileNotFoundException> if the assembly that contains the type to which the data belongs cannot be found.  \n  \n-   A <xref:System.TypeLoadException> if the type to which the data belongs cannot be cannot be found.  \n  \n Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type. If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method, as the following section shows. This approach provides you with some information about the data type that the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property attempted to return.  \n  \n<a name=\"getresourcedata\"></a>   \n### Retrieving Resources by Name with GetResourceData  \n The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the `IDictionaryEnumerator.MoveNext` method. For each resource, you retrieve the resource's name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> property, which is then passed to the [GetResourceData(String, String, Byte\\[\\])](assetId:///M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)?qualifyHint=False&autoUpgrade=False) method to retrieve the resource's data. This is returned as a byte array in the `resourceData` argument.  \n  \n This approach is more awkward than retrieving the resource name and value from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> properties, because it returns the actual bytes that form the resource value. However, if the attempt to retrieve the resource throws an exception, the <xref:System.Resources.ResourceReader.GetResourceData%2A> method can help identify the source of the exception by supplying information about the resource's data type. For more information about the string that indicates the resource's data type, see <xref:System.Resources.ResourceReader.GetResourceData%2A>.  \n  \n The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown. It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom `DateTimeTZI` object. To run the example, do the following:  \n  \n1.  Create an assembly named Library.dll that contains the `DateTimeTZI` structure. The following is the source code for the assembly.  \n  \n     [!code-vb[System.Resources.ResourceReader.Class#4](~/add/codesnippet/visualbasic/t-system.resources.resou_0_4.vb)]\n     [!code-cs[System.Resources.ResourceReader.Class#4](~/add/codesnippet/csharp/t-system.resources.resou_0_4.cs)]  \n  \n     Compile the source code in C# by using the following command:  \n  \n    ```  \n    csc /t:library library.cs  \n    ```  \n  \n     Or, you can compile it in Visual Basic by using the following command:  \n  \n    ```  \n    vbc library.vb /t:library  \n    ```  \n  \n2.  Compile and execute the following source code, which creates a .resources file named ContactResources.resources.  \n  \n     [!code-cs[System.Resources.ResourceReader.Class#5](~/add/codesnippet/csharp/t-system.resources.resou_0_5.cs)]\n     [!code-vb[System.Resources.ResourceReader.Class#5](~/add/codesnippet/visualbasic/t-system.resources.resou_0_5.vb)]  \n  \n     The source code file is named CreateResources.cs. You can compile it in C# by using the following command:  \n  \n    ```  \n    csc CreateResources.cs /r:library.dll  \n    ```  \n  \n     Or, you can compile it in Visual Basic by using the following command:  \n  \n    ```  \n    vbc CreateResources.vb /r:library.dll  \n    ```  \n  \n3.  Compile and run the following code to enumerate the resources in the ContactResources.resources file.  \n  \n     [!code-cs[System.Resources.ResourceReader.Class#6](~/add/codesnippet/csharp/t-system.resources.resou_0_6.cs)]\n     [!code-vb[System.Resources.ResourceReader.Class#6](~/add/codesnippet/visualbasic/t-system.resources.resou_0_6.vb)]  \n  \n     After modifying the source code (for example, by deliberately throwing a <xref:System.FormatException> at the end of the `try` block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <xref:System.Resources.ResourceReader.GetResourceData%2A> enable you to retrieve or recreate some resource information."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ResourceReader : System.Resources.IResourceReader
  inheritance:
  - System.Object
  implements:
  - System.Resources.IResourceReader
  inheritedMembers: []
  platform:
  - net462
- uid: System.Resources.ResourceReader.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Resources.ResourceReader
  langs:
  - csharp
  name: ResourceReader(Stream)
  nameWithType: ResourceReader.ResourceReader(Stream)
  fullName: System.Resources.ResourceReader.ResourceReader(Stream)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Resources.ResourceReader&quot;> </xref> 지정된 스트림에 대 한 클래스입니다."
  remarks: "ResourceReader 생성자를 인스턴스화하는 <xref:System.Resources.ResourceReader>어셈블리에 포함 된 리소스는 독립 실행형.resources 파일 또는.resources 파일을 검색 하는 개체입니다.</xref:System.Resources.ResourceReader> 독립 실행형.resources 파일을 읽어올 수를 인스턴스화하는 <xref:System.IO.Stream>개체 및 ResourceReader 생성자에 전달 합니다.</xref:System.IO.Stream> 포함 된.resources 파일에서 읽기를 호출 하는 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=fullName>.resources 파일과 패스는 반환 된의 대/소문자 구분 이름 사용 하 여 메서드 <xref:System.IO.Stream>ResourceReader 생성자 개체를.</xref:System.IO.Stream> </xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=fullName>      > [!IMPORTANT] > 신뢰할 수 없는 데이터로이 개체의 인스턴스를 사용 하는 것은 보안상 위험 합니다. 신뢰할 수 있는 데이터에만이 개체를 사용 하십시오. 자세한 내용은 참조 [신뢰할 수 없는 데이터 보안 위험](http://go.microsoft.com/fwlink/?LinkId=330378)합니다."
  example:
  - "The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.  \n  \n```  \n  \nTitle=\"Top Pet Animal Clinic\"  \nLabel1=\"Patient Number:\"  \nLabel2=\"Pet Name:\"  \nLabel3=\"Species:\"  \nLabel4=\"Breed:\"  \nLabel5=\"Date of Birth:\"  \nLabel6=\"Age:\"  \nLabel7=\"Owner:\"  \nLabel8=\"Address:\"  \nLabel9=\"Home Phone:\"  \nLabel10=\"Work Phone:\"  \nLabel11=\"Mobile Phone:\"  \n  \n```  \n  \n You can compile the .txt file into a .resources file by issuing the following command:  \n  \n **resgen PatientForm.txt**  \n  \n The following example assumes that the resource file is embedded in the assembly that contains the application's executable code. It retrieves a resource file named `PatientForm.resources` from the currently executing assemblies and displays the name and value of each of its resources.  \n  \n [!code-vb[System.Resources.ResourceReader.Ctor#1](~/add/codesnippet/visualbasic/m-system.resources.resou_7_1.vb)]\n [!code-cs[System.Resources.ResourceReader.Ctor#1](~/add/codesnippet/csharp/m-system.resources.resou_7_1.cs)]  \n  \n If the C# example is named `Example.cs`, you can compile it by using the following command:  \n  \n **csc Example.cs /res:PatientForm.resources**  \n  \n If the Visual Basic example is named `Example.vb`, you can compile it by using the following command:  \n  \n **vbc Example.vb /res:PatientForm.resources**"
  syntax:
    content: public ResourceReader (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "리소스 읽기 위한 입력된 스트림입니다."
  overload: System.Resources.ResourceReader.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> stream </code> 매개 변수를 읽을 수 없습니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stream</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "액세스 하는 동안 I/O 오류가 발생 했습니다 <code> stream </code>합니다."
  platform:
  - net462
- uid: System.Resources.ResourceReader.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Resources.ResourceReader
  langs:
  - csharp
  name: ResourceReader(String)
  nameWithType: ResourceReader.ResourceReader(String)
  fullName: System.Resources.ResourceReader.ResourceReader(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Resources.ResourceReader&quot;> </xref> 명명 된 리소스 파일에 대 한 지정 된 클래스입니다."
  remarks: "ResourceReader 생성자를 인스턴스화하는 <xref:System.Resources.ResourceReader>독립 실행형.resources 파일에서 리소스를 검색 하는 개체입니다.</xref:System.Resources.ResourceReader> 포함 된.resources 파일에서 리소스를 검색 하려면 사용 된 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>생성자.</xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>      > [!IMPORTANT] > 신뢰할 수 없는 데이터로이 개체의 인스턴스를 사용 하는 것은 보안상 위험 합니다. 신뢰할 수 있는 데이터에만이 개체를 사용 하십시오. 자세한 내용은 참조 [신뢰할 수 없는 데이터 보안 위험](http://go.microsoft.com/fwlink/?LinkId=330378)합니다."
  example:
  - "The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.  \n  \n```  \n  \nTitle=\"Top Pet Animal Clinic\"  \nLabel1=\"Patient Number:\"  \nLabel2=\"Pet Name:\"  \nLabel3=\"Species:\"  \nLabel4=\"Breed:\"  \nLabel5=\"Date of Birth:\"  \nLabel6=\"Age:\"  \nLabel7=\"Owner:\"  \nLabel8=\"Address:\"  \nLabel9=\"Home Phone:\"  \nLabel10=\"Work Phone:\"  \nLabel11=\"Mobile Phone:\"  \n  \n```  \n  \n You can compile this .txt file into a .resources file by issuing the following command:  \n  \n **resgen PatientForm.txt**  \n  \n The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.  \n  \n [!code-cs[System.Resources.ResourceReader.Ctor#2](~/add/codesnippet/csharp/m-system.resources.resou_1_1.cs)]\n [!code-vb[System.Resources.ResourceReader.Ctor#2](~/add/codesnippet/visualbasic/m-system.resources.resou_1_1.vb)]"
  syntax:
    content: public ResourceReader (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "경로 읽을 리소스 파일의 이름입니다. `filename`구분 하지 않습니다."
  overload: System.Resources.ResourceReader.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>fileName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "파일을 찾을 수 없습니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O 오류가 발생 했습니다."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "리소스 파일 형식이 잘못 되었습니다. 예를 들어 파일의 길이&0; 일 수 있습니다."
  platform:
  - net462
- uid: System.Resources.ResourceReader.Close
  id: Close
  parent: System.Resources.ResourceReader
  langs:
  - csharp
  name: Close()
  nameWithType: ResourceReader.Close()
  fullName: System.Resources.ResourceReader.Close()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "이 연결 된 모든 운영 체제 리소스를 해제 <xref href=&quot;System.Resources.ResourceReader&quot;> </xref> 개체입니다."
  remarks: "Close 여러 번 안전 하 게 호출할 수 있습니다."
  example:
  - "The following example moves through a file's resources and displays all the key/value pairs it finds. The code then uses the Close method to shut down the <xref:System.Resources.ResourceReader> and to release all resources used by it.  \n  \n [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/add/codesnippet/visualbasic/m-system.resources.resou_8_1.vb)]\n [!code-cs[System.Resources.ResourceReader.GetEnumerator Example#1](~/add/codesnippet/csharp/m-system.resources.resou_8_1.cs)]\n [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/add/codesnippet/cpp/m-system.resources.resou_8_1.cpp)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Resources.ResourceReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceReader.Dispose
  id: Dispose
  parent: System.Resources.ResourceReader
  langs:
  - csharp
  name: Dispose()
  nameWithType: ResourceReader.Dispose()
  fullName: System.Resources.ResourceReader.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "현재 인스턴스에서 사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Resources.ResourceReader&quot;> </xref> 클래스입니다."
  remarks: "이 인스턴스를 사용 하 여 작업을 마쳤으면 <xref:System.Resources.ResourceReader>,이 인스턴스에 사용 되는 모든 리소스를 해제는 Dispose를 호출 합니다.</xref:System.Resources.ResourceReader> 이에 대 한 추가 참조를 제거 해야 <xref:System.Resources.ResourceReader>가비지 수집기가 종료에 대 한 활성 상태로 유지 하지 않고 인스턴스의 메모리를 회수할 수 있도록 인스턴스.</xref:System.Resources.ResourceReader>       Dispose를 관리 및 관리 되지 않는 리소스를 해제 하는 코드를 포함 하는 전용 dispose (boolean) 메서드를 호출 합니다. 자세한 내용은 참조 [Dispose 메서드를 구현](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Resources.ResourceReader.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceReader.GetEnumerator
  id: GetEnumerator
  parent: System.Resources.ResourceReader
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ResourceReader.GetEnumerator()
  fullName: System.Resources.ResourceReader.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "이 대 한 열거자를 반환 <xref href=&quot;System.Resources.ResourceReader&quot;> </xref> 개체입니다."
  remarks: "반복적으로 호출을 GetEnumerator 메서드를 호출 하 여 리소스를 열거할 일반적으로 <xref:System.Collections.IEnumerator.MoveNext%2A>메서드 반환 된 <xref:System.Collections.IDictionaryEnumerator>메서드가 반환 될 때까지 개체 `false`.</xref:System.Collections.IDictionaryEnumerator> </xref:System.Collections.IEnumerator.MoveNext%2A> 리소스 이름은 사용할 수는 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName>속성;에서 해당 값은 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName>속성.</xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> </xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> 이 예제에서는 이러한 방식으로 리소스를 열거 하는 방법을 보여 줍니다.       구현에서 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName>속성으로는 <xref:System.Resources.ResourceReader>클래스는 다음과 같은 예외를 throw 할 수 있습니다:- <xref:System.IO.FileNotFoundException>데이터 속해 있는 형식을 포함 하는 어셈블리를 찾을 수 없습니다.</xref:System.IO.FileNotFoundException> </xref:System.Resources.ResourceReader> </xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName>      - <xref:System.FormatException>데이터가 예상된 형식이 아닙니다.</xref:System.FormatException>      - <xref:System.TypeLoadException>데이터 속해 있는 형식을 찾을 수 없습니다.</xref:System.TypeLoadException>       호출 하 여 예외를 처리할 수는 <xref:System.Resources.ResourceReader.GetResourceData%2A>데이터 형식 및 명명된 된 리소스에 할당 된 바이트 배열에 대 한 정보를 검색 하는 메서드입니다.</xref:System.Resources.ResourceReader.GetResourceData%2A> 자세한 내용은의 &quot;검색 리소스에서 이름으로 GetResourceData&quot; 섹션을 참조 하십시오.는 <xref:System.Resources.ResourceReader>클래스 항목.</xref:System.Resources.ResourceReader>      > [!IMPORTANT] >는 <xref:System.Resources.ResourceReader>클래스 열거자를 반환 하는 두 가지 메서드가 포함 됩니다.</xref:System.Resources.ResourceReader> GetEnumerator 메서드가 반환 된 <xref:System.Collections.IDictionaryEnumerator>인터페이스 개체 및 리소스 열거 될 때 호출할는 것이 좋습니다.</xref:System.Collections.IDictionaryEnumerator>"
  example:
  - "The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.  \n  \n```  \n  \nTitle=\"Top Pet Animal Clinic\"  \nLabel1=\"Patient Number:\"  \nLabel2=\"Pet Name:\"  \nLabel3=\"Species:\"  \nLabel4=\"Breed:\"  \nLabel5=\"Date of Birth:\"  \nLabel6=\"Age:\"  \nLabel7=\"Owner:\"  \nLabel8=\"Address:\"  \nLabel9=\"Home Phone:\"  \nLabel10=\"Work Phone:\"  \nLabel11=\"Mobile Phone:\"  \n  \n```  \n  \n You can compile the .txt file into a .resources file by issuing the following command:  \n  \n **resgen PatientForm.txt**  \n  \n The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.  \n  \n [!code-cs[System.Resources.ResourceReader.Ctor#2](~/add/codesnippet/csharp/m-system.resources.resou_3_1.cs)]\n [!code-vb[System.Resources.ResourceReader.Ctor#2](~/add/codesnippet/visualbasic/m-system.resources.resou_3_1.vb)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "이 대 한 열거자 <xref href=&quot;System.Resources.ResourceReader&quot;> </xref> 개체입니다."
  overload: System.Resources.ResourceReader.GetEnumerator*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "판독기가 닫혀 있지 않거나, 삭제 및 액세스할 수 없습니다."
  platform:
  - net462
- uid: System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)
  id: GetResourceData(System.String,System.String@,System.Byte[]@)
  parent: System.Resources.ResourceReader
  langs:
  - csharp
  name: GetResourceData(String,String,Byte[])
  nameWithType: ResourceReader.GetResourceData(String,String,Byte[])
  fullName: System.Resources.ResourceReader.GetResourceData(String,String,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "열린 리소스 파일 또는 스트림에서 형식 이름 및 명명된 된 리소스의 데이터를 검색합니다."
  remarks: "The GetResourceData method retrieves the value of a named resource as a byte array. It is typically used when the <xref:System.Collections.IDictionaryEnumerator.Value%2A> property throws an exception when it tries to retrieve the value of a resource.  \n  \n `resourceType` is a string that represents the data type of the resource. It can be any of the following values:  \n  \n-   The string representation of a `ResourceTypeCode` enumeration member that indicates the data type of the resource. `ResourceTypeCode` is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types. These include the .NET Framework primitive data types (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), as well as <xref:System.String>, <xref:System.DateTime>, and <xref:System.TimeSpan>, In addition, the `ResourceTypeCode` enumeration includes the values shown in the following table.  \n  \n    |ResourceTypeCode value|Description|  \n    |----------------------------|-----------------|  \n    |`ResourceTypeCode.ByteArray`|The data is a byte array. This data type commonly results from the call to the [ResourceWriter.AddResource(String, Byte\\[\\])](assetId:///M:System.Resources.ResourceWriter.AddResource(System.String,System.Byte[])?qualifyHint=True&autoUpgrade=False) method.|  \n    |`ResourceTypeCode.Null`|The data is a null reference. This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=fullName> method with an object whose value is `null`.|  \n    |`ResourceTypeCode.Stream`|The data is stored in a stream. This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=fullName> or <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=fullName> method.|  \n  \n     Assuming that `resourceData` has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <xref:System.BitConverter> or <xref:System.IO.BinaryReader> method.  \n  \n-   A string that contains the fully qualified name of the type whose serialized data is assigned to the `resourceData` argument (for example, `System.String`). In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type. For example, the following string indicates that the serialized data represents an instance of the `Person` type in the `Extensions` namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.  \n  \n     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  \n  \n     Assuming that `resourceData` has not been corrupted and that the source type is available, `resourceData` can be converted from a byte array back to its original value by converting the byte array to a <xref:System.IO.Stream> object and passing the stream to the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=fullName> method.  \n  \n-   The string used to describe the data type in the <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=fullName> method call."
  syntax:
    content: public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);
    parameters:
    - id: resourceName
      type: System.String
      description: "리소스의 이름입니다."
    - id: resourceType
      type: System.String
      description: "이 메서드가 반환 될 때 포함 검색 된 리소스의 형식 이름을 나타내는 문자열입니다 (자세한 내용은 설명 부분 참조). 이 매개 변수는 초기화 되지 않은 상태로 전달 됩니다."
    - id: resourceData
      type: System.Byte[]
      description: "이 메서드가 반환 될 때 검색 된 형식의 이진 표현인 바이트 배열을 포함 합니다. 이 매개 변수는 초기화 되지 않은 상태로 전달 됩니다."
  overload: System.Resources.ResourceReader.GetResourceData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>resourceName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>resourceName</code>존재 하지 않습니다."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>resourceName</code>잘못 된 형식이 있습니다."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "검색 된 리소스 데이터가 손상 되었습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "현재 <xref href=&quot;System.Resources.ResourceReader&quot;> </xref> 개체가 초기화 되지 않은 것 닫 혔 기 때문입니다."
  platform:
  - net462
- uid: System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Resources.ResourceReader
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ResourceReader.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Resources.ResourceReader.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "이 대 한 열거자를 반환 <xref href=&quot;System.Resources.ResourceReader&quot;> </xref> 개체입니다."
  remarks: "IEnumerable.GetEnumerator는 명시적 인터페이스 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Resources.ResourceReader>인스턴스로 캐스팅 되는 <xref:System.Collections.IEnumerable>인터페이스.</xref:System.Collections.IEnumerable> </xref:System.Resources.ResourceReader> .Resources 파일의 리소스를 열거 하는 권장된 방법은 호출 하는 것은 <xref:System.Collections.IEnumerator.MoveNext%2A>의 메서드는 <xref:System.Collections.IDictionaryEnumerator>에서 반환 된 개체는 <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName>메서드.</xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName> </xref:System.Collections.IDictionaryEnumerator> </xref:System.Collections.IEnumerator.MoveNext%2A>"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "이 대 한 열거자 <xref href=&quot;System.Resources.ResourceReader&quot;> </xref> 개체입니다."
  overload: System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "판독기가 이미 닫혀 서 액세스할 수 없습니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.BadImageFormatException
  isExternal: true
  name: System.BadImageFormatException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.Resources.ResourceReader.#ctor(System.IO.Stream)
  parent: System.Resources.ResourceReader
  isExternal: false
  name: ResourceReader(Stream)
  nameWithType: ResourceReader.ResourceReader(Stream)
  fullName: System.Resources.ResourceReader.ResourceReader(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Resources.ResourceReader.#ctor(System.String)
  parent: System.Resources.ResourceReader
  isExternal: false
  name: ResourceReader(String)
  nameWithType: ResourceReader.ResourceReader(String)
  fullName: System.Resources.ResourceReader.ResourceReader(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Resources.ResourceReader.Close
  parent: System.Resources.ResourceReader
  isExternal: false
  name: Close()
  nameWithType: ResourceReader.Close()
  fullName: System.Resources.ResourceReader.Close()
- uid: System.Resources.ResourceReader.Dispose
  parent: System.Resources.ResourceReader
  isExternal: false
  name: Dispose()
  nameWithType: ResourceReader.Dispose()
  fullName: System.Resources.ResourceReader.Dispose()
- uid: System.Resources.ResourceReader.GetEnumerator
  parent: System.Resources.ResourceReader
  isExternal: false
  name: GetEnumerator()
  nameWithType: ResourceReader.GetEnumerator()
  fullName: System.Resources.ResourceReader.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)
  parent: System.Resources.ResourceReader
  isExternal: false
  name: GetResourceData(String,String,Byte[])
  nameWithType: ResourceReader.GetResourceData(String,String,Byte[])
  fullName: System.Resources.ResourceReader.GetResourceData(String,String,Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator
  parent: System.Resources.ResourceReader
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ResourceReader.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Resources.ResourceReader.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Resources.ResourceReader.#ctor*
  parent: System.Resources.ResourceReader
  isExternal: false
  name: ResourceReader
  nameWithType: ResourceReader.ResourceReader
- uid: System.Resources.ResourceReader.Close*
  parent: System.Resources.ResourceReader
  isExternal: false
  name: Close
  nameWithType: ResourceReader.Close
- uid: System.Resources.ResourceReader.Dispose*
  parent: System.Resources.ResourceReader
  isExternal: false
  name: Dispose
  nameWithType: ResourceReader.Dispose
- uid: System.Resources.ResourceReader.GetEnumerator*
  parent: System.Resources.ResourceReader
  isExternal: false
  name: GetEnumerator
  nameWithType: ResourceReader.GetEnumerator
- uid: System.Resources.ResourceReader.GetResourceData*
  parent: System.Resources.ResourceReader
  isExternal: false
  name: GetResourceData
  nameWithType: ResourceReader.GetResourceData
- uid: System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Resources.ResourceReader
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ResourceReader.System.Collections.IEnumerable.GetEnumerator
