### YamlMime:ManagedReference
items:
- uid: System.Web.Caching.CacheDependency
  id: CacheDependency
  children:
  - System.Web.Caching.CacheDependency.#ctor
  - System.Web.Caching.CacheDependency.#ctor(System.String)
  - System.Web.Caching.CacheDependency.#ctor(System.String[])
  - System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  - System.Web.Caching.CacheDependency.DependencyDispose
  - System.Web.Caching.CacheDependency.Dispose
  - System.Web.Caching.CacheDependency.FinishInit
  - System.Web.Caching.CacheDependency.GetFileDependencies
  - System.Web.Caching.CacheDependency.GetUniqueID
  - System.Web.Caching.CacheDependency.HasChanged
  - System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  - System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  - System.Web.Caching.CacheDependency.UtcLastModified
  langs:
  - csharp
  name: CacheDependency
  nameWithType: CacheDependency
  fullName: System.Web.Caching.CacheDependency
  type: Class
  summary: "ASP.NET 응용 프로그램에서 저장 된 항목 간의 종속 관계를 설정 <xref href=&quot;System.Web.Caching.Cache&quot;> </xref> 개체 및 파일, 캐시 키의 배열 또는 다른 CacheDependency 개체입니다. CacheDependency 클래스 종속 관계를 모니터링 하므로 그 중 어느가 변경 될 때 캐시 된 항목이 자동으로 제거 됩니다."
  remarks: "파일 또는 파일의 배열 등 다른 개체에 종속 된 캐시에 항목을 추가 하는 경우 종속 항목이 개체가 변경 될 때 자동으로 캐시에서 제거 됩니다. 예를 들어 다음과 같이 가정는 <xref:System.Data.DataSet>개체 데이터를에서 기반으로 XML 파일.</xref:System.Data.DataSet> 추가할 수는 <xref:System.Data.DataSet>CacheDependency 개체에 수행 하 여 캐시에는 <xref:System.Data.DataSet>XML 파일에 따라.</xref:System.Data.DataSet> </xref:System.Data.DataSet> XML 파일이 변경 되 면는 <xref:System.Data.DataSet>캐시에서 제거 됩니다.</xref:System.Data.DataSet>       응용 프로그램의 캐시에 종속성이 있는 항목을 추가할 수는 <xref:System.Web.Caching.Cache.Add%2A>및 <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName>메서드.</xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> </xref:System.Web.Caching.Cache.Add%2A> 사용할 수 없습니다는 <xref:System.Web.Caching.Cache.Item%2A>속성을 종속성과 함께 캐시에 항목을 추가 합니다.</xref:System.Web.Caching.Cache.Item%2A>       종속성을 설정 하려면 파일, 키 또는 디렉터리 항목은 종속 항목을 지정 하 여 CacheDependency 클래스의 인스턴스를 만듭니다 하 고이 리소스에 종속성을 전달 합니다는 <xref:System.Web.Caching.Cache.Add%2A>또는 <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName>메서드.</xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> </xref:System.Web.Caching.Cache.Add%2A> 단일 파일 또는 디렉터리, 파일 또는 디렉터리의 배열 또는 파일 또는 디렉터리 캐시 키의 배열과 함께 배열을 CacheDependency 인스턴스가 나타낼 수 있습니다 (나타냅니다에 저장 된 다른 항목은 <xref:System.Web.Caching.Cache>개체).</xref:System.Web.Caching.Cache>"
  example:
  - "The following code example demonstrates using the <xref:System.Web.Caching.CacheDependency.HasChanged%2A> property to determine whether a CacheDependency changed since the previous request for an item in the <xref:System.Web.Caching.Cache>. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/visualbasic/t-system.web.caching.cac_3_1.aspx)]\n [!code-cs[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/csharp/t-system.web.caching.cac_3_1.aspx)]"
  syntax:
    content: 'public class CacheDependency : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor
  id: '#ctor'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency()
  nameWithType: CacheDependency.CacheDependency()
  fullName: System.Web.Caching.CacheDependency.CacheDependency()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 클래스입니다."
  remarks: "파생 클래스에서 사용자 지정 하려는 경우 <xref:System.Web.Caching.CacheDependency>,이 버전의 CacheDependency 생성자를 구현 합니다.</xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example is a class that implements this version of the <xref:System.Web.Caching.CacheDependency> constructor as all classes that derive from <xref:System.Web.Caching.CacheDependency> are required to.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_2_1.vb)]"
  syntax:
    content: protected CacheDependency ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String)
  nameWithType: CacheDependency.CacheDependency(String)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 파일 또는 디렉터리의 변경 내용 모니터링 하는 클래스입니다."
  remarks: "If the directory or file specified in the `filename` parameter is not found in the file system, it will be treated as missing. If the directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when the directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code example creates an instance of the <xref:System.Web.Caching.CacheDependency> class with a dependency on an XML file. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method then adds an item to the <xref:System.Web.Caching.Cache> that is dependent upon that file.  \n  \n [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_5_1.vb)]\n [!code-cs[Classic CacheDependency.CacheDependency Example#1](~/add/codesnippet/csharp/m-system.web.caching.cac_5_1.cs)]  \n  \n You can also use the following technique to add an item to the <xref:System.Web.Caching.Cache> with a dependency on a file.  \n  \n [!code-cs[Single File Dependency Cache entry#1](~/add/codesnippet/csharp/m-system.web.caching.cac_5_2.aspx)]\n [!code-vb[Single File Dependency Cache entry#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_5_2.aspx)]"
  syntax:
    content: public CacheDependency (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "파일 또는 캐시 된 개체가 종속 되어 있는 디렉터리를 경로입니다. 이 리소스 변경 될 때 캐시 된 개체가 유효 하지 않게 하 고 캐시에서 제거 됩니다."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[])
  nameWithType: CacheDependency.CacheDependency(String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[])
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> (파일 또는 디렉터리)에 변경 내용에 대 한 경로 배열을 모니터링 하는 클래스입니다."
  remarks: "If any of the files or directories in the array changes or is removed from the array, the cached item becomes obsolete and is removed from the application's <xref:System.Web.Caching.Cache> object.  \n  \n Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  When you create the array that contains the file dependencies, you must define the number of files that the item you are adding to the <xref:System.Web.Caching.Cache> is dependent on."
  example:
  - "The following code example demonstrates how to use the <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method to add an item to the <xref:System.Web.Caching.Cache> with dependencies on an array of files. You can also make the item dependent on an array of directories.  \n  \n [!code-vb[Multiple file based dependency#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_12_1.aspx)]\n [!code-cs[Multiple file based dependency#1](~/add/codesnippet/csharp/m-system.web.caching.cac_12_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames);
    parameters:
    - id: filenames
      type: System.String[]
      description: "경로 (파일 또는 디렉터리) 캐시 된 개체가 종속 되어 있는 배열입니다. 이러한 리소스가 변경 하면 캐시 된 개체가 유효 하지 않게 하 고 캐시에서 제거 됩니다."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  id: '#ctor(System.String,System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String,DateTime)
  nameWithType: CacheDependency.CacheDependency(String,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String,DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 파일 또는 디렉터리의 변경 내용 모니터링 하는 클래스입니다."
  remarks: "If the directory or file specified in the `filename` parameter is not found in the file system, it will be treated as missing. If the directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when the directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of the directory or file passed in the `filename` parameter. If the last modified date is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example uses this constructor to instantiate a <xref:System.Web.Caching.CacheDependency> object, then inserts an item into the <xref:System.Web.Caching.Cache> with that dependency. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_0_1.aspx)]\n [!code-cs[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/csharp/m-system.web.caching.cac_0_1.aspx)]"
  syntax:
    content: public CacheDependency (string filename, DateTime start);
    parameters:
    - id: filename
      type: System.String
      description: "파일 또는 캐시 된 개체가 종속 되어 있는 디렉터리를 경로입니다. 이 리소스 변경 될 때 캐시 된 개체가 유효 하지 않게 하 고 캐시에서 제거 됩니다."
    - id: start
      type: System.DateTime
      description: "디렉터리 또는 파일의 마지막으로 수정한 날짜를 확인할 시간입니다."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  id: '#ctor(System.String[],System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> (파일 또는 디렉터리)에 변경 내용에 대 한 경로 배열을 모니터링 하 고 변경 모니터링이 시작 되는 시간을 지정 하는 클래스입니다."
  remarks: "If any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of the array passed in the `filenames` parameter. If the last modified date of any object in the array is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example creates a <xref:System.Web.Caching.CacheDependency> object that passes two XML files and a <xref:System.DateTime.Now%2A?displayProperty=fullName> value when the object is included as a parameter argument in an <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method call.  \n  \n [!code-vb[CacheDependency Constructor4#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_10_1.aspx)]\n [!code-cs[CacheDependency Constructor4#1](~/add/codesnippet/csharp/m-system.web.caching.cac_10_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: "경로 (파일 또는 디렉터리) 캐시 된 개체가 종속 되어 있는 배열입니다. 이러한 리소스가 변경 하면 캐시 된 개체가 유효 하지 않게 하 고 캐시에서 제거 됩니다."
    - id: start
      type: System.DateTime
      description: "배열에 있는 개체의 마지막으로 수정한 날짜를 확인할 시간입니다."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  id: '#ctor(System.String[],System.String[])'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[])
  nameWithType: CacheDependency.CacheDependency(String[],String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[])
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> (파일 또는 디렉터리)에 대 한 경로 배열을, 캐시 키의 배열 또는 둘 다 변경 내용을 모니터링 하는 클래스입니다."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code fragment demonstrates how to insert an item into your application's <xref:System.Web.Caching.Cache> with a dependency on a key to another item placed in the cache. Since this method uses array syntax, you must define the number of keys on which the item you are adding to the <xref:System.Web.Caching.Cache> is dependent.  \n  \n [!code-vb[Key based dependency#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_11_1.aspx)]\n [!code-cs[Key based dependency#1](~/add/codesnippet/csharp/m-system.web.caching.cac_11_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys);
    parameters:
    - id: filenames
      type: System.String[]
      description: "경로 (파일 또는 디렉터리) 캐시 된 개체가 종속 되어 있는 배열입니다. 이러한 리소스가 변경 하면 캐시 된 개체가 유효 하지 않게 하 고 캐시에서 제거 됩니다."
    - id: cachekeys
      type: System.String[]
      description: "변경 내용에 대 한 새 개체를 모니터링 하는 캐시 키의 배열입니다. 이러한 캐시 키가 변경 때이 종속성 개체에 연결 된 캐시 된 개체가 유효 하지 않게 하 고 캐시에서 제거 됩니다."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  id: '#ctor(System.String[],System.String[],System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> (파일 또는 디렉터리)에 대 한 경로 배열을, 캐시 키의 배열 또는 둘 다 변경 내용을 모니터링 하는 클래스입니다."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of any object passed in the `filenames` or `cachekeys` parameters. If the last modified date of any of those objects is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example creates a `CreateDependency` method. When this method is called, it creates a <xref:System.DateTime> object and the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property is used to add an item to the cache with a `key` parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value of `key1` as well. This <xref:System.Web.Caching.CacheDependency> constructor then instantiates a <xref:System.Web.Caching.CacheDependency> object that passes `dependencyKey` and the <xref:System.DateTime> object as parameter arguments. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the <xref:System.Web.Caching.CacheDependency> object as a parameter. This makes the object added to the cache using the <xref:System.Web.Caching.Cache.Insert%2A> method dependent on the `key1` key.  \n  \n [!code-cs[CacheDependency Constructor6#1](~/add/codesnippet/csharp/8a673c60-cf9e-4171-bfff-_1.aspx)]\n [!code-vb[CacheDependency Constructor6#1](~/add/codesnippet/visualbasic/8a673c60-cf9e-4171-bfff-_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: "경로 (파일 또는 디렉터리) 캐시 된 개체가 종속 되어 있는 배열입니다. 이러한 리소스가 변경 하면 캐시 된 개체가 유효 하지 않게 하 고 캐시에서 제거 됩니다."
    - id: cachekeys
      type: System.String[]
      description: "변경 내용에 대 한 새 개체를 모니터링 하는 캐시 키의 배열입니다. 이러한 캐시 키가 변경 때이 종속성 개체에 연결 된 캐시 된 개체가 유효 하지 않게 하 고 캐시에서 제거 됩니다."
    - id: start
      type: System.DateTime
      description: "에 전달 된 날짜 및 시간 개체의 마지막으로 수정한 날짜 적용 되는 `filenames` 및 `cachekeys` 배열입니다."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  id: '#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[],CacheDependency)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> (파일 또는 디렉터리)에 대 한 경로 배열을, 캐시 키의 배열 또는 둘 다 변경 내용을 모니터링 하는 클래스입니다. 하기가 자체의 개별 인스턴스가 종속 된 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 클래스입니다."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code example creates a `CreateDependency` method. When this method is called, it uses the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property to add an item to the cache with a `key` parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value of `key1` as well. The <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=fullName> constructor is used to create a <xref:System.Web.Caching.CacheDependency> object, `dep1`, which passes `dependencyKey` as a parameter argument. A second <xref:System.Web.Caching.CacheDependency> object, `dep2`, is created using this constructor, with `dep1` passed as the third parameter argument. This second dependency is dependent on the first. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the second <xref:System.Web.Caching.CacheDependency> object as a parameter. If the first dependency changes in any way, the cached item will be invalidated.  \n  \n [!code-vb[CacheDependency Constructor7#1](~/add/codesnippet/visualbasic/e6e24549-1cfa-4cc8-9d48-_1.aspx)]\n [!code-cs[CacheDependency Constructor7#1](~/add/codesnippet/csharp/e6e24549-1cfa-4cc8-9d48-_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);
    parameters:
    - id: filenames
      type: System.String[]
      description: "경로 (파일 또는 디렉터리) 캐시 된 개체가 종속 되어 있는 배열입니다. 이러한 리소스가 변경 하면 캐시 된 개체가 유효 하지 않게 하 고 캐시에서 제거 됩니다."
    - id: cachekeys
      type: System.String[]
      description: "변경 내용에 대 한 새 개체를 모니터링 하는 캐시 키의 배열입니다. 이러한 캐시 키가 변경 때이 종속성 개체에 연결 된 캐시 된 개체가 유효 하지 않게 하 고 캐시에서 제거 됩니다."
    - id: dependency
      type: System.Web.Caching.CacheDependency
      description: "다른 인스턴스는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 이 인스턴스에 종속 되어 있는 클래스입니다."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  id: '#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[],CacheDependency,DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> (파일 또는 디렉터리)에 대 한 경로 배열을, 캐시 키의 배열 또는 둘 다 변경 내용을 모니터링 하는 클래스입니다. 하기가 자체의 다른 인스턴스에 종속는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 클래스와 변경 모니터링이 시작 되는 시간입니다."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of any of the objects passed in the `filenames`, `cachekeys`, or `dependency` parameters. If the last modified date for any of those objects is later than the date and time passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example shows a `CreateDependency` method. When this method is called, it creates a <xref:System.DateTime> object and the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property is used to add an item to the cache with a key parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value at its first (and only) index set to the value of `key1` as well. The <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=fullName> constructor is then used to create a <xref:System.Web.Caching.CacheDependency> object, `dep1`, which passes `dependencyKey` as a parameter argument. A second <xref:System.Web.Caching.CacheDependency> object, `dep2`, is then created using this constructor, with `dep1` and the <xref:System.DateTime> object passed as parameter arguments. This second dependency is dependent on the first, and dependency monitoring will begin 10 seconds after the `CreateDependency` method is called. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the second <xref:System.Web.Caching.CacheDependency> object as a parameter. If the first dependency changes in any way, the cached item will be invalidated.  \n  \n [!code-cs[CacheDependency Constructor8#1](~/add/codesnippet/csharp/b4a521ab-493f-41c7-94fa-_1.aspx)]\n [!code-vb[CacheDependency Constructor8#1](~/add/codesnippet/visualbasic/b4a521ab-493f-41c7-94fa-_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: "경로 (파일 또는 디렉터리) 캐시 된 개체가 종속 되어 있는 배열입니다. 이러한 리소스가 변경 하면 캐시 된 개체가 유효 하지 않게 하 고 캐시에서 제거 됩니다."
    - id: cachekeys
      type: System.String[]
      description: "변경 내용에 대 한 새 개체를 모니터링 하는 캐시 키의 배열입니다. 이러한 캐시 키가 변경 때이 종속성 개체에 연결 된 캐시 된 개체가 유효 하지 않게 하 고 캐시에서 제거 됩니다."
    - id: dependency
      type: System.Web.Caching.CacheDependency
      description: "다른 인스턴스는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 이 인스턴스에 종속 되어 있는 클래스입니다."
    - id: start
      type: System.DateTime
      description: "배열에 있는 개체의 마지막으로 수정한 날짜를 확인할 시간 및 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 개체입니다."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.DependencyDispose
  id: DependencyDispose
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: DependencyDispose()
  nameWithType: CacheDependency.DependencyDispose()
  fullName: System.Web.Caching.CacheDependency.DependencyDispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "사용 하는 리소스를 해제는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 클래스와 모든 클래스에서 파생 되는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref>합니다."
  remarks: "파생 되는 <xref:System.Web.Caching.CacheDependency>클래스는 파생된 클래스에 사용 되는 리소스를 정리 하려면이 메서드를 구현 하는 데 필요 합니다.</xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class and overrides the DependencyDispose method. When this method is called, it sets a custom Boolean property named `Disposed` to `true`.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_7_1.vb)]"
  syntax:
    content: protected virtual void DependencyDispose ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.DependencyDispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.Dispose
  id: Dispose
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: Dispose()
  nameWithType: CacheDependency.Dispose()
  fullName: System.Web.Caching.CacheDependency.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "사용 하는 리소스를 해제는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 개체입니다."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.FinishInit
  id: FinishInit
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: FinishInit()
  nameWithType: CacheDependency.FinishInit()
  fullName: System.Web.Caching.CacheDependency.FinishInit()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "초기화를 완료 된 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 개체입니다."
  remarks: "초기화를 완료 하는 FinishInit 메서드는 <xref:System.Web.Caching.CacheDependency>개체입니다.</xref:System.Web.Caching.CacheDependency> 이 메서드는 모든 <xref:System.Web.Caching.CacheDependency>생성자.</xref:System.Web.Caching.CacheDependency>"
  syntax:
    content: protected void FinishInit ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.FinishInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.GetFileDependencies
  id: GetFileDependencies
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: GetFileDependencies()
  nameWithType: CacheDependency.GetFileDependencies()
  fullName: System.Web.Caching.CacheDependency.GetFileDependencies()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "파일 종속성을 가져옵니다."
  syntax:
    content: public virtual string[] GetFileDependencies ();
    parameters: []
    return:
      type: System.String[]
      description: "파일 종속성입니다."
  overload: System.Web.Caching.CacheDependency.GetFileDependencies*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.GetUniqueID
  id: GetUniqueID
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: GetUniqueID()
  nameWithType: CacheDependency.GetUniqueID()
  fullName: System.Web.Caching.CacheDependency.GetUniqueID()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "에 대 한 고유 식별자를 검색 한 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 개체입니다."
  remarks: "이 메서드를 여러 개를 추적 하는 데 특히 유용 수는 <xref:System.Web.Caching.CacheDependency>항목 또는 응용 프로그램 관련 된 클래스입니다.</xref:System.Web.Caching.CacheDependency>       식별자에는 파일 이름 (파일 종속성의 경우) 또는 (캐시 키 종속성의 경우)에 대 한 키 이름 및 종속성에이 메서드를 지정 하는 문자열의 조합입니다. 파생 된 클래스에는 <xref:System.Web.Caching.CacheDependency>클래스의 고유 식별자를 생성 방법을 사용자 지정 하려면이 메서드를 재정의할 수 있습니다.</xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example creates an <xref:System.Web.Caching.AggregateCacheDependency> object, named `aggDep`, with two <xref:System.Web.Caching.CacheDependency> objects in its array. Once `aggDep` is instantiated, the code calls the GetUniqueID method to generate a unique identifier for both dependencies that `aggDep` contains and displays the identifiers to the containing page. An item is then added to the <xref:System.Web.Caching.Cache>, using the <xref:System.Web.Caching.Cache.Insert%2A> method, with `aggDep` as a dependency.  \n  \n [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/add/codesnippet/visualbasic/m-system.web.caching.cac_1_1.aspx)]"
  syntax:
    content: public virtual string GetUniqueID ();
    parameters: []
    return:
      type: System.String
      description: "에 대 한 고유 식별자는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 개체입니다."
  overload: System.Web.Caching.CacheDependency.GetUniqueID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.HasChanged
  id: HasChanged
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
  fullName: System.Web.Caching.CacheDependency.HasChanged
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 개체가 변경 되었습니다."
  remarks: "ASP.NET 응용 프로그램 <xref:System.Web.Caching.Cache>에 <xref:System.Web.Caching.CacheDependency>.</xref:System.Web.Caching.CacheDependency> </xref:System.Web.Caching.Cache> 에 항목을 추가할 수 있습니다. 때는 <xref:System.Web.Caching.CacheDependency>변경에 추가 된 항목의 <xref:System.Web.Caching.Cache>무효화 되 고 캐시에서 제거 됩니다.</xref:System.Web.Caching.Cache> </xref:System.Web.Caching.CacheDependency> 확인 하려면이 속성을 사용할 수 있습니다 여부는 <xref:System.Web.Caching.CacheDependency>변경 되 고에 있는 항목을 다시 만듭니다는 <xref:System.Web.Caching.Cache>있는 발생 했습니다.</xref:System.Web.Caching.Cache> </xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example demonstrates using the HasChanged property to determine whether a <xref:System.Web.Caching.CacheDependency> changed since the previous request for an item in the <xref:System.Web.Caching.Cache>. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/visualbasic/p-system.web.caching.cac_1_1.aspx)]\n [!code-cs[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/csharp/p-system.web.caching.cac_1_1.aspx)]"
  syntax:
    content: public bool HasChanged { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 개체 변경 되 고, 그러지 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Caching.CacheDependency.HasChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  id: NotifyDependencyChanged(System.Object,System.EventArgs)
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: NotifyDependencyChanged(Object,EventArgs)
  nameWithType: CacheDependency.NotifyDependencyChanged(Object,EventArgs)
  fullName: System.Web.Caching.CacheDependency.NotifyDependencyChanged(Object,EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "기본 알립니다 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 종속성을 나타내는 개체를 파생된 <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> 클래스가 변경 되었습니다."
  remarks: "파생 되는 <xref:System.Web.Caching.CacheDependency>클래스가이 메서드를 구현 해야 합니다.</xref:System.Web.Caching.CacheDependency>       파생 시키는 경우는 <xref:System.Web.Caching.CacheDependency>메서드나 재정의 하지 않은 속성의 기본 기능을 사용 하면 클래스.</xref:System.Web.Caching.CacheDependency> 파생된 클래스의 인스턴스를 만들 때 파일, 캐시 키, 데이터베이스 테이블 또는 다른 임의의 개체에 종속 된 캐시 된 항목 수 있도록 설정할를 나타냅니다. 이 메서드는 기본 기능을 알립니다 종속성 항목 변경 되 면는 <xref:System.Web.Caching.CacheDependency>항목이 변경 된 클래스 있도록의 값은 <xref:System.Web.Caching.CacheDependency.HasChanged%2A>및 <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A>속성만 업데이트할 수 있습니다.</xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> </xref:System.Web.Caching.CacheDependency.HasChanged%2A> </xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class. It creates a public method, `ResetDependency`, that uses the <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> method to change the time at which the dependency was modified, and then calls the NotifyDependencyChanged method.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/0410edfc-9961-4a15-80eb-_1.vb)]"
  syntax:
    content: protected void NotifyDependencyChanged (object sender, EventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "이벤트의 소스입니다."
    - id: e
      type: System.EventArgs
      description: "&lt;xref:System.EventArgs?displayProperty=fullName&gt; 이벤트 데이터를 포함 하는 개체입니다."
  overload: System.Web.Caching.CacheDependency.NotifyDependencyChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  id: SetUtcLastModified(System.DateTime)
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: SetUtcLastModified(DateTime)
  nameWithType: CacheDependency.SetUtcLastModified(DateTime)
  fullName: System.Web.Caching.CacheDependency.SetUtcLastModified(DateTime)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "종속성을 마지막으로 변경한 시간을 표시 합니다."
  remarks: ''
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class. It creates a public method, `ResetDependency`, that uses the SetUtcLastModified method to change the time at which the dependency was modified, and then calls the <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> method.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_6_1.vb)]"
  syntax:
    content: protected void SetUtcLastModified (DateTime utcLastModified);
    parameters:
    - id: utcLastModified
      type: System.DateTime
      description: "종속성을 마지막으로 변경한 시간입니다."
  overload: System.Web.Caching.CacheDependency.SetUtcLastModified*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.UtcLastModified
  id: UtcLastModified
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
  fullName: System.Web.Caching.CacheDependency.UtcLastModified
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "종속성에 마지막으로 변경한 시간을 가져옵니다."
  remarks: "이 속성은에 Utc (협정 세계시) (또는 그리니치 표준시)를 측정 합니다."
  example:
  - "The following code example uses the <xref:System.Web.Caching.AggregateCacheDependency> class to add an item, with two <xref:System.Web.Caching.CacheDependency> object dependencies, to the <xref:System.Web.Caching.Cache>. When a request for the <xref:System.Web.Caching.Cache> item is made, the code checks whether the item is in the <xref:System.Web.Caching.Cache>. If it is, the UtcLastModified property is converted to a string and displayed on the page. If it is not, the item and its two dependencies are created and added to the <xref:System.Web.Caching.Cache>.  \n  \n [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/add/codesnippet/visualbasic/p-system.web.caching.cac_0_1.aspx)]"
  syntax:
    content: public DateTime UtcLastModified { get; }
    return:
      type: System.DateTime
      description: "종속성에 마지막으로 변경한 시간입니다."
  overload: System.Web.Caching.CacheDependency.UtcLastModified*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Caching.CacheDependency.#ctor
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency()
  nameWithType: CacheDependency.CacheDependency()
  fullName: System.Web.Caching.CacheDependency.CacheDependency()
- uid: System.Web.Caching.CacheDependency.#ctor(System.String)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String)
  nameWithType: CacheDependency.CacheDependency(String)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[])
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[])
  nameWithType: CacheDependency.CacheDependency(String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String,DateTime)
  nameWithType: CacheDependency.CacheDependency(String,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String,DateTime)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],DateTime)
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[])
  nameWithType: CacheDependency.CacheDependency(String[],String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[])
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],DateTime)
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[],CacheDependency)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency)
- uid: System.Web.Caching.CacheDependency
  parent: System.Web.Caching
  isExternal: false
  name: CacheDependency
  nameWithType: CacheDependency
  fullName: System.Web.Caching.CacheDependency
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[],CacheDependency,DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
- uid: System.Web.Caching.CacheDependency.DependencyDispose
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: DependencyDispose()
  nameWithType: CacheDependency.DependencyDispose()
  fullName: System.Web.Caching.CacheDependency.DependencyDispose()
- uid: System.Web.Caching.CacheDependency.Dispose
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: Dispose()
  nameWithType: CacheDependency.Dispose()
  fullName: System.Web.Caching.CacheDependency.Dispose()
- uid: System.Web.Caching.CacheDependency.FinishInit
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: FinishInit()
  nameWithType: CacheDependency.FinishInit()
  fullName: System.Web.Caching.CacheDependency.FinishInit()
- uid: System.Web.Caching.CacheDependency.GetFileDependencies
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetFileDependencies()
  nameWithType: CacheDependency.GetFileDependencies()
  fullName: System.Web.Caching.CacheDependency.GetFileDependencies()
- uid: System.Web.Caching.CacheDependency.GetUniqueID
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetUniqueID()
  nameWithType: CacheDependency.GetUniqueID()
  fullName: System.Web.Caching.CacheDependency.GetUniqueID()
- uid: System.Web.Caching.CacheDependency.HasChanged
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
  fullName: System.Web.Caching.CacheDependency.HasChanged
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: NotifyDependencyChanged(Object,EventArgs)
  nameWithType: CacheDependency.NotifyDependencyChanged(Object,EventArgs)
  fullName: System.Web.Caching.CacheDependency.NotifyDependencyChanged(Object,EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: SetUtcLastModified(DateTime)
  nameWithType: CacheDependency.SetUtcLastModified(DateTime)
  fullName: System.Web.Caching.CacheDependency.SetUtcLastModified(DateTime)
- uid: System.Web.Caching.CacheDependency.UtcLastModified
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
  fullName: System.Web.Caching.CacheDependency.UtcLastModified
- uid: System.Web.Caching.CacheDependency.#ctor*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency
  nameWithType: CacheDependency.CacheDependency
- uid: System.Web.Caching.CacheDependency.DependencyDispose*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: DependencyDispose
  nameWithType: CacheDependency.DependencyDispose
- uid: System.Web.Caching.CacheDependency.Dispose*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: Dispose
  nameWithType: CacheDependency.Dispose
- uid: System.Web.Caching.CacheDependency.FinishInit*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: FinishInit
  nameWithType: CacheDependency.FinishInit
- uid: System.Web.Caching.CacheDependency.GetFileDependencies*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetFileDependencies
  nameWithType: CacheDependency.GetFileDependencies
- uid: System.Web.Caching.CacheDependency.GetUniqueID*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetUniqueID
  nameWithType: CacheDependency.GetUniqueID
- uid: System.Web.Caching.CacheDependency.HasChanged*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: NotifyDependencyChanged
  nameWithType: CacheDependency.NotifyDependencyChanged
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: SetUtcLastModified
  nameWithType: CacheDependency.SetUtcLastModified
- uid: System.Web.Caching.CacheDependency.UtcLastModified*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
