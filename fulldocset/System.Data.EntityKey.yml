### YamlMime:ManagedReference
items:
- uid: System.Data.EntityKey
  id: EntityKey
  children:
  - System.Data.EntityKey.#ctor
  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  - System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  - System.Data.EntityKey.EntityContainerName
  - System.Data.EntityKey.EntityKeyValues
  - System.Data.EntityKey.EntityNotValidKey
  - System.Data.EntityKey.EntitySetName
  - System.Data.EntityKey.Equals(System.Data.EntityKey)
  - System.Data.EntityKey.Equals(System.Object)
  - System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  - System.Data.EntityKey.GetHashCode
  - System.Data.EntityKey.IsTemporary
  - System.Data.EntityKey.NoEntitySetKey
  - System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  - System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  - System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  - System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  langs:
  - csharp
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
  type: Class
  summary: "엔터티 형식의 인스턴스인 개체에 대 한 영구 참조를 제공 합니다."
  remarks: "EntityKey 개체는 변경할 수 없습니다. 즉, 생성 된 후 수정할 수 없습니다.       자세한 내용은 참조 [엔터티 키 작업](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f)합니다."
  example:
  - "These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The examples show you how to create and use an EntityKey.  \n  \n [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#entitykeyclass_trygetobjectbykey)]\n [!code-cs[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#entitykeyclass_trygetobjectbykey)]  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{ConcatKeyValue()}")]

      [System.Runtime.Serialization.DataContract(IsReference=true)]

      public sealed class EntityKey : IEquatable<System.Data.EntityKey>
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Data.EntityKey>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor
  id: '#ctor'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey()
  nameWithType: EntityKey.EntityKey()
  fullName: System.Data.EntityKey.EntityKey()
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.EntityKey&quot;> </xref> 클래스입니다."
  syntax:
    content: public EntityKey ();
    parameters: []
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.EntityKey&quot;> </xref> 된 엔터티 집합 이름 및 제네릭 <xref:System.Collections.Generic.KeyValuePair>컬렉션.</xref:System.Collections.Generic.KeyValuePair>"
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>> entityKeyValues);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "A <xref:System.String>엔터티 컨테이너 이름으로 정규화 된 엔터티 집합 이름입니다.</xref:System.String>"
    - id: entityKeyValues
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
      description: "제네릭 <xref:System.Collections.Generic.KeyValuePair>컬렉션.</xref:System.Collections.Generic.KeyValuePair>       각 키/값 쌍에 키와 값으로 해당 속성의 값으로 속성 이름입니다. 한 쌍의 일부인 각 속성에 대 한 있어야는 <xref href=&quot;System.Data.EntityKey&quot;> </xref>합니다. 키/값 쌍의 순서가 중요 하지 않습니다. 하지만 모든 키 속성이 포함 되어야 합니다. 속성 이름은 엔터티 형식 이름 또는 스키마 이름으로 정규화 되지 않은 간단한 이름입니다."
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,IEnumerable<EntityKeyMember>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.EntityKey&quot;> </xref> 엔터티 집합 이름을 사용 하 여 클래스 및 &lt;xref:System.Collections.Generic.IEnumerable%601&gt; 컬렉션 <xref href=&quot;System.Data.EntityKeyMember&quot;> </xref> 개체입니다."
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember> entityKeyValues);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "A <xref:System.String>엔터티 컨테이너 이름으로 정규화 된 엔터티 집합 이름입니다.</xref:System.String>"
    - id: entityKeyValues
      type: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}
      description: "&lt;xref:System.Collections.Generic.IEnumerable%601&gt; 컬렉션 <xref href=&quot;System.Data.EntityKeyMember&quot;> </xref> 키를 초기화 하는 개체입니다."
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  id: '#ctor(System.String,System.String,System.Object)'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,String,Object)
  nameWithType: EntityKey.EntityKey(String,String,Object)
  fullName: System.Data.EntityKey.EntityKey(String,String,Object)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.EntityKey&quot;> </xref> 엔터티 집합 이름 및 특정 엔터티 키 쌍을 사용 하 여 클래스입니다."
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, string keyName, object keyValue);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "A <xref:System.String>엔터티 컨테이너 이름으로 정규화 된 엔터티 집합 이름입니다.</xref:System.String>"
    - id: keyName
      type: System.String
      description: "A <xref:System.String>키의 이름입니다.</xref:System.String>"
    - id: keyValue
      type: System.Object
      description: "<xref:System.Object>키 값입니다.</xref:System.Object>"
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityContainerName
  id: EntityContainerName
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
  fullName: System.Data.EntityKey.EntityContainerName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "엔터티 컨테이너의 이름을 가져오거나 설정 합니다."
  syntax:
    content: public string EntityContainerName { get; set; }
    return:
      type: System.String
      description: "A <xref:System.String>엔터티에 대 한 엔터티 컨테이너의 이름을 나타내는 값의 <xref href=&quot;System.Data.EntityKey&quot;> </xref> 속한.</xref:System.String>"
  overload: System.Data.EntityKey.EntityContainerName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityKeyValues
  id: EntityKeyValues
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
  fullName: System.Data.EntityKey.EntityKeyValues
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "이 연결 된 키 값을 가져오거나 설정 합니다. <xref href=&quot;System.Data.EntityKey&quot;> </xref>합니다."
  remarks: "<xref:System.Data.EntityKey>클래스에 대 한이 엔터티 형식에 지정 된 논리적 키를 구성 하는 값의 복사본을 포함 합니다.</xref:System.Data.EntityKey>       멤버는 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>속성 이름 및 값에는 각각 한 <xref:System.Collections.Generic.KeyValuePair%602>, 여기서 키는 속성 이름이 고 값이 개체에서 해당 속성의 실제 값.</xref:System.Collections.Generic.KeyValuePair%602> </xref:System.Collections.ObjectModel.ReadOnlyCollection%601>"
  syntax:
    content: public System.Data.EntityKeyMember[] EntityKeyValues { get; set; }
    return:
      type: System.Data.EntityKeyMember[]
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; 의 키 값이 <xref href=&quot;System.Data.EntityKey&quot;> </xref>합니다."
  overload: System.Data.EntityKey.EntityKeyValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityNotValidKey
  id: EntityNotValidKey
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityNotValidKey
  nameWithType: EntityKey.EntityNotValidKey
  fullName: System.Data.EntityKey.EntityNotValidKey
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "간단한 <xref href=&quot;System.Data.EntityKey&quot;> </xref> 실패 한 발생 하는 엔터티의 식별 [처리](~/add/includes/ajax-current-ext-md.md) 작업 합니다."
  remarks: "여러 가지 방법으로 잘못 된 엔터티를 가져올 수 있습니다. 가장 일반적인 시나리오는 [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] 쿼리에서 [처리](../Topic/TREAT%20\\(Entity%20SQL\\).md) 를 특정 형식으로는 다형 형식 인스턴스와 해당 인스턴스가 해석 하는 연산자와 일치 하지 않습니다. ([처리](../Topic/TREAT%20\\(Entity%20SQL\\).md) 유사한 C# `as` 연산자). 이 경우 쿼리, 유효 하지 않은 엔터티를 반환 하 고 결과 엔터티의 엔터티 키가은 EntityNotValidKey로 설정 합니다."
  syntax:
    content: public static readonly System.Data.EntityKey EntityNotValidKey;
    return:
      type: System.Data.EntityKey
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntitySetName
  id: EntitySetName
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
  fullName: System.Data.EntityKey.EntitySetName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "엔터티 집합의 이름을 가져오거나 설정 합니다."
  syntax:
    content: public string EntitySetName { get; set; }
    return:
      type: System.String
      description: "A <xref:System.String>엔터티의 이름을 나타내는 값을 엔터티에 대 한 설정에서 <xref href=&quot;System.Data.EntityKey&quot;> </xref> 속한.</xref:System.String>"
  overload: System.Data.EntityKey.EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)
  id: Equals(System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: Equals(EntityKey)
  nameWithType: EntityKey.Equals(EntityKey)
  fullName: System.Data.EntityKey.Equals(EntityKey)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "이 인스턴스가 지정 된 같은지 여부를 나타내는 값을 반환 <xref href=&quot;System.Data.EntityKey&quot;> </xref>합니다."
  remarks: "임시 키에는 영구 키 다른 비교 의미 체계:-임시 키 참조 일치를 사용 합니다. 즉, 두 개에 대 한 참조는 정확한 똑같은 임시 <xref:System.Data.EntityKey>인스턴스는 동일 하지만 다른 <xref:System.Data.EntityKey>인스턴스가 같은지.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -영구 키에서는 포함 된 키 속성 및 <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> 의 값을 기반으로 같은지를 확인 즉, 두 개의 별도 점이 <xref:System.Data.EntityKey>해당 엔터티 집합은 동일 하 고 해당 키 값이 있는 인스턴스를 같은.</xref:System.Data.EntityKey>       없는 <xref:System.Data.Metadata.Edm.EntitySet>키 값을 하지만 영구 키 수행 또는</xref:System.Data.Metadata.Edm.EntitySet> 임시 키에는 또한"
  syntax:
    content: public bool Equals (System.Data.EntityKey other);
    parameters:
    - id: other
      type: System.Data.EntityKey
      description: "<xref href=&quot;System.Data.EntityKey&quot;> </xref> 이 인스턴스와 비교할 개체입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우이 인스턴스 및 <code> other </code> 다 값이 같으면, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.EntityKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: EntityKey.Equals(Object)
  fullName: System.Data.EntityKey.Equals(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "이 인스턴스가 지정한 개체와 같은지 여부를 나타내는 값을 반환 합니다."
  remarks: "임시 키에는 영구 키 다른 비교 의미 체계:-임시 키 참조 일치를 사용 합니다. 즉, 두 개에 대 한 참조는 정확한 똑같은 임시 <xref:System.Data.EntityKey>인스턴스는 동일 하지만 다른 <xref:System.Data.EntityKey>인스턴스가 같은지.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -영구 키에서는 포함 된 키 속성 및 <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> 의 값을 기반으로 같은지를 확인 즉, 두 개의 별도 있을 수 있습니다 <xref:System.Data.EntityKey>있는 인스턴스를 같은 경우 해당 <xref:System.Data.Metadata.Edm.EntitySet>개체는 동일 하 고 키 값이 같으면.</xref:System.Data.Metadata.Edm.EntitySet> </xref:System.Data.EntityKey>       없는 <xref:System.Data.Metadata.Edm.EntitySet>키 값을 하지만 영구 키 수행 또는</xref:System.Data.Metadata.Edm.EntitySet> 임시 키에는 또한"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref:System.Object>이 인스턴스와 비교할.</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우이 인스턴스 및 <code> obj </code> 다 값이 같으면, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.EntityKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  id: GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: GetEntitySet(MetadataWorkspace)
  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)
  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "지정 된 메타 데이터 작업 영역에서이 엔터티 키에 대 한 설정 엔터티를 가져옵니다."
  remarks: "엔터티 컨테이너 이름에 따라 엔터티 집합에 액세스 하는 및 엔터티 집합 키의 이름입니다."
  syntax:
    content: public System.Data.Metadata.Edm.EntitySet GetEntitySet (System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace);
    parameters:
    - id: metadataWorkspace
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "엔터티를 포함 하는 메타 데이터 작업 영역입니다."
    return:
      type: System.Data.Metadata.Edm.EntitySet
      description: "<xref href=&quot;System.Data.Metadata.Edm.EntitySet&quot;> </xref> 엔터티 키에 대 한 합니다."
  overload: System.Data.EntityKey.GetEntitySet*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "지정한 메타 데이터 작업 영역에서 엔터티 집합을 찾을 수 없습니다."
  platform:
  - net462
- uid: System.Data.EntityKey.GetHashCode
  id: GetHashCode
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: EntityKey.GetHashCode()
  fullName: System.Data.EntityKey.GetHashCode()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "현재에 대 한 해시 함수 역할을 <xref href=&quot;System.Data.EntityKey&quot;> </xref> 개체입니다. GetHashCode는 해시 알고리즘 및 해시 테이블과 같은 데이터 구조에 적합 합니다."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "현재에 대 한 해시 코드 <xref href=&quot;System.Data.EntityKey&quot;> </xref>합니다."
  overload: System.Data.EntityKey.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.IsTemporary
  id: IsTemporary
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
  fullName: System.Data.EntityKey.IsTemporary
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Data.EntityKey&quot;> </xref> 은 일시적인 현상입니다."
  remarks: "새 엔터티를 만들 때의 [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] 임시 키를 정의 하 고 IsTemporary 속성이로 설정 `true`합니다. 호출 하는 경우는 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>메서드는 [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] IsTemporary 속성을 설정 하 고는 영구 키 할당 `false`.</xref:System.Data.Objects.ObjectContext.SaveChanges%2A>      > [!NOTE] > 임시 키는 프레임 워크에서 자동으로 생성 되며, 사용자가 직접 생성할 수 없습니다.       임시 키에는 영구 키 다른 비교 의미 체계:-임시 키 참조 일치를 사용 합니다. 즉, 두 개에 대 한 참조는 정확한 똑같은 임시 <xref:System.Data.EntityKey>인스턴스는 동일 하지만 다른 <xref:System.Data.EntityKey>인스턴스가 같은지.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -영구 키에서는 포함 된 키 속성 및 <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> 의 값을 기반으로 같은지를 확인 즉, 두 개의 별도 점이 <xref:System.Data.EntityKey>해당 엔터티 집합은 동일 하 고 해당 키 값이 있는 인스턴스를 같은.</xref:System.Data.EntityKey>       없는 <xref:System.Data.Metadata.Edm.EntitySet>키 값을 하지만 영구 키 수행 또는</xref:System.Data.Metadata.Edm.EntitySet> 임시 키에는 또한       때는 <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>메서드가 호출 되는 엔터티의 <xref:System.Data.Objects.ObjectStateEntry>및에서 엔터티 전환은 <xref:System.Data.EntityState>상태 <xref:System.Data.EntityState>상태는 [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] 자동으로 엔터티에 대 한 영구 새 키를 계산 하 고 모든 임시 키 참조를 동기화 합니다.</xref:System.Data.EntityState> </xref:System.Data.EntityState> </xref:System.Data.Objects.ObjectStateEntry> </xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>"
  syntax:
    content: public bool IsTemporary { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Data.EntityKey&quot;> </xref> 고, 그러지 않으면 임시 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.EntityKey.IsTemporary*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.NoEntitySetKey
  id: NoEntitySetKey
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: NoEntitySetKey
  nameWithType: EntityKey.NoEntitySetKey
  fullName: System.Data.EntityKey.NoEntitySetKey
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "단일 <xref href=&quot;System.Data.EntityKey&quot;> </xref> 는 읽기 전용 엔터티가 식별 될 여 합니다."
  remarks: "읽기 전용 엔터티는 모든 면에서 유효한 제외 하는 실제 엔터티 집합과 연결 되어 있지는 엔터티를 식별 합니다. 결과의 일부로이 발생할 수 있습니다는 [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] 쿼리 생성 하 고 (데이터베이스 테이블에서 검색 된 엔터티) 대비 쿼리의 텍스트 내에서 지정 된 엔터티 인스턴스를 반환 합니다. 엔터티를 엔터티 집합에 없는 일부 엔터티 집합에 연결 될 때까지 데이터베이스에 유지할 수 없습니다. 개체 구체화 기에서 이러한 종류의 엔터티를 처리 하는 따라서 처럼는 <xref:System.Data.Objects.MergeOption>병합 옵션이 지정 된 실제 병합 옵션에 관계 없이 지정 되었습니다.</xref:System.Data.Objects.MergeOption> 엔터티 개체가 만들어질 수 있고 해당 id를 확인할 수 없습니다 것 추가 되지 않습니다 상태 관리자에 게 구체화 과정의 일부로 합니다."
  syntax:
    content: public static readonly System.Data.EntityKey NoEntitySetKey;
    return:
      type: System.Data.EntityKey
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  id: OnDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: OnDeserialized(StreamingContext)
  nameWithType: EntityKey.OnDeserialized(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Deserialize 하는 데 사용 되는 도우미 메서드는 <xref href=&quot;System.Data.EntityKey&quot;> </xref>합니다."
  remarks: "OnDeserialized <xref:System.Data.EntityKey>.</xref:System.Data.EntityKey> 를 역직렬화 할 때 개체 서비스에서 사용 됩니다. 자세한 내용은 참조 [개체 직렬화](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)합니다."
  syntax:
    content: public void OnDeserialized (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "원본 및 대상 지정 된 직렬화 된 스트림의 설명 하 고 추가 호출자 정의 컨텍스트를 제공 합니다."
  overload: System.Data.EntityKey.OnDeserialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  id: OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: OnDeserializing(StreamingContext)
  nameWithType: EntityKey.OnDeserializing(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Deserialize 하는 데 사용 되는 도우미 메서드는 <xref href=&quot;System.Data.EntityKey&quot;> </xref>합니다."
  remarks: "OnDeserializing <xref:System.Data.EntityKey>.</xref:System.Data.EntityKey> 를 역직렬화 할 때 개체 서비스에서 사용 됩니다. 자세한 내용은 참조 [개체 직렬화](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)합니다."
  syntax:
    content: public void OnDeserializing (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "원본 및 대상 지정 된 직렬화 된 스트림의 설명 하 고 추가 호출자 정의 컨텍스트를 제공 합니다."
  overload: System.Data.EntityKey.OnDeserializing*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  id: op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: op_Equality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)
  type: Operator
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "두 <xref href=&quot;System.Data.EntityKey&quot;> </xref> 개체입니다."
  remarks: "임시 키에는 영구 키 다른 비교 의미 체계:-임시 키 참조 일치를 사용 합니다. 즉, 두 개에 대 한 참조는 정확한 똑같은 임시 <xref:System.Data.EntityKey>인스턴스는 동일 하지만 다른 <xref:System.Data.EntityKey>인스턴스가 같은지.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -영구 키에서는 포함 된 키 속성 및 <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> 의 값을 기반으로 같은지를 확인 즉, 두 개의 별도 점이 <xref:System.Data.EntityKey>해당 엔터티 집합은 동일 하 고 해당 키 값이 있는 인스턴스를 같은.</xref:System.Data.EntityKey>       없는 <xref:System.Data.Metadata.Edm.EntitySet>키 값을 하지만 영구 키 수행 또는</xref:System.Data.Metadata.Edm.EntitySet> 임시 키에는 또한"
  syntax:
    content: public static bool op_Equality (System.Data.EntityKey key1, System.Data.EntityKey key2);
    parameters:
    - id: key1
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref> 을 비교 합니다."
    - id: key2
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref> 을 비교 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>key1</code> and <code>key2</code> values are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.EntityKey.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  id: op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: op_Inequality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)
  type: Operator
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "두 <xref href=&quot;System.Data.EntityKey&quot;> </xref> 개체입니다."
  remarks: "임시 키에는 영구 키 다른 비교 의미 체계:-임시 키 참조 일치를 사용 합니다. 즉, 두 개에 대 한 참조는 정확한 똑같은 임시 <xref:System.Data.EntityKey>인스턴스는 동일 하지만 다른 <xref:System.Data.EntityKey>인스턴스가 같은지.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -영구 키에서는 포함 된 키 속성 및 <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> 의 값을 기반으로 같은지를 확인 즉, 두 개의 별도 점이 <xref:System.Data.EntityKey>해당 엔터티 집합은 동일 하 고 해당 키 값이 있는 인스턴스를 같은.</xref:System.Data.EntityKey>       없는 <xref:System.Data.Metadata.Edm.EntitySet>키 값을 하지만 일반 키 수행 또는</xref:System.Data.Metadata.Edm.EntitySet> 임시 키에는 또한"
  syntax:
    content: public static bool op_Inequality (System.Data.EntityKey key1, System.Data.EntityKey key2);
    parameters:
    - id: key1
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref> 을 비교 합니다."
    - id: key2
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref> 을 비교 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>key1</code> and <code>key2</code> values are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.EntityKey.op_Inequality*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.EntityKey.#ctor
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey()
  nameWithType: EntityKey.EntityKey()
  fullName: System.Data.EntityKey.EntityKey()
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<String,Object>>
  nameWithType: IEnumerable<KeyValuePair<String,Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,IEnumerable<EntityKeyMember>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
- uid: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<EntityKeyMember>
  nameWithType: IEnumerable<EntityKeyMember>
  fullName: System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.EntityKeyMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.EntityKeyMember
    name: EntityKeyMember
    nameWithType: EntityKeyMember
    fullName: EntityKeyMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,String,Object)
  nameWithType: EntityKey.EntityKey(String,String,Object)
  fullName: System.Data.EntityKey.EntityKey(String,String,Object)
- uid: System.Data.EntityKey.EntityContainerName
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
  fullName: System.Data.EntityKey.EntityContainerName
- uid: System.Data.EntityKey.EntityKeyValues
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
  fullName: System.Data.EntityKey.EntityKeyValues
- uid: System.Data.EntityKeyMember[]
  parent: System.Data
  isExternal: false
  name: EntityKeyMember
  nameWithType: EntityKeyMember
  fullName: System.Data.EntityKeyMember[]
  spec.csharp:
  - uid: System.Data.EntityKeyMember
    name: EntityKeyMember
    nameWithType: EntityKeyMember
    fullName: EntityKeyMember[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.EntityKey.EntityNotValidKey
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityNotValidKey
  nameWithType: EntityKey.EntityNotValidKey
  fullName: System.Data.EntityKey.EntityNotValidKey
- uid: System.Data.EntityKey
  parent: System.Data
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
- uid: System.Data.EntityKey.EntitySetName
  parent: System.Data.EntityKey
  isExternal: false
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
  fullName: System.Data.EntityKey.EntitySetName
- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals(EntityKey)
  nameWithType: EntityKey.Equals(EntityKey)
  fullName: System.Data.EntityKey.Equals(EntityKey)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.EntityKey.Equals(System.Object)
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals(Object)
  nameWithType: EntityKey.Equals(Object)
  fullName: System.Data.EntityKey.Equals(Object)
- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  parent: System.Data.EntityKey
  isExternal: false
  name: GetEntitySet(MetadataWorkspace)
  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)
  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)
- uid: System.Data.Metadata.Edm.EntitySet
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: EntitySet
  nameWithType: EntitySet
  fullName: System.Data.Metadata.Edm.EntitySet
- uid: System.Data.Metadata.Edm.MetadataWorkspace
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: MetadataWorkspace
  nameWithType: MetadataWorkspace
  fullName: System.Data.Metadata.Edm.MetadataWorkspace
- uid: System.Data.EntityKey.GetHashCode
  parent: System.Data.EntityKey
  isExternal: false
  name: GetHashCode()
  nameWithType: EntityKey.GetHashCode()
  fullName: System.Data.EntityKey.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.EntityKey.IsTemporary
  parent: System.Data.EntityKey
  isExternal: false
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
  fullName: System.Data.EntityKey.IsTemporary
- uid: System.Data.EntityKey.NoEntitySetKey
  parent: System.Data.EntityKey
  isExternal: false
  name: NoEntitySetKey
  nameWithType: EntityKey.NoEntitySetKey
  fullName: System.Data.EntityKey.NoEntitySetKey
- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserialized(StreamingContext)
  nameWithType: EntityKey.OnDeserialized(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserializing(StreamingContext)
  nameWithType: EntityKey.OnDeserializing(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)
- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Equality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)
- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Inequality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)
- uid: System.Data.EntityKey.#ctor*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey.EntityKey
- uid: System.Data.EntityKey.EntityContainerName*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
- uid: System.Data.EntityKey.EntityKeyValues*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
- uid: System.Data.EntityKey.EntitySetName*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
- uid: System.Data.EntityKey.Equals*
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals
  nameWithType: EntityKey.Equals
- uid: System.Data.EntityKey.GetEntitySet*
  parent: System.Data.EntityKey
  isExternal: false
  name: GetEntitySet
  nameWithType: EntityKey.GetEntitySet
- uid: System.Data.EntityKey.GetHashCode*
  parent: System.Data.EntityKey
  isExternal: false
  name: GetHashCode
  nameWithType: EntityKey.GetHashCode
- uid: System.Data.EntityKey.IsTemporary*
  parent: System.Data.EntityKey
  isExternal: false
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
- uid: System.Data.EntityKey.OnDeserialized*
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserialized
  nameWithType: EntityKey.OnDeserialized
- uid: System.Data.EntityKey.OnDeserializing*
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserializing
  nameWithType: EntityKey.OnDeserializing
- uid: System.Data.EntityKey.op_Equality*
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Equality
  nameWithType: EntityKey.op_Equality
- uid: System.Data.EntityKey.op_Inequality*
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Inequality
  nameWithType: EntityKey.op_Inequality
