### YamlMime:ManagedReference
items:
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile
  id: MemoryMappedFile
  children:
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability,System.Boolean)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose
  - System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.GetAccessControl
  - System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle
  - System.IO.MemoryMappedFiles.MemoryMappedFile.SetAccessControl(System.IO.MemoryMappedFiles.MemoryMappedFileSecurity)
  langs:
  - csharp
  name: MemoryMappedFile
  nameWithType: MemoryMappedFile
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile
  type: Class
  summary: "메모리 매핑된 파일을 나타냅니다."
  remarks: "메모리 매핑된 파일을 응용 프로그램의 논리 주소 공간에는 파일의 내용을 매핑합니다. 메모리 매핑된 파일을 사용 하면 메모리를 동시에 관리할 수 있습니다. 그리고 검색할 필요 없이 파일에 대 한 완전 한 임의 액세스를 허용 하기 때문에 매우 큰 파일을 사용 하는 프로그래머가 합니다. 여러 프로세스에서 메모리 매핑된 파일을 공유할 수도 있습니다.       <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile%2A>메서드는 지정된 된 경로에서 메모리 매핑된 파일 만들기 또는 <xref:System.IO.FileStream>디스크에 기존 파일의.</xref:System.IO.FileStream> </xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile%2A> 변경 내용이 경우 디스크에 자동으로 전파 되 매핑된 파일이 아닙니다.       <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew%2A>메서드; 디스크에 기존 파일에 매핑되지 않은 메모리 매핑된 파일을 만들고 (IPC) 프로세스 간 통신에 대 한 공유 메모리를 만들기에 적합 합니다.</xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew%2A>       메모리 매핑된 파일 이름과 연관 되어 있습니다.       일부 파일의 뷰를 포함 하는 메모리 매핑된 파일의 여러 뷰를 만들 수 있습니다. 둘 이상의 주소 동시 메모리를 만들 파일의 한 부분을 매핑할 수 있습니다. 동시을 유지 하기 위한 두 보기에 대 한 동일한 메모리 매핑된 파일에서 만들 수 해야 합니다. 두 가지 보기를 사용 하 여 동일한 파일의 두 파일 매핑 만들기 동시성을 제공 하지 않습니다."
  example:
  - "The following example creates a memory-mapped view of a part of an extremely large file and manipulates a portion of it.  \n  \n [!code-vb[MemoryMappedFiles.MemoryMappedFile.CreateFromFile#1](~/add/codesnippet/visualbasic/t-system.io.memorymapped_0_1.vb)]\n [!code-cs[MemoryMappedFiles.MemoryMappedFile.CreateFromFile#1](~/add/codesnippet/csharp/t-system.io.memorymapped_0_1.cs)]"
  syntax:
    content: 'public class MemoryMappedFile : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)
  id: CreateFromFile(System.String)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateFromFile(String)
  nameWithType: MemoryMappedFile.CreateFromFile(String)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "디스크에 파일에서 메모리 매핑된 파일을 만듭니다."
  remarks: ''
  example:
  - "The following example uses the CreateFromFile method to create a memory-mapped file, and then creates a memory-mapped view to a portion of an extremely large file.  \n  \n [!code-vb[MemoryMappedFiles.MemoryMappedFile.CreateFromFile#1](~/add/codesnippet/visualbasic/m-system.io.memorymapped_0_1.vb)]\n [!code-cs[MemoryMappedFiles.MemoryMappedFile.CreateFromFile#1](~/add/codesnippet/csharp/m-system.io.memorymapped_0_1.cs)]"
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateFromFile (string path);
    parameters:
    - id: path
      type: System.String
      description: "파일의 경로를 매핑할 수 있습니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>빈 문자열, 공백만 포함 또는에 정의 된 대로 하나 이상의 잘못 된 문자에는 &lt;xref:System.IO.Path.GetInvalidFileNameChars%2A?displayProperty=fullName&gt; 메서드.       -또는- <code>path</code> 잘못 된 장치를 참조 합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O 오류가 발생 했습니다."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>운영 체제에 의해 정의 된 최대 길이 초과 합니다. Windows에서 경로 248 자 미만이, 있어야 합니다. 및 파일 이름은 260 자 보다 작은지를 포함 해야 합니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에는 파일에 대 한 데 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)
  id: CreateFromFile(System.String,System.IO.FileMode)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateFromFile(String,FileMode)
  nameWithType: MemoryMappedFile.CreateFromFile(String,FileMode)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String,FileMode)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "디스크에 있는 파일에서 지정된 된 액세스 모드를 가진 메모리 매핑된 파일을 만듭니다."
  remarks: "`mode` 디스크에 있는 소스 파일에 관련 된 매개 변수입니다. 만 사용할 수는 <xref:System.IO.FileMode>디스크에 있는 소스 파일에서 메모리 매핑된 파일을 만들려면 열거형 값입니다.</xref:System.IO.FileMode>"
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateFromFile (string path, System.IO.FileMode mode);
    parameters:
    - id: path
      type: System.String
      description: "파일의 경로를 매핑할 수 있습니다."
    - id: mode
      type: System.IO.FileMode
      description: "액세스 모드입니다. must be <xref href=&quot;System.IO.FileMode&quot;></xref>."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정된 된 액세스 모드를 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>빈 문자열, 공백만 포함 또는에 정의 된 대로 하나 이상의 잘못 된 문자에는 &lt;xref:System.IO.Path.GetInvalidFileNameChars%2A?displayProperty=fullName&gt; 메서드.       -또는- <code>path</code> 잘못 된 장치를 참조 합니다.       -or-       <code>mode</code> is <xref href=&quot;System.IO.FileMode&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>mode</code>is <xref href=&quot;System.IO.FileMode&quot;></xref>, <xref href=&quot;System.IO.FileMode&quot;></xref>, or <xref href=&quot;System.IO.FileMode&quot;></xref>.       -또는- <code>mode</code> 은 <xref href=&quot;System.IO.FileMode&quot;> </xref> 되 고 디스크에 있는 파일 존재 하지 않습니다.       -또는-한 I/O 오류가 발생 했습니다."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>운영 체제에 의해 정의 된 최대 길이 초과 합니다. Windows에서 경로 248 자 미만이, 있어야 합니다. 및 파일 이름은 260 자 보다 작은지를 포함 해야 합니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에는 파일에 대 한 데 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)
  id: CreateFromFile(System.String,System.IO.FileMode,System.String)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateFromFile(String,FileMode,String)
  nameWithType: MemoryMappedFile.CreateFromFile(String,FileMode,String)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String,FileMode,String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "디스크에 파일에서 지정 된 액세스 모드와 이름을 가진 메모리 매핑된 파일을 만듭니다."
  remarks: "`mode` 디스크에 있는 소스 파일에 관련 된 매개 변수입니다. 만 사용할 수는 <xref:System.IO.FileMode>디스크에 있는 소스 파일에서 메모리 매핑된 파일을 만들려면 열거형 값입니다.</xref:System.IO.FileMode>"
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateFromFile (string path, System.IO.FileMode mode, string mapName);
    parameters:
    - id: path
      type: System.String
      description: "매핑할 파일의 경로입니다."
    - id: mode
      type: System.IO.FileMode
      description: "액세스 모드입니다. must be <xref href=&quot;System.IO.FileMode&quot;></xref>."
    - id: mapName
      type: System.String
      description: "메모리 매핑된 파일에 할당할 이름입니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정된 된 이름 및 액세스 모드를 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>빈 문자열, 공백만 포함 또는에 정의 된 대로 하나 이상의 잘못 된 문자에는 &lt;xref:System.IO.Path.GetInvalidFileNameChars%2A?displayProperty=fullName&gt; 메서드.       -또는- <code>path</code> 잘못 된 장치를 참조 합니다.       -또는- <code>mapName</code> 은 빈 문자열입니다.       -or-       <code>mode</code> is <xref href=&quot;System.IO.FileMode&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>mapName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>mode</code>is <xref href=&quot;System.IO.FileMode&quot;></xref>, <xref href=&quot;System.IO.FileMode&quot;></xref>, or <xref href=&quot;System.IO.FileMode&quot;></xref>.       -또는- <code>mode</code> 은 <xref href=&quot;System.IO.FileMode&quot;> </xref> 되 고 디스크에 있는 파일 존재 하지 않습니다.       -또는-한 I/O 오류가 발생 했습니다."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>운영 체제에 의해 정의 된 최대 길이 초과 합니다. Windows에서 경로 248 자 미만이, 있어야 합니다. 및 파일 이름은 260 자 보다 작은지를 포함 해야 합니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에는 파일에 대 한 데 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)
  id: CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateFromFile(String,FileMode,String,Int64)
  nameWithType: MemoryMappedFile.CreateFromFile(String,FileMode,String,Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String,FileMode,String,Int64)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "디스크에 있는 파일에서 지정 된 액세스 모드, 이름 및 용량을 가진 메모리 매핑된 파일을 만듭니다."
  remarks: "`mode` 디스크에 있는 소스 파일에 관련 된 매개 변수입니다.       경우 `capacity` 데이터가 없는 메모리 매핑된 파일에 기록 되는 경우에 지정된 된 용량에 맞게 디스크에 디스크에 있는 파일에 있는 파일의 크기가 증가 하는 보다 큽니다. 발생 하지 않도록 하려면이 0 (영)은 내부적으로 설정 되어 있는 기본 용량에 대 한 지정 `capacity` 디스크에 있는 파일의 크기입니다."
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateFromFile (string path, System.IO.FileMode mode, string mapName, long capacity);
    parameters:
    - id: path
      type: System.String
      description: "매핑할 파일의 경로입니다."
    - id: mode
      type: System.IO.FileMode
      description: "액세스 모드입니다. 중 하나일 수 있습니다는 <xref href=&quot;System.IO.FileMode&quot;> </xref> 열거형 값을 제외 하 고 <xref href=&quot;System.IO.FileMode&quot;> </xref>합니다."
    - id: mapName
      type: System.String
      description: "메모리 매핑된 파일에 할당할 이름입니다."
    - id: capacity
      type: System.Int64
      description: "메모리 매핑된 파일에 할당할 바이트의 최대 크기입니다. 용량을 디스크에 있는 파일의 크기를 설정 하려면 0을 지정 합니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정 된 특성을 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>빈 문자열, 공백만 포함 또는에 정의 된 대로 하나 이상의 잘못 된 문자에는 &lt;xref:System.IO.Path.GetInvalidFileNameChars%2A?displayProperty=fullName&gt; 메서드.       -또는- <code>path</code> 잘못 된 장치를 참조 합니다.       -또는- <code>mapName</code> 은 빈 문자열입니다.       -or-       <code>mode</code> is <xref href=&quot;System.IO.FileMode&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>mapName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>논리 주소 공간 크기 보다 큽니다.       -또는- <code>capacity</code> 가&0; 보다 작습니다.       -또는- <code>capacity</code> 파일 크기 (않음&0;은 아님) 보다 작습니다.       -또는- <code>capacity</code> 는&0;이 고 디스크에 있는 파일의 크기는&0;도 합니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O 오류가 발생 했습니다."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>운영 체제에 의해 정의 된 최대 길이 초과 합니다. Windows에서 경로 248 자 미만이, 있어야 합니다. 및 파일 이름은 260 자 보다 작은지를 포함 해야 합니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에는 파일에 대 한 데 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  id: CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateFromFile(String,FileMode,String,Int64,MemoryMappedFileAccess)
  nameWithType: MemoryMappedFile.CreateFromFile(String,FileMode,String,Int64,MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String,FileMode,String,Int64,MemoryMappedFileAccess)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "디스크에 있는 파일에서 지정 된 액세스 모드, 이름, 용량 및 액세스 형식을 가진 메모리 매핑된 파일을 만듭니다."
  remarks: "`mode` 디스크에 있는 소스 파일에 관련 된 매개 변수입니다.       경우 `capacity` 데이터가 없는 메모리 매핑된 파일에 기록 되는 경우에 지정된 된 용량에 맞게 디스크에 디스크에 있는 파일에 있는 파일의 크기가 증가 하는 보다 큽니다. 발생 하지 않도록 하려면이 0 (영)은 내부적으로 설정 되어 있는 기본 용량에 대 한 지정 `capacity` 디스크에 있는 파일의 크기입니다."
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateFromFile (string path, System.IO.FileMode mode, string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access);
    parameters:
    - id: path
      type: System.String
      description: "매핑할 파일의 경로입니다."
    - id: mode
      type: System.IO.FileMode
      description: "액세스 모드입니다. 중 하나일 수 있습니다는 <xref href=&quot;System.IO.FileMode&quot;> </xref> 열거형 값을 제외 하 고 <xref href=&quot;System.IO.FileMode&quot;> </xref>합니다."
    - id: mapName
      type: System.String
      description: "메모리 매핑된 파일에 할당할 이름입니다."
    - id: capacity
      type: System.Int64
      description: "메모리 매핑된 파일에 할당할 바이트의 최대 크기입니다. 용량을 디스크에 있는 파일의 크기를 설정 하려면 0을 지정 합니다."
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: "메모리 매핑된 파일에 허용 되는 액세스 형식을 지정 하는 열거형 값 중 하나입니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정 된 특성을 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mapName</code>빈 문자열입니다.       -또는- <code>access</code> 허용된 된 값이 아닙니다.       -또는- <code>path</code> 빈 파일을 지정 합니다.       -또는- <code>access</code> 로 지정 된 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 용량으로 지정 된 파일의 크기 보다 크면 <code>path</code>합니다.       -or-       <code>mode</code> is <xref href=&quot;System.IO.FileMode&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>mapName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>논리 주소 공간 크기 보다 큽니다.       -또는- <code>capacity</code> 가&0; 보다 작습니다.       -또는- <code>capacity</code> 파일 크기 (않음&0;은 아님) 보다 작습니다.       -또는- <code>capacity</code> 는&0;이 고 디스크에 있는 파일의 크기는&0;도 합니다.       -또는- <code>access</code> 은 정의 되므로 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 값입니다.       -또는-로 지정 된 파일의 크기 <code>path</code> 보다 크면 <code>capacity</code>합니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "-또는-한 I/O 오류가 발생 했습니다."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>운영 체제에 의해 정의 된 최대 길이 초과 합니다. Windows에서 경로 248 자 미만이, 있어야 합니다. 및 파일 이름은 260 자 보다 작은지를 포함 해야 합니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에는 파일에 대 한 데 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)
  id: CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateFromFile(FileStream,String,Int64,MemoryMappedFileAccess,HandleInheritability,Boolean)
  nameWithType: MemoryMappedFile.CreateFromFile(FileStream,String,Int64,MemoryMappedFileAccess,HandleInheritability,Boolean)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(FileStream,String,Int64,MemoryMappedFileAccess,HandleInheritability,Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "지정 된 액세스 모드, 이름, 상속 및 용량을 가진 기존 파일에서 메모리 매핑된 파일을 만듭니다."
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateFromFile (System.IO.FileStream fileStream, string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access, System.IO.HandleInheritability inheritability, bool leaveOpen);
    parameters:
    - id: fileStream
      type: System.IO.FileStream
      description: "기존 파일의 파일 스트림입니다."
    - id: mapName
      type: System.String
      description: "메모리 매핑된 파일에 할당할 이름입니다."
    - id: capacity
      type: System.Int64
      description: "메모리 매핑된 파일에 할당할 바이트의 최대 크기입니다. 크기에 용량을 설정 하려면 0을 지정 `filestream`합니다."
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: "메모리 매핑된 파일에 허용 되는 액세스 형식을 지정 하는 열거형 값 중 하나입니다.       이 매개 변수 설정할 수 없습니다 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>합니다."
    - id: inheritability
      type: System.IO.HandleInheritability
      description: "메모리 매핑된 파일에 대 한 핸들을 자식 프로세스가 상속할 수 있는지 여부를 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref:System.IO.HandleInheritability>.</xref:System.IO.HandleInheritability>"
    - id: leaveOpen
      type: System.Boolean
      description: "때을 스트림 하는 원본 파일을 닫는 지 여부를 나타내는 값의 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFile&quot;> </xref> 삭제 됩니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정 된 특성을 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mapName</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 빈 문자열입니다.       -또는- <code>capacity</code> 파일의 길이&0;이 고 합니다.       -또는- <code>access</code> 로 설정 된 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 또는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값은 허용 되지 않습니다.       -또는- <code>access</code> 로 설정 된 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 및 <code>capacity</code> 의 길이 보다 크면 <xref uid=&quot;langword_csharp_filestream&quot; name=&quot;filestream&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>fileStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>가&0; 보다 작습니다.       -또는- <code>capacity</code> 파일 크기 보다 작습니다.       -또는- <code>access</code> 유효 하지 않거나 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다.       -또는- <code>inheritability</code> 유효 하지 않거나 <xref:System.IO.HandleInheritability> 열거형 값입니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability,System.Boolean)
  id: CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability,System.Boolean)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateFromFile(FileStream,String,Int64,MemoryMappedFileAccess,MemoryMappedFileSecurity,HandleInheritability,Boolean)
  nameWithType: MemoryMappedFile.CreateFromFile(FileStream,String,Int64,MemoryMappedFileAccess,MemoryMappedFileSecurity,HandleInheritability,Boolean)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(FileStream,String,Int64,MemoryMappedFileAccess,MemoryMappedFileSecurity,HandleInheritability,Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "디스크에 있는 파일에서 지정한 이름, 용량, 액세스 형식, 보안 권한, 상속 및 삭제 요구 사항을 가진 메모리 매핑된 파일을 만듭니다."
  remarks: "경우 `capacity` 데이터가 없는 메모리 매핑된 파일에 기록 되는 경우에 지정된 된 용량에 맞게 디스크에 디스크에 있는 파일에 있는 파일의 크기가 증가 하는 보다 큽니다. 발생 하지 않도록 하려면이 0 (영)은 내부적으로 설정 되어 있는 기본 용량에 대 한 지정 `capacity` 디스크에 있는 파일의 크기입니다."
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateFromFile (System.IO.FileStream fileStream, string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access, System.IO.MemoryMappedFiles.MemoryMappedFileSecurity memoryMappedFileSecurity, System.IO.HandleInheritability inheritability, bool leaveOpen);
    parameters:
    - id: fileStream
      type: System.IO.FileStream
      description: "`fileStream` 매핑할 파일에 있습니다."
    - id: mapName
      type: System.String
      description: "메모리 매핑된 파일에 할당할 이름입니다."
    - id: capacity
      type: System.Int64
      description: "메모리 매핑된 파일에 할당할 바이트의 최대 크기입니다. 용량을 디스크에 있는 파일의 크기를 설정 하려면 0을 지정 합니다."
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: "메모리 매핑된 파일에 허용 되는 액세스 형식을 지정 하는 열거형 값 중 하나입니다.       이 매개 변수 설정할 수 없습니다 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>합니다."
    - id: memoryMappedFileSecurity
      type: System.IO.MemoryMappedFiles.MemoryMappedFileSecurity
      description: "파일 액세스 및 메모리 매핑된 파일에 대 한 작업에 부여할 수 있는 권한입니다.       이 매개 변수 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    - id: inheritability
      type: System.IO.HandleInheritability
      description: "메모리 매핑된 파일에 대 한 핸들을 자식 프로세스가 상속할 수 있는지 여부를 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref:System.IO.HandleInheritability>.</xref:System.IO.HandleInheritability>"
    - id: leaveOpen
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>삭제 하지 `fileStream` 후의 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFile&quot;> </xref> 닫혀 있습니다. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to dispose `fileStream`."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정 된 특성을 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mapName</code>빈 문자열입니다.       -또는- <code>capacity</code> 파일의 길이&0;이 고 합니다.       -또는- <code>access</code> 로 설정 되는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 또는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값은 허용 되지 않습니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>fileStream</code>or <code>mapname</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>가&0; 보다 작습니다.       -또는- <code>capacity</code> 파일 크기 보다 작습니다.       -또는- <code>access</code> 유효 하지 않거나 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다.       -또는- <code>inheritability</code> 유효 하지 않거나 <xref:System.IO.HandleInheritability> 열거형 값입니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<code>fileStream</code>닫혔습니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>access</code>is set to <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;></xref> when <code>fileStream</code>&quot;s access is set to <xref href=&quot;System.IO.FileAccess&quot;></xref> or <xref href=&quot;System.IO.FileAccess&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>mapName</code>이미 존재합니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)
  id: CreateNew(System.String,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateNew(String,Int64)
  nameWithType: MemoryMappedFile.CreateNew(String,Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(String,Int64)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "시스템 메모리에서 지정된 된 용량을 가진 메모리 매핑된 파일을 만듭니다."
  remarks: "지속 되지 않는 메모리 매핑된 파일을 만들려면이 메서드를 사용 하 여 (즉, 연관 되지 않은 디스크에 파일), 프로세스 간에 데이터를 공유 하는 데 사용할 수 있습니다."
  example:
  - "The following example is composed of three separate processes (console applications) that write `Boolean` values to a memory-mapped file. The following sequence of actions occur:  \n  \n1.  Process A creates the memory-mapped file and writes a value to it.  \n  \n2.  Process B opens the memory-mapped file and writes a value to it.  \n  \n3.  Process C opens the memory-mapped file and writes a value to it.  \n  \n4.  Process A reads and displays the values from the memory-mapped file.  \n  \n5.  After Process A is finished with the memory-mapped file, the file is immediately reclaimed by garbage collection.  \n  \n To run this example, do the following:  \n  \n1.  Compile the applications and open three Command windows.  \n  \n2.  In the first Command window, run Process A.  \n  \n3.  In the second Command window, run Process B.  \n  \n4.  Return to Process A and press ENTER.  \n  \n5.  In the third Command window, run Process C.  \n  \n6.  Return to Process A and press ENTER.  \n  \n The output of Process A is as follows:  \n  \n```  \nStart Process B and press ENTER to continue.  \nStart Process C and press ENTER to continue.  \nProcess A says: True  \nProcess B says: False  \nProcess C says: True  \n```  \n  \n **Process A**  \n  \n [!code-vb[System.IO.MemoryMappedFiles_IPC_X#1](~/add/codesnippet/visualbasic/2726e3da-0984-4dfa-b22c-_1.vb)]\n [!code-cs[System.IO.MemoryMappedFiles_IPC_X#1](~/add/codesnippet/csharp/2726e3da-0984-4dfa-b22c-_1.cs)]  \n  \n **Process B**  \n  \n [!code-vb[System.IO.MemoryMappedFiles_IPC_A#1](~/add/codesnippet/visualbasic/2726e3da-0984-4dfa-b22c-_2.vb)]\n [!code-cs[System.IO.MemoryMappedFiles_IPC_A#1](~/add/codesnippet/csharp/2726e3da-0984-4dfa-b22c-_2.cs)]  \n  \n **Process C**  \n  \n [!code-cs[System.IO.MemoryMappedFiles_IPC_B#1](~/add/codesnippet/csharp/2726e3da-0984-4dfa-b22c-_3.cs)]\n [!code-vb[System.IO.MemoryMappedFiles_IPC_B#1](~/add/codesnippet/visualbasic/2726e3da-0984-4dfa-b22c-_3.vb)]"
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateNew (string mapName, long capacity);
    parameters:
    - id: mapName
      type: System.String
      description: "메모리 매핑된 파일에 할당할 이름입니다."
    - id: capacity
      type: System.Int64
      description: "메모리 매핑된 파일에 할당할 바이트의 최대 크기입니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정 된 이름과 용량을 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mapName</code>빈 문자열입니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mapName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>보다 작거나&0;입니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  id: CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateNew(String,Int64,MemoryMappedFileAccess)
  nameWithType: MemoryMappedFile.CreateNew(String,Int64,MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(String,Int64,MemoryMappedFileAccess)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "시스템 메모리에서 지정 된 용량 및 액세스 형식을 가진 메모리 매핑된 파일을 만듭니다."
  remarks: "지속 되지 않는 메모리 매핑된 파일을 만들려면이 메서드를 사용 하 여 (즉, 연관 되지 않은 디스크에 파일), 프로세스 간에 데이터를 공유 하는 데 사용할 수 있습니다."
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateNew (string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access);
    parameters:
    - id: mapName
      type: System.String
      description: "메모리 매핑된 파일에 할당할 이름입니다."
    - id: capacity
      type: System.Int64
      description: "메모리 매핑된 파일에 할당할 바이트의 최대 크기입니다."
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: "메모리 매핑된 파일에 허용 되는 액세스 형식을 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>합니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정 된 특성을 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mapName</code>빈 문자열입니다.       -또는- <code>access</code> 와 쓰기 전용으로 설정 되는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mapName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>보다 작거나&0;입니다.       -또는- <code>access</code> 유효 하지 않거나 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  id: CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateNew(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,HandleInheritability)
  nameWithType: MemoryMappedFile.CreateNew(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,HandleInheritability)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,HandleInheritability)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "지정한 이름, 용량, 액세스 형식, 메모리 할당 옵션 및 상속을 가진 메모리 매핑된 파일을 만듭니다."
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateNew (string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access, System.IO.MemoryMappedFiles.MemoryMappedFileOptions options, System.IO.HandleInheritability inheritability);
    parameters:
    - id: mapName
      type: System.String
      description: "메모리 매핑된 파일에 할당할 이름입니다."
    - id: capacity
      type: System.Int64
      description: "메모리 매핑된 파일에 할당할 바이트의 최대 크기입니다."
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: "메모리 매핑된 파일에 허용 되는 액세스 형식을 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>합니다."
    - id: options
      type: System.IO.MemoryMappedFiles.MemoryMappedFileOptions
      description: "메모리 매핑된 파일에 대 한 메모리 할당 옵션을 지정 하는 열거형 값의 비트 조합입니다."
    - id: inheritability
      type: System.IO.HandleInheritability
      description: "메모리 매핑된 파일에 대 한 핸들을 자식 프로세스가 상속할 수 있는지 여부를 지정 하는 값입니다. 기본값은 <xref:System.IO.HandleInheritability>.</xref:System.IO.HandleInheritability>"
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정 된 특성을 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mapName</code>빈 문자열입니다.       -또는- <code>access</code> 와 쓰기 전용으로 설정 되는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mapName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>보다 작거나&0;입니다.       -또는- <code>access</code> 유효 하지 않거나 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다.       -또는- <code>inheritability</code> 유효 하지 않거나 <xref:System.IO.HandleInheritability> 값입니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)
  id: CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateNew(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,MemoryMappedFileSecurity,HandleInheritability)
  nameWithType: MemoryMappedFile.CreateNew(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,MemoryMappedFileSecurity,HandleInheritability)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,MemoryMappedFileSecurity,HandleInheritability)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "시스템 메모리에서 지정 된 용량, 액세스 형식, 메모리 할당, 보안 권한 및 상속을 가진 메모리 매핑된 파일을 만듭니다."
  remarks: "지속 되지 않는 메모리 매핑된 파일을 만들려면이 메서드를 사용 하 여 (즉, 연관 되지 않은 디스크에 파일), 프로세스 간에 데이터를 공유 하는 데 사용할 수 있습니다."
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateNew (string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access, System.IO.MemoryMappedFiles.MemoryMappedFileOptions options, System.IO.MemoryMappedFiles.MemoryMappedFileSecurity memoryMappedFileSecurity, System.IO.HandleInheritability inheritability);
    parameters:
    - id: mapName
      type: System.String
      description: "메모리 매핑된 파일에 할당할 이름입니다."
    - id: capacity
      type: System.Int64
      description: "메모리 매핑된 파일에 할당할 바이트의 최대 크기입니다."
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: "메모리 매핑된 파일에 허용 되는 액세스 형식을 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>합니다."
    - id: options
      type: System.IO.MemoryMappedFiles.MemoryMappedFileOptions
      description: "메모리 매핑된 파일에 대 한 메모리 할당 옵션을 지정 하는 열거형 값의 비트 조합입니다."
    - id: memoryMappedFileSecurity
      type: System.IO.MemoryMappedFiles.MemoryMappedFileSecurity
      description: "파일 액세스 및 메모리 매핑된 파일에 대 한 작업에 부여할 수 있는 권한입니다.       이 매개 변수 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    - id: inheritability
      type: System.IO.HandleInheritability
      description: "메모리 매핑된 파일에 대 한 핸들을 자식 프로세스가 상속할 수 있는지 여부를 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref:System.IO.HandleInheritability>.</xref:System.IO.HandleInheritability>"
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정 된 특성을 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mapName</code>빈 문자열입니다.       -또는- <code>access</code> 와 쓰기 전용으로 설정 되는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mapName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>보다 작거나&0;입니다.       -또는- <code>access</code> 유효 하지 않거나 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다.       -또는- <code>inheritability</code> 유효 하지 않거나 <xref:System.IO.HandleInheritability> 열거형 값입니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)
  id: CreateOrOpen(System.String,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateOrOpen(String,Int64)
  nameWithType: MemoryMappedFile.CreateOrOpen(String,Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(String,Int64)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "만들거나 시스템 메모리에서 지정된 된 용량을 가진 메모리 매핑된 파일을 엽니다."
  remarks: "이 메서드를 사용 하 여 만들거나 지속 되지 않는 메모리 매핑된 파일을 열 수 (즉, 연관 되지 않은 디스크에 파일), 프로세스 간에 데이터를 공유 하는 데 사용할 수 있습니다."
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateOrOpen (string mapName, long capacity);
    parameters:
    - id: mapName
      type: System.String
      description: "메모리 매핑된 파일에 할당할 이름입니다."
    - id: capacity
      type: System.Int64
      description: "메모리 매핑된 파일에 할당할 바이트의 최대 크기입니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정 된 이름과 크기를 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mapName</code>빈 문자열입니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mapName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>논리 주소 공간 크기 보다 큽니다.       -또는- <code>capacity</code> 가&0; 보다 작거나 같음."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  id: CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateOrOpen(String,Int64,MemoryMappedFileAccess)
  nameWithType: MemoryMappedFile.CreateOrOpen(String,Int64,MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(String,Int64,MemoryMappedFileAccess)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "만들거나 시스템 메모리에서 지정 된 용량 및 액세스 형식을 가진 메모리 매핑된 파일을 엽니다."
  remarks: "이 메서드를 사용 하 여 만들거나 지속 되지 않는 메모리 매핑된 파일을 열 수 (즉, 연관 되지 않은 디스크에 파일), 프로세스 간에 데이터를 공유 하는 데 사용할 수 있습니다."
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateOrOpen (string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access);
    parameters:
    - id: mapName
      type: System.String
      description: "메모리 매핑된 파일에 할당할 이름입니다."
    - id: capacity
      type: System.Int64
      description: "메모리 매핑된 파일에 할당할 바이트의 최대 크기입니다."
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: "메모리 매핑된 파일에 허용 되는 액세스 형식을 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>합니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정 된 특성을 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mapName</code>빈 문자열입니다.       -또는- <code>access</code> 와 쓰기 전용으로 설정 되는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mapName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>논리 주소 공간 크기 보다 큽니다.       -또는- <code>capacity</code> 가&0; 보다 작거나 같음.       -또는- <code>access</code> 유효 하지 않거나 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "운영 체제에서 파일에 대 한 지정 된 액세스를 거부 했습니다. 액세스가로 설정 된 예를 들어 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 또는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>, 파일 또는 디렉터리는 읽기 전용입니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  id: CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateOrOpen(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,HandleInheritability)
  nameWithType: MemoryMappedFile.CreateOrOpen(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,HandleInheritability)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,HandleInheritability)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "새 빈 메모리 매핑된 파일을 만들거나 동일한 이름이 있는 경우 기존의 메모리 매핑된 파일을 엽니다. 기존 파일을 여는 경우 용량, 옵션 및 메모리 인수가 무시 됩니다."
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateOrOpen (string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access, System.IO.MemoryMappedFiles.MemoryMappedFileOptions options, System.IO.HandleInheritability inheritability);
    parameters:
    - id: mapName
      type: System.String
      description: "메모리 매핑된 파일에 할당할 이름입니다."
    - id: capacity
      type: System.Int64
      description: "메모리 매핑된 파일에 할당할 바이트의 최대 크기입니다."
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: "메모리 매핑된 파일에 허용 되는 액세스 형식을 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>합니다."
    - id: options
      type: System.IO.MemoryMappedFiles.MemoryMappedFileOptions
      description: "파일에 적용할 메모리 할당 옵션을 나타내는 값의 비트 조합입니다."
    - id: inheritability
      type: System.IO.HandleInheritability
      description: "메모리 매핑된 파일에 대 한 핸들을 자식 프로세스가 상속할 수 있는지 여부를 지정 하는 값입니다. 기본값은 <xref:System.IO.HandleInheritability>.</xref:System.IO.HandleInheritability>"
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정 된 특성을 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mapName</code>빈 문자열입니다.       -또는- <code>access</code> 와 쓰기 전용으로 설정 되는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mapName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>논리 주소 공간 크기 보다 큽니다.       -또는- <code>capacity</code> 가&0; 보다 작거나 같음.       -또는- <code>access</code> 유효 하지 않거나 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다.       -또는- <code>inheritability</code> 유효 하지 않거나 <xref:System.IO.HandleInheritability> 열거형 값입니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "운영 체제에서 파일에 대 한 지정 된 액세스를 거부 했습니다. 액세스가로 설정 된 예를 들어 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 또는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>, 파일 또는 디렉터리는 읽기 전용입니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)
  id: CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateOrOpen(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,MemoryMappedFileSecurity,HandleInheritability)
  nameWithType: MemoryMappedFile.CreateOrOpen(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,MemoryMappedFileSecurity,HandleInheritability)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,MemoryMappedFileSecurity,HandleInheritability)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "만들거나 시스템 메모리에서 지정 된 용량, 액세스 형식, 메모리 할당, 보안 권한 및 상속을 가진 메모리 매핑된 파일을 엽니다."
  remarks: "이 메서드를 사용 하 여 만들거나 지속 되지 않는 메모리 매핑된 파일을 열 수 (즉, 연관 되지 않은 디스크에 파일), 프로세스 간에 데이터를 공유 하는 데 사용할 수 있습니다."
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateOrOpen (string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access, System.IO.MemoryMappedFiles.MemoryMappedFileOptions options, System.IO.MemoryMappedFiles.MemoryMappedFileSecurity memoryMappedFileSecurity, System.IO.HandleInheritability inheritability);
    parameters:
    - id: mapName
      type: System.String
      description: "메모리 매핑된 파일에 할당할 이름입니다."
    - id: capacity
      type: System.Int64
      description: "메모리 매핑된 파일에 할당할 바이트의 최대 크기입니다."
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: "메모리 매핑된 파일에 허용 되는 액세스 형식을 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>합니다."
    - id: options
      type: System.IO.MemoryMappedFiles.MemoryMappedFileOptions
      description: "메모리 매핑된 파일에 대 한 메모리 할당 옵션을 지정 하는 열거형 값의 비트 조합입니다."
    - id: memoryMappedFileSecurity
      type: System.IO.MemoryMappedFiles.MemoryMappedFileSecurity
      description: "파일 액세스 및 메모리 매핑된 파일에 대 한 작업에 부여할 수 있는 권한입니다.       이 매개 변수 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    - id: inheritability
      type: System.IO.HandleInheritability
      description: "메모리 매핑된 파일에 대 한 핸들을 자식 프로세스가 상속할 수 있는지 여부를 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref:System.IO.HandleInheritability>.</xref:System.IO.HandleInheritability>"
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정 된 특성을 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mapName</code>빈 문자열입니다.       -또는- <code>access</code> 와 쓰기 전용으로 설정 되는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mapName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>논리 주소 공간 크기 보다 큽니다.       -또는- <code>capacity</code> 가&0; 보다 작거나 같음.       -또는- <code>access</code> 유효 하지 않거나 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다.       -또는- <code>inheritability</code> 유효 하지 않거나 <xref:System.IO.HandleInheritability> 열거형 값입니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "운영 체제 지정 된 거부 <code> access </code> 을 파일 예를 들어 <code> access </code> 로 설정 되어 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 또는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>, 파일 또는 디렉터리는 읽기 전용입니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor
  id: CreateViewAccessor
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateViewAccessor()
  nameWithType: MemoryMappedFile.CreateViewAccessor()
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor()
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "만듭니다는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedViewAccessor&quot;> </xref> 에 메모리 매핑된 파일의 뷰에 매핑되는 합니다."
  remarks: "메모리 매핑된 파일에 대 한 임의 액세스에 대 한이 메서드에서 반환 된 보기를 사용할 수 있습니다."
  syntax:
    content: public System.IO.MemoryMappedFiles.MemoryMappedViewAccessor CreateViewAccessor ();
    parameters: []
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
      description: "임의로 액세스 가능한 메모리 블록입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "메모리 매핑된 파일에 대 한 액세스는 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)
  id: CreateViewAccessor(System.Int64,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateViewAccessor(Int64,Int64)
  nameWithType: MemoryMappedFile.CreateViewAccessor(Int64,Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(Int64,Int64)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "만듭니다는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedViewAccessor&quot;> </xref> 에 메모리 매핑된 파일의 뷰에 매핑되는 및 지정 된 오프셋과 크기를가지고 있습니다."
  remarks: "메모리 매핑된 파일에 대 한 임의 액세스에 대 한이 메서드에서 반환 된 보기를 사용할 수 있습니다.       메모리 매핑된 파일의 전체 보기를 만들려면 0 (영)을 지정 된 `size` 매개 변수입니다. 이 작업을 수행 하는 경우 보기의 크기는 디스크에 있는 소스 파일의 크기 보다 크거나 작을 수 있습니다. 뷰는 시스템 페이지 단위로 제공 되 고 보기의 크기는 다음 시스템 페이지 크기까지 반올림 때문입니다."
  example:
  - "The following example creates a view of a memory-mapped file and edits it. This code example is part of a larger example provided for the <xref:System.IO.MemoryMappedFiles.MemoryMappedFile> class.  \n  \n [!code-vb[MemoryMappedFiles.MemoryMappedFile.CreateFromFile#2](~/add/codesnippet/visualbasic/eabd93aa-7563-4639-a698-_1.vb)]\n [!code-cs[MemoryMappedFiles.MemoryMappedFile.CreateFromFile#2](~/add/codesnippet/csharp/eabd93aa-7563-4639-a698-_1.cs)]"
  syntax:
    content: public System.IO.MemoryMappedFiles.MemoryMappedViewAccessor CreateViewAccessor (long offset, long size);
    parameters:
    - id: offset
      type: System.Int64
      description: "보기를 시작 하는 바이트입니다."
    - id: size
      type: System.Int64
      description: "보기의 크기입니다. 0 (영)에서 시작 하는 뷰를 만들 지정 `offset` 메모리 매핑된 파일의 끝에서 약 끝납니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
      description: "임의로 액세스 가능한 메모리 블록입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>또는 <code>size</code> 이 음수입니다.       -또는- <code>size</code> 논리 주소 공간 보다 큽니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "메모리 매핑된 파일에 대 한 액세스는 권한이 없습니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  id: CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateViewAccessor(Int64,Int64,MemoryMappedFileAccess)
  nameWithType: MemoryMappedFile.CreateViewAccessor(Int64,Int64,MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(Int64,Int64,MemoryMappedFileAccess)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "만듭니다는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedViewAccessor&quot;> </xref> 에 메모리 매핑된 파일의 뷰에 매핑되는 및 지정 된 오프셋, 크기 및 액세스 제한 합니다."
  remarks: "메모리 매핑된 파일에 대 한 임의 액세스에 대 한이 메서드에서 반환 된 보기를 사용할 수 있습니다.       메모리 매핑된 파일의 전체 보기를 만들려면 0 (영)을 지정 된 `size` 매개 변수입니다. 이 작업을 수행 하는 경우 보기의 크기는 디스크에 있는 소스 파일의 크기 보다 크거나 작을 수 있습니다. 뷰는 시스템 페이지 단위로 제공 되 고 보기의 크기는 다음 시스템 페이지 크기까지 반올림 때문입니다."
  syntax:
    content: public System.IO.MemoryMappedFiles.MemoryMappedViewAccessor CreateViewAccessor (long offset, long size, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access);
    parameters:
    - id: offset
      type: System.Int64
      description: "보기를 시작 하는 바이트입니다."
    - id: size
      type: System.Int64
      description: "보기의 크기입니다. 0 (영)에서 시작 하는 뷰를 만들 지정 `offset` 메모리 매핑된 파일의 끝에서 약 끝납니다."
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: "메모리 매핑된 파일에 허용 되는 액세스 형식을 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>합니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
      description: "임의로 액세스 가능한 메모리 블록입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>또는 <code>size</code> 이 음수입니다.       -또는- <code>size</code> 논리 주소 공간 보다 큽니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>access</code>메모리 매핑된 파일에 대해 올바르지 않습니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream
  id: CreateViewStream
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateViewStream()
  nameWithType: MemoryMappedFile.CreateViewStream()
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream()
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "메모리 매핑된 파일의 뷰에 매핑되는 스트림을 만듭니다."
  remarks: "이 메서드에서 반환 된 순차적 액세스를 위해 메모리 매핑된 파일에 같은 프로세스 간 통신에 대 한 스트림을 사용할 수 있습니다."
  example:
  - "The following example creates a stream and writes a value to it. This code example is part of a larger example provided for the <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew%2A> method.  \n  \n [!code-vb[System.IO.MemoryMappedFiles_IPC_X#2](~/add/codesnippet/visualbasic/m-system.io.memorymapped_1_1.vb)]\n [!code-cs[System.IO.MemoryMappedFiles_IPC_X#2](~/add/codesnippet/csharp/m-system.io.memorymapped_1_1.cs)]"
  syntax:
    content: public System.IO.MemoryMappedFiles.MemoryMappedViewStream CreateViewStream ();
    parameters: []
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedViewStream
      description: "메모리 스트림입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "메모리 매핑된 파일에 대 한 액세스는 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)
  id: CreateViewStream(System.Int64,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateViewStream(Int64,Int64)
  nameWithType: MemoryMappedFile.CreateViewStream(Int64,Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(Int64,Int64)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "지정 된 오프셋과 크기를가지고 메모리 매핑된 파일의 뷰에 매핑되는 스트림을 만듭니다."
  remarks: "이 메서드에서 반환 된 순차적 액세스를 위해 메모리 매핑된 파일에 같은 프로세스 간 통신에 대 한 스트림을 사용할 수 있습니다.       메모리 매핑된 파일의 전체 보기를 만들려면 0 (영)을 지정 된 `size` 매개 변수입니다. 이 작업을 수행 하는 경우 보기의 크기는 디스크에 있는 소스 파일의 크기 보다 크거나 작을 수 있습니다. 뷰는 시스템 페이지 단위로 제공 되 고 보기의 크기는 다음 시스템 페이지 크기까지 반올림 때문입니다."
  syntax:
    content: public System.IO.MemoryMappedFiles.MemoryMappedViewStream CreateViewStream (long offset, long size);
    parameters:
    - id: offset
      type: System.Int64
      description: "보기를 시작 하는 바이트입니다."
    - id: size
      type: System.Int64
      description: "보기의 크기입니다. 0 (영)에서 시작 하는 뷰를 만들 지정 `offset` 메모리 매핑된 파일의 끝에서 약 끝납니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedViewStream
      description: "지정 된 오프셋과 크기를 가진 메모리 스트림."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>또는 <code>size</code> 이 음수입니다.       -또는- <code>size</code> 논리 주소 공간 보다 큽니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "메모리 매핑된 파일에 대 한 액세스는 권한이 없습니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>size</code>총 가상 메모리 보다 큽니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  id: CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: CreateViewStream(Int64,Int64,MemoryMappedFileAccess)
  nameWithType: MemoryMappedFile.CreateViewStream(Int64,Int64,MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(Int64,Int64,MemoryMappedFileAccess)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "메모리 매핑된 파일의 보기에 매핑되는 하 고, 지정 된 오프셋, 크기 및 액세스 입력 된 스트림을 만듭니다."
  remarks: "이 메서드에서 반환 된 순차적 액세스를 위해 메모리 매핑된 파일에 같은 프로세스 간 통신에 대 한 스트림을 사용할 수 있습니다.       메모리 매핑된 파일의 전체 보기를 만들려면 0 (영)을 지정 된 `size` 매개 변수입니다. 이 작업을 수행 하는 경우 보기의 크기는 디스크에 있는 소스 파일의 크기 보다 크거나 작을 수 있습니다. 뷰는 시스템 페이지 단위로 제공 되 고 보기의 크기는 다음 시스템 페이지 크기까지 반올림 때문입니다."
  syntax:
    content: public System.IO.MemoryMappedFiles.MemoryMappedViewStream CreateViewStream (long offset, long size, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access);
    parameters:
    - id: offset
      type: System.Int64
      description: "보기를 시작 하는 바이트입니다."
    - id: size
      type: System.Int64
      description: "보기의 크기입니다. 0 (영)에서 시작 하는 뷰를 만들 지정 `offset` 메모리 매핑된 파일의 끝에서 약 끝납니다."
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: "메모리 매핑된 파일에 허용 되는 액세스 형식을 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>합니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedViewStream
      description: "지정된 된 특성을 가진 메모리 스트림."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>또는 <code>size</code> 이 음수입니다.       -또는- <code>size</code> 논리 주소 공간 보다 큽니다.       -또는- <code>access </code>유효 하지 않거나 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>access</code>메모리 매핑된 파일에 대해 올바르지 않습니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>size</code>총 가상 메모리 보다 큽니다.       -또는- <code>access</code> 메모리 매핑된 파일에 대해 올바르지 않습니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose
  id: Dispose
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: Dispose()
  nameWithType: MemoryMappedFile.Dispose()
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose()
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFile&quot;> </xref>합니다."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MemoryMappedFile.Dispose(Boolean)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFile&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.GetAccessControl
  id: GetAccessControl
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: GetAccessControl()
  nameWithType: MemoryMappedFile.GetAccessControl()
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.GetAccessControl()
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "메모리 매핑된 파일 리소스에 액세스 제어를 가져옵니다."
  syntax:
    content: public System.IO.MemoryMappedFiles.MemoryMappedFileSecurity GetAccessControl ();
    parameters: []
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFileSecurity
      description: "파일 액세스 및 메모리 매핑된 파일에 대 한 작업에 부여할 수 있는 권한입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.GetAccessControl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "보안 정보를 설정 하는 기본 호출에 실패 했습니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "보안 정보를 설정 하는 기본 호출에 실패 했습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "메모리 매핑된 파일이 닫혀 있습니다."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "현재 플랫폼은 Windows 98 또는 이전 버전입니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "보안 정보를 설정 하는 기본 호출에 실패 했습니다.       -또는-로 매핑된 메모리 파일을 연 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 만 합니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)
  id: OpenExisting(System.String)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: OpenExisting(String)
  nameWithType: MemoryMappedFile.OpenExisting(String)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "시스템 메모리에서 지정된 된 이름을 가진 기존의 메모리 매핑된 파일을 엽니다."
  remarks: "비지속형 또는 메모리 매핑된 파일 중 하나는 지속형된 메모리 매핑된 파일 (디스크의 파일에 연결)을 수 있습니다."
  example:
  - "**Opening a Persisted Memory-Mapped File**  \n  \n The following example opens a memory-mapped file named `ImgA` that has already been created from a file on disk (as shown in the example for the <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile%28System.String%29> method).  \n  \n [!code-cs[memorymappedfiles.memorymappedfile.openexisting#1](~/add/codesnippet/csharp/m-system.io.memorymapped_2_1.cs)]\n [!code-vb[memorymappedfiles.memorymappedfile.openexisting#1](~/add/codesnippet/visualbasic/m-system.io.memorymapped_2_1.vb)]  \n  \n **Opening a Non-Persisted Memory-Mapped File**  \n  \n The following example opens a memory-mapped file used for inter-process communication. This code example is part of a larger example provided for the <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew%28System.String%2CSystem.Int64%29> method."
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile OpenExisting (string mapName);
    parameters:
    - id: mapName
      type: System.String
      description: "열려는 메모리 매핑된 파일의 이름입니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정한 이름을 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mapName</code>빈 문자열입니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mapName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "지정 된 파일이 <code> mapName </code> 존재 하지 않습니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)
  id: OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: OpenExisting(String,MemoryMappedFileRights)
  nameWithType: MemoryMappedFile.OpenExisting(String,MemoryMappedFileRights)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(String,MemoryMappedFileRights)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "시스템 메모리에서 지정된 된 이름 및 액세스 권한을 가진 기존의 메모리 매핑된 파일을 엽니다."
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile OpenExisting (string mapName, System.IO.MemoryMappedFiles.MemoryMappedFileRights desiredAccessRights);
    parameters:
    - id: mapName
      type: System.String
      description: "열려는 메모리 매핑된 파일의 이름입니다."
    - id: desiredAccessRights
      type: System.IO.MemoryMappedFiles.MemoryMappedFileRights
      description: "메모리 매핑된 파일에 적용할 액세스 권한을 지정 하는 열거형 값 중 하나입니다."
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정 된 특성을 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mapName</code>빈 문자열입니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mapName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>desiredAccessRights</code>유효 하지 않거나 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileRights&quot;> </xref> 열거형 값입니다."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "지정 된 파일이 <code> mapName </code> 존재 하지 않습니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)
  id: OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: OpenExisting(String,MemoryMappedFileRights,HandleInheritability)
  nameWithType: MemoryMappedFile.OpenExisting(String,MemoryMappedFileRights,HandleInheritability)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(String,MemoryMappedFileRights,HandleInheritability)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "시스템 메모리에서 지정 된 이름, 액세스 권한 및 상속을 가진 기존의 메모리 매핑된 파일을 엽니다."
  syntax:
    content: public static System.IO.MemoryMappedFiles.MemoryMappedFile OpenExisting (string mapName, System.IO.MemoryMappedFiles.MemoryMappedFileRights desiredAccessRights, System.IO.HandleInheritability inheritability);
    parameters:
    - id: mapName
      type: System.String
      description: "열려는 메모리 매핑된 파일의 이름입니다."
    - id: desiredAccessRights
      type: System.IO.MemoryMappedFiles.MemoryMappedFileRights
      description: "메모리 매핑된 파일에 적용할 액세스 권한을 지정 하는 열거형 값 중 하나입니다."
    - id: inheritability
      type: System.IO.HandleInheritability
      description: "메모리 매핑된 파일에 대 한 핸들을 자식 프로세스가 상속할 수 있는지 여부를 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref:System.IO.HandleInheritability>.</xref:System.IO.HandleInheritability>"
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: "지정 된 특성을 가진 메모리 매핑된 파일입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mapName</code>빈 문자열입니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mapName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>desiredAccessRights</code>유효 하지 않거나 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileRights&quot;> </xref> 열거형 값입니다.       -또는- <code>inheritability</code> 유효 하지 않거나 <xref:System.IO.HandleInheritability> 열거형 값입니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "요청 된 액세스 메모리 매핑된 파일에 대해 올바르지 않습니다."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "지정 된 파일이 <code> mapName </code> 존재 하지 않습니다."
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle
  id: SafeMemoryMappedFileHandle
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: SafeMemoryMappedFileHandle
  nameWithType: MemoryMappedFile.SafeMemoryMappedFileHandle
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "메모리 매핑된 파일의 파일 핸들을 가져옵니다."
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle SafeMemoryMappedFileHandle { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle
      description: "메모리 매핑된 파일에 대 한 핸들입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle*
  exceptions: []
  platform:
  - net462
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.SetAccessControl(System.IO.MemoryMappedFiles.MemoryMappedFileSecurity)
  id: SetAccessControl(System.IO.MemoryMappedFiles.MemoryMappedFileSecurity)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  name: SetAccessControl(MemoryMappedFileSecurity)
  nameWithType: MemoryMappedFile.SetAccessControl(MemoryMappedFileSecurity)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.SetAccessControl(MemoryMappedFileSecurity)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.MemoryMappedFiles
  summary: "메모리 매핑된 파일 리소스에 액세스 제어를 설정합니다."
  syntax:
    content: public void SetAccessControl (System.IO.MemoryMappedFiles.MemoryMappedFileSecurity memoryMappedFileSecurity);
    parameters:
    - id: memoryMappedFileSecurity
      type: System.IO.MemoryMappedFiles.MemoryMappedFileSecurity
      description: "파일 액세스 및 메모리 매핑된 파일에 대 한 작업에 부여할 수 있는 권한입니다."
  overload: System.IO.MemoryMappedFiles.MemoryMappedFile.SetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>memoryMappedFileSecurity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "보안 정보를 설정 하는 기본 호출에 실패 했습니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "보안 정보를 설정 하는 기본 호출에 실패 했습니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "보안 정보를 설정 하는 기본 호출에 실패 했습니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateFromFile(String)
  nameWithType: MemoryMappedFile.CreateFromFile(String)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile
  parent: System.IO.MemoryMappedFiles
  isExternal: false
  name: MemoryMappedFile
  nameWithType: MemoryMappedFile
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateFromFile(String,FileMode)
  nameWithType: MemoryMappedFile.CreateFromFile(String,FileMode)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String,FileMode)
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateFromFile(String,FileMode,String)
  nameWithType: MemoryMappedFile.CreateFromFile(String,FileMode,String)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String,FileMode,String)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateFromFile(String,FileMode,String,Int64)
  nameWithType: MemoryMappedFile.CreateFromFile(String,FileMode,String,Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String,FileMode,String,Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateFromFile(String,FileMode,String,Int64,MemoryMappedFileAccess)
  nameWithType: MemoryMappedFile.CreateFromFile(String,FileMode,String,Int64,MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(String,FileMode,String,Int64,MemoryMappedFileAccess)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
  parent: System.IO.MemoryMappedFiles
  isExternal: false
  name: MemoryMappedFileAccess
  nameWithType: MemoryMappedFileAccess
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateFromFile(FileStream,String,Int64,MemoryMappedFileAccess,HandleInheritability,Boolean)
  nameWithType: MemoryMappedFile.CreateFromFile(FileStream,String,Int64,MemoryMappedFileAccess,HandleInheritability,Boolean)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(FileStream,String,Int64,MemoryMappedFileAccess,HandleInheritability,Boolean)
- uid: System.IO.FileStream
  parent: System.IO
  isExternal: false
  name: FileStream
  nameWithType: FileStream
  fullName: System.IO.FileStream
- uid: System.IO.HandleInheritability
  parent: System.IO
  isExternal: true
  name: HandleInheritability
  nameWithType: HandleInheritability
  fullName: System.IO.HandleInheritability
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability,System.Boolean)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateFromFile(FileStream,String,Int64,MemoryMappedFileAccess,MemoryMappedFileSecurity,HandleInheritability,Boolean)
  nameWithType: MemoryMappedFile.CreateFromFile(FileStream,String,Int64,MemoryMappedFileAccess,MemoryMappedFileSecurity,HandleInheritability,Boolean)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(FileStream,String,Int64,MemoryMappedFileAccess,MemoryMappedFileSecurity,HandleInheritability,Boolean)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFileSecurity
  parent: System.IO.MemoryMappedFiles
  isExternal: false
  name: MemoryMappedFileSecurity
  nameWithType: MemoryMappedFileSecurity
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFileSecurity
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateNew(String,Int64)
  nameWithType: MemoryMappedFile.CreateNew(String,Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(String,Int64)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateNew(String,Int64,MemoryMappedFileAccess)
  nameWithType: MemoryMappedFile.CreateNew(String,Int64,MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(String,Int64,MemoryMappedFileAccess)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateNew(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,HandleInheritability)
  nameWithType: MemoryMappedFile.CreateNew(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,HandleInheritability)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,HandleInheritability)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFileOptions
  parent: System.IO.MemoryMappedFiles
  isExternal: false
  name: MemoryMappedFileOptions
  nameWithType: MemoryMappedFileOptions
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFileOptions
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateNew(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,MemoryMappedFileSecurity,HandleInheritability)
  nameWithType: MemoryMappedFile.CreateNew(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,MemoryMappedFileSecurity,HandleInheritability)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,MemoryMappedFileSecurity,HandleInheritability)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateOrOpen(String,Int64)
  nameWithType: MemoryMappedFile.CreateOrOpen(String,Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(String,Int64)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateOrOpen(String,Int64,MemoryMappedFileAccess)
  nameWithType: MemoryMappedFile.CreateOrOpen(String,Int64,MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(String,Int64,MemoryMappedFileAccess)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateOrOpen(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,HandleInheritability)
  nameWithType: MemoryMappedFile.CreateOrOpen(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,HandleInheritability)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,HandleInheritability)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateOrOpen(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,MemoryMappedFileSecurity,HandleInheritability)
  nameWithType: MemoryMappedFile.CreateOrOpen(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,MemoryMappedFileSecurity,HandleInheritability)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(String,Int64,MemoryMappedFileAccess,MemoryMappedFileOptions,MemoryMappedFileSecurity,HandleInheritability)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateViewAccessor()
  nameWithType: MemoryMappedFile.CreateViewAccessor()
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor()
- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
  parent: System.IO.MemoryMappedFiles
  isExternal: false
  name: MemoryMappedViewAccessor
  nameWithType: MemoryMappedViewAccessor
  fullName: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateViewAccessor(Int64,Int64)
  nameWithType: MemoryMappedFile.CreateViewAccessor(Int64,Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(Int64,Int64)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateViewAccessor(Int64,Int64,MemoryMappedFileAccess)
  nameWithType: MemoryMappedFile.CreateViewAccessor(Int64,Int64,MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(Int64,Int64,MemoryMappedFileAccess)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateViewStream()
  nameWithType: MemoryMappedFile.CreateViewStream()
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream()
- uid: System.IO.MemoryMappedFiles.MemoryMappedViewStream
  parent: System.IO.MemoryMappedFiles
  isExternal: false
  name: MemoryMappedViewStream
  nameWithType: MemoryMappedViewStream
  fullName: System.IO.MemoryMappedFiles.MemoryMappedViewStream
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateViewStream(Int64,Int64)
  nameWithType: MemoryMappedFile.CreateViewStream(Int64,Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(Int64,Int64)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateViewStream(Int64,Int64,MemoryMappedFileAccess)
  nameWithType: MemoryMappedFile.CreateViewStream(Int64,Int64,MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(Int64,Int64,MemoryMappedFileAccess)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: Dispose()
  nameWithType: MemoryMappedFile.Dispose()
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose()
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MemoryMappedFile.Dispose(Boolean)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(Boolean)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.GetAccessControl
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: GetAccessControl()
  nameWithType: MemoryMappedFile.GetAccessControl()
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.GetAccessControl()
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: OpenExisting(String)
  nameWithType: MemoryMappedFile.OpenExisting(String)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(String)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: OpenExisting(String,MemoryMappedFileRights)
  nameWithType: MemoryMappedFile.OpenExisting(String,MemoryMappedFileRights)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(String,MemoryMappedFileRights)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFileRights
  parent: System.IO.MemoryMappedFiles
  isExternal: false
  name: MemoryMappedFileRights
  nameWithType: MemoryMappedFileRights
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFileRights
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: OpenExisting(String,MemoryMappedFileRights,HandleInheritability)
  nameWithType: MemoryMappedFile.OpenExisting(String,MemoryMappedFileRights,HandleInheritability)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(String,MemoryMappedFileRights,HandleInheritability)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: SafeMemoryMappedFileHandle
  nameWithType: MemoryMappedFile.SafeMemoryMappedFileHandle
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle
- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeMemoryMappedFileHandle
  nameWithType: SafeMemoryMappedFileHandle
  fullName: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.SetAccessControl(System.IO.MemoryMappedFiles.MemoryMappedFileSecurity)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: SetAccessControl(MemoryMappedFileSecurity)
  nameWithType: MemoryMappedFile.SetAccessControl(MemoryMappedFileSecurity)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.SetAccessControl(MemoryMappedFileSecurity)
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile*
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateFromFile
  nameWithType: MemoryMappedFile.CreateFromFile
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew*
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateNew
  nameWithType: MemoryMappedFile.CreateNew
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen*
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateOrOpen
  nameWithType: MemoryMappedFile.CreateOrOpen
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor*
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateViewAccessor
  nameWithType: MemoryMappedFile.CreateViewAccessor
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream*
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: CreateViewStream
  nameWithType: MemoryMappedFile.CreateViewStream
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose*
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: Dispose
  nameWithType: MemoryMappedFile.Dispose
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.GetAccessControl*
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: GetAccessControl
  nameWithType: MemoryMappedFile.GetAccessControl
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting*
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: OpenExisting
  nameWithType: MemoryMappedFile.OpenExisting
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle*
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: SafeMemoryMappedFileHandle
  nameWithType: MemoryMappedFile.SafeMemoryMappedFileHandle
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.SetAccessControl*
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  isExternal: false
  name: SetAccessControl
  nameWithType: MemoryMappedFile.SetAccessControl
