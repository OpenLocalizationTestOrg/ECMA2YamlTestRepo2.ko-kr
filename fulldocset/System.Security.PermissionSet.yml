### YamlMime:ManagedReference
items:
- uid: System.Security.PermissionSet
  id: PermissionSet
  children:
  - System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  - System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  - System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  - System.Security.PermissionSet.Assert
  - System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  - System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  - System.Security.PermissionSet.Copy
  - System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  - System.Security.PermissionSet.Count
  - System.Security.PermissionSet.Demand
  - System.Security.PermissionSet.Deny
  - System.Security.PermissionSet.Equals(System.Object)
  - System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  - System.Security.PermissionSet.GetEnumerator
  - System.Security.PermissionSet.GetEnumeratorImpl
  - System.Security.PermissionSet.GetHashCode
  - System.Security.PermissionSet.GetPermission(System.Type)
  - System.Security.PermissionSet.GetPermissionImpl(System.Type)
  - System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  - System.Security.PermissionSet.IsEmpty
  - System.Security.PermissionSet.IsReadOnly
  - System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  - System.Security.PermissionSet.IsSynchronized
  - System.Security.PermissionSet.IsUnrestricted
  - System.Security.PermissionSet.PermitOnly
  - System.Security.PermissionSet.RemovePermission(System.Type)
  - System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  - System.Security.PermissionSet.RevertAssert
  - System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  - System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  - System.Security.PermissionSet.SyncRoot
  - System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Security.PermissionSet.ToString
  - System.Security.PermissionSet.ToXml
  - System.Security.PermissionSet.Union(System.Security.PermissionSet)
  langs:
  - csharp
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
  type: Class
  summary: "다양 한 유형의 사용 권한 포함 될 수 있는 컬렉션을 나타냅니다."
  remarks: "그룹으로 여러 사용 권한 작업을 수행 하려면 PermissionSet을 사용할 수 있습니다."
  example:
  - "The following code example demonstrates the use of the PermissionSet class and members.  \n  \n [!code-cs[System.Security.PermissionSet#1](~/add/codesnippet/csharp/t-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#1](~/add/codesnippet/visualbasic/t-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#1](~/add/codesnippet/cpp/t-system.security.permis_22_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class PermissionSet : System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Security.ISecurityEncodable, System.Security.IStackWalk
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Security.ISecurityEncodable
  - System.Security.IStackWalk
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermissionSet(PermissionState)
  nameWithType: PermissionSet.PermissionSet(PermissionState)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 지정된 된 <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>합니다."
  remarks: "`Unrestricted` 상태를 구현 하는 모든 사용 권한을 허용는 <xref:System.Security.Permissions.IUnrestrictedPermission>인터페이스 동안 `None` 어떠한 사용 권한도 허용.</xref:System.Security.Permissions.IUnrestrictedPermission>       사용 하 여 <xref:System.Security.PermissionSet.AddPermission%2A>는 비어 있는 <xref:System.Security.PermissionSet>자세히 집합을 정의할 수 있습니다.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet.AddPermission%2A>"
  example:
  - "The following code example shows the use of the PermissionSet constructor to create a permission set with a permission state of <xref:System.Security.Permissions.PermissionState>. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#2](~/add/codesnippet/csharp/d6be246c-3ec7-45d0-bd17-_1.cs)]\n [!code-vb[System.Security.PermissionSet#2](~/add/codesnippet/visualbasic/d6be246c-3ec7-45d0-bd17-_1.vb)]\n [!code-cpp[System.Security.PermissionSet#2](~/add/codesnippet/cpp/d6be246c-3ec7-45d0-bd17-_1.cpp)]"
  syntax:
    content: public PermissionSet (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "리소스에 대 한 사용 권한 집합의 권한을 지정 하는 열거형 값 중 하나입니다."
  overload: System.Security.PermissionSet.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> state </code> 매개 변수가 유효 하지 않거나 <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  id: '#ctor(System.Security.PermissionSet)'
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermissionSet(PermissionSet)
  nameWithType: PermissionSet.PermissionSet(PermissionSet)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionSet)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 클래스에서 가져온 초기 값으로는 <code> permSet </code> 매개 변수입니다."
  remarks: "<xref:System.Security.PermissionSet>지정 된 <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> 포함 된 사용 권한에의 복사본이 포함 된</xref:System.Security.PermissionSet> 새      > [!NOTE] > 같습니다 <xref:System.Security.PermissionSet.Copy%2A>때는 `permSet` 매개 변수가 않습니다 `null`.</xref:System.Security.PermissionSet.Copy%2A>"
  syntax:
    content: public PermissionSet (System.Security.PermissionSet permSet);
    parameters:
    - id: permSet
      type: System.Security.PermissionSet
      description: "새 값을 가져올 집합 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>, 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 빈 만들려는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
  overload: System.Security.PermissionSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  id: AddPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: AddPermission(IPermission)
  nameWithType: PermissionSet.AddPermission(IPermission)
  fullName: System.Security.PermissionSet.AddPermission(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "추가 하 게 지정한 사용 권한에 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
  remarks: "이미 추가 된 사용 권한과 동일한 유형의 사용 권한을에 있는 경우는 <xref:System.Security.PermissionSet>, 새 사용 권한을 기존 권한 개체와 지정된 된 권한 개체의 union을입니다.</xref:System.Security.PermissionSet> 예를 들어 구현 하는 사용 권한 <xref:System.Security.Permissions.IUnrestrictedPermission>에 추가 되는 <xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>, 결과 union은 원래 `Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet></xref:System.Security.Permissions.PermissionState> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  example:
  - "The following code example shows the use of the AddPermission method to add a permission to a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#3](~/add/codesnippet/csharp/m-system.security.permis_25_1.cs)]\n [!code-vb[System.Security.PermissionSet#3](~/add/codesnippet/visualbasic/m-system.security.permis_25_1.vb)]\n [!code-cpp[System.Security.PermissionSet#3](~/add/codesnippet/cpp/m-system.security.permis_25_1.cpp)]"
  syntax:
    content: public System.Security.IPermission AddPermission (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "추가할 수 있는 권한이 있습니다."
    return:
      type: System.Security.IPermission
      description: "추가 사용 권한 및에 이미 있는 동일한 형식의 모든 사용 권한의 합은 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
  overload: System.Security.PermissionSet.AddPermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메서드가 호출 되는 <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  id: AddPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: AddPermissionImpl(IPermission)
  nameWithType: PermissionSet.AddPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.AddPermissionImpl(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "추가 하 게 지정한 사용 권한에 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
  remarks: "AddPermissionImpl 메서드는에 대 한 구현에서 <xref:System.Security.PermissionSet.AddPermission%2A>메서드.</xref:System.Security.PermissionSet.AddPermission%2A>       이미 추가 된 사용 권한과 동일한 유형의 사용 권한을에 있는 경우는 <xref:System.Security.PermissionSet>, 새 사용 권한을 기존 권한 개체와 지정된 된 권한 개체의 union을입니다.</xref:System.Security.PermissionSet> 예를 들어 구현 하는 사용 권한 <xref:System.Security.Permissions.IUnrestrictedPermission>에 추가 되는 <xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>, 결과 union은 원래 `Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet></xref:System.Security.Permissions.PermissionState> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  syntax:
    content: protected virtual System.Security.IPermission AddPermissionImpl (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "추가할 수 있는 권한이 있습니다."
    return:
      type: System.Security.IPermission
      description: "추가 사용 권한 및에 이미 있는 동일한 형식의 모든 사용 권한의 합은 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>, 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우 <code> perm </code> 은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.PermissionSet.AddPermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메서드가 호출 되는 <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.PermissionSet.Assert
  id: Assert
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Assert()
  nameWithType: PermissionSet.Assert()
  fullName: System.Security.PermissionSet.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "호출 코드에서 스택의 상위 호출자가 리소스에 액세스할 수 있는 권한이 부여 되지 않았습니다 하는 경우에이 메서드를 호출 하는 코드를 통해 사용 권한 요구로 보호 되는 리소스를 액세스할 수 있음을 선언 합니다. Assert 사용 인해 보안 취약점이 발생할 수 있습니다."
  remarks: "이것이 하나만 Assert 프레임에서 하나의 수 있기 때문에 프레임 내에서 동시에 여러 권한을 어설션할 수 있는 유일한 방법은입니다. Assert에 대 한 유일한 유효 사용 권한을 부여 합니다. 호출 된 <xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName>또는 <xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName>활성 Assert를 취소 하는 메서드.</xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName> </xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName>      > [!CAUTION] > 메서드를 잘못 사용 하는 경우 보안 문제가 발생할 수 있습니다는 모든 코드 호출 체인에 지정된 된 리소스를 액세스할 수 있는 권한이 부여 되어야 하는 요구 사항을 제거 Assert 메서드를 호출 하기 때문에 있습니다. 따라서 매우 주의 해 서 사용 해야 합니다."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.PermissionSet.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.PermissionSet&quot;> </xref> 어설션 인스턴스에 어설션 코드가 부여 되지 않았습니다.       -또는-현재 프레임에 대 한 활성 Assert가 이미 있습니다."
  platform:
  - net462
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  id: ContainsNonCodeAccessPermissions
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ContainsNonCodeAccessPermissions()
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()
  fullName: System.Security.PermissionSet.ContainsNonCodeAccessPermissions()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 에서 파생 되지 않은 사용 권한이 <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>합니다."
  remarks: ''
  example:
  - "The following code example shows the use of the ContainsNonCodeAccessPermissions method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#9](~/add/codesnippet/csharp/m-system.security.permis_8_1.cs)]\n [!code-vb[System.Security.PermissionSet#9](~/add/codesnippet/visualbasic/m-system.security.permis_8_1.vb)]\n [!code-cpp[System.Security.PermissionSet#9](~/add/codesnippet/cpp/m-system.security.permis_8_1.cpp)]"
  syntax:
    content: public bool ContainsNonCodeAccessPermissions ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 에서 파생 되지 않은 사용 권한이 <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.PermissionSet.ContainsNonCodeAccessPermissions*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  id: ConvertPermissionSet(System.String,System.Byte[],System.String)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ConvertPermissionSet(String,Byte[],String)
  nameWithType: PermissionSet.ConvertPermissionSet(String,Byte[],String)
  fullName: System.Security.PermissionSet.ConvertPermissionSet(String,Byte[],String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "인코딩된 변환 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 다른 XML 인코딩 형식으로 XML 인코딩 형식에서입니다."
  remarks: "이 메서드를 사용 하지 마십시오."
  syntax:
    content: public static byte[] ConvertPermissionSet (string inFormat, byte[] inData, string outFormat);
    parameters:
    - id: inFormat
      type: System.String
      description: '인코딩 형식 중 하나를 나타내는 문자열로: ASCII, 유니코드 또는 이진 파일입니다. 가능한 값에 &quot;XMLASCII&quot; 또는 &quot;XML&quot;, &quot;XMLUNICODE&quot; 및 &quot;BINARY&quot;은 합니다.'
    - id: inData
      type: System.Byte[]
      description: "XML로 인코딩된 사용 권한 집합입니다."
    - id: outFormat
      type: System.String
      description: '인코딩 형식 중 하나를 나타내는 문자열로: ASCII, 유니코드 또는 이진 파일입니다. 가능한 값에 &quot;XMLASCII&quot; 또는 &quot;XML&quot;, &quot;XMLUNICODE&quot; 및 &quot;BINARY&quot;은 합니다.'
    return:
      type: System.Byte[]
      description: "지정된 된 출력 형식을 사용 하 여 설정 하는 암호화 된 권한입니다."
  overload: System.Security.PermissionSet.ConvertPermissionSet*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "모든 경우"
  platform:
  - net462
- uid: System.Security.PermissionSet.Copy
  id: Copy
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Copy()
  nameWithType: PermissionSet.Copy()
  fullName: System.Security.PermissionSet.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "복사본을 만듭니다는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
  remarks: "복사본 한 <xref:System.Security.PermissionSet>원래 개체와 리소스에 동일한 액세스 권한을 나타냅니다.</xref:System.Security.PermissionSet> 변경 내용이 복사본에 대해 원래 권한 집합 영향을 주지 않습니다."
  example:
  - "The following code example shows the use of the Copy method to create a copy of a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#20](~/add/codesnippet/csharp/m-system.security.permis_23_1.cs)]\n [!code-vb[System.Security.PermissionSet#20](~/add/codesnippet/visualbasic/m-system.security.permis_23_1.vb)]\n [!code-cpp[System.Security.PermissionSet#20](~/add/codesnippet/cpp/m-system.security.permis_23_1.cpp)]"
  syntax:
    content: public virtual System.Security.PermissionSet Copy ();
    parameters: []
    return:
      type: System.Security.PermissionSet
      description: "복사본은 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
  overload: System.Security.PermissionSet.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: PermissionSet.CopyTo(Array,Int32)
  fullName: System.Security.PermissionSet.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "집합의 사용 권한 개체 <xref:System.Array>.</xref:System.Array> 의 지정된 된 위치에 복사"
  syntax:
    content: public virtual void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "복사할 대상 배열입니다."
    - id: index
      type: System.Int32
      description: "(0부터 시작)를 복사를 시작할 배열의 시작 위치입니다."
  overload: System.Security.PermissionSet.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>array</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> array </code> 매개 변수에 둘 이상의 차원이 있습니다."
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code> index </code> 의 범위를 벗어난 매개 변수는는 <code> array </code> 매개 변수입니다."
  platform:
  - net462
- uid: System.Security.PermissionSet.Count
  id: Count
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Count
  nameWithType: PermissionSet.Count
  fullName: System.Security.PermissionSet.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "사용 권한 집합에 포함 된 사용 권한 개체의 수를 가져옵니다."
  remarks: "에 `None` 또는 `Unrestricted` 실제 사용 권한은 개체 인스턴스가 사용 되 고&0;이 반환 상태입니다."
  example:
  - "The following code example shows the use of the Count property to get the number of permission objects in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#5](~/add/codesnippet/csharp/p-system.security.permis_23_1.cs)]\n [!code-vb[System.Security.PermissionSet#5](~/add/codesnippet/visualbasic/p-system.security.permis_23_1.vb)]\n [!code-cpp[System.Security.PermissionSet#5](~/add/codesnippet/cpp/p-system.security.permis_23_1.cpp)]"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "에 포함 된 사용 권한 개체의 수는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
  overload: System.Security.PermissionSet.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Demand
  id: Demand
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Demand()
  nameWithType: PermissionSet.Demand()
  fullName: System.Security.PermissionSet.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "강제로 <xref:System.Security.SecurityException>모든 호출 스택의 상위 호출자가 현재 인스턴스에서 지정 된 사용 권한을 부여 되지 않은 경우 런타임에.</xref:System.Security.SecurityException>"
  remarks: "요청에서 사용 하 여 한 <xref:System.Security.PermissionSet>모든 호출자가 하나의 작업이 있는 집합의 모든 권한이 있는지 확인 하려면.</xref:System.Security.PermissionSet>       이 메서드를 호출 하는 코드의 사용 권한은 검사 하지 않습니다. 검사 해당 코드의 직접 실행 호출자에서 시작 되 고 스택 위로 진행 됩니다. 호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다. 요청이 없는 경우에 성공 하면 <xref:System.Security.SecurityException>throw 됩니다.</xref:System.Security.SecurityException>       경우는 <xref:System.Security.PermissionSet>에서 상속 되지 않는 권한을 포함 <xref:System.Security.CodeAccessPermission>, `Demand` 이러한 사용 권한은의 메서드도 호출 됩니다.</xref:System.Security.CodeAccessPermission> </xref:System.Security.PermissionSet>"
  example:
  - "The following code example shows the use of the Demand method to demand all the permissions in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#4](~/add/codesnippet/csharp/m-system.security.permis_17_1.cs)]\n [!code-vb[System.Security.PermissionSet#4](~/add/codesnippet/visualbasic/m-system.security.permis_17_1.vb)]\n [!code-cpp[System.Security.PermissionSet#4](~/add/codesnippet/cpp/m-system.security.permis_17_1.cpp)]"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.PermissionSet.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출 체인에 호출자 요구 사용 권한이 없습니다."
  platform:
  - net462
- uid: System.Security.PermissionSet.Deny
  id: Deny
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Deny()
  nameWithType: PermissionSet.Deny()
  fullName: System.Security.PermissionSet.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "모든 <xref:System.Security.PermissionSet.Demand*>는 현재에서 포함 된 형식의 권한과 공통 된 권한에 대 한 호출 코드를 통과 하 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 실패.</xref:System.Security.PermissionSet.Demand*>"
  remarks: "이 메서드는 호출 스택의 상위 호출자가 해당 호출자가 액세스할 수 있는 권한이 부여 되어 있는 경우에이 메서드를 호출 하는 코드를 통해 보호 된 리소스에 액세스 하지 못하도록 방지 합니다. 호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다.       Deny는 프로그래머의 책임을 제한 하거나 거부에서 거부 된 권한으로 보호 되는 리소스에 액세스 하는 데 사용 되 고 호출 하는 메서드를 방지할 수 있으므로 실수로 인 한 보안 취약점을 방지할 수 있습니다. 메서드는 사용 권한에서 거부를 호출 하는 경우는 <xref:System.Security.PermissionSet.Demand%2A>Deny에 도달 하면 보안 검사를 수행할 권한은 하위 호출 스택의 호출자가 호출에 대 한.</xref:System.Security.PermissionSet.Demand%2A>       거부에 대 한 해당 권한 요청할 수 없으므로 부여 되지 않은 사용 권한에 대해 무시 됩니다."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.PermissionSet.Deny*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Deny 대 한 이전 호출에는 현재 스택 프레임에 대 한 권한을 이미 제한 했습니다."
  platform:
  - net462
- uid: System.Security.PermissionSet.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PermissionSet.Equals(Object)
  fullName: System.Security.PermissionSet.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "확인 여부를 지정 된 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 또는 <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> 현재 개체가 같은지 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
  remarks: "일치 여부는 권한 집합에 지정 된 내용에 포함 된 사용 권한에 의해 결정 됩니다 `obj`합니다. `obj`일 수 있습니다는 <xref:System.Security.PermissionSet>개체 또는 <xref:System.Security.NamedPermissionSet>개체입니다.</xref:System.Security.NamedPermissionSet> </xref:System.Security.PermissionSet> 경우 `obj` 는 <xref:System.Security.NamedPermissionSet>, 이름 및 설명을 무시 됩니다.</xref:System.Security.NamedPermissionSet>       자세한 내용은 <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>.</xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> 을 참조 하십시오."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "현재와 비교할 개체 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 개체가 현재 같으면 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 개체; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.PermissionSet.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PermissionSet.FromXml(SecurityElement)
  fullName: System.Security.PermissionSet.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "포함 된 XML 인코딩에서 지정된 된 상태의 보안 개체를 다시 만듭니다."
  remarks: ''
  example:
  - "The following code example shows the use of the FromXml method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#17](~/add/codesnippet/csharp/m-system.security.permis_21_1.cs)]\n [!code-vb[System.Security.PermissionSet#17](~/add/codesnippet/visualbasic/m-system.security.permis_21_1.vb)]\n [!code-cpp[System.Security.PermissionSet#17](~/add/codesnippet/cpp/m-system.security.permis_21_1.cpp)]"
  syntax:
    content: public virtual void FromXml (System.Security.SecurityElement et);
    parameters:
    - id: et
      type: System.Security.SecurityElement
      description: "XML은 보안 개체를 다시 만드는 데 사용할 인코딩입니다."
  overload: System.Security.PermissionSet.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>et</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> et </code> 매개 변수가 올바른 권한 요소가 아닙니다.       -또는- <code> et </code> 매개 변수의 버전 번호가 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Security.PermissionSet.GetEnumerator
  id: GetEnumerator
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: PermissionSet.GetEnumerator()
  fullName: System.Security.PermissionSet.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "집합의 사용 권한에 대 한 열거자를 반환 합니다."
  remarks: "인덱스 열거자를 사용 하 여 집합에서 각각의 사용 권한 개체에 액세스 합니다."
  example:
  - "The following code example shows the use of the GetEnumerator method to list all the permissions in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#18](~/add/codesnippet/csharp/m-system.security.permis_5_1.cs)]\n [!code-vb[System.Security.PermissionSet#18](~/add/codesnippet/visualbasic/m-system.security.permis_5_1.vb)]\n [!code-cpp[System.Security.PermissionSet#18](~/add/codesnippet/cpp/m-system.security.permis_5_1.cpp)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "집합의 사용 권한에 대 한 열거자 개체입니다."
  overload: System.Security.PermissionSet.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetEnumeratorImpl
  id: GetEnumeratorImpl
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetEnumeratorImpl()
  nameWithType: PermissionSet.GetEnumeratorImpl()
  fullName: System.Security.PermissionSet.GetEnumeratorImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "집합의 사용 권한에 대 한 열거자를 반환 합니다."
  remarks: "GetEnumeratorImpl 메서드는에 대 한 구현에서 <xref:System.Security.PermissionSet.GetEnumerator%2A>메서드.</xref:System.Security.PermissionSet.GetEnumerator%2A>"
  syntax:
    content: protected virtual System.Collections.IEnumerator GetEnumeratorImpl ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "집합의 사용 권한에 대 한 열거자 개체입니다."
  overload: System.Security.PermissionSet.GetEnumeratorImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetHashCode
  id: GetHashCode
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PermissionSet.GetHashCode()
  fullName: System.Security.PermissionSet.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "에 대 한 해시 코드를 가져옵니다는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 개체 해시 알고리즘 및 데이터 해시 테이블 같은 구조에 적합 합니다."
  remarks: "두 개를 비교 하 여 해시 코드를 사용 해야 하므로 동일한 사용 권한 집합의 두 인스턴스에 대 한 해시 코드 서로 다를 수 <xref:System.Security.PermissionSet>개체입니다.</xref:System.Security.PermissionSet>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "현재에 대 한 해시 코드 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 개체입니다."
  overload: System.Security.PermissionSet.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetPermission(System.Type)
  id: GetPermission(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetPermission(Type)
  nameWithType: PermissionSet.GetPermission(Type)
  fullName: System.Security.PermissionSet.GetPermission(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "집합에 있는 경우 지정 된 형식의 사용 권한 개체를 가져옵니다."
  remarks: "메서드가 반환 `null` 에 대 한 프로그램 `Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> 하지만 `Unrestricted` <xref:System.Security.PermissionSet>효과적으로 모든 권한이 포함 된 실제 인스턴스 반환가 없습니다.</xref:System.Security.PermissionSet>"
  syntax:
    content: public System.Security.IPermission GetPermission (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "원하는 사용 권한 개체의 형식입니다."
    return:
      type: System.Security.IPermission
      description: "지정 된 형식의 권한 개체의 복사본은 <code> permClass </code> 에 포함 된 매개 변수는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>, 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 이름이 없는 경우."
  overload: System.Security.PermissionSet.GetPermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)
  id: GetPermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetPermissionImpl(Type)
  nameWithType: PermissionSet.GetPermissionImpl(Type)
  fullName: System.Security.PermissionSet.GetPermissionImpl(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "집합에 있는 경우 지정 된 형식의 사용 권한 개체를 가져옵니다."
  remarks: "GetPermissionImpl 메서드는에 대 한 구현에서 <xref:System.Security.PermissionSet.GetPermission%2A>메서드.</xref:System.Security.PermissionSet.GetPermission%2A>       메서드가 반환 `null` 에 대 한 프로그램 `Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> 하지만 `Unrestricted` <xref:System.Security.PermissionSet>효과적으로 모든 권한이 포함 된 실제 인스턴스 반환가 없습니다.</xref:System.Security.PermissionSet>"
  syntax:
    content: protected virtual System.Security.IPermission GetPermissionImpl (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "사용 권한 개체의 형식입니다."
    return:
      type: System.Security.IPermission
      description: "지정 된 형식의 사용 권한 개체의 복사본은 <code> permClass </code> 에 포함 된 매개 변수는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>, 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 이름이 없는 경우."
  overload: System.Security.PermissionSet.GetPermissionImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  id: Intersect(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Intersect(PermissionSet)
  nameWithType: PermissionSet.Intersect(PermissionSet)
  fullName: System.Security.PermissionSet.Intersect(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "만들고는 사용 권한 집합을 현재의 교집합 반환 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 와 지정 된 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
  remarks: "두 사용 권한 집합의 교집합에는 모두 공통으로 설명 하는 작업 집합을 설명 하는 권한 집합입니다. 특히,이 권한을 모두 전달 하는 모든 요청 설정도 전달 교차점 최소 사용 권한을 나타냅니다.       각 두 집합 모두에 존재 하는 사용 권한 유형에 대 한 사용 권한만의 두 인스턴스가 교차는 권한을 사용 하 여 `Intersect` 메서드가 결과 <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> 결과 권한이 포함 되어 에 두 집합 중 하나에만 존재 하는 사용 권한 유형 결과 집합에서 제외 됩니다."
  example:
  - "The following code example shows the use of the Intersect method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#12](~/add/codesnippet/csharp/m-system.security.permis_10_1.cs)]\n [!code-vb[System.Security.PermissionSet#12](~/add/codesnippet/visualbasic/m-system.security.permis_10_1.vb)]\n [!code-cpp[System.Security.PermissionSet#12](~/add/codesnippet/cpp/m-system.security.permis_10_1.cpp)]"
  syntax:
    content: public System.Security.PermissionSet Intersect (System.Security.PermissionSet other);
    parameters:
    - id: other
      type: System.Security.PermissionSet
      description: "현재 집합과 교차 하는 사용 권한 집합 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
    return:
      type: System.Security.PermissionSet
      description: "현재의 교차 부분을 나타내는 새 사용 권한 집합 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 및 지정된 된 대상입니다. 이 개체는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 교집합이 비어 있는 경우."
  overload: System.Security.PermissionSet.Intersect*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsEmpty
  id: IsEmpty
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsEmpty()
  nameWithType: PermissionSet.IsEmpty()
  fullName: System.Security.PermissionSet.IsEmpty()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 비어 있습니다."
  remarks: "A <xref:System.Security.PermissionSet>비워 둘 수 있고 아직 완전 제한 상태에 해당 권한이 있는 사용 권한의 인스턴스를 포함 합니다.</xref:System.Security.PermissionSet> 사용 권한을 완벽 하 게 제한 된 상태에 있으며 하는 경우 해당 `IsSubsetOf` 메서드 반환 `true` 때 `null` 매개 변수로 전달 합니다."
  syntax:
    content: public bool IsEmpty ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 고, 그러지 않으면 빈 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.PermissionSet.IsEmpty*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsReadOnly
  id: IsReadOnly
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
  fullName: System.Security.PermissionSet.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "컬렉션이 읽기 전용인 지 여부를 나타내는 값을 가져옵니다."
  remarks: "A <xref:System.Security.PermissionSet>이 속성은 항상 읽기 전용 수 없으므로 `false`.</xref:System.Security.PermissionSet>"
  example:
  - "The following code example shows the value returned by the IsReadOnly property. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#7](~/add/codesnippet/csharp/p-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#7](~/add/codesnippet/visualbasic/p-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#7](~/add/codesnippet/cpp/p-system.security.permis_22_1.cpp)]"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  id: IsSubsetOf(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsSubsetOf(PermissionSet)
  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)
  fullName: System.Security.PermissionSet.IsSubsetOf(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "결정 여부 현재 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 의 지정 된 하위 집합인 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
  remarks: "A <xref:System.Security.PermissionSet>대상의 하위 집합인 <xref:System.Security.PermissionSet>경우 모든 요청이 있는 성공에 대 한는 <xref:System.Security.PermissionSet>도 대상에 대 한 성공.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet> 즉, 대상 적어도 하위 집합에 포함 된 사용 권한을 포함 합니다."
  example:
  - "The following code example shows the use of the IsSubsetOf method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#11](~/add/codesnippet/csharp/m-system.security.permis_12_1.cs)]\n [!code-vb[System.Security.PermissionSet#11](~/add/codesnippet/visualbasic/m-system.security.permis_12_1.vb)]\n [!code-cpp[System.Security.PermissionSet#11](~/add/codesnippet/cpp/m-system.security.permis_12_1.cpp)]"
  syntax:
    content: public bool IsSubsetOf (System.Security.PermissionSet target);
    parameters:
    - id: target
      type: System.Security.PermissionSet
      description: "하위 집합 관계에 대 한 테스트 설정 사용 권한. 이 중 하나 여야 합니다는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 또는 <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref>합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하는 경우 현재 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 의 하위 집합인는 <code> target </code> 매개 변수, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.PermissionSet.IsSubsetOf*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsSynchronized
  id: IsSynchronized
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
  fullName: System.Security.PermissionSet.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "안전한 스레드로부터 컬렉션 보장 되는지 여부를 나타내는 값을 가져옵니다."
  remarks: "<xref:System.Security.PermissionSet>처리 하지 않는 자동으로 스레드로부터 안전 하므로이 속성은 항상 `false`합니다.</xref:System.Security.PermissionSet>       이 메서드는 <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> 를 지 원하는 데 필요"
  example:
  - "The following code example shows the value returned by the IsSynchronized property. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#6](~/add/codesnippet/csharp/p-system.security.permis_30_1.cs)]\n [!code-vb[System.Security.PermissionSet#6](~/add/codesnippet/visualbasic/p-system.security.permis_30_1.vb)]\n [!code-cpp[System.Security.PermissionSet#6](~/add/codesnippet/cpp/p-system.security.permis_30_1.cpp)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PermissionSet.IsUnrestricted()
  fullName: System.Security.PermissionSet.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "결정 여부는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 은 <xref uid=&quot;langword_csharp_Unrestricted&quot; name=&quot;Unrestricted&quot; href=&quot;&quot;> </xref>합니다."
  remarks: "`Unrestricted` <xref:System.Security.PermissionSet>효과적으로 구현 하는 모든 권한이 포함 된는 <xref:System.Security.Permissions.IUnrestrictedPermission>인터페이스.</xref:System.Security.Permissions.IUnrestrictedPermission> </xref:System.Security.PermissionSet>"
  example:
  - "The following code example shows the use of the IsUnrestricted method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#19](~/add/codesnippet/csharp/m-system.security.permis_1_1.cs)]\n [!code-vb[System.Security.PermissionSet#19](~/add/codesnippet/visualbasic/m-system.security.permis_1_1.vb)]\n [!code-cpp[System.Security.PermissionSet#19](~/add/codesnippet/cpp/m-system.security.permis_1_1.cpp)]"
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <xref href=&quot;System.Security.PermissionSet&quot;></xref> is <xref uid=&quot;langword_csharp_Unrestricted&quot; name=&quot;Unrestricted&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.PermitOnly
  id: PermitOnly
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: PermissionSet.PermitOnly()
  fullName: System.Security.PermissionSet.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "모든 <xref:System.Security.PermissionSet.Demand*>에 대 한 호출 코드를 통과 하는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 즉 하위 집합이 아니라 현재 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 실패.</xref:System.Security.PermissionSet.Demand*>"
  remarks: "PermitOnly는 비슷합니다 <xref:System.Security.PermissionSet.Deny%2A>그렇지 않은 경우는 성공 시 작동이 실패 하도록 스택 워크 있는 상황에서,.</xref:System.Security.PermissionSet.Deny%2A> 차이점은 <xref:System.Security.PermissionSet.Deny%2A>지정 스택을 사용 하면 사용 권한을 워크 실패 하지만 PermitOnly 스택 워크 실패 하지 않게 되는 유일한 권한을 지정 합니다.</xref:System.Security.PermissionSet.Deny%2A> 코드 지정 된 리소스에만 액세스할 수 사용 될 수 있도록 하려면이 메서드를 호출 합니다.       PermitOnly는 해당 권한을 요청할 수 없으므로 부여 되지 않은 사용 권한을 무시 됩니다. 그러나 코드에 대 한 호출에 낮은 나중 스택 하는 경우 호출 <xref:System.Security.PermissionSet.Demand%2A>권한에 대해는 <xref:System.Security.SecurityException>스택 워크 PermitOnly을 호출 하려고 하는 코드에 도달 하면 throw 됩니다.</xref:System.Security.SecurityException> </xref:System.Security.PermissionSet.Demand%2A> 해당 권한이 PermitOnly 호출 했지만 PermitOnly를 호출 하는 코드에는 권한이 부여 되지 때문입니다. 호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.PermissionSet.PermitOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.RemovePermission(System.Type)
  id: RemovePermission(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RemovePermission(Type)
  nameWithType: PermissionSet.RemovePermission(Type)
  fullName: System.Security.PermissionSet.RemovePermission(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "집합에서 특정 유형의 사용 권한을 제거합니다."
  remarks: "> [!IMPORTANT]> 제한 없음된 권한 집합에서 사용 권한을 제거할 수 없습니다. 사용 권한 집합은 사용 권한이 제거 하려고 하면 예외가 throw 되지 않습니다 후 무제한 상태로 남아 있습니다.       다음 C# 코드를 제거 하려고 시도 <xref:System.Security.Permissions.FileIOPermission>에서 `FullTrust` 사용 권한이 설정 되지만 사용 권한을 제거 되지 않습니다.</xref:System.Security.Permissions.FileIOPermission>      ```   PolicyLevel myPol = PolicyLevel.CreateAppDomainLevel();   PermissionSet myPermSet = myPol.GetNamedPermissionSet(&quot;FullTrust&quot;);   myPermSet.RemovePermission(typeof(FileIOPermission));   ```"
  example:
  - "The following code example shows the use of the RemovePermission method to remove a <xref:System.Security.Permissions.FileIOPermission> from a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#15](~/add/codesnippet/csharp/m-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#15](~/add/codesnippet/visualbasic/m-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#15](~/add/codesnippet/cpp/m-system.security.permis_22_1.cpp)]"
  syntax:
    content: public System.Security.IPermission RemovePermission (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "삭제할 사용 권한의 형식입니다."
    return:
      type: System.Security.IPermission
      description: "사용 권한 집합에서 제거 합니다."
  overload: System.Security.PermissionSet.RemovePermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메서드가 호출 되는 <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  id: RemovePermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RemovePermissionImpl(Type)
  nameWithType: PermissionSet.RemovePermissionImpl(Type)
  fullName: System.Security.PermissionSet.RemovePermissionImpl(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "집합에서 특정 유형의 사용 권한을 제거합니다."
  remarks: "RemovePermissionImpl 메서드는에 대 한 구현에서 <xref:System.Security.PermissionSet.RemovePermission%2A>메서드.</xref:System.Security.PermissionSet.RemovePermission%2A>      > [!IMPORTANT] > 제한 없음된 권한 집합에서 사용 권한을 제거할 수 없습니다. 사용 권한 집합은 사용 권한이 제거 하려고 하면 예외가 throw 되지 않습니다 후 무제한 상태로 남아 있습니다."
  syntax:
    content: protected virtual System.Security.IPermission RemovePermissionImpl (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "제거할 사용 권한의 형식입니다."
    return:
      type: System.Security.IPermission
      description: "사용 권한 집합에서 제거 합니다."
  overload: System.Security.PermissionSet.RemovePermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메서드가 호출 되는 <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.PermissionSet.RevertAssert
  id: RevertAssert
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RevertAssert()
  nameWithType: PermissionSet.RevertAssert()
  fullName: System.Security.PermissionSet.RevertAssert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "이전의 모든 <xref:System.Security.CodeAccessPermission.Assert*>제거 되 고 더 이상 적용 될 현재 프레임에 대 한.</xref:System.Security.CodeAccessPermission.Assert*>"
  remarks: "없는 경우 없는 <xref:System.Security.CodeAccessPermission.Assert%2A>현재 프레임에 대 한는 <xref:System.ExecutionEngineException>throw 됩니다.</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.Assert%2A>"
  syntax:
    content: public static void RevertAssert ();
    parameters: []
  overload: System.Security.PermissionSet.RevertAssert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "인 <xref:System.Security.CodeAccessPermission.Assert*>현재 프레임에 대 한.</xref:System.Security.CodeAccessPermission.Assert*>"
  platform:
  - net462
- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  id: SetPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SetPermission(IPermission)
  nameWithType: PermissionSet.SetPermission(IPermission)
  fullName: System.Security.PermissionSet.SetPermission(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "사용 권한을 설정 하는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>, 동일한 형식의 기존 사용 권한을 바꿉니다."
  remarks: "이 메서드는 기존 권한에서 동일한 유형의 개체를 제거는 <xref:System.Security.PermissionSet>바꿉니다는 `perm` 매개 변수.</xref:System.Security.PermissionSet> 사용 권한을 구현 하는 경우 <xref:System.Security.Permissions.IUnrestrictedPermission>에 설정 된 한 <xref:System.Security.PermissionSet>즉 <xref:System.Security.Permissions.PermissionState>, 결과 <xref:System.Security.PermissionSet>더 이상 `Unrestricted`.</xref:System.Security.PermissionSet> </xref:System.Security.Permissions.PermissionState> </xref:System.Security.PermissionSet> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  example:
  - "The following code example shows the use of the SetPermission method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#16](~/add/codesnippet/csharp/m-system.security.permis_14_1.cs)]\n [!code-vb[System.Security.PermissionSet#16](~/add/codesnippet/visualbasic/m-system.security.permis_14_1.vb)]\n [!code-cpp[System.Security.PermissionSet#16](~/add/codesnippet/cpp/m-system.security.permis_14_1.cpp)]"
  syntax:
    content: public System.Security.IPermission SetPermission (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "사용 권한 설정입니다."
    return:
      type: System.Security.IPermission
      description: "사용 권한 집합입니다."
  overload: System.Security.PermissionSet.SetPermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메서드가 호출 되는 <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  id: SetPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SetPermissionImpl(IPermission)
  nameWithType: PermissionSet.SetPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.SetPermissionImpl(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "사용 권한을 설정 하는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>, 동일한 형식의 기존 사용 권한을 바꿉니다."
  remarks: "SetPermissionImpl 메서드는에 대 한 구현에서 <xref:System.Security.PermissionSet.SetPermission%2A>메서드.</xref:System.Security.PermissionSet.SetPermission%2A>       이 메서드는 기존 권한에서 동일한 유형의 개체를 제거는 <xref:System.Security.PermissionSet>바꿉니다는 `perm` 매개 변수.</xref:System.Security.PermissionSet> 사용 권한을 구현 하는 경우 <xref:System.Security.Permissions.IUnrestrictedPermission>에 설정 된 한 <xref:System.Security.PermissionSet>즉 <xref:System.Security.Permissions.PermissionState>, 결과 <xref:System.Security.PermissionSet>더 이상 `Unrestricted`.</xref:System.Security.PermissionSet> </xref:System.Security.Permissions.PermissionState> </xref:System.Security.PermissionSet> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  syntax:
    content: protected virtual System.Security.IPermission SetPermissionImpl (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "사용 권한 설정입니다."
    return:
      type: System.Security.IPermission
      description: "사용 권한 집합입니다."
  overload: System.Security.PermissionSet.SetPermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메서드가 호출 되는 <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.PermissionSet.SyncRoot
  id: SyncRoot
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
  fullName: System.Security.PermissionSet.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "현재 컬렉션의 루트 개체를 가져옵니다."
  remarks: "이 메서드는 <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> 를 지 원하는 데 필요"
  example:
  - "The following code example shows the use of SyncRoot property to get the root object of the current collection. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#8](~/add/codesnippet/csharp/p-system.security.permis_29_1.cs)]\n [!code-vb[System.Security.PermissionSet#8](~/add/codesnippet/visualbasic/p-system.security.permis_29_1.vb)]\n [!code-cpp[System.Security.PermissionSet#8](~/add/codesnippet/cpp/p-system.security.permis_29_1.cpp)]"
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "현재 컬렉션의 루트 개체입니다."
  overload: System.Security.PermissionSet.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "전체 개체 그래프가 deserialize 될 때 실행 됩니다."
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "콜백을 시작한 개체입니다. 이 매개 변수의 기능은 현재 구현 되지 않았습니다."
  overload: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ToString
  id: ToString
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ToString()
  nameWithType: PermissionSet.ToString()
  fullName: System.Security.PermissionSet.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "문자열 표현을 반환 된 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
  remarks: "문자열 표현의 형식이 <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> 의 상태를 확인 하는 디버깅에 유용한"
  example:
  - "The following code example shows the use of the ToString method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#10](~/add/codesnippet/csharp/m-system.security.permis_16_1.cs)]\n [!code-vb[System.Security.PermissionSet#10](~/add/codesnippet/visualbasic/m-system.security.permis_16_1.vb)]\n [!code-cpp[System.Security.PermissionSet#10](~/add/codesnippet/cpp/m-system.security.permis_16_1.cpp)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "에 대 한 표현을 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
  overload: System.Security.PermissionSet.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ToXml
  id: ToXml
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ToXml()
  nameWithType: PermissionSet.ToXml()
  fullName: System.Security.PermissionSet.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "보안 개체 및 현재 상태에 대 한 XML 인코딩을 만듭니다."
  remarks: ''
  example:
  - "The following code example shows the use of the ToXml method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#17](~/add/codesnippet/csharp/m-system.security.permis_2_1.cs)]\n [!code-vb[System.Security.PermissionSet#17](~/add/codesnippet/visualbasic/m-system.security.permis_2_1.vb)]\n [!code-cpp[System.Security.PermissionSet#17](~/add/codesnippet/cpp/m-system.security.permis_2_1.cpp)]"
  syntax:
    content: public virtual System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "모든 상태 정보를 포함 하는 보안 개체의 XML 인코딩입니다."
  overload: System.Security.PermissionSet.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)
  id: Union(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Union(PermissionSet)
  nameWithType: PermissionSet.Union(PermissionSet)
  fullName: System.Security.PermissionSet.Union(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "만듭니다는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 현재 합한 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 와 지정 된 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
  remarks: "Union에 대 한 호출의 결과 <xref:System.Security.PermissionSet>는 현재 <xref:System.Security.PermissionSet>에 지정 된 <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> 나타내는 모든 작업 뿐만 아니라</xref:System.Security.PermissionSet> 나타내는 모든 작업을 나타내는</xref:System.Security.PermissionSet> 는 집합 중 하나가 `Unrestricted`의 union은 `Unrestricted` 도 합니다."
  example:
  - "The following code example shows the use of the Union method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#13](~/add/codesnippet/csharp/m-system.security.permis_26_1.cs)]\n [!code-vb[System.Security.PermissionSet#13](~/add/codesnippet/visualbasic/m-system.security.permis_26_1.vb)]\n [!code-cpp[System.Security.PermissionSet#13](~/add/codesnippet/cpp/m-system.security.permis_26_1.cpp)]"
  syntax:
    content: public System.Security.PermissionSet Union (System.Security.PermissionSet other);
    parameters:
    - id: other
      type: System.Security.PermissionSet
      description: "현재와 합 할 사용 권한 집합 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
    return:
      type: System.Security.PermissionSet
      description: "현재의 합집합을 나타내는 새 사용 권한 집합 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 와 지정 된 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>합니다."
  overload: System.Security.PermissionSet.Union*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet(PermissionState)
  nameWithType: PermissionSet.PermissionSet(PermissionState)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet(PermissionSet)
  nameWithType: PermissionSet.PermissionSet(PermissionSet)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionSet)
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermission(IPermission)
  nameWithType: PermissionSet.AddPermission(IPermission)
  fullName: System.Security.PermissionSet.AddPermission(IPermission)
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermissionImpl(IPermission)
  nameWithType: PermissionSet.AddPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.AddPermissionImpl(IPermission)
- uid: System.Security.PermissionSet.Assert
  parent: System.Security.PermissionSet
  isExternal: false
  name: Assert()
  nameWithType: PermissionSet.Assert()
  fullName: System.Security.PermissionSet.Assert()
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  parent: System.Security.PermissionSet
  isExternal: false
  name: ContainsNonCodeAccessPermissions()
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()
  fullName: System.Security.PermissionSet.ContainsNonCodeAccessPermissions()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  parent: System.Security.PermissionSet
  isExternal: false
  name: ConvertPermissionSet(String,Byte[],String)
  nameWithType: PermissionSet.ConvertPermissionSet(String,Byte[],String)
  fullName: System.Security.PermissionSet.ConvertPermissionSet(String,Byte[],String)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.PermissionSet.Copy
  parent: System.Security.PermissionSet
  isExternal: false
  name: Copy()
  nameWithType: PermissionSet.Copy()
  fullName: System.Security.PermissionSet.Copy()
- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  parent: System.Security.PermissionSet
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: PermissionSet.CopyTo(Array,Int32)
  fullName: System.Security.PermissionSet.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.PermissionSet.Count
  parent: System.Security.PermissionSet
  isExternal: false
  name: Count
  nameWithType: PermissionSet.Count
  fullName: System.Security.PermissionSet.Count
- uid: System.Security.PermissionSet.Demand
  parent: System.Security.PermissionSet
  isExternal: false
  name: Demand()
  nameWithType: PermissionSet.Demand()
  fullName: System.Security.PermissionSet.Demand()
- uid: System.Security.PermissionSet.Deny
  parent: System.Security.PermissionSet
  isExternal: false
  name: Deny()
  nameWithType: PermissionSet.Deny()
  fullName: System.Security.PermissionSet.Deny()
- uid: System.Security.PermissionSet.Equals(System.Object)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Equals(Object)
  nameWithType: PermissionSet.Equals(Object)
  fullName: System.Security.PermissionSet.Equals(Object)
- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  parent: System.Security.PermissionSet
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PermissionSet.FromXml(SecurityElement)
  fullName: System.Security.PermissionSet.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.PermissionSet.GetEnumerator
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumerator()
  nameWithType: PermissionSet.GetEnumerator()
  fullName: System.Security.PermissionSet.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Security.PermissionSet.GetEnumeratorImpl
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumeratorImpl()
  nameWithType: PermissionSet.GetEnumeratorImpl()
  fullName: System.Security.PermissionSet.GetEnumeratorImpl()
- uid: System.Security.PermissionSet.GetHashCode
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetHashCode()
  nameWithType: PermissionSet.GetHashCode()
  fullName: System.Security.PermissionSet.GetHashCode()
- uid: System.Security.PermissionSet.GetPermission(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermission(Type)
  nameWithType: PermissionSet.GetPermission(Type)
  fullName: System.Security.PermissionSet.GetPermission(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermissionImpl(Type)
  nameWithType: PermissionSet.GetPermissionImpl(Type)
  fullName: System.Security.PermissionSet.GetPermissionImpl(Type)
- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Intersect(PermissionSet)
  nameWithType: PermissionSet.Intersect(PermissionSet)
  fullName: System.Security.PermissionSet.Intersect(PermissionSet)
- uid: System.Security.PermissionSet.IsEmpty
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsEmpty()
  nameWithType: PermissionSet.IsEmpty()
  fullName: System.Security.PermissionSet.IsEmpty()
- uid: System.Security.PermissionSet.IsReadOnly
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
  fullName: System.Security.PermissionSet.IsReadOnly
- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSubsetOf(PermissionSet)
  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)
  fullName: System.Security.PermissionSet.IsSubsetOf(PermissionSet)
- uid: System.Security.PermissionSet.IsSynchronized
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
  fullName: System.Security.PermissionSet.IsSynchronized
- uid: System.Security.PermissionSet.IsUnrestricted
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PermissionSet.IsUnrestricted()
  fullName: System.Security.PermissionSet.IsUnrestricted()
- uid: System.Security.PermissionSet.PermitOnly
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermitOnly()
  nameWithType: PermissionSet.PermitOnly()
  fullName: System.Security.PermissionSet.PermitOnly()
- uid: System.Security.PermissionSet.RemovePermission(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermission(Type)
  nameWithType: PermissionSet.RemovePermission(Type)
  fullName: System.Security.PermissionSet.RemovePermission(Type)
- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermissionImpl(Type)
  nameWithType: PermissionSet.RemovePermissionImpl(Type)
  fullName: System.Security.PermissionSet.RemovePermissionImpl(Type)
- uid: System.Security.PermissionSet.RevertAssert
  parent: System.Security.PermissionSet
  isExternal: false
  name: RevertAssert()
  nameWithType: PermissionSet.RevertAssert()
  fullName: System.Security.PermissionSet.RevertAssert()
- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermission(IPermission)
  nameWithType: PermissionSet.SetPermission(IPermission)
  fullName: System.Security.PermissionSet.SetPermission(IPermission)
- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermissionImpl(IPermission)
  nameWithType: PermissionSet.SetPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.SetPermissionImpl(IPermission)
- uid: System.Security.PermissionSet.SyncRoot
  parent: System.Security.PermissionSet
  isExternal: false
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
  fullName: System.Security.PermissionSet.SyncRoot
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: System.Security.PermissionSet
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
- uid: System.Security.PermissionSet.ToString
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToString()
  nameWithType: PermissionSet.ToString()
  fullName: System.Security.PermissionSet.ToString()
- uid: System.Security.PermissionSet.ToXml
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToXml()
  nameWithType: PermissionSet.ToXml()
  fullName: System.Security.PermissionSet.ToXml()
- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Union(PermissionSet)
  nameWithType: PermissionSet.Union(PermissionSet)
  fullName: System.Security.PermissionSet.Union(PermissionSet)
- uid: System.Security.PermissionSet.#ctor*
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet.PermissionSet
- uid: System.Security.PermissionSet.AddPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermission
  nameWithType: PermissionSet.AddPermission
- uid: System.Security.PermissionSet.AddPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermissionImpl
  nameWithType: PermissionSet.AddPermissionImpl
- uid: System.Security.PermissionSet.Assert*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Assert
  nameWithType: PermissionSet.Assert
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ContainsNonCodeAccessPermissions
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions
- uid: System.Security.PermissionSet.ConvertPermissionSet*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ConvertPermissionSet
  nameWithType: PermissionSet.ConvertPermissionSet
- uid: System.Security.PermissionSet.Copy*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Copy
  nameWithType: PermissionSet.Copy
- uid: System.Security.PermissionSet.CopyTo*
  parent: System.Security.PermissionSet
  isExternal: false
  name: CopyTo
  nameWithType: PermissionSet.CopyTo
- uid: System.Security.PermissionSet.Count*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Count
  nameWithType: PermissionSet.Count
- uid: System.Security.PermissionSet.Demand*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Demand
  nameWithType: PermissionSet.Demand
- uid: System.Security.PermissionSet.Deny*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Deny
  nameWithType: PermissionSet.Deny
- uid: System.Security.PermissionSet.Equals*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Equals
  nameWithType: PermissionSet.Equals
- uid: System.Security.PermissionSet.FromXml*
  parent: System.Security.PermissionSet
  isExternal: false
  name: FromXml
  nameWithType: PermissionSet.FromXml
- uid: System.Security.PermissionSet.GetEnumerator*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumerator
  nameWithType: PermissionSet.GetEnumerator
- uid: System.Security.PermissionSet.GetEnumeratorImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumeratorImpl
  nameWithType: PermissionSet.GetEnumeratorImpl
- uid: System.Security.PermissionSet.GetHashCode*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetHashCode
  nameWithType: PermissionSet.GetHashCode
- uid: System.Security.PermissionSet.GetPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermission
  nameWithType: PermissionSet.GetPermission
- uid: System.Security.PermissionSet.GetPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermissionImpl
  nameWithType: PermissionSet.GetPermissionImpl
- uid: System.Security.PermissionSet.Intersect*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Intersect
  nameWithType: PermissionSet.Intersect
- uid: System.Security.PermissionSet.IsEmpty*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsEmpty
  nameWithType: PermissionSet.IsEmpty
- uid: System.Security.PermissionSet.IsReadOnly*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
- uid: System.Security.PermissionSet.IsSubsetOf*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSubsetOf
  nameWithType: PermissionSet.IsSubsetOf
- uid: System.Security.PermissionSet.IsSynchronized*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
- uid: System.Security.PermissionSet.IsUnrestricted*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsUnrestricted
  nameWithType: PermissionSet.IsUnrestricted
- uid: System.Security.PermissionSet.PermitOnly*
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermitOnly
  nameWithType: PermissionSet.PermitOnly
- uid: System.Security.PermissionSet.RemovePermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermission
  nameWithType: PermissionSet.RemovePermission
- uid: System.Security.PermissionSet.RemovePermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermissionImpl
  nameWithType: PermissionSet.RemovePermissionImpl
- uid: System.Security.PermissionSet.RevertAssert*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RevertAssert
  nameWithType: PermissionSet.RevertAssert
- uid: System.Security.PermissionSet.SetPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermission
  nameWithType: PermissionSet.SetPermission
- uid: System.Security.PermissionSet.SetPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermissionImpl
  nameWithType: PermissionSet.SetPermissionImpl
- uid: System.Security.PermissionSet.SyncRoot*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: System.Security.PermissionSet
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: System.Security.PermissionSet.ToString*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToString
  nameWithType: PermissionSet.ToString
- uid: System.Security.PermissionSet.ToXml*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToXml
  nameWithType: PermissionSet.ToXml
- uid: System.Security.PermissionSet.Union*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Union
  nameWithType: PermissionSet.Union
