### YamlMime:ManagedReference
items:
- uid: System.IO.DirectoryInfo
  id: DirectoryInfo
  children:
  - System.IO.DirectoryInfo.#ctor(System.String)
  - System.IO.DirectoryInfo.Create
  - System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)
  - System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  - System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  - System.IO.DirectoryInfo.Delete
  - System.IO.DirectoryInfo.Delete(System.Boolean)
  - System.IO.DirectoryInfo.EnumerateDirectories
  - System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  - System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.EnumerateFiles
  - System.IO.DirectoryInfo.EnumerateFiles(System.String)
  - System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.Exists
  - System.IO.DirectoryInfo.GetAccessControl
  - System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)
  - System.IO.DirectoryInfo.GetDirectories
  - System.IO.DirectoryInfo.GetDirectories(System.String)
  - System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.GetFiles
  - System.IO.DirectoryInfo.GetFiles(System.String)
  - System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.GetFileSystemInfos
  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.MoveTo(System.String)
  - System.IO.DirectoryInfo.Name
  - System.IO.DirectoryInfo.Parent
  - System.IO.DirectoryInfo.Root
  - System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  - System.IO.DirectoryInfo.ToString
  langs:
  - csharp
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
  type: Class
  summary: "만들기, 이동 및 디렉터리와 하위 디렉터리 열거를 위한 인스턴스 메서드를 노출 합니다. 이 클래스는 상속 될 수 없습니다.       이 형식에 대 한.NET Framework 소스 코드를 찾아보려면 참조는 [참조 소스](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e)합니다."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use the DirectoryInfo class for typical operations such as copying, moving, renaming, creating, and deleting directories.  \n  \n If you are going to reuse an object several times, consider using the instance method of DirectoryInfo instead of the corresponding static methods of the <xref:System.IO.Directory> class, because a security check will not always be necessary.  \n  \n> [!NOTE]\n>  In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  \n  \n In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \n  \n-   \"c:\\\\\\MyDir\\\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.  \n  \n-   \"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.  \n  \n-   \"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.  \n  \n-   \"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.  \n  \n By default, full read/write access to new directories is granted to all users.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates some of the main members of the `DirectoryInfo` class.  \n  \n [!code-cpp[DirInfo Class Example#1](~/add/codesnippet/cpp/t-system.io.directoryinfo_1.cpp)]\n [!code-cs[DirInfo Class Example#1](~/add/codesnippet/csharp/t-system.io.directoryinfo_1.cs)]\n [!code-vb[DirInfo Class Example#1](~/add/codesnippet/visualbasic/t-system.io.directoryinfo_1.vb)]  \n  \n The following example demonstrates how to copy a directory and its contents.  \n  \n [!code-cs[IO.DirectoryInfo-CopyDir#1](~/add/codesnippet/csharp/t-system.io.directoryinfo_2.cs)]\n [!code-vb[IO.DirectoryInfo-CopyDir#1](~/add/codesnippet/visualbasic/t-system.io.directoryinfo_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class DirectoryInfo : System.IO.FileSystemInfo
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.IO.FileSystemInfo
  implements: []
  inheritedMembers:
  - System.IO.FileSystemInfo.Attributes
  - System.IO.FileSystemInfo.CreationTime
  - System.IO.FileSystemInfo.CreationTimeUtc
  - System.IO.FileSystemInfo.Extension
  - System.IO.FileSystemInfo.FullName
  - System.IO.FileSystemInfo.FullPath
  - System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.IO.FileSystemInfo.LastAccessTime
  - System.IO.FileSystemInfo.LastAccessTimeUtc
  - System.IO.FileSystemInfo.LastWriteTime
  - System.IO.FileSystemInfo.LastWriteTimeUtc
  - System.IO.FileSystemInfo.OriginalPath
  - System.IO.FileSystemInfo.Refresh
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.IO.DirectoryInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: DirectoryInfo(String)
  nameWithType: DirectoryInfo.DirectoryInfo(String)
  fullName: System.IO.DirectoryInfo.DirectoryInfo(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 지정된 된 경로에 클래스입니다."
  remarks: "이 생성자는 디렉터리가 있는지를 확인 하지 않습니다. 이 생성자에는 후속 작업에서 디스크에 액세스 하는 데 사용 되는 문자열에 대 한 자리 표시자입니다.       `path` 매개 변수는 파일 이름, 범용 명명 규칙 (UNC) 공유에 파일을 포함 될 수 있습니다.      > [!CAUTION] > 문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색은 해석할 수 없어 문자와를 throw 하면 예외가 발생 합니다.       공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example uses this constructor to create the specified directory and subdirectory, and demonstrates that a directory that contains subdirectories cannot be deleted.  \n  \n [!code-cs[DirInfo Ctor#1](~/add/codesnippet/csharp/m-system.io.directoryinf_18_1.cs)]\n [!code-cpp[DirInfo Ctor#1](~/add/codesnippet/cpp/m-system.io.directoryinf_18_1.cpp)]\n [!code-vb[DirInfo Ctor#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_18_1.vb)]"
  syntax:
    content: public DirectoryInfo (string path);
    parameters:
    - id: path
      type: System.String
      description: "만들 경로 지정 하는 문자열은 <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IO.DirectoryInfo.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>와 같은 잘못 된 문자 포함 &quot;, &lt;, &gt;, 또는 | 합니다."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "지정된 된 경로, 파일 이름 또는 둘 다에 시스템 정의 최대 길이 초과 합니다. 예를 들어 Windows 기반 플랫폼에서 경로 248 자 미만, 이어야 하 고 파일 이름은 260 자 미만 이어야 합니다. 지정된 된 경로, 파일 이름 또는 둘 다가 너무 깁니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Create
  id: Create
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Create()
  nameWithType: DirectoryInfo.Create()
  fullName: System.IO.DirectoryInfo.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "디렉터리를 만듭니다."
  remarks: "디렉터리가 이미 있는 경우이 메서드는 아무 작업도 수행 하지 않습니다.       공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example checks whether a specified directory exists, creates the directory if it does not exist, and deletes the directory.  \n  \n [!code-cpp[DirInfo Create#1](~/add/codesnippet/cpp/m-system.io.directoryinf_11_1.cpp)]\n [!code-cs[DirInfo Create#1](~/add/codesnippet/csharp/m-system.io.directoryinf_11_1.cs)]\n [!code-vb[DirInfo Create#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_11_1.vb)]"
  syntax:
    content: public void Create ();
    parameters: []
  overload: System.IO.DirectoryInfo.Create*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "디렉터리를 만들 수 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)
  id: Create(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Create(DirectorySecurity)
  nameWithType: DirectoryInfo.Create(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.Create(DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "사용 하 여 디렉터리 만듭니다는 <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> 개체입니다."
  remarks: "이 메서드 오버 로드를 사용 하 여 디렉터리를 만들려면 액세스 제어를 사용 하므로 가능성이 보안 적용 되기 전에 디렉터리에 액세스할 수 없습니다.       디렉터리가 이미 있는 경우이 메서드는 아무 작업도 수행 하지 않습니다.       공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void Create (System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "디렉터리에 적용할 액세스 제어입니다."
  overload: System.IO.DirectoryInfo.Create*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "로 지정한 디렉터리가 <code> path </code> 는 읽기 전용 이거나 빈 디렉터리가 아닙니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "호출자에 게 필요한 권한이 없습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>길이가&0; 인 문자열인, 공백만 포함 또는에 정의 된 대로 하나 이상의 잘못 된 문자가 들어 <xref:System.IO.Path.InvalidPathChars>합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "지정된 된 경로, 파일 이름 또는 둘 다에 시스템 정의 최대 길이 초과 합니다. 예를 들어 Windows 기반 플랫폼에서 경로 248 자 미만, 이어야 하 고 파일 이름은 260 자 미만 이어야 합니다."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "지정된 된 경로 예: 매핑되지 않은 드라이브에 올바르지 않습니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "콜론 (:)를 사용 하 여 디렉터리를 만들기를 시도 했습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  id: CreateSubdirectory(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: CreateSubdirectory(String)
  nameWithType: DirectoryInfo.CreateSubdirectory(String)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "지정된 된 경로에 하위 디렉터리 또는 하위 디렉터리를 만듭니다. 지정된 된 경로의이 인스턴스에 대 한 상대적 수는 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 클래스입니다."
  remarks: "에 지정 된 모든 디렉터리가 `path` 않은 경우 만들어집니다 부분이 `path` 올바르지 않습니다. `path` 매개 변수는 파일 경로가 아닌 디렉터리 경로 지정 합니다. 하위 디렉터리에 이미 있으면이 메서드는 아무 작업도 수행 하지 않습니다.      > [!NOTE] > 경로 이름은 248 자로 제한 됩니다.       공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example demonstrates creating a subdirectory. In this example, the created directories are removed once created. Therefore, to test this sample, comment out the delete lines in the code.  \n  \n [!code-cpp[directoryinfocreatesub#1](~/add/codesnippet/cpp/m-system.io.directoryinf_9_1.cpp)]\n [!code-cs[directoryinfocreatesub#1](~/add/codesnippet/csharp/m-system.io.directoryinf_9_1.cs)]\n [!code-vb[directoryinfocreatesub#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_9_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo CreateSubdirectory (string path);
    parameters:
    - id: path
      type: System.String
      description: "지정 된 경로입니다. 이 경로 다른 디스크 볼륨이 나 UNC 범용 명명 규칙 () 이름이 될 수 없습니다."
    return:
      type: System.IO.DirectoryInfo
      description: "에 지정 된 마지막 경로 <code> path </code>합니다."
  overload: System.IO.DirectoryInfo.CreateSubdirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>가 올바른 파일 경로 지정 하지 않거나 잘못 된 포함 <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref> 문자입니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "지정된 된 경로 예: 매핑되지 않은 드라이브에 올바르지 않습니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "하위 디렉터리를 만들 수 없습니다.       -또는-파일 또는 디렉터리에서 지정한 이름을 이미 <code> path </code>합니다."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "지정된 된 경로, 파일 이름 또는 둘 다에 시스템 정의 최대 길이 초과 합니다. 예를 들어 Windows 기반 플랫폼에서 경로 248 자 미만, 이어야 하 고 파일 이름은 260 자 미만 이어야 합니다. 지정된 된 경로, 파일 이름 또는 둘 다가 너무 깁니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 디렉터리를 만드는 코드 액세스 권한이 없는 합니다.       -또는-호출자가 설명 하는 디렉터리를 읽을 수 있는 코드 액세스 권한이 없는 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체입니다.  이 발생할 수 있습니다 때는 <code> path </code> 매개 변수는 기존 디렉터리에 설명 합니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>에 드라이브 레이블에 속하지 않는 콜론 문자 (:)를 포함 (&quot;c:\\&quot;)."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  id: CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: CreateSubdirectory(String,DirectorySecurity)
  nameWithType: DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "지정된 된 보안으로 지정된 된 경로에 하위 디렉터리 또는 하위 디렉터리를 만듭니다. 지정된 된 경로의이 인스턴스에 대 한 상대적 수는 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 클래스입니다."
  remarks: "에 지정 된 모든 디렉터리가 `path` 않은 경우 만들어집니다 부분이 `path` 올바르지 않습니다. `path` 매개 변수는 파일 경로가 아닌 디렉터리 경로 지정 합니다. 하위 디렉터리에 이미 있으면이 메서드는 아무 작업도 수행 하지 않습니다.      > [!NOTE] > 경로 이름은 248 자로 제한 됩니다.       공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.IO.DirectoryInfo CreateSubdirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: path
      type: System.String
      description: "지정 된 경로입니다. 이 경로 다른 디스크 볼륨이 나 UNC 범용 명명 규칙 () 이름이 될 수 없습니다."
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "적용할 보안입니다."
    return:
      type: System.IO.DirectoryInfo
      description: "에 지정 된 마지막 경로 <code> path </code>합니다."
  overload: System.IO.DirectoryInfo.CreateSubdirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>가 올바른 파일 경로 지정 하지 않거나 잘못 된 포함 <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref> 문자입니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "지정된 된 경로 예: 매핑되지 않은 드라이브에 올바르지 않습니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "하위 디렉터리를 만들 수 없습니다.       -또는-파일 또는 디렉터리에서 지정한 이름을 이미 <code> path </code>합니다."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "지정된 된 경로, 파일 이름 또는 둘 다에 시스템 정의 최대 길이 초과 합니다. 예를 들어 Windows 기반 플랫폼에서 경로 248 자 미만, 이어야 하 고 파일 이름은 260 자 미만 이어야 합니다. 지정된 된 경로, 파일 이름 또는 둘 다가 너무 깁니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 디렉터리를 만드는 코드 액세스 권한이 없는 합니다.       -또는-호출자가 설명 하는 디렉터리를 읽을 수 있는 코드 액세스 권한이 없는 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체입니다.  이 발생할 수 있습니다 때는 <code> path </code> 매개 변수는 기존 디렉터리에 설명 합니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>에 드라이브 레이블에 속하지 않는 콜론 문자 (:)를 포함 (&quot;c:\\&quot;)."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Delete
  id: Delete
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Delete()
  nameWithType: DirectoryInfo.Delete()
  fullName: System.IO.DirectoryInfo.Delete()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "이 삭제 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 비어 있는 경우."
  remarks: "공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example throws an exception if you attempt to delete a directory that is not empty.  \n  \n [!code-cpp[DirInfo Delete1#1](~/add/codesnippet/cpp/m-system.io.directoryinf_4_1.cpp)]\n [!code-cs[DirInfo Delete1#1](~/add/codesnippet/csharp/m-system.io.directoryinf_4_1.cs)]\n [!code-vb[DirInfo Delete1#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_4_1.vb)]"
  syntax:
    content: public override void Delete ();
    parameters: []
  overload: System.IO.DirectoryInfo.Delete*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "디렉터리에서 읽기 전용 파일을 포함합니다."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "이 설명 하는 디렉터리 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체가 존재 하지 않거나 찾을 수 없습니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "디렉터리가 비어 있지 않습니다.       -또는-디렉터리는 응용 프로그램의 현재 작업 디렉터리입니다.       -또는-디렉터리에 대해 열린 핸들이 있고 운영 체제가 Windows XP 또는 이전 버전입니다. 이 열린 핸들은 디렉터리를 열거 하면 발생할 수 있습니다. 자세한 내용은 참조 [하는 방법: 디렉터리 및 파일 열거](~/add/includes/ajax-current-ext-md.md)합니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Delete(System.Boolean)
  id: Delete(System.Boolean)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Delete(Boolean)
  nameWithType: DirectoryInfo.Delete(Boolean)
  fullName: System.IO.DirectoryInfo.Delete(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "이 인스턴스를 삭제 한 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>, 하위 디렉터리와 파일을 삭제할지 여부를 지정 합니다."
  remarks: "경우는 `DirectoryInfo` 파일이 나 하위 디렉터리에 있는 경우이 메서드는 삭제는 `DirectoryInfo` 경우에 `recursive` 은 `false`합니다. 삭제 하는 한 `DirectoryInfo` 비어 때 `recursive` 은 `false` <xref:System.IO.IOException>.</xref:System.IO.IOException> throw       공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example demonstrates deleting a directory. Because the directory is removed, first comment out the `Delete` line to test that the directory exists. Then uncomment the same line of code to test that the directory was removed successfully.  \n  \n [!code-vb[directoryinfodelete#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_16_1.vb)]\n [!code-cs[directoryinfodelete#1](~/add/codesnippet/csharp/m-system.io.directoryinf_16_1.cs)]\n [!code-cpp[directoryinfodelete#1](~/add/codesnippet/cpp/m-system.io.directoryinf_16_1.cpp)]"
  syntax:
    content: public void Delete (bool recursive);
    parameters:
    - id: recursive
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 디렉터리, 하위 디렉터리 및 모든 파일을 삭제 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IO.DirectoryInfo.Delete*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "디렉터리에서 읽기 전용 파일을 포함합니다."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "이 설명 하는 디렉터리 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체가 존재 하지 않거나 찾을 수 없습니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "디렉터리는 읽기 전용입니다.       -또는-디렉터리에 있는 하나 이상의 파일 또는 하위 디렉터리 및 <code> recursive </code> 은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다.       -또는-디렉터리는 응용 프로그램의 현재 작업 디렉터리입니다.       -또는-디렉터리 또는 해당 파일 중 하나에 대해 열린 핸들이 있고 운영 체제가 Windows XP 또는 이전 버전입니다. 이 열린 핸들은 디렉터리 및 파일을 열거 하면 발생할 수 있습니다. 자세한 내용은 참조 [하는 방법: 디렉터리 및 파일 열거](~/add/includes/ajax-current-ext-md.md)합니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateDirectories
  id: EnumerateDirectories
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateDirectories()
  nameWithType: DirectoryInfo.EnumerateDirectories()
  fullName: System.IO.DirectoryInfo.EnumerateDirectories()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "현재 디렉터리에 있는 디렉터리 정보의 열거 가능 컬렉션을 반환 합니다."
  remarks: "EnumerateDirectories 및 <xref:System.IO.DirectoryInfo.GetDirectories%2A>방법은 다음과 같이 달라:-EnumerateDirectories를 사용 하는 경우의 컬렉션을 열거 하기 <xref:System.IO.DirectoryInfo>전체 컬렉션을 반환 하기 전에 개체.</xref:System.IO.DirectoryInfo> </xref:System.IO.DirectoryInfo.GetDirectories%2A>      -사용 하 여 <xref:System.IO.DirectoryInfo.GetDirectories%2A>를의 전체 배열에 대해 기다려야 <xref:System.IO.DirectoryInfo>개체 반환 되기 전에 배열에 액세스할 수 있습니다.</xref:System.IO.DirectoryInfo> </xref:System.IO.DirectoryInfo.GetDirectories%2A>       따라서 많은 파일 및 디렉터리와 작업할 때 EnumerateDirectories 더 효율적일 수 있습니다.       이 메서드는 다음 값을 미리 채웁니다 <xref:System.IO.DirectoryInfo>속성:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>반환된 된 컬렉션은 캐시 되지 않으므로를 호출할 때마다는 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>메서드는 컬렉션에는 새 열거형을 시작 합니다.</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> </xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.DirectoryInfo>"
  example:
  - "The following example enumerates the subdirectories under the C:\\Program Files directory and uses a LINQ query to return the names of all directories that were created before 2009 by checking the value of the <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> property.  \n  \n If you only need the names of the subdirectories, use the static <xref:System.IO.Directory> class for better performance. For an example, see the <xref:System.IO.Directory.EnumerateDirectories%28System.String%29> method.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumDirs#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_8_1.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumDirs#1](~/add/codesnippet/csharp/m-system.io.directoryinf_8_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: "현재 디렉터리에 있는 디렉터리의 열거 가능한 컬렉션입니다."
  overload: System.IO.DirectoryInfo.EnumerateDirectories*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "캡슐화 된 경로가 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  id: EnumerateDirectories(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateDirectories(String)
  nameWithType: DirectoryInfo.EnumerateDirectories(String)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "지정된 된 검색 패턴과 일치 하는 디렉터리 정보의 열거 가능 컬렉션을 반환 합니다."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "디렉터리 이름과 일치 하는지 검색 문자열입니다.  이 매개 변수는 유효한 리터럴 경로 와일드 카드를 포함할 수 있습니다 (* 및?) 문자 (설명 참조)로 하지만 정규식을 지원 하지 않습니다. 기본 패턴은 &quot;\\*&quot;를 반환 하는 모든 파일."
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: "일치 하는 디렉터리의 열거 가능한 컬렉션 <code> searchPattern </code>합니다."
  overload: System.IO.DirectoryInfo.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "캡슐화 된 경로가 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  id: EnumerateDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "지정 된 검색 패턴 및 검색 하위 디렉터리 옵션과 일치 하는 디렉터리 정보의 열거 가능 컬렉션을 반환 합니다."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration."
  example:
  - "The following example, starting from a specified directory, uses this method and the <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> method to enumerate the files and directories within the start directory and display details of any files over 10 MB in size.  \n  \n [!code-cs[System.IO.DirectoryInfo.EnumerateDirectories#1](~/add/codesnippet/csharp/688c5354-9ee8-487c-ac88-_1.cs)]\n [!code-vb[System.IO.DirectoryInfo.EnumerateDirectories#1](~/add/codesnippet/visualbasic/688c5354-9ee8-487c-ac88-_1.vb)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "디렉터리 이름과 일치 하는지 검색 문자열입니다.  이 매개 변수는 유효한 리터럴 경로 와일드 카드를 포함할 수 있습니다 (* 및?) 문자 (설명 참조)로 하지만 정규식을 지원 하지 않습니다. 기본 패턴은 &quot;\\*&quot;를 반환 하는 모든 파일."
    - id: searchOption
      type: System.IO.SearchOption
      description: "검색 작업에 현재 디렉터리만 아니면 모든 하위 디렉터리를 포함할지 여부를 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref href=&quot;System.IO.SearchOption&quot;> </xref>합니다."
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: "일치 하는 디렉터리의 열거 가능한 컬렉션 <code> searchPattern </code> 및 <code> searchOption </code>합니다."
  overload: System.IO.DirectoryInfo.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>유효 하지 않거나 <xref href=&quot;System.IO.SearchOption&quot;> </xref> 값입니다."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "캡슐화 된 경로가 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFiles
  id: EnumerateFiles
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFiles()
  nameWithType: DirectoryInfo.EnumerateFiles()
  fullName: System.IO.DirectoryInfo.EnumerateFiles()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "현재 디렉터리에 있는 파일 정보의 열거 가능 컬렉션을 반환 합니다."
  remarks: "EnumerateFiles 및 <xref:System.IO.DirectoryInfo.GetFiles%2A>방법은 다음과 같이 달라:-EnumerateFiles를 사용 하는 경우의 컬렉션을 열거 하기 <xref:System.IO.FileInfo>전체 컬렉션을 반환 하기 전에 개체.</xref:System.IO.FileInfo> </xref:System.IO.DirectoryInfo.GetFiles%2A>      -사용 하 여 <xref:System.IO.DirectoryInfo.GetFiles%2A>를의 전체 배열에 대해 기다려야 <xref:System.IO.FileInfo>개체 반환 되기 전에 배열에 액세스할 수 있습니다.</xref:System.IO.FileInfo> </xref:System.IO.DirectoryInfo.GetFiles%2A>       따라서 많은 파일 및 디렉터리와 작업할 때 EnumerateFiles 더 효율적일 수 있습니다.       이 메서드는 다음 값을 미리 채웁니다 <xref:System.IO.FileInfo>속성:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>- <xref:System.IO.FileInfo.Length%2A>반환된 된 컬렉션은 캐시 되지 않으므로를 호출할 때마다는 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>메서드는 컬렉션에는 새 열거형을 시작 합니다.</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> </xref:System.IO.FileInfo.Length%2A> </xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.FileInfo>"
  example:
  - "The following example enumerates the files under a specified directory and uses a LINQ query to return the names of all files that were created before 2009 by checking the value of the <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> property.  \n  \n If you only need the names of the files, use the static <xref:System.IO.Directory> class for better performance. For an example, see the <xref:System.IO.Directory.EnumerateFiles%28System.String%29?displayProperty=fullName> method.  \n  \n [!code-cs[System.IO.DirectoryInfo.EnumFiles#1](~/add/codesnippet/csharp/m-system.io.directoryinf_2_1.cs)]\n [!code-vb[System.IO.DirectoryInfo.EnumFiles#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_2_1.vb)]  \n  \n The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_2_2.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_2_2.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: "현재 디렉터리에 있는 파일의 열거 가능한 컬렉션입니다."
  overload: System.IO.DirectoryInfo.EnumerateFiles*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "캡슐화 된 경로가 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)
  id: EnumerateFiles(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFiles(String)
  nameWithType: DirectoryInfo.EnumerateFiles(String)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "검색 패턴과 일치 하는 파일 정보의 열거 가능 컬렉션을 반환 합니다."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  example:
  - "The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_1_1.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_1_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "파일의 이름과 일치 하는지 검색 문자열입니다.  이 매개 변수는 유효한 리터럴 경로 와일드 카드를 포함할 수 있습니다 (* 및?) 문자 (설명 참조)로 하지만 정규식을 지원 하지 않습니다. 기본 패턴은 &quot;\\*&quot;를 반환 하는 모든 파일."
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: "일치 하는 파일의 열거 가능한 컬렉션 <code> searchPattern </code>합니다."
  overload: System.IO.DirectoryInfo.EnumerateFiles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "캡슐화 된 경로가 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> (예를 들어이 매핑되지 않은 드라이브에 있음), 개체가 유효 하지 않습니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  id: EnumerateFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFiles(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "지정 된 검색 패턴 및 검색 하위 디렉터리 옵션과 일치 하는 파일 정보의 열거 가능 컬렉션을 반환 합니다."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  example:
  - "The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_7_1.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_7_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "파일의 이름과 일치 하는지 검색 문자열입니다.  이 매개 변수는 유효한 리터럴 경로 와일드 카드를 포함할 수 있습니다 (* 및?) 문자 (설명 참조)로 하지만 정규식을 지원 하지 않습니다. 기본 패턴은 &quot;\\*&quot;를 반환 하는 모든 파일."
    - id: searchOption
      type: System.IO.SearchOption
      description: "검색 작업에 현재 디렉터리만 아니면 모든 하위 디렉터리를 포함할지 여부를 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref href=&quot;System.IO.SearchOption&quot;> </xref>합니다."
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: "일치 하는 파일의 열거 가능한 컬렉션 <code> searchPattern </code> 및 <code> searchOption </code>합니다."
  overload: System.IO.DirectoryInfo.EnumerateFiles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>유효 하지 않거나 <xref href=&quot;System.IO.SearchOption&quot;> </xref> 값입니다."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "캡슐화 된 경로가 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos
  id: EnumerateFileSystemInfos
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFileSystemInfos()
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos()
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "현재 디렉터리에 파일 시스템 정보의 열거 가능 컬렉션을 반환합니다."
  remarks: "EnumerateFileSystemInfos 및 <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>방법은 다음과 같이 달라:-EnumerateFileSystemInfos를 사용 하는 경우의 컬렉션을 열거 하기 <xref:System.IO.FileInfo>전체 컬렉션을 반환 하기 전에 개체.</xref:System.IO.FileInfo> </xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -사용 하 여 <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>를의 전체 배열에 대해 기다려야 <xref:System.IO.FileSystemInfo>개체 반환 되기 전에 배열에 액세스할 수 있습니다.</xref:System.IO.FileSystemInfo> </xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>       따라서 많은 파일 및 디렉터리와 작업할 때 EnumerateFileSystemInfos 더 효율적일 수 있습니다.       이 메서드는 다음 값을 미리 채웁니다 <xref:System.IO.FileSystemInfo>속성:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>반환된 된 컬렉션은 캐시 되지 않으므로를 호출할 때마다는 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>메서드는 컬렉션에는 새 열거형을 시작 합니다.</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> </xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.FileSystemInfo>"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: "현재 디렉터리에 파일 시스템 정보의 열거 가능 컬렉션입니다."
  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "캡슐화 된 경로가 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  id: EnumerateFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFileSystemInfos(String)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "지정된 된 검색 패턴과 일치 하는 파일 시스템 정보의 열거 가능 컬렉션을 반환 합니다."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "디렉터리 이름과 일치 하는지 검색 문자열입니다.  이 매개 변수는 유효한 리터럴 경로 와일드 카드를 포함할 수 있습니다 (* 및?) 문자 (설명 참조)로 하지만 정규식을 지원 하지 않습니다. 기본 패턴은 &quot;\\*&quot;를 반환 하는 모든 파일."
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: "일치 하는 파일 시스템 정보의 열거 가능 컬렉션 <code> searchPattern </code>합니다."
  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "캡슐화 된 경로가 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  id: EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "지정 된 검색 패턴 및 검색 하위 디렉터리 옵션과 일치 하는 파일 시스템 정보의 열거 가능 컬렉션을 반환 합니다."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "디렉터리 이름과 일치 하는지 검색 문자열입니다.  이 매개 변수는 유효한 리터럴 경로 와일드 카드를 포함할 수 있습니다 (* 및?) 문자 (설명 참조)로 하지만 정규식을 지원 하지 않습니다. 기본 패턴은 &quot;\\*&quot;를 반환 하는 모든 파일."
    - id: searchOption
      type: System.IO.SearchOption
      description: "검색 작업에 현재 디렉터리만 아니면 모든 하위 디렉터리를 포함할지 여부를 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref href=&quot;System.IO.SearchOption&quot;> </xref>합니다."
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: "일치 하는 파일 시스템 정보의 열거 가능 컬렉션 <code> searchPattern </code> 및 <code> searchOption </code>합니다."
  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>유효 하지 않거나 <xref href=&quot;System.IO.SearchOption&quot;> </xref> 값입니다."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "캡슐화 된 경로가 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Exists
  id: Exists
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Exists
  nameWithType: DirectoryInfo.Exists
  fullName: System.IO.DirectoryInfo.Exists
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "디렉터리가 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "Exists 속성은 반환 `false` 지정한 파일이 있는지 확인 하는 동안 오류가 발생 하는 경우. 이 파일 이름에 잘못 된 문자 또는 실패 나 누락 된 디스크에 문자가 너무 많습니다. 전달할 때 예외를 발생 시키는 상황에서 발생할 수 있습니다 또는 호출자에 게 파일을 읽을 수 있는 사용 권한이 없습니다."
  example:
  - "The following example demonstrates a use of the `Exists` property in the context of copying a source directory to a target directory.  \n  \n [!code-cpp[DirectoryInfo Usage Example#1](~/add/codesnippet/cpp/p-system.io.directoryinf_0_1.cpp)]\n [!code-cs[DirectoryInfo Usage Example#1](~/add/codesnippet/csharp/p-system.io.directoryinf_0_1.cs)]\n [!code-vb[DirectoryInfo Usage Example#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_0_1.vb)]"
  syntax:
    content: public override bool Exists { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>디렉터리가 있으면; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IO.DirectoryInfo.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetAccessControl
  id: GetAccessControl
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetAccessControl()
  nameWithType: DirectoryInfo.GetAccessControl()
  fullName: System.IO.DirectoryInfo.GetAccessControl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "가져옵니다는 <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> 현재 설명 하는 디렉터리에 대 한 액세스 제어 목록 (ACL) 항목을 캡슐화 하는 개체 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체입니다."
  remarks: "이 메서드 오버 로드를 호출 <xref:System.IO.Directory.GetAccessControl%2A>메서드 오버 로드를 호출 하 고 액세스 제어 구역 <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>지정 하는 것 | <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> | <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> (<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> in Visual Basic).</xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.IO.Directory.GetAccessControl%2A>       현재 파일에 대 한 액세스 제어 목록 (ACL) 항목을 검색 하려면 두 개의 새로운 메서드 메서드를 사용 합니다.       ACL에는 개인 및/또는 그룹 나 권한이 없는, 특정된 파일이 나 디렉터리에서 특정 작업을 설명 합니다. 자세한 내용은 참조 [하는 방법: 액세스 제어 목록 항목 추가 또는 제거](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example uses the GetAccessControl and <xref:System.IO.DirectoryInfo.SetAccessControl%2A> methods to add and then remove an access control list (ACL) entry from a directory.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/m-system.io.directoryinf_14_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/m-system.io.directoryinf_14_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_14_1.vb)]"
  syntax:
    content: public System.Security.AccessControl.DirectorySecurity GetAccessControl ();
    parameters: []
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "A <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> 디렉터리에 대 한 액세스 제어 규칙을 캡슐화 하는 개체입니다."
  overload: System.IO.DirectoryInfo.GetAccessControl*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "디렉터리를 찾거나 수정할 수 없습니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "디렉터리는 읽기 전용입니다.       -또는-이 작업은 현재 플랫폼에서 지원 되지 않습니다.       -또는-호출자에 게는 필요한 사용 권한이 없습니다."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "디렉터리를 여는 동안 I/O 오류가 발생 했습니다."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "현재 운영 체제가 Microsoft Windows 2000 이상이 아닌 경우"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)
  id: GetAccessControl(System.Security.AccessControl.AccessControlSections)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetAccessControl(AccessControlSections)
  nameWithType: DirectoryInfo.GetAccessControl(AccessControlSections)
  fullName: System.IO.DirectoryInfo.GetAccessControl(AccessControlSections)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "가져옵니다는 <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> 현재 설명 하는 디렉터리에 대 한 액세스 제어 목록 (ACL) 항목의 지정된 된 형식을 캡슐화 하는 개체 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체입니다."
  remarks: "현재 파일에 대 한 액세스 제어 목록 (ACL) 항목을 검색 하려면 두 개의 새로운 메서드 메서드를 사용 합니다.       ACL에는 개인 및/또는 그룹 나 권한이 없는, 특정된 파일이 나 디렉터리에서 특정 작업을 설명 합니다. 자세한 내용은 참조 [하는 방법: 액세스 제어 목록 항목 추가 또는 제거](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.Security.AccessControl.DirectorySecurity GetAccessControl (System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "중 하나는 <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref> 액세스 유형을 지정 하는 값 목록 (ACL) 정보를 받을 수를 제어 합니다."
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "A <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> 규칙에서 설명 하는 파일에 대 한 액세스 제어를 캡슐화 하는 <code> path </code> 매개 변수입니다.       예외       <table><thead><tr><th> 예외 형식       </th><th> 조건       </th></tr></thead><tbody><tr><td><xref href=&quot;System.SystemException&quot;></xref></td><td> 디렉터리를 찾거나 수정할 수 없습니다.       </td></tr><tr><td> <xref:System.UnauthorizedAccessException></xref:System.UnauthorizedAccessException>       </td><td> 현재 프로세스에 디렉터리에 액세스할 수 없는 합니다.       </td></tr><tr><td> <xref:System.IO.IOException></xref:System.IO.IOException>       </td><td> 디렉터리를 여는 동안 I/O 오류가 발생 했습니다.       </td></tr><tr><td> <xref:System.PlatformNotSupportedException></xref:System.PlatformNotSupportedException>       </td><td> 현재 운영 체제가 Microsoft Windows 2000 이상이 아닌 경우       </td></tr><tr><td> <xref:System.UnauthorizedAccessException></xref:System.UnauthorizedAccessException>       </td><td> 디렉터리는 읽기 전용입니다.       -또는-이 작업은 현재 플랫폼에서 지원 되지 않습니다.       -또는-호출자에 게는 필요한 사용 권한이 없습니다.       </td></tr></tbody></table>"
  overload: System.IO.DirectoryInfo.GetAccessControl*
  exceptions: []
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetDirectories
  id: GetDirectories
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetDirectories()
  nameWithType: DirectoryInfo.GetDirectories()
  fullName: System.IO.DirectoryInfo.GetDirectories()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "현재 디렉터리의 하위 디렉터리를 반환합니다."
  remarks: "하위 디렉터리가 없으면이 메서드는 빈 배열을 반환 합니다. 이 메서드는 재귀 되지 않습니다.       이 메서드는 다음 값을 미리 채웁니다 <xref:System.IO.DirectoryInfo>속성:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A></xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.DirectoryInfo>"
  example:
  - "The following example retrieves all the directories in the root directory and displays the directory names.  \n  \n [!code-cs[directoryinfogetdirectories#1](~/add/codesnippet/csharp/m-system.io.directoryinf_6_1.cs)]\n [!code-cpp[directoryinfogetdirectories#1](~/add/codesnippet/cpp/m-system.io.directoryinf_6_1.cpp)]\n [!code-vb[directoryinfogetdirectories#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_6_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo[] GetDirectories ();
    parameters: []
    return:
      type: System.IO.DirectoryInfo[]
      description: "배열을 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체입니다."
  overload: System.IO.DirectoryInfo.GetDirectories*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "캡슐화 된 경로가 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체가 예: 매핑되지 않은 드라이브에 올바르지 않습니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetDirectories(System.String)
  id: GetDirectories(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetDirectories(String)
  nameWithType: DirectoryInfo.GetDirectories(String)
  fullName: System.IO.DirectoryInfo.GetDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "현재에서 디렉터리의 배열을 반환 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 지정한 검색 조건과 일치 하는 합니다."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  example:
  - "The following example counts the directories in a path that contain the specified letter.  \n  \n [!code-cpp[DirInfo GetDirs2#1](~/add/codesnippet/cpp/m-system.io.directoryinf_10_1.cpp)]\n [!code-cs[DirInfo GetDirs2#1](~/add/codesnippet/csharp/m-system.io.directoryinf_10_1.cs)]\n [!code-vb[DirInfo GetDirs2#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_10_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo[] GetDirectories (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "디렉터리 이름과 일치 하는지 검색 문자열입니다.  이 매개 변수는 유효한 리터럴 경로 와일드 카드를 포함할 수 있습니다 (* 및?) 문자 (설명 참조)로 하지만 정규식을 지원 하지 않습니다. 기본 패턴은 &quot;\\*&quot;를 반환 하는 모든 파일."
    return:
      type: System.IO.DirectoryInfo[]
      description: "형식의 배열 <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref> 일치 하는 <code> searchPattern </code>합니다."
  overload: System.IO.DirectoryInfo.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>에 정의 된 하나 이상의 잘못 된 문자가 들어는 <xref:System.IO.Path.GetInvalidPathChars*> 메서드."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "캡슐화 된 경로가 <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref> 개체가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  id: GetDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.GetDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetDirectories(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "현재에서 디렉터리의 배열을 반환 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 지정 된 검색 조건과 일치 하 고 값을 사용 하 여 하위 디렉터리를 검색할지 여부를 결정 합니다."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n If there are no subdirectories, or no subdirectories match the `searchPattern` parameter, this method returns an empty array.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  example:
  - "The following example lists all of the directories and files that begin with the letter \"c\" in \"c:\\\\\".  \n  \n [!code-cpp[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/cpp/m-system.io.directoryinf_0_1.cpp)]\n [!code-cs[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/csharp/m-system.io.directoryinf_0_1.cs)]\n [!code-vb[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/visualbasic/m-system.io.directoryinf_0_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo[] GetDirectories (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "디렉터리 이름과 일치 하는지 검색 문자열입니다.  이 매개 변수는 유효한 리터럴 경로 와일드 카드를 포함할 수 있습니다 (* 및?) 문자 (설명 참조)로 하지만 정규식을 지원 하지 않습니다. 기본 패턴은 &quot;\\*&quot;를 반환 하는 모든 파일."
    - id: searchOption
      type: System.IO.SearchOption
      description: "검색 작업에 현재 디렉터리만 아니면 모든 하위 디렉터리를 포함할지 여부를 지정 하는 열거형 값 중 하나입니다."
    return:
      type: System.IO.DirectoryInfo[]
      description: "형식의 배열 <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref> 일치 하는 <code> searchPattern </code>합니다."
  overload: System.IO.DirectoryInfo.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>에 정의 된 하나 이상의 잘못 된 문자가 들어는 <xref:System.IO.Path.GetInvalidPathChars*> 메서드."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>유효 하지 않거나 <xref href=&quot;System.IO.SearchOption&quot;> </xref> 값입니다."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "캡슐화 된 경로가 <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref> 개체가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFiles
  id: GetFiles
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFiles()
  nameWithType: DirectoryInfo.GetFiles()
  fullName: System.IO.DirectoryInfo.GetFiles()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "현재 디렉터리에서 파일 목록을 반환합니다."
  remarks: "<xref:System.IO.DirectoryInfo.EnumerateFiles%2A>GetFiles 방법은 다음과 같이 달라 집니다 및: 사용 하는 경우- <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>의 컬렉션을 열거 하기 <xref:System.IO.FileInfo>전체 컬렉션을 반환 하기 전에 개체.</xref:System.IO.FileInfo> </xref:System.IO.DirectoryInfo.EnumerateFiles%2A> </xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -의 경우 전체 배열에 대해 기다려야 GetFiles를 사용 하는 경우 <xref:System.IO.FileInfo>개체 반환 되기 전에 배열에 액세스할 수 있습니다.</xref:System.IO.FileInfo>       따라서 많은 파일 및 디렉터리를 사용 하 여 작업할 때 <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>더 효과적일 수 있습니다.</xref:System.IO.DirectoryInfo.EnumerateFiles%2A>       에 파일이 없는 경우는 <xref:System.IO.DirectoryInfo>,이 메서드는 빈 배열을 반환 합니다.</xref:System.IO.DirectoryInfo>       반환 되는 파일 이름의 순서를 보장할 수 없습니다. 사용 하 여는 <xref:System.Array.Sort%2A>메서드 특정 정렬 순서를 적용 해야 하는 경우.</xref:System.Array.Sort%2A>       이 메서드는 다음 값을 미리 채웁니다 <xref:System.IO.FileInfo>속성:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>- <xref:System.IO.FileInfo.Length%2A></xref:System.IO.FileInfo.Length%2A> </xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.FileInfo>"
  example:
  - "The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_5_1.cs)]\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_5_1.vb)]"
  syntax:
    content: public System.IO.FileInfo[] GetFiles ();
    parameters: []
    return:
      type: System.IO.FileInfo[]
      description: "형식의 배열 <xref href=&quot;System.IO.FileInfo&quot;> </xref>합니다."
  overload: System.IO.DirectoryInfo.GetFiles*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "경로 예: 매핑되지 않은 드라이브에 올바르지 않습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFiles(System.String)
  id: GetFiles(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFiles(String)
  nameWithType: DirectoryInfo.GetFiles(String)
  fullName: System.IO.DirectoryInfo.GetFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "지정된 된 검색 패턴과 일치 하는 현재 디렉터리에서 파일 목록을 반환 합니다."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n The following wildcard specifiers are permitted in the `searchPattern` parameter.  \n  \n|Wildcard character|Description|  \n|------------------------|-----------------|  \n|*|Zero or more characters.|  \n|?|Exactly zero or one character.|  \n  \n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n Wildcards are permitted. For example, the `searchPattern` string \"*.txt\" searches for all file names having an extension of \"txt\". The `searchPattern` string \"s\\*\" searches for all file names beginning with the letter \"s\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n> [!NOTE]\n>  When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>"
  example:
  - "The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_12_1.cs)]\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_12_1.vb)]"
  syntax:
    content: public System.IO.FileInfo[] GetFiles (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "파일의 이름과 일치 하는지 검색 문자열입니다.  이 매개 변수는 유효한 리터럴 경로 와일드 카드를 포함할 수 있습니다 (* 및?) 문자 (설명 참조)로 하지만 정규식을 지원 하지 않습니다. 기본 패턴은 &quot;\\*&quot;를 반환 하는 모든 파일."
    return:
      type: System.IO.FileInfo[]
      description: "형식의 배열 <xref href=&quot;System.IO.FileInfo&quot;> </xref>합니다."
  overload: System.IO.DirectoryInfo.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>에 정의 된 하나 이상의 잘못 된 문자가 들어는 <xref:System.IO.Path.GetInvalidPathChars*> 메서드."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "경로가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  id: GetFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFiles(String,SearchOption)
  nameWithType: DirectoryInfo.GetFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFiles(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "지정된 된 검색 패턴과 일치 하는 값을 사용 하 여 하위 디렉터리를 검색할지 여부를 결정 하 여 현재 디렉터리에서 파일 목록을 반환 합니다."
  remarks: "The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard character|Description|  \n|------------------------|-----------------|  \n|* (asterisk)|Zero or more characters.|  \n|? (question mark)|Exactly zero or one character.|  \n  \n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n Wildcards are permitted. For example, the `searchPattern` string \"*.txt\" searches for all file names having an extension of \"txt\". The `searchPattern` string \"s\\*\" searches for all file names beginning with the letter \"s\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n> [!NOTE]\n>  When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files.  \n  \n The following list shows the behavior of different lengths for the `searchPattern` parameter:  \n  \n-   \"*.abc\" returns files having an extension of.abc,.abcd,.abcde,.abcdef, and so on.  \n  \n-   \"*.abcd\" returns only files having an extension of.abcd.  \n  \n-   \"*.abcde\" returns only files having an extension of.abcde.  \n  \n-   \"*.abcdef\" returns only files having an extension of.abcdef.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n1.  <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n2.  <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n3.  <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n4.  <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n5.  <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n6.  <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n7.  <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n8.  <xref:System.IO.FileInfo.Length%2A>"
  example:
  - "The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_13_1.cs)]\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_13_1.vb)]"
  syntax:
    content: public System.IO.FileInfo[] GetFiles (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "파일의 이름과 일치 하는지 검색 문자열입니다.  이 매개 변수는 유효한 리터럴 경로 와일드 카드를 포함할 수 있습니다 (* 및?) 문자 (설명 참조)로 하지만 정규식을 지원 하지 않습니다. 기본 패턴은 &quot;\\*&quot;를 반환 하는 모든 파일."
    - id: searchOption
      type: System.IO.SearchOption
      description: "검색 작업에 현재 디렉터리만 아니면 모든 하위 디렉터리를 포함할지 여부를 지정 하는 열거형 값 중 하나입니다."
    return:
      type: System.IO.FileInfo[]
      description: "형식의 배열 <xref href=&quot;System.IO.FileInfo&quot;> </xref>합니다."
  overload: System.IO.DirectoryInfo.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>에 정의 된 하나 이상의 잘못 된 문자가 들어는 <xref:System.IO.Path.GetInvalidPathChars*> 메서드."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>유효 하지 않거나 <xref href=&quot;System.IO.SearchOption&quot;> </xref> 값입니다."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "경로가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFileSystemInfos
  id: GetFileSystemInfos
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFileSystemInfos()
  nameWithType: DirectoryInfo.GetFileSystemInfos()
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "강력한 형식의 배열을 반환 <xref href=&quot;System.IO.FileSystemInfo&quot;> </xref> 모든 파일 및 디렉터리에 하위 디렉터리를 나타내는 항목입니다."
  remarks: "파일 또는 디렉터리에 없는 경우는 <xref:System.IO.DirectoryInfo>,이 메서드는 빈 배열을 반환 합니다.</xref:System.IO.DirectoryInfo> 이 메서드는 재귀 되지 않습니다.       <xref:System.IO.FileSystemInfo>이 메서드에 의해 반환 되는 개체는 파생된 클래스 <xref:System.IO.DirectoryInfo>.</xref:System.IO.DirectoryInfo> 으로 캐스팅 될 수</xref:System.IO.FileSystemInfo> 하는 하위 디렉터리 사용 하 여는 <xref:System.IO.FileAttributes>에서 반환 된 값의 <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName>속성을 확인 여부는 <xref:System.IO.FileSystemInfo>파일 또는 디렉터리를 나타냅니다.</xref:System.IO.FileSystemInfo> </xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> </xref:System.IO.FileAttributes>       이 메서드는 다음 값을 미리 채웁니다 <xref:System.IO.FileSystemInfo>속성:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A></xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.FileSystemInfo>"
  example:
  - "The following example counts the files and directories under the specified directory.  \n  \n [!code-vb[FSizeSort#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_3_1.vb)]\n [!code-cs[FSizeSort#1](~/add/codesnippet/csharp/m-system.io.directoryinf_3_1.cs)]"
  syntax:
    content: public System.IO.FileSystemInfo[] GetFileSystemInfos ();
    parameters: []
    return:
      type: System.IO.FileSystemInfo[]
      description: "배열에서 강력한 형식의 <xref href=&quot;System.IO.FileSystemInfo&quot;> </xref> 항목입니다."
  overload: System.IO.DirectoryInfo.GetFileSystemInfos*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "경로가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  id: GetFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFileSystemInfos(String)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "강력한 형식의 배열을 검색 <xref href=&quot;System.IO.FileSystemInfo&quot;> </xref> 파일 및 지정된 된 검색 조건과 일치 하는 하위 디렉터리를 나타내는 개체입니다."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n This method is not recursive.  \n  \n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \n  \n Wild cards are permitted. For example, the `searchPattern` string \"*t\" searches for all directory names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all directory names in `path` beginning with the letter \"s\".  \n  \n The string \"..\" can only be used in `searchPattern` if it is specified as a part of a valid directory name, such as in the directory name \"a..b\". It cannot be used to move up the directory hierarchy. If there are no files or directories, or no files or directories that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  example:
  - "The following example counts the files and directories that match the specified search pattern.  \n  \n [!code-cs[DirInfo GetFileSysInfos2#1](~/add/codesnippet/csharp/m-system.io.directoryinf_15_1.cs)]\n [!code-vb[DirInfo GetFileSysInfos2#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_15_1.vb)]"
  syntax:
    content: public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "디렉터리 및 파일의 이름과 일치 하는지 검색 문자열입니다.  이 매개 변수는 유효한 리터럴 경로 와일드 카드를 포함할 수 있습니다 (* 및?) 문자 (설명 참조)로 하지만 정규식을 지원 하지 않습니다. 기본 패턴은 &quot;\\*&quot;를 반환 하는 모든 파일."
    return:
      type: System.IO.FileSystemInfo[]
      description: "배열에서 강력한 형식의 <xref uid=&quot;langword_csharp_FileSystemInfo&quot; name=&quot;FileSystemInfo&quot; href=&quot;&quot;> </xref> 검색 조건과 일치 하는 개체입니다."
  overload: System.IO.DirectoryInfo.GetFileSystemInfos*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>에 정의 된 하나 이상의 잘못 된 문자가 들어는 <xref:System.IO.Path.GetInvalidPathChars*> 메서드."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "지정 된 경로가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  id: GetFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "배열을 검색 <xref href=&quot;System.IO.FileSystemInfo&quot;> </xref> 파일 및 지정 된 검색 조건과 일치 하는 하위 디렉터리를 나타내는 개체입니다."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  syntax:
    content: public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "디렉터리 및 파일의 이름과 일치 하는지 검색 문자열입니다.  이 매개 변수는 유효한 리터럴 경로 와일드 카드를 포함할 수 있습니다 (* 및?) 문자 (설명 참조)로 하지만 정규식을 지원 하지 않습니다. 기본 패턴은 &quot;\\*&quot;를 반환 하는 모든 파일."
    - id: searchOption
      type: System.IO.SearchOption
      description: "검색 작업에 현재 디렉터리만 아니면 모든 하위 디렉터리를 포함할지 여부를 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref href=&quot;System.IO.SearchOption&quot;> </xref>합니다."
    return:
      type: System.IO.FileSystemInfo[]
      description: "검색 조건과 일치 하는 파일 시스템 항목의 배열입니다."
  overload: System.IO.DirectoryInfo.GetFileSystemInfos*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>에 정의 된 하나 이상의 잘못 된 문자가 들어는 <xref:System.IO.Path.GetInvalidPathChars*> 메서드."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>유효 하지 않거나 <xref href=&quot;System.IO.SearchOption&quot;> </xref> 값입니다."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "지정 된 경로가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.MoveTo(System.String)
  id: MoveTo(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: MoveTo(String)
  nameWithType: DirectoryInfo.MoveTo(String)
  fullName: System.IO.DirectoryInfo.MoveTo(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "이동 된 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 인스턴스 및 해당 내용을 새 경로로 합니다."
  remarks: "This method throws an <xref:System.IO.IOException> if, for example, you try to move c:\\mydir to c:\\public, and c:\\public already exists. You must specify \"c:\\\\\\public\\\\\\mydir\" as the `destDirName` parameter, or specify a new directory name such as \"c:\\\\\\newdir\".  \n  \n This method permits moving a directory to a read-only directory. The read/write attribute of neither directory is affected.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates moving a directory.  \n  \n [!code-cs[directoryinfomoveto#1](~/add/codesnippet/csharp/m-system.io.directoryinf_17_1.cs)]\n [!code-cpp[directoryinfomoveto#1](~/add/codesnippet/cpp/m-system.io.directoryinf_17_1.cpp)]\n [!code-vb[directoryinfomoveto#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_17_1.vb)]"
  syntax:
    content: public void MoveTo (string destDirName);
    parameters:
    - id: destDirName
      type: System.String
      description: "이름 및 경로를이 디렉터리를 이동할 곳입니다. 다른 디스크 볼륨이 나 동일한 이름 가진 디렉터리가 대상 수 없습니다. 기존 디렉터리를 하위 디렉터리로이 디렉터리를 추가 하려면 원하는 수 있습니다."
  overload: System.IO.DirectoryInfo.MoveTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destDirName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>destDirName</code>빈 문자열 (&quot;&quot;)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "디렉터리를 다른 볼륨으로 이동 하려고 했습니다.       -또는- <code> destDirName </code> 이미 있습니다.       -또는-이 경로에 액세스할 수 있는 권한이 없습니다.       -또는-이동 되는 디렉터리 및 대상 디렉터리 이름이 동일 합니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "대상 디렉터리를 찾을 수 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Name
  id: Name
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Name
  nameWithType: DirectoryInfo.Name
  fullName: System.IO.DirectoryInfo.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "이 항목의 이름을 가져옵니다 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 인스턴스."
  remarks: "This Name property returns only the name of the directory, such as \"Bin\". To get the full path, such as \"c:\\public\\Bin\", use the <xref:System.IO.FileSystemInfo.FullName%2A> property.  \n  \n The Name property of a <xref:System.IO.DirectoryInfo> requires no permission (beyond the read permission to the directory necessary to construct the <xref:System.IO.DirectoryInfo.Exists%2A>) but can give out the directory name. If it is necessary to hand out a <xref:System.IO.DirectoryInfo> to a protected directory with a cryptographically secure name, create a dummy directory for the untrusted code’s use.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example displays the name of the current `DirectoryInfo` instance only.  \n  \n [!code-cs[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/csharp/p-system.io.directoryinf_3_1.cs)]\n [!code-vb[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_3_1.vb)]\n [!code-cpp[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/cpp/p-system.io.directoryinf_3_1.cpp)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "디렉터리 이름입니다."
  overload: System.IO.DirectoryInfo.Name*
  exceptions: []
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Parent
  id: Parent
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Parent
  nameWithType: DirectoryInfo.Parent
  fullName: System.IO.DirectoryInfo.Parent
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "지정 된 하위 디렉터리의 부모 디렉터리를 가져옵니다."
  remarks: "공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example demonstrates referring to the parent directory of a specified directory.  \n  \n [!code-cs[directoryinfoparent#1](~/add/codesnippet/csharp/p-system.io.directoryinf_1_1.cs)]\n [!code-vb[directoryinfoparent#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_1_1.vb)]\n [!code-cpp[directoryinfoparent#1](~/add/codesnippet/cpp/p-system.io.directoryinf_1_1.cpp)]"
  syntax:
    content: public System.IO.DirectoryInfo Parent { get; }
    return:
      type: System.IO.DirectoryInfo
      description: "부모 디렉터리 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경로가 null 또는 파일 경로 루트를 나타낼 경우 (예: &quot;\\&quot;,&quot;c:&quot;또는 *&quot;\\\\\\server\\share &quot;) 합니다."
  overload: System.IO.DirectoryInfo.Parent*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Root
  id: Root
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Root
  nameWithType: DirectoryInfo.Root
  fullName: System.IO.DirectoryInfo.Root
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "디렉터리의 루트 부분을 가져옵니다."
  remarks: ''
  example:
  - "The following example displays root locations for specified directories.  \n  \n [!code-cs[directoryinforoot#2](~/add/codesnippet/csharp/p-system.io.directoryinf_2_1.cs)]\n [!code-vb[directoryinforoot#2](~/add/codesnippet/visualbasic/p-system.io.directoryinf_2_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo Root { get; }
    return:
      type: System.IO.DirectoryInfo
      description: "디렉터리의 루트를 나타내는 개체입니다."
  overload: System.IO.DirectoryInfo.Root*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  id: SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: SetAccessControl(DirectorySecurity)
  nameWithType: DirectoryInfo.SetAccessControl(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.SetAccessControl(DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "설명 하는 액세스 제어 목록 (ACL) 항목을 적용 한 <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> 현재 설명 하는 디렉터리 개체 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> 개체입니다."
  remarks: "액세스 제어 목록 (ACL)에 개인 및/또는 그룹 나 권한이 없는, 특정된 파일이 나 디렉터리에서 특정 작업을 설명 합니다. 자세한 내용은 참조 [하는 방법: 액세스 제어 목록 항목 추가 또는 제거](~/add/includes/ajax-current-ext-md.md)합니다.       가집니다 메서드는 상속 되지 않은 ACL 목록을 표시 하는 파일에 ACL 항목을 적용 됩니다.      > [!CAUTION] > The ACL에 지정 된 `directorySecurity` 디렉터리에 대 한 기존 ACL 대체 합니다. 사용 권한을 새 사용자를 추가 하려면 <xref:System.IO.DirectoryInfo.GetAccessControl%2A>기존 ACL을 얻고 수정 하는 메서드</xref:System.IO.DirectoryInfo.GetAccessControl%2A> 를 사용 합니다.       가집니다 메서드만 계속 되 면 <xref:System.Security.AccessControl.DirectorySecurity>개체를 만든 후 수정 된 개체입니다.</xref:System.Security.AccessControl.DirectorySecurity>  경우는 <xref:System.Security.AccessControl.DirectorySecurity>개체가 수정 되지 않은, 파일에 유지 되지 것입니다.</xref:System.Security.AccessControl.DirectorySecurity>  검색할 수 없으면 따라서는 <xref:System.Security.AccessControl.DirectorySecurity>한 파일에서 개체를 다른 파일에 동일한 개체를 다시 적용 합니다.</xref:System.Security.AccessControl.DirectorySecurity>       한 파일에서 ACL 정보 복사: 1입니다.  사용 하 여는 <xref:System.IO.DirectoryInfo.GetAccessControl%2A>를 검색할 메서드는 <xref:System.Security.AccessControl.DirectorySecurity>개체 소스 파일에서.</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.IO.DirectoryInfo.GetAccessControl%2A>      2.  새 <xref:System.Security.AccessControl.DirectorySecurity>대상 파일에 대 한 개체입니다.</xref:System.Security.AccessControl.DirectorySecurity>      3.  사용 하 여는 <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>또는 <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>소스의 메서드 <xref:System.Security.AccessControl.DirectorySecurity>ACL 정보를 검색 하는 개체입니다.</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>      4.  사용 된 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>또는 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>대상에 3 단계에서 검색 메서드 정보를 복사 하려면 <xref:System.Security.AccessControl.DirectorySecurity>개체입니다.</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>      5.  대상을 설정 <xref:System.Security.AccessControl.DirectorySecurity>가집니다 메서드를 사용 하 여 대상 파일에는 개체입니다.</xref:System.Security.AccessControl.DirectorySecurity>"
  example:
  - "The following example uses the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> and SetAccessControl methods to add and then remove an access control list (ACL) entry from a directory.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/d8d660a0-50f5-42be-9101-_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/d8d660a0-50f5-42be-9101-_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/d8d660a0-50f5-42be-9101-_1.vb)]"
  syntax:
    content: public void SetAccessControl (System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "설명 하는 디렉터리에 적용할 ACL 항목을 설명 하는 개체는 `path` 매개 변수입니다."
  overload: System.IO.DirectoryInfo.SetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>directorySecurity</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "파일을 찾을 또는 수정할 수 없습니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "현재 프로세스에는 파일을 열 수 있는 권한이 없습니다."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "현재 운영 체제가 Microsoft Windows 2000 이상이 아닌 경우"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.ToString
  id: ToString
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: ToString()
  nameWithType: DirectoryInfo.ToString()
  fullName: System.IO.DirectoryInfo.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "사용자에 의해 전달 된 원본 경로 반환 합니다."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "사용자에 의해 전달 된 원본 경로 반환 합니다."
  overload: System.IO.DirectoryInfo.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IO.FileSystemInfo
  isExternal: false
  name: System.IO.FileSystemInfo
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.DirectoryInfo.#ctor(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: DirectoryInfo(String)
  nameWithType: DirectoryInfo.DirectoryInfo(String)
  fullName: System.IO.DirectoryInfo.DirectoryInfo(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.DirectoryInfo.Create
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Create()
  nameWithType: DirectoryInfo.Create()
  fullName: System.IO.DirectoryInfo.Create()
- uid: System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Create(DirectorySecurity)
  nameWithType: DirectoryInfo.Create(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.Create(DirectorySecurity)
- uid: System.Security.AccessControl.DirectorySecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: DirectorySecurity
  nameWithType: DirectorySecurity
  fullName: System.Security.AccessControl.DirectorySecurity
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: CreateSubdirectory(String)
  nameWithType: DirectoryInfo.CreateSubdirectory(String)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String)
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: CreateSubdirectory(String,DirectorySecurity)
  nameWithType: DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
- uid: System.IO.DirectoryInfo.Delete
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Delete()
  nameWithType: DirectoryInfo.Delete()
  fullName: System.IO.DirectoryInfo.Delete()
- uid: System.IO.DirectoryInfo.Delete(System.Boolean)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Delete(Boolean)
  nameWithType: DirectoryInfo.Delete(Boolean)
  fullName: System.IO.DirectoryInfo.Delete(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.DirectoryInfo.EnumerateDirectories
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories()
  nameWithType: DirectoryInfo.EnumerateDirectories()
  fullName: System.IO.DirectoryInfo.EnumerateDirectories()
- uid: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<DirectoryInfo>
  nameWithType: IEnumerable<DirectoryInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.DirectoryInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    nameWithType: DirectoryInfo
    fullName: DirectoryInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories(String)
  nameWithType: DirectoryInfo.EnumerateDirectories(String)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String)
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String,SearchOption)
- uid: System.IO.SearchOption
  parent: System.IO
  isExternal: false
  name: SearchOption
  nameWithType: SearchOption
  fullName: System.IO.SearchOption
- uid: System.IO.DirectoryInfo.EnumerateFiles
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles()
  nameWithType: DirectoryInfo.EnumerateFiles()
  fullName: System.IO.DirectoryInfo.EnumerateFiles()
- uid: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<FileInfo>
  nameWithType: IEnumerable<FileInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.FileInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.FileInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.FileInfo
    name: FileInfo
    nameWithType: FileInfo
    fullName: FileInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles(String)
  nameWithType: DirectoryInfo.EnumerateFiles(String)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String)
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String,SearchOption)
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos()
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos()
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos()
- uid: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<FileSystemInfo>
  nameWithType: IEnumerable<FileSystemInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.FileSystemInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    nameWithType: FileSystemInfo
    fullName: FileSystemInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos(String)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String)
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
- uid: System.IO.DirectoryInfo.Exists
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Exists
  nameWithType: DirectoryInfo.Exists
  fullName: System.IO.DirectoryInfo.Exists
- uid: System.IO.DirectoryInfo.GetAccessControl
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetAccessControl()
  nameWithType: DirectoryInfo.GetAccessControl()
  fullName: System.IO.DirectoryInfo.GetAccessControl()
- uid: System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetAccessControl(AccessControlSections)
  nameWithType: DirectoryInfo.GetAccessControl(AccessControlSections)
  fullName: System.IO.DirectoryInfo.GetAccessControl(AccessControlSections)
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.IO.DirectoryInfo.GetDirectories
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories()
  nameWithType: DirectoryInfo.GetDirectories()
  fullName: System.IO.DirectoryInfo.GetDirectories()
- uid: System.IO.DirectoryInfo[]
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo[]
  spec.csharp:
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    nameWithType: DirectoryInfo
    fullName: DirectoryInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.DirectoryInfo.GetDirectories(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories(String)
  nameWithType: DirectoryInfo.GetDirectories(String)
  fullName: System.IO.DirectoryInfo.GetDirectories(String)
- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.GetDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetDirectories(String,SearchOption)
- uid: System.IO.DirectoryInfo.GetFiles
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles()
  nameWithType: DirectoryInfo.GetFiles()
  fullName: System.IO.DirectoryInfo.GetFiles()
- uid: System.IO.FileInfo[]
  parent: System.IO
  isExternal: false
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo[]
  spec.csharp:
  - uid: System.IO.FileInfo
    name: FileInfo
    nameWithType: FileInfo
    fullName: FileInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.DirectoryInfo.GetFiles(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles(String)
  nameWithType: DirectoryInfo.GetFiles(String)
  fullName: System.IO.DirectoryInfo.GetFiles(String)
- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles(String,SearchOption)
  nameWithType: DirectoryInfo.GetFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFiles(String,SearchOption)
- uid: System.IO.DirectoryInfo.GetFileSystemInfos
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos()
  nameWithType: DirectoryInfo.GetFileSystemInfos()
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos()
- uid: System.IO.FileSystemInfo[]
  parent: System.IO
  isExternal: false
  name: FileSystemInfo
  nameWithType: FileSystemInfo
  fullName: System.IO.FileSystemInfo[]
  spec.csharp:
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    nameWithType: FileSystemInfo
    fullName: FileSystemInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos(String)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String)
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String,SearchOption)
- uid: System.IO.DirectoryInfo.MoveTo(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: MoveTo(String)
  nameWithType: DirectoryInfo.MoveTo(String)
  fullName: System.IO.DirectoryInfo.MoveTo(String)
- uid: System.IO.DirectoryInfo.Name
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Name
  nameWithType: DirectoryInfo.Name
  fullName: System.IO.DirectoryInfo.Name
- uid: System.IO.DirectoryInfo.Parent
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Parent
  nameWithType: DirectoryInfo.Parent
  fullName: System.IO.DirectoryInfo.Parent
- uid: System.IO.DirectoryInfo.Root
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Root
  nameWithType: DirectoryInfo.Root
  fullName: System.IO.DirectoryInfo.Root
- uid: System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: SetAccessControl(DirectorySecurity)
  nameWithType: DirectoryInfo.SetAccessControl(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.SetAccessControl(DirectorySecurity)
- uid: System.IO.DirectoryInfo.ToString
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: ToString()
  nameWithType: DirectoryInfo.ToString()
  fullName: System.IO.DirectoryInfo.ToString()
- uid: System.IO.DirectoryInfo.#ctor*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo.DirectoryInfo
- uid: System.IO.DirectoryInfo.Create*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Create
  nameWithType: DirectoryInfo.Create
- uid: System.IO.DirectoryInfo.CreateSubdirectory*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: CreateSubdirectory
  nameWithType: DirectoryInfo.CreateSubdirectory
- uid: System.IO.DirectoryInfo.Delete*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Delete
  nameWithType: DirectoryInfo.Delete
- uid: System.IO.DirectoryInfo.EnumerateDirectories*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories
  nameWithType: DirectoryInfo.EnumerateDirectories
- uid: System.IO.DirectoryInfo.EnumerateFiles*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles
  nameWithType: DirectoryInfo.EnumerateFiles
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos
- uid: System.IO.DirectoryInfo.Exists*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Exists
  nameWithType: DirectoryInfo.Exists
- uid: System.IO.DirectoryInfo.GetAccessControl*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetAccessControl
  nameWithType: DirectoryInfo.GetAccessControl
- uid: System.IO.DirectoryInfo.GetDirectories*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories
  nameWithType: DirectoryInfo.GetDirectories
- uid: System.IO.DirectoryInfo.GetFiles*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles
  nameWithType: DirectoryInfo.GetFiles
- uid: System.IO.DirectoryInfo.GetFileSystemInfos*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos
  nameWithType: DirectoryInfo.GetFileSystemInfos
- uid: System.IO.DirectoryInfo.MoveTo*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: MoveTo
  nameWithType: DirectoryInfo.MoveTo
- uid: System.IO.DirectoryInfo.Name*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Name
  nameWithType: DirectoryInfo.Name
- uid: System.IO.DirectoryInfo.Parent*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Parent
  nameWithType: DirectoryInfo.Parent
- uid: System.IO.DirectoryInfo.Root*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Root
  nameWithType: DirectoryInfo.Root
- uid: System.IO.DirectoryInfo.SetAccessControl*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: SetAccessControl
  nameWithType: DirectoryInfo.SetAccessControl
- uid: System.IO.DirectoryInfo.ToString*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: ToString
  nameWithType: DirectoryInfo.ToString
