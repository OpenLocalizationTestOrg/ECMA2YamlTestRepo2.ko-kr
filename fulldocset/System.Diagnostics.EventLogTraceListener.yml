### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLogTraceListener
  id: EventLogTraceListener
  children:
  - System.Diagnostics.EventLogTraceListener.#ctor
  - System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  - System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  - System.Diagnostics.EventLogTraceListener.Close
  - System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  - System.Diagnostics.EventLogTraceListener.EventLog
  - System.Diagnostics.EventLogTraceListener.Name
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.EventLogTraceListener.Write(System.String)
  - System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  langs:
  - csharp
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener
  fullName: System.Diagnostics.EventLogTraceListener
  type: Class
  summary: "추적 또는 디버깅 출력을 알려 주는 간단한 수신기 제공는 <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>합니다."
  remarks: "이 EventLogTraceListener의 인스턴스를 추가할 수는 <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>, <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>, 또는 <xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName>출력 추적 또는 디버깅 <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> 에서 보낼 컬렉션</xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> 코드에서 해당 인스턴스를 추가 하거나 응용 프로그램 구성 파일에서 지정할 수 있습니다. 응용 프로그램 구성 파일을 사용 하는 EventLogTraceListener를 추가 하려면 응용 프로그램의 이름에 해당 하는 파일 또는 app.config 파일에서 편집을 [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] 프로젝트. 이 파일에 EventLogTraceListener 형식에 대 한 요소를 삽입 합니다.       다음 예제에서는 추가 EventLogTraceListener 개체인 `myListener` 에 <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>컬렉션.</xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> `initializeData` 매개 변수를 전달 하는 이벤트 로그 원본의 이름을 지정는 <xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>생성자.</xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>      ```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;4&quot;>         <listeners>           <add name=&quot;myListener&quot;             type=&quot;System.Diagnostics.EventLogTraceListener&quot;             initializeData=&quot;TraceListenerLog&quot; />         </listeners>       </trace>     </system.diagnostics>   </configuration>   ```응용 프로그램 구성 파일에 추적 수신기를 추가 하는 방법에 대 한 자세한 내용은 참조 하십시오. 또는 합니다.      > [!NOTE] > 경우는 <xref:System.Diagnostics.EventLog.Source%2A>새 이벤트 원본을 만들어집니다 EventLogTraceListener 인스턴스와 연결 된 이벤트 로그가 존재 하지 않습니다.</xref:System.Diagnostics.EventLog.Source%2A> Windows Vista, Windows XP Professional 또는 Windows Server 2003에서 이벤트 소스를 만들려면 관리자 권한이 있어야 합니다.   >>이 요구 사항에 대 한 이유 보안을 비롯 한 모든 이벤트 로그 이벤트 소스가 고유한 지 확인 하려면 검색 해야입니다. Windows Vista에서 사용자가 없는 보안 로그;에 액세스할 수 있는 권한을 따라서 한 <xref:System.Security.SecurityException>throw 됩니다.</xref:System.Security.SecurityException>   >> Windows Vista에서 사용자 계정 컨트롤 (UAC)가 사용자 권한을 결정합니다. 두 개의 런타임 액세스 토큰에 할당 된 기본 제공 Administrators 그룹의 구성원 인 경우: 표준 사용자 액세스 토큰 및 관리자 액세스 토큰입니다. 기본적으로 표준 사용자 역할에 속합니다. 보안 로그에 액세스 하는 코드를 실행 하려면 먼저 높여야 귀하의 권한을 표준 사용자에서 관리자에 게 있습니다. 응용 프로그램 아이콘을 마우스 오른쪽 단추로 클릭 하 고 관리자 권한으로 실행 되도록 지정 하 여 응용 프로그램을 시작 하는 경우이 수행할 수 있습니다.       이 클래스를 제공는 <xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>가져오거나 추적 또는 디버깅 출력을 수신 하는 이벤트 로그를 설정 하는 속성 및 <xref:System.Diagnostics.EventLogTraceListener.Name%2A>는 EventLogTraceListener 이름을 보유 하는 속성.</xref:System.Diagnostics.EventLogTraceListener.Name%2A> </xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>       <xref:System.Diagnostics.EventLogTraceListener.Close%2A>추적 또는 디버깅 출력 더 이상 받지 않도록 메서드 이벤트 로그를 닫습니다.</xref:System.Diagnostics.EventLogTraceListener.Close%2A> <xref:System.Diagnostics.EventLogTraceListener.Write%2A> <xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A>이벤트 로그에 메시지를 기록 하는 메서드</xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A> 및</xref:System.Diagnostics.EventLogTraceListener.Write%2A>      > [!NOTE] >는 EventLogTraceListener 이벤트 로그에 많은 양의 데이터를 쓰는의 가능성을 방지 하려면 지정 된 선택적 추적 데이터를 출력 하지 않습니다는 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>속성.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  example:
  - "The following example creates a trace listener that sends output to an event log. First, the code creates a new EventLogTraceListener that uses the source `myEventLogSource`. Next, `myTraceListener` is added to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection. Finally, the example sends a line of output to the <xref:System.Diagnostics.Trace.Listeners%2A> object.  \n  \n [!code-cs[Classic EventLogTraceListener Example#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_3_1.cs)]\n [!code-vb[Classic EventLogTraceListener Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_3_1.vb)]\n [!code-cpp[Classic EventLogTraceListener Example#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_3_1.cpp)]"
  syntax:
    content: 'public sealed class EventLogTraceListener : System.Diagnostics.TraceListener'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Diagnostics.TraceListener
  implements: []
  inheritedMembers:
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.Flush
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> 추적 수신기 없이 클래스입니다."
  syntax:
    content: public EventLogTraceListener ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  id: '#ctor(System.Diagnostics.EventLog)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> 클래스 지정된 된 이벤트 로그를 사용 합니다."
  syntax:
    content: public EventLogTraceListener (System.Diagnostics.EventLog eventLog);
    parameters:
    - id: eventLog
      type: System.Diagnostics.EventLog
      description: "이벤트 로그에 쓸 수 있습니다."
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> 클래스 지정된 된 소스를 사용 합니다."
  syntax:
    content: public EventLogTraceListener (string source);
    parameters:
    - id: source
      type: System.String
      description: "기존 이벤트 로그 원본의 이름입니다."
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Close
  id: Close
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "더 이상 추적 또는 디버깅 출력을 받을 수 있도록 이벤트 로그를 닫습니다."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "추가할 수 있습니다."
  overload: System.Diagnostics.EventLogTraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  id: EventLog
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "이벤트 로그에 쓸 수를 가져오거나 설정 합니다."
  syntax:
    content: public System.Diagnostics.EventLog EventLog { get; set; }
    return:
      type: System.Diagnostics.EventLog
      description: "이벤트 로그에 쓸 수 있습니다."
  overload: System.Diagnostics.EventLogTraceListener.EventLog*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Name
  id: Name
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "이의 이름을 가져오거나 설정 합니다. <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref>합니다."
  remarks: "이벤트 로그의 원본 이름에이 속성의 기본값입니다."
  syntax:
    content: public override string Name { get; set; }
    return:
      type: System.String
      description: "이 추적 수신기의 이름입니다."
  overload: System.Diagnostics.EventLogTraceListener.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "추적 정보, 데이터 개체 및 이벤트 정보를 이벤트 로그에 씁니다."
  remarks: "> [!IMPORTANT]>은 <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>메서드는 응용 프로그램 코드에서 호출할 수 없습니다.</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> 메서드에서 호출 됩니다는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource>클래스를 추적 데이터를 출력 합니다.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>메서드, like는 <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>메서드는 자동화 된 도구에 만들어졌으나의 예를 들어 예외 인스턴스를 추적에 추가 개체에 연결할 수 있도록 해줍니다.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> </xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>       `eventCache` 및 `source` 매개 변수 사용 하는 이벤트를 추적 해야 하는 경우를 결정 합니다. `id`만드는 데 사용 되는 <xref:System.Diagnostics.EventInstance>개체 및 <xref:System.Diagnostics.TraceEventType>를 동일시는 <xref:System.Diagnostics.EventLogEntryType>에 대 한는 <xref:System.Diagnostics.EventInstance.EntryType%2A>속성.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> <xref:System.Diagnostics.EventInstance>함께 이벤트 로그에 기록 되는 `data` , 문자열로 서식이 지정 된 개체를 사용 하 여는 <xref:System.Diagnostics.EventLog.WriteEvent%2A>메서드.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] >의 최대값은 `id` 매개 변수는 65, 535 합니다. 경우는 `id` 지정 된 값이 65, 535 보다 큰, 최대 값이 사용 됩니다."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "현재 포함 하는 개체 ID를 처리 하 고, 스레드 ID, 스택 추적 정보가 있습니다."
    - id: source
      type: System.String
      description: "출력; 식별 하는 데 사용 되는 이름 일반적으로 추적 이벤트를 생성 하는 응용 프로그램의 이름입니다."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "추적을 발생 시킨 이벤트의 유형을 지정 하는 열거형 값 중 하나입니다."
    - id: id
      type: System.Int32
      description: "이벤트에 대 한 숫자 식별자입니다. 조합의 `source` 및 `id` 이벤트를 고유 하 게 식별 합니다."
    - id: data
      type: System.Object
      description: "출력 파일 또는 스트림에 쓸 데이터 개체입니다."
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>지정 하지 않았습니다.       -또는-로그 엔트리 문자열이 32, 766 자를 초과 합니다."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "추적 정보, 데이터 개체 및 이벤트 정보를 이벤트 로그의 배열을 씁니다."
  remarks: "> [!IMPORTANT]>은 <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>메서드는 응용 프로그램 코드에서 호출할 수 없습니다.</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> 메서드에서 호출 됩니다는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource>클래스를 추적 데이터를 출력 합니다.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>메서드, like는 <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>메서드는 자동화 된 도구에 만들어졌으나의 예를 들어 예외 인스턴스를 추적에 추가 개체에 연결할 수 있도록 해줍니다.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> </xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>       `severity` 및 `id` 매개 변수 데이터를 만드는 데 사용 되는 <xref:System.Diagnostics.EventInstance>개체 데이터 개체의 배열에서 데이터를 사용 하 여 이벤트 로그에 기록 됩니다.</xref:System.Diagnostics.EventInstance>       `eventCache` 및 `source` 매개 변수 사용 하는 이벤트를 추적 해야 하는 경우를 결정 합니다. `id`만드는 데 사용 되는 <xref:System.Diagnostics.EventInstance>개체 및 <xref:System.Diagnostics.TraceEventType>를 동일시는 <xref:System.Diagnostics.EventLogEntryType>에 대 한는 <xref:System.Diagnostics.EventInstance.EntryType%2A>속성.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> <xref:System.Diagnostics.EventInstance>함께 이벤트 로그에 기록 되는 `data` 을 문자열 배열로 서식이 지정 되는 개체 배열 사용 하 여는 <xref:System.Diagnostics.EventLog.WriteEvent%2A>메서드.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] >의 최대값은 `id` 매개 변수는 65, 535 합니다. 경우는 `id` 지정 된 값이 65, 535 보다 큰, 최대 값이 사용 됩니다."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "현재 포함 하는 개체 ID를 처리 하 고, 스레드 ID, 스택 추적 정보가 있습니다."
    - id: source
      type: System.String
      description: "출력; 식별 하는 데 사용 되는 이름 일반적으로 추적 이벤트를 생성 하는 응용 프로그램의 이름입니다."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "추적을 발생 시킨 이벤트의 유형을 지정 하는 열거형 값 중 하나입니다."
    - id: id
      type: System.Int32
      description: "이벤트에 대 한 숫자 식별자입니다. 조합의 `source` 및 `id` 이벤트를 고유 하 게 식별 합니다."
    - id: data
      type: System.Object[]
      description: "데이터 개체의 배열입니다."
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>지정 하지 않았습니다.       -또는-로그 엔트리 문자열이 32, 766 자를 초과 합니다."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "추적 정보, 메시지 및 이벤트 정보를 이벤트 로그에 씁니다."
  remarks: "> [!IMPORTANT]>은 <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>메서드는 응용 프로그램 코드에서 호출할 수 없습니다.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> 이러한 메서드는의 메서드에 의해 호출 됩니다는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource>추적 데이터를 작성 하는 클래스입니다.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>도구에 의해 자동으로 처리할 수 있는 추적 이벤트에 메서드를 사용 합니다.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> 예 모니터링 도구는 특정 소스에서 특정 이벤트는 추적 하는 경우 관리자가 받을 수 있습니다.       `eventCache` 및 `source` 매개 변수 사용 하는 이벤트를 추적 해야 하는 경우를 결정 합니다. `id`만드는 데 사용 되는 <xref:System.Diagnostics.EventInstance>개체 및 <xref:System.Diagnostics.TraceEventType>를 동일시는 <xref:System.Diagnostics.EventLogEntryType>에 대 한는 <xref:System.Diagnostics.EventInstance.EntryType%2A>속성.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> <xref:System.Diagnostics.EventInstance>함께 이벤트 로그에 기록 되는 `message` 사용 하 여 데이터의 <xref:System.Diagnostics.EventLog.WriteEvent%2A>메서드.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] >의 최대값은 `id` 매개 변수는 65, 535 합니다. 경우는 `id` 지정 된 값이 65, 535 보다 큰, 최대 값이 사용 됩니다."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "현재 포함 하는 개체 ID를 처리 하 고, 스레드 ID, 스택 추적 정보가 있습니다."
    - id: source
      type: System.String
      description: "출력; 식별 하는 데 사용 되는 이름 일반적으로 추적 이벤트를 생성 하는 응용 프로그램의 이름입니다."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "추적을 발생 시킨 이벤트의 유형을 지정 하는 열거형 값 중 하나입니다."
    - id: id
      type: System.Int32
      description: "이벤트에 대 한 숫자 식별자입니다. 조합의 `source` 및 `id` 이벤트를 고유 하 게 식별 합니다."
    - id: message
      type: System.String
      description: "추적 메시지입니다."
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>지정 하지 않았습니다.       -또는-로그 엔트리 문자열이 32, 766 자를 초과 합니다."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "추적 정보, 개체 및 이벤트 정보를 이벤트 로그의 서식이 지정 된 배열에 씁니다."
  remarks: "> [!IMPORTANT]>은 <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>메서드는 응용 프로그램 코드에서 호출할 수 없습니다.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> 이러한 메서드는의 메서드에 의해 호출 됩니다는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource>추적 데이터를 작성 하는 클래스입니다.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>도구에 의해 자동으로 처리할 수 있는 추적 이벤트에 메서드를 사용 합니다.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> 예 모니터링 도구는 특정 소스에서 특정 이벤트는 추적 하는 경우 관리자가 받을 수 있습니다.       `eventCache` 및 `source` 매개 변수 사용 하는 이벤트를 추적 해야 하는 경우를 결정 합니다. `id`만드는 데 사용 되는 <xref:System.Diagnostics.EventInstance>개체 및 <xref:System.Diagnostics.TraceEventType>를 동일시는 <xref:System.Diagnostics.EventLogEntryType>에 대 한는 <xref:System.Diagnostics.EventInstance.EntryType%2A>속성.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> <xref:System.Diagnostics.EventInstance>이벤트 로그에 쓰여집니다를 사용 하 여는 <xref:System.Diagnostics.EventLog.WriteEvent%2A>에서 가져온 메시지와 함께 메서드는 `format` 및 `args` 매개 변수.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance> `args` 개체 배열을 사용 하는 문자열로 변환할는 <xref:System.String.Format%2A>전달 하는 메서드는 `format` 문자열 및 `args` 배열에서 이벤트 로그에 대 한 메시지 문자열의 서식을 지정 하려면</xref:System.String.Format%2A>      > [!NOTE] >의 최대값은 `id` 매개 변수는 65, 535 합니다. 경우는 `id` 지정 된 값이 65, 535 보다 큰, 최대 값이 사용 됩니다."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "현재 포함 하는 개체 ID를 처리 하 고, 스레드 ID, 스택 추적 정보가 있습니다."
    - id: source
      type: System.String
      description: "출력; 식별 하는 데 사용 되는 이름 일반적으로 추적 이벤트를 생성 하는 응용 프로그램의 이름입니다."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "추적을 발생 시킨 이벤트의 유형을 지정 하는 열거형 값 중 하나입니다."
    - id: id
      type: System.Int32
      description: "이벤트에 대 한 숫자 식별자입니다. 조합의 `source` 및 `id` 이벤트를 고유 하 게 식별 합니다."
    - id: format
      type: System.String
      description: "개체에 해당 하는&0; 개 이상의 서식 항목이 포함 하는 서식 문자열은 `args` 배열입니다."
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> 형식을 지정할 개체가&0; 개 이상 포함 된 배열입니다."
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>지정 하지 않았습니다.       -또는-로그 엔트리 문자열이 32, 766 자를 초과 합니다."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "이 인스턴스에 대 한 이벤트 로그에 메시지를 씁니다."
  syntax:
    content: public override void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "쓸 메시지입니다."
  overload: System.Diagnostics.EventLogTraceListener.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>32, 766 자를 초과합니다."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "이 인스턴스에 대 한 이벤트 로그에 메시지를 씁니다."
  syntax:
    content: public override void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "쓸 메시지입니다."
  overload: System.Diagnostics.EventLogTraceListener.WriteLine*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>32, 766 자를 초과합니다."
  platform:
  - net462
references:
- uid: System.Diagnostics.TraceListener
  isExternal: false
  name: System.Diagnostics.TraceListener
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
- uid: System.Diagnostics.EventLog
  parent: System.Diagnostics
  isExternal: false
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLogTraceListener.Close
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
- uid: System.Diagnostics.EventLogTraceListener.#ctor*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener.EventLogTraceListener
- uid: System.Diagnostics.EventLogTraceListener.Close*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close
  nameWithType: EventLogTraceListener.Close
- uid: System.Diagnostics.EventLogTraceListener.Dispose*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose
  nameWithType: EventLogTraceListener.Dispose
- uid: System.Diagnostics.EventLogTraceListener.EventLog*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData
  nameWithType: EventLogTraceListener.TraceData
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: EventLogTraceListener.TraceEvent
- uid: System.Diagnostics.EventLogTraceListener.Write*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write
  nameWithType: EventLogTraceListener.Write
- uid: System.Diagnostics.EventLogTraceListener.WriteLine*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine
  nameWithType: EventLogTraceListener.WriteLine
