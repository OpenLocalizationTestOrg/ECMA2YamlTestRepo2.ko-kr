### YamlMime:ManagedReference
items:
- uid: System.Web.HttpServerUtility
  id: HttpServerUtility
  children:
  - System.Web.HttpServerUtility.ClearError
  - System.Web.HttpServerUtility.CreateObject(System.String)
  - System.Web.HttpServerUtility.CreateObject(System.Type)
  - System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)
  - System.Web.HttpServerUtility.Execute(System.String)
  - System.Web.HttpServerUtility.Execute(System.String,System.Boolean)
  - System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter)
  - System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)
  - System.Web.HttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)
  - System.Web.HttpServerUtility.GetLastError
  - System.Web.HttpServerUtility.HtmlDecode(System.String)
  - System.Web.HttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)
  - System.Web.HttpServerUtility.HtmlEncode(System.String)
  - System.Web.HttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)
  - System.Web.HttpServerUtility.MachineName
  - System.Web.HttpServerUtility.MapPath(System.String)
  - System.Web.HttpServerUtility.ScriptTimeout
  - System.Web.HttpServerUtility.Transfer(System.String)
  - System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)
  - System.Web.HttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)
  - System.Web.HttpServerUtility.TransferRequest(System.String)
  - System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean)
  - System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)
  - System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)
  - System.Web.HttpServerUtility.UrlDecode(System.String)
  - System.Web.HttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)
  - System.Web.HttpServerUtility.UrlEncode(System.String)
  - System.Web.HttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)
  - System.Web.HttpServerUtility.UrlPathEncode(System.String)
  - System.Web.HttpServerUtility.UrlTokenDecode(System.String)
  - System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])
  langs:
  - csharp
  name: HttpServerUtility
  nameWithType: HttpServerUtility
  fullName: System.Web.HttpServerUtility
  type: Class
  summary: "웹 요청을 처리 하기 위한 도우미 메서드를 제공 합니다."
  remarks: "메서드와 HttpServerUtility 클래스의 속성은 내장 함수를 통해 노출 됩니다 <xref:System.Web.HttpContext.Server%2A>ASP.NET에서 제공 하는 개체입니다.</xref:System.Web.HttpContext.Server%2A>"
  example:
  - "A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=192870).  \n  \n The following example demonstrates how to use the <xref:System.Web.HttpServerUtility.HtmlEncode%2A> method and the <xref:System.Web.HttpServerUtility.UrlEncode%2A> method of the HttpServerUtility class. The <xref:System.Web.HttpServerUtility.HtmlEncode%2A> method helps ensure that any user-supplied string input will be rendered as static text in browsers instead of executable script or HTML elements. The <xref:System.Web.HttpServerUtility.UrlEncode%2A> method encodes URLs so that they are correctly transmitted in the HTTP stream.  \n  \n [!code-cs[System.Web.HttpServerUtility1#1](~/add/codesnippet/csharp/t-system.web.httpserveru_1.aspx)]\n [!code-vb[System.Web.HttpServerUtility1#1](~/add/codesnippet/visualbasic/t-system.web.httpserveru_1.aspx)]"
  syntax:
    content: public sealed class HttpServerUtility
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.HttpServerUtility.ClearError
  id: ClearError
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: ClearError()
  nameWithType: HttpServerUtility.ClearError()
  fullName: System.Web.HttpServerUtility.ClearError()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "에 이전 예외를 지웁니다."
  remarks: ''
  example:
  - "The following example clears the last exception that was thrown.  \n  \n [!code-cs[Classic HttpServerUtility.ClearError Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_6_1.cs)]\n [!code-vb[Classic HttpServerUtility.ClearError Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_6_1.vb)]"
  syntax:
    content: public void ClearError ();
    parameters: []
  overload: System.Web.HttpServerUtility.ClearError*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpServerUtility.CreateObject(System.String)
  id: CreateObject(System.String)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: CreateObject(String)
  nameWithType: HttpServerUtility.CreateObject(String)
  fullName: System.Web.HttpServerUtility.CreateObject(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "개체의 ProgID (프로그래밍 식별자)로 식별 되는 COM 개체의 서버 인스턴스를 만듭니다."
  remarks: ''
  example:
  - "The following example creates an object by using the object's ProgID.  \n  \n [!code-vb[Classic HttpServerUtility.CreateObject Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_4_1.vb)]\n [!code-cs[Classic HttpServerUtility.CreateObject Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_4_1.cs)]"
  syntax:
    content: public object CreateObject (string progID);
    parameters:
    - id: progID
      type: System.String
      description: "클래스 또는 형식의 개체의 인스턴스를 만듭니다."
    return:
      type: System.Object
      description: "새 개체입니다."
  overload: System.Web.HttpServerUtility.CreateObject*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "개체의 인스턴스를 만들 수 없습니다."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.CreateObject(System.Type)
  id: CreateObject(System.Type)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: CreateObject(Type)
  nameWithType: HttpServerUtility.CreateObject(Type)
  fullName: System.Web.HttpServerUtility.CreateObject(Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "개체의 형식으로 식별 되는 COM 개체의 서버 인스턴스를 만듭니다."
  syntax:
    content: public object CreateObject (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>만들 개체를 나타내는.</xref:System.Type>"
    return:
      type: System.Object
      description: "새 개체입니다."
  overload: System.Web.HttpServerUtility.CreateObject*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)
  id: CreateObjectFromClsid(System.String)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: CreateObjectFromClsid(String)
  nameWithType: HttpServerUtility.CreateObjectFromClsid(String)
  fullName: System.Web.HttpServerUtility.CreateObjectFromClsid(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "개체의 CLSID (클래스 식별자)로 식별 되는 COM 개체의 서버 인스턴스를 만듭니다."
  remarks: ''
  example:
  - "The following example demonstrates how to use the CreateObjectFromClsid method to create a server instance of a COM object.  \n  \n [!code-cs[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_2_1.cs)]\n [!code-vb[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_2_1.vb)]"
  syntax:
    content: public object CreateObjectFromClsid (string clsid);
    parameters:
    - id: clsid
      type: System.String
      description: "인스턴스를 만들 개체의 클래스 식별자입니다."
    return:
      type: System.Object
      description: "새 개체입니다."
  overload: System.Web.HttpServerUtility.CreateObjectFromClsid*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "개체의 인스턴스를 만들 수 없습니다."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.Execute(System.String)
  id: Execute(System.String)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: Execute(String)
  nameWithType: HttpServerUtility.Execute(String)
  fullName: System.Web.HttpServerUtility.Execute(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "현재 요청의 컨텍스트에서 지정된 된 가상 경로 대 한 처리기를 실행합니다."
  remarks: "Execute 메서드는 새 페이지의 실행이 완료 된 후 원래 페이지의 실행을 계속 합니다. <xref:System.Web.HttpServerUtility.Transfer%2A>무조건 메서드를 다른 처리기 실행을 이동 합니다.</xref:System.Web.HttpServerUtility.Transfer%2A>       ASP.NET에서 현재 사용자에 게 Execute 메서드에서 제공 하는 리소스를 볼 수 있는 권한이 있는지 확인 하지 않습니다. 원래 리소스 처리기가 호출 되기 전에 ASP.NET 권한 부여 및 인증 논리가 실행, ASP.NET 직접 Execute 메서드가 나타내는 처리기를 호출 및이 새 리소스에 대 한 인증 및 권한 부여 논리를 다시 실행 하지 않습니다. 응용 프로그램의 보안 정책에 따라 클라이언트가 리소스에 액세스할 수 있는 적절 한 권한의 응용 프로그램 가지도록 하거나 사용자 지정 액세스 제어 메커니즘을 제공 해야 합니다.       사용 하 여 가지도록 수는 <xref:System.Web.HttpResponse.Redirect%2A>Execute 메서드 대신 메서드.</xref:System.Web.HttpResponse.Redirect%2A> <xref:System.Web.HttpResponse.Redirect%2A>브라우저에서 새 리소스를 요청 하는 클라이언트 쪽 리디렉션을 수행 합니다.</xref:System.Web.HttpResponse.Redirect%2A> 이 페이지는 시스템에 들어오는 새 요청 이기 때문에 인터넷 정보 서비스 (IIS) 및 ASP.NET 모두 보안 정책의 모든 인증 및 권한 부여 논리를 거쳐야 합니다.       사용자에 게 사용 하는 사용자 지정 권한 부여 메서드를 통합 하 여 리소스를 볼 수 있는 권한이 있는지 확인할 수 있습니다는 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>메서드는 응용 프로그램 Execute 메서드를 호출 하기 전에.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>"
  example:
  - "The following example displays the .aspx page \"Updateinfo.aspx\" in the current directory. Program execution returns to the starting page after the Updateinfo.aspx page is displayed.  \n  \n [!code-vb[Classic HttpServerUtility.Execute Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_15_1.vb)]\n [!code-cs[Classic HttpServerUtility.Execute Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_15_1.cs)]"
  syntax:
    content: public void Execute (string path);
    parameters:
    - id: path
      type: System.String
      description: "실행할 URL 경로입니다."
  overload: System.Web.HttpServerUtility.Execute*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The current <xref href=\"System.Web.HttpContext\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n An error occurred while executing the handler specified by <code>path</code>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>path</code> is not a virtual path."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.Execute(System.String,System.Boolean)
  id: Execute(System.String,System.Boolean)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: Execute(String,Boolean)
  nameWithType: HttpServerUtility.Execute(String,Boolean)
  fullName: System.Web.HttpServerUtility.Execute(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "현재 요청의 컨텍스트에서 지정된 된 가상 경로 대 한 처리기를 실행 하 고을 지울지 여부를 지정 된 <> </> *> 및 <> </> *> 컬렉션입니다."
  remarks: ''
  example:
  - "The following example shows how to execute the .aspx page `Updateinfo.aspx` in the current request and preserve the <xref:System.Web.HttpRequest.QueryString%2A> and <xref:System.Web.HttpRequest.Form%2A> collections. Program execution returns to the starting page after `Updateinfo.aspx` is displayed.  \n  \n [!code-vb[HttpServerUtility.Execute#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_16_1.aspx)]\n [!code-cs[HttpServerUtility.Execute#1](~/add/codesnippet/csharp/m-system.web.httpserveru_16_1.aspx)]"
  syntax:
    content: public void Execute (string path, bool preserveForm);
    parameters:
    - id: path
      type: System.String
      description: "실행할 URL 경로입니다."
    - id: preserveForm
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>유지 하기 위해는 <> </> *> 및 <> </> *> 컬렉션 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to clear the <>*> and <>*> collections."
  overload: System.Web.HttpServerUtility.Execute*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The current <xref href=\"System.Web.HttpContext\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n An error occurred while executing the handler specified by <code>path</code>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>path</code> is not a virtual path."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter)
  id: Execute(System.String,System.IO.TextWriter)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: Execute(String,TextWriter)
  nameWithType: HttpServerUtility.Execute(String,TextWriter)
  fullName: System.Web.HttpServerUtility.Execute(String,TextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "현재 요청의 컨텍스트에서 지정된 된 가상 경로 대 한 처리기를 실행합니다. A <xref:System.IO.TextWriter>처리기의 출력을 캡처합니다.</xref:System.IO.TextWriter>"
  remarks: "Execute 메서드는 지정 된 가상 경로 실행이 완료 된 후 원래 요청을 실행을 계속 합니다. <xref:System.Web.HttpServerUtility.Transfer%2A>무조건 메서드를 다른 처리기 실행을 이동 합니다.</xref:System.Web.HttpServerUtility.Transfer%2A>       ASP.NET에서 현재 사용자에 게 Execute 메서드에서 제공 하는 리소스를 볼 수 있는 권한이 있는지 확인 하지 않습니다. 원래 리소스 처리기가 호출 되기 전에 ASP.NET 권한 부여 및 인증 논리가 실행, ASP.NET 직접 Execute 메서드가 나타내는 처리기를 호출 및이 새 리소스에 대 한 인증 및 권한 부여 논리를 다시 실행 하지 않습니다. 응용 프로그램의 보안 정책에 따라 클라이언트가 리소스에 액세스할 수 있는 적절 한 권한의 응용 프로그램 가지도록 하거나 사용자 지정 액세스 제어 메커니즘을 제공 해야 합니다.       사용 하 여 가지도록 수는 <xref:System.Web.HttpResponse.Redirect%2A>Execute 메서드 대신 메서드.</xref:System.Web.HttpResponse.Redirect%2A> <xref:System.Web.HttpResponse.Redirect%2A>브라우저에서 새 리소스를 요청 하는 클라이언트 쪽 리디렉션을 수행 합니다.</xref:System.Web.HttpResponse.Redirect%2A> 이 페이지는 시스템에 들어오는 새 요청 이기 때문에 인터넷 정보 서비스 (IIS) 및 ASP.NET 모두 보안 정책의 모든 인증 및 권한 부여 논리를 거쳐야 합니다.       사용자에 게 사용 하는 사용자 지정 권한 부여 메서드를 통합 하 여 리소스를 볼 수 있는 권한이 있는지 확인할 수 있습니다는 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>메서드는 응용 프로그램 Execute 메서드를 호출 하기 전에.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>"
  example:
  - "The following example executes the `Login.aspx` page on the server in the current directory and receives the output from the page through the <xref:System.IO.StringWriter> object `writer`. It writes the HTML stream received from `writer` to the HTTP output stream.  \n  \n [!code-cs[Classic HttpServerUtility.Execute1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_12_1.cs)]\n [!code-vb[Classic HttpServerUtility.Execute1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_12_1.vb)]"
  syntax:
    content: public void Execute (string path, System.IO.TextWriter writer);
    parameters:
    - id: path
      type: System.String
      description: "실행할 URL 경로입니다."
    - id: writer
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>출력을 캡처할.</xref:System.IO.TextWriter>"
  overload: System.Web.HttpServerUtility.Execute*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The current <xref href=\"System.Web.HttpContext\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n An error occurred while executing the handler specified by <code>path</code>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>path</code> is not a virtual path."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)
  id: Execute(System.String,System.IO.TextWriter,System.Boolean)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: Execute(String,TextWriter,Boolean)
  nameWithType: HttpServerUtility.Execute(String,TextWriter,Boolean)
  fullName: System.Web.HttpServerUtility.Execute(String,TextWriter,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "현재 요청의 컨텍스트에서 지정된 된 가상 경로 대 한 처리기를 실행합니다. A <xref:System.IO.TextWriter>페이지와 부울 매개 변수에서 출력을 캡처하며를 지울지 여부를 지정 된 <> </> *> 및 <> </> *> 컬렉션.</xref:System.IO.TextWriter>"
  remarks: "<xref:System.Web.HttpServerUtility.Execute%2A>메서드 지정된 된 가상 경로 실행이 완료 된 후 원래 요청의 실행을 계속 합니다.</xref:System.Web.HttpServerUtility.Execute%2A> <xref:System.Web.HttpServerUtility.Transfer%2A>무조건 메서드를 다른 처리기 실행을 이동 합니다.</xref:System.Web.HttpServerUtility.Transfer%2A>       ASP.NET에서 현재 사용자에 게 Execute 메서드에서 제공 하는 리소스를 볼 수 있는 권한이 있는지 확인 하지 않습니다. 원래 리소스 처리기가 호출 되기 전에 ASP.NET 권한 부여 및 인증 논리가 실행, ASP.NET 직접 Execute 메서드가 나타내는 처리기를 호출 및이 새 리소스에 대 한 인증 및 권한 부여 논리를 다시 실행 하지 않습니다. 응용 프로그램의 보안 정책에 따라 클라이언트가 리소스에 액세스할 수 있는 적절 한 권한의 응용 프로그램 가지도록 하거나 사용자 지정 액세스 제어 메커니즘을 제공 해야 합니다.       사용 하 여 가지도록 수는 <xref:System.Web.HttpResponse.Redirect%2A>Execute 메서드 대신 메서드.</xref:System.Web.HttpResponse.Redirect%2A> <xref:System.Web.HttpResponse.Redirect%2A>브라우저에서 새 리소스를 요청 하는 클라이언트 쪽 리디렉션을 수행 합니다.</xref:System.Web.HttpResponse.Redirect%2A> 이 페이지는 시스템에 들어오는 새 요청 이기 때문에 인터넷 정보 서비스 (IIS) 및 ASP.NET 모두 보안 정책의 모든 인증 및 권한 부여 논리를 거쳐야 합니다.       사용자에 게 사용 하는 사용자 지정 권한 부여 메서드를 통합 하 여 리소스를 볼 수 있는 권한이 있는지 확인할 수 있습니다는 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>메서드는 응용 프로그램 Execute 메서드를 호출 하기 전에.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>"
  example:
  - "The following example executes the `Login.aspx` page on the server in the current directory and receives the output from the page through the <xref:System.IO.StringWriter> object `writer`. It writes the HTML stream received from `writer` to the HTTP output stream. The contents of the <xref:System.Web.HttpRequest.Form%2A> and <xref:System.Web.HttpRequest.QueryString%2A> collections are preserved.  \n  \n [!code-cs[HttpServerUtility.Execute02#1](~/add/codesnippet/csharp/0d13d28c-0070-4c47-b943-_1.aspx)]\n [!code-vb[HttpServerUtility.Execute02#1](~/add/codesnippet/visualbasic/0d13d28c-0070-4c47-b943-_1.aspx)]"
  syntax:
    content: public void Execute (string path, System.IO.TextWriter writer, bool preserveForm);
    parameters:
    - id: path
      type: System.String
      description: "실행할 URL 경로입니다."
    - id: writer
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>출력을 캡처할.</xref:System.IO.TextWriter>"
    - id: preserveForm
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>유지 하기 위해는 <> </> *> 및 <> </> *> 컬렉션 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to clear the <>*> and <>*> collections."
  overload: System.Web.HttpServerUtility.Execute*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The current <xref href=\"System.Web.HttpContext\"></xref> is a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic).  \n  \n \\- or -  \n  \n <code>path</code> ends with a period (.).  \n  \n \\- or -  \n  \n An error occurred while executing the handler specified by <code>path</code>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>가상 경로가 아닙니다."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)
  id: Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: Execute(IHttpHandler,TextWriter,Boolean)
  nameWithType: HttpServerUtility.Execute(IHttpHandler,TextWriter,Boolean)
  fullName: System.Web.HttpServerUtility.Execute(IHttpHandler,TextWriter,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "현재 요청의 컨텍스트에서 지정된 된 가상 경로 대 한 처리기를 실행합니다. A <xref:System.IO.TextWriter>처리기 및 부울 매개 변수에서 출력을 캡처하며를 지울지 여부를 지정 된 <> </> *> 및 <> </> *> 컬렉션.</xref:System.IO.TextWriter>"
  remarks: "공용 언어 사양 (CLS)와 호환 되는 모든 언어에 있는 HTTP 요청의 특정, 미리 정의 된 형식을 처리 하려면 사용자 지정 HTTP 처리기를 작성할 수 있습니다. 기본 ASP (클래식 ASP) 페이지 또는 ASP.NET 페이지 대신 HTTP 처리기 클래스에 정의 된 실행 코드에서 이러한 특정 요청에 응답 합니다. HTTP 처리기 저수준 요청 및 응답 인터넷 정보 서비스 (IIS)를 실행 하는 웹 서버 서비스와 상호 작용할 수와 다르지만 유사한 기능을 제공 하면서 ISAPI 확장과 더 간단한 프로그래밍 모델을 사용 합니다.       ASP.NET에서 현재 사용자에 게 Execute 메서드에서 전달 되는 리소스를 볼 수 있는 권한이 있는지 확인 하지 않습니다. 원래 리소스 처리기가 호출 되기 전에 ASP.NET 권한 부여 및 인증 논리가 실행, ASP.NET Execute 메서드에서 표시 되 고 새 리소스에 대 한 인증 및 권한 부여 논리를 다시 실행 하지 않는 하는 처리기를 직접 호출 합니다. 응용 프로그램에 대 한 보안 정책상 클라이언트가 리소스에 액세스할 수 있는 적절 한 권한을 응용 프로그램 가지도록 하거나 사용자 지정 액세스 제어 메커니즘을 제공 해야 합니다.       사용 하 여 가지도록 수는 <xref:System.Web.HttpResponse.Redirect%2A>Execute 메서드 대신 메서드.</xref:System.Web.HttpResponse.Redirect%2A> <xref:System.Web.HttpResponse.Redirect%2A>브라우저는 새 리소스를 요청 하는 클라이언트 쪽 리디렉션을 수행 합니다.</xref:System.Web.HttpResponse.Redirect%2A> 이 페이지는 시스템에 들어오는 새 요청 이기 때문에 IIS와 ASP.NET 보안 정책의 모든 인증 및 권한 부여 논리를 거쳐야 합니다.       사용자에 게 사용 하는 사용자 지정 권한 부여 메서드를 통합 하 여 리소스를 볼 수 있는 권한이 있는지 확인할 수 있습니다는 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>메서드는 응용 프로그램 Execute 메서드를 호출 하기 전에.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>"
  syntax:
    content: public void Execute (System.Web.IHttpHandler handler, System.IO.TextWriter writer, bool preserveForm);
    parameters:
    - id: handler
      type: System.Web.IHttpHandler
      description: "구현 하는 HTTP 처리기는 <xref href=&quot;System.Web.IHttpHandler&quot;> </xref> 를 현재 요청을 전송 합니다."
    - id: writer
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>출력을 캡처할.</xref:System.IO.TextWriter>"
    - id: preserveForm
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>유지 하기 위해는 <> </> *> 및 <> </> *> 컬렉션 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to clear the <>*> and <>*> collections."
  overload: System.Web.HttpServerUtility.Execute*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "에 지정 된 처리기를 실행 하는 동안 오류가 발생 했습니다. <code> handler </code>합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>handler</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.GetLastError
  id: GetLastError
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: GetLastError()
  nameWithType: HttpServerUtility.GetLastError()
  fullName: System.Web.HttpServerUtility.GetLastError()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "에 이전 예외를 반환합니다."
  remarks: ''
  example:
  - "The following example prints a description of the application's last error to the HTTP output stream. It prints \"No Errors\" if no errors have been encountered.  \n  \n [!code-vb[Classic HttpServerUtility.GetLastError Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_8_1.vb)]\n [!code-cs[Classic HttpServerUtility.GetLastError Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_8_1.cs)]"
  syntax:
    content: public Exception GetLastError ();
    parameters: []
    return:
      type: System.Exception
      description: "Throw 된 이전 예외입니다."
  overload: System.Web.HttpServerUtility.GetLastError*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpServerUtility.HtmlDecode(System.String)
  id: HtmlDecode(System.String)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: HtmlDecode(String)
  nameWithType: HttpServerUtility.HtmlDecode(String)
  fullName: System.Web.HttpServerUtility.HtmlDecode(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "HTML 인코딩된 문자열을 디코딩하여 디코딩된 문자열을 반환 합니다."
  remarks: "HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML. For example, if a text string contains a less than sign (\\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag. When the characters are HTML encoded, they are converted to the strings `<` and `>`, which causes the browser to display the less than sign and greater than sign correctly. HtmlDecode decodes text that has been transmitted to the server.  \n  \n This method is a convenient way to access the <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, this method uses <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=fullName> to decode strings.  \n  \n In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property. In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.  \n  \n Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values."
  example:
  - "The following example contains the function `LoadDecodedFile`, which decodes the data from a file and copies it into one string.  \n  \n [!code-cs[Classic HttpServerUtility.HtmlDecode Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_14_1.aspx)]\n [!code-vb[Classic HttpServerUtility.HtmlDecode Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_14_1.aspx)]"
  syntax:
    content: public string HtmlDecode (string s);
    parameters:
    - id: s
      type: System.String
      description: "디코딩할 HTML 문자열입니다."
    return:
      type: System.String
      description: "디코딩된 텍스트입니다."
  overload: System.Web.HttpServerUtility.HtmlDecode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)
  id: HtmlDecode(System.String,System.IO.TextWriter)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: HtmlDecode(String,TextWriter)
  nameWithType: HttpServerUtility.HtmlDecode(String,TextWriter)
  fullName: System.Web.HttpServerUtility.HtmlDecode(String,TextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "HTML 인코딩된 문자열을 디코드 하 고 결과 출력을 보냅니다는 <xref:System.IO.TextWriter>출력 스트림에.</xref:System.IO.TextWriter>"
  remarks: "HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML. For example, if a text string contains a less than sign (\\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag. When the characters are HTML encoded, they are converted to the strings `<` and `>`, which causes the browser to display the less than sign and greater than sign correctly.  \n  \n <xref:System.Web.HttpServerUtility.HtmlDecode%2A> decodes text that has been transmitted to the server.  \n  \n <xref:System.Web.HttpServerUtility.HtmlDecode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, <xref:System.Web.HttpServerUtility.HtmlDecode%2A> uses <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=fullName> to decode strings.  \n  \n To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class."
  example:
  - "The following example decodes a string that has been HTML-encoded for transmission over HTTP. It decodes the supplied string named `EncodedString` which contains the text \"This is a &lt;Test String&gt;.\", and copies it into the string named `DecodedString` as \"This is a \\<Test String>.\".  \n  \n [!code-vb[Classic HttpServerUtility.HtmlDecode1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_1_1.vb)]\n [!code-cs[Classic HttpServerUtility.HtmlDecode1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_1_1.cs)]"
  syntax:
    content: public void HtmlDecode (string s, System.IO.TextWriter output);
    parameters:
    - id: s
      type: System.String
      description: "디코딩할 HTML 문자열입니다."
    - id: output
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>디코딩된 문자열을 포함 하는 출력 스트림입니다.</xref:System.IO.TextWriter>"
  overload: System.Web.HttpServerUtility.HtmlDecode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpServerUtility.HtmlEncode(System.String)
  id: HtmlEncode(System.String)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: HtmlEncode(String)
  nameWithType: HttpServerUtility.HtmlEncode(String)
  fullName: System.Web.HttpServerUtility.HtmlEncode(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "문자열을 HTML로 인코딩하고 인코딩된 문자열을 반환 합니다."
  remarks: "HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML. For example, if a text string contains a less than sign (\\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag. When the characters are HTML encoded, they are converted to the strings `<` and `>`, which causes the browser to display the less than sign and greater than sign correctly.  \n  \n This method is a convenient way to access the <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, this method uses <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=fullName> to encode strings.  \n  \n In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property. In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.  \n  \n Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values."
  example:
  - "The following example shows how to HTML-encode a value that potentially codes unsafe code. The code resides in the code-behind file for a web page. The value to encode is hard-coded in this example only to simplify the example and show the type of value you might HTML-encode. Typically, you would HTML-encode a value that you received from the user or the request. `Result` refers to a `Literal` control.  \n  \n [!code-cs[System.Web.HttpServerUtility.HtmlEncode#1](~/add/codesnippet/csharp/m-system.web.httpserveru_10_1.cs)]\n [!code-vb[System.Web.HttpServerUtility.HtmlEncode#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_10_1.vb)]  \n  \n The next example is similar to the previous example except it shows how to HTML-encode a value from within a class that is not in the code-behind file.  \n  \n [!code-cs[System.Web.HttpServerUtility.HtmlEncode#2](~/add/codesnippet/csharp/m-system.web.httpserveru_10_2.cs)]\n [!code-vb[System.Web.HttpServerUtility.HtmlEncode#2](~/add/codesnippet/visualbasic/m-system.web.httpserveru_10_2.vb)]"
  syntax:
    content: public string HtmlEncode (string s);
    parameters:
    - id: s
      type: System.String
      description: "인코딩할 텍스트 문자열입니다."
    return:
      type: System.String
      description: "HTML로 인코딩된 텍스트입니다."
  overload: System.Web.HttpServerUtility.HtmlEncode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)
  id: HtmlEncode(System.String,System.IO.TextWriter)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: HtmlEncode(String,TextWriter)
  nameWithType: HttpServerUtility.HtmlEncode(String,TextWriter)
  fullName: System.Web.HttpServerUtility.HtmlEncode(String,TextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "HTML-문자열을 인코딩하고 그 결과를 출력 한 <xref:System.IO.TextWriter>출력 스트림에.</xref:System.IO.TextWriter>"
  remarks: "HTML encoding ensures that text will be correctly displayed in the browser, not interpreted by the browser as HTML. For example, if a text string contains a less than sign (\\<) or greater than sign (>), the browser would interpret these characters as an opening or closing bracket of an HTML tag. The HTML encoding of these two characters is `<` and `>`, respectively, which causes the browser to display the less than sign and greater than sign correctly.  \n  \n <xref:System.Web.HttpServerUtility.HtmlEncode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, <xref:System.Web.HttpServerUtility.HtmlEncode%2A> uses <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=fullName> to encode strings.  \n  \n To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class."
  example:
  - "The following example encodes a string for transmission by HTTP. It encodes the string named `TestString`, which contains the text \"This is a \\<Test String>.\", and copies it into the string named `EncodedString` as \"This is a &lt;Test String&gt;.\".  \n  \n [!code-vb[Classic HttpServerUtility.HtmlEncode1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_7_1.vb)]\n [!code-cs[Classic HttpServerUtility.HtmlEncode1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_7_1.cs)]"
  syntax:
    content: public void HtmlEncode (string s, System.IO.TextWriter output);
    parameters:
    - id: s
      type: System.String
      description: "인코딩할 문자열입니다."
    - id: output
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>인코딩된 문자열을 포함 하는 출력 스트림입니다.</xref:System.IO.TextWriter>"
  overload: System.Web.HttpServerUtility.HtmlEncode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpServerUtility.MachineName
  id: MachineName
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: MachineName
  nameWithType: HttpServerUtility.MachineName
  fullName: System.Web.HttpServerUtility.MachineName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "서버의 컴퓨터 이름을 가져옵니다."
  remarks: ''
  example:
  - "The following example stores the server's computer name as a string variable.  \n  \n [!code-vb[Classic HttpServerUtility.MachineName Example#1](~/add/codesnippet/visualbasic/p-system.web.httpserveru_0_1.vb)]\n [!code-cs[Classic HttpServerUtility.MachineName Example#1](~/add/codesnippet/csharp/p-system.web.httpserveru_0_1.cs)]"
  syntax:
    content: public string MachineName { get; }
    return:
      type: System.String
      description: "로컬 컴퓨터의 이름입니다."
  overload: System.Web.HttpServerUtility.MachineName*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "컴퓨터 이름을 찾을 수 없습니다."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.MapPath(System.String)
  id: MapPath(System.String)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: MapPath(String)
  nameWithType: HttpServerUtility.MapPath(String)
  fullName: System.Web.HttpServerUtility.MapPath(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "지정된 된 가상 경로에 해당 하는 실제 파일 경로 반환 합니다."
  remarks: "If `path` is `null`, the MapPath method returns the full physical path of the directory that contains the current request for the path. The relative path does not need to specify an existing file or folder for this method to return a value. However, you cannot specify a path outside of the Web application.  \n  \n> [!IMPORTANT]\n>  The MapPath method potentially contains sensitive information about the hosting environment. The return value should not be displayed to users.  \n  \n A Web application that resides at `C:\\ExampleSites\\TestMapPath` would return the following results:  \n  \n|Request from|`path`|Returned value|  \n|------------------|------------|--------------------|  \n|RootLevelPage.aspx|`null`|C:\\ExampleSites\\TestMapPath|  \n|RootLevelPage.aspx|\"/DownOneLevel/DownLevelPage.aspx\"|C:\\ExampleSites\\TestMapPath\\DownOneLevel\\DownLevelPage.aspx|  \n|RootLevelPage.aspx|\"/NotRealFolder\"|C:\\ExampleSites\\TestMapPath\\NotRealFolder|  \n|RootLevelPage.aspx|\"../OutsideApplication\"|<xref:System.Web.HttpException>|  \n|/DownOneLevel/DownLevelPage.aspx|`null`|C:\\ExampleSites\\TestMapPath\\DownOneLevel|  \n|/DownOneLevel/DownLevelPage.aspx|\"../RootLevelPage.aspx\"|C:\\ExampleSites\\TestMapPath\\RootLevelPage.aspx|"
  example:
  - "The following example shows how to retrieve the physical file of a relative virtual path. The code resides in the code-behind file for a web page and utilizes the default `Server` object.  \n  \n [!code-cs[System.Web.HttpServerUtility.MapPath#1](~/add/codesnippet/csharp/m-system.web.httpserveru_5_1.cs)]\n [!code-vb[System.Web.HttpServerUtility.MapPath#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_5_1.vb)]  \n  \n The next example is similar to the previous example except it shows how to retrieve a physical path from within a class that is not in the code-behind file.  \n  \n [!code-cs[System.Web.HttpServerUtility.MapPath#2](~/add/codesnippet/csharp/m-system.web.httpserveru_5_2.cs)]\n [!code-vb[System.Web.HttpServerUtility.MapPath#2](~/add/codesnippet/visualbasic/m-system.web.httpserveru_5_2.vb)]"
  syntax:
    content: public string MapPath (string path);
    parameters:
    - id: path
      type: System.String
      description: "웹 응용 프로그램에서 가상 경로입니다."
    return:
      type: System.String
      description: "에 해당 하는 웹 서버에서 실제 파일 경로 <code> path </code>합니다."
  overload: System.Web.HttpServerUtility.MapPath*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The current <xref href=&quot;System.Web.HttpContext&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.ScriptTimeout
  id: ScriptTimeout
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: ScriptTimeout
  nameWithType: HttpServerUtility.ScriptTimeout
  fullName: System.Web.HttpServerUtility.ScriptTimeout
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "가져오고 요청 제한 시간 값 (초)에서으로 설정 합니다."
  remarks: "ScriptTimeout 속성을 설정 하 여 Web.config 파일에서 설정할 수 있습니다는 `executionTimeout` 요소의 특성입니다. ScriptTimeout 속성을 사용 하 여 프로그래밍 방식으로 제한 시간 설정 Web.config 설정 보다 우선 적용 합니다.      > [!NOTE] > 설정 하는 경우는 `debug` 요소의 특성 `true` Web.config 파일에 ScriptTimeout의 값이 무시 됩니다."
  example:
  - "The following example sets the request time-out period to 60 seconds.  \n  \n [!code-vb[Classic HttpServerUtility.ScriptTimeout Example#1](~/add/codesnippet/visualbasic/p-system.web.httpserveru_1_1.vb)]\n [!code-cs[Classic HttpServerUtility.ScriptTimeout Example#1](~/add/codesnippet/csharp/p-system.web.httpserveru_1_1.cs)]"
  syntax:
    content: public int ScriptTimeout { get; set; }
    return:
      type: System.Int32
      description: "요청에 대 한 제한 시간 값 설정입니다."
  overload: System.Web.HttpServerUtility.ScriptTimeout*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The current <xref href=&quot;System.Web.HttpContext&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "제한 시간은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 이거나 설정할 수 없습니다."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.Transfer(System.String)
  id: Transfer(System.String)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: Transfer(String)
  nameWithType: HttpServerUtility.Transfer(String)
  fullName: System.Web.HttpServerUtility.Transfer(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "현재 요청에 대 한 페이지의 지정된 된 URL 경로 사용 하 여 새 페이지의 현재 페이지와 시작 실행의 실행을 종료 합니다."
  remarks: "전송 페이지에는 다른.aspx 페이지 해야 합니다. 예를 들어.asp 또는.asmx 페이지로 전송 올바르지 않습니다. 전송 메서드 유지는 <xref:System.Web.HttpRequest.QueryString%2A>및 <xref:System.Web.HttpRequest.Form%2A>컬렉션.</xref:System.Web.HttpRequest.Form%2A> </xref:System.Web.HttpRequest.QueryString%2A>       호출을 전송 <xref:System.Web.HttpResponse.End%2A>을 throw 하는 <xref:System.Threading.ThreadAbortException>완료 시 예외.</xref:System.Threading.ThreadAbortException> </xref:System.Web.HttpResponse.End%2A>       ASP.NET에서 현재 사용자에 게 전송 방법을 제공 하는 리소스를 볼 수 있는 권한이 있는지 확인 하지 않습니다. 원래 리소스 처리기가 호출 되기 전에 ASP.NET 권한 부여 및 인증 논리가 실행, ASP.NET 직접 전송 메서드에 의해 지정 된 처리기를 호출 및이 새 리소스에 대 한 인증 및 권한 부여 논리를 다시 실행 하지 않습니다. 응용 프로그램의 보안 정책에 따라 클라이언트가 리소스에 액세스할 수 있는 적절 한 권한의 응용 프로그램 가지도록 하거나 사용자 지정 액세스 제어 메커니즘을 제공 해야 합니다.       사용 하 여 가지도록 수는 <xref:System.Web.HttpResponse.Redirect%2A>메서드는 전송 메서드 대신.</xref:System.Web.HttpResponse.Redirect%2A> <xref:System.Web.HttpResponse.Redirect%2A>메서드는 브라우저에서 새 리소스를 요청 하는 클라이언트 쪽 리디렉션을 수행 합니다.</xref:System.Web.HttpResponse.Redirect%2A> 이 페이지는 시스템에 들어오는 새 요청 이기 때문에 인터넷 정보 서비스 (IIS) 및 ASP.NET 모두 보안 정책의 모든 인증 및 권한 부여 논리를 거쳐야 합니다.       사용자에 게 사용 하는 사용자 지정 권한 부여 메서드를 통합 하 여 리소스를 볼 수 있는 권한이 있는지 확인할 수 있습니다는 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>메서드는 전송 메서드를 호출 하는 응용 프로그램 전에.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>"
  syntax:
    content: public void Transfer (string path);
    parameters:
    - id: path
      type: System.String
      description: "서버에서 실행할 새 페이지의 URL 경로입니다."
  overload: System.Web.HttpServerUtility.Transfer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)
  id: Transfer(System.String,System.Boolean)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: Transfer(String,Boolean)
  nameWithType: HttpServerUtility.Transfer(String,Boolean)
  fullName: System.Web.HttpServerUtility.Transfer(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "현재 페이지의 실행을 종료 하 고 페이지의 지정된 된 URL 경로 사용 하 여 새 페이지의 실행을 시작 합니다. 지울지 여부를 지정 된 <> </> *> 및 <> </> *> 컬렉션입니다."
  remarks: "전송 페이지에는 다른.aspx 페이지 해야 합니다. 예를 들어.asp 또는.asmx 페이지로 전송 올바르지 않습니다.       호출을 전송 <xref:System.Web.HttpResponse.End%2A>을 throw 하는 <xref:System.Threading.ThreadAbortException>완료 시 예외.</xref:System.Threading.ThreadAbortException> </xref:System.Web.HttpResponse.End%2A>       설정 하는 경우는 `preserveForm` 매개 변수를 `true`, 대상 페이지를 사용 하 여 이전 페이지의 보기 상태에 액세스할 수는 <xref:System.Web.UI.Page.PreviousPage%2A>속성.</xref:System.Web.UI.Page.PreviousPage%2A>       보안을 위해 유지 해야는 `enableViewStateMac` 특성이로 설정 `true`합니다. ASP.NET에서 현재 사용자에 게 전송 방법을 제공 하는 리소스를 볼 수 있는 권한이 있는지 확인 하지 않습니다. 원래 리소스 처리기가 호출 되기 전에 ASP.NET 권한 부여 및 인증 논리가 실행, ASP.NET 직접 전송 메서드에 의해 지정 된 처리기를 호출 및이 새 리소스에 대 한 인증 및 권한 부여 논리를 다시 실행 하지 않습니다. 응용 프로그램의 보안 정책에 따라 클라이언트가 리소스에 액세스할 수 있는 적절 한 권한의 응용 프로그램 가지도록 하거나 사용자 지정 액세스 제어 메커니즘을 제공 해야 합니다.       사용 하 여 가지도록 수는 <xref:System.Web.HttpResponse.Redirect%2A>메서드는 전송 메서드 대신.</xref:System.Web.HttpResponse.Redirect%2A> <xref:System.Web.HttpResponse.Redirect%2A>메서드는 브라우저에서 새 리소스를 요청 하는 클라이언트 쪽 리디렉션을 수행 합니다.</xref:System.Web.HttpResponse.Redirect%2A> 이 페이지는 시스템에 들어오는 새 요청 이기 때문에 인터넷 정보 서비스 (IIS) 및 ASP.NET 모두 보안 정책의 모든 인증 및 권한 부여 논리를 거쳐야 합니다.       사용자에 게 사용 하는 사용자 지정 권한 부여 메서드를 통합 하 여 리소스를 볼 수 있는 권한이 있는지 확인할 수 있습니다는 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>메서드는 전송 메서드를 호출 하는 응용 프로그램 전에.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>"
  example:
  - "The following example executes a new page in the same directory as the current page.  \n  \n [!code-cs[Classic HttpServerUtility.Transfer Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_3_1.cs)]\n [!code-vb[Classic HttpServerUtility.Transfer Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_3_1.vb)]"
  syntax:
    content: public void Transfer (string path, bool preserveForm);
    parameters:
    - id: path
      type: System.String
      description: "서버에서 실행할 새 페이지의 URL 경로입니다."
    - id: preserveForm
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>유지 하기 위해는 <> </> *> 및 <> </> *> 컬렉션 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to clear the <>*> and <>*> collections."
  overload: System.Web.HttpServerUtility.Transfer*
  exceptions:
  - type: System.ApplicationException
    commentId: T:System.ApplicationException
    description: "현재 페이지 요청은 콜백입니다."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)
  id: Transfer(System.Web.IHttpHandler,System.Boolean)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: Transfer(IHttpHandler,Boolean)
  nameWithType: HttpServerUtility.Transfer(IHttpHandler,Boolean)
  fullName: System.Web.HttpServerUtility.Transfer(IHttpHandler,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "현재 페이지의 실행을 종료 하 고 구현 하는 사용자 지정 HTTP 처리기를 사용 하 여 새 요청의 실행을 시작 하는 <xref href=&quot;System.Web.IHttpHandler&quot;> </xref> 을 지울지 여부를 지정 하 고 인터페이스의 <> </> *> 및 <> </> *> 컬렉션입니다."
  remarks: "공용 언어 사양 (CLS)와 호환 되는 모든 언어에 있는 HTTP 요청의 특정, 미리 정의 된 형식을 처리 하려면 사용자 지정 HTTP 처리기를 작성할 수 있습니다. 기본 ASP (클래식 ASP) 페이지 또는 ASP.NET 페이지 대신 HTTP 처리기 클래스에 정의 된 실행 코드에서 이러한 특정 요청에 응답 합니다. HTTP 처리기 저수준 요청 및 응답 인터넷 정보 서비스 (IIS)를 실행 하는 웹 서버 서비스와 상호 작용할 수와 다르지만 유사한 기능을 제공 하면서 ISAPI 확장과 더 간단한 프로그래밍 모델을 사용 합니다.       설정 하는 경우는 `preserveForm` 매개 변수를 `true`, 대상 페이지를 사용 하 여 이전 페이지의 보기 상태에 액세스할 수는 <xref:System.Web.UI.Page.PreviousPage%2A>속성.</xref:System.Web.UI.Page.PreviousPage%2A>       보안을 위해 유지 해야는 `enableViewStateMac` 특성이로 설정 `true`합니다. ASP.NET에서 현재 사용자가 제공한 리소스를 볼 수 있는 권한이 있는지 확인 하지 않습니다는 <xref:System.Web.HttpServerUtility.Transfer%2A>메서드.</xref:System.Web.HttpServerUtility.Transfer%2A> 원래 리소스 처리기가 호출 되기 전에 ASP.NET 권한 부여 및 인증 논리가 실행, ASP.NET 직접 전송 방법으로 표시 된 처리기를 호출 및이 새 리소스에 대 한 인증 및 권한 부여 논리를 다시 실행 하지 않습니다. 응용 프로그램에 대 한 보안 정책상 클라이언트가 리소스에 액세스할 수 있는 적절 한 권한을 응용 프로그램 가지도록 하거나 사용자 지정 액세스 제어 메커니즘을 제공 해야 합니다.       사용 하 여 가지도록 수는 <xref:System.Web.HttpResponse.Redirect%2A>메서드는 전송 메서드 대신.</xref:System.Web.HttpResponse.Redirect%2A> <xref:System.Web.HttpResponse.Redirect%2A>메서드는 브라우저에서 새 리소스를 요청 하는 클라이언트 쪽 리디렉션을 수행 합니다.</xref:System.Web.HttpResponse.Redirect%2A> 이 페이지는 시스템에 들어오는 새 요청 이기 때문에 IIS와 ASP.NET 보안 정책의 모든 인증 및 권한 부여 논리를 거쳐야 합니다.       사용자에 게 사용 하는 사용자 지정 권한 부여 메서드를 통합 하 여 리소스를 볼 수 있는 권한이 있는지 확인할 수 있습니다는 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>메서드는 전송 메서드를 호출 하는 응용 프로그램 전에.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>"
  syntax:
    content: public void Transfer (System.Web.IHttpHandler handler, bool preserveForm);
    parameters:
    - id: handler
      type: System.Web.IHttpHandler
      description: "구현 하는 HTTP 처리기는 <xref href=&quot;System.Web.IHttpHandler&quot;> </xref> 를 현재 요청을 전송 합니다."
    - id: preserveForm
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>유지 하기 위해는 <> </> *> 및 <> </> *> 컬렉션 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to clear the <>*> and <>*> collections."
  overload: System.Web.HttpServerUtility.Transfer*
  exceptions:
  - type: System.ApplicationException
    commentId: T:System.ApplicationException
    description: "현재 페이지 요청은 콜백입니다."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.TransferRequest(System.String)
  id: TransferRequest(System.String)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: TransferRequest(String)
  nameWithType: HttpServerUtility.TransferRequest(String)
  fullName: System.Web.HttpServerUtility.TransferRequest(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "지정된 된 URL의 비동기 실행을 수행 합니다."
  remarks: "이 메서드 오버 로드는 <xref:System.Web.HttpServerUtility.TransferRequest%2A>오버 로드는 `preserveForm` 매개 변수 설정 `false`, `method` 매개 변수 설정 `null`, `headers` 매개 변수 설정 `null`, 및 `preserveUser` 매개 변수 설정 `true`.</xref:System.Web.HttpServerUtility.TransferRequest%2A> 자세한 내용은 &quot;주의&quot; 섹션을 참조 하십시오. <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>오버 로드.</xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>"
  syntax:
    content: public void TransferRequest (string path);
    parameters:
    - id: path
      type: System.String
      description: "서버에서 실행할 새 페이지의 URL 경로입니다."
  overload: System.Web.HttpServerUtility.TransferRequest*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "요청의 통합된 파이프라인 모드가 필요 [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]합니다."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "서버 요청 처리에 사용할 수 없는 경우"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> path </code> 매개 변수가 올바르지 않습니다."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean)
  id: TransferRequest(System.String,System.Boolean)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: TransferRequest(String,Boolean)
  nameWithType: HttpServerUtility.TransferRequest(String,Boolean)
  fullName: System.Web.HttpServerUtility.TransferRequest(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "지정된 된 URL의 비동기 실행을 수행 하 고 쿼리 문자열 매개 변수를 유지 합니다."
  remarks: "이 오버 로드는 <xref:System.Web.HttpServerUtility.TransferRequest%2A>오버 로드는 `preserveForm` , 전달 된 값으로 설정 하는 매개 변수는 `method` 매개 변수 설정 `null`, `headers` 매개 변수 설정 `null`, 및 `preserveUser` 매개 변수 설정 `true`.</xref:System.Web.HttpServerUtility.TransferRequest%2A> 자세한 내용은 <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>.</xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29> &quot;주의&quot; 섹션을 참조 하십시오.       TransferRequest는.NET Framework 버전 3.5에서에서 도입 되었습니다.  자세한 내용은 참조 [버전 및 종속성](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void TransferRequest (string path, bool preserveForm);
    parameters:
    - id: path
      type: System.String
      description: "서버에서 실행할 새 페이지의 URL 경로입니다."
    - id: preserveForm
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>유지 하기 위해는 <> </> *> 컬렉션 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 를 지우려면는 <> </> *> 컬렉션입니다."
  overload: System.Web.HttpServerUtility.TransferRequest*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "요청의 통합된 파이프라인 모드가 필요 [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]합니다."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "서버 요청 처리에 사용할 수 없는 경우"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> path </code> 매개 변수가 올바르지 않습니다."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)
  id: TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: TransferRequest(String,Boolean,String,NameValueCollection)
  nameWithType: HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection)
  fullName: System.Web.HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "지정 된 HTTP 메서드와 헤더를 사용 하 여 지정된 된 URL의 비동기 실행을 수행 합니다."
  remarks: "통합된 파이프라인 모드에서 실행 될 때이 메서드는 [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)] 요청을 처리 한 리소스 종류에서 올바른 요청 컨텍스트를 사용 하 여 대상 요청을 실행 하는 동안 다른 전송 될 수 있도록 합니다. 예를 들어 있는 XML 페이지에 대 한 요청에 ASPX 페이지에 대 한 요청을 전송할 transferrequest는 두 메서드를 사용할 수 있습니다.       같은 조건으로 지정된 된 URL의 비동기 하위 실행을 수행 하는 TransferRequest 메서드:-경우는 `path` 쿼리 문자열을 지정 하는 매개 변수, 새 쿼리 문자열로 사용 됩니다. 포함 된 쿼리 문자열이 없는 경우에 요청의 쿼리 문자열 다시 사용 됩니다.      If는 `method` 매개 변수가 지정 된, 사용 됩니다. 이 경우 `null`, 원래 요청의 HTTP 메서드가 사용 됩니다.      If는 `preserveForm` 매개 변수는 `true`, 현재 엔터티 본문 요청의 대상 요청 사용할 수 있습니다. 따라서 폼 게시 하 고 업로드를 전송할 수 있습니다.      -현재 사용자 id 원래 요청에서 설정 하는 경우 id는 새 요청에 전송 됩니다. 따라서 새 요청에 대 한 인증 결과 다시 사용 하도록 인증 된 요청 수 있습니다. 사용자를 전송 하지 않으려면로 사용자 설정 `null` 전송 하기 전에 원래 요청에서 합니다.      If는 `headers` 매개 변수가 지정 되 면 새 요청이 지정 된 헤더와 함께 실행 됩니다. 원래 요청이 수신 위치를 지정 하는 특수 헤더를 추가 또는 요청 헤더 및 쿠키 새 요청에 대 한 수정에 사용할 수 있습니다.           이 메서드를 호출는 <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29>메서드 오버 로드와는 `preserveUser` 매개 변수 설정 `true`.</xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29>"
  syntax:
    content: public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers);
    parameters:
    - id: path
      type: System.String
      description: "서버에서 실행할 새 페이지의 URL 경로입니다."
    - id: preserveForm
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>유지 하기 위해는 <> </> *> 컬렉션 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 를 지우려면는 <> </> *> 컬렉션입니다."
    - id: method
      type: System.String
      description: "새 요청의 실행에 사용할 HTTP 메서드."
    - id: headers
      type: System.Collections.Specialized.NameValueCollection
      description: "A <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> 새 요청에 대 한 요청 헤더의 합니다."
  overload: System.Web.HttpServerUtility.TransferRequest*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "요청에 필요한 [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)] 통합된 모드에서 실행 합니다."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "서버 요청 처리에 사용할 수 없는 경우"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> path </code> 매개 변수가 올바르지 않습니다."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)
  id: TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: TransferRequest(String,Boolean,String,NameValueCollection,Boolean)
  nameWithType: HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection,Boolean)
  fullName: System.Web.HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "지정 된 HTTP 메서드, 헤더 및 경로 사용 하 여 지정된 된 URL의 비동기 실행을 수행 하 고 필요에 따라 폼 값과 사용자 id를 유지 합니다."
  remarks: "자세한 내용은 <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>.</xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29> &quot;주의&quot; 섹션을 참조 하십시오."
  syntax:
    content: public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers, bool preserveUser);
    parameters:
    - id: path
      type: System.String
      description: "경로입니다."
    - id: preserveForm
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>유지 하기 위해는 <> </> *> 컬렉션 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 를 지우려면는 <> </> *> 컬렉션입니다."
    - id: method
      type: System.String
      description: "새 요청에 사용할 HTTP 메서드."
    - id: headers
      type: System.Collections.Specialized.NameValueCollection
      description: "A <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> 새 요청에 대 한 요청 헤더를 포함 하는 개체입니다."
    - id: preserveUser
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>사용자 id를 유지 하기 위해 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 이 방법의 다른 메서드 오버 로드로 설정 하는이 매개 변수와 함께이 오버 로드를 호출 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.HttpServerUtility.TransferRequest*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "요청의 통합된 파이프라인 모드가 필요 [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]합니다."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "서버 요청 처리에 사용할 수 없는 경우"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> path </code> 매개 변수가 올바르지 않습니다."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.UrlDecode(System.String)
  id: UrlDecode(System.String)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: UrlDecode(String)
  nameWithType: HttpServerUtility.UrlDecode(String)
  fullName: System.Web.HttpServerUtility.UrlDecode(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "문자열을 URL로 디코딩하고 디코딩된 문자열을 반환 합니다."
  remarks: "URL 인코딩은 모든 브라우저에서 URL 문자열의에서 텍스트를 올바르게 전달할 확인 합니다. 물음표 (?)와 같은 문자를 앰퍼샌드 (&), 슬래시 (/)를 표시 하 고 공백이 잘립니다 되거나 일부 브라우저 수 있습니다. 이러한 문자를 인코딩해야 합니다 결과적으로, `<a>` 태그 또는 쿼리 문자열로 브라우저 요청 문자열에 의해 다시 보낼 수 있도록 합니다.       이 메서드는 쉽게 액세스할 수는 <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName>ASP.NET 응용 프로그램에서 런타임 시 메서드.</xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> 이 방법을 사용 하 여 내부적으로 <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName>문자열을 디코딩하.</xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName>       ASP.NET 웹 페이지에 대 한 코드 숨김 파일에 액세스의 인스턴스는 <xref:System.Web.HttpServerUtility>통해 클래스는 `Server` 속성.</xref:System.Web.HttpServerUtility> 코드 숨김 파일에 없는 클래스에서 사용 하 여 `HttpContext.Current.Server` <xref:System.Web.HttpServerUtility>클래스</xref:System.Web.HttpServerUtility> 의 인스턴스에 액세스 하려면       웹 응용 프로그램 외부에서 사용 하 여는 <xref:System.Net.WebUtility>클래스 값을 인코딩 또는 디코딩하려면.</xref:System.Net.WebUtility>"
  example:
  - "The following example shows how to URL-decode a value that is retrieved from the query string. The code resides in the code-behind file for a web page. `ReturnPage` refers to a `HyperLink` control.  \n  \n [!code-vb[System.Web.HttpServerUtility.UrlDecode#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_9_1.vb)]\n [!code-cs[System.Web.HttpServerUtility.UrlDecode#1](~/add/codesnippet/csharp/m-system.web.httpserveru_9_1.cs)]  \n  \n The next example is similar to the previous example except it shows how to URL-decode a value from within a class that is not in the code-behind file.  \n  \n [!code-cs[System.Web.HttpServerUtility.UrlDecode#2](~/add/codesnippet/csharp/m-system.web.httpserveru_9_2.cs)]\n [!code-vb[System.Web.HttpServerUtility.UrlDecode#2](~/add/codesnippet/visualbasic/m-system.web.httpserveru_9_2.vb)]"
  syntax:
    content: public string UrlDecode (string s);
    parameters:
    - id: s
      type: System.String
      description: "디코딩할 텍스트 문자열입니다."
    return:
      type: System.String
      description: "디코딩된 텍스트입니다."
  overload: System.Web.HttpServerUtility.UrlDecode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)
  id: UrlDecode(System.String,System.IO.TextWriter)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: UrlDecode(String,TextWriter)
  nameWithType: HttpServerUtility.UrlDecode(String,TextWriter)
  fullName: System.Web.HttpServerUtility.UrlDecode(String,TextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "URL에서 받은 HTML 문자열을 디코드 하 고 결과 출력을 보냅니다는 <xref:System.IO.TextWriter>출력 스트림에.</xref:System.IO.TextWriter>"
  remarks: "URL 인코딩은 모든 브라우저에서 URL 문자열의에서 텍스트를 올바르게 전달할 확인 합니다. 물음표 (?)와 같은 문자를 앰퍼샌드 (&), 슬래시 (/)를 표시 하 고 공백이 잘립니다 되거나 일부 브라우저 수 있습니다. 이러한 문자를 인코딩해야 합니다 결과적으로, `<a>` 태그 또는 쿼리 문자열로 브라우저 요청 문자열에 의해 다시 보낼 수 있도록 합니다.       <xref:System.Web.HttpServerUtility.UrlDecode%2A>액세스 하는 편리한 방법는 <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName>ASP.NET 응용 프로그램에서 런타임 시 메서드.</xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName></xref:System.Web.HttpServerUtility.UrlDecode%2A> 내부적으로 <xref:System.Web.HttpServerUtility.UrlDecode%2A>사용 하 여 <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName>문자열을 디코딩하.</xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> </xref:System.Web.HttpServerUtility.UrlDecode%2A>       인코딩 또는 디코딩할 웹 응용 프로그램 외부의 값을 사용 하 여 <xref:System.Net.WebUtility>클래스</xref:System.Net.WebUtility>"
  example:
  - "The following example decodes the string named `EncodedString` (received in a URL) into the string named `DecodedString`.  \n  \n [!code-vb[Classic HttpServerUtility.UrlDecode1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_11_1.vb)]\n [!code-cs[Classic HttpServerUtility.UrlDecode1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_11_1.cs)]"
  syntax:
    content: public void UrlDecode (string s, System.IO.TextWriter output);
    parameters:
    - id: s
      type: System.String
      description: "디코딩할 HTML 문자열입니다."
    - id: output
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>디코딩된 문자열을 포함 하는 출력 스트림입니다.</xref:System.IO.TextWriter>"
  overload: System.Web.HttpServerUtility.UrlDecode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpServerUtility.UrlEncode(System.String)
  id: UrlEncode(System.String)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: UrlEncode(String)
  nameWithType: HttpServerUtility.UrlEncode(String)
  fullName: System.Web.HttpServerUtility.UrlEncode(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "문자열을 URL로 인코딩하고 인코딩된 문자열을 반환 합니다."
  remarks: "URL 인코딩은 모든 브라우저에서 URL 문자열의에서 텍스트를 올바르게 전달할 확인 합니다. 물음표 (?)와 같은 문자를 앰퍼샌드 (&), 슬래시 (/)를 표시 하 고 공백이 잘립니다 되거나 일부 브라우저 수 있습니다. 이러한 문자를 인코딩해야 합니다 결과적으로, `<a>` 태그 또는 쿼리 문자열로 브라우저 요청 문자열에 의해 다시 보낼 수 있도록 합니다.       이 메서드는 쉽게 액세스할 수는 <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName>ASP.NET 응용 프로그램에서 런타임 시 메서드.</xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> 이 방법을 사용 하 여 내부적으로 <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName>문자열을 인코딩합니다.</xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName>       ASP.NET 웹 페이지에 대 한 코드 숨김 파일에 액세스의 인스턴스는 <xref:System.Web.HttpServerUtility>통해 클래스는 `Server` 속성.</xref:System.Web.HttpServerUtility> 코드 숨김 파일에 없는 클래스에서 사용 하 여 `HttpContext.Current.Server` <xref:System.Web.HttpServerUtility>클래스</xref:System.Web.HttpServerUtility> 의 인스턴스에 액세스 하려면       웹 응용 프로그램 외부에서 사용 하 여는 <xref:System.Net.WebUtility>클래스 값을 인코딩 또는 디코딩하려면.</xref:System.Net.WebUtility>"
  example:
  - "The following example shows how to URL-encode a value that is used as a query string value of a hyperlink. The code resides in the code-behind file for a web page. The value to encode is hard-coded in this example only to simplify the example and show the type of value you might URL-encode. Typically, you would URL-encode a value that you received from the user or the request. `NextPage` refers to a `HyperLink` control.  \n  \n [!code-cs[System.Web.HttpServerUtility.UrlEncode#1](~/add/codesnippet/csharp/m-system.web.httpserveru_0_1.cs)]\n [!code-vb[System.Web.HttpServerUtility.UrlEncode#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_0_1.vb)]  \n  \n The next example is similar to the previous example except it shows how to URL-encode a value from within a class that is not in the code-behind file.  \n  \n [!code-cs[System.Web.HttpServerUtility.UrlEncode#2](~/add/codesnippet/csharp/m-system.web.httpserveru_0_2.cs)]\n [!code-vb[System.Web.HttpServerUtility.UrlEncode#2](~/add/codesnippet/visualbasic/m-system.web.httpserveru_0_2.vb)]"
  syntax:
    content: public string UrlEncode (string s);
    parameters:
    - id: s
      type: System.String
      description: "URL로 인코딩할 텍스트입니다."
    return:
      type: System.String
      description: "URL로 인코딩된 텍스트입니다."
  overload: System.Web.HttpServerUtility.UrlEncode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)
  id: UrlEncode(System.String,System.IO.TextWriter)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: UrlEncode(String,TextWriter)
  nameWithType: HttpServerUtility.UrlEncode(String,TextWriter)
  fullName: System.Web.HttpServerUtility.UrlEncode(String,TextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "URL 액세스 문자열을 인코딩하고 고 결과 출력을 <xref:System.IO.TextWriter>출력 스트림에.</xref:System.IO.TextWriter>"
  remarks: "URL 인코딩은 모든 브라우저에서 URL 문자열의에서 텍스트를 올바르게 전달할 확인 합니다. 물음표 (?)와 같은 문자를 앰퍼샌드 (&), 슬래시 (/)를 표시 하 고 공백이 잘립니다 되거나 일부 브라우저 수 있습니다. 이러한 문자를 인코딩해야 합니다 결과적으로, `<a>` 태그 또는 쿼리 문자열로 브라우저 요청 문자열에 의해 다시 보낼 수 있도록 합니다.       <xref:System.Web.HttpServerUtility.UrlEncode%2A>액세스 하는 편리한 방법는 <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName>ASP.NET 응용 프로그램에서 런타임 시 메서드.</xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName></xref:System.Web.HttpServerUtility.UrlEncode%2A> 내부적으로 <xref:System.Web.HttpServerUtility.UrlEncode%2A>사용 하 여 <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName>문자열을 인코딩합니다.</xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> </xref:System.Web.HttpServerUtility.UrlEncode%2A>       인코딩 또는 디코딩할 웹 응용 프로그램 외부의 값을 사용 하 여 <xref:System.Net.WebUtility>클래스</xref:System.Net.WebUtility>"
  example:
  - "The following example encodes a string for transmission by HTTP. It encodes the string named `TestString`, which contains the text \"This is a \\<Test String>.\", and copies it into the string named `EncodedString` as \"This+is+a+%3cTest+String%3e.\".  \n  \n [!code-cs[Classic HttpServerUtility.UrlEncode1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_13_1.cs)]\n [!code-vb[Classic HttpServerUtility.UrlEncode1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_13_1.vb)]"
  syntax:
    content: public void UrlEncode (string s, System.IO.TextWriter output);
    parameters:
    - id: s
      type: System.String
      description: "인코딩할 텍스트 문자열입니다."
    - id: output
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>인코딩된 문자열을 포함 하는 출력 스트림입니다.</xref:System.IO.TextWriter>"
  overload: System.Web.HttpServerUtility.UrlEncode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpServerUtility.UrlPathEncode(System.String)
  id: UrlPathEncode(System.String)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: UrlPathEncode(String)
  nameWithType: HttpServerUtility.UrlPathEncode(String)
  fullName: System.Web.HttpServerUtility.UrlPathEncode(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "사용 되지 않습니다. 브라우저 호환성을 위해서만 사용 합니다. <xref:System.Web.HttpServerUtility.UrlEncode*>입니다.</xref:System.Web.HttpServerUtility.UrlEncode*> 사용"
  syntax:
    content: public string UrlPathEncode (string s);
    parameters:
    - id: s
      type: System.String
      description: "URL로 인코딩할 텍스트입니다."
    return:
      type: System.String
      description: "URL로 인코딩된 텍스트입니다."
  overload: System.Web.HttpServerUtility.UrlPathEncode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpServerUtility.UrlTokenDecode(System.String)
  id: UrlTokenDecode(System.String)
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: UrlTokenDecode(String)
  nameWithType: HttpServerUtility.UrlTokenDecode(String)
  fullName: System.Web.HttpServerUtility.UrlTokenDecode(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "URL 문자열 토큰을을 base 64 숫자를 사용 하 여 해당 하는 바이트 배열로 디코딩합니다."
  remarks: "UrlTokenDecode 메서드 이진 데이터 base 64 숫자를 인코딩하는 URL 문자열 토큰을 해당 하는 바이트 배열 표현으로 변환 합니다. 토큰은 URL에서 전송 되 고 있는 <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>.</xref:System.Web.HttpServerUtility.UrlTokenEncode%2A> 를 사용 하 여 인코딩된 디코딩하 UrlTokenDecode 메서드를 사용 합니다.       UrlTokenDecode 메서드는 빈 바이트 배열을 반환 하는 경우는 `input` 매개 변수 길이가&1; 보다 작습니다."
  syntax:
    content: public static byte[] UrlTokenDecode (string input);
    parameters:
    - id: input
      type: System.String
      description: "디코딩할 URL 문자열 토큰입니다."
    return:
      type: System.Byte[]
      description: "디코드된 URL 문자열 토큰을 포함 하는 바이트 배열입니다."
  overload: System.Web.HttpServerUtility.UrlTokenDecode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "값은 <code> input </code> 매개 변수는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])
  id: UrlTokenEncode(System.Byte[])
  parent: System.Web.HttpServerUtility
  langs:
  - csharp
  name: UrlTokenEncode(Byte[])
  nameWithType: HttpServerUtility.UrlTokenEncode(Byte[])
  fullName: System.Web.HttpServerUtility.UrlTokenEncode(Byte[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "사용 하 여 base 64 숫자 URL에 전송 하기에 적합 해당 문자열 표현으로 바이트 배열을 인코딩합니다."
  remarks: "UrlTokenEncode 메서드는 바이트 배열을 base 64 숫자를 사용 하 여 인코딩한 해당 문자열 표현으로 변환 합니다. URL에는 결과 문자열 토큰을 전송할 수 있습니다.       UrlTokenEncode 경우 빈 문자열을 반환 합니다는 `input` 매개 변수 길이가&1; 보다 작습니다."
  syntax:
    content: public static string UrlTokenEncode (byte[] input);
    parameters:
    - id: input
      type: System.Byte[]
      description: "인코딩할 바이트 배열입니다."
    return:
      type: System.String
      description: "바이트 배열이 인코딩된 토큰 경우는에 포함 된 문자열 *길이*&1; 보다 큰 고, 그러지 않으면 빈 문자열 (&quot;&quot;)."
  overload: System.Web.HttpServerUtility.UrlTokenEncode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "값은 <code> input </code> 매개 변수는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ApplicationException
  parent: System
  isExternal: false
  name: ApplicationException
  nameWithType: ApplicationException
  fullName: System.ApplicationException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.Web.HttpServerUtility.ClearError
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: ClearError()
  nameWithType: HttpServerUtility.ClearError()
  fullName: System.Web.HttpServerUtility.ClearError()
- uid: System.Web.HttpServerUtility.CreateObject(System.String)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: CreateObject(String)
  nameWithType: HttpServerUtility.CreateObject(String)
  fullName: System.Web.HttpServerUtility.CreateObject(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.HttpServerUtility.CreateObject(System.Type)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: CreateObject(Type)
  nameWithType: HttpServerUtility.CreateObject(Type)
  fullName: System.Web.HttpServerUtility.CreateObject(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: CreateObjectFromClsid(String)
  nameWithType: HttpServerUtility.CreateObjectFromClsid(String)
  fullName: System.Web.HttpServerUtility.CreateObjectFromClsid(String)
- uid: System.Web.HttpServerUtility.Execute(System.String)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: Execute(String)
  nameWithType: HttpServerUtility.Execute(String)
  fullName: System.Web.HttpServerUtility.Execute(String)
- uid: System.Web.HttpServerUtility.Execute(System.String,System.Boolean)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: Execute(String,Boolean)
  nameWithType: HttpServerUtility.Execute(String,Boolean)
  fullName: System.Web.HttpServerUtility.Execute(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: Execute(String,TextWriter)
  nameWithType: HttpServerUtility.Execute(String,TextWriter)
  fullName: System.Web.HttpServerUtility.Execute(String,TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: Execute(String,TextWriter,Boolean)
  nameWithType: HttpServerUtility.Execute(String,TextWriter,Boolean)
  fullName: System.Web.HttpServerUtility.Execute(String,TextWriter,Boolean)
- uid: System.Web.HttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: Execute(IHttpHandler,TextWriter,Boolean)
  nameWithType: HttpServerUtility.Execute(IHttpHandler,TextWriter,Boolean)
  fullName: System.Web.HttpServerUtility.Execute(IHttpHandler,TextWriter,Boolean)
- uid: System.Web.IHttpHandler
  parent: System.Web
  isExternal: false
  name: IHttpHandler
  nameWithType: IHttpHandler
  fullName: System.Web.IHttpHandler
- uid: System.Web.HttpServerUtility.GetLastError
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: GetLastError()
  nameWithType: HttpServerUtility.GetLastError()
  fullName: System.Web.HttpServerUtility.GetLastError()
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Web.HttpServerUtility.HtmlDecode(System.String)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: HtmlDecode(String)
  nameWithType: HttpServerUtility.HtmlDecode(String)
  fullName: System.Web.HttpServerUtility.HtmlDecode(String)
- uid: System.Web.HttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: HtmlDecode(String,TextWriter)
  nameWithType: HttpServerUtility.HtmlDecode(String,TextWriter)
  fullName: System.Web.HttpServerUtility.HtmlDecode(String,TextWriter)
- uid: System.Web.HttpServerUtility.HtmlEncode(System.String)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: HtmlEncode(String)
  nameWithType: HttpServerUtility.HtmlEncode(String)
  fullName: System.Web.HttpServerUtility.HtmlEncode(String)
- uid: System.Web.HttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: HtmlEncode(String,TextWriter)
  nameWithType: HttpServerUtility.HtmlEncode(String,TextWriter)
  fullName: System.Web.HttpServerUtility.HtmlEncode(String,TextWriter)
- uid: System.Web.HttpServerUtility.MachineName
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: MachineName
  nameWithType: HttpServerUtility.MachineName
  fullName: System.Web.HttpServerUtility.MachineName
- uid: System.Web.HttpServerUtility.MapPath(System.String)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: MapPath(String)
  nameWithType: HttpServerUtility.MapPath(String)
  fullName: System.Web.HttpServerUtility.MapPath(String)
- uid: System.Web.HttpServerUtility.ScriptTimeout
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: ScriptTimeout
  nameWithType: HttpServerUtility.ScriptTimeout
  fullName: System.Web.HttpServerUtility.ScriptTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.HttpServerUtility.Transfer(System.String)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: Transfer(String)
  nameWithType: HttpServerUtility.Transfer(String)
  fullName: System.Web.HttpServerUtility.Transfer(String)
- uid: System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: Transfer(String,Boolean)
  nameWithType: HttpServerUtility.Transfer(String,Boolean)
  fullName: System.Web.HttpServerUtility.Transfer(String,Boolean)
- uid: System.Web.HttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: Transfer(IHttpHandler,Boolean)
  nameWithType: HttpServerUtility.Transfer(IHttpHandler,Boolean)
  fullName: System.Web.HttpServerUtility.Transfer(IHttpHandler,Boolean)
- uid: System.Web.HttpServerUtility.TransferRequest(System.String)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: TransferRequest(String)
  nameWithType: HttpServerUtility.TransferRequest(String)
  fullName: System.Web.HttpServerUtility.TransferRequest(String)
- uid: System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: TransferRequest(String,Boolean)
  nameWithType: HttpServerUtility.TransferRequest(String,Boolean)
  fullName: System.Web.HttpServerUtility.TransferRequest(String,Boolean)
- uid: System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: TransferRequest(String,Boolean,String,NameValueCollection)
  nameWithType: HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection)
  fullName: System.Web.HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection)
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: TransferRequest(String,Boolean,String,NameValueCollection,Boolean)
  nameWithType: HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection,Boolean)
  fullName: System.Web.HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection,Boolean)
- uid: System.Web.HttpServerUtility.UrlDecode(System.String)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: UrlDecode(String)
  nameWithType: HttpServerUtility.UrlDecode(String)
  fullName: System.Web.HttpServerUtility.UrlDecode(String)
- uid: System.Web.HttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: UrlDecode(String,TextWriter)
  nameWithType: HttpServerUtility.UrlDecode(String,TextWriter)
  fullName: System.Web.HttpServerUtility.UrlDecode(String,TextWriter)
- uid: System.Web.HttpServerUtility.UrlEncode(System.String)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: UrlEncode(String)
  nameWithType: HttpServerUtility.UrlEncode(String)
  fullName: System.Web.HttpServerUtility.UrlEncode(String)
- uid: System.Web.HttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: UrlEncode(String,TextWriter)
  nameWithType: HttpServerUtility.UrlEncode(String,TextWriter)
  fullName: System.Web.HttpServerUtility.UrlEncode(String,TextWriter)
- uid: System.Web.HttpServerUtility.UrlPathEncode(System.String)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: UrlPathEncode(String)
  nameWithType: HttpServerUtility.UrlPathEncode(String)
  fullName: System.Web.HttpServerUtility.UrlPathEncode(String)
- uid: System.Web.HttpServerUtility.UrlTokenDecode(System.String)
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: UrlTokenDecode(String)
  nameWithType: HttpServerUtility.UrlTokenDecode(String)
  fullName: System.Web.HttpServerUtility.UrlTokenDecode(String)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: UrlTokenEncode(Byte[])
  nameWithType: HttpServerUtility.UrlTokenEncode(Byte[])
  fullName: System.Web.HttpServerUtility.UrlTokenEncode(Byte[])
- uid: System.Web.HttpServerUtility.ClearError*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: ClearError
  nameWithType: HttpServerUtility.ClearError
- uid: System.Web.HttpServerUtility.CreateObject*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: CreateObject
  nameWithType: HttpServerUtility.CreateObject
- uid: System.Web.HttpServerUtility.CreateObjectFromClsid*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: CreateObjectFromClsid
  nameWithType: HttpServerUtility.CreateObjectFromClsid
- uid: System.Web.HttpServerUtility.Execute*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: Execute
  nameWithType: HttpServerUtility.Execute
- uid: System.Web.HttpServerUtility.GetLastError*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: GetLastError
  nameWithType: HttpServerUtility.GetLastError
- uid: System.Web.HttpServerUtility.HtmlDecode*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: HtmlDecode
  nameWithType: HttpServerUtility.HtmlDecode
- uid: System.Web.HttpServerUtility.HtmlEncode*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: HtmlEncode
  nameWithType: HttpServerUtility.HtmlEncode
- uid: System.Web.HttpServerUtility.MachineName*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: MachineName
  nameWithType: HttpServerUtility.MachineName
- uid: System.Web.HttpServerUtility.MapPath*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: MapPath
  nameWithType: HttpServerUtility.MapPath
- uid: System.Web.HttpServerUtility.ScriptTimeout*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: ScriptTimeout
  nameWithType: HttpServerUtility.ScriptTimeout
- uid: System.Web.HttpServerUtility.Transfer*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: Transfer
  nameWithType: HttpServerUtility.Transfer
- uid: System.Web.HttpServerUtility.TransferRequest*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: TransferRequest
  nameWithType: HttpServerUtility.TransferRequest
- uid: System.Web.HttpServerUtility.UrlDecode*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: UrlDecode
  nameWithType: HttpServerUtility.UrlDecode
- uid: System.Web.HttpServerUtility.UrlEncode*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: UrlEncode
  nameWithType: HttpServerUtility.UrlEncode
- uid: System.Web.HttpServerUtility.UrlPathEncode*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: UrlPathEncode
  nameWithType: HttpServerUtility.UrlPathEncode
- uid: System.Web.HttpServerUtility.UrlTokenDecode*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: UrlTokenDecode
  nameWithType: HttpServerUtility.UrlTokenDecode
- uid: System.Web.HttpServerUtility.UrlTokenEncode*
  parent: System.Web.HttpServerUtility
  isExternal: false
  name: UrlTokenEncode
  nameWithType: HttpServerUtility.UrlTokenEncode
