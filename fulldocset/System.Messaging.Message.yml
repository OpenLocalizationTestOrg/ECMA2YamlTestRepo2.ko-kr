### YamlMime:ManagedReference
items:
- uid: System.Messaging.Message
  id: Message
  children:
  - System.Messaging.Message.#ctor
  - System.Messaging.Message.#ctor(System.Object)
  - System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  - System.Messaging.Message.AcknowledgeType
  - System.Messaging.Message.Acknowledgment
  - System.Messaging.Message.AdministrationQueue
  - System.Messaging.Message.AppSpecific
  - System.Messaging.Message.ArrivedTime
  - System.Messaging.Message.AttachSenderId
  - System.Messaging.Message.Authenticated
  - System.Messaging.Message.AuthenticationProviderName
  - System.Messaging.Message.AuthenticationProviderType
  - System.Messaging.Message.Body
  - System.Messaging.Message.BodyStream
  - System.Messaging.Message.BodyType
  - System.Messaging.Message.ConnectorType
  - System.Messaging.Message.CorrelationId
  - System.Messaging.Message.DestinationQueue
  - System.Messaging.Message.DestinationSymmetricKey
  - System.Messaging.Message.DigitalSignature
  - System.Messaging.Message.EncryptionAlgorithm
  - System.Messaging.Message.Extension
  - System.Messaging.Message.Formatter
  - System.Messaging.Message.HashAlgorithm
  - System.Messaging.Message.Id
  - System.Messaging.Message.InfiniteTimeout
  - System.Messaging.Message.IsFirstInTransaction
  - System.Messaging.Message.IsLastInTransaction
  - System.Messaging.Message.Label
  - System.Messaging.Message.LookupId
  - System.Messaging.Message.MessageType
  - System.Messaging.Message.Priority
  - System.Messaging.Message.Recoverable
  - System.Messaging.Message.ResponseQueue
  - System.Messaging.Message.SecurityContext
  - System.Messaging.Message.SenderCertificate
  - System.Messaging.Message.SenderId
  - System.Messaging.Message.SenderVersion
  - System.Messaging.Message.SentTime
  - System.Messaging.Message.SourceMachine
  - System.Messaging.Message.TimeToBeReceived
  - System.Messaging.Message.TimeToReachQueue
  - System.Messaging.Message.TransactionId
  - System.Messaging.Message.TransactionStatusQueue
  - System.Messaging.Message.UseAuthentication
  - System.Messaging.Message.UseDeadLetterQueue
  - System.Messaging.Message.UseEncryption
  - System.Messaging.Message.UseJournalQueue
  - System.Messaging.Message.UseTracing
  langs:
  - csharp
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
  type: Class
  summary: "메시지 큐 메시지를 정의 하는 데 필요한 속성에 대 한 액세스를 제공 합니다."
  remarks: "피크 (peek) 또는 큐에서 메시지를 수신 하거나 큐에 메시지를 보낼 때 메시지 속성 세밀 하 게 제어 하려면 메시지 클래스를 사용 합니다.       <xref:System.Messaging.MessageQueue>때문에 관찰 합니다. 또는 큐에서 메시지를 받는 메시지 클래스를 사용 모두는 <xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName>및 <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName>메서드 메시지 클래스의 새 인스턴스를 만들고 인스턴스 속성을 설정 합니다.</xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName></xref:System.Messaging.MessageQueue> 메시지 클래스의 읽기 전용 속성은 읽기/쓰기 속성은 전송 및 메시지 검색에 적용 하는 동안에 큐에서 메시지를 검색에 적용 합니다. 때 <xref:System.Messaging.MessageQueue>관찰 합니다. 또는 큐에서 메시지를 받고 해당 <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>속성 검색 되는 메시지의 속성을 결정 합니다.</xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> </xref:System.Messaging.MessageQueue>       <xref:System.Messaging.MessageQueue>클래스의 <xref:System.Messaging.MessageQueue.Send%2A>메서드를 해당 큐로 송신할 메시지에 대 한 모든 개체 형식을 지정할 수 있습니다.</xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.MessageQueue> 사용할 수는 <xref:System.Messaging.MessageQueue>인스턴스의 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>속성을 통해 큐에 전송 되는 제네릭 메시지에 대 한 설정을 지정 합니다.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> </xref:System.Messaging.MessageQueue> 설정의 형식 포맷터, 레이블, 암호화 및 인증을 포함 합니다. 에 대 한 적절 한 값을 지정할 수도 있습니다 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>승인 및 보고 메시지에 응답 하도록 메시징 응용 프로그램을 조정 하는 경우에 멤버.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> 메시지 인스턴스를 사용 하 여 큐에 메시지를 보내려고 하면 액세스 하 고 이러한 속성 중 상당수 수정-단일 메시지 또는 메시지-메시지 별로 합니다. 메시지 속성 우선 순위가 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>       메시지 데이터에 저장 됩니다는 <xref:System.Messaging.Message.Body%2A>속성 및 어느 정도 <xref:System.Messaging.Message.AppSpecific%2A>및 <xref:System.Messaging.Message.Extension%2A>속성.</xref:System.Messaging.Message.Extension%2A> </xref:System.Messaging.Message.AppSpecific%2A> </xref:System.Messaging.Message.Body%2A> 메시지 데이터를 암호화, serialize 하거나 deserialize의 내용만 <xref:System.Messaging.Message.Body%2A>속성에 영향을 받습니다.</xref:System.Messaging.Message.Body%2A>       콘텐츠는 <xref:System.Messaging.Message.Body%2A>속성이 메시지를 보낼 때 사용 하 여 serialize 되는 <xref:System.Messaging.Message.Formatter%2A>지정한 속성.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A> serialize 된 내용을 발견 되는 <xref:System.Messaging.Message.BodyStream%2A>속성.</xref:System.Messaging.Message.BodyStream%2A> 설정할 수도 있습니다는 <xref:System.Messaging.Message.BodyStream%2A>속성을 직접 예를 들어, 메시지의 데이터 내용으로 파일을 보낼 수 있습니다.</xref:System.Messaging.Message.BodyStream%2A> <xref:System.Messaging.Message.Body%2A> <xref:System.Messaging.Message.Formatter%2A>메시지 및 데이터를 보내기 전에 언제 든 지 serialize 할 속성을 적절 하 게 <xref:System.Messaging.MessageQueue.Send%2A>.</xref:System.Messaging.MessageQueue.Send%2A> 를 호출 하는 경우</xref:System.Messaging.Message.Formatter%2A> 또는</xref:System.Messaging.Message.Body%2A> 변경할 수 있습니다.       정의 하는 속성은 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName>속성이 메시지 유형이 메시지에만 적용 됩니다.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName> 지정 하는 경우는 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>속성에 대 한는 <xref:System.Messaging.MessageQueue>를 동일 하 게 명명된 된 속성의 큐에 보내는 메시지 인스턴스에 될 기본 속성이 무시 됩니다.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>       메시지의 인스턴스에 대 한 초기 속성 값의 목록에 대 한 참조는 <xref:System.Messaging.Message.%23ctor%2A>생성자.</xref:System.Messaging.Message.%23ctor%2A>"
  example:
  - "The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \n  \n [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/t-system.messaging.message_1.cpp)]\n [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/t-system.messaging.message_1.cs)]\n [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/t-system.messaging.message_1.vb)]  \n  \n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/t-system.messaging.message_2.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/t-system.messaging.message_2.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/t-system.messaging.message_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public class Message : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.Message.#ctor
  id: '#ctor'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message()
  nameWithType: Message.Message()
  fullName: System.Messaging.Message.Message()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Messaging.Message&quot;> </xref> 본문이 비어 있는 클래스입니다."
  remarks: "이 오버 로드를 사용 하 여의 새 인스턴스를 만드는 <xref:System.Messaging.Message>본문이 비어 있는 클래스로.</xref:System.Messaging.Message>       지정 된 <xref:System.Messaging.Message.Body%2A>속성 또는 <xref:System.Messaging.Message.BodyStream%2A>보내기 전에 속성은 <xref:System.Messaging.Message>개체입니다.</xref:System.Messaging.Message> </xref:System.Messaging.Message.BodyStream%2A> </xref:System.Messaging.Message.Body%2A> <xref:System.Messaging.Message.Body%2A>속성 텍스트 문자열 같은 serialize 할 수 있는 모든 개체, 구조 개체, 클래스 인스턴스 또는 포함된 된 개체 일 수 있습니다.</xref:System.Messaging.Message.Body%2A>       메시지의 내용을 직접 작성 하지 않는 경우는 <xref:System.Messaging.Message.BodyStream%2A>속성 설정의 <xref:System.Messaging.Message.Formatter%2A>속성 메시지를 보내기 전에.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.BodyStream%2A> 사용 하 여 본문은 직렬화는 <xref:System.Messaging.Message.Formatter%2A>시간에 대 한 속성의 값의 <xref:System.Messaging.MessageQueue.Send%2A>메서드가 호출 되는 <xref:System.Messaging.MessageQueue>인스턴스.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.Message.Formatter%2A>       <xref:System.Messaging.XmlMessageFormatter>는 느슨하게 결합 되어 있으므로이 형식을 사용 하는 경우에 발신자와 수신자 입력 동일한 개체를 설정할 필요가 없습니다.</xref:System.Messaging.XmlMessageFormatter> <xref:System.Messaging.ActiveXMessageFormatter>및 <xref:System.Messaging.BinaryMessageFormatter>이진 표현으로 데이터를 직렬화 합니다.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> <xref:System.Messaging.ActiveXMessageFormatter>COM 구성 요소를 받거나 보낼 때 사용 됩니다.</xref:System.Messaging.ActiveXMessageFormatter>       다음 표에서 <xref:System.Messaging.Message>안내 하십시오.</xref:System.Messaging.Message> 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 초기 값 |   |--------------|-------------------|   | <xref:System.Messaging.Message.AcknowledgeType%2A>| `AcknowledgeType.None`|   | <xref:System.Messaging.Message.AdministrationQueue%2A>| `null`|   | <xref:System.Messaging.Message.AppSpecific%2A>|0|   | <xref:System.Messaging.Message.AttachSenderId%2A>| `true`|   | <xref:System.Messaging.Message.AuthenticationProviderName%2A>| Microsoft Base Cryptographic Provider 1.0 버전 |   | <xref:System.Messaging.Message.AuthenticationProviderType%2A>| `CryptoProviderType.RSA_FULL`|   | <xref:System.Messaging.Message.Body%2A>| `null`|   | <xref:System.Messaging.Message.BodyStream%2A>| `Stream.null`|   | <xref:System.Messaging.Message.BodyType%2A>|0|   | <xref:System.Messaging.Message.ConnectorType%2A>| `Guid.Empty`|   | <xref:System.Messaging.Message.CorrelationId%2A>| 빈 문자열 (&quot;&quot;) |   | <xref:System.Messaging.Message.DestinationSymmetricKey%2A>| 바이트 길이가 0 인 배열을 |   | <xref:System.Messaging.Message.DigitalSignature%2A>| 바이트 길이가 0 인 배열을 |   | <xref:System.Messaging.Message.EncryptionAlgorithm%2A>| `EncryptionAlgorithm.RC2`|   | <xref:System.Messaging.Message.Extension%2A>| 바이트 길이가 0 인 배열을 |   | <xref:System.Messaging.Message.Formatter%2A>| `XmlMessageFormatter`|   | <xref:System.Messaging.Message.HashAlgorithm%2A>| `HashAlgorithm.MD5`|   | <xref:System.Messaging.Message.Label%2A>| 빈 문자열 (&quot;&quot;) |   | <xref:System.Messaging.Message.Priority%2A>| `MessagePriority.Normal`|   | <xref:System.Messaging.Message.Recoverable%2A>| `false`|   | <xref:System.Messaging.Message.ResponseQueue%2A>| `null`|   | <xref:System.Messaging.Message.SenderCertificate%2A>| 바이트 길이가 0 인 배열을 |   | <xref:System.Messaging.Message.TimeToBeReceived%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TimeToReachQueue%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TransactionStatusQueue%2A>| `null`|   | <xref:System.Messaging.Message.UseAuthentication%2A>| `false`|   | <xref:System.Messaging.Message.UseDeadLetterQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseEncryption%2A>| `false`|   | <xref:System.Messaging.Message.UseJournalQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseTracing%2A>| `false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/m-system.messaging.messa_16_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/m-system.messaging.messa_16_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/m-system.messaging.messa_16_1.cs)]"
  syntax:
    content: public Message ();
    parameters: []
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message(Object)
  nameWithType: Message.Message(Object)
  fullName: System.Messaging.Message.Message(Object)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Messaging.Message&quot;> </xref> 클래스를 사용 하는 <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> 메시지의 본문으로 지정된 된 개체를 serialize 하 합니다."
  remarks: "이 오버 로드를 사용 하 여의 새 인스턴스를 만드는 <xref:System.Messaging.Message>클래스를 포함 하는 <xref:System.Messaging.Message.Body%2A>에 지정 된는 `body` 매개 변수.</xref:System.Messaging.Message.Body%2A> </xref:System.Messaging.Message> `body` 매개 변수는 텍스트 문자열, 구조 개체, 클래스 인스턴스 또는 포함된 된 개체와 같은 serialize 할 수 있는 모든 개체 일 수 있습니다. 사용 하 여 본문은 직렬화는 <xref:System.Messaging.XmlMessageFormatter>변경 하지 않는 한는 <xref:System.Messaging.Message.Formatter%2A>하기 전에 속성은 <xref:System.Messaging.Message>보내집니다.</xref:System.Messaging.Message> </xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.XmlMessageFormatter> 변경 하는 경우는 <xref:System.Messaging.Message.Body%2A>또는 <xref:System.Messaging.Message.Formatter%2A>언제 든 지 호출 하기 전에 속성 <xref:System.Messaging.MessageQueue.Send%2A>, 메시지가 새 속성 값에 따라 직렬화 됩니다.</xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A>       <xref:System.Messaging.XmlMessageFormatter>는 느슨하게 결합 되어 있으므로이 형식을 사용 하는 경우에 발신자와 수신자 입력 동일한 개체를 설정할 필요가 없습니다.</xref:System.Messaging.XmlMessageFormatter> <xref:System.Messaging.ActiveXMessageFormatter>및 <xref:System.Messaging.BinaryMessageFormatter>이진 표현으로 데이터를 직렬화 합니다.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> <xref:System.Messaging.ActiveXMessageFormatter>COM 구성 요소를 받거나 보낼 때 사용 됩니다.</xref:System.Messaging.ActiveXMessageFormatter>       다음 표에서 <xref:System.Messaging.Message>안내 하십시오.</xref:System.Messaging.Message> 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 초기 값 |   |--------------|-------------------|   | <xref:System.Messaging.Message.AcknowledgeType%2A>| `AcknowledgeType.None`|   | <xref:System.Messaging.Message.AdministrationQueue%2A>| `null`|   | <xref:System.Messaging.Message.AppSpecific%2A>|0|   | <xref:System.Messaging.Message.AttachSenderId%2A>| `true`|   | <xref:System.Messaging.Message.AuthenticationProviderName%2A>| Microsoft Base Cryptographic Provider 1.0 버전 |   | <xref:System.Messaging.Message.AuthenticationProviderType%2A>| `CryptoProviderType.RSA_FULL`|   | <xref:System.Messaging.Message.Body%2A>| `body` 매개 변수입니다. |   | <xref:System.Messaging.Message.BodyStream%2A>| `Stream.null`|   | <xref:System.Messaging.Message.BodyType%2A>|0|   | <xref:System.Messaging.Message.ConnectorType%2A>| `Guid.Empty`|   | <xref:System.Messaging.Message.CorrelationId%2A>| 빈 문자열 (&quot;&quot;) |   | <xref:System.Messaging.Message.DestinationSymmetricKey%2A>| 바이트 길이가 0 인 배열을 |   | <xref:System.Messaging.Message.DigitalSignature%2A>| 바이트 길이가 0 인 배열을 |   | <xref:System.Messaging.Message.EncryptionAlgorithm%2A>| `EncryptionAlgorithm.RC2`|   | <xref:System.Messaging.Message.Extension%2A>| 바이트 길이가 0 인 배열을 |   | <xref:System.Messaging.Message.Formatter%2A>| `XmlMessageFormatter`|   | <xref:System.Messaging.Message.HashAlgorithm%2A>| `HashAlgorithm.MD5`|   | <xref:System.Messaging.Message.Label%2A>| 빈 문자열 (&quot;&quot;) |   | <xref:System.Messaging.Message.Priority%2A>| `MessagePriority.Normal`|   | <xref:System.Messaging.Message.Recoverable%2A>| `false`|   | <xref:System.Messaging.Message.ResponseQueue%2A>| `null`|   | <xref:System.Messaging.Message.SenderCertificate%2A>| 바이트 길이가 0 인 배열을 |   | <xref:System.Messaging.Message.TimeToBeReceived%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TimeToReachQueue%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TransactionStatusQueue%2A>| `null`|   | <xref:System.Messaging.Message.UseAuthentication%2A>| `false`|   | <xref:System.Messaging.Message.UseDeadLetterQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseEncryption%2A>| `false`|   | <xref:System.Messaging.Message.UseJournalQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseTracing%2A>| `false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - "The following code example creates a new queue, sends a message that contains an order to it, and then retrieves it.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/m-system.messaging.messa_33_1.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/m-system.messaging.messa_33_1.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/m-system.messaging.messa_33_1.vb)]"
  syntax:
    content: public Message (object body);
    parameters:
    - id: body
      type: System.Object
      description: "메시지의 본문으로 serialize 할 개체입니다."
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  id: '#ctor(System.Object,System.Messaging.IMessageFormatter)'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message(Object,IMessageFormatter)
  nameWithType: Message.Message(Object,IMessageFormatter)
  fullName: System.Messaging.Message.Message(Object,IMessageFormatter)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Messaging.Message&quot;> </xref> 클래스는 메시지의 본문에 지정된 된 개체를 serialize 하는 데 지정 된 포맷터를 사용 합니다."
  remarks: "이 오버 로드를 사용 하 여의 새 인스턴스를 만드는 <xref:System.Messaging.Message>클래스를 포함 하는 <xref:System.Messaging.Message.Body%2A>에 지정 된는 `body` 하 고 매개 변수를 사용 하 여 유효한 포맷터 본문을 직렬화 할.</xref:System.Messaging.Message.Body%2A> </xref:System.Messaging.Message> `body` 매개 변수는 텍스트 문자열, 구조 개체, 클래스 인스턴스 또는 포함된 된 개체와 같은 serialize 할 수 있는 모든 개체입니다. 변경 하는 경우는 <xref:System.Messaging.Message.Body%2A>또는 <xref:System.Messaging.Message.Formatter%2A>언제 든 지 호출 하기 전에 속성 <xref:System.Messaging.MessageQueue.Send%2A>, 메시지가 새 속성 값에 따라 직렬화 됩니다.</xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A>       <xref:System.Messaging.XmlMessageFormatter>는 느슨하게 결합 되어 있으므로이 형식을 사용 하는 경우에 발신자와 수신자 입력 동일한 개체를 설정할 필요가 없습니다.</xref:System.Messaging.XmlMessageFormatter> <xref:System.Messaging.ActiveXMessageFormatter>및 <xref:System.Messaging.BinaryMessageFormatter>이진 표현으로 데이터를 직렬화 합니다.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> <xref:System.Messaging.ActiveXMessageFormatter>COM 구성 요소를 받거나 보낼 때 사용 됩니다.</xref:System.Messaging.ActiveXMessageFormatter>       다음 표에서 <xref:System.Messaging.Message>안내 하십시오.</xref:System.Messaging.Message> 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 초기 값 |   |--------------|-------------------|   | <xref:System.Messaging.Message.AcknowledgeType%2A>| `AcknowledgeType.None`|   | <xref:System.Messaging.Message.AdministrationQueue%2A>| `null`|   | <xref:System.Messaging.Message.AppSpecific%2A>|0|   | <xref:System.Messaging.Message.AttachSenderId%2A>| `true`|   | <xref:System.Messaging.Message.AuthenticationProviderName%2A>| Microsoft Base Cryptographic Provider 1.0 버전 |   | <xref:System.Messaging.Message.AuthenticationProviderType%2A>| `CryptoProviderType.RSA_FULL`|   | <xref:System.Messaging.Message.Body%2A>| `body` 매개 변수입니다. |   | <xref:System.Messaging.Message.BodyStream%2A>| `Stream.null`|   | <xref:System.Messaging.Message.BodyType%2A>|0|   | <xref:System.Messaging.Message.ConnectorType%2A>| `Guid.Empty`|   | <xref:System.Messaging.Message.CorrelationId%2A>| 빈 문자열 (&quot;&quot;) |   | <xref:System.Messaging.Message.DestinationSymmetricKey%2A>| 바이트 길이가 0 인 배열을 |   | <xref:System.Messaging.Message.DigitalSignature%2A>| 바이트 길이가 0 인 배열을 |   | <xref:System.Messaging.Message.EncryptionAlgorithm%2A>| `EncryptionAlgorithm.RC2`|   | <xref:System.Messaging.Message.Extension%2A>| 바이트 길이가 0 인 배열을 |   | <xref:System.Messaging.Message.Formatter%2A>| `formatter` 매개 변수입니다. |   | <xref:System.Messaging.Message.HashAlgorithm%2A>| `HashAlgorithm.MD5`|   | <xref:System.Messaging.Message.Label%2A>| 빈 문자열 (&quot;&quot;) |   | <xref:System.Messaging.Message.Priority%2A>| `MessagePriority.Normal`|   | <xref:System.Messaging.Message.Recoverable%2A>| `false`|   | <xref:System.Messaging.Message.ResponseQueue%2A>| `null`|   | <xref:System.Messaging.Message.SenderCertificate%2A>| 바이트 길이가 0 인 배열을 |   | <xref:System.Messaging.Message.TimeToBeReceived%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TimeToReachQueue%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TransactionStatusQueue%2A>| `null`|   | <xref:System.Messaging.Message.UseAuthentication%2A>| `false`|   | <xref:System.Messaging.Message.UseDeadLetterQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseEncryption%2A>| `false`|   | <xref:System.Messaging.Message.UseJournalQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseTracing%2A>| `false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - >-
    [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/6734a59e-0a86-49d1-96b9-_1.cpp)]
     [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/6734a59e-0a86-49d1-96b9-_1.cs)]
     [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/6734a59e-0a86-49d1-96b9-_1.vb)]
  syntax:
    content: public Message (object body, System.Messaging.IMessageFormatter formatter);
    parameters:
    - id: body
      type: System.Object
      description: "메시지의 본문으로 serialize 할 개체입니다."
    - id: formatter
      type: System.Messaging.IMessageFormatter
      description: "A <xref href=&quot;System.Messaging.IMessageFormatter&quot;> </xref> 메시지 본문을 직렬화 할 수 있는 포맷터를 지정 하는 합니다."
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.AcknowledgeType
  id: AcknowledgeType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
  fullName: System.Messaging.Message.AcknowledgeType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "보내는 응용 프로그램에 반환할 승인 메시지의 형식을 가져오거나 설정 합니다."
  remarks: "AcknowledgeType 속성에는 보내는 응용 프로그램에 필요한 승인 메시지의 유형을 지정 합니다. 특정 항목에 대 한 알림을 요청 하는 메시지를 보내기 전에 AcknowledgeType 속성을 설정 합니다.-예를 들어 대상 큐에 메시지, 메시지가 검색 되 고 또는 시간 제한에 도달 또는 대상 큐에서 검색 하 고 메시지를 방지 합니다.       메시지 큐에서 알림 승인 메시지를 전송 하 여 반환 된 <xref:System.Messaging.Message.AdministrationQueue%2A>원본 메시지에서 지정 된 속성입니다.</xref:System.Messaging.Message.AdministrationQueue%2A> 승인 메시지의 <xref:System.Messaging.Message.Acknowledgment%2A>속성 나타내는 승인의 유형을 나타냅니다.</xref:System.Messaging.Message.Acknowledgment%2A> 예를 들어 메시지 하기 전에 대상에 도달 하지 않으므로 승인 메시지를 보낼 수는 <xref:System.Messaging.Message.TimeToReachQueue%2A>간격이 만료 된 <xref:System.Messaging.Message.Acknowledgment%2A>승인 메시지의 속성 값이 포함 됩니다 `ReachQueueTimeout`.</xref:System.Messaging.Message.Acknowledgment%2A> </xref:System.Messaging.Message.TimeToReachQueue%2A>"
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_11_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_11_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_11_1.vb)]"
  syntax:
    content: public System.Messaging.AcknowledgeTypes AcknowledgeType { get; set; }
    return:
      type: System.Messaging.AcknowledgeTypes
      description: "중 하나는 <xref href=&quot;System.Messaging.AcknowledgeTypes&quot;> </xref> 시스템이 관리 큐는 승인이 보내는 응용 프로그램으로 반환 되는 조건에 게시 하는 승인 메시지의 형식을 나타내는 값입니다. 기본값은 <xref uid=&quot;langword_csharp_None&quot; name=&quot;None&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.AcknowledgeType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지는 AcknowledgeType 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.Acknowledgment
  id: Acknowledgment
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
  fullName: System.Messaging.Message.Acknowledgment
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "이 메시지가 나타내는 승인의 분류를 가져옵니다."
  remarks: "관리 큐에서 메시지를 받을 때 원본 메시지의 상태를 확인 하려면 승인 속성을 읽습니다.       대상 큐로 메시지를 보낼 때 메시지 큐 하도록 요청할 수 있습니다는 승인 메시지를 게시 합니다. 예를 들어 이러한 메시지 배달 하지 못한 경우 오류의 원인을 나타낼 수 있습니다 메시지 도착 하 고 지정 된 제한 시간 내에 검색 되었는지 여부를 나타낼 수 있습니다. 승인 메시지를 원본 메시지에 지정 된 관리 큐를 대상 큐 반환 <xref:System.Messaging.Message.AdministrationQueue%2A>속성.</xref:System.Messaging.Message.AdministrationQueue%2A> <xref:System.Messaging.Message.Id%2A>승인 메시지의 속성은 원본 메시지가 아닌 승인 메시지를 식별 합니다.</xref:System.Messaging.Message.Id%2A> 승인에서 원본 메시지의 식별자를 찾을 수 있습니다 <xref:System.Messaging.Message>인스턴스의 <xref:System.Messaging.Message.CorrelationId%2A>속성.</xref:System.Messaging.Message.CorrelationId%2A> </xref:System.Messaging.Message>       이 경우 <xref:System.Messaging.Message>승인 메시지를 나타내는 인스턴스, 승인 속성 승인의 유형을 지정 합니다.</xref:System.Messaging.Message> 승인 속성 값을 포함 하는 그렇지 않은 경우 `Normal`합니다.       사용 하 여는 <xref:System.Messaging.Message.AcknowledgeType%2A>승인이 반환 되는 상황을 지정 하 고 원본 메시지의 속성입니다.</xref:System.Messaging.Message.AcknowledgeType%2A>"
  syntax:
    content: public System.Messaging.Acknowledgment Acknowledgment { get; }
    return:
      type: System.Messaging.Acknowledgment
      description: "중 하나는 <xref href=&quot;System.Messaging.Acknowledgment&quot;> </xref> 열거형 값입니다."
  overload: System.Messaging.Message.Acknowledgment*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-무시 하도록 하는 메시지 큐가 <xref:System.Messaging.MessagePropertyFilter.Acknowledgment*>속성.</xref:System.Messaging.MessagePropertyFilter.Acknowledgment*>"
  platform:
  - net462
- uid: System.Messaging.Message.AdministrationQueue
  id: AdministrationQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
  fullName: System.Messaging.Message.AdministrationQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지 큐가 생성 하는 승인 메시지를 받는 큐를 가져오거나 설정 합니다."
  remarks: "AdministrationQueue 속성에 지정 된 큐는 비트랜잭션 큐를 수 있습니다. 관리 큐에 보낸 승인 메시지 원본 메시지가 대상 큐 도달 했는지 여부 및 큐에서 제거 되었는지 여부를 나타낼 수 있습니다.       경우는 <xref:System.Messaging.Message.AcknowledgeType%2A>속성 이외의 모든 값을 가지 `None`, 보내는 응용 프로그램에서 관리 큐로 사용할 큐를 지정 해야 합니다.</xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_47_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_47_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_47_1.vb)]"
  syntax:
    content: public System.Messaging.MessageQueue AdministrationQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "<xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> 시스템 생성 승인 메시지에 사용 되는 관리 큐를 지정 하는 합니다. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.AdministrationQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 AdministrationQueue 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.AppSpecific
  id: AppSpecific
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AppSpecific
  nameWithType: Message.AppSpecific
  fullName: System.Messaging.Message.AppSpecific
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "응용 프로그램 관련 추가 정보를 가져오거나 설정 합니다."
  remarks: "AppSpecific 속성 다양 한 유형의 메시지를 구성 하는 데 사용할 수 있는 응용 프로그램 관련 정보를 포함 합니다. 예를 들어 응용 프로그램 관련 인덱스를 사용할 수 있습니다. AppSpecific 속성 정보를 해석 하는 응용 프로그램의 작업은       가능 하면 항상 AppSpecific 속성 보다는 메시지의 본문에 메시지 데이터를 포함 해야 합니다.       사용 하 여 외부 큐를 사용할 때의 <xref:System.Messaging.Message.Extension%2A>속성을 통해 메시지 큐에 존재 하지 않는 메시지 속성을 지정 합니다.</xref:System.Messaging.Message.Extension%2A> 와 마찬가지로 AppSpecific 속성의 내용을 이해 하는 응용 프로그램에서 수행 된 <xref:System.Messaging.Message.Extension%2A>속성.</xref:System.Messaging.Message.Extension%2A>"
  syntax:
    content: public int AppSpecific { get; set; }
    return:
      type: System.Int32
      description: "응용 프로그램에만 적용 되는 정보입니다. 기본값은&0;입니다."
  overload: System.Messaging.Message.AppSpecific*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 AppSpecific 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.ArrivedTime
  id: ArrivedTime
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
  fullName: System.Messaging.Message.ArrivedTime
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지가 대상 큐에 도착 한 시간을 가져옵니다."
  remarks: "메시지의 <xref:System.Messaging.Message.TimeToBeReceived%2A>속성 대상 큐 로부터 메시지를 수신할 수 있어야 하는 속도 나타냅니다.</xref:System.Messaging.Message.TimeToBeReceived%2A> <xref:System.Messaging.Message.TimeToBeReceived%2A>속성 타이머 메시지를 보낼 때 메시지가 큐에 도착할 때가 아니라 시작.</xref:System.Messaging.Message.TimeToBeReceived%2A>"
  example:
  - "The following code example displays the value of a message's ArrivedTime property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public DateTime ArrivedTime { get; }
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime>대상 큐에 메시지의 도착 시간을 나타내는입니다.</xref:System.DateTime> 시간은 GMT에서 대상 큐가 있는 컴퓨터의 현지 시간으로 조정 됩니다."
  overload: System.Messaging.Message.ArrivedTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-메시지 큐 ArrivedTime 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.AttachSenderId
  id: AttachSenderId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
  fullName: System.Messaging.Message.AttachSenderId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "보낸 사람 ID를 메시지에 연결될지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "<xref:System.Messaging.Message.SenderId%2A>속성은 보내는 사용자의 식별자를 나타내는 바이트 배열입니다.</xref:System.Messaging.Message.SenderId%2A> 보낸 사람 ID는 메시지 큐에서 설정 되 고 보낸 사람에는 큐에 액세스 권한이 있는지 여부를 확인 하려면 수신 큐 관리자에서 사용 됩니다.       받는 큐에 보낸 사람 ID가는 메시지 큐 해야 하지 않으며 메시지의 보낸 사람 유효성 검사도 보낸 사람의 액세스를 확인 하는 보내는 응용 프로그램이 없는 경우 권한입니다. <xref:System.Messaging.Message.SenderId%2A>메시지가 대상 큐에 도달 했을 때 인증 된 경우에 신뢰할 수 있는 것인지.</xref:System.Messaging.Message.SenderId%2A> 큐와 인증 된 메시지만 허용 하는 경우 대상 큐에 도달 하면 메시지는 거부 된 <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>또는 <xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>속성은 `false`.</xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A> </xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>      > [!CAUTION] > 메시지가 거부 될 경우 배달 못 한 편지 큐로 보내지거나 (경우 <xref:System.Messaging.Message.UseDeadLetterQueue%2A>은 `true`), 무시 됩니다.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> 메시지는 큐에 도달 하지 못할 때 승인을 요청할 수 있습니다. 경우에, 그렇지 않으면 <xref:System.Messaging.Message.UseDeadLetterQueue%2A>은 `false` 메시지는 경고 없이 손실 될 수 있습니다.</xref:System.Messaging.Message.UseDeadLetterQueue%2A>"
  example:
  - "The following code example gets and sets the value of a message's AttachSenderId property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool AttachSenderId { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref:System.Messaging.Message.SenderId*>메시지에 첨부 된 건너뛸 필요가 없으면, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Messaging.Message.SenderId*> 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.AttachSenderId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 AttachSenderId 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.Authenticated
  id: Authenticated
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Authenticated
  nameWithType: Message.Authenticated
  fullName: System.Messaging.Message.Authenticated
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지가 인증 되었는지 여부를 나타내는 값을 가져옵니다."
  remarks: "인증 된 속성은 메시지와 상호 작용 되 고 인증이 요청 되었는지 확인 하는 동안 응용 프로그램에 의해서만 사용 됩니다. 메시지가 큐에 있으면 메시지가 인증 되었는지 합니다. 반대로, 인증 된 속성이 면 `true`, 수신 큐 관리자는 해당 메시지를 받으면 메시지를 인증 합니다.       메시지가 해당 속성을 확인 하 여 인증 실패를 확인할 수 없습니다. 메시지 큐에 메시지가 배달 되기 전에 인증에 실패 하는 메시지 큐에서 삭제 합니다. 그러나 배달이 실패 하면 메시지가 메시지 큐에 도착는 것을 방지 한 경우 승인 메시지를 보내도록 요청할 수 있습니다."
  example:
  - "The following code example displays the value of a message's Authenticated property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool Authenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>큐에 도달 했을 때 인증 메시지에 대 한 요청 된 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.Authenticated*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-는 메시지 큐가 인증 된 속성을 무시 합니다."
  platform:
  - net462
- uid: System.Messaging.Message.AuthenticationProviderName
  id: AuthenticationProviderName
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
  fullName: System.Messaging.Message.AuthenticationProviderName
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지의 디지털 서명을 생성 하는 데 사용 되는 암호화 공급자의 이름을 가져오거나 설정 합니다."
  remarks: "일반적으로 외부 큐를 사용 하는 경우에 AuthenticationProviderName을 사용 합니다. 메시지 큐는 인증 공급자 이름 및 외부 큐로 전송 된 메시지와 외부 큐에서 메시지 큐에 전달 된 메시지의 디지털 서명 유효성을 검사 하려면 (인증 공급자) 암호화 공급자의 인증 공급자 형식이 필요 합니다.       메시지를 보낼 때 항상는 AuthenticationProviderName 설정 및 <xref:System.Messaging.Message.ConnectorType%2A>속성을 함께.</xref:System.Messaging.Message.ConnectorType%2A> 메시지를 보낼 때 메시지 큐 무시 인증 공급자 이름 커넥터 종류가 설정 되지 않은 경우.       AuthenticationProviderName 속성 일 수 없습니다 `null`, 있지만 빈 문자열일 수 있습니다 (&quot;&quot;)."
  syntax:
    content: public string AuthenticationProviderName { get; set; }
    return:
      type: System.String
      description: "메시지의 디지털 서명을 생성 하는 데 사용 되는 암호화 공급자의 이름입니다. 기본값은 Microsoft Base Cryptographic Provider 1.0 버전."
  overload: System.Messaging.Message.AuthenticationProviderName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "AuthenticationProviderName 속성을 설정할 수 없습니다.       -또는-메시지 큐 AuthenticationProviderName 속성을 무시 하도록 필터링 됩니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "AuthenticationProviderName로 설정 된 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Messaging.Message.AuthenticationProviderType
  id: AuthenticationProviderType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
  fullName: System.Messaging.Message.AuthenticationProviderType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지의 디지털 서명을 생성 하는 데 사용 되는 암호화 제공자의 종류를 가져오거나 설정 합니다."
  remarks: "일반적으로 사용 AuthenticationProviderType 속성 외부 큐에서 작업 하는 경우는 메시지와 연결 된 암호화 서비스 공급자를 지정할 수 있습니다. 메시지 큐는 인증 공급자 이름 및 외부 큐로 전송 된 메시지와 외부 큐에서 메시지 큐에 전달 된 메시지의 디지털 서명 유효성을 검사 하려면 (인증 공급자) 암호화 공급자의 인증 공급자 형식이 필요 합니다.       만 `RsaFull` messaging과 함께 사용 하기에 적합 합니다.       메시지를 보낼 때 항상는 AuthenticationProviderType 설정 및 <xref:System.Messaging.Message.ConnectorType%2A>속성을 함께.</xref:System.Messaging.Message.ConnectorType%2A> 메시지를 보낼 때 메시지 큐 무시 인증 공급자 유형 커넥터 종류가 설정 되지 않은 경우."
  syntax:
    content: public System.Messaging.CryptographicProviderType AuthenticationProviderType { get; set; }
    return:
      type: System.Messaging.CryptographicProviderType
      description: "중 하나는 <xref href=&quot;System.Messaging.CryptographicProviderType&quot;> </xref> 값입니다. 기본값은 <xref uid=&quot;langword_csharp_RSA_FULL&quot; name=&quot;RSA_FULL&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.AuthenticationProviderType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "AuthenticationProviderType 속성을 설정할 수 없습니다.       -또는-메시지 큐 AuthenticationProviderType 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.Body
  id: Body
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Body
  nameWithType: Message.Body
  fullName: System.Messaging.Message.Body
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지의 콘텐츠를 가져오거나 설정 합니다."
  remarks: "일반적으로 메시지의 본문 속성은 메시지와 관련 된 데이터를 포함 합니다. 응용 프로그램 관련 데이터를 보낼 수도 있지만 <xref:System.Messaging.Message.AppSpecific%2A>및 <xref:System.Messaging.Message.Extension%2A>속성, 가능 하면 메시지의 본문에 메시지 데이터를 포함 해야 합니다.</xref:System.Messaging.Message.Extension%2A> </xref:System.Messaging.Message.AppSpecific%2A> 본문 속성 내용만 serialize 되거나 암호화 합니다.       Body 속성 필요에 따라 크기가 4MB를 초과 하지 않는 개체를 포함할 수 있습니다. <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>형식 <xref:System.Messaging.Message> <xref:System.Messaging.MessageQueue> <xref:System.Messaging.Message>인스턴스 <xref:System.Messaging.MessageQueue.Peek%2A>또는 <xref:System.Messaging.MessageQueue.Receive%2A>.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue.Peek%2A> 반환한</xref:System.Messaging.Message> 의 Body 속성에 배치 됩니다 개체는</xref:System.Messaging.MessageQueue> </xref:System.Messaging.Message> 않은 모든 개체를 보낼</xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> 때 사용 하는 경우       문자열 인수에 `MessageQueue.Send(&quot;hello.&quot;)` 은 예제는 이러한 일반 개체입니다.       <xref:System.Messaging.Message.BodyType%2A>속성에는 메시지 본문에 저장 된 정보의 유형을 나타냅니다.</xref:System.Messaging.Message.BodyType%2A> 메시지 큐는 본문 속성 콘텐츠 형식을 식별 하기 위해이 정보를 사용 합니다.       Body 속성을 지정 합니다. 또는 <xref:System.Messaging.Message.BodyStream%2A>보내기 전에 속성에서 <xref:System.Messaging.Message>개체입니다.</xref:System.Messaging.Message> </xref:System.Messaging.Message.BodyStream%2A> Body 속성은 모든 텍스트 문자열 같은 직렬화 가능 개체, 구조체, 클래스 인스턴스 또는 포함 된 개체 수 있습니다.       메시지의 내용을 직접 작성 하지 않는 경우는 <xref:System.Messaging.Message.BodyStream%2A>속성 설정의 <xref:System.Messaging.Message.Formatter%2A>속성 메시지를 보내기 전에.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.BodyStream%2A> 경우는 <xref:System.Messaging.MessageQueue.Send%2A>메서드가 호출 되는 <xref:System.Messaging.MessageQueue>인스턴스가, 본문에 포함 된 포맷터를 사용 하 여 serialize 되는 <xref:System.Messaging.Message.Formatter%2A>속성.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> <xref:System.Messaging.Message.Formatter%2A>속성을 <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter> 포맷터 기본값에</xref:System.Messaging.Message.Formatter%2A> 대 한 값을 지정 하지 않고 메시지를 보내는 경우      > [!NOTE] >는 메시지의 본문을 설정 하는 <xref:System.Decimal.MaxValue>하면는 <xref:System.OverflowException>때는 `Send` 의 메서드는 <xref:System.Messaging.MessageQueue>클래스 라고 및 <xref:System.Messaging.ActiveXMessageFormatter>사용 됩니다.</xref:System.Messaging.ActiveXMessageFormatter> </xref:System.Messaging.MessageQueue> </xref:System.OverflowException> </xref:System.Decimal.MaxValue>"
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/p-system.messaging.messa_13_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_13_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/p-system.messaging.messa_13_1.cs)]"
  syntax:
    content: public object Body { get; set; }
    return:
      type: System.Object
      description: "메시지 콘텐츠를 지정 하는 개체입니다. 개체를 문자열, 날짜, 통화, 숫자, 바이트의 배열 또는 관리 되는 개체 수 있습니다."
  overload: System.Messaging.Message.Body*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Messaging.Message.Formatter*>속성은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Messaging.Message.Formatter*>       -또는-메시지 큐의 Body 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.BodyStream
  id: BodyStream
  parent: System.Messaging.Message
  langs:
  - csharp
  name: BodyStream
  nameWithType: Message.BodyStream
  fullName: System.Messaging.Message.BodyStream
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지의 본문에서 정보를 가져오거나 설정 합니다."
  remarks: "메시지의 본문 모든 종류의 정보로 구성 될 수-문자열, 날짜, 통화, 숫자, 바이트의 배열 또는 관리 되는 개체 예를 들어 있습니다. 이 정보로 serialize 되는 <xref:System.IO.Stream>큐에 전달할.</xref:System.IO.Stream>       지정 된 <xref:System.Messaging.Message.Body%2A>속성 또는 보내기 전에 BodyStream 속성은 <xref:System.Messaging.Message>개체입니다.</xref:System.Messaging.Message> </xref:System.Messaging.Message.Body%2A> 설정 하는 경우는 <xref:System.Messaging.Message.Body%2A>속성 내용을 BodyStream 속성으로 직렬화 됩니다.</xref:System.Messaging.Message.Body%2A> 그러나 BodyStream 속성을 직접 작성 하도록 선택할 수 있습니다. 예를 들어 파일에 대 한 연결을 열고 스트림 그 내용을 메시지의 본문으로 하려는 경우 유용, 합니다.       메시지의 내용을 BodyStream 속성에 직접 작성 하지 않는 경우 설정 된 <xref:System.Messaging.Message.Formatter%2A>속성 메시지를 보내기 전에.</xref:System.Messaging.Message.Formatter%2A> 경우는 <xref:System.Messaging.MessageQueue.Send%2A>메서드가 호출 되는 <xref:System.Messaging.MessageQueue>인스턴스가, 본문에 포함 된 포맷터를 사용 하 여 serialize 되는 <xref:System.Messaging.Message.Formatter%2A>속성.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> <xref:System.Messaging.Message.Formatter%2A>속성을 <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter> 포맷터 기본값에</xref:System.Messaging.Message.Formatter%2A> 대 한 값을 지정 하지 않고 메시지를 보내는 경우       설정 하는 경우는 <xref:System.Messaging.Message.UseEncryption%2A>속성을 `true` 이 메시지의 본문, 메시지를 암호화할 전송 될 때, 설정한 때가 아니라는 <xref:System.Messaging.Message.Body%2A>속성.</xref:System.Messaging.Message.Body%2A> </xref:System.Messaging.Message.UseEncryption%2A> 따라서 BodyStream 속성 암호화 되지 않습니다."
  syntax:
    content: public System.IO.Stream BodyStream { get; set; }
    return:
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>에 포함 된 직렬화 된 정보를 포함 하는 <xref:System.Messaging.Message.Body*>메시지의.</xref:System.Messaging.Message.Body*> </xref:System.IO.Stream>"
  overload: System.Messaging.Message.BodyStream*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐를 무시 하려면는 <xref:System.Messaging.Message.Body*>속성.</xref:System.Messaging.Message.Body*>"
  platform:
  - net462
- uid: System.Messaging.Message.BodyType
  id: BodyType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: BodyType
  nameWithType: Message.BodyType
  fullName: System.Messaging.Message.BodyType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지 본문에 포함 되는 데이터 형식을 가져오거나 설정 합니다."
  remarks: "메시지 큐 개체 또는 serialize 된 스트림으로 본문 콘텐츠를 인식합니다. BodyType 속성 내에서 개체의 유형을 나타냅니다는 <xref:System.Messaging.Message.Body%2A>메시지의 속성입니다.</xref:System.Messaging.Message.Body%2A>       <xref:System.Messaging.XmlMessageFormatter>메시지 본문에서 네이티브 형식과 개체 간에 바인딩을 수행 합니다.</xref:System.Messaging.XmlMessageFormatter> 사용 하는 경우는 <xref:System.Messaging.XmlMessageFormatter>, BodyType 속성을 설정 하는 포맷터입니다.</xref:System.Messaging.XmlMessageFormatter>       다른 포맷터는 또한 다음 C# 코드에서와 같이 바인딩 기능을 제공할 수 있습니다.      ```   message.Formatter = new ActiveXMessageFormatter();   object myObject message.Body;   if (myObject is string) {   }   if (myObject is int) {   }   if (myObject is float) {   }   ```"
  example:
  - "The following code example displays the value of a message's BodyType property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public int BodyType { get; set; }
    return:
      type: System.Int32
      description: "메시지 본문의 실제 형식, 문자열, 날짜, 통화, 또는 숫자와 같은 합니다."
  overload: System.Messaging.Message.BodyType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐를 무시 하려면는 <xref:System.Messaging.Message.Body*>속성.</xref:System.Messaging.Message.Body*>"
  platform:
  - net462
- uid: System.Messaging.Message.ConnectorType
  id: ConnectorType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ConnectorType
  nameWithType: Message.ConnectorType
  fullName: System.Messaging.Message.ConnectorType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "보내는 응용 프로그램에서 일반적으로 메시지 큐에서 설정 하는 일부 메시지 속성이 설정 되었는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "메시지 큐 응용 프로그램은 일반적으로 메시지 큐에서 설정 하는 메시지 속성에서 설정 될 때마다 ConnectorType 속성을 설정할 필요 합니다. 다음 두 가지 경우에는 응용 프로그램 일반적으로 사용 하 여 한 ConnectorType:-때마다 커넥터 응용 프로그램에 메시지를 전달 합니다. ConnectorType 송신 및 수신 응용 프로그램을 메시지의 보안 및 승인 속성을 해석 하는 방법을 지시 합니다.      -때마다는 보내는 응용 프로그램 보다는 메시지 큐에서 메시지를 암호화합니다. 메시지 큐를 사용 하 여 ConnectorType 지시는 <xref:System.Messaging.Message.DestinationSymmetricKey%2A>속성 값을 메시지의 암호를 해독 합니다.</xref:System.Messaging.Message.DestinationSymmetricKey%2A>       다음과 같은 속성을 설정 하면 ConnectorType 속성을 설정 해야 합니다 (그렇지 않으면 큐 무시 이러한 속성은 메시지를 보낼 때):- <xref:System.Messaging.Message.AuthenticationProviderName%2A>- <xref:System.Messaging.Message.AuthenticationProviderType%2A>- <xref:System.Messaging.Message.DestinationSymmetricKey%2A>- <xref:System.Messaging.Message.DigitalSignature%2A>- <xref:System.Messaging.Message.MessageType%2A>- <xref:System.Messaging.Message.SenderId%2A></xref:System.Messaging.Message.SenderId%2A> </xref:System.Messaging.Message.MessageType%2A> </xref:System.Messaging.Message.DigitalSignature%2A> </xref:System.Messaging.Message.DestinationSymmetricKey%2A> </xref:System.Messaging.Message.AuthenticationProviderType%2A> </xref:System.Messaging.Message.AuthenticationProviderName%2A>"
  syntax:
    content: public Guid ConnectorType { get; set; }
    return:
      type: System.Guid
      description: "A <xref:System.Guid>응용 프로그램에 의해 정의 되며 커넥터 응용 프로그램 또는 메시지 암호화와 함께 사용 합니다.</xref:System.Guid> 이 <xref:System.Guid>보내는 응용 프로그램에서 설정 하는 일반적으로 메시지 큐에서 설정 되었지만 메시지 속성을 해석 하는 수신 응용 프로그램을 허용 합니다.</xref:System.Guid>"
  overload: System.Messaging.Message.ConnectorType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 ConnectorType 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.CorrelationId
  id: CorrelationId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: CorrelationId
  nameWithType: Message.CorrelationId
  fullName: System.Messaging.Message.CorrelationId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "원본 메시지를 참조 하도록 승인, 보고 및 응답 메시지에서 사용 하는 메시지 식별자를 가져오거나 설정 합니다."
  remarks: "메시지 큐에서 승인 또는 보고 메시지를 생성할 때에 상관 관계 식별자 속성을 사용 하 여 원본 메시지의 메시지 식별자를 지정 합니다. 이러한 방식으로 상관 관계 식별자는 보고 메시지나 승인 메시지를 원본 메시지를 연결합니다.       보내는 응용 프로그램 일치 시킬 수 있습니다 승인 또는 보고 원본 메시지와 원래 메시지 식별 하기 위해 CorrelationId 속성을 사용 하 여 <xref:System.Messaging.Message.Id%2A>속성.</xref:System.Messaging.Message.Id%2A>       또한 커넥터 응용 프로그램 원본 메시지의 메시지 식별자를 승인 및 보고 메시지의 CorrelationId 속성을 설정 해야 합니다.       응용 프로그램 응답 메시지는 보내는 응용 프로그램을 보내면 응답 메시지의 CorrelationId 속성 원본 메시지의 메시지 식별자로 설정할 수 있습니다. 보내는 응용 프로그램에서 보낸 메시지에 응답 메시지를 일치 시킬 수 있습니다."
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_95_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_95_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_95_1.vb)]"
  syntax:
    content: public string CorrelationId { get; set; }
    return:
      type: System.String
      description: "로 지정 된 메시지 식별자는 <xref:System.Messaging.Message.Id*>원본 메시지의 속성입니다.</xref:System.Messaging.Message.Id*> 응답 메시지를 생성할 때 상관 관계 식별자는 메시지는 승인 또는 보고 메시지를 생성할 때 큐에서 및 응용 프로그램에 의해 사용 됩니다."
  overload: System.Messaging.Message.CorrelationId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 CorrelationId 속성을 무시 하도록 필터링 됩니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "CorrelationId은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Messaging.Message.DestinationQueue
  id: DestinationQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
  fullName: System.Messaging.Message.DestinationQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지에 대 한 의도 한 대상 큐를 가져옵니다."
  remarks: "DestinationQueue 속성은 저널 또는 배달 못 한 편지 큐에 도착 한 메시지의 원래 대상을 확인 하 가장 일반적으로 사용 됩니다. 일반적으로 않아도이 속성을 검사 하려면 일반적으로 대상 큐에서 메시지를 검색 하기 때문에 합니다."
  example:
  - "The following code example displays the value of a message's DestinationQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue DestinationQueue { get; }
    return:
      type: System.Messaging.MessageQueue
      description: "A <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> 메시지에 대 한 의도 한 대상 큐를 지정 하는 합니다."
  overload: System.Messaging.Message.DestinationQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-메시지 큐 DestinationQueue 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.DestinationSymmetricKey
  id: DestinationSymmetricKey
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
  fullName: System.Messaging.Message.DestinationSymmetricKey
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "응용 프로그램에서 암호화 된 메시지를 암호화 하는 데 사용 되는 대칭 키 또는 외래 큐로 보낸 메시지를 가져오거나 설정 합니다."
  remarks: "두 가지 시나리오를 사용 하면 DestinationSymmetricKey 속성을 사용 하도록 해야 합니다. 첫 번째 응용 프로그램을 대신 메시지 큐에서 메시지를 암호화 하는 합니다. 두 번째 메시지 큐가 아닌 큐 시스템에 암호화 된 메시지를 보낼 때가 있습니다.       이 속성을 설정 하기 전에 수신 큐 관리자의 공개 키와 대칭 키를 암호화 해야 합니다. 응용 프로그램 암호화 된 메시지를 보내면 수신 큐 관리자를 사용 하 여 대칭 키 대상 큐로 보내기 전에 메시지를 암호 해독 합니다.       외부 큐로 메시지를 보내는 경우 메시지는 먼저 수신 응용 프로그램에 연결 된 대칭 키로 암호화 된 메시지를 전달 하는 적절 한 커넥터 응용 프로그램에서 수신 됩니다. 대칭 키를 사용 하 여 메시지를 해독 하는 수신 응용 프로그램에서 수행 됩니다.       DestinationSymmetricKey 속성을 설정 하는 경우 설정 해야는 <xref:System.Messaging.Message.ConnectorType%2A>속성.</xref:System.Messaging.Message.ConnectorType%2A> 메시지를 보낼 때 메시지 큐는 DestinationSymmetricKey에서 속성을 무시 하는 경우는 <xref:System.Messaging.Message.ConnectorType%2A>에서도 속성이 설정 되지 않은.</xref:System.Messaging.Message.ConnectorType%2A>       DestinationSymmetricKey 속성에는 최대 배열 크기는 256 자입니다."
  syntax:
    content: public byte[] DestinationSymmetricKey { get; set; }
    return:
      type: System.Byte[]
      description: "메시지를 암호화 하는 데 사용 하는 대상 대칭 키를 지정 하는 바이트 값의 배열입니다. 기본값은 빈 배열입니다."
  overload: System.Messaging.Message.DestinationSymmetricKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 DestinationSymmetricKey 속성을 무시 하도록 필터링 됩니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "DestinationSymmetricKey은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Messaging.Message.DigitalSignature
  id: DigitalSignature
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
  fullName: System.Messaging.Message.DigitalSignature
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지 큐에서 메시지를 인증에 사용 하는 디지털 서명을 가져오거나 설정 합니다."
  remarks: "메시지 큐는 메시지 버전 1.0 큐에서 전송 된 메시지를 인증할 때 디지털 서명을 사용 합니다. 대부분의 경우에서 메시지 큐를 생성 및 보내는 응용 프로그램이 인증을 요청 하면 DigitalSignature 속성을 설정 합니다. 수신 응용 프로그램이이 속성을 사용 하 여 메시지에 첨부 된 디지털 서명을 검색 합니다.       메시지 큐 2.0 버전을 실행 하는 경우에 DigitalSignature 속성을 사용할 수 있습니다. 인증을 요청할 때 보내는 응용 프로그램 버전 1.0 서명을 메시지 큐를 지정 해야 합니다. 보내는 응용 프로그램 메시지 큐 버전 2.0 서명의 보내는 경우이 속성의 4 바이트를 0이 포함 된 각 버퍼를 포함 합니다.       DigitalSignature 속성을 함께 <xref:System.Messaging.Message.SenderCertificate%2A>속성에는 또한 커넥터 응용 프로그램에서 메시지를 보낼 때.</xref:System.Messaging.Message.SenderCertificate%2A> 이 시나리오에서는 커넥터 응용 프로그램-메시지 큐가 아닌-메시지를 보내는 사용자의 인증서를 기반는 디지털 서명을 생성 합니다.       DigitalSignature 속성에는 최대 배열 크기는 256 자입니다.       DigitalSignature 속성을 설정 하는 경우 설정 해야는 <xref:System.Messaging.Message.ConnectorType%2A>속성.</xref:System.Messaging.Message.ConnectorType%2A> 메시지를 보낼 때 메시지 큐는 DigitalSignature에서 속성을 무시 하는 경우는 <xref:System.Messaging.Message.ConnectorType%2A>에서도 속성이 설정 되지 않은.</xref:System.Messaging.Message.ConnectorType%2A>"
  syntax:
    content: public byte[] DigitalSignature { get; set; }
    return:
      type: System.Byte[]
      description: "메시지를 인증 하는 데 사용 하는 메시지 큐 1.0 디지털 서명을 지정 하는 바이트 값의 배열입니다. 기본값은 빈 배열입니다."
  overload: System.Messaging.Message.DigitalSignature*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 DigitalSignature 속성을 무시 하도록 필터링 됩니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "DigitalSignature 속성은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Messaging.Message.EncryptionAlgorithm
  id: EncryptionAlgorithm
  parent: System.Messaging.Message
  langs:
  - csharp
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
  fullName: System.Messaging.Message.EncryptionAlgorithm
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "개인 메시지의 본문을 암호화 하는 데 사용 되는 암호화 알고리즘을 가져오거나 설정 합니다."
  remarks: "메시지의 경우 개인 (암호화 됨)를 보내고 받을 때 암호가 해독 하기 전에 암호화 됩니다. EncryptionAlgorithm 속성 개인 메시지의 메시지 본문을 암호화 하는 데 사용 하는 알고리즘을 지정 합니다.       큐에서는 들어오는 메시지를 암호화할 수 있습니다. 응용 프로그램 개인 메시지만 허용 하는 큐에 암호화 되지 않은 (private이 아닌) 메시지를 보냅니다. private이 아닌 메시지만 허용 하는 개인 메시지 큐에 보내는 경우, 큐에서 메시지를 거부 합니다. 보내는 응용 프로그램 부정 승인 메시지 이런 경우에서 반환 되도록 요청할 수 있습니다."
  syntax:
    content: public System.Messaging.EncryptionAlgorithm EncryptionAlgorithm { get; set; }
    return:
      type: System.Messaging.EncryptionAlgorithm
      description: "중 하나는 <xref href=&quot;System.Messaging.EncryptionAlgorithm&quot;> </xref> 열거형 값입니다. 기본값은 <xref uid=&quot;langword_csharp_RC2&quot; name=&quot;RC2&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.EncryptionAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 EncryptionAlgorithm 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.Extension
  id: Extension
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Extension
  nameWithType: Message.Extension
  fullName: System.Messaging.Message.Extension
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지와 관련 된 응용 프로그램 정의 추가 정보를 가져오거나 설정 합니다."
  remarks: "확장 속성은 메시지와 연결 된 큰 이진 개체와 같은 응용 프로그램 정의 정보를 제공 합니다. 확장 속성의 내용을 해석 하는 수신 응용 프로그램의 작업은       가능한 경우, 메시지 데이터를 포함 해야는 <xref:System.Messaging.Message.Body%2A>확장 속성이 아닌 메시지의 속성입니다.</xref:System.Messaging.Message.Body%2A>       외부 큐를 사용할 때 확장 속성을 사용 하 여 메시지 큐에 존재 하지 않는 메시지 속성을 지정 하려면.       외부 큐 Microsoft 메시지 큐가 아닌 큐 시스템에 존재합니다. 메시지 큐는 커넥터 응용 프로그램을 통해 이러한 큐와 통신합니다."
  syntax:
    content: public byte[] Extension { get; set; }
    return:
      type: System.Byte[]
      description: "메시지와 관련 된 응용 프로그램 정의 정보를 제공 하는 바이트 값의 배열입니다. 기본값은 빈 배열입니다."
  overload: System.Messaging.Message.Extension*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐는 확장 속성을 무시 하도록 필터링 됩니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "확장 속성은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Messaging.Message.Formatter
  id: Formatter
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Formatter
  nameWithType: Message.Formatter
  fullName: System.Messaging.Message.Formatter
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "에 개체를 직렬화 하거나 메시지 본문에서 개체를 역직렬화 하는 데 사용 하는 포맷터를 가져오거나 설정 합니다."
  remarks: "포맷터 속성 읽고 메시지를 쓸 때 사용 합니다. 포맷터가 serialize 큐로 메시지를 보낼 때의 <xref:System.Messaging.Message.Body%2A>메시지 큐로 보낼 수 있는 스트림으로 속성.</xref:System.Messaging.Message.Body%2A> 큐에서 읽을 때 포맷터는 메시지 데이터에는 <xref:System.Messaging.Message.Body%2A>속성.</xref:System.Messaging.Message.Body%2A>       메시지의 내용을 직접 작성 하지 않는 경우는 <xref:System.Messaging.Message.BodyStream%2A>속성, 메시지를 보내기 전에 포맷터 속성을 설정 합니다.</xref:System.Messaging.Message.BodyStream%2A> 경우는 <xref:System.Messaging.MessageQueue.Send%2A>메서드가 호출 되는 <xref:System.Messaging.MessageQueue>인스턴스를 본문 포맷터 속성에 포함 된 포맷터를 사용 하 여 serialize 됩니다.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> 포맷터 <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter> 기본값으로 포맷터 속성에 대 한 값을 지정 하지 않고 메시지를 보내는 경우       <xref:System.Messaging.XmlMessageFormatter>는 느슨하게 결합 되어 있으므로이 형식을 사용 하는 경우에 발신자와 수신자 입력 동일한 개체를 설정할 필요가 없습니다.</xref:System.Messaging.XmlMessageFormatter> <xref:System.Messaging.ActiveXMessageFormatter>및 <xref:System.Messaging.BinaryMessageFormatter>이진 표현으로 데이터를 직렬화 합니다.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> <xref:System.Messaging.ActiveXMessageFormatter>COM 구성 요소를 받거나 보낼 때 사용 됩니다.</xref:System.Messaging.ActiveXMessageFormatter>"
  example:
  - "The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \n  \n [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/p-system.messaging.messa_5_1.cpp)]\n [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/p-system.messaging.messa_5_1.cs)]\n [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_5_1.vb)]  \n  \n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/p-system.messaging.messa_5_2.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/p-system.messaging.messa_5_2.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_5_2.vb)]"
  syntax:
    content: public System.Messaging.IMessageFormatter Formatter { get; set; }
    return:
      type: System.Messaging.IMessageFormatter
      description: "<xref href=&quot;System.Messaging.IMessageFormatter&quot;> </xref> 에 기록 하거나 메시지 본문에서 읽을 수 스트림을 만드는입니다. 기본값은 <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref>합니다."
  overload: System.Messaging.Message.Formatter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "포맷터 속성은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Messaging.Message.HashAlgorithm
  id: HashAlgorithm
  parent: System.Messaging.Message
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
  fullName: System.Messaging.Message.HashAlgorithm
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지 큐 메시지를 인증할 때 사용 하는 해시 알고리즘 또는 메시지에 대 한 디지털 서명을 만드는 값을 가져오거나 설정 합니다."
  remarks: "원본 컴퓨터 메시지 큐는 메시지에 대 한 디지털 서명을 만들 때 해시 알고리즘을 사용 합니다. 대상 큐 관리자는 다음 수신 될 때 메시지를 인증 하 동일한 해시 알고리즘을 사용 합니다."
  syntax:
    content: public System.Messaging.HashAlgorithm HashAlgorithm { get; set; }
    return:
      type: System.Messaging.HashAlgorithm
      description: "중 하나는 <xref href=&quot;System.Messaging.HashAlgorithm&quot;> </xref> 열거형 값입니다. 기본값은 Windows xp <xref uid=&quot;langword_csharp_SHA&quot; name=&quot;SHA&quot; href=&quot;&quot;> </xref>합니다. 그렇지 않은 경우 기본값은 <xref uid=&quot;langword_csharp_MD5&quot; name=&quot;MD5&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.HashAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 HashAlgorithm 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.Id
  id: Id
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Id
  nameWithType: Message.Id
  fullName: System.Messaging.Message.Id
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지의 식별자를 가져옵니다."
  remarks: "메시지 큐는 메시지를 보낼 때 메시지 식별자를 생성 합니다. 식별자는 20 바이트로 구성 하며 두 개의 항목을 포함: 컴퓨터 <xref:System.Guid>보내는 컴퓨터와 컴퓨터에 메시지에 대 한 고유 식별자입니다.</xref:System.Guid> 네트워크에서 고유한 메시지 식별자를 생성 하는 두 항목을 결합 합니다.       큐에서는 모든 메시지에 대 한 메시지 식별자를 생성 하는 메시지-승인 및 보고 메시지를 포함 합니다. 승인 메시지 원본, 보낸 메시지의 도착 여부에 대 한 응답의 메시지 큐에서 일반적으로 전송 됩니다. 원본 메시지의 Id 속성 값을 찾을 수 있습니다는 <xref:System.Messaging.Message.CorrelationId%2A>승인 메시지의 속성입니다.</xref:System.Messaging.Message.CorrelationId%2A>       응답 큐로 응답 메시지를 보낼 때에 Id 속성을 사용할 수 있습니다. 응답 메시지의 원본 메시지의 식별자를 포함 하려면 설정는 <xref:System.Messaging.Message.CorrelationId%2A>원본 메시지의 Id 속성에 대 한 응답 메시지의 속성입니다.</xref:System.Messaging.Message.CorrelationId%2A> 응답 메시지를 읽는 응용 프로그램 원본 메시지를 식별 하는 응답 메시지의 상관 관계 식별자를 유도할 수 있습니다."
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_19_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_19_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_19_1.vb)]"
  syntax:
    content: public string Id { get; }
    return:
      type: System.String
      description: "메시지의 고유 식별자를 메시지 큐에서 생성 된입니다."
  overload: System.Messaging.Message.Id*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-메시지 큐의 Id 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.InfiniteTimeout
  id: InfiniteTimeout
  parent: System.Messaging.Message
  langs:
  - csharp
  name: InfiniteTimeout
  nameWithType: Message.InfiniteTimeout
  fullName: System.Messaging.Message.InfiniteTimeout
  type: Field
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "제한 시간이 없도록 지정 합니다."
  remarks: "<xref:System.Messaging.Message.TimeToBeReceived%2A>및 <xref:System.Messaging.Message.TimeToReachQueue%2A>제한 시간을 지정 하는 값이 필요 합니다.</xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A> 전자의 경우에 대 한 시간 제한은 큐에서 받을 메시지에 허용 된 최대 시간입니다. 후자의 경우 시간 제한은 큐에 도달 하는 메시지에 대 한 허용 되는 시간입니다. 두 경우 모두 다양 한 시간 (초)로 제한 시간을 지정할 수도 있고 InfiniteTimeout 제한 시간 없음이 있는지를 나타내는 데 사용할 수 있습니다."
  example:
  - "The following code example demonstrates the use of the InfiniteTimeout field.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public static readonly TimeSpan InfiniteTimeout;
    return:
      type: System.TimeSpan
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.IsFirstInTransaction
  id: IsFirstInTransaction
  parent: System.Messaging.Message
  langs:
  - csharp
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
  fullName: System.Messaging.Message.IsFirstInTransaction
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "트랜잭션으로 보낸 첫 번째 메시지 인지 여부를 나타내는 값을 가져옵니다."
  remarks: "메시지가 단일 트랜잭션에서 단일 대기열으로 보낸 첫 번째 메시지 인지를 확인 하려면 IsFirstInTransaction 속성을 사용 하는 수신 응용 프로그램입니다.       이 속성이 메시지 큐 버전 2.0에만 사용할 수 이상입니다.       트랜잭션 경계를 확인 하려면 두 개의 다른 속성과 함께 IsFirstInTransaction 속성을 사용할 수 있습니다: <xref:System.Messaging.Message.IsLastInTransaction%2A>및 <xref:System.Messaging.Message.TransactionId%2A>.</xref:System.Messaging.Message.TransactionId%2A> </xref:System.Messaging.Message.IsLastInTransaction%2A> 전자는 트랜잭션에서 보내진 마지막 메시지 인지 여부를 확인 하 고 트랜잭션 식별자를 검색 하 고 후자를 사용 하십시오.       하나의 메시지는 IsFirstInTransaction 트랜잭션에서 보내집니다만 및 <xref:System.Messaging.Message.IsLastInTransaction%2A>속성 둘 다로 설정 `true`.</xref:System.Messaging.Message.IsLastInTransaction%2A>"
  example:
  - "The following code example displays the value of a message's IsFirstInTransaction property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool IsFirstInTransaction { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>트랜잭션에서; 보낸 첫 번째 메시지 인지 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.IsFirstInTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-메시지 큐 IsFirstInTransaction 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.IsLastInTransaction
  id: IsLastInTransaction
  parent: System.Messaging.Message
  langs:
  - csharp
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
  fullName: System.Messaging.Message.IsLastInTransaction
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "트랜잭션에서 보내진 마지막 메시지 인지 여부를 나타내는 값을 가져옵니다."
  remarks: "메시지가 단일 트랜잭션에서 단일 대기열으로 보낸 마지막 메시지 인지를 확인 하려면 IsLastInTransaction 속성을 사용 하는 수신 응용 프로그램입니다.       이 속성이 메시지 큐 버전 2.0에만 사용할 수 이상입니다.       트랜잭션 경계를 확인 하려면 두 개의 다른 속성과 함께 IsLastInTransaction 속성을 사용할 수 있습니다: <xref:System.Messaging.Message.IsFirstInTransaction%2A>및 <xref:System.Messaging.Message.TransactionId%2A>.</xref:System.Messaging.Message.TransactionId%2A> </xref:System.Messaging.Message.IsFirstInTransaction%2A> 전자는 트랜잭션에서 보낸 첫 번째 메시지 인지 여부를 확인 하 고 트랜잭션 식별자를 검색 하 고 후자를 사용 하십시오.       경우에, 트랜잭션에서 하나의 메시지가 보내집니다는 <xref:System.Messaging.Message.IsFirstInTransaction%2A>IsLastInTransaction 속성 둘 다로 설정 하 고 `true`.</xref:System.Messaging.Message.IsFirstInTransaction%2A>"
  example:
  - "The following code example displays the value of a message's IsLastInTransaction property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool IsLastInTransaction { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>메시지가 단일 트랜잭션에서 보내진 마지막 메시지 이면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.IsLastInTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-메시지 큐 IsLastInTransaction 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.Label
  id: Label
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Label
  nameWithType: Message.Label
  fullName: System.Messaging.Message.Label
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지를 설명 하는 응용 프로그램 정의 유니코드 문자열을 가져오거나 설정 합니다."
  remarks: "메시지 레이블은 여러 용도로 사용할 수 있습니다. 예를 들어 내용을 표시 하거나 레이블 값에 따라 메시지를 처리할 선택적으로 사용할 수 있습니다. 레이블을은 메시지에서 고유할 필요는 없습니다.       메시지 큐와 메시지 레이블을 나타내는 데 도움이 되는 응용 프로그램 정의 값 사람이 읽을 수 있는 용어로 큐 또는 메시지를 식별 합니다. 것은 아무 의미도 메시지 큐 응용 프로그램에 포함 하는 레이블 내용을 해석 하는 응용 프로그램의 책임입니다."
  example:
  - "The following code example gets and sets the value of a message's Label property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string Label { get; set; }
    return:
      type: System.String
      description: "메시지의 레이블입니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Messaging.Message.Label*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐는 레이블 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.LookupId
  id: LookupId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: LookupId
  nameWithType: Message.LookupId
  fullName: System.Messaging.Message.LookupId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "MSMQ 3.0에서에서 도입 되었습니다. 메시지의 조회 식별자를 가져옵니다."
  remarks: "LookupId 속성을 메시지의 조회 식별자에 대 한 읽기 전용 액세스를 제공합니다. MSMQ 3.0에 도입 된 조회 식별자는 메시지 큐에서 생성 되 고 메시지를 큐에 배치 하면 각 메시지에 할당 되는 64 비트 식별자입니다. 조회 식별자는 메시지를 보낼 때 생성 되는 메시지 식별자와 같지 않습니다.       메시지 큐는 커넥터 및 보내는 큐 시스템에서 생성 된 저널에 배달 못 뿐만 아니라 대상 응용 프로그램에서 생성, 관리 및 보고서 큐를 비롯 한 모든 큐에 배치 된 모든 메시지에 대 한 조회 식별자를 생성 합니다. 즉, 전송 및 메시지 큐 송신 응용 프로그램에서 메시지를 모두 포함 됩니다. 조회 식별자는 큐에 고유 하며 큐 외부에서는 의미가 없습니다.       여러 대상 큐로 전송 됩니다 또는 메시지의 복사본은 컴퓨터 저널 또는 업무 일지 큐에 저장 하는 경우에 메시지의 각 복사본 각 큐에 배치 된 경우 고유한 조회 식별자에는 됩니다.       큐에서 검색 된 메시지 LookupId 속성을 읽을 수만 있습니다.       조회 식별자 큐에서 특정 메시지를 읽는 데 사용 됩니다. 메시지의 조회 식별자 확인 되 면 수신 응용 프로그램이 호출할 수는 <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>또는 <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A>함수를 해당 메시지에 직접 이동 하 고 보거나 커서 큐의 앞에서 시작 하 고 큐의 끝 방향으로 탐색 해야 하 고 큐에서 검색, 응용 프로그램의 책임은 큐에서 메시지의 조회 식별자를 가져오는.</xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> </xref:System.Messaging.MessageQueue.PeekByLookupId%2A> 한 가지 방법을 조회 식별자를 가져올 수는 큐에 배치 될 때 각 메시지의 식별자를 캐시 하는 구성 요소를 호출 하는 대상 큐에 대 한 트리거를 만드는 것입니다."
  syntax:
    content: public long LookupId { get; }
    return:
      type: System.Int64
      description: "메시지 큐에서 생성 되 고 해당 메시지가 있는 큐에 고유한 됩니다는 메시지의 조회 식별자입니다."
  overload: System.Messaging.Message.LookupId*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "MSMQ 3.0이 설치 되지 않았습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-메시지 큐 LookupId 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.MessageType
  id: MessageType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: MessageType
  nameWithType: Message.MessageType
  fullName: System.Messaging.Message.MessageType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: 'Gets the message type: <xref uid=&quot;langword_csharp_Normal&quot; name=&quot;Normal&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Acknowledgment&quot; name=&quot;Acknowledgment&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Report&quot; name=&quot;Report&quot; href=&quot;&quot;></xref>.'
  remarks: "일반적으로 메시지 큐는 메시지를 보낼 때이 속성을 설정 합니다. 메시지 큐 메시지는 다음 유형 중 하나일 수 있습니다.- `Normal`, 응용 프로그램에서 큐로 보낸 일반 메시지 또는 보내는 응용 프로그램에 응답 메시지를 반환 합니다.      - `Acknowledgement`, 메시지 큐는 보내는 응용 프로그램에서 요청할 때마다 생성 됩니다. 예를 들어 메시지 큐 원본 메시지가 도착 했거나 읽 혔 나타내기 위해 긍정 또는 부정 메시지를 생성할 수 있습니다. 메시지 큐는 보내는 응용 프로그램이 지정한 관리 큐에 적절 한 승인 메시지를 반환 합니다.      - `Report`, 메시지 큐 보고 큐가 소스 큐 관리자에서 정의 될 때마다 생성 됩니다. 추적을 사용 하는 경우 메시지 큐는 보고서 메시지를 보냅니다 메시지 큐 보고 큐 원본 메시지가 메시지 큐 서버에 들어가거나 때마다."
  example:
  - "The following code example displays the value of a message's MessageType property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageType MessageType { get; }
    return:
      type: System.Messaging.MessageType
      description: "MessageType 값 중 하나입니다."
  overload: System.Messaging.Message.MessageType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-메시지 큐는 MessageType 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.Priority
  id: Priority
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Priority
  nameWithType: Message.Priority
  fullName: System.Messaging.Message.Priority
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "큐에 메시지를 배치할 위치를 결정 하는 메시지 우선 순위를 가져오거나 설정 합니다."
  remarks: "Priority 속성에 메시지 큐 처리 방법과 메시지 모두 큐는 대상에 도달 하면 영향을 줍니다. 우선 순위가 높은 메시지가 라우팅 중 우선 적용 되 고 대상 큐의 앞 부분에 삽입 합니다. 우선 순위가 같은 메시지는 도착 시간에 따라 큐에 배치 됩니다.       트랜잭션이 아닌 메시지에 대 한 우선 순위를 설정할 수 있습니다. 메시지 큐를 트랜잭션 메시지에 대 한 우선 순위를 자동으로 설정 `Lowest`, 이르게 우선 무시 됩니다."
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/p-system.messaging.messa_87_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_87_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/p-system.messaging.messa_87_1.cs)]"
  syntax:
    content: public System.Messaging.MessagePriority Priority { get; set; }
    return:
      type: System.Messaging.MessagePriority
      description: "중 하나는 <xref href=&quot;System.Messaging.MessagePriority&quot;> </xref> 메시지의 우선 순위 수준을 나타내는 값입니다. 기본값은 <xref uid=&quot;langword_csharp_Normal&quot; name=&quot;Normal&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.Priority*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐는 우선 순위 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.Recoverable
  id: Recoverable
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Recoverable
  nameWithType: Message.Recoverable
  fullName: System.Messaging.Message.Recoverable
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지가 컴퓨터 장애나 네트워크 문제가 발생할 때 배달 보장 되는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "복구 가능한 속성은 메시지 배달 보장 되는지 여부를 표시-메시지는 대상 큐에 있는 동안 컴퓨터가 충돌 하는 경우에 합니다.       메시지 배달 보장 되는 경우 메시지는 로컬에 저장 경로 따르는 모든 단계 다음 컴퓨터를 성공적으로 전달 될 때까지. 이 복구 가능한 속성을 설정 `true` 처리량에 영향을 줄 수 있습니다.       트랜잭션 된 메시지의 경우 메시지 큐 메시지 복구 가능한 속성의 값에 관계 없이 복구할 수 있는 합니다."
  example:
  - "The following code example gets and sets the value of a message's Recoverable property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool Recoverable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>메시지 배달 (동안 디스크에 메시지를 저장)를 통해 보장 되는; 경우 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 배달이 보장 되지 경우. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.Recoverable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐는 복구 가능한 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.ResponseQueue
  id: ResponseQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
  fullName: System.Messaging.Message.ResponseQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "응용 프로그램 생성 응답 메시지를 받는 큐를 가져오거나 설정 합니다."
  remarks: "ResponseQueue 속성에는 수신 응용 프로그램이 보내는 응용 프로그램에 반환 되는 응용 프로그램에서 생성 한 응답 메시지를 받는 큐를 식별 합니다. 보내는 응용 프로그램은 메시지를 보낼 때 응답 큐를 지정 합니다. 사용 가능한 모든 큐는 응답 큐로 지정할 수 있습니다.       응답 큐로 반환 되는 메시지는 응용 프로그램 마다 다릅니다. 응용 프로그램 메시지도 동작 메시지를 받을 때 취할의 내용을 정의 해야 합니다."
  example:
  - "The following code example gets and sets the value of a message's ResponseQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue ResponseQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "<xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> 어떤 응용 프로그램 생성 응답 메시지가 반환 됩니다. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.ResponseQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 ResponseQueue 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.SecurityContext
  id: SecurityContext
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SecurityContext
  nameWithType: Message.SecurityContext
  fullName: System.Messaging.Message.SecurityContext
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지에 대 한 보안 컨텍스트를 가져오거나 설정 합니다."
  syntax:
    content: public System.Messaging.SecurityContext SecurityContext { get; set; }
    return:
      type: System.Messaging.SecurityContext
      description: "A <xref href=&quot;System.Messaging.SecurityContext&quot;> </xref> 속성이 이미 설정 되어 있으면 메시지의 경우 보안 컨텍스트를 포함 하는 개체가; 그렇지 않은 경우 NULL입니다."
  overload: System.Messaging.Message.SecurityContext*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.SenderCertificate
  id: SenderCertificate
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
  fullName: System.Messaging.Message.SenderCertificate
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지를 인증 하는 데 사용 하는 보안 인증서를 가져오거나 설정 합니다."
  remarks: "수신 응용 프로그램 메시지에 외부 보안 인증서가 포함 되어 있을 때 SenderCertificate 속성을 사용 합니다.       메시지 큐 내부 또는 외부 보안 인증서 중 하나를 사용 하는 메시지를 인증할 수 있습니다. 메시지 큐는 메시지 무결성을 확인 하는 데 사용 되는 내부 인증서를 제공 합니다. 인증 기관에는 메시지의 SenderCertificate 속성을 통해 액세스할 수 있는 외부 인증서를 제공 합니다. 메시지를 인증할 메시지 큐를 허용 하는 것 외에도 외부 인증서에는 수신 응용 프로그램을 보낸 사람에 게 더 확인 수 있습니다. 내부 인증서에는 수신 응용 프로그램을 사용할 수 있는 값 없음.       메시지 큐 시스템의 디렉터리 서비스를 사용 하는 외부 인증서를 등록 합니다. 외부 인증서는 인증 기관, 인증서 사용자, 인증서의 유효 기간, 인증서 사용자 및 인증 기관의 서명 공개 키에 대 한 정보를 포함합니다."
  syntax:
    content: public byte[] SenderCertificate { get; set; }
    return:
      type: System.Byte[]
      description: "보안 인증서를 메시지 보낸 사람을 확인을 사용 하 여 메시지 큐를 나타내는 바이트 값의 배열입니다. 기본값은 빈 배열입니다."
  overload: System.Messaging.Message.SenderCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 SenderCertificate 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.SenderId
  id: SenderId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderId
  nameWithType: Message.SenderId
  fullName: System.Messaging.Message.SenderId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "보내는 사용자의 식별자를 가져옵니다."
  remarks: "경우는 <xref:System.Messaging.Message.AttachSenderId%2A>속성은 `false`, 전송 될 때 SenderId 속성에 지정 된 보낸 사람 식별자는 메시지에 연결 되지 않습니다.</xref:System.Messaging.Message.AttachSenderId%2A> 표시 메시지 큐 대상 큐로 메시지를 보낼 때 보낸 사람에 게 확인 하지 않음이 됩니다. 경우는 <xref:System.Messaging.Message.AttachSenderId%2A>속성은 `true`, SenderId 속성 값은 메시지가 인증 된 경우에 신뢰할 수 있는.</xref:System.Messaging.Message.AttachSenderId%2A> 사용 하 여 <xref:System.Messaging.Message.Authenticated%2A>보낸 사람의 액세스 권한을 확인 하려면 SenderId 속성과 함께에서 속성.</xref:System.Messaging.Message.Authenticated%2A>       커넥터 응용 프로그램은 메시지 큐와 큐 다른 시스템 간의 통신을 제공 하려면 커넥터 서버를 사용 하는 응용 프로그램. 메시지 큐는 보낸 사람 id를 제공 하려면 커넥터 응용 프로그램을 필요 합니다. 설정 해야 합니다는 <xref:System.Messaging.Message.ConnectorType%2A>속성 커넥터 응용 프로그램을 통해 메시지를 보낼 때.</xref:System.Messaging.Message.ConnectorType%2A>"
  syntax:
    content: public byte[] SenderId { get; }
    return:
      type: System.Byte[]
      description: "보낸 사람을 식별 하는 바이트 값의 배열입니다. 수신 큐 관리자 식별자를 사용 하 여 메시지와 큐에 대 한 액세스 권한을 보낸 사람의의 보낸 사람에 게 확인 메시지를 인증 합니다."
  overload: System.Messaging.Message.SenderId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-메시지 큐 SenderId 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.SenderVersion
  id: SenderVersion
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderVersion
  nameWithType: Message.SenderVersion
  fullName: System.Messaging.Message.SenderVersion
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지 큐 메시지를 보내는 데의 버전을 가져옵니다."
  remarks: "SenderVersion 속성은 특정 기능에 대 한 중요 합니다. 예를 들어 메시지 큐 2.0에 의해서만 이상 버전에서는 트랜잭션 처리는 지원 및 디지털 서명을 MSMQ 1.0에서 보낸 메시지를 인증 하는 데 사용 됩니다.       전송 큐 관리자는 메시지를 보낼 때 SenderVersion 속성을 설정 합니다."
  example:
  - "The following code example displays the value of a message's SenderVersion property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public long SenderVersion { get; }
    return:
      type: System.Int64
      description: "메시지 큐 메시지를 보내는 데의 버전입니다."
  overload: System.Messaging.Message.SenderVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-메시지 큐 SenderVersion 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.SentTime
  id: SentTime
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SentTime
  nameWithType: Message.SentTime
  fullName: System.Messaging.Message.SentTime
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "보내는 컴퓨터의 소스 큐 관리자가 메시지를 보낸 날짜와 시간을 가져옵니다."
  remarks: "SentTime 속성은이 컴퓨터의 현지 시간으로 조정의 인스턴스는 <xref:System.Messaging.Message>클래스를 만든.</xref:System.Messaging.Message> 이 표준 시간대는 원본 및 대상 큐의에서 다를 수 있습니다."
  example:
  - "The following code example displays the value of a message's SentTime property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public DateTime SentTime { get; }
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime>메시지를 보낸 시간을 나타내는입니다.</xref:System.DateTime>"
  overload: System.Messaging.Message.SentTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-메시지 큐 SentTime 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.SourceMachine
  id: SourceMachine
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SourceMachine
  nameWithType: Message.SourceMachine
  fullName: System.Messaging.Message.SourceMachine
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지가 시작 된 컴퓨터를 가져옵니다."
  remarks: "SourceMachine 속성의 형식은 앞에 두 개의 슬래시를 포함 하지 않습니다 (\\\\\\\\). 예를 들어 `myServer` 유효한 SourceMachine 됩니다."
  example:
  - "The following code example displays the value of a message's SourceMachine property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string SourceMachine { get; }
    return:
      type: System.String
      description: "메시지를 보낸 컴퓨터의 이름입니다."
  overload: System.Messaging.Message.SourceMachine*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-메시지 큐 SourceMachine 속성을 무시 하도록 필터링 됩니다."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "컴퓨터 정보 또는 디렉터리 서비스에 액세스할 수 없습니다."
  platform:
  - net462
- uid: System.Messaging.Message.TimeToBeReceived
  id: TimeToBeReceived
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
  fullName: System.Messaging.Message.TimeToBeReceived
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "대상 큐 로부터 받는 메시지에 대 한 최대 기간을 가져오거나 설정 합니다."
  remarks: "TimeToBeReceived 속성은 보낸된 메시지를 대상 큐에서 받을 수에 대 한 총 시간을 지정 합니다. 제한 시간 대상 큐 및 메시지를 받기 전에 큐에서 대기 하는 데 걸린 시간을 검색 하는 데 걸린 시간을 포함 합니다.      > [!CAUTION] > 종속 클라이언트 컴퓨터를 사용할 때 메시지 큐를 실행 하는 서버에 있는 시계가와 클라이언트 컴퓨터의 시계가 동기화 이어야 합니다. 않는 TimeToBeReceived 속성이 메시지를 보낼 때 예기치 않은 동작이 발생할 수 있습니다는 그렇지 않은 경우 <xref:System.Messaging.Message.InfiniteTimeout>.</xref:System.Messaging.Message.InfiniteTimeout>       TimeToBeReceived 속성에 지정 된 간격에는 메시지 큐에서 제거 되기 전에 만료 되 면 메시지 큐 두 가지 방법 중 하나에 메시지를 삭제 합니다. 경우 메시지의 <xref:System.Messaging.Message.UseDeadLetterQueue%2A>속성은 `true`, 배달 못 한 편지 큐로 메시지가 보내집니다.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> 경우 <xref:System.Messaging.Message.UseDeadLetterQueue%2A>은 `false`, 메시지는 무시 됩니다.</xref:System.Messaging.Message.UseDeadLetterQueue%2A>       메시지의 설정할 수 있습니다 <xref:System.Messaging.Message.AcknowledgeType%2A>타이머가 만료 되기 전에 메시지가 검색 되지 않으면 메시지를 보내도록 메시지 큐는 부정 승인에 속성을 보내는 응용 프로그램으로 다시.</xref:System.Messaging.Message.AcknowledgeType%2A>       TimeToBeReceived 속성에 지정 된 값이 지정 된 값 보다 작으면는 <xref:System.Messaging.Message.TimeToReachQueue%2A>속성이, TimeToBeReceived 우선.</xref:System.Messaging.Message.TimeToReachQueue%2A>       단일 트랜잭션 내에서 여러 메시지를 보내면 첫 번째 메시지의 TimeToBeReceived 속성 사용 하 여 메시지 큐입니다."
  example:
  - "The following code example gets and sets the value of a message's TimeToBeReceived property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public TimeSpan TimeToBeReceived { get; set; }
    return:
      type: System.TimeSpan
      description: "대상 큐 로부터 받이 보낸된 메시지에 대 한 총 시간입니다. 기본값은 <xref href=&quot;System.Messaging.Message.InfiniteTimeout&quot;> </xref>합니다."
  overload: System.Messaging.Message.TimeToBeReceived*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 TimeToBeReceived 속성을 무시 하도록 필터링 됩니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "TimeToBeReceived에 지정 된 값이 올바르지 않습니다."
  platform:
  - net462
- uid: System.Messaging.Message.TimeToReachQueue
  id: TimeToReachQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
  fullName: System.Messaging.Message.TimeToReachQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지 큐에 도달 하기에 대 한 최대 기간을 가져오거나 설정 합니다."
  remarks: "TimeToReachQueue 속성에 지정 된 간격에 메시지가 대상에 도달 하기 전에 만료 되 면 메시지 큐 두 가지 방법 중 하나에 메시지를 삭제 합니다. 경우 메시지의 <xref:System.Messaging.Message.UseDeadLetterQueue%2A>속성은 `true`, 배달 못 한 편지 큐로 메시지가 보내집니다.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> 경우 <xref:System.Messaging.Message.UseDeadLetterQueue%2A>은 `false`, 메시지는 무시 됩니다. 메시지의 설정할 수 있습니다 <xref:System.Messaging.Message.AcknowledgeType%2A>타이머가 만료 되기 전에 메시지가 도착 하지 않으면 메시지를 보내도록 메시지 큐는 부정 승인에 속성을 보내는 응용 프로그램으로 다시.</xref:System.Messaging.Message.AcknowledgeType%2A> </xref:System.Messaging.Message.UseDeadLetterQueue%2A>       TimeToReachQueue 속성을 0 초로 설정, 메시지 큐가 한 번만 대상으로 메시지를 보낼-메시지에 대 한 큐 대기 하는 경우. 큐가 로컬 이면 메시지가 항상 큐에 도달 합니다.       TimeToReachQueue 속성에 지정 된 값에 지정 된 값 보다 큰 경우는 <xref:System.Messaging.Message.TimeToBeReceived%2A>속성 <xref:System.Messaging.Message.TimeToBeReceived%2A>우선적으로 적용 합니다.</xref:System.Messaging.Message.TimeToBeReceived%2A> </xref:System.Messaging.Message.TimeToBeReceived%2A>       단일 트랜잭션 내에서 여러 메시지를 보내면 첫 번째 메시지의 TimeToReachQueue 속성 사용 하 여 메시지 큐입니다."
  example:
  - "The following code example gets and sets the value of a message's TimeToReachQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public TimeSpan TimeToReachQueue { get; set; }
    return:
      type: System.TimeSpan
      description: "대상 큐에 도달 하는 메시지에 대 한 제한 시간 메시지 시간부터 시작 보내집니다. 기본값은 <xref href=&quot;System.Messaging.Message.InfiniteTimeout&quot;> </xref>합니다."
  overload: System.Messaging.Message.TimeToReachQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 TimeToReachQueue 속성을 무시 하도록 필터링 됩니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "TimeToReachQueue에 지정 된 값이 올바르지 않습니다. 음수를 나타낼 수도 있습니다."
  platform:
  - net462
- uid: System.Messaging.Message.TransactionId
  id: TransactionId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TransactionId
  nameWithType: Message.TransactionId
  fullName: System.Messaging.Message.TransactionId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "메시지를 포함 하는 트랜잭션에 대 한 식별자를 가져옵니다."
  remarks: "수신 응용 프로그램 특정 트랜잭션의 일부로 보낸 메시지를 확인 하려면 트랜잭션 Id 속성을 사용 합니다. 트랜잭션 식별자 뒤에 4 바이트 트랜잭션 시퀀스 번호를 보내는 컴퓨터 (첫 번째 16 비트)의 식별자를 포함 합니다.       이 속성이 메시지 큐 버전 2.0에만 사용할 수 이상입니다.       트랜잭션 식별자 없기 때문에 트랜잭션 시퀀스 번호 영구적으로 2에서 다시 시작은 고유 해야 하는데, 보장 되지 <sup>20</sup>합니다. 메시지 큐 보장만 후속 트랜잭션에서 다른 트랜잭션 시퀀스 번호를 포함 합니다.       와 함께 트랜잭션 Id 속성을 사용할 수는 <xref:System.Messaging.Message.IsFirstInTransaction%2A>및 <xref:System.Messaging.Message.IsLastInTransaction%2A>속성을 트랜잭션 경계를 확인 합니다.</xref:System.Messaging.Message.IsLastInTransaction%2A> </xref:System.Messaging.Message.IsFirstInTransaction%2A>"
  example:
  - "The following code example displays the value of a message's TransactionId property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string TransactionId { get; }
    return:
      type: System.String
      description: "메시지에 연결 된 트랜잭션에 대 한 식별자입니다."
  overload: System.Messaging.Message.TransactionId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-는 메시지 큐가 트랜잭션 Id 속성을 무시 합니다."
  platform:
  - net462
- uid: System.Messaging.Message.TransactionStatusQueue
  id: TransactionStatusQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
  fullName: System.Messaging.Message.TransactionStatusQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "원본 컴퓨터에서의 트랜잭션 상태 큐를 가져옵니다."
  remarks: "TransactionStatusQueue 속성 커넥터 응용 프로그램에서 읽기 수신 확인을 수신 하는 원본 컴퓨터의 한 트랜잭션 큐를 식별 합니다. 메시지 큐 속성을 설정 하 고 커넥터 응용 프로그램 외부 큐로 보낸 트랜잭션 메시지를 검색할 때 속성을 사용 합니다.       외부 큐 Microsoft 메시지 큐가 아닌 큐 시스템에 존재합니다. 메시지 큐는 커넥터 응용 프로그램을 통해 이러한 큐와 통신합니다.       커넥터 응용 프로그램의 트랜잭션 상태 큐를 사용 하는 승인 메시지를 보내는 응용 프로그램 다시 전송할 수 있습니다. 트랜잭션 상태 큐는 보내는 응용 프로그램에 다른 승인을 요청 하지 않을 경우에이 승인을 받아야 합니다."
  example:
  - "The following code example displays the value of a message's TransactionStatusQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue TransactionStatusQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "보내는 응용 프로그램에 다시 확인 메시지를 보내는 데 사용 되는 원본 컴퓨터에서 트랜잭션 상태 큐입니다. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.TransactionStatusQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지가 전송 되지 않은 합니다. 이 속성은 큐에서 검색 된 메시지에만 읽을 수 있습니다.       -또는-메시지 큐 TransactionStatusQueue 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.UseAuthentication
  id: UseAuthentication
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
  fullName: System.Messaging.Message.UseAuthentication
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "표시 하는 값을 가져오거나 설정 합니다. 여부 (아니면 메시지가 있어야)를 보내기 전에 인증 합니다."
  remarks: "UseAuthentication 속성 메시지를 인증 해야 하는지 여부를 지정 합니다. 보내는 응용 프로그램에서 인증을 요청 하는 경우 메시지 큐 디지털 서명을 만들고 사용 하 여 전송 될 때 메시지에 서명 하는 메시지를 받을 때 인증 합니다.       UseAuthentication 이면 `false` 및 인증 된 메시지만 허용 하는 큐에 메시지, 메시지 큐에 도달 하면 거부 됩니다.       메시지가 해당 속성을 확인 하 여 인증 실패를 확인할 수 없습니다. 큐에 메시지가 배달 되기 전에 메시지 큐에서 그러한 메시지를 삭제 합니다. 그러나 배달이 실패 하면 메시지가 메시지 큐에 도착는 것을 방지 한 경우 승인 메시지를 보내도록 요청할 수 있습니다."
  syntax:
    content: public bool UseAuthentication { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>보내는 응용 프로그램에서 메시지에 대 한 인증을 요청 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.UseAuthentication*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 UseAuthentication 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.UseDeadLetterQueue
  id: UseDeadLetterQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
  fullName: System.Messaging.Message.UseDeadLetterQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "배달 못 한 편지 큐로 배달할 수 없는 메시지의 복사본을 보낼지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "<xref:System.Messaging.Message.UseJournalQueue%2A>UseDeadLetterQueue 속성을 메시지 큐 메시지를 추적 하는 방법을 지정 합니다.</xref:System.Messaging.Message.UseJournalQueue%2A> UseDeadLetterQueue 이면 `true`, 배달이 실패 (트랜잭션이 아닌 메시지의 경우) 하면 메시지가 메시지를 배달 하지 못한 컴퓨터에 대 한 비트랜잭션 배달 못 한 편지 큐로 보낼 수 있습니다. 배달이 실패 메시지 타이머가 만료 되는 경우 예를 들어 것일 수도 있습니다.       트랜잭션 메시지를 배달 하지 못한 경우 메시지 큐 음수 트랜잭션과 미결 항상에서 원본 컴퓨터 트랜잭션 배달 못 한 편지 큐로 메시지를 보냅니다.       배달 못 한 편지 큐에 메시지를 저장할 때 더 이상 필요 없는 메시지를 제거 하는 정기적으로 큐를 지워야 합니다. 메시지 큐가 있는 컴퓨터에 대 한 크기 할당량에 대해 배달 못 한 편지 큐 수에 저장 합니다. 컴퓨터 할당량 관리자가 설정 되 고 단일 큐에서 뿐 아니라 전체 컴퓨터에 메시지 저장을 위해 할당 된 크기를 나타냅니다.       저널 또는 배달 못 한 편지 큐를 만들지 않습니다. 다음은 메시지 큐가 생성 하는 두 시스템 큐입니다."
  example:
  - "The following code example gets and sets the value of a message's UseDeadLetterQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseDeadLetterQueue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>메시지 배달 실패는 배달 못 한 편지 큐로 송신할 메시지의 복사본에 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.UseDeadLetterQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 UseDeadLetterQueue 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.UseEncryption
  id: UseEncryption
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseEncryption
  nameWithType: Message.UseEncryption
  fullName: System.Messaging.Message.UseEncryption
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "개인 메시지를 만들 것인지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "개인 메시지의 경우 전송 되 고 수신 될 때 암호를 해독 하기 전에 해당 본문이 암호화 되어 있습니다. 개인 메시지를 보내려면 보내는 응용 프로그램에서 암호화를 사용 하도록 지정 해야 하 고, 필요에 따라 암호화 알고리즘입니다.       개인 메시지를 보내는 경우 응용 프로그램 메시지 암호화를 수행 하지 않아도 됩니다. 메시지 큐는 응용 프로그램 디렉터리 서비스에 대 한 액세스 권한이 있는 Microsoft Windows 2000 엔터프라이즈 환경 내에서 메시지를 보내는 경우 메시지 본문을 암호화할 수 있습니다. 개인 메시지를 받을 수신 큐 관리자는 항상 메시지 본문에 암호 해독 합니다."
  example:
  - "The following code example gets and sets the value of a message's UseEncryption property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseEncryption { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>메시지 큐에서 메시지를 암호화를 요구 하도록 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.UseEncryption*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 UseEncryption 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.UseJournalQueue
  id: UseJournalQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
  fullName: System.Messaging.Message.UseJournalQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "원본 컴퓨터의 컴퓨터 저널에서 메시지의 복사본을 유지할지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "UseJournalQueue 및 <xref:System.Messaging.Message.UseDeadLetterQueue%2A>속성을 메시지 큐 메시지를 추적 하는 방법을 지정 합니다.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> UseJournalQueue 이면 `true`, 복사본은 메시지가 전송 되는 각 단계에서 원래 컴퓨터의 컴퓨터 저널에 보관 합니다.       보낸된 메시지가 대상 큐가 원격 컴퓨터에 있는 경우에 업무 일지 큐에 복사 됩니다. 메시지가 큐에 직접 보내집니다 대상이 로컬 컴퓨터에 있으면 저널링을 요구 하도록 중간 단계가 있습니다.       업무 일지 큐에 메시지를 저장할 때 더 이상 필요 없는 메시지를 제거 하는 정기적으로 큐의 선택을 취소 합니다. 메시지 큐가 있는 컴퓨터에 대 한 할당량에 대 한 업무 일지 큐 수에 저장 합니다. (컴퓨터 할당량 관리자가 설정 됩니다.)       저널 또는 배달 못 한 편지 큐를 만들지 않습니다. 다음은 메시지 큐가 생성 하는 두 시스템 큐입니다."
  example:
  - "The following code example gets and sets the value of a message's UseJournalQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseJournalQueue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>메시지 이후에 원래 컴퓨터의 컴퓨터 업무 일지에 메시지의 복사본을 보관 될 요청을 전송한 다음 서버에 원래 컴퓨터) (에서; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.UseJournalQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 UseJournalQueue 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
- uid: System.Messaging.Message.UseTracing
  id: UseTracing
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseTracing
  nameWithType: Message.UseTracing
  fullName: System.Messaging.Message.UseTracing
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "대상 큐로 이동할 때 메시지를 추적할지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "UseTracing 속성 대상 큐로 이동할 때 메시지의 경로 추적 여부를 지정 합니다. 경우 `true`, 보고 메시지 (메시지 큐에서 생성)은 라우팅 메시지 큐 서버를 통해 메시지가 전달 될 때마다 보고서 큐로 전송 합니다. 보고서 큐 소스 큐 관리자에서 지정 됩니다. 보고서 큐에서 메시지 큐; 생성 된 메시지를 보고 하려면 제한 되지 않습니다. 보고서 큐로 프로그램 응용 프로그램에서 생성 된 메시지를 보낼 수도 있습니다.       추적을 사용 하 여 Active Directory 설정 하 고 메시지 큐 엔터프라이즈에 대 한 보고서 큐를 지정 해야 합니다. 관리자가 이러한 설정을 구성합니다."
  example:
  - "The following code example gets and sets the value of a message's UseTracing property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseTracing { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>시스템의 보고서 큐로 보낼 보고서를 생성 하는 각 중간 단계를 대상 큐로 전달 되는 도중에 원본 메시지를 수행한 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.Message.UseTracing*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메시지 큐 UseTracing 속성을 무시 하도록 필터링 됩니다."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Messaging.Message.#ctor
  parent: System.Messaging.Message
  isExternal: false
  name: Message()
  nameWithType: Message.Message()
  fullName: System.Messaging.Message.Message()
- uid: System.Messaging.Message.#ctor(System.Object)
  parent: System.Messaging.Message
  isExternal: false
  name: Message(Object)
  nameWithType: Message.Message(Object)
  fullName: System.Messaging.Message.Message(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  parent: System.Messaging.Message
  isExternal: false
  name: Message(Object,IMessageFormatter)
  nameWithType: Message.Message(Object,IMessageFormatter)
  fullName: System.Messaging.Message.Message(Object,IMessageFormatter)
- uid: System.Messaging.IMessageFormatter
  parent: System.Messaging
  isExternal: false
  name: IMessageFormatter
  nameWithType: IMessageFormatter
  fullName: System.Messaging.IMessageFormatter
- uid: System.Messaging.Message.AcknowledgeType
  parent: System.Messaging.Message
  isExternal: false
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
  fullName: System.Messaging.Message.AcknowledgeType
- uid: System.Messaging.AcknowledgeTypes
  parent: System.Messaging
  isExternal: false
  name: AcknowledgeTypes
  nameWithType: AcknowledgeTypes
  fullName: System.Messaging.AcknowledgeTypes
- uid: System.Messaging.Message.Acknowledgment
  parent: System.Messaging.Message
  isExternal: false
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
  fullName: System.Messaging.Message.Acknowledgment
- uid: System.Messaging.Acknowledgment
  parent: System.Messaging
  isExternal: false
  name: Acknowledgment
  nameWithType: Acknowledgment
  fullName: System.Messaging.Acknowledgment
- uid: System.Messaging.Message.AdministrationQueue
  parent: System.Messaging.Message
  isExternal: false
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
  fullName: System.Messaging.Message.AdministrationQueue
- uid: System.Messaging.MessageQueue
  parent: System.Messaging
  isExternal: false
  name: MessageQueue
  nameWithType: MessageQueue
  fullName: System.Messaging.MessageQueue
- uid: System.Messaging.Message.AppSpecific
  parent: System.Messaging.Message
  isExternal: false
  name: AppSpecific
  nameWithType: Message.AppSpecific
  fullName: System.Messaging.Message.AppSpecific
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Messaging.Message.ArrivedTime
  parent: System.Messaging.Message
  isExternal: false
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
  fullName: System.Messaging.Message.ArrivedTime
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Messaging.Message.AttachSenderId
  parent: System.Messaging.Message
  isExternal: false
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
  fullName: System.Messaging.Message.AttachSenderId
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message.Authenticated
  parent: System.Messaging.Message
  isExternal: false
  name: Authenticated
  nameWithType: Message.Authenticated
  fullName: System.Messaging.Message.Authenticated
- uid: System.Messaging.Message.AuthenticationProviderName
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
  fullName: System.Messaging.Message.AuthenticationProviderName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Messaging.Message.AuthenticationProviderType
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
  fullName: System.Messaging.Message.AuthenticationProviderType
- uid: System.Messaging.CryptographicProviderType
  parent: System.Messaging
  isExternal: false
  name: CryptographicProviderType
  nameWithType: CryptographicProviderType
  fullName: System.Messaging.CryptographicProviderType
- uid: System.Messaging.Message.Body
  parent: System.Messaging.Message
  isExternal: false
  name: Body
  nameWithType: Message.Body
  fullName: System.Messaging.Message.Body
- uid: System.Messaging.Message.BodyStream
  parent: System.Messaging.Message
  isExternal: false
  name: BodyStream
  nameWithType: Message.BodyStream
  fullName: System.Messaging.Message.BodyStream
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Messaging.Message.BodyType
  parent: System.Messaging.Message
  isExternal: false
  name: BodyType
  nameWithType: Message.BodyType
  fullName: System.Messaging.Message.BodyType
- uid: System.Messaging.Message.ConnectorType
  parent: System.Messaging.Message
  isExternal: false
  name: ConnectorType
  nameWithType: Message.ConnectorType
  fullName: System.Messaging.Message.ConnectorType
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Messaging.Message.CorrelationId
  parent: System.Messaging.Message
  isExternal: false
  name: CorrelationId
  nameWithType: Message.CorrelationId
  fullName: System.Messaging.Message.CorrelationId
- uid: System.Messaging.Message.DestinationQueue
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
  fullName: System.Messaging.Message.DestinationQueue
- uid: System.Messaging.Message.DestinationSymmetricKey
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
  fullName: System.Messaging.Message.DestinationSymmetricKey
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.Message.DigitalSignature
  parent: System.Messaging.Message
  isExternal: false
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
  fullName: System.Messaging.Message.DigitalSignature
- uid: System.Messaging.Message.EncryptionAlgorithm
  parent: System.Messaging.Message
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
  fullName: System.Messaging.Message.EncryptionAlgorithm
- uid: System.Messaging.EncryptionAlgorithm
  parent: System.Messaging
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: EncryptionAlgorithm
  fullName: System.Messaging.EncryptionAlgorithm
- uid: System.Messaging.Message.Extension
  parent: System.Messaging.Message
  isExternal: false
  name: Extension
  nameWithType: Message.Extension
  fullName: System.Messaging.Message.Extension
- uid: System.Messaging.Message.Formatter
  parent: System.Messaging.Message
  isExternal: false
  name: Formatter
  nameWithType: Message.Formatter
  fullName: System.Messaging.Message.Formatter
- uid: System.Messaging.Message.HashAlgorithm
  parent: System.Messaging.Message
  isExternal: false
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
  fullName: System.Messaging.Message.HashAlgorithm
- uid: System.Messaging.HashAlgorithm
  parent: System.Messaging
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Messaging.HashAlgorithm
- uid: System.Messaging.Message.Id
  parent: System.Messaging.Message
  isExternal: false
  name: Id
  nameWithType: Message.Id
  fullName: System.Messaging.Message.Id
- uid: System.Messaging.Message.InfiniteTimeout
  parent: System.Messaging.Message
  isExternal: false
  name: InfiniteTimeout
  nameWithType: Message.InfiniteTimeout
  fullName: System.Messaging.Message.InfiniteTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Messaging.Message.IsFirstInTransaction
  parent: System.Messaging.Message
  isExternal: false
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
  fullName: System.Messaging.Message.IsFirstInTransaction
- uid: System.Messaging.Message.IsLastInTransaction
  parent: System.Messaging.Message
  isExternal: false
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
  fullName: System.Messaging.Message.IsLastInTransaction
- uid: System.Messaging.Message.Label
  parent: System.Messaging.Message
  isExternal: false
  name: Label
  nameWithType: Message.Label
  fullName: System.Messaging.Message.Label
- uid: System.Messaging.Message.LookupId
  parent: System.Messaging.Message
  isExternal: false
  name: LookupId
  nameWithType: Message.LookupId
  fullName: System.Messaging.Message.LookupId
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Messaging.Message.MessageType
  parent: System.Messaging.Message
  isExternal: false
  name: MessageType
  nameWithType: Message.MessageType
  fullName: System.Messaging.Message.MessageType
- uid: System.Messaging.MessageType
  parent: System.Messaging
  isExternal: false
  name: MessageType
  nameWithType: MessageType
  fullName: System.Messaging.MessageType
- uid: System.Messaging.Message.Priority
  parent: System.Messaging.Message
  isExternal: false
  name: Priority
  nameWithType: Message.Priority
  fullName: System.Messaging.Message.Priority
- uid: System.Messaging.MessagePriority
  parent: System.Messaging
  isExternal: false
  name: MessagePriority
  nameWithType: MessagePriority
  fullName: System.Messaging.MessagePriority
- uid: System.Messaging.Message.Recoverable
  parent: System.Messaging.Message
  isExternal: false
  name: Recoverable
  nameWithType: Message.Recoverable
  fullName: System.Messaging.Message.Recoverable
- uid: System.Messaging.Message.ResponseQueue
  parent: System.Messaging.Message
  isExternal: false
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
  fullName: System.Messaging.Message.ResponseQueue
- uid: System.Messaging.Message.SecurityContext
  parent: System.Messaging.Message
  isExternal: false
  name: SecurityContext
  nameWithType: Message.SecurityContext
  fullName: System.Messaging.Message.SecurityContext
- uid: System.Messaging.SecurityContext
  parent: System.Messaging
  isExternal: false
  name: SecurityContext
  nameWithType: SecurityContext
  fullName: System.Messaging.SecurityContext
- uid: System.Messaging.Message.SenderCertificate
  parent: System.Messaging.Message
  isExternal: false
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
  fullName: System.Messaging.Message.SenderCertificate
- uid: System.Messaging.Message.SenderId
  parent: System.Messaging.Message
  isExternal: false
  name: SenderId
  nameWithType: Message.SenderId
  fullName: System.Messaging.Message.SenderId
- uid: System.Messaging.Message.SenderVersion
  parent: System.Messaging.Message
  isExternal: false
  name: SenderVersion
  nameWithType: Message.SenderVersion
  fullName: System.Messaging.Message.SenderVersion
- uid: System.Messaging.Message.SentTime
  parent: System.Messaging.Message
  isExternal: false
  name: SentTime
  nameWithType: Message.SentTime
  fullName: System.Messaging.Message.SentTime
- uid: System.Messaging.Message.SourceMachine
  parent: System.Messaging.Message
  isExternal: false
  name: SourceMachine
  nameWithType: Message.SourceMachine
  fullName: System.Messaging.Message.SourceMachine
- uid: System.Messaging.Message.TimeToBeReceived
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
  fullName: System.Messaging.Message.TimeToBeReceived
- uid: System.Messaging.Message.TimeToReachQueue
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
  fullName: System.Messaging.Message.TimeToReachQueue
- uid: System.Messaging.Message.TransactionId
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionId
  nameWithType: Message.TransactionId
  fullName: System.Messaging.Message.TransactionId
- uid: System.Messaging.Message.TransactionStatusQueue
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
  fullName: System.Messaging.Message.TransactionStatusQueue
- uid: System.Messaging.Message.UseAuthentication
  parent: System.Messaging.Message
  isExternal: false
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
  fullName: System.Messaging.Message.UseAuthentication
- uid: System.Messaging.Message.UseDeadLetterQueue
  parent: System.Messaging.Message
  isExternal: false
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
  fullName: System.Messaging.Message.UseDeadLetterQueue
- uid: System.Messaging.Message.UseEncryption
  parent: System.Messaging.Message
  isExternal: false
  name: UseEncryption
  nameWithType: Message.UseEncryption
  fullName: System.Messaging.Message.UseEncryption
- uid: System.Messaging.Message.UseJournalQueue
  parent: System.Messaging.Message
  isExternal: false
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
  fullName: System.Messaging.Message.UseJournalQueue
- uid: System.Messaging.Message.UseTracing
  parent: System.Messaging.Message
  isExternal: false
  name: UseTracing
  nameWithType: Message.UseTracing
  fullName: System.Messaging.Message.UseTracing
- uid: System.Messaging.Message.#ctor*
  parent: System.Messaging.Message
  isExternal: false
  name: Message
  nameWithType: Message.Message
- uid: System.Messaging.Message.AcknowledgeType*
  parent: System.Messaging.Message
  isExternal: false
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
- uid: System.Messaging.Message.Acknowledgment*
  parent: System.Messaging.Message
  isExternal: false
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
- uid: System.Messaging.Message.AdministrationQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
- uid: System.Messaging.Message.AppSpecific*
  parent: System.Messaging.Message
  isExternal: false
  name: AppSpecific
  nameWithType: Message.AppSpecific
- uid: System.Messaging.Message.ArrivedTime*
  parent: System.Messaging.Message
  isExternal: false
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
- uid: System.Messaging.Message.AttachSenderId*
  parent: System.Messaging.Message
  isExternal: false
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
- uid: System.Messaging.Message.Authenticated*
  parent: System.Messaging.Message
  isExternal: false
  name: Authenticated
  nameWithType: Message.Authenticated
- uid: System.Messaging.Message.AuthenticationProviderName*
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
- uid: System.Messaging.Message.AuthenticationProviderType*
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
- uid: System.Messaging.Message.Body*
  parent: System.Messaging.Message
  isExternal: false
  name: Body
  nameWithType: Message.Body
- uid: System.Messaging.Message.BodyStream*
  parent: System.Messaging.Message
  isExternal: false
  name: BodyStream
  nameWithType: Message.BodyStream
- uid: System.Messaging.Message.BodyType*
  parent: System.Messaging.Message
  isExternal: false
  name: BodyType
  nameWithType: Message.BodyType
- uid: System.Messaging.Message.ConnectorType*
  parent: System.Messaging.Message
  isExternal: false
  name: ConnectorType
  nameWithType: Message.ConnectorType
- uid: System.Messaging.Message.CorrelationId*
  parent: System.Messaging.Message
  isExternal: false
  name: CorrelationId
  nameWithType: Message.CorrelationId
- uid: System.Messaging.Message.DestinationQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
- uid: System.Messaging.Message.DestinationSymmetricKey*
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
- uid: System.Messaging.Message.DigitalSignature*
  parent: System.Messaging.Message
  isExternal: false
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
- uid: System.Messaging.Message.EncryptionAlgorithm*
  parent: System.Messaging.Message
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
- uid: System.Messaging.Message.Extension*
  parent: System.Messaging.Message
  isExternal: false
  name: Extension
  nameWithType: Message.Extension
- uid: System.Messaging.Message.Formatter*
  parent: System.Messaging.Message
  isExternal: false
  name: Formatter
  nameWithType: Message.Formatter
- uid: System.Messaging.Message.HashAlgorithm*
  parent: System.Messaging.Message
  isExternal: false
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
- uid: System.Messaging.Message.Id*
  parent: System.Messaging.Message
  isExternal: false
  name: Id
  nameWithType: Message.Id
- uid: System.Messaging.Message.IsFirstInTransaction*
  parent: System.Messaging.Message
  isExternal: false
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
- uid: System.Messaging.Message.IsLastInTransaction*
  parent: System.Messaging.Message
  isExternal: false
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
- uid: System.Messaging.Message.Label*
  parent: System.Messaging.Message
  isExternal: false
  name: Label
  nameWithType: Message.Label
- uid: System.Messaging.Message.LookupId*
  parent: System.Messaging.Message
  isExternal: false
  name: LookupId
  nameWithType: Message.LookupId
- uid: System.Messaging.Message.MessageType*
  parent: System.Messaging.Message
  isExternal: false
  name: MessageType
  nameWithType: Message.MessageType
- uid: System.Messaging.Message.Priority*
  parent: System.Messaging.Message
  isExternal: false
  name: Priority
  nameWithType: Message.Priority
- uid: System.Messaging.Message.Recoverable*
  parent: System.Messaging.Message
  isExternal: false
  name: Recoverable
  nameWithType: Message.Recoverable
- uid: System.Messaging.Message.ResponseQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
- uid: System.Messaging.Message.SecurityContext*
  parent: System.Messaging.Message
  isExternal: false
  name: SecurityContext
  nameWithType: Message.SecurityContext
- uid: System.Messaging.Message.SenderCertificate*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
- uid: System.Messaging.Message.SenderId*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderId
  nameWithType: Message.SenderId
- uid: System.Messaging.Message.SenderVersion*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderVersion
  nameWithType: Message.SenderVersion
- uid: System.Messaging.Message.SentTime*
  parent: System.Messaging.Message
  isExternal: false
  name: SentTime
  nameWithType: Message.SentTime
- uid: System.Messaging.Message.SourceMachine*
  parent: System.Messaging.Message
  isExternal: false
  name: SourceMachine
  nameWithType: Message.SourceMachine
- uid: System.Messaging.Message.TimeToBeReceived*
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
- uid: System.Messaging.Message.TimeToReachQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
- uid: System.Messaging.Message.TransactionId*
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionId
  nameWithType: Message.TransactionId
- uid: System.Messaging.Message.TransactionStatusQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
- uid: System.Messaging.Message.UseAuthentication*
  parent: System.Messaging.Message
  isExternal: false
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
- uid: System.Messaging.Message.UseDeadLetterQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
- uid: System.Messaging.Message.UseEncryption*
  parent: System.Messaging.Message
  isExternal: false
  name: UseEncryption
  nameWithType: Message.UseEncryption
- uid: System.Messaging.Message.UseJournalQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
- uid: System.Messaging.Message.UseTracing*
  parent: System.Messaging.Message
  isExternal: false
  name: UseTracing
  nameWithType: Message.UseTracing
