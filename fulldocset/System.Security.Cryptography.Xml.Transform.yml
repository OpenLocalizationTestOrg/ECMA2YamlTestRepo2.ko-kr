### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.Xml.Transform
  id: Transform
  children:
  - System.Security.Cryptography.Xml.Transform.#ctor
  - System.Security.Cryptography.Xml.Transform.Algorithm
  - System.Security.Cryptography.Xml.Transform.Context
  - System.Security.Cryptography.Xml.Transform.GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
  - System.Security.Cryptography.Xml.Transform.GetInnerXml
  - System.Security.Cryptography.Xml.Transform.GetOutput
  - System.Security.Cryptography.Xml.Transform.GetOutput(System.Type)
  - System.Security.Cryptography.Xml.Transform.GetXml
  - System.Security.Cryptography.Xml.Transform.InputTypes
  - System.Security.Cryptography.Xml.Transform.LoadInnerXml(System.Xml.XmlNodeList)
  - System.Security.Cryptography.Xml.Transform.LoadInput(System.Object)
  - System.Security.Cryptography.Xml.Transform.OutputTypes
  - System.Security.Cryptography.Xml.Transform.PropagatedNamespaces
  - System.Security.Cryptography.Xml.Transform.Resolver
  langs:
  - csharp
  name: Transform
  nameWithType: Transform
  fullName: System.Security.Cryptography.Xml.Transform
  type: Class
  summary: "모든에서 추상 기본 클래스를 나타냅니다 <xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;> </xref> XML 디지털 서명에 사용할 수 있는 요소를 파생 합니다."
  remarks: "XML 서명 및 확인을 수행 하는 경우는 `Transform`> 요소는 서명자가 서명 된 데이터 개체를 변환 하는 방법을 설명 합니다.  문서 확인자를 사용 하 여는 `Transform`> 요소를 동일한 방식으로 서명된 된 데이터를 변환 합니다.  검증 도구는 동일한 방식으로 서명 된 데이터를 변환할 수 없습니다, 경우에 문서를 확인할 수 없습니다.       암호화 된 XML 문서에 또는 서명 된 XML 문서에 하나 이상의 변환 개체를 추가 해야 할 경우 변환 클래스에서 파생 되는 클래스를 사용 합니다.       에 대 한 자세한 내용은 `<Transform>` 요소인 www.w3.org/TR/xmldsig-core/에 World Wide Web Consortium (W3C)에서 사용할 수 있는 XMLDSIG 사양 또는 www.w3.org/TR/xmlenc-core/에는 W3C에서 사용할 수 있는 XML 암호화 사양을 참조 하십시오."
  syntax:
    content: public abstract class Transform
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: Transform()
  nameWithType: Transform.Transform()
  fullName: System.Security.Cryptography.Xml.Transform.Transform()
  type: Constructor
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 클래스입니다."
  syntax:
    content: protected Transform ();
    parameters: []
  overload: System.Security.Cryptography.Xml.Transform.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.Algorithm
  id: Algorithm
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: Algorithm
  nameWithType: Transform.Algorithm
  fullName: System.Security.Cryptography.Xml.Transform.Algorithm
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "식별자 URI (Uniform Resource) 현재 변환에서 수행 하는 알고리즘을 식별 하는 설정 하거나 가져옵니다."
  remarks: "이 속성 특성에 해당 하는 알고리즘의는 `<Transform>` XMLDSIG 서명에 요소입니다. 예를 들어 Base64 디코딩 변환에 대 한 URI 알고리즘 http://www.w3.org/2000/09/xmldsig#base64 XMLDSIG 사양 (단원 6.6.2)으로 정의 됩니다.       <xref:System.Security.Cryptography.Xml.SignedXml>클래스</xref:System.Security.Cryptography.Xml.SignedXml> 와 연관 된 정적 필드 중 하나를 사용 하 여이 값을 편리 하 게 설정할 수 있습니다."
  syntax:
    content: public string Algorithm { get; set; }
    return:
      type: System.String
      description: "현재 수행 되는 알고리즘을 식별 하는 URI <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체입니다."
  overload: System.Security.Cryptography.Xml.Transform.Algorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.Context
  id: Context
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: Context
  nameWithType: Transform.Context
  fullName: System.Security.Cryptography.Xml.Transform.Context
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "가져오거나는 <xref href=&quot;System.Xml.XmlElement&quot;> </xref> 있는 문서 컨텍스트를 나타내는 개체 현재 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체가 실행 되 고 있습니다."
  remarks: "컨텍스트 속성에 전달 된 값을 나타내는 문서에 서명할 때는 <xref:System.Security.Cryptography.Xml.SignedXml>생성자.</xref:System.Security.Cryptography.Xml.SignedXml>  문서를 확인 하는 경우에 컨텍스트 속성 나타냅니다 <xref:System.Security.Cryptography.Xml.Signature>개체입니다.</xref:System.Security.Cryptography.Xml.Signature>       서명 계산 및 검사를 수행 하는 동안에 변환을 호출 되는 시점과 컨텍스트 속성이 자동으로 설정 됩니다."
  syntax:
    content: public System.Xml.XmlElement Context { get; set; }
    return:
      type: System.Xml.XmlElement
      description: "<xref href=&quot;System.Xml.XmlElement&quot;> </xref> 있는 문서 컨텍스트를 나타내는 개체 현재 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체가 실행 되 고 있습니다."
  overload: System.Security.Cryptography.Xml.Transform.Context*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
  id: GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: GetDigestedOutput(HashAlgorithm)
  nameWithType: Transform.GetDigestedOutput(HashAlgorithm)
  fullName: System.Security.Cryptography.Xml.Transform.GetDigestedOutput(HashAlgorithm)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "파생된 클래스에서 재정의 되 면 반환와 관련 된 다이제스트는 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체입니다."
  syntax:
    content: public virtual byte[] GetDigestedOutput (System.Security.Cryptography.HashAlgorithm hash);
    parameters:
    - id: hash
      type: System.Security.Cryptography.HashAlgorithm
      description: "<xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref> 개체를 사용 하 여 다이제스트를 만듭니다."
    return:
      type: System.Byte[]
      description: "와 관련 된 다이제스트는 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체입니다."
  overload: System.Security.Cryptography.Xml.Transform.GetDigestedOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.GetInnerXml
  id: GetInnerXml
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: GetInnerXml()
  nameWithType: Transform.GetInnerXml()
  fullName: System.Security.Cryptography.Xml.Transform.GetInnerXml()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "파생된 클래스에서 재정의 되 면 반환의 매개 변수는 XML 형식의 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> xmldsig 하위 요소로 포함 하기에 적합 한 개체 <xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;> </xref> 요소입니다."
  remarks: ''
  example:
  - "If a <xref:System.Security.Cryptography.Xml.Transform> object represents an XPath transform using the XPath expression `self::text()`,a call to GetInnerXml results in an <xref:System.Xml.XmlNodeList> object that represents the following XML element:  \n  \n```  \n<XPath>   \n  self::text()   \n</XPath>  \n```  \n  \n This element corresponds to the transform-specific content of the `<Transform>` element as defined in Section 4.3.3.4 of the XMLDSIG specification. For the above XPath transform, the entire `<Transform>` element is as follows:  \n  \n```  \n<Transform Algorithm=\"http://www.w3.org/TR/1999/REC-xpath-19991116\">   \n  <XPath>   \n    self::text()   \n  </XPath>   \n</Transform>  \n```"
  syntax:
    content: protected abstract System.Xml.XmlNodeList GetInnerXml ();
    parameters: []
    return:
      type: System.Xml.XmlNodeList
      description: "현재를 설명 하는 데 변환 관련 콘텐츠를 나타내는 XML 노드 목록이 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> XMLDSIG 개체 <xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;> </xref> 요소입니다."
  overload: System.Security.Cryptography.Xml.Transform.GetInnerXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.GetOutput
  id: GetOutput
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: GetOutput()
  nameWithType: Transform.GetOutput()
  fullName: System.Security.Cryptography.Xml.Transform.GetOutput()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "파생된 클래스에서 재정의 되 면 현재 출력을 반환 합니다. <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체입니다."
  syntax:
    content: public abstract object GetOutput ();
    parameters: []
    return:
      type: System.Object
      description: "현재 출력 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체입니다."
  overload: System.Security.Cryptography.Xml.Transform.GetOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.GetOutput(System.Type)
  id: GetOutput(System.Type)
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: GetOutput(Type)
  nameWithType: Transform.GetOutput(Type)
  fullName: System.Security.Cryptography.Xml.Transform.GetOutput(Type)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "파생된 클래스에서 재정의 되 면 현재 출력을 반환 합니다. <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 지정 된 형식의 개체입니다."
  remarks: "GetOutput 메서드를 호출 하 여 이전에 설정 된 값에 실행 한 후 현재 변환의 출력을 반환 합니다는 <xref:System.Security.Cryptography.Xml.Transform.LoadInput%2A>메서드.</xref:System.Security.Cryptography.Xml.Transform.LoadInput%2A>       반환된 된 개체의 형식에 있는 개체 형식 중 하나 여야 합니다는 <xref:System.Security.Cryptography.Xml.Transform.OutputTypes%2A>속성.</xref:System.Security.Cryptography.Xml.Transform.OutputTypes%2A>"
  syntax:
    content: public abstract object GetOutput (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "반환할 출력의 형식입니다. 형식 중 하나 여야 합니다는 <xref:System.Security.Cryptography.Xml.Transform.OutputTypes*>속성.</xref:System.Security.Cryptography.Xml.Transform.OutputTypes*>"
    return:
      type: System.Object
      description: "현재 출력 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 지정 된 형식의 개체로 개체입니다."
  overload: System.Security.Cryptography.Xml.Transform.GetOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.GetXml
  id: GetXml
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: GetXml()
  nameWithType: Transform.GetXml()
  fullName: System.Security.Cryptography.Xml.Transform.GetXml()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "현재 XML 표현을 반환 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Xml.XmlElement>이 메서드에서 반환 된 개체에 대 한 XML 스키마를 준수는 `<Transform>` 4.3.3.4 XMLDSIG 사양의 섹션에 정의 된 요소입니다.</xref:System.Xml.XmlElement>"
  syntax:
    content: public System.Xml.XmlElement GetXml ();
    parameters: []
    return:
      type: System.Xml.XmlElement
      description: "현재의 XML 표현을 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체입니다."
  overload: System.Security.Cryptography.Xml.Transform.GetXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.InputTypes
  id: InputTypes
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: InputTypes
  nameWithType: Transform.InputTypes
  fullName: System.Security.Cryptography.Xml.Transform.InputTypes
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "파생된 클래스에서 재정의 하는 경우 유효한 입력 형식의 배열을 가져옵니다는 <xref:System.Security.Cryptography.Xml.Transform.LoadInput*>현재 메서드 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체입니다.</xref:System.Security.Cryptography.Xml.Transform.LoadInput*>"
  remarks: "때문에 InputTypes 속성에서 반환 된 배열에 요소가 하나 이상 포함 되어야 모든 <xref:System.Security.Cryptography.Xml.Transform>개체 유효한 입력으로 유형을 하나 이상에 동의 해야 합니다.</xref:System.Security.Cryptography.Xml.Transform>       A <xref:System.Security.Cryptography.Xml.Transform>개체 일반적으로 다음 형식 중 하나 이상을 입력으로 받아들입니다: <xref:System.IO.Stream>, <xref:System.Xml.XmlDocument>, 또는 <xref:System.Xml.XmlNodeList>.</xref:System.Xml.XmlNodeList> </xref:System.Xml.XmlDocument> </xref:System.IO.Stream> </xref:System.Security.Cryptography.Xml.Transform>"
  syntax:
    content: public abstract Type[] InputTypes { get; }
    return:
      type: System.Type[]
      description: "현재 입력된 형식의 배열을 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> ; 개체를 이러한 형식 중 하나를 가진 개체만 전달할 수 있습니다는 <xref:System.Security.Cryptography.Xml.Transform.LoadInput*>현재 메서드 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체입니다.</xref:System.Security.Cryptography.Xml.Transform.LoadInput*>"
  overload: System.Security.Cryptography.Xml.Transform.InputTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.LoadInnerXml(System.Xml.XmlNodeList)
  id: LoadInnerXml(System.Xml.XmlNodeList)
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: LoadInnerXml(XmlNodeList)
  nameWithType: Transform.LoadInnerXml(XmlNodeList)
  fullName: System.Security.Cryptography.Xml.Transform.LoadInnerXml(XmlNodeList)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "파생된 클래스에서 재정의 되 면 구문 분석 하는 지정 된 <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> 개체의 변환 관련 콘텐츠로 <xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;> </xref> 요소 현재 내부 상태를 구성 하 고 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 일치 시킬 개체는 <xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;> </xref> 요소입니다."
  remarks: "이 메서드는 하위 요소를 처리 하는 데 사용 되는 `<Transform>` 요소입니다."
  syntax:
    content: public abstract void LoadInnerXml (System.Xml.XmlNodeList nodeList);
    parameters:
    - id: nodeList
      type: System.Xml.XmlNodeList
      description: "<xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> 현재에 대 한 변환 관련 콘텐츠를 지정 하는 개체 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체입니다."
  overload: System.Security.Cryptography.Xml.Transform.LoadInnerXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.LoadInput(System.Object)
  id: LoadInput(System.Object)
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: LoadInput(Object)
  nameWithType: Transform.LoadInput(Object)
  fullName: System.Security.Cryptography.Xml.Transform.LoadInput(Object)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "파생된 클래스에서 재정의 하는 경우 현재에 지정된 된 입력 로드 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체입니다."
  remarks: "입력된 개체의 형식에 형식 중 하나 여야 합니다는 <xref:System.Security.Cryptography.Xml.Transform.InputTypes%2A>속성.</xref:System.Security.Cryptography.Xml.Transform.InputTypes%2A>"
  syntax:
    content: public abstract void LoadInput (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "현재 로드에 대 한 입력 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체입니다."
  overload: System.Security.Cryptography.Xml.Transform.LoadInput*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.OutputTypes
  id: OutputTypes
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: OutputTypes
  nameWithType: Transform.OutputTypes
  fullName: System.Security.Cryptography.Xml.Transform.OutputTypes
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "파생된 클래스에서 재정의 하는 경우 가능한 출력 형식의 배열을 가져옵니다는 <xref:System.Security.Cryptography.Xml.Transform.GetOutput*>현재 메서드 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체입니다.</xref:System.Security.Cryptography.Xml.Transform.GetOutput*>"
  remarks: "모든 변환 출력으로 유형을 하나 이상 생성 해야 하므로 OutputTypes 속성에서 반환 된 배열에 요소가 하나 이상 포함 되어야 합니다."
  syntax:
    content: public abstract Type[] OutputTypes { get; }
    return:
      type: System.Type[]
      description: "현재에 대 한 올바른 출력 형식의 배열 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체가; 둘 중의 유일한 개체 형식에서 반환 되는 <xref:System.Security.Cryptography.Xml.Transform.GetOutput*>현재 메서드 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 개체입니다.</xref:System.Security.Cryptography.Xml.Transform.GetOutput*>"
  overload: System.Security.Cryptography.Xml.Transform.OutputTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.PropagatedNamespaces
  id: PropagatedNamespaces
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: PropagatedNamespaces
  nameWithType: Transform.PropagatedNamespaces
  fullName: System.Security.Cryptography.Xml.Transform.PropagatedNamespaces
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "가져오거나는 <xref href=&quot;System.Collections.Hashtable&quot;> </xref> 서명을으로 전파 되는 네임 스페이스가 포함 된 개체입니다."
  remarks: "XML 네임 스페이스 이름이 같은 문서에서 여러 요소를 구별 하는 데 사용 됩니다.       <xref:System.Collections.Hashtable>PropagatedNamespaces 속성의 키는 네임 스페이스 접두사와 <xref:System.Collections.Hashtable>값은 네임 스페이스 (Uri) Uniform Resource Identifier.</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable>       서명 계산 및 검사를 수행 하는 동안에 변환을 호출 되는 시점과 PropagatedNamespaces 속성이 자동으로 설정 됩니다."
  syntax:
    content: public System.Collections.Hashtable PropagatedNamespaces { get; }
    return:
      type: System.Collections.Hashtable
      description: "A <xref href=&quot;System.Collections.Hashtable&quot;> </xref> 서명을으로 전파 되는 네임 스페이스가 포함 된 개체입니다."
  overload: System.Security.Cryptography.Xml.Transform.PropagatedNamespaces*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "PropagatedNamespaces 속성이로 설정 된 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.Resolver
  id: Resolver
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: Resolver
  nameWithType: Transform.Resolver
  fullName: System.Security.Cryptography.Xml.Transform.Resolver
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "에서는 현재 <xref href=&quot;System.Xml.XmlResolver&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Xml.XmlResolver>Uniform 리소스 식별자 (URI)로 명명 된 외부 XML 리소스를 확인 하는 클래스입니다.</xref:System.Xml.XmlResolver> XML 파일의 소스를 신뢰 하지 않는 경우 사용 하 여 XML 파일의 URI로 명명 하는 컴퓨터 리소스에 액세스 하지 않을 수 있습니다. 해결 프로그램 속성을 사용 하면 다른을 지정 하 여 XML 파일 컴퓨터 리소스에 가질 액세스 수준을 제어할 수 있습니다 <xref:System.Xml.XmlResolver>개체입니다.</xref:System.Xml.XmlResolver> 모든 액세스를 허용 하지 않을 경우이 속성을 설정할 수 있습니다 `null` (`Nothing` Visual basic에서)."
  syntax:
    content: public System.Xml.XmlResolver Resolver { set; }
    return:
      type: System.Xml.XmlResolver
      description: "현재 <xref href=&quot;System.Xml.XmlResolver&quot;> </xref> 개체입니다. 이 속성의 기본값는 <xref href=&quot;System.Xml.XmlSecureResolver&quot;> </xref> 개체입니다."
  overload: System.Security.Cryptography.Xml.Transform.Resolver*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.Xml.Transform.#ctor
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Transform()
  nameWithType: Transform.Transform()
  fullName: System.Security.Cryptography.Xml.Transform.Transform()
- uid: System.Security.Cryptography.Xml.Transform.Algorithm
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Algorithm
  nameWithType: Transform.Algorithm
  fullName: System.Security.Cryptography.Xml.Transform.Algorithm
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.Xml.Transform.Context
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Context
  nameWithType: Transform.Context
  fullName: System.Security.Cryptography.Xml.Transform.Context
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.Security.Cryptography.Xml.Transform.GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetDigestedOutput(HashAlgorithm)
  nameWithType: Transform.GetDigestedOutput(HashAlgorithm)
  fullName: System.Security.Cryptography.Xml.Transform.GetDigestedOutput(HashAlgorithm)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography.Xml.Transform.GetInnerXml
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetInnerXml()
  nameWithType: Transform.GetInnerXml()
  fullName: System.Security.Cryptography.Xml.Transform.GetInnerXml()
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Security.Cryptography.Xml.Transform.GetOutput
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetOutput()
  nameWithType: Transform.GetOutput()
  fullName: System.Security.Cryptography.Xml.Transform.GetOutput()
- uid: System.Security.Cryptography.Xml.Transform.GetOutput(System.Type)
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetOutput(Type)
  nameWithType: Transform.GetOutput(Type)
  fullName: System.Security.Cryptography.Xml.Transform.GetOutput(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.Cryptography.Xml.Transform.GetXml
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetXml()
  nameWithType: Transform.GetXml()
  fullName: System.Security.Cryptography.Xml.Transform.GetXml()
- uid: System.Security.Cryptography.Xml.Transform.InputTypes
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: InputTypes
  nameWithType: Transform.InputTypes
  fullName: System.Security.Cryptography.Xml.Transform.InputTypes
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.Xml.Transform.LoadInnerXml(System.Xml.XmlNodeList)
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: LoadInnerXml(XmlNodeList)
  nameWithType: Transform.LoadInnerXml(XmlNodeList)
  fullName: System.Security.Cryptography.Xml.Transform.LoadInnerXml(XmlNodeList)
- uid: System.Security.Cryptography.Xml.Transform.LoadInput(System.Object)
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: LoadInput(Object)
  nameWithType: Transform.LoadInput(Object)
  fullName: System.Security.Cryptography.Xml.Transform.LoadInput(Object)
- uid: System.Security.Cryptography.Xml.Transform.OutputTypes
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: OutputTypes
  nameWithType: Transform.OutputTypes
  fullName: System.Security.Cryptography.Xml.Transform.OutputTypes
- uid: System.Security.Cryptography.Xml.Transform.PropagatedNamespaces
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: PropagatedNamespaces
  nameWithType: Transform.PropagatedNamespaces
  fullName: System.Security.Cryptography.Xml.Transform.PropagatedNamespaces
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Security.Cryptography.Xml.Transform.Resolver
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Resolver
  nameWithType: Transform.Resolver
  fullName: System.Security.Cryptography.Xml.Transform.Resolver
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Security.Cryptography.Xml.Transform.#ctor*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Transform
  nameWithType: Transform.Transform
- uid: System.Security.Cryptography.Xml.Transform.Algorithm*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Algorithm
  nameWithType: Transform.Algorithm
- uid: System.Security.Cryptography.Xml.Transform.Context*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Context
  nameWithType: Transform.Context
- uid: System.Security.Cryptography.Xml.Transform.GetDigestedOutput*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetDigestedOutput
  nameWithType: Transform.GetDigestedOutput
- uid: System.Security.Cryptography.Xml.Transform.GetInnerXml*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetInnerXml
  nameWithType: Transform.GetInnerXml
- uid: System.Security.Cryptography.Xml.Transform.GetOutput*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetOutput
  nameWithType: Transform.GetOutput
- uid: System.Security.Cryptography.Xml.Transform.GetXml*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetXml
  nameWithType: Transform.GetXml
- uid: System.Security.Cryptography.Xml.Transform.InputTypes*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: InputTypes
  nameWithType: Transform.InputTypes
- uid: System.Security.Cryptography.Xml.Transform.LoadInnerXml*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: LoadInnerXml
  nameWithType: Transform.LoadInnerXml
- uid: System.Security.Cryptography.Xml.Transform.LoadInput*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: LoadInput
  nameWithType: Transform.LoadInput
- uid: System.Security.Cryptography.Xml.Transform.OutputTypes*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: OutputTypes
  nameWithType: Transform.OutputTypes
- uid: System.Security.Cryptography.Xml.Transform.PropagatedNamespaces*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: PropagatedNamespaces
  nameWithType: Transform.PropagatedNamespaces
- uid: System.Security.Cryptography.Xml.Transform.Resolver*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Resolver
  nameWithType: Transform.Resolver
