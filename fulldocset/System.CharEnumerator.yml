### YamlMime:ManagedReference
items:
- uid: System.CharEnumerator
  id: CharEnumerator
  children:
  - System.CharEnumerator.Clone
  - System.CharEnumerator.Current
  - System.CharEnumerator.Dispose
  - System.CharEnumerator.MoveNext
  - System.CharEnumerator.Reset
  - System.CharEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: CharEnumerator
  nameWithType: CharEnumerator
  fullName: System.CharEnumerator
  type: Class
  summary: "반복을 지원 한 <xref:System.String>개체와 개별 문자 읽기.</xref:System.String> 이 클래스는 상속 될 수 없습니다."
  remarks: "에 참조 된 문자에 대 한 읽기 전용 액세스를 제공 하는 한 CharEnumerator <xref:System.String>개체입니다.</xref:System.String> 예를 들어는 `foreach` 컬렉션의 요소를 반복 하는 Microsoft Visual Basic 및 C# 프로그래밍 언어의 문은 검색에서 CharEnumerator는 <xref:System.String>해당 개체의 문자를 반복 하는 개체입니다.</xref:System.String>       생성자가 없는 공개 CharEnumerator에 대 한 합니다. 대신, 호출 된 <xref:System.String>개체의 <xref:System.String.GetEnumerator%2A>문자열을 참조 하도록 초기화 된 CharEnumerator를 얻는 메서드를.</xref:System.String.GetEnumerator%2A> </xref:System.String>       CharEnumerator 문자열의 문자에 대 한 내부 인덱스 CharEnumerator 참조를 유지 관리합니다. 인덱스의 상태가 하 고 문자열에서 문자 위치 논리적으로 첫 번째 문자 앞 또는 마지막 문자 뒤를 참조할 때 잘못 된 문자열 내의 문자를 참조 하는 것입니다. 인덱스를 첫 번째 문자 앞에 논리적으로 초기화 되 고 반복 완료 되 면 마지막 문자 뒤는 위치로 설정 됩니다. 인덱스가 잘못 된 문자에 액세스 하려고 하면 예외가 throw 됩니다.       <xref:System.CharEnumerator.MoveNext%2A>메서드 인덱스를 하나 증가 시킴을 첫 번째 및 이후의 문자를 차례로 액세스 하므로.</xref:System.CharEnumerator.MoveNext%2A> <xref:System.CharEnumerator.Reset%2A>메서드를 논리적으로 첫 번째 문자 앞으로 인덱스를 설정 합니다.</xref:System.CharEnumerator.Reset%2A> <xref:System.CharEnumerator.Current%2A>속성 인덱스에 의해 현재 참조 하는 문자를 검색 합니다.</xref:System.CharEnumerator.Current%2A> <xref:System.CharEnumerator.Clone%2A>메서드는 CharEnumerator의 복사본을 만듭니다.</xref:System.CharEnumerator.Clone%2A>      > [!NOTE] > 여러 독립 된 하나 이상의 스레드 간에 CharEnumerator 인스턴스 <xref:System.String>.</xref:System.String> 의 단일 인스턴스에 대 한 액세스를 가질 수 있습니다 이 클래스는 지원 하기 위해 구현 되는 <xref:System.Collections.IEnumerator>인터페이스.</xref:System.Collections.IEnumerator> 열거자의 사용과 관련 된 자세한 내용은 참조는 <xref:System.Collections.IEnumerator>항목.</xref:System.Collections.IEnumerator>"
  example:
  - "The following example uses the CharEnumerator class to enumerate the individual characters in a string. It instantiates a CharEnumerator object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/t-system.charenumerator_1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/t-system.charenumerator_1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/t-system.charenumerator_1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/t-system.charenumerator_2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/t-system.charenumerator_2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/t-system.charenumerator_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator<char>
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerator<System.Char>
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.CharEnumerator.Clone
  id: Clone
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "현재의 복사본을 만듭니다 <xref href=&quot;System.CharEnumerator&quot;> </xref> 개체입니다."
  remarks: "반환 값의이 인스턴스 복사본은 <xref:System.CharEnumerator>및 현재 상태에 있습니다.</xref:System.CharEnumerator> 이 반복 하는 동안 상태를 저장 하는 데 유용는 <xref:System.String>개체입니다.</xref:System.String>       예를 들어, 응용 프로그램 <xref:System.CharEnumerator>에 <xref:System.String>.</xref:System.String> 의 각 문자에서 반복 하</xref:System.CharEnumerator> 는 원래 인스턴스를 사용 합니다. 고유 문자에 오류가 발생 하면 응용 프로그램 처리를 일시 중지 하 고 복제 메서드를 호출 합니다. 실제로, 이렇게 하면 저장 <xref:System.CharEnumerator> <xref:System.String>.</xref:System.String> 개체의 인덱스</xref:System.CharEnumerator>       응용 프로그램의 다른 부분으로 이동 하는 복제를 사용 하 여 `String` 일부 보조 처리를 수행 합니다. 이 탐색의 부작용은 복제본에서 처리가 중지 된 위치의 추적 하지 않게 합니다. 그러나 보조 처리가 완료 되 면 응용 프로그램은 복제본을 삭제 하 고 원래를 사용 하 여 <xref:System.CharEnumerator>인스턴스 작업을 다시 시작 하는 <xref:System.String>원래 처리가 중지 되었습니다.</xref:System.String> </xref:System.CharEnumerator>      > [!NOTE] > 지원 하기 위해이 메서드는 구현에서 <xref:System.ICloneable>인터페이스.</xref:System.ICloneable>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "<xref:System.Object>현재 복사본 즉 <xref href=&quot;System.CharEnumerator&quot;> </xref> 개체입니다.</xref:System.Object>"
  overload: System.CharEnumerator.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Current
  id: Current
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "이 열거 하는 문자열에서 현재 참조 되는 문자를 가져옵니다 <xref href=&quot;System.CharEnumerator&quot;> </xref> 개체입니다."
  remarks: "<xref:System.CharEnumerator>현재 인덱스에 의해 참조 되는 문자를 반환 하는 Current 속성 및 클래스를 열거 하는 문자열에 대 한 내부 인덱스 유지 관리 합니다.</xref:System.CharEnumerator> 인덱스가 유효 하는 경우에이 속성을 호출 해야 그렇지 않으면 예외가 throw 됩니다.       인덱스는 항상 빈 문자열에 대 한 유효한 (&quot;&quot;). 또한 인덱스는 유효 기간이 <xref:System.String.GetEnumerator%2A?displayProperty=fullName>또는 <xref:System.CharEnumerator.Reset%2A>메서드를 호출 합니다.</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A?displayProperty=fullName> 이러한 방법 중 하나를 호출한 다음 호출에서 <xref:System.CharEnumerator.MoveNext%2A>열거형된 문자열의 첫 번째 문자 인덱스를 조정 하는 메서드.</xref:System.CharEnumerator.MoveNext%2A> 인덱스가 유효 때마다는 <xref:System.CharEnumerator.MoveNext%2A>메서드 반환 `true`.</xref:System.CharEnumerator.MoveNext%2A>       현재가 인덱스를 이동 하지 않으며 현재 연속 해 서 호출 될 때까지 동일한 문자를 반환 합니다. <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, 또는 <xref:System.String.GetEnumerator%2A?displayProperty=fullName>호출 됩니다.</xref:System.String.GetEnumerator%2A?displayProperty=fullName> </xref:System.CharEnumerator.Reset%2A> </xref:System.CharEnumerator.MoveNext%2A>"
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the Current property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/p-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/p-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/p-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/p-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/p-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/p-system.charenumerator._2.vb)]"
  syntax:
    content: public char Current { get; }
    return:
      type: System.Char
      description: "현재이 참조 하는 유니코드 문자 <xref href=&quot;System.CharEnumerator&quot;> </xref> 개체입니다."
  overload: System.CharEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "인덱스가 잘못 되었습니다. 즉, 첫 번째 앞 이나 열거형된 문자열의 마지막 문자 뒤 됩니다."
  platform:
  - net462
- uid: System.CharEnumerator.Dispose
  id: Dispose
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "현재 인스턴스에서 사용 하는 모든 리소스를 해제는 <xref href=&quot;System.CharEnumerator&quot;> </xref> 클래스입니다."
  remarks: "<xref:System.CharEnumerator>.</xref:System.CharEnumerator> 를 사용 하 여 작업을 마쳤으면 Dispose를 호출 합니다. Dispose 메서드는 <xref:System.CharEnumerator>불안정 한 상태가.</xref:System.CharEnumerator> Dispose를 호출한 후에 대 한 모든 참조를 해제 해야는 <xref:System.CharEnumerator>가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.CharEnumerator>차지한.</xref:System.CharEnumerator> </xref:System.CharEnumerator>       자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md) 및 [Dispose 메서드를 구현](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > <xref:System.CharEnumerator>.</xref:System.CharEnumerator> 에 대 한 마지막 참조를 해제 하기 전에 항상 호출 삭제 사용 중인 리소스가 가비지 수집기 호출할 때까지 해제 되지 것입니다 그렇지 않은 경우는 <xref:System.CharEnumerator>개체의 `Finalize` 메서드.</xref:System.CharEnumerator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.CharEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.MoveNext
  id: MoveNext
  parent: System.CharEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "현재 내부 인덱스를 증가 시킵니다. <xref href=&quot;System.CharEnumerator&quot;> </xref> 열거형된 문자열의 다음 문자를 개체입니다."
  remarks: "<xref:System.CharEnumerator>클래스를 열거 하는 문자열에 대 한 내부 인덱스 유지 관리 및 MoveNext 메서드 인덱스를 하나 증가 시킴.</xref:System.CharEnumerator> 호출한 후 MoveNext를 호출 <xref:System.String.GetEnumerator%2A>또는 <xref:System.CharEnumerator.Reset%2A>열거형된 문자열의 첫 번째 문자를 현재 문자 위치를 증가 시킬.</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A> 반환 값은 검사 `true` 현재 문자 위치가 유효한 지 확인 합니다.       이면 인덱스가 이미 열거형된 문자열의 마지막 문자 뒤의 인덱스가 변경 되지 않습니다 및 `false` 반환 됩니다.       열거 된 문자열이 비어 있으면 다음에 유의 (&quot;&quot;)의 상태는 <xref:System.CharEnumerator>항상 유효 하지 않은.</xref:System.CharEnumerator> ¿¡´에 대 한 내부 인덱스는 <xref:System.CharEnumerator>처음 열거형된 문자열의 첫 번째 문자 앞 이며 따라서 올바르지 않습니다.</xref:System.CharEnumerator> MoveNext (존재 하지 않음) 유효 하지 않은 열거형된 문자열의 문자 인덱스를 논리적으로 설정 합니다."
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the MoveNext method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/m-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/m-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/m-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/m-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/m-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/m-system.charenumerator._2.vb)]"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>인덱스는 성공적으로 증가 하는 경우 및 열거형된 문자열; 내 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.CharEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Reset
  id: Reset
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "논리적 열거형된 문자열의 첫 문자 앞에 인덱스를 초기화합니다."
  remarks: "<xref:System.CharEnumerator>클래스를 열거 하는 문자열에 대 한 내부 인덱스 유지 관리 및 Reset 메서드는 인덱스를 잘못 된 상태를 설정 합니다.</xref:System.CharEnumerator>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.CharEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.CharEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "이 열거 하는 문자열에서 현재 참조 되는 문자를 가져옵니다 <xref href=&quot;System.CharEnumerator&quot;> </xref> 개체입니다. 이 멤버에 대 한 참조 &lt;xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName&gt;합니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.CharEnumerator>인스턴스로 캐스팅 되는 <xref:System.Collections.IEnumerator>인터페이스.</xref:System.Collections.IEnumerator> </xref:System.CharEnumerator>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "이 현재 참조 하는 boxed 유니코드 문자 <xref href=&quot;System.CharEnumerator&quot;> </xref> 개체입니다."
  overload: System.CharEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "열거가 시작 되지 않았습니다.       -또는-열거형이 끝난 합니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.CharEnumerator.Clone
  parent: System.CharEnumerator
  isExternal: false
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
- uid: System.CharEnumerator.Current
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.CharEnumerator.Dispose
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
- uid: System.CharEnumerator.MoveNext
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CharEnumerator.Reset
  parent: System.CharEnumerator
  isExternal: false
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
- uid: System.CharEnumerator.Clone*
  parent: System.CharEnumerator
  isExternal: false
  name: Clone
  nameWithType: CharEnumerator.Clone
- uid: System.CharEnumerator.Current*
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
- uid: System.CharEnumerator.Dispose*
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose
  nameWithType: CharEnumerator.Dispose
- uid: System.CharEnumerator.MoveNext*
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: CharEnumerator.MoveNext
- uid: System.CharEnumerator.Reset*
  parent: System.CharEnumerator
  isExternal: false
  name: Reset
  nameWithType: CharEnumerator.Reset
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current*
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
