### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlMember
  id: XamlMember
  children:
  - System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.DeclaringType
  - System.Xaml.XamlMember.DeferringLoader
  - System.Xaml.XamlMember.DependsOn
  - System.Xaml.XamlMember.Equals(System.Object)
  - System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  - System.Xaml.XamlMember.GetHashCode
  - System.Xaml.XamlMember.GetXamlNamespaces
  - System.Xaml.XamlMember.Invoker
  - System.Xaml.XamlMember.IsAmbient
  - System.Xaml.XamlMember.IsAttachable
  - System.Xaml.XamlMember.IsDirective
  - System.Xaml.XamlMember.IsEvent
  - System.Xaml.XamlMember.IsNameValid
  - System.Xaml.XamlMember.IsReadOnly
  - System.Xaml.XamlMember.IsReadPublic
  - System.Xaml.XamlMember.IsUnknown
  - System.Xaml.XamlMember.IsWriteOnly
  - System.Xaml.XamlMember.IsWritePublic
  - System.Xaml.XamlMember.LookupCustomAttributeProvider
  - System.Xaml.XamlMember.LookupDeferringLoader
  - System.Xaml.XamlMember.LookupDependsOn
  - System.Xaml.XamlMember.LookupInvoker
  - System.Xaml.XamlMember.LookupIsAmbient
  - System.Xaml.XamlMember.LookupIsEvent
  - System.Xaml.XamlMember.LookupIsReadOnly
  - System.Xaml.XamlMember.LookupIsReadPublic
  - System.Xaml.XamlMember.LookupIsUnknown
  - System.Xaml.XamlMember.LookupIsWriteOnly
  - System.Xaml.XamlMember.LookupIsWritePublic
  - System.Xaml.XamlMember.LookupTargetType
  - System.Xaml.XamlMember.LookupType
  - System.Xaml.XamlMember.LookupTypeConverter
  - System.Xaml.XamlMember.LookupUnderlyingGetter
  - System.Xaml.XamlMember.LookupUnderlyingMember
  - System.Xaml.XamlMember.LookupUnderlyingSetter
  - System.Xaml.XamlMember.LookupValueSerializer
  - System.Xaml.XamlMember.Name
  - System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  - System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  - System.Xaml.XamlMember.PreferredXamlNamespace
  - System.Xaml.XamlMember.SerializationVisibility
  - System.Xaml.XamlMember.TargetType
  - System.Xaml.XamlMember.ToString
  - System.Xaml.XamlMember.Type
  - System.Xaml.XamlMember.TypeConverter
  - System.Xaml.XamlMember.UnderlyingMember
  - System.Xaml.XamlMember.ValueSerializer
  langs:
  - csharp
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
  type: Class
  summary: "XAML 형식의 멤버에 대 한 XAML 형식 시스템 식별자를 제공합니다. 식별자를 사용 하 여 XAML 판독기 및 XAML 작성기 멤버 노드를 처리 하는 동안 (에서 XAML 판독기가 배치 하는 경우는 <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref>) 일반 XAML 형식 시스템 논리에도 합니다."
  remarks: "XamlMember XAML 멤버에 대 한 정보를 반환 하는 데 세 가지 방법론을 사용할 수 있습니다: 표준 공용 언어 런타임 (CLR) 리플렉션; 내부 호출 하는 참조 전용 리플렉션 기술을 Api를 사용 하 여 최적화 된 비트 플래그; 재정의를 가상 호출 또는 `Lookup*` 가능한 XamlMember 서브 클래스에서 제공 되는 API입니다. .NET Framework XAML 서비스 Api와 XamlMember API의 대부분의 사용에 대 한 기본 XAML 스키마 컨텍스트를 사용 합니다. .NET Framework XAML 서비스에 대 한 기본 XAML 스키마 컨텍스트는 CLR 형식 시스템에 대 한 백업을 사용 합니다. 그러면 XAML 판독기 및 XAML 작성기가 모든 형식 또는 정의 된 멤버에서는 하거나 그렇지 않으면 사용할 수 있는, CLR 및 리플렉션 기술 작업할 수 있습니다.      ## 조회 Api 및 파생 된 클래스 XamlMember XamlMember 정의 여러 파생 클래스가 가상 멤버를 재정의할 수 있습니다. 이러한 멤버는 항상 문자열으로 시작 하는 이름이 `Lookup`합니다. API의 나머지 부분에서는 이름을 지정 하는 가상 메서드가 속성 참조 합니다. XamlMember 파생 된 클래스에 <xref:System.Xaml.XamlMember.LookupTargetType%2A>어떤는 기본 정의 속성은 <xref:System.Xaml.XamlMember.TargetType%2A>파생된 클래스에서 반환</xref:System.Xaml.XamlMember.TargetType%2A> 하는 영향을 주는</xref:System.Xaml.XamlMember.LookupTargetType%2A> 재정의 될 수 있습니다 예를 들어 관련 항목에 대 한 설명서를 참조 하 여 파생 된 클래스 XamlMember 또는 기존에 해당 속성에 대 한 반환 값을 예측할 수 `Lookup*` 메서드.       용도 `Lookup*` 메서드는 XamlMember 기본 클래스를 통합 하는 XAML 형식 시스템 확장 기술을 제공 합니다. XamlMember에서 파생 되 고 재정의 `Lookup` 가상 멤버를 정의할 수 있습니다 XAML 스키마에 대 한 XAML 멤버 라는 개념 XAML 형식 시스템의 지원 형식 시스템 또는 기술 세부 사항에 국한 되지 않고 있습니다. 또한이 체계에서 제공된 하는 XAML 스키마 컨텍스트를 사용할 수 있으며 원하는 결과 반환할 수 있습니다.       예를 들어 XamlMember 속성 <xref:System.Xaml.XamlMember.IsWritePublic%2A>.</xref:System.Xaml.XamlMember.IsWritePublic%2A> 고려 이 속성에 사용 하는 등 작업 호출자에 게 알립니다는 <xref:System.Xaml.XamlWriter>serialization 대상 개체에서이 멤버에 대 한 값을 쓸 수에 대 한.</xref:System.Xaml.XamlWriter> 기본 구현에서 지원 CLR에 대해 리플렉션을 기술을 사용 하 여 멤버 쓰기 가능 인지 여부를 결정이 이루어집니다 <xref:System.Type>및 해당 멤버 (의 <xref:System.Reflection.MemberInfo>).</xref:System.Reflection.MemberInfo> </xref:System.Type> 따라서 기본적으로 XAML 형식 시스템 CLR 형식 시스템에 종속 됩니다. 그러나 <xref:System.Xaml.XamlMember.IsWritePublic%2A> <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>.</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> API를 재정의 하 여</xref:System.Xaml.XamlMember.IsWritePublic%2A> 의 XAML 형식 시스템 보고를 위해이 종속성을 제거할 수 있습니다. 재정의 시, 기술, XAML 어휘를 고정된 또는 다양 한 XAML 멤버 XAML 어휘에 쓸 수 있는지 여부를 확인 하기 위한 다른 전략에 최적화 된 마스터 조회 테이블에만 적용 되는 메타 데이터와 같이 다른 판단 사용할 수 있습니다.      ## XamlMember의 생성자 필요 XamlMember 없이 XAML 스키마 컨텍스트 가장 생성 한 <xref:System.Xaml.XamlSchemaContext>초기화의 일부로.</xref:System.Xaml.XamlSchemaContext> <xref:System.Xaml.XamlSchemaContext>많은 내부에 필요한 이기도 <xref:System.Xaml.XamlSchemaContext>지원 형식에서 전달 되는 정보를 가져오는 등의 작업.</xref:System.Xaml.XamlSchemaContext> </xref:System.Xaml.XamlSchemaContext> XamlMember API를 사용 하는 경우 일반적으로 필요 <xref:System.Xaml.XamlSchemaContext>에 <xref:System.Xaml.XamlWriter>.</xref:System.Xaml.XamlWriter> 같은 주변 생성자에서 제공 되</xref:System.Xaml.XamlSchemaContext> 는 이 경우 전달할 수 있습니다는 <xref:System.Xaml.XamlSchemaContext>XAML 스키마 컨텍스트를 필요로 하는 모든 XAML 형식 시스템 호출을 통해 참조.</xref:System.Xaml.XamlSchemaContext>       하나의 특정 생성자에 <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> <xref:System.Xaml.XamlSchemaContext>.</xref:System.Xaml.XamlSchemaContext> 필요 하지 않습니다,</xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> 그러나 사용 하 여 생성 하는 XamlMember의 <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>서명을 반환 `true` <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>       과 관련 된 로드 경로 대 한 <xref:System.Xaml.XamlObjectWriter>, 이러한 멤버는 개체 그래프에 쓸 수 없습니다.</xref:System.Xaml.XamlObjectWriter> .NET Framework XAML 서비스 구현에서 사용 하는 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>throw 호출는 <xref:System.Xaml.XamlObjectWriterException>관련 XamlMember를 보고 `true` <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       값을 갖는 XamlMember 구성 하지 않아야 `true` 에 대 한 <xref:System.Xaml.XamlMember.IsUnknown%2A>구현에서 예외를 처리할 수 없는 경우 <xref:System.Xaml.XamlObjectWriter>, 다른 방법으로 조정할 수 있고는 <xref:System.Xaml.XamlObjectWriter>동작.</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember.IsUnknown%2A> 예를 들어, 다음 중 하나 이상을 경우가 구현의:-XAML 스키마 컨텍스트를 나중에 사용할 수 있습니다.      -구성원 호출자 패턴을 사용합니다.      -의도 한 대로 재정의 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>사용자 지정 XAML 작성기에.</xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>"
  syntax:
    content: 'public class XamlMember : IEquatable<System.Xaml.XamlMember>'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Xaml.XamlMember>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(EventInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> CLR 형식 시스템을 사용 하 여 클래스 <xref:System.Reflection.EventInfo>및 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>.</xref:System.Reflection.EventInfo>"
  remarks: "멤버가 이벤트 (이벤트 처리기 연결 지점 속성)을 나타내는 경우이 생성자를 사용 합니다."
  syntax:
    content: public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: eventInfo
      type: System.Reflection.EventInfo
      description: "CLR 형식 시스템 <xref:System.Reflection.EventInfo>이벤트 멤버를 나타내는입니다.</xref:System.Reflection.EventInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 멤버를 정규화 하는 컨텍스트."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(PropertyInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> CLR 형식 시스템을 사용 하 여 클래스 <xref:System.Reflection.PropertyInfo>및 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>.</xref:System.Reflection.PropertyInfo>"
  remarks: "이 생성자를 사용 하 여 멤버 속성을 나타냅니다 (특히 되지 않은 경우 이벤트 처리기 연결)."
  syntax:
    content: public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: "CLR 형식 시스템 <xref:System.Reflection.PropertyInfo>속성 멤버를 나타내는입니다.</xref:System.Reflection.PropertyInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 멤버를 정규화 하는 컨텍스트."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> CLR 형식 시스템을 사용 하 여 클래스 <xref:System.Reflection.EventInfo>및 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>를 포함 하 여 <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> 정보.</xref:System.Reflection.EventInfo>"
  remarks: "멤버가 이벤트 (또는 이벤트 처리기 연결 지점 속성)을 나타내는 경우이 생성자를 사용 합니다."
  syntax:
    content: public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: eventInfo
      type: System.Reflection.EventInfo
      description: "CLR 형식 시스템 <xref:System.Reflection.EventInfo>이벤트 멤버를 나타내는입니다.</xref:System.Reflection.EventInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 멤버를 정규화 하는 컨텍스트."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> 런타임 리플렉션을 처리 하는 구현에 대 한 호출에서 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 리플렉션을 사용 하 여 클래스 <xref:System.Reflection.PropertyInfo>및 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>를 포함 하 여 <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> 정보.</xref:System.Reflection.PropertyInfo>"
  remarks: "멤버 속성을 나타내는 경우에 한 이벤트 처리기 연결 되지 않은 경우이 생성자를 사용 합니다."
  syntax:
    content: public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: "CLR 형식 시스템 <xref:System.Reflection.PropertyInfo>속성 멤버를 나타내는입니다.</xref:System.Reflection.PropertyInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 멤버를 정규화 하는 컨텍스트."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> 런타임에 호출을 처리 하는 구현에 대 한 호출에서 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 에 대 한 클래스는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 연결할 수 있는 이벤트를 나타내는입니다."
  remarks: "멤버가 연결할 수 있는 이벤트 멤버를 나타내는 경우이 생성자를 사용 합니다."
  syntax:
    content: public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: attachableEventName
      type: System.String
      description: "연결할 수 있는 이벤트의 문자열 이름입니다."
    - id: adder
      type: System.Reflection.MethodInfo
      description: "CLR 형식 시스템 <xref:System.Reflection.MethodInfo>처리기에 대 한 <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref> 메서드 연결 가능한 멤버의 지원을 구현 합니다.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 멤버를 정규화 하는 컨텍스트."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  id: '#ctor(System.String,System.Xaml.XamlType,System.Boolean)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,XamlType,Boolean)
  nameWithType: XamlMember.XamlMember(String,XamlType,Boolean)
  fullName: System.Xaml.XamlMember.XamlMember(String,XamlType,Boolean)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 클래스를 선언 하는 문자열 이름을 사용 하 여 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 정보입니다. A <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 이 사용 하 여 생성 되는 서명에 중요 한 제한 사항이 있습니다; 주의 참조 합니다."
  remarks: "A <xref:System.Xaml.XamlMember>서명을 반환 하는 XamlMember 구성 되어 `true` <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember>       과 관련 된 로드 경로 대 한 <xref:System.Xaml.XamlObjectWriter>, 이러한 멤버는 개체 그래프에 쓸 수 없습니다.</xref:System.Xaml.XamlObjectWriter> .NET Framework XAML 서비스 구현에서 사용 하는 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>throw 호출는 <xref:System.Xaml.XamlObjectWriterException>때 관련 <xref:System.Xaml.XamlMember>보고서 `true` <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       구성 하지 않아야는 <xref:System.Xaml.XamlMember>와 <xref:System.Xaml.XamlMember.IsUnknown%2A> `true` 구현에서 예외를 처리할 수 없는 경우 <xref:System.Xaml.XamlObjectWriter>, 다른 방법으로 조정할 수 있고는 <xref:System.Xaml.XamlObjectWriter>동작.</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember> 예를 들어, 다음 중 하나 이상을 경우가 구현의:-XAML 스키마 컨텍스트를 나중에 사용할 수 있습니다.      -구성원 호출자 패턴을 사용합니다.      -의도 한 대로 재정의 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>사용자 지정 XAML 작성기에.</xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>"
  syntax:
    content: public XamlMember (string name, System.Xaml.XamlType declaringType, bool isAttachable);
    parameters:
    - id: name
      type: System.String
      description: "멤버의 문자열 이름입니다."
    - id: declaringType
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> 선언 형식에 대 한 정보입니다."
    - id: isAttachable
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>연결 가능한; 멤버 임을 나타내기 위해 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>or <code>declaringType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 에 대 한 클래스는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 연결 가능한 속성을 나타내는입니다."
  remarks: "멤버가 연결 가능한 속성을 나타내는 경우이 생성자를 사용 합니다."
  syntax:
    content: public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: attachablePropertyName
      type: System.String
      description: "연결 가능한 속성의 문자열 이름입니다."
    - id: getter
      type: System.Reflection.MethodInfo
      description: "CLR 형식 시스템 <xref:System.Reflection.MethodInfo>에 대 한는 <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> 연결 가능한 멤버 접근자의 지원을 구현 합니다.</xref:System.Reflection.MethodInfo>"
    - id: setter
      type: System.Reflection.MethodInfo
      description: "CLR 형식 시스템 <xref:System.Reflection.MethodInfo>에 대 한는 <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> 연결 가능한 멤버 접근자의 지원을 구현 합니다.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 멤버를 정규화 하는 컨텍스트."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 에 대 한 클래스는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 연결 가능한 이벤트를 나타내는 포함 하 여 <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> 정보입니다."
  remarks: "멤버가 연결할 수 있는 이벤트 멤버를 나타내는 경우이 생성자를 사용 합니다."
  syntax:
    content: public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: attachableEventName
      type: System.String
      description: "연결할 수 있는 이벤트의 문자열 이름입니다."
    - id: adder
      type: System.Reflection.MethodInfo
      description: "CLR 형식 시스템 <xref:System.Reflection.MethodInfo>처리기에 대 한 <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref> 메서드 연결 가능한 멤버의 지원을 구현 합니다.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 멤버를 정규화 하는 컨텍스트."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> 런타임에 호출을 처리 하는 구현에 대 한 호출에서 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 에 대 한 클래스는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 연결 가능한 속성을 나타내는 포함 하 여 <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> 정보입니다."
  remarks: "멤버가 없는 연결 가능한 속성 멤버를 나타내는 경우이 생성자를 사용 합니다."
  syntax:
    content: public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: attachablePropertyName
      type: System.String
      description: "연결 가능한 속성의 문자열 이름입니다."
    - id: getter
      type: System.Reflection.MethodInfo
      description: "CLR 형식 시스템 <xref:System.Reflection.MethodInfo>에 대 한는 <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> 연결 가능한 멤버 접근자의 지원을 구현 합니다.</xref:System.Reflection.MethodInfo>"
    - id: setter
      type: System.Reflection.MethodInfo
      description: "CLR 형식 시스템 <xref:System.Reflection.MethodInfo>에 대 한는 <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> 연결 가능한 멤버 접근자의 지원을 구현 합니다.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 멤버를 정규화 하는 컨텍스트."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> 런타임에 호출을 처리 하는 구현에 대 한 호출에서 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DeclaringType
  id: DeclaringType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
  fullName: System.Xaml.XamlMember.DeclaringType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 과 관련 된 멤버를 선언 하는 형식에 대 한 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  remarks: "이 값은 일반적으로 초기화 하는 동안 설정 되 고 일반적으로 되지 `null`합니다.      > [!IMPORTANT] > DeclaringType 정보를 전달할 수의 생성자에서 초기화에 대 한 합니다. 기본 생성자를 직접 호출, <xref:System.Xaml.XamlMember>파생 클래스를 생략할 수 있습니다. 기본 클래스에 적용 하는 값-검사 중 일부</xref:System.Xaml.XamlMember> 에 대 한 초기화 따라서 더 이상 맞추는 필요한 방식에는 기본 CLR 선언 형식 시스템의 정보를 파생 된 초기화 XAML 멤버의 보고 형식 멤버 관계 정보를 변경할 수 없습니다. 형식 정보를 선언 하는의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다."
  syntax:
    content: public System.Xaml.XamlType DeclaringType { get; }
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> 과 관련 된 멤버를 선언 하는 형식에 대 한 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.DeclaringType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DeferringLoader
  id: DeferringLoader
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
  fullName: System.Xaml.XamlMember.DeferringLoader
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; XAML의 지연 된 로드에 사용 되는 개체가 개체를 선언 합니다."
  remarks: "DeferringLoader를 호출 하면 호출 <xref:System.Xaml.XamlMember.LookupDeferringLoader%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlMember.LookupDeferringLoader%2A> 이 문제는 여기서 초기 내부 리플렉션 논리가 정보가 아직 설정 하지 않은 경우에 발생 합니다."
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> DeferringLoader { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 와 <xref href=&quot;System.Xaml.XamlDeferringLoader&quot;> </xref> 제네릭에 대 한 제약 조건입니다."
  overload: System.Xaml.XamlMember.DeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DependsOn
  id: DependsOn
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DependsOn
  nameWithType: XamlMember.DependsOn
  fullName: System.Xaml.XamlMember.DependsOn
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "목록을 가져옵니다 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 개체입니다. 이 기준으로 초기화 순서에 대 한 종속성 관계가 있는 해당 멤버를 보고 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  remarks: "DependsOn를 호출 하면 호출 <xref:System.Xaml.XamlMember.LookupDependsOn%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlMember.LookupDependsOn%2A> 이 문제는 여기서 초기 내부 리플렉션 논리가 정보가 아직 설정 하지 않은 경우에 발생 합니다.       `DependsOn` 패턴 의도적 일반 XAML 규칙을 일치 하지 않는 개체 모델 사례에 적용할 수 있습니다. 일반적인 XAML 규칙은 초기화 텍스트 (또는 XAML 2009에서 팩터리 메서드에 의해)에 전달 되지 않는 형식의 멤버 순서에 관계 없이 지정할 수 있어야 합니다. 적용 하 여 한 `DependsOn` 패턴 멤버에 게 XAML 작성기에 지시할 수 있습니다을 항상이 멤버 보다 먼저 참조 된 멤버를 처리 합니다. 컨텍스트 또는 다른 구성원을 설정한 후 에서만 사용할 수 있는 기타 정보는 현재 멤버의 값에 필요한 경우에이 패턴을 적용할 수 있습니다.       `DependsOn` 패턴을 신중 하 게 적용 하 고 속성 시나리오 아키텍처 목적으로 사용 하기 위해 예약 되어 해야 합니다. 많은 종속성 될 XAML 처리 속도가 느려질 수 있습니다. 또한 있기 순환 종속성을 생성 하는 경우 XAML 처리 동작이 정의 되지 않습니다.       예제 `DependsOn` 에서 특정 속성을 포함 하는 시나리오에서 WPF <xref:System.Windows.Controls.ControlTemplate>및 <xref:System.Windows.DataTemplate>의 <xref:System.Windows.Trigger>, 및에 <xref:System.Windows.Setter>요청 했습니다.</xref:System.Windows.Setter> </xref:System.Windows.Trigger> </xref:System.Windows.DataTemplate> </xref:System.Windows.Controls.ControlTemplate>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlMember> DependsOn { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlMember}
      description: "목록이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 개체입니다."
  overload: System.Xaml.XamlMember.DependsOn*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: XamlMember.Equals(Object)
  fullName: System.Xaml.XamlMember.Equals(Object)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "현재 개체가 다른 개체와 같은지 여부를 나타냅니다."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "이 개체와 비교할 개체입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 개체가 같은지를 하는 경우는 <code> obj </code> 매개 변수, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  id: Equals(System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Equals(XamlMember)
  nameWithType: XamlMember.Equals(XamlMember)
  fullName: System.Xaml.XamlMember.Equals(XamlMember)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다."
  syntax:
    content: public bool Equals (System.Xaml.XamlMember other);
    parameters:
    - id: other
      type: System.Xaml.XamlMember
      description: "이 개체와 비교할 개체입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 개체가 같은지를 하는 경우는 <code> other </code> 매개 변수, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.GetHashCode
  id: GetHashCode
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: XamlMember.GetHashCode()
  fullName: System.Xaml.XamlMember.GetHashCode()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 개체에 대 한 해시 코드를 반환합니다."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "정수 해시 코드입니다."
  overload: System.Xaml.XamlMember.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.GetXamlNamespaces
  id: GetXamlNamespaces
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: GetXamlNamespaces()
  nameWithType: XamlMember.GetXamlNamespaces()
  fullName: System.Xaml.XamlMember.GetXamlNamespaces()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 XAML 멤버가 있을 수 있는 XAML 네임 스페이스 목록을 반환 합니다."
  remarks: "기본 구현에서는 <xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName>호출에서 <xref:System.Xaml.XamlMember.DeclaringType%2A>이 <xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember> 와 연결 된</xref:System.Xaml.XamlMember.DeclaringType%2A> 결과</xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName> 반환"
  syntax:
    content: public virtual System.Collections.Generic.IList<string> GetXamlNamespaces ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
      description: "목록 문자열로 XAML 네임 스페이스 식별자입니다."
  overload: System.Xaml.XamlMember.GetXamlNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Invoker
  id: Invoker
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Invoker
  nameWithType: XamlMember.Invoker
  fullName: System.Xaml.XamlMember.Invoker
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> 과 관련 구현 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  remarks: "`Invoker` 패턴은 고급 XAML 형식 시스템 확장 기술 합니다. `Invoker` 패턴은.NET Framework XAML 서비스에서 XAML 형식 시스템 정의 사용 하 여 다른 스키마 형식 매핑 동작을 삽입 하는 방법을 제공 합니다.       경우는 <xref:System.Xaml.XamlMember.LookupInvoker%2A>반환 재정의 `null`, 기본 구현은 반환 하는 경우 또는 `null` <xref:System.Xaml.XamlMember.UnderlyingMember%2A>이 <xref:System.Xaml.XamlMember>호출자 속성 반환 <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>.</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> 없기 때문에</xref:System.Xaml.XamlMember.LookupInvoker%2A>       <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>기본값이입니다.</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> 이.NET Framework XAML 서비스 및 기본 XAML 스키마 컨텍스트를 사용 하 고 관련 없는 재정의할 경우 대부분의 작업에 대 한 true `Invoker` XAML 형식 시스템 엔터티 생성을 위한 패턴 전달 됩니다.       호출자를 호출 하면 호출 <xref:System.Xaml.XamlMember.LookupInvoker%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlMember.LookupInvoker%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlMemberInvoker Invoker { get; }
    return:
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> 과 관련 구현 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.Invoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsAmbient
  id: IsAmbient
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
  fullName: System.Xaml.XamlMember.IsAmbient
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 앰비언트 속성으로 보고 됩니다."
  remarks: "IsAmbient를 호출 하면 호출 <xref:System.Xaml.XamlMember.LookupIsAmbient%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlMember.LookupIsAmbient%2A> 여기서는 초기 내부 리플렉션 논리가 정보가 아직 설정 하지 않은 구현에서이 문제가 발생 합니다.       앰비언트 속성에 대 한 검사는 일반적으로 일부 개체 및 형식 한정자에 대 한 앰비언트 사용을 사용 하는 값을 올바르게 작동할 수 있도록 하는 XAML 처리 논리입니다. .NET Framework XAML 서비스 Api 및 기본 XAML 스키마 컨텍스트 <xref:System.Windows.Markup.AmbientAttribute>.</xref:System.Windows.Markup.AmbientAttribute> attribution에 따라이 값을 채웁니다. 기본 구현은 <xref:System.Xaml.XamlMember.LookupIsAmbient%2A>이 기존를 사용 하 여 <xref:System.Windows.Markup.AmbientAttribute>기술을 반환 `true` 경우 <xref:System.Windows.Markup.AmbientAttribute>멤버 선언에 있습니다.</xref:System.Windows.Markup.AmbientAttribute> </xref:System.Windows.Markup.AmbientAttribute> </xref:System.Xaml.XamlMember.LookupIsAmbient%2A>       <xref:System.Windows.Markup.AmbientAttribute>포함 하는 몇 가지 WPF 형식 멤버에 <xref:System.Windows.Application>, <xref:System.Windows.Setter>, 및 <xref:System.Windows.Style>.</xref:System.Windows.Style> </xref:System.Windows.Setter> </xref:System.Windows.Application></xref:System.Windows.Markup.AmbientAttribute> 또한에서 발견 된는 <xref:System.Windows.ResourceDictionary>사용 하는 모든 멤버를 의미 있는 형식 <xref:System.Windows.ResourceDictionary>해당 형식을 고려해 야 앰비언트 멤버는 특별히 지정 되지 않은 경우에 대로.</xref:System.Windows.ResourceDictionary> </xref:System.Windows.ResourceDictionary>"
  syntax:
    content: public bool IsAmbient { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 앰비언트 속성으로 보고 되 고, 그러지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.IsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsAttachable
  id: IsAttachable
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
  fullName: System.Xaml.XamlMember.IsAttachable
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 멤버에 연결할 수 있습니다."
  remarks: "IsAttachable 값에 <xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember> 를 생성 하는 생성자가 사용에 따라 초기화 됩니다."
  syntax:
    content: public bool IsAttachable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 멤버에 연결할 수, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.IsAttachable*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsDirective
  id: IsDirective
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsDirective
  nameWithType: XamlMember.IsDirective
  fullName: System.Xaml.XamlMember.IsDirective
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 는 XAML 지시문입니다."
  remarks: "IsDirective 값에 <xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember> 를 생성 하는 생성자가 사용에 따라 초기화 됩니다. 기본 <xref:System.Xaml.XamlMember>생성자 초기화 IsDirective 되도록 `false`.</xref:System.Xaml.XamlMember> 그러나는 <xref:System.Xaml.XamlDirective>클래스 (한 <xref:System.Xaml.XamlMember>파생 클래스) IsDirective가 되도록 초기화 `true`.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlDirective>       으로 IsDirective 보고 하려는 경우 `true` XAML 멤버에 대 한 사용자 지정 XAML 스키마 클래스의 호출자에 게에서 파생 되 고 있는지 확인 <xref:System.Xaml.XamlDirective>해당 동작을 사용 하는 유일한 방법은 있기 때문에.</xref:System.Xaml.XamlDirective>"
  syntax:
    content: public bool IsDirective { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 은 XAML 지시문 고, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.IsDirective*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsEvent
  id: IsEvent
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsEvent
  nameWithType: XamlMember.IsEvent
  fullName: System.Xaml.XamlMember.IsEvent
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 이벤트 멤버를 나타냅니다."
  remarks: "IsEvent를 호출 하면 호출 <xref:System.Xaml.XamlMember.LookupIsEvent%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlMember.LookupIsEvent%2A>"
  syntax:
    content: public bool IsEvent { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 는 이벤트를 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.IsEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsNameValid
  id: IsNameValid
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
  fullName: System.Xaml.XamlMember.IsNameValid
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 유효한를 사용 하 여 초기화 <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> 해당 <xref:System.Xaml.XamlMember.Name*>.</xref:System.Xaml.XamlMember.Name*> 문자열"
  syntax:
    content: public bool IsNameValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 유효한를 사용 하 여 초기화 <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> 문자열; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.IsNameValid*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsReadOnly
  id: IsReadOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
  fullName: System.Xaml.XamlMember.IsReadOnly
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 읽기 전용 멤버를 나타냅니다."
  remarks: "IsReadOnly를 호출 하면 호출 <xref:System.Xaml.XamlMember.LookupIsReadOnly%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlMember.LookupIsReadOnly%2A>"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 읽기 전용 멤버를 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsReadPublic
  id: IsReadPublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
  fullName: System.Xaml.XamlMember.IsReadPublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부를이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 호출 가능한 public 있는 멤버를 나타내는지 <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> 접근자입니다."
  remarks: "IsReadPublic 여부를 검사 값은 <xref:System.Xaml.XamlMember.DeclaringType%2A>공용.</xref:System.Xaml.XamlMember.DeclaringType%2A> 경우 <xref:System.Xaml.XamlMember.DeclaringType%2A>public이 아닌 경우이 `get` 접근자를 효율적으로 호출할 수 이며 IsReadPublic 반환 `false`.</xref:System.Xaml.XamlMember.DeclaringType%2A>       IsReadPublic를 호출 하면 호출 <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>      > [!IMPORTANT] >는 <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>가상 메서드와 이므로 재정의할 수 있습니다.</xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> 재정의 정보를 변경 하려면 (악의적으로 또는 기타) 보고 된 액세스 XAML 멤버의이 더 이상 정렬 되도록 예상 되는 방법에는 기본 CLR 선언 형식 시스템 액세스 정보를 사용 합니다. 액세스 수준 중 중요 한 보안 검사를 기본 CLR 형식을 대신 사용 합니다."
  syntax:
    content: public bool IsReadPublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 호출 가능한 public 나타냅니다 <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> 접근자, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.IsReadPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsUnknown
  id: IsUnknown
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
  fullName: System.Xaml.XamlMember.IsUnknown
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "멤버는 형식 및 멤버 확인에 사용 되는 지원 시스템에서 확인할 수 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "A <xref:System.Xaml.XamlMember>를 사용 하 여 생성 되는 <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>서명을 반환 `true` IsUnknown에 대 한.</xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> </xref:System.Xaml.XamlMember>       과 관련 된 로드 경로 대 한 <xref:System.Xaml.XamlObjectWriter>, <xref:System.Xaml.XamlMember>와 `true` 에 IsUnknown 개체 그래프에 쓸 수 없습니다.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriter> .NET Framework XAML 서비스 Api에서의 기본 구현에서는 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>throw 호출는 <xref:System.Xaml.XamlObjectWriterException>때 관련 <xref:System.Xaml.XamlMember>보고서 `true` IsUnknown에 대 한.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       구성 하지 않아야는 <xref:System.Xaml.XamlMember>의 값이 `true` IsUnknown에 대 한 구현에서 예외를 처리할 수 없는 경우 <xref:System.Xaml.XamlObjectWriter>, 다른 방법으로 조정할 수 있고는 <xref:System.Xaml.XamlObjectWriter>동작.</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember>       IsUnknown를 호출 하면 호출 <xref:System.Xaml.XamlMember.LookupIsUnknown%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlMember.LookupIsUnknown%2A>"
  syntax:
    content: public bool IsUnknown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>멤버를 확인할 수 있습니다; 없는 경우 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 경우 멤버를 확인할 수 있습니다."
  overload: System.Xaml.XamlMember.IsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsWriteOnly
  id: IsWriteOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
  fullName: System.Xaml.XamlMember.IsWriteOnly
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 쓰기 전용 멤버를 나타냅니다."
  remarks: "IsWriteOnly를 호출 하면 호출 <xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A>"
  syntax:
    content: public bool IsWriteOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 쓰기 전용 멤버를 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.IsWriteOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsWritePublic
  id: IsWritePublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
  fullName: System.Xaml.XamlMember.IsWritePublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 호출 가능한 public 로드가 있는 멤버를 나타내는 <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> 접근자입니다."
  remarks: "IsWritePublic 값으로 간주 하는지 여부를 <xref:System.Xaml.XamlMember.DeclaringType%2A>public이 결정의 일부로.</xref:System.Xaml.XamlMember.DeclaringType%2A> 경우 <xref:System.Xaml.XamlMember.DeclaringType%2A>public이 아닌 경우이 `set` 접근자를 효율적으로 호출할 수 이며 IsWritePublic 반환 `false`.</xref:System.Xaml.XamlMember.DeclaringType%2A>       IsWritePublic를 호출 하면 호출 <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>      > [!IMPORTANT] >는 <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>가상 메서드와 이므로 재정의할 수 있습니다.</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> 재정의 정보를 변경 하려면 (악의적으로 또는 기타) 보고 된 액세스 XAML 멤버의이 더 이상 정렬 되도록 예상 되는 방법에는 기본 CLR 선언 형식 시스템 액세스 정보를 사용 합니다. 액세스 수준 중 중요 한 보안 검사를 기본 CLR 형식을 대신 사용 합니다."
  syntax:
    content: public bool IsWritePublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 호출 가능한 public 나타냅니다 <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> 접근자, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.IsWritePublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider
  id: LookupCustomAttributeProvider
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupCustomAttributeProvider()
  nameWithType: XamlMember.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlMember.LookupCustomAttributeProvider()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "파생된 클래스에서 구현 하는 경우 반환 된 <xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref> 구현 합니다."
  remarks: "내부 리플렉션 CLR 특성 값을 얻을 수 있는 대체 방법으로 제공 하려면이 메서드를 재정의 합니다. 재정의 없는 경우, 내부 반영자 <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>.</xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> 하는 등 일반 CLR 리플렉션을 논리를 사용       기본 구현은 반환 `null`합니다."
  syntax:
    content: protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();
    parameters: []
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: "<xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref> 구현 합니다."
  overload: System.Xaml.XamlMember.LookupCustomAttributeProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupDeferringLoader
  id: LookupDeferringLoader
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupDeferringLoader()
  nameWithType: XamlMember.LookupDeferringLoader()
  fullName: System.Xaml.XamlMember.LookupDeferringLoader()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; XAML의 지연 된 로드에 사용 되는 개체가 개체를 선언 합니다."
  remarks: "값을 가져올 때이 메서드가 호출 되는 <xref:System.Xaml.XamlMember.DeferringLoader%2A>속성.</xref:System.Xaml.XamlMember.DeferringLoader%2A> 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember.DeferringLoader%2A>는 기본적으로 내부 리플렉션을으로 사용 되는 값과에서는 다른 값을 반환 하 고 사용자 지정도 제공 하는 경우 <xref:System.Xaml.Schema.XamlMemberInvoker>정보.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.DeferringLoader%2A>       기본 구현은 개체를 반환 하거나 참조 하 여 <xref:System.Windows.Markup.XamlDeferLoadAttribute>또는 사용 하 여 한 <xref:System.Xaml.XamlDeferringLoader>선언 형식에서.</xref:System.Xaml.XamlDeferringLoader> </xref:System.Windows.Markup.XamlDeferLoadAttribute> 경우에 두 개체는 사용할 수 있는,이 메서드가 반환할 수 `null`합니다."
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> LookupDeferringLoader ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 올려진는 <xref href=&quot;System.Xaml.XamlDeferringLoader&quot;> </xref> 제네릭에 대 한 제약 조건입니다."
  overload: System.Xaml.XamlMember.LookupDeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupDependsOn
  id: LookupDependsOn
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupDependsOn()
  nameWithType: XamlMember.LookupDependsOn()
  fullName: System.Xaml.XamlMember.LookupDependsOn()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "목록을 반환 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 개체입니다. 목록의 항목을에서 보고이 기준으로 초기화 순서에 대 한 종속성 관계가 있는 멤버 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  remarks: "값을 가져올 때이 메서드가 호출 되는 <xref:System.Xaml.XamlMember.DependsOn%2A>속성.</xref:System.Xaml.XamlMember.DependsOn%2A> 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember.DependsOn%2A>는 기본적으로 내부 리플렉션을으로 사용 되는 값과에서는 다른 값을 반환 하 고 사용자 지정도 제공 하는 경우 <xref:System.Xaml.Schema.XamlMemberInvoker>정보.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.DependsOn%2A>       WPF XAML 판독기 / 작성기 구현을 <xref:System.Windows.Markup.DependsOnAttribute>.</xref:System.Windows.Markup.DependsOnAttribute> 이 경우 특성 기본 구현에서 사용이 기존 <xref:System.Windows.Markup.DependsOnAttribute>기술을.</xref:System.Windows.Markup.DependsOnAttribute>       이 메서드를 재정의 하 여 사용 하지 않는 경우 <xref:System.Windows.Markup.DependsOnAttribute>이 목적 및을 사용자 고유의 기술로 속성 처리 순서를 나타내는 기술을 교체 하려고 합니다.</xref:System.Windows.Markup.DependsOnAttribute> 속성 처리 순서를 지원 하지 않을 경우 적합 없는 결과 반환 하기 때문에 기본 구현에서는 사용할 수 있습니다.       목록에는 읽기 전용입니다."
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlMember> LookupDependsOn ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlMember}
      description: "목록이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 개체입니다."
  overload: System.Xaml.XamlMember.LookupDependsOn*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupInvoker
  id: LookupInvoker
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupInvoker()
  nameWithType: XamlMember.LookupInvoker()
  fullName: System.Xaml.XamlMember.LookupInvoker()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> 이와 연결 된 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  remarks: "이 메서드 <xref:System.Xaml.XamlMember.Invoker%2A>.</xref:System.Xaml.XamlMember.Invoker%2A> 를 호출 하 여       기본 구현은 것을 요구 하지 않는 <xref:System.Xaml.XamlMember>초기 <xref:System.Xaml.Schema.XamlMemberInvoker>.</xref:System.Xaml.Schema.XamlMemberInvoker> 를 전달 하는 생성자 중 하나를 사용 하 여 생성할 수</xref:System.Xaml.XamlMember> 그러나는 <xref:System.Xaml.XamlMember.UnderlyingMember%2A>값에 대 한 있어야는 <xref:System.Xaml.XamlMember>, 그렇지 않으면 기본 구현에서는 반환 `null`.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.UnderlyingMember%2A>       또한 <xref:System.Xaml.Schema.XamlMemberInvoker>파생된 클래스를 반환 하려면</xref:System.Xaml.Schema.XamlMemberInvoker> 에서 파생할 경우이 메서드를 재정의 합니다. 반환 하는 경우 `null`, <xref:System.Xaml.XamlMember.Invoker%2A>반환 <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>호출자에 게.</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlMember.Invoker%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlMemberInvoker LookupInvoker ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "The <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref> information for this <xref href=&quot;System.Xaml.XamlMember&quot;></xref>; or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlMember.LookupInvoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsAmbient
  id: LookupIsAmbient
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsAmbient()
  nameWithType: XamlMember.LookupIsAmbient()
  fullName: System.Xaml.XamlMember.LookupIsAmbient()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 여부이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 앰비언트 속성으로 보고 됩니다."
  remarks: "이 메서드는 XAML의 앰비언트 속성 정보를 확인 하는 내부 호출에 의해 호출 됩니다. 앰비언트 속성 동작의 XAML 판독기 및 XAML 작성기에서 공용 API 동작에서 계산 됩니다. 내부 LookupIsAmbient 참조 하는 호출은 일반적으로 개체 및 형식 한정자에 대 한 앰비언트 사용을 사용 하는 값을 올바르게 작동할 수 있도록 하는 XAML 처리 논리의 일부입니다. 기본.NET Framework XAML 서비스 구현에서 리플렉션을 지원 형식을 통해이 정보를 얻으려면 특성 지정 하는 CLR을 사용 합니다. 기본 구현에 대 한 확인 하는 구체적으로, <xref:System.Windows.Markup.AmbientAttribute>반환 `true` LookupIsAmbient에 대 한 경우 <xref:System.Windows.Markup.AmbientAttribute>멤버 정의에 존재 합니다.</xref:System.Windows.Markup.AmbientAttribute> </xref:System.Windows.Markup.AmbientAttribute>       이 메서드를 재정의 하 여 사용 하지 않는 경우 <xref:System.Windows.Markup.AmbientAttribute>이 목적 및를 직접 기술 사용 하 여 주변 XAML 속성을 나타내는 기술을 교체 하려고 합니다.</xref:System.Windows.Markup.AmbientAttribute>       WPF <xref:System.Windows.Markup.AmbientAttribute>및 <xref:System.Windows.Trigger.Property%2A?displayProperty=fullName> <xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName>.</xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName> </xref:System.Windows.Trigger.Property%2A?displayProperty=fullName> </xref:System.Windows.Markup.AmbientAttribute> 와 해당 특성에서에서 Api 예제"
  syntax:
    content: protected virtual bool LookupIsAmbient ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 오류를 보고 하려면 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 앰비언트 속성인; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.LookupIsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsEvent
  id: LookupIsEvent
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsEvent()
  nameWithType: XamlMember.LookupIsEvent()
  fullName: System.Xaml.XamlMember.LookupIsEvent()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 여부이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 이벤트를 나타냅니다."
  remarks: "기본 구현 확인 여부를 <xref:System.Xaml.XamlMember.UnderlyingMember%2A>유형의 <xref:System.Reflection.EventInfo>, 인 경우 반환 `true`.</xref:System.Reflection.EventInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A>       이 메서드는 호출자가 <xref:System.Xaml.XamlMember.IsEvent%2A>.</xref:System.Xaml.XamlMember.IsEvent%2A> 값을 가져올 때 전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember>파생 클래스를 사용할 수 있는 XAML을 확인 하려면 해석 될 수 있는 메타 특수 한 있는 경우 또는 형식 시스템 표현을 사례 당 기준입니다.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsEvent ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>보고서에이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 는 이벤트를 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.LookupIsEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsReadOnly
  id: LookupIsReadOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsReadOnly()
  nameWithType: XamlMember.LookupIsReadOnly()
  fullName: System.Xaml.XamlMember.LookupIsReadOnly()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 여부이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 의도 한 읽기 전용 속성을 나타냅니다."
  remarks: "기본 구현은 반환 `true` 경우 <xref:System.Xaml.XamlMember.UnderlyingMember%2A>가 공용 있지만 `set` 내부 리플렉션에 의해 결정 된 대로,에 대 한 접근자 존재 하지 않습니다.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       이 메서드는 호출자가 <xref:System.Xaml.XamlMember.IsReadOnly%2A>.</xref:System.Xaml.XamlMember.IsReadOnly%2A> 값을 가져올 때 전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember>파생 클래스를 사용할 수 있는 XAML을 확인 하려면 해석 될 수 있는 메타 특수 한 있는 경우 또는 형식 시스템 표현을 사례 당 기준입니다.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 오류를 보고 하려면 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 의도 한 읽기 전용 속성인; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.LookupIsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsReadPublic
  id: LookupIsReadPublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsReadPublic()
  nameWithType: XamlMember.LookupIsReadPublic()
  fullName: System.Xaml.XamlMember.LookupIsReadPublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 여부이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 가진 공용 속성을 나타내는 <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> 접근자입니다."
  remarks: "기본 구현 내부 리플렉션 또는의 부정을 중 하나에 따라 결과 반환 합니다. <xref:System.Xaml.XamlMember.IsWriteOnly%2A>, 그 순서 대로 처리 합니다.</xref:System.Xaml.XamlMember.IsWriteOnly%2A>       LookupIsReadPublic 멤버 자체 public; 인지 여부를 반환 합니다. 반환 `true` 형식을 선언 nonpublic에 공용 멤버에 대 한 합니다. 사용 하 여 <xref:System.Xaml.XamlMember.IsReadPublic%2A>대신 선언 형식의 표시 여부를 고려 하려는 경우.</xref:System.Xaml.XamlMember.IsReadPublic%2A>       이 메서드는 호출자가 <xref:System.Xaml.XamlMember.IsReadPublic%2A>.</xref:System.Xaml.XamlMember.IsReadPublic%2A> 값을 가져올 때 이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <xref:System.Xaml.XamlMember>파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는.</xref:System.Xaml.XamlMember>      > [!IMPORTANT] > The LookupIsReadPublic 가상 메서드와 이므로 재정의할 수 있습니다. 재정의 정보를 변경 하려면 (악의적으로 또는 기타) 보고 된 액세스 XAML 멤버의이 더 이상 정렬 되도록 예상 되는 방법에는 기본 CLR 선언 형식 시스템 액세스 정보를 사용 합니다. 액세스 수준 중 중요 한 보안 검사를 기본 CLR 형식을 대신 사용 합니다."
  syntax:
    content: protected virtual bool LookupIsReadPublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 가진 공용 속성을 나타내는 <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> 접근자, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.LookupIsReadPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsUnknown
  id: LookupIsUnknown
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsUnknown()
  nameWithType: XamlMember.LookupIsUnknown()
  fullName: System.Xaml.XamlMember.LookupIsUnknown()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 여부이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 형식 및 멤버 확인에 사용 되는 지원 시스템에서 확인 될 수 없는 멤버를 나타냅니다."
  remarks: "이 메서드는 호출자가 <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> 값을 가져올 때 호출 될 수 있습니다. 기본 구현 내부 리플렉션에서 기반 인지에 대 한 검사 결과 반환 합니다.는 `null` 값 <xref:System.Xaml.XamlMember.UnderlyingMember%2A>, 그 순서 대로 처리 합니다.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <xref:System.Xaml.XamlMember>파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsUnknown ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 가 확인할 수 없는 멤버를 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.LookupIsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsWriteOnly
  id: LookupIsWriteOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsWriteOnly()
  nameWithType: XamlMember.LookupIsWriteOnly()
  fullName: System.Xaml.XamlMember.LookupIsWriteOnly()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 여부를이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 멤버에는 공용을 나타내는 <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> 접근자 하지만 public이 아닙니다 <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> 접근자입니다."
  remarks: "기본 구현은 반환 `true` 경우는 <xref:System.Xaml.XamlMember.UnderlyingMember%2A>존재 하에 공용 `set` 접근자와 비공용 `get` 접근자를 내부 리플렉션에 의해 결정 된 대로.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       이 메서드는 호출자가 <xref:System.Xaml.XamlMember.IsWriteOnly%2A>.</xref:System.Xaml.XamlMember.IsWriteOnly%2A> 값을 가져올 때 이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <xref:System.Xaml.XamlMember>파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsWriteOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 쓰기 전용 멤버를 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.LookupIsWriteOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsWritePublic
  id: LookupIsWritePublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsWritePublic()
  nameWithType: XamlMember.LookupIsWritePublic()
  fullName: System.Xaml.XamlMember.LookupIsWritePublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 여부이 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 멤버에는 공용을 나타내는 <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> 접근자입니다."
  remarks: "기본 구현은 반환 결과의 부정을 또는 내부 리플렉션 기반 <xref:System.Xaml.XamlMember.IsReadOnly%2A>, 그 순서 대로 처리 합니다.</xref:System.Xaml.XamlMember.IsReadOnly%2A>       이 메서드는 호출자가 <xref:System.Xaml.XamlMember.IsWritePublic%2A>.</xref:System.Xaml.XamlMember.IsWritePublic%2A> 값을 가져올 때 이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <xref:System.Xaml.XamlMember>파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는.</xref:System.Xaml.XamlMember>      > [!IMPORTANT] > The LookupIsWritePublic 가상 메서드와 이므로 재정의할 수 있습니다. 재정의 정보를 변경 하려면 (악의적으로 또는 기타) 보고 된 액세스 XAML 멤버의이 더 이상 정렬 되도록 예상 되는 방법에는 기본 CLR 선언 형식 시스템 액세스 정보를 사용 합니다. 액세스 수준 중 중요 한 보안 검사를 기본 CLR 형식을 대신 사용 합니다."
  syntax:
    content: protected virtual bool LookupIsWritePublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 쓰기 가능한 멤버를 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.LookupIsWritePublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupTargetType
  id: LookupTargetType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupTargetType()
  nameWithType: XamlMember.LookupTargetType()
  fullName: System.Xaml.XamlMember.LookupTargetType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 형식의 위치는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 존재할 수 있습니다."
  remarks: "기본 구현은 연결할 수 없는 멤버를 구분합니다. 연결할 수 없는 멤버에 대 한 LookupTargetType 항상 반환 <xref:System.Xaml.XamlMember.DeclaringType%2A>.</xref:System.Xaml.XamlMember.DeclaringType%2A> LookupTargetType 연결 가능한 멤버에 대 한 검사 결과 반환는 <xref:System.Xaml.XamlMember.UnderlyingMember%2A>접근자 매개 변수 형식이 고 XAML 스키마 컨텍스트 기반 형식을 해석.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       이 메서드는 호출자가 <xref:System.Xaml.XamlMember.TargetType%2A>.</xref:System.Xaml.XamlMember.TargetType%2A> 값을 가져올 때 이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <xref:System.Xaml.XamlMember>파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupTargetType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "형식에는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 존재할 수 있습니다. 설명 부분을 참조 하십시오."
  overload: System.Xaml.XamlMember.LookupTargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupType
  id: LookupType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupType()
  nameWithType: XamlMember.LookupType()
  fullName: System.Xaml.XamlMember.LookupType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 멤버에서 사용 되는 형식입니다. 설명 부분을 참조 하십시오."
  remarks: "이 메서드는 호출자가 <xref:System.Xaml.XamlMember.Type%2A>.</xref:System.Xaml.XamlMember.Type%2A> 값을 가져올 때 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember.Type%2A>는 기본적으로 내부 리플렉션을으로 사용 되는 값과에서는 다른 값을 반환 하 고 사용자 지정도 제공 하는 경우 <xref:System.Xaml.Schema.XamlMemberInvoker>정보.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.Type%2A>       기본 구현은 서로 다른 코드 경로 개념적 의미를 사용 하 여 반환 된 작업에 대 한 <xref:System.Xaml.XamlType>여부를 기반으로 하는이 <xref:System.Xaml.XamlMember>속성, 메서드 또는 이벤트를 나타냅니다.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlType>      -반환 되는 속성에 대 한 <xref:System.Xaml.XamlType>속성 설정 또는 속성에서 반환 하는 형식입니다.</xref:System.Xaml.XamlType>      -반환 되는 이벤트에 대 한 <xref:System.Xaml.XamlType>형식이 필요한 이벤트 처리기 (CLR 구현에서 대리자).</xref:System.Xaml.XamlType>      -는 메서드에 대 한 <xref:System.Xaml.XamlType>은 반환 형식이.</xref:System.Xaml.XamlType>       각각의 경우에서 내부 시스템 형식과에서 XAML 형식을 평가 하는 XAML 스키마 컨텍스트가 사용 됩니다.       이 메서드는 호출자가 <xref:System.Xaml.XamlMember.Type%2A>.</xref:System.Xaml.XamlMember.Type%2A> 값을 가져올 때 이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <xref:System.Xaml.XamlMember>파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> 멤버에서 사용 되는 형식입니다. 설명 부분을 참조 하십시오."
  overload: System.Xaml.XamlMember.LookupType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupTypeConverter
  id: LookupTypeConverter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupTypeConverter()
  nameWithType: XamlMember.LookupTypeConverter()
  fullName: System.Xaml.XamlMember.LookupTypeConverter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 연결 되는 형식 변환기 구현이 반환 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  remarks: "기본 구현에서는 다음 논리와 처리 순서를 사용:-특성 멤버 수준에 존재 하는 경우 (<xref:System.ComponentModel.TypeConverterAttribute>), 특성 정보에 대 한 호출에 사용 되 <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>XAML 스키마 컨텍스트.</xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> </xref:System.ComponentModel.TypeConverterAttribute>      -If <xref:System.Xaml.XamlMember.Type%2A>올바른지, 해당 형식과 연결 되는 형식 변환기가 반환 됩니다.</xref:System.Xaml.XamlMember.Type%2A>      -멤버는 이벤트, 이벤트 관련 형식 변환기 반환 됩니다.       이 메서드는 호출자가 <xref:System.Xaml.XamlMember.TypeConverter%2A>.</xref:System.Xaml.XamlMember.TypeConverter%2A> 값을 가져올 때 이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <xref:System.Xaml.XamlMember>파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> LookupTypeConverter ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 인스턴스를 함께 <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> ; 제약 조건 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.LookupTypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter
  id: LookupUnderlyingGetter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingGetter()
  nameWithType: XamlMember.LookupUnderlyingGetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingGetter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> 과 관련 접근자 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  remarks: "기본 구현은 해석는 <xref:System.Xaml.XamlMember.UnderlyingMember%2A>속성으로 <xref:System.Reflection.PropertyInfo>의 값을 반환 하 고 <xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName>(로 설정 하는 매개 변수와 함께 `true`), 반환 된 메서드가 public이 아닌 수 있음을 의미 하는.</xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName> </xref:System.Reflection.PropertyInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> 이 문제가 발생할 수 있습니다 `null` 특정 사례입니다. 연결 된 접근자 존재 하거나 멤버를 사용할 수 없는 속성이 있는 경우를 포함 합니다.       이 메서드는 호출자가 <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A>연결 된 <xref:System.Xaml.Schema.XamlMemberInvoker>.</xref:System.Xaml.Schema.XamlMemberInvoker> 속성</xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A> 에서 값을 가져올 때 이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <xref:System.Xaml.XamlMember>파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는.</xref:System.Xaml.XamlMember> LookupUnderlyingGetter를 구현 하십시오 <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, 및 <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>상관 관계가 지정 된 결과 반환 하는 모든.</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MethodInfo LookupUnderlyingGetter ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "<xref:System.Reflection.MethodInfo>관련 된 <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> 접근자 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.MethodInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingGetter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingMember
  id: LookupUnderlyingMember
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingMember()
  nameWithType: XamlMember.LookupUnderlyingMember()
  fullName: System.Xaml.XamlMember.LookupUnderlyingMember()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "CLR 형식 시스템 반환 <xref:System.Reflection.MemberInfo>이와 연결 된 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>.</xref:System.Reflection.MemberInfo>"
  remarks: "기본 구현은 생성을 기반으로 하는 기본 멤버 정보를 반환 합니다. 경우는 <xref:System.Reflection.MemberInfo>기본 멤버를 설정 하려면 충분 한 정보를 제공 하지 않는 서명을 사용 하 여 개체가 생성 되 면이 메서드는 반환 `null`.</xref:System.Reflection.MemberInfo>       를 생성 하는 동안 기본 멤버를 설정한 경우이 메서드를 호출할 필요가 없습니다.       이 메서드는 호출자가 <xref:System.Xaml.XamlMember.UnderlyingMember%2A>.</xref:System.Xaml.XamlMember.UnderlyingMember%2A> 값을 가져올 때 이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <xref:System.Xaml.XamlMember>파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는.</xref:System.Xaml.XamlMember> 구현 해야 <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, LookupUnderlyingMember 모두 반환 하는 경우 상관 관계가 지정 된 결과 및.</xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MemberInfo LookupUnderlyingMember ();
    parameters: []
    return:
      type: System.Reflection.MemberInfo
      description: "CLR 형식 시스템 <xref:System.Reflection.MemberInfo>과 관련 된 개체 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>; 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.MemberInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter
  id: LookupUnderlyingSetter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingSetter()
  nameWithType: XamlMember.LookupUnderlyingSetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingSetter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> 과 관련 접근자 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  remarks: "기본 구현은 해석 <xref:System.Xaml.XamlMember.UnderlyingMember%2A>으로 <xref:System.Reflection.PropertyInfo>의 값을 반환 하 고 <xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName>(로 설정 하는 매개 변수와 함께 `true`), 반환 된 메서드가 public이 아닌 수 있음을 의미 하는.</xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName> </xref:System.Reflection.PropertyInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> 따라서 `null` 특정를 포함 한 경우 이러한 없는 접근자 하거나 멤버를 사용할 수 없는 속성이 있는 경우.       이 메서드는 호출자에 관련된 <xref:System.Xaml.Schema.XamlMemberInvoker> <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A>에서 값을 가져올 때 호출 됩니다. 이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <xref:System.Xaml.XamlMember>파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는.</xref:System.Xaml.XamlMember>  </xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A></xref:System.Xaml.Schema.XamlMemberInvoker> 구현 해야 <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, LookupUnderlyingSetter, 및 <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>상관 관계가 지정 된 결과 반환 하는 모든.</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MethodInfo LookupUnderlyingSetter ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "<xref:System.Reflection.MethodInfo>관련 된 <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> 접근자 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.MethodInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingSetter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupValueSerializer
  id: LookupValueSerializer
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupValueSerializer()
  nameWithType: XamlMember.LookupValueSerializer()
  fullName: System.Xaml.XamlMember.LookupValueSerializer()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 연관 된 값 serializer 구현을 반환 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  remarks: "기본 구현에서는 다음 논리와 처리 순서를 사용:-특성 멤버 수준에 존재 하는 경우 (<xref:System.Windows.Markup.ValueSerializerAttribute>), 특성 정보에 대 한 호출에 사용 되 <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>XAML 스키마 컨텍스트.</xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> </xref:System.Windows.Markup.ValueSerializerAttribute>      -If <xref:System.Xaml.XamlMember.Type%2A>올바른지, 해당 형식과 연결 된 값 변환기가 반환 됩니다.</xref:System.Xaml.XamlMember.Type%2A>      -이전 조건이 적용 되지 않은 경우 `null` 반환 됩니다.       이 메서드는 호출자가 <xref:System.Xaml.XamlMember.ValueSerializer%2A>.</xref:System.Xaml.XamlMember.ValueSerializer%2A> 값을 가져올 때 이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <xref:System.Xaml.XamlMember>파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> LookupValueSerializer ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 인스턴스를 함께 <xref:System.Windows.Markup.ValueSerializer>제약 조건 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlMember.LookupValueSerializer*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Name
  id: Name
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Name
  nameWithType: XamlMember.Name
  fullName: System.Xaml.XamlMember.Name
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> name이 선언 하는 문자열 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  remarks: "이 값은 항상 생성 되는 동안 설정 됩니다. 구현 되는 생성자 <xref:System.Xaml.XamlMember>일반적으로 예외를 throw 함 초기 이름을 지정 하지 않으면; 따라서 하지 않을이 수도 `null` 또는 빈 문자열이 면 기본.NET Framework XAML 서비스 구현을 사용 하는 경우.</xref:System.Xaml.XamlMember>       [XamlName 문법](~/add/includes/ajax-current-ext-md.md) CLR 형식 및 멤버에 대 한 명명 규칙 정확한 교차 하지 않으며 합니다. 이것은 CLR에서 유효한 멤버 이름을 선언할 수 XAML 명명에서는 유효 하지 않습니다. 가능 하면 이러한 상황을 방지 해야 합니다."
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> name이 선언 하는 문자열 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  id: op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: op_Equality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Equality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Equality(XamlMember,XamlMember)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "지정 된 두 확인 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 동일한 값을 포함 하는 개체입니다."
  syntax:
    content: public static bool op_Equality (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);
    parameters:
    - id: xamlMember1
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlMember2
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하는 경우의 값 <code> xamlMember1 </code> 의 값과 같습니다 <code> xamlMember2 </code>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  id: op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: op_Inequality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Inequality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Inequality(XamlMember,XamlMember)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "지정 된 두 확인 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 다른 값을 가질 개체입니다."
  syntax:
    content: public static bool op_Inequality (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);
    parameters:
    - id: xamlMember1
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlMember2
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하는 경우의 값 <code> xamlMember1 </code> 의 값과에서 다른 <code> xamlMember2 </code>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.PreferredXamlNamespace
  id: PreferredXamlNamespace
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
  fullName: System.Xaml.XamlMember.PreferredXamlNamespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "단일 XAML 네임 스페이스에 대 한 기본 XAML 네임 스페이스를 식별 하는 URI를 가져옵니다 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  remarks: "호출할 때와 동일한 값을 제공 하는 PreferredXamlNamespace 속성 <xref:System.Xaml.XamlMember.GetXamlNamespaces%2A>한 다음 반환된 된 목록에서 첫 번째 값 문자열을 가져와.</xref:System.Xaml.XamlMember.GetXamlNamespaces%2A> 텍스트에 다시 또는 XAML 네임 스페이스 정보를 유지 하는 다른 표시는 멤버를 작성할 때 기본 XAML 네임 스페이스는 것 같습니다."
  syntax:
    content: public string PreferredXamlNamespace { get; }
    return:
      type: System.String
      description: "이 대 한 기본 XAML 네임 스페이스에 대 한 식별자 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>, 문자열입니다."
  overload: System.Xaml.XamlMember.PreferredXamlNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.SerializationVisibility
  id: SerializationVisibility
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
  fullName: System.Xaml.XamlMember.SerializationVisibility
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 <xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref> 비주얼 디자이너는 멤버를 처리 하는 방법을 나타내는 값입니다."
  syntax:
    content: public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }
    return:
      type: System.ComponentModel.DesignerSerializationVisibility
      description: "값은 <xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref> 열거 합니다. 기본값은 <xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.SerializationVisibility*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.TargetType
  id: TargetType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: TargetType
  nameWithType: XamlMember.TargetType
  fullName: System.Xaml.XamlMember.TargetType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 형식의 위치는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 존재할 수 있습니다."
  remarks: "반환 된 값은와 연결할 수 없는 멤버에 대 한 다릅니다. TargetType을 연결할 수 없는 멤버에 대 한 <xref:System.Xaml.XamlMember.DeclaringType%2A>.</xref:System.Xaml.XamlMember.DeclaringType%2A> 반환 연결 가능한 멤버에 대 한 <xref:System.Xaml.XamlMember.LookupTargetType%2A>이 논리를 기반으로 하는 결과 반환:-리플렉션 백업 확인할 수 없는 경우 (<xref:System.Xaml.XamlMember.IsUnknown%2A> `true`),이 메서드는 제네릭 개체 형식을 나타내는 내부 상수를 반환 합니다.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember.LookupTargetType%2A>      -앞에서 설명한 조건 적용 되지 않은 경우 <xref:System.Xaml.XamlMember.LookupTargetType%2A>호출 됩니다.</xref:System.Xaml.XamlMember.LookupTargetType%2A> 기본 구현은 반환 하는 <xref:System.Xaml.XamlType>기반으로 구현 하는 메서드를 검사 하는 `get` 및 `set` 접근자.</xref:System.Xaml.XamlType> 클래스에서 재정의 될 수 있습니다 <xref:System.Xaml.XamlMember.LookupTargetType%2A>연결 가능한 멤버에 대 한 대상 형식을 보고할 수 있는 다른 메타 데이터 형식 같은 다른 동작을 사용 하 합니다.</xref:System.Xaml.XamlMember.LookupTargetType%2A>"
  syntax:
    content: public System.Xaml.XamlType TargetType { get; }
    return:
      type: System.Xaml.XamlType
      description: "형식에는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 존재할 수 있습니다. 설명 부분을 참조 하십시오."
  overload: System.Xaml.XamlMember.TargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.ToString
  id: ToString
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: ToString()
  nameWithType: XamlMember.ToString()
  fullName: System.Xaml.XamlMember.ToString()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 문자열 표현을 반환 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  remarks: "이 구현은 <xref:System.Xaml.XamlMember.Name%2A>.</xref:System.Xaml.XamlMember.Name%2A> 를 반환합니다."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "이 항목의 문자열 표현을 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Type
  id: Type
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Type
  nameWithType: XamlMember.Type
  fullName: System.Xaml.XamlMember.Type
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 멤버에서 사용 되는 형식입니다."
  remarks: "유형 호출 하면 호출 <xref:System.Xaml.XamlMember.LookupType%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlMember.LookupType%2A> 이 초기 내부 리플렉션 논리 정보를 아직 설정 하지 않은 경우 발생 합니다.       기본 동작에 (없음 <xref:System.Xaml.XamlMember.LookupType%2A>재정의), 반환 된 <xref:System.Xaml.XamlType>개념적 서로 다른 의미를 가질 수 있습니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlMember.LookupType%2A> 각 의미를 적용 하는지에 따라 다릅니다이 <xref:System.Xaml.XamlMember>은 다음 목록으로 속성, 메서드 또는 이벤트를 나타내는:-반환 되는 속성에 대 한 <xref:System.Xaml.XamlType>속성 설정 또는 속성에서 반환 하는 형식을.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlMember>      -반환 되는 이벤트에 대 한 <xref:System.Xaml.XamlType>형식이 필요한 이벤트 처리기 (CLR 구현에서 대리자).</xref:System.Xaml.XamlType>      -는 메서드에 대 한 일 수 있는 해당 메서드의 반환 형식 `null`.       각각의 경우에서 XAML 스키마 컨텍스트는 XAML 형식을 지원 형식에서 평가에 사용 됩니다."
  syntax:
    content: public System.Xaml.XamlType Type { get; }
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> 멤버에서 사용 되는 형식입니다. 설명 부분을 참조 하십시오."
  overload: System.Xaml.XamlMember.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.TypeConverter
  id: TypeConverter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
  fullName: System.Xaml.XamlMember.TypeConverter
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; XAML 선언 된 개체의 형식 변환 생성에 사용할 수 있는 개체입니다."
  remarks: "TypeConverter를 호출 하면 호출 <xref:System.Xaml.XamlMember.LookupTypeConverter%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlMember.LookupTypeConverter%2A> 이 문제는 초기 내부 리플렉션 논리 정보를 아직 설정 하지 않은 경우에 발생 합니다.       TypeConverter에 대 한 null 속성 값을 반환 하는 구현 필요가 없는 작업 <xref:System.ComponentModel.TypeConverter>.</xref:System.ComponentModel.TypeConverter> 다음은 TypeConverter 및 이러한 값이 나타내는 항목에 대 한 가능한 null이 아닌 반환 값의 목록:-반환 값은 해당 멤버에 특별히 또는 변환기의 대상 유형으로 일반적으로 특성을 사용 하는 형식 변환기를 보고 합니다. 이 문제는 일반적으로 어떤 대부분 XAML 형식 시스템을 XAML 프로세서는 형식 변환기를 인스턴스화하고 해당 메서드를 호출 하기 위해 찾습니다.      -반환 값은 기본 제공 값 변환기를 보고합니다. 이 변환기는 XAML 작성기에서 수행 하는 특정 내부 작업에 대 한 존재 합니다. 특히, 이러한 기본 제공 값 변환기는 XAML 언어 수준 기본 형식에 원시 특성 문자열 값을 변환합니다. .NET Framework XAML 서비스 구현에 대 한 이러한 기본 제공 형식 변환은 대개 시스템 어셈블리에 정의 된 형식 변환기에 전달 합니다. 에 대 한 변환 예를 들어 한 <xref:System.Int32>값에는 기본 제공 변환, 전달 및 <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A>값 참조 <xref:System.ComponentModel.Int32Converter>.</xref:System.ComponentModel.Int32Converter> </xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A> 따라서</xref:System.Int32>      -반환 값, 무제한 개체 모델의 특수 한 경우 보고 즉,는 <xref:System.Xaml.XamlMember> <xref:System.Xaml.XamlMember.Type%2A> <xref:System.Object>안내 하십시오.</xref:System.Object> 값</xref:System.Xaml.XamlMember.Type%2A> </xref:System.Xaml.XamlMember> 이 경우에 <xref:System.Xaml.Schema.XamlValueConverter%601>것으로 보고 되는 <xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName>은 {`Object}`.</xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName> </xref:System.Xaml.Schema.XamlValueConverter%601> 그러나 <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>은 `null` 없는 실제 유형 또는 인스턴스를이 변환을 수행 하기 위해 사용할 수 있습니다.</xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> 대신, 특정 기술 런타임 개체 그래프의 처리를 결정 하는 경우 런타임이 될 때까지 개체 모델의 동작을 확인할 수 없습니다.       작업에 액세스할 수 있으면 <xref:System.ComponentModel.TypeConverter>에서 <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>, 변환 메서드를 호출할 수 있습니다.</xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> </xref:System.ComponentModel.TypeConverter> 그러나 여러 변환 메서드는 서비스 컨텍스트에 의존합니다. 동일한 서비스 컨텍스트 형식 변환기의 쓰기 개체 그래프에 대 한 개체의 일반적인 역할 필요 함을 사용할 수 없는 경우 변환기 메서드 예외를 throw 할 수 있습니다."
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> TypeConverter { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 값으로는 <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> 제네릭에 대 한 제약 조건입니다. 설명 부분을 참조 하십시오."
  overload: System.Xaml.XamlMember.TypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.UnderlyingMember
  id: UnderlyingMember
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
  fullName: System.Xaml.XamlMember.UnderlyingMember
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "CLR 형식 시스템을 가져옵니다 <xref:System.Reflection.MemberInfo>의해 생성 된 멤버에 대해 사용할 <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.MethodInfo>, 또는 <xref:System.Reflection.EventInfo>.</xref:System.Reflection.EventInfo> </xref:System.Reflection.MethodInfo> </xref:System.Reflection.PropertyInfo> </xref:System.Reflection.MemberInfo>"
  remarks: "UnderlyingMember를 호출 하면 호출 <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>"
  syntax:
    content: public System.Reflection.MemberInfo UnderlyingMember { get; }
    return:
      type: System.Reflection.MemberInfo
      description: "CLR 형식 시스템 <xref:System.Reflection.MemberInfo>초기 생성자 매개 변수에서 캐스트 된 정보.</xref:System.Reflection.MemberInfo> A <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 를 사용 하 여 생성 되는 &lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt; 서명을 반환 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlMember.UnderlyingMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.ValueSerializer
  id: ValueSerializer
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
  fullName: System.Xaml.XamlMember.ValueSerializer
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; XAML 선언 된 개체의 값 serialization에 사용 되는 개체입니다."
  remarks: "ValueSerializer를 호출 하면 호출 <xref:System.Xaml.XamlMember.LookupValueSerializer%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlMember.LookupValueSerializer%2A> 이 문제는 초기 내부 리플렉션 논리 정보를 아직 설정 하지 않은 경우에 발생 합니다.       ValueSerializer에 대 한 null 속성 값을 반환 하는 일부 경우 반드시 작동 하는 <xref:System.Windows.Markup.ValueSerializer>.</xref:System.Windows.Markup.ValueSerializer> 설명을 참조 <xref:System.Xaml.XamlMember.TypeConverter%2A>; ValueSerializer에 동일한 고려 사항이 적용 됩니다.</xref:System.Xaml.XamlMember.TypeConverter%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> ValueSerializer { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 와 <xref:System.Windows.Markup.ValueSerializer>제네릭에 대 한 제약 조건.</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlMember.ValueSerializer*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(EventInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext)
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: true
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(PropertyInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.Schema.XamlMemberInvoker
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlMemberInvoker
  nameWithType: XamlMemberInvoker
  fullName: System.Xaml.Schema.XamlMemberInvoker
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,XamlType,Boolean)
  nameWithType: XamlMember.XamlMember(String,XamlType,Boolean)
  fullName: System.Xaml.XamlMember.XamlMember(String,XamlType,Boolean)
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.DeclaringType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
  fullName: System.Xaml.XamlMember.DeclaringType
- uid: System.Xaml.XamlMember.DeferringLoader
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
  fullName: System.Xaml.XamlMember.DeferringLoader
- uid: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<XamlDeferringLoader>
  nameWithType: XamlValueConverter<XamlDeferringLoader>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Xaml.XamlDeferringLoader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlDeferringLoader
    name: XamlDeferringLoader
    nameWithType: XamlDeferringLoader
    fullName: XamlDeferringLoader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.DependsOn
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DependsOn
  nameWithType: XamlMember.DependsOn
  fullName: System.Xaml.XamlMember.DependsOn
- uid: System.Collections.Generic.IList{System.Xaml.XamlMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<XamlMember>
  nameWithType: IList<XamlMember>
  fullName: System.Collections.Generic.IList<System.Xaml.XamlMember>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Xaml.XamlMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlMember
    name: XamlMember
    nameWithType: XamlMember
    fullName: XamlMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Equals(System.Object)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals(Object)
  nameWithType: XamlMember.Equals(Object)
  fullName: System.Xaml.XamlMember.Equals(Object)
- uid: System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals(XamlMember)
  nameWithType: XamlMember.Equals(XamlMember)
  fullName: System.Xaml.XamlMember.Equals(XamlMember)
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlMember.GetHashCode
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetHashCode()
  nameWithType: XamlMember.GetHashCode()
  fullName: System.Xaml.XamlMember.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xaml.XamlMember.GetXamlNamespaces
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetXamlNamespaces()
  nameWithType: XamlMember.GetXamlNamespaces()
  fullName: System.Xaml.XamlMember.GetXamlNamespaces()
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Invoker
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Invoker
  nameWithType: XamlMember.Invoker
  fullName: System.Xaml.XamlMember.Invoker
- uid: System.Xaml.XamlMember.IsAmbient
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
  fullName: System.Xaml.XamlMember.IsAmbient
- uid: System.Xaml.XamlMember.IsAttachable
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
  fullName: System.Xaml.XamlMember.IsAttachable
- uid: System.Xaml.XamlMember.IsDirective
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsDirective
  nameWithType: XamlMember.IsDirective
  fullName: System.Xaml.XamlMember.IsDirective
- uid: System.Xaml.XamlMember.IsEvent
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsEvent
  nameWithType: XamlMember.IsEvent
  fullName: System.Xaml.XamlMember.IsEvent
- uid: System.Xaml.XamlMember.IsNameValid
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
  fullName: System.Xaml.XamlMember.IsNameValid
- uid: System.Xaml.XamlMember.IsReadOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
  fullName: System.Xaml.XamlMember.IsReadOnly
- uid: System.Xaml.XamlMember.IsReadPublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
  fullName: System.Xaml.XamlMember.IsReadPublic
- uid: System.Xaml.XamlMember.IsUnknown
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
  fullName: System.Xaml.XamlMember.IsUnknown
- uid: System.Xaml.XamlMember.IsWriteOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
  fullName: System.Xaml.XamlMember.IsWriteOnly
- uid: System.Xaml.XamlMember.IsWritePublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
  fullName: System.Xaml.XamlMember.IsWritePublic
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupCustomAttributeProvider()
  nameWithType: XamlMember.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlMember.LookupCustomAttributeProvider()
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Xaml.XamlMember.LookupDeferringLoader
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDeferringLoader()
  nameWithType: XamlMember.LookupDeferringLoader()
  fullName: System.Xaml.XamlMember.LookupDeferringLoader()
- uid: System.Xaml.XamlMember.LookupDependsOn
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDependsOn()
  nameWithType: XamlMember.LookupDependsOn()
  fullName: System.Xaml.XamlMember.LookupDependsOn()
- uid: System.Xaml.XamlMember.LookupInvoker
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupInvoker()
  nameWithType: XamlMember.LookupInvoker()
  fullName: System.Xaml.XamlMember.LookupInvoker()
- uid: System.Xaml.XamlMember.LookupIsAmbient
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsAmbient()
  nameWithType: XamlMember.LookupIsAmbient()
  fullName: System.Xaml.XamlMember.LookupIsAmbient()
- uid: System.Xaml.XamlMember.LookupIsEvent
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsEvent()
  nameWithType: XamlMember.LookupIsEvent()
  fullName: System.Xaml.XamlMember.LookupIsEvent()
- uid: System.Xaml.XamlMember.LookupIsReadOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadOnly()
  nameWithType: XamlMember.LookupIsReadOnly()
  fullName: System.Xaml.XamlMember.LookupIsReadOnly()
- uid: System.Xaml.XamlMember.LookupIsReadPublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadPublic()
  nameWithType: XamlMember.LookupIsReadPublic()
  fullName: System.Xaml.XamlMember.LookupIsReadPublic()
- uid: System.Xaml.XamlMember.LookupIsUnknown
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsUnknown()
  nameWithType: XamlMember.LookupIsUnknown()
  fullName: System.Xaml.XamlMember.LookupIsUnknown()
- uid: System.Xaml.XamlMember.LookupIsWriteOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWriteOnly()
  nameWithType: XamlMember.LookupIsWriteOnly()
  fullName: System.Xaml.XamlMember.LookupIsWriteOnly()
- uid: System.Xaml.XamlMember.LookupIsWritePublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWritePublic()
  nameWithType: XamlMember.LookupIsWritePublic()
  fullName: System.Xaml.XamlMember.LookupIsWritePublic()
- uid: System.Xaml.XamlMember.LookupTargetType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTargetType()
  nameWithType: XamlMember.LookupTargetType()
  fullName: System.Xaml.XamlMember.LookupTargetType()
- uid: System.Xaml.XamlMember.LookupType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupType()
  nameWithType: XamlMember.LookupType()
  fullName: System.Xaml.XamlMember.LookupType()
- uid: System.Xaml.XamlMember.LookupTypeConverter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTypeConverter()
  nameWithType: XamlMember.LookupTypeConverter()
  fullName: System.Xaml.XamlMember.LookupTypeConverter()
- uid: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<TypeConverter>
  nameWithType: XamlValueConverter<TypeConverter>
  fullName: System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.ComponentModel.TypeConverter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.TypeConverter
    name: TypeConverter
    nameWithType: TypeConverter
    fullName: TypeConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingGetter()
  nameWithType: XamlMember.LookupUnderlyingGetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingGetter()
- uid: System.Xaml.XamlMember.LookupUnderlyingMember
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingMember()
  nameWithType: XamlMember.LookupUnderlyingMember()
  fullName: System.Xaml.XamlMember.LookupUnderlyingMember()
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingSetter()
  nameWithType: XamlMember.LookupUnderlyingSetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingSetter()
- uid: System.Xaml.XamlMember.LookupValueSerializer
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupValueSerializer()
  nameWithType: XamlMember.LookupValueSerializer()
  fullName: System.Xaml.XamlMember.LookupValueSerializer()
- uid: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<ValueSerializer>
  nameWithType: XamlValueConverter<ValueSerializer>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Windows.Markup.ValueSerializer>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.ValueSerializer
    name: ValueSerializer
    nameWithType: ValueSerializer
    fullName: ValueSerializer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Name
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Name
  nameWithType: XamlMember.Name
  fullName: System.Xaml.XamlMember.Name
- uid: System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Equality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Equality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Equality(XamlMember,XamlMember)
- uid: System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Inequality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Inequality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Inequality(XamlMember,XamlMember)
- uid: System.Xaml.XamlMember.PreferredXamlNamespace
  parent: System.Xaml.XamlMember
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
  fullName: System.Xaml.XamlMember.PreferredXamlNamespace
- uid: System.Xaml.XamlMember.SerializationVisibility
  parent: System.Xaml.XamlMember
  isExternal: false
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
  fullName: System.Xaml.XamlMember.SerializationVisibility
- uid: System.ComponentModel.DesignerSerializationVisibility
  parent: System.ComponentModel
  isExternal: false
  name: DesignerSerializationVisibility
  nameWithType: DesignerSerializationVisibility
  fullName: System.ComponentModel.DesignerSerializationVisibility
- uid: System.Xaml.XamlMember.TargetType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TargetType
  nameWithType: XamlMember.TargetType
  fullName: System.Xaml.XamlMember.TargetType
- uid: System.Xaml.XamlMember.ToString
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ToString()
  nameWithType: XamlMember.ToString()
  fullName: System.Xaml.XamlMember.ToString()
- uid: System.Xaml.XamlMember.Type
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Type
  nameWithType: XamlMember.Type
  fullName: System.Xaml.XamlMember.Type
- uid: System.Xaml.XamlMember.TypeConverter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
  fullName: System.Xaml.XamlMember.TypeConverter
- uid: System.Xaml.XamlMember.UnderlyingMember
  parent: System.Xaml.XamlMember
  isExternal: false
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
  fullName: System.Xaml.XamlMember.UnderlyingMember
- uid: System.Xaml.XamlMember.ValueSerializer
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
  fullName: System.Xaml.XamlMember.ValueSerializer
- uid: System.Xaml.XamlMember.#ctor*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember.XamlMember
- uid: System.Xaml.XamlMember.DeclaringType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
- uid: System.Xaml.XamlMember.DeferringLoader*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
- uid: System.Xaml.XamlMember.DependsOn*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DependsOn
  nameWithType: XamlMember.DependsOn
- uid: System.Xaml.XamlMember.Equals*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals
  nameWithType: XamlMember.Equals
- uid: System.Xaml.XamlMember.GetHashCode*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetHashCode
  nameWithType: XamlMember.GetHashCode
- uid: System.Xaml.XamlMember.GetXamlNamespaces*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetXamlNamespaces
  nameWithType: XamlMember.GetXamlNamespaces
- uid: System.Xaml.XamlMember.Invoker*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Invoker
  nameWithType: XamlMember.Invoker
- uid: System.Xaml.XamlMember.IsAmbient*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
- uid: System.Xaml.XamlMember.IsAttachable*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
- uid: System.Xaml.XamlMember.IsDirective*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsDirective
  nameWithType: XamlMember.IsDirective
- uid: System.Xaml.XamlMember.IsEvent*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsEvent
  nameWithType: XamlMember.IsEvent
- uid: System.Xaml.XamlMember.IsNameValid*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
- uid: System.Xaml.XamlMember.IsReadOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
- uid: System.Xaml.XamlMember.IsReadPublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
- uid: System.Xaml.XamlMember.IsUnknown*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
- uid: System.Xaml.XamlMember.IsWriteOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
- uid: System.Xaml.XamlMember.IsWritePublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupCustomAttributeProvider
  nameWithType: XamlMember.LookupCustomAttributeProvider
- uid: System.Xaml.XamlMember.LookupDeferringLoader*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDeferringLoader
  nameWithType: XamlMember.LookupDeferringLoader
- uid: System.Xaml.XamlMember.LookupDependsOn*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDependsOn
  nameWithType: XamlMember.LookupDependsOn
- uid: System.Xaml.XamlMember.LookupInvoker*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupInvoker
  nameWithType: XamlMember.LookupInvoker
- uid: System.Xaml.XamlMember.LookupIsAmbient*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsAmbient
  nameWithType: XamlMember.LookupIsAmbient
- uid: System.Xaml.XamlMember.LookupIsEvent*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsEvent
  nameWithType: XamlMember.LookupIsEvent
- uid: System.Xaml.XamlMember.LookupIsReadOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadOnly
  nameWithType: XamlMember.LookupIsReadOnly
- uid: System.Xaml.XamlMember.LookupIsReadPublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadPublic
  nameWithType: XamlMember.LookupIsReadPublic
- uid: System.Xaml.XamlMember.LookupIsUnknown*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsUnknown
  nameWithType: XamlMember.LookupIsUnknown
- uid: System.Xaml.XamlMember.LookupIsWriteOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWriteOnly
  nameWithType: XamlMember.LookupIsWriteOnly
- uid: System.Xaml.XamlMember.LookupIsWritePublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWritePublic
  nameWithType: XamlMember.LookupIsWritePublic
- uid: System.Xaml.XamlMember.LookupTargetType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTargetType
  nameWithType: XamlMember.LookupTargetType
- uid: System.Xaml.XamlMember.LookupType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupType
  nameWithType: XamlMember.LookupType
- uid: System.Xaml.XamlMember.LookupTypeConverter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTypeConverter
  nameWithType: XamlMember.LookupTypeConverter
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingGetter
  nameWithType: XamlMember.LookupUnderlyingGetter
- uid: System.Xaml.XamlMember.LookupUnderlyingMember*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingMember
  nameWithType: XamlMember.LookupUnderlyingMember
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingSetter
  nameWithType: XamlMember.LookupUnderlyingSetter
- uid: System.Xaml.XamlMember.LookupValueSerializer*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupValueSerializer
  nameWithType: XamlMember.LookupValueSerializer
- uid: System.Xaml.XamlMember.Name*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Name
  nameWithType: XamlMember.Name
- uid: System.Xaml.XamlMember.op_Equality*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Equality
  nameWithType: XamlMember.op_Equality
- uid: System.Xaml.XamlMember.op_Inequality*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Inequality
  nameWithType: XamlMember.op_Inequality
- uid: System.Xaml.XamlMember.PreferredXamlNamespace*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
- uid: System.Xaml.XamlMember.SerializationVisibility*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
- uid: System.Xaml.XamlMember.TargetType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TargetType
  nameWithType: XamlMember.TargetType
- uid: System.Xaml.XamlMember.ToString*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ToString
  nameWithType: XamlMember.ToString
- uid: System.Xaml.XamlMember.Type*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Type
  nameWithType: XamlMember.Type
- uid: System.Xaml.XamlMember.TypeConverter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
- uid: System.Xaml.XamlMember.UnderlyingMember*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
- uid: System.Xaml.XamlMember.ValueSerializer*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
