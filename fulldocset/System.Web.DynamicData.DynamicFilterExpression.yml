### YamlMime:ManagedReference
items:
- uid: System.Web.DynamicData.DynamicFilterExpression
  id: DynamicFilterExpression
  children:
  - System.Web.DynamicData.DynamicFilterExpression.#ctor
  - System.Web.DynamicData.DynamicFilterExpression.ControlID
  - System.Web.DynamicData.DynamicFilterExpression.GetQueryable(System.Linq.IQueryable)
  - System.Web.DynamicData.DynamicFilterExpression.SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)
  langs:
  - csharp
  name: DynamicFilterExpression
  nameWithType: DynamicFilterExpression
  fullName: System.Web.DynamicData.DynamicFilterExpression
  type: Class
  summary: "지정 된 필터 컨트롤의 값을 사용 하 여 데이터베이스 쿼리를 수정 합니다."
  remarks: "DynamicFilterExpression 클래스에 할당 된 값을 사용 하 여 데이터베이스 쿼리를 수정할 수 있습니다는 <xref:System.Web.DynamicData.DynamicFilter>컨트롤.</xref:System.Web.DynamicData.DynamicFilter> 이 컨트롤의 작성 작업을 위임 하는 <xref:System.Linq.IQueryable>특수 컨트롤에 같은 쿼리 <xref:System.Web.DynamicData.QueryableFilterRepeater>컨트롤 또는 <xref:System.Web.DynamicData.DynamicFilter>컨트롤.</xref:System.Web.DynamicData.DynamicFilter> </xref:System.Web.DynamicData.QueryableFilterRepeater> </xref:System.Linq.IQueryable>       그러면 필터 컨트롤 필터 서식 파일을 참조 하는 쿼리 작성을 위임 합니다. 쿼리가 참조 하는 데이터 소스 컨트롤에서 다음 실행 되는 <xref:System.Web.UI.WebControls.QueryExtender>컨트롤.</xref:System.Web.UI.WebControls.QueryExtender>       페이지에서 DynamicFilterExpression 클래스를 사용 하려면 다음이 단계를 수행:-추가 <xref:System.Web.UI.WebControls.QueryExtender>컨트롤을 페이지.</xref:System.Web.UI.WebControls.QueryExtender>      -설정의 `TargetControlID` 의 속성은 <xref:System.Web.UI.WebControls.QueryExtender>데이터 소스 제어를 참조 하는 컨트롤.</xref:System.Web.UI.WebControls.QueryExtender>      -DynamicFilterExpression 개체의 자식으로 추가 된 <xref:System.Web.UI.WebControls.QueryExtender>컨트롤.</xref:System.Web.UI.WebControls.QueryExtender>      -설정의 `ControlID` 필터 컨트롤을 참조 하는 DynamicFilterExpression 개체의 속성입니다.       이전 단계에서 관련 된 필터 컨트롤, 데이터 바인딩 컨트롤 및 데이터 소스 컨트롤이 페이지에 정의 된 가정 합니다."
  example:
  - "The following example shows how to use the DynamicFilterExpression control to select a filter template in a page. The filter template is selected by the <xref:System.Web.DynamicData.DynamicFilter> control that is identified by DynamicFilterExpression control through its `ControID` property.  \n  \n```  \n<asp:QueryExtender ID=\"QueryExtender1\"   \n    TargetControlID=\"GridDataSource\" runat=\"server\">  \n    <asp:DynamicFilterExpression ControlID=\"CategoryFilterID\" />  \n</asp:QueryExtender>  \n```"
  syntax:
    content: 'public class DynamicFilterExpression : System.Web.UI.WebControls.Expressions.DataSourceExpression'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.Expressions.DataSourceExpression
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.Context
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.DataSource
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.IsTrackingViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.LoadViewState(System.Object)
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.Owner
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.SaveViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.SetDirty
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#IsTrackingViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#LoadViewState(System.Object)
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#SaveViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#TrackViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.TrackViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.ViewState
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilterExpression.#ctor
  id: '#ctor'
  parent: System.Web.DynamicData.DynamicFilterExpression
  langs:
  - csharp
  name: DynamicFilterExpression()
  nameWithType: DynamicFilterExpression.DynamicFilterExpression()
  fullName: System.Web.DynamicData.DynamicFilterExpression.DynamicFilterExpression()
  type: Constructor
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.DynamicData.DynamicFilterExpression&quot;> </xref> 클래스입니다."
  syntax:
    content: public DynamicFilterExpression ();
    parameters: []
  overload: System.Web.DynamicData.DynamicFilterExpression.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilterExpression.ControlID
  id: ControlID
  parent: System.Web.DynamicData.DynamicFilterExpression
  langs:
  - csharp
  name: ControlID
  nameWithType: DynamicFilterExpression.ControlID
  fullName: System.Web.DynamicData.DynamicFilterExpression.ControlID
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "필터 컨트롤 식별자를 가져오거나 설정 합니다."
  remarks: "이 컨트롤 식별자에서 사용 되는 <xref:System.Web.DynamicData.DynamicFilterExpression>필터를 선택 하는 클래스를 위임 하는 작업에 데이터 소스 컨트롤에서 실행 되는 쿼리 작성을 제어 합니다.</xref:System.Web.DynamicData.DynamicFilterExpression>       필터 컨트롤의 빌드 작업을 쿼리의 필터 템플릿에 해당 참조에 위임 합니다. 쿼리가 참조 하는 데이터 소스 컨트롤에서 다음 실행 되는 <xref:System.Web.UI.WebControls.QueryExtender>컨트롤.</xref:System.Web.UI.WebControls.QueryExtender>"
  example:
  - "The following example shows how to use the <xref:System.Web.DynamicData.DynamicFilterExpression> class to select a filter control in a page.  \n  \n```  \n<asp:QueryExtender ID=\"QueryExtender1\"   \n    TargetControlID=\"GridDataSource\" runat=\"server\">  \n    <asp:DynamicFilterExpression ControlID=\"CategoryFilterID\" />  \n</asp:QueryExtender>  \n```"
  syntax:
    content: public string ControlID { get; set; }
    return:
      type: System.String
      description: "필터 컨트롤의 식별자입니다."
  overload: System.Web.DynamicData.DynamicFilterExpression.ControlID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilterExpression.GetQueryable(System.Linq.IQueryable)
  id: GetQueryable(System.Linq.IQueryable)
  parent: System.Web.DynamicData.DynamicFilterExpression
  langs:
  - csharp
  name: GetQueryable(IQueryable)
  nameWithType: DynamicFilterExpression.GetQueryable(IQueryable)
  fullName: System.Web.DynamicData.DynamicFilterExpression.GetQueryable(IQueryable)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "현재 필터 값을 사용 하 여 수정된 된 쿼리를 가져옵니다."
  remarks: "GetQueryable 메서드는 작업 필터 템플릿에 의해 지정 된 필터 컨트롤에서 참조 하는 쿼리 작성을 위임는 <xref:System.Web.DynamicData.DynamicFilterExpression.ControlID%2A>속성.</xref:System.Web.DynamicData.DynamicFilterExpression.ControlID%2A>"
  syntax:
    content: public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);
    parameters:
    - id: source
      type: System.Linq.IQueryable
      description: "수정할 데이터 원본 쿼리입니다."
    return:
      type: System.Linq.IQueryable
      description: "에 포함 된 현재 값을 사용 하 여 수정 된 데이터 원본 쿼리는 <xref href=&quot;System.Web.DynamicData.DynamicFilterExpression&quot;> </xref> 인스턴스."
  overload: System.Web.DynamicData.DynamicFilterExpression.GetQueryable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilterExpression.SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)
  id: SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)
  parent: System.Web.DynamicData.DynamicFilterExpression
  langs:
  - csharp
  name: SetContext(Control,HttpContext,IQueryableDataSource)
  nameWithType: DynamicFilterExpression.SetContext(Control,HttpContext,IQueryableDataSource)
  fullName: System.Web.DynamicData.DynamicFilterExpression.SetContext(Control,HttpContext,IQueryableDataSource)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "데이터 원본 정보를 사용 하 여 식을 초기화합니다."
  syntax:
    content: public override void SetContext (System.Web.UI.Control owner, System.Web.HttpContext context, System.Web.UI.WebControls.IQueryableDataSource dataSource);
    parameters:
    - id: owner
      type: System.Web.UI.Control
      description: "포함 하는 컨트롤의 <xref href=&quot;System.Web.DynamicData.DynamicFilterExpression&quot;> </xref> 인스턴스를 같은 <xref href=&quot;System.Web.UI.WebControls.QueryExtender&quot;> </xref> 제어 합니다."
    - id: context
      type: System.Web.HttpContext
      description: "현재 <xref href=&quot;System.Web.HttpContext&quot;> </xref> 개체입니다."
    - id: dataSource
      type: System.Web.UI.WebControls.IQueryableDataSource
      description: "대상 데이터에 대 한 소스는 <xref href=&quot;System.Web.DynamicData.DynamicFilterExpression&quot;> </xref> 인스턴스."
  overload: System.Web.DynamicData.DynamicFilterExpression.SetContext*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.Expressions.DataSourceExpression
  isExternal: false
  name: System.Web.UI.WebControls.Expressions.DataSourceExpression
- uid: System.Web.DynamicData.DynamicFilterExpression.#ctor
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: DynamicFilterExpression()
  nameWithType: DynamicFilterExpression.DynamicFilterExpression()
  fullName: System.Web.DynamicData.DynamicFilterExpression.DynamicFilterExpression()
- uid: System.Web.DynamicData.DynamicFilterExpression.ControlID
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: ControlID
  nameWithType: DynamicFilterExpression.ControlID
  fullName: System.Web.DynamicData.DynamicFilterExpression.ControlID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.DynamicData.DynamicFilterExpression.GetQueryable(System.Linq.IQueryable)
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: GetQueryable(IQueryable)
  nameWithType: DynamicFilterExpression.GetQueryable(IQueryable)
  fullName: System.Web.DynamicData.DynamicFilterExpression.GetQueryable(IQueryable)
- uid: System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Web.DynamicData.DynamicFilterExpression.SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: SetContext(Control,HttpContext,IQueryableDataSource)
  nameWithType: DynamicFilterExpression.SetContext(Control,HttpContext,IQueryableDataSource)
  fullName: System.Web.DynamicData.DynamicFilterExpression.SetContext(Control,HttpContext,IQueryableDataSource)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.UI.WebControls.IQueryableDataSource
  parent: System.Web.UI.WebControls
  isExternal: false
  name: IQueryableDataSource
  nameWithType: IQueryableDataSource
  fullName: System.Web.UI.WebControls.IQueryableDataSource
- uid: System.Web.DynamicData.DynamicFilterExpression.#ctor*
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: DynamicFilterExpression
  nameWithType: DynamicFilterExpression.DynamicFilterExpression
- uid: System.Web.DynamicData.DynamicFilterExpression.ControlID*
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: ControlID
  nameWithType: DynamicFilterExpression.ControlID
- uid: System.Web.DynamicData.DynamicFilterExpression.GetQueryable*
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: GetQueryable
  nameWithType: DynamicFilterExpression.GetQueryable
- uid: System.Web.DynamicData.DynamicFilterExpression.SetContext*
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: SetContext
  nameWithType: DynamicFilterExpression.SetContext
