### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  id: ImportCatalogPart
  children:
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
  langs:
  - csharp
  name: ImportCatalogPart
  nameWithType: ImportCatalogPart
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  type: Class
  summary: "에 대 한 설명 파일을 가져옵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤 (으로 사용 되는 다른 ASP.NET 서버 컨트롤 또는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤), 사용자가 미리 정의 된 설정을 사용 하 여 웹 페이지에 컨트롤을 추가할 수 있도록 합니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "ImportCatalogPart 컨트롤을 사용 하면 사용자의 설정을 설명 하는 설명 파일을 가져오는 한 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 또는 사용자가을 추가 하는 서버 컨트롤을 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>영역.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>       설명 파일을 가져온 후의 <xref:System.Web.UI.WebControls.WebParts.WebPart>ImportCatalogPart 컨트롤 내에서 표시 되는 제어 파일에서 참조 하 고 사용자 페이지에 컨트롤을 추가할 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>       Description 파일은 컨트롤 자체와 동일 합니다. 로 끝나는 XML 파일 인지는 합니다. 웹 파트 확장 주로 속성 값은 컨트롤의 상태를 설명 하는-이름/값 쌍을 포함 합니다. 이 항목에 설명 된 대로 지정된 된 XML 형식에 따라 생성 되는 설명 파일 [웹 파트 컨트롤 설명 파일](~/add/includes/ajax-current-ext-md.md)합니다.       Description 파일을 나타내는 컨트롤의 경우를 어셈블리로 컴파일할 수 있거나 또는.ascx 파일에 정의 된 사용자 정의 컨트롤 수 있습니다. 두 경우 모두 가져온된 설명 파일에서 참조 된 컨트롤은 컨트롤을 시도 하는 페이지를 호스팅하는 웹 서버에 존재 해야 합니다. 설명 파일에서 참조 하는 컨트롤을 포함 하는 컨트롤 이름 및 어셈블리 (또는 파일) 및 설명 파일에는 컨트롤의 속성 값, 모양 및 동작에 영향을 주는 설정이 포함 되어 있습니다.       ImportCatalogPart 컨트롤을 사용 하면 컨트롤의 설정을 공유할 수 있습니다. 복잡 한 제어는 여러 속성 및 설정이 있을 수 있습니다. 예를 들어 사용자 지정 큰 회사 내에서 일반적인 인트라넷 사이트의에서 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤에는 다양 한 데이터베이스 연결, 부서 정보 등 등 사용자의 환경에 고유한 값을 포함 하는 속성이 포함 될 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤의 모양에 영향을 주는 속성의 수를 포함할 수도 있습니다. 한 명의 사용자 수 컨트롤 특정 사이트에 개인 설정 하 고 올바르게 작동, 컨트롤에 대 한 설명 파일 내보내고 나 개인 설정할 수 있는 다른 인트라넷 사이트에 완전히 구성 된 컨트롤을 추가 하려면 파일을 가져올 수 있는 다른 사용자와 설명 파일을 공유 합니다. 컴파일된 어셈블리 또는 컨트롤을 포함 하는 사용자 정의 컨트롤 파일 자신의 사이트를 호스팅하는 웹 서버에 존재 하 고, 사용자가 다른 웹 사이트에 컨트롤을 추가할 수 있습니다.       기준인 사용자 설명 파일을 가져올 (및 따라서 연결된 된 서버 컨트롤)를 웹 페이지에 메커니즘은 ImportCatalogPart 컨트롤을 페이지 개발자 웹 페이지에 추가 해야 합니다. 사용자 페이지를 카탈로그 디스플레이 모드를 전환 하 고 ImportCatalogPart 컨트롤이 표시 되 면 사용자가이 컨트롤을 찾아 사용자 수는 있습니다. 웹 파트 설명 파일을 가져올 하려는 서버 컨트롤에 해당 합니다. UI을 사용 하 여 다음 컨트롤을 통해 제공 ImportCatalogPart, 사용자가 원하는 서버 컨트롤 모양을 가져온된 설명 파일에 지정 된 대로 완전 하 게 구성 하는 속성이 있는 웹 페이지에 추가할 수 있습니다.       전에 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤의 설명 파일을 가져올 수, 사용자는 먼저 (내보내기) 만들어야 파일에서 기존 기반 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> 다음 조건이 충족 될 경우 컨트롤에 대 한 설명 파일을 내보낼 수 있습니다:-컨트롤으로 표시 된 속성에는 `Personalizable` 특성입니다.      -는 Web.config 파일에는 `enableExport` 특성 값으로 설정 `true` 에 `<webParts>` 요소입니다.      -의 값을 설정 하는 개발자는 <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>속성의 기본값 이외의 값으로 컨트롤을 <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, 내보내기를 금지 하.</xref:System.Web.UI.WebControls.WebParts.WebPartExportMode> </xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>속성 값으로 설정 됩니다 <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, 포함 된 속성은 <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A>인 매개 변수는 `Personalizable` 특성 사용자 설명 파일을 내보낼 때 내보내집니다.</xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartExportMode> </xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> 따라서 특정 한 상황에서 내보내지 연결 문자열과 같은 중요 한 데이터를 방지 하기 위해 컨트롤 개발자가 있습니다.       사용자가 저장 하는 지침을 수행 하는 컨트롤의 동사 메뉴에 표시 되는 내보내기 동사를 클릭 하 여 내보내기에 대해 설정 된 컨트롤을 내보낼 수는 있습니다. 컨트롤에 대 한 웹 파트 설명 파일입니다. 그런 다음 다른 사용자가 컨트롤의 고유 인스턴스를 구성 하려면이 파일을 가져올 수 있습니다.       ImportCatalogPart 클래스에는 여러 속성이 포함 되어 있습니다. <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>속성을 설명 파일을 찾을 때 사용자에 대 한 지침이 포함 된 텍스트를 포함 합니다.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>ImportCatalogPart 컨트롤 내에서 표시 된 대로 가져온된 컨트롤에 대 한 레이블로 사용 되는 텍스트를 포함 하는 속성.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>컨트롤 설명을 가져올 때 오류가 발생 하는 경우 표시 되는 텍스트를 포함 합니다.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>속성 개발자 제목을 할당 하지 않는 경우 ImportCatalogPart 컨트롤에 대 한 기본 제목을 할당 하려면 기본 속성을 재정의 합니다.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>클릭할 설명 파일을 업로드 하는 단추에 대 한 텍스트를 포함 하는 속성 및 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>속성 업로드 프로세스에 대 한 지침이 포함 되어 있습니다.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> </xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>       ImportCatalogPart 클래스는 또한 몇 가지 고유한 메서드를 포함합니다. <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>각 <xref:System.Web.UI.WebControls.WebParts.WebPart>합니다. 인스턴스를 만들 필요 없이 각 서버 컨트롤에 대 한 정보를 표시 하는 ImportCatalogPart 컨트롤 수 있는 카탈로그의 컨트롤</xref:System.Web.UI.WebControls.WebParts.WebPart> 에 대 한 개체</xref:System.Web.UI.WebControls.WebParts.WebPartDescription> 를 검색합니다 하는 메서드</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>메서드는 특정 인스턴스를 가져옵니다 <xref:System.Web.UI.WebControls.WebParts.WebPart>메서드에 전달 된 설명에 따라.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>       ImportCatalogPart 컨트롤 사용과 관련 된 일부 위험이 있습니다. 한 가지 예는 악성 데이터를 가져오는 데 사용 되는 설명 파일을 통해 웹 응용 프로그램에 가져오는 가능성이 있습니다. 배치한 경우 악성 스크립트 코드 설명 파일에 문자열 속성의 값으로, 다음 해당 스크립트가 수 잠재적으로 실행 될 사용자 설명 파일을 가져옵니다를 웹 페이지에 참조 된 서버 컨트롤을 추가 합니다. 악성 데이터와 함께 설명 파일을 가져올 위험을 최소화 하려면 문자열 형식의 속성이 있는 서버 컨트롤 항상 인코딩해야 속성 데이터 합니다. 형식 설명 파일을 통해 가져오는 경우에 또 다른 위험 (참조 [웹 파트 컨트롤 설명 파일](../Topic/Web%20Parts%20Control%20Description%20Files.md)). 악의적인 사용자는 많은 어셈블리를 로드 하는 요청을 전송할 수는 <xref:System.AppDomain>때문에 메모리 사용량이 지나치게 많은.</xref:System.AppDomain>       가져오기와 관련 된 위험을 방지 하려면 ImportCatalogPart 컨트롤 또는 가져오기 기능을 사용 하지 않고 기능을 완전히 비활성화할 수 있습니다. 또는 컨트롤에 액세스할 수 있는 사용자를 제한할 수 있습니다. 그렇게 할 수 프로그래밍 방식으로 역할 관리를 사용 하 여 (참조 [권한 부여를 사용 하 여 역할 관리](~/add/includes/ajax-current-ext-md.md)). 예를 들어, 페이지를 로드 하는 경우 사용자가 관리자 역할 등 특정 역할에 있는지 여부를 테스트할 수 있습니다. 사용자 역할에 있으면 해당 사용자에 대 한 페이지로 ImportCatalogPart 컨트롤을 프로그래밍 방식으로 추가할 수 있습니다. 선언적 방법 ImportCatalogPart 컨트롤을 사용할 수 있는 사용자 집합을 제한 하려면 사용할 수도 있습니다.  카탈로그가 포함 된 웹 페이지 내에서 두 개의 넣을 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>컨트롤: 가져올 수 있는 사용자 및 사용자에 게 없습니다.</xref:System.Web.UI.WebControls.WebParts.CatalogZone> 가져올 수 있는 사용자에 대 한 영역 ImportCatalogPart 컨트롤이 포함 됩니다. 영역 자체 내에 저장할 수는 <xref:System.Web.UI.WebControls.LoginView>사용자 또는 역할 지정 하는 인증 된 것만 시간대에 있는 컨트롤의 사용을 제한 하는 데 사용할 수 있는 컨트롤.</xref:System.Web.UI.WebControls.LoginView>"
  example:
  - "The following code example demonstrates how to use the ImportCatalogPart control declaratively and programmatically on a Web page. The example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control and an ImportCatalogPart control.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n-   An explanation of how the example works when you load the page in a browser.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. You should place the following source code in a file and name it Displaymodemenucs.ascx or Displaymodemenuvb.ascx (depending on which language you are using). For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#7](~/add/codesnippet/csharp/t-system.web.ui.webcontr_227_1.ascx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#7](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_227_1.ascx)]  \n  \n The second part of the code example is the Web page. At the top of the page are two `register` directives, one for the user control and one for the compiled component that contains the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Notice that the page has a declarative reference to the ImportCatalogPart control, nested within the proper hierarchy of declarative elements. Notice also that several property values are assigned declaratively on the `<asp:importcatalogpart>` element. Also, the `Button1_Click` method updates a number of property values on the ImportCatalogPart control.  \n  \n In the page's <xref:System.Web.UI.WebControls.WebParts.WebPartZone> control, the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls are declared. The `<aspSample:userinfowebpart>` control has an `exportmode=\"all\"` attribute on it. This attribute is required to enable users to export a description file for the control, which can then be imported by other users who wish to import the control using the description file.  \n  \n> [!NOTE]\n>  To enable users of a Web Parts application to export a description file for <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, you must also enable the export feature in the Web application by adding an `enableExport=\"true\"` attribute to the `<webParts>` element (which is a child of the `<system.web>` element) in the Web.config file. Export is disabled by default, so if you have not yet enabled export for your application, edit the Web.config file and do it now.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_227_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_227_2.aspx)]  \n  \n The third part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Notice that some properties on these controls are marked with the `WebBrowsable` attribute. This enables the <xref:System.Web.UI.WebControls.WebParts.PropertyGridEditorPart> control to dynamically generate the user interface (UI) for a user to edit those properties when the controls are in edit mode. The properties are also marked with a `WebDisplayName` attribute, to specify the text of the label that appears next to each control in the editing UI. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n The custom control called `TextDisplayWebPart` is referenced on the Web page with an `<aspSample:TextDisplayWebPart>` element. The other control, called `UserInfoWebPart`, is also declared on the Web page initially, though you will remove it later to demonstrate the ability to import a description file for a control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_227_3.cs)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_227_3.vb)]  \n  \n Now run the code example. Load the Web page in a browser. The first step is to edit the `UserInfoWebPart` control. Use the **Display Mode** drop-down list control and select **Edit** to switch the page to edit mode. Click the verbs menu of the `UserInfoWebPart` control (the downward arrow in the title bar), and then click **Edit**. When the editing UI appears, several editing controls appear below the `UserInfoWebPart` control that you can use to edit its field values. Edit some fields, click **OK**, and then use the **Display Mode** drop-down to return the page to browse mode.  \n  \n The second step is to export a .WebPart description file for the `UserInfoWebPart` control. Click the verbs menu on the custom control (represented by the downward arrow in the title bar), and click **Export**. Follow the instructions to save a .WebPart description file for the control. Now close the Web page, and edit the page source in an editor. Delete the `<aspSample:userinfowebpart>` control declaration element, then save and close the file. (You are doing this step to simulate a user who does not yet have the `UserInfoWebPart` control, so you can import the control to the page).  \n  \n Load the Web page again in a browser. The `UserInfoWebPart` control should not appear, because you removed it. Use the **Display Mode** drop-down list control and select **Catalog** to switch the page to catalog mode. In the ImportCatalogPart control, click the **Browse** button, and browse to the .WebPart file you created, then click the **Upload** button. A reference to the control should appear with a check box next to it. Select the check box, then click **Add** to add the control to the page.  \n  \n While you are in this view of the page, click the **Update ImportCatalogPart** button near the bottom of the page to see the effect of programmatically updating a number of property values on the ImportCatalogPart control. After clicking the button, observe how the various properties are changed in the UI.  \n  \n Finally, click **Close** to exit catalog mode and return the page to browse mode. The `UserInfoWebPart` control should now appear in the page, containing the values that it had when you exported it earlier."
  syntax:
    content: 'public sealed class ImportCatalogPart : System.Web.UI.WebControls.WebParts.CatalogPart'
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.WebControls.WebControl
  - System.Web.UI.WebControls.Panel
  - System.Web.UI.WebControls.WebParts.Part
  - System.Web.UI.WebControls.WebParts.CatalogPart
  implements: []
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientID
  - System.Web.UI.Control.ClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateControlCollection
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String)
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.Focus
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasControls
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.Control.Visible
  - System.Web.UI.WebControls.Panel.AddAttributesToRender(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.Panel.BackImageUrl
  - System.Web.UI.WebControls.Panel.CreateControlStyle
  - System.Web.UI.WebControls.Panel.Direction
  - System.Web.UI.WebControls.Panel.GroupingText
  - System.Web.UI.WebControls.Panel.HorizontalAlign
  - System.Web.UI.WebControls.Panel.RenderBeginTag(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.Panel.RenderEndTag(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.Panel.ScrollBars
  - System.Web.UI.WebControls.Panel.SupportsDisabledAttribute
  - System.Web.UI.WebControls.Panel.Wrap
  - System.Web.UI.WebControls.WebControl.AccessKey
  - System.Web.UI.WebControls.WebControl.ApplyStyle(System.Web.UI.WebControls.Style)
  - System.Web.UI.WebControls.WebControl.Attributes
  - System.Web.UI.WebControls.WebControl.BackColor
  - System.Web.UI.WebControls.WebControl.BorderColor
  - System.Web.UI.WebControls.WebControl.BorderStyle
  - System.Web.UI.WebControls.WebControl.BorderWidth
  - System.Web.UI.WebControls.WebControl.ControlStyle
  - System.Web.UI.WebControls.WebControl.ControlStyleCreated
  - System.Web.UI.WebControls.WebControl.CopyBaseAttributes(System.Web.UI.WebControls.WebControl)
  - System.Web.UI.WebControls.WebControl.CssClass
  - System.Web.UI.WebControls.WebControl.DisabledCssClass
  - System.Web.UI.WebControls.WebControl.Enabled
  - System.Web.UI.WebControls.WebControl.EnableTheming
  - System.Web.UI.WebControls.WebControl.Font
  - System.Web.UI.WebControls.WebControl.ForeColor
  - System.Web.UI.WebControls.WebControl.HasAttributes
  - System.Web.UI.WebControls.WebControl.Height
  - System.Web.UI.WebControls.WebControl.IsEnabled
  - System.Web.UI.WebControls.WebControl.LoadViewState(System.Object)
  - System.Web.UI.WebControls.WebControl.MergeStyle(System.Web.UI.WebControls.Style)
  - System.Web.UI.WebControls.WebControl.SaveViewState
  - System.Web.UI.WebControls.WebControl.SkinID
  - System.Web.UI.WebControls.WebControl.Style
  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#GetAttribute(System.String)
  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#SetAttribute(System.String,System.String)
  - System.Web.UI.WebControls.WebControl.TabIndex
  - System.Web.UI.WebControls.WebControl.TagKey
  - System.Web.UI.WebControls.WebControl.TagName
  - System.Web.UI.WebControls.WebControl.ToolTip
  - System.Web.UI.WebControls.WebControl.TrackViewState
  - System.Web.UI.WebControls.WebControl.Width
  - System.Web.UI.WebControls.WebParts.CatalogPart.DisplayTitle
  - System.Web.UI.WebControls.WebParts.CatalogPart.GetDesignModeState
  - System.Web.UI.WebControls.WebParts.CatalogPart.OnPreRender(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.CatalogPart.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.WebControls.WebParts.CatalogPart.WebPartManager
  - System.Web.UI.WebControls.WebParts.CatalogPart.Zone
  - System.Web.UI.WebControls.WebParts.Part.ChromeState
  - System.Web.UI.WebControls.WebParts.Part.ChromeType
  - System.Web.UI.WebControls.WebParts.Part.Controls
  - System.Web.UI.WebControls.WebParts.Part.DataBind
  - System.Web.UI.WebControls.WebParts.Part.Description
  - System.Web.UI.WebControls.WebParts.Part.System#Web#UI#WebControls#ICompositeControlDesignerAccessor#RecreateChildControls
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: ImportCatalogPart()
  nameWithType: ImportCatalogPart.ImportCatalogPart()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportCatalogPart()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.WebParts.ImportCatalogPart&quot;> </xref> 클래스입니다."
  remarks: "ImportCatalogPart 생성자는 기본; 에 선언 된 생성자가 없습니다는 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>클래스 및 따라서 특별 작업 수행 되는 클래스의 새 인스턴스를 만들 때.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> .NET Framework 클래스의 인스턴스를 만드는 생성자를 내부적으로 사용 합니다.       일반적으로 사용자 코드에서 프로그래밍 방식으로 ImportCatalogPart 생성자를 사용 해야 없습니다. 페이지 개발자가 디자인 타임에 선언적으로 페이지에 추가할 수는 컨트롤의 의도 한 사용 됩니다."
  syntax:
    content: public ImportCatalogPart ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
  id: BrowseHelpText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: BrowseHelpText
  nameWithType: ImportCatalogPart.BrowseHelpText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "사용자가을 찾아볼 설명 파일의 위치를 지정 하는 문자 메시지를 가져오거나 설정 합니다."
  remarks: 'BrowseHelpText 속성은 사용자 가장 먼저 가져온된 컨트롤을 추가 하 고 작업을 수행 해야에 대 한 간단한 개요: 경로 입력 하거나 파일을 탐색 하 여 설명 파일의 위치를 제공 합니다. 이 속성에 대 한 사용자 지정 값을 제공 하는 이유는을 설명 파일을 찾기 위해 이동 해야 하는 특정 네트워크 공유 등의 사용자에 대 한 특별 지침이 있는 경우.'
  example:
  - "The following code example demonstrates how to use the BrowseHelpText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the BrowseHelpText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_847_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_847_1.aspx)]  \n  \n In this section of code, the BrowseHelpText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_847_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_847_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the BrowseHelpText property."
  syntax:
    content: public string BrowseHelpText { get; set; }
    return:
      type: System.String
      description: "메시지의 텍스트를 포함 하는 문자열입니다. 기본값은.NET Framework에서 제공 하는 culture 별 메시지입니다."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls
  id: CreateChildControls
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: CreateChildControls()
  nameWithType: ImportCatalogPart.CreateChildControls()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void CreateChildControls ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
  id: DefaultButton
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: DefaultButton
  nameWithType: ImportCatalogPart.DefaultButton
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "사용자 인터페이스 (UI)에 단추 포커스를 받는 단추가 포함 된 폼에서 렌더링 되 면 기본 단추로 처리 됩니다 가져오거나 설정 합니다. 이 속성은 페이지 개발자 코드에서 호출할 수 없습니다."
  remarks: "이 속성에 대 한 코드에서 상속 되며, 기본 속성을 재정의 <xref:System.Web.UI.WebControls.Panel>클래스 디자이너에서 속성을 숨기고 테마 영향을 주지 않도록 방지 합니다.</xref:System.Web.UI.WebControls.Panel> Public 인 경우에이 웹 파트 컨트롤 집합이 컨트롤의 기본 렌더링을 위해 내부적으로 사용 됩니다 속성과 페이지 개발자가 사용할 수 없습니다.       테마 또는 스타일 시트 테마가이 속성을 설정할 수 없습니다. 자세한 내용은 참조 <xref:System.Web.UI.ThemeableAttribute>및 [ASP.NET 테마와 스킨](~/add/includes/ajax-current-ext-md.md).</xref:System.Web.UI.ThemeableAttribute>"
  syntax:
    content: public override string DefaultButton { get; set; }
    return:
      type: System.String
      description: "ID를 포함 하는 문자열은 <xref href=&quot;System.Web.UI.WebControls.Button&quot;> </xref> 에 기본 포커스를 받는 <xref href=&quot;System.Web.UI.WebControls.Panel&quot;> </xref> 제어 합니다."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions
  id: GetAvailableWebPartDescriptions
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: GetAvailableWebPartDescriptions()
  nameWithType: ImportCatalogPart.GetAvailableWebPartDescriptions()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "설명에서 사용 가능한 컬렉션을 반환 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 구조입니다."
  remarks: "GetAvailableWebPartDescriptions 메서드는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart>클래스</xref:System.Web.UI.WebControls.WebParts.CatalogPart> 에 선언 된 추상 기본 메서드에 대 한 구현을 제공 합니다. GetAvailableWebPartDescriptions 메서드 카탈로그의 각 컨트롤에 대 한 설명 정보를 반환합니다. 경우에 한 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>제어 하 고, 있을 수 있습니다 하나만 서버 컨트롤 카탈로그에 한 번에 있지만 컨트롤이 여러 개 있는 경우 메서드가 실행 됩니다.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>       <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>개체 <xref:System.Web.UI.WebControls.WebParts.WebPart>ID, 컨트롤과 <xref:System.Web.UI.WebControls.WebParts.Part>등 <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> <xref:System.Web.UI.WebControls.WebParts.Part.Description%2A>.</xref:System.Web.UI.WebControls.WebParts.Part.Description%2A> </xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> 클래스</xref:System.Web.UI.WebControls.WebParts.Part> 에서 상속 하는 몇 가지 중요 한 속성의 값에 대 한 개체 참조를 포함 하 여 컨트롤</xref:System.Web.UI.WebControls.WebParts.WebPart> 에 대 한 중요 한 정보를 포함 하는 개체는</xref:System.Web.UI.WebControls.WebParts.WebPartDescription>       GetAvailableWebPartDescriptions 메서드 성능이 향상 됩니다. 에 포함 된 제목, 설명, 아이콘 (있는 경우) 및 ID를 포함 하 여 각 컨트롤에 대 한 정보는 카탈로그를 만들 때 필요한 이 정보를 얻으려면 각 컨트롤의 인스턴스를 만드는 것이 아니라는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>카탈로그를 생성 하는 영역 GetAvailableWebPartDescriptions 메서드를 호출 하 고 호출만 컨트롤의 인스턴스가 아닌 컨트롤에 대 한 설명 정보를 반환 합니다.</xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>"
  example:
  - "The following code example demonstrates how to use the GetAvailableWebPartDescriptions method on a Web page. The example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control and an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, along with code that uses the GetAvailableWebPartDescriptions method.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n-   An explanation of how the example works when you load the page in a browser.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. You should place the following source code in a file and name it Displaymodemenucs.ascx or Displaymodemenuvb.ascx (depending on which language you are using). For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/csharp/cf979e6e-7b4d-460f-b044-_1.ascx)]\n [!code-vb[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/visualbasic/cf979e6e-7b4d-460f-b044-_1.ascx)]  \n  \n The second part of the code example is the Web page. At the top of the page are two `register` directives, one for the user control and one for the compiled component that contains the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Both of these controls are referenced declaratively in the markup of the page. On the declarative references to the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (both begin with an `aspSample` prefix), note that each has an `exportMode=\"all\"` attribute added to it. This attribute enables you to export a .WebPart description file for the control, which you will use in a later to step to import the control to a page.  \n  \n> [!NOTE]\n>  To enable users of a Web Parts application to export a description file for <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, you must also enable the export feature in the Web application by adding an `enableExport=\"true\"` attribute to the `<webParts>` element (which is a child of the `<system.web>` element) in the Web.config file. Export is disabled by default, so if you have not yet enabled export for your application, edit the Web.config file and do it now.  \n  \n The Web page also has a declarative reference to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, nested within the proper hierarchy of declarative elements. The GetAvailableWebPartDescriptions method is called within the code for the `Button1_Click` method.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/csharp/cf979e6e-7b4d-460f-b044-_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/visualbasic/cf979e6e-7b4d-460f-b044-_2.aspx)]  \n  \n The third part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/csharp/cf979e6e-7b4d-460f-b044-_3.cs)]\n [!code-vb[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/visualbasic/cf979e6e-7b4d-460f-b044-_3.vb)]  \n  \n Now run the code example. Load the Web page in a browser. The first step is export a .WebPart description file for each <xref:System.Web.UI.WebControls.WebParts.WebPart> control (for the `TextDisplayWebPart` and for the `UserInfoWebPart` control). For each control, click the verbs menu on the control (represented by the downward arrow in the title bar), and click **Export**. Follow the instructions to save a .WebPart description file for the control. After you have exported a description file for each control, close the Web page, and edit the page source in an editor. Delete the `<aspSample:userinfowebpart>` and the `<aspSample:textdisplaywebpart>` control declaration elements, then save and close the file. (You are doing this step to simulate a user who does not yet have these controls, so you can import the controls to the page).  \n  \n Load the Web page again in a browser. Use the **Display Mode** drop-down list control and select **Catalog** to switch the page to catalog mode. In the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, click the **Browse** button, browse to the .WebPart files you created, select one, then click the **Upload** button. A reference to the control should appear with a check box next to it. Select the check box, then click **Add** to add the control to the page. Repeat this process for the other control.  \n  \n While you are in this view of the page, click the **Get WebPart Description** button near the bottom of the page to see the effect of programmatically accessing the <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object for the control description currently loaded in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. The method used to access the description details, found in the `Button1_Click` method of the page source, is the GetAvailableWebPartDescriptions method. A label below the button displays basic details about the control.  \n  \n After adding the first control, repeat the process to add the second control to the page. Finally, click **Close** to exit catalog mode and return the page to browse mode. Both custom controls should now appear in the page, containing the values they had when you exported description files earlier."
  syntax:
    content: public override System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection GetAvailableWebPartDescriptions ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection&quot;> </xref> 를 포함 하는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDescription&quot;> </xref> 카탈로그의 각 컨트롤에 대 한 합니다."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)
  id: GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: GetWebPart(WebPartDescription)
  nameWithType: ImportCatalogPart.GetWebPart(WebPartDescription)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(WebPartDescription)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "에 대 한 참조를 반환 합니다.는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 메서드에 전달 된 설명의 값에 따라 제어 합니다."
  remarks: "GetWebPart 메서드 반환에 대 한 참조는 <xref:System.Web.UI.WebControls.WebParts.WebPart>설명 세부 정보가의 값과 일치 하는 컨트롤은 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>메서드에 전달 된 개체입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartDescription> </xref:System.Web.UI.WebControls.WebParts.WebPart> 와 함께이 메서드는 일반적으로 <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A>메서드를 카탈로그에 있는 컨트롤의 설명을 검색 하는 데 사용 됩니다.</xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A> 개별 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤을 검색 하거나 개별 전달 하 여 필요에 따라 조작한 다음 수 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>GetWebPart 메서드에 개체.</xref:System.Web.UI.WebControls.WebParts.WebPartDescription> </xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates how to use the GetWebPart method on a Web page. The example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control and an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, along with code that uses the GetWebPart method.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n-   An explanation of how the example works when you load the page in a browser.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. You should place the following source code in a file and name it Displaymodemenucs.ascx or Displaymodemenuvb.ascx (depending on which language you are using). For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/csharp/27bca851-c00e-4ece-b88f-_1.ascx)]\n [!code-vb[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/visualbasic/27bca851-c00e-4ece-b88f-_1.ascx)]  \n  \n The second part of the code example is the Web page. At the top of the page are two `register` directives, one for the user control and one for the compiled component that contains the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Both of these controls are referenced declaratively in the markup of the page. On the declarative references to the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (both begin with an `aspSample` prefix), note that each has an `exportMode=\"all\"` attribute added to it. This attribute enables you to export a .WebPart description file for the control, which you will use in a later to step to import the control to a page.  \n  \n> [!NOTE]\n>  To enable users of a Web Parts application to export a description file for <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, you must also enable the export feature in the Web application by adding an `enableExport=\"true\"` attribute to the `<webParts>` element (which is a child of the `<system.web>` element) in the Web.config file. Export is disabled by default, so if you have not yet enabled export for your application, edit the Web.config file and do it now.  \n  \n The Web page also has a declarative reference to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, nested within the proper hierarchy of declarative elements. The GetWebPart method is called within the code for the `Button2_Click` method.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/csharp/27bca851-c00e-4ece-b88f-_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/visualbasic/27bca851-c00e-4ece-b88f-_2.aspx)]  \n  \n The third part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/csharp/27bca851-c00e-4ece-b88f-_3.cs)]\n [!code-vb[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/visualbasic/27bca851-c00e-4ece-b88f-_3.vb)]  \n  \n Now run the code example. Load the Web page in a browser. The first step is export a .WebPart description file for each <xref:System.Web.UI.WebControls.WebParts.WebPart> control (for the `TextDisplayWebPart` and for the `UserInfoWebPart` control). For each control, click the verbs menu on the control (represented by the downward arrow in the title bar), and click **Export**. Follow the instructions to save a .WebPart description file for the control. After you have exported a description file for each control, close the Web page, and edit the page source in an editor. Delete the `<aspSample:userinfowebpart>` and the `<aspSample:textdisplaywebpart>` control declaration elements, then save and close the file. (You are doing this step to simulate a user who does not yet have these controls, so you can import the controls to the page).  \n  \n Load the Web page again in a browser. Use the **Display Mode** drop-down list control and select **Catalog** to switch the page to catalog mode. In the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, click the **Browse** button, browse to the .WebPart files you created, select one, then click the **Upload** button. A reference to the control should appear with a check box next to it. Now that the control description is uploaded to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, click the **Use GetWebPart** button near the bottom of the page. This will demonstrate the effect of calling the GetWebPart method and passing to it the control description currently loaded in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. Note that the associated server control is added immediately to the Web page, without the user having to click the **Add** button. The GetWebPart method, which is called in the `Button2_Click` method of the page source, returns the <xref:System.Web.UI.WebControls.WebParts.WebPart> control associated with the current description that is loaded in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. Next the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> method is called, and the <xref:System.Web.UI.WebControls.WebParts.WebPart> control is directly added to the page. This demonstrates how to add a control programmatically from the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control without user intervention.  \n  \n After adding the first control, repeat the process to add the second control to the page. Finally, click **Close** to exit catalog mode and return the page to browse mode. Both custom controls should now appear in the page, containing the values they had when you exported description files earlier."
  syntax:
    content: public override System.Web.UI.WebControls.WebParts.WebPart GetWebPart (System.Web.UI.WebControls.WebParts.WebPartDescription description);
    parameters:
    - id: description
      type: System.Web.UI.WebControls.WebParts.WebPartDescription
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDescription&quot;> </xref> 컨트롤에 대 한 정보가 포함 된 합니다."
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 설명이의 값과 일치 하는 컨트롤 <code> description </code>합니다."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>description</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>description</code>사용할 수 없으면 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDescription&quot;> </xref> 값입니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
  id: ImportedPartLabelText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: ImportedPartLabelText
  nameWithType: ImportCatalogPart.ImportedPartLabelText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "설명 파일 카탈로그를 가져온된 컨트롤 내에 있는 컨트롤을 나타내거나을 가져온 후 표시 되는 텍스트를 가져오거나 설정 합니다."
  remarks: "ImportedPartLabelText 속성에 포함 된 컨트롤을 설명 하는 일반, 짧은 레이블을 포함 하는 데 사용 일반적으로 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>"
  example:
  - "The following code example demonstrates how to use the ImportedPartLabelText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the ImportedPartLabelText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_718_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_718_1.aspx)]  \n  \n In this section of code, the ImportedPartLabelText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_718_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_718_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the ImportedPartLabelText property."
  syntax:
    content: public string ImportedPartLabelText { get; set; }
    return:
      type: System.String
      description: "레이블 텍스트를 포함 하는 문자열입니다. 기본값은.NET Framework에서 제공 하는 culture 별 메시지입니다."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)
  id: LoadControlState(System.Object)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: LoadControlState(Object)
  nameWithType: ImportCatalogPart.LoadControlState(Object)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void LoadControlState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "추가할 수 있습니다."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: ImportCatalogPart.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "추가할 수 있습니다."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
  id: PartImportErrorLabelText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: PartImportErrorLabelText
  nameWithType: ImportCatalogPart.PartImportErrorLabelText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "가져오기 프로세스 중에 오류가 발생 하는 경우 표시 되는 오류 메시지를 가져오거나 설정 합니다."
  remarks: "PartImportErrorLabelText 속성은 일부 문제 또는 오류 페이지 설명 파일을 가져오려고 시도 하는 동안 발생 하는 경우 사용자에 게 알리는 데 유용 합니다."
  example:
  - "The following code example demonstrates how to use the PartImportErrorLabelText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the PartImportErrorLabelText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1241_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1241_1.aspx)]  \n  \n In this section of code, the PartImportErrorLabelText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1241_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1241_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the PartImportErrorLabelText property."
  syntax:
    content: public string PartImportErrorLabelText { get; set; }
    return:
      type: System.String
      description: "레이블 텍스트를 포함 하는 문자열입니다. 기본값은.NET Framework에서 제공 하는 culture 별 메시지입니다."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)
  id: Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: Render(HtmlTextWriter)
  nameWithType: ImportCatalogPart.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void Render (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "추가할 수 있습니다."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)
  id: RenderContents(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: RenderContents(HtmlTextWriter)
  nameWithType: ImportCatalogPart.RenderContents(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "추가할 수 있습니다."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState
  id: SaveControlState
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: SaveControlState()
  nameWithType: ImportCatalogPart.SaveControlState()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override object SaveControlState ();
    parameters: []
    return:
      type: System.Object
      description: "추가할 수 있습니다."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
  id: Title
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: Title
  nameWithType: ImportCatalogPart.Title
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "제목 표시줄에 나타나는 제목을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.WebParts.ImportCatalogPart&quot;> </xref> 제어 합니다."
  remarks: "Title 속성 값의 제목 표시줄에 표시 됩니다는 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>카탈로그 모드에서 표시 된 경우를 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 페이지에 컨트롤을 선언한 때 사용 하 여 속성에 대 한 값을 설정할 수 있습니다는 `Title` 특성입니다. 제목에 대 한 값을 지정 하지 않는 경우 culture 별 기본 값이이 컨트롤에서 사용자가을 편집할 수 있는 속성의 종류를 설명 하기 위해 사용 됩니다."
  example:
  - "The following code example demonstrates how to use the Title property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the Title property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_135_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_135_1.aspx)]  \n  \n In this section of code, the Title property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_135_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_135_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the Title property."
  syntax:
    content: public override string Title { get; set; }
    return:
      type: System.String
      description: "컨트롤의 제목으로 사용 되는 문자열입니다. 기본값은 웹 파트 컨트롤 집합에서 제공 하는 계산 된 컨트롤 이름입니다."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
  id: UploadButtonText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: UploadButtonText
  nameWithType: ImportCatalogPart.UploadButtonText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "에 대 한 텍스트를 가져오거나 설정 합니다.는 <xref href=&quot;System.Web.UI.WebControls.Button&quot;> </xref> 설명 파일 업로드를 시작 하는 합니다."
  remarks: "UploadButtonText 속성 제공에 대 한 텍스트는 <xref:System.Web.UI.WebControls.Button>업로드 프로세스를 시작 하는.</xref:System.Web.UI.WebControls.Button> 이 속성 또는에 사용자 지정 텍스트를 할당 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>속성 텍스트 지우기 사용자 설명 파일 업로드 하 고 있는지 확인 해야 합니다.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> 텍스트 하지 말 하거나 업로드 프로세스 컨트롤 자체을 업로드 하 고 실제로 의미 해야 합니다."
  example:
  - "The following code example demonstrates how to use the UploadButtonText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the UploadButtonText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_939_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_939_1.aspx)]  \n  \n In this section of code, the UploadButtonText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_939_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_939_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the UploadButtonText property."
  syntax:
    content: public string UploadButtonText { get; set; }
    return:
      type: System.String
      description: "에 대 한 텍스트로 사용 되는 문자열을 <xref href=&quot;System.Web.UI.WebControls.Button&quot;> </xref>합니다. 기본값은 웹 파트 컨트롤 집합에서 제공 하는 문화권 관련 문자열입니다."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
  id: UploadHelpText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: UploadHelpText
  nameWithType: ImportCatalogPart.UploadHelpText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "사용자 설명 파일을 업로드 하는 방법을 알려 주는 메시지의 텍스트를 가져오거나 설정 합니다."
  remarks: "UploadHelpText 속성에는 간략 한 문장이 나 구를 인하 설명 파일을 업로드 하는 단추를 클릭 하 여 사용자에 대 한 지침을 제공 합니다. 이 속성 또는에 사용자 지정 텍스트를 할당 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>속성 텍스트 지우기 사용자 설명 파일 업로드 하 고 있는지 확인 해야 합니다.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> 텍스트 하지 말 하거나 업로드 프로세스 컨트롤 자체을 업로드 하 고 실제로 의미 해야 합니다."
  example:
  - "The following code example demonstrates how to use the UploadHelpText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the UploadHelpText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1_1.aspx)]  \n  \n In this section of code, the UploadHelpText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the UploadHelpText property."
  syntax:
    content: public string UploadHelpText { get; set; }
    return:
      type: System.String
      description: "설명 파일을 업로드 하는 사용자에 대 한 지침으로 사용 되는 문자열입니다. 기본값은 웹 파트 컨트롤 집합에서 제공 하는 문화권 관련 문자열입니다."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.CatalogPart
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.CatalogPart
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: ImportCatalogPart()
  nameWithType: ImportCatalogPart.ImportCatalogPart()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportCatalogPart()
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: BrowseHelpText
  nameWithType: ImportCatalogPart.BrowseHelpText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: CreateChildControls()
  nameWithType: ImportCatalogPart.CreateChildControls()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls()
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: DefaultButton
  nameWithType: ImportCatalogPart.DefaultButton
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: GetAvailableWebPartDescriptions()
  nameWithType: ImportCatalogPart.GetAvailableWebPartDescriptions()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions()
- uid: System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDescriptionCollection
  nameWithType: WebPartDescriptionCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: GetWebPart(WebPartDescription)
  nameWithType: ImportCatalogPart.GetWebPart(WebPartDescription)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(WebPartDescription)
- uid: System.Web.UI.WebControls.WebParts.WebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPart
  nameWithType: WebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartDescription
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDescription
  nameWithType: WebPartDescription
  fullName: System.Web.UI.WebControls.WebParts.WebPartDescription
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: ImportedPartLabelText
  nameWithType: ImportCatalogPart.ImportedPartLabelText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: LoadControlState(Object)
  nameWithType: ImportCatalogPart.LoadControlState(Object)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: ImportCatalogPart.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: PartImportErrorLabelText
  nameWithType: ImportCatalogPart.PartImportErrorLabelText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: Render(HtmlTextWriter)
  nameWithType: ImportCatalogPart.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(HtmlTextWriter)
- uid: System.Web.UI.HtmlTextWriter
  parent: System.Web.UI
  isExternal: false
  name: HtmlTextWriter
  nameWithType: HtmlTextWriter
  fullName: System.Web.UI.HtmlTextWriter
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: RenderContents(HtmlTextWriter)
  nameWithType: ImportCatalogPart.RenderContents(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(HtmlTextWriter)
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: SaveControlState()
  nameWithType: ImportCatalogPart.SaveControlState()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState()
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: Title
  nameWithType: ImportCatalogPart.Title
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: UploadButtonText
  nameWithType: ImportCatalogPart.UploadButtonText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: UploadHelpText
  nameWithType: ImportCatalogPart.UploadHelpText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: ImportCatalogPart
  nameWithType: ImportCatalogPart.ImportCatalogPart
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: BrowseHelpText
  nameWithType: ImportCatalogPart.BrowseHelpText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: CreateChildControls
  nameWithType: ImportCatalogPart.CreateChildControls
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: DefaultButton
  nameWithType: ImportCatalogPart.DefaultButton
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: GetAvailableWebPartDescriptions
  nameWithType: ImportCatalogPart.GetAvailableWebPartDescriptions
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: GetWebPart
  nameWithType: ImportCatalogPart.GetWebPart
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: ImportedPartLabelText
  nameWithType: ImportCatalogPart.ImportedPartLabelText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: LoadControlState
  nameWithType: ImportCatalogPart.LoadControlState
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: OnInit
  nameWithType: ImportCatalogPart.OnInit
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: PartImportErrorLabelText
  nameWithType: ImportCatalogPart.PartImportErrorLabelText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: Render
  nameWithType: ImportCatalogPart.Render
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: RenderContents
  nameWithType: ImportCatalogPart.RenderContents
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: SaveControlState
  nameWithType: ImportCatalogPart.SaveControlState
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: Title
  nameWithType: ImportCatalogPart.Title
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: UploadButtonText
  nameWithType: ImportCatalogPart.UploadButtonText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: UploadHelpText
  nameWithType: ImportCatalogPart.UploadHelpText
