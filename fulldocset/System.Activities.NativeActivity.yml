### YamlMime:ManagedReference
items:
- uid: System.Activities.NativeActivity
  id: NativeActivity
  children:
  - System.Activities.NativeActivity.#ctor
  - System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)
  - System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)
  - System.Activities.NativeActivity.CacheMetadata(System.Activities.NativeActivityMetadata)
  - System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)
  - System.Activities.NativeActivity.CanInduceIdle
  - System.Activities.NativeActivity.Execute(System.Activities.NativeActivityContext)
  - System.Activities.NativeActivity.Implementation
  - System.Activities.NativeActivity.ImplementationVersion
  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)
  - System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)
  langs:
  - csharp
  name: NativeActivity
  nameWithType: NativeActivity
  fullName: System.Activities.NativeActivity
  type: Class
  summary: "사용 하 여 실행 논리를 구현 하는 사용자 지정 활동의 추상 기본 클래스로 <xref:System.Activities.NativeActivity.Execute*>메서드는 런타임 기능에 대 한 모든 권한이 있는.</xref:System.Activities.NativeActivity.Execute*>"
  remarks: ''
  example:
  - "The following code sample demonstrates creating a class that inherits from <xref:System.Activities.NativeActivity%601>. This example is from the [Custom Composite using Native Activity](~/add/includes/ajax-current-ext-md.md) sample.  \n  \n```  \npublic sealed class MySequence : NativeActivity  \n{  \n    Collection<Activity> children;  \n    Collection<Variable> variables;  \n    Variable<int> currentIndex;  \n    CompletionCallback onChildComplete;  \n  \n    public MySequence()  \n        : base()  \n    {  \n        this.children = new Collection<Activity>();  \n        this.variables = new Collection<Variable>();  \n        this.currentIndex = new Variable<int>();  \n    }  \n  \n    public Collection<Activity> Activities  \n    {  \n        get  \n        {  \n            return this.children;  \n        }  \n    }  \n    public Collection<Variable> Variables  \n    {  \n        get  \n        {  \n            return this.variables;  \n        }  \n    }  \n    protected override void CacheMetadata(NativeActivityMetadata metadata)  \n    {  \n        //call base.CacheMetadata to add the Activities and Variables to this activity's metadata  \n        base.CacheMetadata(metadata);  \n        //add the private implementation variable: currentIndex   \n        metadata.AddImplementationVariable(this.currentIndex);  \n    }                     \n  \n    protected override void Execute(NativeActivityContext context)  \n    {  \n        InternalExecute(context, null);  \n    }  \n    void InternalExecute(NativeActivityContext context, ActivityInstance instance)  \n    {  \n        //grab the index of the current Activity  \n        int currentActivityIndex = this.currentIndex.Get(context);  \n        if (currentActivityIndex == Activities.Count)  \n        {  \n            //if the currentActivityIndex is equal to the count of MySequence's Activities  \n            //MySequence is complete  \n            return;  \n        }  \n  \n        if (this.onChildComplete == null)  \n        {  \n            //on completion of the current child, have the runtime call back on this method  \n            this.onChildComplete = new CompletionCallback(InternalExecute);  \n        }  \n        //grab the next Activity in MySequence.Activities and schedule it  \n        Activity nextChild = Activities[currentActivityIndex];  \n        context.ScheduleActivity(nextChild, this.onChildComplete);  \n  \n        //increment the currentIndex  \n        this.currentIndex.Set(context, ++currentActivityIndex);  \n    }  \n}  \n```"
  syntax:
    content: 'public abstract class NativeActivity : System.Activities.Activity'
  inheritance:
  - System.Object
  - System.Activities.Activity
  implements: []
  inheritedMembers:
  - System.Activities.Activity.CacheId
  - System.Activities.Activity.Constraints
  - System.Activities.Activity.DisplayName
  - System.Activities.Activity.Id
  - System.Activities.Activity.ShouldSerializeDisplayName
  - System.Activities.Activity.ToString
  platform:
  - net462
- uid: System.Activities.NativeActivity.#ctor
  id: '#ctor'
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: NativeActivity()
  nameWithType: NativeActivity.NativeActivity()
  fullName: System.Activities.NativeActivity.NativeActivity()
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "파생된 클래스에서 구현 된 경우 파생된 클래스의 새 인스턴스를 만듭니다."
  remarks: ''
  example:
  - "The following code sample demonstrates creating a class that inherits from <xref:System.Activities.NativeActivity%601>. This example is from the [Custom Composite using Native Activity](~/add/includes/ajax-current-ext-md.md) sample.  \n  \n [!code-cs[wfs_CustomCompositeNativeActivity#1](~/add/codesnippet/csharp/wfs_customcompositenativeactivity.workflow/mysequence.cs#1)]"
  syntax:
    content: protected NativeActivity ();
    parameters: []
  overload: System.Activities.NativeActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)
  id: Abort(System.Activities.NativeActivityAbortContext)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: Abort(NativeActivityAbortContext)
  nameWithType: NativeActivity.Abort(NativeActivityAbortContext)
  fullName: System.Activities.NativeActivity.Abort(NativeActivityAbortContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "파생된 클래스에서 구현 된 경우 중단 중인 활동에 대 한 응답으로 동작을 수행 합니다."
  syntax:
    content: protected virtual void Abort (System.Activities.NativeActivityAbortContext context);
    parameters:
    - id: context
      type: System.Activities.NativeActivityAbortContext
      description: "활동이 실행 되는 실행 컨텍스트."
  overload: System.Activities.NativeActivity.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)
  id: CacheMetadata(System.Activities.ActivityMetadata)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: CacheMetadata(ActivityMetadata)
  nameWithType: NativeActivity.CacheMetadata(ActivityMetadata)
  fullName: System.Activities.NativeActivity.CacheMetadata(ActivityMetadata)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "구현되지 않았습니다. 사용 하 여 <xref:System.Activities.NativeActivity.CacheMetadata*>메서드 대신.</xref:System.Activities.NativeActivity.CacheMetadata*>"
  remarks: "사용자 지정 활동 작성자는 활동의 유효성 검사 논리를 제공할 수 <xref:System.Activities.NativeActivity.CacheMetadata%2A>재정의.</xref:System.Activities.NativeActivity.CacheMetadata%2A> throw 되는 모든 예외는 <xref:System.Activities.NativeActivity.CacheMetadata%2A>유효성 검사 오류로 처리 되지 않습니다.</xref:System.Activities.NativeActivity.CacheMetadata%2A> 이러한 예외에 대 한 호출에서 이스케이프 되며 <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A>호출자가 처리 해야 합니다.</xref:System.Activities.Validation.ActivityValidationServices.Validate%2A>"
  syntax:
    content: protected override sealed void CacheMetadata (System.Activities.ActivityMetadata metadata);
    parameters:
    - id: metadata
      type: System.Activities.ActivityMetadata
      description: "구현되지 않았습니다."
  overload: System.Activities.NativeActivity.CacheMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.CacheMetadata(System.Activities.NativeActivityMetadata)
  id: CacheMetadata(System.Activities.NativeActivityMetadata)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: CacheMetadata(NativeActivityMetadata)
  nameWithType: NativeActivity.CacheMetadata(NativeActivityMetadata)
  fullName: System.Activities.NativeActivity.CacheMetadata(NativeActivityMetadata)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "페이지를 만들고 활동의 인수, 변수, 자식 활동 및 활동 대리자에 대 한 설명을 유효성을 검사 합니다."
  remarks: "워크플로 런타임에서 CacheMetadata의 기본 구현은 사용 하 여 워크플로 런타임 관계 및 수명 규칙을 관리할도 올바른 생성을 보장 합니다. CacheMetadata의 기본 구현은 형식의 <xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor> 를 사용 하 여 활동 형식의 공용 멤버를 검사 합니다. 이러한 공용 멤버는 형식의 <xref:System.Activities.Argument>, <xref:System.Activities.Variable>, [T:System.Collections.Generic.IEnumerable\\<T:System.Activities.Variable >](~/add/includes/ajax-current-ext-md.md), <xref:System.Activities.Activity>, [T:System.Collections.Generic.IEnumerable\\<T:System.Activities.Activity >](~/add/includes/ajax-current-ext-md.md), 또는 <xref:System.Activities.ActivityDelegate>.</xref:System.Activities.ActivityDelegate> </xref:System.Activities.Activity> </xref:System.Activities.Variable> </xref:System.Activities.Argument> 활동의 런타임 설명 작성을 사용자 지정 하 고 사용자 지정 유효성 검사 논리를 제공 하도록이 메서드를 재정의할 수 있습니다. CacheMetadata에서 throw 되는 모든 예외는 유효성 검사 오류로 처리 되지 됩니다. 이러한 예외에 대 한 호출에서 이스케이프 되며 <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A>호출자가 처리 해야 합니다.</xref:System.Activities.Validation.ActivityValidationServices.Validate%2A>"
  example:
  - "The following code sample demonstrates using CacheMetadata in a class that inherits from <xref:System.Activities.NativeActivity%601>. This example is from the [Custom Composite using Native Activity](~/add/includes/ajax-current-ext-md.md) sample.  \n  \n [!code-cs[wfs_CustomCompositeNativeActivity#2](~/add/codesnippet/csharp/wfs_customcompositenativeactivity.workflow/mysequence.cs#2)]"
  syntax:
    content: protected virtual void CacheMetadata (System.Activities.NativeActivityMetadata metadata);
    parameters:
    - id: metadata
      type: System.Activities.NativeActivityMetadata
      description: "활동의 인수, 변수, 자식 활동 및 활동 대리자를 캡슐화 하는 활동의 메타 데이터입니다."
  overload: System.Activities.NativeActivity.CacheMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)
  id: Cancel(System.Activities.NativeActivityContext)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: Cancel(NativeActivityContext)
  nameWithType: NativeActivity.Cancel(NativeActivityContext)
  fullName: System.Activities.NativeActivity.Cancel(NativeActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "파생된 클래스에서 구현 된 경우 활동의 정상적인 조기에 완료 하도록 논리를 실행 합니다."
  remarks: ''
  example:
  - "The following code sample demonstrates using Cancel in a class that inherits from <xref:System.Activities.NativeActivity%601>. This example is from the [Non-Generic ParallelForEach](~/add/includes/ajax-current-ext-md.md) sample.  \n  \n [!code-cs[wfs_NonGenericParallelForEach#2](~/add/codesnippet/csharp/nongenericparallelforeach/parallelforeach.cs#2)]"
  syntax:
    content: protected virtual void Cancel (System.Activities.NativeActivityContext context);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "활동이 실행 되는 실행 컨텍스트."
  overload: System.Activities.NativeActivity.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.CanInduceIdle
  id: CanInduceIdle
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: CanInduceIdle
  nameWithType: NativeActivity.CanInduceIdle
  fullName: System.Activities.NativeActivity.CanInduceIdle
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "활동 워크플로가 유휴 상태가 되도록 될 수 있는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  syntax:
    content: protected virtual bool CanInduceIdle { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>활동은 워크플로가 유휴 상태가 되도록 발생할 수 있습니다 하는 경우. 이 값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 기본적으로 합니다."
  overload: System.Activities.NativeActivity.CanInduceIdle*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.Execute(System.Activities.NativeActivityContext)
  id: Execute(System.Activities.NativeActivityContext)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: Execute(NativeActivityContext)
  nameWithType: NativeActivity.Execute(NativeActivityContext)
  fullName: System.Activities.NativeActivity.Execute(NativeActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "파생된 클래스에서 구현 된 경우 활동의 실행 논리를 실행 합니다."
  remarks: ''
  example:
  - "The following code sample demonstrates using Cancel in a class that inherits from <xref:System.Activities.NativeActivity%601>. This example is from the [Non-Generic ParallelForEach](~/add/includes/ajax-current-ext-md.md) sample.  \n  \n [!code-cs[wfs_NonGenericParallelForEach#2](~/add/codesnippet/csharp/nongenericparallelforeach/parallelforeach.cs#2)]"
  syntax:
    content: protected abstract void Execute (System.Activities.NativeActivityContext context);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "활동이 실행 되는 실행 컨텍스트."
  overload: System.Activities.NativeActivity.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.Implementation
  id: Implementation
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: Implementation
  nameWithType: NativeActivity.Implementation
  fullName: System.Activities.NativeActivity.Implementation
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "활동의 실행 논리입니다."
  syntax:
    content: protected override sealed Func<System.Activities.Activity> Implementation { get; set; }
    return:
      type: System.Func{System.Activities.Activity}
      description: "실행 논리입니다."
  overload: System.Activities.NativeActivity.Implementation*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.ImplementationVersion
  id: ImplementationVersion
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: ImplementationVersion
  nameWithType: NativeActivity.ImplementationVersion
  fullName: System.Activities.NativeActivity.ImplementationVersion
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "활동의 구현은 버전을 가져오거나 설정 합니다."
  syntax:
    content: protected override sealed Version ImplementationVersion { get; set; }
    return:
      type: System.Version
      description: "활동의 구현 버전입니다."
  overload: System.Activities.NativeActivity.ImplementationVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  id: OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  nameWithType: NativeActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  fullName: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "동적 업데이트에 대 한 맵을 만들 때 이벤트를 발생 시킵니다."
  syntax:
    content: protected virtual void OnCreateDynamicUpdateMap (System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata metadata, System.Activities.Activity originalActivity);
    parameters:
    - id: metadata
      type: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata
      description: "메타 데이터입니다."
    - id: originalActivity
      type: System.Activities.Activity
      description: "원래 작업입니다."
  overload: System.Activities.NativeActivity.OnCreateDynamicUpdateMap*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)
  id: OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: OnCreateDynamicUpdateMap(UpdateMapMetadata,Activity)
  nameWithType: NativeActivity.OnCreateDynamicUpdateMap(UpdateMapMetadata,Activity)
  fullName: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(UpdateMapMetadata,Activity)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "동적 업데이트에 대 한 맵을 만들 때 이벤트를 발생 시킵니다."
  syntax:
    content: protected override sealed void OnCreateDynamicUpdateMap (System.Activities.DynamicUpdate.UpdateMapMetadata metadata, System.Activities.Activity originalActivity);
    parameters:
    - id: metadata
      type: System.Activities.DynamicUpdate.UpdateMapMetadata
      description: "메타 데이터입니다."
    - id: originalActivity
      type: System.Activities.Activity
      description: "원래 작업입니다."
  overload: System.Activities.NativeActivity.OnCreateDynamicUpdateMap*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)
  id: UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: UpdateInstance(NativeActivityUpdateContext)
  nameWithType: NativeActivity.UpdateInstance(NativeActivityUpdateContext)
  fullName: System.Activities.NativeActivity.UpdateInstance(NativeActivityUpdateContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "인스턴스를 업데이트 <xref href=&quot;System.Activities.NativeActivity&quot;> </xref>합니다."
  syntax:
    content: protected virtual void UpdateInstance (System.Activities.DynamicUpdate.NativeActivityUpdateContext updateContext);
    parameters:
    - id: updateContext
      type: System.Activities.DynamicUpdate.NativeActivityUpdateContext
      description: "업데이트 컨텍스트입니다."
  overload: System.Activities.NativeActivity.UpdateInstance*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Activities.Activity
  isExternal: false
  name: System.Activities.Activity
- uid: System.Activities.NativeActivity.#ctor
  parent: System.Activities.NativeActivity
  isExternal: false
  name: NativeActivity()
  nameWithType: NativeActivity.NativeActivity()
  fullName: System.Activities.NativeActivity.NativeActivity()
- uid: System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Abort(NativeActivityAbortContext)
  nameWithType: NativeActivity.Abort(NativeActivityAbortContext)
  fullName: System.Activities.NativeActivity.Abort(NativeActivityAbortContext)
- uid: System.Activities.NativeActivityAbortContext
  parent: System.Activities
  isExternal: false
  name: NativeActivityAbortContext
  nameWithType: NativeActivityAbortContext
  fullName: System.Activities.NativeActivityAbortContext
- uid: System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: CacheMetadata(ActivityMetadata)
  nameWithType: NativeActivity.CacheMetadata(ActivityMetadata)
  fullName: System.Activities.NativeActivity.CacheMetadata(ActivityMetadata)
- uid: System.Activities.ActivityMetadata
  parent: System.Activities
  isExternal: false
  name: ActivityMetadata
  nameWithType: ActivityMetadata
  fullName: System.Activities.ActivityMetadata
- uid: System.Activities.NativeActivity.CacheMetadata(System.Activities.NativeActivityMetadata)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: CacheMetadata(NativeActivityMetadata)
  nameWithType: NativeActivity.CacheMetadata(NativeActivityMetadata)
  fullName: System.Activities.NativeActivity.CacheMetadata(NativeActivityMetadata)
- uid: System.Activities.NativeActivityMetadata
  parent: System.Activities
  isExternal: false
  name: NativeActivityMetadata
  nameWithType: NativeActivityMetadata
  fullName: System.Activities.NativeActivityMetadata
- uid: System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Cancel(NativeActivityContext)
  nameWithType: NativeActivity.Cancel(NativeActivityContext)
  fullName: System.Activities.NativeActivity.Cancel(NativeActivityContext)
- uid: System.Activities.NativeActivityContext
  parent: System.Activities
  isExternal: false
  name: NativeActivityContext
  nameWithType: NativeActivityContext
  fullName: System.Activities.NativeActivityContext
- uid: System.Activities.NativeActivity.CanInduceIdle
  parent: System.Activities.NativeActivity
  isExternal: false
  name: CanInduceIdle
  nameWithType: NativeActivity.CanInduceIdle
  fullName: System.Activities.NativeActivity.CanInduceIdle
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Activities.NativeActivity.Execute(System.Activities.NativeActivityContext)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Execute(NativeActivityContext)
  nameWithType: NativeActivity.Execute(NativeActivityContext)
  fullName: System.Activities.NativeActivity.Execute(NativeActivityContext)
- uid: System.Activities.NativeActivity.Implementation
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Implementation
  nameWithType: NativeActivity.Implementation
  fullName: System.Activities.NativeActivity.Implementation
- uid: System.Func{System.Activities.Activity}
  parent: System
  isExternal: true
  name: Func<Activity>
  nameWithType: Func<Activity>
  fullName: System.Func<System.Activities.Activity>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<System.Activities.Activity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.Activity
    name: Activity
    nameWithType: Activity
    fullName: Activity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.NativeActivity.ImplementationVersion
  parent: System.Activities.NativeActivity
  isExternal: false
  name: ImplementationVersion
  nameWithType: NativeActivity.ImplementationVersion
  fullName: System.Activities.NativeActivity.ImplementationVersion
- uid: System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  nameWithType: NativeActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  fullName: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
- uid: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata
  parent: System.Activities.DynamicUpdate
  isExternal: false
  name: NativeActivityUpdateMapMetadata
  nameWithType: NativeActivityUpdateMapMetadata
  fullName: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata
- uid: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: OnCreateDynamicUpdateMap(UpdateMapMetadata,Activity)
  nameWithType: NativeActivity.OnCreateDynamicUpdateMap(UpdateMapMetadata,Activity)
  fullName: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(UpdateMapMetadata,Activity)
- uid: System.Activities.DynamicUpdate.UpdateMapMetadata
  parent: System.Activities.DynamicUpdate
  isExternal: false
  name: UpdateMapMetadata
  nameWithType: UpdateMapMetadata
  fullName: System.Activities.DynamicUpdate.UpdateMapMetadata
- uid: System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: UpdateInstance(NativeActivityUpdateContext)
  nameWithType: NativeActivity.UpdateInstance(NativeActivityUpdateContext)
  fullName: System.Activities.NativeActivity.UpdateInstance(NativeActivityUpdateContext)
- uid: System.Activities.DynamicUpdate.NativeActivityUpdateContext
  parent: System.Activities.DynamicUpdate
  isExternal: false
  name: NativeActivityUpdateContext
  nameWithType: NativeActivityUpdateContext
  fullName: System.Activities.DynamicUpdate.NativeActivityUpdateContext
- uid: System.Activities.NativeActivity.#ctor*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: NativeActivity
  nameWithType: NativeActivity.NativeActivity
- uid: System.Activities.NativeActivity.Abort*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Abort
  nameWithType: NativeActivity.Abort
- uid: System.Activities.NativeActivity.CacheMetadata*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: CacheMetadata
  nameWithType: NativeActivity.CacheMetadata
- uid: System.Activities.NativeActivity.Cancel*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Cancel
  nameWithType: NativeActivity.Cancel
- uid: System.Activities.NativeActivity.CanInduceIdle*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: CanInduceIdle
  nameWithType: NativeActivity.CanInduceIdle
- uid: System.Activities.NativeActivity.Execute*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Execute
  nameWithType: NativeActivity.Execute
- uid: System.Activities.NativeActivity.Implementation*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Implementation
  nameWithType: NativeActivity.Implementation
- uid: System.Activities.NativeActivity.ImplementationVersion*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: ImplementationVersion
  nameWithType: NativeActivity.ImplementationVersion
- uid: System.Activities.NativeActivity.OnCreateDynamicUpdateMap*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: OnCreateDynamicUpdateMap
  nameWithType: NativeActivity.OnCreateDynamicUpdateMap
- uid: System.Activities.NativeActivity.UpdateInstance*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: UpdateInstance
  nameWithType: NativeActivity.UpdateInstance
