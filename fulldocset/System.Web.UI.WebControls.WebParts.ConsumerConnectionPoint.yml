### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  type: Class
  summary: "소비자는 공급자와의 연결을 구성 하기 위해 역할을 하는 서버 컨트롤 수 있도록 하는 연결 지점 개체를 정의 합니다."
  remarks: "두 개의 서버 컨트롤 간의 모든 웹 파트 연결에서 각 컨트롤은 다른 컨트롤에 연결 하 고 제공 하거나 공급자 또는 소비자 연결에 대 한 컨트롤 지정 된 여부에 따라 데이터를 사용할 수 있도록 하는 관련 된 연결 지점 개체 (다른 요구 사항) 간에 있어야 합니다. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>개체 일반적 공유할 수 있는 데이터의 형식과 다른 컨트롤에 컨트롤 연결 방법에 대 한 세부 정보를 포함 합니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 연결에서 소비자 역할을 하는 컨트롤의 경우 연결 지점은 ConsumerConnectionPoint 개체 이어야 합니다. 웹 파트 연결 및 연결 지점에 대 한 자세한 내용은 아래 참고 항목 섹션에 나열 된 항목을 참조 하세요.       몇 가지 단계는 필요 ConsumerConnectionPoint 개체를 만들려면: 1입니다.  인터페이스 인스턴스를 참조 하는 소비자 컨트롤을 사용 하도록 설정 합니다. A <xref:System.Web.UI.WebControls.WebParts.WebPart>또는 기타 서버 컨트롤 (모든 형식의 서버 컨트롤에 추가 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>영역을 사용할 수 있습니다) 데이터는 특정 인터페이스 인스턴스를 사용할 수 있어야 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤; 인터페이스를 구현 하지 필요 공급자를 구현 해야 합니다. 소비자는 공급자가 제공 하 고 정확한 인터페이스 형식과 하거나 사용할 수 또는 존재 하지 않는 한 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>소비자가 인식할 수 있는 형식에 데이터 공급자의 인터페이스 형식에서 변환할 개체를 사용할 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 소비자를 사용 하도록 설정 하려면 원하는 인터페이스 형식에 대 한 참조를 포함 하도록 전용 필드를 선언 하는 일반적인 방법은입니다.      2.  콜백 메서드를 식별 합니다. 소비자의 메서드는 공급자와 연결할 콜백 메서드로 식별 되어야 합니다. 이 메서드는 공급자 구현 및 할당 (예) private 필드에 단계에서 만든 첫 번째 인터페이스의 인스턴스를 검색 합니다. 소비자의 콜백 메서드를 식별 하는 데 웹 파트 방법은 추가 하는 `ConnectionConsumer` 메타 데이터 특성 (정의한는 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>클래스) 인터페이스 인스턴스가 수신 하는 메서드를.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> 특성이 추가 되 면 필요한 유일한 매개 변수는 소비자 연결 지점에 사용할 표시 이름입니다. 선택적 매개 변수를 추가할 수도 있습니다, ID 등      3.  처리 하 고 데이터 인터페이스 인스턴스를 출력 합니다. 데이터에 대해 필요에 따라 내부 처리를 수행 하 고 일반적으로 소비자 컨트롤 데이터를 렌더링 합니다 페이지. 이 작업의 일반적으로 컨트롤의 재정의 하는 <xref:System.Web.UI.Control.OnPreRender%2A>메서드.</xref:System.Web.UI.Control.OnPreRender%2A>          > [!NOTE] > 동기 요청 하는 동안 소비자 데이터를 요청 해야 공급자에서 직접 중 이나 직후는 <xref:System.Web.UI.Control.PreRender>이벤트.</xref:System.Web.UI.Control.PreRender> 비동기 요청 하는 동안 공급자의 콜백 메서드에서 렌더링 하는 동안 언제 든 지 호출 되지 않으면 개발자 가정할 수 데이터가 없는 소비자에 게 전송 되었습니다.       컨트롤 소비자 역할을 하도록 설정 된 후 컨트롤 (구비 하 고 사용 가능한 공급자 컨트롤도 라고 가정함) 연결에 참여할 수 있습니다. 웹 페이지의 태그에는 정적 선언적 연결을 만들려면 개발자가 사용할 수는 `<asp:webpartconnection>` 요소입니다. 경우는 `ConnectionConsumer` 연결 지점에 대 한 ID를 지정 하는 콜백 메서드를 식별 하는 소비자 소스 코드에서 해당 값에 할당 되어야 합니다는 `ConsumerConnectionPointID` 특성에 `<asp:webpartconnection>` 는 페이지입니다. 개발자가 소비자 연결 지점에 대 한 ID를 지정할 수 있습니다 이유 소비자 컨트롤에 정의 된 연결 지점이 여러 개 있기 때문입니다. 소비자 컨트롤에 있는 소비자 연결 지점에 대 한 ID를 지정 하지 않으면, 값에 할당할 않아도 `ConsumerConnectionPointID` 페이지에서, 가져온에서 기본값을 사용 하 여 연결을 만들 수는 때문에 특성의 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>필드.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       코드에 대 한 연결을 만들려면 개발자 만들어야 새 ConsumerConnectionPoint 개체를 호출 하 여는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>메서드와 소비자 컨트롤 ID 또는 소비자 컨트롤에 정의 된 형식은 ConsumerConnectionPoint 개체의 인덱스와 함께 ID를 전달 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> 소비자 컨트롤에 대 한 참조, 해당 공급자 컨트롤에 대 한 참조와 함께 반환된 형식은 ConsumerConnectionPoint 개체 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>개체를 모두에 전달 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>만드는 새 메서드를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>개체입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       개발자를 사용할 수 있지만 소비자 연결 지점 선언적으로 또는 프로그래밍 방식으로 연결 설정의 일부로 사용자가 사용자 인터페이스 (UI)를 통해 연결을 설정할 수 있는 소비자 연결 지점의 상호 작용할 수도 있습니다. 개발자가 선언 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>컨트롤이 웹 페이지에서 연결을 생성 하는 사용자를 위해 런타임에 UI를 제공 합니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 사용자가 클릭 하 여 연결을 설정 하기 위한 시작 지점으로 공급자 컨트롤을 선택 하는 경우 해당 연결 동사 (소비자를 선택할 수도; 동일한 차이점이), UI에는 사용할 수 있는 소비자 연결 지점 (또는 여러 세션에 있는 경우 지점)의 표시 이름으로 드롭다운 목록 컨트롤이 나타납니다 공급자가 데이터를 보낼 수 있습니다. 사용자가 연결을 설정 하는 소비자 연결 지점을 선택 해야 합니다.       특정 소비자 컨트롤 직접 연결 하 고 기본 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>클래스</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 에서 상속 된 속성에 대 한 연결에 대 한 세부 정보를 저장 하는 형식은 ConsumerConnectionPoint 개체 상속 된 예를 들어 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>소비자 연결 지점 속성을 사용 하 여 인터페이스의 형식을 유지 합니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 공급자와 소비자 연결에서 모두 이해 인터페이스 형식, 해당 컨트롤은 호환 되며 직접 연결을 설정할 수 있습니다. 공급자 및 소비자 같은 인터페이스 형식을 사용할 수 없는, 경우 호환 되지 않는 하며 사용 해야 합니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>공급자 연결 지점 변환할 개체 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>소비자가 사용할 수 있는 형식으로 속성.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 또 다른 중요 한 상속 된 속성은는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>연결을 만들 때 소비자 연결을 선택 하는 사용자를 위해 UI에 표시 하는 식별 이름을 제공 하는 속성을 가리킵니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> 개발자는 추가 하는 경우 표시 이름은 필수 매개 변수를입니다는 `ConnectionConsumer` 소비자 컨트롤의 콜백 메서드에 특성입니다. 상속 된 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>소비자에 여러 연결 지점이 소비자 연결 지점에 대 한 고유 식별자를 제공 하기 때문에, 위에 표시 된 대로 속성은 유용 하 게도.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> 소비자는 정의 되어,이 경우 개발자가 추가 하는 여러 ConsumerConnectionPoint 개체를 유지할 수는 `ConnectionConsumer` 특성 메서드에 각 연결점을 구별 하는 ID 값을 지정 해야 합니다. 다른 주목할 만한 상속 된 속성 중 하나는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>소비자 연결 지점에서 동시에 여러 공급자에 연결할 수 있는지 여부를 나타내는 속성도.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 이 속성 값은 `false` 소비자 연결 지점에 대해 기본적으로 (기본적으로 반면 `true` 공급자 연결 지점에 대 한).       몇 가지 고유한 메서드를 추가 하는 형식은 ConsumerConnectionPoint 클래스 멤버에 필요한 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>클래스</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 에서 상속 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>메서드는 공급자에서 인터페이스 인스턴스를 검색 하려면 소비자의 사용자 정의 된 콜백 메서드를 호출 합니다.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>메서드 연결점 연결된 소비자 컨트롤의 현재 상태에 따라 연결을 설정할 수 있는지 여부를 나타내는 부울 값을 반환 합니다.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ConsumerConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Consumer** link. The UI now displays a drop-down control that lists the consumer connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.  \n  \n The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ConsumerConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> 클래스입니다."
  remarks: "<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>클래스는 기본 클래스를 초기화 하는 다양 한 매개 변수를 전달, 기본 생성자를 호출</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 하는 것에 대 한 형식은 ConsumerConnectionPoint 생성자       기본 클래스 생성자는 연결 지점에 대 한 매개 변수 개수를 확인 하 고 몇 가지 예외를 throw 할 수 있습니다. 가능한 예외 목록은 예외 섹션을 참조 하십시오.       <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>클래스</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 의 인스턴스를 직접 만들려는 ConsumerConnectionPoint 생성자를 호출할 수 있습니다. 그러나 단순히 연결을 설정 하 고 클래스를 확장 하지 않는 경우에 호출 해야는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>공급자에서 연결 지점 개체를 반환 하는 메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`. Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter. This demonstrates how to create a custom consumer connection point and then associate it with a consumer control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "연결을 설정 하는 소비자에 게 인터페이스 인스턴스를 반환 하는 소비자 컨트롤에 메서드가 있습니다."
    - id: interfaceType
      type: System.Type
      description: "<xref:System.Type>소비자는 공급자에서 수신 하는 인터페이스입니다.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "<xref:System.Type>소비자 연결 지점에 연결 된 소비자 컨트롤의.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "연결 사용자 인터페이스 (UI)에 사용자에 게 표시 되는 소비자 연결 지점에 대 한 표시 이름."
    - id: id
      type: System.String
      description: "소비자 연결 지점에 대 한 고유 식별자입니다."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "소비자 연결 지점 공급자와 함께 여러 개의 동시 연결을 사용할 수 있는지 여부를 나타내는 부울 값입니다."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>소비자 컨트롤로 동일한 형식이 아닙니다 (또는 잘못 된 클래스에서 파생 된)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  id: SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "소비자 컨트롤에 콜백 메서드를 호출 하 고 공급자 컨트롤에서 인터페이스 인스턴스를 검색 합니다."
  remarks: "이 메서드는 소비자 컨트롤에 대 한 데이터를 포함 하는 공급자에서 인터페이스 인스턴스를 받습니다.       SetObject 메서드를 호출 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>개체는 연결을 활성화 하는 중입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 이 연결을 시작 하 고 두 개의 컨트롤이 데이터를 공유할 수 있도록 포함 된 중요 한 단계입니다.       연결의 소비자 컨트롤 공급자와 같은 유형의 인터페이스 작업할 수 있어야 합니다. 그렇지 않은 경우 컨트롤이 호환 되 고 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>개체 연결을 설정 하는 데 사용 해야 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual void SetObject (System.Web.UI.Control control, object data);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "소비자 연결 지점에 대 한 연결 소비자 컨트롤입니다."
    - id: data
      type: System.Object
      description: "인터페이스 인스턴스가 공급자 컨트롤에서 반환 합니다."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  id: SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "현재 연결을 설정할 수 있는 소비자 연결 지점 인지 확인 합니다."
  remarks: "항상 반환 구현 된 대로 SupportsConnection 메서드 `true` <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>클래스</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 에 대 한 모든 경우 상태를 확인 하 게 하는이 메서드에 대 한 `control` 및 `secondaryInterfaces` 확인 하려면 특정 중요 시점에서 여부는 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>개체를 현재 연결을 만들 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       시나리오가 있을 수 있습니다 위치 `control` 있도록 하는 연결을 불가능 한 상태 또는 where `secondaryInterfaces` 한 연결을 구성할 수 있어야 합니다. 이 경우 개발자가에서 상속할 수는 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>클래스와 연결점 연결을 지원할 준비가 되었는지 확인 하는 사용자 지정 구현을 제공 하는 SupportsConnection 메서드를 재정의 합니다.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>"
  syntax:
    content: public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "와 연결 된 소비자 컨트롤은 <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref>합니다."
    - id: secondaryInterfaces
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> 연결에 참여 하는 모든 보조 인터페이스의 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>연결 지점이 현재; 대 한 연결을 설정할 수 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject
  nameWithType: ConsumerConnectionPoint.SetObject
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection
  nameWithType: ConsumerConnectionPoint.SupportsConnection
