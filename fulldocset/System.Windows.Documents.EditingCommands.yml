### YamlMime:ManagedReference
items:
- uid: System.Windows.Documents.EditingCommands
  id: EditingCommands
  children:
  - System.Windows.Documents.EditingCommands.AlignCenter
  - System.Windows.Documents.EditingCommands.AlignJustify
  - System.Windows.Documents.EditingCommands.AlignLeft
  - System.Windows.Documents.EditingCommands.AlignRight
  - System.Windows.Documents.EditingCommands.Backspace
  - System.Windows.Documents.EditingCommands.CorrectSpellingError
  - System.Windows.Documents.EditingCommands.DecreaseFontSize
  - System.Windows.Documents.EditingCommands.DecreaseIndentation
  - System.Windows.Documents.EditingCommands.Delete
  - System.Windows.Documents.EditingCommands.DeleteNextWord
  - System.Windows.Documents.EditingCommands.DeletePreviousWord
  - System.Windows.Documents.EditingCommands.EnterLineBreak
  - System.Windows.Documents.EditingCommands.EnterParagraphBreak
  - System.Windows.Documents.EditingCommands.IgnoreSpellingError
  - System.Windows.Documents.EditingCommands.IncreaseFontSize
  - System.Windows.Documents.EditingCommands.IncreaseIndentation
  - System.Windows.Documents.EditingCommands.MoveDownByLine
  - System.Windows.Documents.EditingCommands.MoveDownByPage
  - System.Windows.Documents.EditingCommands.MoveDownByParagraph
  - System.Windows.Documents.EditingCommands.MoveLeftByCharacter
  - System.Windows.Documents.EditingCommands.MoveLeftByWord
  - System.Windows.Documents.EditingCommands.MoveRightByCharacter
  - System.Windows.Documents.EditingCommands.MoveRightByWord
  - System.Windows.Documents.EditingCommands.MoveToDocumentEnd
  - System.Windows.Documents.EditingCommands.MoveToDocumentStart
  - System.Windows.Documents.EditingCommands.MoveToLineEnd
  - System.Windows.Documents.EditingCommands.MoveToLineStart
  - System.Windows.Documents.EditingCommands.MoveUpByLine
  - System.Windows.Documents.EditingCommands.MoveUpByPage
  - System.Windows.Documents.EditingCommands.MoveUpByParagraph
  - System.Windows.Documents.EditingCommands.SelectDownByLine
  - System.Windows.Documents.EditingCommands.SelectDownByPage
  - System.Windows.Documents.EditingCommands.SelectDownByParagraph
  - System.Windows.Documents.EditingCommands.SelectLeftByCharacter
  - System.Windows.Documents.EditingCommands.SelectLeftByWord
  - System.Windows.Documents.EditingCommands.SelectRightByCharacter
  - System.Windows.Documents.EditingCommands.SelectRightByWord
  - System.Windows.Documents.EditingCommands.SelectToDocumentEnd
  - System.Windows.Documents.EditingCommands.SelectToDocumentStart
  - System.Windows.Documents.EditingCommands.SelectToLineEnd
  - System.Windows.Documents.EditingCommands.SelectToLineStart
  - System.Windows.Documents.EditingCommands.SelectUpByLine
  - System.Windows.Documents.EditingCommands.SelectUpByPage
  - System.Windows.Documents.EditingCommands.SelectUpByParagraph
  - System.Windows.Documents.EditingCommands.TabBackward
  - System.Windows.Documents.EditingCommands.TabForward
  - System.Windows.Documents.EditingCommands.ToggleBold
  - System.Windows.Documents.EditingCommands.ToggleBullets
  - System.Windows.Documents.EditingCommands.ToggleInsert
  - System.Windows.Documents.EditingCommands.ToggleItalic
  - System.Windows.Documents.EditingCommands.ToggleNumbering
  - System.Windows.Documents.EditingCommands.ToggleSubscript
  - System.Windows.Documents.EditingCommands.ToggleSuperscript
  - System.Windows.Documents.EditingCommands.ToggleUnderline
  langs:
  - csharp
  name: EditingCommands
  nameWithType: EditingCommands
  fullName: System.Windows.Documents.EditingCommands
  type: Class
  summary: "편집 관련된 명령의 표준 집합을 제공 합니다."
  remarks: "다음 표에서 편집 명령 및 연결 된 기본 키 제스처 (키 이름으로는 <xref:System.Windows.Input.Key>및 <xref:System.Windows.Input.ModifierKeys>열거형)입니다.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key>      | 편집 명령 | 기본 키 제스처 |   |---------------------|-------------------------|   | <xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>| `Ctrl`+`E`|   | <xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>| `Ctrl`+`J`|   | <xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>| `Ctrl`+`L`|   | <xref:System.Windows.Documents.EditingCommands.AlignRight%2A>| `Ctrl`+`R`|   | <xref:System.Windows.Documents.EditingCommands.Backspace%2A>| `Backspace`|   | <xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>| 기본 키 제스처 없음 |   | <xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>| `Ctrl`+`OemOpenBrackets`|   | <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>| `Ctrl`+`Shift`+`T`|   | <xref:System.Windows.Documents.EditingCommands.Delete%2A>| `Delete`|   | <xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>| `Ctrl`+`Delete`|   | <xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>| `Ctrl`+`Backspace`|   | <xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>| `Shift`+`Enter`|   | <xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>| `Enter`|   | <xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>| 기본 키 제스처 없음 |   | <xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>| `Ctrl`+`OemCloseBrackets`|   | <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>| `Ctrl`+`T`|   | <xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>| `Down`|   | <xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>| `PageDown`|   | <xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>| `Ctrl`+`Down`|   | <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>| `Left`|   | <xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>| `Ctrl`+`Left`|   | <xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>| `Right`|   | <xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>| `Ctrl`+`Right`|   | <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>| `Ctrl`+`End`|   | <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>| `Ctrl`+`Home`|   | <xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>| `End`|   | <xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>| `Home`|   | <xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>| `Up`|   | <xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>| `PageUp`|   | <xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>| `Ctrl`+`Up`|   | <xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>| `Shift`+`Down`|   | <xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>| `Shift`+`PageDown`|   | <xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>| `Ctrl`+`Shift`+`Down`|   | <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>| `Shift`+`Left`|   | <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>| `Ctrl`+`Shift`+`Left`|   | <xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>| `Shift`+`Right`|   | <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>| `Ctrl`+`Shift`+`Right`|   | <xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>| `Ctrl`+`Shift`+`End`|   | <xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>| `Ctrl`+`Shift`+`Home`|   | <xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>| `Shift`+`End`|   | <xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>| `Shift`+`Home`|   | <xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>| `Shift`+`Up`|   | <xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>| `Shift`+`PageUp`|   | <xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>| `Ctrl`+`Shift`+`Up`|   | <xref:System.Windows.Documents.EditingCommands.TabBackward%2A>| `Shift`+`Tab`|   | <xref:System.Windows.Documents.EditingCommands.TabForward%2A>| `Tab`|   | <xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>| `Ctrl`+`B`|   | <xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>| `Ctrl`+`Shift`+`L`|   | <xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>| `Insert`|   | <xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>| `Ctrl`+`I`|   | <xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>| `Ctrl`+`Shift`+`N`|   | <xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>| `Ctrl`+`OemPlus`|   | <xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>| `Ctrl`+`Shift+OemPlus`|   | <xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>| `Ctrl`+`U`|       캐럿 이동 명령 및 선택 영역 확장 명령을 기본 키 제스처의 공통 집합을 공유 하거나, 일반 다</xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A> </xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A> </xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A> </xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A> </xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A> </xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A> </xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A> </xref:System.Windows.Documents.EditingCommands.ToggleBold%2A> </xref:System.Windows.Documents.EditingCommands.TabForward%2A> </xref:System.Windows.Documents.EditingCommands.TabBackward%2A> </xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A> </xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A> </xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A> </xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A> </xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A> </xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A> </xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A> </xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A> </xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A> </xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> </xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> </xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A> </xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A> </xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A> </xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A> </xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A> </xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A> </xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A> </xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A> </xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> </xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> </xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A> </xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A> </xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A> </xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> </xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A> </xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A> </xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A> </xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A> </xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A> </xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A> </xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A> </xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A> </xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A> </xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A> </xref:System.Windows.Documents.EditingCommands.Delete%2A> </xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A> </xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A> </xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A> </xref:System.Windows.Documents.EditingCommands.Backspace%2A> </xref:System.Windows.Documents.EditingCommands.AlignRight%2A> </xref:System.Windows.Documents.EditingCommands.AlignLeft%2A> </xref:System.Windows.Documents.EditingCommands.AlignJustify%2A> </xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>  예를 들어는 <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>명령에는 기본 키 제스처는 <xref:System.Windows.Input.Key>, 그리고 해당 <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>명령에는 기본 키 제스처 + <xref:System.Windows.Input.ModifierKeys><xref:System.Windows.Input.Key>.</xref:System.Windows.Input.Key> </xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> </xref:System.Windows.Input.Key> </xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>       명령 정의 EditingCommands 클래스에서 제공 하지 않게 일반적으로 명령 매개 변수 사용 (의 `parameter` 에서 예상 되는 매개 변수는 <xref:System.Windows.Input.ICommand.Execute%2A>메서드).</xref:System.Windows.Input.ICommand.Execute%2A>       명령 및 명령 실행에 대 한 자세한 내용은 참조 하십시오. [입력 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static class EditingCommands
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.AlignCenter
  id: AlignCenter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: AlignCenter
  nameWithType: EditingCommands.AlignCenter
  fullName: System.Windows.Documents.EditingCommands.AlignCenter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 단락 또는 단락 선택을 가운데 맞춤 될 요청 AlignCenter 명령을 나타냅니다."
  remarks: "이 명령은에서 작동는 <xref:System.Windows.Documents.Paragraph>수준.</xref:System.Windows.Documents.Paragraph>  이 명령은 부분적으로 선택의 콘텐츠 (단락 내에서 캐럿이 있는 빈 선택 영역을 포함 합니다.) 단락 내에서 호출 되 면 요청 된 효과가 단락 전체에 적용 됩니다.  이 명령은 여러 단락에 걸친 선택에 호출 되 면 효과 선택 영역에 참여 하는 각 단락의 전체 내용을에 적용 됩니다.       다음 그림에는 가운데 맞춤 된 콘텐츠의 예가 나와 있습니다.       ![스크린 샷: Center의 TextAlign 속성 값](~/add/media/flowdoc-textalign-center.png &quot;스크린 샷: Center의 TextAlign 속성 값&quot;) 이 명령은 <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox> 기본적으로 지원 됩니다      <a name=&quot;xamlAttributeUsage_AlignCenter&quot;></a># # XAML 특성 사용```   <object property=&quot;AlignCenter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand AlignCenter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_E&quot; name=&quot;E&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.AlignCenter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.AlignJustify
  id: AlignJustify
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: AlignJustify
  nameWithType: EditingCommands.AlignJustify
  fullName: System.Windows.Documents.EditingCommands.AlignJustify
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 단락 또는 단락 선택을 양쪽 맞춤 되도록 요청 AlignJustify 명령을 나타냅니다."
  remarks: "이 명령은에서 작동는 <xref:System.Windows.Documents.Paragraph>수준.</xref:System.Windows.Documents.Paragraph>  이 명령은 부분적으로 선택의 콘텐츠 (단락 내에서 캐럿이 있는 빈 선택 영역을 포함 합니다.) 단락 내에서 호출 되 면 요청 된 효과가 단락 전체에 적용 됩니다.  이 명령은 여러 단락에 걸친 선택에 호출 되 면 선택 영역의 모든 단락에는 효과가 적용 됩니다.       콘텐츠를 맞출는 정렬 된 줄은 동일 하거나 거의 같도록 너비의 되도록 각 내용 줄 내에서 가로 간격 조정 됩니다.  콘텐츠는 일반적으로 부드러운 가장자리 콘텐츠의 양쪽에서 만들려는 양쪽 맞춤 됩니다.       나머지 보다 짧은 종종 이기 때문에이 명령이 호출 된 후 단락의 마지막 줄에서는 양쪽 맞춤 되지 않고 남아 있을 수 있습니다.       다음 그림에서는 양쪽 맞춤 되지 않은 (왼쪽 맞춤) 콘텐츠를 보여 줍니다.       ![스크린 샷: 콘텐츠를 정렬 된](~/add/media/content-unjustified.png &quot;스크린 샷: 콘텐츠 양쪽 맞춤 되지 않은&quot;) 양쪽 맞춤 된 후 다음 그림은 동일한 콘텐츠.       ![콘텐츠의 스크린 샷 텍스트 맞춤](~/add/media/content-justified.png &quot;콘텐츠의 스크린 샷 텍스트 맞춤&quot;) 반드시 지정된 된 개체에서이 명령에 응답 하는 실제 구현을; 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox> 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_AlignJustify&quot;></a># # XAML 특성 사용```   <object property=&quot;AlignJustify&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand AlignJustify { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_J&quot; name=&quot;J&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.AlignJustify*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.AlignLeft
  id: AlignLeft
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: AlignLeft
  nameWithType: EditingCommands.AlignLeft
  fullName: System.Windows.Documents.EditingCommands.AlignLeft
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "선택 된 콘텐츠의 왼쪽 정렬 될 요청 AlignLeft 명령을 나타냅니다."
  remarks: "이 명령은에서 작동는 <xref:System.Windows.Documents.Paragraph>수준.</xref:System.Windows.Documents.Paragraph>  이 명령은 부분적으로 선택의 콘텐츠 (단락 내에서 캐럿이 있는 빈 선택 영역을 포함 합니다.) 단락 내에서 호출 되 면 요청 된 효과가 단락 전체에 적용 됩니다.  이 명령은 여러 단락에 걸친 선택에 호출 되 면 효과 선택 영역에 참여 하는 각 단락의 전체 내용을에 적용 됩니다.       다음 그림에는 왼쪽 맞춤 콘텐츠의 예가 나와 있습니다.       ![스크린 샷: Left의 TextAlign 속성 값](~/add/media/flowdoc-textalign-left.png &quot;스크린 샷: Left의 TextAlign 속성 값&quot;) 반드시 지정된 된 개체에서이 명령에 응답 하는 실제 구현을; 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox> 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_AlignLeft&quot;></a># # XAML 특성 사용```   <object property=&quot;AlignLeft&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand AlignLeft { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_L&quot; name=&quot;L&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.AlignLeft*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.AlignRight
  id: AlignRight
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: AlignRight
  nameWithType: EditingCommands.AlignRight
  fullName: System.Windows.Documents.EditingCommands.AlignRight
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "선택 된 콘텐츠의 오른쪽 정렬 되어야 요청 AlignRight 명령을 나타냅니다."
  remarks: "이 명령은에서 작동는 <xref:System.Windows.Documents.Paragraph>수준.</xref:System.Windows.Documents.Paragraph>  이 명령은 부분적으로 선택의 콘텐츠 (단락 내에서 캐럿이 있는 빈 선택 영역을 포함 합니다.) 단락 내에서 호출 되 면 요청 된 효과가 단락 전체에 적용 됩니다.  이 명령은 여러 단락에 걸친 선택에 호출 되 면 효과 선택 영역에 참여 하는 각 단락의 전체 내용을에 적용 됩니다.       다음 그림의 오른쪽에 맞추어져 콘텐츠 예를 보여 줍니다.       ![스크린 샷: Right의 TextAlign 값](~/add/media/flowdoc-textalign-right.png &quot;스크린 샷: Right의 TextAlign 값&quot;) 반드시 지정된 된 개체에서이 명령에 응답 하는 실제 구현을; 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox> 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_AlignRight&quot;></a># # XAML 특성 사용```   <object property=&quot;AlignRight&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand AlignRight { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_R&quot; name=&quot;R&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.AlignRight*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.Backspace
  id: Backspace
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: Backspace
  nameWithType: EditingCommands.Backspace
  fullName: System.Windows.Documents.EditingCommands.Backspace
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 위치에서 또는 현재 선택 영역을 통해 백스페이스를 입력 하도록 요청 백스페이스 명령을 나타냅니다."
  remarks: "빈 선택 영역에 호출 되 면이 명령은 캐럿 바로 앞의 문자 또는 단락 구분 기호를 삭제 합니다. 비어 있지 않은 선택에 호출 되 면 선택 항목을 삭제이 합니다.       이 명령은 즉시이 명령이 호출 된 후 동일한 위치에 삽입 된 내용에 대 한 삭제 된 선택의 서식을 유지 합니다.  와 대비는 <xref:System.Windows.Documents.EditingCommands.Delete%2A>이전 서식 유지 되지 않는 명령입니다.</xref:System.Windows.Documents.EditingCommands.Delete%2A>       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_Backspace&quot;></a># # XAML 특성 사용```   <object property=&quot;Backspace&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand Backspace { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Backspace&quot; name=&quot;Backspace&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.Backspace*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.CorrectSpellingError
  id: CorrectSpellingError
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: CorrectSpellingError
  nameWithType: EditingCommands.CorrectSpellingError
  fullName: System.Windows.Documents.EditingCommands.CorrectSpellingError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 위치에서 맞춤법이 틀린된 단어를 수정 하도록 요청 CorrectSpellingError 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.      <a name=&quot;xamlAttributeUsage_CorrectSpellingError&quot;></a># # XAML 특성 사용```   <object property=&quot;CorrectSpellingError&quot;/>   ```"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand CorrectSpellingError { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에는 기본 키 제스처 없습니다."
  overload: System.Windows.Documents.EditingCommands.CorrectSpellingError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.DecreaseFontSize
  id: DecreaseFontSize
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: DecreaseFontSize
  nameWithType: EditingCommands.DecreaseFontSize
  fullName: System.Windows.Documents.EditingCommands.DecreaseFontSize
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역에 대 한 글꼴 크기 1 포인트 감소 될 요청 DecreaseFontSize 명령을 나타냅니다."
  remarks: "이 명령은 단어 안에 캐럿이 있는 빈 선택 영역에서 호출 되 면 선택 영역 전체 단어에 명령을 적용 하도록 자동으로 확장 됩니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox> 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_DecreaseFontSize&quot;></a># # XAML 특성 사용```   <object property=&quot;DecreaseFontSize&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand DecreaseFontSize { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_OemOpenBrackets&quot; name=&quot;OemOpenBrackets&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.DecreaseFontSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.DecreaseIndentation
  id: DecreaseIndentation
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: DecreaseIndentation
  nameWithType: EditingCommands.DecreaseIndentation
  fullName: System.Windows.Documents.EditingCommands.DecreaseIndentation
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 단락에 대 한 들여쓰기 탭 정지 하나 만큼 여 줄일 수 요청 DecreaseIndentation 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox> 기본적으로 지원 됩니다.      > [!IMPORTANT] > 하지 않는 한이 명령은 텍스트 요소에 영향을 주지는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>텍스트 요소의 속성이로 설정 되어 `true`.</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>      <a name=&quot;xamlAttributeUsage_DecreaseIndentation&quot;></a># # XAML 특성 사용```   <object property=&quot;DecreaseIndentation&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand DecreaseIndentation { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_T&quot; name=&quot;T&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.DecreaseIndentation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.Delete
  id: Delete
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: Delete
  nameWithType: EditingCommands.Delete
  fullName: System.Windows.Documents.EditingCommands.Delete
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역 삭제 하도록 요청 하는 Delete 명령을 나타냅니다."
  remarks: "이 명령은 삭제 된 선택 영역 서식을 삭제 합니다.  와 대비는 <xref:System.Windows.Documents.EditingCommands.Backspace%2A>명령을 즉시이 명령이 호출 된 후 동일한 위치에 삽입 된 콘텐츠에 대 한 삭제 선택 영역의 서식을 유지 하.</xref:System.Windows.Documents.EditingCommands.Backspace%2A>       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_Delete&quot;></a># # XAML 특성 사용```   <object property=&quot;Delete&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand Delete { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Delete&quot; name=&quot;Delete&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.DeleteNextWord
  id: DeleteNextWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: DeleteNextWord
  nameWithType: EditingCommands.DeleteNextWord
  fullName: System.Windows.Documents.EditingCommands.DeleteNextWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "(현재 위치)에 상대적인 다음 단어는 삭제 될 요청 DeleteNextWord 명령을 나타냅니다."
  remarks: "캐럿 단어 안에 포함 된 경우 현재 위치와 단어의 끝 사이의 단어의 나머지 부분에서는 삭제 됩니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_DeleteNextWord&quot;></a># # XAML 특성 사용```   <object property=&quot;DeleteNextWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand DeleteNextWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Delete&quot; name=&quot;Delete&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.DeleteNextWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.DeletePreviousWord
  id: DeletePreviousWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: DeletePreviousWord
  nameWithType: EditingCommands.DeletePreviousWord
  fullName: System.Windows.Documents.EditingCommands.DeletePreviousWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "(현재 위치)에 상대적인 이전 단어 삭제 하도록 요청 하는 DeletePreviousWord 명령을 나타냅니다."
  remarks: "캐럿 단어 안에 포함 된 경우 현재 위치와 해당 단어의 시작 부분 사이의 단어의 나머지 부분에서는 삭제 됩니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_DeletePreviousWord&quot;></a># # XAML 특성 사용```   <object property=&quot;DeletePreviousWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand DeletePreviousWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Backspace&quot; name=&quot;Backspace&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.DeletePreviousWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.EnterLineBreak
  id: EnterLineBreak
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: EnterLineBreak
  nameWithType: EditingCommands.EnterLineBreak
  fullName: System.Windows.Documents.EditingCommands.EnterLineBreak
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역 또는 현재 위치에 줄 바꿈을 삽입 하도록 요청 하는 EnterLineBreak 명령을 나타냅니다."
  remarks: "같은 유동 콘텐츠를 지 원하는 편집기에 대 한 <xref:System.Windows.Controls.RichTextBox>,이 명령을 실행 하면은 <xref:System.Windows.Documents.LineBreak>현재 위치에 삽입할 요소입니다.</xref:System.Windows.Documents.LineBreak> </xref:System.Windows.Controls.RichTextBox>       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>및 <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox> 에서 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_EnterLineBreak&quot;></a># # XAML 특성 사용```   <object property=&quot;EnterLineBreak&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand EnterLineBreak { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Enter&quot; name=&quot;Enter&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.EnterLineBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.EnterParagraphBreak
  id: EnterParagraphBreak
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: EnterParagraphBreak
  nameWithType: EditingCommands.EnterParagraphBreak
  fullName: System.Windows.Documents.EditingCommands.EnterParagraphBreak
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 위치에서 또는 현재 선택 영역을 통해 단락 나누기를 삽입 하도록 요청 하는 EnterParagraphBreak 명령을 나타냅니다."
  remarks: "이 명령은 ENTER 키를 사용자에 게는 것과 같습니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>및 <xref:System.Windows.Controls.TextBox>(때는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>속성은 `true`).</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      > [!IMPORTANT] > 하지 않는 한이 명령은 텍스트 요소에 영향을 주지는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>텍스트 요소의 속성이로 설정 되어 `true`.</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>      <a name=&quot;xamlAttributeUsage_EnterParagraphBreak&quot;></a># # XAML 특성 사용```   <object property=&quot;EnterParagraphBreak&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand EnterParagraphBreak { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Enter&quot; name=&quot;Enter&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.EnterParagraphBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.IgnoreSpellingError
  id: IgnoreSpellingError
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: IgnoreSpellingError
  nameWithType: EditingCommands.IgnoreSpellingError
  fullName: System.Windows.Documents.EditingCommands.IgnoreSpellingError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역 이나 현재 위치에서 맞춤법이 틀린된 단어의 인스턴스를 모두 무시 됩니다 요청 IgnoreSpellingError 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.      <a name=&quot;xamlAttributeUsage_IgnoreSpellingError&quot;></a># # XAML 특성 사용```   <object property=&quot;IgnoreSpellingError&quot;/>   ```"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand IgnoreSpellingError { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에는 기본 키 제스처 없습니다."
  overload: System.Windows.Documents.EditingCommands.IgnoreSpellingError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.IncreaseFontSize
  id: IncreaseFontSize
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: IncreaseFontSize
  nameWithType: EditingCommands.IncreaseFontSize
  fullName: System.Windows.Documents.EditingCommands.IncreaseFontSize
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역에 대 한 글꼴 크기 1 포인트 늘릴 수 요청 IncreaseFontSize 명령을 나타냅니다."
  remarks: "단어 안에 캐럿이 있는 빈 선택 영역에서이 명령을 호출 하는 경우에 전체 단어에 명령을 적용 하도록 선택 영역 확장 됩니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox> 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_IncreaseFontSize&quot;></a># # XAML 특성 사용```   <object property=&quot;IncreaseFontSize&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand IncreaseFontSize { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_OemCloseBrackets&quot; name=&quot;OemCloseBrackets&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.IncreaseFontSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.IncreaseIndentation
  id: IncreaseIndentation
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: IncreaseIndentation
  nameWithType: EditingCommands.IncreaseIndentation
  fullName: System.Windows.Documents.EditingCommands.IncreaseIndentation
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 단락에 대 한 들여쓰기 탭 정지 하나 만큼가 늘릴 수 요청 IncreaseIndentation 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox> 기본적으로 지원 됩니다.      > [!IMPORTANT] > 하지 않는 한이 명령은 텍스트 요소에 영향을 주지는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>텍스트 요소의 속성이로 설정 되어 `true`.</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>      <a name=&quot;xamlAttributeUsage_IncreaseIndentation&quot;></a># # XAML 특성 사용```   <object property=&quot;IncreaseIndentation&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand IncreaseIndentation { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_T&quot; name=&quot;T&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.IncreaseIndentation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveDownByLine
  id: MoveDownByLine
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveDownByLine
  nameWithType: EditingCommands.MoveDownByLine
  fullName: System.Windows.Documents.EditingCommands.MoveDownByLine
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "한 줄씩 아래로 캐럿 이동 요청 MoveDownByLine 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>및 <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox> 에서 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_MoveDownByLine&quot;></a># # XAML 특성 사용```   <object property=&quot;MoveDownByLine&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveDownByLine { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Down&quot; name=&quot;Down&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.MoveDownByLine*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveDownByPage
  id: MoveDownByPage
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveDownByPage
  nameWithType: EditingCommands.MoveDownByPage
  fullName: System.Windows.Documents.EditingCommands.MoveDownByPage
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "캐럿에서 한 페이지 아래로 요청 MoveDownByPage 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>및 <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox> 에서 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_MoveDownByPage&quot;></a># # XAML 특성 사용```   <object property=&quot;MoveDownByPage&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveDownByPage { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_PageDown&quot; name=&quot;PageDown&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.MoveDownByPage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveDownByParagraph
  id: MoveDownByParagraph
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveDownByParagraph
  nameWithType: EditingCommands.MoveDownByParagraph
  fullName: System.Windows.Documents.EditingCommands.MoveDownByParagraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "한 단락 캐럿 아래로 이동 요청 MoveDownByParagraph 명령을 나타냅니다."
  remarks: "이 명령은 다음 단락 시작 부분에 캐럿을 배치합니다.       이 명령은 <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> 에서 호출 될 때</xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> 처럼 동작       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>및 <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox> 에서 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_MoveDownByParagraph&quot;></a># # XAML 특성 사용```   <object property=&quot;MoveDownByParagraph&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveDownByParagraph { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Down&quot; name=&quot;Down&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.MoveDownByParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveLeftByCharacter
  id: MoveLeftByCharacter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveLeftByCharacter
  nameWithType: EditingCommands.MoveLeftByCharacter
  fullName: System.Windows.Documents.EditingCommands.MoveLeftByCharacter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "캐럿을 한 문자 왼쪽 이동 요청 MoveLeftByCharacter 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveLeftByCharacter&quot;></a># # XAML 특성 사용```   <object property=&quot;MoveLeftByCharacter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveLeftByCharacter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Left&quot; name=&quot;Left&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.MoveLeftByCharacter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveLeftByWord
  id: MoveLeftByWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveLeftByWord
  nameWithType: EditingCommands.MoveLeftByWord
  fullName: System.Windows.Documents.EditingCommands.MoveLeftByWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "캐럿 왼쪽을 한 단어를 이동 요청 MoveLeftByWord 명령을 나타냅니다."
  remarks: "캐럿 단어 안에 포함 된 경우이 명령은 해당 단어의 시작 부분에 캐럿을 이동 합니다.  그렇지 않으면이 명령은 이전 단어의 시작 부분에 캐럿을 이동합니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveLeftByWord&quot;></a># # XAML 특성 사용```   <object property=&quot;MoveLeftByWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveLeftByWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Left&quot; name=&quot;Left&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.MoveLeftByWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveRightByCharacter
  id: MoveRightByCharacter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveRightByCharacter
  nameWithType: EditingCommands.MoveRightByCharacter
  fullName: System.Windows.Documents.EditingCommands.MoveRightByCharacter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "캐럿을 한 문자 오른쪽 이동 요청 MoveRightByCharacter 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveRightByCharacter&quot;></a># # XAML 특성 사용```   <object property=&quot;MoveRightByCharacter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveRightByCharacter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Right&quot; name=&quot;Right&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.MoveRightByCharacter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveRightByWord
  id: MoveRightByWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveRightByWord
  nameWithType: EditingCommands.MoveRightByWord
  fullName: System.Windows.Documents.EditingCommands.MoveRightByWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "캐럿은 여을 한 단어 오른쪽으로 이동 요청 MoveRightByWord 명령을 나타냅니다."
  remarks: "캐럿 단어 안에 포함 된 경우이 명령은 해당 단어의 끝에 캐럿을 이동 합니다.  그렇지 않으면이 명령은 다음 단어의 시작 부분에 캐럿을 이동합니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveRightByWord&quot;></a># # XAML 특성 사용```   <object property=&quot;MoveRightByWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveRightByWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Right&quot; name=&quot;Right&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.MoveRightByWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentEnd
  id: MoveToDocumentEnd
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveToDocumentEnd
  nameWithType: EditingCommands.MoveToDocumentEnd
  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "캐럿이 콘텐츠의 맨 끝으로 이동 요청 MoveToDocumentEnd 명령을 나타냅니다."
  remarks: "A *텍스트 컨테이너* 중인 콘텐츠에 대 한 궁극적인 테두리를 구성 하는 요소가 있습니다.  <xref:System.Windows.Controls.TextBlock>및 <xref:System.Windows.Documents.FlowDocument>은 텍스트 컨테이너의 예입니다.</xref:System.Windows.Documents.FlowDocument></xref:System.Windows.Controls.TextBlock>  텍스트 컨테이너 내에서 전체적으로 포함 된 내용은 라고는 *문서*합니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveToDocumentEnd&quot;></a># # XAML 특성 사용```   <object property=&quot;MoveToDocumentEnd&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveToDocumentEnd { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.MoveToDocumentEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentStart
  id: MoveToDocumentStart
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveToDocumentStart
  nameWithType: EditingCommands.MoveToDocumentStart
  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "캐럿이 콘텐츠의 맨으로 이동 요청 MoveToDocumentStart 명령을 나타냅니다."
  remarks: "A *텍스트 컨테이너* 중인 콘텐츠에 대 한 궁극적인 테두리를 구성 하는 요소가 있습니다.  <xref:System.Windows.Controls.TextBlock>및 <xref:System.Windows.Documents.FlowDocument>은 텍스트 컨테이너의 예입니다.</xref:System.Windows.Documents.FlowDocument></xref:System.Windows.Controls.TextBlock>  텍스트 컨테이너 내에서 전체적으로 포함 된 내용은 라고는 *문서*합니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveToDocumentStart&quot;></a># # XAML 특성 사용```   <object property=&quot;MoveToDocumentStart&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveToDocumentStart { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Home&quot; name=&quot;Home&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.MoveToDocumentStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveToLineEnd
  id: MoveToLineEnd
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveToLineEnd
  nameWithType: EditingCommands.MoveToLineEnd
  fullName: System.Windows.Documents.EditingCommands.MoveToLineEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 줄의 끝에 캐럿이 이동 요청 MoveToLineEnd 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveToLineEnd&quot;></a># # XAML 특성 사용```   <object property=&quot;MoveToLineEnd&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveToLineEnd { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.MoveToLineEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveToLineStart
  id: MoveToLineStart
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveToLineStart
  nameWithType: EditingCommands.MoveToLineStart
  fullName: System.Windows.Documents.EditingCommands.MoveToLineStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "캐럿이 현재 줄의 시작 부분으로 이동 요청 MoveToLineStart 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveToLineStart&quot;></a># # XAML 특성 사용```   <object property=&quot;MoveToLineStart&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveToLineStart { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Home&quot; name=&quot;Home&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.MoveToLineStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveUpByLine
  id: MoveUpByLine
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveUpByLine
  nameWithType: EditingCommands.MoveUpByLine
  fullName: System.Windows.Documents.EditingCommands.MoveUpByLine
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "한 줄씩 위로 캐럿 이동 요청 MoveUpByLine 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>및 <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox> 에서 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_MoveUpByLine&quot;></a># # XAML 특성 사용```   <object property=&quot;MoveUpByLine&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveUpByLine { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Up&quot; name=&quot;Up&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.MoveUpByLine*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveUpByPage
  id: MoveUpByPage
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveUpByPage
  nameWithType: EditingCommands.MoveUpByPage
  fullName: System.Windows.Documents.EditingCommands.MoveUpByPage
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "요청에서 한 페이지 위로 캐럿 이동 MoveUpByPage 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>및 <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox> 에서 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_MoveUpByPage&quot;></a># # XAML 특성 사용```   <object property=&quot;MoveUpByPage&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveUpByPage { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_PageUp&quot; name=&quot;PageUp&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.MoveUpByPage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveUpByParagraph
  id: MoveUpByParagraph
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveUpByParagraph
  nameWithType: EditingCommands.MoveUpByParagraph
  fullName: System.Windows.Documents.EditingCommands.MoveUpByParagraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "한 단락 캐럿 위로 이동 요청 MoveUpByParagraph 명령을 나타냅니다."
  remarks: "이 명령은 다음 단락 시작 부분에 캐럿을 배치합니다.       이 명령은 <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> 에서 호출 될 때</xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> 처럼 동작       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>및 <xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox> 에서 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_MoveUpByParagraph&quot;></a># # XAML 특성 사용```   <object property=&quot;MoveUpByParagraph&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveUpByParagraph { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Up&quot; name=&quot;Up&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.MoveUpByParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectDownByLine
  id: SelectDownByLine
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectDownByLine
  nameWithType: EditingCommands.SelectDownByLine
  fullName: System.Windows.Documents.EditingCommands.SelectDownByLine
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역에서 한 줄 아래로 확장 되도록 요청 SelectDownByLine 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectDownByLine&quot;></a># # XAML 특성 사용```   <object property=&quot;SelectDownByLine&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectDownByLine { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Down&quot; name=&quot;Down&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.SelectDownByLine*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectDownByPage
  id: SelectDownByPage
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectDownByPage
  nameWithType: EditingCommands.SelectDownByPage
  fullName: System.Windows.Documents.EditingCommands.SelectDownByPage
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역에서 한 페이지 아래로 확장 되도록 요청 SelectDownByPage 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectDownByPage&quot;></a># # XAML 특성 사용```   <object property=&quot;SelectDownByPage&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectDownByPage { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_PageDown&quot; name=&quot;PageDown&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.SelectDownByPage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectDownByParagraph
  id: SelectDownByParagraph
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectDownByParagraph
  nameWithType: EditingCommands.SelectDownByParagraph
  fullName: System.Windows.Documents.EditingCommands.SelectDownByParagraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "한 문장에서 현재 선택 영역 아래로 확장 되도록 요청 SelectDownByParagraph 명령을 나타냅니다."
  remarks: "이 명령은 다음 단락 시작 부분으로 선택 영역을 확장 합니다.  그렇지 않으면이 명령은 현재 단락의 끝에 선택 영역을 확장 합니다.  확장된 선택 영역 단락의 끝을 표시 하는 단락 나누기를 포함 됩니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectDownByParagraph&quot;></a># # XAML 특성 사용```   <object property=&quot;SelectDownByParagraph&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectDownByParagraph { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Down&quot; name=&quot;Down&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.SelectDownByParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectLeftByCharacter
  id: SelectLeftByCharacter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectLeftByCharacter
  nameWithType: EditingCommands.SelectLeftByCharacter
  fullName: System.Windows.Documents.EditingCommands.SelectLeftByCharacter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역으로 한 문자 왼쪽 확장 되도록 요청 SelectLeftByCharacter 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectLeftByCharacter&quot;></a># # XAML 특성 사용```   <object property=&quot;SelectLeftByCharacter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectLeftByCharacter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Left&quot; name=&quot;Left&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.SelectLeftByCharacter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectLeftByWord
  id: SelectLeftByWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectLeftByWord
  nameWithType: EditingCommands.SelectLeftByWord
  fullName: System.Windows.Documents.EditingCommands.SelectLeftByWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역으로 한 단어 왼쪽 확장 되도록 요청 SelectLeftByWord 명령을 나타냅니다."
  remarks: "캐럿 단어 내에 있으면이 명령은 해당 단어의 시작 부분에는 선택 영역을 확장 합니다.  그렇지 않으면이 명령은 이전 단어의 시작 부분에는 선택 영역을 확장 합니다.       확장된 선택 영역에는 단어 구분 기호가 포함 되지 않습니다.  와 대비 <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>, 확장된 선택 영역에 단어 구분 기호에는입니다.</xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectLeftByWord&quot;></a># # XAML 특성 사용```   <object property=&quot;SelectLeftByWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectLeftByWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Left&quot; name=&quot;Left&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.SelectLeftByWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectRightByCharacter
  id: SelectRightByCharacter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectRightByCharacter
  nameWithType: EditingCommands.SelectRightByCharacter
  fullName: System.Windows.Documents.EditingCommands.SelectRightByCharacter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역 한 문자 오른쪽으로 확장 되도록 요청 SelectRightByCharacter 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectRightByCharacter&quot;></a># # XAML 특성 사용```   <object property=&quot;SelectRightByCharacter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectRightByCharacter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Right&quot; name=&quot;Right&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.SelectRightByCharacter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectRightByWord
  id: SelectRightByWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectRightByWord
  nameWithType: EditingCommands.SelectRightByWord
  fullName: System.Windows.Documents.EditingCommands.SelectRightByWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역을 한 단어 오른쪽으로 확장 되도록 요청 SelectRightByWord 명령을 나타냅니다."
  remarks: "가 단어 안에서 캐럿이 있는 경우이 명령은 해당 단어의 끝에 선택 영역을 확장 합니다.  그렇지 않으면이 명령은 다음 단어의 끝에 선택 영역을 확장 합니다.       확장된 선택 영역 단어 구분 기호를 포함 합니다.  와 대비 <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>확장된 선택 영역에 단어 구분 기호를 포함 하지 않는.</xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectRightByWord&quot;></a># # XAML 특성 사용```   <object property=&quot;SelectRightByWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectRightByWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Right&quot; name=&quot;Right&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.SelectRightByWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentEnd
  id: SelectToDocumentEnd
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectToDocumentEnd
  nameWithType: EditingCommands.SelectToDocumentEnd
  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역 콘텐츠의 맨 끝으로 확장 되도록 요청 SelectToDocumentEnd 명령을 나타냅니다."
  remarks: "A *텍스트 컨테이너* 중인 콘텐츠에 대 한 궁극적인 테두리를 구성 하는 요소가 있습니다.  <xref:System.Windows.Controls.TextBlock>및 <xref:System.Windows.Documents.FlowDocument>은 텍스트 컨테이너의 예입니다.</xref:System.Windows.Documents.FlowDocument></xref:System.Windows.Controls.TextBlock>  텍스트 컨테이너 내에서 전체적으로 포함 된 내용은 라고는 *문서*합니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectToDocumentEnd&quot;></a># # XAML 특성 사용```   <object property=&quot;SelectToDocumentEnd&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectToDocumentEnd { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.SelectToDocumentEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentStart
  id: SelectToDocumentStart
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectToDocumentStart
  nameWithType: EditingCommands.SelectToDocumentStart
  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역에 콘텐츠의 맨 확장 되도록 요청 SelectToDocumentStart 명령을 나타냅니다."
  remarks: "A *텍스트 컨테이너* 중인 콘텐츠에 대 한 궁극적인 테두리를 구성 하는 요소가 있습니다.  <xref:System.Windows.Controls.TextBlock>및 <xref:System.Windows.Documents.FlowDocument>은 텍스트 컨테이너의 예입니다.</xref:System.Windows.Documents.FlowDocument></xref:System.Windows.Controls.TextBlock>  텍스트 컨테이너 내에서 전체적으로 포함 된 내용은 라고는 *문서*합니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectToDocumentStart&quot;></a># # XAML 특성 사용```   <object property=&quot;SelectToDocumentStart&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectToDocumentStart { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Home&quot; name=&quot;Home&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.SelectToDocumentStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectToLineEnd
  id: SelectToLineEnd
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectToLineEnd
  nameWithType: EditingCommands.SelectToLineEnd
  fullName: System.Windows.Documents.EditingCommands.SelectToLineEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 항목은 현재 줄의 끝으로 확장 되도록 요청 SelectToLineEnd 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectToLineEnd&quot;></a># # XAML 특성 사용```   <object property=&quot;SelectToLineEnd&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectToLineEnd { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.SelectToLineEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectToLineStart
  id: SelectToLineStart
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectToLineStart
  nameWithType: EditingCommands.SelectToLineStart
  fullName: System.Windows.Documents.EditingCommands.SelectToLineStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 항목은 현재 줄의 시작 부분으로 확장 되도록 요청 SelectToLineStart 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectToLineStart&quot;></a># # XAML 특성 사용```   <object property=&quot;SelectToLineStart&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectToLineStart { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Home&quot; name=&quot;Home&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.SelectToLineStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectUpByLine
  id: SelectUpByLine
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectUpByLine
  nameWithType: EditingCommands.SelectUpByLine
  fullName: System.Windows.Documents.EditingCommands.SelectUpByLine
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역에서 한 줄 위로 확장 되도록 요청 SelectUpByLine 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectUpByLine&quot;></a># # XAML 특성 사용```   <object property=&quot;SelectUpByLine&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectUpByLine { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Up&quot; name=&quot;Up&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.SelectUpByLine*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectUpByPage
  id: SelectUpByPage
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectUpByPage
  nameWithType: EditingCommands.SelectUpByPage
  fullName: System.Windows.Documents.EditingCommands.SelectUpByPage
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역에서 한 페이지 위로 확장 되도록 요청 SelectUpByPage 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectUpByPage&quot;></a># # XAML 특성 사용```   <object property=&quot;SelectUpByPage&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectUpByPage { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_PageUp&quot; name=&quot;PageUp&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.SelectUpByPage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectUpByParagraph
  id: SelectUpByParagraph
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectUpByParagraph
  nameWithType: EditingCommands.SelectUpByParagraph
  fullName: System.Windows.Documents.EditingCommands.SelectUpByParagraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "한 문장에서 현재 선택 영역 위로 확장 될 요청 SelectUpByParagraph 명령을 나타냅니다."
  remarks: "캐럿 단락 시작 부분에 있는 경우이 명령은 이전 단락의 시작 부분에는 선택 영역을 확장 합니다.  그렇지 않으면이 명령은 현재 단락의 시작 부분에는 선택 영역을 확장 합니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectUpByParagraph&quot;></a># # XAML 특성 사용```   <object property=&quot;SelectUpByParagraph&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectUpByParagraph { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Up&quot; name=&quot;Up&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.SelectUpByParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.TabBackward
  id: TabBackward
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: TabBackward
  nameWithType: EditingCommands.TabBackward
  fullName: System.Windows.Documents.EditingCommands.TabBackward
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "TabBackward 명령을 나타냅니다."
  remarks: "이 명령에 대 한 동작은 현재 선택한 내용에 따라 달라 집니다. 이 명령은 <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>.</xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A> 같습니다는 선택 영역이 비어 있지 않은 경우 캐럿 표 셀에 있으면 (나타내는 <xref:System.Windows.Documents.TableCell>요소),이 명령은 캐럿을 이전 셀으로 이동 합니다.</xref:System.Windows.Documents.TableCell> 그렇지 않으면 현재 위치에 탭 문자가 삽입 됩니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>및 <xref:System.Windows.Controls.TextBox>(때는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>속성은 `true`).</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_TabBackward&quot;></a># # XAML 특성 사용```   <object property=&quot;TabBackward&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n```c#  \nRichTextBox rTB = new RichTextBox();  \n  \nEditingCommands.ToggleInsert.Execute(null, rTB);  \n  \n```  \n  \n```vb  \n			Dim rTB As New RichTextBox()  \n  \n			EditingCommands.ToggleInsert.Execute(Nothing, rTB)  \n```"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand TabBackward { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Tab&quot; name=&quot;Tab&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.TabBackward*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.TabForward
  id: TabForward
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: TabForward
  nameWithType: EditingCommands.TabForward
  fullName: System.Windows.Documents.EditingCommands.TabForward
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "TabForward 명령을 나타냅니다."
  remarks: "이 명령에 대 한 동작은 현재 선택한 내용에 따라 달라 집니다. 이 명령은 <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>.</xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A> 같습니다 선택 내용이 비어 또는 선택 내용이 비어 있는 단락 시작 부분에는 현재 캐럿 위치 하는 경우 캐럿 표 셀에 있으면 (나타내는 <xref:System.Windows.Documents.TableCell>요소),이 명령은 캐럿을 다음 셀으로 이동 합니다.</xref:System.Windows.Documents.TableCell> 캐럿이 테이블의 마지막 셀에 있으면,이 명령을 사용 하면 새 행을 새 행의 첫 번째 셀에 배치 된 테이블에 추가 합니다.  그렇지 않으면 현재 위치에 탭 문자가 삽입 됩니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>및 <xref:System.Windows.Controls.TextBox>(때는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>속성은 `true`).</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_TabForward&quot;></a># # XAML 특성 사용```   <object property=&quot;TabForward&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n```c#  \nRichTextBox rTB = new RichTextBox();  \n  \nEditingCommands.ToggleInsert.Execute(null, rTB);  \n  \n```  \n  \n```vb  \n			Dim rTB As New RichTextBox()  \n  \n			EditingCommands.ToggleInsert.Execute(Nothing, rTB)  \n```"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand TabForward { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Tab&quot; name=&quot;Tab&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.TabForward*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleBold
  id: ToggleBold
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleBold
  nameWithType: EditingCommands.ToggleBold
  fullName: System.Windows.Documents.EditingCommands.ToggleBold
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "요청 하는 ToggleBold 명령을 나타냅니다 <xref href=&quot;System.Windows.Documents.Bold&quot;> </xref> 현재 선택 영역에서 서식이 전환 되도록 합니다."
  remarks: "경우는 <xref:System.Windows.FontWeight>까지의 범위에 현재 선택 영역에 대 한 <xref:System.Windows.FontWeights.Thin%2A>를 <xref:System.Windows.FontWeights.SemiBold%2A>, <xref:System.Windows.FontWeights.Bold%2A>현재 선택 영역에 적용 됩니다.</xref:System.Windows.FontWeights.Bold%2A> </xref:System.Windows.FontWeights.SemiBold%2A> </xref:System.Windows.FontWeights.Thin%2A> </xref:System.Windows.FontWeight>  그렇지 않으면 <xref:System.Windows.FontWeights.Normal%2A>적용 됩니다.</xref:System.Windows.FontWeights.Normal%2A>  비교 <xref:System.Windows.FontWeight>값, 참조 <xref:System.Windows.FontWeights>.</xref:System.Windows.FontWeights> </xref:System.Windows.FontWeight> 목록은       선택 내용이 비어 있는 경우 단어 안에 캐럿이 여 선택 영역 전체 단어를 포함 하도록 확장 됩니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox> 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_ToggleBold&quot;></a># # XAML 특성 사용```   <object property=&quot;ToggleBold&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleBold { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_B&quot; name=&quot;B&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.ToggleBold*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleBullets
  id: ToggleBullets
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleBullets
  nameWithType: EditingCommands.ToggleBullets
  fullName: System.Windows.Documents.EditingCommands.ToggleBullets
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역에서 정렬 되지 않은 목록 (글머리 기호 목록 라고도 함) 서식이 전환 되도록 요청 ToggleBullets 명령을 나타냅니다."
  remarks: "이 명령은에서 작동는 <xref:System.Windows.Documents.Paragraph>수준.</xref:System.Windows.Documents.Paragraph>  이 명령은 부분적으로 선택의 콘텐츠 (단락 내에서 캐럿이 있는 빈 선택 영역을 포함 합니다.) 단락 내에서 호출 되 면 요청 된 효과가 단락 전체에 적용 됩니다.  이 명령은 여러 단락에 걸친 선택에 호출 되 면 효과 선택 영역에 참여 하는 각 단락의 전체 내용을에 적용 됩니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox> 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_ToggleBullets&quot;></a># # XAML 특성 사용```   <object property=&quot;ToggleBullets&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleBullets { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_L&quot; name=&quot;L&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.ToggleBullets*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleInsert
  id: ToggleInsert
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleInsert
  nameWithType: EditingCommands.ToggleInsert
  fullName: System.Windows.Documents.EditingCommands.ToggleInsert
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "입력 Insert와 겹쳐쓰기 모드를 전환 하는 ToggleInsert 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>.</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_ToggleInsert&quot;></a># # XAML 특성 사용```   <object property=&quot;ToggleInsert&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleInsert { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Insert&quot; name=&quot;Insert&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.ToggleInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleItalic
  id: ToggleItalic
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleItalic
  nameWithType: EditingCommands.ToggleItalic
  fullName: System.Windows.Documents.EditingCommands.ToggleItalic
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "요청 하는 ToggleItalic 명령을 나타냅니다 <xref href=&quot;System.Windows.Documents.Italic&quot;> </xref> 현재 선택 영역에서 서식이 전환 되도록 합니다."
  remarks: "경우는 <xref:System.Windows.FontStyle>현재 선택 영역에 대 한 <xref:System.Windows.FontStyles.Normal%2A>, <xref:System.Windows.FontStyles.Italic%2A>현재 선택 영역에 적용 됩니다.</xref:System.Windows.FontStyles.Italic%2A> </xref:System.Windows.FontStyles.Normal%2A> </xref:System.Windows.FontStyle>  그렇지 않으면 <xref:System.Windows.FontStyles.Normal%2A>적용 됩니다.</xref:System.Windows.FontStyles.Normal%2A>       선택 내용이 비어 있는 경우 단어 안에 캐럿이 여 선택 영역 전체 단어를 포함 하도록 확장 됩니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox> 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_ToggleItalic&quot;></a># # XAML 특성 사용```   <object property=&quot;ToggleItalic&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleItalic { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_I&quot; name=&quot;I&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.ToggleItalic*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleNumbering
  id: ToggleNumbering
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleNumbering
  nameWithType: EditingCommands.ToggleNumbering
  fullName: System.Windows.Documents.EditingCommands.ToggleNumbering
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역에서 정렬 된 목록 (또는 번호 매기기 목록) 서식이 전환 되도록 요청 ToggleNumbering 명령을 나타냅니다."
  remarks: "이 명령은에서 작동는 <xref:System.Windows.Documents.Paragraph>수준.</xref:System.Windows.Documents.Paragraph>  이 명령은 부분적으로 선택의 콘텐츠 (단락 내에서 캐럿이 있는 빈 선택 영역을 포함 합니다.) 단락 내에서 호출 되 면 요청 된 효과가 단락 전체에 적용 됩니다.  이 명령은 여러 단락에 걸친 선택에 호출 되 면 효과 선택 영역에 참여 하는 각 단락의 전체 내용을에 적용 됩니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox> 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_ToggleNumbering&quot;></a># # XAML 특성 사용```   <object property=&quot;ToggleNumbering&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleNumbering { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_N&quot; name=&quot;N&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.ToggleNumbering*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleSubscript
  id: ToggleSubscript
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleSubscript
  nameWithType: EditingCommands.ToggleSubscript
  fullName: System.Windows.Documents.EditingCommands.ToggleSubscript
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역에서 아래 첨자 서식이 전환 되도록 요청 ToggleSubscript 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.      <a name=&quot;xamlAttributeUsage_ToggleSubscript&quot;></a># # XAML 특성 사용```   <object property=&quot;ToggleSubscript&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleSubscript { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_OemPlus&quot; name=&quot;OemPlus&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.ToggleSubscript*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleSuperscript
  id: ToggleSuperscript
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleSuperscript
  nameWithType: EditingCommands.ToggleSuperscript
  fullName: System.Windows.Documents.EditingCommands.ToggleSuperscript
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "현재 선택 영역에서 위 첨자 서식이 전환 되도록 요청 ToggleSuperscript 명령을 나타냅니다."
  remarks: "반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.      <a name=&quot;xamlAttributeUsage_ToggleSuperscript&quot;></a># # XAML 특성 사용```   <object property=&quot;ToggleSuperscript&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleSuperscript { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_OemPlus&quot; name=&quot;OemPlus&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.ToggleSuperscript*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleUnderline
  id: ToggleUnderline
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleUnderline
  nameWithType: EditingCommands.ToggleUnderline
  fullName: System.Windows.Documents.EditingCommands.ToggleUnderline
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "요청 하는 ToggleUnderline 명령을 나타냅니다 <xref href=&quot;System.Windows.Documents.Underline&quot;> </xref> 현재 선택 영역에서 서식이 전환 되도록 합니다."
  remarks: "선택 내용이 비어 있는 경우 단어 안에 캐럿이 여 선택 영역 전체 단어를 포함 하도록 확장 됩니다.       반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.       이 명령은 <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox> 기본적으로 지원 됩니다.      <a name=&quot;xamlAttributeUsage_ToggleUnderline&quot;></a># # XAML 특성 사용```   <object property=&quot;ToggleUnderline&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleUnderline { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "요청 된 명령입니다.  이 명령에 대 한 기본 키 제스처는 <xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_U&quot; name=&quot;U&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Documents.EditingCommands.ToggleUnderline*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Documents.EditingCommands.AlignCenter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignCenter
  nameWithType: EditingCommands.AlignCenter
  fullName: System.Windows.Documents.EditingCommands.AlignCenter
- uid: System.Windows.Input.RoutedUICommand
  parent: System.Windows.Input
  isExternal: false
  name: RoutedUICommand
  nameWithType: RoutedUICommand
  fullName: System.Windows.Input.RoutedUICommand
- uid: System.Windows.Documents.EditingCommands.AlignJustify
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignJustify
  nameWithType: EditingCommands.AlignJustify
  fullName: System.Windows.Documents.EditingCommands.AlignJustify
- uid: System.Windows.Documents.EditingCommands.AlignLeft
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignLeft
  nameWithType: EditingCommands.AlignLeft
  fullName: System.Windows.Documents.EditingCommands.AlignLeft
- uid: System.Windows.Documents.EditingCommands.AlignRight
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignRight
  nameWithType: EditingCommands.AlignRight
  fullName: System.Windows.Documents.EditingCommands.AlignRight
- uid: System.Windows.Documents.EditingCommands.Backspace
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: Backspace
  nameWithType: EditingCommands.Backspace
  fullName: System.Windows.Documents.EditingCommands.Backspace
- uid: System.Windows.Documents.EditingCommands.CorrectSpellingError
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: CorrectSpellingError
  nameWithType: EditingCommands.CorrectSpellingError
  fullName: System.Windows.Documents.EditingCommands.CorrectSpellingError
- uid: System.Windows.Documents.EditingCommands.DecreaseFontSize
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DecreaseFontSize
  nameWithType: EditingCommands.DecreaseFontSize
  fullName: System.Windows.Documents.EditingCommands.DecreaseFontSize
- uid: System.Windows.Documents.EditingCommands.DecreaseIndentation
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DecreaseIndentation
  nameWithType: EditingCommands.DecreaseIndentation
  fullName: System.Windows.Documents.EditingCommands.DecreaseIndentation
- uid: System.Windows.Documents.EditingCommands.Delete
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: Delete
  nameWithType: EditingCommands.Delete
  fullName: System.Windows.Documents.EditingCommands.Delete
- uid: System.Windows.Documents.EditingCommands.DeleteNextWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DeleteNextWord
  nameWithType: EditingCommands.DeleteNextWord
  fullName: System.Windows.Documents.EditingCommands.DeleteNextWord
- uid: System.Windows.Documents.EditingCommands.DeletePreviousWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DeletePreviousWord
  nameWithType: EditingCommands.DeletePreviousWord
  fullName: System.Windows.Documents.EditingCommands.DeletePreviousWord
- uid: System.Windows.Documents.EditingCommands.EnterLineBreak
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: EnterLineBreak
  nameWithType: EditingCommands.EnterLineBreak
  fullName: System.Windows.Documents.EditingCommands.EnterLineBreak
- uid: System.Windows.Documents.EditingCommands.EnterParagraphBreak
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: EnterParagraphBreak
  nameWithType: EditingCommands.EnterParagraphBreak
  fullName: System.Windows.Documents.EditingCommands.EnterParagraphBreak
- uid: System.Windows.Documents.EditingCommands.IgnoreSpellingError
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IgnoreSpellingError
  nameWithType: EditingCommands.IgnoreSpellingError
  fullName: System.Windows.Documents.EditingCommands.IgnoreSpellingError
- uid: System.Windows.Documents.EditingCommands.IncreaseFontSize
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IncreaseFontSize
  nameWithType: EditingCommands.IncreaseFontSize
  fullName: System.Windows.Documents.EditingCommands.IncreaseFontSize
- uid: System.Windows.Documents.EditingCommands.IncreaseIndentation
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IncreaseIndentation
  nameWithType: EditingCommands.IncreaseIndentation
  fullName: System.Windows.Documents.EditingCommands.IncreaseIndentation
- uid: System.Windows.Documents.EditingCommands.MoveDownByLine
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByLine
  nameWithType: EditingCommands.MoveDownByLine
  fullName: System.Windows.Documents.EditingCommands.MoveDownByLine
- uid: System.Windows.Documents.EditingCommands.MoveDownByPage
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByPage
  nameWithType: EditingCommands.MoveDownByPage
  fullName: System.Windows.Documents.EditingCommands.MoveDownByPage
- uid: System.Windows.Documents.EditingCommands.MoveDownByParagraph
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByParagraph
  nameWithType: EditingCommands.MoveDownByParagraph
  fullName: System.Windows.Documents.EditingCommands.MoveDownByParagraph
- uid: System.Windows.Documents.EditingCommands.MoveLeftByCharacter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveLeftByCharacter
  nameWithType: EditingCommands.MoveLeftByCharacter
  fullName: System.Windows.Documents.EditingCommands.MoveLeftByCharacter
- uid: System.Windows.Documents.EditingCommands.MoveLeftByWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveLeftByWord
  nameWithType: EditingCommands.MoveLeftByWord
  fullName: System.Windows.Documents.EditingCommands.MoveLeftByWord
- uid: System.Windows.Documents.EditingCommands.MoveRightByCharacter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveRightByCharacter
  nameWithType: EditingCommands.MoveRightByCharacter
  fullName: System.Windows.Documents.EditingCommands.MoveRightByCharacter
- uid: System.Windows.Documents.EditingCommands.MoveRightByWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveRightByWord
  nameWithType: EditingCommands.MoveRightByWord
  fullName: System.Windows.Documents.EditingCommands.MoveRightByWord
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentEnd
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToDocumentEnd
  nameWithType: EditingCommands.MoveToDocumentEnd
  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentEnd
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentStart
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToDocumentStart
  nameWithType: EditingCommands.MoveToDocumentStart
  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentStart
- uid: System.Windows.Documents.EditingCommands.MoveToLineEnd
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToLineEnd
  nameWithType: EditingCommands.MoveToLineEnd
  fullName: System.Windows.Documents.EditingCommands.MoveToLineEnd
- uid: System.Windows.Documents.EditingCommands.MoveToLineStart
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToLineStart
  nameWithType: EditingCommands.MoveToLineStart
  fullName: System.Windows.Documents.EditingCommands.MoveToLineStart
- uid: System.Windows.Documents.EditingCommands.MoveUpByLine
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByLine
  nameWithType: EditingCommands.MoveUpByLine
  fullName: System.Windows.Documents.EditingCommands.MoveUpByLine
- uid: System.Windows.Documents.EditingCommands.MoveUpByPage
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByPage
  nameWithType: EditingCommands.MoveUpByPage
  fullName: System.Windows.Documents.EditingCommands.MoveUpByPage
- uid: System.Windows.Documents.EditingCommands.MoveUpByParagraph
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByParagraph
  nameWithType: EditingCommands.MoveUpByParagraph
  fullName: System.Windows.Documents.EditingCommands.MoveUpByParagraph
- uid: System.Windows.Documents.EditingCommands.SelectDownByLine
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByLine
  nameWithType: EditingCommands.SelectDownByLine
  fullName: System.Windows.Documents.EditingCommands.SelectDownByLine
- uid: System.Windows.Documents.EditingCommands.SelectDownByPage
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByPage
  nameWithType: EditingCommands.SelectDownByPage
  fullName: System.Windows.Documents.EditingCommands.SelectDownByPage
- uid: System.Windows.Documents.EditingCommands.SelectDownByParagraph
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByParagraph
  nameWithType: EditingCommands.SelectDownByParagraph
  fullName: System.Windows.Documents.EditingCommands.SelectDownByParagraph
- uid: System.Windows.Documents.EditingCommands.SelectLeftByCharacter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectLeftByCharacter
  nameWithType: EditingCommands.SelectLeftByCharacter
  fullName: System.Windows.Documents.EditingCommands.SelectLeftByCharacter
- uid: System.Windows.Documents.EditingCommands.SelectLeftByWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectLeftByWord
  nameWithType: EditingCommands.SelectLeftByWord
  fullName: System.Windows.Documents.EditingCommands.SelectLeftByWord
- uid: System.Windows.Documents.EditingCommands.SelectRightByCharacter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectRightByCharacter
  nameWithType: EditingCommands.SelectRightByCharacter
  fullName: System.Windows.Documents.EditingCommands.SelectRightByCharacter
- uid: System.Windows.Documents.EditingCommands.SelectRightByWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectRightByWord
  nameWithType: EditingCommands.SelectRightByWord
  fullName: System.Windows.Documents.EditingCommands.SelectRightByWord
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentEnd
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToDocumentEnd
  nameWithType: EditingCommands.SelectToDocumentEnd
  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentEnd
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentStart
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToDocumentStart
  nameWithType: EditingCommands.SelectToDocumentStart
  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentStart
- uid: System.Windows.Documents.EditingCommands.SelectToLineEnd
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToLineEnd
  nameWithType: EditingCommands.SelectToLineEnd
  fullName: System.Windows.Documents.EditingCommands.SelectToLineEnd
- uid: System.Windows.Documents.EditingCommands.SelectToLineStart
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToLineStart
  nameWithType: EditingCommands.SelectToLineStart
  fullName: System.Windows.Documents.EditingCommands.SelectToLineStart
- uid: System.Windows.Documents.EditingCommands.SelectUpByLine
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByLine
  nameWithType: EditingCommands.SelectUpByLine
  fullName: System.Windows.Documents.EditingCommands.SelectUpByLine
- uid: System.Windows.Documents.EditingCommands.SelectUpByPage
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByPage
  nameWithType: EditingCommands.SelectUpByPage
  fullName: System.Windows.Documents.EditingCommands.SelectUpByPage
- uid: System.Windows.Documents.EditingCommands.SelectUpByParagraph
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByParagraph
  nameWithType: EditingCommands.SelectUpByParagraph
  fullName: System.Windows.Documents.EditingCommands.SelectUpByParagraph
- uid: System.Windows.Documents.EditingCommands.TabBackward
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: TabBackward
  nameWithType: EditingCommands.TabBackward
  fullName: System.Windows.Documents.EditingCommands.TabBackward
- uid: System.Windows.Documents.EditingCommands.TabForward
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: TabForward
  nameWithType: EditingCommands.TabForward
  fullName: System.Windows.Documents.EditingCommands.TabForward
- uid: System.Windows.Documents.EditingCommands.ToggleBold
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleBold
  nameWithType: EditingCommands.ToggleBold
  fullName: System.Windows.Documents.EditingCommands.ToggleBold
- uid: System.Windows.Documents.EditingCommands.ToggleBullets
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleBullets
  nameWithType: EditingCommands.ToggleBullets
  fullName: System.Windows.Documents.EditingCommands.ToggleBullets
- uid: System.Windows.Documents.EditingCommands.ToggleInsert
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleInsert
  nameWithType: EditingCommands.ToggleInsert
  fullName: System.Windows.Documents.EditingCommands.ToggleInsert
- uid: System.Windows.Documents.EditingCommands.ToggleItalic
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleItalic
  nameWithType: EditingCommands.ToggleItalic
  fullName: System.Windows.Documents.EditingCommands.ToggleItalic
- uid: System.Windows.Documents.EditingCommands.ToggleNumbering
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleNumbering
  nameWithType: EditingCommands.ToggleNumbering
  fullName: System.Windows.Documents.EditingCommands.ToggleNumbering
- uid: System.Windows.Documents.EditingCommands.ToggleSubscript
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleSubscript
  nameWithType: EditingCommands.ToggleSubscript
  fullName: System.Windows.Documents.EditingCommands.ToggleSubscript
- uid: System.Windows.Documents.EditingCommands.ToggleSuperscript
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleSuperscript
  nameWithType: EditingCommands.ToggleSuperscript
  fullName: System.Windows.Documents.EditingCommands.ToggleSuperscript
- uid: System.Windows.Documents.EditingCommands.ToggleUnderline
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleUnderline
  nameWithType: EditingCommands.ToggleUnderline
  fullName: System.Windows.Documents.EditingCommands.ToggleUnderline
- uid: System.Windows.Documents.EditingCommands.AlignCenter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignCenter
  nameWithType: EditingCommands.AlignCenter
- uid: System.Windows.Documents.EditingCommands.AlignJustify*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignJustify
  nameWithType: EditingCommands.AlignJustify
- uid: System.Windows.Documents.EditingCommands.AlignLeft*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignLeft
  nameWithType: EditingCommands.AlignLeft
- uid: System.Windows.Documents.EditingCommands.AlignRight*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignRight
  nameWithType: EditingCommands.AlignRight
- uid: System.Windows.Documents.EditingCommands.Backspace*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: Backspace
  nameWithType: EditingCommands.Backspace
- uid: System.Windows.Documents.EditingCommands.CorrectSpellingError*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: CorrectSpellingError
  nameWithType: EditingCommands.CorrectSpellingError
- uid: System.Windows.Documents.EditingCommands.DecreaseFontSize*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DecreaseFontSize
  nameWithType: EditingCommands.DecreaseFontSize
- uid: System.Windows.Documents.EditingCommands.DecreaseIndentation*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DecreaseIndentation
  nameWithType: EditingCommands.DecreaseIndentation
- uid: System.Windows.Documents.EditingCommands.Delete*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: Delete
  nameWithType: EditingCommands.Delete
- uid: System.Windows.Documents.EditingCommands.DeleteNextWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DeleteNextWord
  nameWithType: EditingCommands.DeleteNextWord
- uid: System.Windows.Documents.EditingCommands.DeletePreviousWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DeletePreviousWord
  nameWithType: EditingCommands.DeletePreviousWord
- uid: System.Windows.Documents.EditingCommands.EnterLineBreak*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: EnterLineBreak
  nameWithType: EditingCommands.EnterLineBreak
- uid: System.Windows.Documents.EditingCommands.EnterParagraphBreak*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: EnterParagraphBreak
  nameWithType: EditingCommands.EnterParagraphBreak
- uid: System.Windows.Documents.EditingCommands.IgnoreSpellingError*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IgnoreSpellingError
  nameWithType: EditingCommands.IgnoreSpellingError
- uid: System.Windows.Documents.EditingCommands.IncreaseFontSize*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IncreaseFontSize
  nameWithType: EditingCommands.IncreaseFontSize
- uid: System.Windows.Documents.EditingCommands.IncreaseIndentation*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IncreaseIndentation
  nameWithType: EditingCommands.IncreaseIndentation
- uid: System.Windows.Documents.EditingCommands.MoveDownByLine*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByLine
  nameWithType: EditingCommands.MoveDownByLine
- uid: System.Windows.Documents.EditingCommands.MoveDownByPage*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByPage
  nameWithType: EditingCommands.MoveDownByPage
- uid: System.Windows.Documents.EditingCommands.MoveDownByParagraph*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByParagraph
  nameWithType: EditingCommands.MoveDownByParagraph
- uid: System.Windows.Documents.EditingCommands.MoveLeftByCharacter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveLeftByCharacter
  nameWithType: EditingCommands.MoveLeftByCharacter
- uid: System.Windows.Documents.EditingCommands.MoveLeftByWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveLeftByWord
  nameWithType: EditingCommands.MoveLeftByWord
- uid: System.Windows.Documents.EditingCommands.MoveRightByCharacter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveRightByCharacter
  nameWithType: EditingCommands.MoveRightByCharacter
- uid: System.Windows.Documents.EditingCommands.MoveRightByWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveRightByWord
  nameWithType: EditingCommands.MoveRightByWord
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentEnd*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToDocumentEnd
  nameWithType: EditingCommands.MoveToDocumentEnd
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentStart*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToDocumentStart
  nameWithType: EditingCommands.MoveToDocumentStart
- uid: System.Windows.Documents.EditingCommands.MoveToLineEnd*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToLineEnd
  nameWithType: EditingCommands.MoveToLineEnd
- uid: System.Windows.Documents.EditingCommands.MoveToLineStart*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToLineStart
  nameWithType: EditingCommands.MoveToLineStart
- uid: System.Windows.Documents.EditingCommands.MoveUpByLine*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByLine
  nameWithType: EditingCommands.MoveUpByLine
- uid: System.Windows.Documents.EditingCommands.MoveUpByPage*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByPage
  nameWithType: EditingCommands.MoveUpByPage
- uid: System.Windows.Documents.EditingCommands.MoveUpByParagraph*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByParagraph
  nameWithType: EditingCommands.MoveUpByParagraph
- uid: System.Windows.Documents.EditingCommands.SelectDownByLine*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByLine
  nameWithType: EditingCommands.SelectDownByLine
- uid: System.Windows.Documents.EditingCommands.SelectDownByPage*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByPage
  nameWithType: EditingCommands.SelectDownByPage
- uid: System.Windows.Documents.EditingCommands.SelectDownByParagraph*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByParagraph
  nameWithType: EditingCommands.SelectDownByParagraph
- uid: System.Windows.Documents.EditingCommands.SelectLeftByCharacter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectLeftByCharacter
  nameWithType: EditingCommands.SelectLeftByCharacter
- uid: System.Windows.Documents.EditingCommands.SelectLeftByWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectLeftByWord
  nameWithType: EditingCommands.SelectLeftByWord
- uid: System.Windows.Documents.EditingCommands.SelectRightByCharacter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectRightByCharacter
  nameWithType: EditingCommands.SelectRightByCharacter
- uid: System.Windows.Documents.EditingCommands.SelectRightByWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectRightByWord
  nameWithType: EditingCommands.SelectRightByWord
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentEnd*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToDocumentEnd
  nameWithType: EditingCommands.SelectToDocumentEnd
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentStart*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToDocumentStart
  nameWithType: EditingCommands.SelectToDocumentStart
- uid: System.Windows.Documents.EditingCommands.SelectToLineEnd*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToLineEnd
  nameWithType: EditingCommands.SelectToLineEnd
- uid: System.Windows.Documents.EditingCommands.SelectToLineStart*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToLineStart
  nameWithType: EditingCommands.SelectToLineStart
- uid: System.Windows.Documents.EditingCommands.SelectUpByLine*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByLine
  nameWithType: EditingCommands.SelectUpByLine
- uid: System.Windows.Documents.EditingCommands.SelectUpByPage*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByPage
  nameWithType: EditingCommands.SelectUpByPage
- uid: System.Windows.Documents.EditingCommands.SelectUpByParagraph*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByParagraph
  nameWithType: EditingCommands.SelectUpByParagraph
- uid: System.Windows.Documents.EditingCommands.TabBackward*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: TabBackward
  nameWithType: EditingCommands.TabBackward
- uid: System.Windows.Documents.EditingCommands.TabForward*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: TabForward
  nameWithType: EditingCommands.TabForward
- uid: System.Windows.Documents.EditingCommands.ToggleBold*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleBold
  nameWithType: EditingCommands.ToggleBold
- uid: System.Windows.Documents.EditingCommands.ToggleBullets*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleBullets
  nameWithType: EditingCommands.ToggleBullets
- uid: System.Windows.Documents.EditingCommands.ToggleInsert*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleInsert
  nameWithType: EditingCommands.ToggleInsert
- uid: System.Windows.Documents.EditingCommands.ToggleItalic*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleItalic
  nameWithType: EditingCommands.ToggleItalic
- uid: System.Windows.Documents.EditingCommands.ToggleNumbering*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleNumbering
  nameWithType: EditingCommands.ToggleNumbering
- uid: System.Windows.Documents.EditingCommands.ToggleSubscript*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleSubscript
  nameWithType: EditingCommands.ToggleSubscript
- uid: System.Windows.Documents.EditingCommands.ToggleSuperscript*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleSuperscript
  nameWithType: EditingCommands.ToggleSuperscript
- uid: System.Windows.Documents.EditingCommands.ToggleUnderline*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleUnderline
  nameWithType: EditingCommands.ToggleUnderline
