### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.ITable
  id: ITable
  children:
  - System.Data.Linq.ITable.Attach(System.Object)
  - System.Data.Linq.ITable.Attach(System.Object,System.Boolean)
  - System.Data.Linq.ITable.Attach(System.Object,System.Object)
  - System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)
  - System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)
  - System.Data.Linq.ITable.Context
  - System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)
  - System.Data.Linq.ITable.DeleteOnSubmit(System.Object)
  - System.Data.Linq.ITable.GetModifiedMembers(System.Object)
  - System.Data.Linq.ITable.GetOriginalEntityState(System.Object)
  - System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)
  - System.Data.Linq.ITable.InsertOnSubmit(System.Object)
  - System.Data.Linq.ITable.IsReadOnly
  langs:
  - csharp
  name: ITable
  nameWithType: ITable
  fullName: System.Data.Linq.ITable
  type: Interface
  summary: "약한 형식의 쿼리 시나리오에 사용 합니다."
  remarks: "메서드에 대 한 자세한 내용은 <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> 을 참조 하십시오."
  syntax:
    content: 'public interface ITable : System.Collections.IEnumerable, System.Linq.IQueryable'
  implements:
  - System.Collections.IEnumerable
  - System.Linq.IQueryable
  platform:
  - net462
- uid: System.Data.Linq.ITable.Attach(System.Object)
  id: Attach(System.Object)
  parent: System.Data.Linq.ITable
  langs:
  - csharp
  name: Attach(Object)
  nameWithType: ITable.Attach(Object)
  fullName: System.Data.Linq.ITable.Attach(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "엔터티를 연결 된 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> 수정 되지 않은 상태입니다."
  remarks: "이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 [데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void Attach (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "연결할 엔터티입니다."
  overload: System.Data.Linq.ITable.Attach*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ITable.Attach(System.Object,System.Boolean)
  id: Attach(System.Object,System.Boolean)
  parent: System.Data.Linq.ITable
  langs:
  - csharp
  name: Attach(Object,Boolean)
  nameWithType: ITable.Attach(Object,Boolean)
  fullName: System.Data.Linq.ITable.Attach(Object,Boolean)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "컬렉션의 모든 항목는 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> 수정 되거나 수정 되지 않은 상태에 있습니다."
  remarks: "이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 [데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void Attach (object entity, bool asModified);
    parameters:
    - id: entity
      type: System.Object
      description: "엔터티 컬렉션입니다."
    - id: asModified
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>에 수정 된 엔터티를 연결 합니다."
  overload: System.Data.Linq.ITable.Attach*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ITable.Attach(System.Object,System.Object)
  id: Attach(System.Object,System.Object)
  parent: System.Data.Linq.ITable
  langs:
  - csharp
  name: Attach(Object,Object)
  nameWithType: ITable.Attach(Object,Object)
  fullName: System.Data.Linq.ITable.Attach(Object,Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "엔터티를 연결 된 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> 엔터티와 원래 상태로 지정 하 여 수정 되거나 수정 되지 않은 상태 중 하나입니다."
  remarks: "이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 [데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void Attach (object entity, object original);
    parameters:
    - id: entity
      type: System.Object
      description: "연결할 엔터티입니다."
    - id: original
      type: System.Object
      description: "원래 값이 포함 된 데이터 멤버와 동일한 엔터티 형식의 인스턴스."
  overload: System.Data.Linq.ITable.Attach*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)
  id: AttachAll(System.Collections.IEnumerable)
  parent: System.Data.Linq.ITable
  langs:
  - csharp
  name: AttachAll(IEnumerable)
  nameWithType: ITable.AttachAll(IEnumerable)
  fullName: System.Data.Linq.ITable.AttachAll(IEnumerable)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "컬렉션의 모든 항목는 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> 수정 되거나 수정 되지 않은 상태에 있습니다."
  remarks: "이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 [데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void AttachAll (System.Collections.IEnumerable entities);
    parameters:
    - id: entities
      type: System.Collections.IEnumerable
      description: "엔터티 컬렉션입니다."
  overload: System.Data.Linq.ITable.AttachAll*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)
  id: AttachAll(System.Collections.IEnumerable,System.Boolean)
  parent: System.Data.Linq.ITable
  langs:
  - csharp
  name: AttachAll(IEnumerable,Boolean)
  nameWithType: ITable.AttachAll(IEnumerable,Boolean)
  fullName: System.Data.Linq.ITable.AttachAll(IEnumerable,Boolean)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "컬렉션의 모든 항목는 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> 수정 되거나 수정 되지 않은 상태에 있습니다."
  remarks: "이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 [데이터 검색 및 CUD 작업 N 계층 응용 프로그램 (LINQ to SQL)에서](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void AttachAll (System.Collections.IEnumerable entities, bool asModified);
    parameters:
    - id: entities
      type: System.Collections.IEnumerable
      description: "엔터티 컬렉션입니다."
    - id: asModified
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>에 수정 된 엔터티를 연결 합니다."
  overload: System.Data.Linq.ITable.AttachAll*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ITable.Context
  id: Context
  parent: System.Data.Linq.ITable
  langs:
  - csharp
  name: Context
  nameWithType: ITable.Context
  fullName: System.Data.Linq.ITable.Context
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "가져옵니다는 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> 이 검색에 사용 되었던 <xref href=&quot;System.Data.Linq.ITable&quot;> </xref>합니다."
  syntax:
    content: public System.Data.Linq.DataContext Context { get; }
    return:
      type: System.Data.Linq.DataContext
      description: "<xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> 검색 하는 데는 <xref href=&quot;System.Data.Linq.ITable&quot;> </xref>합니다."
  overload: System.Data.Linq.ITable.Context*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)
  id: DeleteAllOnSubmit(System.Collections.IEnumerable)
  parent: System.Data.Linq.ITable
  langs:
  - csharp
  name: DeleteAllOnSubmit(IEnumerable)
  nameWithType: ITable.DeleteAllOnSubmit(IEnumerable)
  fullName: System.Data.Linq.ITable.DeleteAllOnSubmit(IEnumerable)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "컬렉션의 모든 엔터티는 <xref uid=&quot;langword_csharp_pending delete&quot; name=&quot;pending delete&quot; href=&quot;&quot;> </xref> 상태입니다."
  remarks: "호출 <xref:System.Data.Linq.DataContext.SubmitChanges%2A>는 데이터베이스에서 실제로 삭제를 수행할 수 있습니다.</xref:System.Data.Linq.DataContext.SubmitChanges%2A>"
  syntax:
    content: public void DeleteAllOnSubmit (System.Collections.IEnumerable entities);
    parameters:
    - id: entities
      type: System.Collections.IEnumerable
      description: "모든 항목이 제거 되는 컬렉션입니다."
  overload: System.Data.Linq.ITable.DeleteAllOnSubmit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ITable.DeleteOnSubmit(System.Object)
  id: DeleteOnSubmit(System.Object)
  parent: System.Data.Linq.ITable
  langs:
  - csharp
  name: DeleteOnSubmit(Object)
  nameWithType: ITable.DeleteOnSubmit(Object)
  fullName: System.Data.Linq.ITable.DeleteOnSubmit(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "이 테이블의 엔터티는 <xref uid=&quot;langword_csharp_pending delete&quot; name=&quot;pending delete&quot; href=&quot;&quot;> </xref> 상태입니다."
  remarks: "연결 되지 않은 엔터티를 삭제 하려면 먼저 연결 해야 합니다. 호출 <xref:System.Data.Linq.DataContext.SubmitChanges%2A>는 데이터베이스에서 실제로 삭제를 수행할 수 있습니다.</xref:System.Data.Linq.DataContext.SubmitChanges%2A>"
  syntax:
    content: public void DeleteOnSubmit (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "제거할 엔터티입니다."
  overload: System.Data.Linq.ITable.DeleteOnSubmit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ITable.GetModifiedMembers(System.Object)
  id: GetModifiedMembers(System.Object)
  parent: System.Data.Linq.ITable
  langs:
  - csharp
  name: GetModifiedMembers(Object)
  nameWithType: ITable.GetModifiedMembers(Object)
  fullName: System.Data.Linq.ITable.GetModifiedMembers(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "현재 및 원래 값을 포함 하는 수정 된 멤버의 배열을 반환 합니다."
  syntax:
    content: public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "배열 얻을 수 있는 엔터티."
    return:
      type: System.Data.Linq.ModifiedMemberInfo[]
      description: "현재 및 원래 값을 포함 하는 수정 된 멤버의 배열을 반환 합니다."
  overload: System.Data.Linq.ITable.GetModifiedMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ITable.GetOriginalEntityState(System.Object)
  id: GetOriginalEntityState(System.Object)
  parent: System.Data.Linq.ITable
  langs:
  - csharp
  name: GetOriginalEntityState(Object)
  nameWithType: ITable.GetOriginalEntityState(Object)
  fullName: System.Data.Linq.ITable.GetOriginalEntityState(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "원래 값을 검색 합니다."
  remarks: "다음 사항에 주의:-엔터티 인수에는 null 이어야 합니다. 그렇지 않으면 null 인수 예외가 throw 됩니다.      -의 경우 강력한 형식의 (`TEntity`) 메서드를 종류 매핑되어야 하며 엔터티 형식 이어야 합니다. 즉, 개체 ID 정보가 매핑도에 있어야 합니다. 이렇게 하지 않으면 잘못 된 형식 예외가 throw 됩니다."
  syntax:
    content: public object GetOriginalEntityState (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "원래 값을 검색할 엔터티."
    return:
      type: System.Object
      description: "원래 엔터티입니다의 복사본입니다. 값이 전달 된 엔터티를 추적 되지 않은 경우 null입니다. 하기 전에 클라이언트에서 다시 전송 하는 연결 되지 않은 엔터티를 연결 해야는 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> 의 상태 추적을 시작할 수 있습니다. 새로 연결 된 엔터티 &quot;원래 상태로&quot;는 클라이언트에서 제공 하는 값을 기반으로 설정 됩니다. 데이터 컨텍스트 연결이 끊긴 엔터티의 상태를 추적 하지 않습니다."
  overload: System.Data.Linq.ITable.GetOriginalEntityState*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)
  id: InsertAllOnSubmit(System.Collections.IEnumerable)
  parent: System.Data.Linq.ITable
  langs:
  - csharp
  name: InsertAllOnSubmit(IEnumerable)
  nameWithType: ITable.InsertAllOnSubmit(IEnumerable)
  fullName: System.Data.Linq.ITable.InsertAllOnSubmit(IEnumerable)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "컬렉션의 모든 엔터티는 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> 에 <xref uid=&quot;langword_csharp_pending insert&quot; name=&quot;pending insert&quot; href=&quot;&quot;> </xref> 상태입니다."
  remarks: "호출 <xref:System.Data.Linq.DataContext.SubmitChanges%2A>데이터베이스에 실제로 삽입을 수행 하려면.</xref:System.Data.Linq.DataContext.SubmitChanges%2A>"
  syntax:
    content: public void InsertAllOnSubmit (System.Collections.IEnumerable entities);
    parameters:
    - id: entities
      type: System.Collections.IEnumerable
      description: "추가할 엔터티입니다."
  overload: System.Data.Linq.ITable.InsertAllOnSubmit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ITable.InsertOnSubmit(System.Object)
  id: InsertOnSubmit(System.Object)
  parent: System.Data.Linq.ITable
  langs:
  - csharp
  name: InsertOnSubmit(Object)
  nameWithType: ITable.InsertOnSubmit(Object)
  fullName: System.Data.Linq.ITable.InsertOnSubmit(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "엔터티에 추가 하는 <xref uid=&quot;langword_csharp_pending insert&quot; name=&quot;pending insert&quot; href=&quot;&quot;> </xref> 이 테이블에 상태입니다."
  remarks: "호출 <xref:System.Data.Linq.DataContext.SubmitChanges%2A>데이터베이스에 실제로 삽입을 수행 하려면.</xref:System.Data.Linq.DataContext.SubmitChanges%2A>"
  syntax:
    content: public void InsertOnSubmit (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "추가할 엔터티입니다."
  overload: System.Data.Linq.ITable.InsertOnSubmit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ITable.IsReadOnly
  id: IsReadOnly
  parent: System.Data.Linq.ITable
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ITable.IsReadOnly
  fullName: System.Data.Linq.ITable.IsReadOnly
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "이에 포함 된 엔터티 형식을 나타냅니다 <xref href=&quot;System.Data.Linq.ITable&quot;> </xref> 인스턴스는 기본 키가 있습니다."
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "반환 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 엔터티 형식에는 기본 키가 없는 경우 그렇지 않으면 false입니다."
  overload: System.Data.Linq.ITable.IsReadOnly*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Linq.ITable.Attach(System.Object)
  parent: System.Data.Linq.ITable
  isExternal: false
  name: Attach(Object)
  nameWithType: ITable.Attach(Object)
  fullName: System.Data.Linq.ITable.Attach(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Linq.ITable.Attach(System.Object,System.Boolean)
  parent: System.Data.Linq.ITable
  isExternal: false
  name: Attach(Object,Boolean)
  nameWithType: ITable.Attach(Object,Boolean)
  fullName: System.Data.Linq.ITable.Attach(Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.ITable.Attach(System.Object,System.Object)
  parent: System.Data.Linq.ITable
  isExternal: false
  name: Attach(Object,Object)
  nameWithType: ITable.Attach(Object,Object)
  fullName: System.Data.Linq.ITable.Attach(Object,Object)
- uid: System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)
  parent: System.Data.Linq.ITable
  isExternal: false
  name: AttachAll(IEnumerable)
  nameWithType: ITable.AttachAll(IEnumerable)
  fullName: System.Data.Linq.ITable.AttachAll(IEnumerable)
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)
  parent: System.Data.Linq.ITable
  isExternal: false
  name: AttachAll(IEnumerable,Boolean)
  nameWithType: ITable.AttachAll(IEnumerable,Boolean)
  fullName: System.Data.Linq.ITable.AttachAll(IEnumerable,Boolean)
- uid: System.Data.Linq.ITable.Context
  parent: System.Data.Linq.ITable
  isExternal: false
  name: Context
  nameWithType: ITable.Context
  fullName: System.Data.Linq.ITable.Context
- uid: System.Data.Linq.DataContext
  parent: System.Data.Linq
  isExternal: false
  name: DataContext
  nameWithType: DataContext
  fullName: System.Data.Linq.DataContext
- uid: System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)
  parent: System.Data.Linq.ITable
  isExternal: false
  name: DeleteAllOnSubmit(IEnumerable)
  nameWithType: ITable.DeleteAllOnSubmit(IEnumerable)
  fullName: System.Data.Linq.ITable.DeleteAllOnSubmit(IEnumerable)
- uid: System.Data.Linq.ITable.DeleteOnSubmit(System.Object)
  parent: System.Data.Linq.ITable
  isExternal: false
  name: DeleteOnSubmit(Object)
  nameWithType: ITable.DeleteOnSubmit(Object)
  fullName: System.Data.Linq.ITable.DeleteOnSubmit(Object)
- uid: System.Data.Linq.ITable.GetModifiedMembers(System.Object)
  parent: System.Data.Linq.ITable
  isExternal: false
  name: GetModifiedMembers(Object)
  nameWithType: ITable.GetModifiedMembers(Object)
  fullName: System.Data.Linq.ITable.GetModifiedMembers(Object)
- uid: System.Data.Linq.ModifiedMemberInfo[]
  parent: System.Data.Linq
  isExternal: false
  name: ModifiedMemberInfo
  nameWithType: ModifiedMemberInfo
  fullName: System.Data.Linq.ModifiedMemberInfo[]
  spec.csharp:
  - uid: System.Data.Linq.ModifiedMemberInfo
    name: ModifiedMemberInfo
    nameWithType: ModifiedMemberInfo
    fullName: ModifiedMemberInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Linq.ITable.GetOriginalEntityState(System.Object)
  parent: System.Data.Linq.ITable
  isExternal: false
  name: GetOriginalEntityState(Object)
  nameWithType: ITable.GetOriginalEntityState(Object)
  fullName: System.Data.Linq.ITable.GetOriginalEntityState(Object)
- uid: System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)
  parent: System.Data.Linq.ITable
  isExternal: false
  name: InsertAllOnSubmit(IEnumerable)
  nameWithType: ITable.InsertAllOnSubmit(IEnumerable)
  fullName: System.Data.Linq.ITable.InsertAllOnSubmit(IEnumerable)
- uid: System.Data.Linq.ITable.InsertOnSubmit(System.Object)
  parent: System.Data.Linq.ITable
  isExternal: false
  name: InsertOnSubmit(Object)
  nameWithType: ITable.InsertOnSubmit(Object)
  fullName: System.Data.Linq.ITable.InsertOnSubmit(Object)
- uid: System.Data.Linq.ITable.IsReadOnly
  parent: System.Data.Linq.ITable
  isExternal: false
  name: IsReadOnly
  nameWithType: ITable.IsReadOnly
  fullName: System.Data.Linq.ITable.IsReadOnly
- uid: System.Data.Linq.ITable.Attach*
  parent: System.Data.Linq.ITable
  isExternal: false
  name: Attach
  nameWithType: ITable.Attach
- uid: System.Data.Linq.ITable.AttachAll*
  parent: System.Data.Linq.ITable
  isExternal: false
  name: AttachAll
  nameWithType: ITable.AttachAll
- uid: System.Data.Linq.ITable.Context*
  parent: System.Data.Linq.ITable
  isExternal: false
  name: Context
  nameWithType: ITable.Context
- uid: System.Data.Linq.ITable.DeleteAllOnSubmit*
  parent: System.Data.Linq.ITable
  isExternal: false
  name: DeleteAllOnSubmit
  nameWithType: ITable.DeleteAllOnSubmit
- uid: System.Data.Linq.ITable.DeleteOnSubmit*
  parent: System.Data.Linq.ITable
  isExternal: false
  name: DeleteOnSubmit
  nameWithType: ITable.DeleteOnSubmit
- uid: System.Data.Linq.ITable.GetModifiedMembers*
  parent: System.Data.Linq.ITable
  isExternal: false
  name: GetModifiedMembers
  nameWithType: ITable.GetModifiedMembers
- uid: System.Data.Linq.ITable.GetOriginalEntityState*
  parent: System.Data.Linq.ITable
  isExternal: false
  name: GetOriginalEntityState
  nameWithType: ITable.GetOriginalEntityState
- uid: System.Data.Linq.ITable.InsertAllOnSubmit*
  parent: System.Data.Linq.ITable
  isExternal: false
  name: InsertAllOnSubmit
  nameWithType: ITable.InsertAllOnSubmit
- uid: System.Data.Linq.ITable.InsertOnSubmit*
  parent: System.Data.Linq.ITable
  isExternal: false
  name: InsertOnSubmit
  nameWithType: ITable.InsertOnSubmit
- uid: System.Data.Linq.ITable.IsReadOnly*
  parent: System.Data.Linq.ITable
  isExternal: false
  name: IsReadOnly
  nameWithType: ITable.IsReadOnly
