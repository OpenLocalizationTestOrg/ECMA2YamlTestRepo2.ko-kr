### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ManifestSignatureInformation
  id: ManifestSignatureInformation
  children:
  - System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature
  - System.Security.Cryptography.ManifestSignatureInformation.Manifest
  - System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature
  - System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext)
  - System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds)
  - System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Security.Cryptography.X509Certificates.X509RevocationMode)
  langs:
  - csharp
  name: ManifestSignatureInformation
  nameWithType: ManifestSignatureInformation
  fullName: System.Security.Cryptography.ManifestSignatureInformation
  type: Class
  summary: "매니페스트 서명에 대 한 정보를 제공합니다."
  remarks: "사용 하 여는 <xref:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature%2A>를 얻는 메서드를 한 <xref:System.Security.Cryptography.ManifestSignatureInformationCollection>서명 정보를 검사 하는 데 사용할 수 있는 개체입니다.</xref:System.Security.Cryptography.ManifestSignatureInformationCollection> </xref:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature%2A>"
  syntax:
    content: public sealed class ManifestSignatureInformation
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature
  id: AuthenticodeSignature
  parent: System.Security.Cryptography.ManifestSignatureInformation
  langs:
  - csharp
  name: AuthenticodeSignature
  nameWithType: ManifestSignatureInformation.AuthenticodeSignature
  fullName: System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "매니페스트의 Authenticode 서명 정보를 가져옵니다."
  syntax:
    content: public System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation AuthenticodeSignature { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation&quot;> </xref> 매니페스트의 경우 Authenticode 서명 정보를 포함 하는 개체 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 서명이 없습니다."
  overload: System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ManifestSignatureInformation.Manifest
  id: Manifest
  parent: System.Security.Cryptography.ManifestSignatureInformation
  langs:
  - csharp
  name: Manifest
  nameWithType: ManifestSignatureInformation.Manifest
  fullName: System.Security.Cryptography.ManifestSignatureInformation.Manifest
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "매니페스트의 형식을 가져옵니다."
  syntax:
    content: public System.Security.ManifestKinds Manifest { get; }
    return:
      type: System.Security.ManifestKinds
      description: "중 하나는 <xref href=&quot;System.Security.ManifestKinds&quot;> </xref> 값입니다."
  overload: System.Security.Cryptography.ManifestSignatureInformation.Manifest*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature
  id: StrongNameSignature
  parent: System.Security.Cryptography.ManifestSignatureInformation
  langs:
  - csharp
  name: StrongNameSignature
  nameWithType: ManifestSignatureInformation.StrongNameSignature
  fullName: System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "매니페스트의 강력한 이름 서명의 세부 정보를 가져옵니다."
  syntax:
    content: public System.Security.Cryptography.StrongNameSignatureInformation StrongNameSignature { get; }
    return:
      type: System.Security.Cryptography.StrongNameSignatureInformation
      description: "서명을 포함 하는 StrongNameSignature 개체 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 강력한 이름 서명이 없습니다."
  overload: System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext)
  id: VerifySignature(System.ActivationContext)
  parent: System.Security.Cryptography.ManifestSignatureInformation
  langs:
  - csharp
  name: VerifySignature(ActivationContext)
  nameWithType: ManifestSignatureInformation.VerifySignature(ActivationContext)
  fullName: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(ActivationContext)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "수집 하 여 지정 된 활성화 컨텍스트에 속해 있는 매니페스트 서명에 대 한 정보를 확인 합니다."
  syntax:
    content: public static System.Security.Cryptography.ManifestSignatureInformationCollection VerifySignature (ActivationContext application);
    parameters:
    - id: application
      type: System.ActivationContext
      description: "매니페스트의 활성화 컨텍스트입니다. 활성화 컨텍스트는 응용 프로그램에 속한 여러 매니페스트를 포함 합니다."
    return:
      type: System.Security.Cryptography.ManifestSignatureInformationCollection
      description: "포함 하는 컬렉션 한 <xref href=&quot;System.Security.Cryptography.ManifestSignatureInformation&quot;> </xref> 확인 된 각 매니페스트에 대 한 개체입니다."
  overload: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>application</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds)
  id: VerifySignature(System.ActivationContext,System.Security.ManifestKinds)
  parent: System.Security.Cryptography.ManifestSignatureInformation
  langs:
  - csharp
  name: VerifySignature(ActivationContext,ManifestKinds)
  nameWithType: ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds)
  fullName: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "수집 하 여 지정된 된 활성화 컨텍스트에 속하고 하 매니페스트 형식 매니페스트의 서명에 대 한 정보를 확인 합니다."
  syntax:
    content: public static System.Security.Cryptography.ManifestSignatureInformationCollection VerifySignature (ActivationContext application, System.Security.ManifestKinds manifests);
    parameters:
    - id: application
      type: System.ActivationContext
      description: "매니페스트의 활성화 컨텍스트입니다. 활성화 컨텍스트는 응용 프로그램에 속한 여러 매니페스트를 포함 합니다."
    - id: manifests
      type: System.Security.ManifestKinds
      description: "매니페스트 형식입니다. 이 매개 변수를 확인 하려는 활성화 컨텍스트에서 매니페스트를 지정 합니다."
    return:
      type: System.Security.Cryptography.ManifestSignatureInformationCollection
      description: "포함 하는 컬렉션 한 <xref href=&quot;System.Security.Cryptography.ManifestSignatureInformation&quot;> </xref> 확인 된 각 매니페스트에 대 한 개체입니다."
  overload: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>application</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Security.Cryptography.X509Certificates.X509RevocationMode)
  id: VerifySignature(System.ActivationContext,System.Security.ManifestKinds,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Security.Cryptography.X509Certificates.X509RevocationMode)
  parent: System.Security.Cryptography.ManifestSignatureInformation
  langs:
  - csharp
  name: VerifySignature(ActivationContext,ManifestKinds,X509RevocationFlag,X509RevocationMode)
  nameWithType: ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds,X509RevocationFlag,X509RevocationMode)
  fullName: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds,X509RevocationFlag,X509RevocationMode)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "수집 하 고 지정 된 활성화 컨텍스트 및 매니페스트 형식에 속하는 매니페스트 서명에 대 한 정보를 확인 및 인증서 해지를 선택 하려면 허용 합니다."
  syntax:
    content: public static System.Security.Cryptography.ManifestSignatureInformationCollection VerifySignature (ActivationContext application, System.Security.ManifestKinds manifests, System.Security.Cryptography.X509Certificates.X509RevocationFlag revocationFlag, System.Security.Cryptography.X509Certificates.X509RevocationMode revocationMode);
    parameters:
    - id: application
      type: System.ActivationContext
      description: "매니페스트의 응용 프로그램 컨텍스트입니다. 활성화 컨텍스트는 응용 프로그램에 속한 여러 매니페스트를 포함 합니다."
    - id: manifests
      type: System.Security.ManifestKinds
      description: "매니페스트 형식입니다. 이 매개 변수를 확인 하려는 활성화 컨텍스트에서 매니페스트를 지정 합니다."
    - id: revocationFlag
      type: System.Security.Cryptography.X509Certificates.X509RevocationFlag
      description: "체인의 인증서 해지 여부를 확인할 지정 하는 열거형 값 중 하나입니다. 기본값은 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509RevocationFlag&quot;> </xref>합니다."
    - id: revocationMode
      type: System.Security.Cryptography.X509Certificates.X509RevocationMode
      description: "X.509 확인 표시를 해지 목록에 대 한 온라인 있는지 여부를 결정 합니다."
    return:
      type: System.Security.Cryptography.ManifestSignatureInformationCollection
      description: "포함 하는 컬렉션 한 <xref href=&quot;System.Security.Cryptography.ManifestSignatureInformation&quot;> </xref> 확인 된 각 매니페스트에 대 한 개체입니다."
  overload: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>application</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "값이 지정 된 <code> revocationFlag </code> 또는 <code> revocationMode </code> 매개 변수가 올바르지 않습니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature
  parent: System.Security.Cryptography.ManifestSignatureInformation
  isExternal: false
  name: AuthenticodeSignature
  nameWithType: ManifestSignatureInformation.AuthenticodeSignature
  fullName: System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature
- uid: System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: AuthenticodeSignatureInformation
  nameWithType: AuthenticodeSignatureInformation
  fullName: System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation
- uid: System.Security.Cryptography.ManifestSignatureInformation.Manifest
  parent: System.Security.Cryptography.ManifestSignatureInformation
  isExternal: false
  name: Manifest
  nameWithType: ManifestSignatureInformation.Manifest
  fullName: System.Security.Cryptography.ManifestSignatureInformation.Manifest
- uid: System.Security.ManifestKinds
  parent: System.Security
  isExternal: false
  name: ManifestKinds
  nameWithType: ManifestKinds
  fullName: System.Security.ManifestKinds
- uid: System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature
  parent: System.Security.Cryptography.ManifestSignatureInformation
  isExternal: false
  name: StrongNameSignature
  nameWithType: ManifestSignatureInformation.StrongNameSignature
  fullName: System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature
- uid: System.Security.Cryptography.StrongNameSignatureInformation
  parent: System.Security.Cryptography
  isExternal: false
  name: StrongNameSignatureInformation
  nameWithType: StrongNameSignatureInformation
  fullName: System.Security.Cryptography.StrongNameSignatureInformation
- uid: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext)
  parent: System.Security.Cryptography.ManifestSignatureInformation
  isExternal: false
  name: VerifySignature(ActivationContext)
  nameWithType: ManifestSignatureInformation.VerifySignature(ActivationContext)
  fullName: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(ActivationContext)
- uid: System.Security.Cryptography.ManifestSignatureInformationCollection
  parent: System.Security.Cryptography
  isExternal: false
  name: ManifestSignatureInformationCollection
  nameWithType: ManifestSignatureInformationCollection
  fullName: System.Security.Cryptography.ManifestSignatureInformationCollection
- uid: System.ActivationContext
  parent: System
  isExternal: false
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
- uid: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds)
  parent: System.Security.Cryptography.ManifestSignatureInformation
  isExternal: false
  name: VerifySignature(ActivationContext,ManifestKinds)
  nameWithType: ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds)
  fullName: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds)
- uid: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Security.Cryptography.X509Certificates.X509RevocationMode)
  parent: System.Security.Cryptography.ManifestSignatureInformation
  isExternal: false
  name: VerifySignature(ActivationContext,ManifestKinds,X509RevocationFlag,X509RevocationMode)
  nameWithType: ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds,X509RevocationFlag,X509RevocationMode)
  fullName: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(ActivationContext,ManifestKinds,X509RevocationFlag,X509RevocationMode)
- uid: System.Security.Cryptography.X509Certificates.X509RevocationFlag
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509RevocationFlag
  nameWithType: X509RevocationFlag
  fullName: System.Security.Cryptography.X509Certificates.X509RevocationFlag
- uid: System.Security.Cryptography.X509Certificates.X509RevocationMode
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509RevocationMode
  nameWithType: X509RevocationMode
  fullName: System.Security.Cryptography.X509Certificates.X509RevocationMode
- uid: System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature*
  parent: System.Security.Cryptography.ManifestSignatureInformation
  isExternal: false
  name: AuthenticodeSignature
  nameWithType: ManifestSignatureInformation.AuthenticodeSignature
- uid: System.Security.Cryptography.ManifestSignatureInformation.Manifest*
  parent: System.Security.Cryptography.ManifestSignatureInformation
  isExternal: false
  name: Manifest
  nameWithType: ManifestSignatureInformation.Manifest
- uid: System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature*
  parent: System.Security.Cryptography.ManifestSignatureInformation
  isExternal: false
  name: StrongNameSignature
  nameWithType: ManifestSignatureInformation.StrongNameSignature
- uid: System.Security.Cryptography.ManifestSignatureInformation.VerifySignature*
  parent: System.Security.Cryptography.ManifestSignatureInformation
  isExternal: false
  name: VerifySignature
  nameWithType: ManifestSignatureInformation.VerifySignature
