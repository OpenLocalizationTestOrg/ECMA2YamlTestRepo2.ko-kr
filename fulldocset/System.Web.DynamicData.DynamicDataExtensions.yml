### YamlMime:ManagedReference
items:
- uid: System.Web.DynamicData.DynamicDataExtensions
  id: DynamicDataExtensions
  children:
  - System.Web.DynamicData.DynamicDataExtensions.ConvertEditedValue(System.Web.DynamicData.IFieldFormattingOptions@,System.String)
  - System.Web.DynamicData.DynamicDataExtensions.EnablePersistedSelection(System.Web.UI.WebControls.BaseDataBoundControl@)
  - System.Web.DynamicData.DynamicDataExtensions.ExpandDynamicWhereParameters(System.Web.DynamicData.IDynamicDataSource@)
  - System.Web.DynamicData.DynamicDataExtensions.FindDataSourceControl(System.Web.UI.Control@)
  - System.Web.DynamicData.DynamicDataExtensions.FindFieldTemplate(System.Web.UI.Control@,System.String)
  - System.Web.DynamicData.DynamicDataExtensions.FindMetaTable(System.Web.UI.Control@)
  - System.Web.DynamicData.DynamicDataExtensions.FormatEditValue(System.Web.DynamicData.IFieldFormattingOptions@,System.Object)
  - System.Web.DynamicData.DynamicDataExtensions.FormatValue(System.Web.DynamicData.IFieldFormattingOptions@,System.Object)
  - System.Web.DynamicData.DynamicDataExtensions.GetDefaultValues(System.Web.UI.IDataSource@)
  - System.Web.DynamicData.DynamicDataExtensions.GetDefaultValues(System.Web.UI.INamingContainer@)
  - System.Web.DynamicData.DynamicDataExtensions.GetEnumType(System.Web.DynamicData.MetaColumn@)
  - System.Web.DynamicData.DynamicDataExtensions.GetMetaTable(System.Web.UI.IDataSource@)
  - System.Web.DynamicData.DynamicDataExtensions.GetMetaTable(System.Web.UI.INamingContainer@)
  - System.Web.DynamicData.DynamicDataExtensions.GetTable(System.Web.DynamicData.IDynamicDataSource@)
  - System.Web.DynamicData.DynamicDataExtensions.LoadWith``1(System.Web.UI.WebControls.LinqDataSource@)
  - System.Web.DynamicData.DynamicDataExtensions.LoadWithForeignKeys(System.Web.UI.WebControls.LinqDataSource@,System.Type)
  - System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable)
  - System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable,System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable,System.Object)
  - System.Web.DynamicData.DynamicDataExtensions.TryGetMetaTable(System.Web.UI.IDataSource@,System.Web.DynamicData.MetaTable@)
  - System.Web.DynamicData.DynamicDataExtensions.TryGetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable@)
  langs:
  - csharp
  name: DynamicDataExtensions
  nameWithType: DynamicDataExtensions
  fullName: System.Web.DynamicData.DynamicDataExtensions
  type: Class
  summary: "ASP.NET Dynamic Data에 사용 되는 확장 메서드를 제공 합니다."
  syntax:
    content: public static class DynamicDataExtensions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.ConvertEditedValue(System.Web.DynamicData.IFieldFormattingOptions@,System.String)
  id: ConvertEditedValue(System.Web.DynamicData.IFieldFormattingOptions@,System.String)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: ConvertEditedValue(IFieldFormattingOptions,String)
  nameWithType: DynamicDataExtensions.ConvertEditedValue(IFieldFormattingOptions,String)
  fullName: System.Web.DynamicData.DynamicDataExtensions.ConvertEditedValue(IFieldFormattingOptions,String)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "유효성을 검사할 컨트롤에 대 한 사용자가 제공 된 값을 반환 합니다."
  remarks: "서식 옵션에 대 한 내용은 참조는 <xref:System.Web.DynamicData.IFieldFormattingOptions>개요를 입력 합니다.</xref:System.Web.DynamicData.IFieldFormattingOptions>"
  example:
  - "The following example shows how to use the ConvertEditedValue method. The example gets user input from a field template that is configured to accept date-time data. In the DynamicData\\FieldTemplates\\DateTime_Edit.ascx.cs or DynamicData\\FieldTemplates\\DateTime_Edit.ascx.vb file, the method converts empty strings to `null`.  \n  \n [!code-cs[System.Web.DynamicData.DynamicDataExtensions#3](~/add/codesnippet/csharp/1ef0bca6-aaf5-492d-acd1-_1.cs)]"
  syntax:
    content: public static object ConvertEditedValue (this System.Web.DynamicData.IFieldFormattingOptions formattingOptions, string value);
    parameters:
    - id: formattingOptions
      type: System.Web.DynamicData.IFieldFormattingOptions
      description: "서식 옵션 개체에 정의 된 대로 <xref href=&quot;System.Web.DynamicData.IFieldFormattingOptions&quot;> </xref> 개체입니다."
    - id: value
      type: System.String
      description: "변환할 입력된 값입니다."
    return:
      type: System.Object
      description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>if <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or an empty string and the <>*> property of <code>formattingOptions</code> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>; <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우 <code> value </code> 않습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 빈 문자열과 일치 하는 항목 또는 <> </> *> 속성의 <code> formattingOptions </code>, 그렇지 않으면 변경 되지 않은 값의 <code> value </code>합니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.ConvertEditedValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.EnablePersistedSelection(System.Web.UI.WebControls.BaseDataBoundControl@)
  id: EnablePersistedSelection(System.Web.UI.WebControls.BaseDataBoundControl@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: EnablePersistedSelection(BaseDataBoundControl)
  nameWithType: DynamicDataExtensions.EnablePersistedSelection(BaseDataBoundControl)
  fullName: System.Web.DynamicData.DynamicDataExtensions.EnablePersistedSelection(BaseDataBoundControl)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "선택 영역을을 선택 및 페이징을 지원 데이터 컨트롤에 유지 될 수 있습니다."
  remarks: "확장 하는 컨트롤에서 <xref:System.Web.UI.WebControls.BaseDataBoundControl>선택 영역을 지 원하는이 메서드를 호출 하면 선택 된 행이 표시 되지 않는 경우에 선택 영역을 유지 하도록 컨트롤 페이징 및 정렬,.</xref:System.Web.UI.WebControls.BaseDataBoundControl> 예를 들어 사용자가 행을 선택 하 고 다음 페이지 링크를 다른 페이지 또는 사용자 데이터를 정렬 하는 경우 선택 된 행 선택 되어 있습니다. 이 메서드는, 사용자 페이지 하거나 정렬 하는 경우 선택 항목이 손실 됩니다.       <xref:System.Web.DynamicData.DynamicDataManager.RegisterControl%2A>EnablePersistedSelection 메서드를 호출 합니다.</xref:System.Web.DynamicData.DynamicDataManager.RegisterControl%2A>"
  syntax:
    content: public static void EnablePersistedSelection (this System.Web.UI.WebControls.BaseDataBoundControl dataBoundControl);
    parameters:
    - id: dataBoundControl
      type: System.Web.UI.WebControls.BaseDataBoundControl
      description: "데이터 바인딩된 컨트롤."
  overload: System.Web.DynamicData.DynamicDataExtensions.EnablePersistedSelection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.ExpandDynamicWhereParameters(System.Web.DynamicData.IDynamicDataSource@)
  id: ExpandDynamicWhereParameters(System.Web.DynamicData.IDynamicDataSource@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: ExpandDynamicWhereParameters(IDynamicDataSource)
  nameWithType: DynamicDataExtensions.ExpandDynamicWhereParameters(IDynamicDataSource)
  fullName: System.Web.DynamicData.DynamicDataExtensions.ExpandDynamicWhereParameters(IDynamicDataSource)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "동적 필터를 확장 <xref uid=&quot;langword_csharp_Where&quot; name=&quot;Where&quot; href=&quot;&quot;> </xref> 데이터 원본에서 사용할 수 있는 매개 변수입니다."
  remarks: "이 메서드는 확장의 현재 인스턴스 값의 <xref:System.Web.DynamicData.DynamicControlParameter>및 <xref:System.Web.DynamicData.DynamicQueryStringParameter>에 제어 `Where` 쿼리 데이터 원본에서 사용할 수 있는 매개 변수.</xref:System.Web.DynamicData.DynamicQueryStringParameter> </xref:System.Web.DynamicData.DynamicControlParameter>"
  syntax:
    content: public static void ExpandDynamicWhereParameters (this System.Web.DynamicData.IDynamicDataSource dataSource);
    parameters:
    - id: dataSource
      type: System.Web.DynamicData.IDynamicDataSource
      description: "데이터 원본 개체입니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.ExpandDynamicWhereParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.FindDataSourceControl(System.Web.UI.Control@)
  id: FindDataSourceControl(System.Web.UI.Control@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: FindDataSourceControl(Control)
  nameWithType: DynamicDataExtensions.FindDataSourceControl(Control)
  fullName: System.Web.DynamicData.DynamicDataExtensions.FindDataSourceControl(Control)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "지정된 된 컨트롤에 대 한 데이터 컨트롤과 연결 된 데이터 소스를 반환 합니다."
  remarks: ''
  example:
  - "The following example shows how to find the containing data source control. In the example, the Dynamic Data page templates are copied to the \\DynamicData\\CustomPages\\ProductDescriptions folder to provide a custom display for the ProductDescription table of the AdventureWorksLT database. The Insert.aspx file markup is changed to add an `OnDataBound` event handler named `DetailsView1_DataBound`, in which the FindDataSourceControl method is called to find the data source control.  \n  \n [!code-cs[System.Web.DynamicData.DynamicDataExtensions#1](~/add/codesnippet/csharp/891f3768-5749-4318-8a27-_1.cs)]  \n[!code-cs[System.Web.DynamicData.DynamicDataExtensions#2](~/add/codesnippet/csharp/891f3768-5749-4318-8a27-_2.aspx)]"
  syntax:
    content: public static System.Web.DynamicData.IDynamicDataSource FindDataSourceControl (this System.Web.UI.Control current);
    parameters:
    - id: current
      type: System.Web.UI.Control
      description: "컨트롤에 포함 된 데이터 바인딩 컨트롤의 계층 구조 안에 있는 컨트롤을 찾으려고 합니다."
    return:
      type: System.Web.DynamicData.IDynamicDataSource
      description: "지정된 된 컨트롤에 대 한 데이터 컨트롤에 연관 된 데이터 원본입니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.FindDataSourceControl*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.FindFieldTemplate(System.Web.UI.Control@,System.String)
  id: FindFieldTemplate(System.Web.UI.Control@,System.String)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: FindFieldTemplate(Control,String)
  nameWithType: DynamicDataExtensions.FindFieldTemplate(Control,String)
  fullName: System.Web.DynamicData.DynamicDataExtensions.FindFieldTemplate(Control,String)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "지정된 된 컨트롤의 지정된 된 열에 대 한 필드 서식 파일의 명명 컨테이너를 반환 합니다."
  remarks: ''
  example:
  - "The following example shows how to find the text box control for a specified column name. In example, the Dynamic Data page templates are copied to the \\DynamicData\\CustomPages\\ProductDescriptions folder to provide a custom display for the ProductDescription table of the AdventureWorksLT database. The Insert.aspx file markup is changed to add an `OnDataBound` event handler named `DetailsView1_DataBound`, in which the <xref:System.Web.DynamicData.DynamicDataExtensions.FindDataSourceControl%2A> method is called to find a text box control.  \n  \n [!code-cs[System.Web.DynamicData.DynamicDataExtensions#1](~/add/codesnippet/csharp/a9a49ffb-dded-4e65-a1d7-_1.cs)]  \n[!code-cs[System.Web.DynamicData.DynamicDataExtensions#2](~/add/codesnippet/csharp/a9a49ffb-dded-4e65-a1d7-_2.aspx)]"
  syntax:
    content: public static System.Web.UI.Control FindFieldTemplate (this System.Web.UI.Control control, string columnName);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "포함 하는 컨트롤입니다."
    - id: columnName
      type: System.String
      description: "열의 이름입니다."
    return:
      type: System.Web.UI.Control
      description: "지정된 된 컨트롤의 명명 컨테이너의 지정된 된 열에 대 한 필드 템플릿."
  overload: System.Web.DynamicData.DynamicDataExtensions.FindFieldTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.FindMetaTable(System.Web.UI.Control@)
  id: FindMetaTable(System.Web.UI.Control@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: FindMetaTable(Control)
  nameWithType: DynamicDataExtensions.FindMetaTable(Control)
  fullName: System.Web.DynamicData.DynamicDataExtensions.FindMetaTable(Control)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "포함 하는 데이터 컨트롤에 대 한 metatable 개체를 반환합니다."
  remarks: ''
  example:
  - "The following example shows how to find the <xref:System.Web.DynamicData.MetaTable> object for a control. In the example, the Dynamic Data page templates are copied to the \\DynamicData\\CustomPages\\ProductDescriptions folder to provide a custom display for the ProductDescription table of the AdventureWorksLT database. The Insert.aspx file markup is changed to add an `OnDataBound` event handler named `DetailsView1_DataBound`, in which the FindMetaTable method is called to find the <xref:System.Web.DynamicData.MetaTable> object.  \n  \n [!code-cs[System.Web.DynamicData.DynamicDataExtensions#1](~/add/codesnippet/csharp/287a14db-c680-4865-9ec7-_1.cs)]  \n[!code-cs[System.Web.DynamicData.DynamicDataExtensions#2](~/add/codesnippet/csharp/287a14db-c680-4865-9ec7-_2.aspx)]"
  syntax:
    content: public static System.Web.DynamicData.MetaTable FindMetaTable (this System.Web.UI.Control current);
    parameters:
    - id: current
      type: System.Web.UI.Control
      description: "현재 컨트롤입니다."
    return:
      type: System.Web.DynamicData.MetaTable
      description: "포함 하는 데이터 컨트롤에 대 한 metatable 개체입니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.FindMetaTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.FormatEditValue(System.Web.DynamicData.IFieldFormattingOptions@,System.Object)
  id: FormatEditValue(System.Web.DynamicData.IFieldFormattingOptions@,System.Object)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: FormatEditValue(IFieldFormattingOptions,Object)
  nameWithType: DynamicDataExtensions.FormatEditValue(IFieldFormattingOptions,Object)
  fullName: System.Web.DynamicData.DynamicDataExtensions.FormatEditValue(IFieldFormattingOptions,Object)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "지정된 된 서식 옵션을 사용 하 여 지정된 된 필드 값 형식을 지정 합니다."
  remarks: "FormatEditValue 메서드는 <xref:System.Web.DynamicData.DynamicDataExtensions.FormatValue%2A>메서드, 하지만 필드가 편집 모드에 있을 때 사용 됩니다.</xref:System.Web.DynamicData.DynamicDataExtensions.FormatValue%2A>"
  syntax:
    content: public static string FormatEditValue (this System.Web.DynamicData.IFieldFormattingOptions formattingOptions, object fieldValue);
    parameters:
    - id: formattingOptions
      type: System.Web.DynamicData.IFieldFormattingOptions
      description: "<xref href=&quot;System.Web.DynamicData.IFieldFormattingOptions&quot;> </xref> 인스턴스를 사용 합니다."
    - id: fieldValue
      type: System.Object
      description: "서식을 지정 하려면 필드 값입니다."
    return:
      type: System.String
      description: "지정된 된 서식 옵션을 사용 하 여 포맷 된 필드 값입니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.FormatEditValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.FormatValue(System.Web.DynamicData.IFieldFormattingOptions@,System.Object)
  id: FormatValue(System.Web.DynamicData.IFieldFormattingOptions@,System.Object)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: FormatValue(IFieldFormattingOptions,Object)
  nameWithType: DynamicDataExtensions.FormatValue(IFieldFormattingOptions,Object)
  fullName: System.Web.DynamicData.DynamicDataExtensions.FormatValue(IFieldFormattingOptions,Object)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "지정된 된 서식 옵션을 사용 하 여 지정된 된 필드 값 형식을 지정 합니다."
  syntax:
    content: public static string FormatValue (this System.Web.DynamicData.IFieldFormattingOptions formattingOptions, object fieldValue);
    parameters:
    - id: formattingOptions
      type: System.Web.DynamicData.IFieldFormattingOptions
      description: "<xref href=&quot;System.Web.DynamicData.IFieldFormattingOptions&quot;> </xref> 인스턴스를 사용 합니다."
    - id: fieldValue
      type: System.Object
      description: "서식을 지정 하려면 필드 값입니다."
    return:
      type: System.String
      description: "지정된 된 서식 옵션을 사용 하 여 포맷 된 필드 값입니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.FormatValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.GetDefaultValues(System.Web.UI.IDataSource@)
  id: GetDefaultValues(System.Web.UI.IDataSource@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: GetDefaultValues(IDataSource)
  nameWithType: DynamicDataExtensions.GetDefaultValues(IDataSource)
  fullName: System.Web.DynamicData.DynamicDataExtensions.GetDefaultValues(IDataSource)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "지정된 된 데이터 원본에 대 한 기본 값의 컬렉션을 가져옵니다."
  remarks: "기본값의 컬렉션을 사용 하 여 설정 된 <xref:System.Web.DynamicData.DynamicDataExtensions.SetMetaTable%2A>또는 <xref:System.Web.UI.DataControlExtensions.EnableDynamicData%2A>메서드.</xref:System.Web.UI.DataControlExtensions.EnableDynamicData%2A> </xref:System.Web.DynamicData.DynamicDataExtensions.SetMetaTable%2A>"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,object> GetDefaultValues (this System.Web.UI.IDataSource dataSource);
    parameters:
    - id: dataSource
      type: System.Web.UI.IDataSource
      description: "기본 값을 가져올 대상에 대 한 데이터 원본입니다."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "와 관련 된 기본값의 컬렉션은 <xref href=&quot;System.Web.UI.IDataSource&quot;> </xref> 개체입니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.GetDefaultValues*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.GetDefaultValues(System.Web.UI.INamingContainer@)
  id: GetDefaultValues(System.Web.UI.INamingContainer@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: GetDefaultValues(INamingContainer)
  nameWithType: DynamicDataExtensions.GetDefaultValues(INamingContainer)
  fullName: System.Web.DynamicData.DynamicDataExtensions.GetDefaultValues(INamingContainer)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "지정된 된 데이터 컨트롤에 대 한 기본 값의 컬렉션을 가져옵니다."
  remarks: "기본값의 컬렉션을 사용 하 여 설정 된 <xref:System.Web.DynamicData.DynamicDataExtensions.SetMetaTable%2A>또는 <xref:System.Web.UI.DataControlExtensions.EnableDynamicData%2A>메서드.</xref:System.Web.UI.DataControlExtensions.EnableDynamicData%2A> </xref:System.Web.DynamicData.DynamicDataExtensions.SetMetaTable%2A>"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,object> GetDefaultValues (this System.Web.UI.INamingContainer control);
    parameters:
    - id: control
      type: System.Web.UI.INamingContainer
      description: "기본 값을 가져올 대상에 대 한 데이터 컨트롤입니다."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "와 관련 된 기본값의 컬렉션은 <xref href=&quot;System.Web.UI.INamingContainer&quot;> </xref> 개체입니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.GetDefaultValues*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.GetEnumType(System.Web.DynamicData.MetaColumn@)
  id: GetEnumType(System.Web.DynamicData.MetaColumn@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: GetEnumType(MetaColumn)
  nameWithType: DynamicDataExtensions.GetEnumType(MetaColumn)
  fullName: System.Web.DynamicData.DynamicDataExtensions.GetEnumType(MetaColumn)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "열을 나타내는 열거형의 유형을 가져옵니다."
  remarks: "열의 기본 형식은 열거형이 아니면 열 엔터티 partial 클래스에 주석을 처리 하는 열거형을 나타내면는 <xref:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute>특성.</xref:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute>"
  syntax:
    content: public static Type GetEnumType (this System.Web.DynamicData.MetaColumn column);
    parameters:
    - id: column
      type: System.Web.DynamicData.MetaColumn
      description: "열에 대 한 열거형 형식을 가져올입니다."
    return:
      type: System.Type
      description: "기본 형식은 열거형;이 경우 열을 나타내는 열거형의 유형 그렇지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.GetEnumType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.GetMetaTable(System.Web.UI.IDataSource@)
  id: GetMetaTable(System.Web.UI.IDataSource@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: GetMetaTable(IDataSource)
  nameWithType: DynamicDataExtensions.GetMetaTable(IDataSource)
  fullName: System.Web.DynamicData.DynamicDataExtensions.GetMetaTable(IDataSource)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "지정 된 데이터 원본 개체의 테이블에 대 한 메타 데이터를 가져옵니다."
  remarks: "테이블 메타 데이터를 사용 하 여 설정한는 <xref:System.Web.DynamicData.DynamicDataExtensions.SetMetaTable%2A>또는 <xref:System.Web.UI.DataControlExtensions.EnableDynamicData%2A>메서드.</xref:System.Web.UI.DataControlExtensions.EnableDynamicData%2A> </xref:System.Web.DynamicData.DynamicDataExtensions.SetMetaTable%2A>"
  syntax:
    content: public static System.Web.DynamicData.MetaTable GetMetaTable (this System.Web.UI.IDataSource dataSource);
    parameters:
    - id: dataSource
      type: System.Web.UI.IDataSource
      description: "데이터 원본 개체를 가져올 테이블 메타 데이터입니다."
    return:
      type: System.Web.DynamicData.MetaTable
      description: "와 연결 된 테이블 메타 데이터는 <xref href=&quot;System.Web.UI.IDataSource&quot;> </xref> 개체입니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.GetMetaTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.GetMetaTable(System.Web.UI.INamingContainer@)
  id: GetMetaTable(System.Web.UI.INamingContainer@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: GetMetaTable(INamingContainer)
  nameWithType: DynamicDataExtensions.GetMetaTable(INamingContainer)
  fullName: System.Web.DynamicData.DynamicDataExtensions.GetMetaTable(INamingContainer)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "지정된 된 데이터 컨트롤에 대 한 테이블 메타 데이터를 가져옵니다."
  remarks: "테이블 메타 데이터를 사용 하 여 설정한는 <xref:System.Web.DynamicData.DynamicDataExtensions.SetMetaTable%2A>또는 <xref:System.Web.UI.DataControlExtensions.EnableDynamicData%2A>메서드.</xref:System.Web.UI.DataControlExtensions.EnableDynamicData%2A> </xref:System.Web.DynamicData.DynamicDataExtensions.SetMetaTable%2A>"
  syntax:
    content: public static System.Web.DynamicData.MetaTable GetMetaTable (this System.Web.UI.INamingContainer control);
    parameters:
    - id: control
      type: System.Web.UI.INamingContainer
      description: "테이블 메타 데이터를 가져올 데이터 컨트롤입니다."
    return:
      type: System.Web.DynamicData.MetaTable
      description: "연결 된 테이블 메타 데이터는 <xref href=&quot;System.Web.UI.INamingContainer&quot;> </xref> 개체입니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.GetMetaTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.GetTable(System.Web.DynamicData.IDynamicDataSource@)
  id: GetTable(System.Web.DynamicData.IDynamicDataSource@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: GetTable(IDynamicDataSource)
  nameWithType: DynamicDataExtensions.GetTable(IDynamicDataSource)
  fullName: System.Web.DynamicData.DynamicDataExtensions.GetTable(IDynamicDataSource)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "반환 된 <xref href=&quot;System.Web.DynamicData.MetaTable&quot;> </xref> 지정 된 데이터 소스 컨트롤과 연결 된 개체입니다."
  syntax:
    content: public static System.Web.DynamicData.MetaTable GetTable (this System.Web.DynamicData.IDynamicDataSource dataSource);
    parameters:
    - id: dataSource
      type: System.Web.DynamicData.IDynamicDataSource
      description: "데이터 소스 제어 합니다."
    return:
      type: System.Web.DynamicData.MetaTable
      description: "지정된 된 데이터와 연결 된 테이블을 소스 제어 합니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.GetTable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <>*> property of <code>dataSource</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <>*> property of <code>dataSource</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.LoadWith``1(System.Web.UI.WebControls.LinqDataSource@)
  id: LoadWith``1(System.Web.UI.WebControls.LinqDataSource@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: LoadWith(LinqDataSource)
  nameWithType: DynamicDataExtensions.LoadWith(LinqDataSource)
  fullName: System.Web.DynamicData.DynamicDataExtensions.LoadWith(LinqDataSource)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  syntax:
    content: public static void LoadWith<TEntity> (this System.Web.UI.WebControls.LinqDataSource dataSource);
    parameters:
    - id: dataSource
      type: System.Web.UI.WebControls.LinqDataSource
      description: "추가할 수 있습니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.LoadWith<TEntity>*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.LoadWithForeignKeys(System.Web.UI.WebControls.LinqDataSource@,System.Type)
  id: LoadWithForeignKeys(System.Web.UI.WebControls.LinqDataSource@,System.Type)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: LoadWithForeignKeys(LinqDataSource,Type)
  nameWithType: DynamicDataExtensions.LoadWithForeignKeys(LinqDataSource,Type)
  fullName: System.Web.DynamicData.DynamicDataExtensions.LoadWithForeignKeys(LinqDataSource,Type)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "설정의 <xref href=&quot;System.Data.Linq.DataLoadOptions&quot;> </xref> 로드 되도록 모든 외래 키 엔터티를 강제로 LINQ to SQL 데이터 소스의 값입니다."
  remarks: "자세한 내용은 참조는 <xref:System.Data.Linq.DataLoadOptions?displayProperty=fullName>클래스 개요.</xref:System.Data.Linq.DataLoadOptions?displayProperty=fullName>"
  syntax:
    content: public static void LoadWithForeignKeys (this System.Web.UI.WebControls.LinqDataSource dataSource, Type rowType);
    parameters:
    - id: dataSource
      type: System.Web.UI.WebControls.LinqDataSource
      description: "LINQ 데이터 소스에서 외래 키를 로드입니다."
    - id: rowType
      type: System.Type
      description: "데이터 원본에 의해 반환 되는 엔터티 형식입니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.LoadWithForeignKeys*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable)
  id: SetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: SetMetaTable(INamingContainer,MetaTable)
  nameWithType: DynamicDataExtensions.SetMetaTable(INamingContainer,MetaTable)
  fullName: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(INamingContainer,MetaTable)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "지정된 된 데이터 컨트롤에 대 한 테이블 메타 데이터를 설정합니다."
  syntax:
    content: public static void SetMetaTable (this System.Web.UI.INamingContainer control, System.Web.DynamicData.MetaTable table);
    parameters:
    - id: control
      type: System.Web.UI.INamingContainer
      description: "<xref href=&quot;System.Web.UI.INamingContainer&quot;> </xref> 테이블을 포함 하는 개체입니다."
    - id: table
      type: System.Web.DynamicData.MetaTable
      description: "테이블 메타 데이터입니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: SetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: SetMetaTable(INamingContainer,MetaTable,IDictionary<String,Object>)
  nameWithType: DynamicDataExtensions.SetMetaTable(INamingContainer,MetaTable,IDictionary<String,Object>)
  fullName: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(INamingContainer,MetaTable,IDictionary<String,Object>)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "지정된 된 데이터 컨트롤에 대 한 테이블 메타 데이터와 기본 값 매핑을 설정합니다."
  syntax:
    content: public static void SetMetaTable (this System.Web.UI.INamingContainer control, System.Web.DynamicData.MetaTable table, System.Collections.Generic.IDictionary<string,object> defaultValues);
    parameters:
    - id: control
      type: System.Web.UI.INamingContainer
      description: "<xref href=&quot;System.Web.UI.INamingContainer&quot;> </xref> 테이블을 포함 하는 개체입니다."
    - id: table
      type: System.Web.DynamicData.MetaTable
      description: "테이블 메타 데이터입니다."
    - id: defaultValues
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "기본값 매핑입니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable,System.Object)
  id: SetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable,System.Object)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: SetMetaTable(INamingContainer,MetaTable,Object)
  nameWithType: DynamicDataExtensions.SetMetaTable(INamingContainer,MetaTable,Object)
  fullName: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(INamingContainer,MetaTable,Object)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "지정된 된 데이터 컨트롤에 대 한 테이블 메타 데이터와 기본 값 매핑을 설정합니다."
  syntax:
    content: public static void SetMetaTable (this System.Web.UI.INamingContainer control, System.Web.DynamicData.MetaTable table, object defaultValues);
    parameters:
    - id: control
      type: System.Web.UI.INamingContainer
      description: "<xref href=&quot;System.Web.UI.INamingContainer&quot;> </xref> 테이블을 포함 하는 개체입니다."
    - id: table
      type: System.Web.DynamicData.MetaTable
      description: "테이블 메타 데이터입니다."
    - id: defaultValues
      type: System.Object
      description: "기본값 매핑입니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.TryGetMetaTable(System.Web.UI.IDataSource@,System.Web.DynamicData.MetaTable@)
  id: TryGetMetaTable(System.Web.UI.IDataSource@,System.Web.DynamicData.MetaTable@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: TryGetMetaTable(IDataSource,MetaTable)
  nameWithType: DynamicDataExtensions.TryGetMetaTable(IDataSource,MetaTable)
  fullName: System.Web.DynamicData.DynamicDataExtensions.TryGetMetaTable(IDataSource,MetaTable)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "테이블 메타 데이터를 사용할 수 있는지 여부를 결정 합니다."
  syntax:
    content: public static bool TryGetMetaTable (this System.Web.UI.IDataSource dataSource, out System.Web.DynamicData.MetaTable table);
    parameters:
    - id: dataSource
      type: System.Web.UI.IDataSource
      description: "테이블을 포함 하는 데이터 원본입니다."
    - id: table
      type: System.Web.DynamicData.MetaTable
      description: "이 메서드가 반환 될 때 테이블 메타 데이터를 포함 합니다. 이 매개 변수는 초기화 되지 않은 상태로 전달 됩니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>테이블 메타 데이터를 사용할 수 없는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.TryGetMetaTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicDataExtensions.TryGetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable@)
  id: TryGetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  langs:
  - csharp
  name: TryGetMetaTable(INamingContainer,MetaTable)
  nameWithType: DynamicDataExtensions.TryGetMetaTable(INamingContainer,MetaTable)
  fullName: System.Web.DynamicData.DynamicDataExtensions.TryGetMetaTable(INamingContainer,MetaTable)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "테이블 메타 데이터를 사용할 수 있는지 여부를 결정 합니다."
  syntax:
    content: public static bool TryGetMetaTable (this System.Web.UI.INamingContainer control, out System.Web.DynamicData.MetaTable table);
    parameters:
    - id: control
      type: System.Web.UI.INamingContainer
      description: "<xref href=&quot;System.Web.UI.INamingContainer&quot;> </xref> 테이블을 포함 하는 개체입니다."
    - id: table
      type: System.Web.DynamicData.MetaTable
      description: "이 메서드가 반환 될 때 테이블 메타 데이터를 포함 합니다. 이 매개 변수는 초기화 되지 않은 상태로 전달 됩니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>테이블 메타 데이터를 사용할 수 없는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.DynamicData.DynamicDataExtensions.TryGetMetaTable*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.DynamicData.DynamicDataExtensions.ConvertEditedValue(System.Web.DynamicData.IFieldFormattingOptions@,System.String)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: ConvertEditedValue(IFieldFormattingOptions,String)
  nameWithType: DynamicDataExtensions.ConvertEditedValue(IFieldFormattingOptions,String)
  fullName: System.Web.DynamicData.DynamicDataExtensions.ConvertEditedValue(IFieldFormattingOptions,String)
- uid: System.Web.DynamicData.IFieldFormattingOptions
  parent: System.Web.DynamicData
  isExternal: false
  name: IFieldFormattingOptions
  nameWithType: IFieldFormattingOptions
  fullName: System.Web.DynamicData.IFieldFormattingOptions
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.DynamicData.DynamicDataExtensions.EnablePersistedSelection(System.Web.UI.WebControls.BaseDataBoundControl@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: EnablePersistedSelection(BaseDataBoundControl)
  nameWithType: DynamicDataExtensions.EnablePersistedSelection(BaseDataBoundControl)
  fullName: System.Web.DynamicData.DynamicDataExtensions.EnablePersistedSelection(BaseDataBoundControl)
- uid: System.Web.UI.WebControls.BaseDataBoundControl
  parent: System.Web.UI.WebControls
  isExternal: false
  name: BaseDataBoundControl
  nameWithType: BaseDataBoundControl
  fullName: System.Web.UI.WebControls.BaseDataBoundControl
- uid: System.Web.DynamicData.DynamicDataExtensions.ExpandDynamicWhereParameters(System.Web.DynamicData.IDynamicDataSource@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: ExpandDynamicWhereParameters(IDynamicDataSource)
  nameWithType: DynamicDataExtensions.ExpandDynamicWhereParameters(IDynamicDataSource)
  fullName: System.Web.DynamicData.DynamicDataExtensions.ExpandDynamicWhereParameters(IDynamicDataSource)
- uid: System.Web.DynamicData.IDynamicDataSource
  parent: System.Web.DynamicData
  isExternal: false
  name: IDynamicDataSource
  nameWithType: IDynamicDataSource
  fullName: System.Web.DynamicData.IDynamicDataSource
- uid: System.Web.DynamicData.DynamicDataExtensions.FindDataSourceControl(System.Web.UI.Control@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: FindDataSourceControl(Control)
  nameWithType: DynamicDataExtensions.FindDataSourceControl(Control)
  fullName: System.Web.DynamicData.DynamicDataExtensions.FindDataSourceControl(Control)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.DynamicData.DynamicDataExtensions.FindFieldTemplate(System.Web.UI.Control@,System.String)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: FindFieldTemplate(Control,String)
  nameWithType: DynamicDataExtensions.FindFieldTemplate(Control,String)
  fullName: System.Web.DynamicData.DynamicDataExtensions.FindFieldTemplate(Control,String)
- uid: System.Web.DynamicData.DynamicDataExtensions.FindMetaTable(System.Web.UI.Control@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: FindMetaTable(Control)
  nameWithType: DynamicDataExtensions.FindMetaTable(Control)
  fullName: System.Web.DynamicData.DynamicDataExtensions.FindMetaTable(Control)
- uid: System.Web.DynamicData.MetaTable
  parent: System.Web.DynamicData
  isExternal: false
  name: MetaTable
  nameWithType: MetaTable
  fullName: System.Web.DynamicData.MetaTable
- uid: System.Web.DynamicData.DynamicDataExtensions.FormatEditValue(System.Web.DynamicData.IFieldFormattingOptions@,System.Object)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: FormatEditValue(IFieldFormattingOptions,Object)
  nameWithType: DynamicDataExtensions.FormatEditValue(IFieldFormattingOptions,Object)
  fullName: System.Web.DynamicData.DynamicDataExtensions.FormatEditValue(IFieldFormattingOptions,Object)
- uid: System.Web.DynamicData.DynamicDataExtensions.FormatValue(System.Web.DynamicData.IFieldFormattingOptions@,System.Object)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: FormatValue(IFieldFormattingOptions,Object)
  nameWithType: DynamicDataExtensions.FormatValue(IFieldFormattingOptions,Object)
  fullName: System.Web.DynamicData.DynamicDataExtensions.FormatValue(IFieldFormattingOptions,Object)
- uid: System.Web.DynamicData.DynamicDataExtensions.GetDefaultValues(System.Web.UI.IDataSource@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: GetDefaultValues(IDataSource)
  nameWithType: DynamicDataExtensions.GetDefaultValues(IDataSource)
  fullName: System.Web.DynamicData.DynamicDataExtensions.GetDefaultValues(IDataSource)
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,Object>
  nameWithType: IDictionary<String,Object>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.IDataSource
  parent: System.Web.UI
  isExternal: false
  name: IDataSource
  nameWithType: IDataSource
  fullName: System.Web.UI.IDataSource
- uid: System.Web.DynamicData.DynamicDataExtensions.GetDefaultValues(System.Web.UI.INamingContainer@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: GetDefaultValues(INamingContainer)
  nameWithType: DynamicDataExtensions.GetDefaultValues(INamingContainer)
  fullName: System.Web.DynamicData.DynamicDataExtensions.GetDefaultValues(INamingContainer)
- uid: System.Web.UI.INamingContainer
  parent: System.Web.UI
  isExternal: false
  name: INamingContainer
  nameWithType: INamingContainer
  fullName: System.Web.UI.INamingContainer
- uid: System.Web.DynamicData.DynamicDataExtensions.GetEnumType(System.Web.DynamicData.MetaColumn@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: GetEnumType(MetaColumn)
  nameWithType: DynamicDataExtensions.GetEnumType(MetaColumn)
  fullName: System.Web.DynamicData.DynamicDataExtensions.GetEnumType(MetaColumn)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.DynamicData.MetaColumn
  parent: System.Web.DynamicData
  isExternal: false
  name: MetaColumn
  nameWithType: MetaColumn
  fullName: System.Web.DynamicData.MetaColumn
- uid: System.Web.DynamicData.DynamicDataExtensions.GetMetaTable(System.Web.UI.IDataSource@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: GetMetaTable(IDataSource)
  nameWithType: DynamicDataExtensions.GetMetaTable(IDataSource)
  fullName: System.Web.DynamicData.DynamicDataExtensions.GetMetaTable(IDataSource)
- uid: System.Web.DynamicData.DynamicDataExtensions.GetMetaTable(System.Web.UI.INamingContainer@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: GetMetaTable(INamingContainer)
  nameWithType: DynamicDataExtensions.GetMetaTable(INamingContainer)
  fullName: System.Web.DynamicData.DynamicDataExtensions.GetMetaTable(INamingContainer)
- uid: System.Web.DynamicData.DynamicDataExtensions.GetTable(System.Web.DynamicData.IDynamicDataSource@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: GetTable(IDynamicDataSource)
  nameWithType: DynamicDataExtensions.GetTable(IDynamicDataSource)
  fullName: System.Web.DynamicData.DynamicDataExtensions.GetTable(IDynamicDataSource)
- uid: System.Web.DynamicData.DynamicDataExtensions.LoadWith``1(System.Web.UI.WebControls.LinqDataSource@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: LoadWith(LinqDataSource)
  nameWithType: DynamicDataExtensions.LoadWith(LinqDataSource)
  fullName: System.Web.DynamicData.DynamicDataExtensions.LoadWith(LinqDataSource)
- uid: System.Web.UI.WebControls.LinqDataSource
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSource
  nameWithType: LinqDataSource
  fullName: System.Web.UI.WebControls.LinqDataSource
- uid: System.Web.DynamicData.DynamicDataExtensions.LoadWithForeignKeys(System.Web.UI.WebControls.LinqDataSource@,System.Type)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: LoadWithForeignKeys(LinqDataSource,Type)
  nameWithType: DynamicDataExtensions.LoadWithForeignKeys(LinqDataSource,Type)
  fullName: System.Web.DynamicData.DynamicDataExtensions.LoadWithForeignKeys(LinqDataSource,Type)
- uid: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: SetMetaTable(INamingContainer,MetaTable)
  nameWithType: DynamicDataExtensions.SetMetaTable(INamingContainer,MetaTable)
  fullName: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(INamingContainer,MetaTable)
- uid: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: SetMetaTable(INamingContainer,MetaTable,IDictionary<String,Object>)
  nameWithType: DynamicDataExtensions.SetMetaTable(INamingContainer,MetaTable,IDictionary<String,Object>)
  fullName: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(INamingContainer,MetaTable,IDictionary<String,Object>)
- uid: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable,System.Object)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: SetMetaTable(INamingContainer,MetaTable,Object)
  nameWithType: DynamicDataExtensions.SetMetaTable(INamingContainer,MetaTable,Object)
  fullName: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable(INamingContainer,MetaTable,Object)
- uid: System.Web.DynamicData.DynamicDataExtensions.TryGetMetaTable(System.Web.UI.IDataSource@,System.Web.DynamicData.MetaTable@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: TryGetMetaTable(IDataSource,MetaTable)
  nameWithType: DynamicDataExtensions.TryGetMetaTable(IDataSource,MetaTable)
  fullName: System.Web.DynamicData.DynamicDataExtensions.TryGetMetaTable(IDataSource,MetaTable)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.DynamicData.DynamicDataExtensions.TryGetMetaTable(System.Web.UI.INamingContainer@,System.Web.DynamicData.MetaTable@)
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: TryGetMetaTable(INamingContainer,MetaTable)
  nameWithType: DynamicDataExtensions.TryGetMetaTable(INamingContainer,MetaTable)
  fullName: System.Web.DynamicData.DynamicDataExtensions.TryGetMetaTable(INamingContainer,MetaTable)
- uid: System.Web.DynamicData.DynamicDataExtensions.ConvertEditedValue*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: ConvertEditedValue
  nameWithType: DynamicDataExtensions.ConvertEditedValue
- uid: System.Web.DynamicData.DynamicDataExtensions.EnablePersistedSelection*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: EnablePersistedSelection
  nameWithType: DynamicDataExtensions.EnablePersistedSelection
- uid: System.Web.DynamicData.DynamicDataExtensions.ExpandDynamicWhereParameters*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: ExpandDynamicWhereParameters
  nameWithType: DynamicDataExtensions.ExpandDynamicWhereParameters
- uid: System.Web.DynamicData.DynamicDataExtensions.FindDataSourceControl*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: FindDataSourceControl
  nameWithType: DynamicDataExtensions.FindDataSourceControl
- uid: System.Web.DynamicData.DynamicDataExtensions.FindFieldTemplate*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: FindFieldTemplate
  nameWithType: DynamicDataExtensions.FindFieldTemplate
- uid: System.Web.DynamicData.DynamicDataExtensions.FindMetaTable*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: FindMetaTable
  nameWithType: DynamicDataExtensions.FindMetaTable
- uid: System.Web.DynamicData.DynamicDataExtensions.FormatEditValue*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: FormatEditValue
  nameWithType: DynamicDataExtensions.FormatEditValue
- uid: System.Web.DynamicData.DynamicDataExtensions.FormatValue*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: FormatValue
  nameWithType: DynamicDataExtensions.FormatValue
- uid: System.Web.DynamicData.DynamicDataExtensions.GetDefaultValues*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: GetDefaultValues
  nameWithType: DynamicDataExtensions.GetDefaultValues
- uid: System.Web.DynamicData.DynamicDataExtensions.GetEnumType*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: GetEnumType
  nameWithType: DynamicDataExtensions.GetEnumType
- uid: System.Web.DynamicData.DynamicDataExtensions.GetMetaTable*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: GetMetaTable
  nameWithType: DynamicDataExtensions.GetMetaTable
- uid: System.Web.DynamicData.DynamicDataExtensions.GetTable*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: GetTable
  nameWithType: DynamicDataExtensions.GetTable
- uid: System.Web.DynamicData.DynamicDataExtensions.LoadWith<TEntity>*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: LoadWith<TEntity>
  nameWithType: DynamicDataExtensions.LoadWith<TEntity>
- uid: System.Web.DynamicData.DynamicDataExtensions.LoadWithForeignKeys*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: LoadWithForeignKeys
  nameWithType: DynamicDataExtensions.LoadWithForeignKeys
- uid: System.Web.DynamicData.DynamicDataExtensions.SetMetaTable*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: SetMetaTable
  nameWithType: DynamicDataExtensions.SetMetaTable
- uid: System.Web.DynamicData.DynamicDataExtensions.TryGetMetaTable*
  parent: System.Web.DynamicData.DynamicDataExtensions
  isExternal: false
  name: TryGetMetaTable
  nameWithType: DynamicDataExtensions.TryGetMetaTable
