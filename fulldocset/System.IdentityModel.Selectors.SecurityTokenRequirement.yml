### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement
  id: SecurityTokenRequirement
  children:
  - System.IdentityModel.Selectors.SecurityTokenRequirement.#ctor
  - System.IdentityModel.Selectors.SecurityTokenRequirement.GetProperty``1(System.String)
  - System.IdentityModel.Selectors.SecurityTokenRequirement.IsOptionalTokenProperty
  - System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize
  - System.IdentityModel.Selectors.SecurityTokenRequirement.KeySizeProperty
  - System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType
  - System.IdentityModel.Selectors.SecurityTokenRequirement.KeyTypeProperty
  - System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage
  - System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsageProperty
  - System.IdentityModel.Selectors.SecurityTokenRequirement.PeerAuthenticationMode
  - System.IdentityModel.Selectors.SecurityTokenRequirement.Properties
  - System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken
  - System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicTokenProperty
  - System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType
  - System.IdentityModel.Selectors.SecurityTokenRequirement.TokenTypeProperty
  - System.IdentityModel.Selectors.SecurityTokenRequirement.TryGetProperty``1(System.String,``0@)
  langs:
  - csharp
  name: SecurityTokenRequirement
  nameWithType: SecurityTokenRequirement
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement
  type: Class
  summary: "보안 토큰 요구 사항을 지정합니다."
  remarks: "응용 프로그램 코드 일반적으로 않아도 SecurityTokenRequirement 클래스를 사용 하는 사용자 지정 보안 토큰, 보안 토큰 관리자, 보안 토큰 공급자 또는 보안 토큰 인증자를 만들지 않는 한 합니다. SecurityTokenRequirement 클래스 대상을 지정 하는 키와 같은 보안 토큰에 필요한 보안 토큰 관리자에서 사용 됩니다 크기, 키 형식 및 키를 어떻게 사용할 수 있습니다. 지정된 된 조건과 일치 하는 보안 토큰을 식별할 수 있는 경우는 <xref:System.IdentityModel.Selectors.SecurityTokenProvider>및 <xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator>보내는 SOAP 메시지에 대 한 보안 토큰을 제공 하 고 받는 SOAP 메시지에 대 한 보안 토큰을 각각 인증할 얻을 수 있습니다.</xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator> </xref:System.IdentityModel.Selectors.SecurityTokenProvider> 예를 들어, 보내는 SOAP 메시지에 대 한 기본 보안 토큰 관리자에는 <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenProvider%28System.IdentityModel.Selectors.SecurityTokenRequirement%29>SecurityTokenRequirement 매개 변수를 사용 하는 메서드는 보안 토큰 요구 사항에 지정 된 조건과 일치 하는 보안 토큰 공급자를 호출할 수 있습니다.</xref:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenProvider%28System.IdentityModel.Selectors.SecurityTokenRequirement%29>"
  example:
  - "<xref:System.ServiceModel.ClientCredentialsSecurityTokenManager>  \n  \n <xref:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager>  \n  \n <xref:System.IdentityModel.Selectors.SecurityTokenProvider>  \n  \n <xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator>  \n  \n <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenAuthenticator%28System.IdentityModel.Selectors.SecurityTokenRequirement%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%40%29>  \n  \n <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenProvider%28System.IdentityModel.Selectors.SecurityTokenRequirement%29>  \n  \n <xref:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.CreateSecurityTokenAuthenticator%28System.IdentityModel.Selectors.SecurityTokenRequirement%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%40%29>  \n  \n <xref:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.CreateSecurityTokenProvider%28System.IdentityModel.Selectors.SecurityTokenRequirement%29>"
  syntax:
    content: public class SecurityTokenRequirement
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: SecurityTokenRequirement()
  nameWithType: SecurityTokenRequirement.SecurityTokenRequirement()
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.SecurityTokenRequirement()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Selectors.SecurityTokenRequirement&quot;> </xref> 클래스입니다."
  syntax:
    content: public SecurityTokenRequirement ();
    parameters: []
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.GetProperty``1(System.String)
  id: GetProperty``1(System.String)
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: GetProperty(String)
  nameWithType: SecurityTokenRequirement.GetProperty(String)
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.GetProperty(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  syntax:
    content: public TValue GetProperty<TValue> (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "추가할 수 있습니다."
    return:
      type: TValue
      description: "추가할 수 있습니다."
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.GetProperty<TValue>*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.IsOptionalTokenProperty
  id: IsOptionalTokenProperty
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: IsOptionalTokenProperty
  nameWithType: SecurityTokenRequirement.IsOptionalTokenProperty
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.IsOptionalTokenProperty
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "선택 사항인 경우 토큰 속성의 값을 가져옵니다."
  syntax:
    content: public static string IsOptionalTokenProperty { get; }
    return:
      type: System.String
      description: "Token 속성의 값입니다."
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.IsOptionalTokenProperty*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize
  id: KeySize
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: KeySize
  nameWithType: SecurityTokenRequirement.KeySize
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "보안 토큰과 연결 된 키의 필요한 크기를 가져오거나 설정 합니다."
  remarks: "KeySize 속성의 값을 가져와서 액세스할 수도 있습니다는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties%2A>속성 값의 컬렉션인 속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties%2A> KeySize 속성의 값의 값과 일치 하는 인덱스에 저장 되는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySizeProperty%2A>속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySizeProperty%2A>"
  syntax:
    content: public int KeySize { get; set; }
    return:
      type: System.Int32
      description: "보안 토큰과 연결 된 비트에서 키의 크기입니다. 기본값은 0입니다"
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "키 크기 속성이 0 보다 작은 값으로 설정 되어 있습니다."
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeySizeProperty
  id: KeySizeProperty
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: KeySizeProperty
  nameWithType: SecurityTokenRequirement.KeySizeProperty
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.KeySizeProperty
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "인덱스의 이름을 지정 하는 값을 가져옵니다는 <> </> *>에 대 한 컬렉션은 <> </> *> 속성."
  remarks: "필요한 키 크기를 설정 하려면는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize%2A>속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize%2A>"
  syntax:
    content: public static string KeySizeProperty { get; }
    return:
      type: System.String
      description: "인덱스의 이름은 <> </> *>에 대 한 컬렉션은 <> </> *> 속성."
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.KeySizeProperty*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType
  id: KeyType
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: KeyType
  nameWithType: SecurityTokenRequirement.KeyType
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "보안 토큰과 연결 된 키 (비대칭 또는 대칭)의 형식을 가져오거나 설정 합니다."
  remarks: "KeyType 속성의 값을 가져와서 액세스할 수도 있습니다는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties%2A>속성 값의 컬렉션인 속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties%2A> KeyType 속성의 값의 값과 일치 하는 인덱스에 저장 되는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyTypeProperty%2A>속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyTypeProperty%2A>"
  syntax:
    content: public System.IdentityModel.Tokens.SecurityKeyType KeyType { get; set; }
    return:
      type: System.IdentityModel.Tokens.SecurityKeyType
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyType&quot;> </xref> 보안 토큰과 연결 된 키 (비대칭 또는 대칭)의 유형을 지정 하는 합니다. 기본값은 <xref uid=&quot;langword_csharp_SymmetricKey&quot; name=&quot;SymmetricKey&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyTypeProperty
  id: KeyTypeProperty
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: KeyTypeProperty
  nameWithType: SecurityTokenRequirement.KeyTypeProperty
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyTypeProperty
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "인덱스의 이름을 지정 하는 값을 가져옵니다는 <> </> *>에 대 한 컬렉션은 <> </> *> 속성."
  remarks: "필요한 키 형식을 설정 하려면는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType%2A>속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType%2A>"
  syntax:
    content: public static string KeyTypeProperty { get; }
    return:
      type: System.String
      description: "인덱스의 이름은 <> </> *>에 대 한 컬렉션은 <> </> *> 속성."
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyTypeProperty*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage
  id: KeyUsage
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: KeyUsage
  nameWithType: SecurityTokenRequirement.KeyUsage
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "보안 토큰과 연결 된 키 사용할 수 있는 방법을 지정 하는 값을 가져오거나 설정 합니다."
  remarks: "KeyUsage 속성의 값을 가져와서 액세스할 수도 있습니다는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties%2A>속성 값의 컬렉션인 속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties%2A> KeyUsage 속성의 값의 값과 일치 하는 인덱스에 저장 되는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsageProperty%2A>속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsageProperty%2A>"
  syntax:
    content: public System.IdentityModel.Tokens.SecurityKeyUsage KeyUsage { get; set; }
    return:
      type: System.IdentityModel.Tokens.SecurityKeyUsage
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyUsage&quot;> </xref> 된 보안 토큰과 연결 된 키 사용할 수 있는 방법을 지정 하는 합니다. 기본값은 <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyUsage&quot;> </xref>합니다."
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsageProperty
  id: KeyUsageProperty
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: KeyUsageProperty
  nameWithType: SecurityTokenRequirement.KeyUsageProperty
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsageProperty
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "인덱스의 이름을 지정 하는 값을 가져옵니다는 <> </> *>에 대 한 컬렉션은 <> </> *> 속성."
  remarks: "키 용도 요구 사항을 설정 하려면는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage%2A>속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage%2A>"
  syntax:
    content: public static string KeyUsageProperty { get; }
    return:
      type: System.String
      description: "인덱스의 이름은 <> </> *>에 대 한 컬렉션은 <> </> *> 속성."
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsageProperty*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.PeerAuthenticationMode
  id: PeerAuthenticationMode
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: PeerAuthenticationMode
  nameWithType: SecurityTokenRequirement.PeerAuthenticationMode
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.PeerAuthenticationMode
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "인덱스의 이름을 가져옵니다는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties*>피어 인증 방법을 지정 하는 속성에 대 한 컬렉션입니다.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties*>"
  remarks: "피어 인증 모드를 설정 하는 기능을 추가 하려면에서 클래스를 파생 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement>속성 또는 생성자를 노출 합니다.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement> 생성자 나 속성에서 피어 인증 모드를 추가할는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties%2A>인덱스 PeerAuthenticationMode 속성의 값을 사용 하 여 컬렉션에 컬렉션.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties%2A>"
  syntax:
    content: public static string PeerAuthenticationMode { get; }
    return:
      type: System.String
      description: "인덱스의 이름에서 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties*>피어 인증 방법을 지정 하는 속성에 대 한 컬렉션입니다.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties*>"
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.PeerAuthenticationMode*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.Properties
  id: Properties
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: Properties
  nameWithType: SecurityTokenRequirement.Properties
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.Properties
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "현재에 대 한 비정적 속성의 컬렉션을 가져옵니다 <xref href=&quot;System.IdentityModel.Selectors.SecurityTokenRequirement&quot;> </xref> 인스턴스."
  remarks: "값을 사용 하 여는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySizeProperty%2A>, <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyTypeProperty%2A>, <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsageProperty%2A>, <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenTypeProperty%2A>특정 속성 값을 가져올 컬렉션의 인덱스로 속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenTypeProperty%2A> </xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsageProperty%2A> </xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyTypeProperty%2A> </xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySizeProperty%2A>"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> Properties { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "&lt;xref:System.Collections.Generic.IDictionary%602&gt; 현재에 대 한 비정적 속성의 컬렉션을 포함 하는 <xref href=&quot;System.IdentityModel.Selectors.SecurityTokenRequirement&quot;> </xref> 인스턴스."
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken
  id: RequireCryptographicToken
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: RequireCryptographicToken
  nameWithType: SecurityTokenRequirement.RequireCryptographicToken
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "보안 토큰 암호화와 같은 암호화 작업을 수행할 수 있는 해야 하는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "와 같은 일부 보안 토큰의 <xref:System.IdentityModel.Tokens.UserNameSecurityToken>, 암호화 작업을 수행할 정도로 안전 하지 않으므로 이며 인증에만 사용 해야 합니다.</xref:System.IdentityModel.Tokens.UserNameSecurityToken>       RequireCryptographicToken 속성의 값을 가져와서 액세스할 수도 있습니다는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties%2A>속성 값의 컬렉션인 속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties%2A> RequireCryptographicToken 속성의 값의 값과 일치 하는 인덱스에 저장 되는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicTokenProperty%2A>속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicTokenProperty%2A>"
  syntax:
    content: public bool RequireCryptographicToken { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>보안 토큰이 암호화 작업을 수행할 수 여야 합니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicTokenProperty
  id: RequireCryptographicTokenProperty
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: RequireCryptographicTokenProperty
  nameWithType: SecurityTokenRequirement.RequireCryptographicTokenProperty
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicTokenProperty
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "인덱스의 이름을 가져옵니다는 <> </> *>에 대 한 컬렉션은 <> </> *> 속성."
  syntax:
    content: public static string RequireCryptographicTokenProperty { get; }
    return:
      type: System.String
      description: "인덱스의 이름은 <> </> *>에 대 한 컬렉션은 <> </> *> 속성."
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicTokenProperty*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType
  id: TokenType
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: TokenType
  nameWithType: SecurityTokenRequirement.TokenType
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "필요한 보안 토큰 형식을 가져오거나 설정 합니다."
  remarks: "정적 속성 중 하나를 사용 하 여는 <xref:System.IdentityModel.Tokens.SecurityTokenTypes>이 속성을 설정 하는 클래스입니다.</xref:System.IdentityModel.Tokens.SecurityTokenTypes>       TokenType 속성의 값을 가져와서 액세스할 수도 있습니다는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties%2A>속성 값의 컬렉션인 속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties%2A> TokenType 속성의 값의 값과 일치 하는 인덱스에 저장 되는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenTypeProperty%2A>속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenTypeProperty%2A>"
  syntax:
    content: public string TokenType { get; set; }
    return:
      type: System.String
      description: "필요한 보안 토큰 형식입니다."
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.TokenTypeProperty
  id: TokenTypeProperty
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: TokenTypeProperty
  nameWithType: SecurityTokenRequirement.TokenTypeProperty
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.TokenTypeProperty
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  summary: "인덱스의 이름을 지정 하는 값을 가져옵니다는 <> </> *>에 대 한 컬렉션은 <> </> *> 속성."
  remarks: "필요한 보안 토큰 형식을 설정 하려면는 <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType%2A>속성.</xref:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType%2A>"
  syntax:
    content: public static string TokenTypeProperty { get; }
    return:
      type: System.String
      description: "인덱스의 이름은 <> </> *>에 대 한 컬렉션은 <> </> *> 속성."
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.TokenTypeProperty*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.TryGetProperty``1(System.String,``0@)
  id: TryGetProperty``1(System.String,``0@)
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  langs:
  - csharp
  name: TryGetProperty(String,TValue)
  nameWithType: SecurityTokenRequirement.TryGetProperty(String,TValue)
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.TryGetProperty(String,TValue)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Selectors
  syntax:
    content: public bool TryGetProperty<TValue> (string propertyName, out TValue result);
    parameters:
    - id: propertyName
      type: System.String
      description: "추가할 수 있습니다."
    - id: result
      type: TValue
      description: "추가할 수 있습니다."
    return:
      type: System.Boolean
      description: "추가할 수 있습니다."
  overload: System.IdentityModel.Selectors.SecurityTokenRequirement.TryGetProperty<TValue>*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.#ctor
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: SecurityTokenRequirement()
  nameWithType: SecurityTokenRequirement.SecurityTokenRequirement()
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.SecurityTokenRequirement()
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.GetProperty``1(System.String)
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: GetProperty(String)
  nameWithType: SecurityTokenRequirement.GetProperty(String)
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.GetProperty(String)
- uid: TValue
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.IsOptionalTokenProperty
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: IsOptionalTokenProperty
  nameWithType: SecurityTokenRequirement.IsOptionalTokenProperty
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.IsOptionalTokenProperty
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: KeySize
  nameWithType: SecurityTokenRequirement.KeySize
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeySizeProperty
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: KeySizeProperty
  nameWithType: SecurityTokenRequirement.KeySizeProperty
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.KeySizeProperty
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: KeyType
  nameWithType: SecurityTokenRequirement.KeyType
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType
- uid: System.IdentityModel.Tokens.SecurityKeyType
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyType
  nameWithType: SecurityKeyType
  fullName: System.IdentityModel.Tokens.SecurityKeyType
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyTypeProperty
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: KeyTypeProperty
  nameWithType: SecurityTokenRequirement.KeyTypeProperty
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyTypeProperty
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: KeyUsage
  nameWithType: SecurityTokenRequirement.KeyUsage
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage
- uid: System.IdentityModel.Tokens.SecurityKeyUsage
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyUsage
  nameWithType: SecurityKeyUsage
  fullName: System.IdentityModel.Tokens.SecurityKeyUsage
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsageProperty
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: KeyUsageProperty
  nameWithType: SecurityTokenRequirement.KeyUsageProperty
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsageProperty
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.PeerAuthenticationMode
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: PeerAuthenticationMode
  nameWithType: SecurityTokenRequirement.PeerAuthenticationMode
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.PeerAuthenticationMode
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.Properties
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: Properties
  nameWithType: SecurityTokenRequirement.Properties
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.Properties
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,Object>
  nameWithType: IDictionary<String,Object>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: RequireCryptographicToken
  nameWithType: SecurityTokenRequirement.RequireCryptographicToken
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicTokenProperty
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: RequireCryptographicTokenProperty
  nameWithType: SecurityTokenRequirement.RequireCryptographicTokenProperty
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicTokenProperty
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: TokenType
  nameWithType: SecurityTokenRequirement.TokenType
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.TokenTypeProperty
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: TokenTypeProperty
  nameWithType: SecurityTokenRequirement.TokenTypeProperty
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.TokenTypeProperty
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.TryGetProperty``1(System.String,``0@)
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: TryGetProperty(String,TValue)
  nameWithType: SecurityTokenRequirement.TryGetProperty(String,TValue)
  fullName: System.IdentityModel.Selectors.SecurityTokenRequirement.TryGetProperty(String,TValue)
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.#ctor*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: SecurityTokenRequirement
  nameWithType: SecurityTokenRequirement.SecurityTokenRequirement
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.GetProperty<TValue>*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: GetProperty<TValue>
  nameWithType: SecurityTokenRequirement.GetProperty<TValue>
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.IsOptionalTokenProperty*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: IsOptionalTokenProperty
  nameWithType: SecurityTokenRequirement.IsOptionalTokenProperty
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: KeySize
  nameWithType: SecurityTokenRequirement.KeySize
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeySizeProperty*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: KeySizeProperty
  nameWithType: SecurityTokenRequirement.KeySizeProperty
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: KeyType
  nameWithType: SecurityTokenRequirement.KeyType
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyTypeProperty*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: KeyTypeProperty
  nameWithType: SecurityTokenRequirement.KeyTypeProperty
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: KeyUsage
  nameWithType: SecurityTokenRequirement.KeyUsage
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsageProperty*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: KeyUsageProperty
  nameWithType: SecurityTokenRequirement.KeyUsageProperty
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.PeerAuthenticationMode*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: PeerAuthenticationMode
  nameWithType: SecurityTokenRequirement.PeerAuthenticationMode
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.Properties*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: Properties
  nameWithType: SecurityTokenRequirement.Properties
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: RequireCryptographicToken
  nameWithType: SecurityTokenRequirement.RequireCryptographicToken
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicTokenProperty*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: RequireCryptographicTokenProperty
  nameWithType: SecurityTokenRequirement.RequireCryptographicTokenProperty
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: TokenType
  nameWithType: SecurityTokenRequirement.TokenType
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.TokenTypeProperty*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: TokenTypeProperty
  nameWithType: SecurityTokenRequirement.TokenTypeProperty
- uid: System.IdentityModel.Selectors.SecurityTokenRequirement.TryGetProperty<TValue>*
  parent: System.IdentityModel.Selectors.SecurityTokenRequirement
  isExternal: false
  name: TryGetProperty<TValue>
  nameWithType: SecurityTokenRequirement.TryGetProperty<TValue>
