### YamlMime:ManagedReference
items:
- uid: System.Web.Security.SqlRoleProvider
  id: SqlRoleProvider
  children:
  - System.Web.Security.SqlRoleProvider.#ctor
  - System.Web.Security.SqlRoleProvider.AddUsersToRoles(System.String[],System.String[])
  - System.Web.Security.SqlRoleProvider.ApplicationName
  - System.Web.Security.SqlRoleProvider.CreateRole(System.String)
  - System.Web.Security.SqlRoleProvider.DeleteRole(System.String,System.Boolean)
  - System.Web.Security.SqlRoleProvider.FindUsersInRole(System.String,System.String)
  - System.Web.Security.SqlRoleProvider.GetAllRoles
  - System.Web.Security.SqlRoleProvider.GetRolesForUser(System.String)
  - System.Web.Security.SqlRoleProvider.GetUsersInRole(System.String)
  - System.Web.Security.SqlRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Web.Security.SqlRoleProvider.IsUserInRole(System.String,System.String)
  - System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  - System.Web.Security.SqlRoleProvider.RoleExists(System.String)
  langs:
  - csharp
  name: SqlRoleProvider
  nameWithType: SqlRoleProvider
  fullName: System.Web.Security.SqlRoleProvider
  type: Class
  summary: "SQL Server 데이터베이스에 ASP.NET 응용 프로그램에 대 한 역할 멤버 자격 정보의 저장소를 관리합니다."
  remarks: "This class is used by the <xref:System.Web.Security.Roles> and <xref:System.Web.Security.RolePrincipal> classes to provide role-management services for an ASP.NET application using a SQL Server database. You can use role management to specify different levels of authorization for your application.  \n  \n To use the SqlRoleProvider class, you must first create the SQL Server database used by the SqlRoleProvider. To create the database used by the SqlRoleProvider class, run the `aspnet_regsql.exe` executable found in the C:\\WINDOWS\\Microsoft.NET\\Framework\\ `versionNumber` folder and specify the `-Ar` option (for example, `aspnet_regsql.exe -Ar`). The database created is called Aspnetdb. Alternatively, run aspnet_regsql.exe to pull up the GUI configuration mode and choose to configure all ASP.NET features.  \n  \n If the role provider is configured with a connection string that uses integrated security, the process account of the ASP.NET application must have rights to connect to the SQL Server database.  \n  \n The Machine.config file is configured with a SqlRoleProvider instance named AspNetSqlProvider that connects to the SQL Server on the local machine. You can use this instance of the provider, or specify your own in the Web.config file for your ASP.NET application. To use the AspNetSqlProvider instance, specify AspNetSqlProvider as the `defaultProvider` in your  configuration.  \n  \n You can configure the SqlRoleProvider to use the same database and user information as the <xref:System.Web.Security.SqlMembershipProvider> in order to use a single database for authentication and authorization information. To use the same database for membership and role information, run the aspnet_regsql.exe executable and install the membership feature. Then, specify the same connection string in your configuration for both your SqlRoleProvider and <xref:System.Web.Security.SqlMembershipProvider> instances. Also ensure that both provider instances are configured with the same <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>."
  example:
  - "The following example shows the Web.config file for an ASP.NET application configured to use a SqlRoleProvider object and the <xref:System.Web.Security.SqlMembershipProvider>. The  element is configured to only allow access to authenticated users in the Administrators role.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"SqlServices\" connectionString=\"Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;\" />  \n  </connectionStrings>  \n  <system.web>  \n    <authentication mode=\"Forms\" >  \n      <forms loginUrl=\"logincs.aspx\"  \n      name=\".ASPXFORMSAUTH\" />  \n    </authentication>  \n    <authorization>  \n      <deny users=\"?\" />  \n         <allow roles=\"Administrators\" />  \n         <deny users=\"*\" />  \n    </authorization>  \n    <membership defaultProvider=\"SqlProvider\" userIsOnlineTimeWindow=\"15\">  \n      <providers>  \n        <add   \n          name=\"SqlProvider\"   \n          type=\"System.Web.Security.SqlMembershipProvider\"   \n          connectionStringName=\"SqlServices\"  \n          enablePasswordRetrieval=\"false\"  \n          enablePasswordReset=\"false\"  \n          requiresQuestionAndAnswer=\"false\"   \n          passwordFormat=\"Hashed\"   \n          applicationName=\"SampleApplication\" />  \n      </providers>  \n    </membership>  \n    <roleManager defaultProvider=\"SqlProvider\"   \n      enabled=\"true\"  \n      cacheRolesInCookie=\"true\"  \n      cookieName=\".ASPROLES\"  \n      cookieTimeout=\"30\"  \n      cookiePath=\"/\"  \n      cookieRequireSSL=\"true\"  \n      cookieSlidingExpiration=\"true\"  \n      cookieProtection=\"All\" >  \n      <providers>  \n        <add  \n          name=\"SqlProvider\"  \n          type=\"System.Web.Security.SqlRoleProvider\"  \n          connectionStringName=\"SqlServices\"   \n          applicationName=\"SampleApplication\" />  \n      </providers>  \n    </roleManager>  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: 'public class SqlRoleProvider : System.Web.Security.RoleProvider'
  inheritance:
  - System.Web.Security.RoleProvider
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.#ctor
  id: '#ctor'
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: SqlRoleProvider()
  nameWithType: SqlRoleProvider.SqlRoleProvider()
  fullName: System.Web.Security.SqlRoleProvider.SqlRoleProvider()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "인스턴스를 만듭니다는 <xref href=&quot;System.Web.Security.SqlRoleProvider&quot;> </xref> 클래스입니다."
  remarks: "SqlRoleProvider 생성자의 인스턴스를 만드는 ASP.NET에서 호출 되는 <xref:System.Web.Security.SqlRoleProvider>응용 프로그램에 대 한 구성에 지정 된 대로 클래스.</xref:System.Web.Security.SqlRoleProvider> 이 생성자는 사용자 코드에서 사용할 수 없습니다."
  syntax:
    content: public SqlRoleProvider ();
    parameters: []
  overload: System.Web.Security.SqlRoleProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.AddUsersToRoles(System.String[],System.String[])
  id: AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: AddUsersToRoles(String[],String[])
  nameWithType: SqlRoleProvider.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.SqlRoleProvider.AddUsersToRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할의 각 지정된 된 사용자 이름을 추가합니다."
  remarks: "AddUsersToRoles 메서드에 의해 호출 됩니다는 <xref:System.Web.Security.Roles>ASP.NET 응용 프로그램의 구성 파일 (Web.config)에 지정 된 SQL Server 데이터베이스에 하나 이상의 역할 하나 이상의 사용자를 연결 하는 데.</xref:System.Web.Security.Roles> 이 메서드는 <xref:System.Web.Security.Roles.AddUserToRole%2A>, <xref:System.Web.Security.Roles.AddUserToRoles%2A>, <xref:System.Web.Security.Roles.AddUsersToRole%2A>, <xref:System.Web.Security.Roles.AddUsersToRoles%2A> <xref:System.Web.Security.Roles>클래스</xref:System.Web.Security.Roles> 의</xref:System.Web.Security.Roles.AddUsersToRoles%2A> 메서드와</xref:System.Web.Security.Roles.AddUsersToRole%2A> </xref:System.Web.Security.Roles.AddUserToRoles%2A> </xref:System.Web.Security.Roles.AddUserToRole%2A>       트랜잭션 내에서 AddUsersToRoles 메서드를 호출 하는 동안 수행 되는 데이터베이스 업데이트가 이루어집니다. 오류가 발생 하는 경우 지정된 된 역할에 이미 있는 사용자 이름과 같이 트랜잭션이 롤백되고 업데이트가 수행 되지 않습니다.       경우는 <xref:System.Web.Security.SqlRoleProvider>함께 사용 되는 <xref:System.Web.Security.SqlMembershipProvider>, 지정된 된 사용자 이름 중 하나는 데이터베이스에 존재 하지 않는 하 고, 데이터베이스에 사용자 이름이 자동으로 추가 됩니다.</xref:System.Web.Security.SqlMembershipProvider> </xref:System.Web.Security.SqlRoleProvider>       사용자 이름 및 역할 이름에 쉼표를 포함할 수 없습니다."
  example:
  - "The following code example adds one or more users to a role or removes a user from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/1f379f8c-79a9-40dc-ab92-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/1f379f8c-79a9-40dc-ab92-_1.aspx)]"
  syntax:
    content: public override void AddUsersToRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "지정된 된 역할에 추가할 사용자 이름의 문자열 배열입니다."
    - id: roleNames
      type: System.String[]
      description: "지정 된 사용자 이름을 추가할 역할 이름의 문자열 배열입니다."
  overload: System.Web.Security.SqlRoleProvider.AddUsersToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       One of the users in <code>usernames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "역할 중 하나의 <code> roleNames </code> 은 빈 문자열 이거나 쉼표를 포함 합니다.       -또는-에 사용자 중 한 명 <code> usernames </code> 은 빈 문자열 이거나 쉼표를 포함 합니다.       -또는-에서 역할 중 하나의 <code> roleNames </code> 256 자 보다 깁니다.       -또는-에 사용자 중 한 명 <code> usernames </code> 256 자 보다 깁니다.       -또는- <code> roleNames </code> 중복 요소를 포함 합니다.       -또는- <code> usernames </code> 중복 요소를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "지정된 된 역할 이름 중 하나 이상을 찾을 수 없습니다.       -또는-하나 이상의 지정된 된 사용자 이름을 찾을 수 없습니다.       -또는-하나 이상의 지정된 된 사용자 이름을 이미 지정된 된 역할 이름 중 하나 이상과 연결 되어 있습니다.       -또는-데이터베이스와 통신 하는 동안 알 수 없는 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.ApplicationName
  id: ApplicationName
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: ApplicationName
  nameWithType: SqlRoleProvider.ApplicationName
  fullName: System.Web.Security.SqlRoleProvider.ApplicationName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "역할 정보 저장 및 검색을 응용 프로그램의 이름을 가져오거나 설정 합니다."
  remarks: "응용 프로그램 이름에서 사용 되는 <xref:System.Web.Security.SqlRoleProvider>서로 다른 응용 프로그램에서 사용자 및 역할 연관 시킬.</xref:System.Web.Security.SqlRoleProvider> 이렇게 하면 여러 응용 프로그램이 동일한 데이터베이스를 사용 하 여 중복 된 사용자 이름이 나 역할 이름 간의 충돌을 일으키지 않고 사용자 및 역할 정보를 저장할 수 있습니다. 여러 ASP.NET 응용 프로그램 ApplicationName 속성에 동일한 값을 지정 하 여 같은 데이터베이스를 사용할 수 있습니다. ApplicationName 속성을 프로그래밍 방식으로 설정할 수 있습니다. 또는 사용 하 여 웹 응용 프로그램에 대 한 구성 파일에서 선언적으로 설정할 수 있습니다는 `applicationName` 특성입니다.       에 대 한 값을 지정 하지 않으면는 `applicationName` 웹 응용 프로그램에 대 한 구성 파일의 특성에에서는 다음 <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName>현재 속성 값 <xref:System.Web.HttpContext.Request%2A?displayProperty=fullName>개체를 사용 합니다.</xref:System.Web.HttpContext.Request%2A?displayProperty=fullName> </xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName>      > [!CAUTION] > 단일 기본 역할 공급자 인스턴스는 모든 요청에 의해 처리에 사용 되므로 <xref:System.Web.HttpApplication>개체를 동시에 실행 되 고 ApplicationName 속성 값을 설정 하는 여러 요청을 할 수 있습니다.</xref:System.Web.HttpApplication> ApplicationName 속성이 스레드로부터 여러 쓰기 작업에 대해 안전 하지 않습니다. 및 응용 프로그램의 여러 사용자에 대 한 예기치 않은 동작이 발생할 수 있습니다 ApplicationName 속성 값을 변경 합니다. 사용자가 필요한 경우가 아니면 ApplicationName 속성을 설정할 수 있는 코드를 작성 하지 않는 것이 좋습니다. ApplicationName 속성을 설정 필요할 수 있는 응용 프로그램의 예로 여러 응용 프로그램에 대 한 역할 데이터를 관리 하는 관리 응용 프로그램입니다. 단일 사용자 응용 프로그램 및 웹 응용 프로그램이 아닙니다. 이러한 응용 프로그램 이어야 합니다."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies the application's <xref:System.Web.Security.SqlRoleProvider> instance and sets the ApplicationName property to `MyApplication`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public override string ApplicationName { get; set; }
    return:
      type: System.String
      description: "역할 정보 저장 및 검색을 응용 프로그램의 이름입니다. 기본값은는 &lt;xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName&gt; 속성 값을 현재 &lt;xref:System.Web.HttpContext.Request%2A?displayProperty=fullName&gt;합니다."
  overload: System.Web.Security.SqlRoleProvider.ApplicationName*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "하려고 했습니다 ApplicationName 속성을 설정 하지 않은 호출자가 <xref href=&quot;System.Web.AspNetHostingPermissionLevel&quot;> </xref> ASP.NET 호스팅 권한을 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "ApplicationName은 256 자 보다 긴 문자열로 설정 하려고 했습니다."
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.CreateRole(System.String)
  id: CreateRole(System.String)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: CreateRole(String)
  nameWithType: SqlRoleProvider.CreateRole(String)
  fullName: System.Web.Security.SqlRoleProvider.CreateRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "데이터베이스 역할에 새 역할을 추가 합니다."
  remarks: "CreateRole 메서드에 의해 호출 됩니다는 <xref:System.Web.Security.Roles>클래스 ASP.NET 응용 프로그램의 구성 파일 (Web.config)에 지정 된 SQL Server 데이터베이스의 역할을 만들려고 합니다.</xref:System.Web.Security.Roles>       역할 이름에 대 한 최대 길이 256 자입니다. 역할 이름은 대/소문자 구분 하지 않습니다. 쉼표 역할 이름에 허용 되지 않습니다."
  example:
  - "The following code example creates a new role in the database. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.sq_6_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.sq_6_1.aspx)]"
  syntax:
    content: public override void CreateRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "만들 역할의 이름입니다."
  overload: System.Web.Security.SqlRoleProvider.CreateRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 이거나 쉼표를 포함 합니다.       -또는- <code>roleName</code> 256 자 보다 깁니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>데이터베이스에 이미 있습니다.       -또는-데이터베이스와 통신 하는 동안 알 수 없는 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.DeleteRole(System.String,System.Boolean)
  id: DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: DeleteRole(String,Boolean)
  nameWithType: SqlRoleProvider.DeleteRole(String,Boolean)
  fullName: System.Web.Security.SqlRoleProvider.DeleteRole(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "데이터베이스 역할에서에서 역할을 제거 합니다."
  remarks: "DeleteRole 메서드에 의해 호출 됩니다는 <xref:System.Web.Security.Roles>ASP.NET 응용 프로그램의 구성 파일 (Web.config)에 지정 된 SQL Server 데이터베이스에서 역할을 삭제 하는 클래스입니다.</xref:System.Web.Security.Roles> 역할 삭제 되 면 해당 역할과 연결 된 사용자의 목록도 데이터베이스에서 삭제 됩니다. 사용자 정보는 데이터베이스에 영향을 받지 않습니다.       경우 `throwOnPopulatedRole` 은 `true`다음 예외가 throw 됩니다, 그리고 및에서 식별 된 역할의 역할 삭제 되지 것입니다는 `roleName` 매개 변수에 하나 이상의 멤버가 있습니다. 경우 `throwOnPopulatedRole` 은 `false`, 다음 여부 비어 역할은 삭제 됩니다."
  example:
  - "The following example deletes a role from the database. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/csharp/m-system.web.security.sq_0_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/visualbasic/m-system.web.security.sq_0_1.aspx)]"
  syntax:
    content: public override bool DeleteRole (string roleName, bool throwOnPopulatedRole);
    parameters:
    - id: roleName
      type: System.String
      description: "삭제할 역할의 이름입니다."
    - id: throwOnPopulatedRole
      type: System.Boolean
      description: "경우 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, 예외를 throw `roleName` 에 하나 이상의 멤버가 있습니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>역할을 성공적으로 삭제 되었으면; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Security.SqlRoleProvider.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 이거나 쉼표를 포함 합니다.       -또는- <code>roleName</code> 256 자 보다 깁니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>하나 이상의 멤버 및 <code>throwOnPopulatedRole</code> 은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다.       -또는-데이터베이스와 통신 하는 동안 알 수 없는 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.FindUsersInRole(System.String,System.String)
  id: FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: FindUsersInRole(String,String)
  nameWithType: SqlRoleProvider.FindUsersInRole(String,String)
  fullName: System.Web.Security.SqlRoleProvider.FindUsersInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "사용자 이름 일치 시킬 지정 된 사용자 이름에 포함 된 역할에 사용자 이름의 배열을 가져옵니다."
  remarks: "FindUsersInRole 메서드에 의해 호출 됩니다는 <xref:System.Web.Security.Roles>클래스 및 사용자 이름이 제공 된 일치 하는 항목에 포함 된 역할에 사용자의 목록을 반환 `usernameToMatch` 구성 된 `applicationName`.</xref:System.Web.Security.Roles> <xref:System.Web.Security.SqlRoleProvider>일치 하는 사용자 이름으로 검색 된 `usernameToMatch` LIKE 키워드 및 지 원하는 SQL Server 와일드 카드 문자를 사용 하 여 매개 변수 값.</xref:System.Web.Security.SqlRoleProvider> 예를 들어 경우는 `usernameToMatch` 매개 변수가 &quot;user1&quot;로 설정 된 다음 있는 경우 &quot;user1&quot;의 사용자 이름으로 사용자에 대 한 멤버 자격 정보 반환 됩니다. 경우는 `usernameToMatch` &quot;user %&quot;로 설정 된 않으면 &quot;user1&quot;, &quot;user2&quot;, &quot;user_admin&quot; 및 등의 사용자 이름과 함께 사용자에 대 한 멤버 자격 정보 반환 됩니다."
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.FindUsersInRole%2A> method to display role membership based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.Roles#11](~/add/codesnippet/csharp/995e27e2-08d0-46c4-866e-_1.aspx)]\n [!code-vb[System.Web.Security.Roles#11](~/add/codesnippet/visualbasic/995e27e2-08d0-46c4-866e-_1.aspx)]"
  syntax:
    content: public override string[] FindUsersInRole (string roleName, string usernameToMatch);
    parameters:
    - id: roleName
      type: System.String
      description: "검색할 역할입니다."
    - id: usernameToMatch
      type: System.String
      description: "검색할 사용자 이름입니다."
    return:
      type: System.String[]
      description: "일치 하는 사용자 이름이 있는 모든 사용자의 이름이 포함 된 문자열 배열을 <code> usernameToMatch </code> 사용자가 지정된 된 역할의 멤버입니다."
  overload: System.Web.Security.SqlRoleProvider.FindUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic).       -or-       <code>usernameToMatch</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 이거나 쉼표를 포함 합니다.       -또는- <code>usernameToMatch</code> 은 빈 문자열입니다.       -또는- <code>roleName</code> 256 자 보다 깁니다.       -또는- <code>usernameToMatch</code> 256 자 보다 깁니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>데이터베이스에서 찾았습니다.       -또는-데이터베이스와 통신 하는 동안 알 수 없는 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.GetAllRoles
  id: GetAllRoles
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: GetAllRoles()
  nameWithType: SqlRoleProvider.GetAllRoles()
  fullName: System.Web.Security.SqlRoleProvider.GetAllRoles()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "응용 프로그램에 대 한 모든 역할의 목록을 가져옵니다."
  remarks: "GetAllRoles 메서드에 의해 호출 됩니다는 <xref:System.Web.Security.Roles>ASP.NET 응용 프로그램의 구성 파일 (Web.config)에 지정 된 SQL Server 데이터베이스의 모든 역할 목록을 검색 하는 클래스입니다.</xref:System.Web.Security.Roles>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetAllRoles%2A> method to get the list of roles for an application and bind the results to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.sq_8_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.sq_8_1.aspx)]"
  syntax:
    content: public override string[] GetAllRoles ();
    parameters: []
    return:
      type: System.String[]
      description: "특정 응용 프로그램에 대 한 데이터베이스에 저장 된 모든 역할의 이름을 포함 하는 문자열 배열입니다."
  overload: System.Web.Security.SqlRoleProvider.GetAllRoles*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "데이터베이스와 통신 하는 동안 알 수 없는 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.GetRolesForUser(System.String)
  id: GetRolesForUser(System.String)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: GetRolesForUser(String)
  nameWithType: SqlRoleProvider.GetRolesForUser(String)
  fullName: System.Web.Security.SqlRoleProvider.GetRolesForUser(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "사용자가 속한 역할 목록을 가져옵니다."
  remarks: "GetRolesForUser 메서드에 의해 호출 됩니다는 <xref:System.Web.Security.Roles>ASP.NET 응용 프로그램의 구성 파일 (Web.config)에 지정 된 SQL Server 데이터베이스에서 지정된 된 사용자 역할의 목록을 검색 하는 클래스입니다.</xref:System.Web.Security.Roles>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetRolesForUser%2A> method to retrieve a list of roles for a specified user and binds them to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.sq_5_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.sq_5_1.aspx)]"
  syntax:
    content: public override string[] GetRolesForUser (string username);
    parameters:
    - id: username
      type: System.String
      description: "에 대 한 역할의 목록을 반환할 사용자입니다."
    return:
      type: System.String[]
      description: "지정된 된 사용자가 속한 모든 역할의 이름을 포함 하는 문자열 배열입니다."
  overload: System.Web.Security.SqlRoleProvider.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>username</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>username</code>쉼표를 포함 합니다.       -또는- <code>username</code> 256 자 보다 깁니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "데이터베이스와 통신 하는 동안 알 수 없는 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.GetUsersInRole(System.String)
  id: GetUsersInRole(System.String)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: GetUsersInRole(String)
  nameWithType: SqlRoleProvider.GetUsersInRole(String)
  fullName: System.Web.Security.SqlRoleProvider.GetUsersInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할에 사용자의 목록을 가져옵니다."
  remarks: "GetUsersInRole 메서드에 의해 호출 됩니다는 <xref:System.Web.Security.Roles>ASP.NET 응용 프로그램의 구성 파일 (Web.config)에 지정 된 SQL Server 데이터베이스에 지정 된 역할에 연결 된 사용자 목록을 검색 하는 클래스입니다.</xref:System.Web.Security.Roles>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetUsersInRole%2A> method to get a list of the users in a particular role and bind the results to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.sq_4_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.sq_4_1.aspx)]"
  syntax:
    content: public override string[] GetUsersInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "사용자 목록을 가져올 역할의 이름입니다."
    return:
      type: System.String[]
      description: "지정된 된 역할의 구성원 인 모든 사용자의 이름을 포함 하는 문자열 배열입니다."
  overload: System.Web.Security.SqlRoleProvider.GetUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 이거나 쉼표를 포함 합니다.       -또는- <code>roleName</code> 256 자 보다 깁니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>rolename</code>데이터베이스에서 찾았습니다.       -또는-데이터베이스와 통신 하는 동안 알 수 없는 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  id: Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: Initialize(String,NameValueCollection)
  nameWithType: SqlRoleProvider.Initialize(String,NameValueCollection)
  fullName: System.Web.Security.SqlRoleProvider.Initialize(String,NameValueCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "ASP.NET 응용 프로그램의 구성 파일에 지정 된 속성 값을 가진 SQL Server 역할 공급자를 초기화 합니다. 이 메서드는 사용자 코드에서 직접 사용할 수 없습니다."
  remarks: "이 메서드는 초기화는 <xref:System.Web.Security.SqlRoleProvider>속성으로 값 ASP.NET 응용 프로그램 구성 파일 (Web.config)에 지정 된 하며 사용자 코드에서 직접 사용할 수 없습니다.</xref:System.Web.Security.SqlRoleProvider>"
  syntax:
    content: public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);
    parameters:
    - id: name
      type: System.String
      description: "이름에서 <xref href=&quot;System.Web.Security.SqlRoleProvider&quot;> </xref> 인스턴스를 초기화 합니다."
    - id: config
      type: System.Collections.Specialized.NameValueCollection
      description: "A <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> 이름 및 역할 공급자에 대 한 구성 옵션의 값을 포함 합니다."
  overload: System.Web.Security.SqlRoleProvider.Initialize*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "ASP.NET 응용 프로그램에서 실행 되지 않는 <xref href=&quot;System.Web.AspNetHostingPermissionLevel&quot;> </xref> 신뢰 또는 높은 합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>config</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;> </xref> 특성은 비어 있거나이 대 한 응용 프로그램 구성 파일에 존재 하지 않는 <xref href=&quot;System.Web.Security.SqlRoleProvider&quot;> </xref> 인스턴스.       -또는- <xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;> </xref> 특성 256 자를 초과 합니다.       -또는-이 응용 프로그램 구성 파일 <xref href=&quot;System.Web.Security.SqlRoleProvider&quot;> </xref> 인스턴스 인식할 수 없는 특성을 포함 합니다."
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.IsUserInRole(System.String,System.String)
  id: IsUserInRole(System.String,System.String)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: IsUserInRole(String,String)
  nameWithType: SqlRoleProvider.IsUserInRole(String,String)
  fullName: System.Web.Security.SqlRoleProvider.IsUserInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할에 지정된 된 사용자 인지를 나타내는 값을 가져옵니다."
  remarks: "IsUserInRole 메서드에 의해 호출 됩니다는 <xref:System.Web.Security.Roles>클래스 및 <xref:System.Security.Principal.IPrincipal.IsInRole%2A>의 메서드는 <xref:System.Web.UI.Page.User%2A?displayProperty=fullName>속성을 사용자 역할 ASP.NET 응용 프로그램의 구성 파일 (Web.config)에 지정 된 SQL Server 데이터베이스에 연결 되는지 확인 합니다.</xref:System.Web.UI.Page.User%2A?displayProperty=fullName> </xref:System.Security.Principal.IPrincipal.IsInRole%2A> </xref:System.Web.Security.Roles>"
  example:
  - "The following code example programmatically checks to see whether the logged-on user is in the Administrators role before allowing the user to view user roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.sq_9_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.sq_9_1.aspx)]"
  syntax:
    content: public override bool IsUserInRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "검색할 사용자 이름입니다."
    - id: roleName
      type: System.String
      description: "검색할 역할입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 사용자가 지정된 된 역할에 있으면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Security.SqlRoleProvider.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 이거나 쉼표를 포함 합니다.       -또는- <code>username</code> 는 쉼표를 포함 합니다.       -또는- <code>roleName</code> 256 자 보다 깁니다.       -또는- <code>username</code> 256 자 보다 깁니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "데이터베이스와 통신 하는 동안 알 수 없는 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  id: RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: SqlRoleProvider.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할에서 지정된 된 사용자 이름을 제거합니다."
  remarks: "RemoveUsersFromRoles 메서드에 의해 호출 됩니다는 <xref:System.Web.Security.Roles>클래스 하나 이상의 역할에 ASP.NET 응용 프로그램의 구성 파일 (Web.config)에 지정 된 SQL Server 데이터베이스에서 하나 이상의 사용자를 제거 합니다.</xref:System.Web.Security.Roles> 이 메서드는 <xref:System.Web.Security.Roles.RemoveUserFromRole%2A>, <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A>, <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A>, <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> <xref:System.Web.Security.Roles>클래스</xref:System.Web.Security.Roles> 의</xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> 메서드와</xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> </xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> </xref:System.Web.Security.Roles.RemoveUserFromRole%2A>       트랜잭션 내에서 RemoveUsersFromRoles에 대 한 호출 중에 수행 되는 데이터베이스 업데이트가 이루어집니다. 오류가 발생 하는 경우 존재 하지 않는 사용자 이름 또는 지정된 된 역할에 이미 있는 사용자 이름과 같은 트랜잭션이 롤백되고 업데이트가 수행 되지 않습니다.       사용자 이름 및 역할 이름에 쉼표를 포함할 수 없습니다."
  example:
  - "The following code example adds one or more users to a role or removes a user from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/b95e86c3-c05c-486e-96fd-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/b95e86c3-c05c-486e-96fd-_1.aspx)]"
  syntax:
    content: public override void RemoveUsersFromRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "지정된 된 역할에서 제거할 사용자 이름의 문자열 배열입니다."
    - id: roleNames
      type: System.String[]
      description: "지정 된 사용자 이름을 제거할 역할 이름의 문자열 배열입니다."
  overload: System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       One of the users in <code>usernames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "역할 중 하나의 <code> roleNames </code> 은 빈 문자열 이거나 쉼표를 포함 합니다.       -또는-에 사용자 중 한 명 <code> usernames </code> 은 빈 문자열 이거나 쉼표를 포함 합니다.       -또는-에서 역할 중 하나의 <code> roleNames </code> 256 자 보다 깁니다.       -또는-에 사용자 중 한 명 <code> usernames </code> 256 자 보다 깁니다.       -또는- <code> roleNames </code> 중복 요소를 포함 합니다.       -또는- <code> usernames </code> 중복 요소를 포함 합니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "하나 이상의 지정된 된 사용자 이름을 찾지 못했습니다.       -또는-지정된 된 역할 이름 중 하나 이상을 찾을 수 없습니다.       -또는-하나 이상의 지정된 된 사용자 이름이 지정된 된 역할 이름 중 하나 이상과 연결 됩니다.       -또는-데이터베이스와 통신 하는 동안 알 수 없는 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.RoleExists(System.String)
  id: RoleExists(System.String)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: RoleExists(String)
  nameWithType: SqlRoleProvider.RoleExists(String)
  fullName: System.Web.Security.SqlRoleProvider.RoleExists(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "지정된 된 역할 이름이 역할 데이터베이스에 이미 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "RoleExists 메서드에 의해 호출 됩니다는 <xref:System.Web.Security.Roles>ASP.NET 응용 프로그램의 구성 파일 (Web.config)에 지정 된 SQL Server 데이터베이스에는 역할 이름이 있는지 확인 하는 클래스입니다.</xref:System.Web.Security.Roles>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.RoleExists%2A> method to determine whether a role name already exists before creating the role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.sq_1_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.sq_1_1.aspx)]"
  syntax:
    content: public override bool RoleExists (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "데이터베이스에서 검색할 역할의 이름입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>역할 이름이 데이터베이스;에 이미 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Security.SqlRoleProvider.RoleExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>빈 문자열 이거나 쉼표를 포함 합니다.       -또는- <code>roleName</code> 256 자 보다 깁니다."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "데이터베이스와 통신 하는 동안 알 수 없는 오류가 발생 했습니다."
  platform:
  - net462
references:
- uid: System.Web.Security.RoleProvider
  isExternal: false
  name: System.Web.Security.RoleProvider
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Configuration.Provider.ProviderException
  parent: System.Configuration.Provider
  isExternal: false
  name: ProviderException
  nameWithType: ProviderException
  fullName: System.Configuration.Provider.ProviderException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.Security.SqlRoleProvider.#ctor
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: SqlRoleProvider()
  nameWithType: SqlRoleProvider.SqlRoleProvider()
  fullName: System.Web.Security.SqlRoleProvider.SqlRoleProvider()
- uid: System.Web.Security.SqlRoleProvider.AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: AddUsersToRoles(String[],String[])
  nameWithType: SqlRoleProvider.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.SqlRoleProvider.AddUsersToRoles(String[],String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Security.SqlRoleProvider.ApplicationName
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: ApplicationName
  nameWithType: SqlRoleProvider.ApplicationName
  fullName: System.Web.Security.SqlRoleProvider.ApplicationName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Security.SqlRoleProvider.CreateRole(System.String)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: CreateRole(String)
  nameWithType: SqlRoleProvider.CreateRole(String)
  fullName: System.Web.Security.SqlRoleProvider.CreateRole(String)
- uid: System.Web.Security.SqlRoleProvider.DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: DeleteRole(String,Boolean)
  nameWithType: SqlRoleProvider.DeleteRole(String,Boolean)
  fullName: System.Web.Security.SqlRoleProvider.DeleteRole(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Security.SqlRoleProvider.FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: FindUsersInRole(String,String)
  nameWithType: SqlRoleProvider.FindUsersInRole(String,String)
  fullName: System.Web.Security.SqlRoleProvider.FindUsersInRole(String,String)
- uid: System.Web.Security.SqlRoleProvider.GetAllRoles
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: GetAllRoles()
  nameWithType: SqlRoleProvider.GetAllRoles()
  fullName: System.Web.Security.SqlRoleProvider.GetAllRoles()
- uid: System.Web.Security.SqlRoleProvider.GetRolesForUser(System.String)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: GetRolesForUser(String)
  nameWithType: SqlRoleProvider.GetRolesForUser(String)
  fullName: System.Web.Security.SqlRoleProvider.GetRolesForUser(String)
- uid: System.Web.Security.SqlRoleProvider.GetUsersInRole(System.String)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: GetUsersInRole(String)
  nameWithType: SqlRoleProvider.GetUsersInRole(String)
  fullName: System.Web.Security.SqlRoleProvider.GetUsersInRole(String)
- uid: System.Web.Security.SqlRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: Initialize(String,NameValueCollection)
  nameWithType: SqlRoleProvider.Initialize(String,NameValueCollection)
  fullName: System.Web.Security.SqlRoleProvider.Initialize(String,NameValueCollection)
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Web.Security.SqlRoleProvider.IsUserInRole(System.String,System.String)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: IsUserInRole(String,String)
  nameWithType: SqlRoleProvider.IsUserInRole(String,String)
  fullName: System.Web.Security.SqlRoleProvider.IsUserInRole(String,String)
- uid: System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: SqlRoleProvider.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(String[],String[])
- uid: System.Web.Security.SqlRoleProvider.RoleExists(System.String)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: RoleExists(String)
  nameWithType: SqlRoleProvider.RoleExists(String)
  fullName: System.Web.Security.SqlRoleProvider.RoleExists(String)
- uid: System.Web.Security.SqlRoleProvider.#ctor*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: SqlRoleProvider
  nameWithType: SqlRoleProvider.SqlRoleProvider
- uid: System.Web.Security.SqlRoleProvider.AddUsersToRoles*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: AddUsersToRoles
  nameWithType: SqlRoleProvider.AddUsersToRoles
- uid: System.Web.Security.SqlRoleProvider.ApplicationName*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: ApplicationName
  nameWithType: SqlRoleProvider.ApplicationName
- uid: System.Web.Security.SqlRoleProvider.CreateRole*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: CreateRole
  nameWithType: SqlRoleProvider.CreateRole
- uid: System.Web.Security.SqlRoleProvider.DeleteRole*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: DeleteRole
  nameWithType: SqlRoleProvider.DeleteRole
- uid: System.Web.Security.SqlRoleProvider.FindUsersInRole*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: FindUsersInRole
  nameWithType: SqlRoleProvider.FindUsersInRole
- uid: System.Web.Security.SqlRoleProvider.GetAllRoles*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: GetAllRoles
  nameWithType: SqlRoleProvider.GetAllRoles
- uid: System.Web.Security.SqlRoleProvider.GetRolesForUser*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: GetRolesForUser
  nameWithType: SqlRoleProvider.GetRolesForUser
- uid: System.Web.Security.SqlRoleProvider.GetUsersInRole*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: GetUsersInRole
  nameWithType: SqlRoleProvider.GetUsersInRole
- uid: System.Web.Security.SqlRoleProvider.Initialize*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: Initialize
  nameWithType: SqlRoleProvider.Initialize
- uid: System.Web.Security.SqlRoleProvider.IsUserInRole*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: IsUserInRole
  nameWithType: SqlRoleProvider.IsUserInRole
- uid: System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: RemoveUsersFromRoles
  nameWithType: SqlRoleProvider.RemoveUsersFromRoles
- uid: System.Web.Security.SqlRoleProvider.RoleExists*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: RoleExists
  nameWithType: SqlRoleProvider.RoleExists
