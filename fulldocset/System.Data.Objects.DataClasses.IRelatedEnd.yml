### YamlMime:ManagedReference
items:
- uid: System.Data.Objects.DataClasses.IRelatedEnd
  id: IRelatedEnd
  children:
  - System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)
  - System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)
  - System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)
  - System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)
  - System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery
  - System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator
  - System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded
  - System.Data.Objects.DataClasses.IRelatedEnd.Load
  - System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)
  - System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName
  - System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet
  - System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)
  - System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)
  - System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName
  - System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName
  langs:
  - csharp
  name: IRelatedEnd
  nameWithType: IRelatedEnd
  fullName: System.Data.Objects.DataClasses.IRelatedEnd
  type: Interface
  summary: "관계의 끝을 정의 합니다."
  remarks: "IRelatedEnd 연결의 end를 나타내는 개체에 대 한 요구 사항을 정의 합니다. 이 인터페이스는 <xref:System.Data.Objects.DataClasses.RelatedEnd>클래스</xref:System.Data.Objects.DataClasses.RelatedEnd> 에서 구현 <xref:System.Data.Objects.DataClasses.RelatedEnd>에 대 한 기본 클래스는 <xref:System.Data.Objects.DataClasses.EntityCollection%601>및 <xref:System.Data.Objects.DataClasses.EntityReference%601>클래스.</xref:System.Data.Objects.DataClasses.EntityReference%601> </xref:System.Data.Objects.DataClasses.EntityCollection%601></xref:System.Data.Objects.DataClasses.RelatedEnd>"
  example:
  - "The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832), which was generated by the [Entity Data Model Wizard](http://msdn.microsoft.com/en-us/423ec9a7-5464-43b7-a7ef-9f5f000848b5).  \n  \n The following example adds new `SalesOrderHeader` entities to the `Contact` entity. Then it gets all related ends from the `Contact` entity and displays relationship name, source role name, and target role name for each related end.  \n  \n [!code-vb[DP ObjectServices Concepts#IRelatedEnd](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#irelatedend)]\n [!code-cs[DP ObjectServices Concepts#IRelatedEnd](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#irelatedend)]"
  syntax:
    content: public interface IRelatedEnd
  implements: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)
  id: Add(System.Data.Objects.DataClasses.IEntityWithRelationships)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Add(IEntityWithRelationships)
  nameWithType: IRelatedEnd.Add(IEntityWithRelationships)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Add(IEntityWithRelationships)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "관련된 end에 있는 개체를 추가합니다."
  remarks: "<xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A>메서드는 개체를 관련된 end에 추가 합니다.</xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A> 관련된 end <xref:System.Data.Objects.DataClasses.EntityCollection%601>.</xref:System.Data.Objects.DataClasses.EntityCollection%601> 여야 합니다.       소스 개체가 구현 하는 경우 <xref:System.Data.Objects.DataClasses.IEntityWithRelationships>에서 추적 되 고는 <xref:System.Data.Objects.ObjectStateManager>, 추가 되는 개체도 추적 합니다.</xref:System.Data.Objects.ObjectStateManager> </xref:System.Data.Objects.DataClasses.IEntityWithRelationships>       <xref:System.Data.Objects.DataClasses.RelatedEnd>클래스에서 명시적으로 구현 하는 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A>메서드.</xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A> </xref:System.Data.Objects.DataClasses.RelatedEnd> <xref:System.Data.Objects.DataClasses.EntityCollection%601>클래스에이 구현을 사용 하 여.</xref:System.Data.Objects.DataClasses.EntityCollection%601> 자세한 내용은 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A>.</xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 을 참조 하십시오.       이 관련된 end는 <xref:System.Data.Objects.DataClasses.EntityReference%601>및 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A>참조의 속성이 아닙니다 `null`,이 메서드에서 예외를 throw 합니다.</xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> </xref:System.Data.Objects.DataClasses.EntityReference%601>"
  syntax:
    content: public void Add (System.Data.Objects.DataClasses.IEntityWithRelationships entity);
    parameters:
    - id: entity
      type: System.Data.Objects.DataClasses.IEntityWithRelationships
      description: "컬렉션에 추가 하는 개체입니다. `entity`구현 해야 <xref href=&quot;System.Data.Objects.DataClasses.IEntityWithRelationships&quot;> </xref>합니다."
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)
  id: Add(System.Object)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Add(Object)
  nameWithType: IRelatedEnd.Add(Object)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Add(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "관련된 end에 있는 개체를 추가합니다."
  remarks: "이 메서드 오버 로드를 사용 하 여 <xref:System.Data.Objects.DataClasses.IEntityWithRelationships>.</xref:System.Data.Objects.DataClasses.IEntityWithRelationships> 를 구현 하지 않는 엔터티 클래스에 대 한 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A> <xref:System.Data.Objects.DataClasses.IEntityWithRelationships>.</xref:System.Data.Objects.DataClasses.IEntityWithRelationships> 구현 수행 하는 엔터티 클래스에 대 한 메서드</xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A> 를 사용 하 여       Add 메서드를 관련된 end는 개체를 추가합니다. 관련된 end <xref:System.Data.Objects.DataClasses.EntityCollection%601>.</xref:System.Data.Objects.DataClasses.EntityCollection%601> 여야 합니다.       <xref:System.Data.Objects.DataClasses.RelatedEnd>클래스 Add 메서드를 명시적으로 구현 합니다.</xref:System.Data.Objects.DataClasses.RelatedEnd> <xref:System.Data.Objects.DataClasses.EntityCollection%601>클래스에이 구현을 사용 하 여.</xref:System.Data.Objects.DataClasses.EntityCollection%601> 자세한 내용은 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A>.</xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 을 참조 하십시오.       이 관련된 end는 <xref:System.Data.Objects.DataClasses.EntityReference%601>및 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A>참조의 속성이 아닙니다 `null`,이 메서드에서 예외를 throw 합니다.</xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> </xref:System.Data.Objects.DataClasses.EntityReference%601>"
  syntax:
    content: public void Add (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "컬렉션에 추가 하는 개체입니다."
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)
  id: Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Attach(IEntityWithRelationships)
  nameWithType: IRelatedEnd.Attach(IEntityWithRelationships)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Attach(IEntityWithRelationships)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "연결 된 두 개체 간의 관계를 정의 합니다."
  remarks: "<xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A>메서드 동일 하 게 연결 된 두 개체 간의 관계를 정의 하는 <xref:System.Data.Objects.ObjectContext>인스턴스.</xref:System.Data.Objects.ObjectContext> </xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A>       <xref:System.Data.Objects.DataClasses.RelatedEnd>클래스에서 명시적으로 구현 하는 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A>메서드.</xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A> </xref:System.Data.Objects.DataClasses.RelatedEnd> <xref:System.Data.Objects.DataClasses.EntityCollection%601>클래스가이 구현을 사용 하 여 연결 된 소스 개체와 컬렉션에 연결 된 개체 간의 관계를 정의 합니다.</xref:System.Data.Objects.DataClasses.EntityCollection%601> 자세한 내용은 참조 [연결 및 분리 개체](http://msdn.microsoft.com/en-us/41d5c1ef-1b78-4502-aa10-7e1438d62d23)합니다."
  syntax:
    content: public void Attach (System.Data.Objects.DataClasses.IEntityWithRelationships entity);
    parameters:
    - id: entity
      type: System.Data.Objects.DataClasses.IEntityWithRelationships
      description: "연결 되는 개체입니다. `entity`구현 해야 <xref href=&quot;System.Data.Objects.DataClasses.IEntityWithRelationships&quot;> </xref>합니다."
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Attach*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)
  id: Attach(System.Object)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Attach(Object)
  nameWithType: IRelatedEnd.Attach(Object)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Attach(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "연결 된 두 개체 간의 관계를 정의 합니다."
  remarks: "이 메서드 오버 로드를 사용 하 여 <xref:System.Data.Objects.DataClasses.IEntityWithRelationships>.</xref:System.Data.Objects.DataClasses.IEntityWithRelationships> 를 구현 하지 않는 엔터티 클래스에 대 한 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A> <xref:System.Data.Objects.DataClasses.IEntityWithRelationships>.</xref:System.Data.Objects.DataClasses.IEntityWithRelationships> 구현 수행 하는 엔터티 클래스에 대 한 메서드</xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A> 를 사용 하 여       Attach 메서드는 동일 하 게 연결 된 두 개체 간의 관계를 정의 하는 데 사용 됩니다 <xref:System.Data.Objects.ObjectContext>인스턴스.</xref:System.Data.Objects.ObjectContext>       <xref:System.Data.Objects.DataClasses.RelatedEnd>클래스 Attach 메서드를 명시적으로 구현 합니다.</xref:System.Data.Objects.DataClasses.RelatedEnd> <xref:System.Data.Objects.DataClasses.EntityCollection%601>클래스가이 구현을 사용 하 여 연결 된 소스 개체와 컬렉션에 연결 된 개체 간의 관계를 정의 합니다.</xref:System.Data.Objects.DataClasses.EntityCollection%601> 자세한 내용은 참조 [연결 및 분리 개체](http://msdn.microsoft.com/en-us/41d5c1ef-1b78-4502-aa10-7e1438d62d23)합니다."
  syntax:
    content: public void Attach (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "연결 되는 개체입니다."
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Attach*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery
  id: CreateSourceQuery
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: CreateSourceQuery()
  nameWithType: IRelatedEnd.CreateSourceQuery()
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "반환 된 <xref:System.Collections.IEnumerable>관련된 end에 속하는 개체를 나타내는입니다.</xref:System.Collections.IEnumerable>"
  remarks: "CreateSourceQuery 메서드는 <xref:System.Data.Objects.DataClasses.RelatedEnd>클래스</xref:System.Data.Objects.DataClasses.RelatedEnd> 에서 명시적으로 구현 됩니다.  <xref:System.Data.Objects.DataClasses.EntityCollection%601>및 <xref:System.Data.Objects.DataClasses.EntityReference%601>클래스는 모두 재정의 <xref:System.Data.Objects.DataClasses.RelatedEnd.System%23Data%23Objects%23DataClasses%23IRelatedEnd%23CreateSourceQuery%2A>반환 하는 메서드는 <xref:System.Data.Objects.ObjectQuery%601>, 실행 될 때 반환 하는 관련된 end에 속하는 개체의 동일한 집합.</xref:System.Data.Objects.ObjectQuery%601> </xref:System.Data.Objects.DataClasses.RelatedEnd.System%23Data%23Objects%23DataClasses%23IRelatedEnd%23CreateSourceQuery%2A> </xref:System.Data.Objects.DataClasses.EntityReference%601> </xref:System.Data.Objects.DataClasses.EntityCollection%601>"
  syntax:
    content: public System.Collections.IEnumerable CreateSourceQuery ();
    parameters: []
    return:
      type: System.Collections.IEnumerable
      description: "<xref:System.Collections.IEnumerable>관련된 end에 속하는 개체를 나타내는입니다.</xref:System.Collections.IEnumerable>"
  overload: System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator
  id: GetEnumerator
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: IRelatedEnd.GetEnumerator()
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "반환 된 <xref:System.Collections.IEnumerator>관련된 개체의 컬렉션을 반복 하는.</xref:System.Collections.IEnumerator>"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>관련된 개체의 컬렉션을 반복 하는.</xref:System.Collections.IEnumerator>"
  overload: System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded
  id: IsLoaded
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: IsLoaded
  nameWithType: IRelatedEnd.IsLoaded
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "관련된 개체가 모두 로드 되었는지 여부를 나타내는 값을 가져옵니다."
  remarks: "<xref:System.Data.Objects.DataClasses.RelatedEnd>클래스 구현 <xref:System.Data.Objects.DataClasses.IRelatedEnd>안내 하십시오.</xref:System.Data.Objects.DataClasses.IRelatedEnd> IsLoaded 메서드</xref:System.Data.Objects.DataClasses.RelatedEnd> 자세한 내용은 <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>.</xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> 을 참조 하십시오.       <xref:System.Data.Objects.DataClasses.EntityCollection%601> <xref:System.Data.Objects.DataClasses.EntityReference%601> <xref:System.Data.Objects.DataClasses.RelatedEnd>.</xref:System.Data.Objects.DataClasses.RelatedEnd> 에서 클래스</xref:System.Data.Objects.DataClasses.EntityReference%601> 상속</xref:System.Data.Objects.DataClasses.EntityCollection%601>"
  example:
  - '[Defining and Managing Relationships](http://msdn.microsoft.com/en-us/2c92c097-56bd-4145-989e-16d92475ecda)'
  syntax:
    content: public bool IsLoaded { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관련된 end; 데이터베이스에서 모든 관련된 엔터티를 포함 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Load
  id: Load
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Load()
  nameWithType: IRelatedEnd.Load()
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Load()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "기본 병합 옵션을 사용이 관련된 end에는 관련된 개체 또는 개체를 로드합니다."
  remarks: "<xref:System.Data.Objects.DataClasses.RelatedEnd>클래스 구현 <xref:System.Data.Objects.DataClasses.IRelatedEnd>.</xref:System.Data.Objects.DataClasses.IRelatedEnd> 의 Load 메서드</xref:System.Data.Objects.DataClasses.RelatedEnd> 자세한 내용은 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>.</xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 을 참조 하십시오.       [로드](~/add/includes/ajax-current-ext-md.md) 탐색 속성에 의해 노출 되는 관련된 end에서 관련된 개체를 명시적으로 로드 하기 위해 호출 됩니다. 자세한 내용은 참조 [관련 개체 로드](http://msdn.microsoft.com/en-us/452347d2-7b3b-44cd-9001-231299a28cb1)합니다.       <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>메서드 데이터 소스에서 여부 관련된 개체를 로드 <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>은 `true`.</xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> </xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>"
  syntax:
    content: public void Load ();
    parameters: []
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)
  id: Load(System.Data.Objects.MergeOption)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Load(MergeOption)
  nameWithType: IRelatedEnd.Load(MergeOption)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Load(MergeOption)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "지정된 된 병합 옵션 사용 관련된 end에는 관련된 개체 또는 개체를 로드합니다."
  remarks: "<xref:System.Data.Objects.DataClasses.RelatedEnd>클래스 Load 메서드를 구현 합니다.</xref:System.Data.Objects.DataClasses.RelatedEnd> 둘 다는 <xref:System.Data.Objects.DataClasses.EntityCollection%601>및 <xref:System.Data.Objects.DataClasses.EntityReference%601>클래스에이 구현을 재정의 합니다.</xref:System.Data.Objects.DataClasses.EntityReference%601> </xref:System.Data.Objects.DataClasses.EntityCollection%601>       `Load`탐색 속성에 의해 노출 되는 관련된 end에서 관련된 개체를 명시적으로 로드 하 라고 합니다. 자세한 내용은 참조 [관련 개체 로드](http://msdn.microsoft.com/en-us/452347d2-7b3b-44cd-9001-231299a28cb1)합니다.       Load 메서드에서 데이터 소스에서 여부 관련된 개체를 로드 <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>은 `true`.</xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>"
  syntax:
    content: public void Load (System.Data.Objects.MergeOption mergeOption);
    parameters:
    - id: mergeOption
      type: System.Data.Objects.MergeOption
      description: "<xref href=&quot;System.Data.Objects.MergeOption&quot;> </xref> 를 기존 개체를 병합할 때 사용할 &lt;xref:System.Data.Objects.DataClasses.EntityCollection%601&gt;합니다."
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName
  id: RelationshipName
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: RelationshipName
  nameWithType: IRelatedEnd.RelationshipName
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "이 관련된 end가 참여 하는 관계의 이름을 가져옵니다."
  remarks: ''
  example:
  - "The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832), which was generated by the [Entity Data Model Wizard](http://msdn.microsoft.com/en-us/423ec9a7-5464-43b7-a7ef-9f5f000848b5).  \n  \n The following example adds new `SalesOrderHeader` entities to the `Contact` entity. Then it gets all related ends from the `Contact` entity and displays the relationship name, source role name, and target role name for each related end.  \n  \n [!code-vb[DP ObjectServices Concepts#IRelatedEnd](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#irelatedend)]\n [!code-cs[DP ObjectServices Concepts#IRelatedEnd](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#irelatedend)]"
  syntax:
    content: public string RelationshipName { get; }
    return:
      type: System.String
      description: "이 관계의 이름을 <xref href=&quot;System.Data.Objects.DataClasses.IRelatedEnd&quot;> </xref> 참여 합니다. 관계 이름이 정규화 된 네임 스페이스 않습니다."
  overload: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet
  id: RelationshipSet
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: RelationshipSet
  nameWithType: IRelatedEnd.RelationshipSet
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "관련된 end에 대 한 메타 데이터에 대 한 참조를 반환합니다."
  syntax:
    content: public System.Data.Metadata.Edm.RelationshipSet RelationshipSet { get; }
    return:
      type: System.Data.Metadata.Edm.RelationshipSet
      description: "A <xref href=&quot;System.Data.Metadata.Edm.RelationshipSet&quot;> </xref> 관계의 끝에 대 한 메타 데이터가 포함 된 개체입니다."
  overload: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)
  id: Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Remove(IEntityWithRelationships)
  nameWithType: IRelatedEnd.Remove(IEntityWithRelationships)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Remove(IEntityWithRelationships)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "관련된 end의 개체 컬렉션에서 개체를 제거 합니다."
  remarks: "<xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A>메서드는 관련된 end에서 개체를 제거 합니다.</xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A> 관련된 end <xref:System.Data.Objects.DataClasses.EntityCollection%601>.</xref:System.Data.Objects.DataClasses.EntityCollection%601> 여야 합니다.       <xref:System.Data.Objects.DataClasses.RelatedEnd>클래스에서 명시적으로 구현 하는 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A>메서드.</xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A> </xref:System.Data.Objects.DataClasses.RelatedEnd> <xref:System.Data.Objects.DataClasses.EntityCollection%601>클래스에이 구현을 사용 하 여.</xref:System.Data.Objects.DataClasses.EntityCollection%601> 자세한 내용은 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A>.</xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> 을 참조 하십시오."
  syntax:
    content: public bool Remove (System.Data.Objects.DataClasses.IEntityWithRelationships entity);
    parameters:
    - id: entity
      type: System.Data.Objects.DataClasses.IEntityWithRelationships
      description: "컬렉션에서 제거할 개체입니다. `entity`구현 해야 <xref href=&quot;System.Data.Objects.DataClasses.IEntityWithRelationships&quot;> </xref>합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>entity</code> was successfully removed, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if <code>entity</code> was not part of the <xref href=&quot;System.Data.Objects.DataClasses.IRelatedEnd&quot;></xref>."
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: IRelatedEnd.Remove(Object)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Remove(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "관련된 end의 개체 컬렉션에서 개체를 제거 합니다."
  remarks: "이 메서드 오버 로드를 사용 하 여 <xref:System.Data.Objects.DataClasses.IEntityWithRelationships>.</xref:System.Data.Objects.DataClasses.IEntityWithRelationships> 를 구현 하지 않는 엔터티 클래스에 대 한 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A> <xref:System.Data.Objects.DataClasses.IEntityWithRelationships>.</xref:System.Data.Objects.DataClasses.IEntityWithRelationships> 구현 수행 하는 엔터티 클래스에 대 한 메서드</xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A> 를 사용 하 여       Remove 메서드를 관련된 end에서 개체를 제거 합니다. 관련된 end <xref:System.Data.Objects.DataClasses.EntityCollection%601>.</xref:System.Data.Objects.DataClasses.EntityCollection%601> 여야 합니다.       <xref:System.Data.Objects.DataClasses.RelatedEnd>클래스 Remove 메서드를 명시적으로 구현 합니다.</xref:System.Data.Objects.DataClasses.RelatedEnd> <xref:System.Data.Objects.DataClasses.EntityCollection%601>클래스에이 구현을 사용 하 여.</xref:System.Data.Objects.DataClasses.EntityCollection%601> 자세한 내용은 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A>.</xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> 을 참조 하십시오."
  syntax:
    content: public bool Remove (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "컬렉션에서 제거 하는 개체입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <code> entity </code> 제거 했습니다. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if <code>entity</code> was not part of the <xref href=&quot;System.Data.Objects.DataClasses.IRelatedEnd&quot;></xref>."
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName
  id: SourceRoleName
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: SourceRoleName
  nameWithType: IRelatedEnd.SourceRoleName
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "관계의 소스 끝 역할 이름을 가져옵니다."
  remarks: "<xref:System.Data.Objects.DataClasses.RelatedEnd>SourceRoleName 속성을 구현 하는 클래스입니다.</xref:System.Data.Objects.DataClasses.RelatedEnd> 자세한 내용은 <xref:System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName%2A>.</xref:System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName%2A> 을 참조 하십시오.       역할 이름은으로 지정 됩니다는 `Role` 특성에는 `End` 개념적 모델에이 관계를 정의 하는 연결에에서 대 한 요소입니다. 자세한 내용은 참조 [Association 요소 (CSDL)](http://msdn.microsoft.com/en-us/c305169a-8af7-432f-9ba7-800a163aed41)합니다."
  syntax:
    content: public string SourceRoleName { get; }
    return:
      type: System.String
      description: "관계의 소스 끝 역할 이름입니다."
  overload: System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName
  id: TargetRoleName
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: TargetRoleName
  nameWithType: IRelatedEnd.TargetRoleName
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "관계의 대상 끝에 있는 역할 이름을 가져옵니다."
  remarks: "<xref:System.Data.Objects.DataClasses.RelatedEnd>TargetRoleName 속성을 구현 하는 클래스입니다.</xref:System.Data.Objects.DataClasses.RelatedEnd> 자세한 내용은 <xref:System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName%2A>.</xref:System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName%2A> 을 참조 하십시오.       역할 이름은으로 지정 됩니다는 `Role` 특성에는 `End` 개념적 모델에이 관계를 정의 하는 연결에에서 대 한 요소입니다. 자세한 내용은 참조 [Association 요소 (CSDL)](http://msdn.microsoft.com/en-us/c305169a-8af7-432f-9ba7-800a163aed41)합니다."
  syntax:
    content: public string TargetRoleName { get; }
    return:
      type: System.String
      description: "관계의 대상 끝 역할 이름입니다."
  overload: System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Add(IEntityWithRelationships)
  nameWithType: IRelatedEnd.Add(IEntityWithRelationships)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Add(IEntityWithRelationships)
- uid: System.Data.Objects.DataClasses.IEntityWithRelationships
  parent: System.Data.Objects.DataClasses
  isExternal: false
  name: IEntityWithRelationships
  nameWithType: IEntityWithRelationships
  fullName: System.Data.Objects.DataClasses.IEntityWithRelationships
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Add(Object)
  nameWithType: IRelatedEnd.Add(Object)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Add(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Attach(IEntityWithRelationships)
  nameWithType: IRelatedEnd.Attach(IEntityWithRelationships)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Attach(IEntityWithRelationships)
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Attach(Object)
  nameWithType: IRelatedEnd.Attach(Object)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Attach(Object)
- uid: System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: CreateSourceQuery()
  nameWithType: IRelatedEnd.CreateSourceQuery()
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery()
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: GetEnumerator()
  nameWithType: IRelatedEnd.GetEnumerator()
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: IsLoaded
  nameWithType: IRelatedEnd.IsLoaded
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Load
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Load()
  nameWithType: IRelatedEnd.Load()
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Load()
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Load(MergeOption)
  nameWithType: IRelatedEnd.Load(MergeOption)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Load(MergeOption)
- uid: System.Data.Objects.MergeOption
  parent: System.Data.Objects
  isExternal: false
  name: MergeOption
  nameWithType: MergeOption
  fullName: System.Data.Objects.MergeOption
- uid: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: RelationshipName
  nameWithType: IRelatedEnd.RelationshipName
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: RelationshipSet
  nameWithType: IRelatedEnd.RelationshipSet
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet
- uid: System.Data.Metadata.Edm.RelationshipSet
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: RelationshipSet
  nameWithType: RelationshipSet
  fullName: System.Data.Metadata.Edm.RelationshipSet
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Remove(IEntityWithRelationships)
  nameWithType: IRelatedEnd.Remove(IEntityWithRelationships)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Remove(IEntityWithRelationships)
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Remove(Object)
  nameWithType: IRelatedEnd.Remove(Object)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Remove(Object)
- uid: System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: SourceRoleName
  nameWithType: IRelatedEnd.SourceRoleName
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName
- uid: System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: TargetRoleName
  nameWithType: IRelatedEnd.TargetRoleName
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Add*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Add
  nameWithType: IRelatedEnd.Add
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Attach*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Attach
  nameWithType: IRelatedEnd.Attach
- uid: System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: CreateSourceQuery
  nameWithType: IRelatedEnd.CreateSourceQuery
- uid: System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: GetEnumerator
  nameWithType: IRelatedEnd.GetEnumerator
- uid: System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: IsLoaded
  nameWithType: IRelatedEnd.IsLoaded
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Load*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Load
  nameWithType: IRelatedEnd.Load
- uid: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: RelationshipName
  nameWithType: IRelatedEnd.RelationshipName
- uid: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: RelationshipSet
  nameWithType: IRelatedEnd.RelationshipSet
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Remove*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Remove
  nameWithType: IRelatedEnd.Remove
- uid: System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: SourceRoleName
  nameWithType: IRelatedEnd.SourceRoleName
- uid: System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: TargetRoleName
  nameWithType: IRelatedEnd.TargetRoleName
