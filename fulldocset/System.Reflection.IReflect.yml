### YamlMime:ManagedReference
items:
- uid: System.Reflection.IReflect
  id: IReflect
  children:
  - System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  - System.Reflection.IReflect.UnderlyingSystemType
  langs:
  - csharp
  name: IReflect
  nameWithType: IReflect
  fullName: System.Reflection.IReflect
  type: Interface
  summary: "와 상호 운용 되는 [IDispatch 인터페이스](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)합니다."
  remarks: "IReflect 인터페이스는 상호 운용 하는 데 사용 되는 [IDispatch 인터페이스](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)합니다. 하위 집합을 정의 하는 IReflect는 <xref:System.Type>리플렉션 메서드.</xref:System.Type> 이 인터페이스를 구현 하면 COM에서 개체에 액세스할 때의 동작을 사용자 지정 하는 종류는 `IDispatch` 개체입니다. <xref:System.Runtime.InteropServices.CustomMarshalers.ExpandoToDispatchExMarshaler>IReflect를 구현 하는 개체를 마샬링하 클래스를 사용할 수 또는 <xref:System.Runtime.InteropServices.Expando.IExpando>를 com `IDispatch` 개체, 그 반대의.</xref:System.Runtime.InteropServices.Expando.IExpando> </xref:System.Runtime.InteropServices.CustomMarshalers.ExpandoToDispatchExMarshaler>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("AFBF15E5-C37C-11d2-B88E-00A0C9B471B8")]

      public interface IReflect
  implements: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetField(String,BindingFlags)
  nameWithType: IReflect.GetField(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetField(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "반환 된 <xref:System.Reflection.FieldInfo>바인딩 플래그와 지정 된 필드에 해당 하는 개체입니다.</xref:System.Reflection.FieldInfo>"
  syntax:
    content: public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "찾을 필드의 이름입니다."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "바인딩 특성 검색을 제어 하는 데 사용 합니다."
    return:
      type: System.Reflection.FieldInfo
      description: "A <xref:System.Reflection.FieldInfo>에 지정 된 검색 제약 조건을 충족 하는 명명 된 개체에 대 한 필드 정보를 포함 하는 개체 <code> bindingAttr </code>.</xref:System.Reflection.FieldInfo>"
  overload: System.Reflection.IReflect.GetField*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "개체 이름이 같은 여러 필드를 구현합니다."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetFields(BindingFlags)
  nameWithType: IReflect.GetFields(BindingFlags)
  fullName: System.Reflection.IReflect.GetFields(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "<xref:System.Reflection.FieldInfo>현재 클래스의 모든 필드에 해당 하는 개체</xref:System.Reflection.FieldInfo> 의 배열을 반환합니다."
  remarks: "일치 하는 이름을 기준으로 합니다. 각 필드에는 고유한 이름이 있어야 합니다. <xref:System.Reflection.BindingFlags?displayProperty=fullName>플래그 비공개 메서드 검색에 포함 되도록 지정 합니다.</xref:System.Reflection.BindingFlags?displayProperty=fullName> <xref:System.Reflection.BindingFlags?displayProperty=fullName>플래그는 공용 메서드는 검색에 포함 되도록 지정 합니다.</xref:System.Reflection.BindingFlags?displayProperty=fullName>"
  syntax:
    content: public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "바인딩 특성 검색을 제어 하는 데 사용 합니다."
    return:
      type: System.Reflection.FieldInfo[]
      description: "배열을 <xref:System.Reflection.FieldInfo>이에 지정 된 검색 제약 조건을 충족 하는 리플렉션 개체에 대 한 모든 필드 정보를 포함 하는 개체 <code> bindingAttr </code>.</xref:System.Reflection.FieldInfo>"
  overload: System.Reflection.IReflect.GetFields*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMember(String,BindingFlags)
  nameWithType: IReflect.GetMember(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMember(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "배열을 검색 <xref:System.Reflection.MemberInfo>모든 공용 멤버에 지정 된 이름과 일치 하는 모든 멤버에 해당 합니다.</xref:System.Reflection.MemberInfo>"
  remarks: "GetMember 메서드의 배열을 검색 <xref:System.Reflection.MemberInfo>이름과 바인딩 특성을 사용 하 여 모든 공용 멤버에 지정 된 이름과 일치 하는 모든 멤버에 해당 하는 개체입니다.</xref:System.Reflection.MemberInfo> 지정 된 이름의 대/소문자를 무시 또는 관찰은 <xref:System.Reflection.BindingFlags?displayProperty=fullName>.</xref:System.Reflection.BindingFlags?displayProperty=fullName> 에 지정 된 대로"
  syntax:
    content: public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "찾으려는 멤버의 이름입니다."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "바인딩 특성 검색을 제어 하는 데 사용 합니다."
    return:
      type: System.Reflection.MemberInfo[]
      description: "배열을 <xref:System.Reflection.MemberInfo>일치 하는 개체는 <code> name </code> 매개 변수.</xref:System.Reflection.MemberInfo>"
  overload: System.Reflection.IReflect.GetMember*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  id: GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMembers(BindingFlags)
  nameWithType: IReflect.GetMembers(BindingFlags)
  fullName: System.Reflection.IReflect.GetMembers(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "<xref:System.Reflection.MemberInfo>또는 모든 public 멤버를 현재 클래스의 모든 멤버에 해당 하는 개체</xref:System.Reflection.MemberInfo> 의 배열을 검색합니다."
  remarks: "이 메서드는 <xref:System.Reflection.MemberInfo>모든 public 멤버 또는 현재 클래스의 모든 멤버에 해당 하는 바인딩 특성을 사용 하 여 개체</xref:System.Reflection.MemberInfo> 의 배열을 검색합니다. 이 개체에 대해 정의 된 멤버의 모든의 배열을 반환 합니다."
  syntax:
    content: public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "바인딩 특성 검색을 제어 하는 데 사용 합니다."
    return:
      type: System.Reflection.MemberInfo[]
      description: "배열을 <xref:System.Reflection.MemberInfo>이 리플렉션 개체에 대 한 모든 멤버 정보를 포함 하는 개체입니다.</xref:System.Reflection.MemberInfo>"
  overload: System.Reflection.IReflect.GetMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  id: GetMethod(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethod(String,BindingFlags)
  nameWithType: IReflect.GetMethod(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "검색 한 <xref:System.Reflection.MethodInfo>개체에서 지정된 된 메서드에 해당 하는 지정 된 검색 제약.</xref:System.Reflection.MethodInfo>"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "찾으려는 멤버의 이름입니다."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "바인딩 특성 검색을 제어 하는 데 사용 합니다."
    return:
      type: System.Reflection.MethodInfo
      description: "A <xref:System.Reflection.MethodInfo>일치 항목에 지정 된 메서드 이름 및 검색 조건을 기반으로 메서드 정보를 포함 하는 개체 <code> bindingAttr </code>.</xref:System.Reflection.MethodInfo>"
  overload: System.Reflection.IReflect.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "개체는 같은 이름의 여러 메서드를 구현합니다."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  nameWithType: IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "검색 한 <xref:System.Reflection.MethodInfo>개체를 사용 하 여, 지정된 된 메서드에 해당 하는 <xref:System.Type>오버 로드 된 메서드 중에서 선택할 배열입니다.</xref:System.Type> </xref:System.Reflection.MethodInfo>"
  remarks: "반환 값은 일치 하는 메서드 이름 뒤에 <xref:System.Reflection.BindingFlags>열거형 멤버에 의해 지정 된 형식 변환의 종류는 `binder` 매개 변수, 오버 로드를 및 <xref:System.Reflection.ParameterInfo>메서드의 시그니처를 설명 하는.</xref:System.Reflection.ParameterInfo> </xref:System.Reflection.BindingFlags>"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "찾으려는 멤버의 이름입니다."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "바인딩 특성 검색을 제어 하는 데 사용 합니다."
    - id: binder
      type: System.Reflection.Binder
      description: "구현 하는 개체 <xref href=&quot;System.Reflection.Binder&quot;> </xref>,이 메서드와 관련 된 속성이 포함 된 합니다."
    - id: types
      type: System.Type[]
      description: "오버 로드 된 메서드 중 하나를 선택 하는 데 사용 되는 배열입니다."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "바인딩을 형식이 수정 된 매개 변수 서명과 함께 작동 하는 데 사용 되는 매개 변수 한정자의 배열입니다."
    return:
      type: System.Reflection.MethodInfo
      description: "지정된 된 모든 매개 변수와 일치 하는 요청 된 메서드."
  overload: System.Reflection.IReflect.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "개체는 같은 이름의 여러 메서드를 구현합니다."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethods(BindingFlags)
  nameWithType: IReflect.GetMethods(BindingFlags)
  fullName: System.Reflection.IReflect.GetMethods(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "<xref:System.Reflection.MethodInfo>모든 공용 메서드 또는 현재 클래스의 모든 메서드를 사용 하 여 개체</xref:System.Reflection.MethodInfo> 의 배열을 검색합니다"
  remarks: "public이 아닌 특성 `bindingAttr` ֲ만 공용 메서드가 반환 됩니다."
  syntax:
    content: public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "바인딩 특성 검색을 제어 하는 데 사용 합니다."
    return:
      type: System.Reflection.MethodInfo[]
      description: "배열을 <xref:System.Reflection.MethodInfo>에 지정 된 검색 제약 조건을 충족 하는이 리플렉션 개체에 대해 정의 된 모든 메서드를 포함 하는 개체 <code> bindingAttr </code>.</xref:System.Reflection.MethodInfo>"
  overload: System.Reflection.IReflect.GetMethods*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  id: GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperties(BindingFlags)
  nameWithType: IReflect.GetProperties(BindingFlags)
  fullName: System.Reflection.IReflect.GetProperties(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "<xref:System.Reflection.PropertyInfo>모든 공용 속성에 현재 클래스의 모든 속성에 해당 하는 개체</xref:System.Reflection.PropertyInfo> 의 배열을 검색합니다."
  syntax:
    content: public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "바인딩 특성 검색을 제어 하는 데 사용 합니다."
    return:
      type: System.Reflection.PropertyInfo[]
      description: "배열을 <xref:System.Reflection.PropertyInfo>리플렉션 개체에 정의 된 모든 속성에 대 한 개체입니다.</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  id: GetProperty(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperty(String,BindingFlags)
  nameWithType: IReflect.GetProperty(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "검색 한 <xref:System.Reflection.PropertyInfo>아래 지정 된 속성에 해당 하는 개체 검색 제약 조건을 지정 합니다.</xref:System.Reflection.PropertyInfo>"
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "찾을 속성의 이름입니다."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "바인딩 특성 검색을 제어 하는 데 사용 합니다."
    return:
      type: System.Reflection.PropertyInfo
      description: "A <xref:System.Reflection.PropertyInfo>에 지정 된 검색 제약 조건을 충족 하는 속성에 대 한 개체 <code> bindingAttr </code>, 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우 속성을 찾을 수 없습니다.</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "개체 이름이 같은 여러 필드를 구현합니다."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "검색 한 <xref:System.Reflection.PropertyInfo>지정된 된 속성에 해당 하는 개체 검색 제약 조건을 지정 합니다.</xref:System.Reflection.PropertyInfo>"
  remarks: "이 메서드를 검색 한 <xref:System.Reflection.PropertyInfo>아래 지정 된 속성에 해당 하는 개체 검색 제약 조건을 지정 합니다.</xref:System.Reflection.PropertyInfo> 형식 배열의 오버 로드 된 메서드 중에서 선택 하는 데 사용 됩니다."
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "찾으려는 멤버의 이름입니다."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "바인딩 특성 검색을 제어 하는 데 사용 합니다."
    - id: binder
      type: System.Reflection.Binder
      description: "구현 하는 개체 <xref href=&quot;System.Reflection.Binder&quot;> </xref>,이 메서드와 관련 된 속성이 포함 된 합니다."
    - id: returnType
      type: System.Type
      description: "속성의 형식입니다."
    - id: types
      type: System.Type[]
      description: "동일한 이름 가진 오버 로드 된 메서드 중 하나를 선택 하는 데 사용 되는 배열입니다."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "매개 변수 한정자를 선택 하는 데 사용 되는 배열입니다."
    return:
      type: System.Reflection.PropertyInfo
      description: "A <xref:System.Reflection.PropertyInfo>위치 속성이이 리플렉션 개체에 지정 된 이름 가진 속성이 있는 경우이 속성에 대 한 개체 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우 속성을 찾을 수 없습니다.</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "지정된 된 멤버를 호출합니다."
  remarks: "메서드를 호출 해야 할 액세스할 수 있도록 하 고 지정된 된 바인더 및 호출 특성의 제약 조건 하에서 지정 된 인수 목록과 가장 구체적으로 일치를 제공 해야 합니다.       메서드 선언의 매개 변수 수가 지정 된 인수 목록에는 인수 개수 및 각 인수의 형식을 매개 변수의 형식 바인더를 통해 변환 될 수 하는 경우는 메서드를 호출 합니다.      > [!NOTE] > InvokeMember 메서드에 전달 된 매개 변수 한정자 배열에는 단일 매개 변수 한정자를 포함 해야 합니다. Com에 노출 하는 경우 참조로 전달 해야 하는 인수를 결정할 때 간주 되는 첫 번째 매개 변수 한정자       바인더 요청 된 바인딩 형식에 따라 모든 일치 하는 메서드를 찾습니다 (<xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.IReflect.GetProperties%2A>등).</xref:System.Reflection.IReflect.GetProperties%2A> </xref:System.Reflection.BindingFlags?displayProperty=fullName> 메서드의 집합 이름, 인수 개수를 및 바인더에서 정의 된 검색 한정자 집합으로 필터링 됩니다. 메서드를 선택한 후를 호출 하 고 해당 시점에 내게 필요한 옵션을 선택 합니다. 어떤 메서드 집합을 메서드와 연결 된 내게 필요한 옵션 특성을 기준으로 검색은 검색을 제어할 수 있습니다. <xref:System.Reflection.Binder.BindToMethod%2A>메서드를 호출할 수를 선택 합니다.</xref:System.Reflection.Binder.BindToMethod%2A> 기본 바인더 가장 구체적으로 일치를 선택합니다.       완전히 신뢰할 수 있는 코드에 대 한 액세스 제한이 없습니다. 즉, private 생성자, 메서드, 필드 및 속성 액세스 하 고 수 코드를 완전히 신뢰할 수 있는 경우 리플렉션을 통해 호출 합니다."
  example:
  - "The following example obtains the value of the <xref:System.DateTime.Now%2A> property.  \n  \n [!code-cs[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/csharp/46b5c0ee-07c6-4491-8e06-_1.cs)]\n [!code-vb[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/visualbasic/46b5c0ee-07c6-4491-8e06-_1.vb)]\n [!code-cpp[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/cpp/46b5c0ee-07c6-4491-8e06-_1.cpp)]"
  syntax:
    content: public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
    parameters:
    - id: name
      type: System.String
      description: "찾으려는 멤버의 이름입니다."
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: "중 하나는 <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> 호출 특성입니다. `invokeAttr` 매개 변수는 생성자, 메서드, 속성 또는 필드 일 수 있습니다. 적합 한 호출 특성을 지정 해야 합니다. 빈 문자열을 전달 하 여 클래스의 기본 멤버를 호출 합니다. (&quot;&quot;)으로 멤버의 이름입니다."
    - id: binder
      type: System.Reflection.Binder
      description: "중 하나는 <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> 비트 플래그입니다. 구현 <xref href=&quot;System.Reflection.Binder&quot;> </xref>,이 메서드와 관련 된 속성이 포함 된 합니다."
    - id: target
      type: System.Object
      description: "지정된 된 멤버를 호출 하는 개체입니다. 이 매개 변수는 정적 멤버에 대 한 무시 됩니다."
    - id: args
      type: System.Object[]
      description: "호출할 수, 순서 및 멤버의 매개 변수 형식을 포함 된 개체의 배열입니다. 매개 변수가 없는 경우 빈 배열입니다."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: 'An array of <xref href="System.Reflection.ParameterModifier"></xref> objects. This array has the same length as the `args` parameter, representing the invoked member''s argument attributes in the metadata. A parameter can have the following attributes: <xref uid="langword_csharp_pdIn" name="pdIn" href=""></xref>, <xref uid="langword_csharp_pdOut" name="pdOut" href=""></xref>, <xref uid="langword_csharp_pdRetval" name="pdRetval" href=""></xref>, <xref uid="langword_csharp_pdOptional" name="pdOptional" href=""></xref>, and <xref uid="langword_csharp_pdHasDefault" name="pdHasDefault" href=""></xref>. These represent [In], [Out], [retval], [optional], and a default parameter, respectively. These attributes are used by various interoperability services.'
    - id: culture
      type: System.Globalization.CultureInfo
      description: "인스턴스 <xref:System.Globalization.CultureInfo>형식의 강제 변환을 제어 하는 데 사용 합니다.</xref:System.Globalization.CultureInfo> 예를 들어 `culture` 변환는 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 1, 000을 나타내는 한 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> 값 1000은 각 문화권 마다 다르게 표현 되므로 합니다. 이 매개 변수가 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, <xref:System.Globalization.CultureInfo>현재 스레드가 사용 됩니다.</xref:System.Globalization.CultureInfo>"
    - id: namedParameters
      type: System.String[]
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 매개 변수의 배열입니다."
    return:
      type: System.Object
      description: "지정 된 멤버입니다."
  overload: System.Reflection.IReflect.InvokeMember*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "둘 이상의 인수를 지정 하는 필드에 대 한 <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: "필드 또는 속성을 찾을 수 없습니다."
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "메서드를 찾을 수 없습니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "필요 하지 않고 전용 멤버를 호출 <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Reflection.IReflect.UnderlyingSystemType
  id: UnderlyingSystemType
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
  fullName: System.Reflection.IReflect.UnderlyingSystemType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "기본 형식을 나타내는 가져옵니다는 <xref href=&quot;System.Reflection.IReflect&quot;> </xref> 개체입니다."
  syntax:
    content: public Type UnderlyingSystemType { get; }
    return:
      type: System.Type
      description: "나타내는 내부 형식을 <xref href=&quot;System.Reflection.IReflect&quot;> </xref> 개체입니다."
  overload: System.Reflection.IReflect.UnderlyingSystemType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Reflection.AmbiguousMatchException
  isExternal: true
  name: System.Reflection.AmbiguousMatchException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.MissingFieldException
  isExternal: true
  name: System.MissingFieldException
- uid: System.MissingMethodException
  isExternal: true
  name: System.MissingMethodException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetField(String,BindingFlags)
  nameWithType: IReflect.GetField(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetField(String,BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetFields(BindingFlags)
  nameWithType: IReflect.GetFields(BindingFlags)
  fullName: System.Reflection.IReflect.GetFields(BindingFlags)
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMember(String,BindingFlags)
  nameWithType: IReflect.GetMember(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMember(String,BindingFlags)
- uid: System.Reflection.MemberInfo[]
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo[]
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: MemberInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMembers(BindingFlags)
  nameWithType: IReflect.GetMembers(BindingFlags)
  fullName: System.Reflection.IReflect.GetMembers(BindingFlags)
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod(String,BindingFlags)
  nameWithType: IReflect.GetMethod(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  nameWithType: IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethods(BindingFlags)
  nameWithType: IReflect.GetMethods(BindingFlags)
  fullName: System.Reflection.IReflect.GetMethods(BindingFlags)
- uid: System.Reflection.MethodInfo[]
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: MethodInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperties(BindingFlags)
  nameWithType: IReflect.GetProperties(BindingFlags)
  fullName: System.Reflection.IReflect.GetProperties(BindingFlags)
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty(String,BindingFlags)
  nameWithType: IReflect.GetProperty(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.UnderlyingSystemType
  parent: System.Reflection.IReflect
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
  fullName: System.Reflection.IReflect.UnderlyingSystemType
- uid: System.Reflection.IReflect.GetField*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetField
  nameWithType: IReflect.GetField
- uid: System.Reflection.IReflect.GetFields*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetFields
  nameWithType: IReflect.GetFields
- uid: System.Reflection.IReflect.GetMember*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMember
  nameWithType: IReflect.GetMember
- uid: System.Reflection.IReflect.GetMembers*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMembers
  nameWithType: IReflect.GetMembers
- uid: System.Reflection.IReflect.GetMethod*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod
  nameWithType: IReflect.GetMethod
- uid: System.Reflection.IReflect.GetMethods*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethods
  nameWithType: IReflect.GetMethods
- uid: System.Reflection.IReflect.GetProperties*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperties
  nameWithType: IReflect.GetProperties
- uid: System.Reflection.IReflect.GetProperty*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty
  nameWithType: IReflect.GetProperty
- uid: System.Reflection.IReflect.InvokeMember*
  parent: System.Reflection.IReflect
  isExternal: false
  name: InvokeMember
  nameWithType: IReflect.InvokeMember
- uid: System.Reflection.IReflect.UnderlyingSystemType*
  parent: System.Reflection.IReflect
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
