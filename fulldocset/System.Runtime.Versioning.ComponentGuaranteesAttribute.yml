### YamlMime:ManagedReference
items:
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute
  id: ComponentGuaranteesAttribute
  children:
  - System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)
  - System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
  langs:
  - csharp
  name: ComponentGuaranteesAttribute
  nameWithType: ComponentGuaranteesAttribute
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute
  type: Class
  summary: "구성 요소, 형식 또는 여러 버전에 걸쳐 있을 수 있는 형식 멤버의 호환성 보장을 정의 합니다."
  remarks: "ComponentGuaranteesAttribute 라이브러리의 소비자가 여러 버전에서 기대할 수 있는 호환성 수준을 지정 하려면 구성 요소 및 클래스 라이브러리의 개발자가 사용 됩니다. 이후 버전의 라이브러리 또는 구성 요소는 기존 클라이언트를 중단 하지 않는다는 보증 수준을 나타냅니다. 클라이언트 버전에서 안정성을 유지 하기 위해 자신의 인터페이스를 설계에 보조 도구로 ComponentGuaranteesAttribute를 유도할 수 있습니다.      > [!NOTE] > 공용 언어 런타임 (CLR) 어떤 식으로든에서이 특성을 사용 하지 않습니다. 해당 값은 구성 요소 작성자의 의도 공식적으로 문서화에 있습니다. 컴파일 타임 도구 선언 된 보증을 위반 하는 컴파일 타임 오류를 감지 하 이러한 선언을 사용할 수도 있습니다.      ## 호환성 ComponentGuaranteesAttribute 수준의 지원의 구성원으로 표시 되는 다음과 같은 호환성 수준의 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>열거형:-버전 간 호환성 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> 클라이언트는 이후 버전은 기존 클라이언트를 중단 될 수 있습니다. 자세한 내용은 참조는 [아니요 호환성](#None) 이 항목의 뒷부분에 나오는 섹션.      ---나란히 버전 간 호환성 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> 구성 요소는 어셈블리의 여러 버전이 같은 응용 프로그램 도메인에 로드 될 때 실행 되도록 테스트 되었습니다. 일반적으로 이후 버전 호환성을 않을 수 있습니다. 그러나 발생할 경우 주요 변경 사항이, 이전 버전은 수정 되지 않습니다 새 버전과 함께 존재 합니다. 병렬 실행은 기존 클라이언트에 주요 변경 내용이 있을 때 사용할 수 있는 방법의입니다. 자세한 내용은 참조는 [-병렬 호환성](#SideBySide) 이 항목의 뒷부분에 나오는 섹션.      -버전 간 호환성 안정적인 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> 이후 버전의 클라이언트를 해제 하지 말아야 하 고-병렬 실행 필요 하지 않습니다. 그러나 클라이언트 갑자기 중단 되는 경우 문제를 해결 하려면-병렬 실행을 수 있습니다. 자세한 내용은 참조는 [안정적인 호환성](#Standard) 섹션.      -버전 간 호환성 교환 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> 이후 버전의 클라이언트를 중단 되지 것입니다 보장 하는 특별 한 주의 필요 합니다. 클라이언트는 서로 독립적으로 배포 되는 다른 어셈블리와의 통신에 사용 되는 인터페이스의 서명에 있는 이러한 형식을 사용 해야 합니다. 클라이언트가 차단 되는 경우-병렬 실행 수 없는 호환성 문제가 해결는 특정된 응용 프로그램 도메인에 포함 되도록 이러한 형식의 버전을 하나만 사용할 수 있습니다. 자세한 내용은 참조는 [교환 형식 호환성](#Exchange) 섹션.       다음 섹션에서는 각 보다 자세히 설명에서 하는 보증 수준에 설명 합니다.      <a name=&quot;None&quot;></a># # # 없는 호환성 구성 요소가 표시 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>에서 됨을 나타냅니다 공급자 호환성을 보장 하지 않습니다.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> 클라이언트는 노출 된 인터페이스에 대 한 모든 종속 관계를 수행 하지 않아야 합니다. 이 호환성 수준은 실험적 되거나은 공개적으로 노출 하는 있지만을 위한 동시에 항상 업데이트는 구성 요소 형식에 유용 합니다. <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>명시적으로 외부 구성 요소에서이 구성 요소를 사용 하지 해야 함을 나타냅니다.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>      <a name=&quot;SideBySide&quot;></a># # #-Side-by-side 구성으로 표시 된 호환성 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>구성 요소는 테스트 어셈블리의 여러 버전이 같은 응용 프로그램 도메인에 로드 되 면 작업을 나타냅니다.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> 주요 변경 내용은 더 큰 버전 번호를 가진 어셈블리에 적용 되 긴 허용 됩니다. 이전 버전의 어셈블리에 바인딩되는 구성 요소는 이전 버전에 바인딩할 것으로 예상 되 고 다른 구성 요소는 새 버전으로 바인딩할 수 있습니다. 으로 선언 하는 구성 요소를 업데이트할 수 이기도 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>데이터 손실 없이 이전 버전을 수정 하 여.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>      <a name=&quot;Standard&quot;></a># # #으로 형식을 표시 하는 호환성 안정적인 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>버전에서 형식을 안정적인 계속 해야 나타냅니다.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> 그러나 동일한 응용 프로그램 도메인에 존재 하는 안정적인 종류의 병렬-버전에 대 한 수 있습니다 수도 있습니다.       안정적인 형식은 이진 호환성 높은 막대를 유지 관리합니다. 이 때문에 공급자 안정적인 형식을 주요 변경 내용 작업을 하지 말아야 합니다. 허용 되는 다음과 같은 종류의 변경이:-전용 인스턴스 필드를 추가 하거나으로 serialization 형식을 나누지 않습니다이 형식에서 필드를 제거 합니다.      -는 순차 불가능 형식을 직렬화 가능 형식으로 변경 합니다. 그러나 (직렬화 가능 형식이 변경할 수 없습니다 순차 불가능 형식으로.)      메서드에서 예외를 더 파생 새로 만들기, 예외를 throw 합니다.      -메서드는 성능을 향상 시킬 수 있습니다.      -변경 저하 대부분의 클라이언트 상태로 반환 값의 범위를 변경 합니다.      -비즈니스 양쪽 높은 이며 부정적인 영향을 받는 클라이언트 수는 낮은 경우 심각한 버그를 수정 합니다.       새 버전의 안정적인 구성 해도 기존 클라이언트가 중지 되지 않을, 때문에 일반적으로 안정 된 구성 요소의 버전을 하나만 필요 응용 프로그램 도메인에서 합니다. 그러나 하지 요구 사항 때문에 이것이 안정적인 형식은 모든 구성 요소에 동의 하는 잘 알려진 교환 형식으로 사용 되지 않습니다. 따라서 새 버전의 안정적인 구성 일부 구성 요소를 실수로 손상지 않습니다 및 다른 구성 요소 버전은 새 버전이 필요 하는 경우 모두 이전 및 새 구성 요소를 로드 하 여 문제를 해결 수 있습니다.       <xref:System.Runtime.Versioning.ComponentGuaranteesOptions><xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> 보다 강력한 버전 호환성 보장을 제공합니다.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> 다중 버전 구성 요소에 대 한 공통 기본 것합니다.       <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>함께 사용할 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, 구성 요소의 호환성을 중단 하지 것입니다 하지만 여러 개의 버전이 지정 된 응용 프로그램 도메인에 로드 될 때 제대로 작동 하는지 테스트는 적용 가능한 상태입니다.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions></xref:System.Runtime.Versioning.ComponentGuaranteesOptions>       형식 또는 메서드의 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> 로 업그레이드할 수 있습니다</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> , 표시 된 후 그러나이 다운 그레이드할 수 없습니다 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>      <a name=&quot;Exchange&quot;></a># # #는 형식으로 형식 호환성 표시 Exchange <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>보다 더 강력한 버전 호환성 보장 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, 가장 안정적인 모든 형식에 적용 해야 합니다.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> 이러한 형식은 모두 시간 (CLR의 모든 버전) 또는 구성 요소 또는 응용 프로그램의 모든 버전에서에서 모든 구성 요소 경계를 넘어 독립적으로 작성 된 구성 요소와 공간 (하나의 CLR에서 응용 프로그램 간 도메인 단일 프로세스에서 프로세스 간 크로스-CLR) 교환에 대해 사용 하는 데 사용 됩니다. Exchange 형식에 대 한 주요 변경 내용 이루어지면 경우 유형의 여러 버전을 로드 하 여 문제를 해결 하는 것이 불가능 합니다.       교환 형식은 문제는 매우 심각 (예: 심각한 보안 문제) 또는 손상을 확률이 (즉, 하는 경우 코드 없습니다 소요 되었을 수 있으므로 종속성에 있는 임의의 방식으로 동작 이미 끊었습니다) 매우 낮은 경우에 변경 해야 합니다. 교환 형식에 다음과 같은 모든 종류의 변경 가능:-새 인터페이스 정의의 상속을 추가 합니다.      -새로 상속 된 인터페이스 정의의 메서드를 구현 하는 새 개인 메서드를 추가 합니다.      -새 정적 필드를 추가 합니다.      -새 정적 메서드를 추가 합니다.      -새 가상이 아닌 인스턴스 메서드를 추가 합니다.       다음 주요 변경 내용 간주 되 고 기본 형식에 사용할 수 없습니다.-직렬화 형식을 변경 합니다. 버전 독립적 serialization가 필요 합니다.      -추가 또는 전용 인스턴스 필드를 제거 합니다. 이 형식의 serialization 형식을 변경 하 고 리플렉션을 사용 하 여 클라이언트 코드를 깰 위험 합니다.      형식의 순차성을 변경 합니다. 순차 불가능 형식 하지 만들 수 있습니다, 직렬화 가능 하며 그 반대 과정도 수행 합니다.      메서드에서 서로 다른 예외를 throw 합니다.      -멤버 정의 이러한 가능성 하 고 클라이언트에서 알 수 없는 값을 처리 하는 방법을 분명 하 게 표시 하지 않는 한 메서드의 반환 값의 범위를 변경 합니다.      대부분의 버그를 수정 합니다. 해당 형식의 소비자는 기존 동작에 의존 합니다.       구성 요소, 형식 또는 멤버는 기본적으로 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>보장 중 하나 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>나 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> 으로 변경할 수 없습니다</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>       Exchange 유형은 기본 유형, 일반적으로 (같은 <xref:System.Int32>및 <xref:System.String>.NET framework에서) 및 인터페이스 (같은 <xref:System.Collections.Generic.IList%601>, <xref:System.Collections.Generic.IEnumerable%601>, 및 <xref:System.IComparable%601>) 공용 인터페이스에서 일반적으로 사용 되.</xref:System.IComparable%601> </xref:System.Collections.Generic.IEnumerable%601> </xref:System.Collections.Generic.IList%601> </xref:System.String> </xref:System.Int32>       Exchange 형식을 다른 형식으로 표시 된를 공개적으로 노출 될 수 있습니다 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>호환성.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> 또한 exchange 유형을 변경 되기 쉬운 하는 Windows Api의 동작에 종속 될 수 없습니다.      ## 구성 요소 보장: 요약 다음 표에서 구성 요소의 특성 및 사용 해당 호환성 보장에 영향을 나타냅니다.      | 구성 요소 특성 | Exchange | 안정적인 | 나란히 | None |   |-------------------------------|--------------|------------|--------------------|----------|   | 가능 구성 요소 간 인터페이스에 해당 버전을 독립적으로 사용할. | Y | N | N | N |   | 일 수 있습니다 (개인적으로) 어셈블리에서 해당 버전을 독립적으로 사용할. | Y | Y | Y | N |   | 단일 응용 프로그램 도메인의 여러 버전이 있을 수 있습니다. | N | Y | Y | Y |   | 주요 변경 내용 정확해 | N | N | Y | Y |   | 테스트 어셈블리의 여러 버전 확인을 로드할 수 함께. | N | N | Y | N |   | 현재 위치에 주요 변경 내용에 만들 수 있습니다. | N | N | N | Y |   | 수 매우 안전 하 게 사소한 변경 사항이 서비스를 제공 합니다. | Y | Y | Y | Y |      # # 특성 있습니다 적용 어셈블리, 형식 또는 형식 멤버에는 ComponentGuaranteesAttribute를 적용할 수 있습니다. 해당 응용 프로그램은 계층적입니다. 즉, 기본적으로 정의 된 보장 하 여는 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>어셈블리 및 해당 형식의 모든 멤버에 모든 종류의 보증을 정의 하는 어셈블리 수준에서 특성의 속성입니다.</xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> 마찬가지로, 형식에 적용 하는 보증은 기본적으로도 적용 형식의 각 멤버에.       이 상속 된 보장 된 ComponentGuaranteesAttribute 개별 형식에 적용 하 여 재정의할 수 있습니다 및 형식 멤버입니다. 그러나 기본값을 재정의 하는 보증만 약화 되어 수 있게 보증은; 높일 수 없습니다. 예를 들어, 어셈블리 표시 되는 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>보장 해당 형식과 멤버 호환성 보장 되지 있고 어셈블리에서 형식 또는 멤버에 적용 되는 다른 모든 보장은 무시 됩니다.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>      ## 보증은 테스트는 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>속성의 멤버를 반환 합니다.는 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>로 표시 되는 열거형은 <xref:System.FlagsAttribute>특성.</xref:System.FlagsAttribute> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> 즉, 플래그 트래버스하여 잠재적으로 알 수 없는 플래그를 가장 하 여 관심 있는 테스트 해야 합니다. 다음 예제에서는 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> 형식이 표시 되어 있는지 여부를 테스트 하는 예를 들어       [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/add/codesnippet/csharp/t-system.runtime.version_1.cs)][!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/add/codesnippet/visualbasic/t-system.runtime.version_1.vb) ] 형식이 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>나 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> 로 표시 되어 있는지 여부를 테스트 하는 다음 예제         [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/add/codesnippet/csharp/t-system.runtime.version_2.cs)][!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/add/codesnippet/visualbasic/t-system.runtime.version_2.vb) ] 다음 형식이 되는지 여부를 테스트 하는 예제로 표시 되어 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>(즉, 둘 다 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>나 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions>         [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/add/codesnippet/csharp/t-system.runtime.version_3.cs)][!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3  ](~/add/codesnippet/visualbasic/t-system.runtime.version_3.vb)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)]

      public sealed class ComponentGuaranteesAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)
  id: '#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)'
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  langs:
  - csharp
  name: ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  nameWithType: ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.Versioning
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Runtime.Versioning.ComponentGuaranteesAttribute&quot;> </xref> 라이브러리, 형식 또는 멤버를 나타내는 값을 사용 하 여 클래스는 여러 버전에서 호환성 수준을 보장 합니다."
  remarks: "때는 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>클래스가 인스턴스화되면의 값은 `guarantees` 에 할당 된 매개 변수는 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>속성.</xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> </xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>"
  syntax:
    content: public ComponentGuaranteesAttribute (System.Runtime.Versioning.ComponentGuaranteesOptions guarantees);
    parameters:
    - id: guarantees
      type: System.Runtime.Versioning.ComponentGuaranteesOptions
      description: "여러 버전에서 보장 되는 호환성 수준을 지정 하는 열거형 값 중 하나입니다."
  overload: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
  id: Guarantees
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  langs:
  - csharp
  name: Guarantees
  nameWithType: ComponentGuaranteesAttribute.Guarantees
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Versioning
  summary: "보장 된 수준의 라이브러리, 형식 또는 여러 버전에 걸쳐 있는 형식 멤버의 호환성을 표시 하는 값을 가져옵니다."
  remarks: "보증 속성의 값에 해당 하는 `guarantees` 의 매개 변수는 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A>생성자.</xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A>"
  syntax:
    content: public System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees { get; }
    return:
      type: System.Runtime.Versioning.ComponentGuaranteesOptions
      description: "여러 버전에서 보장 되는 호환성 수준을 지정 하는 열거형 값 중 하나입니다."
  overload: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  isExternal: false
  name: ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  nameWithType: ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
- uid: System.Runtime.Versioning.ComponentGuaranteesOptions
  parent: System.Runtime.Versioning
  isExternal: false
  name: ComponentGuaranteesOptions
  nameWithType: ComponentGuaranteesOptions
  fullName: System.Runtime.Versioning.ComponentGuaranteesOptions
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  isExternal: false
  name: Guarantees
  nameWithType: ComponentGuaranteesAttribute.Guarantees
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor*
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  isExternal: false
  name: ComponentGuaranteesAttribute
  nameWithType: ComponentGuaranteesAttribute.ComponentGuaranteesAttribute
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees*
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  isExternal: false
  name: Guarantees
  nameWithType: ComponentGuaranteesAttribute.Guarantees
