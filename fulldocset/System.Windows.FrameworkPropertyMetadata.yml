### YamlMime:ManagedReference
items:
- uid: System.Windows.FrameworkPropertyMetadata
  id: FrameworkPropertyMetadata
  children:
  - System.Windows.FrameworkPropertyMetadata.#ctor
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)
  - System.Windows.FrameworkPropertyMetadata.AffectsArrange
  - System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  - System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  - System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  - System.Windows.FrameworkPropertyMetadata.AffectsRender
  - System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  - System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  - System.Windows.FrameworkPropertyMetadata.Inherits
  - System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  - System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  - System.Windows.FrameworkPropertyMetadata.Journal
  - System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  - System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  langs:
  - csharp
  name: FrameworkPropertyMetadata
  nameWithType: FrameworkPropertyMetadata
  fullName: System.Windows.FrameworkPropertyMetadata
  type: Class
  summary: "보고서 또는 프레임 워크별 속성 시스템 특성을 명시적으로 추가 되는 종속성 속성에 대 한 메타 데이터에 적용 됩니다."
  remarks: "이 클래스에서 파생 <xref:System.Windows.PropertyMetadata>(통해 <xref:System.Windows.UIPropertyMetadata>).</xref:System.Windows.UIPropertyMetadata> </xref:System.Windows.PropertyMetadata> 대부분의 WPF 프레임 워크 수준 응용 프로그램 개발 목적에 FrameworkPropertyMetadata는 종속성 속성 메타 데이터 보다는 기본 메타 데이터 형식이 <xref:System.Windows.PropertyMetadata>나 <xref:System.Windows.UIPropertyMetadata>.</xref:System.Windows.UIPropertyMetadata> </xref:System.Windows.PropertyMetadata> 에 사용 되는 형식 이 대부분의 사용자 지정 종속성 속성이 시나리오와 기존 종속성 속성에 적용 합니다.       이 선언 된 멤버 보완 하는 클래스는 <xref:System.Windows.PropertyMetadata>지정 하거나 속성 상속, 데이터 바인딩 및 레이아웃 WPF 프레임 워크 수준 속성 시스템 문제를 보고 하는 다양 한 부울 속성을 포함 하는 기본 클래스입니다.</xref:System.Windows.PropertyMetadata>       FrameworkPropertyMetadata 인스턴스를 만들기 위한 몇 가지 생성자 시그니처 걸릴는 <xref:System.Windows.FrameworkPropertyMetadataOptions>매개 변수.</xref:System.Windows.FrameworkPropertyMetadataOptions> <xref:System.Windows.FrameworkPropertyMetadataOptions>열거형 생성자에 초기 동작을 지정 하는 데에 사용 되 고 노출 되지 않습니다. 그렇지 않으면 FrameworkPropertyMetadata를 생성 한 후.</xref:System.Windows.FrameworkPropertyMetadataOptions> 생성 된 인스턴스에서 있습니다 수 가져오거나 생성자 호출에 사용 되는 열거형 값의 이름을 공유 하는 다양 한 속성을 통해 해당 정보를 설정 합니다.      <a name=&quot;xamlTextUsage_FrameworkPropertyMetadata&quot;></a># #이 클래스에 사용 되는 것은 일반적으로 XAML 텍스트 사용 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  example:
  - "The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type. That metadata is cast to FrameworkPropertyMetadata. If the cast returned a valid FrameworkPropertyMetadata, then various FrameworkPropertyMetadata property values are reported through a simple UI (not shown).  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: 'public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata'
  inheritance:
  - System.Object
  - System.Windows.PropertyMetadata
  - System.Windows.UIPropertyMetadata
  implements: []
  inheritedMembers:
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  - System.Windows.UIPropertyMetadata.IsAnimationProhibited
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata()
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata()
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> 클래스입니다."
  remarks: "이 서명을 속성 기본값으로 FrameworkPropertyMetadata의 모든 값을 초기화합니다. <xref:System.Windows.PropertyMetadata.DefaultValue%2A>됩니다 `null`, 및 다양 한 <xref:System.Windows.FrameworkPropertyMetadata>부울 속성이 됩니다 `false`.</xref:System.Windows.FrameworkPropertyMetadata></xref:System.Windows.PropertyMetadata.DefaultValue%2A>"
  syntax:
    content: public FrameworkPropertyMetadata ();
    parameters: []
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> 지정 된 기본값을 사용 하 여 클래스입니다."
  remarks: "제공 된 값 형식의 `defaultValue` 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다. 메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다. 속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.       값 <xref:System.Windows.DependencyProperty.UnsetValue>속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.</xref:System.Windows.DependencyProperty.UnsetValue>"
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor1param)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "일반적으로 특정 형식의 값으로 제공 하는 종속성 속성의 기본값입니다."
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>로 설정 되어 <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 설명을 참조 하십시오."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> 지정된 된 <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> 콜백 합니다."
  remarks: ''
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor1paramcallback)]"
  syntax:
    content: public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다."
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> 제공 된 기본값 및 프레임 워크 수준 메타 데이터 옵션을 사용 하 여 클래스입니다."
  remarks: "제공 된 값 형식의 `defaultValue` 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다. 메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다. 속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.       값 <xref:System.Windows.DependencyProperty.UnsetValue>속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.</xref:System.Windows.DependencyProperty.UnsetValue>       값에 플래그를 설정으로 표시는 `flags` 매개 변수는 부울 값을 설정 <xref:System.Windows.FrameworkPropertyMetadata>일치 하는 속성 <xref:System.Windows.FrameworkPropertyMetadataOptions>플래그의 이름을 `true`.</xref:System.Windows.FrameworkPropertyMetadataOptions> </xref:System.Windows.FrameworkPropertyMetadata> 특정 속성 시스템 작업에 적용 된 이후에 메타 데이터에서 속성의 값을 변경할 수 있습니다."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "일반적으로 특정 형식의 값으로 제공 하는 종속성 속성의 기본값입니다."
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "메타 데이터 옵션 플래그 (의 조합을 <xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;> </xref> 값). 이러한 옵션 레이아웃 등 데이터 바인딩 시스템과 상호 작용 하는 종속성 속성의 특성을 지정 합니다."
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>로 설정 되어 <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 설명을 참조 하십시오."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> 된 제공 된 기본 값 및 지정 된 <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> 콜백 합니다."
  remarks: "제공 된 값 형식의 `defaultValue` 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다. 메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다. 속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.       값 <xref:System.Windows.DependencyProperty.UnsetValue>속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.</xref:System.Windows.DependencyProperty.UnsetValue>"
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor2param)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "일반적으로 특정 형식의 값으로 제공 하는 종속성 속성의 기본값입니다."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다."
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>로 설정 되어 <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 설명을 참조 하십시오."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> 지정 된 콜백 클래스."
  remarks: "이 구현은 기본 이니셜라이저를 호출 하 고 다음 추가 `coerceValueCallback` 기본 인스턴스에서 속성을 설정 합니다."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_pcc_cvc)]"
  syntax:
    content: public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "처리기 구현에 대 한 참조 속성 시스템에서 때마다 호출 <xref:System.Windows.DependencyObject.CoerceValue*>이 종속성 속성에 대 한.</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> 된 제공 된 기본 값, 프레임 워크 메타 데이터 옵션 및 지정 된 <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> 콜백 합니다."
  remarks: "제공 된 값 형식의 `defaultValue` 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다. 메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다. 속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.       값 <xref:System.Windows.DependencyProperty.UnsetValue>속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.</xref:System.Windows.DependencyProperty.UnsetValue>       값에 플래그를 설정으로 표시는 `flags` 매개 변수는 부울 값을 설정 <xref:System.Windows.FrameworkPropertyMetadata>일치 하는 속성 <xref:System.Windows.FrameworkPropertyMetadataOptions>플래그의 이름을 `true`.</xref:System.Windows.FrameworkPropertyMetadataOptions> </xref:System.Windows.FrameworkPropertyMetadata> 특정 속성 시스템 작업에 적용 된 상태로 계속 메타 데이터에서 속성의 값을 변경할 수 있습니다."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "일반적으로 특정 형식의 값으로 제공 하는 종속성 속성의 기본값입니다."
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "메타 데이터 옵션 플래그 (의 조합을 <xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;> </xref> 값). 이러한 옵션 레이아웃 등 데이터 바인딩 시스템과 상호 작용 하는 종속성 속성의 특성을 지정 합니다."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다."
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>로 설정 되어 <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 설명을 참조 하십시오."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> 제공 된 기본 값 및 지정 된 콜백 클래스."
  remarks: "제공 된 값 형식의 `defaultValue` 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다. 메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다. 속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.       값 <xref:System.Windows.DependencyProperty.UnsetValue>속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.</xref:System.Windows.DependencyProperty.UnsetValue>"
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor3param)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "일반적으로 특정 형식으로 제공 하는 종속성 속성의 기본값입니다."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "속성 시스템 호출할 때마다 호출 되는 처리기 구현에 대 한 참조 <xref:System.Windows.DependencyObject.CoerceValue*>이 종속성 속성에 대 한.</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>로 설정 되어 <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 설명을 참조 하십시오."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> 제공 된 기본값 및 프레임 워크 메타 데이터 옵션 및 지정 된 콜백 클래스."
  remarks: "제공 된 값 형식의 `defaultValue` 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다. 메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다. 속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.       값 <xref:System.Windows.DependencyProperty.UnsetValue>속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.</xref:System.Windows.DependencyProperty.UnsetValue>       값에 플래그를 설정으로 표시는 `flags` 매개 변수는 부울 값을 설정 <xref:System.Windows.FrameworkPropertyMetadata>일치 하는 속성 <xref:System.Windows.FrameworkPropertyMetadataOptions>플래그의 이름을 `true`.</xref:System.Windows.FrameworkPropertyMetadataOptions> </xref:System.Windows.FrameworkPropertyMetadata> 특정 속성 시스템 작업에 적용 된 상태로 계속 메타 데이터에서 속성의 값을 변경할 수 있습니다."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "일반적으로 특정 형식으로 제공 하는 종속성 속성의 기본값입니다."
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "메타 데이터 옵션 플래그 (의 조합을 <xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;> </xref> 값). 이러한 옵션 레이아웃 등 데이터 바인딩 시스템과 상호 작용 하는 종속성 속성의 특성을 지정 합니다."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "속성 시스템 호출할 때마다 호출 되는 처리기 구현에 대 한 참조 <xref:System.Windows.DependencyObject.CoerceValue*>이 속성에 대해.</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>로 설정 되어 <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 설명을 참조 하십시오."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> 제공 된 기본 값, 프레임 워크 메타 데이터 옵션, 지정 된 콜백 및 Boolean 애니메이션 속성을 사용할 수 있는 클래스입니다."
  remarks: "제공 된 값 형식의 `defaultValue` 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다. 메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다. 속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.       값 <xref:System.Windows.DependencyProperty.UnsetValue>속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.</xref:System.Windows.DependencyProperty.UnsetValue>       `isAnimationProhibited` <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>직접 기본 <xref:System.Windows.UIPropertyMetadata>클래스</xref:System.Windows.UIPropertyMetadata> 에서 선언 된 속성</xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> 의 초기 값을 설정 하는 매개 변수       값에 플래그를 설정으로 표시는 `flags` 매개 변수는 부울 값을 설정 <xref:System.Windows.FrameworkPropertyMetadata>일치 하는 속성 <xref:System.Windows.FrameworkPropertyMetadataOptions>플래그의 이름을 `true`.</xref:System.Windows.FrameworkPropertyMetadataOptions> </xref:System.Windows.FrameworkPropertyMetadata> 특정 속성 시스템 작업에 적용 된 상태로 계속 메타 데이터에서 속성의 값을 변경할 수 있습니다."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "일반적으로 특정 형식으로 제공 하는 종속성 속성의 기본값입니다."
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "메타 데이터 옵션 플래그 (의 조합을 <xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;> </xref> 값). 이러한 옵션 레이아웃 등 데이터 바인딩 시스템과 상호 작용 하는 종속성 속성의 특성을 지정 합니다."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "속성 시스템 호출할 때마다 호출 되는 처리기 구현에 대 한 참조 <xref:System.Windows.DependencyObject.CoerceValue*>이 종속성 속성의.</xref:System.Windows.DependencyObject.CoerceValue*>"
    - id: isAnimationProhibited
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>속성 시스템에이 메타 데이터가 적용 되는 속성에 애니메이션 하지 못하도록 합니다. 이러한 속성에 대해 애니메이션을 적용 하려고 하는 경우 속성 시스템에서 시작 된 런타임 예외가 발생 합니다. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>속성에 애니메이션을 허용 하 합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>로 설정 되어 <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 설명을 참조 하십시오."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> 제공 된 기본 값과 프레임 워크 메타 데이터를 사용 하 여 클래스 옵션을 지정 된 콜백, 애니메이션, 속성 및 데이터 바인딩 업데이트 트리거 기본값을 사용할 수 있는 부울입니다."
  remarks: "제공 된 값 형식의 `defaultValue` 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다. 메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다. 속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.       값 <xref:System.Windows.DependencyProperty.UnsetValue>속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.</xref:System.Windows.DependencyProperty.UnsetValue>       `isAnimationProhibited` <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>직접 기본 <xref:System.Windows.UIPropertyMetadata>클래스</xref:System.Windows.UIPropertyMetadata> 에서 선언 된 속성</xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> 의 초기 값을 설정 하는 매개 변수       바인딩 소스 업데이트 동작에 대 한 자세한 내용은 참조 [데이터 바인딩 개요](~/add/includes/ajax-current-ext-md.md)합니다.       값에 플래그를 설정으로 표시는 `flags` 매개 변수는 부울 값을 설정 <xref:System.Windows.FrameworkPropertyMetadata>일치 하는 속성 <xref:System.Windows.FrameworkPropertyMetadataOptions>플래그의 이름을 `true`.</xref:System.Windows.FrameworkPropertyMetadataOptions> </xref:System.Windows.FrameworkPropertyMetadata> 특정 속성 시스템 작업에 적용 된 상태로 계속 메타 데이터에서 속성의 값을 변경할 수 있습니다."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "일반적으로 특정 형식으로 제공 하는 종속성 속성의 기본값입니다."
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "메타 데이터 옵션 플래그 (의 조합을 <xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;> </xref> 값). 이러한 옵션 레이아웃 등 데이터 바인딩 시스템과 상호 작용 하는 종속성 속성의 특성을 지정 합니다."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "속성 시스템 호출할 때마다 호출 되는 처리기 구현에 대 한 참조 <xref:System.Windows.DependencyObject.CoerceValue*>이 속성에 대해.</xref:System.Windows.DependencyObject.CoerceValue*>"
    - id: isAnimationProhibited
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>속성 시스템에이 메타 데이터가 적용 되는 속성에 애니메이션 하지 못하도록 합니다. 이러한 속성에 대해 애니메이션을 적용 하려고 하는 경우 속성 시스템에서 시작 된 런타임 예외가 발생 합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
    - id: defaultUpdateSourceTrigger
      type: System.Windows.Data.UpdateSourceTrigger
      description: "<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> 있는이 속성에 대 한 바인딩이 적용 될 때 사용할 해당 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> 로 설정 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>로 설정 되어 <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 설명을 참조 하십시오."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange
  id: AffectsArrange
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsArrange
  nameWithType: FrameworkPropertyMetadata.AffectsArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsArrange
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "종속성 속성 잠재적으로 영향을 주는지를 나타내는 정렬 단계 레이아웃 엔진 작업 중 값을 가져오거나 설정 합니다."
  remarks: "<xref:System.Windows.FrameworkElement>및 <xref:System.Windows.FrameworkContentElement>의 구현이 포함 <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>요소에 존재 하는 모든 종속성 속성의 유효 값 변경 내용을 모니터링 하는.</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> </xref:System.Windows.FrameworkContentElement></xref:System.Windows.FrameworkElement> 이 논리의 일부로 유효 값을 변경 하 고 AffectsArrange와 메타 데이터가 있어야 하는 종속성 속성으로 설정 `true` 해당 요소에 대 한 시각적 개체를 무효화 하는 지연 된 요청이 시작 됩니다 (에 대 한 호출 <xref:System.Windows.UIElement.InvalidateArrange%2A>).</xref:System.Windows.UIElement.InvalidateArrange%2A> WPF 프레임 워크 수준 구현에이 위치에 이미 이기 때문에 일반적으로 필요가 없습니다 대체로 교체 또는 WPF 프레임 워크 수준 레이아웃 동작을 수정 하는 경우가 아니면 AffectsArrange 사용 하 여 종속성 속성을 찾도록 합니다.       사용자 지정 <xref:System.Windows.DependencyObject.OnPropertyChanged%2A>구현 동작이 서로 유사 종속성 속성이 변경에 대 한 여기서는 AffectsArrange 하도록 선택할 수도 `true`.</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>       속성의 파생된 클래스에서 <xref:System.Windows.PropertyMetadata>는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.</xref:System.Windows.PropertyMetadata> 이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 후 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 후이 속성을 설정 하는 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_AffectsArrange&quot;></a># #이 클래스의 XAML 텍스트 사용 멤버는 대개 사용 되지에서 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool AffectsArrange { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 메타 데이터가 존재 하는 잠재적으로 종속성 속성이 정렬 단계; 영향을 주는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.AffectsArrange*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  id: AffectsMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "종속성 속성 잠재적으로 영향을 주는지를 나타내는 측정 단계 레이아웃 엔진 작업 중 값을 가져오거나 설정 합니다."
  remarks: "<xref:System.Windows.FrameworkElement>및 <xref:System.Windows.FrameworkContentElement>의 구현이 포함 <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>요소에 존재 하는 모든 종속성 속성의 유효 값 변경 내용을 모니터링 하는.</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> </xref:System.Windows.FrameworkContentElement></xref:System.Windows.FrameworkElement> 이 논리의 일부로 유효 값을 변경 하 고 AffectsMeasure와 메타 데이터가 있어야 하는 종속성 속성으로 설정 `true` 해당 요소에 대 한 시각적 개체를 무효화 하는 지연 된 요청이 시작 됩니다. WPF 프레임 워크 수준 구현에이 위치에 이미 이기 때문에 일반적으로 필요가 없습니다 대체로 교체 또는 WPF 프레임 워크 수준 레이아웃 동작을 수정 하는 경우가 아니면 AffectsMeasure 사용 하 여 종속성 속성을 찾도록 합니다.       사용자 지정 <xref:System.Windows.DependencyObject.OnPropertyChanged%2A>구현 동작이 서로 유사 종속성 속성이 변경에 대 한 여기서는 AffectsMeasure 하도록 선택할 수도 `true`.</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>       속성의 파생된 클래스에서 <xref:System.Windows.PropertyMetadata>는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.</xref:System.Windows.PropertyMetadata> 이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 후 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 후이 속성을 설정 하는 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_AffectsMeasure&quot;></a># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool AffectsMeasure { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 메타 데이터가 존재 하는 잠재적으로 종속성 속성이 측정 단계 영향을 주는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.AffectsMeasure*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  id: AffectsParentArrange
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsParentArrange
  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "종속성 속성 잠재적으로 영향을 주는지를 나타내는 부모 요소 레이아웃의 정렬 단계 레이아웃 엔진 작업 중 값을 가져오거나 설정 합니다."
  remarks: "<xref:System.Windows.FrameworkElement>및 <xref:System.Windows.FrameworkContentElement>의 구현이 포함 <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>요소에 존재 하는 모든 종속성 속성의 유효 값 변경 내용을 모니터링 하는.</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> </xref:System.Windows.FrameworkContentElement></xref:System.Windows.FrameworkElement> 이 논리의 일부로 유효 값을 변경 하 고 AffectsParentArrange와 메타 데이터가 있어야 하는 종속성 속성으로 설정 `true` 부모 요소에 대 한 시각적 개체를 무효화 하는 지연 된 요청이 시작 됩니다.       일반적으로 불필요의 <xref:System.Windows.FrameworkElement>이미 있기 때문에 요소 자체는 자체 AffectsParentArrange를 사용 하 여 부모 요소에 속성 <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>으로 `true`.</xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> </xref:System.Windows.FrameworkElement> 일반적으로 즉, 부모 적절 한 경우 정렬 된 자식 요소에 대 한 변경 내용을 일반적으로 시작 하므로 합니다. <xref:System.Windows.FrameworkContentElement>파생 클래스</xref:System.Windows.FrameworkContentElement> 에 대 한 AffectsParentArrange은 때때로 사용 이 경우, 자식 요소 집합 속성을 제외 하 고 <xref:System.Windows.FrameworkContentElement>파생된 클래스는 자체 렌더링을 제어 하지 않습니다.</xref:System.Windows.FrameworkContentElement> 렌더링 하 여 처리 되는 <xref:System.Windows.FrameworkElement>콘텐츠 호스트 역할을 하는 부모 요소입니다.</xref:System.Windows.FrameworkElement> 예를 들어,의 값을 변경은 <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName>자식 요소에서 연결 된 속성을 무효화 부모에서는 자식 요소의 위치를 변경 해야 하기 때문에 부모를 정렬 합니다.</xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName> 따라서는 <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName>AffectsParentArrange 인 연결 된 속성에 메타 데이터 `true`.</xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName> 또 다른 예로 <xref:System.Windows.Controls.Control.Padding%2A>때가이 속성 변경 내용을 상위 변경 될 수 있습니다 사용 가능한 공간에 따라 자식 위치를 지정 합니다.</xref:System.Windows.Controls.Control.Padding%2A>       WPF 프레임 워크 수준 구현에이 위치에 이미 이기 때문에 일반적으로 필요가 없습니다 대체로 교체 또는 WPF 프레임 워크 수준 레이아웃 동작을 수정 하는 경우가 아니면 AffectsParentArrange 사용 하 여 종속성 속성을 찾도록 합니다.       사용자 지정 <xref:System.Windows.DependencyObject.OnPropertyChanged%2A>구현 동작이 서로 유사 종속성 속성이 변경에 대 한 여기서는 AffectsParentArrange 하도록 선택할 수도 `true`.</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>       에 대 한 속성의 파생 클래스 <xref:System.Windows.PropertyMetadata>는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.</xref:System.Windows.PropertyMetadata> 이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 후 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 후이 속성을 설정 하는 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_AffectsParentArrange&quot;></a># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  syntax:
    content: public bool AffectsParentArrange { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 메타 데이터가 존재 하는 잠재적으로 종속성 속성이 정렬 단계에 부모 요소의 영향을 주는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  id: AffectsParentMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsParentMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "종속성 속성 잠재적으로 영향을 주는지를 나타내는 부모 요소 레이아웃의 측정 단계 레이아웃 엔진 작업 중 값을 가져오거나 설정 합니다."
  remarks: "<xref:System.Windows.FrameworkElement>및 <xref:System.Windows.FrameworkContentElement>의 구현이 포함 <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>요소에 존재 하는 모든 종속성 속성의 유효 값 변경 내용을 모니터링 하는.</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> </xref:System.Windows.FrameworkContentElement></xref:System.Windows.FrameworkElement> 이 논리의 일부로 유효 값을 변경 하 고 AffectsParentMeasure와 메타 데이터가 있어야 하는 종속성 속성으로 설정 `true` 부모 요소에 대 한 시각적 개체를 무효화 하는 지연 된 요청이 시작 됩니다. WPF 프레임 워크 수준 구현에이 위치에 이미 이기 때문에 일반적으로 필요가 없습니다 대체로 교체 또는 WPF 프레임 워크 수준 레이아웃 동작을 수정 하는 경우가 아니면 AffectsParentMeasure 사용 하 여 종속성 속성을 찾도록 합니다.       일반적으로 불필요의 <xref:System.Windows.FrameworkElement>이미 있기 때문에 요소 자체는 자체 AffectsParentMeasure를 사용 하 여 부모 요소에 속성 <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>으로 `true`.</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.FrameworkElement> 적절 한 경우 부모 측정 단계를 일반적으로 시작 하는 자식 요소가 변경 때문 충분입니다. <xref:System.Windows.FrameworkContentElement>파생 클래스</xref:System.Windows.FrameworkContentElement> 에 대 한 AffectsParentMeasure은 때때로 사용 이 경우, 자식 요소 집합 속성을 제외 하 고 <xref:System.Windows.FrameworkContentElement>파생된 클래스는 자체 렌더링을 제어 하지 않습니다.</xref:System.Windows.FrameworkContentElement> 렌더링 하 여 처리 되는 <xref:System.Windows.FrameworkElement>콘텐츠 호스트 역할을 하는 부모 요소입니다.</xref:System.Windows.FrameworkElement> 예를 들어,의 값을 변경은 <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName>단락 상대 간격이 될 수 있습니다 변경 및 수를 늘리거나 콘텐츠 호스트 크기 때문에 자식 요소에서 속성 부모의 측정을 무효화 합니다.</xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName> 따라서는 <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName>AffectsParentMeasure 인 속성에 메타 데이터 `true`.</xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName>       콘텐츠 호스트 요소 자주 확인 종속성 속성의 변경 내용에 대 한 여기서는 AffectsParentMeasure `true`, 콘텐츠 호스트 렌더링 논리의 일부로 합니다. 예를 들어,는 <xref:System.Windows.Controls.TextBox>의 경계 상자 요소는 필요할 수 있는 텍스트 내에서 특정 변경 내용에 응답 해야는 <xref:System.Windows.Controls.TextBox>자체를 변경할 수 있습니다.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.TextBox>       사용자 지정 <xref:System.Windows.DependencyObject.OnPropertyChanged%2A>구현 비슷한 동작을 종속성 속성이 변경에 대 한 여기서는 AffectsParentMeasure 수도 있습니다. `true`.</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>       에 대 한 속성의 파생 클래스 <xref:System.Windows.PropertyMetadata>는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.</xref:System.Windows.PropertyMetadata> 이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 후 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 후이 속성을 설정 하는 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_AffectsParentMeasure&quot;></a># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  syntax:
    content: public bool AffectsParentMeasure { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 메타 데이터가 존재 하는 잠재적으로 종속성 속성이 부모 요소의 측정 단계 영향을 주는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender
  id: AffectsRender
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsRender
  nameWithType: FrameworkPropertyMetadata.AffectsRender
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsRender
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "종속성 속성에는 다시 그리기를 필요로 하는 상황은 정렬 이나 측정에 특별히 영향을 주지 않는 어떤 방식으로 일반 레이아웃 잠재적으로 영향을 주는지를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "<xref:System.Windows.FrameworkElement>및 <xref:System.Windows.FrameworkContentElement>의 구현이 포함 <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>요소에 존재 하는 모든 종속성 속성의 유효 값 변경 내용을 모니터링 하는.</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> </xref:System.Windows.FrameworkContentElement></xref:System.Windows.FrameworkElement> 이 논리의 일부로 유효 값을 변경 하 고 AffectsRender와 메타 데이터가 있어야 하는 종속성 속성으로 설정 `true` 해당 요소에 대 한 시각적 개체를 무효화 하는 지연 된 요청이 시작 됩니다. WPF 프레임 워크 수준 구현에이 위치에 이미 이기 때문에 일반적으로 필요가 없습니다 대체로 교체 또는 WPF 프레임 워크 수준 레이아웃 동작을 수정 하는 경우가 아니면 AffectsRender 사용 하 여 종속성 속성을 찾도록 합니다.       사용자 지정 <xref:System.Windows.DependencyObject.OnPropertyChanged%2A>구현 동작이 서로 유사 종속성 속성이 변경에 대 한 여기서는 AffectsRender 하도록 선택할 수도 `true`.</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>       에 대 한 속성의 파생 클래스 <xref:System.Windows.PropertyMetadata>는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.</xref:System.Windows.PropertyMetadata> 이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 후 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 후이 속성을 설정 하는 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_AffectsRender&quot;></a># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool AffectsRender { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 메타 데이터가 존재 하는 종속성 속성이 렌더링 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.AffectsRender*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  id: BindsTwoWayByDefault
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: BindsTwoWayByDefault
  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault
  fullName: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "속성이 양방향 기본적으로 바인드 되는지를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "없는 경우이 속성의 `true`, 바인딩 업데이트는 기본적으로의 기본 동작에 따라 단방향는 <xref:System.Windows.Data.Binding>생성자 또는 이와 동등한 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 구문.</xref:System.Windows.Data.Binding>       기존 요소를 찾을 수 있습니다 일반적으로이 속성을 설정 `true` 상태를 보고 하는 예를 들어 <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName>.</xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName> 사용자 작업을 통해 수정할 수는 종속성 속성에 대 한 메타 데이터에       이 속성만 종속성 속성의 기본 바인딩 업데이트 특성은 일반적 보고 합니다. 인스턴스에서이 속성으로 설정 하는 바인딩 로컬로 설정 수는 <xref:System.Windows.Data.Binding.Mode%2A>바인딩의 속성을이 기본값을 변경 하 고.</xref:System.Windows.Data.Binding.Mode%2A>       에 대 한 속성의 파생 클래스 <xref:System.Windows.PropertyMetadata>는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.</xref:System.Windows.PropertyMetadata> 이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 후 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 후이 속성을 설정 하는 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_BindsTwoWayByDefault&quot;></a># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool BindsTwoWayByDefault { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 메타 데이터가 존재 하는 종속성 속성이 기본적으로 양방향 바인딩할 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  id: DefaultUpdateSourceTrigger
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: DefaultUpdateSourceTrigger
  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  fullName: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "에 대 한 기본값을 가져오거나 설정 합니다. <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> 충족 하는이 메타 데이터를 사용 하 여 속성에 대 한 바인딩이 적용 되는 경우를 사용 하려면 해당 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> 로 설정 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>합니다."
  remarks: "속성의 파생된 클래스에서 <xref:System.Windows.PropertyMetadata>는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.</xref:System.Windows.PropertyMetadata> 이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 후 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 후이 속성을 설정 하는 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_DefaultUpdateSourceTrigger&quot;></a># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  syntax:
    content: public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceTrigger
      description: "값이 아닌 다른 열거형 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "이 속성이 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>; 바인딩에서 요청할 때 기본 값을 설정 해야 합니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.Inherits
  id: Inherits
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: Inherits
  nameWithType: FrameworkPropertyMetadata.Inherits
  fullName: System.Windows.FrameworkPropertyMetadata.Inherits
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "종속성 속성의 값이 상속 될 수 있는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "속성 값 상속의 기능은 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 그에 따라 특정 종속성 속성이 로컬로에 설정 될 수는 요소 또는 그 직전의 루트에 WPF 프레임 워크 수준 속성 시스템은 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 요소 트리 및 다음 해당 값이 해당 속성을 공유 하는 자식 요소의 논리적 트리 내에서 모든 요소에서 상속 합니다. 속성 값 상속 기본적으로 사용 되지 않습니다 있고 설정 되어 있으므로 일부 성능 영향을 줍니다. 자세한 내용은 참조 [속성 값 상속](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > 속성 값 상속 나타날 수 있지만 연결 되지 않은 종속성 속성에 대해 작동 하도록를 통해 특정 개체 간 구역 런타임 트리의 연결 되지 않은 속성에 대 한 상속 동작이 정의 되지 않습니다. 항상 사용 하 여 <xref:System.Windows.DependencyProperty.RegisterAttached%2A>메타 데이터에서 Inherits를 지정 하는 속성을 등록 합니다.</xref:System.Windows.DependencyProperty.RegisterAttached%2A>       속성의 파생된 클래스에서 <xref:System.Windows.PropertyMetadata>는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.</xref:System.Windows.PropertyMetadata> 이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 후 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 후이 속성을 설정 하는 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_Inherits&quot;></a># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool Inherits { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>속성 값이 상속 될 수 있습니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.Inherits*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  id: IsDataBindingAllowed
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: IsDataBindingAllowed
  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed
  fullName: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "종속성 속성에 대 한 데이터 바인딩을 지원 되는지 여부를 나타내는 값을 가져옵니다."
  remarks: "이 속성은 보고 `false` 가능한 두 조건 중 하나에 대 한: 종속성 속성에 데이터 바인딩 중 하나은 종속성 속성은 읽기 전용 (as, 보고 된 종속성 속성 식별자로 메타 데이터가 아니라) 때문에 사용할 수 없습니다 또는 다른 메타 데이터 속성의 값 <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>로 설정 된 `true` 이 메타 데이터에.</xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> 이 속성은 편의 위해 확인 하려면 두 <xref:System.Windows.DependencyProperty.ReadOnly%2A>및 <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> </xref:System.Windows.DependencyProperty.ReadOnly%2A> 호출자가 보유 하지 않습니다.       플래그를 지정 하는 경우는 그렇지 않으면 읽기/쓰기 속성이 데이터 바인딩을 지원 하지 않도록 지정 하는 메타 데이터를 만들려면, <xref:System.Windows.FrameworkPropertyMetadataOptions>(참고는 약간의 가능 <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> </xref:System.Windows.FrameworkPropertyMetadataOptions>      <a name=&quot;xamlTextUsage_IsDataBindingAllowed&quot;></a># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool IsDataBindingAllowed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 메타 데이터가 적용 되는; 종속성 속성에 데이터 바인딩이 지원 되는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  id: IsNotDataBindable
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: IsNotDataBindable
  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable
  fullName: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "종속성 속성이 데이터 바인딩을 지원 하는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "참고로이 메타 데이터 속성이 설정 되어 있는지 `true` 특히 속성에는 데이터 바인딩, 읽기 / 쓰기 가능 속성을 지원 하지 않아야 합니다. 예상이는 대부분의 경우 종속성 속성 선언 된 데이터 바인딩, 데이터 바인딩이 종속성 속성은 유용한 주요 시나리오 중 하나 이므로 합니다. 와 달리 <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>,이 단순히 특정 바인딩에서 이후에 변경 될 수 있는 기본값을 변경 하지 않습니다.</xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A> 이 속성을 설정할 `true` 메타 데이터 종속성 속성에 대 한 메타 데이터에서 해당 종속성 속성에 식을 통해 값을 적용 하는의 모든 바인딩 해제 됩니다.       읽기 전용 종속성 속성 데이터 바인딩 (했기 때문에 변경 된 값을 적용할 수 있는 setter) 지원 하지 않지만 여전히 보고서 `false` IsNotDataBindable에 대 한 합니다. 에 해당 하는 속성 때문에 이것이 <xref:System.Windows.FrameworkPropertyMetadataOptions>값 메타 데이터를 실제로 설정 방법, 항상 의미 하는 속성의 이름을 지정 하는 최종 결과 동작을 보고 하는 대신를 통한 패리티를 보고 합니다.</xref:System.Windows.FrameworkPropertyMetadataOptions> 지정된 된 종속성 속성에 데이터 바인딩에서 허용 되는지 여부를 확인 하려면 일반적으로 확인해 <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>대신.</xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>둘 다 검사에 대 한 편리한 <xref:System.Windows.DependencyProperty.ReadOnly%2A>및 예상된 결과 생성 하는 단일 작업으로 IsNotDataBindable.</xref:System.Windows.DependencyProperty.ReadOnly%2A></xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>       속성의 파생된 클래스에서 <xref:System.Windows.PropertyMetadata>는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.</xref:System.Windows.PropertyMetadata> 이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 후 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 후이 속성을 설정 하는 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_IsNotDataBindable&quot;></a># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  syntax:
    content: public bool IsNotDataBindable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>속성이 데이터 바인딩을 지원 하지 않는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.Journal
  id: Journal
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: Journal
  nameWithType: FrameworkPropertyMetadata.Journal
  fullName: System.Windows.FrameworkPropertyMetadata.Journal
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "이 속성에 응용 프로그램 수 있거나 저널링 구현의 일환으로 저장 해야 하는 저널링 정보 포함 되는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "속성의 파생된 클래스에서 <xref:System.Windows.PropertyMetadata>는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.</xref:System.Windows.PropertyMetadata> 이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 후 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 후이 속성을 설정 하는 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_Journal&quot;></a># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  syntax:
    content: public bool Journal { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 메타 데이터가;에 적용 되는 종속성 속성에 저널링을 수행 해야 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.Journal*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "기본 메타 데이터와 원본 메타 데이터를 병합 수 있습니다."
  remarks: "이 메서드는 메타 데이터 재정의 될 때 내부적으로 사용 됩니다."
  syntax:
    content: protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "병합할 기본 메타 데이터입니다."
    - id: dp
      type: System.Windows.DependencyProperty
      description: "이 메타 데이터에 적용 되는 종속성 속성입니다."
  overload: System.Windows.FrameworkPropertyMetadata.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty,Type)
  nameWithType: FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "이 메타 데이터는 메타 데이터는 봉인 여부를 나타내는 속성에 적용 된 경우 호출 됩니다."
  remarks: "어떠한 방법으로의 데이터 구조는 <xref:System.Windows.FrameworkPropertyMetadata>인스턴스 표시 해야 변경할 수 없는 것이 메서드가 호출 되 면.</xref:System.Windows.FrameworkPropertyMetadata>"
  syntax:
    content: protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "종속성 속성 메타 데이터에 적용 되었습니다."
    - id: targetType
      type: System.Type
      description: "이 특정 형식의 메타 데이터는 경우이 메타 데이터와 연결 된 형식입니다. 기본 메타 데이터 인 경우이 값 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  id: OverridesInheritanceBehavior
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: OverridesInheritanceBehavior
  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior
  fullName: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "속성 값 상속 평가가 요소의 논리적 트리에서 특정 콘텐츠 경계와 넘을 지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "이 메타 데이터는 특정 부모 요소의 자식 요소 경계를 넘어 수정 된 속성 값 상속 동작을 보고합니다. 이러한 경계는 정규 예제는의 내용을 <xref:System.Windows.Controls.Frame>여기서 <xref:System.Windows.Controls.Frame> <xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame> 의 존재 여부와 독립적으로 콘텐츠를 다시 로드 얻을 수 있습니다</xref:System.Windows.Controls.Frame> </xref:System.Windows.Controls.Frame> 원하는 속성 시스템 동작은의 내용에 속성 값 상속을 통과 해야 하지는 <xref:System.Windows.Controls.Frame>이므로 이러한 콘텐츠 요소일 수도 프레임을 호스팅하는 응용 프로그램을 소유 하거나 제어 하지 않습니다.</xref:System.Windows.Controls.Frame> 로 설정 OverridesInheritanceBehavior를 사용 하 여 메타 데이터를 지정 `true`지정, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>으로 `true`, 걸쳐 상속할 수 있도록 메타 데이터 적용 되는 속성은 <xref:System.Windows.Controls.Frame>경계 또는 이와 유사한 경계.</xref:System.Windows.Controls.Frame> </xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>       속성의 파생된 클래스에서 <xref:System.Windows.PropertyMetadata>는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.</xref:System.Windows.PropertyMetadata> 이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 후 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 후이 속성을 설정 하는 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_OverridesInheritanceBehavior&quot;></a># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  syntax:
    content: public bool OverridesInheritanceBehavior { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>속성 값 상속이 특정 콘텐츠 경계에 걸쳐 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  id: SubPropertiesDoNotAffectRender
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: SubPropertiesDoNotAffectRender
  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  fullName: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "종속성 속성의 하위 속성 포함 하는 개체의 렌더링에 영향을 주지 않습니다 있는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "이 메타 데이터 옵션은 종속성 속성에는 참조 형식이 해당 형식 자체의 속성 값에 대해 관련 있습니다. 일반적으로 레이아웃 시스템 논리는 종속성 속성 하위 속성에는 영향을 받을 레이아웃, 다른 렌더링 패스 변경에 대 한 모든 하위 속성을 확인 하는 것은 실제로 실행 중인 보다 더 많은 시간이 소요 되므로 생각 하는 것입니다. 이 옵션을 설정 `true` WPF 프레임 워크 수준 레이아웃 시스템 구현의 성능을 최적화 하는 데 유용 합니다.       속성의 파생된 클래스에서 <xref:System.Windows.PropertyMetadata>는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.</xref:System.Windows.PropertyMetadata> 이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 된 경우 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 후이 속성을 설정 하는 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_SubPropertiesDoNotAffectRender&quot;></a># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  syntax:
    content: public bool SubPropertiesDoNotAffectRender { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하위 속성 값이 변경 되어도; 렌더링 영향을 주지 않고 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다."
  platform:
  - net462
references:
- uid: System.Windows.UIPropertyMetadata
  isExternal: false
  name: System.Windows.UIPropertyMetadata
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.FrameworkPropertyMetadata.#ctor
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata()
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata()
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata()
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
- uid: System.Windows.FrameworkPropertyMetadataOptions
  parent: System.Windows
  isExternal: false
  name: FrameworkPropertyMetadataOptions
  nameWithType: FrameworkPropertyMetadataOptions
  fullName: System.Windows.FrameworkPropertyMetadataOptions
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
- uid: System.Windows.Data.UpdateSourceTrigger
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: UpdateSourceTrigger
  fullName: System.Windows.Data.UpdateSourceTrigger
- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsArrange
  nameWithType: FrameworkPropertyMetadata.AffectsArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentArrange
  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsRender
  nameWithType: FrameworkPropertyMetadata.AffectsRender
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsRender
- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: BindsTwoWayByDefault
  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault
  fullName: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: DefaultUpdateSourceTrigger
  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  fullName: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
- uid: System.Windows.FrameworkPropertyMetadata.Inherits
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Inherits
  nameWithType: FrameworkPropertyMetadata.Inherits
  fullName: System.Windows.FrameworkPropertyMetadata.Inherits
- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsDataBindingAllowed
  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed
  fullName: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsNotDataBindable
  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable
  fullName: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
- uid: System.Windows.FrameworkPropertyMetadata.Journal
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Journal
  nameWithType: FrameworkPropertyMetadata.Journal
  fullName: System.Windows.FrameworkPropertyMetadata.Journal
- uid: System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty,Type)
  nameWithType: FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OverridesInheritanceBehavior
  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior
  fullName: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: SubPropertiesDoNotAffectRender
  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  fullName: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
- uid: System.Windows.FrameworkPropertyMetadata.#ctor*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata
- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsArrange
  nameWithType: FrameworkPropertyMetadata.AffectsArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentArrange
  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsRender
  nameWithType: FrameworkPropertyMetadata.AffectsRender
- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: BindsTwoWayByDefault
  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault
- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: DefaultUpdateSourceTrigger
  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
- uid: System.Windows.FrameworkPropertyMetadata.Inherits*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Inherits
  nameWithType: FrameworkPropertyMetadata.Inherits
- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsDataBindingAllowed
  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed
- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsNotDataBindable
  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable
- uid: System.Windows.FrameworkPropertyMetadata.Journal*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Journal
  nameWithType: FrameworkPropertyMetadata.Journal
- uid: System.Windows.FrameworkPropertyMetadata.Merge*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: FrameworkPropertyMetadata.Merge
- uid: System.Windows.FrameworkPropertyMetadata.OnApply*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: FrameworkPropertyMetadata.OnApply
- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OverridesInheritanceBehavior
  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior
- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: SubPropertiesDoNotAffectRender
  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
