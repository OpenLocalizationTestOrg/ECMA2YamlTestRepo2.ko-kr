### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.DragEventArgs
  id: DragEventArgs
  children:
  - System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)
  - System.Windows.Forms.DragEventArgs.AllowedEffect
  - System.Windows.Forms.DragEventArgs.Data
  - System.Windows.Forms.DragEventArgs.Effect
  - System.Windows.Forms.DragEventArgs.KeyState
  - System.Windows.Forms.DragEventArgs.X
  - System.Windows.Forms.DragEventArgs.Y
  langs:
  - csharp
  name: DragEventArgs
  nameWithType: DragEventArgs
  fullName: System.Windows.Forms.DragEventArgs
  type: Class
  summary: "에 대 한 데이터를 제공는 <xref href=&quot;System.Windows.Forms.Control.DragDrop&quot;> </xref>, <xref href=&quot;System.Windows.Forms.Control.DragEnter&quot;> </xref>, 또는 <xref href=&quot;System.Windows.Forms.Control.DragOver&quot;> </xref> 이벤트입니다."
  remarks: "<xref:System.Windows.Forms.Control.DragDrop>사용자 개체를 컨트롤 위로 끌어 놓아 다음 컨트롤로 마우스 단추를 해제 하 여 끌어서 놓기 작업을 완료 하면 오류가 발생 합니다.</xref:System.Windows.Forms.Control.DragDrop> <xref:System.Windows.Forms.Control.DragEnter>이 이벤트는 개체를 마우스로 끄는 동안 마우스 포인터를 컨트롤을 이동할 때 발생 합니다.</xref:System.Windows.Forms.Control.DragEnter> <xref:System.Windows.Forms.Control.DragOver>이벤트 마우스로 개체를 끄는 동안 마우스 포인터를 컨트롤 위로 이동할 때 발생 합니다.</xref:System.Windows.Forms.Control.DragOver>       DragEventArgs 개체;이 이벤트와 연결 된 모든 데이터를 지정 합니다. SHIFT, CTRL 및 ALT 키의 현재 상태 마우스 포인터가; 위치 원본 및 끌기 이벤트의 대상에서 허용 하는 끌어서 놓기 효과 하 고 있습니다.       이벤트 모델에 대 한 정보를 참조 하십시오. [이벤트](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the DragEventArgs class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/t-system.windows.forms.d_17_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/t-system.windows.forms.d_17_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/t-system.windows.forms.d_17_1.cs)]  \n  \n The following example illustrates how DragEventArgs are passed between the source and target of a drag-and-drop operation. In this example, a <xref:System.Windows.Forms.ListBox> control is the source of the data, and the <xref:System.Windows.Forms.RichTextBox> control is the target. The example assumes that the <xref:System.Windows.Forms.ListBox> control has been populated with a list of valid filenames. When the user drags one of the displayed filenames from the <xref:System.Windows.Forms.ListBox> control onto the <xref:System.Windows.Forms.RichTextBox> control, the file referenced in the filename is opened.  \n  \n The operation is initiated in the <xref:System.Windows.Forms.ListBox> control's MouseDown event. In the <xref:System.Windows.Forms.RichTextBox.DragEnter> event handler, the example uses the <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> method to verify that the data is in a format that the <xref:System.Windows.Forms.RichTextBox> control can display and then sets the <xref:System.Windows.Forms.DragDropEffects> property to specify that data should be copied from the source control to the target control. Finally, the <xref:System.Windows.Forms.RichTextBox> control's DragDrop event handler uses the <xref:System.Windows.Forms.IDataObject.GetData%2A> method to retrieve the filename to open.  \n  \n [!code-cs[RichTextDragDrop#1](~/add/codesnippet/csharp/t-system.windows.forms.d_17_2.cs)]\n [!code-vb[RichTextDragDrop#1](~/add/codesnippet/visualbasic/t-system.windows.forms.d_17_2.vb)]\n [!code-cpp[RichTextDragDrop#1](~/add/codesnippet/cpp/t-system.windows.forms.d_17_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class DragEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)
  id: '#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)'
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  nameWithType: DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  fullName: System.Windows.Forms.DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Forms.DragEventArgs&quot;> </xref> 클래스입니다."
  syntax:
    content: public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);
    parameters:
    - id: data
      type: System.Windows.Forms.IDataObject
      description: "이 이벤트와 연결 된 데이터입니다."
    - id: keyState
      type: System.Int32
      description: "SHIFT, CTRL 및 ALT 키의 현재 상태입니다."
    - id: x
      type: System.Int32
      description: "픽셀 단위로 나타낸 마우스 포인터의 x 좌표입니다."
    - id: y
      type: System.Int32
      description: "픽셀 단위로 나타낸 마우스 포인터의 y 좌표입니다."
    - id: allowedEffect
      type: System.Windows.Forms.DragDropEffects
      description: "중 하나는 <xref href=&quot;System.Windows.Forms.DragDropEffects&quot;> </xref> 값입니다."
    - id: effect
      type: System.Windows.Forms.DragDropEffects
      description: "중 하나는 <xref href=&quot;System.Windows.Forms.DragDropEffects&quot;> </xref> 값입니다."
  overload: System.Windows.Forms.DragEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.AllowedEffect
  id: AllowedEffect
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: AllowedEffect
  nameWithType: DragEventArgs.AllowedEffect
  fullName: System.Windows.Forms.DragEventArgs.AllowedEffect
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "끌기 이벤트의 보낸 사람 (또는 원본)가 허용 하는 끌어서 놓기 작업을 가져옵니다."
  remarks: "컨트롤을 호출 하 여 끌어서 놓기 작업을 시작 하는 경우는 <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName>메서드를 허용 되는 작업의 효과 지정 합니다.</xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName> 예를 들어 파일이 읽기 전용인 경우 소스에서 파일을 끌 때 또는 (예: CD 읽기 전용 저장 매체에서) 소스 파일 복사 수는 있지만 대상으로 하지 전송 수는 없음을 표시 됩니다.       끌어온된 데이터에 대 한 작업을 수행 하려면 먼저이 작업은 허용을 위해이 속성을 검사 해야 합니다."
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_303_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_303_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_303_1.cs)]"
  syntax:
    content: public System.Windows.Forms.DragDropEffects AllowedEffect { get; }
    return:
      type: System.Windows.Forms.DragDropEffects
      description: "중 하나는 <xref href=&quot;System.Windows.Forms.DragDropEffects&quot;> </xref> 값입니다."
  overload: System.Windows.Forms.DragEventArgs.AllowedEffect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.Data
  id: Data
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: Data
  nameWithType: DragEventArgs.Data
  fullName: System.Windows.Forms.DragEventArgs.Data
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "가져옵니다는 <xref href=&quot;System.Windows.Forms.IDataObject&quot;> </xref> 이 이벤트와 연결 된 데이터를 포함 하 합니다."
  remarks: "이벤트 처리기의 본문에 사용할 수 있습니다는 <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>데이터는 데이터를 끄는 컨트롤의 형식 요구 사항 일치 하는지 여부를 결정 하는 메서드.</xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> 형식 요구 사항을 충족 하기 위해 데이터를 변환 하려고 것인지 여부를 지정할 수도 있습니다. 형식 요구 사항을 충족 하는 끌어온된 데이터를 사용 하 여는 <xref:System.Windows.Forms.IDataObject.GetData%2A>메서드 데이터를 검색 합니다.</xref:System.Windows.Forms.IDataObject.GetData%2A>"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_79_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_79_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_79_1.cs)]"
  syntax:
    content: public System.Windows.Forms.IDataObject Data { get; }
    return:
      type: System.Windows.Forms.IDataObject
      description: "이 이벤트와 연결 된 데이터입니다."
  overload: System.Windows.Forms.DragEventArgs.Data*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.Effect
  id: Effect
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: Effect
  nameWithType: DragEventArgs.Effect
  fullName: System.Windows.Forms.DragEventArgs.Effect
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "끌어서 놓기 작업의 대상 놓기 효과 가져오거나 설정 합니다."
  remarks: "기본적으로 적용 되는 효과 끌어서 놓기 작업의 대상에 대 한 마우스 커서를 결정 합니다. 이 발생 하는 작업에서 사용자에 게 피드백을 제공 하는 데 유용 합니다. 소스에서 파일을 끌 때 CTRL 키를 누르면 지정 하는 예를 들어 <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>를 나타내는 대상 복사 작업을 수행 하려고 합니다.</xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>       끌기 작업에 대 한 사용자 지정 커서를 사용 하려면 <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=fullName>.</xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=fullName> 를 참조 하세요."
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the Effect is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_330_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_330_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_330_1.cs)]"
  syntax:
    content: public System.Windows.Forms.DragDropEffects Effect { get; set; }
    return:
      type: System.Windows.Forms.DragDropEffects
      description: "중 하나는 <xref href=&quot;System.Windows.Forms.DragDropEffects&quot;> </xref> 값입니다."
  overload: System.Windows.Forms.DragEventArgs.Effect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.KeyState
  id: KeyState
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: KeyState
  nameWithType: DragEventArgs.KeyState
  fullName: System.Windows.Forms.DragEventArgs.KeyState
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "마우스 단추의 상태 뿐 아니라 SHIFT, CTRL 및 ALT 키의 현재 상태를 가져옵니다."
  remarks: "특정 키의 상태에 따라 달라 지도록 끌어서 놓기 작업의 결과 만들 수 있습니다. 예를 들어 복사 하거나 끌어서 놓기 작업 동안 CTRL 또는 SHIFT 키 누름에 따라 데이터를 이동 하려는 경우도 있습니다.       KeyState 속성에 설정 된 비트 키 또는 작업 중 누른 마우스 단추를 식별 합니다. 예를 들어 마우스 왼쪽된 단추를 누르면 첫 번째 비트 KeyState 속성에 설정 됩니다. 지정된 된 키 상태에 대 한 테스트 하려면 비트 AND 연산자를 사용할 수 있습니다.       다음 표에서 지정된 된 이벤트에 사용 되는 값을 보여 줍니다.      | 값 | 키 |   |-----------|---------|   |-1 (비트 0) | 마우스 왼쪽된 단추입니다. |   |-2 (비트 1) | 마우스 오른쪽 단추로. |   |-4 (비트 2) | SHIFT 키입니다. |   |-8 (비트 3) | CTRL 키입니다. |   |-16 (비트 4) | 마우스 가운데 단추. |   |-32 (비트 5) | ALT 키입니다. |"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_339_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_339_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_339_1.cs)]"
  syntax:
    content: public int KeyState { get; }
    return:
      type: System.Int32
      description: "SHIFT, CTRL 및 ALT 키와 마우스 단추의 현재 상태입니다."
  overload: System.Windows.Forms.DragEventArgs.KeyState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.X
  id: X
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: X
  nameWithType: DragEventArgs.X
  fullName: System.Windows.Forms.DragEventArgs.X
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "화면 좌표에서 마우스 포인터의 x 좌표를 가져옵니다."
  remarks: ''
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_210_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_210_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_210_1.cs)]"
  syntax:
    content: public int X { get; }
    return:
      type: System.Int32
      description: "픽셀 단위로 나타낸 마우스 포인터의 x 좌표입니다."
  overload: System.Windows.Forms.DragEventArgs.X*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.Y
  id: Y
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: Y
  nameWithType: DragEventArgs.Y
  fullName: System.Windows.Forms.DragEventArgs.Y
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "화면 좌표에서 마우스 포인터의 y 좌표를 가져옵니다."
  remarks: ''
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_56_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_56_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_56_1.cs)]"
  syntax:
    content: public int Y { get; }
    return:
      type: System.Int32
      description: "픽셀 단위로 나타낸 마우스 포인터의 y 좌표입니다."
  overload: System.Windows.Forms.DragEventArgs.Y*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  nameWithType: DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  fullName: System.Windows.Forms.DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
- uid: System.Windows.Forms.IDataObject
  parent: System.Windows.Forms
  isExternal: false
  name: IDataObject
  nameWithType: IDataObject
  fullName: System.Windows.Forms.IDataObject
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.DragDropEffects
  parent: System.Windows.Forms
  isExternal: false
  name: DragDropEffects
  nameWithType: DragDropEffects
  fullName: System.Windows.Forms.DragDropEffects
- uid: System.Windows.Forms.DragEventArgs.AllowedEffect
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: AllowedEffect
  nameWithType: DragEventArgs.AllowedEffect
  fullName: System.Windows.Forms.DragEventArgs.AllowedEffect
- uid: System.Windows.Forms.DragEventArgs.Data
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Data
  nameWithType: DragEventArgs.Data
  fullName: System.Windows.Forms.DragEventArgs.Data
- uid: System.Windows.Forms.DragEventArgs.Effect
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Effect
  nameWithType: DragEventArgs.Effect
  fullName: System.Windows.Forms.DragEventArgs.Effect
- uid: System.Windows.Forms.DragEventArgs.KeyState
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: KeyState
  nameWithType: DragEventArgs.KeyState
  fullName: System.Windows.Forms.DragEventArgs.KeyState
- uid: System.Windows.Forms.DragEventArgs.X
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: X
  nameWithType: DragEventArgs.X
  fullName: System.Windows.Forms.DragEventArgs.X
- uid: System.Windows.Forms.DragEventArgs.Y
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Y
  nameWithType: DragEventArgs.Y
  fullName: System.Windows.Forms.DragEventArgs.Y
- uid: System.Windows.Forms.DragEventArgs.#ctor*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: DragEventArgs
  nameWithType: DragEventArgs.DragEventArgs
- uid: System.Windows.Forms.DragEventArgs.AllowedEffect*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: AllowedEffect
  nameWithType: DragEventArgs.AllowedEffect
- uid: System.Windows.Forms.DragEventArgs.Data*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Data
  nameWithType: DragEventArgs.Data
- uid: System.Windows.Forms.DragEventArgs.Effect*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Effect
  nameWithType: DragEventArgs.Effect
- uid: System.Windows.Forms.DragEventArgs.KeyState*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: KeyState
  nameWithType: DragEventArgs.KeyState
- uid: System.Windows.Forms.DragEventArgs.X*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: X
  nameWithType: DragEventArgs.X
- uid: System.Windows.Forms.DragEventArgs.Y*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Y
  nameWithType: DragEventArgs.Y
