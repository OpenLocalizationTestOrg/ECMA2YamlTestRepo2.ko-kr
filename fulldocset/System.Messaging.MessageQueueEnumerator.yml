### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageQueueEnumerator
  id: MessageQueueEnumerator
  children:
  - System.Messaging.MessageQueueEnumerator.Close
  - System.Messaging.MessageQueueEnumerator.Current
  - System.Messaging.MessageQueueEnumerator.Dispose
  - System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  - System.Messaging.MessageQueueEnumerator.LocatorHandle
  - System.Messaging.MessageQueueEnumerator.MoveNext
  - System.Messaging.MessageQueueEnumerator.Reset
  - System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: MessageQueueEnumerator
  nameWithType: MessageQueueEnumerator
  fullName: System.Messaging.MessageQueueEnumerator
  type: Class
  summary: "메시지 큐의 메시지를 열거 하는 정방향 전용 커서를 제공 합니다."
  remarks: "MessageQueueEnumerator를 사용 하 여 네트워크에서 큐와 동적 상호 작용 합니다. 통해 사용할 수 있는 메서드는 <xref:System.Messaging.MessageQueue>클래스 동적 큐 또는 큐 컬렉션 내의 지정 된 메서드가 호출 된 시간에 대 한 스냅숏을 포함 하는 배열 목록을 포함 하는 MessageQueueEnumerator 중 하나를 반환할 수 있습니다.</xref:System.Messaging.MessageQueue>       큐는 네트워크에 정의 된 순서가 있지 않습니다. 예를 들어 컴퓨터, 레이블, 공개 또는 개인 상태 여 정렬 되거나 다른 사용자를 액세스할 수 있는 기준 하지 않습니다. MessageQueueEnumerator는 목록 헤드를 동적으로 초기화 하는 커서입니다. <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>.</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 를 호출 하 여 열거형의 첫 번째 큐에 커서를 이동할 수 있습니다. 열거자가 초기화 된 후 사용할 수 있습니다 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>나머지 큐 앞으로 단계별로 실행 되도록 합니다.</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>       여는 MessageQueueEnumerator 뒤로 이동 하는 것이 불가능 합니다. 커서는 큐 열거형에서 앞으로 이동 하는 것을 허용합니다. 호출할 수 있습니다 <xref:System.Messaging.MessageQueueEnumerator.Reset%2A>열거형 다시 설정 하 고 다시 목록의 처음에 커서를 놓습니다.</xref:System.Messaging.MessageQueueEnumerator.Reset%2A> 열거자는 동적 커서의 현재 위치 뒤에 추가 하는 큐 열거자가 액세스할 수 있습니다. 첫 번째 호출 재설정 하지 않고 커서의 현재 위치 앞에 삽입 하는 큐를 액세스할 수 없습니다."
  example:
  - "The following code example iterates through all the message queues in the network, and examines the path for each queue. Finally, it displays the number of public queues on the network.  \n  \n [!code-cs[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/csharp/t-system.messaging.messa_7_1.cs)]\n [!code-cpp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/cpp/t-system.messaging.messa_7_1.cpp)]\n [!code-vb[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/visualbasic/t-system.messaging.messa_7_1.vb)]"
  syntax:
    content: 'public class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.IEnumerator
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Close
  id: Close
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Close()
  nameWithType: MessageQueueEnumerator.Close()
  fullName: System.Messaging.MessageQueueEnumerator.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "열거자와 연결 된 리소스를 해제 합니다."
  remarks: "운영 체제에 대해 열린 핸들이 유지 <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>, 커서의 수명 동안 큐 열거자에.</xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A> Close를 호출에서는 열거자와 함께 작업을 완료 하면 핸들에 연결 된 리소스를 해제 합니다."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Current
  id: Current
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: MessageQueueEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "현재 가져옵니다 <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> 열거 합니다."
  remarks: "열거자를 만들 때이를 가리키지 않습니다 아무것도 하므로 현재는 유효 하지 하 고 액세스 하는 경우 예외가 throw 됩니다. 호출 해야 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>열거형의 첫 번째 큐에 커서를 배치할 수 있습니다.</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>       에 대 한 중간 호출 된 현재를 여러 번 호출 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>는 동일한 반환 <xref:System.Messaging.MessageQueue>개체입니다.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.MessageQueue Current { get; }
    return:
      type: System.Messaging.MessageQueue
      description: "커서가 현재 배치 되어 큐입니다."
  overload: System.Messaging.MessageQueueEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "첫 번째 호출 하기 전에 현재 호출 <> </> *> 합니다. 커서가는 열거형의 첫 번째 큐 앞에 배치 됩니다.       -또는-을 호출한 후에 현재 호출 <> </> *> (의 커서가 나타내는 열거의 마지막 대기열 뒤) false를 반환한 것입니다."
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Dispose
  id: Dispose
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageQueueEnumerator.Dispose()
  fullName: System.Messaging.MessageQueueEnumerator.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Messaging.MessageQueueEnumerator&quot;> </xref>합니다."
  remarks: "사용 하는 리소스를 사용 하면 Dispose를 호출는 <xref:System.Messaging.MessageQueueEnumerator>다른 용도에 다시 할당 됩니다.</xref:System.Messaging.MessageQueueEnumerator> Dispose에 대 한 자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageQueueEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueEnumerator.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Messaging.MessageQueueEnumerator&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>메서드 및 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> `Dispose`보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다. <xref:System.Object.Finalize%2A>호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</xref:System.Object.Finalize%2A>       경우는 `disposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Messaging.MessageQueueEnumerator>참조.</xref:System.Messaging.MessageQueueEnumerator> 이 메서드 호출에서 `Dispose` 각 참조 된 개체의 메서드."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Messaging.MessageQueueEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle
  id: LocatorHandle
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
  fullName: System.Messaging.MessageQueueEnumerator.LocatorHandle
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "네트워크에서 큐를 찾는 데 사용 하는 네이티브 메시지 큐 핸들을 가져옵니다."
  remarks: "더 이상 필요한 경우이 <xref:System.Messaging.MessageQueueEnumerator>인스턴스를 호출 <xref:System.Messaging.MessageQueueEnumerator.Close%2A>리소스에이 핸들을 해제 합니다.</xref:System.Messaging.MessageQueueEnumerator.Close%2A> </xref:System.Messaging.MessageQueueEnumerator>"
  syntax:
    content: public IntPtr LocatorHandle { get; }
    return:
      type: System.IntPtr
      description: "현재 큐에 대 한 기본 핸들입니다."
  overload: System.Messaging.MessageQueueEnumerator.LocatorHandle*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "핸들 존재 하지 않습니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출 코드 찾아보기 권한이 없습니다."
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.MoveNext
  id: MoveNext
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: MessageQueueEnumerator.MoveNext()
  fullName: System.Messaging.MessageQueueEnumerator.MoveNext()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "현재 사용 가능한 경우 열거자는 열거형의 다음 큐로 이동 합니다."
  remarks: "MoveNext 반환 `false` 열거형과 관련 된 큐가 없는 경우 즉시 합니다.       MoveNext 돌아갑니다 `true` 컬렉션의 끝에 도달 하면 될 때까지 합니다. 그런 다음 반환 합니다 `false` 각 연속 호출에 대 한 합니다. 그러나 MoveNext를 반환 했습니다. 일단 `false`, 액세스 하는 <xref:System.Messaging.MessageQueueEnumerator.Current%2A>속성 예외가 throw 됩니다.</xref:System.Messaging.MessageQueueEnumerator.Current%2A>       만들어지면 열거자는 일반적으로 배치 중 첫 번째 앞 <xref:System.Messaging.MessageQueue>MoveNext 호출, 열거형 및 첫 번째도 열거형의 첫 번째 큐를 제공 합니다.</xref:System.Messaging.MessageQueue>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>열거자 다음 큐;로 이동 성공 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 경우 열거자는 열거형의 끝에 도달 했습니다."
  overload: System.Messaging.MessageQueueEnumerator.MoveNext*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출 코드 찾아보기 권한이 없습니다."
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Reset
  id: Reset
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: MessageQueueEnumerator.Reset()
  fullName: System.Messaging.MessageQueueEnumerator.Reset()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "열거형의 시작 부분을 가리키도록 커서를 다시 설정 합니다."
  remarks: "열거자 앞 으로만 이동 가능한 방향으로 이동합니다. 이 메서드를 사용 하 여 열거 된 큐의 시작 부분으로 돌아갑니다.       다시 설정 목록에서 첫 번째 큐에 커서를 놓습니다. 호출할 필요가 없습니다 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>열거형의 첫 번째 큐 앞으로 커서를 이동할 수는 재설정을 호출한 후.</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "현재 가져옵니다 <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> 열거 합니다."
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "커서가 현재 배치 되어 큐입니다."
  overload: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Messaging.MessageQueueEnumerator.Close
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Close()
  nameWithType: MessageQueueEnumerator.Close()
  fullName: System.Messaging.MessageQueueEnumerator.Close()
- uid: System.Messaging.MessageQueueEnumerator.Current
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageQueueEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.Current
- uid: System.Messaging.MessageQueue
  parent: System.Messaging
  isExternal: false
  name: MessageQueue
  nameWithType: MessageQueue
  fullName: System.Messaging.MessageQueue
- uid: System.Messaging.MessageQueueEnumerator.Dispose
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: MessageQueueEnumerator.Dispose()
  fullName: System.Messaging.MessageQueueEnumerator.Dispose()
- uid: System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageQueueEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueEnumerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
  fullName: System.Messaging.MessageQueueEnumerator.LocatorHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Messaging.MessageQueueEnumerator.MoveNext
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: MessageQueueEnumerator.MoveNext()
  fullName: System.Messaging.MessageQueueEnumerator.MoveNext()
- uid: System.Messaging.MessageQueueEnumerator.Reset
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Reset()
  nameWithType: MessageQueueEnumerator.Reset()
  fullName: System.Messaging.MessageQueueEnumerator.Reset()
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.System.Collections.IEnumerator.Current
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.MessageQueueEnumerator.Close*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Close
  nameWithType: MessageQueueEnumerator.Close
- uid: System.Messaging.MessageQueueEnumerator.Current*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageQueueEnumerator.Current
- uid: System.Messaging.MessageQueueEnumerator.Dispose*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose
  nameWithType: MessageQueueEnumerator.Dispose
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
- uid: System.Messaging.MessageQueueEnumerator.MoveNext*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: MessageQueueEnumerator.MoveNext
- uid: System.Messaging.MessageQueueEnumerator.Reset*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Reset
  nameWithType: MessageQueueEnumerator.Reset
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
