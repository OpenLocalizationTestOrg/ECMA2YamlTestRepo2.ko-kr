### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlConnection
  id: SqlConnection
  children:
  - System.Data.SqlClient.SqlConnection.#ctor
  - System.Data.SqlClient.SqlConnection.#ctor(System.String)
  - System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)
  - System.Data.SqlClient.SqlConnection.AccessToken
  - System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.SqlClient.SqlConnection.BeginTransaction
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  - System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  - System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)
  - System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  - System.Data.SqlClient.SqlConnection.ClearAllPools
  - System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlConnection.ClientConnectionId
  - System.Data.SqlClient.SqlConnection.Close
  - System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  - System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  - System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  - System.Data.SqlClient.SqlConnection.ConnectionString
  - System.Data.SqlClient.SqlConnection.ConnectionTimeout
  - System.Data.SqlClient.SqlConnection.CreateCommand
  - System.Data.SqlClient.SqlConnection.CreateDbCommand
  - System.Data.SqlClient.SqlConnection.Credential
  - System.Data.SqlClient.SqlConnection.Database
  - System.Data.SqlClient.SqlConnection.DataSource
  - System.Data.SqlClient.SqlConnection.DbProviderFactory
  - System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  - System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  - System.Data.SqlClient.SqlConnection.GetSchema
  - System.Data.SqlClient.SqlConnection.GetSchema(System.String)
  - System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])
  - System.Data.SqlClient.SqlConnection.InfoMessage
  - System.Data.SqlClient.SqlConnection.Open
  - System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlConnection.PacketSize
  - System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  - System.Data.SqlClient.SqlConnection.ResetStatistics
  - System.Data.SqlClient.SqlConnection.RetrieveStatistics
  - System.Data.SqlClient.SqlConnection.ServerVersion
  - System.Data.SqlClient.SqlConnection.State
  - System.Data.SqlClient.SqlConnection.StatisticsEnabled
  - System.Data.SqlClient.SqlConnection.System#ICloneable#Clone
  - System.Data.SqlClient.SqlConnection.WorkstationId
  langs:
  - csharp
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
  type: Class
  summary: "열린 연결을 나타내며는 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 데이터베이스입니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "A SqlConnection object represents a unique session to a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] data source. With a client/server database system, it is equivalent to a network connection to the server. SqlConnection is used together with <xref:System.Data.SqlClient.SqlDataAdapter> and <xref:System.Data.SqlClient.SqlCommand> to increase performance when connecting to a Microsoft [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] database. For all third-party [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] products, and other OLE DB-supported data sources, use <xref:System.Data.OleDb.OleDbConnection>.  \n  \n When you create an instance of SqlConnection, all properties are set to their initial values. For a list of these values, see the SqlConnection constructor.  \n  \n See <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> for a list of the keywords in a connection string.  \n  \n If the SqlConnection goes out of scope, it won't be closed. Therefore, you must explicitly close the connection by calling `Close` or `Dispose`. `Close` and `Dispose` are functionally equivalent. If the connection pooling value `Pooling` is set to `true` or `yes`, the underlying connection is returned back to the connection pool. On the other hand, if `Pooling` is set to `false` or `no`, the underlying connection to the server is actually closed.  \n  \n> [!NOTE]\n>  Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool. For more information, see [SQL Server Connection Pooling (ADO.NET)](~/add/includes/ajax-current-ext-md.md).  \n  \n To ensure that connections are always closed, open the connection inside of a `using` block, as shown in the following code fragment. Doing so ensures that the connection is automatically closed when the code exits the block.  \n  \n```vb#  \nUsing connection As New SqlConnection(connectionString)  \n    connection.Open()  \n    ' Do work here; connection closed on following line.  \nEnd Using  \n  \n```  \n  \n```c#  \nusing (SqlConnection connection = new SqlConnection(connectionString))  \n    {  \n        connection.Open();  \n        // Do work here; connection closed on following line.  \n    }  \n```  \n  \n> [!NOTE]\n>  To deploy high-performance applications, you must use connection pooling. When you use the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], you do not have to enable connection pooling because the provider manages this automatically, although you can modify some settings. For more information, see [SQL Server Connection Pooling (ADO.NET)](../Topic/SQL%20Server%20Connection%20Pooling%20\\(ADO.NET\\).md).  \n  \n If a <xref:System.Data.SqlClient.SqlException> is generated by the method executing a <xref:System.Data.SqlClient.SqlCommand>, the SqlConnection remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the SqlConnection. However, the user can reopen the connection and continue.  \n  \n An application that creates an instance of the SqlConnection object can require all direct and indirect callers to have sufficient permission to the code by setting declarative or imperative security demands. SqlConnection makes security demands using the <xref:System.Data.SqlClient.SqlClientPermission> object. Users can verify that their code has sufficient permissions by using the <xref:System.Data.SqlClient.SqlClientPermissionAttribute> object. Users and administrators can also use the [Caspol.exe (Code Access Security Policy Tool)](~/add/includes/ajax-current-ext-md.md) to modify security policy at the machine, user, and enterprise levels. For more information, see [Security](~/add/includes/ajax-current-ext-md.md). For an example demonstrating how to use security demands, see [Code Access Security and ADO.NET](~/add/includes/ajax-current-ext-md.md).  \n  \n For more information about handling warning and informational messages from the server, see [Connection Events](~/add/includes/ajax-current-ext-md.md). [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] engine errors and error messages are documented in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.  \n  \n> [!CAUTION]\n>  You can force TCP instead of shared memory. You can do that by prefixing tcp: to the server name in the connection string or you can use localhost."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and a SqlConnection. The SqlConnection is opened and set as the <xref:System.Data.SqlClient.SqlCommand.Connection%2A> for the <xref:System.Data.SqlClient.SqlCommand>. The example then calls <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>. To accomplish this, the <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is a [!INCLUDE[tsql](~/add/includes/tsql-md.md)] INSERT statement. The connection is closed automatically when the code exits the using block.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._4_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._4_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("InfoMessage")]

      public sealed class SqlConnection : System.Data.Common.DbConnection, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbConnection
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: SqlConnection()
  nameWithType: SqlConnection.SqlConnection()
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> 클래스입니다."
  remarks: "새 인스턴스가 <xref:System.Data.SqlClient.SqlConnection>만들어지면 읽기/쓰기 속성의 관련된 키워드를 사용 하 여 구체적으로 설정 되어 있지 않으면 다음 초기 값으로 설정 됩니다는 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>속성.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> </xref:System.Data.SqlClient.SqlConnection>      | 속성 | 초기 값 |   |----------------|-------------------|   | <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>| 빈 문자열 (&quot;&quot;) |   | <xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|&15; |   | <xref:System.Data.SqlClient.SqlConnection.Database%2A>| 빈 문자열 (&quot;&quot;) |   | <xref:System.Data.SqlClient.SqlConnection.DataSource%2A>| 빈 문자열 (&quot;&quot;) |       사용 하 여 이러한 속성에 대 한 값을 변경할 수는 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>속성.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> </xref:System.Data.SqlClient.SqlConnection.DataSource%2A> </xref:System.Data.SqlClient.SqlConnection.Database%2A> </xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A> </xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> <xref:System.Data.SqlClient.SqlConnectionStringBuilder>클래스 만들고 연결 문자열의 내용을 관리 하기 위한 기능을 제공 합니다.</xref:System.Data.SqlClient.SqlConnectionStringBuilder>"
  example:
  - "The following example creates and opens a <xref:System.Data.SqlClient.SqlConnection>.  \n  \n [!code-vb[Classic WebData SqlConnection.SqlConnection Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._17_1.vb)]\n [!code-cs[Classic WebData SqlConnection.SqlConnection Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._17_1.cs)]"
  syntax:
    content: public SqlConnection ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: SqlConnection(String)
  nameWithType: SqlConnection.SqlConnection(String)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> 클래스는 연결 문자열을 포함 하는 문자열을 지정 합니다."
  remarks: "새 인스턴스가 <xref:System.Data.SqlClient.SqlConnection>만들어지면 읽기/쓰기 속성의 관련된 키워드를 사용 하 여 구체적으로 설정 되어 있지 않으면 다음 초기 값으로 설정 됩니다는 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>속성.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> </xref:System.Data.SqlClient.SqlConnection>      | 속성 | 초기 값 |   |----------------|-------------------|   | <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>| `connectionString`|   | <xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|&15; |   | <xref:System.Data.SqlClient.SqlConnection.Database%2A>| 빈 문자열 (&quot;&quot;) |   | <xref:System.Data.SqlClient.SqlConnection.DataSource%2A>| 빈 문자열 (&quot;&quot;) |       사용 하 여 이러한 속성에 대 한 값을 변경할 수는 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>속성.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> </xref:System.Data.SqlClient.SqlConnection.DataSource%2A> </xref:System.Data.SqlClient.SqlConnection.Database%2A> </xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A> </xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> <xref:System.Data.SqlClient.SqlConnection>클래스 만들고 연결 문자열의 내용을 관리 하기 위한 기능을 제공 합니다.</xref:System.Data.SqlClient.SqlConnection>"
  example:
  - "The following example creates and opens a <xref:System.Data.SqlClient.SqlConnection>.  \n  \n [!code-vb[Classic WebData SqlConnection.SqlConnection1 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._38_1.vb)]\n [!code-cs[Classic WebData SqlConnection.SqlConnection1 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._38_1.cs)]"
  syntax:
    content: public SqlConnection (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "열려는 사용 되는 연결 된 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 데이터베이스입니다."
  overload: System.Data.SqlClient.SqlConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)
  id: '#ctor(System.String,System.Data.SqlClient.SqlCredential)'
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: SqlConnection(String,SqlCredential)
  nameWithType: SqlConnection.SqlConnection(String,SqlCredential)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String,SqlCredential)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> 클래스를 사용 하지 않는 연결 문자열이 있는 <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref> 및 <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> 사용자 ID와 암호를 포함 하는 개체입니다."
  syntax:
    content: public SqlConnection (string connectionString, System.Data.SqlClient.SqlCredential credential);
    parameters:
    - id: connectionString
      type: System.String
      description: '다음 연결 문자열 키워드 중 하나를 사용 하지 않는 연결 문자열: <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_UserId&quot; name=&quot;UserId&quot; href=&quot;&quot;> </xref>, 또는 <xref uid=&quot;langword_csharp_Password&quot; name=&quot;Password&quot; href=&quot;&quot;> </xref>; 하거나 사용 하지 않는 <xref uid=&quot;langword_csharp_ContextConnection = true&quot; name=&quot;ContextConnection = true&quot; href=&quot;&quot;> </xref>합니다.'
    - id: credential
      type: System.Data.SqlClient.SqlCredential
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref> object. 경우 `credential` 가 null 인 SqlConnection는 기능적으로 &lt;xref:System.Data.SqlClient.SqlConnection.%23ctor%2A&gt;합니다."
  overload: System.Data.SqlClient.SqlConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.AccessToken
  id: AccessToken
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: AccessToken
  nameWithType: SqlConnection.AccessToken
  fullName: System.Data.SqlClient.SqlConnection.AccessToken
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "연결에 대 한 액세스 토큰을 가져오거나 설정 합니다."
  syntax:
    content: public string AccessToken { get; set; }
    return:
      type: System.String
      description: "연결에 대 한 액세스 토큰입니다."
  overload: System.Data.SqlClient.SqlConnection.AccessToken*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "추가할 수 있습니다."
    return:
      type: System.Data.Common.DbTransaction
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: SqlConnection.BeginTransaction()
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "데이터베이스 트랜잭션을 시작합니다."
  remarks: "이 명령은 매핑되는 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] BEGIN transaction 구현 합니다.       명시적으로 커밋하거나 사용 하 여 트랜잭션을 롤백하는 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>또는 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>메서드.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> </xref:System.Data.SqlClient.SqlTransaction.Commit%2A> 있는지 확인 하기는 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 트랜잭션 관리 모델을 올바르게 수행에서 제공 하는 것과 같은 다른 트랜잭션 관리 모델을 사용 하지 않도록 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]합니다.      > [!NOTE] > 격리 수준을 지정 하지 않으면 기본 격리 수준 사용 됩니다. 와 격리 수준을 지정 하는 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>메서드를 사용 하는 오버 로드를 사용 하 여는 `iso` 매개 변수 (<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>).</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> 트랜잭션에 대 한 설정 된 격리 수준 트랜잭션이 완료 되 고 연결이 닫히거나 삭제 될 때까지 유지 됩니다. 격리 수준을 설정 **스냅숏** 스냅숏 격리 수준을 해제 되어 없는 데이터베이스에서 예외를 throw 하지 않습니다. 트랜잭션의 기본 격리 수준을 사용 하 여 완료 합니다.      > [!CAUTION] > 트랜잭션이 시작 되는 서버에서 수준 16 또는 더 높은 오류가 발생 하는 경우 트랜잭션이 롤백되지 것입니다 다시 될 때까지 <xref:System.Data.SqlClient.SqlDataReader.Read%2A>메서드가 호출 됩니다.</xref:System.Data.SqlClient.SqlDataReader.Read%2A> 예외가 발생 하지 않습니다 **ExecuteReader**합니다.      > [!CAUTION] > 쿼리에서 많은 양의 데이터 및 호출을 반환 하는 경우 `BeginTransaction`, <xref:System.Data.SqlClient.SqlException>는 throw 되며 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] MARS를 사용 하는 경우 병렬 트랜잭션은 허용 하지 않습니다.</xref:System.Data.SqlClient.SqlException> 이 문제를 방지 하려면 항상 트랜잭션을와 연결 명령, 연결, 또는 둘 다 판독기를 열기 전에 합니다.       대 한 자세한 내용은 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 에서 &quot;명시적 트랜잭션을&quot; 및 &quot;효율적인 트랜잭션 코딩&quot;를 참조 하는 트랜잭션, [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 온라인 설명서."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the BeginTransaction, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._1_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._1_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "새 트랜잭션을 나타내는 개체입니다."
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "결과 집합 MARS (Multiple Active)를 사용 하는 경우 병렬 트랜잭션은 허용 되지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "병렬 트랜잭션은 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 격리 수준으로 데이터베이스 트랜잭션을 시작 합니다."
  remarks: "이 명령은 매핑되는 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] BEGIN transaction 구현 합니다.       명시적으로 커밋하거나 사용 하 여 트랜잭션을 롤백하는 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>또는 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>메서드.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> </xref:System.Data.SqlClient.SqlTransaction.Commit%2A> 있는지 확인 하기는 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 트랜잭션 관리 모델을 올바르게 수행에서 제공 하는 것과 같은 다른 트랜잭션 관리 모델을 사용 하지 않도록 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]합니다.      > [!NOTE] >는 트랜잭션이 커밋되거나 롤백될 자동 커밋 모드에 있는 모든 후속 명령에 대 한 트랜잭션 격리 수준을 유지 (의 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 기본값). 유지 하 고 다른 사용자가 행 잠금 REPEATABLE READ 격리 수준이 같은 예상치 못한 결과가 발생할 수 있습니다. 격리 수준 (READ COMMITTED) 기본값으로 다시 설정, 실행 된 [!INCLUDE[tsql](~/add/includes/tsql-md.md)] 트랜잭션 격리 수준 READ COMMITTED 설정 문 또는 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName>그 뒤 즉시 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>.</xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName> 호출 대 한 자세한 내용은 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 의 격리 수준에서 데이터베이스 엔진 &quot;&quot;를 참조 하는 격리 수준 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 온라인 설명서.       대 한 자세한 내용은 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 에서 &quot;명시적 트랜잭션을&quot; 및 &quot;효율적인 트랜잭션 코딩&quot;를 참조 하는 트랜잭션, [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 온라인 설명서.      > [!CAUTION] > 쿼리에서 많은 양의 데이터 및 호출을 반환 하는 경우 `BeginTransaction`, <xref:System.Data.SqlClient.SqlException>는 throw 되며 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] MARS를 사용 하는 경우 병렬 트랜잭션은 허용 하지 않습니다.</xref:System.Data.SqlClient.SqlException> 이 문제를 방지 하려면 항상 트랜잭션을와 연결 명령, 연결, 또는 둘 다 판독기를 열기 전에 합니다."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-vb[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/add/codesnippet/visualbasic/b09ea924-5f89-4203-b010-_1.vb)]\n [!code-cs[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/add/codesnippet/csharp/b09ea924-5f89-4203-b010-_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso);
    parameters:
    - id: iso
      type: System.Data.IsolationLevel
      description: "트랜잭션을 실행 해야 하는 격리 수준입니다."
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "새 트랜잭션을 나타내는 개체입니다."
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "결과 집합 MARS (Multiple Active)를 사용 하는 경우 병렬 트랜잭션은 허용 되지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "병렬 트랜잭션은 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  id: BeginTransaction(System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction(String)
  nameWithType: SqlConnection.BeginTransaction(String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 트랜잭션 이름으로 데이터베이스 트랜잭션을 시작 합니다."
  remarks: "이 명령은 매핑되는 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] BEGIN transaction 구현 합니다.       길이 `transactionName` 매개 변수는 32 자를 초과할 수 없습니다; 그렇지 않으면 예외가 throw 됩니다.       값은 `transactionName` 에 대 한 후속 호출에서 매개 변수를 사용할 수 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>및는 `savePoint` 의 매개 변수는 <xref:System.Data.SqlClient.SqlTransaction.Save%2A>메서드.</xref:System.Data.SqlClient.SqlTransaction.Save%2A> </xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>       명시적으로 커밋하거나 사용 하 여 트랜잭션을 롤백하는 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>또는 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>메서드.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> </xref:System.Data.SqlClient.SqlTransaction.Commit%2A> 있는지 확인 하기는 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 트랜잭션 관리 모델을 올바르게 수행에서 제공 하는 것과 같은 다른 트랜잭션 관리 모델을 사용 하지 않도록 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]합니다.       대 한 자세한 내용은 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 에서 &quot;명시적 트랜잭션을&quot; 및 &quot;효율적인 트랜잭션 코딩&quot;를 참조 하는 트랜잭션, [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 온라인 설명서.      > [!CAUTION] > 쿼리에서 많은 양의 데이터 및 호출을 반환 하는 경우 `BeginTransaction`, <xref:System.Data.SqlClient.SqlException>는 throw 되며 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] MARS를 사용 하는 경우 병렬 트랜잭션은 허용 하지 않습니다.</xref:System.Data.SqlClient.SqlException> 이 문제를 방지 하려면 항상 트랜잭션을와 연결 명령, 연결, 또는 둘 다 판독기를 열기 전에 합니다."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._36_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._36_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (string transactionName);
    parameters:
    - id: transactionName
      type: System.String
      description: "트랜잭션 이름입니다."
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "새 트랜잭션을 나타내는 개체입니다."
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "결과 집합 MARS (Multiple Active)를 사용 하는 경우 병렬 트랜잭션은 허용 되지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "병렬 트랜잭션은 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  id: BeginTransaction(System.Data.IsolationLevel,System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel,String)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel,String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 격리 수준과 트랜잭션 이름으로 데이터베이스 트랜잭션을 시작 합니다."
  remarks: "이 명령은 매핑되는 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] BEGIN transaction 구현 합니다.       값은 `transactionName` 에 대 한 후속 호출에서 매개 변수를 사용할 수 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>및는 `savePoint` 의 매개 변수는 <xref:System.Data.SqlClient.SqlTransaction.Save%2A>메서드.</xref:System.Data.SqlClient.SqlTransaction.Save%2A> </xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>       명시적으로 커밋하거나 사용 하 여 트랜잭션을 롤백하는 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>또는 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>메서드.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> </xref:System.Data.SqlClient.SqlTransaction.Commit%2A> 있는지 확인 하기는 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 트랜잭션 관리 모델을 올바르게 수행에서 제공 하는 것과 같은 다른 트랜잭션 관리 모델을 사용 하지 않도록 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]합니다.      > [!NOTE] >는 트랜잭션이 커밋되거나 롤백될 자동 커밋 모드에 있는 모든 후속 명령에 대 한 트랜잭션 격리 수준을 유지 (의 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 기본값). 유지 하 고 다른 사용자가 행 잠금 REPEATABLE READ 격리 수준이 같은 예상치 못한 결과가 발생할 수 있습니다. 격리 수준 (READ COMMITTED) 기본값으로 다시 설정, 실행 된 [!INCLUDE[tsql](~/add/includes/tsql-md.md)] 트랜잭션 격리 수준 READ COMMITTED 설정 문 또는 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName>그 뒤 즉시 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>.</xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName> 호출 대 한 자세한 내용은 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 의 격리 수준에서 데이터베이스 엔진 &quot;&quot;를 참조 하는 격리 수준 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 온라인 설명서.       대 한 자세한 내용은 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 에서 &quot;명시적 트랜잭션을&quot; 및 &quot;효율적인 트랜잭션 코딩&quot;를 참조 하는 트랜잭션, [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 온라인 설명서.      > [!CAUTION] > 쿼리에서 많은 양의 데이터 및 호출을 반환 하는 경우 `BeginTransaction`, <xref:System.Data.SqlClient.SqlException>는 throw 되며 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] MARS를 사용 하는 경우 병렬 트랜잭션은 허용 하지 않습니다.</xref:System.Data.SqlClient.SqlException> 이 문제를 방지 하려면 항상 트랜잭션을와 연결 명령, 연결, 또는 둘 다 판독기를 열기 전에 합니다."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/add/codesnippet/csharp/1f00ab5d-aff7-46ea-8f1d-_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/add/codesnippet/visualbasic/1f00ab5d-aff7-46ea-8f1d-_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso, string transactionName);
    parameters:
    - id: iso
      type: System.Data.IsolationLevel
      description: "트랜잭션을 실행 해야 하는 격리 수준입니다."
    - id: transactionName
      type: System.String
      description: "트랜잭션 이름입니다."
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "새 트랜잭션을 나타내는 개체입니다."
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "결과 집합 MARS (Multiple Active)를 사용 하는 경우 병렬 트랜잭션은 허용 되지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "병렬 트랜잭션은 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: SqlConnection.ChangeDatabase(String)
  fullName: System.Data.SqlClient.SqlConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "열린에 대 한 현재 데이터베이스 변경 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>합니다."
  remarks: "제공 된 값이 고 `database` 매개 변수는 올바른 데이터베이스 이름 이어야 합니다. `database` 매개 변수는 null 값, 빈 문자열 또는 공백 문자로 이루어진 문자열에 포함할 수 없습니다."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._10_1.cs)]\n [!code-vb[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._10_1.vb)]"
  syntax:
    content: public override void ChangeDatabase (string database);
    parameters:
    - id: database
      type: System.String
      description: "현재 데이터베이스 대신 사용할 데이터베이스의 이름입니다."
  overload: System.Data.SqlClient.SqlConnection.ChangeDatabase*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "데이터베이스 이름이 올바르지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결이 열려 있지 않습니다."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "데이터베이스를 변경할 수 없습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)
  id: ChangePassword(System.String,System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ChangePassword(String,String)
  nameWithType: SqlConnection.ChangePassword(String,String)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "변경 된 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 사용자에 대 한 암호를 제공 된 새 암호로 연결 문자열에 표시 합니다."
  remarks: "사용 하는 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 개발자가 Windows Server에서 기존 암호를 변경 하기 위해 현재 데이터베이스와 새 암호를 제공 하는 클라이언트 응용 프로그램 수 있는 기능을 이용 걸릴 수 있습니다. 응용 프로그램 이전 기간이 만료 되 고 관리자의 개입 없이이 작업을 완료할 수 초기 로그인 하는 동안 새 암호를 사용자에 게 확인 하는 등의 기능을 구현할 수 있습니다.       ChangePassword 메서드 변경은 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 사용자 암호를 제공 된에 표시 된 `connectionString` 에 제공 된 값으로 매개 변수는 `newPassword` 매개 변수. 연결 문자열 통합된 보안에 대 한 옵션을 포함 하는 경우 (즉, &quot;통합된 보안 = True&quot; 또는 해당), 예외가 throw 됩니다.       <xref:System.Data.SqlClient.SqlConnection.Open%2A>메서드에서 발생에 <xref:System.Data.SqlClient.SqlException>.</xref:System.Data.SqlClient.SqlException> </xref:System.Data.SqlClient.SqlConnection.Open%2A> 호출 암호가 만료 되었음을 확인 하려면 연결 문자열 내에 포함 된 암호를 재설정 해야를 표시 하기 위해는 <xref:System.Data.SqlClient.SqlException.Number%2A>속성 예외에 대 한 상태 값 18487 또는 18488이 포함 됩니다.</xref:System.Data.SqlClient.SqlException.Number%2A> 첫 번째 값 (18487) 암호가 만료 된 암호 로그인 하기 전에 다시 설정 해야 합니다 (18488) 두 번째 나타냅니다 나타냅니다.       이 메서드는 서버에 자체 연결을 엽니다, 그리고 암호 변경 요청 및 완료 되는 즉시 연결을 닫습니다. 이 연결 되지,에서 검색 된 않았거나, 반환 되는 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 연결 풀입니다."
  example:
  - "The following is a simple example of changing a password:  \n  \n```  \nclass Program {  \n   static void Main(string[] args) {  \n      System.Data.SqlClient.SqlConnection.ChangePassword(  \n        \"Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password\",   \n       \"new_password\");  \n   }  \n}  \n  \n```  \n  \n```  \nModule Module1  \n    Sub Main()  \nSystem.Data.SqlClient.SqlConnection.ChangePassword(  \n        \"Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password\",   \n       \"new_password\")  \n    End Sub  \nEnd Module  \n  \n```  \n  \n The following console application demonstrates the issues involved in changing a user's password because the current password has expired.  \n  \n [!code-cs[DataWorks SqlConnection.ChangePassword#1](~/add/codesnippet/csharp/7b66f468-c7fc-4a76-bd4e-_1.cs)]\n [!code-vb[DataWorks SqlConnection.ChangePassword#1](~/add/codesnippet/visualbasic/7b66f468-c7fc-4a76-bd4e-_1.vb)]"
  syntax:
    content: public static void ChangePassword (string connectionString, string newPassword);
    parameters:
    - id: connectionString
      type: System.String
      description: "원하는 서버에 연결 하는 데 충분 한 정보를 포함 하는 연결 문자열입니다. 연결 문자열의 사용자 ID와 현재 암호를 포함 해야 합니다."
    - id: newPassword
      type: System.String
      description: "새 암호를 설정 합니다. 이 암호 최소 길이, 특정 문자 등에 대 한 요구 사항을 포함 하 여 서버에 설정 된 암호 보안 정책도 따라야 합니다."
  overload: System.Data.SqlClient.SqlConnection.ChangePassword*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "연결 문자열에는 통합된 보안을 사용 하는 옵션이 포함 되어 있습니다.       또는 <code> newPassword </code> 128 자를 초과 합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "중 하나는 <code> connectionString </code> 또는 <code> newPassword </code> 매개 변수가 null입니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  id: ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ChangePassword(String,SqlCredential,SecureString)
  nameWithType: SqlConnection.ChangePassword(String,SqlCredential,SecureString)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,SqlCredential,SecureString)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "변경 된 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 에 표시 된 사용자에 대 한 암호는 <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> 개체입니다."
  syntax:
    content: public static void ChangePassword (string connectionString, System.Data.SqlClient.SqlCredential credential, System.Security.SecureString newSecurePassword);
    parameters:
    - id: connectionString
      type: System.String
      description: '서버에 연결 하는 데 충분 한 정보를 포함 하는 연결 문자열입니다. 연결 문자열은 다음 연결 문자열 키워드 중 하나를 사용 하지 않아야: <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_UserId&quot; name=&quot;UserId&quot; href=&quot;&quot;> </xref>, 또는 <xref uid=&quot;langword_csharp_Password&quot; name=&quot;Password&quot; href=&quot;&quot;> </xref>; 또는 <xref uid=&quot;langword_csharp_ContextConnection = true&quot; name=&quot;ContextConnection = true&quot; href=&quot;&quot;> </xref>합니다.'
    - id: credential
      type: System.Data.SqlClient.SqlCredential
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref> object."
    - id: newSecurePassword
      type: System.Security.SecureString
      description: "새 암호입니다. `newSecurePassword`읽기 전용 이어야 합니다. 또한 암호 (최소 길이, 특정 문자 요구 사항 등)는 서버에 설정의 암호 보안 정책도 따라야 합니다."
  overload: System.Data.SqlClient.SqlConnection.ChangePassword*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "1.연결 문자열의 조합이 포함 <xref uid=&quot;langword_csharp_UserId&quot; name=&quot;UserId&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Password&quot; name=&quot;Password&quot; href=&quot;&quot;> </xref>, 또는 <xref uid=&quot;langword_csharp_Integrated Security=true&quot; name=&quot;Integrated Security=true&quot; href=&quot;&quot;> </xref>합니다.      2.  연결 문자열에 <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;> </xref>합니다.      3.  <code>newSecurePassword</code>128 자 보다 큽니다.      4.  <code>newSecurePassword</code>읽기 전용이 됩니다.      5.  <code>newSecurePassword</code>빈 문자열입니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the parameters (<code>connectionString</code>, <code>credential</code>, or <code>newSecurePassword</code>) is null."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ClearAllPools
  id: ClearAllPools
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ClearAllPools()
  nameWithType: SqlConnection.ClearAllPools()
  fullName: System.Data.SqlClient.SqlConnection.ClearAllPools()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "연결 풀을 비웁니다."
  remarks: "ClearAllPools 다시 설정 하거나 비웁니다 연결 풀. 메서드를 호출할 때에서 사용 중인 연결 되어 있는 경우 적절 하 게 표시 되 고 (풀으로 반환 되 고) 대신 때 삭제 됩니다 <xref:System.Data.SqlClient.SqlConnection.Close%2A>가 호출 됩니다.</xref:System.Data.SqlClient.SqlConnection.Close%2A>"
  syntax:
    content: public static void ClearAllPools ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.ClearAllPools*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  id: ClearPool(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ClearPool(SqlConnection)
  nameWithType: SqlConnection.ClearPool(SqlConnection)
  fullName: System.Data.SqlClient.SqlConnection.ClearPool(SqlConnection)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 연결과 관련 된 연결 풀을 비웁니다."
  remarks: "ClearPool 지웁니다 연관 된 연결 풀에서 `connection`합니다. 추가 연결에 연결 된 경우 `connection` 는 메서드를 호출할 때에서 사용 중인, 표시 되 적절 하 게 고 될 때 (풀으로 반환 되 고) 대신 삭제 <xref:System.Data.SqlClient.SqlConnection.Close%2A>가 호출 됩니다.</xref:System.Data.SqlClient.SqlConnection.Close%2A>"
  syntax:
    content: public static void ClearPool (System.Data.SqlClient.SqlConnection connection);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> 풀에서 지워집니다."
  overload: System.Data.SqlClient.SqlConnection.ClearPool*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId
  id: ClientConnectionId
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ClientConnectionId
  nameWithType: SqlConnection.ClientConnectionId
  fullName: System.Data.SqlClient.SqlConnection.ClientConnectionId
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "시도가 성공 또는 실패 여부에 관계 없이 최근 연결 시도의 연결 ID입니다."
  remarks: "ClientConnectionId는 연결 하는 서버의 버전에 관계 없이 작동 하지만 확장된 이벤트 로그 및 연결 링 버퍼 오류에 대 한 항목이 누락 될에 [!INCLUDE[sskatmai_r2](~/add/includes/ajax-current-ext-md.md)] 및 이전 버전입니다.       연결 ID를 기록 하기 위한 확장된 이벤트가 사용 된 경우 서버에서 실패가 발생 하는 경우를 확인 하려면 확장된 이벤트 로그에서 연결 ID를 찾을 수 있습니다. 연결 링 버퍼에서 연결 ID를 찾을 수도 있습니다 ([연결 링 버퍼를 사용 하 여 SQL Server 2008의 연결 문제 해결](http://go.microsoft.com/fwlink/?LinkId=207752)) 특정 연결 오류입니다. 연결 ID 연결 링 버퍼에 없는 경우에 네트워크 오류를 가정할 수 있습니다."
  syntax:
    content: public Guid ClientConnectionId { get; }
    return:
      type: System.Guid
      description: "가장 최근에 연결의 연결 ID를 시도 합니다."
  overload: System.Data.SqlClient.SqlConnection.ClientConnectionId*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Close
  id: Close
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Close()
  nameWithType: SqlConnection.Close()
  fullName: System.Data.SqlClient.SqlConnection.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "데이터베이스에 연결을 닫습니다. 이것은 열려 있는 연결을 닫는 기본 방법입니다."
  remarks: "Close 메서드가 보류 중인 모든 트랜잭션을 롤백합니다. 그런 다음 연결 풀에 대 한 연결을 해제 하거나 연결 풀링을 사용 하지 않도록 설정 하는 경우 연결을 닫습니다.      > [!NOTE] > 보류 중인 트랜잭션을 사용 하 여 시작 [!INCLUDE[tsql](~/add/includes/tsql-md.md)] 또는 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>연결 풀링을 사용 하는 경우 해당 연결을 다시 때 자동으로 롤백됩니다.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> 연결 풀링이 해제 되어 있으면 트랜잭션이 다시 후 `SqlConnection.Close` 호출 됩니다. 통해 시작 된 트랜잭션은 <xref:System.Transactions>를 통해 제어 되는 `System.Transactions` 인프라 영향을 받지 `SqlConnection.Close`.</xref:System.Transactions>       응용 프로그램 닫기 여러 번 호출할 수 있습니다. 예외가 생성 되지 않습니다.       경우는 <xref:System.Data.SqlClient.SqlConnection>늘어나고의 범위를 닫을 수 없습니다.</xref:System.Data.SqlClient.SqlConnection> 따라서 명시적으로 닫아야 연결 호출 하 여 `Close` 또는 `Dispose`합니다. `Close`및 `Dispose` 기능적으로 동일 합니다. 연결 풀링 값 경우 `Pooling` 로 설정 된 `true` 또는 `yes`, 기본 연결이 연결 풀으로 반환 됩니다. 반면에 경우 `Pooling` 로 설정 된 `false` 또는 `no`, 기본 서버에 대 한 연결이 닫힙니다.      > [!NOTE] > 로그인 및 로그 아웃 이벤트는 발생 하지 서버에 대 한 연결 풀에서 반입 되거나 연결 풀으로 반환 되는 경우 연결이 닫히지 않기 때문에 실제로 연결 풀으로 반환 될 때입니다. 자세한 내용은 참조 [SQL Server 연결 풀링 (ADO.NET)](~/add/includes/ajax-current-ext-md.md)합니다.      > [!CAUTION] > 호출 하지 않으면 `Close` 또는 `Dispose` 연결, DataReader, 또는 다른 관리 개체에는 `Finalize` 클래스의 메서드로 합니다. 종료자에서만 클래스에 직접 속한 관리 되지 않는 리소스를 해제 해야 합니다. 클래스에 관리 되지 않는 리소스가 없는 경우 포함 되지 않습니다는 `Finalize` 클래스 정의에 메서드. 자세한 내용은 참조 [가비지 수집](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, opens it, displays some of its properties. The connection is automatically closed at the end of the `using` block.  \n  \n [!code-vb[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._20_1.vb)]\n [!code-cs[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._20_1.cs)]"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.Close*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "연결을 여는 동안 발생 하는 연결 수준 오류입니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  id: ColumnEncryptionKeyCacheTtl
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ColumnEncryptionKeyCacheTtl
  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "에 설정 하거나 가져오는-time-to-live 열 암호화에 대 한 중요 한 항목에 대 한 열 암호화 키 캐시는 [항상 암호화](https://msdn.microsoft.com/library/mt163865.aspx) 기능입니다. 기본값은 2 시간입니다. 0 캐싱이나 캐싱 전혀 의미 합니다."
  syntax:
    content: public static TimeSpan ColumnEncryptionKeyCacheTtl { get; set; }
    return:
      type: System.TimeSpan
      description: "시간 간격입니다."
  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  id: ColumnEncryptionQueryMetadataCacheEnabled
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ColumnEncryptionQueryMetadataCacheEnabled
  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "쿼리 메타 데이터 캐싱이 설정 되어 있는지 여부를 나타내는 값을 가져오거나 설정 합니다. (true) 또는 (false)에 대해 실행 하는 매개 변수가 있는 쿼리에만 [항상 암호화](https://msdn.microsoft.com/library/mt163865.aspx) 데이터베이스를 사용 하도록 설정 합니다. 기본값은 true입니다."
  remarks: "매개 변수가 있는 쿼리에 대 한 SqlClient 왕복 SQL Server에 매개 변수 메타 데이터에 대 한 참조 되는 매개 변수를 암호화 해야 하 고 어떻게 (어떤 키 및 알고리즘을 사용 가능 해야) 합니다. 동일한 쿼리를 여러 번 호출 하는 응용 프로그램을 하는 경우에 응용 프로그램 성능이 저하 됩니다 때마다도 서버에 대 한 추가 왕복 수행 됩니다.       와 **ColumnEncryptionQueryMetadataCacheEnabled** 동일한 쿼리를 여러 번 호출 되는 경우 true로 설정 하 고, 서버에 왕복 걸 수 한 번만 합니다. 캐시에는 구성할 수 없는 최대 크기 매개 변수를 2000 쿼리로 설정 되어 있습니다."
  syntax:
    content: public static bool ColumnEncryptionQueryMetadataCacheEnabled { get; set; }
    return:
      type: System.Boolean
      description: "쿼리 메타 데이터 캐시를 사용 하면 true를 반환 그렇지 않으면 false입니다. 기본값은 true입니다."
  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  id: ColumnEncryptionTrustedMasterKeyPaths
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ColumnEncryptionTrustedMasterKeyPaths
  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "데이터베이스 서버에 대 한 신뢰할 수 있는 키 경로 목록을 설정할 수 있습니다. 경우 드라이버에서 목록에 없는 키 경로 수신 응용 프로그램 쿼리를 처리 하는 동안 쿼리가 실패 합니다. 이 속성은 손상 된 SQL server가 키 저장소 자격 증명을 유출 하 한 가짜 키 경로 제공 하는 보안 공격에 대해 추가적인 보호를 제공 합니다."
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,System.Collections.Generic.IList<string>> ColumnEncryptionTrustedMasterKeyPaths { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}}
      description: "열 암호화에 대 한 신뢰할 수 있는 마스터 키 경로의 목록입니다."
  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: SqlConnection.ConnectionString
  fullName: System.Data.SqlClient.SqlConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "여는 데 사용 하는 문자열을 가져오거나 설정 합니다. 한 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 데이터베이스입니다."
  remarks: "연결 문자열에는 OLE DB 연결 문자열을 유사 하지만 일치 하지 않습니다. OLE DB 또는 ADO와 달리 반환 되는 연결 문자열와 같습니다 보안 정보-사용자가 설정한 연결 문자열 보안 정보 유지 값은 설정 되 면 `false` (기본값). [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 유지 하지 않거나 보안 정보 유지를 설정 하지 않으면 연결 문자열에 암호를 반환 `true`합니다.       ConnectionString 속성 데이터베이스에 연결 하는 데 사용할 수 있습니다. 다음 예제에서는 일반적인 연결 문자열을 보여 줍니다.      ```   &quot;Persist Security Info=False;Integrated Security=true;Initial Catalog=Northwind;server=(local)&quot;   ```새로운 <xref:System.Data.SqlClient.SqlConnectionStringBuilder>를 런타임에 유효한 연결 문자열을 생성 합니다.</xref:System.Data.SqlClient.SqlConnectionStringBuilder> 자세한 내용은 참조 [연결 문자열 작성기](~/add/includes/ajax-current-ext-md.md)합니다.       연결이 닫힌 경우에 ConnectionString 속성을 설정할 수 있습니다. 연결 문자열 값의 대부분에 해당 읽기 전용 속성입니다. 연결 문자열 설정 되 면 오류가 검색 될 경우를 제외 하 고 이러한 속성 업데이트 됩니다. 이 경우 어떤 속성도 업데이트 됩니다. <xref:System.Data.SqlClient.SqlConnection>속성의 연결 문자열에 포함 된 설정은를 반환 합니다.</xref:System.Data.SqlClient.SqlConnection>       를 로컬 컴퓨터에 연결 하려면 서버에 대 한 &quot;(local)&quot;을 지정 합니다. 서버 이름을 지정 하지 않으면 로컬 컴퓨터의 기본 인스턴스에 대 한 연결을 시도 합니다.       닫힌된 연결에서의 연결 문자열 다시 설정 하는 암호를 비롯 한 되는 모든 연결 문자열 값 (및 관련된 속성)을 다시 설정 합니다. 예를 들어, 포함 된 연결 문자열을 설정 하는 경우 &quot;데이터베이스 = AdventureWorks&quot;, 다음 연결 문자열을 다시 설정 하 고 &quot;데이터 원본 = myserver; 통합된 보안 = true&quot;, <xref:System.Data.SqlClient.SqlConnection.Database%2A>속성을 더 이상 &quot;AdventureWorks&quot;로 설정 됩니다.</xref:System.Data.SqlClient.SqlConnection.Database%2A>       설정 된 후 바로 연결 문자열 구문 분석 됩니다. 구문 분석할 때, 런타임 예외와 같은 구문에서 오류가 발견 되 면 <xref:System.ArgumentException>, 생성 됩니다.</xref:System.ArgumentException> 연결 설정 하려고 시도 하는 경우에 다른 오류를 찾을 수 있습니다.       연결 문자열의 기본 형식은 일련의 세미콜론으로 구분 하는 키워드/값 쌍을 포함 합니다. 등호 (=)는 각 키워드와 해당 값을 연결 합니다. 세미콜론, 작은따옴표 문자 또는 큰따옴표를 포함 하는 값에 포함 하려면 값을 큰따옴표로 묶어야 합니다. 세미콜론과 큰따옴표 문자를 모두 포함 된 값을 작은따옴표로 값을 묶을 수 있습니다. 작은따옴표 값 큰따옴표 문자로 시작 하는 경우 도움이 됩니다. 반대로 값 시작 작은따옴표와 큰따옴표를 사용할 수 있습니다. 작은따옴표 및 큰따옴표 문자를 모두 포함 된 값, 값을 포함 하는 데 사용 하는 인용 부호 문자 값 내에서 발생할 때마다 배가 되어야 합니다.       문자열 값에 선행 또는 후행 공백을 포함 하려면 값 작은따옴표 또는 큰따옴표로 묶어야 합니다. 따옴표에 포함 하는 경우에 정수, 부울 또는 열거 값 주위 선행 또는 후행 공백은 모두 무시 됩니다. 그러나 문자열 리터럴 키워드 또는 값 내에 공백이 유지 됩니다. 구분 기호를 사용 하지 않고 연결 문자열에서 작은따옴표 또는 큰따옴표를 사용할 수 있습니다 (예를 들어 데이터 원본 = my&quot;Server 또는 데이터 원본 내 &quot;Server =), 인용 부호 문자 값의 첫 번째 또는 마지막 문자는 하지 않는 한 합니다.       키워드는 대/소문자 구분 하지 않습니다.       다음 표에서 키워드 값의 연결 문자열 내에서 유효한 이름을 나열합니다.        다음 목록에는 연결 풀링의 연결 문자열 내의 값에 대 한 유효한 이름이 포함 됩니다. 자세한 내용은 참조 [SQL Server 연결 풀링 (ADO.NET)](~/add/includes/ajax-current-ext-md.md)합니다.      -연결 수명 (또는 Load Balance Timeout)-설정 키워드 또는 연결 풀링 값을 부울 값을 입력 해야 하는 경우 풀링 및 사용할 수 있습니다 &quot;예&quot; 대신 &quot;true&quot;, &quot;false&quot; 대신 &quot;아니요&quot;--최대 풀 크기-최소 풀 크기를 등록 합니다. 정수 값은 문자열로 표시 됩니다.      > [!NOTE] >는 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 와 통신 하는 자체 프로토콜을 사용 하 여 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]합니다. 따라서, 것 지원 하지 않습니다는 ODBC 데이터 원본 이름 (DSN)의 사용 하 여 연결할 때를 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] ODBC 계층을 추가 하지 않기 때문에 있습니다.      > [!NOTE] > 유니버설 데이터 링크 (UDL) 파일에 대 한 지원 되지 않습니다는 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]합니다.      > [!CAUTION] >이 릴리스에서 응용 프로그램이 때는 주의 해야 사용자 입력 (예: 연결 문자열에 추가 하는 대화 상자에서 사용자 ID와 암호 정보를 검색할 때)에 따라 연결 문자열을 구성 합니다. 응용 프로그램 해야 사용자가 이러한 값에 추가 연결 문자열 매개 변수를 포함할 수 없습니다 (예를 들어로 암호를 입력 &quot;에서는 데이터베이스 수 없도록&quot; 다른 데이터베이스에 연결 하기 위해). 사용자 입력에 따라 연결 문자열을 생성 해야 할 경우 사용 하 여 새 <xref:System.Data.SqlClient.SqlConnectionStringBuilder>, 연결 문자열의 유효성을 검사 하 고이 문제를 방지 하는 데 도움이 됩니다.</xref:System.Data.SqlClient.SqlConnectionStringBuilder> 참조 [연결 문자열 작성기](../Topic/Connection%20String%20Builders.md) 자세한 정보에 대 한 합니다."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and sets the ConnectionString property before opening the connection.  \n  \n [!code-vb[Classic WebData SqlConnection.ConnectionString Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._24_1.vb)]\n [!code-cs[Classic WebData SqlConnection.ConnectionString Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._24_1.cs)]"
  syntax:
    content: public override string ConnectionString { get; set; }
    return:
      type: System.String
      description: "원본 데이터베이스 이름 및 초기 연결을 설정 하는 데 필요한 기타 매개 변수를 포함 하는 연결 문자열입니다. 기본값은 빈 문자열입니다."
  overload: System.Data.SqlClient.SqlConnection.ConnectionString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "된 잘못 된 연결 문자열 인수가 제공 된 했거나 필요한 연결 문자열 인수를 제공 하지 않았습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: SqlConnection.ConnectionTimeout
  fullName: System.Data.SqlClient.SqlConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "시도 종료 하 고 오류를 생성 하기 전에 연결을 설정 하는 동안 대기할 시간을을 가져옵니다."
  remarks: "사용 하 여 시간 제한 초과 연결 대기 시간을 설정할 수 있습니다는 `Connect``Timeout` 또는 `Connection Timeout` 연결 문자열에서 키워드입니다. 값 0은 제한 없음을 나타냄에 피해 야 합니다.는 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>무기한 없음을 의미 하기 때문에.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and sets the `Connection Timeout` to 30 seconds in the connection string. The code opens the connection and displays the ConnectionTimeout property in the console window.  \n  \n [!code-vb[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._28_1.vb)]\n [!code-cs[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._28_1.cs)]"
  syntax:
    content: public override int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "시간 (초) 연결이 열리기 전까지 기다려야 합니다. 기본값은 15 초입니다."
  overload: System.Data.SqlClient.SqlConnection.ConnectionTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "설정 값이 0 보다 작은 경우"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: SqlConnection.CreateCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "만들고 반환는 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 연관 된 개체는 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>합니다."
  remarks: ''
  example:
  - >-
    [!code-vb[SqlConnection_CreateCommand#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._32_1.vb)]
     [!code-cs[SqlConnection_CreateCommand#1](~/add/codesnippet/csharp/m-system.data.sqlclient._32_1.cs)]
  syntax:
    content: public System.Data.SqlClient.SqlCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref> object."
  overload: System.Data.SqlClient.SqlConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: SqlConnection.CreateDbCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Credential
  id: Credential
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Credential
  nameWithType: SqlConnection.Credential
  fullName: System.Data.SqlClient.SqlConnection.Credential
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "가져오거나는 <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> 이 연결에 대 한 개체입니다."
  remarks: "`Persist Security Info = true`값을 가져올 하는 데 필요한는 <xref:System.Data.SqlClient.SqlCredential>자격 증명을 가진 개체입니다.</xref:System.Data.SqlClient.SqlCredential>       자격 증명의 기본값은 null입니다.       <xref:System.InvalidOperationException>예외가 발생 합니다: 자격 증명에 대해 열린 연결에 설정 된 경우-.</xref:System.InvalidOperationException>      -자격 증명은 때 설정 하는 경우 `Context Connection=true`합니다.      -자격 증명은 때 설정 하는 경우 `Integrated Security = true`합니다.      -자격 증명은 연결 문자열을 사용 하는 경우 설정 하는 경우 `Password`합니다.      -자격 증명은 연결 문자열을 사용 하는 경우 설정 하는 경우 `UserID`합니다."
  syntax:
    content: public System.Data.SqlClient.SqlCredential Credential { get; set; }
    return:
      type: System.Data.SqlClient.SqlCredential
      description: "<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> 이 연결에 대 한 개체입니다."
  overload: System.Data.SqlClient.SqlConnection.Credential*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Database
  id: Database
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Database
  nameWithType: SqlConnection.Database
  fullName: System.Data.SqlClient.SqlConnection.Database
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "현재 데이터베이스 이름이 나 연결이 열린 후 사용할 데이터베이스의 이름을 가져옵니다."
  remarks: "데이터베이스 속성을 동적으로 업데이트합니다. 사용 하 여 현재 데이터베이스를 변경 하는 경우는 [!INCLUDE[tsql](~/add/includes/tsql-md.md)] 문 또는 <xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>정보 메시지가 전송 되는 메서드와 속성을 자동으로 업데이트 됩니다.</xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._26_1.cs)]\n [!code-vb[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._26_1.vb)]"
  syntax:
    content: public override string Database { get; }
    return:
      type: System.String
      description: "현재 데이터베이스 이름이 나 연결이 열린 후 사용할 데이터베이스의 이름을의 이름입니다. 기본값은 빈 문자열입니다."
  overload: System.Data.SqlClient.SqlConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.DataSource
  id: DataSource
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: SqlConnection.DataSource
  fullName: System.Data.SqlClient.SqlConnection.DataSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "인스턴스의 이름을 가져옵니다 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 연결 하는 데에 있습니다."
  remarks: >-
    > [!NOTE]

    >  The DataSource property returns `null` if the connection string for the <xref:System.Data.SqlClient.SqlConnection> is "context connection=true".
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \n  \n [!code-vb[Classic WebData SqlConnection.DataSource Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._62_1.vb)]\n [!code-cs[Classic WebData SqlConnection.DataSource Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._62_1.cs)]"
  syntax:
    content: public override string DataSource { get; }
    return:
      type: System.String
      description: "인스턴스 이름을 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 연결 하는 데에 있습니다. 기본값은 빈 문자열입니다."
  overload: System.Data.SqlClient.SqlConnection.DataSource*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory
  id: DbProviderFactory
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: DbProviderFactory
  nameWithType: SqlConnection.DbProviderFactory
  fullName: System.Data.SqlClient.SqlConnection.DbProviderFactory
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }
    return:
      type: System.Data.Common.DbProviderFactory
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlConnection.DbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SqlConnection.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlConnection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlConnection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  id: EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: SqlConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(ITransaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정된 된 트랜잭션에 분산 트랜잭션으로 참여합니다."
  remarks: "사용할 수는 <xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A>메서드를 분산된 트랜잭션에 참여 합니다.</xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A> 연결을 참여 하기 때문에 <xref:System.Transactions.Transaction>인스턴스에 **EnlistTransaction** 에서 사용할 수 있는 기능을 활용는 <xref:System.Transactions>분산 트랜잭션에서, 보다 더 자주 사용 하는 네임 스페이스를 관리 하기 위한 **참여가** 이 목적을 위해.</xref:System.Transactions> </xref:System.Transactions.Transaction> 자세한 내용은 참조 [분산 트랜잭션](~/add/includes/ajax-current-ext-md.md)합니다.       계속 사용 하 여 기존 분산된 트랜잭션에 참여할 수 있습니다는 **참여가** 메서드 자동 인 리스트 먼 트를 사용 하지 않도록 설정 합니다. 기존 분산된 트랜잭션에 인 리스트 먼 트 하면 즉, 트랜잭션이 커밋되거나 롤백될 경우 데이터 소스에서 코드에 의해 수정 된도 트랜잭션이 커밋 또는 롤백됨.       `EnlistDistributedTransaction`경우에 예외를 반환 <xref:System.Data.SqlClient.SqlConnection> <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> 를 사용 하는 트랜잭션이 이미 시작</xref:System.Data.SqlClient.SqlConnection> 그러나 트랜잭션이 데이터 소스에서 시작 된 로컬 트랜잭션 인지 (명시적으로 사용 하 여 BEGIN TRANSACTION 문을 실행 하는 예를 들어 여는 <xref:System.Data.SqlClient.SqlCommand>개체), **참여가** 로컬 트랜잭션을 롤백하고 요청에 따라 기존 분산된 트랜잭션에 인 리스트 먼 트 합니다.</xref:System.Data.SqlClient.SqlCommand> 로컬 트랜잭션이 롤백 되었습니다 및 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> 를 사용 하 여 시작 되지 않는 모든 로컬 트랜잭션을 관리 해야 통지를 받지 않습니다."
  syntax:
    content: public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);
    parameters:
    - id: transaction
      type: System.EnterpriseServices.ITransaction
      description: "기존에 대 한 참조 <xref href=&quot;System.EnterpriseServices.ITransaction&quot;> </xref> 를 등록 합니다."
  overload: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: SqlConnection.EnlistTransaction(Transaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정된 된 트랜잭션에 분산 트랜잭션으로 참여합니다."
  remarks: '분산 트랜잭션에 참여 EnlistTransaction 메서드를 사용할 수 있습니다. 연결을 참여 하기 때문에 <xref:System.Transactions.Transaction>인스턴스에 **EnlistTransaction** 에서 사용할 수 있는 기능을 활용는 <xref:System.Transactions>분산 트랜잭션에서, 보다 더 자주 사용 하는 네임 스페이스를 관리 하기 위한 **참여가**, 사용 하는 **System.EnterpriseServices.ITransaction** 개체.</xref:System.Transactions> </xref:System.Transactions.Transaction> 역시 약간 다른 의미 체계: 트랜잭션에 연결을 명시적으로 등록 된, 등록 취소 하거나 수 첫 번째 트랜잭션이 완료 될 때까지 다른 트랜잭션에 참여 합니다. 분산된 트랜잭션에 대 한 자세한 내용은 참조 [분산 트랜잭션을](~/add/includes/ajax-current-ext-md.md)합니다.'
  syntax:
    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "기존에 대 한 참조 <xref href=&quot;System.Transactions.Transaction&quot;> </xref> 를 등록 합니다."
  overload: System.Data.SqlClient.SqlConnection.EnlistTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  id: FireInfoMessageEventOnUserErrors
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: FireInfoMessageEventOnUserErrors
  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors
  fullName: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "FireInfoMessageEventOnUserErrors 속성을 가져오거나 설정 합니다."
  remarks: "FireInfoMessageEventOnUserErrors로 설정할 경우 `true`, 예외는 이제로 처리 되므로 이전에 처리 되어 오류 <xref:System.Data.SqlClient.SqlConnection.InfoMessage>이벤트.</xref:System.Data.SqlClient.SqlConnection.InfoMessage> 모든 이벤트는 즉시 발생 하 고 이벤트 처리기에 의해 처리 됩니다. 경우는 FireInfoMessageEventOnUserErrors로 설정 되어 `false`, 다음 <xref:System.Data.SqlClient.SqlConnection.InfoMessage>프로시저가 끝날 때 이벤트가 처리 됩니다.</xref:System.Data.SqlClient.SqlConnection.InfoMessage>      > [!NOTE] > 심각도 17 개 이상 서버 명령 처리를 중지 하도록 하는 오류를 예외로 처리 해야 합니다. 이 경우 예외가 발생에 오류를 처리 하는 방법에 관계 없이 <xref:System.Data.SqlClient.SqlConnection.InfoMessage>이벤트.</xref:System.Data.SqlClient.SqlConnection.InfoMessage>       작업 이벤트에 대 한 자세한 내용은 참조 하십시오. [연결 이벤트](~/add/includes/ajax-current-ext-md.md)합니다. 생성 된 오류에 대 한 자세한 내용은 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 엔진, 참조 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 온라인 설명서."
  syntax:
    content: public bool FireInfoMessageEventOnUserErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>FireInfoMessageEventOnUserErrors 속성이 설정 되었습니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.GetSchema
  id: GetSchema
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: GetSchema()
  nameWithType: SqlConnection.GetSchema()
  fullName: System.Data.SqlClient.SqlConnection.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "이 데이터 원본에 대 한 스키마 정보를 반환 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>합니다. 구성표에 대 한 자세한 내용은 참조 [SQL Server 스키마 컬렉션](http://msdn.microsoft.com/library/ms254969.aspx)합니다."
  syntax:
    content: public override System.Data.DataTable GetSchema ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 들어 있는입니다."
  overload: System.Data.SqlClient.SqlConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String)
  id: GetSchema(System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: GetSchema(String)
  nameWithType: SqlConnection.GetSchema(String)
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "이 데이터 원본에 대 한 스키마 정보를 반환 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> 스키마 이름에 지정된 된 문자열을 사용 하 여 합니다."
  remarks: "데이터베이스, 테이블 또는 열의 스키마 정보가 필요할 수 있습니다. 이 샘플:-스키마 정보를 얻으려면 GetSchema를 사용 합니다.      -지정 된 정보를 가져오려면 스키마 제한을 사용 합니다.      -데이터베이스, 테이블 및 일부 열에 스키마 정보를 가져옵니다.       샘플을 실행 하기 전에 필요한 샘플 데이터베이스를 만들려면 다음을 사용 하 여 [!INCLUDE[tsql](~/add/includes/tsql-md.md)]: ```   USE [master]   GO      CREATE DATABASE [MySchool]       GO      USE [MySchool]   GO      SET ANSI_NULLS ON   GO   SET QUOTED_IDENTIFIER ON   GO   CREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,   [Year] [smallint] NOT NULL,   [Title] [nvarchar](100) NOT NULL,   [Credits] [int] NOT NULL,   [DepartmentID] [int] NOT NULL,    CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED    (   [CourseID] ASC,   [Year] ASC   )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]      GO      SET ANSI_NULLS ON   GO   SET QUOTED_IDENTIFIER ON   GO   CREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,   [Name] [nvarchar](50) NOT NULL,   [Budget] [money] NOT NULL,   [StartDate] [datetime] NOT NULL,   [Administrator] [int] NULL,    CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED    (   [DepartmentID] ASC   )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]      GO      INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C1045&quot;, 2012, N&quot;Calculus&quot;, 4, 7)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C1061&quot;, 2012, N&quot;Physics&quot;, 4, 1)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C2021&quot;, 2012, N&quot;Composition&quot;, 3, 2)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C2042&quot;, 2012, N&quot;Literature&quot;, 4, 2)      SET IDENTITY_INSERT [dbo].[Department] ON       INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N&quot;Engineering&quot;, 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N&quot;English&quot;, 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N&quot;Economics&quot;, 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N&quot;Mathematics&quot;, 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)   SET IDENTITY_INSERT [dbo].[Department] OFF      ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])   REFERENCES [dbo].[Department] ([DepartmentID])   GO   ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]   GO   ``` [데이터베이스에서 스키마 정보 가져오기 방법](http://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2) Visual Studio 프로젝트에서에이 코드 샘플의 C# 및 Visual Basic 버전입니다.             ```   using System;   using System.Data;   using System.Data.SqlClient;      class Program {      static void Main(string[] args) {            using (SqlConnection conn = new SqlConnection(&quot;Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;&quot;)) {            conn.Open();               // Get the Meta Data for Supported Schema Collections            DataTable metaDataTable = conn.GetSchema(&quot;MetaDataCollections&quot;);               Console.WriteLine(&quot;Meta Data for Supported Schema Collections:&quot;);            ShowDataTable(metaDataTable, 25);            Console.WriteLine();               // Get the schema information of Databases in your instance            DataTable databasesSchemaTable = conn.GetSchema(&quot;Databases&quot;);               Console.WriteLine(&quot;Schema Information of Databases:&quot;);            ShowDataTable(databasesSchemaTable, 25);            Console.WriteLine();               // First, get schema information of all the tables in current database;            DataTable allTablesSchemaTable = conn.GetSchema(&quot;Tables&quot;);               Console.WriteLine(&quot;Schema Information of All Tables:&quot;);            ShowDataTable(allTablesSchemaTable, 20);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Table Type to get             // the specified table(s).            // You can use four restrictions for Table, so you should create a 4 members array.            String[] tableRestrictions = new String[4];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Table Type.             // Now we specify the Table Name of the table what we want to get schema information.            tableRestrictions[2] = &quot;Course&quot;;               DataTable courseTableSchemaTable = conn.GetSchema(&quot;Tables&quot;, tableRestrictions);               Console.WriteLine(&quot;Schema Information of Course Tables:&quot;);            ShowDataTable(courseTableSchemaTable, 20);            Console.WriteLine();               // First, get schema information of all the columns in current database.            DataTable allColumnsSchemaTable = conn.GetSchema(&quot;Columns&quot;);               Console.WriteLine(&quot;Schema Information of All Columns:&quot;);            ShowColumns(allColumnsSchemaTable);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Column Name to get the specified column(s).            // You can use four restrictions for Column, so you should create a 4 members array.            String[] columnRestrictions = new String[4];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Column Name.             // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.            columnRestrictions[2] = &quot;Course&quot;;            columnRestrictions[3] = &quot;DepartmentID&quot;;               DataTable departmentIDSchemaTable = conn.GetSchema(&quot;Columns&quot;, columnRestrictions);               Console.WriteLine(&quot;Schema Information of DepartmentID Column in Course Table:&quot;);            ShowColumns(departmentIDSchemaTable);            Console.WriteLine();               // First, get schema information of all the IndexColumns in current database            DataTable allIndexColumnsSchemaTable = conn.GetSchema(&quot;IndexColumns&quot;);               Console.WriteLine(&quot;Schema Information of All IndexColumns:&quot;);            ShowIndexColumns(allIndexColumnsSchemaTable);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Constraint Name, Column Name to             // get the specified column(s).            // You can use five restrictions for Column, so you should create a 5 members array.            String[] indexColumnsRestrictions = new String[5];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Constraint Name;4-member represents Column Name.             // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.            indexColumnsRestrictions[2] = &quot;Course&quot;;            indexColumnsRestrictions[4] = &quot;CourseID&quot;;               DataTable courseIdIndexSchemaTable = conn.GetSchema(&quot;IndexColumns&quot;, indexColumnsRestrictions);               Console.WriteLine(&quot;Index Schema Information of CourseID Column in Course Table:&quot;);            ShowIndexColumns(courseIdIndexSchemaTable);            Console.WriteLine();         }            Console.WriteLine(&quot;Please press any key to exit...&quot;);         Console.ReadKey();      }         private static void ShowDataTable(DataTable table, Int32 length) {         foreach (DataColumn col in table.Columns) {            Console.Write(&quot;{0,-&quot; + length + &quot;}&quot;, col.ColumnName);         }         Console.WriteLine();            foreach (DataRow row in table.Rows) {            foreach (DataColumn col in table.Columns) {               if (col.DataType.Equals(typeof(DateTime)))                  Console.Write(&quot;{0,-&quot; + length + &quot;:d}&quot;, row[col]);               else if (col.DataType.Equals(typeof(Decimal)))                  Console.Write(&quot;{0,-&quot; + length + &quot;:C}&quot;, row[col]);               else                  Console.Write(&quot;{0,-&quot; + length + &quot;}&quot;, row[col]);            }            Console.WriteLine();         }      }         private static void ShowDataTable(DataTable table) {         ShowDataTable(table, 14);      }         private static void ShowColumns(DataTable columnsTable) {         var selectedRows = from info in columnsTable.AsEnumerable()                            select new {                               TableCatalog = info[&quot;TABLE_CATALOG&quot;],                               TableSchema = info[&quot;TABLE_SCHEMA&quot;],                               TableName = info[&quot;TABLE_NAME&quot;],                               ColumnName = info[&quot;COLUMN_NAME&quot;],                               DataType = info[&quot;DATA_TYPE&quot;]                            };            Console.WriteLine(&quot;{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}&quot;, &quot;TableCatalog&quot;, &quot;TABLE_SCHEMA&quot;,             &quot;TABLE_NAME&quot;, &quot;COLUMN_NAME&quot;, &quot;DATA_TYPE&quot;);         foreach (var row in selectedRows) {            Console.WriteLine(&quot;{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}&quot;, row.TableCatalog,                row.TableSchema, row.TableName, row.ColumnName, row.DataType);         }      }         private static void ShowIndexColumns(DataTable indexColumnsTable) {         var selectedRows = from info in indexColumnsTable.AsEnumerable()                            select new {                               TableSchema = info[&quot;table_schema&quot;],                               TableName = info[&quot;table_name&quot;],                               ColumnName = info[&quot;column_name&quot;],                               ConstraintSchema = info[&quot;constraint_schema&quot;],                               ConstraintName = info[&quot;constraint_name&quot;],                               KeyType = info[&quot;KeyType&quot;]                            };            Console.WriteLine(&quot;{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}&quot;, &quot;table_schema&quot;, &quot;table_name&quot;, &quot;column_name&quot;, &quot;constraint_schema&quot;, &quot;constraint_name&quot;, &quot;KeyType&quot;);         foreach (var row in selectedRows) {            Console.WriteLine(&quot;{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}&quot;, row.TableSchema,                row.TableName, row.ColumnName, row.ConstraintSchema, row.ConstraintName, row.KeyType);         }      }   }   ```"
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName);
    parameters:
    - id: collectionName
      type: System.String
      description: "반환할 스키마의 이름을 지정 합니다."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 들어 있는입니다."
  overload: System.Data.SqlClient.SqlConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>null로 지정 됩니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])
  id: GetSchema(System.String,System.String[])
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: GetSchema(String,String[])
  nameWithType: SqlConnection.GetSchema(String,String[])
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "이 데이터 원본에 대 한 스키마 정보를 반환 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> 스키마 이름 및 제한 값에 대 한 지정 된 문자열 배열에 대 한 지정된 된 문자열을 사용 하 여 합니다."
  remarks: "`restrictionValues` 매개 변수를 제공할 수 *n* 수준의 특정 컬렉션에 대 한 제한 컬렉션에서 지정 된 값입니다. 특정된 제한에 값을 설정 하 고 다른 제한 값을 설정 하지 않으려면, 앞의 제한의을 설정 해야 `null` 다음 값을 지정 하려면 원하는 제한에 적절 한 값을 입력 하 고 있습니다.       이 예는 &quot;Table&quot; 컬렉션입니다. 다음과 같은 값을 전달 해야 하는 &quot;Table&quot; 컬렉션에 세 가지 제한-데이터베이스, 소유자, 테이블 이름-얻을 소유자 &quot;칼&quot;와 연결 된 테이블에만 하도록 설정 하려는 경우: null, &quot;칼&quot;입니다. 에 제한 값이 전달 되지 않으면, 기본 값은 해당 제한에 사용 됩니다. 이것은 전달 하는 대로 동일한 매핑을 `null`, 매개 변수 값에 대 한 빈 문자열을 전달과에서는 다릅니다. 그러면 빈 문자열 (&quot;&quot;)의 지정된 된 매개 변수 값으로 간주 됩니다.       GetSchema를 보여 주는 코드 샘플을 <xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>.</xref:System.Data.SqlClient.SqlConnection.GetSchema%2A> 을 참조 하십시오."
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);
    parameters:
    - id: collectionName
      type: System.String
      description: "반환할 스키마의 이름을 지정 합니다."
    - id: restrictionValues
      type: System.String[]
      description: "요청된 된 스키마에 대 한 제한 값의 집합입니다."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 들어 있는입니다."
  overload: System.Data.SqlClient.SqlConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>null로 지정 됩니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.InfoMessage
  id: InfoMessage
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: InfoMessage
  nameWithType: SqlConnection.InfoMessage
  fullName: System.Data.SqlClient.SqlConnection.InfoMessage
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "발생 경우 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 경고 또는 정보 메시지를 반환 합니다."
  remarks: "서버에서 보낸 정보 메시지를 처리 하는 클라이언트를 만들어야는 <xref:System.Data.SqlClient.SqlInfoMessageEventHandler>이 이벤트를 수신 하는 대리자입니다.</xref:System.Data.SqlClient.SqlInfoMessageEventHandler>       반환 되는 또는 InfoMessage 이벤트 심각도 10 인 메시지를 받으면 발생 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]합니다. 심각도 11에서 20 사이의 메시지는 오류 메시지와 심각도 20을 초과 연결을 닫습니다를 발생 시킵니다. 대 한 자세한 내용은 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 의 &quot;데이터베이스 엔진 오류 심각도&quot;를 참조 하는 오류 수준 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 온라인 설명서.       자세한 내용 및 예제에 대 한 참조 [연결 이벤트](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public event System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage;
    return:
      type: System.Data.SqlClient.SqlInfoMessageEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Open
  id: Open
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Open()
  nameWithType: SqlConnection.Open()
  fullName: System.Data.SqlClient.SqlConnection.Open()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "에 <xref:System.Data.SqlClient.SqlConnection.ConnectionString*>.</xref:System.Data.SqlClient.SqlConnection.ConnectionString*> 지정 하는 속성이 설정 된 데이터베이스 연결을 엽니다."
  remarks: "<xref:System.Data.SqlClient.SqlConnection>사용 가능한 경우 연결 풀에서 열려 있는 연결을 그립니다.</xref:System.Data.SqlClient.SqlConnection> 이렇게 하지 않으면 인스턴스에 새 연결을 설정할 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]합니다.      > [!NOTE] > 경우는 <xref:System.Data.SqlClient.SqlConnection>늘어나고의 범위를 닫혀 있지 않습니다.</xref:System.Data.SqlClient.SqlConnection> 따라서 명시적으로 닫아야 연결 <xref:System.Data.SqlClient.SqlConnection.Close%2A>.</xref:System.Data.SqlClient.SqlConnection.Close%2A> 를 호출 하 여      > [!NOTE] >의 인스턴스에 연결 하려는 경우 1433 이외의 포트 번호를 지정 하는 경우 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] TCP/IP가 아닌 프로토콜을 사용 하 여, Open 메서드가 실패 합니다. 1433 이외의 포트 번호를 지정 하려면 포함 &quot;서버 포트 번호 machinename =&quot; 연결 문자열을 사용 하 여 TCP/IP 프로토콜에 있습니다.      > [!NOTE] >는 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 수 있는 관리 되지 않는 어셈블리에 &quot;활성화 보안 권한이 필요 (<xref:System.Security.Permissions.SecurityPermission> 와 <xref:System.Security.Permissions.SecurityPermissionFlag>로 설정 `UnmanagedCode`) 열려는 <xref:System.Data.SqlClient.SqlConnection>SQL 디버깅을 사용할.</xref:System.Data.SqlClient.SqlConnection> </xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, opens it, and displays some of its properties. The connection is automatically closed at the end of the `using` block.  \n  \n [!code-vb[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._18_1.vb)]\n [!code-cs[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._18_1.cs)]"
  syntax:
    content: public override void Open ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.Open*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "데이터 원본이 나 서버를 지정 하지 않고 연결을 열 수 없습니다.       또는 연결이 이미 열려 있습니다."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "연결을 여는 동안 연결 수준 오류가 발생 했습니다. 경우는 <> </> *> 속성에 값 18487 또는 18488, 지정 된 암호가 만료 되었거나 다시 설정 해야이 나타냅니다. 참조는 <> </> *> 자세한 내용은 합니다.       <xref uid=&quot;langword_csharp_&lt;system.data.localdb&gt;&quot; name=&quot;&lt;system.data.localdb&gt;&quot; href=&quot;&quot;> </xref> app.config 파일에는 태그에 잘못 되었거나 알 수 없는 요소입니다."
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "에 같은 이름의 항목이 두는 <xref uid=&quot;langword_csharp_&lt;localdbinstances&gt;&quot; name=&quot;&lt;localdbinstances&gt;&quot; href=&quot;&quot;> </xref> 섹션."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  id: OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: OpenAsync(CancellationToken)
  nameWithType: SqlConnection.OpenAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlConnection.OpenAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "비동기 버전 <> </> *>, 데이터베이스 연결으로 지정 된 속성 설정을 사용 하 여 열리는 <> </> *> 합니다. 취소 토큰 연결 제한 시간이 경과 하기 전에 작업을 중단 되어야 하는 요청에 사용할 수 있습니다.  예외는 반환된 된 작업을 통해 전파 됩니다. 연결 제한 시간이 초과 된 경우 연결 하지 못하고, 예외와 함께 오류가 발생 한 것 반환 된 작업이 표시 됩니다. 구현은 풀링된 연결 및 풀링되지 않은 연결 모두에 대 한 호출 스레드를 차단 하지 않고 작업을 반환 합니다."
  remarks: "OpenAsync를 호출한 후 <xref:System.Data.SqlClient.SqlConnection.State%2A>반환 해야 <xref:System.Data.ConnectionState>반환 될 때까지 <xref:System.Threading.Tasks.Task>완료 된.</xref:System.Threading.Tasks.Task> </xref:System.Data.ConnectionState> </xref:System.Data.SqlClient.SqlConnection.State%2A> 그런 다음 연결이 성공적 이면 <xref:System.Data.SqlClient.SqlConnection.State%2A> <xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> 반환 해야 합니다</xref:System.Data.SqlClient.SqlConnection.State%2A> 연결이 실패 하면 <xref:System.Data.SqlClient.SqlConnection.State%2A> <xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> 반환 해야 합니다</xref:System.Data.SqlClient.SqlConnection.State%2A>       에 대 한 호출 <xref:System.Data.SqlClient.SqlConnection.Close%2A>취소 또는 닫기 OpenAsync 호출 하려고 합니다.</xref:System.Data.SqlClient.SqlConnection.Close%2A>       비동기 프로그래밍에 대 한 자세한 내용은 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], 참조 [비동기 프로그래밍](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public override System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "취소 명령입니다."
    return:
      type: System.Threading.Tasks.Task
      description: "비동기 작업을 나타내는 작업입니다."
  overload: System.Data.SqlClient.SqlConnection.OpenAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "작업 완료 전에 동일한 인스턴스에 대해 OpenAsync를 두 번 이상 호출 합니다.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>연결 문자열에 지정 됩니다.       연결을 사용할 수 없었습니다 연결 풀에서 연결 제한 시간 경과 하기 전에."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "반환 된 모든 오류 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 연결을 여는 동안 발생 합니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.PacketSize
  id: PacketSize
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: PacketSize
  nameWithType: SqlConnection.PacketSize
  fullName: System.Data.SqlClient.SqlConnection.PacketSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "크기 (바이트)의 인스턴스와 통신 하는 데 사용 되는 네트워크 패킷의 가져옵니다 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]합니다."
  remarks: "응용 프로그램에서는 대량 복사 작업을 수행 하거나 많은 양의 텍스트 또는 이미지 데이터를 받는, 하는 경우 보다 더 적은 네트워크 발생 하기 때문에 기본 효율성을 향상 시킬 수 있습니다 더 큰 패킷 크기를 읽기 / 쓰기 작업입니다. 응용 프로그램이 보내는 적은 양의 정보를 받는 경우를 512 바이트로 패킷 크기를 설정할 수 있습니다 (의 패킷 크기 값을 사용 하는 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>), 대부분의 데이터 전송 작업에 충분 한.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> 대부분의 응용 프로그램에 대 한 기본 패킷 크기가 좋습니다.       PacketSize 512에서 32767 바이트 범위의 값이 될 수 있습니다. 값이이 범위를 벗어나는 경우 예외가 생성 됩니다.       8000 패킷을 인스턴스의 다중 페이지 할당자를 사용 하는 보다 큰 수로 기본값 설정 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 훨씬 더 효율적인 SinglePage 할당자 대신 감소의 전반적인 확장성은 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]합니다. 방법에 대 한 자세한 내용은 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 메모리를 사용 하 여 참조 [메모리 아키텍처](http://go.microsoft.com/fwlink/?LinkId=143705) 에 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 온라인 설명서."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, including setting the `Packet Size` to 512 in the connection string. It displays the PacketSize and <xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> properties in the console window.  \n  \n [!code-vb[Classic WebData SqlConnection.PacketSize Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._63_1.vb)]\n [!code-cs[Classic WebData SqlConnection.PacketSize Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._63_1.cs)]"
  syntax:
    content: public int PacketSize { get; }
    return:
      type: System.Int32
      description: "네트워크 패킷의 바이트에서 크기입니다. 기본값은 8000입니다."
  overload: System.Data.SqlClient.SqlConnection.PacketSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  id: RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  fullName: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "열 암호화 키 저장소 공급자를 등록합니다."
  syntax:
    content: public static void RegisterColumnEncryptionKeyStoreProviders (System.Collections.Generic.IDictionary<string,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider> customProviders);
    parameters:
    - id: customProviders
      type: System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider}
      description: "사용자 지정 공급자"
  overload: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ResetStatistics
  id: ResetStatistics
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ResetStatistics()
  nameWithType: SqlConnection.ResetStatistics()
  fullName: System.Data.SqlClient.SqlConnection.ResetStatistics()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "통계 수집이 사용 되는 경우 모든 값을&0;으로 다시 설정 됩니다."
  remarks: "통계 수집이 사용 되지 않으며이 메서드는, 오류가 throw 됩니다."
  syntax:
    content: public void ResetStatistics ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.ResetStatistics*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics
  id: RetrieveStatistics
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: RetrieveStatistics()
  nameWithType: SqlConnection.RetrieveStatistics()
  fullName: System.Data.SqlClient.SqlConnection.RetrieveStatistics()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "메서드가 호출 되는 시점의 통계의 이름 값 쌍 컬렉션을 반환 합니다."
  remarks: "이 메서드가 호출 되 면 검색 된 값 되 현재 시점 시간에서입니다. 연결을 사용 하 여 작업을 계속 하면 값 올바르지 않습니다. 최신 값을 가져오는 메서드를 다시 실행 해야 합니다."
  syntax:
    content: public System.Collections.IDictionary RetrieveStatistics ();
    parameters: []
    return:
      type: System.Collections.IDictionary
      description: "형식의 참조를 반환 <xref:System.Collections.IDictionary>의 <xref:System.Collections.DictionaryEntry>항목.</xref:System.Collections.DictionaryEntry> </xref:System.Collections.IDictionary>"
  overload: System.Data.SqlClient.SqlConnection.RetrieveStatistics*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: SqlConnection.ServerVersion
  fullName: System.Data.SqlClient.SqlConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "인스턴스 버전을 포함 하는 문자열을 가져옵니다 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 에 클라이언트가 연결 되어 있습니다."
  remarks: "폼의 버전은 *# #. # #. # # #*, 여기서 처음 두 자리는 주 버전, 다음 두 자리는 부 버전 및 마지막&4; 자리는 릴리스 버전입니다. 폼의 문자열은 *major.minor.build*여기서 주 및 부는 정확히 두 자리로 관리 빌드 정확히 네 자리로 합니다.       반환 된 작업이 완료 되지 않았고 <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>.</xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A> 를 호출한 후에 연결이 열려 있지 않은 동안 ServerVersion 였습니다."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays the ServerVersion property.  \n  \n [!code-vb[Classic WebData ISqlConnection.ServerVersion Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._30_1.vb)]\n [!code-cs[Classic WebData ISqlConnection.ServerVersion Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._30_1.cs)]"
  syntax:
    content: public override string ServerVersion { get; }
    return:
      type: System.String
      description: "인스턴스 버전 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]합니다."
  overload: System.Data.SqlClient.SqlConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결이 닫혀 있습니다.       반환 된 작업이 완료 되지 않았고 <xref:System.Data.SqlClient.SqlConnection.OpenAsync*>.</xref:System.Data.SqlClient.SqlConnection.OpenAsync*> 를 호출한 후에 연결이 열려 있지 않은 동안 ServerVersion 였습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.State
  id: State
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: State
  nameWithType: SqlConnection.State
  fullName: System.Data.SqlClient.SqlConnection.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "상태를 나타냅니다는 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> 연결에서 가장 최근 네트워크 작업 중에 수행 합니다."
  remarks: "<xref:System.Data.ConnectionState>열거형에 <xref:System.Data.SqlClient.SqlConnection>.</xref:System.Data.SqlClient.SqlConnection> 의 상태를 나타내는</xref:System.Data.ConnectionState> 반환 연결을 닫고 상태 값을 새로 고쳐집니다."
  syntax:
    content: public override System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "<xref href=&quot;System.Data.ConnectionState&quot;> </xref> 열거 합니다."
  overload: System.Data.SqlClient.SqlConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled
  id: StatisticsEnabled
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: StatisticsEnabled
  nameWithType: SqlConnection.StatisticsEnabled
  fullName: System.Data.SqlClient.SqlConnection.StatisticsEnabled
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "로 설정 하면 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>통계 수집이 현재 연결에 대 한 활성화 합니다."
  remarks: "통계 수집에 미치는 영향은 사소 하지만 측정 가능한 성능 및 따라서 설정할지 필요한 경우에 합니다."
  syntax:
    content: public bool StatisticsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "반환 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 통계 수집이 사용 상태가 아니면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>기본값이입니다."
  overload: System.Data.SqlClient.SqlConnection.StatisticsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: SqlConnection.System.ICloneable.Clone()
  fullName: System.Data.SqlClient.SqlConnection.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "현재 인스턴스의 복사본 인 새 개체를 만듭니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.SqlClient.SqlConnection>인스턴스로 캐스팅 되는 <xref:System.ICloneable>인터페이스.</xref:System.ICloneable> </xref:System.Data.SqlClient.SqlConnection>       이 멤버는.NET Compact Framework에서만 지원 됩니다."
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "이 인스턴스의 복사본 인 새 개체입니다."
  overload: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.WorkstationId
  id: WorkstationId
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: WorkstationId
  nameWithType: SqlConnection.WorkstationId
  fullName: System.Data.SqlClient.SqlConnection.WorkstationId
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "데이터베이스 클라이언트를 식별 하는 문자열을 가져옵니다."
  remarks: "문자열에는 일반적으로 클라이언트의 네트워크 이름을 포함합니다. WorkstationId 속성에 해당 하는 `Workstation ID` 연결 문자열 속성입니다."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays the WorkstationId property.  \n  \n [!code-vb[Classic WebData SqlConnection.WorkstationId Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._7_1.vb)]\n [!code-cs[Classic WebData SqlConnection.WorkstationId Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._7_1.cs)]"
  syntax:
    content: public string WorkstationId { get; }
    return:
      type: System.String
      description: "데이터베이스 클라이언트를 식별 하는 문자열입니다. 지정 하지 않으면 클라이언트 컴퓨터의 이름입니다. 지정 하지 않으면 값은 빈 문자열입니다."
  overload: System.Data.SqlClient.SqlConnection.WorkstationId*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.Common.DbConnection
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Data.SqlClient.SqlConnection.#ctor
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection()
  nameWithType: SqlConnection.SqlConnection()
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection()
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection(String)
  nameWithType: SqlConnection.SqlConnection(String)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection(String,SqlCredential)
  nameWithType: SqlConnection.SqlConnection(String,SqlCredential)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String,SqlCredential)
- uid: System.Data.SqlClient.SqlCredential
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCredential
  nameWithType: SqlCredential
  fullName: System.Data.SqlClient.SqlCredential
- uid: System.Data.SqlClient.SqlConnection.AccessToken
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: AccessToken
  nameWithType: SqlConnection.AccessToken
  fullName: System.Data.SqlClient.SqlConnection.AccessToken
- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: SqlConnection.BeginTransaction()
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction()
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction(String)
  nameWithType: SqlConnection.BeginTransaction(String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(String)
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel,String)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel,String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel,String)
- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: SqlConnection.ChangeDatabase(String)
  fullName: System.Data.SqlClient.SqlConnection.ChangeDatabase(String)
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangePassword(String,String)
  nameWithType: SqlConnection.ChangePassword(String,String)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,String)
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangePassword(String,SqlCredential,SecureString)
  nameWithType: SqlConnection.ChangePassword(String,SqlCredential,SecureString)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,SqlCredential,SecureString)
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Data.SqlClient.SqlConnection.ClearAllPools
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearAllPools()
  nameWithType: SqlConnection.ClearAllPools()
  fullName: System.Data.SqlClient.SqlConnection.ClearAllPools()
- uid: System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearPool(SqlConnection)
  nameWithType: SqlConnection.ClearPool(SqlConnection)
  fullName: System.Data.SqlClient.SqlConnection.ClearPool(SqlConnection)
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClientConnectionId
  nameWithType: SqlConnection.ClientConnectionId
  fullName: System.Data.SqlClient.SqlConnection.ClientConnectionId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.SqlClient.SqlConnection.Close
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Close()
  nameWithType: SqlConnection.Close()
  fullName: System.Data.SqlClient.SqlConnection.Close()
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionKeyCacheTtl
  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionQueryMetadataCacheEnabled
  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionTrustedMasterKeyPaths
  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
- uid: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,IList<String>>
  nameWithType: IDictionary<String,IList<String>>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Collections.Generic.IList<System.String>>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Collections.Generic.IList<System.String>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlConnection.ConnectionString
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionString
  nameWithType: SqlConnection.ConnectionString
  fullName: System.Data.SqlClient.SqlConnection.ConnectionString
- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: SqlConnection.ConnectionTimeout
  fullName: System.Data.SqlClient.SqlConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlConnection.CreateCommand
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: SqlConnection.CreateCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateCommand()
- uid: System.Data.SqlClient.SqlCommand
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: SqlConnection.CreateDbCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateDbCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.SqlClient.SqlConnection.Credential
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Credential
  nameWithType: SqlConnection.Credential
  fullName: System.Data.SqlClient.SqlConnection.Credential
- uid: System.Data.SqlClient.SqlConnection.Database
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Database
  nameWithType: SqlConnection.Database
  fullName: System.Data.SqlClient.SqlConnection.Database
- uid: System.Data.SqlClient.SqlConnection.DataSource
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DataSource
  nameWithType: SqlConnection.DataSource
  fullName: System.Data.SqlClient.SqlConnection.DataSource
- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: SqlConnection.DbProviderFactory
  fullName: System.Data.SqlClient.SqlConnection.DbProviderFactory
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SqlConnection.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlConnection.Dispose(Boolean)
- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: SqlConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(ITransaction)
- uid: System.EnterpriseServices.ITransaction
  parent: System.EnterpriseServices
  isExternal: false
  name: ITransaction
  nameWithType: ITransaction
  fullName: System.EnterpriseServices.ITransaction
- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: SqlConnection.EnlistTransaction(Transaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: FireInfoMessageEventOnUserErrors
  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors
  fullName: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
- uid: System.Data.SqlClient.SqlConnection.GetSchema
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema()
  nameWithType: SqlConnection.GetSchema()
  fullName: System.Data.SqlClient.SqlConnection.GetSchema()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema(String)
  nameWithType: SqlConnection.GetSchema(String)
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String)
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema(String,String[])
  nameWithType: SqlConnection.GetSchema(String,String[])
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlConnection.InfoMessage
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: InfoMessage
  nameWithType: SqlConnection.InfoMessage
  fullName: System.Data.SqlClient.SqlConnection.InfoMessage
- uid: System.Data.SqlClient.SqlInfoMessageEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlInfoMessageEventHandler
  nameWithType: SqlInfoMessageEventHandler
  fullName: System.Data.SqlClient.SqlInfoMessageEventHandler
- uid: System.Data.SqlClient.SqlConnection.Open
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Open()
  nameWithType: SqlConnection.Open()
  fullName: System.Data.SqlClient.SqlConnection.Open()
- uid: System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: OpenAsync(CancellationToken)
  nameWithType: SqlConnection.OpenAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlConnection.OpenAsync(CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlConnection.PacketSize
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: PacketSize
  nameWithType: SqlConnection.PacketSize
  fullName: System.Data.SqlClient.SqlConnection.PacketSize
- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  fullName: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
- uid: System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,SqlColumnEncryptionKeyStoreProvider>
  nameWithType: IDictionary<String,SqlColumnEncryptionKeyStoreProvider>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider
    name: SqlColumnEncryptionKeyStoreProvider
    nameWithType: SqlColumnEncryptionKeyStoreProvider
    fullName: SqlColumnEncryptionKeyStoreProvider
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlConnection.ResetStatistics
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ResetStatistics()
  nameWithType: SqlConnection.ResetStatistics()
  fullName: System.Data.SqlClient.SqlConnection.ResetStatistics()
- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RetrieveStatistics()
  nameWithType: SqlConnection.RetrieveStatistics()
  fullName: System.Data.SqlClient.SqlConnection.RetrieveStatistics()
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Data.SqlClient.SqlConnection.ServerVersion
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ServerVersion
  nameWithType: SqlConnection.ServerVersion
  fullName: System.Data.SqlClient.SqlConnection.ServerVersion
- uid: System.Data.SqlClient.SqlConnection.State
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: State
  nameWithType: SqlConnection.State
  fullName: System.Data.SqlClient.SqlConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: StatisticsEnabled
  nameWithType: SqlConnection.StatisticsEnabled
  fullName: System.Data.SqlClient.SqlConnection.StatisticsEnabled
- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: SqlConnection.System.ICloneable.Clone()
  fullName: System.Data.SqlClient.SqlConnection.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.SqlClient.SqlConnection.WorkstationId
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: WorkstationId
  nameWithType: SqlConnection.WorkstationId
  fullName: System.Data.SqlClient.SqlConnection.WorkstationId
- uid: System.Data.SqlClient.SqlConnection.#ctor*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection.SqlConnection
- uid: System.Data.SqlClient.SqlConnection.AccessToken*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: AccessToken
  nameWithType: SqlConnection.AccessToken
- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: SqlConnection.BeginDbTransaction
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: SqlConnection.BeginTransaction
- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: SqlConnection.ChangeDatabase
- uid: System.Data.SqlClient.SqlConnection.ChangePassword*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangePassword
  nameWithType: SqlConnection.ChangePassword
- uid: System.Data.SqlClient.SqlConnection.ClearAllPools*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearAllPools
  nameWithType: SqlConnection.ClearAllPools
- uid: System.Data.SqlClient.SqlConnection.ClearPool*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearPool
  nameWithType: SqlConnection.ClearPool
- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClientConnectionId
  nameWithType: SqlConnection.ClientConnectionId
- uid: System.Data.SqlClient.SqlConnection.Close*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Close
  nameWithType: SqlConnection.Close
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionKeyCacheTtl
  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionQueryMetadataCacheEnabled
  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionTrustedMasterKeyPaths
  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
- uid: System.Data.SqlClient.SqlConnection.ConnectionString*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionString
  nameWithType: SqlConnection.ConnectionString
- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: SqlConnection.ConnectionTimeout
- uid: System.Data.SqlClient.SqlConnection.CreateCommand*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateCommand
  nameWithType: SqlConnection.CreateCommand
- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: SqlConnection.CreateDbCommand
- uid: System.Data.SqlClient.SqlConnection.Credential*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Credential
  nameWithType: SqlConnection.Credential
- uid: System.Data.SqlClient.SqlConnection.Database*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Database
  nameWithType: SqlConnection.Database
- uid: System.Data.SqlClient.SqlConnection.DataSource*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DataSource
  nameWithType: SqlConnection.DataSource
- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: SqlConnection.DbProviderFactory
- uid: System.Data.SqlClient.SqlConnection.Dispose*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Dispose
  nameWithType: SqlConnection.Dispose
- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistDistributedTransaction
  nameWithType: SqlConnection.EnlistDistributedTransaction
- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: SqlConnection.EnlistTransaction
- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: FireInfoMessageEventOnUserErrors
  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors
- uid: System.Data.SqlClient.SqlConnection.GetSchema*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema
  nameWithType: SqlConnection.GetSchema
- uid: System.Data.SqlClient.SqlConnection.Open*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Open
  nameWithType: SqlConnection.Open
- uid: System.Data.SqlClient.SqlConnection.OpenAsync*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: OpenAsync
  nameWithType: SqlConnection.OpenAsync
- uid: System.Data.SqlClient.SqlConnection.PacketSize*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: PacketSize
  nameWithType: SqlConnection.PacketSize
- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RegisterColumnEncryptionKeyStoreProviders
  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders
- uid: System.Data.SqlClient.SqlConnection.ResetStatistics*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ResetStatistics
  nameWithType: SqlConnection.ResetStatistics
- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RetrieveStatistics
  nameWithType: SqlConnection.RetrieveStatistics
- uid: System.Data.SqlClient.SqlConnection.ServerVersion*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ServerVersion
  nameWithType: SqlConnection.ServerVersion
- uid: System.Data.SqlClient.SqlConnection.State*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: State
  nameWithType: SqlConnection.State
- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: StatisticsEnabled
  nameWithType: SqlConnection.StatisticsEnabled
- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: SqlConnection.System.ICloneable.Clone
- uid: System.Data.SqlClient.SqlConnection.WorkstationId*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: WorkstationId
  nameWithType: SqlConnection.WorkstationId
