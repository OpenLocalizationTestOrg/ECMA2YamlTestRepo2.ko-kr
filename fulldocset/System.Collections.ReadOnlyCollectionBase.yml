### YamlMime:ManagedReference
items:
- uid: System.Collections.ReadOnlyCollectionBase
  id: ReadOnlyCollectionBase
  children:
  - System.Collections.ReadOnlyCollectionBase.#ctor
  - System.Collections.ReadOnlyCollectionBase.Count
  - System.Collections.ReadOnlyCollectionBase.GetEnumerator
  - System.Collections.ReadOnlyCollectionBase.InnerList
  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  name: ReadOnlyCollectionBase
  nameWithType: ReadOnlyCollectionBase
  fullName: System.Collections.ReadOnlyCollectionBase
  type: Class
  summary: "제공 된 <xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;> </xref> 기본 제네릭이 아닌 강력한 형식의 읽기 전용 컬렉션에 대 한 클래스입니다."
  remarks: "ReadOnlyCollectionBase 인스턴스는 항상 읽기 전용입니다. <xref:System.Collections.CollectionBase>이 클래스의 수정 가능한 버전에 대 한</xref:System.Collections.CollectionBase> 참조"
  example:
  - "The following code example implements the ReadOnlyCollectionBase class.  \n  \n [!code-cpp[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/cpp/t-system.collections.rea_1.cpp)]\n [!code-cs[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/csharp/t-system.collections.rea_1.cs)]\n [!code-vb[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/visualbasic/t-system.collections.rea_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class ReadOnlyCollectionBase : System.Collections.ICollection
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.ReadOnlyCollectionBase.#ctor
  id: '#ctor'
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: ReadOnlyCollectionBase()
  nameWithType: ReadOnlyCollectionBase.ReadOnlyCollectionBase()
  fullName: System.Collections.ReadOnlyCollectionBase.ReadOnlyCollectionBase()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> 클래스입니다."
  remarks: "이 생성자는 o (1) 연산입니다."
  syntax:
    content: protected ReadOnlyCollectionBase ();
    parameters: []
  overload: System.Collections.ReadOnlyCollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ReadOnlyCollectionBase.Count
  id: Count
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: Count
  nameWithType: ReadOnlyCollectionBase.Count
  fullName: System.Collections.ReadOnlyCollectionBase.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "에 포함 된 요소의 수를 가져옵니다는 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> 인스턴스."
  remarks: ''
  example:
  - "The following code example implements the <xref:System.Collections.ReadOnlyCollectionBase> class.  \n  \n [!code-cpp[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/cpp/p-system.collections.rea_1_1.cpp)]\n [!code-cs[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/csharp/p-system.collections.rea_1_1.cs)]\n [!code-vb[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/visualbasic/p-system.collections.rea_1_1.vb)]"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "에 포함 된 요소의 수는 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> 인스턴스.       이 속성의 값을 검색 하는 것은 o (1) 작업입니다."
  overload: System.Collections.ReadOnlyCollectionBase.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ReadOnlyCollectionBase.GetEnumerator()
  fullName: System.Collections.ReadOnlyCollectionBase.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "반복 하는 열거자를 반환 된 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> 인스턴스."
  remarks: "`foreach` C# 언어의 (`for each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.  따라서 사용 하 여 `foreach` 열거자를 직접 조작 하는 대신이 좋습니다.       열거자는 컬렉션의에서 데이터를 읽는 데 사용할 수 있지만 기본 컬렉션을 수정 하는 사용할 수 없습니다.       처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다. <xref:System.Collections.IEnumerator.Reset%2A>또한이 위치로 복원 열거자를 가져옵니다.</xref:System.Collections.IEnumerator.Reset%2A>  이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>정의 되지 않습니다.</xref:System.Collections.IEnumerator.Current%2A> 따라서 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> 의 값을 읽기 전에 컬렉션의 첫 번째 요소로 열거자를</xref:System.Collections.IEnumerator.MoveNext%2A> 호출 해야 합니다.       <xref:System.Collections.IEnumerator.Current%2A>될 때까지 동일한 개체를 반환 <xref:System.Collections.IEnumerator.MoveNext%2A>또는 <xref:System.Collections.IEnumerator.Reset%2A>호출 됩니다.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>설정 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       경우 <xref:System.Collections.IEnumerator.MoveNext%2A>전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A>반환할 수도 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> 마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`, <xref:System.Collections.IEnumerator.Current%2A>정의 되지 않습니다.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>다시, 컬렉션의 첫 번째 요소를 호출할 수 있습니다 <xref:System.Collections.IEnumerator.Reset%2A>그 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> 설정 하려면       열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다. 컬렉션 변경 되 면 추가, 수정 또는 요소를 삭제와 같은 열거자는 무효화 하 고 해당 동작은 정의 되지 않습니다.       열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.  을 열거 하는 동안 스레드로부터 안전을 보장 하려면 전체 열거 동안 컬렉션을 잠글 수 있습니다.  컬렉션에 여러 스레드에서 읽기 및 쓰기에 대 한 액세스를 허용 하려면 사용자 지정 동기화를 구현 해야 합니다.       이 메서드는 o (1) 작업."
  example:
  - "The following code example implements the <xref:System.Collections.ReadOnlyCollectionBase> class.  \n  \n [!code-cpp[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/cpp/m-system.collections.rea_1.cpp)]\n [!code-cs[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/csharp/m-system.collections.rea_1.cs)]\n [!code-vb[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.rea_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>에 대 한는 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> 인스턴스.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ReadOnlyCollectionBase.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ReadOnlyCollectionBase.InnerList
  id: InnerList
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: InnerList
  nameWithType: ReadOnlyCollectionBase.InnerList
  fullName: System.Collections.ReadOnlyCollectionBase.InnerList
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "에 포함 된 요소의 목록을 가져옵니다는 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> 인스턴스."
  remarks: "이 속성의 값을 검색 하는 것은 o (1) 작업입니다."
  example:
  - "The following code example implements the <xref:System.Collections.ReadOnlyCollectionBase> class.  \n  \n [!code-cpp[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/cpp/p-system.collections.rea_0_1.cpp)]\n [!code-cs[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/csharp/p-system.collections.rea_0_1.cs)]\n [!code-vb[System.Collections.ReadOnlyCollectionBase#1](~/add/codesnippet/visualbasic/p-system.collections.rea_0_1.vb)]"
  syntax:
    content: protected System.Collections.ArrayList InnerList { get; }
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 나타내는 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> 인스턴스 자체입니다."
  overload: System.Collections.ReadOnlyCollectionBase.InnerList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "전체 복사 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> 호환 되는&1; 차원 <xref:System.Array>대상 배열의 지정된 된 인덱스부터 시작 합니다.</xref:System.Array>"
  remarks: "지정된 된 배열의 호환 되는 형식 이어야 합니다.       이 방법은 사용 하 여 <xref:System.Array.Copy%2A?displayProperty=fullName>요소를 복사해올.</xref:System.Array.Copy%2A?displayProperty=fullName>       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ReadOnlyCollectionBase.Count%2A>.</xref:System.Collections.ReadOnlyCollectionBase.Count%2A>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "1 차원 <xref:System.Array>에서 복사한 요소의 대상인 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref>.</xref:System.Array> <xref:System.Array>0부터 시작 하는 인덱스가 있어야 합니다.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "인덱스는&0;부터 시작 `array` 복사가 시작 되는 합니다."
  overload: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>가 다차원 배열인 경우       -또는-소스에 있는 요소의 수 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> 에서 사용 가능한 공간 보다 큰 <code>index</code> 대상의 끝에 <code>array</code>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "소스의 형식을 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> 대상의 형식으로 자동 캐스팅할 수 없는 <code> array </code>합니다."
  platform:
  - net462
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "에 대 한 액세스 여부를 나타내는 값을 가져옵니다는 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> 개체가 동기화 되었는지 (스레드로부터 안전함)."
  remarks: "A <xref:System.Collections.ReadOnlyCollectionBase>개체 동기화 되지 않았습니다.</xref:System.Collections.ReadOnlyCollectionBase> 파생된 클래스의 동기화 된 버전을 제공할 수 있습니다는 <xref:System.Collections.ReadOnlyCollectionBase>클래스 사용의 <xref:System.Collections.ICollection.SyncRoot%2A>속성.</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.ReadOnlyCollectionBase>       컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/cpp/b4b4a174-5e26-4494-90e3-_1.cpp)]\n [!code-cs[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/csharp/b4b4a174-5e26-4494-90e3-_1.cs)]\n [!code-vb[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/visualbasic/b4b4a174-5e26-4494-90e3-_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우에 대 한 액세스는 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> 개체가 동기화 되었는지 (스레드로부터 안전함), 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체를 가져옵니다는 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> 개체입니다."
  remarks: "파생된 클래스의 동기화 된 버전을 제공할 수 있습니다는 <xref:System.Collections.ReadOnlyCollectionBase>클래스 사용의 <xref:System.Collections.ICollection.SyncRoot%2A>속성.</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.ReadOnlyCollectionBase> 동기화 하는 코드에서 작업을 수행 해야는 <xref:System.Collections.ICollection.SyncRoot%2A>의 속성은 <xref:System.Collections.ReadOnlyCollectionBase>개체에 대해 직접는 <xref:System.Collections.ReadOnlyCollectionBase>개체.</xref:System.Collections.ReadOnlyCollectionBase> </xref:System.Collections.ReadOnlyCollectionBase> </xref:System.Collections.ICollection.SyncRoot%2A> 이렇게 하면 다른 개체에서 파생 된 컬렉션의 적절 한 작업입니다. 특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <xref:System.Collections.ReadOnlyCollectionBase>개체입니다.</xref:System.Collections.ReadOnlyCollectionBase>       컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/cpp/87c3d4a6-47b9-4735-a8a0-_1.cpp)]\n [!code-cs[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/csharp/87c3d4a6-47b9-4735-a8a0-_1.cs)]\n [!code-vb[System.Collections.ReadOnlyCollectionBase#2](~/add/codesnippet/visualbasic/87c3d4a6-47b9-4735-a8a0-_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체는 <xref href=&quot;System.Collections.ReadOnlyCollectionBase&quot;> </xref> 개체입니다."
  overload: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.ReadOnlyCollectionBase.#ctor
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: ReadOnlyCollectionBase()
  nameWithType: ReadOnlyCollectionBase.ReadOnlyCollectionBase()
  fullName: System.Collections.ReadOnlyCollectionBase.ReadOnlyCollectionBase()
- uid: System.Collections.ReadOnlyCollectionBase.Count
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: Count
  nameWithType: ReadOnlyCollectionBase.Count
  fullName: System.Collections.ReadOnlyCollectionBase.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: GetEnumerator()
  nameWithType: ReadOnlyCollectionBase.GetEnumerator()
  fullName: System.Collections.ReadOnlyCollectionBase.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ReadOnlyCollectionBase.InnerList
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: InnerList
  nameWithType: ReadOnlyCollectionBase.InnerList
  fullName: System.Collections.ReadOnlyCollectionBase.InnerList
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
- uid: System.Collections.ReadOnlyCollectionBase.#ctor*
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: ReadOnlyCollectionBase
  nameWithType: ReadOnlyCollectionBase.ReadOnlyCollectionBase
- uid: System.Collections.ReadOnlyCollectionBase.Count*
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: Count
  nameWithType: ReadOnlyCollectionBase.Count
- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator*
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: GetEnumerator
  nameWithType: ReadOnlyCollectionBase.GetEnumerator
- uid: System.Collections.ReadOnlyCollectionBase.InnerList*
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: InnerList
  nameWithType: ReadOnlyCollectionBase.InnerList
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo*
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
