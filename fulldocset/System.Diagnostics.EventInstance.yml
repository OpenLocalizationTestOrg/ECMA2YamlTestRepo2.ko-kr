### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventInstance
  id: EventInstance
  children:
  - System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)
  - System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)
  - System.Diagnostics.EventInstance.CategoryId
  - System.Diagnostics.EventInstance.EntryType
  - System.Diagnostics.EventInstance.InstanceId
  langs:
  - csharp
  name: EventInstance
  nameWithType: EventInstance
  fullName: System.Diagnostics.EventInstance
  type: Class
  summary: "이벤트 로그 항목에 대 한 언어 중립적인 정보를 나타냅니다."
  remarks: "EventInstance를 사용 하 여 문자열 값이 아닌 리소스 식별자와 함께 이벤트 로그 엔트리를 씁니다. 이벤트 로그 엔트리를 작성 하려면 초기화는 <xref:System.Diagnostics.EventInstance.InstanceId%2A>속성 인스턴스를 전달 하 고는 <xref:System.Diagnostics.EventLog.WriteEvent%2A>메서드.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance.InstanceId%2A> 이벤트 뷰어에서 인스턴스 식별자를 사용 하 여을 찾아 현재 언어 설정에 따라 지역화 된 리소스 파일에서 해당 문자열을 표시 합니다. 확장 저장 프로시저를 리소스 식별자를 사용 하 여 이벤트를 작성 하기 전에 해당 리소스 파일에 이벤트 소스를 등록 해야 합니다.       이벤트를 쓸 때 설정할 수 있습니다는 <xref:System.Diagnostics.EventInstance.EntryType%2A>속성을 통해 이벤트 뷰어에서 항목에 대해 표시 되는 아이콘을 지정 합니다.</xref:System.Diagnostics.EventInstance.EntryType%2A> 지정할 수 있습니다는 <xref:System.Diagnostics.EventInstance.CategoryId%2A>항목에 대 한 이벤트 뷰어를 표시 하는 범주를 지정 하는 속성.</xref:System.Diagnostics.EventInstance.CategoryId%2A>       이벤트 뷰어에서 이벤트 소스를 기록한 이벤트를 필터링 하려면 범주를 사용 합니다. 이벤트 뷰어를 숫자 값으로 범주를 표시할 수 있습니다 또는 지역화 된 범주 문자열을 표시 하는 범주를 리소스 식별자로 사용할 수 있습니다.       이벤트 뷰어에서 지역화 된 범주 문자열을 표시 하려면 범주 리소스 파일을 사용 하 여 구성 하 고 설정 이벤트 소스를 사용 해야 합니다는 <xref:System.Diagnostics.EventInstance.CategoryId%2A>범주 리소스 파일의 리소스 식별자로.</xref:System.Diagnostics.EventInstance.CategoryId%2A> 구성된 범주 리소스 파일 또는 지정 된 이벤트 소스에 없는 경우 <xref:System.Diagnostics.EventInstance.CategoryId%2A>문자열로 범주 리소스 파일을 선택한 다음 이벤트 뷰어를 인덱싱하지 않아야 해당 항목에 대 한 숫자 범주 값 표시.</xref:System.Diagnostics.EventInstance.CategoryId%2A> 범주 리소스 파일에서 <xref:System.Diagnostics.EventLogInstaller>또는 <xref:System.Diagnostics.EventSourceCreationData>클래스</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller> 를 사용 하 여 리소스 파일에서 범주 문자열 수와 함께 구성       이벤트 로그에 대 한 소스 EventInstance를 사용 하 여 사용 하 여 이벤트를 쓰기 전에 등록 해야는 <xref:System.Diagnostics.EventLog.WriteEvent%2A>메서드.</xref:System.Diagnostics.EventLog.WriteEvent%2A> 원본 로그에 지역화 된 엔트리를 작성 하기 위한 구성 되어야 하 고 원본 메시지 리소스 파일을 하나 이상 정의 해야 합니다.       응용 프로그램의 설치 하는 동안 새 이벤트 소스를 만듭니다. 이렇게 하면 운영 체제 등록 된 이벤트 소스 목록과 해당 구성을 새로 고칠 수 있습니다. 운영 체제에서 이벤트 소스 목록을 새로 고치지 않은 경우 새 소스를 사용 하 여 이벤트 쓰려고 쓰기 작업이 실패 합니다. 사용 하 여 새 원본을 구성할 수는 <xref:System.Diagnostics.EventLogInstaller>, 또는 사용 하는 <xref:System.Diagnostics.EventLog.CreateEventSource%2A>메서드.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> 새 이벤트 소스를 만들려면 컴퓨터에 관리자 권한이 있어야 합니다.       에 있는 Platform SDK 설명서의 &quot;메시지 컴파일러&quot; 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 로그 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [http://msdn.microsoft.com](http://msdn.microsoft.com)합니다."
  example:
  - "The following code example writes an informational event entry, and then reuses the EventInstance to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/t-system.diagnostics.eve_2_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_2_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/t-system.diagnostics.eve_2_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public class EventInstance
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)
  id: '#ctor(System.Int64,System.Int32)'
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: EventInstance(Int64,Int32)
  nameWithType: EventInstance.EventInstance(Int64,Int32)
  fullName: System.Diagnostics.EventInstance.EventInstance(Int64,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> 클래스 이벤트 항목의 지역화 된 메시지 및 범주 텍스트에 대 한 지정된 된 리소스 식별자를 사용 합니다."
  remarks: "이벤트 로그에 정보 항목을 기록 하려면 초기화는 <xref:System.Diagnostics.EventInstance>에 전달 된 <xref:System.Diagnostics.EventLog.WriteEvent%2A>메서드.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance> 설정의 `instanceId` 해당 이벤트 메시지의 리소스 식별자로 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>소스에 대 한 속성.</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 설정는 `categoryId` 숫자 범주 값으로 줄이거나 이벤트 범주에 있는 리소스 식별자는 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>원본에 대 한 속성; 설정에서 `categoryId` 없는 이벤트 범주에 대 한&0;.</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> <xref:System.Diagnostics.EventInstance.EntryType%2A>새 인스턴스에 대 한 속성이로 설정 되어 <xref:System.Diagnostics.EventLogEntryType>기본적으로.</xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.EventInstance.EntryType%2A>       이벤트 뷰어에서 리소스 식별자를 사용 하 여 원본에 대 한 지역화 된 리소스 파일에서 해당 문자열을 표시 합니다. 리소스 식별자를 사용 하 여 이벤트를 작성 하려면 먼저 해당 리소스 파일에는 소스를 등록 해야 합니다."
  example:
  - "The following code example writes an informational event entry, and then reuses the <xref:System.Diagnostics.EventInstance> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/m-system.diagnostics.eve_5_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_5_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/m-system.diagnostics.eve_5_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public EventInstance (long instanceId, int categoryId);
    parameters:
    - id: instanceId
      type: System.Int64
      description: "이벤트 소스의 메시지 리소스 파일에 정의 된 문자열에 해당 하는 리소스 식별자입니다."
    - id: categoryId
      type: System.Int32
      description: "이벤트 원본 또는 이벤트에 대 한 없는 범주를 지정 하려면&0;의 범주 리소스 파일에 정의 된 문자열에 해당 하는 리소스 식별자입니다."
  overload: System.Diagnostics.EventInstance.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> instanceId </code> 매개 변수는 음수 값 또는 값 보다 큰 &lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;합니다.       -또는- <code> categoryId </code> 매개 변수는 음수 값 또는 값 보다 큰 &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;합니다."
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)
  id: '#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)'
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: EventInstance(Int64,Int32,EventLogEntryType)
  nameWithType: EventInstance.EventInstance(Int64,Int32,EventLogEntryType)
  fullName: System.Diagnostics.EventInstance.EventInstance(Int64,Int32,EventLogEntryType)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> 클래스는 이벤트 항목 및 지정 된 이벤트 로그 항목 유형을의 지역화 된 메시지 및 범주 텍스트에 대 한 지정된 된 리소스 식별자를 사용 합니다."
  remarks: "이벤트 로그에 항목을 기록 하려면 초기화는 <xref:System.Diagnostics.EventInstance>에 전달 된 <xref:System.Diagnostics.EventLog.WriteEvent%2A>메서드.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance> 설정의 `instanceId` 해당 이벤트 메시지의 리소스 식별자로 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>소스에 대 한 속성.</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 설정는 `categoryId` 숫자 범주 값으로 줄이거나 이벤트 범주에 있는 리소스 식별자는 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>원본에 대 한 속성; 설정에서 `categoryId` 없는 이벤트 범주에 대 한&0;.</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>       이벤트 뷰어에서 리소스 식별자를 사용 하 여 원본에 대 한 지역화 된 리소스 파일에서 해당 문자열을 표시 합니다. 리소스 식별자를 사용 하 여 이벤트를 작성 하려면 먼저 해당 리소스 파일에는 소스를 등록 해야 합니다.       설정의 `entryType` 미리 정의 된 항목 형식 중 하나에 있습니다. 이벤트 뷰어에서 이벤트 로그의 목록 보기에 표시할 아이콘을 확인 하려면 이벤트 유형을 사용 합니다."
  example:
  - "The following code example writes two audit event entries to the event log `myNewLog`. The code example creates a new event source and a new event log if they do not exist on the local computer. The event message text is specified using a resource identifier in a resource file.  \n  \n [!code-cpp[EventLog_WriteEvent#7](~/add/codesnippet/cpp/fc333350-d8a8-40ee-b15e-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#7](~/add/codesnippet/visualbasic/fc333350-d8a8-40ee-b15e-_1.vb)]\n [!code-cs[EventLog_WriteEvent#7](~/add/codesnippet/csharp/fc333350-d8a8-40ee-b15e-_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public EventInstance (long instanceId, int categoryId, System.Diagnostics.EventLogEntryType entryType);
    parameters:
    - id: instanceId
      type: System.Int64
      description: "이벤트 소스의 메시지 리소스 파일에 정의 된 문자열에 해당 하는 리소스 식별자입니다."
    - id: categoryId
      type: System.Int32
      description: "이벤트 원본 또는 이벤트에 대 한 없는 범주를 지정 하려면&0;의 범주 리소스 파일에 정의 된 문자열에 해당 하는 리소스 식별자입니다."
    - id: entryType
      type: System.Diagnostics.EventLogEntryType
      description: "<xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> 이벤트 유형을 나타내는 값입니다."
  overload: System.Diagnostics.EventInstance.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>entryType</code>유효 하지 않거나 <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> 값입니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>instanceId</code>음수 값 또는 값 보다 크면 &lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;합니다.       -또는- <code>categoryId</code> 은 음수 값 또는 값 보다 큰 &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;합니다."
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.CategoryId
  id: CategoryId
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: CategoryId
  nameWithType: EventInstance.CategoryId
  fullName: System.Diagnostics.EventInstance.CategoryId
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "이벤트 엔트리의 응용 프로그램 정의 범주를 지정 하는 리소스 식별자를 가져오거나 설정 합니다."
  remarks: "이벤트 로그 범주는 필터 이벤트를 작성 하거나 한 이벤트에 대 한 정보를 제공 하는 응용 프로그램 정의 값입니다. 예를 들어 응용 프로그램이 서로 다른 구성 요소 또는 여러 작업에 대 한 별도 범주를 정의할 수 있습니다.       항목에 대 한 이벤트 뷰어를 표시 하는 범주를 지정 하려면 CategoryId 속성을 설정 합니다. 이벤트 뷰어를 숫자 값으로 범주를 표시할 수 있습니다 또는 현재 언어 설정에 따라 지역화 된 범주 문자열을 표시 하 고 CategoryId 리소스 식별자로 사용할 수 있습니다.       이벤트 뷰어에서 이벤트를 사용 해야에 지역화 된 범주 문자열을 표시 하려면 소스 범주 리소스 파일을 사용 하 여 구성 및 범주 리소스 파일에는 CategoryId 리소스 식별자로 설정 합니다. 이벤트 소스에 없는 경우 구성 된 범주 리소스 파일 또는 지정 된 CategoryId 범주 리소스 파일에 문자열을 인덱싱하지 않습니다 및 다음 이벤트 뷰어에서 해당 항목에 대 한 숫자 범주 값을 표시 합니다.       리소스 식별자를 사용 하 여 이벤트 범주를 작성 하기 전에 해당 리소스 파일에는 소스를 등록 해야 합니다. 범주 리소스 파일에서 <xref:System.Diagnostics.EventLogInstaller>또는 <xref:System.Diagnostics.EventSourceCreationData>클래스</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller> 를 사용 하 여 리소스 파일에서 범주 문자열 수와 함께 구성 연속적으로 구성 된 최대 1부터 시작 범주 리소스 식별자를 매겨야 리소스 파일에서 범주 문자열을 정의할 때 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>속성 값.</xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>       이벤트 범주는 선택 사항입니다. 응용 프로그램 범주를 사용 하지 않는 경우에 이벤트 로그 항목에 대 한 CategoryId를 설정 하지 마십시오.       에 있는 Platform SDK 설명서의 &quot;메시지 컴파일러&quot; 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [http://msdn.microsoft.com](http://msdn.microsoft.com/)합니다. 리소스 파일에 이벤트 범주를 정의 하는 방법에 대 한 세부 정보를 Platform SDK의 &quot;이벤트 범주&quot; 항목을 참조 하십시오."
  example:
  - "The following code example writes an informational event entry, and then reuses the <xref:System.Diagnostics.EventInstance> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/p-system.diagnostics.eve_24_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_24_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/p-system.diagnostics.eve_24_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public int CategoryId { get; set; }
    return:
      type: System.Int32
      description: "숫자 범주 값 또는 리소스 식별자 이벤트 소스의 범주 리소스 파일에 정의 된 문자열에 해당 하는입니다. 기본값은 이벤트 항목에 대 한 범주가 없습니다 표시 됨을 의미 하는&0;입니다."
  overload: System.Diagnostics.EventInstance.CategoryId*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "속성이 설정 된 음수 값 또는 값 보다 큰 &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;합니다."
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.EntryType
  id: EntryType
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: EntryType
  nameWithType: EventInstance.EntryType
  fullName: System.Diagnostics.EventInstance.EntryType
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "이벤트 로그 항목 이벤트 유형을 가져오거나 설정 합니다."
  remarks: "각 이벤트는 응용 프로그램 이벤트를 보고할 때 나타내는 단일 형식입니다. 이벤트 뷰어에서 이벤트 로그의 목록 보기에 표시할 아이콘을 확인 하려면 이벤트 유형을 사용 합니다."
  example:
  - "The following code example writes an informational event entry, and then reuses the <xref:System.Diagnostics.EventInstance> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/p-system.diagnostics.eve_11_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_11_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/p-system.diagnostics.eve_11_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public System.Diagnostics.EventLogEntryType EntryType { get; set; }
    return:
      type: System.Diagnostics.EventLogEntryType
      description: "<xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> 이벤트 항목 유형을 나타내는 값입니다. 기본값은 <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>합니다."
  overload: System.Diagnostics.EventInstance.EntryType*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "유효한는 속성이 설정 되어 있지 <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> 값입니다."
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.InstanceId
  id: InstanceId
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: InstanceId
  nameWithType: EventInstance.InstanceId
  fullName: System.Diagnostics.EventInstance.InstanceId
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "이벤트 엔트리의 메시지 텍스트를 지정 하는 리소스 식별자를 가져오거나 설정 합니다."
  remarks: "InstanceId 속성 구성 된 이벤트 소스에 대 한 이벤트 항목을 고유 하 게 식별합니다. 메시지 리소스 파일에 정의 된 이벤트에 대 한 InstanceId 메시지 텍스트 파일에서 메시지 정의 필드에서 컴파일된 리소스 식별자에 해당 합니다. 응용 프로그램 InstanceId 리소스 식별자를 설정 하 여 지역화 된 이벤트 로그 항목을 쓸 수 있습니다. 이벤트 뷰어에서 InstanceId 리소스 식별자를 사용 하 여을 찾아 현재 언어 설정에 따라 지역화 된 리소스 파일에서 해당 문자열을 표시 합니다. 리소스 식별자를 사용 하 여 이벤트를 작성 하기 전에 해당 리소스 파일에는 소스를 등록 해야 합니다.       에 있는 Platform SDK 설명서의 &quot;메시지 컴파일러&quot; 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 로그 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [http://msdn.microsoft.com](http://msdn.microsoft.com/)합니다. 이벤트 로그 식별자에 대 한 자세한 Platform SDK의 &quot;이벤트 식별자&quot; 항목을 참조 합니다."
  example:
  - "The following code example writes an informational event entry, and then reuses the <xref:System.Diagnostics.EventInstance> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/p-system.diagnostics.eve_16_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_16_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/p-system.diagnostics.eve_16_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public long InstanceId { get; set; }
    return:
      type: System.Int64
      description: "이벤트 소스의 메시지 리소스 파일에 정의 된 문자열에 해당 하는 리소스 식별자입니다."
  overload: System.Diagnostics.EventInstance.InstanceId*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "속성이 설정 된 음수 값 또는 값 보다 큰 &lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;합니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EventInstance(Int64,Int32)
  nameWithType: EventInstance.EventInstance(Int64,Int32)
  fullName: System.Diagnostics.EventInstance.EventInstance(Int64,Int32)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EventInstance(Int64,Int32,EventLogEntryType)
  nameWithType: EventInstance.EventInstance(Int64,Int32,EventLogEntryType)
  fullName: System.Diagnostics.EventInstance.EventInstance(Int64,Int32,EventLogEntryType)
- uid: System.Diagnostics.EventLogEntryType
  parent: System.Diagnostics
  isExternal: false
  name: EventLogEntryType
  nameWithType: EventLogEntryType
  fullName: System.Diagnostics.EventLogEntryType
- uid: System.Diagnostics.EventInstance.CategoryId
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: CategoryId
  nameWithType: EventInstance.CategoryId
  fullName: System.Diagnostics.EventInstance.CategoryId
- uid: System.Diagnostics.EventInstance.EntryType
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EntryType
  nameWithType: EventInstance.EntryType
  fullName: System.Diagnostics.EventInstance.EntryType
- uid: System.Diagnostics.EventInstance.InstanceId
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: InstanceId
  nameWithType: EventInstance.InstanceId
  fullName: System.Diagnostics.EventInstance.InstanceId
- uid: System.Diagnostics.EventInstance.#ctor*
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EventInstance
  nameWithType: EventInstance.EventInstance
- uid: System.Diagnostics.EventInstance.CategoryId*
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: CategoryId
  nameWithType: EventInstance.CategoryId
- uid: System.Diagnostics.EventInstance.EntryType*
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EntryType
  nameWithType: EventInstance.EntryType
- uid: System.Diagnostics.EventInstance.InstanceId*
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: InstanceId
  nameWithType: EventInstance.InstanceId
