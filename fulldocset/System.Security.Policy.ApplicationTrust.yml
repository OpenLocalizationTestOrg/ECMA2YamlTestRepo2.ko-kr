### YamlMime:ManagedReference
items:
- uid: System.Security.Policy.ApplicationTrust
  id: ApplicationTrust
  children:
  - System.Security.Policy.ApplicationTrust.#ctor
  - System.Security.Policy.ApplicationTrust.#ctor(System.ApplicationIdentity)
  - System.Security.Policy.ApplicationTrust.#ctor(System.Security.PermissionSet,System.Collections.Generic.IEnumerable{System.Security.Policy.StrongName})
  - System.Security.Policy.ApplicationTrust.ApplicationIdentity
  - System.Security.Policy.ApplicationTrust.Clone
  - System.Security.Policy.ApplicationTrust.DefaultGrantSet
  - System.Security.Policy.ApplicationTrust.ExtraInfo
  - System.Security.Policy.ApplicationTrust.FromXml(System.Security.SecurityElement)
  - System.Security.Policy.ApplicationTrust.FullTrustAssemblies
  - System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun
  - System.Security.Policy.ApplicationTrust.Persist
  - System.Security.Policy.ApplicationTrust.ToXml
  langs:
  - csharp
  name: ApplicationTrust
  nameWithType: ApplicationTrust
  fullName: System.Security.Policy.ApplicationTrust
  type: Class
  summary: "응용 프로그램에 대 한 보안 결정을 캡슐화합니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "ApplicationTrust 개체가 신뢰 관리자가 반환 됩니다. <xref:System.Security.Policy.IApplicationTrustManager.DetermineApplicationTrust%2A>메서드.</xref:System.Security.Policy.IApplicationTrustManager.DetermineApplicationTrust%2A>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ApplicationTrust : System.Security.Policy.EvidenceBase, System.Security.ISecurityEncodable
  inheritance:
  - System.Object
  - System.Security.Policy.EvidenceBase
  implements:
  - System.Security.ISecurityEncodable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrust.#ctor
  id: '#ctor'
  parent: System.Security.Policy.ApplicationTrust
  langs:
  - csharp
  name: ApplicationTrust()
  nameWithType: ApplicationTrust.ApplicationTrust()
  fullName: System.Security.Policy.ApplicationTrust.ApplicationTrust()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Policy.ApplicationTrust&quot;> </xref> 클래스입니다."
  remarks: "이 생성자는 빈 만듭니다 <xref:System.Security.Policy.ApplicationTrust>개체입니다.</xref:System.Security.Policy.ApplicationTrust>"
  syntax:
    content: public ApplicationTrust ();
    parameters: []
  overload: System.Security.Policy.ApplicationTrust.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrust.#ctor(System.ApplicationIdentity)
  id: '#ctor(System.ApplicationIdentity)'
  parent: System.Security.Policy.ApplicationTrust
  langs:
  - csharp
  name: ApplicationTrust(ApplicationIdentity)
  nameWithType: ApplicationTrust.ApplicationTrust(ApplicationIdentity)
  fullName: System.Security.Policy.ApplicationTrust.ApplicationTrust(ApplicationIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Policy.ApplicationTrust&quot;> </xref> 클래스와 <xref href=&quot;System.ApplicationIdentity&quot;> </xref>합니다."
  remarks: "응용 프로그램 id는 응용 프로그램의 전체 이름 및 해당 코드 베이스의 위치를 포함합니다."
  syntax:
    content: public ApplicationTrust (ApplicationIdentity applicationIdentity);
    parameters:
    - id: applicationIdentity
      type: System.ApplicationIdentity
      description: "<xref href=&quot;System.ApplicationIdentity&quot;> </xref> 응용 프로그램를 고유 하 게 식별 합니다."
  overload: System.Security.Policy.ApplicationTrust.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrust.#ctor(System.Security.PermissionSet,System.Collections.Generic.IEnumerable{System.Security.Policy.StrongName})
  id: '#ctor(System.Security.PermissionSet,System.Collections.Generic.IEnumerable{System.Security.Policy.StrongName})'
  parent: System.Security.Policy.ApplicationTrust
  langs:
  - csharp
  name: ApplicationTrust(PermissionSet,IEnumerable<StrongName>)
  nameWithType: ApplicationTrust.ApplicationTrust(PermissionSet,IEnumerable<StrongName>)
  fullName: System.Security.Policy.ApplicationTrust.ApplicationTrust(PermissionSet,IEnumerable<StrongName>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Policy.ApplicationTrust&quot;> </xref> 클래스에서 제공 된 권한 부여 집합 및 완전 신뢰 어셈블리의 컬렉션을 사용 합니다."
  remarks: '`fullTrustAssemblies`내에서 강력한 이름의 어셈블리를 식별 하는 <xref:System.AppDomain>완전 신뢰를 부여 하는입니다.</xref:System.AppDomain> 이 생성자를 호출 하는 <xref:System.AppDomain.CreateDomain%2A?displayProperty=fullName>만드는 메서드를 한 <xref:System.AppDomain>sandbox로 사용 되는.</xref:System.AppDomain> </xref:System.AppDomain.CreateDomain%2A?displayProperty=fullName> 샌드박스에서 응용 프로그램을 실행 하는 방법에 대 한 자세한 내용은 참조 [하는 방법: 부분적으로 신뢰할 수 있는 코드 실행 샌드박스에서](~/add/includes/ajax-current-ext-md.md)합니다.'
  syntax:
    content: public ApplicationTrust (System.Security.PermissionSet defaultGrantSet, System.Collections.Generic.IEnumerable<System.Security.Policy.StrongName> fullTrustAssemblies);
    parameters:
    - id: defaultGrantSet
      type: System.Security.PermissionSet
      description: "특정 권한이 없는 모든 어셈블리에 부여 되는 기본 권한 집합입니다."
    - id: fullTrustAssemblies
      type: System.Collections.Generic.IEnumerable{System.Security.Policy.StrongName}
      description: "응용 프로그램 도메인에서 완전히 신뢰할 수 있는 고려해 야 하는 어셈블리를 나타내는 강력한 이름의 배열입니다."
  overload: System.Security.Policy.ApplicationTrust.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>fullTrustAssemblies</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>fullTrustAssemblies</code>하지 않은 어셈블리를 포함 한 <xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrust.ApplicationIdentity
  id: ApplicationIdentity
  parent: System.Security.Policy.ApplicationTrust
  langs:
  - csharp
  name: ApplicationIdentity
  nameWithType: ApplicationTrust.ApplicationIdentity
  fullName: System.Security.Policy.ApplicationTrust.ApplicationIdentity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "응용 프로그램 트러스트 개체에 대 한 응용 프로그램 id를 가져오거나 설정 합니다."
  remarks: "ApplicationIdentity 속성 새 도메인에서 활성화할 매니페스트 기반 응용 프로그램을 고유 하 게 식별 합니다."
  syntax:
    content: public ApplicationIdentity ApplicationIdentity { get; set; }
    return:
      type: System.ApplicationIdentity
      description: "<xref href=&quot;System.ApplicationIdentity&quot;> </xref> 응용 프로그램 트러스트 개체에 대 한 합니다."
  overload: System.Security.Policy.ApplicationTrust.ApplicationIdentity*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.ApplicationIdentity&quot;></xref>값이 있기 때문에 설정할 수 없습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrust.Clone
  id: Clone
  parent: System.Security.Policy.ApplicationTrust
  langs:
  - csharp
  name: Clone()
  nameWithType: ApplicationTrust.Clone()
  fullName: System.Security.Policy.ApplicationTrust.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "현재 인스턴스의 전체 복사본 인 새 개체를 만듭니다."
  syntax:
    content: public override System.Security.Policy.EvidenceBase Clone ();
    parameters: []
    return:
      type: System.Security.Policy.EvidenceBase
      description: "이 응용 프로그램 트러스트 개체의 중복 복사본입니다."
  overload: System.Security.Policy.ApplicationTrust.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrust.DefaultGrantSet
  id: DefaultGrantSet
  parent: System.Security.Policy.ApplicationTrust
  langs:
  - csharp
  name: DefaultGrantSet
  nameWithType: ApplicationTrust.DefaultGrantSet
  fullName: System.Security.Policy.ApplicationTrust.DefaultGrantSet
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "집합 정의는 기본 권한 부여 정책 설명을 가져오거나 설정 합니다."
  remarks: "DefaultGrantSet 응용 프로그램에 부여 된 권한을 나타냅니다.       <xref:System.Security.Policy.PolicyStatement>나타내는 기본 권한 부여를 사용 하 여 초기화 되는 <xref:System.Security.PermissionSet>및 선택적 특성.</xref:System.Security.PermissionSet> </xref:System.Security.Policy.PolicyStatement>"
  syntax:
    content: public System.Security.Policy.PolicyStatement DefaultGrantSet { get; set; }
    return:
      type: System.Security.Policy.PolicyStatement
      description: "A <xref href=&quot;System.Security.Policy.PolicyStatement&quot;> </xref> 기본값을 설명 하는 권한을 부여 합니다."
  overload: System.Security.Policy.ApplicationTrust.DefaultGrantSet*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrust.ExtraInfo
  id: ExtraInfo
  parent: System.Security.Policy.ApplicationTrust
  langs:
  - csharp
  name: ExtraInfo
  nameWithType: ApplicationTrust.ExtraInfo
  fullName: System.Security.Policy.ApplicationTrust.ExtraInfo
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "응용 프로그램에 대 한 추가 보안 정보를 가져오거나 설정 합니다."
  syntax:
    content: public object ExtraInfo { get; set; }
    return:
      type: System.Object
      description: "응용 프로그램에 대 한 추가 보안 정보를 포함 하는 개체입니다."
  overload: System.Security.Policy.ApplicationTrust.ExtraInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrust.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Policy.ApplicationTrust
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: ApplicationTrust.FromXml(SecurityElement)
  fullName: System.Security.Policy.ApplicationTrust.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "다시 생성 한 <xref href=&quot;System.Security.Policy.ApplicationTrust&quot;> </xref> XML 인코딩에서 지정된 된 상태 개체입니다."
  remarks: "<xref:System.Security.ISecurityPolicyEncodable.ToXml%2A>및 <xref:System.Security.ISecurityPolicyEncodable.FromXml%2A>방법을 확인 하기 위해 구현 <xref:System.Security.Policy.ApplicationTrust>개체 보안 정책 사용에 대 한 XML로 인코딩할 수 있습니다.</xref:System.Security.Policy.ApplicationTrust> </xref:System.Security.ISecurityPolicyEncodable.FromXml%2A> </xref:System.Security.ISecurityPolicyEncodable.ToXml%2A>"
  syntax:
    content: public void FromXml (System.Security.SecurityElement element);
    parameters:
    - id: element
      type: System.Security.SecurityElement
      description: "XML 다시 만드는 데 사용할 인코딩을 <xref href=&quot;System.Security.Policy.ApplicationTrust&quot;> </xref> 개체입니다."
  overload: System.Security.Policy.ApplicationTrust.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "사용 되는 XML 인코딩을 <code> element </code> 올바르지 않습니다."
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrust.FullTrustAssemblies
  id: FullTrustAssemblies
  parent: System.Security.Policy.ApplicationTrust
  langs:
  - csharp
  name: FullTrustAssemblies
  nameWithType: ApplicationTrust.FullTrustAssemblies
  fullName: System.Security.Policy.ApplicationTrust.FullTrustAssemblies
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "이 응용 프로그램 신뢰에 대 한 완전 신뢰 어셈블리의 목록을 가져옵니다."
  remarks: "내에서 완전 신뢰를 부여 하는 어셈블리를 식별 하는 목록에서 <xref:System.AppDomain>이와 연결 된 <xref:System.Security.Policy.ApplicationTrust>인스턴스.</xref:System.Security.Policy.ApplicationTrust> </xref:System.AppDomain> 어셈블리는 강력한 이름으로 식별 됩니다."
  syntax:
    content: public System.Collections.Generic.IList<System.Security.Policy.StrongName> FullTrustAssemblies { get; }
    return:
      type: System.Collections.Generic.IList{System.Security.Policy.StrongName}
      description: "완전 신뢰 어셈블리의 목록입니다."
  overload: System.Security.Policy.ApplicationTrust.FullTrustAssemblies*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun
  id: IsApplicationTrustedToRun
  parent: System.Security.Policy.ApplicationTrust
  langs:
  - csharp
  name: IsApplicationTrustedToRun
  nameWithType: ApplicationTrust.IsApplicationTrustedToRun
  fullName: System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "응용 프로그램에 필요한 사용 권한이 부여 하 고 실행 하도록 신뢰할 수 있는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "트러스트 관리자 IsApplicationTrustedToRun 속성을 설정 `true` 실행 하는 응용 프로그램 승인 된 경우."
  syntax:
    content: public bool IsApplicationTrustedToRun { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>응용 프로그램을 실행 합니다; 신뢰할 수 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrust.Persist
  id: Persist
  parent: System.Security.Policy.ApplicationTrust
  langs:
  - csharp
  name: Persist
  nameWithType: ApplicationTrust.Persist
  fullName: System.Security.Policy.ApplicationTrust.Persist
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "응용 프로그램 신뢰 정보를 지속할 지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "Persist 속성이 `true`, 응용 프로그램 신뢰 정보는 ClickOnce 응용 프로그램 저장소에 저장 됩니다."
  syntax:
    content: public bool Persist { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>응용 프로그램 신뢰 정보에 지속 합니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Policy.ApplicationTrust.Persist*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrust.ToXml
  id: ToXml
  parent: System.Security.Policy.ApplicationTrust
  langs:
  - csharp
  name: ToXml()
  nameWithType: ApplicationTrust.ToXml()
  fullName: System.Security.Policy.ApplicationTrust.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "XML 인코딩을 만듭니다는 <xref href=&quot;System.Security.Policy.ApplicationTrust&quot;> </xref> 개체 및 현재 상태에 있습니다."
  remarks: "<xref:System.Security.ISecurityPolicyEncodable.ToXml%2A>및 <xref:System.Security.ISecurityPolicyEncodable.FromXml%2A>방법을 확인 하기 위해 구현 <xref:System.Security.Policy.ApplicationTrust>개체 보안 정책 사용에 대 한 XML로 인코딩할 수 있습니다.</xref:System.Security.Policy.ApplicationTrust> </xref:System.Security.ISecurityPolicyEncodable.FromXml%2A> </xref:System.Security.ISecurityPolicyEncodable.ToXml%2A>"
  syntax:
    content: public System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "모든 상태 정보를 포함 하는 보안 개체의 XML 인코딩입니다."
  overload: System.Security.Policy.ApplicationTrust.ToXml*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Policy.EvidenceBase
  isExternal: false
  name: System.Security.Policy.EvidenceBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Policy.ApplicationTrust.#ctor
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: ApplicationTrust()
  nameWithType: ApplicationTrust.ApplicationTrust()
  fullName: System.Security.Policy.ApplicationTrust.ApplicationTrust()
- uid: System.Security.Policy.ApplicationTrust.#ctor(System.ApplicationIdentity)
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: ApplicationTrust(ApplicationIdentity)
  nameWithType: ApplicationTrust.ApplicationTrust(ApplicationIdentity)
  fullName: System.Security.Policy.ApplicationTrust.ApplicationTrust(ApplicationIdentity)
- uid: System.ApplicationIdentity
  parent: System
  isExternal: false
  name: ApplicationIdentity
  nameWithType: ApplicationIdentity
  fullName: System.ApplicationIdentity
- uid: System.Security.Policy.ApplicationTrust.#ctor(System.Security.PermissionSet,System.Collections.Generic.IEnumerable{System.Security.Policy.StrongName})
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: ApplicationTrust(PermissionSet,IEnumerable<StrongName>)
  nameWithType: ApplicationTrust.ApplicationTrust(PermissionSet,IEnumerable<StrongName>)
  fullName: System.Security.Policy.ApplicationTrust.ApplicationTrust(PermissionSet,IEnumerable<StrongName>)
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Collections.Generic.IEnumerable{System.Security.Policy.StrongName}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<StrongName>
  nameWithType: IEnumerable<StrongName>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Policy.StrongName>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Policy.StrongName>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Policy.StrongName
    name: StrongName
    nameWithType: StrongName
    fullName: StrongName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Policy.ApplicationTrust.ApplicationIdentity
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: ApplicationIdentity
  nameWithType: ApplicationTrust.ApplicationIdentity
  fullName: System.Security.Policy.ApplicationTrust.ApplicationIdentity
- uid: System.Security.Policy.ApplicationTrust.Clone
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: Clone()
  nameWithType: ApplicationTrust.Clone()
  fullName: System.Security.Policy.ApplicationTrust.Clone()
- uid: System.Security.Policy.ApplicationTrust.DefaultGrantSet
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: DefaultGrantSet
  nameWithType: ApplicationTrust.DefaultGrantSet
  fullName: System.Security.Policy.ApplicationTrust.DefaultGrantSet
- uid: System.Security.Policy.PolicyStatement
  parent: System.Security.Policy
  isExternal: false
  name: PolicyStatement
  nameWithType: PolicyStatement
  fullName: System.Security.Policy.PolicyStatement
- uid: System.Security.Policy.ApplicationTrust.ExtraInfo
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: ExtraInfo
  nameWithType: ApplicationTrust.ExtraInfo
  fullName: System.Security.Policy.ApplicationTrust.ExtraInfo
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Policy.ApplicationTrust.FromXml(System.Security.SecurityElement)
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: ApplicationTrust.FromXml(SecurityElement)
  fullName: System.Security.Policy.ApplicationTrust.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Policy.ApplicationTrust.FullTrustAssemblies
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: FullTrustAssemblies
  nameWithType: ApplicationTrust.FullTrustAssemblies
  fullName: System.Security.Policy.ApplicationTrust.FullTrustAssemblies
- uid: System.Collections.Generic.IList{System.Security.Policy.StrongName}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<StrongName>
  nameWithType: IList<StrongName>
  fullName: System.Collections.Generic.IList<System.Security.Policy.StrongName>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Security.Policy.StrongName>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Policy.StrongName
    name: StrongName
    nameWithType: StrongName
    fullName: StrongName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: IsApplicationTrustedToRun
  nameWithType: ApplicationTrust.IsApplicationTrustedToRun
  fullName: System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Policy.ApplicationTrust.Persist
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: Persist
  nameWithType: ApplicationTrust.Persist
  fullName: System.Security.Policy.ApplicationTrust.Persist
- uid: System.Security.Policy.ApplicationTrust.ToXml
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: ToXml()
  nameWithType: ApplicationTrust.ToXml()
  fullName: System.Security.Policy.ApplicationTrust.ToXml()
- uid: System.Security.Policy.ApplicationTrust.#ctor*
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: ApplicationTrust
  nameWithType: ApplicationTrust.ApplicationTrust
- uid: System.Security.Policy.ApplicationTrust.ApplicationIdentity*
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: ApplicationIdentity
  nameWithType: ApplicationTrust.ApplicationIdentity
- uid: System.Security.Policy.ApplicationTrust.Clone*
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: Clone
  nameWithType: ApplicationTrust.Clone
- uid: System.Security.Policy.ApplicationTrust.DefaultGrantSet*
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: DefaultGrantSet
  nameWithType: ApplicationTrust.DefaultGrantSet
- uid: System.Security.Policy.ApplicationTrust.ExtraInfo*
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: ExtraInfo
  nameWithType: ApplicationTrust.ExtraInfo
- uid: System.Security.Policy.ApplicationTrust.FromXml*
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: FromXml
  nameWithType: ApplicationTrust.FromXml
- uid: System.Security.Policy.ApplicationTrust.FullTrustAssemblies*
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: FullTrustAssemblies
  nameWithType: ApplicationTrust.FullTrustAssemblies
- uid: System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun*
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: IsApplicationTrustedToRun
  nameWithType: ApplicationTrust.IsApplicationTrustedToRun
- uid: System.Security.Policy.ApplicationTrust.Persist*
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: Persist
  nameWithType: ApplicationTrust.Persist
- uid: System.Security.Policy.ApplicationTrust.ToXml*
  parent: System.Security.Policy.ApplicationTrust
  isExternal: false
  name: ToXml
  nameWithType: ApplicationTrust.ToXml
