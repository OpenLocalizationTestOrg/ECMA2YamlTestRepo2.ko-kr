### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.DirectoryEntry
  id: DirectoryEntry
  children:
  - System.DirectoryServices.DirectoryEntry.#ctor
  - System.DirectoryServices.DirectoryEntry.#ctor(System.Object)
  - System.DirectoryServices.DirectoryEntry.#ctor(System.String)
  - System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)
  - System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)
  - System.DirectoryServices.DirectoryEntry.AuthenticationType
  - System.DirectoryServices.DirectoryEntry.Children
  - System.DirectoryServices.DirectoryEntry.Close
  - System.DirectoryServices.DirectoryEntry.CommitChanges
  - System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)
  - System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  - System.DirectoryServices.DirectoryEntry.DeleteTree
  - System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)
  - System.DirectoryServices.DirectoryEntry.Exists(System.String)
  - System.DirectoryServices.DirectoryEntry.Guid
  - System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])
  - System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)
  - System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])
  - System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)
  - System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  - System.DirectoryServices.DirectoryEntry.Name
  - System.DirectoryServices.DirectoryEntry.NativeGuid
  - System.DirectoryServices.DirectoryEntry.NativeObject
  - System.DirectoryServices.DirectoryEntry.ObjectSecurity
  - System.DirectoryServices.DirectoryEntry.Options
  - System.DirectoryServices.DirectoryEntry.Parent
  - System.DirectoryServices.DirectoryEntry.Password
  - System.DirectoryServices.DirectoryEntry.Path
  - System.DirectoryServices.DirectoryEntry.Properties
  - System.DirectoryServices.DirectoryEntry.RefreshCache
  - System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])
  - System.DirectoryServices.DirectoryEntry.Rename(System.String)
  - System.DirectoryServices.DirectoryEntry.SchemaClassName
  - System.DirectoryServices.DirectoryEntry.SchemaEntry
  - System.DirectoryServices.DirectoryEntry.UsePropertyCache
  - System.DirectoryServices.DirectoryEntry.Username
  langs:
  - csharp
  name: DirectoryEntry
  nameWithType: DirectoryEntry
  fullName: System.DirectoryServices.DirectoryEntry
  type: Class
  summary: "DirectoryEntry 클래스 노드 또는 Active Directory 도메인 서비스 계층 구조에서 개체를 캡슐화합니다."
  remarks: "이 클래스를 사용 하 여 개체에 바인딩 또는 읽고 특성을 업데이트 합니다. DirectoryEntry, 도우미 클래스와 함께 지원 수명 주기에 대 한 관리 및 탐색 방법을 제공합니다. 여기에 만들기, 삭제, 이름 바꾸기, 자식 노드를 이동 및 열거 자식을 포함 합니다. 노드를 수정한 후에 트리에 저장 하려면에서 변경 내용을 커밋해야 합니다. 자세한 내용은 참조는 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>속성.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>       DirectoryEntry는 스키마 항목에서 일반 항목 및 일부는 아니지만 일부, 정보에 액세스할 데 사용할 수 있습니다.       최대 몇 천 노드에서 Active Directory 도메인 서비스 계층에 포함 되어 있습니다. 각 노드는 네트워크 프린터 또는 도메인 사용자 등의 개체를 나타냅니다. 회사 네트워크에는 지속적으로 새 직원을 채용 하 고 컴퓨터 및 네트워크 프린터와 같은 개체를 추가 하는 대로 변경 합니다. Active Directory 서비스 인터페이스 (ADSI) 기술은 프로그래밍 방식으로 디렉터리 트리를 이러한 개체를 추가 하는 방법을 제공 합니다.       계층의 디렉터리 항목을 만들려면 사용는 <xref:System.DirectoryServices.DirectoryEntry.Children%2A>속성.</xref:System.DirectoryServices.DirectoryEntry.Children%2A> <xref:System.DirectoryServices.DirectoryEntry.Children%2A>속성은 제공 하는 컬렉션 한 <xref:System.DirectoryServices.DirectoryEntries.Add%2A>노드 컬렉션에 바인딩된 현재 부모 노드 바로 아래에 추가 하는 메서드.</xref:System.DirectoryServices.DirectoryEntries.Add%2A> </xref:System.DirectoryServices.DirectoryEntry.Children%2A> 컬렉션에 노드를 추가할 때는 노드와 연관 시킬 스키마 서식 파일의 이름과 새 노드에 대 한 이름을 지정 해야 합니다. 예를 들어 다음 계층에 새 컴퓨터를 추가 하려면 &quot;설치 컴퓨터&quot; 라는 스키마를 사용 하는 것이 좋습니다.       이 클래스도 포함 특성 캐싱, 네트워크 트래픽을 최적화 하는 데 유용할 수 있습니다. 특성 캐시를 사용 하려면 참조는 <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>속성.</xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>       Active Directory 도메인 서비스 서비스 공급자를 사용 하 여 DirectoryEntry 구성 요소와 관련 된 클래스를 사용할 수 있습니다. 현재 공급자의 일부는 인터넷 정보 서비스 (IIS), LDAP Lightweight Directory Access Protocol (), Novell NetWare 디렉터리 서비스 (NDS), 및 WinNT 합니다.      > [!NOTE] >이 클래스를 사용 하기 전에 Active Directory 도메인 서비스에 대 한 기본적인 지식이 있다고 가정 합니다. 자세한 내용은 참조는 <xref:System.DirectoryServices?displayProperty=fullName>네임 스페이스 개요.</xref:System.DirectoryServices?displayProperty=fullName>"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.DirectoryServices.Design.DirectoryEntryConverter))]

      [System.DirectoryServices.DSDescription("DirectoryEntryDesc")]

      public class DirectoryEntry : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor
  id: '#ctor'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry()
  nameWithType: DirectoryEntry.DirectoryEntry()
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry()
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 클래스입니다."
  syntax:
    content: public DirectoryEntry ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(Object)
  nameWithType: DirectoryEntry.DirectoryEntry(Object)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(Object)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 지정 된 네이티브 Active Directory 도메인 서비스 개체에 바인딩되는 클래스입니다."
  remarks: "이 생성자를 사용 하면 프로그램 메서드와 속성을 사용 하는 <xref:System.DirectoryServices.DirectoryEntry>네이티브 API 통해 Iad 인터페이스를 구현 하는 네이티브 Active Directory 도메인 서비스 개체에는 클래스입니다.</xref:System.DirectoryServices.DirectoryEntry> IADs 인터페이스에 대 한 자세한 내용은 항목을 참조 하십시오. [IADs](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) MSDN library에서 [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)합니다."
  syntax:
    content: public DirectoryEntry (object adsObject);
    parameters:
    - id: adsObject
      type: System.Object
      description: "바인딩할 네이티브 Active Directory 도메인 서비스 개체의 이름입니다."
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(String)
  nameWithType: DirectoryEntry.DirectoryEntry(String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 지정된 된 경로에 있는 Active Directory 도메인 서비스의 노드에이 인스턴스를 바인딩하는 클래스입니다."
  remarks: ''
  example:
  - "The following example binds a <xref:System.DirectoryServices.DirectoryEntry> object to the directory entry at the specified path, and displays the <xref:System.DirectoryServices.DirectoryEntry.Path%2A> property of each child entry that is specified by the node's <xref:System.DirectoryServices.DirectoryEntry.Children%2A> property.  \n  \n```vb  \nPublic Class PrintChildren  \n  \n    'Entry point which delegates to C-style main Private Function.  \n    Public Overloads Shared Sub Main()  \n        Main(System.Environment.GetCommandLineArgs())  \n    End Sub  \n  \n    Overloads Public Shared Sub Main(args() As String)  \n        Dim objDE As DirectoryEntry  \n        Dim strPath As String = \"LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n        If args.Length > 0 Then  \n            strPath = args(1)  \n        End If   \n        ' Create a new DirectoryEntry with the given path.  \n        objDE = New DirectoryEntry(strPath)  \n  \n        Dim objChildDE As DirectoryEntry  \n        For Each objChildDE In  objDE.Children  \n            Console.WriteLine(objChildDE.Path)  \n        Next objChildDE  \n    End Sub 'Main  \nEnd Class 'PrintChildren  \n  \n```  \n  \n```c#  \npublic class PrintChildren{  \n   public static void Main(String[] args)  \n   {  \n      DirectoryEntry objDE;  \n      String strPath=\"LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n      if(args.Length>0)strPath=args[1];  \n  \n      // Create a new DirectoryEntry with the given path.  \n      objDE=new DirectoryEntry(strPath);  \n  \n      foreach(DirectoryEntry objChildDE in objDE.Children)  \n        Console.WriteLine(objChildDE.Path);  \n   }  \n }  \n  \n```  \n  \n```cpp#  \nint main()  \n{  \n    String^ args[] = Environment::GetCommandLineArgs();  \n    DirectoryEntry^ objDE;  \n    String^ strPath = \"LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n    if(args->Length>1)  \n    {  \n        strPath=args[1];  \n    }  \n  \n    // Create a new DirectoryEntry with the given path.  \n    objDE = gcnew DirectoryEntry(strPath);  \n  \n    System::Collections::IEnumerator^ enum0 = objDE->Children->GetEnumerator();  \n    while (enum0->MoveNext())  \n    {  \n        DirectoryEntry^ objChildDE = safe_cast<DirectoryEntry^>(enum0->Current);  \n        Console::WriteLine(objChildDE->Path);  \n    }  \n}  \n  \n```"
  syntax:
    content: public DirectoryEntry (string path);
    parameters:
    - id: path
      type: System.String
      description: "에 DirectoryEntry 디렉터리에 바인딩되는 경로입니다. <xref:System.DirectoryServices.DirectoryEntry.Path*>속성은이 값으로 초기화 합니다.</xref:System.DirectoryServices.DirectoryEntry.Path*>"
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(String,String,String)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 클래스입니다."
  syntax:
    content: public DirectoryEntry (string path, string username, string password);
    parameters:
    - id: path
      type: System.String
      description: "이 경로 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>합니다. <xref:System.DirectoryServices.DirectoryEntry.Path*>속성은이 값으로 초기화 합니다.</xref:System.DirectoryServices.DirectoryEntry.Path*>"
    - id: username
      type: System.String
      description: "클라이언트를 인증할 때 사용할 사용자 이름입니다. <xref:System.DirectoryServices.DirectoryEntry.Username*>속성은이 값으로 초기화 합니다.</xref:System.DirectoryServices.DirectoryEntry.Username*>"
    - id: password
      type: System.String
      description: "클라이언트를 인증할 때 사용할 암호입니다. <xref:System.DirectoryServices.DirectoryEntry.Password*>속성은이 값으로 초기화 합니다.</xref:System.DirectoryServices.DirectoryEntry.Password*>"
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)
  id: '#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(String,String,String,AuthenticationTypes)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 클래스입니다."
  syntax:
    content: public DirectoryEntry (string path, string username, string password, System.DirectoryServices.AuthenticationTypes authenticationType);
    parameters:
    - id: path
      type: System.String
      description: "이 경로 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>합니다. <xref:System.DirectoryServices.DirectoryEntry.Path*>속성은이 값으로 초기화 합니다.</xref:System.DirectoryServices.DirectoryEntry.Path*>"
    - id: username
      type: System.String
      description: "클라이언트를 인증할 때 사용할 사용자 이름입니다. <xref:System.DirectoryServices.DirectoryEntry.Username*>속성은이 값으로 초기화 합니다.</xref:System.DirectoryServices.DirectoryEntry.Username*>"
    - id: password
      type: System.String
      description: "클라이언트를 인증할 때 사용할 암호입니다. <xref:System.DirectoryServices.DirectoryEntry.Password*>속성은이 값으로 초기화 합니다.</xref:System.DirectoryServices.DirectoryEntry.Password*>"
    - id: authenticationType
      type: System.DirectoryServices.AuthenticationTypes
      description: "중 하나는 <xref href=&quot;System.DirectoryServices.AuthenticationTypes&quot;> </xref> 값입니다. <xref:System.DirectoryServices.DirectoryEntry.AuthenticationType*>속성은이 값으로 초기화 합니다.</xref:System.DirectoryServices.DirectoryEntry.AuthenticationType*>"
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.AuthenticationType
  id: AuthenticationType
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: AuthenticationType
  nameWithType: DirectoryEntry.AuthenticationType
  fullName: System.DirectoryServices.DirectoryEntry.AuthenticationType
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "사용할 인증 유형을 가져오거나 설정 합니다."
  remarks: "이전에 [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)], 기본값은 <xref:System.DirectoryServices.AuthenticationTypes>.</xref:System.DirectoryServices.AuthenticationTypes> 부터는 [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)], 기본값은 <xref:System.DirectoryServices.AuthenticationTypes>.</xref:System.DirectoryServices.AuthenticationTypes>"
  syntax:
    content: public System.DirectoryServices.AuthenticationTypes AuthenticationType { get; set; }
    return:
      type: System.DirectoryServices.AuthenticationTypes
      description: "중 하나는 <xref href=&quot;System.DirectoryServices.AuthenticationTypes&quot;> </xref> 값입니다."
  overload: System.DirectoryServices.DirectoryEntry.AuthenticationType*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Children
  id: Children
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Children
  nameWithType: DirectoryEntry.Children
  fullName: System.DirectoryServices.DirectoryEntry.Children
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Active Directory 도메인 서비스 계층의 자식이 노드의 항목을 가져옵니다."
  remarks: "자식 항목은이 노드의 직계 자식만 합니다.       찾을 검색을 만들거나, 디렉터리 항목 계층 구조에서이 속성을 사용 합니다. 이 속성은 일반 반복 기능과 함께 제공 하는 컬렉션 한 <xref:System.DirectoryServices.DirectoryEntries.Add%2A>노드 컬렉션에 바인딩된 현재 부모 노드 바로 아래에 추가 하는 메서드.</xref:System.DirectoryServices.DirectoryEntries.Add%2A> 컬렉션에 노드를 추가할 때는 노드와 연관 시킬 스키마 서식 파일의 이름과 새 노드에 대 한 이름을 지정 해야 합니다. 예를 들어 다음 계층에 새 컴퓨터를 추가 하려면 &quot;설치 컴퓨터&quot; 라는 스키마를 사용 하는 것이 좋습니다.      > [!NOTE] > 기본적으로에 변경 내용이 로컬로 캐시 합니다. 수정 하거나 노드 추가 후에 호출 해야 합니다는 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>트리에 저장 하려면에서 변경 내용을 적용 하려면 메서드.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> 호출 하는 경우 <xref:System.DirectoryServices.DirectoryEntry.RefreshCache>호출 하기 전에 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>을 속성 캐시에 커밋되지 않은 변경 내용이 손실 됩니다.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.RefreshCache> 자세한 내용은 참조는 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>및 <xref:System.DirectoryServices.DirectoryEntry.RefreshCache>메서드 및 <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>속성.</xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> </xref:System.DirectoryServices.DirectoryEntry.RefreshCache> </xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>"
  syntax:
    content: public System.DirectoryServices.DirectoryEntries Children { get; }
    return:
      type: System.DirectoryServices.DirectoryEntries
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntries&quot;> </xref> Active Directory 도메인 서비스 계층 구조에서이 노드의 자식 항목을 포함 하는 개체입니다."
  overload: System.DirectoryServices.DirectoryEntry.Children*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Close
  id: Close
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Close()
  nameWithType: DirectoryEntry.Close()
  fullName: System.DirectoryServices.DirectoryEntry.Close()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "닫습니다는 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 개체를이 구성 요소와 연결 된 시스템 리소스를 해제 합니다."
  remarks: "가비지 수집을 대기 하지 않고 관리 되지 않는 시스템 리소스를 해제 하려면이 메서드를 호출 합니다.       나오는 닫기, 모든 작업에 대 한 호출에는 <xref:System.DirectoryServices.DirectoryEntry>예외가 발생할 수 있습니다.</xref:System.DirectoryServices.DirectoryEntry>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.Close*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.CommitChanges
  id: CommitChanges
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: CommitChanges()
  nameWithType: DirectoryEntry.CommitChanges()
  fullName: System.DirectoryServices.DirectoryEntry.CommitChanges()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "내부 디렉터리 저장소 디렉터리 항목에 대 한 변경 내용을 저장 합니다."
  remarks: "기본적으로 속성에 변경 내용이 로컬로 캐시 하 고 속성 값을 읽을 수는 첫 번째 읽은 후에 캐시 됩니다. 자세한 내용은 <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>.</xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> 을 참조 하십시오.       캐시에 대 한 변경 내용 속성 뿐만 아니라 호출 <xref:System.DirectoryServices.DirectoryEntries.Add%2A>(새로 만든 경우).</xref:System.DirectoryServices.DirectoryEntries.Add%2A>      > [!CAUTION] > 호출 하는 경우 <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>CommitChanges를 호출 하기 전에 속성 캐시에 커밋되지 않은 변경 내용이 손실 됩니다.</xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>      ## 보안-사용 된 <xref:System.DirectoryServices.DirectoryServicesPermission>읽기, 쓰기, 삭제, 변경 및 Active Directory 도메인 서비스 계층에 추가 대 한 클래스입니다.</xref:System.DirectoryServices.DirectoryServicesPermission> 연관 된 열거형: <xref:System.DirectoryServices.DirectoryServicesPermissionAccess>.</xref:System.DirectoryServices.DirectoryServicesPermissionAccess>"
  syntax:
    content: public void CommitChanges ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.CommitChanges*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)
  id: CopyTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: CopyTo(DirectoryEntry)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "지정 된 부모의 자식으로이 항목의 복사본을 만듭니다."
  remarks: "경우 <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>은 `true`, 호출 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>영구의 복사본을 만드는 새 개체에.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>       LDAP Lightweight Directory Access Protocol () 공급자는 CopyTo 메서드를 현재 지원 하지 않습니다."
  syntax:
    content: public System.DirectoryServices.DirectoryEntry CopyTo (System.DirectoryServices.DirectoryEntry newParent);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "고유 이름을 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 만들어지는 복사본의 부모가 될 개체입니다."
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 새 부모의 자식으로이 항목의 복사본을 나타내는 개체입니다."
  overload: System.DirectoryServices.DirectoryEntry.CopyTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "지정 된 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 컨테이너가 아닌 합니다."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  id: CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: CopyTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "이 파일의 복사본을 만듭니다 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 개체에서 지정 된 부모의 자식 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 개체와 새 이름 지정된 합니다."
  remarks: "LDAP Lightweight Directory Access Protocol () 공급자는이 메서드를 현재 지원 하지 않습니다.       경우 <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>은 `true`, 호출 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>영구의 복사본을 만드는 새 개체에.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry CopyTo (System.DirectoryServices.DirectoryEntry newParent, string newName);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "DN는 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 만들어지는 복사본의 부모가 될 개체입니다."
    - id: newName
      type: System.String
      description: "이 항목의 복사본의 이름입니다."
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "지정 된 부모의 자식으로이 항목의 이름이 변경 된 복사본입니다."
  overload: System.DirectoryServices.DirectoryEntry.CopyTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "지정 된 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 개체가 컨테이너가 아닙니다."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.DeleteTree
  id: DeleteTree
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DeleteTree()
  nameWithType: DirectoryEntry.DeleteTree()
  fullName: System.DirectoryServices.DirectoryEntry.DeleteTree()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Active Directory 도메인 서비스 계층에서이 항목 및의 전체 하위 트리를 삭제합니다."
  remarks: "서비스 인터페이스 ADSI (Active Directory) 시스템 제공 공급자만 LDAP Lightweight Directory Access Protocol () 현재이 작업을 지원합니다.      > [!CAUTION] > 항목의 전체 하위 트리 Active Directory 도메인 서비스 계층에서 삭제 됩니다.      ## 보안-사용 <xref:System.DirectoryServices.DirectoryServicesPermission>Active Directory 도메인 서비스 계층 구조에서 항목을 삭제 하기 위한.</xref:System.DirectoryServices.DirectoryServicesPermission> 연관 된 열거형: <xref:System.DirectoryServices.DirectoryServicesPermissionAccess?displayProperty=fullName>.</xref:System.DirectoryServices.DirectoryServicesPermissionAccess?displayProperty=fullName>"
  syntax:
    content: public void DeleteTree ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.DeleteTree*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "지정 된 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 컨테이너가 아닌 합니다."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DirectoryEntry.Dispose(Boolean)
  fullName: System.DirectoryServices.DirectoryEntry.Dispose(Boolean)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "리소스 (메모리 제외)에서 사용 되는 삭제는 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>합니다."
  remarks: "이 메서드는 public <xref:System.ComponentModel.Component.Dispose%2A>메서드 및 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> <xref:System.ComponentModel.Component.Dispose%2A>보호 된 Dispose 메서드를 호출 하는 `disposing` 매개 변수 설정 `true`합니다.</xref:System.ComponentModel.Component.Dispose%2A> <xref:System.Object.Finalize%2A>호출 <xref:System.ComponentModel.Component.Dispose%2A>와 `disposing` 로 설정 `false`.</xref:System.ComponentModel.Component.Dispose%2A></xref:System.Object.Finalize%2A>       경우는 `disposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하 고 있는 모든 리소스를 해제 합니다.이 <xref:System.DirectoryServices.DirectoryEntry>개체에서 참조.</xref:System.DirectoryServices.DirectoryEntry> 이 메서드 호출의 <xref:System.ComponentModel.Component.Dispose%2A>각 참조 된 개체의.</xref:System.ComponentModel.Component.Dispose%2A>       에 대 한 자세한 내용은 <xref:System.ComponentModel.Component.Dispose%2A>및 <xref:System.Object.Finalize%2A>메서드 참조 [Finalize 메서드를 재정의](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.DirectoryServices.DirectoryEntry.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Exists(System.String)
  id: Exists(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Exists(String)
  nameWithType: DirectoryEntry.Exists(String)
  fullName: System.DirectoryServices.DirectoryEntry.Exists(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "지정 된 경로가 디렉터리 서비스의 실제 항목을 나타내는지 여부를 결정 합니다."
  remarks: ''
  example:
  - "The following example takes one argument and determines whether the path corresponds to a valid <xref:System.DirectoryServices.DirectoryEntry>.  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n' Determine whether the given path is correct for the DirectoryEntry.  \nIf DirectoryEntry.Exists(myADSPath) Then  \n   Console.WriteLine(\"The path {0} is valid\",myADSPath)  \nElse  \n   Console.WriteLine(\"The path {0} is invalid\",myADSPath)  \nEnd If  \n  \n```  \n  \n```c#  \nstring myADSPath =\"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Determine whether the given path is correct for the DirectoryEntry.  \nif (DirectoryEntry.Exists(myADSPath))  \n{  \n    Console.WriteLine(\"The path {0} is valid\",myADSPath);  \n}  \n    else  \n{  \n    Console.WriteLine(\"The path {0} is invalid\",myADSPath);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n// Determine whether the given path is correct for the DirectoryEntry.  \nif (DirectoryEntry::Exists(myADSPath))   \n{  \n    Console::WriteLine(\"The path {0} is valid\", myADSPath);  \n}   \nelse   \n{  \n    Console::WriteLine(\"The path {0} is invalid\", myADSPath);  \n}  \n  \n```"
  syntax:
    content: public static bool Exists (string path);
    parameters:
    - id: path
      type: System.String
      description: "확인할 항목의 경로입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 경로가 디렉터리 서비스의 유효한 항목을 나타내는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.DirectoryServices.DirectoryEntry.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Guid
  id: Guid
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Guid
  nameWithType: DirectoryEntry.Guid
  fullName: System.DirectoryServices.DirectoryEntry.Guid
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "GUID를 가져옵니다는 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>합니다."
  remarks: "Active Directory 도메인 서비스에서 개체를 바인딩할 때 사용 된 <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A>속성.</xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A>"
  example:
  - "The following example demonstrates the Guid and <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and displays its Guid and <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> properties.  \n  \n```vb  \nDim myADSPath As [String] = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \n  \n' Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\" + myDirectoryEntry.Guid.ToString)  \nConsole.WriteLine(\"The Native GUID of the ADS\" + \"object:\" + myDirectoryEntry.NativeGuid)  \n  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\"+  \n                  myDirectoryEntry.Guid);  \nConsole.WriteLine(\"The Native GUID of the ADS\"+  \n                  \"object:\"+myDirectoryEntry.NativeGuid);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole::WriteLine(\"The GUID of the ADS object: {0}\", myDirectoryEntry->Guid);  \nConsole::WriteLine(\"The Native GUID of the ADS object: {0}\",  \n                   myDirectoryEntry->NativeGuid);  \n  \n```"
  syntax:
    content: public Guid Guid { get; }
    return:
      type: System.Guid
      description: "A <xref:System.Guid>의 GUID를 나타내는 구조는 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>.</xref:System.Guid>"
  overload: System.DirectoryServices.DirectoryEntry.Guid*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])
  id: Invoke(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Invoke(String,Object[])
  nameWithType: DirectoryEntry.Invoke(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.Invoke(String,Object[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "네이티브 Active Directory 도메인 서비스 개체에 대 한 메서드를 호출합니다."
  remarks: "네이티브 메서드의 반환 값에 해당 하는 Iad 인터페이스를 구현 하는 경우 <xref:System.DirectoryServices.DirectoryEntry>반환 됩니다.</xref:System.DirectoryServices.DirectoryEntry> IADs 인터페이스에 대 한 자세한 내용은 항목을 참조 하십시오. [IADs](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) MSDN library에서 [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp)합니다."
  syntax:
    content: public object Invoke (string methodName, object[] args);
    parameters:
    - id: methodName
      type: System.String
      description: "호출할 메서드의 이름입니다."
    - id: args
      type: System.Object[]
      description: "형식의 배열 <xref:System.Object>호출할 메서드의 인수를 포함 하는 개체입니다.</xref:System.Object>"
    return:
      type: System.Object
      description: "호출 된 메서드의 반환 값입니다."
  overload: System.DirectoryServices.DirectoryEntry.Invoke*
  exceptions:
  - type: System.DirectoryServices.DirectoryServicesCOMException
    commentId: T:System.DirectoryServices.DirectoryServicesCOMException
    description: "네이티브 메서드에서 <xref:System.Runtime.InteropServices.COMException>예외.</xref:System.Runtime.InteropServices.COMException>"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "네이티브 메서드에서 <xref:System.Reflection.TargetInvocationException>예외.</xref:System.Reflection.TargetInvocationException> <xref:System.Exception.InnerException*>속성을 포함 한 <xref:System.Runtime.InteropServices.COMException>실제 발생 한 오류에 대 한 정보를 포함 하는 예외입니다.</xref:System.Runtime.InteropServices.COMException> </xref:System.Exception.InnerException*>"
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)
  id: InvokeGet(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: InvokeGet(String)
  nameWithType: DirectoryEntry.InvokeGet(String)
  fullName: System.DirectoryServices.DirectoryEntry.InvokeGet(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "네이티브 Active Directory 도메인 서비스 개체에서 속성을 가져옵니다."
  remarks: "이 메서드는 사용할 수 없습니다. <xref:System.DirectoryServices.DirectoryEntry.Properties%2A>속성의 속성에 액세스 하는 데 사용 해야는 <xref:System.DirectoryServices.DirectoryEntry>개체입니다.</xref:System.DirectoryServices.DirectoryEntry> </xref:System.DirectoryServices.DirectoryEntry.Properties%2A>"
  syntax:
    content: public object InvokeGet (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "가져올 속성의 이름입니다."
    return:
      type: System.Object
      description: "요청 된 속성을 나타내는 개체입니다."
  overload: System.DirectoryServices.DirectoryEntry.InvokeGet*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])
  id: InvokeSet(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: InvokeSet(String,Object[])
  nameWithType: DirectoryEntry.InvokeSet(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.InvokeSet(String,Object[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "네이티브 Active Directory 도메인 서비스 개체의 속성을 설정 합니다."
  remarks: "이 메서드는 사용할 수 없습니다. <xref:System.DirectoryServices.DirectoryEntry.Properties%2A>속성의 속성에 액세스 하는 데 사용 해야는 <xref:System.DirectoryServices.DirectoryEntry>개체입니다.</xref:System.DirectoryServices.DirectoryEntry> </xref:System.DirectoryServices.DirectoryEntry.Properties%2A>"
  syntax:
    content: public void InvokeSet (string propertyName, object[] args);
    parameters:
    - id: propertyName
      type: System.String
      description: "설정할 속성의 이름입니다."
    - id: args
      type: System.Object[]
      description: "설정할 Active Directory 도메인 서비스 개체입니다."
  overload: System.DirectoryServices.DirectoryEntry.InvokeSet*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)
  id: MoveTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: MoveTo(DirectoryEntry)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "이 이동 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 를 지정한 부모 개체입니다."
  remarks: "경우 <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>은 `true`, 호출 된 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>영구적 이동 수 있도록 새 개체의 메서드를.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>"
  syntax:
    content: public void MoveTo (System.DirectoryServices.DirectoryEntry newParent);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "이 항목을 이동 하려면 부모입니다."
  overload: System.DirectoryServices.DirectoryEntry.MoveTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "지정 된 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 컨테이너가 아닌 합니다."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  id: MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: MoveTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "이 이동 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 개체를 지정 된 부모로 지정된 된 값에 해당 이름을 변경 합니다."
  remarks: "경우 <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>은 `true`, 호출 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>영구 이동 하 게 새 개체에.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>"
  syntax:
    content: public void MoveTo (System.DirectoryServices.DirectoryEntry newParent, string newName);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "이 항목을 이동 하려면 부모입니다."
    - id: newName
      type: System.String
      description: "이 항목의 새 이름입니다."
  overload: System.DirectoryServices.DirectoryEntry.MoveTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "지정 된 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 컨테이너가 아닌 합니다."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Name
  id: Name
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Name
  nameWithType: DirectoryEntry.Name
  fullName: System.DirectoryServices.DirectoryEntry.Name
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "기본 디렉터리 서비스와 이름이 같은 개체의 이름을 가져옵니다."
  remarks: "이 이름, 방향으로 표시 된 <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A>, 형제 항목에서이 항목을 구별 하 고 각 컨테이너에 있는 형제 사이에서 고유 해야 합니다.</xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A>"
  example:
  - "The following example creates a <xref:System.DirectoryServices.DirectoryEntry> for the node in the Active Directory Domain Services. It then displays the Name and <xref:System.DirectoryServices.DirectoryEntry.Path%2A> properties of its child nodes.  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,  \n           _DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \n  \nConsole.WriteLine(\"DirectoryEntry Name :\" + myDirectoryEntry.Name)  \nConsole.WriteLine(ControlChars.NewLine _  \n        + \"The child entries for this node in the Active Directory Domain Services hierarchy\")  \n  \nDim myDirectoryEntryChild As DirectoryEntry  \nFor Each myDirectoryEntryChild In  myDirectoryEntry.Children  \n   Console.WriteLine(myDirectoryEntryChild.Path)  \nNext myDirectoryEntryChild  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,  \n             DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  \n  \nConsole.WriteLine(\"DirectoryEntry Name :\"+ myDirectoryEntry.Name);  \nConsole.WriteLine(\"\\nThe child entries for this node \"+  \n   \"in the Active Directory Domain Services hierarchy\");  \n  \nforeach(DirectoryEntry myDirectoryEntryChild in  \n   myDirectoryEntry.Children)  \n{  \n   Console.WriteLine(myDirectoryEntryChild.Path);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \n  \nConsole::WriteLine(\"DirectoryEntry Name : {0}\", myDirectoryEntry->Name);  \nConsole::WriteLine(\"\\nThe child entries for this node in the Active Directory Domain Services hierarchy\");  \n  \nCollections::IEnumerator^ myEnumerator = myDirectoryEntry->Children->GetEnumerator();  \nwhile (myEnumerator->MoveNext())   \n{  \n    DirectoryEntry^ myDirectoryEntryChild = safe_cast<DirectoryEntry^>(myEnumerator->Current);  \n    Console::WriteLine(myDirectoryEntryChild->Path);  \n}  \n```"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "기본 디렉터리 서비스와 이름이 같은 개체의 이름입니다."
  overload: System.DirectoryServices.DirectoryEntry.Name*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.NativeGuid
  id: NativeGuid
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: NativeGuid
  nameWithType: DirectoryEntry.NativeGuid
  fullName: System.DirectoryServices.DirectoryEntry.NativeGuid
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "GUID를 가져옵니다는 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>에서 공급자에서 반환 합니다."
  remarks: "Active Directory 도메인 서비스에서 개체를 바인딩할 경우 NativeGuid 속성을 사용 합니다.      > [!NOTE] > Lightweight Directory Access Protocol (LDAP) 공급자의 전역 고유 식별자를 반환 합니다.는 <xref:System.DirectoryServices.DirectoryEntry>인터넷 정보 서비스 (IIS), Novell NetWare 디렉터리 서버 (NDS) 및 WinNT 공급자 보다 다른 형식으로.</xref:System.DirectoryServices.DirectoryEntry>"
  example:
  - "The following example demonstrates the <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> and NativeGuid properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and displays its <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> and NativeGuid properties.  \n  \n```vb  \nDim myADSPath As [String] = \"LDAP://onecity/CN=Users,  \n             DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \n  \n' Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\" + myDirectoryEntry.Guid.ToString)  \nConsole.WriteLine(\"The Native GUID of the ADS\" + \"object:\" +   \n             myDirectoryEntry.NativeGuid)  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,  \n             DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\"+  \n                  myDirectoryEntry.Guid);  \nConsole.WriteLine(\"The Native GUID of the ADS\"+  \n                  \"object:\"+myDirectoryEntry.NativeGuid);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole::WriteLine(\"The GUID of the ADS object: {0}\", myDirectoryEntry->Guid));  \nConsole::WriteLine(\"The Native GUID of the ADS object: {0}\",  \n                   myDirectoryEntry->NativeGuid);  \n```"
  syntax:
    content: public string NativeGuid { get; }
    return:
      type: System.String
      description: "A <xref:System.Guid>의 GUID를 나타내는 구조는 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>공급자가 반환한,.</xref:System.Guid>"
  overload: System.DirectoryServices.DirectoryEntry.NativeGuid*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.NativeObject
  id: NativeObject
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: NativeObject
  nameWithType: DirectoryEntry.NativeObject
  fullName: System.DirectoryServices.DirectoryEntry.NativeObject
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "네이티브 ADSI Active Directory 서비스 인터페이스 () 개체를 가져옵니다."
  remarks: "이 속성을 COM 인터페이스를 사용 하려는 경우에 Iad 인터페이스를 구현 하는 네이티브 Active Directory 도메인 서비스 개체를 캐스팅을 사용 합니다. IADs 인터페이스에 대 한 자세한 내용은 항목을 참조 하십시오. [IADs](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) MSDN library에서 [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp)합니다.       이 개체는 구현할 수 없는 고급 시나리오에는 <xref:System.DirectoryServices?displayProperty=fullName>클래스 단독.</xref:System.DirectoryServices?displayProperty=fullName> 이 기능을 사용 하려면 Iad 제품군에서 COM 인터페이스 중 하나를 가져와 다음이 속성을 해당 인터페이스를 캐스팅 해야 합니다."
  syntax:
    content: public object NativeObject { get; }
    return:
      type: System.Object
      description: "네이티브 ADSI 개체입니다."
  overload: System.DirectoryServices.DirectoryEntry.NativeObject*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.ObjectSecurity
  id: ObjectSecurity
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: ObjectSecurity
  nameWithType: DirectoryEntry.ObjectSecurity
  fullName: System.DirectoryServices.DirectoryEntry.ObjectSecurity
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "이 항목에 대 한 보안 설명자를 가져오거나 설정 합니다."
  syntax:
    content: public System.DirectoryServices.ActiveDirectorySecurity ObjectSecurity { get; set; }
    return:
      type: System.DirectoryServices.ActiveDirectorySecurity
      description: "<xref href=&quot;System.DirectoryServices.ActiveDirectorySecurity&quot;> </xref> 이 디렉터리 항목에 대 한 보안 설명자를 나타내는 개체입니다."
  overload: System.DirectoryServices.DirectoryEntry.ObjectSecurity*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Options
  id: Options
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Options
  nameWithType: DirectoryEntry.Options
  fullName: System.DirectoryServices.DirectoryEntry.Options
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "이 항목에 대 한 공급자별 옵션을 가져옵니다."
  syntax:
    content: public System.DirectoryServices.DirectoryEntryConfiguration Options { get; }
    return:
      type: System.DirectoryServices.DirectoryEntryConfiguration
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntryConfiguration&quot;> </xref> 이 항목에 대 한 공급자별 옵션을 포함 하는 개체입니다."
  overload: System.DirectoryServices.DirectoryEntry.Options*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Parent
  id: Parent
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Parent
  nameWithType: DirectoryEntry.Parent
  fullName: System.DirectoryServices.DirectoryEntry.Parent
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Active Directory 도메인 서비스 계층 구조에서이 항목의이 부모를 가져옵니다."
  remarks: ''
  example:
  - "The following example searches a given <xref:System.DirectoryServices.DirectoryEntry> and displays the <xref:System.DirectoryServices.DirectoryEntry.Name%2A> and Parent of the result.  \n  \n```vb  \nDim myADSPath As String = _   \n          \"LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  \n  \nConsole.WriteLine(\"Parent is :\" + myDirectoryEntry.Parent.Path)  \n  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \nConsole.WriteLine(\"Parent is :\"+myDirectoryEntry.Parent.Path);  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \nConsole::WriteLine(\"Parent is :{0}\", myDirectoryEntry->Parent->Path);  \n  \n```"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry Parent { get; }
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 이 항목의 부모를 나타내는 개체입니다."
  overload: System.DirectoryServices.DirectoryEntry.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Password
  id: Password
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Password
  nameWithType: DirectoryEntry.Password
  fullName: System.DirectoryServices.DirectoryEntry.Password
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "클라이언트를 인증할 때 사용할 암호를 설정 합니다."
  remarks: "설정할 수 있습니다는 <xref:System.DirectoryServices.DirectoryEntry.Username%2A>및 암호 속성을 Active Directory 도메인 서비스의 정보에 액세스할 수 있는 대체 자격 증명을 지정 합니다.</xref:System.DirectoryServices.DirectoryEntry.Username%2A> 다른 모든 <xref:System.DirectoryServices.DirectoryEntry>이 인스턴스에서 검색 개체 (예: 전자 <xref:System.DirectoryServices.DirectoryEntry.Children%2A>) 동일한 대체 자격 증명을 사용 하 여 자동으로 만들어집니다.</xref:System.DirectoryServices.DirectoryEntry.Children%2A> </xref:System.DirectoryServices.DirectoryEntry>"
  example:
  - "The following example demonstrates the <xref:System.DirectoryServices.DirectoryEntry.Username%2A> and Password properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and the <xref:System.DirectoryServices.DirectoryEntry.Path%2A> of all its <xref:System.DirectoryServices.DirectoryEntry.Children%2A>.  \n  \n```vb  \nDim myADSPath As String = _  \n      \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Create an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \nmyDirectoryEntry.Username = UserName  \nmyDirectoryEntry.Password = SecurelyStoredPassword  \n  \n' Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\")  \nDim myChildDirectoryEntry As DirectoryEntry  \nFor Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n   Console.WriteLine(myChildDirectoryEntry.Path)  \nNext myChildDirectoryEntry   \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,  \n         DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath);  \nmyDirectoryEntry.Username = UserName;  \nmyDirectoryEntry.Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\");  \nforeach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n   Console.WriteLine(myChildDirectoryEntry.Path);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \nmyDirectoryEntry->Username = UserName;  \nmyDirectoryEntry->Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole::WriteLine(\"The Child ADS objects are:\");  \nCollections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \nwhile (myEnum->MoveNext())   \n{  \n    DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>  \n             (myEnum->Current);  \n    Console::WriteLine(myChildDirectoryEntry->Path);  \n}  \n  \n```"
  syntax:
    content: public string Password { set; }
    return:
      type: System.String
      description: "클라이언트를 인증할 때 사용할 암호입니다."
  overload: System.DirectoryServices.DirectoryEntry.Password*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Path
  id: Path
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Path
  nameWithType: DirectoryEntry.Path
  fullName: System.DirectoryServices.DirectoryEntry.Path
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "이 대 한 경로 가져오거나 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>합니다."
  remarks: "The Path property uniquely identifies this entry in a networked environment. This entry can always be retrieved using this Path.  \n  \n Setting the Path retrieves a new entry from the directory store; it does not change the path of the currently bound entry.  \n  \n The classes associated with the <xref:System.DirectoryServices.DirectoryEntry> component can be used with any of the Active Directory Domain Services service providers. Some of the current providers are Internet Information Services (IIS), Lightweight Directory Access Protocol (LDAP), Novell NetWare Directory Service (NDS), and WinNT.  \n  \n> [!NOTE]\n>  The section of the Path that identifies the provider (precedes \"://\") is case-sensitive. For example, \"LDAP://\" or \"WinNT://\".  \n  \n The syntax for the Path property varies according to the provider. Some common scenarios are:  \n  \n WinNT  \n  \n-   Connect to a group on a computer. For example, \"WinNT**://\\<domain name>/\\<computer name>/\\<group name>**\". If you are connecting to a local computer, \"WinNT://**\\<computer name>/\\<group name>**\".  \n  \n-   Connect to a user on a computer. For example, \"WinNT://**\\<domain name>/\\<computer name>/\\<user name>**\". If you are connecting to a local computer, \"WinNT://**\\<computer name>/\\<user name>**\".  \n  \n-   Connect to services on a computer. For example, \"WinNT://**\\<domain name>/\\<computer name>/\\<service name>**\". If you are connecting to a local computer, \"WinNT://**\\<computer name>/\\<service name>**\".  \n  \n-   Discover all domains on the network. For example, \"WinNT:\" The domains can be found by enumerating the children of this entry.  \n  \n LDAP  \n  \n-   Connect to a group in a domain. For example, \"LDAP://CN=\\<group name>, CN =\\<Users>, DC=\\<domain component>, DC=\\<domain component>,...\".  \n  \n-   Connect to a user in a domain. For example, \"LDAP://CN=\\<full user name>, CN=\\<Users>, DC=\\<domain component>, DC=\\<domain component>,...\".  \n  \n-   Connect to computers in a domain. For example, \"LDAP://CN=\\<computer name>, CN=\\<Computers>, DC=\\<domain component>, DC=\\<domain component>,...\".  \n  \n IIS  \n  \n-   Connect to a Web directory. For example, \"IIS://LocalHost/W3SVC/1/ROOT/\\<Web directory name>\".  \n  \n To bind to the current domain using LDAP, use the path \"LDAP://RootDSE\", then get the default naming context and rebind the entry. For example:  \n  \n```c#  \nString str = ent.Properties[\"defaultNamingContext\"][0];  \nDirectoryEntry domain = new DirectoryEntry(\"LDAP://\" + str);  \n```  \n  \n For more information, see the documentation for your provider and the topic [Using Active Directory Service Interfaces](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/using_adsi.asp) in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "이 경로 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 개체입니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.DirectoryServices.DirectoryEntry.Path*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Properties
  id: Properties
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Properties
  nameWithType: DirectoryEntry.Properties
  fullName: System.DirectoryServices.DirectoryEntry.Properties
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "이 대 한 Active Directory 도메인 서비스 속성을 가져옵니다 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 개체입니다."
  remarks: "속성이 초기화 되지 않은 경우 속성 ADSI 인터페이스를 호출 하는 [IADs::Get](http://msdn2.microsoft.com/library/aa746347.aspx) 캐시에서 값을 검색 하는 메서드입니다. 기본 캐시 로드 되지 않은 경우 [IADs::Get](http://msdn2.microsoft.com/library/aa746347.aspx) 암시적으로 호출 [IADs::GetInfo](http://msdn2.microsoft.com/library/aa746349.aspx)합니다. 이 메서드는 지원 되는 내부 디렉터리 저장소 캐시에 설정 하지 않은 속성의 값을 로드 합니다. 속성에 대 한 후속 호출에만 캐시의 속성 값을 검색 합니다. 호출 <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>.</xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A> 속성 캐시 로드를 제어 하려면       **참고** 에 대 한 Active Directory 클라이언트 확장 (DSClient) 사용 하기 위해 속성 속성이 지원 되지 않는 [!INCLUDE[WinNt4Family](~/add/includes/ajax-current-ext-md.md)]합니다."
  syntax:
    content: public System.DirectoryServices.PropertyCollection Properties { get; }
    return:
      type: System.DirectoryServices.PropertyCollection
      description: "A <xref href=&quot;System.DirectoryServices.PropertyCollection&quot;> </xref> 이 항목에 설정 된 속성을 포함 하는 개체입니다."
  overload: System.DirectoryServices.DirectoryEntry.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache
  id: RefreshCache
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: RefreshCache()
  nameWithType: DirectoryEntry.RefreshCache()
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "속성 값이 로드 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 속성 캐시에 개체입니다."
  remarks: >-
    > [!CAUTION]

    >  Any uncommitted changes to the property cache will be lost. Use the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method to persist changes to the directory store.
  syntax:
    content: public void RefreshCache ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.RefreshCache*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])
  id: RefreshCache(System.String[])
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: RefreshCache(String[])
  nameWithType: DirectoryEntry.RefreshCache(String[])
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache(String[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "지정된 된 속성의 값을 속성 캐시에 로드합니다."
  remarks: >-
    > [!CAUTION]

    >  Any uncommitted changes to the property cache will be lost. Use <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> to persist changes to the directory store.
  syntax:
    content: public void RefreshCache (string[] propertyNames);
    parameters:
    - id: propertyNames
      type: System.String[]
      description: "지정된 된 속성의 배열입니다."
  overload: System.DirectoryServices.DirectoryEntry.RefreshCache*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Rename(System.String)
  id: Rename(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Rename(String)
  nameWithType: DirectoryEntry.Rename(String)
  fullName: System.DirectoryServices.DirectoryEntry.Rename(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "이 항목의 이름을 변경 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 개체입니다."
  remarks: "> [!NOTE]>이 항목을 참조 하는 데 사용 되는 경로 영향이 있습니다이 있습니다.       경우 <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>은 `true`, 호출 하는 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>영구적 이동 수 있도록 새 개체의 메서드를.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>"
  syntax:
    content: public void Rename (string newName);
    parameters:
    - id: newName
      type: System.String
      description: "항목의 새 이름입니다."
  overload: System.DirectoryServices.DirectoryEntry.Rename*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.SchemaClassName
  id: SchemaClassName
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: SchemaClassName
  nameWithType: DirectoryEntry.SchemaClassName
  fullName: System.DirectoryServices.DirectoryEntry.SchemaClassName
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "이 대 한 스키마 클래스의 이름을 가져옵니다 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 개체입니다."
  remarks: "이와 동일는 <xref:System.DirectoryServices.DirectoryEntry.Name%2A>의 속성은 <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A>속성.</xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> </xref:System.DirectoryServices.DirectoryEntry.Name%2A>       A <xref:System.DirectoryServices.DirectoryEntry>속성 및 메서드에 개체의 스키마를 정의 합니다.</xref:System.DirectoryServices.DirectoryEntry>"
  example:
  - "The following example demonstrates the SchemaClassName and <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and gets all of its children if the <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> is a container object.  The <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> is a container object if the <xref:System.DirectoryServices.DirectoryEntry.Name%2A> of that object is \"container\".  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Creates an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  \n  \n' Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\" + myDirectoryEntry.SchemaClassName)  \n  \n' Gets the SchemaEntry of the ADS object.  \nDim mySchemaEntry As DirectoryEntry = myDirectoryEntry.SchemaEntry  \n  \nIf String.Compare(mySchemaEntry.Name, \"container\") = 0 Then  \n   Dim myChildDirectoryEntry As DirectoryEntry  \n   For Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n      Console.WriteLine(myChildDirectoryEntry.Path)  \n   Next  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry  myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\" + myDirectoryEntry.SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS object.  \nDirectoryEntry mySchemaEntry = myDirectoryEntry.SchemaEntry;  \n  \nif (string.Compare(mySchemaEntry.Name, \"container\") == 0)  \n{  \n   foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n      Console.WriteLine(myChildDirectoryEntry.Path);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole::WriteLine(\"Schema class name:{0}\", myDirectoryEntry->SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS Object.  \nDirectoryEntry^ mySchemaEntry = myDirectoryEntry->SchemaEntry;  \n  \nif (!String::Compare(mySchemaEntry->Name, \"container\"))   \n{  \n    Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \n    while (myEnum->MoveNext())   \n    {  \n        DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  \n        Console::WriteLine(myChildDirectoryEntry->Path);  \n    }  \n}  \n  \n```"
  syntax:
    content: public string SchemaClassName { get; }
    return:
      type: System.String
      description: "이 대 한 스키마 클래스의 이름 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 개체입니다."
  overload: System.DirectoryServices.DirectoryEntry.SchemaClassName*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.SchemaEntry
  id: SchemaEntry
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: SchemaEntry
  nameWithType: DirectoryEntry.SchemaEntry
  fullName: System.DirectoryServices.DirectoryEntry.SchemaEntry
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "이 항목에 대 한 스키마 개체를 가져옵니다."
  remarks: "항목의 스키마의 필수 및 선택적 속성 이름 목록을 확인합니다.       연결된 된 개체에서 사용할 수 있는 속성 및 메서드를 확인 하려면이 속성을 사용할 수 있습니다."
  example:
  - "The following example demonstrates the <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A> and SchemaEntry properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> object and gets all of its children if the SchemaEntry object is a container object.  The SchemaEntry is a container object if the <xref:System.DirectoryServices.DirectoryEntry.Name%2A> of that object is \"container\".  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Creates an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  \n  \n' Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\" + myDirectoryEntry.SchemaClassName)  \n  \n' Gets the SchemaEntry of the ADS object.  \nDim mySchemaEntry As DirectoryEntry = myDirectoryEntry.SchemaEntry  \n  \nIf String.Compare(mySchemaEntry.Name, \"container\") = 0 Then  \n   Dim myChildDirectoryEntry As DirectoryEntry  \n   For Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n      Console.WriteLine(myChildDirectoryEntry.Path)  \n   Next  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry  myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\"+myDirectoryEntry.SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS object.  \nDirectoryEntry mySchemaEntry = myDirectoryEntry.SchemaEntry;  \n  \nif (string.Compare(mySchemaEntry.Name,\"container\") == 0)  \n{  \n   foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n      Console.WriteLine(myChildDirectoryEntry.Path);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole::WriteLine(\"Schema class name:{0}\", myDirectoryEntry->SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS Object*.  \nDirectoryEntry^ mySchemaEntry = myDirectoryEntry->SchemaEntry;  \n  \nif (!String::Compare(mySchemaEntry->Name, S\"container\"))   \n{  \n    Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \n    while (myEnum->MoveNext())   \n    {  \n        DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  \n        Console::WriteLine(myChildDirectoryEntry->Path);  \n    }  \n}  \n  \n```"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry SchemaEntry { get; }
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> 이 항목에 대 한 스키마 클래스를 나타내는 개체입니다."
  overload: System.DirectoryServices.DirectoryEntry.SchemaEntry*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.UsePropertyCache
  id: UsePropertyCache
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: UsePropertyCache
  nameWithType: DirectoryEntry.UsePropertyCache
  fullName: System.DirectoryServices.DirectoryEntry.UsePropertyCache
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "각 작업이 끝난 후 캐시를 커밋할 수 있는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "기본적으로 속성에 변경 내용이 로컬로 캐시 하 고 속성 값을 읽을 수는 첫 번째 읽은 후에 캐시 됩니다. UsePropertyCache 속성이 `true`에 대 한 액세스는 <xref:System.DirectoryServices.DirectoryEntry>개체의 속성 빠릅니다.</xref:System.DirectoryServices.DirectoryEntry> 이 값을 설정 `false` 캐시가 각 작업이 끝난 후 커밋됩니다.       UsePropertyCache 속성이 `true` 호출 캐시 커밋 변경 하려는 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>메서드.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> 파일을 디렉터리로 변경한 후 캐시에서 값을 업데이트 하려면 호출 된 <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>메서드.</xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>      > [!CAUTION] > 호출 하는 경우 <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>호출 하기 전에 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>을 속성 캐시에 커밋되지 않은 변경 내용이 손실 됩니다.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>      > [!NOTE] > 인터넷 정보 서비스 (IIS) 공급자는 각 작업이 끝난 후 캐시를 커밋하기를 지원 하지 않습니다."
  syntax:
    content: public bool UsePropertyCache { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>캐시를 커밋하려면 각 작업이 끝난 후 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.DirectoryServices.DirectoryEntry.UsePropertyCache*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Username
  id: Username
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Username
  nameWithType: DirectoryEntry.Username
  fullName: System.DirectoryServices.DirectoryEntry.Username
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "클라이언트를 인증할 때 사용할 사용자 이름을 가져오거나 설정 합니다."
  remarks: "사용자 이름을 설정할 수 있습니다 및 <xref:System.DirectoryServices.DirectoryEntry.Password%2A>Active Directory 도메인 서비스의 정보에 액세스할 수 있는 대체 자격 증명을 지정할 수 있도록 합니다.</xref:System.DirectoryServices.DirectoryEntry.Password%2A> 다른 모든 <xref:System.DirectoryServices.DirectoryEntry>이 인스턴스에서 검색 개체 (예: 전자 <xref:System.DirectoryServices.DirectoryEntry.Children%2A>) 동일한 대체 자격 증명을 사용 하 여 자동으로 만들어집니다.</xref:System.DirectoryServices.DirectoryEntry.Children%2A> </xref:System.DirectoryServices.DirectoryEntry>"
  example:
  - "The following example demonstrates the Username and <xref:System.DirectoryServices.DirectoryEntry.Password%2A> properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and the <xref:System.DirectoryServices.DirectoryEntry.Path%2A> of all its <xref:System.DirectoryServices.DirectoryEntry.Children%2A>.  \n  \n```vb  \nDim myADSPath As String = _  \n      \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Create an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \nmyDirectoryEntry.Username = UserName  \nmyDirectoryEntry.Password = SecurelyStoredPassword  \n  \n' Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\")  \nDim myChildDirectoryEntry As DirectoryEntry  \nFor Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n   Console.WriteLine(myChildDirectoryEntry.Path)  \nNext myChildDirectoryEntry  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath);  \nmyDirectoryEntry.Username = UserName;  \nmyDirectoryEntry.Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\");  \nforeach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n   Console.WriteLine(myChildDirectoryEntry.Path);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = new DirectoryEntry(myADSPath);  \nmyDirectoryEntry->Username = UserName;  \nmyDirectoryEntry->Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole::WriteLine(\"The Child ADS objects are:\");  \nCollections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \nwhile (myEnum->MoveNext())   \n{  \n    DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  \n    Console::WriteLine(myChildDirectoryEntry->Path);  \n}  \n  \n```"
  syntax:
    content: public string Username { get; set; }
    return:
      type: System.String
      description: "클라이언트를 인증할 때 사용할 사용자 이름입니다."
  overload: System.DirectoryServices.DirectoryEntry.Username*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.DirectoryServices.DirectoryServicesCOMException
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryServicesCOMException
  nameWithType: DirectoryServicesCOMException
  fullName: System.DirectoryServices.DirectoryServicesCOMException
- uid: System.Reflection.TargetInvocationException
  isExternal: true
  name: System.Reflection.TargetInvocationException
- uid: System.DirectoryServices.DirectoryEntry.#ctor
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry()
  nameWithType: DirectoryEntry.DirectoryEntry()
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry()
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.Object)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(Object)
  nameWithType: DirectoryEntry.DirectoryEntry(Object)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(String)
  nameWithType: DirectoryEntry.DirectoryEntry(String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(String,String,String)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String)
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(String,String,String,AuthenticationTypes)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
- uid: System.DirectoryServices.AuthenticationTypes
  parent: System.DirectoryServices
  isExternal: false
  name: AuthenticationTypes
  nameWithType: AuthenticationTypes
  fullName: System.DirectoryServices.AuthenticationTypes
- uid: System.DirectoryServices.DirectoryEntry.AuthenticationType
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: AuthenticationType
  nameWithType: DirectoryEntry.AuthenticationType
  fullName: System.DirectoryServices.DirectoryEntry.AuthenticationType
- uid: System.DirectoryServices.DirectoryEntry.Children
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Children
  nameWithType: DirectoryEntry.Children
  fullName: System.DirectoryServices.DirectoryEntry.Children
- uid: System.DirectoryServices.DirectoryEntries
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntries
  nameWithType: DirectoryEntries
  fullName: System.DirectoryServices.DirectoryEntries
- uid: System.DirectoryServices.DirectoryEntry.Close
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Close()
  nameWithType: DirectoryEntry.Close()
  fullName: System.DirectoryServices.DirectoryEntry.Close()
- uid: System.DirectoryServices.DirectoryEntry.CommitChanges
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CommitChanges()
  nameWithType: DirectoryEntry.CommitChanges()
  fullName: System.DirectoryServices.DirectoryEntry.CommitChanges()
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CopyTo(DirectoryEntry)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry)
- uid: System.DirectoryServices.DirectoryEntry
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntry
  nameWithType: DirectoryEntry
  fullName: System.DirectoryServices.DirectoryEntry
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CopyTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry,String)
- uid: System.DirectoryServices.DirectoryEntry.DeleteTree
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DeleteTree()
  nameWithType: DirectoryEntry.DeleteTree()
  fullName: System.DirectoryServices.DirectoryEntry.DeleteTree()
- uid: System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DirectoryEntry.Dispose(Boolean)
  fullName: System.DirectoryServices.DirectoryEntry.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.DirectoryEntry.Exists(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Exists(String)
  nameWithType: DirectoryEntry.Exists(String)
  fullName: System.DirectoryServices.DirectoryEntry.Exists(String)
- uid: System.DirectoryServices.DirectoryEntry.Guid
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Guid
  nameWithType: DirectoryEntry.Guid
  fullName: System.DirectoryServices.DirectoryEntry.Guid
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Invoke(String,Object[])
  nameWithType: DirectoryEntry.Invoke(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.Invoke(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeGet(String)
  nameWithType: DirectoryEntry.InvokeGet(String)
  fullName: System.DirectoryServices.DirectoryEntry.InvokeGet(String)
- uid: System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeSet(String,Object[])
  nameWithType: DirectoryEntry.InvokeSet(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.InvokeSet(String,Object[])
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: MoveTo(DirectoryEntry)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry)
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: MoveTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry,String)
- uid: System.DirectoryServices.DirectoryEntry.Name
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Name
  nameWithType: DirectoryEntry.Name
  fullName: System.DirectoryServices.DirectoryEntry.Name
- uid: System.DirectoryServices.DirectoryEntry.NativeGuid
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeGuid
  nameWithType: DirectoryEntry.NativeGuid
  fullName: System.DirectoryServices.DirectoryEntry.NativeGuid
- uid: System.DirectoryServices.DirectoryEntry.NativeObject
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeObject
  nameWithType: DirectoryEntry.NativeObject
  fullName: System.DirectoryServices.DirectoryEntry.NativeObject
- uid: System.DirectoryServices.DirectoryEntry.ObjectSecurity
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: ObjectSecurity
  nameWithType: DirectoryEntry.ObjectSecurity
  fullName: System.DirectoryServices.DirectoryEntry.ObjectSecurity
- uid: System.DirectoryServices.ActiveDirectorySecurity
  parent: System.DirectoryServices
  isExternal: false
  name: ActiveDirectorySecurity
  nameWithType: ActiveDirectorySecurity
  fullName: System.DirectoryServices.ActiveDirectorySecurity
- uid: System.DirectoryServices.DirectoryEntry.Options
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Options
  nameWithType: DirectoryEntry.Options
  fullName: System.DirectoryServices.DirectoryEntry.Options
- uid: System.DirectoryServices.DirectoryEntryConfiguration
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntryConfiguration
  nameWithType: DirectoryEntryConfiguration
  fullName: System.DirectoryServices.DirectoryEntryConfiguration
- uid: System.DirectoryServices.DirectoryEntry.Parent
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Parent
  nameWithType: DirectoryEntry.Parent
  fullName: System.DirectoryServices.DirectoryEntry.Parent
- uid: System.DirectoryServices.DirectoryEntry.Password
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Password
  nameWithType: DirectoryEntry.Password
  fullName: System.DirectoryServices.DirectoryEntry.Password
- uid: System.DirectoryServices.DirectoryEntry.Path
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Path
  nameWithType: DirectoryEntry.Path
  fullName: System.DirectoryServices.DirectoryEntry.Path
- uid: System.DirectoryServices.DirectoryEntry.Properties
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Properties
  nameWithType: DirectoryEntry.Properties
  fullName: System.DirectoryServices.DirectoryEntry.Properties
- uid: System.DirectoryServices.PropertyCollection
  parent: System.DirectoryServices
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.DirectoryServices.PropertyCollection
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: RefreshCache()
  nameWithType: DirectoryEntry.RefreshCache()
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache()
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: RefreshCache(String[])
  nameWithType: DirectoryEntry.RefreshCache(String[])
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.DirectoryEntry.Rename(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Rename(String)
  nameWithType: DirectoryEntry.Rename(String)
  fullName: System.DirectoryServices.DirectoryEntry.Rename(String)
- uid: System.DirectoryServices.DirectoryEntry.SchemaClassName
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaClassName
  nameWithType: DirectoryEntry.SchemaClassName
  fullName: System.DirectoryServices.DirectoryEntry.SchemaClassName
- uid: System.DirectoryServices.DirectoryEntry.SchemaEntry
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaEntry
  nameWithType: DirectoryEntry.SchemaEntry
  fullName: System.DirectoryServices.DirectoryEntry.SchemaEntry
- uid: System.DirectoryServices.DirectoryEntry.UsePropertyCache
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: UsePropertyCache
  nameWithType: DirectoryEntry.UsePropertyCache
  fullName: System.DirectoryServices.DirectoryEntry.UsePropertyCache
- uid: System.DirectoryServices.DirectoryEntry.Username
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Username
  nameWithType: DirectoryEntry.Username
  fullName: System.DirectoryServices.DirectoryEntry.Username
- uid: System.DirectoryServices.DirectoryEntry.#ctor*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry
  nameWithType: DirectoryEntry.DirectoryEntry
- uid: System.DirectoryServices.DirectoryEntry.AuthenticationType*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: AuthenticationType
  nameWithType: DirectoryEntry.AuthenticationType
- uid: System.DirectoryServices.DirectoryEntry.Children*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Children
  nameWithType: DirectoryEntry.Children
- uid: System.DirectoryServices.DirectoryEntry.Close*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Close
  nameWithType: DirectoryEntry.Close
- uid: System.DirectoryServices.DirectoryEntry.CommitChanges*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CommitChanges
  nameWithType: DirectoryEntry.CommitChanges
- uid: System.DirectoryServices.DirectoryEntry.CopyTo*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CopyTo
  nameWithType: DirectoryEntry.CopyTo
- uid: System.DirectoryServices.DirectoryEntry.DeleteTree*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DeleteTree
  nameWithType: DirectoryEntry.DeleteTree
- uid: System.DirectoryServices.DirectoryEntry.Dispose*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Dispose
  nameWithType: DirectoryEntry.Dispose
- uid: System.DirectoryServices.DirectoryEntry.Exists*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Exists
  nameWithType: DirectoryEntry.Exists
- uid: System.DirectoryServices.DirectoryEntry.Guid*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Guid
  nameWithType: DirectoryEntry.Guid
- uid: System.DirectoryServices.DirectoryEntry.Invoke*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Invoke
  nameWithType: DirectoryEntry.Invoke
- uid: System.DirectoryServices.DirectoryEntry.InvokeGet*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeGet
  nameWithType: DirectoryEntry.InvokeGet
- uid: System.DirectoryServices.DirectoryEntry.InvokeSet*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeSet
  nameWithType: DirectoryEntry.InvokeSet
- uid: System.DirectoryServices.DirectoryEntry.MoveTo*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: MoveTo
  nameWithType: DirectoryEntry.MoveTo
- uid: System.DirectoryServices.DirectoryEntry.Name*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Name
  nameWithType: DirectoryEntry.Name
- uid: System.DirectoryServices.DirectoryEntry.NativeGuid*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeGuid
  nameWithType: DirectoryEntry.NativeGuid
- uid: System.DirectoryServices.DirectoryEntry.NativeObject*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeObject
  nameWithType: DirectoryEntry.NativeObject
- uid: System.DirectoryServices.DirectoryEntry.ObjectSecurity*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: ObjectSecurity
  nameWithType: DirectoryEntry.ObjectSecurity
- uid: System.DirectoryServices.DirectoryEntry.Options*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Options
  nameWithType: DirectoryEntry.Options
- uid: System.DirectoryServices.DirectoryEntry.Parent*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Parent
  nameWithType: DirectoryEntry.Parent
- uid: System.DirectoryServices.DirectoryEntry.Password*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Password
  nameWithType: DirectoryEntry.Password
- uid: System.DirectoryServices.DirectoryEntry.Path*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Path
  nameWithType: DirectoryEntry.Path
- uid: System.DirectoryServices.DirectoryEntry.Properties*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Properties
  nameWithType: DirectoryEntry.Properties
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: RefreshCache
  nameWithType: DirectoryEntry.RefreshCache
- uid: System.DirectoryServices.DirectoryEntry.Rename*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Rename
  nameWithType: DirectoryEntry.Rename
- uid: System.DirectoryServices.DirectoryEntry.SchemaClassName*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaClassName
  nameWithType: DirectoryEntry.SchemaClassName
- uid: System.DirectoryServices.DirectoryEntry.SchemaEntry*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaEntry
  nameWithType: DirectoryEntry.SchemaEntry
- uid: System.DirectoryServices.DirectoryEntry.UsePropertyCache*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: UsePropertyCache
  nameWithType: DirectoryEntry.UsePropertyCache
- uid: System.DirectoryServices.DirectoryEntry.Username*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Username
  nameWithType: DirectoryEntry.Username
