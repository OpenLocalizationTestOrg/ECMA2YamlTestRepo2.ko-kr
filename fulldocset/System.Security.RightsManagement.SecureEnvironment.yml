### YamlMime:ManagedReference
items:
- uid: System.Security.RightsManagement.SecureEnvironment
  id: SecureEnvironment
  children:
  - System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  - System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)
  - System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  - System.Security.RightsManagement.SecureEnvironment.Dispose
  - System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)
  - System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers
  - System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)
  - System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  - System.Security.RightsManagement.SecureEnvironment.User
  langs:
  - csharp
  name: SecureEnvironment
  nameWithType: SecureEnvironment
  fullName: System.Security.RightsManagement.SecureEnvironment
  type: Class
  summary: "사용자 활성화, 라이선스 바인딩 및 기타 권한 관리 작업에 대 한 보안 클라이언트 세션을 나타냅니다."
  remarks: "다른와 마찬가지로 <xref:System.Security.RightsManagement>형식의 SecureEnvironment이 완전 신뢰 응용 프로그램에서 사용할 수만 있습니다.</xref:System.Security.RightsManagement>"
  example:
  - "The following example shows use of the SecureEnvironment class  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public class SecureEnvironment : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  id: ApplicationManifest
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: ApplicationManifest
  nameWithType: SecureEnvironment.ApplicationManifest
  fullName: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "가져옵니다는 ApplicationManifest 때 지정 되는 <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref> 만들었습니다."
  remarks: ''
  example:
  - "The following example shows use of the ApplicationManifest method.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public string ApplicationManifest { get; }
    return:
      type: System.String
      description: "에 지정 된 응용 프로그램 매니페스트는 <xref:System.Security.RightsManagement.SecureEnvironment.Create*>메서드 때는 <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref> 만들어집니다.</xref:System.Security.RightsManagement.SecureEnvironment.Create*>"
  overload: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)
  id: Create(System.String,System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Create(String,ContentUser)
  nameWithType: SecureEnvironment.Create(String,ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,ContentUser)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "지정 된 권한 매니페스트를 지정된 된 사용자에 대 한 보안 클라이언트 세션을 만듭니다."
  remarks: "이 Create 메서드를 사용 하기 위한 이미 활성화 되어 있는 사용자와 <xref:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers%2A>.</xref:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers%2A> 에서 반환 된 목록에 나와 있는 것  대신 사용 <xref:System.Security.RightsManagement.SecureEnvironment.Create%2A>아직 활성화 되지 않은 사용자 방법입니다.</xref:System.Security.RightsManagement.SecureEnvironment.Create%2A>"
  example:
  - "The following example shows how to use this method to create a secure environment.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public static System.Security.RightsManagement.SecureEnvironment Create (string applicationManifest, System.Security.RightsManagement.ContentUser user);
    parameters:
    - id: applicationManifest
      type: System.String
      description: "응용 프로그램 권한 매니페스트입니다."
    - id: user
      type: System.Security.RightsManagement.ContentUser
      description: "사용자 또는 사용자 그룹에 권한 관리 콘텐츠에 대 한 액세스를 부여 하는 것입니다."
    return:
      type: System.Security.RightsManagement.SecureEnvironment
      description: "활성화, 라이선스 바인딩 및 기타 권한 관리 작업에 대 한 보안 클라이언트 세션입니다."
  overload: System.Security.RightsManagement.SecureEnvironment.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  id: Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Create(String,AuthenticationType,UserActivationMode)
  nameWithType: SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "응용 프로그램 권한 매니페스트를 지정 하는 보안 클라이언트 세션을 만듭니다 <xref href=&quot;System.Security.RightsManagement.AuthenticationType&quot;> </xref>, 및 <xref href=&quot;System.Security.RightsManagement.UserActivationMode&quot;> </xref>합니다."
  remarks: "이 Create 메서드는 아직 활성화 되지 않은 새 사용자를 위한 것입니다.       새 사용자를 활성화 사용자 인증서와 클라이언트 라이선스 인증서를 얻지 라운드트립 서버 트랜잭션을 포함 되어 있습니다.       다른 <xref:System.Security.RightsManagement.SecureEnvironment.Create%2A>사용자가 이미 활성화 된 경우, <xref:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers%2A>.</xref:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers%2A> 에서 반환 된 목록으로 제공와 같은 메서드를 사용할 수 있습니다.</xref:System.Security.RightsManagement.SecureEnvironment.Create%2A>"
  example:
  - "The following example shows how to use this method to create a secure environment.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public static System.Security.RightsManagement.SecureEnvironment Create (string applicationManifest, System.Security.RightsManagement.AuthenticationType authentication, System.Security.RightsManagement.UserActivationMode userActivationMode);
    parameters:
    - id: applicationManifest
      type: System.String
      description: "응용 프로그램 권한 매니페스트입니다."
    - id: authentication
      type: System.Security.RightsManagement.AuthenticationType
      description: "인증 방법입니다."
    - id: userActivationMode
      type: System.Security.RightsManagement.UserActivationMode
      description: "사용자 권한 계정 인증서의 형식입니다."
    return:
      type: System.Security.RightsManagement.SecureEnvironment
      description: "활성화, 라이선스 바인딩 및 기타 권한 관리 작업에 대 한 보안 클라이언트 세션입니다."
  overload: System.Security.RightsManagement.SecureEnvironment.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose
  id: Dispose
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecureEnvironment.Dispose()
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref>합니다."
  remarks: "응용 프로그램에 <xref:System.Security.RightsManagement.SecureEnvironment>.</xref:System.Security.RightsManagement.SecureEnvironment> 끝나면 Dispose를 호출 해야  Dispose를 호출한 후 리소스에 할당 된 <xref:System.Security.RightsManagement.SecureEnvironment>가비지 수집기가 회수.</xref:System.Security.RightsManagement.SecureEnvironment>  자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md) 및 [Dispose 메서드를 구현](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] >에 대 한 마지막 참조 하기 전에 항상 호출 Dispose는 <xref:System.Security.RightsManagement.SecureEnvironment>해제 됩니다.</xref:System.Security.RightsManagement.SecureEnvironment>  Dispose를 호출 하지 않은 경우 리소스에 할당 된 <xref:System.Security.RightsManagement.SecureEnvironment>가비지 수집기의 인스턴스를 호출할 때까지 해제 되지 것입니다 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> </xref:System.Security.RightsManagement.SecureEnvironment>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.RightsManagement.SecureEnvironment.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SecureEnvironment.Dispose(Boolean)
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public <xref:System.Security.RightsManagement.SecureEnvironment.Dispose>메서드 및 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> </xref:System.Security.RightsManagement.SecureEnvironment.Dispose> <xref:System.Security.RightsManagement.SecureEnvironment.Dispose>보호 된 Dispose 메서드를 호출 하는 `disposing` 매개 변수 설정 `true`합니다.</xref:System.Security.RightsManagement.SecureEnvironment.Dispose> <xref:System.Object.Finalize%2A>호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</xref:System.Object.Finalize%2A>       경우는 `disposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Security.RightsManagement.SecureEnvironment>참조.</xref:System.Security.RightsManagement.SecureEnvironment> 이 메서드 호출에서 `Dispose()` 각 참조 된 개체의 메서드."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Security.RightsManagement.SecureEnvironment.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers
  id: GetActivatedUsers
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: GetActivatedUsers()
  nameWithType: SecureEnvironment.GetActivatedUsers()
  fullName: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "활성화 된 사용자의 목록을 반환합니다."
  syntax:
    content: public static System.Collections.ObjectModel.ReadOnlyCollection<System.Security.RightsManagement.ContentUser> GetActivatedUsers ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.RightsManagement.ContentUser}
      description: "현재 활성화 된 사용자의 목록입니다."
  overload: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)
  id: IsUserActivated(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: IsUserActivated(ContentUser)
  nameWithType: SecureEnvironment.IsUserActivated(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(ContentUser)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "권한 관리 콘텐츠에 액세스 하기 위한 지정된 된 사용자가 활성화 여부를 나타냅니다."
  remarks: ''
  example:
  - "The following example shows use of the IsUserActivated method to determine if given user has been authorized to access rights managed content.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public static bool IsUserActivated (System.Security.RightsManagement.ContentUser user);
    parameters:
    - id: user
      type: System.Security.RightsManagement.ContentUser
      description: "사용자 또는 사용자 그룹에 권한 관리 콘텐츠에 대 한 액세스를 부여 하는 것입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 주어진 <code> user </code> 권한에 액세스 하 고, 그렇지 않으면 콘텐츠 관리 되는 활성화 된 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.RightsManagement.SecureEnvironment.IsUserActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  id: RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: RemoveActivatedUser(ContentUser)
  nameWithType: SecureEnvironment.RemoveActivatedUser(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(ContentUser)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "지정된 된 사용자에 대 한 라이선스 정품 인증을 제거합니다."
  remarks: "Windows 인증 또는 Passport 인증을 사용 하 여 사용자 인증을 수행 해야 합니다."
  syntax:
    content: public static void RemoveActivatedUser (System.Security.RightsManagement.ContentUser user);
    parameters:
    - id: user
      type: System.Security.RightsManagement.ContentUser
      description: "제거에 대 한 라이선스 정품 인증 사용자입니다."
  overload: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>user</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "주어진 <code> user </code> Windows 인증 또는 Passport 인증으로 인증 되지 않습니다."
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.User
  id: User
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: User
  nameWithType: SecureEnvironment.User
  fullName: System.Security.RightsManagement.SecureEnvironment.User
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "사용자 또는 사용자 그룹 지정 가져옵니다는 <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref> 만들었습니다."
  remarks: ''
  example:
  - "The following example shows use of the User property  \n  \n [!code-vb[RightsManagedPackageViewer#RmPkgViewSecEnv](~/add/codesnippet/visualbasic/rmpackageviewer/window1.xaml.vb#rmpkgviewsecenv)]\n [!code-cs[RightsManagedPackageViewer#RmPkgViewSecEnv](~/add/codesnippet/csharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewsecenv)]"
  syntax:
    content: public System.Security.RightsManagement.ContentUser User { get; }
    return:
      type: System.Security.RightsManagement.ContentUser
      description: "사용자 또는 사용자 그룹에 지정 된는 <xref:System.Security.RightsManagement.SecureEnvironment.Create*>메서드 때는 <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref> 만들었습니다.</xref:System.Security.RightsManagement.SecureEnvironment.Create*>"
  overload: System.Security.RightsManagement.SecureEnvironment.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: ApplicationManifest
  nameWithType: SecureEnvironment.ApplicationManifest
  fullName: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Create(String,ContentUser)
  nameWithType: SecureEnvironment.Create(String,ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,ContentUser)
- uid: System.Security.RightsManagement.SecureEnvironment
  parent: System.Security.RightsManagement
  isExternal: false
  name: SecureEnvironment
  nameWithType: SecureEnvironment
  fullName: System.Security.RightsManagement.SecureEnvironment
- uid: System.Security.RightsManagement.ContentUser
  parent: System.Security.RightsManagement
  isExternal: false
  name: ContentUser
  nameWithType: ContentUser
  fullName: System.Security.RightsManagement.ContentUser
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Create(String,AuthenticationType,UserActivationMode)
  nameWithType: SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
- uid: System.Security.RightsManagement.AuthenticationType
  parent: System.Security.RightsManagement
  isExternal: false
  name: AuthenticationType
  nameWithType: AuthenticationType
  fullName: System.Security.RightsManagement.AuthenticationType
- uid: System.Security.RightsManagement.UserActivationMode
  parent: System.Security.RightsManagement
  isExternal: false
  name: UserActivationMode
  nameWithType: UserActivationMode
  fullName: System.Security.RightsManagement.UserActivationMode
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Dispose()
  nameWithType: SecureEnvironment.Dispose()
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose()
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SecureEnvironment.Dispose(Boolean)
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: GetActivatedUsers()
  nameWithType: SecureEnvironment.GetActivatedUsers()
  fullName: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers()
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.RightsManagement.ContentUser}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<ContentUser>
  nameWithType: ReadOnlyCollection<ContentUser>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.RightsManagement.ContentUser>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Security.RightsManagement.ContentUser>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.RightsManagement.ContentUser
    name: ContentUser
    nameWithType: ContentUser
    fullName: ContentUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: IsUserActivated(ContentUser)
  nameWithType: SecureEnvironment.IsUserActivated(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(ContentUser)
- uid: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: RemoveActivatedUser(ContentUser)
  nameWithType: SecureEnvironment.RemoveActivatedUser(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(ContentUser)
- uid: System.Security.RightsManagement.SecureEnvironment.User
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: User
  nameWithType: SecureEnvironment.User
  fullName: System.Security.RightsManagement.SecureEnvironment.User
- uid: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: ApplicationManifest
  nameWithType: SecureEnvironment.ApplicationManifest
- uid: System.Security.RightsManagement.SecureEnvironment.Create*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Create
  nameWithType: SecureEnvironment.Create
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Dispose
  nameWithType: SecureEnvironment.Dispose
- uid: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: GetActivatedUsers
  nameWithType: SecureEnvironment.GetActivatedUsers
- uid: System.Security.RightsManagement.SecureEnvironment.IsUserActivated*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: IsUserActivated
  nameWithType: SecureEnvironment.IsUserActivated
- uid: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: RemoveActivatedUser
  nameWithType: SecureEnvironment.RemoveActivatedUser
- uid: System.Security.RightsManagement.SecureEnvironment.User*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: User
  nameWithType: SecureEnvironment.User
