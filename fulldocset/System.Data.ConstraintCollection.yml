### YamlMime:ManagedReference
items:
- uid: System.Data.ConstraintCollection
  id: ConstraintCollection
  children:
  - System.Data.ConstraintCollection.Add(System.Data.Constraint)
  - System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Boolean)
  - System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)
  - System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Boolean)
  - System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])
  - System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])
  - System.Data.ConstraintCollection.CanRemove(System.Data.Constraint)
  - System.Data.ConstraintCollection.Clear
  - System.Data.ConstraintCollection.CollectionChanged
  - System.Data.ConstraintCollection.Contains(System.String)
  - System.Data.ConstraintCollection.CopyTo(System.Data.Constraint[],System.Int32)
  - System.Data.ConstraintCollection.IndexOf(System.Data.Constraint)
  - System.Data.ConstraintCollection.IndexOf(System.String)
  - System.Data.ConstraintCollection.Item(System.Int32)
  - System.Data.ConstraintCollection.Item(System.String)
  - System.Data.ConstraintCollection.List
  - System.Data.ConstraintCollection.Remove(System.Data.Constraint)
  - System.Data.ConstraintCollection.Remove(System.String)
  - System.Data.ConstraintCollection.RemoveAt(System.Int32)
  langs:
  - csharp
  name: ConstraintCollection
  nameWithType: ConstraintCollection
  fullName: System.Data.ConstraintCollection
  type: Class
  summary: "에 대 한 제약 조건의 컬렉션을 나타냅니다는 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다."
  remarks: "ConstraintCollection 통해 액세스 되는 <xref:System.Data.DataTable.Constraints%2A?displayProperty=fullName>속성.</xref:System.Data.DataTable.Constraints%2A?displayProperty=fullName>       ConstraintCollection와 포함할 수 있는 두 <xref:System.Data.UniqueConstraint>및 <xref:System.Data.ForeignKeyConstraint> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 개체</xref:System.Data.ForeignKeyConstraint> </xref:System.Data.UniqueConstraint> A <xref:System.Data.UniqueConstraint>개체를 사용 하면 특정 열에서 데이터를 데이터 무결성을 유지 하기 위해 고유한 항상 유지 합니다.</xref:System.Data.UniqueConstraint> <xref:System.Data.ForeignKeyConstraint>관련에서 수행 될 작업을 결정 합니다. 테이블의 데이터는 <xref:System.Data.DataTable>업데이트 되거나 삭제.</xref:System.Data.DataTable> </xref:System.Data.ForeignKeyConstraint> 예를 들어, 행이 삭제 되는 <xref:System.Data.ForeignKeyConstraint>결정 합니다 (cascade) 여부 관련된 행 들도 함께 삭제 또는 일부 다른 작업 과정.</xref:System.Data.ForeignKeyConstraint>      > [!NOTE] > 추가 하는 경우는 <xref:System.Data.DataRelation>두 테이블 사이의 관계를 만드는 한 <xref:System.Data.DataSet>모두는 <xref:System.Data.ForeignKeyConstraint>및 <xref:System.Data.UniqueConstraint>자동으로 생성 됩니다.</xref:System.Data.UniqueConstraint> </xref:System.Data.ForeignKeyConstraint> </xref:System.Data.DataSet> </xref:System.Data.DataRelation> <xref:System.Data.UniqueConstraint>부모의 기본 키 열에 적용 되 <xref:System.Data.DataTable>, 해당 테이블의 ConstraintCollection에 제약 조건이 추가 됩니다.</xref:System.Data.DataTable> </xref:System.Data.UniqueConstraint> <xref:System.Data.ForeignKeyConstraint>기본 키 열과 외래 키 열에 적용 하 고 제약 조건을 자식 테이블의 ConstraintCollection에 추가 됩니다.</xref:System.Data.ForeignKeyConstraint>       ConstraintCollection 방법을 사용 하 여 표준 컬렉션와 같은 <xref:System.Data.ConstraintCollection.Add%2A>, <xref:System.Data.ConstraintCollection.Clear%2A>, 및 <xref:System.Data.ConstraintCollection.Remove%2A>.</xref:System.Data.ConstraintCollection.Remove%2A> </xref:System.Data.ConstraintCollection.Clear%2A> </xref:System.Data.ConstraintCollection.Add%2A> 또한는 <xref:System.Data.ConstraintCollection.Contains%2A>메서드는 컬렉션에 특정 제약 조건이 있는지 여부를 찾는 데 사용할 수 있습니다.</xref:System.Data.ConstraintCollection.Contains%2A>       A <xref:System.Data.UniqueConstraint>때 작성 되는 <xref:System.Data.DataColumn>와 해당 <xref:System.Data.DataColumn.Unique%2A>속성이로 설정 `true` <xref:System.Data.DataTable>개체의 <xref:System.Data.DataColumnCollection>.</xref:System.Data.DataColumnCollection> </xref:System.Data.DataTable> 에 추가 됩니다</xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn> </xref:System.Data.UniqueConstraint>       <xref:System.Data.ForeignKeyConstraint> <xref:System.Data.DataRelation> <xref:System.Data.DataSet>개체의 <xref:System.Data.DataRelationCollection>.</xref:System.Data.DataRelationCollection> </xref:System.Data.DataSet> 에 추가</xref:System.Data.DataRelation> 될 때 생성 됩니다</xref:System.Data.ForeignKeyConstraint>"
  example:
  - "The first example creates a <xref:System.Data.DataTable>, and adds a <xref:System.Data.DataColumn> (with its <xref:System.Data.DataColumn.Unique%2A> property set to `true`) to the <xref:System.Data.DataColumnCollection>. The second example creates a <xref:System.Data.DataSet>, two <xref:System.Data.DataTable> objects, four columns, and a <xref:System.Data.DataRelation>. The count of constraints is then printed to show that a <xref:System.Data.ForeignKeyConstraint> and a <xref:System.Data.UniqueConstraint> are created when a <xref:System.Data.DataRelation> is added to the <xref:System.Data.DataSet> object's <xref:System.Data.DataRelationCollection.%23ctor%2A>.  \n  \n [!code-vb[Classic WebData ConstraintCollection Example#1](~/add/codesnippet/visualbasic/t-system.data.constraint_1.vb)]\n [!code-cs[Classic WebData ConstraintCollection Example#1](~/add/codesnippet/csharp/t-system.data.constraint_1.cs)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("CollectionChanged")]

      [System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.ConstraintsCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public sealed class ConstraintCollection : System.Data.InternalDataCollectionBase
  inheritance:
  - System.Object
  - System.Data.InternalDataCollectionBase
  implements: []
  inheritedMembers:
  - System.Data.InternalDataCollectionBase.CopyTo(System.Array,System.Int32)
  - System.Data.InternalDataCollectionBase.Count
  - System.Data.InternalDataCollectionBase.GetEnumerator
  - System.Data.InternalDataCollectionBase.IsReadOnly
  - System.Data.InternalDataCollectionBase.IsSynchronized
  - System.Data.InternalDataCollectionBase.SyncRoot
  platform:
  - net462
- uid: System.Data.ConstraintCollection.Add(System.Data.Constraint)
  id: Add(System.Data.Constraint)
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: Add(Constraint)
  nameWithType: ConstraintCollection.Add(Constraint)
  fullName: System.Data.ConstraintCollection.Add(Constraint)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 추가 <xref href=&quot;System.Data.Constraint&quot;> </xref> 개체 컬렉션입니다."
  remarks: "컬렉션에 추가 하거나 제거할 제약 조건, 성공적으로 변경 되는 <xref:System.Data.ConstraintCollection.CollectionChanged>이벤트가 발생 합니다.</xref:System.Data.ConstraintCollection.CollectionChanged>"
  example:
  - "The following example adds a <xref:System.Data.UniqueConstraint> to the <xref:System.Data.ConstraintCollection> of a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData ConstraintCollection.Add Example#1](~/add/codesnippet/visualbasic/m-system.data.constraint_2_1.vb)]\n [!code-cs[Classic WebData ConstraintCollection.Add Example#1](~/add/codesnippet/csharp/m-system.data.constraint_2_1.cs)]"
  syntax:
    content: public void Add (System.Data.Constraint constraint);
    parameters:
    - id: constraint
      type: System.Data.Constraint
      description: "The <xref uid=&quot;langword_csharp_Constraint&quot; name=&quot;Constraint&quot; href=&quot;&quot;></xref> to add."
  overload: System.Data.ConstraintCollection.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> constraint </code> 인수가 null입니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "제약 조건을 이미이 컬렉션에 속해 또는 다른 컬렉션에 속해 있습니다."
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "컬렉션에 이미 같은 이름의 제약 조건입니다. (비교는 대/소문자 구분.)"
  platform:
  - net462
- uid: System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Boolean)
  id: Add(System.String,System.Data.DataColumn,System.Boolean)
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: Add(String,DataColumn,Boolean)
  nameWithType: ConstraintCollection.Add(String,DataColumn,Boolean)
  fullName: System.Data.ConstraintCollection.Add(String,DataColumn,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "새 생성 <xref href=&quot;System.Data.UniqueConstraint&quot;> </xref> 지정한 이름의 <xref href=&quot;System.Data.DataColumn&quot;> </xref>, 및 열은 기본 키 및 컬렉션에 추가 하는지 여부를 나타내는 값입니다."
  remarks: "<xref:System.Data.ConstraintCollection.CollectionChanged>이벤트가 발생할 경우 성공적으로 추가 됩니다.</xref:System.Data.ConstraintCollection.CollectionChanged>"
  example:
  - "The following example uses the <xref:System.Data.ConstraintCollection.Add%2A> method to create and add a new <xref:System.Data.UniqueConstraint> to a <xref:System.Data.ConstraintCollection>.  \n  \n [!code-vb[Classic WebData ConstraintCollection.Add2 Example#1](~/add/codesnippet/visualbasic/08c49299-33fb-4956-b60e-_1.vb)]\n [!code-cs[Classic WebData ConstraintCollection.Add2 Example#1](~/add/codesnippet/csharp/08c49299-33fb-4956-b60e-_1.cs)]"
  syntax:
    content: public System.Data.Constraint Add (string name, System.Data.DataColumn column, bool primaryKey);
    parameters:
    - id: name
      type: System.String
      description: "이름에서 <xref uid=&quot;langword_csharp_UniqueConstraint&quot; name=&quot;UniqueConstraint&quot; href=&quot;&quot;> </xref>합니다."
    - id: column
      type: System.Data.DataColumn
      description: "<xref href=&quot;System.Data.DataColumn&quot;> </xref> 제약 조건이 적용 되는 합니다."
    - id: primaryKey
      type: System.Boolean
      description: "열의 기본 키 되어야 하는지 여부를 지정 합니다. 경우 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, 기본 키 열이 됩니다."
    return:
      type: System.Data.Constraint
      description: "A new <xref uid=&quot;langword_csharp_UniqueConstraint&quot; name=&quot;UniqueConstraint&quot; href=&quot;&quot;></xref>."
  overload: System.Data.ConstraintCollection.Add*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "제약 조건이이 컬렉션에 이미 속해 있습니다.       -또는-다른 컬렉션에 제약 조건이 속해 있습니다."
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "컬렉션에 이미 지정 된 이름의 제약 조건입니다. (비교는 대/소문자 구분.)"
  platform:
  - net462
- uid: System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)
  id: Add(System.String,System.Data.DataColumn,System.Data.DataColumn)
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: Add(String,DataColumn,DataColumn)
  nameWithType: ConstraintCollection.Add(String,DataColumn,DataColumn)
  fullName: System.Data.ConstraintCollection.Add(String,DataColumn,DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "새 생성 <xref href=&quot;System.Data.ForeignKeyConstraint&quot;> </xref> 지정한 이름의 부모 열 및 자식 열 및 제약 조건을 컬렉션에 추가 합니다."
  remarks: "<xref:System.Data.ConstraintCollection.CollectionChanged>이벤트가 발생할 경우 성공적으로 추가 됩니다.</xref:System.Data.ConstraintCollection.CollectionChanged>"
  example:
  - "The following example adds a new <xref:System.Data.ForeignKeyConstraint> to the <xref:System.Data.ConstraintCollection> of a <xref:System.Data.DataTable>.  \n  \n [!code-cs[Classic WebData ConstraintCollection.Add3 Example#1](~/add/codesnippet/csharp/0f033e89-31da-4fc4-b9fb-_1.cs)]\n [!code-vb[Classic WebData ConstraintCollection.Add3 Example#1](~/add/codesnippet/visualbasic/0f033e89-31da-4fc4-b9fb-_1.vb)]"
  syntax:
    content: public System.Data.Constraint Add (string name, System.Data.DataColumn primaryKeyColumn, System.Data.DataColumn foreignKeyColumn);
    parameters:
    - id: name
      type: System.String
      description: "이름에서 <xref href=&quot;System.Data.ForeignKeyConstraint&quot;> </xref>합니다."
    - id: primaryKeyColumn
      type: System.Data.DataColumn
      description: "기본 키 또는 부모 <xref href=&quot;System.Data.DataColumn&quot;> </xref>합니다."
    - id: foreignKeyColumn
      type: System.Data.DataColumn
      description: "외래 키 또는 자식 <xref href=&quot;System.Data.DataColumn&quot;> </xref>합니다."
    return:
      type: System.Data.Constraint
      description: "A new <xref uid=&quot;langword_csharp_ForeignKeyConstraint&quot; name=&quot;ForeignKeyConstraint&quot; href=&quot;&quot;></xref>."
  overload: System.Data.ConstraintCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Boolean)
  id: Add(System.String,System.Data.DataColumn[],System.Boolean)
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: Add(String,DataColumn[],Boolean)
  nameWithType: ConstraintCollection.Add(String,DataColumn[],Boolean)
  fullName: System.Data.ConstraintCollection.Add(String,DataColumn[],Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "새 생성 <xref href=&quot;System.Data.UniqueConstraint&quot;> </xref> 지정한 이름의 배열 <xref href=&quot;System.Data.DataColumn&quot;> </xref> 개체 및 열은 기본 키 및 컬렉션에 추가 하는지 여부를 나타내는 값입니다."
  remarks: "<xref:System.Data.ConstraintCollection.CollectionChanged>이벤트가 발생할 경우 성공적으로 추가 됩니다.</xref:System.Data.ConstraintCollection.CollectionChanged>"
  example:
  - "The following example creates an array of <xref:System.Data.DataColumn> objects that are used to create a new <xref:System.Data.UniqueConstraint> in a specific <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData ConstraintCollection.Add1 Example#1](~/add/codesnippet/visualbasic/716b020f-3b2b-4515-aaa4-_1.vb)]\n [!code-cs[Classic WebData ConstraintCollection.Add1 Example#1](~/add/codesnippet/csharp/716b020f-3b2b-4515-aaa4-_1.cs)]"
  syntax:
    content: public System.Data.Constraint Add (string name, System.Data.DataColumn[] columns, bool primaryKey);
    parameters:
    - id: name
      type: System.String
      description: "이름에서 <xref href=&quot;System.Data.UniqueConstraint&quot;> </xref>합니다."
    - id: columns
      type: System.Data.DataColumn[]
      description: "배열을 <xref href=&quot;System.Data.DataColumn&quot;> </xref> 제약 조건이 적용 되는 개체입니다."
    - id: primaryKey
      type: System.Boolean
      description: "열의 기본 키 되어야 하는지 여부를 지정 합니다. 경우 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, 기본 키 열이 됩니다."
    return:
      type: System.Data.Constraint
      description: "A new <xref uid=&quot;langword_csharp_UniqueConstraint&quot; name=&quot;UniqueConstraint&quot; href=&quot;&quot;></xref>."
  overload: System.Data.ConstraintCollection.Add*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "제약 조건이이 컬렉션에 이미 속해 있습니다.       -또는-다른 컬렉션에 제약 조건이 속해 있습니다."
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "컬렉션에 이미 지정 된 이름의 제약 조건입니다. (비교는 대/소문자 구분.)"
  platform:
  - net462
- uid: System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])
  id: Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: Add(String,DataColumn[],DataColumn[])
  nameWithType: ConstraintCollection.Add(String,DataColumn[],DataColumn[])
  fullName: System.Data.ConstraintCollection.Add(String,DataColumn[],DataColumn[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "새 생성 <xref href=&quot;System.Data.ForeignKeyConstraint&quot;> </xref>, 부모 열과 자식 열으로 지정 된 배열이 포함 된 컬렉션에 추가 합니다."
  remarks: "<xref:System.Data.ConstraintCollection.CollectionChanged>이벤트가 발생할 경우 성공적으로 추가 됩니다.</xref:System.Data.ConstraintCollection.CollectionChanged>"
  example:
  - "The following example creates two arrays of <xref:System.Data.DataColumn> objects, and then creates two <xref:System.Data.ForeignKeyConstraint> relationships between two tables in a dataset.  \n  \n [!code-cs[Classic WebData ConstraintCollection.Add4 Example#1](~/add/codesnippet/csharp/050b7657-d2ac-4ddc-a26f-_1.cs)]\n [!code-vb[Classic WebData ConstraintCollection.Add4 Example#1](~/add/codesnippet/visualbasic/050b7657-d2ac-4ddc-a26f-_1.vb)]"
  syntax:
    content: public System.Data.Constraint Add (string name, System.Data.DataColumn[] primaryKeyColumns, System.Data.DataColumn[] foreignKeyColumns);
    parameters:
    - id: name
      type: System.String
      description: "이름에서 <xref href=&quot;System.Data.ForeignKeyConstraint&quot;> </xref>합니다."
    - id: primaryKeyColumns
      type: System.Data.DataColumn[]
      description: "배열을 <xref href=&quot;System.Data.DataColumn&quot;> </xref> 기본 키 또는, 부모 열에는 개체입니다."
    - id: foreignKeyColumns
      type: System.Data.DataColumn[]
      description: "배열을 <xref href=&quot;System.Data.DataColumn&quot;> </xref> 외래 키 또는 자식 열에는 개체입니다."
    return:
      type: System.Data.Constraint
      description: "A new <xref uid=&quot;langword_csharp_ForeignKeyConstraint&quot; name=&quot;ForeignKeyConstraint&quot; href=&quot;&quot;></xref>."
  overload: System.Data.ConstraintCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])
  id: AddRange(System.Data.Constraint[])
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: AddRange(Constraint[])
  nameWithType: ConstraintCollection.AddRange(Constraint[])
  fullName: System.Data.ConstraintCollection.AddRange(Constraint[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 요소에 복사 <xref href=&quot;System.Data.ConstraintCollection&quot;> </xref> 배열 컬렉션의 끝입니다."
  remarks: "경우 <xref:System.Data.DataTable.BeginInit%2A>가 호출 된 `AddRange` 될 때까지 컬렉션에 개체를 추가 하지 않는 <xref:System.Data.DataTable.EndInit%2A>호출 됩니다.</xref:System.Data.DataTable.EndInit%2A> </xref:System.Data.DataTable.BeginInit%2A> 시간에는 `EndInit` 은 호출 컬렉션 채워집니다 가장 최근 호출에 지정 된 항목이 `AddRange`합니다. 경우 `AddRange` 내에서 여러 번 호출 되는 `BeginInit`  /  `EndInit` 시퀀스에 대 한 가장 최근 호출에 지정 된 항목만 `AddRange` 추가 됩니다."
  example:
  - "The following example creates primary and foreign key constraints, and adds them to the <xref:System.Data.ConstraintCollection>.  \n  \n [!code-vb[Classic WebData ConstraintCollection.AddRange Example#1](~/add/codesnippet/visualbasic/m-system.data.constraint_1_1.vb)]\n [!code-cs[Classic WebData ConstraintCollection.AddRange Example#1](~/add/codesnippet/csharp/m-system.data.constraint_1_1.cs)]"
  syntax:
    content: public void AddRange (System.Data.Constraint[] constraints);
    parameters:
    - id: constraints
      type: System.Data.Constraint[]
      description: "배열을 <xref href=&quot;System.Data.ConstraintCollection&quot;> </xref> 컬렉션에 추가할 개체입니다."
  overload: System.Data.ConstraintCollection.AddRange*
  exceptions: []
  platform:
  - net462
- uid: System.Data.ConstraintCollection.CanRemove(System.Data.Constraint)
  id: CanRemove(System.Data.Constraint)
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: CanRemove(Constraint)
  nameWithType: ConstraintCollection.CanRemove(Constraint)
  fullName: System.Data.ConstraintCollection.CanRemove(Constraint)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "나타냅니다 여부는 <xref href=&quot;System.Data.Constraint&quot;> </xref> 제거할 수 있습니다."
  remarks: "기본 동작 때마다는 <xref:System.Data.DataRelation>에 추가 되는 <xref:System.Data.DataSet>, 추가 하는 것는 <xref:System.Data.ForeignKeyConstraint>부모 테이블에 및 <xref:System.Data.UniqueConstraint>자식 테이블에.</xref:System.Data.UniqueConstraint> </xref:System.Data.ForeignKeyConstraint> </xref:System.Data.DataSet> </xref:System.Data.DataRelation> <xref:System.Data.UniqueConstraint>부모 테이블의 기본 키 열에 적용 되 고 <xref:System.Data.ForeignKeyConstraint>자식 테이블의 외래 키 열에 적용 됩니다.</xref:System.Data.ForeignKeyConstraint> </xref:System.Data.UniqueConstraint> 제거 하 려 하기 때문에 <xref:System.Data.UniqueConstraint>제거 하기 전에 <xref:System.Data.ForeignKeyConstraint>를 throw 하면 예외가 항상 사용 해야 CanRemove 메서드 Remove를 호출 하기 전에 다음 사항을 확인 하는 <xref:System.Data.UniqueConstraint>제거할 수 있습니다.</xref:System.Data.UniqueConstraint> </xref:System.Data.ForeignKeyConstraint> </xref:System.Data.UniqueConstraint>"
  example:
  - "The following example uses the CanRemove method to determine whether a <xref:System.Data.Constraint> can be removed, before trying to remove it.  \n  \n [!code-vb[Classic WebData ConstraintCollection.CanRemove Example#1](~/add/codesnippet/visualbasic/m-system.data.constraint_11_1.vb)]\n [!code-cs[Classic WebData ConstraintCollection.CanRemove Example#1](~/add/codesnippet/csharp/m-system.data.constraint_11_1.cs)]"
  syntax:
    content: public bool CanRemove (System.Data.Constraint constraint);
    parameters:
    - id: constraint
      type: System.Data.Constraint
      description: "<xref href=&quot;System.Data.Constraint&quot;> </xref> 를 테스트할 컬렉션에서 제거 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Data.Constraint&quot;> </xref> 컬렉션에서 제거 되지 않으면, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.ConstraintCollection.CanRemove*
  exceptions: []
  platform:
  - net462
- uid: System.Data.ConstraintCollection.Clear
  id: Clear
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: ConstraintCollection.Clear()
  fullName: System.Data.ConstraintCollection.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "모든 컬렉션을 지웁니다 <xref href=&quot;System.Data.Constraint&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Data.ConstraintCollection.CollectionChanged>이벤트는이 작업은 성공 하는 경우 발생 합니다.</xref:System.Data.ConstraintCollection.CollectionChanged>"
  example:
  - "The following example clears all constraints from the <xref:System.Data.ConstraintCollection>.  \n  \n [!code-cs[Classic WebData ConstraintCollection.Clear Example#1](~/add/codesnippet/csharp/m-system.data.constraint_8_1.cs)]\n [!code-vb[Classic WebData ConstraintCollection.Clear Example#1](~/add/codesnippet/visualbasic/m-system.data.constraint_8_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.ConstraintCollection.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Data.ConstraintCollection.CollectionChanged
  id: CollectionChanged
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: CollectionChanged
  nameWithType: ConstraintCollection.CollectionChanged
  fullName: System.Data.ConstraintCollection.CollectionChanged
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "될 때마다 발생는 <xref href=&quot;System.Data.ConstraintCollection&quot;> </xref> 때문에 변경 <xref href=&quot;System.Data.Constraint&quot;> </xref> 개체가 추가 되거나 제거 합니다."
  remarks: '이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.'
  example:
  - "The following example demonstrates how to use the CollectionChanged event.  \n  \n [!code-vb[Classic WebData ConstraintCollection.CollectionChanged Example#1](~/add/codesnippet/visualbasic/e-system.data.constraint_1.vb)]\n [!code-cs[Classic WebData ConstraintCollection.CollectionChanged Example#1](~/add/codesnippet/csharp/e-system.data.constraint_1.cs)]"
  syntax:
    content: public event System.ComponentModel.CollectionChangeEventHandler CollectionChanged;
    return:
      type: System.ComponentModel.CollectionChangeEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Data.ConstraintCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: ConstraintCollection.Contains(String)
  fullName: System.Data.ConstraintCollection.Contains(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "나타냅니다 여부는 <xref href=&quot;System.Data.Constraint&quot;> </xref> 이름으로 지정 된 개체가 컬렉션에 있습니다."
  remarks: "Contains 메서드를 사용 하는지 여부를 지정 된 <xref:System.Data.Constraint>컬렉션에서 제거 하기 전에 존재 합니다.</xref:System.Data.Constraint> 사용할 수도 있습니다는 <xref:System.Data.ConstraintCollection.CanRemove%2A>확인할 수 있는 방법은 여부는 <xref:System.Data.Constraint>제거할 수 있습니다.</xref:System.Data.Constraint> </xref:System.Data.ConstraintCollection.CanRemove%2A>"
  example:
  - "The following example determines whether the specified <xref:System.Data.Constraint> exists in the <xref:System.Data.ConstraintCollection> before its deletion.  \n  \n [!code-cs[Classic WebData ConstraintCollection.Contains Example#1](~/add/codesnippet/csharp/m-system.data.constraint_6_1.cs)]\n [!code-vb[Classic WebData ConstraintCollection.Contains Example#1](~/add/codesnippet/visualbasic/m-system.data.constraint_6_1.vb)]"
  syntax:
    content: public bool Contains (string name);
    parameters:
    - id: name
      type: System.String
      description: "<xref:System.Data.Constraint.ConstraintName*>제약 조건의.</xref:System.Data.Constraint.ConstraintName*>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>컬렉션에 지정 된 제약 조건입니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.ConstraintCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Data.ConstraintCollection.CopyTo(System.Data.Constraint[],System.Int32)
  id: CopyTo(System.Data.Constraint[],System.Int32)
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: CopyTo(Constraint[],Int32)
  nameWithType: ConstraintCollection.CopyTo(Constraint[],Int32)
  fullName: System.Data.ConstraintCollection.CopyTo(Constraint[],Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "컬렉션 개체를&1; 차원 복사 <xref:System.Array>인스턴스에 지정된 된 인덱스에서 시작 합니다.</xref:System.Array>"
  syntax:
    content: public void CopyTo (System.Data.Constraint[] array, int index);
    parameters:
    - id: array
      type: System.Data.Constraint[]
      description: "1 차원 <xref:System.Array>컬렉션에서 복사한 값의 대상인.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "삽입을 시작할 배열의 인덱스입니다."
  overload: System.Data.ConstraintCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.ConstraintCollection.IndexOf(System.Data.Constraint)
  id: IndexOf(System.Data.Constraint)
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: IndexOf(Constraint)
  nameWithType: ConstraintCollection.IndexOf(Constraint)
  fullName: System.Data.ConstraintCollection.IndexOf(Constraint)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 인덱스를 가져옵니다 <xref href=&quot;System.Data.Constraint&quot;> </xref>합니다."
  remarks: "IndexOf 메서드를 사용 하 여 인덱스를 사용 하 여 사용할 반환 된 <xref:System.Data.ConstraintCollection.Contains%2A>또는 <xref:System.Data.ConstraintCollection.Remove%2A>메서드.</xref:System.Data.ConstraintCollection.Remove%2A> </xref:System.Data.ConstraintCollection.Contains%2A>"
  example:
  - "The following example uses the IndexOf method to return the index of a <xref:System.Data.Constraint>. The index is passed to the <xref:System.Data.ConstraintCollection.Contains%2A> method, before it is removed, to determine whether the collection contains the constraint.  \n  \n [!code-vb[Classic WebData ConstraintCollection.IndexOf1 Example#1](~/add/codesnippet/visualbasic/m-system.data.constraint_4_1.vb)]\n [!code-cs[Classic WebData ConstraintCollection.IndexOf1 Example#1](~/add/codesnippet/csharp/m-system.data.constraint_4_1.cs)]"
  syntax:
    content: public int IndexOf (System.Data.Constraint constraint);
    parameters:
    - id: constraint
      type: System.Data.Constraint
      description: "<xref href=&quot;System.Data.Constraint&quot;> </xref> 을 찾으려고 합니다."
    return:
      type: System.Int32
      description: "0부터 시작 인덱스는 <xref href=&quot;System.Data.Constraint&quot;> </xref> 컬렉션에 있으면-1입니다."
  overload: System.Data.ConstraintCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Data.ConstraintCollection.IndexOf(System.String)
  id: IndexOf(System.String)
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: IndexOf(String)
  nameWithType: ConstraintCollection.IndexOf(String)
  fullName: System.Data.ConstraintCollection.IndexOf(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "인덱스를 가져옵니다는 <xref href=&quot;System.Data.Constraint&quot;> </xref> 이름으로 지정 합니다."
  remarks: "사용 하 여는 <xref:System.Data.ConstraintCollection.IndexOf%2A>중 하나에서 사용 되는 인덱스를 반환 하는 메서드는 <xref:System.Data.ConstraintCollection.Contains%2A>또는 <xref:System.Data.ConstraintCollection.Remove%2A>메서드.</xref:System.Data.ConstraintCollection.Remove%2A> </xref:System.Data.ConstraintCollection.Contains%2A> </xref:System.Data.ConstraintCollection.IndexOf%2A>"
  example:
  - "The following example uses the <xref:System.Data.ConstraintCollection.IndexOf%2A> method to return the index of a <xref:System.Data.Constraint>. The index is passed to the <xref:System.Data.ConstraintCollection.Contains%2A> method to determine whether the collection contains the constraint, before removing it.  \n  \n [!code-vb[Classic WebData ConstraintCollection.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.data.constraint_0_1.vb)]\n [!code-cs[Classic WebData ConstraintCollection.IndexOf Example#1](~/add/codesnippet/csharp/m-system.data.constraint_0_1.cs)]"
  syntax:
    content: public int IndexOf (string constraintName);
    parameters:
    - id: constraintName
      type: System.String
      description: "이름에서 <xref href=&quot;System.Data.Constraint&quot;> </xref>합니다."
    return:
      type: System.Int32
      description: "인덱스는 <xref href=&quot;System.Data.Constraint&quot;> </xref> 컬렉션에 있으면-1입니다."
  overload: System.Data.ConstraintCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Data.ConstraintCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ConstraintCollection.Item(Int32)
  fullName: System.Data.ConstraintCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "가져옵니다는 <xref href=&quot;System.Data.Constraint&quot;> </xref> 컬렉션에서 지정된 된 인덱스에 있습니다."
  remarks: "사용 된 <xref:System.Data.ConstraintCollection.Contains%2A>메서드는 특정 제약 조건의 존재 여부를 테스트 합니다.</xref:System.Data.ConstraintCollection.Contains%2A>"
  example:
  - "The following example gets each <xref:System.Data.Constraint> from the <xref:System.Data.ConstraintCollection>.  \n  \n [!code-vb[Classic WebData ConstraintCollection.this Example#1](~/add/codesnippet/visualbasic/p-system.data.constraint_2_1.vb)]\n [!code-cs[Classic WebData ConstraintCollection.this Example#1](~/add/codesnippet/csharp/p-system.data.constraint_2_1.cs)]"
  syntax:
    content: public System.Data.Constraint this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "반환할 제약 조건의의 인덱스입니다."
    return:
      type: System.Data.Constraint
      description: "<xref href=&quot;System.Data.Constraint&quot;> </xref> 지정 된 인덱스입니다."
  overload: System.Data.ConstraintCollection.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "인덱스 값이 컬렉션의 항목 개수 보다 큽니다."
  platform:
  - net462
- uid: System.Data.ConstraintCollection.Item(System.String)
  id: Item(System.String)
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: ConstraintCollection.Item(String)
  fullName: System.Data.ConstraintCollection.Item(String)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "가져옵니다는 <xref href=&quot;System.Data.Constraint&quot;> </xref> 컬렉션에서 지정된 된 이름 갖는 합니다."
  remarks: "사용 된 <xref:System.Data.ConstraintCollection.Contains%2A>메서드는 특정 제약 조건의 존재 여부를 테스트 합니다.</xref:System.Data.ConstraintCollection.Contains%2A>"
  example:
  - "The following example gets the named <xref:System.Data.Constraint>.  \n  \n [!code-cs[Classic WebData ConstraintCollection.this1 Example#1](~/add/codesnippet/csharp/p-system.data.constraint_3_1.cs)]\n [!code-vb[Classic WebData ConstraintCollection.this1 Example#1](~/add/codesnippet/visualbasic/p-system.data.constraint_3_1.vb)]"
  syntax:
    content: public System.Data.Constraint this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: "<xref:System.Data.Constraint.ConstraintName*>반환 하는 제약 조건의.</xref:System.Data.Constraint.ConstraintName*>"
    return:
      type: System.Data.Constraint
      description: "<xref href=&quot;System.Data.Constraint&quot;> </xref> ; 지정한 이름의 그렇지 않은 경우 null 값은 <xref href=&quot;System.Data.Constraint&quot;> </xref> 존재 하지 않습니다."
  overload: System.Data.ConstraintCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Data.ConstraintCollection.List
  id: List
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: List
  nameWithType: ConstraintCollection.List
  fullName: System.Data.ConstraintCollection.List
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  syntax:
    content: protected override System.Collections.ArrayList List { get; }
    return:
      type: System.Collections.ArrayList
      description: "추가할 수 있습니다."
  overload: System.Data.ConstraintCollection.List*
  exceptions: []
  platform:
  - net462
- uid: System.Data.ConstraintCollection.Remove(System.Data.Constraint)
  id: Remove(System.Data.Constraint)
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: Remove(Constraint)
  nameWithType: ConstraintCollection.Remove(Constraint)
  fullName: System.Data.ConstraintCollection.Remove(Constraint)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 제거 <xref href=&quot;System.Data.Constraint&quot;> </xref> 컬렉션에서 합니다."
  remarks: "사용 하기 전에 `Remove` 사용할 수를 <xref:System.Data.ConstraintCollection.Contains%2A>대상 컬렉션에 포함 되어 있는지 여부를 확인 하 <xref:System.Data.Constraint>, 및 <xref:System.Data.ConstraintCollection.CanRemove%2A>확인할 수 있는지 여부를 <xref:System.Data.Constraint>제거할 수 있습니다.</xref:System.Data.Constraint> </xref:System.Data.ConstraintCollection.CanRemove%2A> </xref:System.Data.Constraint> </xref:System.Data.ConstraintCollection.Contains%2A>       <xref:System.Data.ConstraintCollection.CollectionChanged>이벤트 제약 조건이 성공적으로 제거 하는 경우에 발생 합니다.</xref:System.Data.ConstraintCollection.CollectionChanged>"
  example:
  - >-
    [!code-cs[Classic WebData ConstraintCollection.Remove Example#1](~/add/codesnippet/csharp/m-system.data.constraint_9_1.cs)]
     [!code-vb[Classic WebData ConstraintCollection.Remove Example#1](~/add/codesnippet/visualbasic/m-system.data.constraint_9_1.vb)]
  syntax:
    content: public void Remove (System.Data.Constraint constraint);
    parameters:
    - id: constraint
      type: System.Data.Constraint
      description: "<xref href=&quot;System.Data.Constraint&quot;> </xref> 를 제거 합니다."
  overload: System.Data.ConstraintCollection.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>constraint</code> argument is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "제약 조건 컬렉션에 속해 있지 않습니다."
  platform:
  - net462
- uid: System.Data.ConstraintCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: ConstraintCollection.Remove(String)
  fullName: System.Data.ConstraintCollection.Remove(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "제거는 <xref href=&quot;System.Data.Constraint&quot;> </xref> 컬렉션에서 이름으로 지정 된 개체입니다."
  remarks: "사용 하기 전에 `Remove` 사용할 수를 <xref:System.Data.ConstraintCollection.Contains%2A>대상 컬렉션에 포함 되어 있는지 여부를 확인 하 <xref:System.Data.Constraint>, 및 <xref:System.Data.ConstraintCollection.CanRemove%2A>확인할 수 있는지 여부를 <xref:System.Data.Constraint>제거할 수 있습니다.</xref:System.Data.Constraint> </xref:System.Data.ConstraintCollection.CanRemove%2A> </xref:System.Data.Constraint> </xref:System.Data.ConstraintCollection.Contains%2A>       <xref:System.Data.ConstraintCollection.CollectionChanged>이벤트 제약 조건이 성공적으로 제거 하는 경우에 발생 합니다.</xref:System.Data.ConstraintCollection.CollectionChanged>"
  example:
  - "The following example removes a <xref:System.Data.Constraint> from a <xref:System.Data.ConstraintCollection> after testing for its presence with the <xref:System.Data.ConstraintCollection.Contains%2A> method, and whether it can be removed with the <xref:System.Data.ConstraintCollection.CanRemove%2A> method.  \n  \n [!code-vb[Classic WebData ConstraintCollection.Remove1 Example#1](~/add/codesnippet/visualbasic/m-system.data.constraint_5_1.vb)]\n [!code-cs[Classic WebData ConstraintCollection.Remove1 Example#1](~/add/codesnippet/csharp/m-system.data.constraint_5_1.cs)]"
  syntax:
    content: public void Remove (string name);
    parameters:
    - id: name
      type: System.String
      description: "이름을 <xref href=&quot;System.Data.Constraint&quot;> </xref> 를 제거 합니다."
  overload: System.Data.ConstraintCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Data.ConstraintCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Data.ConstraintCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: ConstraintCollection.RemoveAt(Int32)
  fullName: System.Data.ConstraintCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "제거는 <xref href=&quot;System.Data.Constraint&quot;> </xref> 개체 컬렉션에서 지정 된 인덱스입니다."
  remarks: "<xref:System.Data.ConstraintCollection.IndexOf%2A>메서드는 특정 <xref:System.Data.Constraint>.</xref:System.Data.Constraint> 의 인덱스를 반환 합니다.</xref:System.Data.ConstraintCollection.IndexOf%2A>       사용 하기 전에 `RemoveAt` 사용할 수를 <xref:System.Data.ConstraintCollection.Contains%2A>대상 컬렉션에 포함 되어 있는지 여부를 확인 하 <xref:System.Data.Constraint>, 및 <xref:System.Data.ConstraintCollection.CanRemove%2A>확인할 수 있는지 여부를 <xref:System.Data.Constraint>제거할 수 있습니다.</xref:System.Data.Constraint> </xref:System.Data.ConstraintCollection.CanRemove%2A> </xref:System.Data.Constraint> </xref:System.Data.ConstraintCollection.Contains%2A>       <xref:System.Data.ConstraintCollection.CollectionChanged>이벤트 제약 조건이 성공적으로 제거 하는 경우에 발생 합니다.</xref:System.Data.ConstraintCollection.CollectionChanged>"
  example:
  - "The following example uses the <xref:System.Data.ConstraintCollection.IndexOf%2A> method together with the RemoveAt method to remove a constraint from the <xref:System.Data.ConstraintCollection>.  \n  \n [!code-cs[Classic WebData ConstraintCollection.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.data.constraint_7_1.cs)]\n [!code-vb[Classic WebData ConstraintCollection.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.data.constraint_7_1.vb)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "인덱스는 <xref href=&quot;System.Data.Constraint&quot;> </xref> 를 제거 합니다."
  overload: System.Data.ConstraintCollection.RemoveAt*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "이 인덱스에 컬렉션에 제약 조건이 없는 합니다."
  platform:
  - net462
references:
- uid: System.Data.InternalDataCollectionBase
  isExternal: false
  name: System.Data.InternalDataCollectionBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DuplicateNameException
  parent: System.Data
  isExternal: false
  name: DuplicateNameException
  nameWithType: DuplicateNameException
  fullName: System.Data.DuplicateNameException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Data.ConstraintCollection.Add(System.Data.Constraint)
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Add(Constraint)
  nameWithType: ConstraintCollection.Add(Constraint)
  fullName: System.Data.ConstraintCollection.Add(Constraint)
- uid: System.Data.Constraint
  parent: System.Data
  isExternal: false
  name: Constraint
  nameWithType: Constraint
  fullName: System.Data.Constraint
- uid: System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Boolean)
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Add(String,DataColumn,Boolean)
  nameWithType: ConstraintCollection.Add(String,DataColumn,Boolean)
  fullName: System.Data.ConstraintCollection.Add(String,DataColumn,Boolean)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataColumn
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Add(String,DataColumn,DataColumn)
  nameWithType: ConstraintCollection.Add(String,DataColumn,DataColumn)
  fullName: System.Data.ConstraintCollection.Add(String,DataColumn,DataColumn)
- uid: System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Boolean)
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Add(String,DataColumn[],Boolean)
  nameWithType: ConstraintCollection.Add(String,DataColumn[],Boolean)
  fullName: System.Data.ConstraintCollection.Add(String,DataColumn[],Boolean)
- uid: System.Data.DataColumn[]
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn[]
  spec.csharp:
  - uid: System.Data.DataColumn
    name: DataColumn
    nameWithType: DataColumn
    fullName: DataColumn[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Add(String,DataColumn[],DataColumn[])
  nameWithType: ConstraintCollection.Add(String,DataColumn[],DataColumn[])
  fullName: System.Data.ConstraintCollection.Add(String,DataColumn[],DataColumn[])
- uid: System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: AddRange(Constraint[])
  nameWithType: ConstraintCollection.AddRange(Constraint[])
  fullName: System.Data.ConstraintCollection.AddRange(Constraint[])
- uid: System.Data.Constraint[]
  parent: System.Data
  isExternal: false
  name: Constraint
  nameWithType: Constraint
  fullName: System.Data.Constraint[]
  spec.csharp:
  - uid: System.Data.Constraint
    name: Constraint
    nameWithType: Constraint
    fullName: Constraint[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.ConstraintCollection.CanRemove(System.Data.Constraint)
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: CanRemove(Constraint)
  nameWithType: ConstraintCollection.CanRemove(Constraint)
  fullName: System.Data.ConstraintCollection.CanRemove(Constraint)
- uid: System.Data.ConstraintCollection.Clear
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Clear()
  nameWithType: ConstraintCollection.Clear()
  fullName: System.Data.ConstraintCollection.Clear()
- uid: System.Data.ConstraintCollection.CollectionChanged
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: CollectionChanged
  nameWithType: ConstraintCollection.CollectionChanged
  fullName: System.Data.ConstraintCollection.CollectionChanged
- uid: System.ComponentModel.CollectionChangeEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: CollectionChangeEventHandler
  nameWithType: CollectionChangeEventHandler
  fullName: System.ComponentModel.CollectionChangeEventHandler
- uid: System.Data.ConstraintCollection.Contains(System.String)
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Contains(String)
  nameWithType: ConstraintCollection.Contains(String)
  fullName: System.Data.ConstraintCollection.Contains(String)
- uid: System.Data.ConstraintCollection.CopyTo(System.Data.Constraint[],System.Int32)
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: CopyTo(Constraint[],Int32)
  nameWithType: ConstraintCollection.CopyTo(Constraint[],Int32)
  fullName: System.Data.ConstraintCollection.CopyTo(Constraint[],Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.ConstraintCollection.IndexOf(System.Data.Constraint)
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: IndexOf(Constraint)
  nameWithType: ConstraintCollection.IndexOf(Constraint)
  fullName: System.Data.ConstraintCollection.IndexOf(Constraint)
- uid: System.Data.ConstraintCollection.IndexOf(System.String)
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: IndexOf(String)
  nameWithType: ConstraintCollection.IndexOf(String)
  fullName: System.Data.ConstraintCollection.IndexOf(String)
- uid: System.Data.ConstraintCollection.Item(System.Int32)
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: ConstraintCollection.Item(Int32)
  fullName: System.Data.ConstraintCollection.Item(Int32)
- uid: System.Data.ConstraintCollection.Item(System.String)
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Item(String)
  nameWithType: ConstraintCollection.Item(String)
  fullName: System.Data.ConstraintCollection.Item(String)
- uid: System.Data.ConstraintCollection.List
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: List
  nameWithType: ConstraintCollection.List
  fullName: System.Data.ConstraintCollection.List
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Data.ConstraintCollection.Remove(System.Data.Constraint)
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Remove(Constraint)
  nameWithType: ConstraintCollection.Remove(Constraint)
  fullName: System.Data.ConstraintCollection.Remove(Constraint)
- uid: System.Data.ConstraintCollection.Remove(System.String)
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Remove(String)
  nameWithType: ConstraintCollection.Remove(String)
  fullName: System.Data.ConstraintCollection.Remove(String)
- uid: System.Data.ConstraintCollection.RemoveAt(System.Int32)
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: ConstraintCollection.RemoveAt(Int32)
  fullName: System.Data.ConstraintCollection.RemoveAt(Int32)
- uid: System.Data.ConstraintCollection.Add*
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Add
  nameWithType: ConstraintCollection.Add
- uid: System.Data.ConstraintCollection.AddRange*
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: AddRange
  nameWithType: ConstraintCollection.AddRange
- uid: System.Data.ConstraintCollection.CanRemove*
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: CanRemove
  nameWithType: ConstraintCollection.CanRemove
- uid: System.Data.ConstraintCollection.Clear*
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Clear
  nameWithType: ConstraintCollection.Clear
- uid: System.Data.ConstraintCollection.Contains*
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Contains
  nameWithType: ConstraintCollection.Contains
- uid: System.Data.ConstraintCollection.CopyTo*
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: CopyTo
  nameWithType: ConstraintCollection.CopyTo
- uid: System.Data.ConstraintCollection.IndexOf*
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: IndexOf
  nameWithType: ConstraintCollection.IndexOf
- uid: System.Data.ConstraintCollection.Item*
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Item
  nameWithType: ConstraintCollection.Item
- uid: System.Data.ConstraintCollection.List*
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: List
  nameWithType: ConstraintCollection.List
- uid: System.Data.ConstraintCollection.Remove*
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: Remove
  nameWithType: ConstraintCollection.Remove
- uid: System.Data.ConstraintCollection.RemoveAt*
  parent: System.Data.ConstraintCollection
  isExternal: false
  name: RemoveAt
  nameWithType: ConstraintCollection.RemoveAt
