### YamlMime:ManagedReference
items:
- uid: System.Net.HttpListenerRequest
  id: HttpListenerRequest
  children:
  - System.Net.HttpListenerRequest.AcceptTypes
  - System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)
  - System.Net.HttpListenerRequest.ClientCertificateError
  - System.Net.HttpListenerRequest.ContentEncoding
  - System.Net.HttpListenerRequest.ContentLength64
  - System.Net.HttpListenerRequest.ContentType
  - System.Net.HttpListenerRequest.Cookies
  - System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)
  - System.Net.HttpListenerRequest.GetClientCertificate
  - System.Net.HttpListenerRequest.GetClientCertificateAsync
  - System.Net.HttpListenerRequest.HasEntityBody
  - System.Net.HttpListenerRequest.Headers
  - System.Net.HttpListenerRequest.HttpMethod
  - System.Net.HttpListenerRequest.InputStream
  - System.Net.HttpListenerRequest.IsAuthenticated
  - System.Net.HttpListenerRequest.IsLocal
  - System.Net.HttpListenerRequest.IsSecureConnection
  - System.Net.HttpListenerRequest.IsWebSocketRequest
  - System.Net.HttpListenerRequest.KeepAlive
  - System.Net.HttpListenerRequest.LocalEndPoint
  - System.Net.HttpListenerRequest.ProtocolVersion
  - System.Net.HttpListenerRequest.QueryString
  - System.Net.HttpListenerRequest.RawUrl
  - System.Net.HttpListenerRequest.RemoteEndPoint
  - System.Net.HttpListenerRequest.RequestTraceIdentifier
  - System.Net.HttpListenerRequest.ServiceName
  - System.Net.HttpListenerRequest.TransportContext
  - System.Net.HttpListenerRequest.Url
  - System.Net.HttpListenerRequest.UrlReferrer
  - System.Net.HttpListenerRequest.UserAgent
  - System.Net.HttpListenerRequest.UserHostAddress
  - System.Net.HttpListenerRequest.UserHostName
  - System.Net.HttpListenerRequest.UserLanguages
  langs:
  - csharp
  name: HttpListenerRequest
  nameWithType: HttpListenerRequest
  fullName: System.Net.HttpListenerRequest
  type: Class
  summary: "들어오는 HTTP 요청에 설명 된 <xref href=&quot;System.Net.HttpListener&quot;> </xref> 개체입니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "에 의해 처리 때 클라이언트에서 요청 하는 식별자 URI (Uniform Resource)는 <xref:System.Net.HttpListener>개체는 <xref:System.Net.HttpListener>제공는 <xref:System.Net.HttpListenerContext>보낸 사람, 요청을 클라이언트로 보내는 응답에 대 한 정보가 포함 된 개체.</xref:System.Net.HttpListenerContext> </xref:System.Net.HttpListener> </xref:System.Net.HttpListener> <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName>속성은 요청을 설명 하는 HttpListenerRequest 개체를 반환 합니다.</xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName>       요청 같은 요청에 대 한 정보를 포함 하는 HttpListenerRequest 개체 <xref:System.Net.HttpListenerRequest.HttpMethod%2A>문자열 <xref:System.Net.HttpListenerRequest.UserAgent%2A>문자열 및 요청 본문 데이터 (참조는 <xref:System.Net.HttpListenerRequest.InputStream%2A>속성).</xref:System.Net.HttpListenerRequest.InputStream%2A> </xref:System.Net.HttpListenerRequest.UserAgent%2A> </xref:System.Net.HttpListenerRequest.HttpMethod%2A>       요청에 회신할 가져와야 사용 하 여 연결 된 응답의 <xref:System.Net.HttpListenerContext.Response%2A>속성.</xref:System.Net.HttpListenerContext.Response%2A>"
  example:
  - "The following code example demonstrates how to receive and respond to a HttpListenerRequest.  \n  \n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/t-system.net.httplistene_3_1.cs)]"
  syntax:
    content: public sealed class HttpListenerRequest
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.AcceptTypes
  id: AcceptTypes
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: AcceptTypes
  nameWithType: HttpListenerRequest.AcceptTypes
  fullName: System.Net.HttpListenerRequest.AcceptTypes
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "클라이언트에서 MIME 형식을 가져옵니다."
  remarks: "`Accept` 헤더는 문자열 MIME Multipurpose Internet Mail Extensions () 공백으로 구분 된 형식 이름입니다 (예를 들어 `image/jpeg`), 허용 및 응답에 처리 하도록 준비 되어 클라이언트 MIME 형식을 나타내는입니다. `*/*` 항목 클라이언트 모든 MIME 형식을 하는지를 나타냅니다. 에 대 한 자세한 설명은 `Accept` 헤더에서 사용할 수 있는 RFC 2616 참조 [http://www.rfc-editor.org](http://www.rfc-editor.org/)합니다.       요청 헤더 목록은 전체 참조는 <xref:System.Net.HttpRequestHeader>열거형.</xref:System.Net.HttpRequestHeader>"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_37_1.cs)]"
  syntax:
    content: public string[] AcceptTypes { get; }
    return:
      type: System.String[]
      description: "A <xref:System.String>는 요청에 지정 된 형식 이름이 포함 된 배열을 <xref uid=&quot;langword_csharp_Accept&quot; name=&quot;Accept&quot; href=&quot;&quot;> </xref> 헤더 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 클라이언트 요청에 포함 되지 않은 경우는 <xref uid=&quot;langword_csharp_Accept&quot; name=&quot;Accept&quot; href=&quot;&quot;> </xref> 헤더.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.AcceptTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)
  id: BeginGetClientCertificate(System.AsyncCallback,System.Object)
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: BeginGetClientCertificate(AsyncCallback,Object)
  nameWithType: HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)
  fullName: System.Net.HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "클라이언트의 X.509 v.3 인증서에 대 한 비동기 요청을 시작 합니다."
  syntax:
    content: public IAsyncResult BeginGetClientCertificate (AsyncCallback requestCallback, object state);
    parameters:
    - id: requestCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>작업이 완료 될 때 호출할 메서드를 참조 하는 대리자입니다.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다. 이 개체는 작업이 완료 될 때 콜백 대리자에 전달 됩니다."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>작업의 상태를 나타내는입니다.</xref:System.IAsyncResult>"
  overload: System.Net.HttpListenerRequest.BeginGetClientCertificate*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ClientCertificateError
  id: ClientCertificateError
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ClientCertificateError
  nameWithType: HttpListenerRequest.ClientCertificateError
  fullName: System.Net.HttpListenerRequest.ClientCertificateError
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "문제를 식별 하는 오류 코드를 가져옵니다는 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;> </xref> 클라이언트에서 제공 합니다."
  remarks: "이 속성에서에서 보안 채널 (Schannel) 보안 지원 공급자 인터페이스 (SSPI), 인증서를 확인 하는 데 사용 되는 반환 된 오류는 Windows 오류 코드를 포함 합니다. Schannel SSPI 지원에 대 한 자세한 내용은 &quot;만들기는 보안 연결 사용 하 여 Schannel&quot;에서 보안 설명서의 참조 [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)합니다."
  example:
  - "The following code example checks this property to determine whether the request includes a valid client certificate.  \n  \n [!code-vb[NCLListener#3](~/add/codesnippet/visualbasic/p-system.net.httplistene_33_1.vb)]\n [!code-cs[NCLListener#3](~/add/codesnippet/csharp/p-system.net.httplistene_33_1.cs)]"
  syntax:
    content: public int ClientCertificateError { get; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>Windows 오류 코드를 포함 하는 값입니다.</xref:System.Int32>"
  overload: System.Net.HttpListenerRequest.ClientCertificateError*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "클라이언트 인증서를 호출 하 여 아직 초기화 되지 않았습니다 고 <> </> *> 또는 <> </> *> 메서드 또는 작업이 아직 진행 중입니다."
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ContentEncoding
  id: ContentEncoding
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ContentEncoding
  nameWithType: HttpListenerRequest.ContentEncoding
  fullName: System.Net.HttpListenerRequest.ContentEncoding
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "요청과 함께 전송 되는 데이터와 함께 사용할 수 있는 콘텐츠 인코딩을 가져옵니다."
  remarks: "<xref:System.Text.Encoding>개체를 사용 하 여 바이트 시퀀스 문자 집합 (코드 페이지) 및 문자를 바이트 시퀀스로 변환할 수 있습니다.</xref:System.Text.Encoding> 문자 집합 값을 사용 하는이 속성은 `Content-Type` 인코딩을 결정 하는 헤더입니다. 이 속성은 해당 정보를 사용할 수 없는 경우 <xref:System.Text.Encoding.Default%2A?displayProperty=fullName>.</xref:System.Text.Encoding.Default%2A?displayProperty=fullName> 반환"
  example:
  - "The following code example demonstrates using the ContentEncoding property.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_40_1.cs)]"
  syntax:
    content: public System.Text.Encoding ContentEncoding { get; }
    return:
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>개체의 데이터로 사용 하기 적합는 <xref:System.Net.HttpListenerRequest.InputStream*>속성.</xref:System.Net.HttpListenerRequest.InputStream*> </xref:System.Text.Encoding>"
  overload: System.Net.HttpListenerRequest.ContentEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ContentLength64
  id: ContentLength64
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ContentLength64
  nameWithType: HttpListenerRequest.ContentLength64
  fullName: System.Net.HttpListenerRequest.ContentLength64
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "요청에 포함 된 본문 데이터의 길이 가져옵니다."
  remarks: "`Content-Length` 헤더에 따라 요청을 함께 제공 되는 본문 데이터의 길이 (바이트)를 표시 합니다.       요청 헤더 목록은 전체 참조는 <xref:System.Net.HttpRequestHeader>열거형.</xref:System.Net.HttpRequestHeader>"
  example:
  - "The following code example uses the ContentLength64 property while processing body data.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_8_1.cs)]"
  syntax:
    content: public long ContentLength64 { get; }
    return:
      type: System.Int64
      description: "값은 요청을 <xref uid=&quot;langword_csharp_Content-Length&quot; name=&quot;Content-Length&quot; href=&quot;&quot;> </xref> 헤더입니다. 이 값은 콘텐츠 길이 알 수 없는 경우-1입니다."
  overload: System.Net.HttpListenerRequest.ContentLength64*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ContentType
  id: ContentType
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ContentType
  nameWithType: HttpListenerRequest.ContentType
  fullName: System.Net.HttpListenerRequest.ContentType
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "요청에 포함 된 본문 데이터의 MIME 형식을 가져옵니다."
  remarks: "본문 데이터의 MIME Multipurpose Internet Mail Extensions () 형식을 선언 클라이언트 요청에서 본문 데이터를 포함 하는 경우는 `Content-Type` 헤더입니다. 사용 하 여 웹 폼에서 데이터의 기본 MIME 형식을 반환 하는 예를 들어는 `POST` 방법은 `application/x-www-form-urlencoded`합니다.       요청 헤더의 전체 목록은 참조 하십시오.는 <xref:System.Net.HttpRequestHeader>열거형 및에서 사용할 수 있는 RFC 2616 [http://www.rfc-editor.org](http://www.rfc-editor.org/).</xref:System.Net.HttpRequestHeader>       ContentType은 경우에 null 없는 `Content-Type` 요청의 헤더입니다."
  example:
  - "The following code example demonstrates how to use this property.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_12_1.cs)]"
  syntax:
    content: public string ContentType { get; }
    return:
      type: System.String
      description: "A <xref:System.String>요청의 텍스트가 포함 된 <xref uid=&quot;langword_csharp_Content-Type&quot; name=&quot;Content-Type&quot; href=&quot;&quot;> </xref> 헤더.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.ContentType*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.Cookies
  id: Cookies
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: Cookies
  nameWithType: HttpListenerRequest.Cookies
  fullName: System.Net.HttpListenerRequest.Cookies
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "요청과 함께 전송 쿠키를 가져옵니다."
  remarks: "쿠키는 이름/값 텍스트 데이터는 로컬 클라이언트 컴퓨터에 저장 하는 웹 서버입니다."
  example:
  - "The following code example displays the values of cookies sent with the request.  \n  \n [!code-cs[Net_Listener_Basic#18](~/add/codesnippet/csharp/p-system.net.httplistene_7_1.cs)]"
  syntax:
    content: public System.Net.CookieCollection Cookies { get; }
    return:
      type: System.Net.CookieCollection
      description: "A <xref:System.Net.CookieCollection>요청과 함께 전송 하는 쿠키를 포함 하는.</xref:System.Net.CookieCollection> 요청 쿠키 포함 되어 있지 않으면이 속성은 빈 컬렉션을 반환 합니다."
  overload: System.Net.HttpListenerRequest.Cookies*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)
  id: EndGetClientCertificate(System.IAsyncResult)
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: EndGetClientCertificate(IAsyncResult)
  nameWithType: HttpListenerRequest.EndGetClientCertificate(IAsyncResult)
  fullName: System.Net.HttpListenerRequest.EndGetClientCertificate(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "클라이언트의 X.509 v.3 인증서에 대 한 비동기 요청을 종료 합니다."
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509Certificate2 EndGetClientCertificate (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "인증서에 대 한 보류 중인 요청입니다."
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "<xref:System.IAsyncResult>작업이 시작 될 때 반환 되는 개체입니다.</xref:System.IAsyncResult>"
  overload: System.Net.HttpListenerRequest.EndGetClientCertificate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>호출 하 여 가져오지 않습니다<xref:System.Net.HttpListenerRequest.BeginGetClientCertificate*><code>e.</code>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "로 식별 된 작업에 대 한이 메서드가 이미 호출 된 <code> asyncResult </code>합니다."
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.GetClientCertificate
  id: GetClientCertificate
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: GetClientCertificate()
  nameWithType: HttpListenerRequest.GetClientCertificate()
  fullName: System.Net.HttpListenerRequest.GetClientCertificate()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "클라이언트의 X.509 v.3 인증서를 검색합니다."
  remarks: "이 메서드는 인증서가 검색 될 때까지 차단 됩니다."
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509Certificate2 GetClientCertificate ();
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "A <xref href=&quot;System.Security.Cryptography.X509Certificates&quot;> </xref> 클라이언트의 X.509 v.3 인증서를 포함 하는 개체입니다."
  overload: System.Net.HttpListenerRequest.GetClientCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이 메서드는 호출 클라이언트의 X.509 v.3 인증서를 검색 하는 진행 중 이며 따라서이 메서드 호출을 만들 수 없습니다."
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.GetClientCertificateAsync
  id: GetClientCertificateAsync
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: GetClientCertificateAsync()
  nameWithType: HttpListenerRequest.GetClientCertificateAsync()
  fullName: System.Net.HttpListenerRequest.GetClientCertificateAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "비동기 작업으로는 클라이언트의 X.509 v.3 인증서를 검색합니다."
  remarks: "이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task%601>개체 인증서 검색 될 때 완료 됩니다.</xref:System.Threading.Tasks.Task%601>       진행 중인 클라이언트의 X.509 v.3 인증서를 검색 하려면이 메서드를 호출 하는 경우에이 메서드 호출을 만들 수 없습니다."
  syntax:
    content: public System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2> GetClientCertificateAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Security.Cryptography.X509Certificates.X509Certificate2}
      description: "반환 &lt;xref:System.Threading.Tasks.Task%601&gt;합니다.       비동기 작업을 나타내는 작업 개체입니다. &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; 작업 개체에서 속성 반환는 <xref href=&quot;System.Security.Cryptography.X509Certificates&quot;> </xref> 클라이언트의 X.509 v.3 인증서를 포함 하는 개체입니다."
  overload: System.Net.HttpListenerRequest.GetClientCertificateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.HasEntityBody
  id: HasEntityBody
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: HasEntityBody
  nameWithType: HttpListenerRequest.HasEntityBody
  fullName: System.Net.HttpListenerRequest.HasEntityBody
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져옵니다는 <xref:System.Boolean>요청에 관련 된 본문 데이터가 있는지 여부를 나타내는 값입니다.</xref:System.Boolean>"
  remarks: "데이터를 사용 하 여 서버에 보내는 요청에는 `POST` 메서드, 예를 들어는 엔터티 본문이 있어야 합니다."
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_17_1.cs)]"
  syntax:
    content: public bool HasEntityBody { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>요청 본문 데이터에 연결 된 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.HttpListenerRequest.HasEntityBody*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.Headers
  id: Headers
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: Headers
  nameWithType: HttpListenerRequest.Headers
  fullName: System.Net.HttpListenerRequest.Headers
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "요청에서 전송 된 헤더 이름/값 쌍의 컬렉션을 가져옵니다."
  remarks: "요청 헤더는 메타 데이터 정보를 포함 합니다. 예를 들어 헤더는 식별자 URI (Uniform Resource)에서 클라이언트는 서버를 참조 하는 리소스의 포함 될 수 있습니다, 그리고 사용자 에이전트의 id에 소속 된 클라이언트 및 허용 가능한 MIME 응답 본문에는 데이터에 대 한 형식입니다.       요청 헤더 목록은 전체 참조는 <xref:System.Net.HttpRequestHeader>열거형.</xref:System.Net.HttpRequestHeader>"
  example:
  - "The following code example displays all the information in a given <xref:System.Net.WebHeaderCollection> object.  \n  \n [!code-cs[Net_Listener_Basic#21](~/add/codesnippet/csharp/p-system.net.httplistene_14_1.cs)]"
  syntax:
    content: public System.Collections.Specialized.NameValueCollection Headers { get; }
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: "A <xref:System.Net.WebHeaderCollection>요청에 포함 된 HTTP 헤더를 포함 하는.</xref:System.Net.WebHeaderCollection>"
  overload: System.Net.HttpListenerRequest.Headers*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.HttpMethod
  id: HttpMethod
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: HttpMethod
  nameWithType: HttpListenerRequest.HttpMethod
  fullName: System.Net.HttpListenerRequest.HttpMethod
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "클라이언트에서 지정 된 HTTP 메서드를 가져옵니다."
  remarks: "HTTP 메서드는 일반적으로 GET 또는 POST, 클라이언트에서 원하는 작업에 따라 합니다."
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_10_1.cs)]"
  syntax:
    content: public string HttpMethod { get; }
    return:
      type: System.String
      description: "A <xref:System.String>요청에 사용 되는 메서드를 포함 하.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.HttpMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.InputStream
  id: InputStream
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: InputStream
  nameWithType: HttpListenerRequest.InputStream
  fullName: System.Net.HttpListenerRequest.InputStream
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "클라이언트에서 보낸 본문 데이터를 포함 하는 스트림을 가져옵니다."
  remarks: "클라이언트 데이터를 전송 하는 경우 (예를 들어 HTTP를 사용 하 여 `POST` 메서드),이 메서드에 의해 반환 된 스트림이 해당 데이터를 포함 합니다.      > [!NOTE] > 요청을 닫으면이 속성에서 반환 된 스트림이 닫히지 않습니다. 스트림이 필요 없는 호출 하 여 종료 해야는 <xref:System.IO.Stream.Close%2A>메서드.</xref:System.IO.Stream.Close%2A>"
  example:
  - "The following code example demonstrates using this property to read the data sent with a request.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_27_1.cs)]"
  syntax:
    content: public System.IO.Stream InputStream { get; }
    return:
      type: System.IO.Stream
      description: "읽을 수 있는 <xref:System.IO.Stream>요청 본문에는 클라이언트에서 보낸 바이트를 포함 하는 개체입니다.</xref:System.IO.Stream> 이 속성은 반환 <xref:System.IO.Stream>요청과 함께 전송 된 데이터가 없는 경우.</xref:System.IO.Stream>"
  overload: System.Net.HttpListenerRequest.InputStream*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: HttpListenerRequest.IsAuthenticated
  fullName: System.Net.HttpListenerRequest.IsAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져옵니다는 <xref:System.Boolean>이 요청을 보내는 클라이언트 인증 되었는지 여부를 나타내는 값입니다.</xref:System.Boolean>"
  remarks: "응용 프로그램을 사용 하 여 클라이언트 인증 요청은 <xref:System.Net.HttpListener.AuthenticationSchemes%2A>또는 <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>속성.</xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> </xref:System.Net.HttpListener.AuthenticationSchemes%2A>       응용 프로그램에서 수신 하지는 <xref:System.Net.HttpListenerContext>성공적으로 인증 되지 않은 클라이언트의 요청에 대 한.</xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example displays the value of the IsAuthenticated property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_1_1.cs)]"
  syntax:
    content: public bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>클라이언트가 인증 되었습니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.HttpListenerRequest.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.IsLocal
  id: IsLocal
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: IsLocal
  nameWithType: HttpListenerRequest.IsLocal
  fullName: System.Net.HttpListenerRequest.IsLocal
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져옵니다는 <xref:System.Boolean>로컬 컴퓨터에서 요청이 보내집니다 있는지 여부를 나타내는 값입니다.</xref:System.Boolean>"
  remarks: "응용 프로그램이이 속성을 사용 하 여 요청 로컬 컴퓨터의 경우 특별 한 처리를 수행할 수 있습니다."
  example:
  - "The following code example demonstrates using the IsLocal property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_28_1.cs)]"
  syntax:
    content: public bool IsLocal { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>와 동일한 컴퓨터에서 요청이 시작 하는 경우는 <xref href=&quot;System.Net.HttpListener&quot;> </xref> ; 요청을 제공 하는 개체, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.HttpListenerRequest.IsLocal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.IsSecureConnection
  id: IsSecureConnection
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: IsSecureConnection
  nameWithType: HttpListenerRequest.IsSecureConnection
  fullName: System.Net.HttpListenerRequest.IsSecureConnection
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져옵니다는 <xref:System.Boolean>TCP 연결 요청을 보내는 데 (SECURE Sockets Layer) 프로토콜을 사용 하 고 있는지 여부를 나타내는 값입니다.</xref:System.Boolean>"
  remarks: "보안 연결을 요청 하기 위해 <xref:System.Uri.UriSchemeHttps> <xref:System.Uri.UriSchemeHttp>.</xref:System.Uri.UriSchemeHttp> 대신</xref:System.Uri.UriSchemeHttps> 사용 하는 클라이언트 요청 클라이언트가 수신 하는 경우 SSL을 사용 하 여 연결을 설정할 수 없는는 <xref:System.Net.WebException>의 오류에 대 한 정보를 제공 하는.</xref:System.Net.WebException>"
  example:
  - "The following code example demonstrates using the IsSecureConnection property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_3_1.cs)]"
  syntax:
    content: public bool IsSecureConnection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>TCP 연결; SSL을 사용 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.HttpListenerRequest.IsSecureConnection*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.IsWebSocketRequest
  id: IsWebSocketRequest
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: IsWebSocketRequest
  nameWithType: HttpListenerRequest.IsWebSocketRequest
  fullName: System.Net.HttpListenerRequest.IsWebSocketRequest
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져옵니다는 <xref:System.Boolean>TCP 연결 WebSocket 요청 했는지 여부를 나타내는 값입니다.</xref:System.Boolean>"
  syntax:
    content: public bool IsWebSocketRequest { get; }
    return:
      type: System.Boolean
      description: "<xref:System.Boolean>입니다.</xref:System.Boolean> 반환       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>TCP 연결이 WebSocket 요청입니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.HttpListenerRequest.IsWebSocketRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.KeepAlive
  id: KeepAlive
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: KeepAlive
  nameWithType: HttpListenerRequest.KeepAlive
  fullName: System.Net.HttpListenerRequest.KeepAlive
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져옵니다는 <xref:System.Boolean>클라이언트 영구 연결을 요청 하는지 여부를 나타내는 값입니다.</xref:System.Boolean>"
  remarks: "경우 HTTP 클라이언트와 서버 데이터를 교환 하는 짧은 시간 내에 여러 번, 영구 연결 속도가 통신을 열고 각 메시지에 대 한 TCP 연결을 닫는 데 필요한 오버 헤드를 방지할 수 있으므로 합니다. 이 속성의 기본값은 HTTP/1.1을 사용 하는 클라이언트, `true`합니다."
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_5_1.cs)]"
  syntax:
    content: public bool KeepAlive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>연결을 열어 유지 해야 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.HttpListenerRequest.KeepAlive*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.LocalEndPoint
  id: LocalEndPoint
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: LocalEndPoint
  nameWithType: HttpListenerRequest.LocalEndPoint
  fullName: System.Net.HttpListenerRequest.LocalEndPoint
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "IP 주소와 포트 번호를 요청이 전송 되는 서버를 가져옵니다."
  remarks: "이 속성은 해결 될 수 있도록 하는 방법에 따라 요청에 응답 하도록 하려는 경우에 유용 합니다."
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_38_1.cs)]"
  syntax:
    content: public System.Net.IPEndPoint LocalEndPoint { get; }
    return:
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>요청이 전송 되는 IP 주소를 나타내는입니다.</xref:System.Net.IPEndPoint>"
  overload: System.Net.HttpListenerRequest.LocalEndPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ProtocolVersion
  id: ProtocolVersion
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ProtocolVersion
  nameWithType: HttpListenerRequest.ProtocolVersion
  fullName: System.Net.HttpListenerRequest.ProtocolVersion
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "요청 하는 클라이언트에서 사용 하는 HTTP 버전을 가져옵니다."
  remarks: "다양 한 HTTP 버전의 기능에 사용할 수 있는 문서에 지정 된 [http://www.rfc-editor.org](http://www.rfc-editor.org/)합니다."
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_9_1.cs)]"
  syntax:
    content: public Version ProtocolVersion { get; }
    return:
      type: System.Version
      description: "A <xref:System.Version>HTTP 클라이언트의 버전을 식별 하는.</xref:System.Version>"
  overload: System.Net.HttpListenerRequest.ProtocolVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.QueryString
  id: QueryString
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: QueryString
  nameWithType: HttpListenerRequest.QueryString
  fullName: System.Net.HttpListenerRequest.QueryString
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "요청에 포함 된 쿼리 문자열을 가져옵니다."
  remarks: "URL, 쿼리 정보는 경로 정보 물음표 (?)로 구분 됩니다. 이름/값 쌍은 등호 (=)로 구분 됩니다. 단일 문자열로 쿼리 데이터에 액세스 하려면 <xref:System.Uri.Query%2A> <xref:System.Uri> <xref:System.Net.HttpListenerRequest.Url%2A>.</xref:System.Net.HttpListenerRequest.Url%2A> 에서 반환 된 개체</xref:System.Uri> 에서 속성 값</xref:System.Uri.Query%2A> 을 가져오려면      > [!NOTE] > 등호 기호 없이 쿼리 (예: [http://www.contoso.com/query.htm?Name](http://www.contoso.com/query.htm?Name) )에 추가 되 고 `null` <xref:System.Collections.Specialized.NameValueCollection>.</xref:System.Collections.Specialized.NameValueCollection> 키"
  example:
  - "The following code example demonstrates using the QueryString property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_4_1.cs)]"
  syntax:
    content: public System.Collections.Specialized.NameValueCollection QueryString { get; }
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: "A <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> <xref:System.Net.HttpListenerRequest.Url*>.</xref:System.Net.HttpListenerRequest.Url*> 요청에 포함 된 쿼리 데이터를 포함 하는 개체"
  overload: System.Net.HttpListenerRequest.QueryString*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.RawUrl
  id: RawUrl
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: RawUrl
  nameWithType: HttpListenerRequest.RawUrl
  fullName: System.Net.HttpListenerRequest.RawUrl
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "클라이언트에서 요청한 URL 정보를 (하지 않고 호스트 및 포트)를 가져옵니다."
  remarks: "원시 URL은 도메인 정보 다음에 URL의 일부분으로 정의 됩니다. URL 문자열에 `http://www.contoso.com/articles/recent.aspx`, 원시 URL은 `/articles/recent.aspx`합니다. 있는 경우 원시 URL 쿼리 문자열을 포함 합니다.       호스트 및 포트 정보를 가져오려면는 <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A>속성.</xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A>"
  example:
  - "The following code example demonstrates using the RawUrl property.  \n  \n [!code-cs[Net_Listener_Basic#11](~/add/codesnippet/csharp/p-system.net.httplistene_29_1.cs)]"
  syntax:
    content: public string RawUrl { get; }
    return:
      type: System.String
      description: "A <xref:System.String>이 요청에 대 한 원시 URL이 들어 있는.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.RawUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.RemoteEndPoint
  id: RemoteEndPoint
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: RemoteEndPoint
  nameWithType: HttpListenerRequest.RemoteEndPoint
  fullName: System.Net.HttpListenerRequest.RemoteEndPoint
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "클라이언트 요청이 시작 된 IP 주소와 포트 번호를 가져옵니다."
  remarks: ''
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_11_1.cs)]"
  syntax:
    content: public System.Net.IPEndPoint RemoteEndPoint { get; }
    return:
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>요청이 시작 된 IP 주소와 포트 번호를 나타내는입니다.</xref:System.Net.IPEndPoint>"
  overload: System.Net.HttpListenerRequest.RemoteEndPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.RequestTraceIdentifier
  id: RequestTraceIdentifier
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: RequestTraceIdentifier
  nameWithType: HttpListenerRequest.RequestTraceIdentifier
  fullName: System.Net.HttpListenerRequest.RequestTraceIdentifier
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "들어오는 HTTP 요청의 요청 id를 가져옵니다."
  syntax:
    content: public Guid RequestTraceIdentifier { get; }
    return:
      type: System.Guid
      description: "A <xref:System.Guid>HTTP 요청의 식별자를 포함 하는 개체입니다.</xref:System.Guid>"
  overload: System.Net.HttpListenerRequest.RequestTraceIdentifier*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ServiceName
  id: ServiceName
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ServiceName
  nameWithType: HttpListenerRequest.ServiceName
  fullName: System.Net.HttpListenerRequest.ServiceName
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "공급자 이름 SPN (서비스) 하 고 클라이언트가 보낸 요청에서 가져옵니다."
  remarks: "응용 프로그램 제공 SPN (서비스 이름)의 사용자 지정 유효성 검사를 수행 하려면 ServiceName 속성을 사용할 수 있습니다."
  syntax:
    content: public string ServiceName { get; }
    return:
      type: System.String
      description: "A <xref:System.String>SPN 클라이언트가 보낸 요청에 포함 된.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.ServiceName*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.TransportContext
  id: TransportContext
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: TransportContext
  nameWithType: HttpListenerRequest.TransportContext
  fullName: System.Net.HttpListenerRequest.TransportContext
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져옵니다는 <xref:System.Net.TransportContext>클라이언트 요청에 대 한.</xref:System.Net.TransportContext>"
  remarks: "<xref:System.Net.TransportContext>에 대 한 CBT ()는 채널 바인딩 토큰을 검색 속성을 사용할 수 있습니다는 <xref:System.Net.HttpListenerRequest>HTTPS를 사용 하 여 보냈거나.</xref:System.Net.HttpListenerRequest> </xref:System.Net.TransportContext>       응용 프로그램을 사용할 수는 <xref:System.Net.TransportContext>네이티브 Win32 호출 하 여 사용자 지정 인증을 수행 하는 속성 [acceptsecuritycontext가](http://go.microsoft.com/fwlink/?LinkId=147021) 함수.</xref:System.Net.TransportContext>       응용 프로그램을 사용 하 여이 TransportContext 속성에서 (CBT)의 채널 바인딩 토큰을 검색 하려고 하는 경우는 <xref:System.Net.TransportContext.GetChannelBinding%2A>메서드 및 <xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind>않습니다 <xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind>, 다음의 <xref:System.Net.HttpListenerRequest> <xref:System.NotSupportedException>.</xref:System.NotSupportedException> 를 발생 시킵니다</xref:System.Net.HttpListenerRequest> </xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind> </xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind> </xref:System.Net.TransportContext.GetChannelBinding%2A> <xref:System.Net.HttpListenerRequest>재정의 <xref:System.Net.TransportContext.GetChannelBinding%2A>내부 구현.</xref:System.Net.TransportContext.GetChannelBinding%2A> </xref:System.Net.HttpListenerRequest>"
  syntax:
    content: public System.Net.TransportContext TransportContext { get; }
    return:
      type: System.Net.TransportContext
      description: "A <xref:System.Net.TransportContext>클라이언트 요청에 대 한 개체입니다.</xref:System.Net.TransportContext>"
  overload: System.Net.HttpListenerRequest.TransportContext*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.Url
  id: Url
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: Url
  nameWithType: HttpListenerRequest.Url
  fullName: System.Net.HttpListenerRequest.Url
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져옵니다는 <xref:System.Uri>클라이언트에서 요청 된 개체입니다.</xref:System.Uri>"
  remarks: "Url 속성에서 사용할 수 있는 모든 정보를 가져올 수 있습니다는 <xref:System.Uri>개체입니다.</xref:System.Uri> Uri의 원시 텍스트만 알아야 하는 경우를 사용해는 <xref:System.Net.HttpListenerRequest.RawUrl%2A>속성 대신.</xref:System.Net.HttpListenerRequest.RawUrl%2A>       Url 속성이 null이 경우는 <xref:System.Uri>클라이언트에서 분석할 수 없습니다.</xref:System.Uri>       <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>속성 이면 <xref:System.Net.HttpListener>원시 언 이스케이프 된 URI를 사용 하 여 모든 퍼센트 인코딩 값이 변환 되 고 다른 정규화 단계가 수행 되는 변환 된 URI 대신.</xref:System.Net.HttpListener> </xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>       경우는 <xref:System.Net.HttpListener>인스턴스 통해 요청을 받을 `http.sys` 에서 제공 하 고 URI 문자열의 인스턴스를 만들고 서비스를 `http.sys`, Url 속성으로 노출 합니다.</xref:System.Net.HttpListener>       `http.sys` 서비스는 두 요청 URI 문자열을 노출:-원시 URI-변환 URI의 원시 URI는는 <xref:System.Uri?displayProperty=fullName>HTTP 요청의 요청 줄에 제공 된: `GET /path/` `Host: www.contoso.com` 에서 제공 된 URI의 원시 `http.sys` 위에서 언급 한 요청은 &quot;/&quot; (경로 /.       </xref:System.Uri?displayProperty=fullName> 이 네트워크를 통해 전송 된 HTTP 동사를 다음 문자열을 나타냅니다.       `http.sys` 을 전달 해야 하는 원본 서버에서 요청을 확인 하려면 호스트 헤더 및 서비스는 HTTP 요청에서에서 제공 하는 URI를 사용 하 여 요청에 제공 된 정보에서 변환된 된 URI를 만듭니다. 이 등록 된 URI 접두사를 사용 하 여 요청에서 정보를 비교 하 여 수행 됩니다. 이러한 값을 비교할 수 있도록 요청에 일부 정규화를 수행 해야 합니다. 위의 샘플 변환 된 URI는 다음과 같은 것에 대 한: `http://www.contoso.com/path/` 는 `http.sys` 결합 하 여 서비스는 <xref:System.Uri.Host%2A?displayProperty=fullName>속성 값과 변환된 된 URI를 만드는 요청 줄에 있는 문자열.</xref:System.Uri.Host%2A?displayProperty=fullName> 또한 `http.sys` 및 <xref:System.Uri?displayProperty=fullName>클래스는 다음을 수행할 수도:-인코딩된 모든 백분율 값 이스케이프 해제 합니다.</xref:System.Uri?displayProperty=fullName>      -퍼센트 인코딩 비 ASCII 문자를 utf-16 문자 표현으로 변환합니다. Note u t F-8과 ANSI/DBCS 문자가 유니코드 문자 (유니코드 %uXXXX 형식을 사용 하 여 인코딩)도 지원 됩니다.      -경로 압축 같은 다른 정규화 단계를 실행합니다.       퍼센트 인코딩 값에 사용 되는 인코딩에 대 한 정보가 요청 없으므로 퍼센트 인코딩 값을 구문 분석 하 여 올바른 인코딩을 확인할 못할 수 있습니다.       따라서 `http.sys` 제공 하는 프로세스를 수정 하기 위한 두 개의 레지스트리 키: | 레지스트리 키 | 기본 값 | 설명 |   |------------------|-------------------|-----------------|   | EnableNonUTF8 |&1; |&0; 이면 `http.sys` u t F-8로 인코딩된 Url만 허용 합니다.<br /><br /> 0이 아닌 경우 `http.sys` 도 요청에서 ANSI로 인코딩된 또는 DBCS 인코딩된 Url을 허용 합니다. |   | FavorUTF8 |&1; |&0;이 아닌 경우 `http.sys` 디코딩할 URL u t F-8로 먼저 해당 변환이 실패 하 고 EnableNonUTF8&0;이 아닌 경우 하려고 항상 차례로 Http.sys을 ANSI 또는 DBCS 디코딩할 하려고 합니다.<br /><br /> 0 (및 EnableNonUTF8&0;이 아닌) `http.sys` 경우 해당 ANSI 또는 DBCS; 디코딩하 려 성공 하지 못하면, 시도 u t F-8로 변환 합니다. |       때 <xref:System.Net.HttpListener>한 요청을 받으면에서 변환 된 URI를 사용 하 여 `http.sys` Url 속성에 대 한 입력으로.</xref:System.Net.HttpListener>       Uri에서 문자 및 숫자 이외의 문자를 지원할 필요가 있습니다. 예로 고객에 대 한 고객 정보를 검색 하는 데 사용 되는 다음 URI는 번호 &quot;1/3812&quot;: `http://www.contoso.com/Customer(&quot;1%2F3812&quot;)/` 퍼센트 인코딩 슬래시 (%2F) Uri에서 확인 합니다. 이 작업은 슬래시 문자 데이터 및 하지는 경로 구분 기호를 나타내므로 경우에 필요 합니다.       다음 URI를 일으킵니다 Uri 생성자에 문자열을 전달: `http://www.contoso.com/Customer(&quot;1/3812&quot;)/` 경로를 세그먼트로 분할 하면 다음과 같은 요소가 만들어집니다: `Customer(&quot;1` `3812&quot;)` 요청을 보낸 사람의 의도이 아닙니다.              경우는 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>속성이 false로 설정 되어 다음 경우는 <xref:System.Net.HttpListener>한 요청을 받으면 원시 URI에서 변환 된 URI 대신 사용 하 여 `http.sys` Url 속성에 대 한 입력으로.</xref:System.Net.HttpListener> </xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>"
  example:
  - "The following code example demonstrates using the Url property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_20_1.cs)]"
  syntax:
    content: public Uri Url { get; }
    return:
      type: System.Uri
      description: "A <xref:System.Uri>클라이언트에서 요청한 리소스를 식별 하는 개체입니다.</xref:System.Uri>"
  overload: System.Net.HttpListenerRequest.Url*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UrlReferrer
  id: UrlReferrer
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UrlReferrer
  nameWithType: HttpListenerRequest.UrlReferrer
  fullName: System.Net.HttpListenerRequest.UrlReferrer
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "식별자 URI (Uniform Resource)에서 클라이언트는 서버를 참조 하는 리소스의 가져옵니다."
  remarks: "클라이언트가 요청된 된 URI에 하이퍼링크를 따라 해당 요청을 확인할 수 있습니다는 `Referrer` 는 하이퍼링크가 포함 된 리소스의 URI를 식별 하는 헤더입니다.       클라이언트를 위조 하거나 표시 하지 않도록 선택할 수는 <xref:System.Net.HttpRequestHeader>헤더.</xref:System.Net.HttpRequestHeader> 따라서는 UrlReferrer 동안 속성 웹 트래픽의 기본 추세를 식별 하는 데 유용할 수 있습니다 해야 사용 하지 있습니다 권한 부여 체계의 일부로 데이터에 대 한 액세스를 제어 합니다.       요청 헤더 목록은 전체 참조는 <xref:System.Net.HttpRequestHeader>열거형.</xref:System.Net.HttpRequestHeader>       UrlReferrer은 경우에 null 없는 `Referrer` 요청의 헤더 또는 때는 `Referrer` 헤더는 요청에 포함 되어 있지만 유효한 <xref:System.Uri>.</xref:System.Uri> 구문 분석 되지 않는"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_22_1.cs)]"
  syntax:
    content: public Uri UrlReferrer { get; }
    return:
      type: System.Uri
      description: "A <xref:System.Uri>요청의 텍스트가 포함 된 개체 <xref:System.Net.HttpRequestHeader>헤더 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 헤더는 요청에 포함 되지 않은 경우.</xref:System.Net.HttpRequestHeader> </xref:System.Uri>"
  overload: System.Net.HttpListenerRequest.UrlReferrer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UserAgent
  id: UserAgent
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UserAgent
  nameWithType: HttpListenerRequest.UserAgent
  fullName: System.Net.HttpListenerRequest.UserAgent
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "클라이언트에서 제공 하는 사용자 에이전트를 가져옵니다."
  remarks: "`User-Agent` 헤더에서 요청을 생성 하는 데 사용 되는 소프트웨어의 이름 및 버전 번호를 식별 하는 텍스트는 일반적으로 포함 합니다.       요청 헤더 목록은 전체 참조는 <xref:System.Net.HttpRequestHeader>열거형.</xref:System.Net.HttpRequestHeader>       UserAgent은 경우에 null 없는 `User-Agent` 요청의 헤더입니다."
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_42_1.cs)]"
  syntax:
    content: public string UserAgent { get; }
    return:
      type: System.String
      description: "A <xref:System.String>요청의 텍스트가 포함 된 개체 <xref uid=&quot;langword_csharp_User-Agent&quot; name=&quot;User-Agent&quot; href=&quot;&quot;> </xref> 헤더.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.UserAgent*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UserHostAddress
  id: UserHostAddress
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UserHostAddress
  nameWithType: HttpListenerRequest.UserHostAddress
  fullName: System.Net.HttpListenerRequest.UserHostAddress
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "IP 주소와 포트 번호를 요청이 전송 되는 서버를 가져옵니다."
  remarks: "이 속성에서 반환 되는 정보는 에서도 사용할 수는 <xref:System.Net.HttpListenerRequest.LocalEndPoint%2A>속성 값.</xref:System.Net.HttpListenerRequest.LocalEndPoint%2A>"
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_6_1.cs)]"
  syntax:
    content: public string UserHostAddress { get; }
    return:
      type: System.String
      description: "A <xref:System.String>호스트 주소 정보를 포함 하는.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.UserHostAddress*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UserHostName
  id: UserHostName
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UserHostName
  nameWithType: HttpListenerRequest.UserHostName
  fullName: System.Net.HttpListenerRequest.UserHostName
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "DNS 이름을 가져옵니다 및 제공 된 경우 클라이언트에서 포트 번호를 지정 합니다."
  remarks: "`Host` 헤더는 요청 된 서버 호스트 이름이 들어 콜론으로 구분을 지정 하는 경우 포트 번호 (예를 들어 `www.contoso.com:8080`).       이 속성을 사용 하 여 요청에 지정 된 호스트 이름에 따라 서로 다른 응답을 반환할 수 있습니다.       요청 헤더 목록은 전체 참조는 <xref:System.Net.HttpRequestHeader>열거형.</xref:System.Net.HttpRequestHeader>"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_39_1.cs)]"
  syntax:
    content: public string UserHostName { get; }
    return:
      type: System.String
      description: "A <xref:System.String>요청의의 텍스트를 포함 하는 값 <xref uid=&quot;langword_csharp_Host&quot; name=&quot;Host&quot; href=&quot;&quot;> </xref> 헤더.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.UserHostName*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UserLanguages
  id: UserLanguages
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UserLanguages
  nameWithType: HttpListenerRequest.UserLanguages
  fullName: System.Net.HttpListenerRequest.UserLanguages
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "응답에 대 한 기본 설정 된 자연어를 가져옵니다."
  remarks: "에 대 한 자세한 설명은 `Accept-Language` 헤더에서 사용할 수 있는 14.4 RFC 2616 섹션을 참조 [http://www.rfc-editor.org](http://www.rfc-editor.org/)합니다.       요청 헤더 목록은 전체 참조는 <xref:System.Net.HttpRequestHeader>열거형.</xref:System.Net.HttpRequestHeader>"
  example:
  - "The following code example displays the languages from the request's `Accept-Language` header.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_18_1.cs)]"
  syntax:
    content: public string[] UserLanguages { get; }
    return:
      type: System.String[]
      description: "A <xref:System.String>는 요청에 지정 된 언어를 포함 하는 배열 <xref:System.Net.HttpRequestHeader>헤더 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 클라이언트 요청에 포함 되지 않은 경우는 <xref:System.Net.HttpRequestHeader>헤더.</xref:System.Net.HttpRequestHeader> </xref:System.Net.HttpRequestHeader> </xref:System.String>"
  overload: System.Net.HttpListenerRequest.UserLanguages*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.HttpListenerRequest.AcceptTypes
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: AcceptTypes
  nameWithType: HttpListenerRequest.AcceptTypes
  fullName: System.Net.HttpListenerRequest.AcceptTypes
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: BeginGetClientCertificate(AsyncCallback,Object)
  nameWithType: HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)
  fullName: System.Net.HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.HttpListenerRequest.ClientCertificateError
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ClientCertificateError
  nameWithType: HttpListenerRequest.ClientCertificateError
  fullName: System.Net.HttpListenerRequest.ClientCertificateError
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.HttpListenerRequest.ContentEncoding
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentEncoding
  nameWithType: HttpListenerRequest.ContentEncoding
  fullName: System.Net.HttpListenerRequest.ContentEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Net.HttpListenerRequest.ContentLength64
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentLength64
  nameWithType: HttpListenerRequest.ContentLength64
  fullName: System.Net.HttpListenerRequest.ContentLength64
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.HttpListenerRequest.ContentType
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentType
  nameWithType: HttpListenerRequest.ContentType
  fullName: System.Net.HttpListenerRequest.ContentType
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpListenerRequest.Cookies
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Cookies
  nameWithType: HttpListenerRequest.Cookies
  fullName: System.Net.HttpListenerRequest.Cookies
- uid: System.Net.CookieCollection
  parent: System.Net
  isExternal: true
  name: CookieCollection
  nameWithType: CookieCollection
  fullName: System.Net.CookieCollection
- uid: System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: EndGetClientCertificate(IAsyncResult)
  nameWithType: HttpListenerRequest.EndGetClientCertificate(IAsyncResult)
  fullName: System.Net.HttpListenerRequest.EndGetClientCertificate(IAsyncResult)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Net.HttpListenerRequest.GetClientCertificate
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: GetClientCertificate()
  nameWithType: HttpListenerRequest.GetClientCertificate()
  fullName: System.Net.HttpListenerRequest.GetClientCertificate()
- uid: System.Net.HttpListenerRequest.GetClientCertificateAsync
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: GetClientCertificateAsync()
  nameWithType: HttpListenerRequest.GetClientCertificateAsync()
  fullName: System.Net.HttpListenerRequest.GetClientCertificateAsync()
- uid: System.Threading.Tasks.Task{System.Security.Cryptography.X509Certificates.X509Certificate2}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<X509Certificate2>
  nameWithType: Task<X509Certificate2>
  fullName: System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Security.Cryptography.X509Certificates.X509Certificate2>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2
    name: X509Certificate2
    nameWithType: X509Certificate2
    fullName: X509Certificate2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.HttpListenerRequest.HasEntityBody
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: HasEntityBody
  nameWithType: HttpListenerRequest.HasEntityBody
  fullName: System.Net.HttpListenerRequest.HasEntityBody
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.HttpListenerRequest.Headers
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Headers
  nameWithType: HttpListenerRequest.Headers
  fullName: System.Net.HttpListenerRequest.Headers
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Net.HttpListenerRequest.HttpMethod
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: HttpMethod
  nameWithType: HttpListenerRequest.HttpMethod
  fullName: System.Net.HttpListenerRequest.HttpMethod
- uid: System.Net.HttpListenerRequest.InputStream
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: InputStream
  nameWithType: HttpListenerRequest.InputStream
  fullName: System.Net.HttpListenerRequest.InputStream
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.HttpListenerRequest.IsAuthenticated
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsAuthenticated
  nameWithType: HttpListenerRequest.IsAuthenticated
  fullName: System.Net.HttpListenerRequest.IsAuthenticated
- uid: System.Net.HttpListenerRequest.IsLocal
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsLocal
  nameWithType: HttpListenerRequest.IsLocal
  fullName: System.Net.HttpListenerRequest.IsLocal
- uid: System.Net.HttpListenerRequest.IsSecureConnection
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsSecureConnection
  nameWithType: HttpListenerRequest.IsSecureConnection
  fullName: System.Net.HttpListenerRequest.IsSecureConnection
- uid: System.Net.HttpListenerRequest.IsWebSocketRequest
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsWebSocketRequest
  nameWithType: HttpListenerRequest.IsWebSocketRequest
  fullName: System.Net.HttpListenerRequest.IsWebSocketRequest
- uid: System.Net.HttpListenerRequest.KeepAlive
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: KeepAlive
  nameWithType: HttpListenerRequest.KeepAlive
  fullName: System.Net.HttpListenerRequest.KeepAlive
- uid: System.Net.HttpListenerRequest.LocalEndPoint
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: LocalEndPoint
  nameWithType: HttpListenerRequest.LocalEndPoint
  fullName: System.Net.HttpListenerRequest.LocalEndPoint
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.HttpListenerRequest.ProtocolVersion
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ProtocolVersion
  nameWithType: HttpListenerRequest.ProtocolVersion
  fullName: System.Net.HttpListenerRequest.ProtocolVersion
- uid: System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Net.HttpListenerRequest.QueryString
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: QueryString
  nameWithType: HttpListenerRequest.QueryString
  fullName: System.Net.HttpListenerRequest.QueryString
- uid: System.Net.HttpListenerRequest.RawUrl
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RawUrl
  nameWithType: HttpListenerRequest.RawUrl
  fullName: System.Net.HttpListenerRequest.RawUrl
- uid: System.Net.HttpListenerRequest.RemoteEndPoint
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RemoteEndPoint
  nameWithType: HttpListenerRequest.RemoteEndPoint
  fullName: System.Net.HttpListenerRequest.RemoteEndPoint
- uid: System.Net.HttpListenerRequest.RequestTraceIdentifier
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RequestTraceIdentifier
  nameWithType: HttpListenerRequest.RequestTraceIdentifier
  fullName: System.Net.HttpListenerRequest.RequestTraceIdentifier
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Net.HttpListenerRequest.ServiceName
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ServiceName
  nameWithType: HttpListenerRequest.ServiceName
  fullName: System.Net.HttpListenerRequest.ServiceName
- uid: System.Net.HttpListenerRequest.TransportContext
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: TransportContext
  nameWithType: HttpListenerRequest.TransportContext
  fullName: System.Net.HttpListenerRequest.TransportContext
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.HttpListenerRequest.Url
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Url
  nameWithType: HttpListenerRequest.Url
  fullName: System.Net.HttpListenerRequest.Url
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.HttpListenerRequest.UrlReferrer
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UrlReferrer
  nameWithType: HttpListenerRequest.UrlReferrer
  fullName: System.Net.HttpListenerRequest.UrlReferrer
- uid: System.Net.HttpListenerRequest.UserAgent
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserAgent
  nameWithType: HttpListenerRequest.UserAgent
  fullName: System.Net.HttpListenerRequest.UserAgent
- uid: System.Net.HttpListenerRequest.UserHostAddress
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserHostAddress
  nameWithType: HttpListenerRequest.UserHostAddress
  fullName: System.Net.HttpListenerRequest.UserHostAddress
- uid: System.Net.HttpListenerRequest.UserHostName
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserHostName
  nameWithType: HttpListenerRequest.UserHostName
  fullName: System.Net.HttpListenerRequest.UserHostName
- uid: System.Net.HttpListenerRequest.UserLanguages
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserLanguages
  nameWithType: HttpListenerRequest.UserLanguages
  fullName: System.Net.HttpListenerRequest.UserLanguages
- uid: System.Net.HttpListenerRequest.AcceptTypes*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: AcceptTypes
  nameWithType: HttpListenerRequest.AcceptTypes
- uid: System.Net.HttpListenerRequest.BeginGetClientCertificate*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: BeginGetClientCertificate
  nameWithType: HttpListenerRequest.BeginGetClientCertificate
- uid: System.Net.HttpListenerRequest.ClientCertificateError*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ClientCertificateError
  nameWithType: HttpListenerRequest.ClientCertificateError
- uid: System.Net.HttpListenerRequest.ContentEncoding*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentEncoding
  nameWithType: HttpListenerRequest.ContentEncoding
- uid: System.Net.HttpListenerRequest.ContentLength64*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentLength64
  nameWithType: HttpListenerRequest.ContentLength64
- uid: System.Net.HttpListenerRequest.ContentType*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentType
  nameWithType: HttpListenerRequest.ContentType
- uid: System.Net.HttpListenerRequest.Cookies*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Cookies
  nameWithType: HttpListenerRequest.Cookies
- uid: System.Net.HttpListenerRequest.EndGetClientCertificate*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: EndGetClientCertificate
  nameWithType: HttpListenerRequest.EndGetClientCertificate
- uid: System.Net.HttpListenerRequest.GetClientCertificate*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: GetClientCertificate
  nameWithType: HttpListenerRequest.GetClientCertificate
- uid: System.Net.HttpListenerRequest.GetClientCertificateAsync*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: GetClientCertificateAsync
  nameWithType: HttpListenerRequest.GetClientCertificateAsync
- uid: System.Net.HttpListenerRequest.HasEntityBody*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: HasEntityBody
  nameWithType: HttpListenerRequest.HasEntityBody
- uid: System.Net.HttpListenerRequest.Headers*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Headers
  nameWithType: HttpListenerRequest.Headers
- uid: System.Net.HttpListenerRequest.HttpMethod*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: HttpMethod
  nameWithType: HttpListenerRequest.HttpMethod
- uid: System.Net.HttpListenerRequest.InputStream*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: InputStream
  nameWithType: HttpListenerRequest.InputStream
- uid: System.Net.HttpListenerRequest.IsAuthenticated*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsAuthenticated
  nameWithType: HttpListenerRequest.IsAuthenticated
- uid: System.Net.HttpListenerRequest.IsLocal*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsLocal
  nameWithType: HttpListenerRequest.IsLocal
- uid: System.Net.HttpListenerRequest.IsSecureConnection*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsSecureConnection
  nameWithType: HttpListenerRequest.IsSecureConnection
- uid: System.Net.HttpListenerRequest.IsWebSocketRequest*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsWebSocketRequest
  nameWithType: HttpListenerRequest.IsWebSocketRequest
- uid: System.Net.HttpListenerRequest.KeepAlive*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: KeepAlive
  nameWithType: HttpListenerRequest.KeepAlive
- uid: System.Net.HttpListenerRequest.LocalEndPoint*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: LocalEndPoint
  nameWithType: HttpListenerRequest.LocalEndPoint
- uid: System.Net.HttpListenerRequest.ProtocolVersion*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ProtocolVersion
  nameWithType: HttpListenerRequest.ProtocolVersion
- uid: System.Net.HttpListenerRequest.QueryString*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: QueryString
  nameWithType: HttpListenerRequest.QueryString
- uid: System.Net.HttpListenerRequest.RawUrl*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RawUrl
  nameWithType: HttpListenerRequest.RawUrl
- uid: System.Net.HttpListenerRequest.RemoteEndPoint*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RemoteEndPoint
  nameWithType: HttpListenerRequest.RemoteEndPoint
- uid: System.Net.HttpListenerRequest.RequestTraceIdentifier*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RequestTraceIdentifier
  nameWithType: HttpListenerRequest.RequestTraceIdentifier
- uid: System.Net.HttpListenerRequest.ServiceName*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ServiceName
  nameWithType: HttpListenerRequest.ServiceName
- uid: System.Net.HttpListenerRequest.TransportContext*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: TransportContext
  nameWithType: HttpListenerRequest.TransportContext
- uid: System.Net.HttpListenerRequest.Url*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Url
  nameWithType: HttpListenerRequest.Url
- uid: System.Net.HttpListenerRequest.UrlReferrer*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UrlReferrer
  nameWithType: HttpListenerRequest.UrlReferrer
- uid: System.Net.HttpListenerRequest.UserAgent*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserAgent
  nameWithType: HttpListenerRequest.UserAgent
- uid: System.Net.HttpListenerRequest.UserHostAddress*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserHostAddress
  nameWithType: HttpListenerRequest.UserHostAddress
- uid: System.Net.HttpListenerRequest.UserHostName*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserHostName
  nameWithType: HttpListenerRequest.UserHostName
- uid: System.Net.HttpListenerRequest.UserLanguages*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserLanguages
  nameWithType: HttpListenerRequest.UserLanguages
