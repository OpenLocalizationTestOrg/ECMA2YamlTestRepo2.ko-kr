### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CryptoConfig
  id: CryptoConfig
  children:
  - System.Security.Cryptography.CryptoConfig.#ctor
  - System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])
  - System.Security.Cryptography.CryptoConfig.AddOID(System.String,System.String[])
  - System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms
  - System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)
  - System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])
  - System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)
  - System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)
  langs:
  - csharp
  name: CryptoConfig
  nameWithType: CryptoConfig
  fullName: System.Security.Cryptography.CryptoConfig
  type: Class
  summary: "암호화 구성 정보에 액세스합니다."
  remarks: "다음 표에서이 클래스와 매핑되는 기본 알고리즘 구현에서 인식 하는 단순한 이름 이름이 보여 줍니다. 또는 매핑할 수 있습니다 다른 구현에서는 이러한 이름에에 설명 된 대로 [암호화 클래스에 알고리즘 이름 매핑](~/add/includes/ajax-current-ext-md.md)합니다.      | 단순한 이름 | 알고리즘 구현 |   |-----------------|------------------------------|   |&3;DES, Triple DES, TripleDES System.Security.Cryptography.TripleDES| <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider>|   | AES, System.Security.Cryptography.AesCryptoServiceProvider| <xref:System.Security.Cryptography.AesCryptoServiceProvider>|   | AesManaged, System.Security.Cryptography.AesManaged| <xref:System.Security.Cryptography.AesManaged>|   | System.Security.Cryptography.AsymmetricAlgorithm| <xref:System.Security.Cryptography.RSACryptoServiceProvider>|   | DES, System.Security.Cryptography.DES| <xref:System.Security.Cryptography.DESCryptoServiceProvider>|   | DSA, System.Security.Cryptography.DSA| <xref:System.Security.Cryptography.DSACryptoServiceProvider>|   | ECDH, ECDiffieHellman, ECDiffieHellmanCng, System.Security.Cryptography.ECDiffieHellmanCng| <xref:System.Security.Cryptography.ECDiffieHellmanCng>|   | ECDsa, ECDsaCng, System.Security.Cryptography.ECDsaCng| <xref:System.Security.Cryptography.ECDsaCng>|   | System.Security.Cryptography.HashAlgorithm| <xref:System.Security.Cryptography.SHA1CryptoServiceProvider>|   | HMAC, System.Security.Cryptography.HMAC| <xref:System.Security.Cryptography.HMACSHA1>|   | HMACMD5, System.Security.Cryptography.HMACMD5| <xref:System.Security.Cryptography.HMACMD5>|   | HMACRIPEMD160, System.Security.Cryptography.HMACRIPEMD160| <xref:System.Security.Cryptography.HMACRIPEMD160>|   | HMACSHA1, System.Security.Cryptography.HMACSHA1| <xref:System.Security.Cryptography.HMACSHA1>|   | HMACSHA256, System.Security.Cryptography.HMACSHA256| <xref:System.Security.Cryptography.HMACSHA256>|   | HMACSHA384 System.Security.Cryptography.HMACSHA384| <xref:System.Security.Cryptography.HMACSHA384>|   | System.Security.Cryptography.HMACSHA512| HMACSHA512 <xref:System.Security.Cryptography.HMACSHA512>|   | System.Security.Cryptography.KeyedHashAlgorithm| <xref:System.Security.Cryptography.HMACSHA1>|   | MACTripleDES, System.Security.Cryptography.MACTripleDES| <xref:System.Security.Cryptography.MACTripleDES>|   | MD5, System.Security.Cryptography.MD5| <xref:System.Security.Cryptography.MD5CryptoServiceProvider>|   | System.Security.Cryptography.MD5Cng| <xref:System.Security.Cryptography.MD5Cng>|   | RandomNumberGenerator | <xref:System.Security.Cryptography.RNGCryptoServiceProvider>|   | System.Security.Cryptography.RC2| RC2 <xref:System.Security.Cryptography.RC2CryptoServiceProvider>|   | Rijndael, System.Security.Cryptography.Rijndael| <xref:System.Security.Cryptography.RijndaelManaged>|   | RIPEMD160, ripemd-160, System.Security.Cryptography.RIPEMD160Managed| <xref:System.Security.Cryptography.RIPEMD160Managed>|   | RSA, System.Security.Cryptography.RSA| <xref:System.Security.Cryptography.RSACryptoServiceProvider>|   | SHA, SHA1, System.Security.Cryptography.SHA1| <xref:System.Security.Cryptography.SHA1CryptoServiceProvider>|   | System.Security.Cryptography.SHA1Cng| <xref:System.Security.Cryptography.SHA1Cng>|   | S h a&256;, sha-256, System.Security.Cryptography.SHA256| <xref:System.Security.Cryptography.SHA256Managed>|   | System.Security.Cryptography.SHA256Cng| <xref:System.Security.Cryptography.SHA256Cng>|   | System.Security.Cryptography.SHA256CryptoServiceProvider| <xref:System.Security.Cryptography.SHA256CryptoServiceProvider>|   | SHA384, s h A-384, System.Security.Cryptography.SHA384| <xref:System.Security.Cryptography.SHA384Managed>|   | System.Security.Cryptography.SHA384Cng| <xref:System.Security.Cryptography.SHA384Cng>|   | System.Security.Cryptography.SHA384CryptoServiceProvider| <xref:System.Security.Cryptography.SHA384CryptoServiceProvider>|   | SHA512, sha-512, System.Security.Cryptography.SHA512| <xref:System.Security.Cryptography.SHA512Managed>|   | System.Security.Cryptography.SHA512Cng| <xref:System.Security.Cryptography.SHA512Cng>|   | System.Security.Cryptography.SHA512CryptoServiceProvider| <xref:System.Security.Cryptography.SHA512CryptoServiceProvider>|   | System.Security.Cryptography.SymmetricAlgorithm| <xref:System.Security.Cryptography.RijndaelManaged>|</xref:System.Security.Cryptography.RijndaelManaged></xref:System.Security.Cryptography.SHA512CryptoServiceProvider></xref:System.Security.Cryptography.SHA512Cng></xref:System.Security.Cryptography.SHA512Managed></xref:System.Security.Cryptography.SHA384CryptoServiceProvider></xref:System.Security.Cryptography.SHA384Cng></xref:System.Security.Cryptography.SHA384Managed></xref:System.Security.Cryptography.SHA256CryptoServiceProvider></xref:System.Security.Cryptography.SHA256Cng></xref:System.Security.Cryptography.SHA256Managed></xref:System.Security.Cryptography.SHA1Cng></xref:System.Security.Cryptography.SHA1CryptoServiceProvider></xref:System.Security.Cryptography.RSACryptoServiceProvider></xref:System.Security.Cryptography.RIPEMD160Managed></xref:System.Security.Cryptography.RijndaelManaged></xref:System.Security.Cryptography.RC2CryptoServiceProvider></xref:System.Security.Cryptography.RNGCryptoServiceProvider></xref:System.Security.Cryptography.MD5Cng></xref:System.Security.Cryptography.MD5CryptoServiceProvider></xref:System.Security.Cryptography.MACTripleDES></xref:System.Security.Cryptography.HMACSHA1></xref:System.Security.Cryptography.HMACSHA512></xref:System.Security.Cryptography.HMACSHA384></xref:System.Security.Cryptography.HMACSHA256></xref:System.Security.Cryptography.HMACSHA1></xref:System.Security.Cryptography.HMACRIPEMD160></xref:System.Security.Cryptography.HMACMD5></xref:System.Security.Cryptography.HMACSHA1></xref:System.Security.Cryptography.SHA1CryptoServiceProvider></xref:System.Security.Cryptography.ECDsaCng></xref:System.Security.Cryptography.ECDiffieHellmanCng></xref:System.Security.Cryptography.DSACryptoServiceProvider></xref:System.Security.Cryptography.DESCryptoServiceProvider></xref:System.Security.Cryptography.RSACryptoServiceProvider></xref:System.Security.Cryptography.AesManaged></xref:System.Security.Cryptography.AesCryptoServiceProvider></xref:System.Security.Cryptography.TripleDESCryptoServiceProvider>"
  example:
  - "The following code example demonstrates how to use members of the CryptoConfig class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoConfig#1](~/add/codesnippet/csharp/t-system.security.crypto_81_1.cs)]\n [!code-cpp[System.Security.Cryptography.CryptoConfig#1](~/add/codesnippet/cpp/t-system.security.crypto_81_1.cpp)]\n [!code-vb[System.Security.Cryptography.CryptoConfig#1](~/add/codesnippet/visualbasic/t-system.security.crypto_81_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class CryptoConfig
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoConfig.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.CryptoConfig
  langs:
  - csharp
  name: CryptoConfig()
  nameWithType: CryptoConfig.CryptoConfig()
  fullName: System.Security.Cryptography.CryptoConfig.CryptoConfig()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.CryptoConfig&quot;> </xref> 클래스입니다."
  syntax:
    content: public CryptoConfig ();
    parameters: []
  overload: System.Security.Cryptography.CryptoConfig.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])
  id: AddAlgorithm(System.Type,System.String[])
  parent: System.Security.Cryptography.CryptoConfig
  langs:
  - csharp
  name: AddAlgorithm(Type,String[])
  nameWithType: CryptoConfig.AddAlgorithm(Type,String[])
  fullName: System.Security.Cryptography.CryptoConfig.AddAlgorithm(Type,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "-현재 응용 프로그램 도메인에 사용할 알고리즘 매핑 이름 집합을 추가 합니다."
  remarks: "기본 제공 매핑 및 machine.config 파일에 매핑을 통해 지정 된 매핑에 우선합니다. 신뢰할 수 있는 암호화 작업을 사용 하 여 부분적으로 신뢰 코드를 방지 하기 위해는 매핑이 사용 됩니다."
  syntax:
    content: public static void AddAlgorithm (Type algorithm, string[] names);
    parameters:
    - id: algorithm
      type: System.Type
      description: "에 매핑할 알고리즘입니다."
    - id: names
      type: System.String[]
      description: "배열 알고리즘에 매핑할 이름입니다."
  overload: System.Security.Cryptography.CryptoConfig.AddAlgorithm*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The<code> algorithm</code> or <code>names</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>algorithm</code>어셈블리 외부에서 액세스할 수 없습니다.       -또는-에 있는 항목 중 하나는 <code>names</code> 매개 변수는 비어 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoConfig.AddOID(System.String,System.String[])
  id: AddOID(System.String,System.String[])
  parent: System.Security.Cryptography.CryptoConfig
  langs:
  - csharp
  name: AddOID(String,String[])
  nameWithType: CryptoConfig.AddOID(String,String[])
  fullName: System.Security.Cryptography.CryptoConfig.AddOID(String,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 어플리케이션 도메인에 사용할 개체 식별자 (OID) 매핑에 이름 집합을 추가 합니다."
  remarks: "기본 제공 매핑 및 machine.config 파일에 매핑을 통해 지정 된 매핑에 우선합니다. 신뢰할 수 있는 암호화 작업을 사용 하 여 부분적으로 신뢰 코드를 방지 하기 위해는 매핑이 사용 됩니다."
  syntax:
    content: public static void AddOID (string oid, string[] names);
    parameters:
    - id: oid
      type: System.String
      description: "개체 식별자 (OID)에 매핑됩니다."
    - id: names
      type: System.String[]
      description: "배열에 OID 매핑할 이름입니다."
  overload: System.Security.Cryptography.CryptoConfig.AddOID*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The<code> oid</code> or <code>names</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "항목 중 하나는 <code> names </code> 매개 변수는 비어 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms
  id: AllowOnlyFipsAlgorithms
  parent: System.Security.Cryptography.CryptoConfig
  langs:
  - csharp
  name: AllowOnlyFipsAlgorithms
  nameWithType: CryptoConfig.AllowOnlyFipsAlgorithms
  fullName: System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "런타임에 만들기만 연방 정보 FIPS (Processing Standard) 알고리즘을 인증 하는 정책을 적용 해야 하는지 여부를 나타냅니다."
  remarks: "경우 `false`, 모든 알고리즘을 만들 수 있습니다."
  syntax:
    content: public static bool AllowOnlyFipsAlgorithms { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>정책을 적용 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)
  id: CreateFromName(System.String)
  parent: System.Security.Cryptography.CryptoConfig
  langs:
  - csharp
  name: CreateFromName(String)
  nameWithType: CryptoConfig.CreateFromName(String)
  fullName: System.Security.Cryptography.CryptoConfig.CreateFromName(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정된 된 암호화 개체의 새 인스턴스를 만듭니다."
  remarks: "이 클래스에서 인식 하는 단순한 이름 목록이 <xref:System.Security.Cryptography.CryptoConfig>.</xref:System.Security.Cryptography.CryptoConfig> 을 참조 하십시오."
  example:
  - "The following code example demonstrates how to call the CreateFromName method to create a new SHA1 provider. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoConfig> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoConfig#4](~/add/codesnippet/csharp/m-system.security.crypto_75_1.cs)]\n [!code-cpp[System.Security.Cryptography.CryptoConfig#4](~/add/codesnippet/cpp/m-system.security.crypto_75_1.cpp)]\n [!code-vb[System.Security.Cryptography.CryptoConfig#4](~/add/codesnippet/visualbasic/m-system.security.crypto_75_1.vb)]"
  syntax:
    content: public static object CreateFromName (string name);
    parameters:
    - id: name
      type: System.String
      description: "인스턴스를 만드는 데 사용할 암호화 개체의 단순한 이름입니다."
    return:
      type: System.Object
      description: "지정된 된 암호화 개체의 새 인스턴스입니다."
  overload: System.Security.Cryptography.CryptoConfig.CreateFromName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "설명 하는 알고리즘은 <code> name </code> 매개 변수 처리 표준 FIPS (Federal Information) 모드를 사용 하 고, 사용 되었지만 FIPS 호환 되지 않습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])
  id: CreateFromName(System.String,System.Object[])
  parent: System.Security.Cryptography.CryptoConfig
  langs:
  - csharp
  name: CreateFromName(String,Object[])
  nameWithType: CryptoConfig.CreateFromName(String,Object[])
  fullName: System.Security.Cryptography.CryptoConfig.CreateFromName(String,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정 된 인수에 지정된 된 암호화 개체의 새 인스턴스를 만듭니다."
  remarks: "이 클래스에서 인식 하는 단순한 이름 목록이 <xref:System.Security.Cryptography.CryptoConfig>.</xref:System.Security.Cryptography.CryptoConfig> 을 참조 하십시오."
  example:
  - "The following code example demonstrates how to call the CreateFromName method to initialize a new RSA provider instance accessing the `TestContainer` key container. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoConfig> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoConfig#5](~/add/codesnippet/csharp/e4d60361-8137-4437-9775-_1.cs)]\n [!code-cpp[System.Security.Cryptography.CryptoConfig#5](~/add/codesnippet/cpp/e4d60361-8137-4437-9775-_1.cpp)]\n [!code-vb[System.Security.Cryptography.CryptoConfig#5](~/add/codesnippet/visualbasic/e4d60361-8137-4437-9775-_1.vb)]"
  syntax:
    content: public static object CreateFromName (string name, object[] args);
    parameters:
    - id: name
      type: System.String
      description: "인스턴스를 만드는 데 사용할 암호화 개체의 단순한 이름입니다."
    - id: args
      type: System.Object[]
      description: "지정된 된 암호화 개체를 만드는 데 인수입니다."
    return:
      type: System.Object
      description: "지정된 된 암호화 개체의 새 인스턴스입니다."
  overload: System.Security.Cryptography.CryptoConfig.CreateFromName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "설명 하는 알고리즘은 <code> name </code> 매개 변수 처리 표준 FIPS (Federal Information) 모드를 사용 하 고, 사용 되었지만 FIPS 호환 되지 않습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)
  id: EncodeOID(System.String)
  parent: System.Security.Cryptography.CryptoConfig
  langs:
  - csharp
  name: EncodeOID(String)
  nameWithType: CryptoConfig.EncodeOID(String)
  fullName: System.Security.Cryptography.CryptoConfig.EncodeOID(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정 된 개체 식별자를 (OID)를 인코딩합니다."
  remarks: ''
  example:
  - "The following code example demonstrates how to call the EncodeOID method to encode the specified object identifier. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoConfig> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoConfig#6](~/add/codesnippet/csharp/m-system.security.crypto_22_1.cs)]\n [!code-cpp[System.Security.Cryptography.CryptoConfig#6](~/add/codesnippet/cpp/m-system.security.crypto_22_1.cpp)]\n [!code-vb[System.Security.Cryptography.CryptoConfig#6](~/add/codesnippet/visualbasic/m-system.security.crypto_22_1.vb)]"
  syntax:
    content: public static byte[] EncodeOID (string str);
    parameters:
    - id: str
      type: System.String
      description: "인코딩할 OID입니다."
    return:
      type: System.Byte[]
      description: "인코딩된 OID를 포함 하는 바이트 배열입니다."
  overload: System.Security.Cryptography.CryptoConfig.EncodeOID*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>str</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException
    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException
    description: "OID를 인코딩하는 동안 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)
  id: MapNameToOID(System.String)
  parent: System.Security.Cryptography.CryptoConfig
  langs:
  - csharp
  name: MapNameToOID(String)
  nameWithType: CryptoConfig.MapNameToOID(String)
  fullName: System.Security.Cryptography.CryptoConfig.MapNameToOID(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정 된 단순 이름에 해당 하는 알고리즘의 개체 식별자를 (OID)를 가져옵니다."
  remarks: "이 클래스에서 인식 하는 단순한 이름 목록이 <xref:System.Security.Cryptography.CryptoConfig>.</xref:System.Security.Cryptography.CryptoConfig> 을 참조 하십시오."
  example:
  - "The following code example demonstrates how to call the MapNameToOID method to retrieve an object identifier (OID) from the string name of the SHA1 algorithm. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoConfig> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoConfig#3](~/add/codesnippet/csharp/m-system.security.crypto_80_1.cs)]\n [!code-cpp[System.Security.Cryptography.CryptoConfig#3](~/add/codesnippet/cpp/m-system.security.crypto_80_1.cpp)]\n [!code-vb[System.Security.Cryptography.CryptoConfig#3](~/add/codesnippet/visualbasic/m-system.security.crypto_80_1.vb)]"
  syntax:
    content: public static string MapNameToOID (string name);
    parameters:
    - id: name
      type: System.String
      description: "알고리즘을 가져올 OID의 단순한 이름입니다."
    return:
      type: System.String
      description: "지정된 된 알고리즘의 OID입니다."
  overload: System.Security.Cryptography.CryptoConfig.MapNameToOID*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Reflection.TargetInvocationException
  isExternal: true
  name: System.Reflection.TargetInvocationException
- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicUnexpectedOperationException
  nameWithType: CryptographicUnexpectedOperationException
  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException
- uid: System.Security.Cryptography.CryptoConfig.#ctor
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: CryptoConfig()
  nameWithType: CryptoConfig.CryptoConfig()
  fullName: System.Security.Cryptography.CryptoConfig.CryptoConfig()
- uid: System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: AddAlgorithm(Type,String[])
  nameWithType: CryptoConfig.AddAlgorithm(Type,String[])
  fullName: System.Security.Cryptography.CryptoConfig.AddAlgorithm(Type,String[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.CryptoConfig.AddOID(System.String,System.String[])
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: AddOID(String,String[])
  nameWithType: CryptoConfig.AddOID(String,String[])
  fullName: System.Security.Cryptography.CryptoConfig.AddOID(String,String[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: AllowOnlyFipsAlgorithms
  nameWithType: CryptoConfig.AllowOnlyFipsAlgorithms
  fullName: System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: CreateFromName(String)
  nameWithType: CryptoConfig.CreateFromName(String)
  fullName: System.Security.Cryptography.CryptoConfig.CreateFromName(String)
- uid: System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: CreateFromName(String,Object[])
  nameWithType: CryptoConfig.CreateFromName(String,Object[])
  fullName: System.Security.Cryptography.CryptoConfig.CreateFromName(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: EncodeOID(String)
  nameWithType: CryptoConfig.EncodeOID(String)
  fullName: System.Security.Cryptography.CryptoConfig.EncodeOID(String)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: MapNameToOID(String)
  nameWithType: CryptoConfig.MapNameToOID(String)
  fullName: System.Security.Cryptography.CryptoConfig.MapNameToOID(String)
- uid: System.Security.Cryptography.CryptoConfig.#ctor*
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: CryptoConfig
  nameWithType: CryptoConfig.CryptoConfig
- uid: System.Security.Cryptography.CryptoConfig.AddAlgorithm*
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: AddAlgorithm
  nameWithType: CryptoConfig.AddAlgorithm
- uid: System.Security.Cryptography.CryptoConfig.AddOID*
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: AddOID
  nameWithType: CryptoConfig.AddOID
- uid: System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms*
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: AllowOnlyFipsAlgorithms
  nameWithType: CryptoConfig.AllowOnlyFipsAlgorithms
- uid: System.Security.Cryptography.CryptoConfig.CreateFromName*
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: CreateFromName
  nameWithType: CryptoConfig.CreateFromName
- uid: System.Security.Cryptography.CryptoConfig.EncodeOID*
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: EncodeOID
  nameWithType: CryptoConfig.EncodeOID
- uid: System.Security.Cryptography.CryptoConfig.MapNameToOID*
  parent: System.Security.Cryptography.CryptoConfig
  isExternal: false
  name: MapNameToOID
  nameWithType: CryptoConfig.MapNameToOID
