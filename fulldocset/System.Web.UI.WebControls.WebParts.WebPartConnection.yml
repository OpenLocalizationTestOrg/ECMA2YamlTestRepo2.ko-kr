### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection
  id: WebPartConnection
  children:
  - System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  langs:
  - csharp
  name: WebPartConnection
  nameWithType: WebPartConnection
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection
  type: Class
  summary: "두 수 있도록 하는 개체를 제공 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤 연결을 설정할 수 있습니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "웹 파트 컨트롤 집합에 대 한 연결 링크 또는 두 연결을입니다 <xref:System.Web.UI.WebControls.WebParts.WebPart>(또는 다른 서버 또는 사용자) 데이터를 공유할 수 있도록 하는 컨트롤입니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 데이터를 공유 하는이 기능에 연결된 된 컨트롤을 격리 된 컨트롤에서 제공 하는 기능을 초과 하는 방법으로 사용 될 수 있습니다. 예를 들어 우편 번호 데이터를 제공 하는 한 컨트롤 다른 컨트롤 해당 데이터를 읽을 수 및 우편 번호에 따라 로컬 날씨 정보를 제공할 경우 다음 두 컨트롤의 연결 된 기능 제공 더 많은 가치 사용자에 게 합니다. 이 예제를 확장 하려면 지역 뉴스에 대 한 링크가 있는 컨트롤 처럼 우편 번호에 따라 정보를 표시도 및 우편 번호 데이터로 작업할 수 있는 모든이 컨트롤 우편 번호를 제공 하는 단일 컨트롤이 포함 된 데이터를 공유할 수 다른 컨트롤을 만들 수 있습니다. 웹 파트 응용 프로그램의 최종 사용자가 만들고 제공한 표준 연결 사용자 인터페이스 (UI)를 사용 하 여 웹 브라우저에서 직접 호환 되는 이러한 모든 컨트롤 간의 연결을 관리할 수는 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>컨트롤 또는 개발자가 제공한 사용자 지정 UI를 사용 하 여.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>       이 WebPartConnection 클래스 개요에는 연결을 만들기 위한 기본 세부 사항의 일반 문입니다. 특정 구성 요소 및 연결 만들기와 관련 된 요구 사항에 자세한 내용은 [웹 파트 연결 개요](~/add/includes/ajax-current-ext-md.md), 또는 참조 클래스를 참조 및 코드 예제를 알아보기 쉽게에서 설명 합니다. 웹 파트 연결의 기본적인 기능을 몇 가지: 두- <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> 두 컨트롤의 모든 웹 파트 연결 구성 됩니다. 동시에 둘 이상의 연결에 참여 하는 컨트롤에 대 한 수도 있지만 정확히 두 개의 컨트롤의 모든 단일 연결으로 구성 됩니다. 직접 파생 된 컨트롤의 <xref:System.Web.UI.WebControls.WebParts.WebPart>기본 클래스 또는 ASP.NET 컨트롤, 사용자 지정 서버 컨트롤 및 사용자 정의 컨트롤을 포함 하 여 다른 서버 컨트롤 될 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 파생 되지 않은 컨트롤의 <xref:System.Web.UI.WebControls.WebParts.WebPart>클래스에 배치 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>영역을 자동으로 래핑됩니다는 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>에서 상속할 수 있도록 실행 시 개체는 <xref:System.Web.UI.WebControls.WebParts.WebPart>클래스와 함수 실행 시간으로 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      -컨트롤에 있는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>영역.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 둘 다 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 및 다른 형식의 서버 컨트롤에 있어야는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>영역에 웹 파트 연결 (및 대부분의 다른 웹 파트 기능)에 참여할 수 있도록 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      -소비자 및 공급자입니다. 모든 웹 파트 연결에는 두 개의 컨트롤이:는 기업 데이터와 데이터의 소비자입니다. 공급자는 인터페이스의 형태로 데이터를 반환 하는 지정 된 콜백 메서드를 통해 소비자에 게 데이터를 제공 합니다. (만들고 콜백 메서드를 지정 하는 방법의 예를 들어이 항목의 예제 섹션 참조). 이 콜백 메서드는 공급자 연결 지점 이라고 합니다. 이 연결 지점 (&quot;친숙 한&quot; 이름, ID 및 반환 된 인터페이스의 형식)의 세부 정보에 포함 된 한 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>공급자 컨트롤과 관련 된 개체입니다.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 소비자는 인터페이스의 인스턴스를 사용할 수 있는 지정된 된 메서드를 통해 데이터를 수신 합니다. 이 메서드는 소비자 연결 지점 이라고 하며 연결점 (이름, ID 및 인터페이스의 형식)의 세부 정보에 포함 되어는 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>소비자 컨트롤과 관련 된 개체입니다.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>      -호환 되는 컨트롤 또는 올바른 변환기입니다. 연결을 사용 하려면 소비자 및 공급자 중 하나 여야 합니다 (자신의 지정 된 연결 지점 방법을 같은 종류의 인터페이스 작업할 수 있는 의미) 또는 있어야는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>소비자가 인식할 수 있는 형식으로 공급자가 제공 하는 형식을 변환할 수 있는 개체입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>      -A WebPartConnection 개체입니다. 존재 하는 연결에 대 한 공급자 및 소비자 컨트롤 연결점 세부 정보와 함께 대 한 참조를 포함 하는 WebPartConnection 클래스의 인스턴스 이어야 합니다. 공급자 및 소비자가 호환 되지 않으며 대신 사용 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>개체를 연결 하려면 연결은 변환기를 참조 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>      -연결을 설정 하는 방법. 호환 되는 컨트롤 소비자 및 공급자가 제대로 연결 지점 메서드에 두고 설계 되었으며는 영역에 배치 하 고 WebPartConnection 개체를 사용할 수, 후 마지막 필요한 기본 단계는 연결을 시작입니다. 이러한 방법 중 하나는 사용자가 UI 통해 연결을 만들 수입니다. 배치 하는 경우는 `<asp:connectionszone>` 요소는 페이지와 다른에 필요한 연결에 대 한 구성 요소는 원위치에서 런타임에 사용자 페이지 연결 디스플레이 모드를 전환할 수는 연결 동사를 클릭 공급자 또는 소비자 및 연결 UI의 동사 메뉴 (기반는 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>컨트롤) 표시 됩니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 이 UI를 통해 사용자는 연결을 시작할 수 있습니다. 프로그래밍 방식으로 연결을 시작 하는 다른 방법은 됩니다. 두 경우 모두 있는지 여부를 UI 또는 프로그래밍 방식으로 기본 메서드를 통해 시작 하는 연결 같습니다. 응용 프로그램 호출에서 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>메서드 (또는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>메서드 변환기를 사용 하는 경우)에 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>제어, 공급자, 소비자, 및의 해당 연결 지점 개체를 전달 하 고 메서드가 WebPartConnection 개체를 반환 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>       WebPartConnection 클래스 간 연결의 중요 한 세부 정보를 캡슐화 하는 개체를 정의 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> 클래스는 특정 연결의 세부 정보를 관련 된 속성의 거의 전적으로 구성 됩니다. 여러 속성에 대 한 연결 소비자 컨트롤을 관련이 있습니다. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>속성은 소비자 컨트롤 자체를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>소비자의 ID를 참조 하는 속성</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> 참조</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>개체는 소비자 연결 지점에 대 한 세부 정보를 포함 하는 소비자가 참조 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>속성.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>속성 참조의 ID는 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>개체입니다.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> 이러한 모든 소비자 관련 연결 속성에는 연결을 만드는 할당 된 값이 있어야 합니다.       또한 WebPartConnection 클래스 연결에서 공급자 컨트롤에 관련 된 몇 가지 속성이 있으며 이러한 속성에 해당 하는 소비자에 대 한 합니다. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>속성은 공급자 컨트롤 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>속성의 ID를 참조</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> 하는 동안 자체 참조 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>속성 참조는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>개체 및 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>속성 참조 ID 공급자의 연결 지점입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>       여러 가지 속성 연결의 상태와 관련이 있습니다. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>속성 연결 (현재 데이터 교환)는 활성 또는 비활성 (적극적으로 공유 하지 있지만 여전히 연결 된 데이터) 인지를 나타냅니다.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>속성은 연결이 공유 하는지 여부를 나타냅니다 (페이지의 모든 사용자에 게 사용 가능) 또는 사용자 고유의 연결 및 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>속성 인지를 나타내는 컨트롤 정적 (영구 및 페이지 태그에서 선언 됨) 또는 동적 (만든 프로그래밍 방식으로 삭제할 수 있는지를 의미).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  example:
  - "The following code example demonstrates how to create a simple connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The example demonstrates three ways of forming a connection: declaratively, by placing tags for the connection in the markup of the Web page; programmatically, by creating the connection in code; and through the UI, by placing a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on the page, which enables users to establish a connection.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_2.vb)]\n [!code-cs[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are the `Register` directives for the user control and the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Because the example assumes dynamic compilation of the controls, the source code for the controls should be in an App_Code subfolder; the `Register` tag in the page references only an arbitrary tag prefix and the namespace of the controls. The custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (the provider and consumer) are declared within the Web page's `<asp:webpartzone>` element, inside a `<zonetemplate>` element.  \n  \n The page provides three ways to form a connection between the custom controls. The first method is declarative. In the markup for the page, a <`StaticConnections>` element is declared, and within that is an `<asp:WebPartConnections>` element, with the various consumer and provider details of the connection specified as attributes. This is one way to create a connection, by declaring it directly in the Web page, specifically within the `<asp:WebPartManager>` element. Because of this static connection, a connection between the two custom controls is created immediately the first time the page loads.  \n  \n A second method for forming a connection between the controls is provided by the `<asp:connectionszone>` element in the page. If a user switches a page into connect display mode at run time, and clicks a connect verb on one of the custom controls, the `<asp:connectionszone>` element automatically renders the UI for creating a connection.  \n  \n The page also demonstrates a third way of creating a connection, which is to do it programmatically. In the `Button1_Click` method, the code creates a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object for the provider control, and retrieves its connection point details by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method. It carries out a similar task for the consumer control, calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method. Finally, it creates the new WebPartConnection object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_3.aspx)]  \n  \n After you load the Web page in a browser, the first connection already exists because it is declared within the `<StaticConnections>` element. Enter some text in the **ZIP Code Provider** control, and it will be displayed in the consumer control. Next, disconnect the two controls. Using the **Display Mode** drop-down list control, change the page to connect display mode. Click the verbs menu (represented by a downward arrow in the title bar) for each of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and notice that each has a **Connect** option. This is a connect verb, which appears in the verbs menu only when the page is in connect mode. Click the connect verb on one of the controls, and the connection UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control appears. Click the **Disconnect** button to end the static connection between the controls. Use the **Display Mode** control to return the page to browse mode. Try to enter some new text in the provider again, and note that because the controls are disconnected, the text fails to update in the consumer control.  \n  \n Next, use the same method as above to switch the page into connect display mode again. Click a connect verb on one of the controls. Click the **Create a Connection** link, and use the UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control to create a connection between the controls. This is the second method for creating a connection. Note that as soon as the connection is formed, the last string you entered in the provider control (that failed to appear because the controls were disconnected) suddenly appears in the consumer, because the connection has been recreated. Click the **Disconnect** button to end the current connection that you just created. Return the page to browse mode. Enter some new text in the provider to demonstrate that the text is not updated, and that the controls are again disconnected.  \n  \n Return the page to connect display mode. Instead of clicking a connect verb, click the **Connect WebPart Controls** button, which illustrates the third method of forming a connection. This approach connects the controls programmatically in one simple step without having to use the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. Note that as the connection is created, the last string you entered in the provider suddenly appears in the consumer control."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]

      [System.Web.UI.ParseChildren(true, "Transformers")]

      public sealed class WebPartConnection
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> 클래스입니다."
  remarks: "웹 페이지의 태그에 대 한 연결을 선언한 경우 ASP.NET 파서 인스턴스를 만들 수 있도록 WebPartConnection 생성자가 public 이 생성자는 개발자 코드에서 사용할 수 없습니다.       만들려고 할 때는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>사용할지 프로그래밍 방식으로 개체는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>또는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>에 제공 된 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 이러한 메서드는 연결을 만드는 많은 세부 사항을 처리 하 고 반환 된 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>개체입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>       에 대 한 WebPartConnection 생성자는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>의 값을 설정 하는 클래스는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>및 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>속성을 `true`.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 따라서 새 연결의 기본 상태 (포함 하는 웹 페이지의 태그에 선언 된 것을 의미) 정적 있으며 (페이지의 모든 사용자에 게 표시)을 공유 합니다. 포함 된 페이지의 태그에서 연결을 선언 하 여 일반적인 시나리오의 연결을 추가할 때 대/소문자 됩니다는 `<asp:webpartconnection>` 요소입니다. 그러나, 다른 상황에서 연결을 이러한 속성에 대해 다른 값을 갖게 됩니다. 예를 들어 코드에서 연결 개체를 만들어 프로그래밍 방식으로 한 연결을 추가 하 고 사용자가 기본 사용자 개인 설정 범위에서 페이지를 보고, 동적, user(visible only to the specific user) 연결으로의 연결이 생성 됩니다.      > [!NOTE] >는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>및 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>속성은 읽기 전용 이며 연결의 특성을 결정 하는 이러한 속성은 내부적으로 설정 됩니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>(페이지 태그에서 선언적으로 또는 프로그래밍 방식으로 코드 또는 사용자 인터페이스를 통해) 연결이 만들어진 방식에 따라 컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  syntax:
    content: public WebPartConnection ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  id: Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "가져옵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 역할 소비자 컨트롤에 대 한 연결을 하는 개체입니다."
  remarks: "모든 웹 파트 연결 데이터를 공유 하는 두 개의 구성 됩니다. 공급자의 데이터를 한 컨트롤은 역할 및 다른 컨트롤은 받아 공급자에서 데이터를 처리 하는 소비자 역할입니다. 소비자 속성에 대 한 참조를 가져옵니다는 <xref:System.Web.UI.WebControls.WebParts.WebPart>연결 관계에서 소비자 역할을 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates the programmatic use of the Consumer property.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_1.ascx)]\n [!code-cs[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_2.cs)]\n [!code-vb[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the Consumer property. Near the top of the page are the `Register` directives for the user control and the custom controls. Because this example uses dynamic compilation, the `Register` directive for the source file does not need to reference an assembly name; it includes only an arbitrary tag prefix and the namespace of the controls. In the `Button2_Click` method, the code accesses the connection object through the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, and gets a reference to the consumer control.  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection user interface (UI), to create a connection between the two controls. Click the **Display Consumer Info** button to run the code that demonstrates the Consumer property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 연결에서 소비자 역할을 하는 웹 파트 컨트롤을 나타내는입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "길이 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>속성이&0;입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "연결에서 소비자로 사용 되는 컨트롤에 대 한 연결 지점으로 사용 되는 개체를 가져옵니다."
  remarks: "두 연결을 만들기 위한 필수 단계 중 하나 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 각 컨트롤에 대 한 연결점을 만드는 것입니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 소비자 연결 지점은 소비자 역할을 하는 컨트롤에 연결 하는 방법에 대 한 정보를 포함 하는 개체입니다. 소비자의 소스 코드에서 메서드 중 하나으로 식별 되어야 합니다는 `ConnectionConsumer` 특성입니다. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>소비자 컨트롤과 연결 된 개체는 메서드 및 표시 이름 사용자 인터페이스 (UI)에서 사용 하기 위해 메서드에 대 한 ID를 포함 하는 특성에 대 한 세부 정보를 포함 하 고 어떤 종류의 인터페이스 메서드를 검색할 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 이 소비자에 대 한 정보, 형성을 인식할 수 있는 인터페이스의 유형과 연결을 위한 메서드이 집합을 전체적으로 소비자 연결 지점을 형성 합니다.       기본적으로는 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>개체 하나에 연결할 수 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>한 번에는 개체입니다.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 소비자는 가능한 소비자 연결 지점으로 식별 하는 메서드가 여러 개 있을 수 있지만 (따라서만 활성화할 수 소비자 연결 지점 중 하나)에 소비자로 하나의 연결 소비자만 참여할 수 한 번에 있습니다. 반면, 한 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>개수에 관계 없이에 연결할 수 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>개체.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 이 기본 동작을 재정의 하 여 변경할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>속성에는 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>특성.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>"
  example:
  - "The following code example demonstrates the programmatic use of the ConsumerConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_2.cs)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ConsumerConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. These objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ConsumerConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ConsumerConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> 소비자 컨트롤 연결에 연관 됩니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  id: ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "해당 연결에 대 한 소비자 연결 지점 역할 개체의 ID를 참조 하는 연결에 대 한 속성 값을 가져오거나 설정 합니다."
  remarks: "웹 페이지의 태그에 선언 된 정적 연결의 경우 개발자는 소비자 연결 지점에 사용할 연결 값을 할당 하 여 지정할 수는 `ConsumerConnectionPointID` 특성에 `<asp:webpartconnection>` 요소입니다. 값은 특성에 할당 되지 않은 경우는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>속성 값이 사용 됩니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       일반적으로 동적 (프로그래밍 방식) 연결을 만들 때 ConsumerConnectionPointID 속성의 값으로 설정 해야 합니다. 간단히 호출할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>에서 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>제어, 소비자 및 소비자 연결 지점 (함께 다른 필수 매개 변수), 개체를 전달 하 고이 메서드에서 소비자 연결 지점에 사용할 올바른 ID를 확인 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 마찬가지로, 연결을 끊으면 호출할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>ConsumerConnectionPointID 속성 값을 지정할 필요 없이 메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>      > [!NOTE] > 지정할 때에 소비자 연결 지점의 ID를 확인할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPart>또는 기타 서버 컨트롤 소비자로.</xref:System.Web.UI.WebControls.WebParts.WebPart> 공급자 컨트롤 또는 변환기에서 제공 하는 인터페이스의 인스턴스를 검색 하는 소비자에서 메서드를 식별 해야 합니다. 사용 하 여 표시 된 메서드를 식별 하는 `ConnectionConsumer` 코드 특성입니다. 이 특성을 추가 하는 경우 소비자의에 대 한 ID로 사용 되는 선택적 문자열 값 매개 변수를 추가할 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>개체입니다.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 선택적 ID 매개 변수 값을 제공 하는 경우 해당 값의 연결에 대 한 ConsumerConnectionPointID 속성의 값이 됩니다. ID 값을 제공 하지 않으면는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>속성 값이 사용 됩니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the ConsumerConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ConsumerConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ConsumerConnectionPointID { get; set; }
    return:
      type: System.String
      description: "소비자 연결에 대 한 ID를 포함 하는 문자열을 가리킵니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  id: ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "ID를 참조 하는 연결에 속성 값을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 해당 연결에 대 한 소비자 역할을 제어 합니다."
  remarks: "ConsumerID 속성 값은 사이의 연결을 만들 때 필수 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> 값 속성에 할당 되지 않은 경우 예외가 발생 시기는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 연결을 활성화 하려고 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ConsumerID property and displays it in a label.  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_3.aspx)]\n [!code-cs[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ConsumerID property value."
  syntax:
    content: public string ConsumerID { get; set; }
    return:
      type: System.String
      description: "연결에서 소비자 역할을 하는 컨트롤의 ID를 포함 하는 문자열입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "ID를 가져오거나 설정 합니다.는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> 개체입니다."
  remarks: "모든 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>개체의 ID 속성에 할당 된 고유 값에.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 여러 연결을 구분할 수 있도록 하기 위해입니다.       선언 하 여 정적 연결을 만들 경우는 `<asp:webpartconnection>` 웹 페이지의 요소에는 값을 할당 하지 않으면는 `ID` 특성 예외가 연결에 대 한 경우 throw 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 연결을 활성화 하려고 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 새 동적 연결을 만들고, 호출의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A>연결에 대 한 고유 ID를 생성 하는 메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Here, the ID property is not required, because the connection is dynamic, and the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control assigns an ID to the connection. In the `Button2_Click` method, the code accesses the value of the ID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Connection Details** button to run the code that accesses the ID property value."
  syntax:
    content: public string ID { get; set; }
    return:
      type: System.String
      description: "ID를 포함 하는 문자열을 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  id: IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> 개체는 현재 해당 공급자 및 소비자 컨트롤 사이 데이터 설정 했 고 수 교환 합니다."
  remarks: "IsActive 속성의 상태를 나타내며는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>개체입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 연결에서 공급자 및 소비자 컨트롤 통신 중 이며 공용 인터페이스를 통해 데이터를 교환할 수 연결이이 상태 이면 또는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>개체입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       표준 찾아보기 모드에서 설정 된 연결을 포함 하는 렌더링 된 페이지를 볼 때 연결이 (없는 경우 페이지를 로드할 때 일부 충돌이 나 다른 문제로 인해 활성화 하지) 일반적으로 사용 합니다. 속성 값은 페이지 및 컨트롤 수명 주기의 초기 단계에서 `false`합니다. 연결은 바로 뒤 활성화는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>이벤트에는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>제어 발생 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> 소비자가 공급자에서 지정된 된 인터페이스의 인스턴스를 검색 한 후에 연결은 특히, 활성화 또는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>개체입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       경우에는 활성 연결 인지 확인 하는 것이 유용 여기서 충돌이 나 페이지에 여러 연결으로 인해 동기화 문제가 있을 수도 있습니다. 예를 들어는 두 개의 연결이 사이 충돌이 일종의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤에는 충돌을 피하기 위해 연결 중 하나를 활성화 하지 않을 수 있는 옵션이 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example demonstrates use of the IsActive property.  \n  \n The example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Within the `<script>` element are four event handlers. Each event handler checks the value of the IsActive property on the static connection, and writes a message to the <xref:System.Web.UI.WebControls.Label> control indicating whether the connection is active or inactive at that state of the page and control life cycle. This demonstrates at what point the connection becomes active, and that it remains active after the page is rendered.  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created, and messages have already been written to the labels showing whether the connection was active at various points in the page and control life cycle. Click the **Connection Details** button, and note that the connection is not active at that point, but that the connection is reactivated each time after the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> event, and that it is still active (and will remain so) after the <xref:System.Web.UI.Control.PreRender> event of the page."
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>연결이 활성화; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  id: IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> 개체는 현재 사용자에만 또는 모든 사용자에 게 표시 합니다."
  remarks: "개별와 마찬가지로 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤은 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>개체는 공유 또는 사용자 당 인스턴스 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPart> 공유 인스턴스 연결, 웹 페이지의 모든 사용자에 게 표시 됩니다. 사용자 단위 인스턴스 의미 연결은 특정 사용자 에게만 표시 됩니다.을 의미 합니다.       일반적으로 연결을 한 페이지에 추가 되는 방법은 연결을 공유할지 여부를 결정 합니다. 연결, 웹 페이지의 태그에 선언 된 연결에서 공유 되 고 IsShared 속성 값은 `true`합니다. 또한 웹 페이지 공유 개인 설정 범위에 있으면 연결을 추가할 때 연결 공유 됩니다. 일반적으로 사용자를 사용 하는 경우는 `<asp:connectionszone>` UI (사용자 인터페이스) 페이지는 연결을 추가할 사용자 개인 설정 범위에서는 연결은 공유 되지 않으며 IsShared 속성 값은 이므로 `false`합니다."
  example:
  - "The following code example demonstrates programmatic use of the IsShared property.  \n  \n The code example has five parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An entry in the Web.config file that is required to run the example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_2.cs)]\n [!code-vb[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_2.vb)]  \n  \n The third part of the code example is the Web page. In the `Button2_Click` method, it checks the IsShared property of the existing connection and displays the result on the page.  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_3.aspx)]  \n  \n The fourth part of the code example is an entry in the Web.config file that is required for the user account that will be running the example to be able to edit the page in shared personalization scope. To enable this, you must have an entry in the Web.config file within the `<system.web>` section that looks like the following example.  \n  \n```  \n<webParts>  \n  <personalization>  \n    <authorization>  \n      <allow users=\"UserAccount\"  \n             roles=\"admin\"  \n             verbs=\"enterSharedScope\"/>  \n    </authorization>            \n  </personalization>  \n</webParts>  \n```  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect display mode. Click the **Connect WebPart Controls** button to form a connection. Next, click the **Connection Details** button to display whether the connection is shared. If you created the connection with the page in the default user personalization scope, the IsShared property value should be `false` for the connection.  \n  \n On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (indicated by the downward arrow in the title bar), click the connect verb. When the connection UI appears, click the **Disconnect** button to end the connection. Use the **Display Mode** control to return the page to browse mode.  \n  \n In the **Display Mode** control, select the **Shared** option to switch the page into shared personalization scope. Follow the same steps as those above to create a connection, and again click the **Connection Details** button to display whether the connection is shared. In this case, the value of the IsShared property should be `true`."
  syntax:
    content: public bool IsShared { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>연결이; 공유 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  id: IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> 개체를 웹 페이지의 태그에 선언 하거나 프로그래밍 방식으로 생성 합니다."
  remarks: "웹 파트 컨트롤 간의 연결에는 정적 이거나 동적일 수 있습니다. 웹 페이지의 태그에 선언 된 정적 연결을 사용 하 여는 `<asp:WebPartConnection>` 요소입니다. 동적 연결을 프로그래밍 방식으로 만드는 또는에 정의 된 사용자 인터페이스 (UI)를 통해 연결을 만드는 사용자는 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>컨트롤.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>       정적 연결은 웹 페이지의 모든 사용자에 게 사용할 수 있는 의미 하는 공유 개체입니다. 기본적으로 영구 모두 또한 하기 때문에 정적 같은 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤을 영구적으로 삭제할 수 없습니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>      > [!NOTE] > 정적 연결 개체를 영구적으로 삭제할 수, 하는 동안이 영구적으로 연결이 끊어질 수 있습니다. 이 경우 연결이 끊긴된 개체는 서버에 존재 하지만 최종 사용자가 페이지에 개체의 존재 여부를 알 수 없습니다."
  example:
  - "The following code example demonstrates the programmatic use of the IsStatic property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method accesses the IsStatic property to check whether the connection is static.  \n  \n [!code-vb[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_2.aspx)]\n [!code-cs[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to display the value of the IsStatic property."
  syntax:
    content: public bool IsStatic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>연결이 정적; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  id: Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "가져옵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 웹 파트 연결에서 공급자 역할을 제어 합니다."
  remarks: "모든 웹 파트 연결 두 이루어져 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤-소비자 및 공급자--및 공급자 속성에 대 한 연결 공급자 컨트롤에 대 한 참조를 반환 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>       연결 (소비자 컨트롤)에서에 대응와 같은 공급자 컨트롤은 연결을 설정 해야 합니다. 프로그래밍 방식으로 또는 페이지 지 속성 형식을 선언 하 여 연결을 만들 수 있는지 여부를 공급자는 연결에 대 한 역할을 하는 컨트롤을 지정 해야 합니다."
  example:
  - "The following code example demonstrates use of the Provider property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_1.vb)]\n [!code-cs[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_1.cs)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Notice that in the `<asp:webpartconnection>` element, the `ProviderID` attribute has the ID of the provider control assigned to it. This is required to identify the provider for the static connection. The `Button1_Click` method accesses the Provider property and writes some of its details to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Provider Details** button to display some of the property values accessed through the Provider property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 데이터의 공급자 역할을 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "길이 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>속성 값은&0;입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  id: ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "에 대 한 연결 지점으로 사용 되는 개체를 가져옵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 제어 공급자는 연결에 대 한 역할을 합니다."
  remarks: "두 연결을 만들기 위한 필수 단계 중 하나 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 각 컨트롤에 대 한 연결점을 만드는 것입니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 공급자 연결 지점은 공급자 역할을 하는 컨트롤에 연결 하는 방법에 대 한 정보를 포함 하는 개체입니다. 공급자의 소스 코드에서 메서드 중 하나으로 식별 되어야 합니다는 `ConnectionProvider` 특성입니다. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>즉 컨트롤 공급자와 메서드 및 사용자 인터페이스 (UI)에서 사용할 표시 이름 메서드에 대 한 ID를 포함 하는 특성에 대 한 세부 정보를 포함 하 고 소비자 컨트롤에 반환할 수 있습니다 어떤 유형의 인터페이스 인스턴스가 메서드에 연결 합니다.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 이 공급자에 대 한 정보, 연결 및 제공 하는 인터페이스의 형식을 설정 하기 위한 메서드이 집합을 전체적으로 공급자 연결 지점을 형성 합니다.       기본적으로는 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>하나만 연결할 수 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>한 번에는 개체입니다.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 소비자는 가능한 소비자 연결 지점으로 식별 하는 메서드가 여러 개 있을 수 있지만 (따라서만 활성화할 수 소비자 연결 지점 중 하나)에 소비자로 하나의 연결 소비자만 참여할 수 한 번에 있습니다. 반면, 한 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>개수에 관계 없이에 연결할 수 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>기본적으로는 개체입니다.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 예를 들어 우편 번호를 제공 하는 공급자 컨트롤 날씨 데이터, 뉴스 등의 우편 번호에 따라 데이터의 다양 한 종류를 만드는 우편 번호를 사용 하는 여러 소비자 컨트롤에 연결할 수 없습니다. 이 기본 동작을 재정의 하 여 변경할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>속성에는 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>특성.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>"
  example:
  - "The following code example demonstrates the programmatic use of the ProviderConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ProviderConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. Note the call to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. The various created objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ProviderConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ProviderConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> 연결에서 공급자 컨트롤과 관련 된 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  id: ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "해당 연결에 대 한 공급자 연결 지점 역할 개체의 ID를 참조 하는 연결에 대 한 속성 값을 가져오거나 설정 합니다."
  remarks: "웹 페이지의 태그에 선언 된 정적 연결의 경우 개발자는 공급자 연결 지점에 사용할 연결 값을 할당 하 여 지정할 수는 `ProviderConnectionPointID` 특성에 `<asp:webpartconnection>` 요소입니다. 값은 특성에 할당 되지 않은 경우는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>속성 값이 사용 됩니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       일반적으로 동적 (프로그래밍 방식) 연결을 만들 때 ProviderConnectionPointID 속성의 값으로 설정 해야 합니다. 간단히 호출할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>에서 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>제어, 공급자 및 공급자 연결 지점 (함께 다른 필수 매개 변수), 개체를 전달 하 고이 메서드에서 올바른 ID 공급자의 연결 지점에 사용할를 확인 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 마찬가지로, 연결을 끊으면 호출할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>ProviderConnectionPointID 속성 값을 지정할 필요 없이 메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>      > [!NOTE] > 지정할 때 공급자의 연결 지점의 ID를 확인할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPart>또는 기타 서버 컨트롤 공급자로.</xref:System.Web.UI.WebControls.WebParts.WebPart> 데이터 소비자를 포함 하는 인터페이스의 인스턴스를 제공 하는 공급자에서 콜백 메서드를 식별 해야 합니다. 사용 하 여 표시 된 메서드를 식별 하는 `ConnectionProvider` 코드 특성입니다. 이 특성을 추가 하는 경우 공급자의에 대 한 ID로 사용 되는 선택적 문자열 값 매개 변수를 추가할 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>개체입니다.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 선택적 ID 매개 변수 값을 제공 하는 경우 해당 값의 연결에 대 한 ProviderConnectionPointID 속성의 값이 됩니다. ID 값을 제공 하지 않으면는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>개체가 만들어질 때 컨트롤에 기본 ID를 할당 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point (and the ID) defined in the provider control. Then, in the `Button2_Click` method, the code accesses the ProviderConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ProviderConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ProviderConnectionPointID { get; set; }
    return:
      type: System.String
      description: "공급자 연결 지점 개체에 대 한 ID를 포함 하는 문자열입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  id: ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "ID를 참조 하는 연결에 속성 값을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 해당 연결에 대 한 공급자 역할을 제어 합니다."
  remarks: "두 연결을 만들 때 ProviderID 속성 값은 필수 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> 값 속성에 할당 되지 않은 경우 예외가 발생 시기는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 연결을 활성화 하려고 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ProviderID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. To do that, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button, and the controls are disconnected. Next, use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ProviderID property value."
  syntax:
    content: public string ProviderID { get; set; }
    return:
      type: System.String
      description: "공급자 컨트롤의 ID를 포함 하는 문자열입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  id: ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "상속 된 재정의 <xref:System.Object.ToString*>메서드와 연결 개체에 대 한 짧은 형식 이름을 반환 합니다.</xref:System.Object.ToString*>"
  remarks: "이 메서드는 주로 편의상 컨트롤 디자이너에 의해 사용 됩니다. 정규화 된 형식 이름이 아닌 더 짧은 형식 이름을 사용 하 여 연결 개체 디자인 뷰에서 표시 되는 방식을 향상 됩니다. 그러나 메서드는 연결 개체의 형식 이름을 확인 하려면 코드의 한 지점에서 나 호출할 수 있습니다."
  example:
  - "The following code example demonstrates how to call the ToString method to return the short type name of a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_1.cs)]\n [!code-vb[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method calls the ToString method to write the type name of the connection to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to execute the ToString method."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "짧은 (정규화 되지 않은) 형식 이름을 포함 하는 문자열을 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  id: Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "가져옵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> 데이터 웹 파트 연결에서 그렇지 않은 경우 호환 되지 않는 두 연결점 간을 변환 하는 데 사용 되는 개체입니다."
  remarks: "웹 파트 연결에서 두 가지 방법으로 공급자 및 소비자 컨트롤 연결에 연결할 수 있습니다. 각각의 해당를 통해 직접 연결할 수 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>개체 및 두 컨트롤에서 인식 하는 인터페이스 형식입니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 호환 되지 않는, 경우으로 연결할 수 있습니다를 직접 사용 하 여 또는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>인터페이스 인스턴스 공급자에서 소비자가 인식할 수 있는 형식으로 변환 하는 개체입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       변환기는 연결의 일부로 필요 하면 Transformer 속성에 대 한 참조를 제공 하는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>개체입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 내에서 사용자 지정 변환기 (또는 웹 파트 컨트롤 집합와 함께 제공 되는 변환기 중 하나)에 대 한 태그를 추가 하 여 웹 페이지의 태그에서 선언적으로 연결에 대 한 변환기를 추가할 수는 `<asp:WebPartConnection>` 요소입니다. 추가할 수도 있습니다는 변환기를 프로그래밍 방식으로 코드에 해당 형식의 인스턴스를 만들고 호출는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>에서 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 다른 필요한 매개 변수와 함께 변환기 개체를 전달 하 여 연결을 만듭니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformer
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;></xref>. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  id: Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "컬렉션을 가져옵니다 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> 웹 파트 컨트롤 집합에서 내부적으로 사용 되는 개체입니다."
  remarks: "속성에 대 한 의도 하지 않은 변환기 개발자가 사용 합니다. 개발자가 관련 연결 된 변환기에 액세스 하려면 항상 사용할지는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>속성.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>       변환기 속성 페이지 개발자가 선언 내에서 변환기 요소를 사용 하도록 설정 하는 웹 파트 컨트롤에서 내부적으로 사용 되는 `<asp:webpartconnection>` 요소 웹 페이지의 태그에 있습니다."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformerCollection&quot;> </xref> 포함 된 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> 개체입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPart
  nameWithType: WebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformer
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformer
  nameWithType: WebPartTransformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformerCollection
  nameWithType: WebPartTransformerCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection
  nameWithType: WebPartConnection.WebPartConnection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString
  nameWithType: WebPartConnection.ToString
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
