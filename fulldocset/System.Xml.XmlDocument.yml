### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlDocument
  id: XmlDocument
  children:
  - System.Xml.XmlDocument.#ctor
  - System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  - System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  - System.Xml.XmlDocument.BaseURI
  - System.Xml.XmlDocument.CloneNode(System.Boolean)
  - System.Xml.XmlDocument.CreateAttribute(System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateCDataSection(System.String)
  - System.Xml.XmlDocument.CreateComment(System.String)
  - System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateDocumentFragment
  - System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateEntityReference(System.String)
  - System.Xml.XmlDocument.CreateNavigator
  - System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  - System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  - System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  - System.Xml.XmlDocument.CreateTextNode(System.String)
  - System.Xml.XmlDocument.CreateWhitespace(System.String)
  - System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  - System.Xml.XmlDocument.DocumentElement
  - System.Xml.XmlDocument.DocumentType
  - System.Xml.XmlDocument.GetElementById(System.String)
  - System.Xml.XmlDocument.GetElementsByTagName(System.String)
  - System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  - System.Xml.XmlDocument.Implementation
  - System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  - System.Xml.XmlDocument.InnerText
  - System.Xml.XmlDocument.InnerXml
  - System.Xml.XmlDocument.IsReadOnly
  - System.Xml.XmlDocument.Load(System.IO.Stream)
  - System.Xml.XmlDocument.Load(System.IO.TextReader)
  - System.Xml.XmlDocument.Load(System.String)
  - System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  - System.Xml.XmlDocument.LoadXml(System.String)
  - System.Xml.XmlDocument.LocalName
  - System.Xml.XmlDocument.Name
  - System.Xml.XmlDocument.NameTable
  - System.Xml.XmlDocument.NodeChanged
  - System.Xml.XmlDocument.NodeChanging
  - System.Xml.XmlDocument.NodeInserted
  - System.Xml.XmlDocument.NodeInserting
  - System.Xml.XmlDocument.NodeRemoved
  - System.Xml.XmlDocument.NodeRemoving
  - System.Xml.XmlDocument.NodeType
  - System.Xml.XmlDocument.OwnerDocument
  - System.Xml.XmlDocument.ParentNode
  - System.Xml.XmlDocument.PreserveWhitespace
  - System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  - System.Xml.XmlDocument.Save(System.IO.Stream)
  - System.Xml.XmlDocument.Save(System.IO.TextWriter)
  - System.Xml.XmlDocument.Save(System.String)
  - System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.SchemaInfo
  - System.Xml.XmlDocument.Schemas
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  - System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.XmlResolver
  langs:
  - csharp
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
  type: Class
  summary: "XML 문서를 나타냅니다. 로드, 유효성 검사, 편집, 추가 및 XML 문서에서 위치를 지정 하려면이 클래스를 사용할 수 있습니다."
  remarks: "<a name=\"Remarks\"></a> The XmlDocument class is an in-memory representation of an XML document. It implements the W3C [XML Document Object Model (DOM)](~/add/includes/ajax-current-ext-md.md) Level 1 Core and the Core DOM Level 2.  \n  \n *DOM* stands for *document object model*. To read more about it, see [XML Document Object Model (DOM)](../Topic/XML%20Document%20Object%20Model%20\\(DOM\\).md).  \n  \n You can load XML into the DOM by using the XmlDocument class, and then programmatically read, modify, and remove XML in the document.  \n  \n If you want to pry open the XmlDocument class and see how it’s implemented, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml/Xml/System/Xml/Dom/XmlDocument.cs#f82a4c1bd1f0ee12).  \n  \n<a name=\"Common\"></a>   \n## Tasks  \n  \n-   [Load XML into the document object model](#Load)  \n  \n-   [Validate it against a schema](#Validation)  \n  \n-   [Navigate the document tree](#Navigate)  \n  \n-   [Find nodes](#Find)  \n  \n-   [Edit nodes](#Edit)  \n  \n-   [Add nodes](#Add)  \n  \n-   [Remove nodes](#Remove)  \n  \n-   [Position nodes](#Position)  \n  \n<a name=\"Load\"></a>   \n## Load XML into the document object model  \n Start with an XML document like this one. It’s just a few books in a collection. But it does contain the basic things that you’d find in any XML document; a namespace, elements that represent data and attributes that describe the data.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<books xmlns=\"http://www.contoso.com/books\">  \n  <book genre=\"novel\" ISBN=\"1-861001-57-8\" publicationdate=\"1823-01-28\">  \n    <title>Pride And Prejudice</title>  \n    <price>24.95</price>  \n  </book>  \n  <book genre=\"novel\" ISBN=\"1-861002-30-1\" publicationdate=\"1985-01-01\">  \n    <title>The Handmaid's Tale</title>  \n    <price>29.95</price>  \n  </book>  \n  <book genre=\"novel\" ISBN=\"1-861001-45-3\" publicationdate=\"1811-01-01\">  \n    <title>Sense and Sensibility</title>  \n    <price>19.95</price>  \n  </book>  \n</books>  \n```  \n  \n Next, load this data into the DOM so that you can work with it in memory. The most popular way to do this is refer to a file on your local computer or on a network.  \n  \n This example loads XML from a file. If the file doesn’t exist, it just generates some XML and loads that.  \n  \n [!code-cpp[XMLProcessingApp#1](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#1)]\n [!code-cs[XMLProcessingApp#1](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#1)]\n [!code-vb[XMLProcessingApp#1](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#1)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Reading an XML Document into the DOM](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Validation\"></a>   \n## Validate it against a schema  \n Start with an XML schema like this one. This schema defines the data types in the XML and which attributes are required.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"  \n  attributeFormDefault=\"unqualified\"   \n  elementFormDefault=\"qualified\"  \n  targetNamespace=\"http://www.contoso.com/books\">   \n  <xs:element name=\"books\">  \n    <xs:complexType>  \n      <xs:sequence>  \n        <xs:element maxOccurs=\"unbounded\" name=\"book\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"title\" type=\"xs:string\" />  \n              <xs:element name=\"price\" type=\"xs:decimal\" />  \n            </xs:sequence>  \n            <xs:attribute name=\"genre\" type=\"xs:string\" use=\"required\" />  \n            <xs:attribute name=\"ISBN\" type=\"xs:string\" use=\"required\" />  \n            <xs:attribute name=\"publicationdate\" type=\"xs:date\" use=\"required\" />  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:sequence>  \n    </xs:complexType>  \n  </xs:element>  \n</xs:schema>  \n```  \n  \n Create an <xref:System.Xml.XmlReader> object by using your schema, and then load that object into the DOM. Create an event handler that executes when code attempts to modify your XML file in ways that violate the rules of the schema.  \n  \n These blocks of code show helper methods that do all of this.  \n  \n [!code-cpp[XMLProcessingApp#2](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#2)]\n [!code-cs[XMLProcessingApp#2](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#2)]\n [!code-vb[XMLProcessingApp#2](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#2)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Validating an XML Document in the DOM](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Navigate\"></a>   \n## Navigate the document tree  \n You can use properties to navigate around an XML document. But before you use any of them, let’s quickly review a few terms. Your document is composed of nodes. Each node has as single *parent* node directly above it. The only node that does not have a parent node is the document root, as it is the top-level node. Most nodes can have *child* nodes, which are nodes directly below them. Nodes that are at the same level are *siblings*.  \n  \n The following examples, show you how to obtain the root node, jump to the first child node of the root node, access any of its child nodes, get back out to the parent node, and then navigate across sibling nodes.  \n  \n **Start with the root node**  \n  \n This example gets the root node and then uses that node to output the contents of the document to the console.  \n  \n [!code-cs[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_3.cs)]\n [!code-cpp[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_3.cpp)]\n [!code-vb[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_3.vb)]  \n  \n **Get child nodes**  \n  \n This example jumps to the first child node of the root node and then iterates through the child nodes of that node if any exist.  \n  \n [!code-cs[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_4.cs)]\n [!code-cpp[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_4.cpp)]\n [!code-vb[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_4.vb)]  \n  \n **Get back to the parent node**  \n  \n Use the <xref:System.Xml.XmlDocument.ParentNode%2A> property.  \n  \n **Refer to the last child node**  \n  \n This example writes the price of a book to the console (which is the last child node of a book node).  \n  \n [!code-cpp[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_5.cpp)]\n [!code-cs[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_5.cs)]\n [!code-vb[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_5.vb)]  \n  \n **Navigate forward across siblings**  \n  \n This example moves forward from book to book. Book nodes are siblings to one another.  \n  \n [!code-vb[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_6.vb)]\n [!code-cpp[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_6.cpp)]\n [!code-cs[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_6.cs)]  \n  \n **Navigate backwards across siblings**  \n  \n This example moves backwards from book to book.  \n  \n [!code-cs[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_7.cs)]\n [!code-cpp[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_7.cpp)]\n [!code-vb[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_7.vb)]  \n  \n<a name=\"Find\"></a>   \n## Find nodes  \n The most popular way to find one or more nodes of data is to use an XPath query string, but there are also methods that don’t require one.  \n  \n **Get a single node**  \n  \n This example locates a book by using the ISBN number.  \n  \n [!code-cpp[XMLProcessingApp#3](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#3)]\n [!code-cs[XMLProcessingApp#3](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#3)]\n [!code-vb[XMLProcessingApp#3](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#3)]  \n  \n The string used in this example is an Xpath query. You can find more examples of them here:   [XPath examples](https://msdn.microsoft.com/en-us/library/ms256086.aspx).  \n  \n You can also use the <xref:System.Xml.XmlDocument.GetElementById%2A> to retrieve nodes. To use this approach, you’ll have to define ID’s in the document type definition declarations of your XML file.  \n  \n After you get a node, you get the value of attributes or child nodes. This example does that with a book node.  \n  \n [!code-cpp[XMLProcessingApp#4](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#4)]\n [!code-cs[XMLProcessingApp#4](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#4)]\n [!code-vb[XMLProcessingApp#4](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#4)]  \n  \n **Get a collection of nodes**  \n  \n This example selects all books where the author's last name is **Austen**, and then changes the price of those books.  \n  \n [!code-cpp[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_10.cpp)]\n [!code-cs[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_10.cs)]\n [!code-vb[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_10.vb)]  \n  \n You can also get a collection of nodes by using the name of the node. For example, this example gets a collection of all book titles.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_11.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_11.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_11.vb)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Select Nodes Using XPath Navigation](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Edit\"></a>   \n## Edit nodes  \n This example edits a book node and its attributes.  \n  \n [!code-cpp[XMLProcessingApp#7](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#7)]\n [!code-cs[XMLProcessingApp#7](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#7)]\n [!code-vb[XMLProcessingApp#7](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#7)]  \n  \n **Learn more:** [Modifying Nodes, Content, and Values in an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n<a name=\"Add\"></a>   \n## Add nodes  \n To add a node, use the <xref:System.Xml.XmlDocument.CreateElement%2A> method or the <xref:System.Xml.XmlDocument.CreateNode%2A> method.  \n  \n To add a data node such as a book, use the <xref:System.Xml.XmlDocument.CreateElement%2A> method.  \n  \n For any other type of node such as a comment, whitespace node, or CDATA node, use the <xref:System.Xml.XmlDocument.CreateNode%2A> method.  \n  \n This example creates a book node, adds attrubutes to that node, and then adds that node to the document.  \n  \n [!code-cpp[XMLProcessingApp#5](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#5)]\n [!code-cs[XMLProcessingApp#5](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#5)]\n [!code-vb[XMLProcessingApp#5](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#5)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Inserting Nodes into an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Remove\"></a>   \n## Remove nodes  \n To remove a node, use the <xref:System.Xml.XmlNode.RemoveChild%2A> method.  \n  \n This example removes a book from the document and any whitespace that appears just before the book node.  \n  \n [!code-cpp[XMLProcessingApp#6](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#6)]\n [!code-cs[XMLProcessingApp#6](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#6)]\n [!code-vb[XMLProcessingApp#6](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#6)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Removing Nodes, Content, and Values from an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Position\"></a>   \n## Position nodes  \n You can choose where you want a node to appear in your document by using the <xref:System.Xml.XmlNode.InsertBefore%2A> and <xref:System.Xml.XmlNode.InsertAfter%2A> methods.  \n  \n This example shows two helper methods. One of them moves a node higher in a list. The other one moves a node lower.  \n  \n These methods could be used in an application that enables users to move books up and down in a list of books. When a user chooses a book and presses an up or down button, your code could call methods like these to position the corresponding book node before or after other book nodes.  \n  \n [!code-cpp[XMLProcessingApp#8](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#8)]\n [!code-cs[XMLProcessingApp#8](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#8)]\n [!code-vb[XMLProcessingApp#8](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#8)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)"
  syntax:
    content: 'public class XmlDocument : System.Xml.XmlNode'
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  implements: []
  inheritedMembers:
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NamespaceURI
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.Prefix
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor
  id: '#ctor'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument()
  nameWithType: XmlDocument.XmlDocument()
  fullName: System.Xml.XmlDocument.XmlDocument()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> 클래스입니다."
  remarks: ''
  example:
  - "The following is an example of load-time validation. A document type definition (DTD) validating <xref:System.Xml.XmlReader> is passed to the <xref:System.Xml.XmlDocument.Load%2A> method and a <xref:System.Xml.Schema.ValidationEventHandler> is provided to notify users of any validation errors. In this example a validation error is found, but the document is still loaded. Alternatively, you can define a validating <xref:System.Xml.XmlReader> to throw an exception and stop the load process when a validation error is found by not specifying the <xref:System.Xml.Schema.ValidationEventHandler>. For more information about validating XML data, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  \n  \n [!code-vb[XmlDocument.cctor#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_11_1.vb)]\n [!code-cs[XmlDocument.cctor#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_11_1.cs)]\n [!code-cpp[XmlDocument.cctor#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_11_1.cpp)]  \n  \n The example uses the `bookDTD.xml` file as input.  \n  \n [!code-xml[XmlDocument.cctor#2](~/add/codesnippet/xml/m-system.xml.xmldocument_11_2.xml)]"
  syntax:
    content: public XmlDocument ();
    parameters: []
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  id: '#ctor(System.Xml.XmlImplementation)'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument(XmlImplementation)
  nameWithType: XmlDocument.XmlDocument(XmlImplementation)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlImplementation)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "새 인스턴스를 초기화는 <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> 지정된 된 <xref href=&quot;System.Xml.XmlImplementation&quot;> </xref>합니다."
  syntax:
    content: protected XmlDocument (System.Xml.XmlImplementation imp);
    parameters:
    - id: imp
      type: System.Xml.XmlImplementation
      description: "The <xref uid=&quot;langword_csharp_XmlImplementation&quot; name=&quot;XmlImplementation&quot; href=&quot;&quot;></xref> to use."
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  id: '#ctor(System.Xml.XmlNameTable)'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument(XmlNameTable)
  nameWithType: XmlDocument.XmlDocument(XmlNameTable)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlNameTable)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "새 인스턴스를 초기화는 <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> 지정 <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable> 클래스"
  syntax:
    content: public XmlDocument (System.Xml.XmlNameTable nt);
    parameters:
    - id: nt
      type: System.Xml.XmlNameTable
      description: "The <xref uid=&quot;langword_csharp_XmlNameTable&quot; name=&quot;XmlNameTable&quot; href=&quot;&quot;></xref> to use."
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.BaseURI
  id: BaseURI
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
  fullName: System.Xml.XmlDocument.BaseURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "현재 노드의 기본 URI를 가져옵니다."
  remarks: "네트워크 XML 문서는 다양 한 W3C 표준 포함 구조를 사용 하 여 집계 데이터의 청크 한 이루어져 서로 다른 위치에서 제공 하는 노드를 포함 합니다. `BaseURI` 이러한 노드 출처를 보여 줍니다.       문서 노드의 `BaseURI` XML 문서의 위치를 반환 합니다. 예를 들어 경우는 `XmlDocument` 다음 호출 문서를 사용 하 여 로드 되었습니다. 부하 (&quot;http://server/mydata.xml&quot;)는 `BaseURI` 문서에 대 한 노드는 http://server/mydata.xml 합니다. 그러나 경우는 <xref:System.Xml.XmlDocument.Load%2A>메서드를 다른 URI로 서버에 의해 리디렉션되면 `BaseURI` 에 전달 된 원래 URI 반환는 `Load` 메서드.</xref:System.Xml.XmlDocument.Load%2A>       이 속성은 문서 개체 모델 (DOM)에 Microsoft 확장입니다. 에 대 한 자세한 내용은 `BaseURI` <xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>.</xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName> 참조와 다른 노드 형식 동작"
  syntax:
    content: public override string BaseURI { get; }
    return:
      type: System.String
      description: "노드가 로드 된 위치입니다."
  overload: System.Xml.XmlDocument.BaseURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDocument.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "이 노드의 복제본을 만듭니다."
  remarks: "이 메서드는 노드에 대 한 복사 생성자로 사용 됩니다. 복제 된 노드는 부모 없습니다 (<xref:System.Xml.XmlNode.ParentNode%2A> 반환 `null`).</xref:System.Xml.XmlNode.ParentNode%2A>       경우 `deep` 은 `true`, 복제 된 노드에 모든 자식 노드가 포함, 그렇지 않으면만 `XmlDocument` 노드에 복제 됩니다. 참조는 <xref:System.Xml.XmlNode.CloneNode%2A?displayProperty=fullName>메서드를 다른 노드 형식에서이 메서드가 동작 하는 방법을 참조 하십시오.</xref:System.Xml.XmlNode.CloneNode%2A?displayProperty=fullName>"
  example:
  - "The following example shows the difference between a deep and shallow clone.  \n  \n [!code-cpp[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_13_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_13_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_13_1.vb)]"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정된 된 노드 아래의 하위 트리를 재귀적으로를 복제. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 노드 자체만 복제 하려면."
    return:
      type: System.Xml.XmlNode
      description: "복제 된 <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> 노드."
  overload: System.Xml.XmlDocument.CloneNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String)
  id: CreateAttribute(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String)
  nameWithType: XmlDocument.CreateAttribute(String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> <xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*> 지정"
  remarks: "`XmlAttribute` 에 추가할 수는 <xref:System.Xml.XmlElement>를 사용 하는 <xref:System.Xml.XmlElement.SetAttributeNode%2A>메서드.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>"
  example:
  - "The following creates an attribute and adds it to an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_1_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_1_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_1_1.vb)]"
  syntax:
    content: public System.Xml.XmlAttribute CreateAttribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "특성의 정규화 된 이름입니다. 이름에 콜론을 포함 하는 경우는 <> </> *> 속성은 첫 번째 콜론 앞 이름 부분 및 <> </> *> 속성은 첫 번째 콜론 뒤의 이름 부분을 반영 합니다. <xref:System.Xml.XmlNode.NamespaceURI*>접두사는 접두사가 xmlns 같은 인식된 된 기본 제공 하지 않는 한는 비어 있습니다.</xref:System.Xml.XmlNode.NamespaceURI*> 이 경우 <xref uid=&quot;langword_csharp_NamespaceURI&quot; name=&quot;NamespaceURI&quot; href=&quot;&quot;> </xref> http://www.w3.org/2000/xmlns/ 값입니다."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  id: CreateAttribute(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> 지정 된 정규화 된 이름과 <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "`XmlAttribute` 에 추가할 수는 <xref:System.Xml.XmlElement>를 사용 하는 <xref:System.Xml.XmlElement.SetAttributeNode%2A>메서드.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>"
  syntax:
    content: public System.Xml.XmlAttribute CreateAttribute (string qualifiedName, string namespaceURI);
    parameters:
    - id: qualifiedName
      type: System.String
      description: "특성의 정규화 된 이름입니다. 이름에 콜론이 포함 되 면 하면 <> </> *> 속성은 콜론 앞의 이름 부분을 반영 및 <> </> *> 속성은 콜론 뒤의 이름 부분을 반영 합니다."
    - id: namespaceURI
      type: System.String
      description: "특성의 네임 스페이스 Uri입니다. 정규화 된 이름에 xmlns 접두사가 포함 된, 하는 경우이 매개 변수에서 http://www.w3.org/2000/xmlns/ 이어야 합니다."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  id: CreateAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String,String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> 지정 된 <> </> *>, <> </> *>, 및 <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "`XmlAttribute` 에 추가할 수는 <xref:System.Xml.XmlElement>를 사용 하는 <xref:System.Xml.XmlElement.SetAttributeNode%2A>메서드.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>       이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  syntax:
    content: public virtual System.Xml.XmlAttribute CreateAttribute (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "특성 (있는 경우)의 접두사입니다. String.Empty와 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 동일 합니다."
    - id: localName
      type: System.String
      description: "특성의 로컬 이름입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 URI (있는 경우)는 특성입니다. String.Empty와 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 동일 합니다. 경우 `prefix` 가 xmlns 일이 매개 변수는 http://www.w3.org/2000/xmlns/; 그렇지 않으면 예외가 발생 해야 합니다."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateCDataSection(System.String)
  id: CreateCDataSection(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateCDataSection(String)
  nameWithType: XmlDocument.CreateCDataSection(String)
  fullName: System.Xml.XmlDocument.CreateCDataSection(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlCDataSection&quot;> </xref> 지정된 된 데이터를 포함 합니다."
  remarks: "이 메서드는 문서의 컨텍스트에서 새 개체가 만들어지지만, 것 자동 추가 되지 않습니다 새 개체는 문서 트리에서를 합니다. 새 개체를 추가 하려면 명시적으로 노드 삽입 메서드 중 하나 호출 해야 합니다.       W3C Extensible Markup Language (XML) 1.0 권장 사항에 따라 (www.w3.org/TR/1998/REC-xml-19980210), CDataSection 노드 때 허용 됩니다 및 EntityReference 노드에 요소 노드 내에서 EntityReference 노드 특성 노드의 자식이 아닙니다."
  example:
  - "The following example creates a CDATA node and adds it to the document.  \n  \n [!code-vb[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_9_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_9_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_9_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlCDataSection CreateCDataSection (string data);
    parameters:
    - id: data
      type: System.String
      description: "새 콘텐츠 <xref uid=&quot;langword_csharp_XmlCDataSection&quot; name=&quot;XmlCDataSection&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Xml.XmlCDataSection
      description: "The new <xref uid=&quot;langword_csharp_XmlCDataSection&quot; name=&quot;XmlCDataSection&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateCDataSection*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateComment(System.String)
  id: CreateComment(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateComment(String)
  nameWithType: XmlDocument.CreateComment(String)
  fullName: System.Xml.XmlDocument.CreateComment(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlComment&quot;> </xref> 지정된 된 데이터를 포함 합니다."
  remarks: "이 메서드는 문서의 컨텍스트에서 새 개체가 만들어지지만, 것 자동 추가 되지 않습니다 새 개체는 문서 트리에서를 합니다. 새 개체를 추가 하려면 명시적으로 노드 삽입 메서드 중 하나 호출 해야 합니다.       주석 노드는 W3C Extensible Markup Language (XML) 1.0 권장 사항에 따라 (www.w3.org/TR/1998/REC-xml-19980210)만 EntityReference 노드 특성 노드의 자식이 없는 경우 문서, 요소 및 EntityReference 노드 내에서 허용 됩니다."
  example:
  - "The following example creates a comment and adds it to an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_12_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_12_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_12_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlComment CreateComment (string data);
    parameters:
    - id: data
      type: System.String
      description: "새 콘텐츠 <xref uid=&quot;langword_csharp_XmlComment&quot; name=&quot;XmlComment&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Xml.XmlComment
      description: "The new <xref uid=&quot;langword_csharp_XmlComment&quot; name=&quot;XmlComment&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateComment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  id: CreateDefaultAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDefaultAttribute(String,String,String)
  nameWithType: XmlDocument.CreateDefaultAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateDefaultAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 접두사, 로컬 이름 및 네임 스페이스 URI와 기본 특성을 만듭니다."
  remarks: "이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  syntax:
    content: protected virtual System.Xml.XmlAttribute CreateDefaultAttribute (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "특성 (있는 경우)의 접두사입니다."
    - id: localName
      type: System.String
      description: "특성의 로컬 이름입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 URI (있는 경우)는 특성입니다."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref href=&quot;System.Xml.XmlAttribute&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDefaultAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDocumentFragment
  id: CreateDocumentFragment
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDocumentFragment()
  nameWithType: XmlDocument.CreateDocumentFragment()
  fullName: System.Xml.XmlDocument.CreateDocumentFragment()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlDocumentFragment&quot;> </xref>합니다."
  remarks: "DocumentFragment 노드를 문서에 삽입할 수 없습니다. 그러나 DocumentFragment 노드의 하위 문서에 삽입할 수 있습니다."
  example:
  - "The following example adds new nodes to an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_14_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_14_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_14_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentFragment CreateDocumentFragment ();
    parameters: []
    return:
      type: System.Xml.XmlDocumentFragment
      description: "The new <xref uid=&quot;langword_csharp_XmlDocumentFragment&quot; name=&quot;XmlDocumentFragment&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDocumentFragment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  id: CreateDocumentType(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDocumentType(String,String,String,String)
  nameWithType: XmlDocument.CreateDocumentType(String,String,String,String)
  fullName: System.Xml.XmlDocument.CreateDocumentType(String,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "새 반환 <xref href=&quot;System.Xml.XmlDocumentType&quot;> </xref> 개체입니다."
  remarks: "반환 된 노드는 구문 <xref:System.Xml.XmlDocumentType.Entities%2A>및 <xref:System.Xml.XmlDocumentType.Notations%2A>컬렉션.</xref:System.Xml.XmlDocumentType.Notations%2A> </xref:System.Xml.XmlDocumentType.Entities%2A>       이 메서드는 문서의 컨텍스트에서 새 개체가 만들어지지만, 것 자동 추가 되지 않습니다 새 개체는 문서 트리에서를 합니다. 새 개체를 추가 하려면 명시적으로 노드 삽입 메서드 중 하나 호출 해야 합니다.       문서 노드 내에서 여러 개의 DocumentType 노드는 W3C Extensible Markup Language (XML) 1.0 권장 사항에 따라 (www.w3.org/TR/1998/REC-xml-19980210), 에서만 허용 됩니다. 각 <xref:System.Xml.XmlDocument>DocumentType 노드를 하나만 가질 수 있습니다.</xref:System.Xml.XmlDocument> 루트 요소 앞에 DocumentType 노드를 삽입 해야 합니다는 `XmlDocument` (문서에 이미 루트 요소를 추가할 수 없습니다 DocumentType 노드).       전달된 된 매개 변수 결합 하는 유효한 경우 `XmlDocumentType`, 예외가 throw 됩니다."
  example:
  - "The following example creates a DocumentType node and adds it to an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/cpp/8d2758e1-ca32-4a6b-b7e7-_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/csharp/8d2758e1-ca32-4a6b-b7e7-_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/visualbasic/8d2758e1-ca32-4a6b-b7e7-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentType CreateDocumentType (string name, string publicId, string systemId, string internalSubset);
    parameters:
    - id: name
      type: System.String
      description: "문서 형식의 이름입니다."
    - id: publicId
      type: System.String
      description: "문서 형식의 공용 식별자 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다. 공용 URI 또는 시스템 식별자 외부 DTD 하위 집합의 위치를 식별할 수도 지정할 수 있습니다."
    - id: systemId
      type: System.String
      description: "문서 형식의 시스템 식별자 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다. 외부 DTD 하위 집합에 대 한 파일 위치의 URL을 지정합니다."
    - id: internalSubset
      type: System.String
      description: "문서 형식의 DTD 내부 하위 집합 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Xml.XmlDocumentType
      description: "The new <xref uid=&quot;langword_csharp_XmlDocumentType&quot; name=&quot;XmlDocumentType&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDocumentType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String)
  id: CreateElement(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String)
  nameWithType: XmlDocument.CreateElement(String)
  fullName: System.Xml.XmlDocument.CreateElement(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 이름의 요소를 만듭니다."
  remarks: "인스턴스가 구현 반환 되는 `XmlElement` 인터페이스, 하므로 반환 된 개체에서 직접 기본 특성이 만들어집니다.       이 메서드는 문서의 컨텍스트에서 새 개체가 만들어지지만, 것 자동 추가 되지 않습니다 새 개체는 문서 트리에서를 합니다. 새 개체를 추가 하려면 명시적으로 노드 삽입 메서드 중 하나 호출 해야 합니다.       W3C Extensible Markup Language (XML) 1.0 권장 사항에 따라 (www.w3.org/TR/1998/REC-xml-19980210), 요소 노드 때 허용 됩니다 EntityReference 노드 및 문서와 요소 노드 내의 EntityReference 노드 특성 노드의 자식이 아닙니다."
  example:
  - "The following example creates a new element and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_17_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_17_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_17_1.vb)]"
  syntax:
    content: public System.Xml.XmlElement CreateElement (string name);
    parameters:
    - id: name
      type: System.String
      description: "요소의 정규화 된 이름입니다. 이름에 콜론이 포함 되 면 하면 <> </> *> 속성은 콜론 앞의 이름 부분 및 <> </> *> 속성은 콜론 뒤의 이름 부분을 반영 합니다. 정규화 된 이름 접두사 of&quot;xmlns&quot;를 포함할 수 없습니다."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String)
  id: CreateElement(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String,String)
  nameWithType: XmlDocument.CreateElement(String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlElement&quot;> </xref> 정규화 된 이름과 <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "다음 C# 코드 ```   XmlElement elem;   elem=doc.CreateElement(&quot;xy:item&quot;, &quot;urn:abc&quot;);   ``` 다음 XML 텍스트에 해당 하는 요소에 발생 합니다.      ```   <xy:item          xmlns:xy=&quot;urn:abc&quot;/>   ```이 메서드는 문서의 컨텍스트에서 새 개체가 만들어지지만, 것 자동 추가 되지 않습니다 새 개체는 문서 트리에서를 합니다. 새 개체를 추가 하려면 명시적으로 노드 삽입 메서드 중 하나 호출 해야 합니다.       W3C Extensible Markup Language (XML) 1.0 권장 사항에 따라 (www.w3.org/TR/1998/REC-xml-19980210), 요소 노드 때 허용 됩니다 EntityReference 노드 및 문서와 요소 노드 내의 EntityReference 노드 특성 노드의 자식이 아닙니다."
  syntax:
    content: public System.Xml.XmlElement CreateElement (string qualifiedName, string namespaceURI);
    parameters:
    - id: qualifiedName
      type: System.String
      description: "요소의 정규화 된 이름입니다. 이름에 콜론이 포함 되 면 하면 <> </> *> 속성은 콜론 앞의 이름 부분을 반영 및 <> </> *> 속성은 콜론 뒤의 이름 부분을 반영 합니다. 정규화 된 이름 접두사 of&quot;xmlns&quot;를 포함할 수 없습니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 URI는 요소입니다."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  id: CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String,String,String)
  nameWithType: XmlDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 요소를 만듭니다 <> </> *>, <> </> *>, 및 <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "다음 C# 코드 ```   XmlElement elem;   elem=doc.CreateElement(&quot;xy&quot;, &quot;item&quot;, &quot;urn:abc&quot;);   ``` 다음 XML 텍스트와 같은 요소를 만듭니다: ```   <xy:item xmlns:xy=&quot;urn:abc&quot;/>   ``` 이 메서드는 문서의 컨텍스트에서 새 개체가 만들어지지만, 추가 하지 않습니다 자동으로 새 개체는 문서 트리에서를 합니다. 새 개체를 추가 하려면 명시적으로 노드 삽입 메서드 중 하나 호출 해야 합니다.       W3C Extensible Markup Language (XML) 1.0 권장 사항에 따라 (www.w3.org/TR/1998/REC-xml-19980210), 요소 노드 때 허용 됩니다 EntityReference 노드 및 문서와 요소 노드 내의 EntityReference 특성 노드를 벗어납니다.       이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  example:
  - "The following example adds a new element to the existing XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/csharp/9cc675fc-f986-4de5-bce9-_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/visualbasic/9cc675fc-f986-4de5-bce9-_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/cpp/9cc675fc-f986-4de5-bce9-_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "새 요소 (있는 경우)의 접두사입니다. String.Empty와 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 동일 합니다."
    - id: localName
      type: System.String
      description: "새 요소의 로컬 이름입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 URI (있는 경우)는 새 요소입니다. String.Empty와 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 동일 합니다."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref href=&quot;System.Xml.XmlElement&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateEntityReference(System.String)
  id: CreateEntityReference(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateEntityReference(String)
  nameWithType: XmlDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDocument.CreateEntityReference(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref> 지정 된 이름입니다."
  remarks: "경우 참조 된 엔터티가 알려져의 자식 목록에서 `XmlEntityReference` 노드는 해당 하는 동일 이루어집니다 <xref:System.Xml.XmlEntity>노드.</xref:System.Xml.XmlEntity>       엔터티 참조에 대 한 대체 텍스트에서 사용 되는 네임 스페이스 (예를 들어 엔터티 참조 노드를 삽입할 때 문서에) 엔터티 참조 노드의 부모 먼저 설정 된 시간에 바인딩됩니다. 예를 들어 다음 엔터티일: ```   <!ENTITY a &quot;<b>test</b>&quot;>   ``` 호출 하는 경우 `CreateEntityReference(&quot;a&quot;)` 얻게 EntityReference 유형의 단일 노드에 자식이 없는 합니다. 다음 노드를 자식으로이 노드를 추가 하면 ```   <item xmlns=&quot;urn:1&quot;/>   ``` 호출 시 다음 <xref:System.Xml.XmlNode.AppendChild%2A>, 새로 만들어진된 entityreference 노드 부모 설정 하 고이 네임 스페이스 컨텍스트에서 자식을 확장 됩니다.</xref:System.Xml.XmlNode.AppendChild%2A> 자식 요소 노드의 `b` NamespaceURI 같음 갖습니다 `urn:1`합니다. 엔터티 참조의 자식 노드가 엔터티 참조에 서로 다른 기본 네임 스페이스 컨텍스트가 있는 문서에 있는 위치로 이동 하는 경우에 동일 합니다. 기존 엔터티 참조 노드 제거 하 고 중괄호를 삽입 하거나 <xref:System.Xml.XmlDocument.CloneNode%2A>.</xref:System.Xml.XmlDocument.CloneNode%2A> 복제 하는 엔터티 참조에 대 한이 문제가 발생 하지 새로 만든된 엔터티 참조에만 발생 합니다.       해당 엔터티를 정의 하지 않은 DocumentType에 엔터티 참조 노드를 추가 하는 엔터티 참조는 정의 되어 있지 않으므로 유일한 자식 노드 빈 텍스트 노드가 됩니다.       기본 제공 엔터티 amp, lt, gt, a p o s, 및 q u o t도 허용 여부와 적절 한 확장 된 문자 값을 가진 자식 텍스트 노드를 갖게 됩니다.       이 메서드는 문서의 컨텍스트에서 새 개체가 만들어지지만, 것 자동 추가 되지 않습니다 새 개체는 문서 트리에서를 합니다. 새 개체를 추가 하려면 명시적으로 노드 삽입 메서드 중 하나 호출 해야 합니다.       W3C Extensible Markup Language (XML) 1.0 권장 사항에 따라 (www.w3.org/TR/1998/REC-xml-19980210), EntityReference 노드는 요소, 특성 및 EntityReference 노드 내 에서만 허용 됩니다."
  example:
  - "The following example creates two entity reference nodes and inserts them into an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_7_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_7_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_7_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlEntityReference CreateEntityReference (string name);
    parameters:
    - id: name
      type: System.String
      description: "엔터티 참조의 이름입니다."
    return:
      type: System.Xml.XmlEntityReference
      description: "The new <xref uid=&quot;langword_csharp_XmlEntityReference&quot; name=&quot;XmlEntityReference&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateEntityReference*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "이름이 잘못 되었습니다 (예를 들어 &quot;#&quot;으로 시작 하는 이름은 올바르지 않습니다.)"
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNavigator
  id: CreateNavigator
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNavigator()
  nameWithType: XmlDocument.CreateNavigator()
  fullName: System.Xml.XmlDocument.CreateNavigator()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "새 <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> 이 문서를 탐색 하기 위한 개체입니다."
  remarks: "이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  example:
  - See <xref:System.Xml.XmlNode.CreateNavigator%2A?displayProperty=fullName> for an example using this method.
  syntax:
    content: public override System.Xml.XPath.XPathNavigator CreateNavigator ();
    parameters: []
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> 개체입니다."
  overload: System.Xml.XmlDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  id: CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDocument.CreateNavigator(XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> 에이 문서를 탐색 하는 것에 대 한 개체는 <xref href=&quot;System.Xml.XmlNode&quot;> </xref> 지정 합니다."
  remarks: "이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  example:
  - See <xref:System.Xml.XmlNode.CreateNavigator%2A?displayProperty=fullName> for an example using this method.
  syntax:
    content: protected virtual System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref> 탐색기를 처음에 배치 합니다."
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> 개체입니다."
  overload: System.Xml.XmlDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  id: CreateNode(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(String,String,String)
  nameWithType: XmlDocument.CreateNode(String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlNode&quot;> </xref> 된 지정 된 노드 형식, <> </> *>, 및 <> </> *> 합니다."
  remarks: "The `nodeTypeString` parameter is case sensitive and must be one of the values in the following table.  \n  \n|nodeTypeString|XmlNodeType|  \n|--------------------|-----------------|  \n|attribute|Attribute|  \n|cdatasection|CDATA|  \n|comment|Comment|  \n|document|Document|  \n|documentfragment|DocumentFragment|  \n|documenttype|DocumentType|  \n|element|Element|  \n|entityreference|EntityReference|  \n|processinginstruction|ProcessingInstruction|  \n|significantwhitespace|SignificantWhitespace|  \n|text|Text|  \n|whitespace|Whitespace|  \n  \n Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example creates a new element and inserts it into the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_15_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_15_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_15_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (string nodeTypeString, string name, string namespaceURI);
    parameters:
    - id: nodeTypeString
      type: System.String
      description: "문자열 버전은 <xref:System.Xml.XmlNodeType>새 노드의.</xref:System.Xml.XmlNodeType> 이 매개 변수는 아래 표에 나열 된 값 중 하나 여야 합니다."
    - id: name
      type: System.String
      description: "새 노드의 정규화 된 이름입니다. 이름에 콜론이 있으면, 구문 분석에 <> </> *> 및 <> </> *> 구성 요소입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 새 노드의 URI입니다."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "이름이 제공 되지 및 <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> 이름이; 필요 합니다. 또는 <code> nodeTypeString </code> 아래 나열 된 문자열 중 하나가 아닙니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  id: CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(XmlNodeType,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlNode&quot;> </xref> 지정 된 <xref:System.Xml.XmlNodeType>, <> </> *>, 및 <> </> *>.</xref:System.Xml.XmlNodeType>"
  remarks: "Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example creates a new element and inserts it into an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/csharp/5e223793-7104-464b-b797-_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/cpp/5e223793-7104-464b-b797-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/visualbasic/5e223793-7104-464b-b797-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string name, string namespaceURI);
    parameters:
    - id: type
      type: System.Xml.XmlNodeType
      description: "<xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> 새 노드."
    - id: name
      type: System.String
      description: "새 노드의 정규화 된 이름입니다. 이름에 콜론이 포함 된 경우 다음으로 구문 분석 되 <> </> *> 및 <> </> *> 구성 요소입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 새 노드의 URI입니다."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "이름이 제공 되지 않았습니다 고 <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> 이름이 필요 합니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  id: CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(XmlNodeType,String,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Creates a <xref href=&quot;System.Xml.XmlNode&quot;></xref> with the specified <xref:System.Xml.XmlNodeType>, <>*>, <>*>, and <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*></xref:System.Xml.XmlNodeType>"
  remarks: "Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to the Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example adds a new element to the document.  \n  \n [!code-vb[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/visualbasic/9b485b37-d267-4da7-a8ac-_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/cpp/9b485b37-d267-4da7-a8ac-_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/csharp/9b485b37-d267-4da7-a8ac-_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string prefix, string name, string namespaceURI);
    parameters:
    - id: type
      type: System.Xml.XmlNodeType
      description: "<xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> 새 노드."
    - id: prefix
      type: System.String
      description: "새 노드의 접두사입니다."
    - id: name
      type: System.String
      description: "새 노드의 로컬 이름입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 새 노드의 URI입니다."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "이름이 제공 되지 않았습니다 고 <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> 이름이 필요 합니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  id: CreateProcessingInstruction(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateProcessingInstruction(String,String)
  nameWithType: XmlDocument.CreateProcessingInstruction(String,String)
  fullName: System.Xml.XmlDocument.CreateProcessingInstruction(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlProcessingInstruction&quot;> </xref> 지정 된 이름 및 데이터입니다."
  remarks: "이 메서드는 문서의 컨텍스트에서 새 개체가 만들어지지만, 것 자동 추가 되지 않습니다 새 개체는 문서 트리에서를 합니다. 새 개체를 추가 하려면 명시적으로 노드 삽입 메서드 중 하나 호출 해야 합니다.       W3C Extensible Markup Language (XML) 1.0 권장 사항에 따라 (www.w3.org/TR/1998/REC-xml-19980210), ProcessingInstruction 노드는 경우에 허용 문서, 요소, 그리고 EntityReference 노드 내에서 EntityReference 노드 특성 노드의 자식이 아닙니다."
  example:
  - "The following example creates a ProcessingInstruction node and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/cpp/b628e59c-914d-4083-89f5-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/visualbasic/b628e59c-914d-4083-89f5-_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/csharp/b628e59c-914d-4083-89f5-_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlProcessingInstruction CreateProcessingInstruction (string target, string data);
    parameters:
    - id: target
      type: System.String
      description: "처리 명령의 이름입니다."
    - id: data
      type: System.String
      description: "처리 명령에 대 한 데이터입니다."
    return:
      type: System.Xml.XmlProcessingInstruction
      description: "The new <xref uid=&quot;langword_csharp_XmlProcessingInstruction&quot; name=&quot;XmlProcessingInstruction&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateProcessingInstruction*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  id: CreateSignificantWhitespace(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateSignificantWhitespace(String)
  nameWithType: XmlDocument.CreateSignificantWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateSignificantWhitespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlSignificantWhitespace&quot;> </xref> 노드."
  remarks: "이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다. 수동으로 문서에 서식을 지정할 때 사용 됩니다.       이 메서드는 문서의 컨텍스트에서 새 개체가 만들어지지만, 것 자동 추가 되지 않습니다 새 개체는 문서 트리에서를 합니다. 새 개체를 추가 하려면 명시적으로 노드 삽입 메서드 중 하나 호출 해야 합니다."
  example:
  - "The following example adds significant white space to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_24_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_24_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_24_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace (string text);
    parameters:
    - id: text
      type: System.String
      description: "문자열의 문자는 있어야 합니다. &amp;#20; &amp;#10; &amp;#13; and &amp;#9;"
    return:
      type: System.Xml.XmlSignificantWhitespace
      description: "A new <xref uid=&quot;langword_csharp_XmlSignificantWhitespace&quot; name=&quot;XmlSignificantWhitespace&quot; href=&quot;&quot;></xref> node."
  overload: System.Xml.XmlDocument.CreateSignificantWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateTextNode(System.String)
  id: CreateTextNode(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateTextNode(String)
  nameWithType: XmlDocument.CreateTextNode(String)
  fullName: System.Xml.XmlDocument.CreateTextNode(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlText&quot;> </xref> 지정 된 텍스트입니다."
  remarks: "이 메서드는 문서의 컨텍스트에서 새 개체가 만들어지지만, 것 자동 추가 되지 않습니다 새 개체는 문서 트리에서를 합니다. 새 개체를 추가 하려면 명시적으로 노드 삽입 메서드 중 하나 호출 해야 합니다.       W3C Extensible Markup Language (XML) 1.0 권장 사항에 따라 (www.w3.org/TR/1998/REC-xml-19980210), 텍스트 노드는 요소, 특성 및 EntityReference 노드 내 에서만 허용 됩니다."
  example:
  - "The following example creates a new element and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_3_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_3_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_3_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlText CreateTextNode (string text);
    parameters:
    - id: text
      type: System.String
      description: "텍스트 노드에 대 한 텍스트입니다."
    return:
      type: System.Xml.XmlText
      description: "새 <xref uid=&quot;langword_csharp_XmlText&quot; name=&quot;XmlText&quot; href=&quot;&quot;> </xref> 노드."
  overload: System.Xml.XmlDocument.CreateTextNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateWhitespace(System.String)
  id: CreateWhitespace(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateWhitespace(String)
  nameWithType: XmlDocument.CreateWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateWhitespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlWhitespace&quot;> </xref> 노드."
  remarks: "이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다. 수동으로 문서에 서식을 지정할 때 사용 됩니다.       이 메서드는 문서의 컨텍스트에서 새 개체가 만들어지지만, 것 자동 추가 되지 않습니다 새 개체는 문서 트리에서를 합니다. 새 개체를 추가 하려면 명시적으로 노드 삽입 메서드 중 하나 호출 해야 합니다."
  example:
  - "The following example adds white space to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_4_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_4_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_4_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlWhitespace CreateWhitespace (string text);
    parameters:
    - id: text
      type: System.String
      description: "문자열의 문자는 있어야 합니다. &amp;#20; &amp;#10; &amp;#13; and &amp;#9;"
    return:
      type: System.Xml.XmlWhitespace
      description: "A new <xref uid=&quot;langword_csharp_XmlWhitespace&quot; name=&quot;XmlWhitespace&quot; href=&quot;&quot;></xref> node."
  overload: System.Xml.XmlDocument.CreateWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  id: CreateXmlDeclaration(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateXmlDeclaration(String,String,String)
  nameWithType: XmlDocument.CreateXmlDeclaration(String,String,String)
  fullName: System.Xml.XmlDocument.CreateXmlDeclaration(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlDeclaration&quot;> </xref> 지정된 된 값과 노드."
  remarks: "특성에 특수 속성으로 노출 되는 `XmlDeclaration` 노드를 아니라 <xref:System.Xml.XmlAttribute>노드.</xref:System.Xml.XmlAttribute>       이 메서드는 문서의 컨텍스트에서 새 개체가 만들어지지만, 것 자동 추가 되지 않습니다 새 개체는 문서 트리에서를 합니다. 새 개체를 추가 하려면 명시적으로 노드 삽입 메서드 중 하나 호출 해야 합니다.       W3C Extensible Markup Language (XML) 1.0 권장 사항 (www.w3.org/TR/1998/REC-xml-19980210)에 따라는 `XmlDeclaration` 노드는 문서의 첫 번째 노드 이어야 합니다.       이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  example:
  - "The following example creates an XML declaration and adds it to the document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/csharp/89cf6f87-55c5-4c7d-9c11-_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/cpp/89cf6f87-55c5-4c7d-9c11-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/visualbasic/89cf6f87-55c5-4c7d-9c11-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDeclaration CreateXmlDeclaration (string version, string encoding, string standalone);
    parameters:
    - id: version
      type: System.String
      description: "버전 &quot;1.0&quot; 이어야 합니다."
    - id: encoding
      type: System.String
      description: "인코딩 특성의 값입니다. 저장할 때 사용 되는 인코딩을 이것이 <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> 를 파일이 나 스트림으로; 따라서 설정 되어야 하 여 지 원하는 문자열로 <xref:System.Text.Encoding>클래스 <xref:System.Xml.XmlDocument.Save*>실패.</xref:System.Xml.XmlDocument.Save*> </xref:System.Text.Encoding> 이것이 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 string.empty 일 경우는 <xref uid=&quot;langword_csharp_Save&quot; name=&quot;Save&quot; href=&quot;&quot;> </xref> 메서드에서 인코딩 특성을 XML 선언에 기록 하지 않습니다 및 기본 인코딩인 u t F-8로 사용 됩니다.       참고: 경우는 <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> 로 저장 한 <xref:System.IO.TextWriter>또는 <xref:System.Xml.XmlTextWriter>,이 인코딩 값이 삭제 됩니다.</xref:System.Xml.XmlTextWriter> </xref:System.IO.TextWriter> 대신,의 인코딩을 <xref uid=&quot;langword_csharp_TextWriter&quot; name=&quot;TextWriter&quot; href=&quot;&quot;> </xref> 또는 <xref uid=&quot;langword_csharp_XmlTextWriter&quot; name=&quot;XmlTextWriter&quot; href=&quot;&quot;> </xref> 사용 됩니다. 이렇게 하면 올바른 인코딩을 사용 하 여 기록 된 XML을 읽을 수 하는지는 합니다."
    - id: standalone
      type: System.String
      description: "값 이어야 합니다 &quot;yes&quot; 또는 &quot;no&quot;입니다. 이것이 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 string.empty 일 경우는 <xref uid=&quot;langword_csharp_Save&quot; name=&quot;Save&quot; href=&quot;&quot;> </xref> 메서드에서 독립 실행형 특성이 XML 선언에 기록 하지 않습니다."
    return:
      type: System.Xml.XmlDeclaration
      description: "새 <xref uid=&quot;langword_csharp_XmlDeclaration&quot; name=&quot;XmlDeclaration&quot; href=&quot;&quot;> </xref> 노드."
  overload: System.Xml.XmlDocument.CreateXmlDeclaration*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "값 <code> version </code> 또는 <code> standalone </code> 이외의 위에서 지정한 됩니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.DocumentElement
  id: DocumentElement
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
  fullName: System.Xml.XmlDocument.DocumentElement
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "루트를 가져옵니다 <xref href=&quot;System.Xml.XmlElement&quot;> </xref> 문서에 대 한 합니다."
  remarks: ''
  example:
  - "The following example displays the root element of the XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_8_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_8_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_8_1.vb)]  \n  \n **Output:**  \n  \n```  \n<book genre=\"novel\" ISBN=\"1-861001-57-5\"><title>Pride And Prejudice</title></book>   \n```"
  syntax:
    content: public System.Xml.XmlElement DocumentElement { get; }
    return:
      type: System.Xml.XmlElement
      description: "<xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> XML 문서 트리의 루트를 나타내는입니다. 루트가 없으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 반환 됩니다."
  overload: System.Xml.XmlDocument.DocumentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.DocumentType
  id: DocumentType
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
  fullName: System.Xml.XmlDocument.DocumentType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "DOCTYPE 선언이 포함 된 노드를 가져옵니다."
  remarks: "`XmlDocument` 와 하나의 자식만 있을 수 있습니다 <xref:System.Xml.XmlNodeType>DocumentType 같음.</xref:System.Xml.XmlNodeType>      > [!NOTE] >이 속성은 읽기 전용입니다. DocumentType 노드를 변경 하려면 기존 노드를 삭제를 사용 하 여 새 하나 만듭니다는 <xref:System.Xml.XmlDocument.CreateDocumentType%2A>메서드를 만들고 문서에 새 노드를 추가 합니다.</xref:System.Xml.XmlDocument.CreateDocumentType%2A>"
  example:
  - "The following example gets and displays the DOCTYPE declaration for the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_4_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_4_1.cs)]\n [!code-vb[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_4_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentType DocumentType { get; }
    return:
      type: System.Xml.XmlDocumentType
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref> DocumentType (DOCTYPE 선언)이 포함 된 합니다."
  overload: System.Xml.XmlDocument.DocumentType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementById(System.String)
  id: GetElementById(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementById(String)
  nameWithType: XmlDocument.GetElementById(String)
  fullName: System.Xml.XmlDocument.GetElementById(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "가져옵니다는 <xref href=&quot;System.Xml.XmlElement&quot;> </xref> 에 지정 된 id"
  remarks: "문서에 일치 하는 ID 사용 하 여 여러 요소를이 메서드는 문서에서 일치 하는 첫 번째 요소를 반환 합니다.      > [!NOTE] > DOM 구현 유형 id 특성을 정의 하는 정보가 있어야 합니다. XSD 스키마 또는 Dtd에 형식 ID 특성을 정의할 수 있지만이 버전의 제품 지원 Dtd에 정의 된 합니다. DTD에서 정의 하지 않으면 &quot;ID&quot; 아닌 이름 가진 특성 ID를 입력 합니다. Id 형식 특성이 인지 알 수 없는 구현은 반환 해야 `null`합니다."
  example:
  - "The following example uses the `GetElementById` method.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_20_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_20_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_20_1.vb)]  \n  \n The example uses the file, `ids.xml`, as input.  \n  \n```xml  \n<!DOCTYPE root [  \n  <!ELEMENT root ANY>   \n  <!ELEMENT Person ANY>   \n  <!ELEMENT Customer EMPTY>  \n  <!ELEMENT Team EMPTY>  \n  <!ATTLIST Person SSN ID #REQUIRED>  \n  <!ATTLIST Customer id IDREF #REQUIRED >  \n  <!ATTLIST Team members IDREFS #REQUIRED>]>  \n<root>  \n  <Person SSN='A111' Name='Fred'/>  \n  <Person SSN='A222' Name='Tom'/>  \n  <Customer id='A222334444'/>  \n  <Team members='A222334444 A333445555'/>  \n</root>  \n```"
  syntax:
    content: public virtual System.Xml.XmlElement GetElementById (string elementId);
    parameters:
    - id: elementId
      type: System.String
      description: "일치 시킬 특성 ID입니다."
    return:
      type: System.Xml.XmlElement
      description: "<xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> 일치 하는 ID 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 일치 하는 요소가 없는 경우."
  overload: System.Xml.XmlDocument.GetElementById*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: XmlDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "반환 된 <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> <xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*> 지정 된 일치 하는 모든 하위 요소의 목록이 포함 된"
  remarks: "노드는 이러한에서 발생 하는 문서 순서에 배치 됩니다.      > [!NOTE] >를 사용 하는 것이 좋습니다.는 <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>또는 <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName>GetElementsByTagName 메서드 대신 메서드.</xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> </xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>"
  example:
  - "The following example creates a `XmlDocument` object and uses the `GetElementsByTagName` method and the resulting <xref:System.Xml.XmlNodeList> object to display all the book titles.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_10_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_10_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_10_1.vb)]  \n  \n The example uses the `books.xml` file as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_10_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNodeList GetElementsByTagName (string name);
    parameters:
    - id: name
      type: System.String
      description: "일치 시킬 정규화 된 이름입니다. 일치는 <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> 일치 하는 노드의 속성입니다. 특수 값 &quot;*&quot; 모든 태그와 일치 합니다."
    return:
      type: System.Xml.XmlNodeList
      description: "<xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> 일치 하는 모든 노드 목록이 포함 된 합니다. 일치 하는 노드가 경우 <code> name </code>, 반환된 된 컬렉션은 비어 있게 됩니다."
  overload: System.Xml.XmlDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  id: GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementsByTagName(String,String)
  nameWithType: XmlDocument.GetElementsByTagName(String,String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "반환 된 <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> 지정 된 일치 하는 모든 하위 요소의 목록이 포함 된 <> </> *> 및 <> </> *> 합니다."
  remarks: "노드 순서는 이러한에서 발생 하는 문서 트리의에 배치 됩니다.      > [!NOTE] >를 사용 하는 것이 좋습니다.는 <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>또는 <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName>GetElementsByTagName 메서드 대신 메서드.</xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> </xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Xml.XmlNodeList GetElementsByTagName (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "일치 시킬 LocalName입니다. 특수 값 &quot;*&quot; 모든 태그와 일치 합니다."
    - id: namespaceURI
      type: System.String
      description: "일치 시킬 NamespaceURI입니다."
    return:
      type: System.Xml.XmlNodeList
      description: "<xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> 일치 하는 모든 노드 목록이 포함 된 합니다. 지정 된 일치 하는 노드가 경우 <code> localName </code> 및 <code> namespaceURI </code>, 반환된 된 컬렉션은 비어 있게 됩니다."
  overload: System.Xml.XmlDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Implementation
  id: Implementation
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Implementation
  nameWithType: XmlDocument.Implementation
  fullName: System.Xml.XmlDocument.Implementation
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "가져옵니다는 <xref href=&quot;System.Xml.XmlImplementation&quot;> </xref> 현재 문서에 대 한 개체입니다."
  remarks: "`XmlDocument`동일한에서 만들어진 개체 `XmlImplementation` 동일한 <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable> 공유 이 특성 및 요소 이름이 문자열이 아닌 개체를 비교 하는 사용자 수 있습니다.       하지만 `XmlDocument` 같은 구현을 공유 하는 개체, 다른 한 문서에서 노드를 이동 하려면 사용 해야 합니다는 <xref:System.Xml.XmlDocument.ImportNode%2A>메서드.</xref:System.Xml.XmlDocument.ImportNode%2A>"
  example:
  - "The following example creates a new `XmlDocument` using another document's implementation.  \n  \n [!code-cs[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_11_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_11_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_11_1.vb)]"
  syntax:
    content: public System.Xml.XmlImplementation Implementation { get; }
    return:
      type: System.Xml.XmlImplementation
      description: "<xref uid=&quot;langword_csharp_XmlImplementation&quot; name=&quot;XmlImplementation&quot; href=&quot;&quot;> </xref> 현재 문서에 대 한 개체입니다."
  overload: System.Xml.XmlDocument.Implementation*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  id: ImportNode(System.Xml.XmlNode,System.Boolean)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ImportNode(XmlNode,Boolean)
  nameWithType: XmlDocument.ImportNode(XmlNode,Boolean)
  fullName: System.Xml.XmlDocument.ImportNode(XmlNode,Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "현재 문서에 다른 문서에서 노드를 가져옵니다."
  remarks: "반환 된 노드는 부모가 없습니다. 원본 노드는 변경 되거나 원래 문서;에서 제거 `ImportNode` 소스 노드의 복사본을 만듭니다.       노드를 가져오면 만듭니다는 `XmlNode` 가져오기 문서가 소유 하는 개체 <xref:System.Xml.XmlNode.Name%2A>및 <xref:System.Xml.XmlNode.NodeType%2A>원본 노드와 동일 합니다.</xref:System.Xml.XmlNode.NodeType%2A> </xref:System.Xml.XmlNode.Name%2A> 새 개체에는 네임 스페이스에 관련 된 특성 (<xref:System.Xml.XmlNode.Prefix%2A>, <xref:System.Xml.XmlNode.LocalName%2A>, 및 <xref:System.Xml.XmlNode.NamespaceURI%2A>).</xref:System.Xml.XmlNode.NamespaceURI%2A> </xref:System.Xml.XmlNode.LocalName%2A> </xref:System.Xml.XmlNode.Prefix%2A>       가져온된 노드 및 값의 노드 유형에 따라는 `deep` 매개 변수를 추가 정보를 적절 하 게 복사 됩니다. 이 메서드를 다른 XML 이나 HTML 소스의 조각을 한 문서에서 복사한 경우 예상 되는 동작 미러 하려고 (즉, XML 경우, 두 문서가 있을 수 다른 Dtd 인식).       다음 표에서 각 <xref:System.Xml.XmlNodeType>.</xref:System.Xml.XmlNodeType> 에 대 한 특정 동작에 설명      | XmlNodeType | ImportNode(true) | ImportNode(false) |   |-----------------|------------------------|-------------------------|   | 특성 | <xref:System.Xml.XmlAttribute.Specified%2A>속성이 `true` 에 생성 된 <xref:System.Xml.XmlAttribute>했습니다.</xref:System.Xml.XmlAttribute> </xref:System.Xml.XmlAttribute.Specified%2A> 소스 요소의 하위 `XmlAttribute` 는 재귀적으로 가져오고 결과 노드를 다시 조합 하 여 해당 하위 트리를 구성 합니다. | `deep` 매개 변수가 적용 되지 않는 `XmlAttribute` 노드,은 자녀를 가져오면 항상 수행 합니다. |   | CData | 해당 데이터를 포함 하 여 노드를 복사 합니다. | 해당 데이터를 포함 하 여 노드를 복사 합니다. |   | 설명 | 해당 데이터를 포함 하 여 노드를 복사 합니다. | 해당 데이터를 포함 하 여 노드를 복사 합니다. |   | DocumentFragment | 소스 노드의 하위 항목을 재귀적으로 가져오고 결과 노드를 다시 조합 하 여 해당 하위 트리를 구성 합니다. | 빈 <xref:System.Xml.XmlDocumentFragment>생성 됩니다. |   | DocumentType | 해당 데이터를 포함 하 여 노드를 복사 합니다. *| 해당 데이터를 포함 하 여 노드를 복사 합니다. *|   | 요소 | 소스 요소와 지정 된 특성 노드 해당 하위 항목을 재귀적으로 가져오고 결과 노드를 다시 조합 하 여 해당 하위 트리를 구성 합니다.</xref:System.Xml.XmlDocumentFragment><br /><br /> 참고: 기본 특성이 복사 되지 않습니다. 에 가져오려는 문서에이 요소 이름에 대 한 기본 특성이 정의 하는 경우이 특성이 할당 됩니다. | 지정 된 특성 노드 소스 요소를 가져오는 및 생성 된 `XmlAttribute` 노드 생성된 <xref:System.Xml.XmlElement>.</xref:System.Xml.XmlElement> 에 연결<br /><br /> 참고: 기본 특성이 복사 되지 않습니다. 에 가져오려는 문서에이 요소 이름에 대 한 기본 특성이 정의 하는 경우이 특성이 할당 됩니다. |   | EntityReference | 이 메서드는만 복사 소스와 대상 문서가 다르게 정의 된 엔터티를 가질 수, 있으므로 <xref:System.Xml.XmlEntityReference>노드.</xref:System.Xml.XmlEntityReference> 대체 텍스트는 포함 되지 않습니다. 대상 문서에 엔터티가 정의 되어 있는 경우 해당 값이 할당 됩니다. | 이 메서드는만 복사 소스와 대상 문서가 다르게 정의 된 엔터티를 가질 수, 있으므로 <xref:System.Xml.XmlEntityReference>노드.</xref:System.Xml.XmlEntityReference> 대체 텍스트는 포함 되지 않습니다. 대상 문서에 엔터티가 정의 되어 있는 경우 해당 값이 할당 됩니다. |   | ProcessingInstruction | 가져온 노드에서 대상과 데이터 값을 복사 합니다. | 가져온 노드에서 대상과 데이터 값을 복사 합니다. |   | 텍스트 | 해당 데이터를 포함 하 여 노드를 복사 합니다. | 해당 데이터를 포함 하 여 노드를 복사 합니다. |   | SignificantWhitespace | 해당 데이터를 포함 하 여 노드를 복사 합니다. | 해당 데이터를 포함 하 여 노드를 복사 합니다. |   | 공백 | 해당 데이터를 포함 하 여 노드를 복사 합니다. | 해당 데이터를 포함 하 여 노드를 복사 합니다. |   | XmlDeclaration | 가져온 노드에서 대상과 데이터 값을 복사 합니다. | 가져온 노드에서 대상과 데이터 값을 복사 합니다. |   | 다른 모든 노드 형식은. | 이 노드 형식은 가져올 수 없습니다. | 이 노드 형식은 가져올 수 없습니다. |       * 여러 개의 DocumentType 노드를 가져올 수 있지만 문서는 오직 하나의 DocumentType만 있을 수 있습니다. 문서에 있는 경우 현재 DocumenType 노드를 새 필터를 추가 하기 전에 제거 해야 합니다."
  example:
  - "The following example imports a book node from a second XML document into the original XML document.  \n  \n [!code-vb[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_22_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_22_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_22_1.cs)]  \n  \n The example uses the file, `books.xml`, as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_22_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNode ImportNode (System.Xml.XmlNode node, bool deep);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "가져올 노드입니다."
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>전체 복제를 수행 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Xml.XmlNode
      description: "가져온 <xref href=&quot;System.Xml.XmlNode&quot;> </xref>합니다."
  overload: System.Xml.XmlDocument.ImportNode*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "가져올 수 없는 노드 형식에이 메서드를 호출 합니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.InnerText
  id: InnerText
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: InnerText
  nameWithType: XmlDocument.InnerText
  fullName: System.Xml.XmlDocument.InnerText
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "throw 한 <xref:System.InvalidOperationException>모든 경우에에서.</xref:System.InvalidOperationException>"
  remarks: "이 속성이 구현 되지 않습니다."
  syntax:
    content: public override string InnerText { set; }
    return:
      type: System.String
      description: "노드와 모든 자식 노드의 값입니다."
  overload: System.Xml.XmlDocument.InnerText*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "모든 경우"
  platform:
  - net462
- uid: System.Xml.XmlDocument.InnerXml
  id: InnerXml
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
  fullName: System.Xml.XmlDocument.InnerXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "현재 노드의 자식을 나타내는 태그를 가져오거나 설정 합니다."
  remarks: "이 속성을 설정 노드의 자식이 지정된 된 문자열의 구문 분석 된 내용으로 바뀝니다. 현재 네임 스페이스 컨텍스트에서 구문 분석이 수행 됩니다.       `InnerXml`중복 네임 스페이스 선언을 제거합니다. 결과, 다양 한 잘라내기 및 붙여넣기 작업에는 중복 네임 스페이스 선언으로 인해 문서 크기가 증가 하지 않습니다. 다음 XSL 문서를 가정: ```   <xsl:stylesheet version=&quot;1.0&quot;          xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;>        <xsl:template match=&quot;stock&quot;>            ...        </xsl:template>       </xsl:stylesheet>   ``` 는 `InnerXml` 다음 문자열을 반환 하는 스타일 시트 노드의 속성: ```   <xsl:template match=&quot;stock&quot;          xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;>        ...       </xsl:template>   ``` 노드 id를 유지 하기 위해 사용 되는 추가 나타났다가 네임 스페이스 선언을 확인 합니다. 이 내부 XML 문자열을 다시 삽입 하면 받아볼 수 다시 원래 문서 있습니다. 즉, `InnerXml` 부모 xsl: stylesheet 요소는 이미 나타났다가 네임 스페이스 delcaration 및 제거 하는 나타났다가 네임 스페이스 선언은 중복을 인식 합니다.       이동 하는 경우 `InnerXml` 네임 스페이스가 없는 기본 문서에는 기본 네임 스페이스와 문서에서 동작이 약간 달라 집니다. 다음 XML 문자열을 고려: ```   <test>         <item>123</item>       </test>   ``` `InnerXml` 네임 스페이스 선언이 없는 일반 XML 문자열을 반환 합니다: ```   <item>123</item>   ``` 다음과 같은 기본 네임 스페이스가 문서에이 문자열을 삽입 하는 경우: ```   <test2 xmlns=&quot;urn:1&quot;>       </test>   ``` `InnerXml` 컨텍스트에서 문자열과 새 노드 urn:&1; 네임 스페이스를 선택 하는 구문 분석 합니다.               결과 다음과 같습니다: ```   <test2 xmlns=&quot;urn:1&quot;>         <item>123</item>       </test>   ``` 이제 요청 하면는 `InnerXml` 다음 돌아갈: ```   <item xmlns=&quot;urn:1&quot;>123</item>   ``` 문서 xmlns를 수동으로 추가 해야 하는 다음 네임 스페이스를에서 온 이루어지도록 하 삽입 된 항목을 명시적으로 하려는 경우 = &quot;&quot; 선언 하 고 결과 문자열 삽입: ```   <item xmlns=&quot;&quot;>123</item>   ``` 이 다음과 같은 모든 작업의 결과: 1입니다.  잘라내기 및 붙여넣기 `InnerXml` 사용 하지 않는 문서에서 네임 스페이스는 간단 하 고 문자열에 &quot;xmlns&quot; 중복성을 만들지 않습니다.      2.  `InnerXml`잘라내기 및 붙여넣기 (즉, XSL 스타일 시트) 둘 이상의 네임 스페이스를 포함 하는 문서 간 사용할 수도 있습니다.      3.  자동으로 나타났다가 선언 문자열에 표시 하 고 노드 계층 구조에서 사라집니다.      4.  이동할 경우에서 `InnerXml` 기본 네임 스페이스에 기본 네임 스페이스가 있는 문서에 들어 있는 문서에서 새 노드에서 새 기본 네임 스페이스를 선택 합니다.       경우 `InnerXml` 설정 된 현재 문서에 정의 되어 있지 않은 엔터티 참조를 포함 하는 텍스트, 결과 트리 빈 EntityReference 노드가 포함 됩니다.       이 속성은 문서 개체 모델 (DOM)에 Microsoft 확장입니다."
  syntax:
    content: public override string InnerXml { get; set; }
    return:
      type: System.String
      description: "현재 노드의 자식 나타내는 태그입니다."
  overload: System.Xml.XmlDocument.InnerXml*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "지정 된 XML이 경우이 속성을 설정 형식이 잘못 되었습니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.IsReadOnly
  id: IsReadOnly
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
  fullName: System.Xml.XmlDocument.IsReadOnly
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "현재 노드가 읽기 전용인 지 여부를 나타내는 값을 가져옵니다."
  remarks: "읽기 전용 노드는 해당 속성, 특성 또는 자식 항목을 변경할 수 없습니다. 트리에서 읽기 전용 노드를 해제 하 고 다른 위치에 삽입 합니다.       이 속성은 문서 개체 모델 (DOM)에 Microsoft 확장입니다."
  example:
  - "The following example shows how to use the `IsReadOnly` property.  \n  \n [!code-cs[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_7_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_7_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_7_1.vb)]"
  syntax:
    content: public override bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 노드가 읽기 전용인 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;></xref>노드는 항상 반환 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xml.XmlDocument.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XmlDocument.Load(Stream)
  fullName: System.Xml.XmlDocument.Load(Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 스트림에서 XML 문서를 로드합니다."
  remarks: "> [!NOTE]>은 `Load` 메서드는 항상 유효 공백 유지 합니다. <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>속성 공백이 있는 요소 내용에 있는 공백을 보존 되는지 여부를 결정 합니다.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> 기본값은 `false`; 요소 내용에 있는 공백을 유지 되지 않습니다.       유효성 검사를 수행 하려는 경우 유효성 검사 만들 수 있습니다 <xref:System.Xml.XmlReader>를 사용 하 여 인스턴스는 <xref:System.Xml.XmlReaderSettings>클래스 및 <xref:System.Xml.XmlReader.Create%2A>메서드.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> 자세한 내용은 설명 부분을 참조 하십시오.는 <xref:System.Xml.XmlReader>참조 페이지.</xref:System.Xml.XmlReader>       이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다.       이 메서드는 자동으로 입력 XML (예를 들어 u t F-8, ANSI 및 등)의 문자열 형식을 검색합니다. 사용 하 여 응용 프로그램을 알고 있는 인코딩이 스트림을 읽는 데 사용 됩니다 하는 경우 고려는 <xref:System.Xml.XmlTextReader>는 스트림을 읽는 데 개체를 사용 하 여는 <xref:System.Xml.XmlTextReader.Encoding%2A?displayProperty=fullName>인코딩을 결정 하는 속성.</xref:System.Xml.XmlTextReader.Encoding%2A?displayProperty=fullName> </xref:System.Xml.XmlTextReader> 사용 해야 하는 경우는 <xref:System.Xml.XmlDocument>개체, XML을 사용할 수 있습니다는 <xref:System.Xml.XmlTextReader>하나를 만들 개체입니다.</xref:System.Xml.XmlTextReader> </xref:System.Xml.XmlDocument> 자세한 내용은 참조 [XPathDocument 및 XmlDocument를 사용 하 여 XML 데이터를 읽는](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public virtual void Load (System.IO.Stream inStream);
    parameters:
    - id: inStream
      type: System.IO.Stream
      description: "로드할 XML 문서가 포함 된 스트림입니다."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML에 로드 또는 구문 분석 오류가입니다. 이 경우에 <xref:System.IO.FileNotFoundException>발생 합니다.</xref:System.IO.FileNotFoundException>"
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.IO.TextReader)
  id: Load(System.IO.TextReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(TextReader)
  nameWithType: XmlDocument.Load(TextReader)
  fullName: System.Xml.XmlDocument.Load(TextReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 <xref:System.IO.TextReader>.</xref:System.IO.TextReader> XML 문서를 로드합니다."
  remarks: "> [!NOTE]>은 `Load` 메서드는 항상 유효 공백 유지 합니다. <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>속성 공백이 있는 요소 내용에 있는 공백을 보존 되는지 여부를 결정 합니다.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> 기본값은 `false`; 요소 내용에 있는 공백을 유지 되지 않습니다.       유효성 검사를 수행 하려는 경우 유효성 검사 만들 수 있습니다 <xref:System.Xml.XmlReader>를 사용 하 여 인스턴스는 <xref:System.Xml.XmlReaderSettings>클래스 및 <xref:System.Xml.XmlReader.Create%2A>메서드.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> 자세한 내용은 설명 부분을 참조 하십시오.는 <xref:System.Xml.XmlReader>참조 페이지.</xref:System.Xml.XmlReader>       이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  example:
  - "The following example uses the <xref:System.IO.StringReader> class to load a string of XML data into the `XmlDocument` object.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_8_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_8_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_8_1.cpp)]"
  syntax:
    content: public virtual void Load (System.IO.TextReader txtReader);
    parameters:
    - id: txtReader
      type: System.IO.TextReader
      description: "<xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> 를 문서에 XML 데이터를 제공 하는 데 사용 합니다."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML에 로드 또는 구문 분석 오류가입니다. 이 경우 문서는 빈 상태로 유지 합니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(String)
  nameWithType: XmlDocument.Load(String)
  fullName: System.Xml.XmlDocument.Load(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정된 된 URL에서 XML 문서를 로드합니다."
  remarks: "> [!NOTE]>은 `Load` 메서드는 항상 유효 공백 유지 합니다. <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>속성 공백이 있는 요소 내용에 있는 공백을 보존 되는지 여부를 결정 합니다.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> 기본값은 `false`; 요소 내용에 있는 공백을 유지 되지 않습니다.       유효성 검사를 수행 하려는 경우 유효성 검사 만들 수 있습니다 <xref:System.Xml.XmlReader>를 사용 하 여 인스턴스는 <xref:System.Xml.XmlReaderSettings>클래스 및 <xref:System.Xml.XmlReader.Create%2A>메서드.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> 자세한 내용은 설명 부분을 참조 하십시오.는 <xref:System.Xml.XmlReader>참조 페이지.</xref:System.Xml.XmlReader>       이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  syntax:
    content: public virtual void Load (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "로드할 XML 문서가 포함 된 파일에 대 한 URL입니다. URL은 로컬 파일 또는 HTTP URL (예: 웹 주소) 일 수 있습니다."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML에 로드 또는 구문 분석 오류가입니다. 이 경우에 <xref:System.IO.FileNotFoundException>발생 합니다.</xref:System.IO.FileNotFoundException>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>filename</code>길이가&0; 인 문자열인, 공백만 포함 또는에 정의 된 대로 하나 이상의 잘못 된 문자가 들어 <xref:System.IO.Path.InvalidPathChars>합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>filename</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "지정된 된 경로, 파일 이름 또는 둘 다에 시스템 정의 최대 길이 초과 합니다. 예를 들어 Windows 기반 플랫폼에서 경로 248 자 미만, 이어야 하 고 파일 이름은 260 자 미만 이어야 합니다."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "지정 된 경로가 잘못 되었습니다 (예를 들어이 매핑되지 않은 드라이브에 있음)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "파일을 여는 동안 I/O 오류가 발생 했습니다."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>filename</code>파일을 지정한 경우 읽기 전용입니다.       -또는-이 작업은 현재 플랫폼에서 지원 되지 않습니다.       -또는- <code>filename</code> 가 디렉터리를 지정 합니다.       -또는-호출자에 게는 필요한 사용 권한이 없습니다."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "에 지정 된 파일 <code> filename </code> 찾을 수 없습니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>filename</code>잘못 된 형식입니다."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XmlDocument.Load(XmlReader)
  fullName: System.Xml.XmlDocument.Load(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> XML 문서를 로드합니다."
  remarks: "> [!NOTE]>은 `Load` 메서드는 항상 유효 공백 유지 합니다. <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>속성 공백이 있는 요소 내용에 있는 공백을 보존 되는지 여부를 결정 합니다.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> 기본값은 `false`; 요소 내용에 있는 공백을 유지 되지 않습니다.       판독기가 초기 상태인 경우 (<xref:System.Xml.XmlReader.ReadState%2A> = readstate.initial로 다시 설정), `Load` 판독기의 전체 내용을 사용 하 고 그 결과에서 DOM을 빌드합니다.</xref:System.Xml.XmlReader.ReadState%2A>       판독기가 위치 일부 노드의 깊이 &quot;n&quot;에 이미,이 메서드는 해당 노드와 &quot;n&quot; 수준을 닫는 끝 태그 까지의 모든 후속 형제를 로드 합니다. 다음과 같은 결과가이 있습니다.       현재 노드와 해당 형제 요소는 다음과 같을 경우: ```   <!--comment--><element1>one</element1><element2>two</element2>   ``` `Load` 문서 루트 수준 요소가 두 개를 가질 수 없으므로 예외를 throw 합니다.        현재 노드와 해당 형제 다음과 같이 표시 하는 경우: ```   <!--comment--><?process instruction?><!--comment--></endtag>   ``` `Load` 성공 하면 루트 수준 요소가 없기 때문에 불완전 한 DOM 트리로 되어 있지만 합니다.        루트 수준 요소, 그렇지 않으면 추가 해야 문서를 저장 하기 전에 <xref:System.Xml.XmlDocument.Save%2A>예외가 throw 됩니다.</xref:System.Xml.XmlDocument.Save%2A>       예를 들어 공백이 나 특성 노드는 문서의 루트 수준에 대해 유효 하지 않은 리프 노드에 판독기가 판독기가 계속 배치 될 때까지 읽기 루트에 사용할 수 있는 노드에 있습니다. 문서의 시점에서 로드 되기 시작 합니다.       유효성 검사를 수행 하려는 경우 유효성 검사 만들 수 있습니다 <xref:System.Xml.XmlReader>를 사용 하 여 인스턴스는 <xref:System.Xml.XmlReaderSettings>클래스 및 <xref:System.Xml.XmlReader.Create%2A>메서드.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> 자세한 내용은 설명 부분을 참조 하십시오.는 <xref:System.Xml.XmlReader>참조 페이지.</xref:System.Xml.XmlReader>       이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  example:
  - "The following example loads the last book node of the `books.xml` file into the XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_23_1.cs)]\n [!code-vb[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_23_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_23_1.cpp)]  \n  \n The example uses the file, `books.xml`, as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_23_2.xml)]"
  syntax:
    content: public virtual void Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref uid=&quot;langword_csharp_XmlReader&quot; name=&quot;XmlReader&quot; href=&quot;&quot;> </xref> 를 문서에 XML 데이터를 제공 하는 데 사용 합니다."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML에 로드 또는 구문 분석 오류가입니다. 이 경우 문서는 빈 상태로 유지 합니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.LoadXml(System.String)
  id: LoadXml(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: LoadXml(String)
  nameWithType: XmlDocument.LoadXml(String)
  fullName: System.Xml.XmlDocument.LoadXml(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정된 된 문자열에서 XML 문서를 로드합니다."
  remarks: "기본적으로는 `LoadXml` 메서드 공백이 나 유효 공백을 유지 하지 않습니다.       이 메서드는 Dtd를 구문 분석 하지만 DTD 또는 스키마 유효성 검사를 수행 하지 않습니다. 유효성 검사를 수행 하려는 경우 유효성 검사 만들 수 있습니다 <xref:System.Xml.XmlReader>를 사용 하 여 인스턴스는 <xref:System.Xml.XmlReaderSettings>클래스 및 <xref:System.Xml.XmlReader.Create%2A>메서드.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> 자세한 내용은 설명 부분을 참조 하십시오.는 <xref:System.Xml.XmlReader>참조 페이지.</xref:System.Xml.XmlReader>       로드 하려는 경우는 <xref:System.IO.Stream>, <xref:System.String>, <xref:System.IO.TextReader>, 또는 <xref:System.Xml.XmlReader>,이 메서드 대신 Load 메서드를 사용 합니다.</xref:System.Xml.XmlReader> </xref:System.IO.TextReader> </xref:System.String> </xref:System.IO.Stream>       이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  example:
  - "The following example loads XML into an `XmlDocument` object and saves it out to a file.  \n  \n [!code-cpp[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_2_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_2_1.cs)]\n [!code-vb[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_2_1.vb)]"
  syntax:
    content: public virtual void LoadXml (string xml);
    parameters:
    - id: xml
      type: System.String
      description: "로드할 XML 문서가 포함 된 문자열입니다."
  overload: System.Xml.XmlDocument.LoadXml*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML에 로드 또는 구문 분석 오류가입니다. 이 경우 문서는 빈 상태로 유지 합니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.LocalName
  id: LocalName
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: LocalName
  nameWithType: XmlDocument.LocalName
  fullName: System.Xml.XmlDocument.LocalName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "노드의 로컬 이름을 가져옵니다."
  remarks: "반환 된 로컬 이름에 따라 달라 집니다는 <xref:System.Xml.XmlDocument.NodeType%2A>노드의.</xref:System.Xml.XmlDocument.NodeType%2A> 각 노드 형식에 대해 반환 되는 로컬 이름을 설명 하는 테이블을 보려면 <xref:System.Xml.XmlNode.LocalName%2A> <xref:System.Xml.XmlNode>클래스</xref:System.Xml.XmlNode> 에서 속성</xref:System.Xml.XmlNode.LocalName%2A> 을 참조 하십시오"
  syntax:
    content: public override string LocalName { get; }
    return:
      type: System.String
      description: '에 대 한 <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> 노드, 로컬 이름 #document이 됩니다.'
  overload: System.Xml.XmlDocument.LocalName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Name
  id: Name
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Name
  nameWithType: XmlDocument.Name
  fullName: System.Xml.XmlDocument.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "노드의 정규화 된 이름을 가져옵니다."
  remarks: "반환 되는 이름에 따라 달라 집니다는 <xref:System.Xml.XmlDocument.NodeType%2A>노드의.</xref:System.Xml.XmlDocument.NodeType%2A> 각 노드 형식에 대해 반환 되는 이름을 설명 하는 테이블을 보려면 <xref:System.Xml.XmlNode.Name%2A> <xref:System.Xml.XmlNode>클래스</xref:System.Xml.XmlNode> 에서 속성</xref:System.Xml.XmlNode.Name%2A> 을 참조 하십시오"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: '에 대 한 <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> 노드 이름을 #document이 됩니다.'
  overload: System.Xml.XmlDocument.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NameTable
  id: NameTable
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NameTable
  nameWithType: XmlDocument.NameTable
  fullName: System.Xml.XmlDocument.NameTable
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "가져옵니다는 <xref:System.Xml.XmlNameTable>이 구현과 관련 된.</xref:System.Xml.XmlNameTable>"
  remarks: "각 `XmlDocument` 개체에는 <xref:System.Xml.NameTable>개체입니다.</xref:System.Xml.NameTable> 요소 및 특성 이름에 저장 됩니다는 `NameTable` 원자화 된 문자열입니다. 즉, 이름을 문서에서 참조 되는 경우에 여러 번 저장 된 한 번만에 `NameTable`합니다. 예를 들어, 문서 &quot;고객&quot; 이름 가진 여러 요소에 있을 경우 `NameTable` 해당 이름에 대 한 요청을 받을 때마다 동일한 개체를 반환 합니다. 결과적으로, 사용자가 보다 더 비용이 많이 드는 문자열 비교는이 문자열에서 개체 비교를 사용 하 여 코드를 작성할 수 있습니다.       원자화 된 문자열에 대 한 자세한 내용은 <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable> 을 참조 하십시오.       이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  syntax:
    content: public System.Xml.XmlNameTable NameTable { get; }
    return:
      type: System.Xml.XmlNameTable
      description: "<xref uid=&quot;langword_csharp_XmlNameTable&quot; name=&quot;XmlNameTable&quot; href=&quot;&quot;> </xref> 문서 내에 있는 문자열의 원자화 된 버전을 가져올 수 있도록 합니다."
  overload: System.Xml.XmlDocument.NameTable*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeChanged
  id: NodeChanged
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeChanged
  nameWithType: XmlDocument.NodeChanged
  fullName: System.Xml.XmlDocument.NodeChanged
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "발생 경우는 <xref:System.Xml.XmlNode.Value*>이 문서에 속하는 노드의 변경 되었습니다.</xref:System.Xml.XmlNode.Value*>"
  remarks: "이 이벤트는 값을 가진 노드에만 적용 됩니다.       이 이벤트에는 문서에 삽입 된 여부이 문서에서 만든 모든 노드가 포함 됩니다."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeChanged;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeChanging
  id: NodeChanging
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeChanging
  nameWithType: XmlDocument.NodeChanging
  fullName: System.Xml.XmlDocument.NodeChanging
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "발생 경우는 <xref:System.Xml.XmlNode.Value*>를 변경할 수는이 문서에 속하는 노드의.</xref:System.Xml.XmlNode.Value*>"
  remarks: "이 이벤트에 추가 확인을 수행 하 고 필요한 경우 작업을 중지 하려면 예외를 throw 할 수 있습니다. 예외가 발생 하는 경우는 `XmlDocument` 원래 상태로 돌아갑니다. 이 이벤트는 값을 가진 노드에만 적용 됩니다.       이 이벤트에는 문서에 삽입 된 여부이 문서에서 만든 모든 노드가 포함 됩니다."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeChanging;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeInserted
  id: NodeInserted
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeInserted
  nameWithType: XmlDocument.NodeInserted
  fullName: System.Xml.XmlDocument.NodeInserted
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "이 문서에 속하는 노드를 다른 노드에 삽입 경우 발생 합니다."
  remarks: "이 이벤트에는 문서에 삽입 된 여부이 문서에서 만든 모든 노드가 포함 됩니다."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeInserted;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeInserting
  id: NodeInserting
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeInserting
  nameWithType: XmlDocument.NodeInserting
  fullName: System.Xml.XmlDocument.NodeInserting
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "이 문서에 속한 노드가 다른 노드에 삽입할 되려고 할 때 발생 합니다."
  remarks: "이 이벤트에 추가 확인을 수행 하 고 필요한 경우 작업을 중지 하려면 예외를 throw 할 수 있습니다. 예외가 발생 하는 경우는 `XmlDocument` 원래 상태로 돌아갑니다.       이 이벤트에는 문서에 삽입 된 여부이 문서에서 만든 모든 노드가 포함 됩니다."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeInserting;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeRemoved
  id: NodeRemoved
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeRemoved
  nameWithType: XmlDocument.NodeRemoved
  fullName: System.Xml.XmlDocument.NodeRemoved
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "이 문서에 속한 노드가 부모에서 제거 될 때 발생 합니다."
  remarks: "이 이벤트에는 문서에 삽입 된 여부이 문서에서 만든 모든 노드가 포함 됩니다."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeRemoved;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeRemoving
  id: NodeRemoving
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeRemoving
  nameWithType: XmlDocument.NodeRemoving
  fullName: System.Xml.XmlDocument.NodeRemoving
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "이 문서에 속하는 노드를 문서에서 제거 하려고 할 때 발생 합니다."
  remarks: "이 이벤트에 추가 확인을 수행 하 고 필요한 경우 작업을 중지 하려면 예외를 throw 할 수 있습니다. 예외가 발생 하는 경우는 `XmlDocument` 원래 상태로 돌아갑니다.       이 이벤트에는 문서에 삽입 된 여부이 문서에서 만든 모든 노드가 포함 됩니다."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeRemoving;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeType
  id: NodeType
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeType
  nameWithType: XmlDocument.NodeType
  fullName: System.Xml.XmlDocument.NodeType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "현재 노드의 형식을 가져옵니다."
  syntax:
    content: public override System.Xml.XmlNodeType NodeType { get; }
    return:
      type: System.Xml.XmlNodeType
      description: "노드 형식입니다. 에 대 한 <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> 노드의 경우이 값은 xmlnodetype.document가 됩니다."
  overload: System.Xml.XmlDocument.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.OwnerDocument
  id: OwnerDocument
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
  fullName: System.Xml.XmlDocument.OwnerDocument
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "가져옵니다는 <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> 현재 노드가 속해 있는 합니다."
  syntax:
    content: public override System.Xml.XmlDocument OwnerDocument { get; }
    return:
      type: System.Xml.XmlDocument
      description: "에 대 한 <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> 노드 (<xref:System.Xml.XmlDocument.NodeType*> 이 XmlNodeType.Document),이 속성은 항상 반환 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Xml.XmlDocument.NodeType*>"
  overload: System.Xml.XmlDocument.OwnerDocument*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ParentNode
  id: ParentNode
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
  fullName: System.Xml.XmlDocument.ParentNode
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "(부모를 가질 수 있는 노드)에 대 한이 노드의 부모 노드를 가져옵니다."
  syntax:
    content: public override System.Xml.XmlNode ParentNode { get; }
    return:
      type: System.Xml.XmlNode
      description: "항상 반환 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xml.XmlDocument.ParentNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.PreserveWhitespace
  id: PreserveWhitespace
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
  fullName: System.Xml.XmlDocument.PreserveWhitespace
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "요소 콘텐츠에서 공백을 유지할지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "이 속성 로드 하는 동안 공백이 처리 되는 방법을 결정 하 고 프로세스를 저장 합니다.       경우 `PreserveWhitespace` 은 `true` 하기 전에 <xref:System.Xml.XmlDocument.Load%2A>또는 <xref:System.Xml.XmlDocument.LoadXml%2A>은 호출, 공백 노드는 유지 된 경우이 속성은 그렇지 않으면 `false`, 중요 한 공백이 유지 됩니다, 공백 없는.</xref:System.Xml.XmlDocument.LoadXml%2A> </xref:System.Xml.XmlDocument.Load%2A>       경우 `PreserveWhitespace` 은 `true` 하기 전에 <xref:System.Xml.XmlDocument.Save%2A>은 호출, 문서에 있는 공백을 출력에 유지 된, 되지 않았으면이 속성이 `false`, `XmlDocument` 자동 들여쓰기 출력.</xref:System.Xml.XmlDocument.Save%2A>       이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  example:
  - "The following example shows how to strip white space from a file.  \n  \n [!code-cs[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_6_1.cs)]\n [!code-vb[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_6_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_6_1.cpp)]  \n  \n The example uses the file `book.xml` as input.  \n  \n [!code-xml[Classic WebData XmlDocument.PreserveWhitespace Example#2](~/add/codesnippet/xml/p-system.xml.xmldocument_6_2.xml)]"
  syntax:
    content: public bool PreserveWhitespace { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>공백을 유지 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xml.XmlDocument.PreserveWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  id: ReadNode(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ReadNode(XmlReader)
  nameWithType: XmlDocument.ReadNode(XmlReader)
  fullName: System.Xml.XmlDocument.ReadNode(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlNode&quot;> </xref> <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> 정보에 따라 개체 판독기는 노드나 특성에 배치 되어야 합니다."
  remarks: "하나를 읽고 `XmlNode` 지정된 된 판독기에서 다음 노드에 판독기를 배치 합니다. 이 메서드가 만드는 유형의 `XmlNode` 일치 하는 <xref:System.Xml.XmlNode.NodeType%2A>에 있는 현재 판독기가.</xref:System.Xml.XmlNode.NodeType%2A> (판독기가 초기 상태인 경우 `ReadNode` 판독기는 첫 번째 노드를 이동 하 고 해당 노드에서 작동 하는 다음.)       판독기가 요소를 시작 하는 경우 `ReadNode` 모든 특성 및 모든 자식 노드를 최대 읽고 현재 노드의 끝 태그를 포함 합니다. `XmlNode` 반환 된 하위 트리에 있는 읽은 모든 내용을 나타내는 포함 합니다. 판독기 종료 태그 바로 뒤에 배치 됩니다.       `ReadNode`특성을 읽을 수도 있지만 경우 판독기 다음 특성으로 진행 하지 않습니다. 다음 C# 코드를 작성할 수 있습니다: ```   XmlDocument doc = new XmlDocument();   while (reader.MoveToNextAttribute())   {     XmlNode a = doc.ReadNode(reader);     // Do some more processing.   }   ``` `ReadNode` 방식은 소비 특성 값 하지만 호출한 후 즉 `ReadNode` attribute 노드에 <xref:System.Xml.XmlReader.ReadAttributeValue%2A?displayProperty=fullName>반환 `false`.</xref:System.Xml.XmlReader.ReadAttributeValue%2A?displayProperty=fullName>       "
  example:
  - "The following example uses `ReadNode` to create a new node and then inserts the new node into the document.  \n  \n [!code-cs[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_21_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_21_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_21_1.vb)]  \n  \n The example uses the file, `cd.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlDocument.ReadNode Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_21_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNode ReadNode (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "XML 원본"
    return:
      type: System.Xml.XmlNode
      description: "새 <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;> </xref> 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 노드가 더 이상 존재 합니다."
  overload: System.Xml.XmlDocument.ReadNode*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "판독기가 유효한 DOM 노드 (예: EndElement 또는 EndEntity)로 변환 되지 않는 노드 형식에 배치 됩니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.IO.Stream)
  id: Save(System.IO.Stream)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(Stream)
  nameWithType: XmlDocument.Save(Stream)
  fullName: System.Xml.XmlDocument.Save(Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 스트림에 XML 문서를 저장합니다."
  remarks: "경우에 공백이 유지 됩니다 <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>로 설정 된 `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       현재 XmlDeclaration `XmlDocument` 개체는 저장된 된 문서에서 인코딩 특성을 결정 합니다. 인코딩 특성의 값을 가져오는 <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>속성.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> 경우는 `XmlDocument` 않습니다 XmlDeclaration, 없거나는 XmlDeclaration에 인코딩 특성이 없는 경우 저장된 된 문서는 하나도 중 하나입니다.       문서를 저장 하는 경우 (로컬 이름 + 네임 스페이스 URI) 노드 id를 올바르게 유지 하 xmlns 특성 생성 됩니다. 예를 들어 다음 C# 코드 ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` 이 xml 특성을 생성 `<item xmls=&quot;urn:1&quot;/>`합니다.       이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다.       만 <xref:System.Xml.XmlDocument.Save%2A>메서드는 올바른 형식의 XML 문서를 적용 합니다.</xref:System.Xml.XmlDocument.Save%2A> 다른 모든 `Save` 오버 로드는 올바른 형식의 조각이 보장 합니다."
  syntax:
    content: public virtual void Save (System.IO.Stream outStream);
    parameters:
    - id: outStream
      type: System.IO.Stream
      description: "저장할 스트림입니다."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "작업을 하면 올바른 형식의 XML 문서 (예를 들어 문서 요소 또는 중복 XML 선언 없음)에서 생성 되지 않습니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.IO.TextWriter)
  id: Save(System.IO.TextWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(TextWriter)
  nameWithType: XmlDocument.Save(TextWriter)
  fullName: System.Xml.XmlDocument.Save(TextWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter> XML 문서를 저장합니다."
  remarks: "인코딩는 `TextWriter` 기록 되는 인코딩을 결정 (의 인코딩을으로 대체 되는 인코딩을 인코딩에 `TextWriter`). 있었던에 지정 된 인코딩이 `TextWriter`, `XmlDocument` 인코딩 특성 없이 저장 됩니다.       이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다.       만 <xref:System.Xml.XmlDocument.Save%2A>메서드는 올바른 형식의 XML 문서를 적용 합니다.</xref:System.Xml.XmlDocument.Save%2A> 다른 모든 `Save` 오버 로드는 올바른 형식의 조각이 보장 합니다."
  syntax:
    content: public virtual void Save (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "<xref uid=&quot;langword_csharp_TextWriter&quot; name=&quot;TextWriter&quot; href=&quot;&quot;> </xref> 를 저장 합니다."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "작업을 하면 올바른 형식의 XML 문서 (예를 들어 문서 요소 또는 중복 XML 선언 없음)에서 생성 되지 않습니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.String)
  id: Save(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(String)
  nameWithType: XmlDocument.Save(String)
  fullName: System.Xml.XmlDocument.Save(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정된 된 파일에 XML 문서를 저장합니다. 지정한 파일이 있으면이 메서드를 덮어씁니다."
  remarks: "경우에만 출력 파일에 공백이 유지 됩니다 <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>로 설정 되어 `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       현재 XmlDeclaration `XmlDocument` 개체는 저장된 된 문서에서 인코딩 특성을 결정 합니다. 인코딩 특성의 값을 가져오는 <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>속성.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> 경우는 `XmlDocument` 않습니다 XmlDeclaration, 없거나는 XmlDeclaration에 인코딩 특성이 없는 경우 저장된 된 문서는 하나도 중 하나입니다.       문서를 저장 하는 경우 (로컬 이름 + 네임 스페이스 URI) 노드 id를 올바르게 유지 하 xmlns 특성 생성 됩니다. 예를 들어 다음 C# 코드 ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` 이 xml 특성을 생성 `<item xmls=&quot;urn:1&quot;/>`합니다.       이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다.       참고 Save 메서드는 형식만 올바른 형식의 XML 문서를 적용합니다. 다른 모든 `Save` 오버 로드는 올바른 형식의 조각이 보장 합니다."
  example:
  - "The following example loads XML into an XmlDocument object, modifies it, and then saves it to a file named data.xml.  \n  \n [!code-cs[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_18_1.cs)]\n [!code-vb[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_18_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_18_1.cpp)]  \n  \n The data.xml file will contain the following XML: `<item><name>wrench</name><price>10.95</price></item>`."
  syntax:
    content: public virtual void Save (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "문서를 저장할 파일의 위치입니다."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "작업을 하면 올바른 형식의 XML 문서 (예를 들어 문서 요소 또는 중복 XML 선언 없음)에서 생성 되지 않습니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  id: Save(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(XmlWriter)
  nameWithType: XmlDocument.Save(XmlWriter)
  fullName: System.Xml.XmlDocument.Save(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> XML 문서를 저장합니다."
  remarks: "경우에 공백이 유지 됩니다 <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>로 설정 된 `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       인코딩는 `XmlWriter` 기록 되는 인코딩을 결정 (의 인코딩을으로 대체 되는 인코딩을 인코딩에 `XmlWriter`). 있었던에 지정 된 인코딩이 `XmlWriter`, `XmlDocument` 인코딩 특성 없이 저장 됩니다.       문서를 저장 하는 경우 (예: LocalName + NamespaceURI) 노드 id를 올바르게 유지 하 xmlns 특성 생성 됩니다. 예를 들어 다음 C# 코드 ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` 이 xml 특성을 생성: ```   <item       xmls=&quot;urn:1&quot;/>   ``` 이 메서드는 문서 개체 모델 (DOM)에 Microsoft 확장입니다.       만 <xref:System.Xml.XmlDocument.Save%2A>메서드는 올바른 형식의 XML 문서를 적용 합니다.</xref:System.Xml.XmlDocument.Save%2A> 다른 모든 `Save` 오버 로드는 올바른 형식의 조각이 보장 합니다."
  example:
  - "The following example loads XML into an `XmlDocument` object and saves it out to a file.  \n  \n [!code-cpp[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_5_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_5_1.cs)]\n [!code-vb[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_5_1.vb)]"
  syntax:
    content: public virtual void Save (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> 를 저장 합니다."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "작업을 하면 올바른 형식의 XML 문서 (예를 들어 문서 요소 또는 중복 XML 선언 없음)에서 생성 되지 않습니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.SchemaInfo
  id: SchemaInfo
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
  fullName: System.Xml.XmlDocument.SchemaInfo
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "스키마 유효성 검사-이후 PSVI () 노드를 반환합니다."
  remarks: "이 속성의 PSVI 콘텐츠 노드를 확인 후 설정 됩니다.       이 속성은 문서 개체 모델 (DOM)에 Microsoft 확장입니다."
  syntax:
    content: public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "<xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref> 노드의 PSVI를 나타내는 개체입니다."
  overload: System.Xml.XmlDocument.SchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Schemas
  id: Schemas
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Schemas
  nameWithType: XmlDocument.Schemas
  fullName: System.Xml.XmlDocument.Schemas
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "가져오거나는 <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> 이 연관 된 개체 <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>합니다."
  remarks: "에 포함 된 스키마는 <xref:System.Xml.Schema.XmlSchemaSet>연관 된 개체는 <xref:System.Xml.XmlDocument>개체 유효성 검사에 사용 됩니다 때는 <xref:System.Xml.XmlDocument.Validate%2A>의 메서드는 <xref:System.Xml.XmlDocument>실행 됩니다.</xref:System.Xml.XmlDocument> </xref:System.Xml.XmlDocument.Validate%2A> </xref:System.Xml.XmlDocument> </xref:System.Xml.Schema.XmlSchemaSet>       때는 <xref:System.Xml.XmlDocument>개체를 사용한 XML 데이터를 사용 하 여 초기화 되는 <xref:System.Xml.XmlReader>개체는 <xref:System.Xml.Schema.XmlSchemaSet>개체에서 로드 되는 <xref:System.Xml.XmlReaderSettings.Schemas%2A>속성의는 <xref:System.Xml.XmlReader>개체.</xref:System.Xml.XmlReader> </xref:System.Xml.XmlReaderSettings.Schemas%2A> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlDocument>"
  syntax:
    content: public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> 와 연결 된 XML 스키마 정의 언어 (XSD)를 포함 하는 개체 <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>, 그렇지 않으면 빈 <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> 개체입니다."
  overload: System.Xml.XmlDocument.Schemas*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  id: Validate(System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Validate(ValidationEventHandler)
  nameWithType: XmlDocument.Validate(ValidationEventHandler)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "유효성을 검사는 <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> 에 포함 된 XML 스키마 정의 언어 (XSD) 스키마에 대해는 <xref:System.Xml.XmlDocument.Schemas*>속성.</xref:System.Xml.XmlDocument.Schemas*>"
  remarks: "Validate 메서드는 XML 데이터의 유효성을 검사는 <xref:System.Xml.XmlDocument>에 포함 된 스키마에 대해는 <xref:System.Xml.XmlDocument.Schemas%2A>속성.</xref:System.Xml.XmlDocument.Schemas%2A> </xref:System.Xml.XmlDocument> Validate 메서드는 infoset 확대를 수행 합니다. 특히, 유효성 검사를 수행한 후 스키마 기본값이 적용 되, 텍스트 값이 필요에 따라 원자 값으로 변환 및 형식 정보는 유효성이 검사 된 정보 항목과 연결 됩니다. 결과 이전에 형식화 되지 않은 XML 하위 트리는는 <xref:System.Xml.XmlDocument>형식화 된 하위 트리 아래 템플릿으로 바뀝니다.</xref:System.Xml.XmlDocument>       다음은 Validate 메서드를 사용 하는 경우를 고려해 야 할 중요 한 참고 사항입니다.      -스키마 위치 힌트와 같은 `xsi:schemaLocation` 또는 `xsi:noNamespaceSchemaLocation` 무시 됩니다.      인라인 스키마는 무시 됩니다.      -유효성 검사 동안 스키마 유효성 검사 오류가 발생 하는 경우는 <xref:System.Xml.XmlDocument>올바른 형식 정보가 있는 일부 노드 및 일부 유효성 부분적으로 검사 됩니다.</xref:System.Xml.XmlDocument>      -유효성 검사 프로세스를 고유성 및 참조 제약 조건을 검사 포함 (`xs:ID`, `xs:IDREF`, `xs:key`, `xs:keyref`, 및 `xs:unique`)."
  example:
  - "The following example illustrates use of the Validate method. The example creates an <xref:System.Xml.XmlDocument> that contains an associated XSD schema using the <xref:System.Xml.XmlReaderSettings> and <xref:System.Xml.XmlReader> objects. The example then uses the <xref:System.Xml.XPath.XPathNavigator> class to incorrectly modify the typed value of an element in the XML document generating a schema validation error.  \n  \n [!code-cs[XPathValidation#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_19_1.cs)]\n [!code-cpp[XPathValidation#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_19_1.cpp)]\n [!code-vb[XPathValidation#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_19_1.vb)]  \n  \n The example takes the `contosoBooks.xml` and `contosoBooks.xsd` files as input.  \n  \n [!code-xml[XPathXMLExamples#2](~/add/codesnippet/xml/m-system.xml.xmldocument_19_2.xml)]  \n  \n [!code-xml[XPathXMLExamples#3](~/add/codesnippet/xml/m-system.xml.xmldocument_19_3.xsd)]"
  syntax:
    content: public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> 스키마 유효성 검사 경고 및 오류에 대 한 정보를 받는 개체입니다."
  overload: System.Xml.XmlDocument.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "스키마 유효성 검사 이벤트가 발생 되지 않은 <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> 개체가 지정 되었습니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  id: Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Validate(ValidationEventHandler,XmlNode)
  nameWithType: XmlDocument.Validate(ValidationEventHandler,XmlNode)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler,XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "유효성을 검사는 <xref href=&quot;System.Xml.XmlNode&quot;> </xref> 에 XML 스키마 정의 언어 (XSD) 스키마에 대해 지정 된 개체는 <xref:System.Xml.XmlDocument.Schemas*>속성.</xref:System.Xml.XmlDocument.Schemas*>"
  remarks: "Validate 메서드는 XML 데이터의 유효성을 검사는 <xref:System.Xml.XmlNode>에 포함 된 스키마에 대 한 개체는 <xref:System.Xml.XmlDocument.Schemas%2A>속성.</xref:System.Xml.XmlDocument.Schemas%2A> </xref:System.Xml.XmlNode> Validate 메서드는 infoset 확대를 수행 합니다. 특히, 유효성 검사를 수행한 후 스키마 기본값이 적용 되, 텍스트 값이 필요에 따라 원자 값으로 변환 및 형식 정보는 유효성이 검사 된 정보 항목과 연결 됩니다. 결과 이전에 형식화 되지 않은 XML 하위 트리는는 <xref:System.Xml.XmlDocument>형식화 된 하위 트리 아래 템플릿으로 바뀝니다.</xref:System.Xml.XmlDocument>       다음은 Validate 메서드를 사용 하는 경우를 고려해 야 할 중요 한 참고 사항입니다.      -스키마 위치 힌트와 같은 `xsi:schemaLocation` 또는 `xsi:noNamespaceSchemaLocation` 무시 됩니다.      인라인 스키마는 무시 됩니다.      -유효성 검사 동안 스키마 유효성 검사 오류가 발생 하는 경우는 <xref:System.Xml.XmlDocument>올바른 형식 정보가 있는 일부 노드 및 일부 유효성 부분적으로 검사 됩니다.</xref:System.Xml.XmlDocument>       유효성 검사 프로세스 유효성을 검사할 노드입니다 루트 노드인 경우 고유성 및 참조 제약 조건을 검사 포함 됩니다 (`xs:ID`, `xs:IDREF`, `xs:key`, `xs:keyref`, 및 `xs:unique`), 그렇지 않으면 고유성 및 참조 제약 조건 생략 됩니다."
  example:
  - For an example of the Validate method, see the <xref:System.Xml.XmlDocument.Validate%2A> method.
  syntax:
    content: public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler, System.Xml.XmlNode nodeToValidate);
    parameters:
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> 스키마 유효성 검사 경고 및 오류에 대 한 정보를 받는 개체입니다."
    - id: nodeToValidate
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref> 에서 만든 개체는 <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> 유효성을 검사 합니다."
  overload: System.Xml.XmlDocument.Validate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref> 에서 개체 매개 변수를 만들지는 <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>합니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref> 개체 매개 변수는 요소, 특성, 문서 조각 또는 루트 노드가 있습니다."
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "스키마 유효성 검사 이벤트가 발생 되지 않은 <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> 개체가 지정 되었습니다."
  platform:
  - net462
- uid: System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  id: WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlDocument.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteContentTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "모든 자식을 저장는 <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> 지정 <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> 노드"
  remarks: "이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다. 기능적으로 <xref:System.Xml.XmlDocument.InnerXml%2A>속성.</xref:System.Xml.XmlDocument.InnerXml%2A>       <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>속성 기록 되는 인코딩을 결정 합니다.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> 경우는 `Encoding` 속성에 값이 없는 `XmlDocument` 인코딩 특성이 없는 기록 됩니다."
  example:
  - "The following example displays the document onscreen.  \n  \n [!code-cs[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_0_1.cs)]\n [!code-vb[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_0_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_0_1.cpp)]"
  syntax:
    content: public override void WriteContentTo (System.Xml.XmlWriter xw);
    parameters:
    - id: xw
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> 를 저장 합니다."
  overload: System.Xml.XmlDocument.WriteContentTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: WriteTo(XmlWriter)
  nameWithType: XmlDocument.WriteTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "저장 된 <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> 지정 <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> 노드"
  remarks: "이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다. 기능적으로 <xref:System.Xml.XmlNode.OuterXml%2A>속성.</xref:System.Xml.XmlNode.OuterXml%2A>       <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>속성 기록 되는 인코딩을 결정 합니다.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> 경우는 `Encoding` 속성에 값이 없는 `XmlDocument` 인코딩 특성이 없는 기록 됩니다."
  example:
  - "The following example displays the document onscreen.  \n  \n [!code-cpp[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_6_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_6_1.vb)]\n [!code-cs[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_6_1.cs)]"
  syntax:
    content: public override void WriteTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> 를 저장 합니다."
  overload: System.Xml.XmlDocument.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.XmlResolver
  id: XmlResolver
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
  fullName: System.Xml.XmlDocument.XmlResolver
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "설정의 <xref href=&quot;System.Xml.XmlResolver&quot;> </xref> 외부 리소스 확인에 사용 하도록 합니다."
  remarks: "`XmlResolver` Dtd를 로드 또는 엔터티 참조 확장에 사용할 수 있습니다. 사용 하는 <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=fullName>속성에 자격 증명을 설정할 수 있습니다는 `XmlResolver` 보안 네트워크 리소스에 저장 된 리소스에 액세스할 수 있습니다.</xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=fullName>      -문서를 사용 하 여 로드 되지 않았습니다 하는 경우는 <xref:System.Xml.XmlReader>(즉, 한 스트림을 사용 하 여 로드 된 경우 파일, 및 등)는 `XmlResolver` 에 `XmlDocument` 항상 사용 됩니다.</xref:System.Xml.XmlReader>      -는 문서를 로드 하는 경우는 <xref:System.Xml.XmlTextReader>에 확인자는 `XmlTextReader` DocumentType 노드의 DTD 참조를 확인 하는 데 사용 됩니다.</xref:System.Xml.XmlTextReader> 해결 프로그램에는 `XmlDocument` 엔터티 참조를 확장 하는 데 사용 됩니다.      -는 문서를 로드 하는 경우는 <xref:System.Xml.XmlValidatingReader>에 확인자는 `XmlDocument` 은 사용 되지 않습니다.</xref:System.Xml.XmlValidatingReader>      -문서를 확장 하는 클래스와 함께 로드 하는 경우 `XmlReader` 및 `XmlReader` 엔터티를 확인할 수 없습니다 (<xref:System.Xml.XmlReader.CanResolveEntity%2A> 반환 `false`), `XmlResolver` 에 `XmlDocument` DocumentType 노드의 참조를 확인 하 고 엔터티 참조를 확장 하는 데 사용 됩니다.</xref:System.Xml.XmlReader.CanResolveEntity%2A>      > [!NOTE] > 경우는 `XmlDocument` 를 사용 하 여 로드 되는 <xref:System.Xml.XmlReader>어떤 모델이 `XmlResolver` 가 설정의 `XmlResolver` 에 `XmlReader` 으로 캐시 되지 않습니다는 `XmlDocument` 후 <xref:System.Xml.XmlDocument.Load%2A>완료.</xref:System.Xml.XmlDocument.Load%2A> </xref:System.Xml.XmlReader>       .NET Framework 버전 1.1에서는이 속성을 설정 하지 않으면 응용 프로그램의 신뢰 수준을 기본 동작을 결정 합니다.       `Fully trusted code:`기본값을 사용 하는 문서의 <xref:System.Xml.XmlUrlResolver>사용자 자격 증명 없이.</xref:System.Xml.XmlUrlResolver> 사용 하 여 네트워크 리소스에 액세스 하는 데 인증이 필요는 `XmlResolver` 속성을 통해 지정 된 `XmlResolver` 에 필요한 자격 증명입니다.       `Semi-trusted code:``XmlResolver` 속성이 `null`합니다. 외부 리소스 확인 되지 않습니다.       보안에 대 한 자세한 내용은 및 `XmlResolver` 속성 참조 [외부 리소스 확인](~/add/includes/ajax-current-ext-md.md)합니다.       이 속성은 문서 개체 모델 (DOM)에 Microsoft 확장입니다."
  example:
  - "The following example loads an XML document which includes a reference to a DTD file. The `XmlResolver` property is used to set the credentials necessary to access the network resource.  \n  \n [!code-cpp[XmlDocument.XmlResolver#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_9_1.cpp)]\n [!code-cs[XmlDocument.XmlResolver#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_9_1.cs)]\n [!code-vb[XmlDocument.XmlResolver#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_9_1.vb)]  \n  \n The example uses the following data files as input.  \n  \n `book5.xml`  \n  \n [!code-xml[XmlDocument.XmlResolver#2](~/add/codesnippet/xml/p-system.xml.xmldocument_9_2.xml)]  \n  \n `books.dtd`  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public virtual System.Xml.XmlResolver XmlResolver { set; }
    return:
      type: System.Xml.XmlResolver
      description: "The <xref uid=&quot;langword_csharp_XmlResolver&quot; name=&quot;XmlResolver&quot; href=&quot;&quot;></xref> to use.       .NET Framework 버전 1.1에서는 호출자에 게 지정 하기 위해 완전히 신뢰 되어야 합니다는 <xref uid=&quot;langword_csharp_XmlResolver&quot; name=&quot;XmlResolver&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xml.XmlDocument.XmlResolver*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "이 속성이 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 하 고 외부 DTD 또는 엔터티가 발생 합니다."
  platform:
  - net462
references:
- uid: System.Xml.XmlNode
  isExternal: false
  name: System.Xml.XmlNode
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.Xml.Schema.XmlSchemaValidationException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaValidationException
  nameWithType: XmlSchemaValidationException
  fullName: System.Xml.Schema.XmlSchemaValidationException
- uid: System.Xml.XmlDocument.#ctor
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument()
  nameWithType: XmlDocument.XmlDocument()
  fullName: System.Xml.XmlDocument.XmlDocument()
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument(XmlImplementation)
  nameWithType: XmlDocument.XmlDocument(XmlImplementation)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlImplementation)
- uid: System.Xml.XmlImplementation
  parent: System.Xml
  isExternal: false
  name: XmlImplementation
  nameWithType: XmlImplementation
  fullName: System.Xml.XmlImplementation
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument(XmlNameTable)
  nameWithType: XmlDocument.XmlDocument(XmlNameTable)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlNameTable)
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: true
  name: XmlNameTable
  nameWithType: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.XmlDocument.BaseURI
  parent: System.Xml.XmlDocument
  isExternal: false
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
  fullName: System.Xml.XmlDocument.BaseURI
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlDocument.CloneNode(System.Boolean)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDocument.CloneNode(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlDocument.CreateAttribute(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String)
  nameWithType: XmlDocument.CreateAttribute(String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String)
- uid: System.Xml.XmlAttribute
  parent: System.Xml
  isExternal: false
  name: XmlAttribute
  nameWithType: XmlAttribute
  fullName: System.Xml.XmlAttribute
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String)
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String,String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String,String)
- uid: System.Xml.XmlDocument.CreateCDataSection(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateCDataSection(String)
  nameWithType: XmlDocument.CreateCDataSection(String)
  fullName: System.Xml.XmlDocument.CreateCDataSection(String)
- uid: System.Xml.XmlCDataSection
  parent: System.Xml
  isExternal: false
  name: XmlCDataSection
  nameWithType: XmlCDataSection
  fullName: System.Xml.XmlCDataSection
- uid: System.Xml.XmlDocument.CreateComment(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateComment(String)
  nameWithType: XmlDocument.CreateComment(String)
  fullName: System.Xml.XmlDocument.CreateComment(String)
- uid: System.Xml.XmlComment
  parent: System.Xml
  isExternal: false
  name: XmlComment
  nameWithType: XmlComment
  fullName: System.Xml.XmlComment
- uid: System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDefaultAttribute(String,String,String)
  nameWithType: XmlDocument.CreateDefaultAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateDefaultAttribute(String,String,String)
- uid: System.Xml.XmlDocument.CreateDocumentFragment
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentFragment()
  nameWithType: XmlDocument.CreateDocumentFragment()
  fullName: System.Xml.XmlDocument.CreateDocumentFragment()
- uid: System.Xml.XmlDocumentFragment
  parent: System.Xml
  isExternal: false
  name: XmlDocumentFragment
  nameWithType: XmlDocumentFragment
  fullName: System.Xml.XmlDocumentFragment
- uid: System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentType(String,String,String,String)
  nameWithType: XmlDocument.CreateDocumentType(String,String,String,String)
  fullName: System.Xml.XmlDocument.CreateDocumentType(String,String,String,String)
- uid: System.Xml.XmlDocumentType
  parent: System.Xml
  isExternal: false
  name: XmlDocumentType
  nameWithType: XmlDocumentType
  fullName: System.Xml.XmlDocumentType
- uid: System.Xml.XmlDocument.CreateElement(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String)
  nameWithType: XmlDocument.CreateElement(String)
  fullName: System.Xml.XmlDocument.CreateElement(String)
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String,String)
  nameWithType: XmlDocument.CreateElement(String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String)
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String,String,String)
  nameWithType: XmlDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String,String)
- uid: System.Xml.XmlDocument.CreateEntityReference(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateEntityReference(String)
  nameWithType: XmlDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDocument.CreateEntityReference(String)
- uid: System.Xml.XmlEntityReference
  parent: System.Xml
  isExternal: false
  name: XmlEntityReference
  nameWithType: XmlEntityReference
  fullName: System.Xml.XmlEntityReference
- uid: System.Xml.XmlDocument.CreateNavigator
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator()
  nameWithType: XmlDocument.CreateNavigator()
  fullName: System.Xml.XmlDocument.CreateNavigator()
- uid: System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDocument.CreateNavigator(XmlNode)
- uid: System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(String,String,String)
  nameWithType: XmlDocument.CreateNode(String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(String,String,String)
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(XmlNodeType,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String)
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: true
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(XmlNodeType,String,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String,String)
- uid: System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateProcessingInstruction(String,String)
  nameWithType: XmlDocument.CreateProcessingInstruction(String,String)
  fullName: System.Xml.XmlDocument.CreateProcessingInstruction(String,String)
- uid: System.Xml.XmlProcessingInstruction
  parent: System.Xml
  isExternal: false
  name: XmlProcessingInstruction
  nameWithType: XmlProcessingInstruction
  fullName: System.Xml.XmlProcessingInstruction
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateSignificantWhitespace(String)
  nameWithType: XmlDocument.CreateSignificantWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateSignificantWhitespace(String)
- uid: System.Xml.XmlSignificantWhitespace
  parent: System.Xml
  isExternal: false
  name: XmlSignificantWhitespace
  nameWithType: XmlSignificantWhitespace
  fullName: System.Xml.XmlSignificantWhitespace
- uid: System.Xml.XmlDocument.CreateTextNode(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateTextNode(String)
  nameWithType: XmlDocument.CreateTextNode(String)
  fullName: System.Xml.XmlDocument.CreateTextNode(String)
- uid: System.Xml.XmlText
  parent: System.Xml
  isExternal: false
  name: XmlText
  nameWithType: XmlText
  fullName: System.Xml.XmlText
- uid: System.Xml.XmlDocument.CreateWhitespace(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateWhitespace(String)
  nameWithType: XmlDocument.CreateWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateWhitespace(String)
- uid: System.Xml.XmlWhitespace
  parent: System.Xml
  isExternal: false
  name: XmlWhitespace
  nameWithType: XmlWhitespace
  fullName: System.Xml.XmlWhitespace
- uid: System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateXmlDeclaration(String,String,String)
  nameWithType: XmlDocument.CreateXmlDeclaration(String,String,String)
  fullName: System.Xml.XmlDocument.CreateXmlDeclaration(String,String,String)
- uid: System.Xml.XmlDeclaration
  parent: System.Xml
  isExternal: false
  name: XmlDeclaration
  nameWithType: XmlDeclaration
  fullName: System.Xml.XmlDeclaration
- uid: System.Xml.XmlDocument.DocumentElement
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
  fullName: System.Xml.XmlDocument.DocumentElement
- uid: System.Xml.XmlDocument.DocumentType
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
  fullName: System.Xml.XmlDocument.DocumentType
- uid: System.Xml.XmlDocument.GetElementById(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementById(String)
  nameWithType: XmlDocument.GetElementById(String)
  fullName: System.Xml.XmlDocument.GetElementById(String)
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: XmlDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName(String,String)
  nameWithType: XmlDocument.GetElementsByTagName(String,String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String,String)
- uid: System.Xml.XmlDocument.Implementation
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Implementation
  nameWithType: XmlDocument.Implementation
  fullName: System.Xml.XmlDocument.Implementation
- uid: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ImportNode(XmlNode,Boolean)
  nameWithType: XmlDocument.ImportNode(XmlNode,Boolean)
  fullName: System.Xml.XmlDocument.ImportNode(XmlNode,Boolean)
- uid: System.Xml.XmlDocument.InnerText
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerText
  nameWithType: XmlDocument.InnerText
  fullName: System.Xml.XmlDocument.InnerText
- uid: System.Xml.XmlDocument.InnerXml
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
  fullName: System.Xml.XmlDocument.InnerXml
- uid: System.Xml.XmlDocument.IsReadOnly
  parent: System.Xml.XmlDocument
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
  fullName: System.Xml.XmlDocument.IsReadOnly
- uid: System.Xml.XmlDocument.Load(System.IO.Stream)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(Stream)
  nameWithType: XmlDocument.Load(Stream)
  fullName: System.Xml.XmlDocument.Load(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.XmlDocument.Load(System.IO.TextReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(TextReader)
  nameWithType: XmlDocument.Load(TextReader)
  fullName: System.Xml.XmlDocument.Load(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Xml.XmlDocument.Load(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(String)
  nameWithType: XmlDocument.Load(String)
  fullName: System.Xml.XmlDocument.Load(String)
- uid: System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XmlDocument.Load(XmlReader)
  fullName: System.Xml.XmlDocument.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.XmlDocument.LoadXml(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LoadXml(String)
  nameWithType: XmlDocument.LoadXml(String)
  fullName: System.Xml.XmlDocument.LoadXml(String)
- uid: System.Xml.XmlDocument.LocalName
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LocalName
  nameWithType: XmlDocument.LocalName
  fullName: System.Xml.XmlDocument.LocalName
- uid: System.Xml.XmlDocument.Name
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Name
  nameWithType: XmlDocument.Name
  fullName: System.Xml.XmlDocument.Name
- uid: System.Xml.XmlDocument.NameTable
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NameTable
  nameWithType: XmlDocument.NameTable
  fullName: System.Xml.XmlDocument.NameTable
- uid: System.Xml.XmlDocument.NodeChanged
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeChanged
  nameWithType: XmlDocument.NodeChanged
  fullName: System.Xml.XmlDocument.NodeChanged
- uid: System.Xml.XmlNodeChangedEventHandler
  parent: System.Xml
  isExternal: false
  name: XmlNodeChangedEventHandler
  nameWithType: XmlNodeChangedEventHandler
  fullName: System.Xml.XmlNodeChangedEventHandler
- uid: System.Xml.XmlDocument.NodeChanging
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeChanging
  nameWithType: XmlDocument.NodeChanging
  fullName: System.Xml.XmlDocument.NodeChanging
- uid: System.Xml.XmlDocument.NodeInserted
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeInserted
  nameWithType: XmlDocument.NodeInserted
  fullName: System.Xml.XmlDocument.NodeInserted
- uid: System.Xml.XmlDocument.NodeInserting
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeInserting
  nameWithType: XmlDocument.NodeInserting
  fullName: System.Xml.XmlDocument.NodeInserting
- uid: System.Xml.XmlDocument.NodeRemoved
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeRemoved
  nameWithType: XmlDocument.NodeRemoved
  fullName: System.Xml.XmlDocument.NodeRemoved
- uid: System.Xml.XmlDocument.NodeRemoving
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeRemoving
  nameWithType: XmlDocument.NodeRemoving
  fullName: System.Xml.XmlDocument.NodeRemoving
- uid: System.Xml.XmlDocument.NodeType
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeType
  nameWithType: XmlDocument.NodeType
  fullName: System.Xml.XmlDocument.NodeType
- uid: System.Xml.XmlDocument.OwnerDocument
  parent: System.Xml.XmlDocument
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
  fullName: System.Xml.XmlDocument.OwnerDocument
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml.XmlDocument.ParentNode
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
  fullName: System.Xml.XmlDocument.ParentNode
- uid: System.Xml.XmlDocument.PreserveWhitespace
  parent: System.Xml.XmlDocument
  isExternal: false
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
  fullName: System.Xml.XmlDocument.PreserveWhitespace
- uid: System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ReadNode(XmlReader)
  nameWithType: XmlDocument.ReadNode(XmlReader)
  fullName: System.Xml.XmlDocument.ReadNode(XmlReader)
- uid: System.Xml.XmlDocument.Save(System.IO.Stream)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(Stream)
  nameWithType: XmlDocument.Save(Stream)
  fullName: System.Xml.XmlDocument.Save(Stream)
- uid: System.Xml.XmlDocument.Save(System.IO.TextWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(TextWriter)
  nameWithType: XmlDocument.Save(TextWriter)
  fullName: System.Xml.XmlDocument.Save(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Xml.XmlDocument.Save(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(String)
  nameWithType: XmlDocument.Save(String)
  fullName: System.Xml.XmlDocument.Save(String)
- uid: System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(XmlWriter)
  nameWithType: XmlDocument.Save(XmlWriter)
  fullName: System.Xml.XmlDocument.Save(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.XmlDocument.SchemaInfo
  parent: System.Xml.XmlDocument
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
  fullName: System.Xml.XmlDocument.SchemaInfo
- uid: System.Xml.Schema.IXmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: IXmlSchemaInfo
  nameWithType: IXmlSchemaInfo
  fullName: System.Xml.Schema.IXmlSchemaInfo
- uid: System.Xml.XmlDocument.Schemas
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Schemas
  nameWithType: XmlDocument.Schemas
  fullName: System.Xml.XmlDocument.Schemas
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate(ValidationEventHandler)
  nameWithType: XmlDocument.Validate(ValidationEventHandler)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler)
- uid: System.Xml.Schema.ValidationEventHandler
  parent: System.Xml.Schema
  isExternal: false
  name: ValidationEventHandler
  nameWithType: ValidationEventHandler
  fullName: System.Xml.Schema.ValidationEventHandler
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate(ValidationEventHandler,XmlNode)
  nameWithType: XmlDocument.Validate(ValidationEventHandler,XmlNode)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler,XmlNode)
- uid: System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlDocument.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteContentTo(XmlWriter)
- uid: System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteTo(XmlWriter)
  nameWithType: XmlDocument.WriteTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteTo(XmlWriter)
- uid: System.Xml.XmlDocument.XmlResolver
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
  fullName: System.Xml.XmlDocument.XmlResolver
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Xml.XmlDocument.#ctor*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument.XmlDocument
- uid: System.Xml.XmlDocument.BaseURI*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
- uid: System.Xml.XmlDocument.CloneNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CloneNode
  nameWithType: XmlDocument.CloneNode
- uid: System.Xml.XmlDocument.CreateAttribute*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute
  nameWithType: XmlDocument.CreateAttribute
- uid: System.Xml.XmlDocument.CreateCDataSection*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateCDataSection
  nameWithType: XmlDocument.CreateCDataSection
- uid: System.Xml.XmlDocument.CreateComment*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateComment
  nameWithType: XmlDocument.CreateComment
- uid: System.Xml.XmlDocument.CreateDefaultAttribute*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDefaultAttribute
  nameWithType: XmlDocument.CreateDefaultAttribute
- uid: System.Xml.XmlDocument.CreateDocumentFragment*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentFragment
  nameWithType: XmlDocument.CreateDocumentFragment
- uid: System.Xml.XmlDocument.CreateDocumentType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentType
  nameWithType: XmlDocument.CreateDocumentType
- uid: System.Xml.XmlDocument.CreateElement*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement
  nameWithType: XmlDocument.CreateElement
- uid: System.Xml.XmlDocument.CreateEntityReference*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateEntityReference
  nameWithType: XmlDocument.CreateEntityReference
- uid: System.Xml.XmlDocument.CreateNavigator*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator
  nameWithType: XmlDocument.CreateNavigator
- uid: System.Xml.XmlDocument.CreateNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode
  nameWithType: XmlDocument.CreateNode
- uid: System.Xml.XmlDocument.CreateProcessingInstruction*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateProcessingInstruction
  nameWithType: XmlDocument.CreateProcessingInstruction
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateSignificantWhitespace
  nameWithType: XmlDocument.CreateSignificantWhitespace
- uid: System.Xml.XmlDocument.CreateTextNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateTextNode
  nameWithType: XmlDocument.CreateTextNode
- uid: System.Xml.XmlDocument.CreateWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateWhitespace
  nameWithType: XmlDocument.CreateWhitespace
- uid: System.Xml.XmlDocument.CreateXmlDeclaration*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateXmlDeclaration
  nameWithType: XmlDocument.CreateXmlDeclaration
- uid: System.Xml.XmlDocument.DocumentElement*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
- uid: System.Xml.XmlDocument.DocumentType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
- uid: System.Xml.XmlDocument.GetElementById*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementById
  nameWithType: XmlDocument.GetElementById
- uid: System.Xml.XmlDocument.GetElementsByTagName*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName
  nameWithType: XmlDocument.GetElementsByTagName
- uid: System.Xml.XmlDocument.Implementation*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Implementation
  nameWithType: XmlDocument.Implementation
- uid: System.Xml.XmlDocument.ImportNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ImportNode
  nameWithType: XmlDocument.ImportNode
- uid: System.Xml.XmlDocument.InnerText*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerText
  nameWithType: XmlDocument.InnerText
- uid: System.Xml.XmlDocument.InnerXml*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
- uid: System.Xml.XmlDocument.IsReadOnly*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
- uid: System.Xml.XmlDocument.Load*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load
  nameWithType: XmlDocument.Load
- uid: System.Xml.XmlDocument.LoadXml*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LoadXml
  nameWithType: XmlDocument.LoadXml
- uid: System.Xml.XmlDocument.LocalName*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LocalName
  nameWithType: XmlDocument.LocalName
- uid: System.Xml.XmlDocument.Name*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Name
  nameWithType: XmlDocument.Name
- uid: System.Xml.XmlDocument.NameTable*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NameTable
  nameWithType: XmlDocument.NameTable
- uid: System.Xml.XmlDocument.NodeType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeType
  nameWithType: XmlDocument.NodeType
- uid: System.Xml.XmlDocument.OwnerDocument*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
- uid: System.Xml.XmlDocument.ParentNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
- uid: System.Xml.XmlDocument.PreserveWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
- uid: System.Xml.XmlDocument.ReadNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ReadNode
  nameWithType: XmlDocument.ReadNode
- uid: System.Xml.XmlDocument.Save*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save
  nameWithType: XmlDocument.Save
- uid: System.Xml.XmlDocument.SchemaInfo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
- uid: System.Xml.XmlDocument.Schemas*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Schemas
  nameWithType: XmlDocument.Schemas
- uid: System.Xml.XmlDocument.Validate*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate
  nameWithType: XmlDocument.Validate
- uid: System.Xml.XmlDocument.WriteContentTo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteContentTo
  nameWithType: XmlDocument.WriteContentTo
- uid: System.Xml.XmlDocument.WriteTo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteTo
  nameWithType: XmlDocument.WriteTo
- uid: System.Xml.XmlDocument.XmlResolver*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
