### YamlMime:ManagedReference
items:
- uid: System.Windows.CoerceValueCallback
  id: CoerceValueCallback
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
  type: Delegate
  summary: "종속성 속성 값을 다시 계산 되는지 또는 강제 변환 특별히 요청 될 때마다 호출 되는 메서드에 대 한 템플릿을 제공 합니다."
  remarks: "콜백은 된에 따라 다양 한 기술을 통해 종속성 속성에 할당할 수 있습니다. 각이 방법을 하려면 먼저 만들어야 새 속성 메타 데이터 개체 (<xref:System.Windows.PropertyMetadata>, 또는와 같은 파생된 클래스 <xref:System.Windows.FrameworkPropertyMetadata>).</xref:System.Windows.FrameworkPropertyMetadata> </xref:System.Windows.PropertyMetadata> 변수 하는 생성자 시그니처를 사용 하 여 메타 데이터 개체 만들기는 `coerceValueCallback` 매개 변수, 콜백 처리기에 해당 매개 변수를 할당 합니다. 모든 서명 및 집합에서 메타 데이터를 생성 또는 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>사용 중인 메타 데이터를 설정 하기 전에 속성.</xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>       이 메타 데이터가 있는 경우 다음을 할 수 있습니다:-의 서명을 중 하나를 사용 하 여 새 클래스의 새 종속성 속성을 정의 <xref:System.Windows.DependencyProperty.Register%2A>, 메타 데이터를 제공는 `typeMetadata` 값.</xref:System.Windows.DependencyProperty.Register%2A>      -메타 데이터를 재정의 합니다. (호출 <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) 종속성 속성을 소유 하는 클래스에서 파생 되는 경우 기존 종속성 속성에 대 한.</xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>      -새 <xref:System.Windows.DependencyObject> <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> 를 호출 하 여 새 메타 데이터를 사용 하 여 클래스</xref:System.Windows.DependencyObject> 에 기존 종속성 속성을 추가 합니다.       이 콜백은의 구현 값을 확인 해야 `baseValue` 결정 하 고 추가 강제 하는 값이 인지 값 또는 형식에 따라 합니다.       <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>속성은 언제 든 지 속성 시스템 또는 다른 모든 호출자가 호출을 호출 하는 데는 종속성에 대 한 <xref:System.Windows.DependencyObject.CoerceValue%2A>에 <xref:System.Windows.DependencyObject>인스턴스를 해당 속성의 식별자를 지정 하는 `dp`.</xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObject.CoerceValue%2A> </xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>       속성 값을 변경 속성 시스템에 가능한 참가자가 발견 했을 수 있습니다. 스타일, 제네릭 무효화, 트리거, 속성 값 상속 및 설정을 로컬 값이 포함 됩니다.       개 이상 지정 하지 않아야 일반적으로 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>지정 된 종속성 속성에 대 한 (재정의 하거나 이미 존재 하는 종속성 속성에 대 한 새 메타 데이터와 추가 한 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> </xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> 콜백 중 하나에만 영향을 줄 수 됩니다. 실행 되며 콜백에 비교할 상속에 가장 많이 파생 된 클래스에 적용 된 언어가 됩니다는 <xref:System.Windows.DependencyObject>호출자.</xref:System.Windows.DependencyObject> 소유자 계층에서 높은 존재 하 던 종속성 속성에 대 한 메타 데이터에 할당 된 대로 다른 콜백에 메타 데이터를 재정의할 때 대체 됩니다."
  example:
  - "The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value. In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] (not shown) to remove that dropdown from the effective choices.  \n  \n [!code-cs[DPCustom#CoerceValueCallback](~/add/codesnippet/csharp/DPCustom/default.xaml.cs#coercevaluecallback)]\n [!code-vb[DPCustom#CoerceValueCallback](~/add/codesnippet/visualbasic/dpcustom/default.xaml.vb#coercevaluecallback)]"
  syntax:
    content: public delegate object CoerceValueCallback(DependencyObject d, object baseValue);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
