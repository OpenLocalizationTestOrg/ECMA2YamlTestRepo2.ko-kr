### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitCallback
  id: WaitCallback
  langs:
  - csharp
  name: WaitCallback
  nameWithType: WaitCallback
  fullName: System.Threading.WaitCallback
  type: Delegate
  summary: "스레드 풀 스레드에 의해 실행 될 콜백 메서드를 나타냅니다."
  remarks: "WaitCallback 나타냅니다에 실행 하려고 하는 콜백 메서드는 <xref:System.Threading.ThreadPool>스레드.</xref:System.Threading.ThreadPool> 콜백 메서드에서 WaitCallback 생성자에 전달 하 여 대리자를 만듭니다. 메서드에 다음과 같은 서명이 있어야 합니다.       <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName> WaitCallback 대리자를 전달 하 여 실행에 대 한 작업을 큐 대기 스레드 풀 스레드가 사용 가능 해지면 콜백 메서드를 실행 합니다.      > [!NOTE] > Visual Basic 사용자 WaitCallback 생성자를 생략할 수 있습니다 및을 사용 하 여는 `AddressOf` <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> 콜백 메서드를 전달 하는 경우 연산자 Visual Basic에서 올바른 대리 생성자를 자동으로 호출합니다.       콜백 메서드에 정보를 전달 하려는 경우 필요한 정보를 포함 하는 개체를 만들고 전달 <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>실행에 대 한 작업을 대기 있습니다.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> 콜백 메서드가 실행 될 때마다는 `state` 매개 변수는이 개체를 포함 합니다.       콜백을 사용 하 여 스레드 풀 스레드를 동기화 하는 방법에 대 한 자세한 내용은 참조 [관리 되는 스레드 풀](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "This section contains two examples. The first example demonstrates how you can queue a simple task for execution by the thread pool.  \n  \n The second example demonstrates how you can queue a task and pass information to it.  \n  \n **Example 1**  \n  \n This example shows how to use the WaitCallback delegate to queue a task for execution by the thread pool. The code example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=fullName> method overload to queue a task, which is represented by a WaitCallback that wraps the `ThreadProc` method, to execute when a thread becomes available. No task information is supplied with this overload. Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.  \n  \n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/cpp/t-system.threading.waitc_1.cpp)]\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_1.vb)]\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/csharp/t-system.threading.waitc_1.cs)]  \n  \n **Example 2**  \n  \n This example shows how to create an object that contains task information. It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.  \n  \n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/cpp/t-system.threading.waitc_2.cpp)]\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/csharp/t-system.threading.waitc_2.cs)]\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public delegate void WaitCallback(object state);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
