### YamlMime:ManagedReference
items:
- uid: System.EnterpriseServices.ServicedComponent
  id: ServicedComponent
  children:
  - System.EnterpriseServices.ServicedComponent.#ctor
  - System.EnterpriseServices.ServicedComponent.Activate
  - System.EnterpriseServices.ServicedComponent.CanBePooled
  - System.EnterpriseServices.ServicedComponent.Construct(System.String)
  - System.EnterpriseServices.ServicedComponent.Deactivate
  - System.EnterpriseServices.ServicedComponent.Dispose
  - System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)
  - System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)
  - System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)
  - System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)
  - System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)
  langs:
  - csharp
  name: ServicedComponent
  nameWithType: ServicedComponent
  fullName: System.EnterpriseServices.ServicedComponent
  type: Class
  summary: "COM + 서비스를 사용 하 여 모든 클래스의 기본 클래스를 나타냅니다."
  remarks: "특정 조건에서 COM + 응용 프로그램에서 실행 되는 ServicedComponent에서 파생 된 클래스는 응답 중지할 수 있습니다. 이 문제는 작업 교착 상태에 의해 발생 합니다. 활동은 다중 스레드 응용 프로그램에서 비동기 정리 구성 요소 참조로 인해 교착 상태가 발생할 수 있습니다. 이 문제를 해결 하려면 호출는 <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A>ServicedComponent에서 파생 된 개체와 작업을 완료 하면 메서드가.</xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> 자세한 내용은 참조 [http://support.microsoft.com/default.aspx?scid=kb;en-us;327443](http://support.microsoft.com/default.aspx?scid=kb;en-us;327443)합니다.      > [!NOTE] > 클라이언트 코드를 호출 해야 `Dispose` 에서 제대로 작동 하도록 구성 요소 서비스를 제공 합니다."
  example:
  - "The following code example demonstrates how to expose a class as a configured COM component.  \n  \n [!code-cpp[EnterpriseServices_Basic#1](~/add/codesnippet/cpp/t-system.enterpriseservi_3_1.cpp)]\n [!code-cs[EnterpriseServices_Basic#1](~/add/codesnippet/csharp/t-system.enterpriseservi_3_1.cs)]  \n  \n To deploy this class as a configured COM component, you must generate a strong key, compile the class as a library, and register the library. These three steps are accomplished by the following three commands.  \n  \n```  \nsn -k Calculator.snk  \ncsc /t:library Calculator.cs  \nregsvcs Calculator.dll  \n```"
  syntax:
    content: 'public abstract class ServicedComponent : ContextBoundObject, IDisposable, System.EnterpriseServices.IRemoteDispatch, System.EnterpriseServices.IServicedComponentInfo'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ContextBoundObject
  implements:
  - System.EnterpriseServices.IRemoteDispatch
  - System.EnterpriseServices.IServicedComponentInfo
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.#ctor
  id: '#ctor'
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: ServicedComponent()
  nameWithType: ServicedComponent.ServicedComponent()
  fullName: System.EnterpriseServices.ServicedComponent.ServicedComponent()
  type: Constructor
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.EnterpriseServices.ServicedComponent&quot;> </xref> 클래스입니다."
  remarks: "이 생성자는이 형식으로 상태를 초기화 하는 파생된 클래스 생성자에서 호출 됩니다."
  syntax:
    content: public ServicedComponent ();
    parameters: []
  overload: System.EnterpriseServices.ServicedComponent.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.Activate
  id: Activate
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: Activate()
  nameWithType: ServicedComponent.Activate()
  fullName: System.EnterpriseServices.ServicedComponent.Activate()
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "개체 생성 되거나 풀에서 할당 되 면 인프라에서 호출 합니다. 개체에 사용자 지정 초기화 코드를 추가 하려면이 메서드를 재정의 합니다."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this method.  \n  \n [!code-cpp[EnterpriseServices_Pooling#3](~/add/codesnippet/cpp/m-system.enterpriseservi_15_1.cpp)]\n [!code-cs[EnterpriseServices_Pooling#3](~/add/codesnippet/csharp/m-system.enterpriseservi_15_1.cs)]\n [!code-vb[EnterpriseServices_Pooling#3](~/add/codesnippet/visualbasic/m-system.enterpriseservi_15_1.vb)]"
  syntax:
    content: protected virtual void Activate ();
    parameters: []
  overload: System.EnterpriseServices.ServicedComponent.Activate*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.CanBePooled
  id: CanBePooled
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: CanBePooled()
  nameWithType: ServicedComponent.CanBePooled()
  fullName: System.EnterpriseServices.ServicedComponent.CanBePooled()
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "개체 풀에 다시 배치 되기 전에이 메서드는 인프라에서 호출 됩니다. 이 메서드는 개체는 풀으로 다시 변환 여부에 대해 투표를 재정의 합니다."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this method.  \n  \n [!code-cpp[EnterpriseServices_Pooling#5](~/add/codesnippet/cpp/m-system.enterpriseservi_19_1.cpp)]\n [!code-cs[EnterpriseServices_Pooling#5](~/add/codesnippet/csharp/m-system.enterpriseservi_19_1.cs)]\n [!code-vb[EnterpriseServices_Pooling#5](~/add/codesnippet/visualbasic/m-system.enterpriseservi_19_1.vb)]"
  syntax:
    content: protected virtual bool CanBePooled ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>서비스 구성 요소를 풀링할 수 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.EnterpriseServices.ServicedComponent.CanBePooled*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.Construct(System.String)
  id: Construct(System.String)
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: Construct(String)
  nameWithType: ServicedComponent.Construct(String)
  fullName: System.EnterpriseServices.ServicedComponent.Construct(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "인프라에서 생성자 문자열에 전달 생성자가 호출 후 바로 호출 합니다. 이 메서드를 재정의 생성 문자열 값을 사용 합니다."
  syntax:
    content: protected virtual void Construct (string s);
    parameters:
    - id: s
      type: System.String
      description: "생성 문자열입니다."
  overload: System.EnterpriseServices.ServicedComponent.Construct*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.Deactivate
  id: Deactivate
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: Deactivate()
  nameWithType: ServicedComponent.Deactivate()
  fullName: System.EnterpriseServices.ServicedComponent.Deactivate()
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "개체가 비활성화 될 되려고 할 때 인프라에서 호출 합니다. 시간 (JIT) 컴파일된 코드 또는 개체 풀링을 사용 하는 경우 개체에 사용자 지정 종료 코드를 추가 하려면이 메서드를 재정의 합니다."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this method.  \n  \n [!code-cpp[EnterpriseServices_Pooling#4](~/add/codesnippet/cpp/m-system.enterpriseservi_27_1.cpp)]\n [!code-cs[EnterpriseServices_Pooling#4](~/add/codesnippet/csharp/m-system.enterpriseservi_27_1.cs)]\n [!code-vb[EnterpriseServices_Pooling#4](~/add/codesnippet/visualbasic/m-system.enterpriseservi_27_1.vb)]"
  syntax:
    content: protected virtual void Deactivate ();
    parameters: []
  overload: System.EnterpriseServices.ServicedComponent.Deactivate*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.Dispose
  id: Dispose
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: Dispose()
  nameWithType: ServicedComponent.Dispose()
  fullName: System.EnterpriseServices.ServicedComponent.Dispose()
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.EnterpriseServices.ServicedComponent&quot;> </xref>합니다."
  remarks: "개체를 종료 하 고 연결 된 COM + 컨텍스트를 제거 합니다.       가비지 수집기는 개체를 해제 하기 전에 명시적으로 COM + 개체와 외부 리소스를 해제 하는 것이 좋습니다. 외부 리소스가 부족 하거나 비용이 많이 드는 경우 더 이상 필요할 때 명시적으로 COM + 리소스를 해제 하 여 더 나은 성능을 얻을 수 없습니다. 명시적 제어 Dispose 메서드에 의해 제공 됩니다.       사용 하는 리소스를 사용 하면 Dispose를 호출는 <xref:System.EnterpriseServices.ServicedComponent>다른 용도에 다시 할당 됩니다.</xref:System.EnterpriseServices.ServicedComponent> Dispose에 대 한 자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.EnterpriseServices.ServicedComponent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ServicedComponent.Dispose(Boolean)
  fullName: System.EnterpriseServices.ServicedComponent.Dispose(Boolean)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.EnterpriseServices.ServicedComponent&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public `Dispose` 메서드 및 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> `Dispose`보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다. <xref:System.Object.Finalize%2A>호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</xref:System.Object.Finalize%2A>       경우는 `disposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.EnterpriseServices.ServicedComponent>참조.</xref:System.EnterpriseServices.ServicedComponent> 이 메서드 호출에서 `Dispose` 각 참조 된 개체의 메서드."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.EnterpriseServices.ServicedComponent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)
  id: DisposeObject(System.EnterpriseServices.ServicedComponent)
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: DisposeObject(ServicedComponent)
  nameWithType: ServicedComponent.DisposeObject(ServicedComponent)
  fullName: System.EnterpriseServices.ServicedComponent.DisposeObject(ServicedComponent)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "개체를 종료 하 고 연결된 된 COM + 참조를 제거 합니다."
  remarks: "사용 하는 것이 좋습니다는 `Dispose` DisposeObject 보다는 패턴을 디자인 합니다."
  syntax:
    content: public static void DisposeObject (System.EnterpriseServices.ServicedComponent sc);
    parameters:
    - id: sc
      type: System.EnterpriseServices.ServicedComponent
      description: "삭제 하는 개체입니다."
  overload: System.EnterpriseServices.ServicedComponent.DisposeObject*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)
  id: System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)
  isEii: true
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(String)
  nameWithType: ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(String)
  fullName: System.EnterpriseServices.ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "되도록 COM + 컨텍스트에서 <xref href=&quot;System.EnterpriseServices.ServicedComponent&quot;> </xref> 클래스 개체의 <xref uid=&quot;langword_csharp_done&quot; name=&quot;done&quot; href=&quot;&quot;> </xref> 비트가 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 원격 메서드 호출 후 합니다."
  remarks: "<xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A>메서드의 게시 된 인터페이스에 속해 있지 않습니다는 <xref:System.EnterpriseServices.ServicedComponent>클래스 및 다른 곳에서 구현 될 필요가 없습니다.</xref:System.EnterpriseServices.ServicedComponent> </xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A>"
  syntax:
    content: string IRemoteDispatch.RemoteDispatchAutoDone (string s);
    parameters:
    - id: s
      type: System.String
      description: "추가할 수 있습니다."
    return:
      type: System.String
      description: "구현 하는 응답 개체에서 변환 된 문자열의 <xref href=&quot;System.Runtime.Remoting.Messaging.IMethodReturnMessage&quot;> </xref> 인터페이스입니다."
  overload: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)
  id: System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)
  isEii: true
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(String)
  nameWithType: ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(String)
  fullName: System.EnterpriseServices.ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "되도록 보장 하지 않습니다, COM + 컨텍스트에서 <xref href=&quot;System.EnterpriseServices.ServicedComponent&quot;> </xref> 클래스 개체의 <xref uid=&quot;langword_csharp_done&quot; name=&quot;done&quot; href=&quot;&quot;> </xref> 비트가 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 원격 메서드 호출 후 합니다."
  remarks: "<xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A>메서드의 게시 된 인터페이스에 속해 있지 않습니다는 <xref:System.EnterpriseServices.ServicedComponent>클래스 및 다른 곳에서 구현 될 필요가 없습니다.</xref:System.EnterpriseServices.ServicedComponent> </xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A>"
  syntax:
    content: string IRemoteDispatch.RemoteDispatchNotAutoDone (string s);
    parameters:
    - id: s
      type: System.String
      description: "구현 하는 요청 개체도 변환 하는 문자열은 <xref href=&quot;System.Runtime.Remoting.Messaging.IMessage&quot;> </xref> 인터페이스입니다."
    return:
      type: System.String
      description: "구현 하는 응답 개체에서 변환 된 문자열의 <xref href=&quot;System.Runtime.Remoting.Messaging.IMethodReturnMessage&quot;> </xref> 인터페이스입니다."
  overload: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)
  id: System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)
  isEii: true
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(Int32,String[])
  nameWithType: ServicedComponent.System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(Int32,String[])
  fullName: System.EnterpriseServices.ServicedComponent.System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(Int32,String[])
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "에 대 한 특정 정보를 가져옵니다는 <xref href=&quot;System.EnterpriseServices.ServicedComponent&quot;> </xref> 클래스 인스턴스."
  remarks: "[IServicedComponentInfo.GetComponentInfo (Int32, String\\[\\])](assetId:///M:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(System.Int32@,System.String[]@)?qualifyHint=False&autoUpgrade=True) 메서드의 게시 된 인터페이스에 속해 있지 않습니다는 <xref:System.EnterpriseServices.ServicedComponent>클래스 및 다른 곳에서 구현 될 필요가 없습니다.</xref:System.EnterpriseServices.ServicedComponent>"
  syntax:
    content: void IServicedComponentInfo.GetComponentInfo (ref int infoMask, out string[] infoArray);
    parameters:
    - id: infoMask
      type: System.Int32
      description: "여기서 0x00000001 프로세스 ID는 서비스 구성 요소에 대 한 키, 0x00000002 응용 프로그램 도메인 ID에 대 한 키 이며 0x00000004 원격 URI는 서비스 구성 요소에 대 한 키가는 비트 마스크입니다."
    - id: infoArray
      type: System.String[]
      description: 'A string array that may contain any or all of the following, in order: the serviced component''s process ID, the application domain ID, and the serviced component''s remote URI.'
  overload: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ContextBoundObject
  isExternal: false
  name: System.ContextBoundObject
- uid: System.EnterpriseServices.ServicedComponent.#ctor
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: ServicedComponent()
  nameWithType: ServicedComponent.ServicedComponent()
  fullName: System.EnterpriseServices.ServicedComponent.ServicedComponent()
- uid: System.EnterpriseServices.ServicedComponent.Activate
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Activate()
  nameWithType: ServicedComponent.Activate()
  fullName: System.EnterpriseServices.ServicedComponent.Activate()
- uid: System.EnterpriseServices.ServicedComponent.CanBePooled
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: CanBePooled()
  nameWithType: ServicedComponent.CanBePooled()
  fullName: System.EnterpriseServices.ServicedComponent.CanBePooled()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.EnterpriseServices.ServicedComponent.Construct(System.String)
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Construct(String)
  nameWithType: ServicedComponent.Construct(String)
  fullName: System.EnterpriseServices.ServicedComponent.Construct(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EnterpriseServices.ServicedComponent.Deactivate
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Deactivate()
  nameWithType: ServicedComponent.Deactivate()
  fullName: System.EnterpriseServices.ServicedComponent.Deactivate()
- uid: System.EnterpriseServices.ServicedComponent.Dispose
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Dispose()
  nameWithType: ServicedComponent.Dispose()
  fullName: System.EnterpriseServices.ServicedComponent.Dispose()
- uid: System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ServicedComponent.Dispose(Boolean)
  fullName: System.EnterpriseServices.ServicedComponent.Dispose(Boolean)
- uid: System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: DisposeObject(ServicedComponent)
  nameWithType: ServicedComponent.DisposeObject(ServicedComponent)
  fullName: System.EnterpriseServices.ServicedComponent.DisposeObject(ServicedComponent)
- uid: System.EnterpriseServices.ServicedComponent
  parent: System.EnterpriseServices
  isExternal: false
  name: ServicedComponent
  nameWithType: ServicedComponent
  fullName: System.EnterpriseServices.ServicedComponent
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(String)
  nameWithType: ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(String)
  fullName: System.EnterpriseServices.ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(String)
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(String)
  nameWithType: ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(String)
  fullName: System.EnterpriseServices.ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(String)
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(Int32,String[])
  nameWithType: ServicedComponent.System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(Int32,String[])
  fullName: System.EnterpriseServices.ServicedComponent.System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(Int32,String[])
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.EnterpriseServices.ServicedComponent.#ctor*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: ServicedComponent
  nameWithType: ServicedComponent.ServicedComponent
- uid: System.EnterpriseServices.ServicedComponent.Activate*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Activate
  nameWithType: ServicedComponent.Activate
- uid: System.EnterpriseServices.ServicedComponent.CanBePooled*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: CanBePooled
  nameWithType: ServicedComponent.CanBePooled
- uid: System.EnterpriseServices.ServicedComponent.Construct*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Construct
  nameWithType: ServicedComponent.Construct
- uid: System.EnterpriseServices.ServicedComponent.Deactivate*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Deactivate
  nameWithType: ServicedComponent.Deactivate
- uid: System.EnterpriseServices.ServicedComponent.Dispose*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Dispose
  nameWithType: ServicedComponent.Dispose
- uid: System.EnterpriseServices.ServicedComponent.DisposeObject*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: DisposeObject
  nameWithType: ServicedComponent.DisposeObject
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone
  nameWithType: ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone
  nameWithType: ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo
  nameWithType: ServicedComponent.System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo
