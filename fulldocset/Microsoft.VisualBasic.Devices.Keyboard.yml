### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Devices.Keyboard
  id: Keyboard
  children:
  - Microsoft.VisualBasic.Devices.Keyboard.#ctor
  - Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  - Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  - Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  - Microsoft.VisualBasic.Devices.Keyboard.NumLock
  - Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  - Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)
  - Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)
  - Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  langs:
  - csharp
  name: Keyboard
  nameWithType: Keyboard
  fullName: Microsoft.VisualBasic.Devices.Keyboard
  type: Class
  summary: "키와 같은 현재 눌러져 활성 창에 키 입력 보내기 하는 방법을 제공 키보드의 현재 상태에 액세스 하기 위한 속성을 제공 합니다."
  remarks: "`My.Computer.Keyboard` 개체는 컴퓨터의 키보드에 대 한 인터페이스를 제공 합니다. 속성은 `My.Computer.Keyboard` 몇 가지 특수 키의 상태에 대 한 정보를 제공 합니다. `My.Computer.Keyboard.SendKeys` 메서드를 사용 하면 키보드에서 입력 하는 경우 키의 활성 창으로 보냅니다.      ## 다음 표에 관련 된 작업의 예제 작업은 `My.Computer.Keyboard` 개체입니다.      |||   |-|-|   | | 참조 |   | 응용 프로그램에 키 입력 보내기 | [하는 방법: 응용 프로그램을 시작 하 고 (Visual Basic) 키 입력 보내기](~/add/includes/ajax-current-ext-md.md)|      # # 프로젝트 형식에 따라 가용성 | | |   |-|-|   | 프로젝트 형식을 | 사용 가능한 |   | Windows 응용 프로그램 | **Yes**|   | 클래스 라이브러리 | **Yes**|   | 콘솔 응용 프로그램 | **Yes**|   | Windows 컨트롤 라이브러리 | **Yes**|   | 웹 컨트롤 라이브러리 | 더 |   | Windows 서비스 | **Yes**|   | 웹 사이트 | 더 |"
  example:
  - "This example uses the `My.Computer.Keyboard.CtrlKeyDown` property to determine if the computer's CTRL key is pressed.  \n  \n [!code-vb[VbVbalrMyComputer#36](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#36)]"
  syntax:
    content: public class Keyboard
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: Keyboard()
  nameWithType: Keyboard.Keyboard()
  fullName: Microsoft.VisualBasic.Devices.Keyboard.Keyboard()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "새 인스턴스를 초기화는 <xref href=&quot;Microsoft.VisualBasic.Devices.Keyboard&quot;> </xref> 클래스입니다."
  syntax:
    content: public Keyboard ();
    parameters: []
  overload: Microsoft.VisualBasic.Devices.Keyboard.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  id: AltKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: AltKeyDown
  nameWithType: Keyboard.AltKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "가져옵니다는 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> ALT 키 다운 인지 여부를 나타내는입니다."
  remarks: "`My.Computer.Keyboard.AltKeyDown` 속성 비슷한 기능을 제공 된 <xref:System.Windows.Forms.Control.ModifierKeys%2A>속성.</xref:System.Windows.Forms.Control.ModifierKeys%2A>      ## 프로젝트 형식에 따라 가용성 | | |   |-|-|   | 프로젝트 형식을 | 사용 가능한 |   | Windows 응용 프로그램 | **Yes**|   | 클래스 라이브러리 | **Yes**|   | 콘솔 응용 프로그램 | **Yes**|   | Windows 컨트롤 라이브러리 | **Yes**|   | 웹 컨트롤 라이브러리 | 더 |   | Windows 서비스 | **Yes**|   | 웹 사이트 | 더 |"
  example:
  - "This example uses the `My.Computer.Keyboard.AltKeyDown` property to determine if the computer's ALT key is down.  \n  \n [!code-vb[VbVbalrMyComputer#23](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#23)]"
  syntax:
    content: public bool AltKeyDown { get; }
    return:
      type: System.Boolean
      description: 'A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 값: <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> ALT 키가 고, 그렇지 않으면 아래쪽 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>합니다.'
  overload: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  id: CapsLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: CapsLock
  nameWithType: Keyboard.CapsLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "가져옵니다는 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 나타내는 CAPS LOCK 켜 집니다."
  remarks: "CAPS LOCK의 상태만 반환 됩니다.      ## 프로젝트 형식에 따라 가용성 | | |   |-|-|   | 프로젝트 형식을 | 사용 가능한 |   | Windows 응용 프로그램 | **Yes**|   | 클래스 라이브러리 | **Yes**|   | 콘솔 응용 프로그램 | **Yes**|   | Windows 컨트롤 라이브러리 | **Yes**|   | 웹 컨트롤 라이브러리 | 더 |   | Windows 서비스 | **Yes**|   | 웹 사이트 | 더 |"
  example:
  - "This example uses the `My.Computer.Keyboard.CapsLock` property to determine if the computer's CAPS LOCK is turned on.  \n  \n [!code-vb[VbVbalrMyComputer#50](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#50)]"
  syntax:
    content: public bool CapsLock { get; }
    return:
      type: System.Boolean
      description: 'A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 값: <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> 방향의 CAPS LOCK이 설정 되어 있으면 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>합니다.'
  overload: Microsoft.VisualBasic.Devices.Keyboard.CapsLock*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  id: CtrlKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: CtrlKeyDown
  nameWithType: Keyboard.CtrlKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "가져옵니다는 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> CTRL 키 다운 인지 여부를 나타내는입니다."
  remarks: "`My.Computer.Keyboard.CtrlKeyDown` 속성 비슷한 기능을 제공 된 <xref:System.Windows.Forms.Control.ModifierKeys%2A>속성.</xref:System.Windows.Forms.Control.ModifierKeys%2A>      ## 프로젝트 형식에 따라 가용성 | | |   |-|-|   | 프로젝트 형식을 | 사용 가능한 |   | Windows 응용 프로그램 | **Yes**|   | 클래스 라이브러리 | **Yes**|   | 콘솔 응용 프로그램 | **Yes**|   | Windows 컨트롤 라이브러리 | **Yes**|   | 웹 컨트롤 라이브러리 | 더 |   | Windows 서비스 | **Yes**|   | 웹 사이트 | 더 |"
  example:
  - "This example uses the `My.Computer.Keyboard.CtrlKeyDown` property to determine if the computer's CTRL key is down.  \n  \n [!code-vb[VbVbalrMyComputer#34](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#34)]"
  syntax:
    content: public bool CtrlKeyDown { get; }
    return:
      type: System.Boolean
      description: "A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref> value. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>CTRL 키; 다운 된 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.NumLock
  id: NumLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: NumLock
  nameWithType: Keyboard.NumLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.NumLock
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "가져옵니다는 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 에 NUM LOCK 키 인지 여부를 나타내는입니다."
  remarks: "NUM LOCK 키의 상태에만 반환 됩니다.      ## 프로젝트 형식에 따라 가용성 | | |   |-|-|   | 프로젝트 형식을 | 사용 가능한 |   | Windows 응용 프로그램 | **Yes**|   | 클래스 라이브러리 | **Yes**|   | 콘솔 응용 프로그램 | **Yes**|   | Windows 컨트롤 라이브러리 | **Yes**|   | 웹 컨트롤 라이브러리 | 더 |   | Windows 서비스 | **Yes**|   | 웹 사이트 | 더 |"
  example:
  - "This example uses the `My.Computer.Keyboard.NumLock` property to determine if the computer's NUM LOCK key is on.  \n  \n [!code-vb[VbVbalrMyComputer#48](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#48)]"
  syntax:
    content: public bool NumLock { get; }
    return:
      type: System.Boolean
      description: "A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref> value. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>NUM LOCK;에 있으면 그렇지 않으면 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.VisualBasic.Devices.Keyboard.NumLock*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  id: ScrollLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: ScrollLock
  nameWithType: Keyboard.ScrollLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "가져옵니다는 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> SCROLL LOCK 키가 켜져 있는지 여부를 나타내는입니다."
  remarks: "SCROLL LOCK 키의 상태에만 반환 됩니다.      ## 프로젝트 형식에 따라 가용성 | | |   |-|-|   | 프로젝트 형식을 | 사용 가능한 |   | Windows 응용 프로그램 | **Yes**|   | 클래스 라이브러리 | **Yes**|   | 콘솔 응용 프로그램 | **Yes**|   | Windows 컨트롤 라이브러리 | **Yes**|   | 웹 컨트롤 라이브러리 | 더 |   | Windows 서비스 | **Yes**|   | 웹 사이트 | 더 |"
  example:
  - "This example uses the `My.Computer.Keyboard.ScrollLock` property to determine if the computer's SCROLL LOCK key is on.  \n  \n [!code-vb[VbVbalrMyComputer#31](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#31)]"
  syntax:
    content: public bool ScrollLock { get; }
    return:
      type: System.Boolean
      description: "A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref> value. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>SCROLL LOCK 키가 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)
  id: SendKeys(System.String)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: SendKeys(String)
  nameWithType: Keyboard.SendKeys(String)
  fullName: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "키보드에서 입력 한 것 처럼 하나 이상의 키 입력의 활성 창으로 보냅니다."
  remarks: "`My.Computer.Keyboard.SendKeys` 에 유사한 기능을 제공 하는 메서드는 <xref:System.Windows.Forms.SendKeys.Send%2A>및 <xref:System.Windows.Forms.SendKeys.SendWait%2A>메서드.</xref:System.Windows.Forms.SendKeys.SendWait%2A> </xref:System.Windows.Forms.SendKeys.Send%2A>       `wait` 인수는 응용 프로그램 계속 하려면 다른 응용 프로그램을 완료 해야 하는 경우에 유용 합니다.      > [!NOTE] > 다른 응용 프로그램을 활성화 하는 관리 되는 메서드가 없습니다 이기 때문에 현재 응용 프로그램 내에서이 클래스를 사용 하 여, 수동으로, 키를 받을 수 있는 창을 선택 하거나와 같은 Windows API 메서드 사용 `FindWindow` 및 `SetForegroundWindow`, 다른 응용 프로그램에 포커스를 둡니다. 자세한 내용은 참조 [연습: Windows Api 호출](~/add/includes/ajax-current-ext-md.md)합니다.       `keys` 모든 단일 키 또는 조합 하 여 ALT, CTRL 또는 SHIFT (또는 해당 키의 임의 조합) 인수를 지정할 수 있습니다. 각 키와 같은 하나 이상의 문자로 표현 되 `a` 문자에 대 한 &quot;a&quot;, 또는 `{ENTER}` 키에 대 한 합니다.       키 코드 앞에 SHIFT를 키 결합 하려면 `+` (더하기 기호). 키 코드를 CTRL 키와 조합 하려면 앞에 `^` (캐럿). 키 코드를 ALT 키와 조합 하려면 앞에 `%` (백분율 기호). 반복 되는 키를 지정 하려면 폼을 사용 하 여 `{` *번호 키*`}`합니다. 사이 공백을 넣으십시오 *키* 및 *번호*합니다. 예를 들어 `{LEFT 42}` &quot;왼쪽된 화살표 키를 눌러 42 배&quot;; 의미 합니다. `{h 10}` 수단 &quot;&quot;h&quot; 10 번 누릅니다.&quot;       다음 표에서 (예: ENTER 또는 TAB)는 해당 키를 누를 때 표시 되지 않는 문자를 지정 하는 데 사용할 수 있는 코드를 나열 합니다.      |||   |-|-|   | 키 | 코드 |   | 백스페이스 | {백스페이스} 또는 {BS} |   | 중단 | {철회} |   | CAPS LOCK | {CAPSLOCK} |   | 지우기 | {지우기} |   | 삭제 | {삭제} 또는 {DEL} |   | 아래쪽 화살표 | {아래쪽} |   | 최종 | {끝} |   | ENTER 키 (숫자 키패드) | {입력} |   | 입력 | ~ |   | ESC | {이스케이프} 또는 {ESC} |   | 도움말 | {도움말} |   | 홈 | {홈} |   | 기능 | {삽입} |   | 왼쪽된 화살표 | {LEFT} |   | NUM LOCK | {NUMLOCK} |   | 페이지 아래로 | {PGDN} |   | 페이지 위로 | {PGUP} |   | 반환할 | {반환} |   | 오른쪽 화살표 | {오른쪽} |   | SCROLL LOCK | {SCROLLLOCK} |   | 탭 | {탭} |   | 위쪽 화살표 | {최대} |   | F1 ~ F15 | {F1} {F15을 (를) 통해 |      # # 프로젝트 형식에 따라 가용성 | | |   |-|-|   | 프로젝트 형식을 | 사용 가능한 |   | Windows 응용 프로그램 | **Yes**|   | 클래스 라이브러리 | **Yes**|   | 콘솔 응용 프로그램 | **Yes**|   | Windows 컨트롤 라이브러리 | **Yes**|   | 웹 컨트롤 라이브러리 | 더 |   | Windows 서비스 | **Yes**|   | 웹 사이트 | 더 |"
  example:
  - "This example uses the `My.Computer.Keyboard.SendKeys` method to send keystrokes to an external application, the Calculator application, started by the `Shell` function.  \n  \n [!code-vb[VbVbalrMyComputer#25](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#25)]  \n  \n A <xref:System.ArgumentException> exception is raised if an application with the requested process identifier cannot be found.  \n  \n The call to the `Shell` function requires full trust (<xref:System.Security.SecurityException> class)."
  syntax:
    content: public void SendKeys (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 보낼 키를 정의 하는 합니다."
  overload: Microsoft.VisualBasic.Devices.Keyboard.SendKeys*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "부분 신뢰 상황 존재는 사용자는 권한이 부족 합니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)
  id: SendKeys(System.String,System.Boolean)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: SendKeys(String,Boolean)
  nameWithType: Keyboard.SendKeys(String,Boolean)
  fullName: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "키보드에서 입력 한 것 처럼 하나 이상의 키 입력의 활성 창으로 보냅니다."
  remarks: "`My.Computer.Keyboard.SendKeys` 에 유사한 기능을 제공 하는 메서드는 <xref:System.Windows.Forms.SendKeys.Send%2A>및 <xref:System.Windows.Forms.SendKeys.SendWait%2A>메서드.</xref:System.Windows.Forms.SendKeys.SendWait%2A> </xref:System.Windows.Forms.SendKeys.Send%2A>       `wait` 인수는 응용 프로그램 계속 하려면 다른 응용 프로그램을 완료 해야 하는 경우에 유용 합니다.      > [!NOTE] > 다른 응용 프로그램을 활성화 하는 관리 되는 메서드가 없습니다 이기 때문에 현재 응용 프로그램 내에서이 클래스를 사용 하 여, 수동으로, 키를 받을 수 있는 창을 선택 하거나와 같은 Windows API 메서드 사용 `FindWindow` 및 `SetForegroundWindow`, 다른 응용 프로그램에 포커스를 둡니다. 자세한 내용은 참조 [연습: Windows Api 호출](~/add/includes/ajax-current-ext-md.md)합니다.       `keys` 모든 단일 키 또는 조합 하 여 ALT, CTRL 또는 SHIFT (또는 해당 키의 임의 조합) 인수를 지정할 수 있습니다. 각 키와 같은 하나 이상의 문자로 표현 되 `a` 문자에 대 한 &quot;a&quot;, 또는 `{ENTER}` 키에 대 한 합니다.       키 코드 앞에 SHIFT를 키 결합 하려면 `+` (더하기 기호). 키 코드를 CTRL 키와 조합 하려면 앞에 `^` (캐럿). 키 코드를 ALT 키와 조합 하려면 앞에 `%` (백분율 기호). 반복 되는 키를 지정 하려면 폼을 사용 하 여 `{` *번호 키*`}`합니다. 사이 공백을 넣으십시오 *키* 및 *번호*합니다. 예를 들어 `{LEFT 42}` &quot;왼쪽된 화살표 키를 눌러 42 배&quot;; 의미 합니다. `{h 10}` 수단 &quot;&quot;h&quot; 10 번 누릅니다.&quot;       다음 표에서 (예: ENTER 또는 TAB)는 해당 키를 누를 때 표시 되지 않는 문자를 지정 하는 데 사용할 수 있는 코드를 나열 합니다.      |||   |-|-|   | 키 | 코드 |   | 백스페이스 | {백스페이스} 또는 {BS} |   | 중단 | {철회} |   | CAPS LOCK | {CAPSLOCK} |   | 지우기 | {지우기} |   | 삭제 | {삭제} 또는 {DEL} |   | 아래쪽 화살표 | {아래쪽} |   | 최종 | {끝} |   | ENTER 키 (숫자 키패드) | {입력} |   | 입력 | ~ |   | ESC | {이스케이프} 또는 {ESC} |   | 도움말 | {도움말} |   | 홈 | {홈} |   | 기능 | {삽입} |   | 왼쪽된 화살표 | {LEFT} |   | NUM LOCK | {NUMLOCK} |   | 페이지 아래로 | {PGDN} |   | 페이지 위로 | {PGUP} |   | 반환할 | {반환} |   | 오른쪽 화살표 | {오른쪽} |   | SCROLL LOCK | {SCROLLLOCK} |   | 탭 | {탭} |   | 위쪽 화살표 | {최대} |   | F1 ~ F15 | {F1} {F15을 (를) 통해 |      # # 프로젝트 형식에 따라 가용성 | | |   |-|-|   | 프로젝트 형식을 | 사용 가능한 |   | Windows 응용 프로그램 | **Yes**|   | 클래스 라이브러리 | **Yes**|   | 콘솔 응용 프로그램 | **Yes**|   | Windows 컨트롤 라이브러리 | **Yes**|   | 웹 컨트롤 라이브러리 | 더 |   | Windows 서비스 | **Yes**|   | 웹 사이트 | 더 |"
  example:
  - "This example uses the `My.Computer.Keyboard.SendKeys` method to send keystrokes to an external application, the Calculator application, started by the `Shell` function.  \n  \n [!code-vb[VbVbalrMyComputer#25](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#25)]  \n  \n A <xref:System.ArgumentException> exception is raised if an application with the requested process identifier cannot be found.  \n  \n The call to the `Shell` function requires full trust (<xref:System.Security.SecurityException> class)."
  syntax:
    content: public void SendKeys (string keys, bool wait);
    parameters:
    - id: keys
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 보낼 키를 정의 하는 합니다."
    - id: wait
      type: System.Boolean
      description: "선택 사항입니다. A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 키 입력 응용 프로그램을 계속 하기 전에 처리 될 때까지 기다리는 것인지 여부를 지정 하는 합니다. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>기본적으로 됩니다."
  overload: Microsoft.VisualBasic.Devices.Keyboard.SendKeys*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "부분 신뢰 상황 존재는 사용자는 권한이 부족 합니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  id: ShiftKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: ShiftKeyDown
  nameWithType: Keyboard.ShiftKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "가져옵니다는 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> SHIFT 키 다운 인지 여부를 나타내는입니다."
  remarks: "`My.Computer.Keyboard.ShiftKeyDown` 속성 비슷한 기능을 제공 된 <xref:System.Windows.Forms.Control.ModifierKeys%2A>속성.</xref:System.Windows.Forms.Control.ModifierKeys%2A>      ## 프로젝트 형식에 따라 가용성 | | |   |-|-|   | 프로젝트 형식을 | 사용 가능한 |   | Windows 응용 프로그램 | **Yes**|   | 클래스 라이브러리 | **Yes**|   | 콘솔 응용 프로그램 | **Yes**|   | Windows 컨트롤 라이브러리 | **Yes**|   | 웹 컨트롤 라이브러리 | 더 |   | Windows 서비스 | **Yes**|   | 웹 사이트 | 더 |"
  example:
  - "This example uses the `My.Computer.Keyboard.ShiftKeyDown` property to determine if one of the computer's SHIFT keys is down.  \n  \n [!code-vb[VbVbalrMyComputer#47](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#47)]"
  syntax:
    content: public bool ShiftKeyDown { get; }
    return:
      type: System.Boolean
      description: "A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref> value. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>SHIFT 키; 다운 된 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: Microsoft.VisualBasic.Devices.Keyboard.#ctor
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: Keyboard()
  nameWithType: Keyboard.Keyboard()
  fullName: Microsoft.VisualBasic.Devices.Keyboard.Keyboard()
- uid: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: AltKeyDown
  nameWithType: Keyboard.AltKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CapsLock
  nameWithType: Keyboard.CapsLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.CapsLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CtrlKeyDown
  nameWithType: Keyboard.CtrlKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
- uid: Microsoft.VisualBasic.Devices.Keyboard.NumLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: NumLock
  nameWithType: Keyboard.NumLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.NumLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ScrollLock
  nameWithType: Keyboard.ScrollLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: SendKeys(String)
  nameWithType: Keyboard.SendKeys(String)
  fullName: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: SendKeys(String,Boolean)
  nameWithType: Keyboard.SendKeys(String,Boolean)
  fullName: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(String,Boolean)
- uid: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ShiftKeyDown
  nameWithType: Keyboard.ShiftKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
- uid: Microsoft.VisualBasic.Devices.Keyboard.#ctor*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: Keyboard
  nameWithType: Keyboard.Keyboard
- uid: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: AltKeyDown
  nameWithType: Keyboard.AltKeyDown
- uid: Microsoft.VisualBasic.Devices.Keyboard.CapsLock*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CapsLock
  nameWithType: Keyboard.CapsLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CtrlKeyDown
  nameWithType: Keyboard.CtrlKeyDown
- uid: Microsoft.VisualBasic.Devices.Keyboard.NumLock*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: NumLock
  nameWithType: Keyboard.NumLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ScrollLock
  nameWithType: Keyboard.ScrollLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: SendKeys
  nameWithType: Keyboard.SendKeys
- uid: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ShiftKeyDown
  nameWithType: Keyboard.ShiftKeyDown
