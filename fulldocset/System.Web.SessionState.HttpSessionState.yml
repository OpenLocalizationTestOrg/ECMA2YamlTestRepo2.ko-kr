### YamlMime:ManagedReference
items:
- uid: System.Web.SessionState.HttpSessionState
  id: HttpSessionState
  children:
  - System.Web.SessionState.HttpSessionState.Abandon
  - System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)
  - System.Web.SessionState.HttpSessionState.Clear
  - System.Web.SessionState.HttpSessionState.CodePage
  - System.Web.SessionState.HttpSessionState.Contents
  - System.Web.SessionState.HttpSessionState.CookieMode
  - System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)
  - System.Web.SessionState.HttpSessionState.Count
  - System.Web.SessionState.HttpSessionState.GetEnumerator
  - System.Web.SessionState.HttpSessionState.IsCookieless
  - System.Web.SessionState.HttpSessionState.IsNewSession
  - System.Web.SessionState.HttpSessionState.IsReadOnly
  - System.Web.SessionState.HttpSessionState.IsSynchronized
  - System.Web.SessionState.HttpSessionState.Item(System.Int32)
  - System.Web.SessionState.HttpSessionState.Item(System.String)
  - System.Web.SessionState.HttpSessionState.Keys
  - System.Web.SessionState.HttpSessionState.LCID
  - System.Web.SessionState.HttpSessionState.Mode
  - System.Web.SessionState.HttpSessionState.Remove(System.String)
  - System.Web.SessionState.HttpSessionState.RemoveAll
  - System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)
  - System.Web.SessionState.HttpSessionState.SessionID
  - System.Web.SessionState.HttpSessionState.StaticObjects
  - System.Web.SessionState.HttpSessionState.SyncRoot
  - System.Web.SessionState.HttpSessionState.Timeout
  langs:
  - csharp
  name: HttpSessionState
  nameWithType: HttpSessionState
  fullName: System.Web.SessionState.HttpSessionState
  type: Class
  summary: "세션 상태 값 및 세션 수준 설정 및 수명 관리 방법에 대 한 액세스를 제공합니다."
  remarks: "ASP.NET 세션 상태 관리를 사용 하면 여러 요청에 대해 고유한 브라우저 세션와 관련 된 정보를 저장할 수를 제공 합니다. 숫자 인덱스 또는 키 이름에 의해 참조 되는 값의 컬렉션을 저장할 수 있습니다. 세션 값과 기능에 대 한 액세스를 통해 액세스할 수 있는 HttpSessionState 클래스를 사용 하 여 사용할 수는 <xref:System.Web.HttpContext.Session%2A>현재 <xref:System.Web.HttpContext>, 또는 <xref:System.Web.UI.Page.Session%2A> <xref:System.Web.UI.Page>.</xref:System.Web.UI.Page> 속성</xref:System.Web.UI.Page.Session%2A> </xref:System.Web.HttpContext> </xref:System.Web.HttpContext.Session%2A>       세션 데이터는 고유 식별자를 사용 하 여 특정 브라우저 세션에 연결 됩니다. 기본적으로이 식별자는 브라우저에 만료 되지 않는 세션 쿠키에 저장 되지만 세션 식별자를 설정 하 여 URL에 저장 하도록 응용 프로그램을 구성할 수도 있습니다는 `cookieless` 특성을 `true` 또는 <xref:System.Web.HttpCookieMode>응용 프로그램 구성 요소에.</xref:System.Web.HttpCookieMode> 쿠키의 값을 지정 하 여 브라우저에서 지원 되는지 여부를 결정 하는 ASP.NET 점이 <xref:System.Web.HttpCookieMode>에 대 한는 `cookieless` 특성.</xref:System.Web.HttpCookieMode> 값을 지정 하 여 브라우저에 대해 쿠키 사용 되는지 여부를 결정 하는 ASP.NET을 할 수도 있습니다 <xref:System.Web.HttpCookieMode>에 대 한는 `cookieless` 특성.</xref:System.Web.HttpCookieMode> 쿠키가 지원 되는 경우 때 <xref:System.Web.HttpCookieMode>지정 되었거나 때 활성화 <xref:System.Web.HttpCookieMode>지정는 세션 식별자가 고, 그렇지 않으면 쿠키에 저장 되는 URL에 세션 식별자가 저장 됩니다.</xref:System.Web.HttpCookieMode> </xref:System.Web.HttpCookieMode>       첫 번째 요청 중 세션이 시작 되 고 세션 값은 <xref:System.Web.SessionState.HttpSessionState.Timeout%2A>속성 통과</xref:System.Web.SessionState.HttpSessionState.Timeout%2A> 에 지정 된 분 수 전에 브라우저에 대 한 새 요청이 상태로 유지 됩니다. 새 세션을 시작할 때, 세션 <xref:System.Web.SessionState.SessionStateModule.Start>이벤트가 발생 합니다.</xref:System.Web.SessionState.SessionStateModule.Start> 기본 세션 값을 설정 하는 등 세션의 시작 부분에 추가 작업을 수행 하려면이 이벤트를 사용할 수 있습니다. 세션 시간이 초과 하는 경우는 <xref:System.Web.SessionState.HttpSessionState.Abandon%2A>메서드는 ASP.NET 응용 프로그램이 종료 될 세션 또는 <xref:System.Web.SessionState.SessionStateModule.End>이벤트가 발생 합니다.</xref:System.Web.SessionState.SessionStateModule.End> </xref:System.Web.SessionState.HttpSessionState.Abandon%2A> 필요한 정리를 수행 하려면이 이벤트를 사용할 수 있습니다. <xref:System.Web.SessionState.SessionStateModule.End>이벤트가 발생할 경우에만 세션 상태 `mode` 를 <xref:System.Web.SessionState.SessionStateMode>.</xref:System.Web.SessionState.SessionStateMode> </xref:System.Web.SessionState.SessionStateModule.End>       성능을 향상 시키기 위해 쿠키를 사용 하는 세션 할당 하지 않으면 세션 저장소 실제로 데이터에 저장 될 때까지 <xref:System.Web.UI.Page.Session%2A>개체입니다.</xref:System.Web.UI.Page.Session%2A> 자세한 내용은 참조는 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>속성.</xref:System.Web.SessionState.HttpSessionState.SessionID%2A>       ASP.NET 응용 프로그램 경계를 넘어 세션 상태가 유지 되지 않습니다. 브라우저가 다른 응용 프로그램을 탐색 하는 경우 세션 정보는 새 응용 프로그램에 ´ ù.       세션 값은 기본적으로 웹 서버에서 메모리에 저장 됩니다. 또한 SQL Server 데이터베이스, ASP.NET 상태 서버에 또는 사용자 지정 서버에 세션 값을 저장할 수 있습니다. 이렇게 하면 ASP.NET 또는 IIS 프로세스 또는 ASP.NET 응용 프로그램이 다시 시작 하는 경우에서 세션 값을 유지 하 고 세션 값을 웹 팜의 모든 서버에서 사용할 수 있도록 합니다. 이 동작을 설정 하 여이 기능을 구성할는 `mode` 을 유효한 특성 <xref:System.Web.SessionState.SessionStateMode>응용 프로그램 구성 요소에 대 한 값.</xref:System.Web.SessionState.SessionStateMode> 자세한 내용은 참조 [세션 상태 모드](~/add/includes/ajax-current-ext-md.md)합니다.       응용 프로그램 상태를 포함 하는 세션 상태에 대 한 대안 ( <xref:System.Web.HttpApplication.Application%2A>속성 참조) 및 ASP.NET 캐시 (참조 <xref:System.Web.Caching>네임 스페이스)은 ASP.NET 응용 프로그램의 모든 사용자가 액세스할 수 있는 변수를 저장 하 ASP.NET 프로필 (참조 <xref:System.Web.Profile>네임 스페이스), 만료 하지 않고 데이터 저장소에 사용자 값을 유지 하는 시간 제한;를 사용 하 여 <xref:System.Web.UI.Control.ViewState%2A>;에서 컨트롤 값을 유지 하는 ASP.NET <xref:System.Web.UI.WebControls?displayProperty=fullName>, <xref:System.Web.HttpResponse.Cookies%2A>; <xref:System.Web.HttpRequest.QueryString%2A>HTTP에서 사용할 수 있는 HTML 폼에 필드 및 속성; `POST` 를 사용 하는 <xref:System.Web.HttpRequest.Form%2A>컬렉션.</xref:System.Web.HttpRequest.Form%2A> </xref:System.Web.HttpRequest.QueryString%2A> </xref:System.Web.HttpResponse.Cookies%2A>  </xref:System.Web.UI.WebControls?displayProperty=fullName></xref:System.Web.UI.Control.ViewState%2A> </xref:System.Web.Profile> </xref:System.Web.Caching> </xref:System.Web.HttpApplication.Application%2A> 세션 상태 및 기타 상태 관리 방법 간의 차이점에 자세한 내용은 참조 하십시오. [유용한](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example sets and retrieves values from session state.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[HttpSessionState#30](~/add/codesnippet/csharp/t-system.web.sessionstat_5_1.aspx)]\n [!code-vb[HttpSessionState#30](~/add/codesnippet/visualbasic/t-system.web.sessionstat_5_1.aspx)]"
  syntax:
    content: 'public sealed class HttpSessionState : System.Collections.ICollection'
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Abandon
  id: Abandon
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Abandon()
  nameWithType: HttpSessionState.Abandon()
  fullName: System.Web.SessionState.HttpSessionState.Abandon()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "현재 세션을 취소 합니다."
  remarks: "중단 메서드가 호출 되 면 현재 세션은 더 이상 유효 하 고 새 세션을 시작할 수 없습니다. 중단 원인은 <xref:System.Web.SessionState.SessionStateModule.End>이벤트를 발생 합니다.</xref:System.Web.SessionState.SessionStateModule.End> 새 <xref:System.Web.SessionState.SessionStateModule.Start>다음 요청에서 이벤트를 발생 합니다.</xref:System.Web.SessionState.SessionStateModule.Start>       중단 된 레코드나 만료 된 세션에 대 한 세션 식별자는 기본적으로 재활용 됩니다. 즉, 한 요청이 중단 됨 또는 만료 된 세션에 대 한 세션 식별자를 포함 하는 경우 새 세션을 동일한 세션 식별자를 사용 하 여 시작 됩니다. 설정 하 여 해제할 수 있습니다 `regenerateExpiredSessionId` 에 구성 요소의 특성 `true`합니다. 자세한 내용은 참조 [세션 식별자](~/add/includes/ajax-current-ext-md.md)합니다.       <xref:System.Web.SessionState.SessionStateModule.End>이벤트는 지원 경우에만 <xref:System.Web.SessionState.HttpSessionState.Mode%2A> <xref:System.Web.SessionState.SessionStateMode>.</xref:System.Web.SessionState.SessionStateMode> 속성이</xref:System.Web.SessionState.HttpSessionState.Mode%2A> </xref:System.Web.SessionState.SessionStateModule.End>"
  syntax:
    content: public void Abandon ();
    parameters: []
  overload: System.Web.SessionState.HttpSessionState.Abandon*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)
  id: Add(System.String,System.Object)
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Add(String,Object)
  nameWithType: HttpSessionState.Add(String,Object)
  fullName: System.Web.SessionState.HttpSessionState.Add(String,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "세션 상태 컬렉션에 새 항목을 추가합니다."
  remarks: "경우는 `name` 기존 세션 상태 항목 매개 변수 참조, 기존 항목을 지정 된 덮어씁니다 `value`합니다."
  example:
  - "The following example shows how to store values in session state by using the Add method. It also shows how to remove values in session state by using the <xref:System.Web.SessionState.HttpSessionState.Remove%2A> method. A <xref:System.Web.UI.WebControls.Repeater> control is used to display the contents session state on the Web page. The <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> method is used to iterate through the session-state collection and populate the <xref:System.Web.UI.WebControls.Repeater> control.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[HttpSessionState#13](~/add/codesnippet/csharp/m-system.web.sessionstat_16_1.aspx)]\n [!code-vb[HttpSessionState#13](~/add/codesnippet/visualbasic/m-system.web.sessionstat_16_1.aspx)]"
  syntax:
    content: public void Add (string name, object value);
    parameters:
    - id: name
      type: System.String
      description: "세션 상태 컬렉션에 추가할 항목의 이름입니다."
    - id: value
      type: System.Object
      description: "세션 상태 컬렉션에 추가할 항목의 값입니다."
  overload: System.Web.SessionState.HttpSessionState.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Clear
  id: Clear
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Clear()
  nameWithType: HttpSessionState.Clear()
  fullName: System.Web.SessionState.HttpSessionState.Clear()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "세션 상태 컬렉션에서 모든 키와 값을 제거합니다."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Web.SessionState.HttpSessionState.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.CodePage
  id: CodePage
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: CodePage
  nameWithType: HttpSessionState.CodePage
  fullName: System.Web.SessionState.HttpSessionState.CodePage
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "현재 세션에 대 한 문자 집합 식별자를 가져오거나 설정 합니다."
  remarks: "문자 집합 (코드 페이지)는 문자 값을 결정 하는 멀티 바이트 문자 데이터를 해석 하 고 정렬 순서에 사용 됩니다. 코드 페이지 설정이 멀티 바이트 문자가 아닌 데이터를 유니코드 문자 데이터에만 적용 됩니다.       이 <xref:System.Web.SessionState.IHttpSessionState.CodePage%2A>속성은 이전 버전 ASP와의 호환성을 위해 제공 됩니다.</xref:System.Web.SessionState.IHttpSessionState.CodePage%2A> ASP 페이지와 이전 버전과 호환성을 유지 해야 하는 경우 사용 하 여는 <xref:System.Web.HttpResponse.ContentEncoding%2A>속성 대신.</xref:System.Web.HttpResponse.ContentEncoding%2A>"
  syntax:
    content: public int CodePage { get; set; }
    return:
      type: System.Int32
      description: "현재 세션에 대 한 문자 집합 식별자입니다."
  overload: System.Web.SessionState.HttpSessionState.CodePage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Contents
  id: Contents
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Contents
  nameWithType: HttpSessionState.Contents
  fullName: System.Web.SessionState.HttpSessionState.Contents
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "현재 세션 상태 개체에 대 한 참조를 가져옵니다."
  remarks: "내용 속성은 이전 버전 ASP와의 호환성을 위해 제공 됩니다."
  example:
  - "The following code example lists the item names and values in the Contents property.  \n  \n [!code-cs[HttpSessionState#9](~/add/codesnippet/csharp/p-system.web.sessionstat_8_1.aspx)]\n [!code-vb[HttpSessionState#9](~/add/codesnippet/visualbasic/p-system.web.sessionstat_8_1.aspx)]"
  syntax:
    content: public System.Web.SessionState.HttpSessionState Contents { get; }
    return:
      type: System.Web.SessionState.HttpSessionState
      description: "현재 <xref href=&quot;System.Web.SessionState.HttpSessionState&quot;> </xref>합니다."
  overload: System.Web.SessionState.HttpSessionState.Contents*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.CookieMode
  id: CookieMode
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: CookieMode
  nameWithType: HttpSessionState.CookieMode
  fullName: System.Web.SessionState.HttpSessionState.CookieMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "응용 프로그램 쿠키 없는 세션을 사용 하도록 구성 되어 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "때 <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A>은 `true`, CookieMode 속성 반환 <xref:System.Web.HttpCookieMode>CookieMode 속성 반환 <xref:System.Web.HttpCookieMode>.</xref:System.Web.HttpCookieMode> </xref:System.Web.HttpCookieMode> </xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A>"
  example:
  - "The following code example sets the `cookieless` session attribute to `true` in the Web.config file. For this sample application configuration, the CookieMode property would return <xref:System.Web.HttpCookieMode>.  \n  \n```  \n<configuration>  \n  <system.web>  \n    <sessionState   \n      mode=\"InProc\"  \n      cookieless=\"true\"  \n      timeout=\"30\" />  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: public System.Web.HttpCookieMode CookieMode { get; }
    return:
      type: System.Web.HttpCookieMode
      description: "중 하나는 <xref href=&quot;System.Web.HttpCookieMode&quot;> </xref> 쿠키 없는 세션에 대 한 응용 프로그램을 구성할 지 여부를 나타내는 값입니다. 기본값은 <xref href=&quot;System.Web.HttpCookieMode&quot;> </xref>합니다."
  overload: System.Web.SessionState.HttpSessionState.CookieMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: HttpSessionState.CopyTo(Array,Int32)
  fullName: System.Web.SessionState.HttpSessionState.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "배열의 지정한 인덱스에서 시작 하는&1; 차원 배열에 세션 상태 값의 컬렉션을 복사 합니다."
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "<xref:System.Array>세션 값을 받는.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "인덱스는&0;부터 시작 `array` 에서 복사가 시작 되는 합니다."
  overload: System.Web.SessionState.HttpSessionState.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Count
  id: Count
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Count
  nameWithType: HttpSessionState.Count
  fullName: System.Web.SessionState.HttpSessionState.Count
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "세션 상태 컬렉션의 항목 수를 가져옵니다."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "컬렉션에 있는 항목의 수입니다."
  overload: System.Web.SessionState.HttpSessionState.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.GetEnumerator
  id: GetEnumerator
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: HttpSessionState.GetEnumerator()
  fullName: System.Web.SessionState.HttpSessionState.GetEnumerator()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "현재 세션의 모든 세션 상태 변수 이름을 읽는 데 사용할 수 있는 열거자를 반환 합니다."
  remarks: ''
  example:
  - "The following example shows how to store values in session state by using the <xref:System.Web.SessionState.HttpSessionState.Add%2A> method. It also shows how to remove values in session state by using the <xref:System.Web.SessionState.HttpSessionState.Remove%2A> method. A <xref:System.Web.UI.WebControls.Repeater> control is used to display the contents of session state on the Web page. The GetEnumerator method is used to iterate through the session-state collection and populate the <xref:System.Web.UI.WebControls.Repeater> control.  \n  \n [!code-cs[HttpSessionState#13](~/add/codesnippet/csharp/m-system.web.sessionstat_14_1.aspx)]\n [!code-vb[HttpSessionState#13](~/add/codesnippet/visualbasic/m-system.web.sessionstat_14_1.aspx)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>세션 상태 컬렉션의 변수 이름을 반복할 수 있는.</xref:System.Collections.IEnumerator>"
  overload: System.Web.SessionState.HttpSessionState.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.IsCookieless
  id: IsCookieless
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: IsCookieless
  nameWithType: HttpSessionState.IsCookieless
  fullName: System.Web.SessionState.HttpSessionState.IsCookieless
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "세션 ID에 HTTP 쿠키에 저장 된 URL에 포함 여부를 나타내는 값을 가져옵니다."
  remarks: "ASP.NET 각 브라우저 세션을 고유 하 게 식별합니다. 기본적으로 세션에 대 한 고유 식별자는 브라우저에서 만료 되지 않는 세션 쿠키에 저장 됩니다. 세션 식별자에에서 저장 되지 쿠키를 설정 하 여 지정할 수는 `cookieless` 특성을 `true` 구성 요소에 있습니다.      > [!NOTE] > 응용 프로그램의 보안을 강화 하려면 응용 프로그램 호출 해야 할 사용자를 로그 아웃을 허용 해야는 <xref:System.Web.SessionState.HttpSessionState.Abandon%2A>메서드.</xref:System.Web.SessionState.HttpSessionState.Abandon%2A> 이렇게 하면 사용자에 대 한 세션에 저장 된 개인 데이터를 검색할 URL에 고유 식별자를 사용 하 여 원치 않는 소스 가능성이 줄어듭니다.       ASP.NET은 페이지의 URL에는 고유한 세션 ID를 자동으로 삽입 하 여 쿠키 없는 세션 상태를 유지 합니다. 다음 URL에는 고유한 세션 ID lit3py55t21z5v55vlm25s55 포함 하도록 ASP.NET에서 수정 했습니다. 예를 들어: ```   http://www.example.com/(S(4danlfat035muve4g0mvgfrr))/orderform.aspx   ``` ASP.NET 각 페이지를 브라우저에 보내기 전에 바로 링크에 세션 ID 값을 포함 하 여 요청된 되는 모든 페이지에 포함 된 링크를 수정 합니다. 사이트에서 제공 하는 링크의 경로 따라 이동으로 세션 상태가 유지 됩니다. 그러나 사용자 에이전트에는 URL 다시 작성, 하는 경우 세션 상태 인스턴스 손실 됩니다.       세션 ID는 응용 프로그램 이름 뒤에 오는 슬래시 뒤와 나머지 모든 파일 또는 가상 디렉터리 식별자 앞 URL에 포함 됩니다. 이렇게 하면 사용 하기 전에 응용 프로그램 이름을 확인 하기 위해 ASP.NET에서 <xref:System.Web.SessionState.SessionStateModule>요청에.</xref:System.Web.SessionState.SessionStateModule>       쿠키가 없는 세션에서 사용 되는 세션 식별자는 기본적으로 재활용 됩니다. 즉, 만료 된 세션 ID로 요청이 하는 요청과 함께 제공 된 세션 ID를 사용 하 여 새 세션이 시작 됩니다. 이 동작은 검색 엔진 또는 기타 프로그램을 통해 아마도 여러 브라우저에서 쿠키 없는 세션 ID를 포함 하는 링크를 공유 세션 데이터의 원치 않는 공유 될 수 있습니다. 세션 데이터를 여러 클라이언트에서 세션 식별자를 재활용을 비활성화 하 여 공유할의 가능성을 줄일 수 있습니다. 이 위해 설정 된 `regenerateExpiredSessionId` 에 구성 요소의 특성 `true`합니다. 이렇게 하면 만료 된 세션 id는 쿠키 없는 세션 요청이 만들어질 때 생성 되 고 새 세션 id 만료 된 세션 ID로 만든 요청은 HTTP를 사용 하는 경우 `POST` 메서드를 다음 게시 된 모든 데이터를 잃게 됩니다 `regenerateExpiredSessionId` 은 `true`, ASP.NET에서 브라우저 URL에서 새 세션 식별자를 갖고 있는지 확인 하려면 리디렉션을 수행 합니다.      > [!NOTE] > 설정는 `regenerateExpiredSessionId` 특성을 `true` 가능성을 줄여 줍니다 세션 데이터의 원치 않는 공유를 가져와서 다른 사용자의 세션에 대 한 액세스를 확보 원하지 않는 소스에 대해 보호 하지 않습니다는 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>값과 서버에 대 한 요청에 포함 합니다.</xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 세션 상태의 개인 또는 중요 한 정보를 저장 하는 경우 것이 좋습니다 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.</xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 를 포함 하는 서버와 브라우저 간의 모든 통신을 암호화 하려면 SSL을 사용 하는"
  example:
  - "The following code example sets the `cookieless` session attribute to true in the Web.config file.  \n  \n```  \n<configuration>  \n  <system.web>  \n    <sessionState   \n      mode=\"InProc\"  \n      cookieless=\"true\"  \n      regenerateExpiredSessionId=\"true\"  \n      timeout=\"30\" />  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: public bool IsCookieless { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>세션은 URL에 포함 되어 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.SessionState.HttpSessionState.IsCookieless*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.IsNewSession
  id: IsNewSession
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: IsNewSession
  nameWithType: HttpSessionState.IsNewSession
  fullName: System.Web.SessionState.HttpSessionState.IsNewSession
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "현재 요청으로 세션이 만들어졌는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public bool IsNewSession { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 요청; 사용 세션을 만든 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.SessionState.HttpSessionState.IsNewSession*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.IsReadOnly
  id: IsReadOnly
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: HttpSessionState.IsReadOnly
  fullName: System.Web.SessionState.HttpSessionState.IsReadOnly
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "세션이 읽기 전용인 지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>읽기 전용 이면 인 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.SessionState.HttpSessionState.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.IsSynchronized
  id: IsSynchronized
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: HttpSessionState.IsSynchronized
  fullName: System.Web.SessionState.HttpSessionState.IsSynchronized
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "세션 상태 값의 컬렉션에 대 한 액세스가 동기화 되어 있는지 여부를 나타내는 값을 (스레드로부터 안전함)을 가져옵니다."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>컬렉션에 대 한 액세스가 경우 동기화 (스레드로부터 안전함). 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.SessionState.HttpSessionState.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: HttpSessionState.Item(Int32)
  fullName: System.Web.SessionState.HttpSessionState.Item(Int32)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "숫자 인덱스로 세션 값을 가져오거나 설정 합니다."
  syntax:
    content: public object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "세션 값의 숫자 인덱스입니다."
    return:
      type: System.Object
      description: "지정된 된 인덱스에 저장 된 세션 상태 값 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 항목이 존재 하지 않는 경우."
  overload: System.Web.SessionState.HttpSessionState.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Item(System.String)
  id: Item(System.String)
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Item(String)
  nameWithType: HttpSessionState.Item(String)
  fullName: System.Web.SessionState.HttpSessionState.Item(String)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "이름으로 세션 값을 가져오거나 설정 합니다."
  syntax:
    content: public object this[string name] { get; set; }
    parameters:
    - id: name
      type: System.String
      description: "세션 값의 키 이름입니다."
    return:
      type: System.Object
      description: "지정한 이름 가진 세션 상태 값 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 항목이 존재 하지 않는 경우."
  overload: System.Web.SessionState.HttpSessionState.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Keys
  id: Keys
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Keys
  nameWithType: HttpSessionState.Keys
  fullName: System.Web.SessionState.HttpSessionState.Keys
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "세션 상태 컬렉션에 저장 된 모든 값에 대 한 키의 컬렉션을 가져옵니다."
  syntax:
    content: public System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys { get; }
    return:
      type: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
      description: "<xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>모든 세션 키를 포함 하는.</xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>"
  overload: System.Web.SessionState.HttpSessionState.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.LCID
  id: LCID
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: LCID
  nameWithType: HttpSessionState.LCID
  fullName: System.Web.SessionState.HttpSessionState.LCID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "현재 세션의 로캘 식별자 (LCID)를 가져오거나 설정 합니다."
  remarks: "LCID 속성은 이전 버전 ASP와의 호환성을 위해 제공 됩니다. ASP 페이지와 이전 버전과 호환성을 유지 해야 하는 경우 사용 하 여는 <xref:System.Globalization.CultureInfo.LCID%2A>속성 대신.</xref:System.Globalization.CultureInfo.LCID%2A>       ASP.NET 세션 상태에서 로캘 식별자를 저장 하지 않습니다. LCID 속성 액세스는 <xref:System.Globalization.CultureInfo.LCID%2A>속성의 식별자를 설정 하 고 가져오는.</xref:System.Globalization.CultureInfo.LCID%2A>"
  syntax:
    content: public int LCID { get; set; }
    return:
      type: System.Int32
      description: "A <xref:System.Globalization.CultureInfo>현재 세션의 culture를 지정 하는 인스턴스가.</xref:System.Globalization.CultureInfo>"
  overload: System.Web.SessionState.HttpSessionState.LCID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Mode
  id: Mode
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Mode
  nameWithType: HttpSessionState.Mode
  fullName: System.Web.SessionState.HttpSessionState.Mode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "현재 세션 상태 모드를 가져옵니다."
  remarks: "에 대 한 서버를 구성 하는 방법에 대 한 내용은 <xref:System.Web.SessionState.SessionStateMode>또는 <xref:System.Web.SessionState.SessionStateMode>세션 상태 저장소 참조 [ASP.NET 세션 상태 개요](~/add/includes/ajax-current-ext-md.md).</xref:System.Web.SessionState.SessionStateMode> </xref:System.Web.SessionState.SessionStateMode>"
  example:
  - "The following code example sets the `mode` session attribute to <xref:System.Web.SessionState.SessionStateMode> in the Web.config file. For SQL Server session mode, the `sqlConnectionString` attribute is also required.  \n  \n```  \n<configuration>  \n  <system.web>  \n    <sessionState   \n      mode=\"SQLServer\"  \n      sqlConnectionString=\"Data Source=localhost;Integrated Security=SSPI\"  \n      cookieless=\"true\"  \n      timeout=\"30\" />  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: public System.Web.SessionState.SessionStateMode Mode { get; }
    return:
      type: System.Web.SessionState.SessionStateMode
      description: "중 하나는 <xref href=&quot;System.Web.SessionState.SessionStateMode&quot;> </xref> 값입니다."
  overload: System.Web.SessionState.HttpSessionState.Mode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Remove(System.String)
  id: Remove(System.String)
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Remove(String)
  nameWithType: HttpSessionState.Remove(String)
  fullName: System.Web.SessionState.HttpSessionState.Remove(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "세션 상태 컬렉션에서 항목을 삭제 합니다."
  remarks: "세션 상태 컬렉션에 지정 된 요소가 없는 경우 `name`, 컬렉션 그대로 유지 됩니다. 예외가 throw 되지 않습니다."
  example:
  - "The following example shows how to store values in session state by using the <xref:System.Web.SessionState.HttpSessionState.Add%2A> method. It also shows how to remove values in session state by using the Remove method. A <xref:System.Web.UI.WebControls.Repeater> control is used to display the contents of session state on the Web page. The <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> method is used to iterate through the session-state collection and populate the <xref:System.Web.UI.WebControls.Repeater> control.  \n  \n [!code-cs[HttpSessionState#13](~/add/codesnippet/csharp/m-system.web.sessionstat_6_1.aspx)]\n [!code-vb[HttpSessionState#13](~/add/codesnippet/visualbasic/m-system.web.sessionstat_6_1.aspx)]"
  syntax:
    content: public void Remove (string name);
    parameters:
    - id: name
      type: System.String
      description: "세션 상태 컬렉션에서 삭제할 항목의 이름입니다."
  overload: System.Web.SessionState.HttpSessionState.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.RemoveAll
  id: RemoveAll
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: RemoveAll()
  nameWithType: HttpSessionState.RemoveAll()
  fullName: System.Web.SessionState.HttpSessionState.RemoveAll()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "세션 상태 컬렉션에서 모든 키와 값을 제거합니다."
  remarks: "RemoveAll <xref:System.Web.SessionState.HttpSessionState.Clear%2A>.</xref:System.Web.SessionState.HttpSessionState.Clear%2A> 동일한 기능을 수행합니다."
  syntax:
    content: public void RemoveAll ();
    parameters: []
  overload: System.Web.SessionState.HttpSessionState.RemoveAll*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: HttpSessionState.RemoveAt(Int32)
  fullName: System.Web.SessionState.HttpSessionState.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "세션 상태 컬렉션에서 지정된 된 인덱스에 항목을 삭제 합니다."
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "세션 상태 컬렉션에서 제거할 항목의 인덱스입니다."
  overload: System.Web.SessionState.HttpSessionState.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero.  \n  \n \\- or -  \n  \n <code>index</code> is equal to or greater than <xref:System.Web.SessionState.HttpSessionState.Count*>."
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.SessionID
  id: SessionID
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: SessionID
  nameWithType: HttpSessionState.SessionID
  fullName: System.Web.SessionState.HttpSessionState.SessionID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "세션에 대 한 고유 식별자를 가져옵니다."
  remarks: "SessionID 속성은 고유 하 게 식별 브라우저는 서버에서 세션 데이터와 함께 사용 됩니다. 세션 Id 값이 임의로 ASP.NET에서 생성 하 고 브라우저에서 만료 되지 않는 세션 쿠키에 저장 합니다. 세션 Id 값은 각 요청에 ASP.NET 응용 프로그램 쿠키에 전송 됩니다.       ASP.NET 응용 프로그램에서 쿠키를 사용 하지 않도록 설정 하 고는 여전히 확인 하려는 경우 세션 상태, 세션 식별자를 설정 하 여 쿠키 대신 URL에 저장 하도록 응용 프로그램을 구성할 수 있습니다는 `cookieless` 구성 요소의 특성 `true`, 또는 <xref:System.Web.HttpCookieMode>, 응용 프로그램에 대 한 Web.config 파일에.</xref:System.Web.HttpCookieMode> 쿠키의 값을 지정 하 여 브라우저에서 지원 되는지 여부를 결정 하는 ASP.NET 점이 <xref:System.Web.HttpCookieMode>에 대 한는 `cookieless` 특성.</xref:System.Web.HttpCookieMode> 값을 지정 하 여 브라우저에 대해 쿠키 사용 되는지 여부를 결정 하는 ASP.NET을 할 수도 있습니다 <xref:System.Web.HttpCookieMode>에 대 한는 `cookieless` 특성.</xref:System.Web.HttpCookieMode> 쿠키가 지원 되는 경우 때 <xref:System.Web.HttpCookieMode>지정 되었거나 때 활성화 <xref:System.Web.HttpCookieMode>지정는 세션 식별자가 고, 그렇지 않으면 쿠키에 저장 되는 URL에 세션 식별자가 저장 됩니다.</xref:System.Web.HttpCookieMode> </xref:System.Web.HttpCookieMode> 자세한 내용은 참조는 <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A>속성.</xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A>       SessionID는 서버와 브라우저 쿠키 또는 URL에서 일반 텍스트로 전송 됩니다. 결과적으로, 원하지 않는 소스 세션 Id 값을 가져오는 서버에 대 한 요청에 포함 하 여 다른 사용자의 세션에 대 한 액세스를 얻을 수 있습니다. 세션 상태의 개인 또는 중요 한 정보를 저장 하는 경우 브라우저와의 세션 Id를 포함 하는 서버 간의 모든 통신을 암호화 하려면 SSL을 사용 하는 것이 좋습니다.       ASP.NET 될 때까지 세션 데이터에 대 한 저장소 할당 하지 않고 쿠키 기반 세션 상태를 사용할 때의 <xref:System.Web.UI.Page.Session%2A>개체가 사용 됩니다.</xref:System.Web.UI.Page.Session%2A> 결과적으로, 새 세션 ID는 세션 개체에 액세스할 때까지 각 페이지 요청에 대해 생성 됩니다. 전체 세션에 대 한 정적 세션 ID를 필요로 하는 응용 프로그램을 구현 하거나 수는 `Session_Start` 응용 프로그램의 Global.asax 파일 및 저장소 데이터에 대 한 메서드는 <xref:System.Web.UI.Page.Session%2A>세션 ID를 수정 하려면 개체 또는 응용 프로그램의 다른 부분에 코드를 사용 하 여 명시적으로 데이터를 저장할 수 있습니다는 <xref:System.Web.UI.Page.Session%2A>개체입니다.</xref:System.Web.UI.Page.Session%2A> </xref:System.Web.UI.Page.Session%2A>       응용 프로그램에서 쿠키 없는 세션 상태를 사용 하는 경우 세션 ID는 첫 번째 페이지 보기에 생성 되며 전체 세션에 대 한 유지 관리 됩니다."
  example:
  - "The following code example shows a Web.config file that configures session state to use cookieless session identifiers. For more information, see the <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> property.  \n  \n```  \n<configuration>  \n  <system.web>  \n    <sessionState   \n      cookieless=\"true\"  \n      regenerateExpiredSessionId=\"true\"  \n      timeout=\"30\" />  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: public string SessionID { get; }
    return:
      type: System.String
      description: "고유 세션 식별자입니다."
  overload: System.Web.SessionState.HttpSessionState.SessionID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.StaticObjects
  id: StaticObjects
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: StaticObjects
  nameWithType: HttpSessionState.StaticObjects
  fullName: System.Web.SessionState.HttpSessionState.StaticObjects
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "으로 선언 된 개체의 컬렉션을 가져옵니다 <xref uid=&quot;langword_csharp_&lt;object Runat=&quot;Server&quot; Scope=&quot;Session&quot;/&gt;&quot; name=&quot;&lt;object Runat=&quot;Server&quot; Scope=&quot;Session&quot;/&gt;&quot; href=&quot;&quot;> </xref> Global.asax는 ASP.NET 응용 프로그램 파일 내에 태그입니다."
  remarks: "페이지에 개체 serialization을 지원 하지 않는 경우 및 <xref:System.Web.SessionState.HttpSessionState.Mode%2A>도 독립 프로세스 (<xref:System.Web.SessionState.SessionStateMode> 또는 <xref:System.Web.SessionState.SessionStateMode>), 개체가 생성 되지 것입니다 및이 컬렉션에 추가 되지 것입니다.</xref:System.Web.SessionState.SessionStateMode> </xref:System.Web.SessionState.SessionStateMode> </xref:System.Web.SessionState.HttpSessionState.Mode%2A>       StaticObjects 속성은 이전 버전 ASP와의 호환성을 위해 제공 됩니다."
  example:
  - "The following code example lists the `id` and object type of the objects in the StaticObjects collection.  \n  \n [!code-cs[HttpSessionState#10](~/add/codesnippet/csharp/p-system.web.sessionstat_9_1.aspx)]\n [!code-vb[HttpSessionState#10](~/add/codesnippet/visualbasic/p-system.web.sessionstat_9_1.aspx)]"
  syntax:
    content: public System.Web.HttpStaticObjectsCollection StaticObjects { get; }
    return:
      type: System.Web.HttpStaticObjectsCollection
      description: "<xref href=&quot;System.Web.HttpStaticObjectsCollection&quot;> </xref> Global.asax 파일에 선언 된 개체가 들어 있는입니다."
  overload: System.Web.SessionState.HttpSessionState.StaticObjects*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.SyncRoot
  id: SyncRoot
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: SyncRoot
  nameWithType: HttpSessionState.SyncRoot
  fullName: System.Web.SessionState.HttpSessionState.SyncRoot
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "세션 상태 값의 컬렉션에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체를 가져옵니다."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "컬렉션에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체입니다."
  overload: System.Web.SessionState.HttpSessionState.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Timeout
  id: Timeout
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Timeout
  nameWithType: HttpSessionState.Timeout
  fullName: System.Web.SessionState.HttpSessionState.Timeout
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "가져오고 시간, 세션 상태 공급자가 세션을 종료 하기 전에 요청 사이 허용 되는 분 단위로 설정 합니다."
  remarks: "사용 하 여 응용 프로그램에 대 한 Web.config 파일에서 Timeout 속성을 설정할 수 있습니다는 `timeout` 특성 구성 요소 또는 사용자의 응용 프로그램 코드를 사용 하 여 직접 Timeout 속성 값을 설정할 수 있습니다.       Timeout 속성 525, 600 분 (1 년) 보다 큰 값으로 설정할 수 없습니다. 기본값은 20 분입니다."
  example:
  - "The following code example sets the `timeout` session attribute to 30 minutes in the Web.config file.  \n  \n```  \n<configuration>  \n  <system.web>  \n    <sessionState   \n      mode=\"InProc\"  \n      cookieless=\"true\"  \n      timeout=\"30\" />  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: public int Timeout { get; set; }
    return:
      type: System.Int32
      description: "제한 시간 (분)에서입니다."
  overload: System.Web.SessionState.HttpSessionState.Timeout*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Web.SessionState.HttpSessionState.Abandon
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Abandon()
  nameWithType: HttpSessionState.Abandon()
  fullName: System.Web.SessionState.HttpSessionState.Abandon()
- uid: System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Add(String,Object)
  nameWithType: HttpSessionState.Add(String,Object)
  fullName: System.Web.SessionState.HttpSessionState.Add(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.SessionState.HttpSessionState.Clear
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Clear()
  nameWithType: HttpSessionState.Clear()
  fullName: System.Web.SessionState.HttpSessionState.Clear()
- uid: System.Web.SessionState.HttpSessionState.CodePage
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: CodePage
  nameWithType: HttpSessionState.CodePage
  fullName: System.Web.SessionState.HttpSessionState.CodePage
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.SessionState.HttpSessionState.Contents
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Contents
  nameWithType: HttpSessionState.Contents
  fullName: System.Web.SessionState.HttpSessionState.Contents
- uid: System.Web.SessionState.HttpSessionState
  parent: System.Web.SessionState
  isExternal: false
  name: HttpSessionState
  nameWithType: HttpSessionState
  fullName: System.Web.SessionState.HttpSessionState
- uid: System.Web.SessionState.HttpSessionState.CookieMode
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: CookieMode
  nameWithType: HttpSessionState.CookieMode
  fullName: System.Web.SessionState.HttpSessionState.CookieMode
- uid: System.Web.HttpCookieMode
  parent: System.Web
  isExternal: false
  name: HttpCookieMode
  nameWithType: HttpCookieMode
  fullName: System.Web.HttpCookieMode
- uid: System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: HttpSessionState.CopyTo(Array,Int32)
  fullName: System.Web.SessionState.HttpSessionState.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Web.SessionState.HttpSessionState.Count
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Count
  nameWithType: HttpSessionState.Count
  fullName: System.Web.SessionState.HttpSessionState.Count
- uid: System.Web.SessionState.HttpSessionState.GetEnumerator
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: GetEnumerator()
  nameWithType: HttpSessionState.GetEnumerator()
  fullName: System.Web.SessionState.HttpSessionState.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Web.SessionState.HttpSessionState.IsCookieless
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsCookieless
  nameWithType: HttpSessionState.IsCookieless
  fullName: System.Web.SessionState.HttpSessionState.IsCookieless
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.SessionState.HttpSessionState.IsNewSession
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsNewSession
  nameWithType: HttpSessionState.IsNewSession
  fullName: System.Web.SessionState.HttpSessionState.IsNewSession
- uid: System.Web.SessionState.HttpSessionState.IsReadOnly
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsReadOnly
  nameWithType: HttpSessionState.IsReadOnly
  fullName: System.Web.SessionState.HttpSessionState.IsReadOnly
- uid: System.Web.SessionState.HttpSessionState.IsSynchronized
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsSynchronized
  nameWithType: HttpSessionState.IsSynchronized
  fullName: System.Web.SessionState.HttpSessionState.IsSynchronized
- uid: System.Web.SessionState.HttpSessionState.Item(System.Int32)
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Item(Int32)
  nameWithType: HttpSessionState.Item(Int32)
  fullName: System.Web.SessionState.HttpSessionState.Item(Int32)
- uid: System.Web.SessionState.HttpSessionState.Item(System.String)
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Item(String)
  nameWithType: HttpSessionState.Item(String)
  fullName: System.Web.SessionState.HttpSessionState.Item(String)
- uid: System.Web.SessionState.HttpSessionState.Keys
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Keys
  nameWithType: HttpSessionState.Keys
  fullName: System.Web.SessionState.HttpSessionState.Keys
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameObjectCollectionBase+KeysCollection
  nameWithType: NameObjectCollectionBase+KeysCollection
  fullName: System.Collections.Specialized.NameObjectCollectionBase+KeysCollection
- uid: System.Web.SessionState.HttpSessionState.LCID
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: LCID
  nameWithType: HttpSessionState.LCID
  fullName: System.Web.SessionState.HttpSessionState.LCID
- uid: System.Web.SessionState.HttpSessionState.Mode
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Mode
  nameWithType: HttpSessionState.Mode
  fullName: System.Web.SessionState.HttpSessionState.Mode
- uid: System.Web.SessionState.SessionStateMode
  parent: System.Web.SessionState
  isExternal: false
  name: SessionStateMode
  nameWithType: SessionStateMode
  fullName: System.Web.SessionState.SessionStateMode
- uid: System.Web.SessionState.HttpSessionState.Remove(System.String)
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Remove(String)
  nameWithType: HttpSessionState.Remove(String)
  fullName: System.Web.SessionState.HttpSessionState.Remove(String)
- uid: System.Web.SessionState.HttpSessionState.RemoveAll
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: RemoveAll()
  nameWithType: HttpSessionState.RemoveAll()
  fullName: System.Web.SessionState.HttpSessionState.RemoveAll()
- uid: System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: HttpSessionState.RemoveAt(Int32)
  fullName: System.Web.SessionState.HttpSessionState.RemoveAt(Int32)
- uid: System.Web.SessionState.HttpSessionState.SessionID
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: SessionID
  nameWithType: HttpSessionState.SessionID
  fullName: System.Web.SessionState.HttpSessionState.SessionID
- uid: System.Web.SessionState.HttpSessionState.StaticObjects
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: StaticObjects
  nameWithType: HttpSessionState.StaticObjects
  fullName: System.Web.SessionState.HttpSessionState.StaticObjects
- uid: System.Web.HttpStaticObjectsCollection
  parent: System.Web
  isExternal: false
  name: HttpStaticObjectsCollection
  nameWithType: HttpStaticObjectsCollection
  fullName: System.Web.HttpStaticObjectsCollection
- uid: System.Web.SessionState.HttpSessionState.SyncRoot
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: SyncRoot
  nameWithType: HttpSessionState.SyncRoot
  fullName: System.Web.SessionState.HttpSessionState.SyncRoot
- uid: System.Web.SessionState.HttpSessionState.Timeout
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Timeout
  nameWithType: HttpSessionState.Timeout
  fullName: System.Web.SessionState.HttpSessionState.Timeout
- uid: System.Web.SessionState.HttpSessionState.Abandon*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Abandon
  nameWithType: HttpSessionState.Abandon
- uid: System.Web.SessionState.HttpSessionState.Add*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Add
  nameWithType: HttpSessionState.Add
- uid: System.Web.SessionState.HttpSessionState.Clear*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Clear
  nameWithType: HttpSessionState.Clear
- uid: System.Web.SessionState.HttpSessionState.CodePage*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: CodePage
  nameWithType: HttpSessionState.CodePage
- uid: System.Web.SessionState.HttpSessionState.Contents*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Contents
  nameWithType: HttpSessionState.Contents
- uid: System.Web.SessionState.HttpSessionState.CookieMode*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: CookieMode
  nameWithType: HttpSessionState.CookieMode
- uid: System.Web.SessionState.HttpSessionState.CopyTo*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: CopyTo
  nameWithType: HttpSessionState.CopyTo
- uid: System.Web.SessionState.HttpSessionState.Count*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Count
  nameWithType: HttpSessionState.Count
- uid: System.Web.SessionState.HttpSessionState.GetEnumerator*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: GetEnumerator
  nameWithType: HttpSessionState.GetEnumerator
- uid: System.Web.SessionState.HttpSessionState.IsCookieless*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsCookieless
  nameWithType: HttpSessionState.IsCookieless
- uid: System.Web.SessionState.HttpSessionState.IsNewSession*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsNewSession
  nameWithType: HttpSessionState.IsNewSession
- uid: System.Web.SessionState.HttpSessionState.IsReadOnly*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsReadOnly
  nameWithType: HttpSessionState.IsReadOnly
- uid: System.Web.SessionState.HttpSessionState.IsSynchronized*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsSynchronized
  nameWithType: HttpSessionState.IsSynchronized
- uid: System.Web.SessionState.HttpSessionState.Item*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Item
  nameWithType: HttpSessionState.Item
- uid: System.Web.SessionState.HttpSessionState.Keys*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Keys
  nameWithType: HttpSessionState.Keys
- uid: System.Web.SessionState.HttpSessionState.LCID*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: LCID
  nameWithType: HttpSessionState.LCID
- uid: System.Web.SessionState.HttpSessionState.Mode*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Mode
  nameWithType: HttpSessionState.Mode
- uid: System.Web.SessionState.HttpSessionState.Remove*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Remove
  nameWithType: HttpSessionState.Remove
- uid: System.Web.SessionState.HttpSessionState.RemoveAll*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: RemoveAll
  nameWithType: HttpSessionState.RemoveAll
- uid: System.Web.SessionState.HttpSessionState.RemoveAt*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: RemoveAt
  nameWithType: HttpSessionState.RemoveAt
- uid: System.Web.SessionState.HttpSessionState.SessionID*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: SessionID
  nameWithType: HttpSessionState.SessionID
- uid: System.Web.SessionState.HttpSessionState.StaticObjects*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: StaticObjects
  nameWithType: HttpSessionState.StaticObjects
- uid: System.Web.SessionState.HttpSessionState.SyncRoot*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: SyncRoot
  nameWithType: HttpSessionState.SyncRoot
- uid: System.Web.SessionState.HttpSessionState.Timeout*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Timeout
  nameWithType: HttpSessionState.Timeout
