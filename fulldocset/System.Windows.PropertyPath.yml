### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyPath
  id: PropertyPath
  children:
  - System.Windows.PropertyPath.#ctor(System.Object)
  - System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  - System.Windows.PropertyPath.Path
  - System.Windows.PropertyPath.PathParameters
  langs:
  - csharp
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
  type: Class
  summary: "속성을 다른 속성 아래 또는 소유 형식 아래의 경로로 설명 하기 위한 데이터 구조를 구현 합니다. 속성 경로 애니메이션에 대 한 스토리 보드 및 타임 라인 개체에 데이터 바인딩에 사용 됩니다."
  remarks: "이 클래스는 문자열을 포함 <xref:System.Windows.PropertyPath.Path%2A>, 및는 <xref:System.Windows.PropertyPath.PathParameters%2A><xref:System.Windows.PropertyPath.Path%2A>.</xref:System.Windows.PropertyPath.Path%2A> 문자열에</xref:System.Windows.PropertyPath.PathParameters%2A> 는 종속성 속성의 목록을</xref:System.Windows.PropertyPath.Path%2A>       동작의 두 모드를 지원 하는 PropertyPath: **소스 모드** 다른 작업에 대 한 원본으로 사용 되는 속성에 대 한 경로 설명 합니다. 이 모드에서 사용 되는 <xref:System.Windows.Data.Binding>데이터 바인딩을 지원 하기 위해 클래스.</xref:System.Windows.Data.Binding>       **대상 모드** 대상 속성으로 설정할 수 있는 속성에 대 한 경로 설명 합니다. 이 모드는 스토리 보드 및 타임 라인 setter 지원 하기 위해 애니메이션에 사용 됩니다.       예를 들어, `Background.Opacity`&2; 단계 경로입니다. 이 경로 의미: 먼저 찾을 `Background` 개체의 속성 값 개체를 가져오는 `Background` 속성로 설정 되 고 다음 값을 가져올는 `Opacity` 해당 개체의 속성을 합니다.      <a name=&quot;xamlAttributeUsage_PropertyPath&quot;></a># # XAML 특성 사용 ```   <object property=&quot;propertyPath&quot; .../>   ``` <a name=&quot;xamlValues_PropertyPath&quot;> </a> # # XAML 값 *propertyPath* 간단 하거나 복잡 한 속성 경로 이거나로 평가 하는 문자열입니다.       에 PropertyPath를 설정 하기 위한 구문을 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 다양 한 건 복잡 하 고 별도 항목에 설명 된 [PropertyPath XAML 구문](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))]

      public sealed class PropertyPath
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> 클래스입니다."
  remarks: "이 생성자에는 바인딩에 대 한 또는 스토리 보드 대상에 대 한 대상 모드 단일 단계 속성 경로 대 한 소스 모드 속성 경로 사용 여부에 따라 완전히 다른 두 개의 사용 합니다.       이 사용 하는 경우 <xref:System.Windows.PropertyPath>된 바인딩, 소스 모드에서 `parameter` 속성 이름을 나타내는 문자열 또는 속성에 &quot;단계별&quot; 경로 설명 하는 문자열 수는 [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] 바인딩에 대 한 원본으로 사용 중인 개체의 개체 모델입니다.</xref:System.Windows.PropertyPath> 바인딩 속성 경로 &quot;단계&quot;를 식별 하는 문자는 점 (.). 인덱서 참조 (여러 인덱서 및 형식 구분 포함)도 지원 됩니다. 구체적으로는 <xref:System.Windows.Data.Binding>개체를 참조 하십시오 <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>.</xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding> 에서 사용 하는 문자열의 구문은 대 한 자세한 내용은 바인딩 소스로 사용 되는 속성에는 종속성 속성 않아도 됩니다. 바인딩이 양방향으로 업데이트 하는 경우 참조 된 속성이 읽기 / 쓰기 여야 합니다. 바인딩 대상 종속성 속성으로 않았는지 참고도 합니다. 자세한 내용은 참조 [데이터 바인딩 개요](~/add/includes/ajax-current-ext-md.md)합니다.       이 사용 하는 경우 <xref:System.Windows.PropertyPath>스토리 보드 대상에 대 한 단계씩 경로 대 한 대상 모드에 `parameter` 일반적으로 <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> 형식으로 제공</xref:System.Windows.PropertyPath> <xref:System.Windows.DependencyProperty.Name%2A>.</xref:System.Windows.DependencyProperty.Name%2A> 하는 문자열을 지정할 수 있습니다. 둘 중 하나를 string으로 내부적으로 저장 되므로 동일한 결과를 평가 합니다. 제공 된 <xref:System.Windows.DependencyProperty> <xref:System.Windows.Markup.DependencyPropertyConverter>.</xref:System.Windows.Markup.DependencyPropertyConverter> 통해 문자열로 변환</xref:System.Windows.DependencyProperty> <xref:System.Windows.Markup.DependencyPropertyConverter>종속성 속성에 대 한 정규화 된 이름 형식 지정할 수 있도록 지원는 *typeName*.* propertyName* 정규화 된 코드에서 PropertyPath 생성자에 종속성 속성 이름 문자열.</xref:System.Windows.Markup.DependencyPropertyConverter> 종속성 속성 식별자의 정규화 된 경로 복잡 한 경로 다른 개념입니다. 복합 경로 <xref:System.Windows.PropertyPath>와 대신 만들 수는 <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName>생성자.</xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName> </xref:System.Windows.PropertyPath>"
  syntax:
    content: public PropertyPath (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "경로를 설명 하는 속성 경로 [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] 속성 또는 단일 종속성 속성입니다."
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> 클래스 경로 제공 된 토큰 문자열 및 매개 변수입니다."
  remarks: "일반적으로이 서명을 대상 모드에만 사용 <xref:System.Windows.PropertyPath>복합 경로가 포함 된.</xref:System.Windows.PropertyPath>       이 생성자 `params` 에 대 한는 `pathParameters` 생성자 인수입니다. 따라서의 내용을 지정할 수 있습니다 `pathParameters` 일련의 쉼표로 구분 된 생성자 인수를 채우는 배열 차원 하며 다음을 채울 필요 하지 않고 배열에는 `pathParameters` 항목입니다. 각 항목을 지정한 다음 유형 중 하나 여야 합니다: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo> <xref:System.ComponentModel.PropertyDescriptor>.</xref:System.ComponentModel.PropertyDescriptor> </xref:System.Reflection.PropertyInfo> </xref:System.Windows.DependencyProperty>       매개 변수 요구 사항에 대 한 자세한 내용은 <xref:System.Windows.PropertyPath.Path%2A>및 <xref:System.Windows.PropertyPath.PathParameters%2A>.</xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A> 를 참조 하십시오."
  syntax:
    content: public PropertyPath (string path, object[] pathParameters);
    parameters:
    - id: path
      type: System.String
      description: "지정 하는 문자열은 <xref:System.Windows.PropertyPath.Path*>, 토큰화 된 형식에서입니다.</xref:System.Windows.PropertyPath.Path*>"
    - id: pathParameters
      type: System.Object[]
      description: "<xref:System.Windows.PropertyPath.PathParameters*>.</xref:System.Windows.PropertyPath.PathParameters*> 를 설정 하는 개체의 배열"
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.Path
  id: Path
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "경로 설명 하는 문자열을 가져오거나 설정 합니다."
  remarks: "The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.  \n  \n If using this <xref:System.Windows.PropertyPath> in source mode for a binding, Path is a string representing a property name, or can be a string that describes a \"step-through\" path to the property in the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding. For a binding property path, the character that identifies a \"step\" is a dot (.). Indexer references (including multiple indexers, and type differentiation) are also supported. For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>. A property used as a binding source need not be a dependency property. If the binding updates two-way, the property source must be read-write. Also note that the binding target does have to be a dependency property. For details, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.  \n  \n If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, Path is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.  \n  \n-   Each item in the array is specified in this format by the array index for the item enclosed in parentheses. For example, to specify the first item in the array, the string token is `(0)`.  \n  \n-   Relationships between items (\"steps\" in the path) are specified by a dot (.). The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two). The last step in the chain always represents the property being animated.  \n  \n-   Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]). The indexer is additive to the token representing the property. For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` . You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.  \n  \n The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the [PropertyPath(String, Object\\[\\])](assetId:///M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) signature for multi-step storyboard targets.  \n  \n **XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>). This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures. This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as Path and <xref:System.Windows.PropertyPath.PathParameters%2A>. For more information, see [PropertyPath XAML Syntax](~/add/includes/ajax-current-ext-md.md).  \n  \n<a name=\"xamlTextUsage_Path\"></a>   \n## XAML Text Usage  \n Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax. See Remarks."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "경로 설명 하는 문자열입니다."
  overload: System.Windows.PropertyPath.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.PathParameters
  id: PathParameters
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "경로 인덱싱된 매개 변수를 참조할 때 사용할 매개 변수 목록을 가져옵니다."
  remarks: "에 대 한 속성을 <xref:System.Windows.PropertyPath>일반적으로 생성자를 통해 설정 됩니다.</xref:System.Windows.PropertyPath> PathParameters를 설정 하기 위한는 <xref:System.Windows.PropertyPath.%23ctor%2A>생성자 사용 하는 것이 편리한 때문에 `pathParameters` 생성자 인수로 지정 된 `params`, 즉를 만들거나 생성에 대 한 배열을 차원 필요 하지 않습니다.</xref:System.Windows.PropertyPath.%23ctor%2A> 배열의 각 멤버를 추가 매개 변수로 지정 하면 됩니다.       최종 속성 대상이 되는 경우는 <xref:System.Windows.Freezable>입력 값은 복제 됩니다.</xref:System.Windows.Freezable> 자세한 내용은 참조 [적기](~/add/includes/ajax-current-ext-md.md)합니다.       속성 체인의 실제 평가 스토리 보드 애니메이션 메커니즘에 의해 수행 됩니다. 에 <xref:System.Windows.PropertyPath>수준에서 유효성을 검사 하지 경로 단계가 전혀 연결 되도록 수행 됩니다.</xref:System.Windows.PropertyPath> 예를 들어, 속성 경로 생성할 수 있습니다 <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>첫 번째 단계로, 및 <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName>두 번째 단계로.</xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> 이러한 속성 경로 오류가 실제로 적용 한 대상으로 하는 경우 브러시 입력 해당 채우기 <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>없는 <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName>속성.</xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> 잘못 된 속성 경로 자동으로 실패 합니다. 자세한 내용은 참조 [적기](../Topic/Storyboards%20Overview.md)합니다.       **XAML:** 사용 하는 경우는 <xref:System.Windows.PropertyPath>속성 참조를 설명 하기 위해 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]특성 값을 지정 하는 문자열은 형식 변환기에서 먼저 처리 된 것으로, (<xref:System.Windows.PropertyPathConverter>).</xref:System.Windows.PropertyPathConverter> </xref:System.Windows.PropertyPath> 이 형식 변환기에서 다음 문자열을 처리 하 고에 따라 캐스트 연산자 구문 중 하나를 호출 됩니다는 <xref:System.Windows.PropertyPath>생성자 서명을.</xref:System.Windows.PropertyPath> 특성 값을 처리 하는 형식 변환기를 통해이 간접 참조는 일반적으로 사용 하는 방법을 <xref:System.Windows.PropertyPath>에 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]를 선언 하는 대신 한 <xref:System.Windows.PropertyPath>개체 요소를 같은 특성을 특정 값을 다음 적용 <xref:System.Windows.PropertyPath.Path%2A>및 PathParameters.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath> </xref:System.Windows.PropertyPath> 자세한 내용은 참조 [PropertyPath XAML 구문](~/add/includes/ajax-current-ext-md.md)합니다.      <a name=&quot;xamlTextUsage_PathParameters&quot;></a># # XAML 텍스트 사용 멤버는 <xref:System.Windows.PropertyPath>형식을 직접에서 일반적으로 설정 되지 않은 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 구문.</xref:System.Windows.PropertyPath> 설명 부분을 참조 하십시오."
  syntax:
    content: public System.Collections.ObjectModel.Collection<object> PathParameters { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Object}
      description: "매개 변수 목록입니다."
  overload: System.Windows.PropertyPath.PathParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.PropertyPath.Path
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
- uid: System.Collections.ObjectModel.Collection{System.Object}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Object>
  nameWithType: Collection<Object>
  fullName: System.Collections.ObjectModel.Collection<System.Object>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.PropertyPath.#ctor*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath.PropertyPath
- uid: System.Windows.PropertyPath.Path*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
