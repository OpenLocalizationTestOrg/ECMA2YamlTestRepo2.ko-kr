### YamlMime:ManagedReference
items:
- uid: System.Threading.HostExecutionContext
  id: HostExecutionContext
  children:
  - System.Threading.HostExecutionContext.#ctor
  - System.Threading.HostExecutionContext.#ctor(System.Object)
  - System.Threading.HostExecutionContext.CreateCopy
  - System.Threading.HostExecutionContext.Dispose
  - System.Threading.HostExecutionContext.Dispose(System.Boolean)
  - System.Threading.HostExecutionContext.State
  langs:
  - csharp
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
  type: Class
  summary: "캡슐화 하 고 스레드 간에 호스트 실행 컨텍스트를 전파 합니다."
  remarks: "HostExecutionContext에 더 큰 <xref:System.Threading.ExecutionContext>.</xref:System.Threading.ExecutionContext> 의 일부인 호스트 컨텍스트 마이그레이션되거나, 실행 컨텍스트를 사용 합니다."
  syntax:
    content: 'public class HostExecutionContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.#ctor
  id: '#ctor'
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: HostExecutionContext()
  nameWithType: HostExecutionContext.HostExecutionContext()
  fullName: System.Threading.HostExecutionContext.HostExecutionContext()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> 클래스입니다."
  remarks: "호스트 실행 컨텍스트를 만듭니다. 기본 생성자 인 <xref:System.Threading.HostExecutionContext.State%2A>속성 값은 `null`.</xref:System.Threading.HostExecutionContext.State%2A>"
  syntax:
    content: public HostExecutionContext ();
    parameters: []
  overload: System.Threading.HostExecutionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: HostExecutionContext(Object)
  nameWithType: HostExecutionContext.HostExecutionContext(Object)
  fullName: System.Threading.HostExecutionContext.HostExecutionContext(Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> 클래스 지정 된 상태를 사용 합니다."
  remarks: "<xref:System.Threading.HostExecutionContext> <xref:System.Threading.ExecutionContext>.</xref:System.Threading.ExecutionContext> 에 포함 된</xref:System.Threading.HostExecutionContext> `state` 포함 하는 안전한 핸들을 나타내는 `IUnknown` 호스트에 대 한 포인터입니다."
  syntax:
    content: public HostExecutionContext (object state);
    parameters:
    - id: state
      type: System.Object
      description: "호스트 실행 컨텍스트 상태를 나타내는 개체입니다."
  overload: System.Threading.HostExecutionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.CreateCopy
  id: CreateCopy
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: CreateCopy()
  nameWithType: HostExecutionContext.CreateCopy()
  fullName: System.Threading.HostExecutionContext.CreateCopy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "현재 호스트 실행 컨텍스트의 복사본을 만듭니다."
  remarks: "복사본에 대 한 매개 변수로 사용할 수 있습니다는 <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName>메서드를 호출 합니다.</xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Threading.HostExecutionContext CreateCopy ();
    parameters: []
    return:
      type: System.Threading.HostExecutionContext
      description: "A <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> 현재 스레드에 대 한 호스트 컨텍스트를 나타내는 개체입니다."
  overload: System.Threading.HostExecutionContext.CreateCopy*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.Dispose
  id: Dispose
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: HostExecutionContext.Dispose()
  fullName: System.Threading.HostExecutionContext.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "현재 인스턴스에서 사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> 클래스입니다."
  remarks: "호출 `Dispose` <xref:System.Threading.HostExecutionContext>.</xref:System.Threading.HostExecutionContext> 를 사용 하 여 작업을 마쳤으면 `Dispose` 메서드는 <xref:System.Threading.HostExecutionContext>불안정 한 상태가.</xref:System.Threading.HostExecutionContext> 호출한 후 `Dispose`에 대 한 모든 참조를 해제 해야는 <xref:System.Threading.HostExecutionContext>가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Threading.HostExecutionContext>차지한.</xref:System.Threading.HostExecutionContext> </xref:System.Threading.HostExecutionContext>       자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md) 및 [Dispose 메서드를 구현](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > 항상 호출 `Dispose` <xref:System.Threading.HostExecutionContext>.</xref:System.Threading.HostExecutionContext> 에 대 한 마지막 참조를 해제 하기 전에 사용 중인 리소스가 가비지 수집기 호출할 때까지 해제 되지 것입니다 그렇지 않은 경우는 <xref:System.Threading.HostExecutionContext>개체의 `Finalize` 메서드.</xref:System.Threading.HostExecutionContext>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.HostExecutionContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HostExecutionContext.Dispose(Boolean)
  fullName: System.Threading.HostExecutionContext.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "파생된 클래스에서 재정의 되 면 사용 하는 관리 되지 않는 리소스를 해제는 <xref:System.Threading.WaitHandle>, 관리 되는 리소스를 선택적으로 해제 합니다.</xref:System.Threading.WaitHandle>"
  remarks: "이 메서드는 <xref:System.Threading.HostExecutionContext.Dispose>메서드 오버 로드와 종료자.</xref:System.Threading.HostExecutionContext.Dispose> <xref:System.Threading.HostExecutionContext.Dispose>이 보호 된 메서드를 호출 하는 `disposing` 매개 변수 설정 `true`합니다.</xref:System.Threading.HostExecutionContext.Dispose> 종료자에는이 메서드를 호출 `disposing` 로 설정 `false`합니다.       경우는 `disposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Threading.HostExecutionContext>참조.</xref:System.Threading.HostExecutionContext> 이 메서드 호출에서 `Dispose` 각 참조 된 개체의 메서드.       이 메서드는 다른 개체에서 여러 번 호출할 수 있습니다. 이 메서드를 재정의할 때 이전 호출에서 삭제 된 개체를 참조 하지 주의 해야 합니다."
  syntax:
    content: public virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Threading.HostExecutionContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.State
  id: State
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: State
  nameWithType: HostExecutionContext.State
  fullName: System.Threading.HostExecutionContext.State
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "호스트 실행 컨텍스트의 상태를 가져오거나 설정 합니다."
  remarks: "State 속성 값을 포함 하는 safehandle 나타냅니다는 `IUnknown` 호스트에 대 한 포인터입니다."
  syntax:
    content: protected object State { get; set; }
    return:
      type: System.Object
      description: "호스트 실행 컨텍스트 상태를 나타내는 개체입니다."
  overload: System.Threading.HostExecutionContext.State*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.HostExecutionContext.#ctor
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext()
  nameWithType: HostExecutionContext.HostExecutionContext()
  fullName: System.Threading.HostExecutionContext.HostExecutionContext()
- uid: System.Threading.HostExecutionContext.#ctor(System.Object)
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext(Object)
  nameWithType: HostExecutionContext.HostExecutionContext(Object)
  fullName: System.Threading.HostExecutionContext.HostExecutionContext(Object)
- uid: System.Threading.HostExecutionContext.CreateCopy
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: CreateCopy()
  nameWithType: HostExecutionContext.CreateCopy()
  fullName: System.Threading.HostExecutionContext.CreateCopy()
- uid: System.Threading.HostExecutionContext
  parent: System.Threading
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
- uid: System.Threading.HostExecutionContext.Dispose
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose()
  nameWithType: HostExecutionContext.Dispose()
  fullName: System.Threading.HostExecutionContext.Dispose()
- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HostExecutionContext.Dispose(Boolean)
  fullName: System.Threading.HostExecutionContext.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.HostExecutionContext.State
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: State
  nameWithType: HostExecutionContext.State
  fullName: System.Threading.HostExecutionContext.State
- uid: System.Threading.HostExecutionContext.#ctor*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext.HostExecutionContext
- uid: System.Threading.HostExecutionContext.CreateCopy*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: CreateCopy
  nameWithType: HostExecutionContext.CreateCopy
- uid: System.Threading.HostExecutionContext.Dispose*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose
  nameWithType: HostExecutionContext.Dispose
- uid: System.Threading.HostExecutionContext.State*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: State
  nameWithType: HostExecutionContext.State
