### YamlMime:ManagedReference
items:
- uid: System.Reflection.ObfuscateAssemblyAttribute
  id: ObfuscateAssemblyAttribute
  children:
  - System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  - System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  - System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  langs:
  - csharp
  name: ObfuscateAssemblyAttribute
  nameWithType: ObfuscateAssemblyAttribute
  fullName: System.Reflection.ObfuscateAssemblyAttribute
  type: Class
  summary: "표준 난독 처리 규칙에 적절 한 어셈블리 유형 사용 하는 도구를 난독 처리를 지시 합니다."
  remarks: "<xref:System.Reflection.ObfuscationAttribute>고 ObfuscateAssemblyAttribute 특성 어셈블리 작성자가 난독 처리 도구 외부 최소 구성으로 올바르게 처리할 수 있도록가 이진 파일에 주석을 추가 하는 방법을 제공 합니다.</xref:System.Reflection.ObfuscationAttribute>       어셈블리 형식에 대 한 기본 규칙을 사용 하는 난독 처리 도구를 지시 어셈블리에이 특성을 적용 합니다.      > [!IMPORTANT] >이 특성을 적용 하지 자동으로 난독 처리지 않습니다 어셈블리입니다. 특성 적용 하 여 난독 처리 도구에 대 한 구성 파일을 만드는 하지 않아도 됩니다. 즉, 모호성 도구에 대 한 지침만 제공 합니다. 난독 처리 도구 공급 업체 여기에 설명 된 의미 체계를 수행 하는 것이 좋습니다. 그러나 특정 도구 Microsoft 권장 사항을 따르는지를 하지 않을 수도가 있습니다.       적용할 수 있습니다 <xref:System.Reflection.ObfuscationAttribute>해당 형식에는 멤버와 어셈블리 내의 형식에.</xref:System.Reflection.ObfuscationAttribute> 가장 안쪽의 특성에 따라 제어 방식으로 난독 처리 하는 도구는 특정 코드 엔터티를 처리 합니다."
  example:
  - "The following code example shows a private assembly that has been marked with the ObfuscateAssemblyAttribute. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n For a code example that shows the use of ObfuscateAssemblyAttribute with <xref:System.Reflection.ObfuscationAttribute>, see the <xref:System.Reflection.ObfuscationAttribute> class.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/t-system.reflection.obfu_0_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/t-system.reflection.obfu_0_1.cs)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=false, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ObfuscateAssemblyAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: ObfuscateAssemblyAttribute(Boolean)
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  fullName: System.Reflection.ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Reflection.ObfuscateAssemblyAttribute&quot;> </xref> 어셈블리를 난독 처리 될 공개 또는 개인 인지를 지정 하는 클래스입니다."
  remarks: "응용 프로그램에 사용 하는 라이브러리를 다른 소프트웨어에서 사용할 수 없는 경우에 private으로 어셈블리를 표시 합니다. 일반적으로 어셈블리를 전용으로 표시는 응용 프로그램을 난독 처리의 일부분으로 공용 메서드를 포함 하는 모든 메서드의 이름은 난독 처리할 수 obfuscator을 지시 합니다. 어셈블리의 public 인 경우 obfuscator public 멤버의 이름을 난독 처리 되지는 해야 합니다.      > [!IMPORTANT] >이 특성을 적용 하지 자동으로 난독 처리지 않습니다 어셈블리입니다. 특성 적용 하 여 난독 처리 도구에 대 한 구성 파일을 만드는 하지 않아도 됩니다. 즉, 모호성 도구에 대 한 지침만 제공 합니다. 난독 처리 도구 공급 업체 여기에 설명 된 의미 체계를 수행 하는 것이 좋습니다. 그러나 특정 도구 Microsoft 권장 사항을 따르는지를 하지 않을 수도가 있습니다."
  example:
  - "The following code example shows how the attribute constructor specifies that an assembly is private. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/m-system.reflection.obfu_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/m-system.reflection.obfu_1.cs)]"
  syntax:
    content: public ObfuscateAssemblyAttribute (bool assemblyIsPrivate);
    parameters:
    - id: assemblyIsPrivate
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>단일 응용 프로그램;의 범위 내에서 어셈블리를 사용 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Reflection.ObfuscateAssemblyAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  id: AssemblyIsPrivate
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
  fullName: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "가져옵니다는 <xref:System.Boolean>어셈블리 비공개로 있는지 여부를 나타내는 값입니다.</xref:System.Boolean>"
  remarks: "전용 어셈블리를 다른 소프트웨어로 부품 어셈블리가 응용 프로그램에 의해서만 사용 됩니다.      > [!IMPORTANT] >이 특성을 적용 하지 자동으로 난독 처리지 않습니다 어셈블리입니다. 특성 적용 하 여 난독 처리 도구에 대 한 구성 파일을 만드는 하지 않아도 됩니다. 즉, 모호성 도구에 대 한 지침만 제공 합니다. 난독 처리 도구 공급 업체 여기에 설명 된 의미 체계를 수행 하는 것이 좋습니다. 그러나 특정 도구 Microsoft 권장 사항을 따르는지를 하지 않을 수도가 있습니다."
  example:
  - "The following code example shows how the attribute constructor sets the AssemblyIsPrivate property to `true`, to specify that an assembly is private. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/p-system.reflection.obfu_2_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/p-system.reflection.obfu_2_1.cs)]"
  syntax:
    content: public bool AssemblyIsPrivate { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>어셈블리에 개인;로 표시 되어 있으면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  id: StripAfterObfuscation
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
  fullName: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "가져오거나는 <xref:System.Boolean>난독 처리 도구 처리 후 특성을 제거 하는지 여부를 나타내는 값입니다.</xref:System.Boolean>"
  remarks: "라이브러리가 다른 응용 프로그램의 일부분으로 포함 되며 해당 응용 프로그램의 일부분으로 난독 처리 하는 경우 특성을 제거 해야 합니다.       난독 처리 도구를 제거 하도록 지정 하는 <xref:System.Reflection.ObfuscateAssemblyAttribute>인스턴스의 영향을 주지 않습니다 <xref:System.Reflection.ObfuscationAttribute>형식 및 멤버는 어셈블리 내부에 이미 적용 된.</xref:System.Reflection.ObfuscationAttribute> </xref:System.Reflection.ObfuscateAssemblyAttribute>      > [!IMPORTANT] >이 특성을 적용 하지 자동으로 난독 처리지 않습니다 어셈블리입니다. 특성 적용 하 여 난독 처리 도구에 대 한 구성 파일을 만드는 하지 않아도 됩니다. 즉, 모호성 도구에 대 한 지침만 제공 합니다. 난독 처리 도구 공급 업체 여기에 설명 된 의미 체계를 수행 하는 것이 좋습니다. 그러나 특정 도구 Microsoft 권장 사항을 따르는지를 하지 않을 수도가 있습니다."
  example:
  - "The following code example shows the <xref:System.Reflection.ObfuscateAssemblyAttribute> attribute with the StripAfterObfuscation property set to `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/p-system.reflection.obfu_3_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/p-system.reflection.obfu_3_1.cs)]"
  syntax:
    content: public bool StripAfterObfuscation { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>난독 처리 도구 처리; 후 특성을 제거 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 이 속성에 대 한 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: ObfuscateAssemblyAttribute(Boolean)
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  fullName: System.Reflection.ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
  fullName: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
  fullName: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: ObfuscateAssemblyAttribute
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
