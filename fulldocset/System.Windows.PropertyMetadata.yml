### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyMetadata
  id: PropertyMetadata
  children:
  - System.Windows.PropertyMetadata.#ctor
  - System.Windows.PropertyMetadata.#ctor(System.Object)
  - System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  langs:
  - csharp
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
  type: Class
  summary: "등록 된 조건을 포함 하 여 특정 형식에 적용 될 때 종속성 속성의 특정 동작 측면을 정의 합니다."
  remarks: "속성 메타 데이터를 정의 하 고 호출 하는 경우 종속성 속성을 등록할 때 사용 될 수는 <xref:System.Windows.DependencyProperty.Register%2A>메서드 (또는 연결 된 속성 또는 읽기 전용 종속성 속성에 대 한 변형)을 호출할 때 원래 소유자 등록 후 또는 <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>메서드.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> <xref:System.Windows.DependencyProperty.AddOwner%2A>또한 속성 메타 데이터를 사용합니다.</xref:System.Windows.DependencyProperty.AddOwner%2A>       이 클래스는 이러한 각 호출에 사용할 수 있는 구체적 기본 클래스입니다. 그러나 것은 매우 일반적 <xref:System.Windows.FrameworkPropertyMetadata>.</xref:System.Windows.FrameworkPropertyMetadata> 같은 파생된 클래스 중 하나를 사용 하 여 메타 데이터를 지정 하려면 이러한 파생된 클래스는 감지 또는에 구현 되는 일부 속성 시스템 및 레이아웃 동작을 사용 하도록 설정 하는 데 필요한 부울 속성 값으로 전달 하는 보다 자세한 메타 데이터 지원의 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 프레임 워크 수준입니다.       이 클래스의 몇 가지 속성을 읽기 / 쓰기 개체 모델에 있지만 등 <xref:System.Windows.DependencyProperty.Register%2A> <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> 속성 시스템 작업에 사용 되는 인스턴스가 전에 작성할 수 있습니다 이러한 각 속성 또한 설정 될 수는 생성자가 있지만 표시 됩니다 되도록 <xref:System.Windows.PropertyMetadata.Merge%2A>메서드 구현에서는 속성을 설정할 수 있습니다.</xref:System.Windows.PropertyMetadata.Merge%2A>      <a name=&quot;xamlTextUsage_PropertyMetadata&quot;></a># #이 형식의 멤버 및 XAML 텍스트 사용이이 형식에 일반적으로에서 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  syntax:
    content: public class PropertyMetadata
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> 클래스입니다."
  syntax:
    content: public PropertyMetadata ();
    parameters: []
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> 이 메타 데이터가 적용 하는 종속성 속성에 대 한 지정 된 기본값을 사용 하 여 클래스입니다."
  remarks: "제공 된 값의 형식 `defaultValue` 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 되어야 합니다. 메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 불일치 (일치 하지 않는 런타임 예외가 발생 합니다) 컴파일하는 동안 불일치를 감지할 수 없기 때문에 디버깅을 어려울 수 있습니다.       매개 변수가 없는 생성자에 대해 기본값으로 있지만 `defaultValue` 의 <xref:System.Windows.DependencyProperty.UnsetValue>지정할 수 없습니다.</xref:System.Windows.DependencyProperty.UnsetValue> 이렇게 하면 예외가 발생 합니다."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "기본값을 일반적으로 몇 가지 특정 유형의 값으로 제공 되는 종속성 속성을 지정 합니다."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>값으로 설정할 수 없습니다 <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 설명을 참조 하십시오."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> 지정된 된 <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> 구현 참조 합니다."
  remarks: ''
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1paramcallback)]"
  syntax:
    content: public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "속성의 유효 값이 변경 될 때마다 속성 시스템에 의해 호출 되는 처리기 구현에 대 한 참조입니다."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> 지정 된 기본값을 사용 하 여 클래스 및 <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> 구현 참조 합니다."
  remarks: "제공 된 값 형식 `defaultValue` 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 되어야 합니다. 메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 불일치 (일치 하지 않는 런타임 예외가 발생 합니다) 컴파일하는 동안 불일치를 감지할 수 없기 때문에 디버깅을 어려울 수 있습니다.       매개 변수가 없는 생성자에 대해 기본값으로 있지만 `defaultValue` 의 <xref:System.Windows.DependencyProperty.UnsetValue>지정할 수 없습니다.</xref:System.Windows.DependencyProperty.UnsetValue> 이렇게 하면 예외가 발생 합니다."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor2param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "일반적으로 몇 가지 특정 유형의 값으로 제공 하는 종속성 속성의 기본값입니다."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "속성의 유효 값이 변경 될 때마다 속성 시스템에 의해 호출 되는 처리기 구현에 대 한 참조입니다."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>값으로 설정할 수 없습니다 <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 설명을 참조 하십시오."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> 지정 된 기본값 및 콜백 클래스."
  remarks: "지정 하려는 경우는 <xref:System.Windows.CoerceValueCallback>하지 않고는 <xref:System.Windows.PropertyChangedCallback>를 전달할 수 있습니다 `null` 에 대 한는 `propertyChangedCallback` 매개 변수.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       제공 된 값의 형식 `defaultValue` 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 되어야 합니다. 메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 불일치 (일치 하지 않는 런타임 예외가 발생 합니다) 컴파일하는 동안 불일치를 감지할 수 없기 때문에 디버깅을 어려울 수 있습니다.       매개 변수가 없는 생성자에 대해 기본값으로 있지만 `defaultValue` 의 <xref:System.Windows.DependencyProperty.UnsetValue>지정할 수 없습니다.</xref:System.Windows.DependencyProperty.UnsetValue> 이렇게 하면 예외가 발생 합니다."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor3param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "일반적으로 몇 가지 특정 유형의 값으로 제공 하는 종속성 속성의 기본값입니다."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "속성의 유효 값이 변경 될 때마다 속성 시스템에 의해 호출 되는 처리기 구현에 대 한 참조입니다."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "속성 시스템 호출할 때마다 호출 되는 처리기 구현에 대 한 참조 <xref:System.Windows.DependencyObject.CoerceValue*>이 속성에 대해.</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>값으로 설정할 수 없습니다 <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 설명을 참조 하십시오."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  id: CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "에 대 한 참조를 가져오거나는 <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> 이 메타 데이터에 지정 된 구현 합니다."
  remarks: "속성 메타 데이터에 대 한 콜백이 되지 않으므로 일반적으로 public 멤버를 포함 하는 형식,이 속성의 값은 기존 종속성 속성의 메타 데이터를 사용 하는 대부분의 시나리오에 대 한 중요 하지 않습니다. 이 속성을 노출 하는 한 가지 이유는 메타 데이터의 하위 클래스는 기본 메타 데이터와 메타 데이터 재정의/추가 지정 <xref:System.Windows.CoerceValueCallback>.</xref:System.Windows.CoerceValueCallback> 원하는 병합 논리를 수행할 수 있도록 그러나는 된에 대 한 기본 병합 논리 이전을 대체 하는 것입니다.       된 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다. 따라서 초기화 된을 조정할 수는 <xref:System.Windows.PropertyMetadata>개체 자체입니다.</xref:System.Windows.PropertyMetadata> 그러나 메타 데이터에 대 한 호출의 일부로 사용 된 경우 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 된을 한 번 설정 하려고 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }
    return:
      type: System.Windows.CoerceValueCallback
      description: "A <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> 구현 참조 합니다."
  overload: System.Windows.PropertyMetadata.CoerceValueCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "종속성 속성 작업에 적용 한 후에 메타 데이터 속성을 설정할 수 없습니다."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.DefaultValue
  id: DefaultValue
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "종속성 속성의 기본값을 가져오거나 설정 합니다."
  remarks: "DefaultValue 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다. 따라서 초기화 한 후 DefaultValue를 조정할 수는 <xref:System.Windows.PropertyMetadata>개체 자체입니다.</xref:System.Windows.PropertyMetadata> 그러나 메타 데이터에 대 한 호출의 일부로 사용 된 경우 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> DefaultValue를 한 번 설정 하려고 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>       매개 변수가 없는 생성자에 대해 기본값으로 있지만 `defaultValue` 의 <xref:System.Windows.DependencyProperty.UnsetValue>DefaultValue 또는 생성자 중 하나를 사용 하 여 설정할 수 없습니다.</xref:System.Windows.DependencyProperty.UnsetValue> 이렇게 하면 예외가 발생 합니다.      <a name=&quot;xamlTextUsage_PropertyChangedCallback&quot;></a># #이 유형의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]합니다."
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "속성의 기본값입니다. 값에서 기본값을 <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> 매개 변수가 없는 생성자를 사용 하 여 만든 인스턴스가 됩니다 <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 설명을 참조 하십시오."
  overload: System.Windows.PropertyMetadata.DefaultValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "값으로 설정할 수 없습니다 <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref> 만들어지면; 설명을 참조 하십시오."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "종속성 속성 작업에 적용 한 후에 메타 데이터 속성을 설정할 수 없습니다."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.IsSealed
  id: IsSealed
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "속성에 해당 메타 데이터 인스턴스의 변경할 수 없는 상태에 데이터가 메타 데이터를 적용 되었는지 여부를 결정 하는 값을 가져옵니다."
  remarks: "다양 한 속성 <xref:System.Windows.PropertyMetadata>와 같은 <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.</xref:System.Windows.PropertyMetadata.DefaultValue%2A> </xref:System.Windows.PropertyMetadata> 따라서 초기화 한 후 해당 속성을 조정할 수는 <xref:System.Windows.PropertyMetadata>개체 자체입니다.</xref:System.Windows.PropertyMetadata> 그러나 메타 데이터에 대 한 호출의 일부로 종속성 속성에 적용 되 고 나면 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 이러한 호출 중 하나의 시 <xref:System.Windows.PropertyMetadata.OnApply%2A>를 호출 하 고이 속성의 값 설정 `true`.</xref:System.Windows.PropertyMetadata.OnApply%2A>"
  example:
  - "The following example  checks IsSealed prior to a set operation of a custom metadata property.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>메타 데이터 인스턴스; 변경할 수 없는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.PropertyMetadata.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "기본 메타 데이터와이 메타 데이터를 병합합니다."
  remarks: "이 메서드는 메타 데이터 재정의 될 때 내부적으로 사용 됩니다 (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 메서드).</xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "이 인스턴스의 값 병합할 기본 메타 데이터입니다."
    - id: dp
      type: System.Windows.DependencyProperty
      description: "이 메타 데이터가 적용 되는 종속성 속성입니다."
  overload: System.Windows.PropertyMetadata.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "이 메타 데이터는 메타 데이터는 봉인 여부를 나타내는 속성에 적용 된 경우 호출 됩니다."
  remarks: "서브 클래스 해야 속하는 어떠한 방법으로의 데이터 구조는 <xref:System.Windows.PropertyMetadata>하위 클래스 표시 해야 변경할 수 없는 것 OnApply 호출 되 면.</xref:System.Windows.PropertyMetadata> 메타 데이터 속성 시스템 작업에 적용 된 후 호출 됩니다 (등록, 소유자를 추가, 메타 데이터 재정의)."
  syntax:
    content: protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "종속성 속성 메타 데이터에 적용 되었습니다."
    - id: targetType
      type: System.Type
      description: "이 특정 형식의 메타 데이터는 경우이 메타 데이터와 연결 된 형식입니다. 기본 메타 데이터 인 경우이 값은 null 참조입니다."
  overload: System.Windows.PropertyMetadata.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  id: PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "에 대 한 참조를 가져오거나는 <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> 이 메타 데이터에 지정 된 구현 합니다."
  remarks: "속성 메타 데이터의 콜백은 되지 않으므로 정의 형식에 대해 일반적으로 public 멤버가이 속성의 값은 기존 종속성 속성의 메타 데이터를 사용 하는 대부분의 시나리오에 대 한 중요 하지 않습니다. 이 속성을 노출 하는 한 가지 이유는 메타 데이터 클래스는 기본 메타 데이터와 메타 데이터 재정의/추가 지정 <xref:System.Windows.PropertyChangedCallback>.</xref:System.Windows.PropertyChangedCallback> 원하는 병합 논리를 수행할 수 있도록 에 대 한 기본 병합 논리 테이블의 모든 PropertyChangedCallback 구현 유지 관리 하 고 첫 번째 실행 하는 계층 구조에서 가장 깊은 클래스에 설정 된 콜백이 각각를 호출 하는 것입니다.       PropertyChangedCallback 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다. 따라서 초기화 한 후 PropertyChangedCallback를 조정할 수는 <xref:System.Windows.PropertyMetadata>개체 자체입니다.</xref:System.Windows.PropertyMetadata> 그러나 메타 데이터에 대 한 호출의 일부로 사용 된 경우 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 현재 변경할 수 없는 것으로 간주 됩니다.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> PropertyChangedCallback를 한 번 설정 하려고 <xref:System.Windows.PropertyMetadata.IsSealed%2A>은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }
    return:
      type: System.Windows.PropertyChangedCallback
      description: "A <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> 구현 참조 합니다."
  overload: System.Windows.PropertyMetadata.PropertyChangedCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "종속성 속성 작업에 적용 한 후에 메타 데이터 속성을 설정할 수 없습니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.PropertyMetadata.#ctor
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata.PropertyMetadata
- uid: System.Windows.PropertyMetadata.CoerceValueCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
- uid: System.Windows.PropertyMetadata.Merge*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: PropertyMetadata.Merge
- uid: System.Windows.PropertyMetadata.OnApply*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: PropertyMetadata.OnApply
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
