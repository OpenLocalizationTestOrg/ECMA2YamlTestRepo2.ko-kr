### YamlMime:ManagedReference
items:
- uid: System.Data.OleDb.OleDbDataAdapter
  id: OleDbDataAdapter
  children:
  - System.Data.OleDb.OleDbDataAdapter.#ctor
  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)
  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)
  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)
  - System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  - System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)
  - System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)
  - System.Data.OleDb.OleDbDataAdapter.InsertCommand
  - System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  - System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.OleDb.OleDbDataAdapter.RowUpdated
  - System.Data.OleDb.OleDbDataAdapter.RowUpdating
  - System.Data.OleDb.OleDbDataAdapter.SelectCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  - System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone
  - System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  langs:
  - csharp
  name: OleDbDataAdapter
  nameWithType: OleDbDataAdapter
  fullName: System.Data.OleDb.OleDbDataAdapter
  type: Class
  summary: "채우는 데 사용 되는 데이터베이스 연결 및 데이터 명령 집합을 나타냅니다는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 데이터 소스를 업데이트 합니다."
  remarks: "OleDbDataAdapter 사이의 브리지 역할을 <xref:System.Data.DataSet>와 데이터 소스를 검색 하 고 데이터를 저장 합니다.</xref:System.Data.DataSet> OleDbDataAdapter를 사용 하 여이 연결을 제공 <xref:System.Data.Common.DbDataAdapter.Fill%2A>에 데이터 원본에서 데이터를 로드 하는 <xref:System.Data.DataSet>, 및를 사용 하 여 <xref:System.Data.Common.DbDataAdapter.Update%2A>에서 변경 내용을 보낼는 <xref:System.Data.DataSet>데이터 소스에 다시.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       OleDbDataAdapter를 채웁니다는 <xref:System.Data.DataSet>, 만들어집니다 적절 한 테이블 및 열 반환된 된 데이터에 이미 존재 하지 않는 경우.</xref:System.Data.DataSet> 그러나 기본 키 정보에에서 없는 암시적으로 만든된 스키마 하지 않는 한 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> <xref:System.Data.MissingSchemaAction>.</xref:System.Data.MissingSchemaAction> 속성</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> <xref:System.Data.DataSet>포함 하 여 기본 키 정보, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 를 사용 하 여 데이터를 채우기 전에</xref:System.Data.DataSet> 스키마를 만드는 설정 해야 할 수도 있습니다. 자세한 내용은 참조 [기존 제약 조건 데이터 집합에 추가](~/add/includes/ajax-current-ext-md.md)합니다.       참고가 기본 테이블 또는 기본 키 정보와 MSDataShape 공급자를 포함 하 여 일부 OLE DB 공급자를 반환 하지 않습니다. 따라서 OleDbDataAdapter <xref:System.Data.DataTable.PrimaryKey%2A>속성에 만든된 <xref:System.Data.DataTable>요청 했습니다.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> 설정 올바르게 수 없습니다. 이러한 경우에 명시적으로 지정 해야 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 테이블에 대 한 기본 키       OleDbDataAdapter도 포함 되어는 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A>, 및 <xref:System.Data.Common.DataAdapter.TableMappings%2A>속성을 쉽게 로드 하 고 데이터의 업데이트.</xref:System.Data.Common.DataAdapter.TableMappings%2A> </xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>       OleDbDataAdapter의 인스턴스를 만들 때 속성은 초기 값으로 설정 됩니다. 이러한 값의 목록이 OleDbDataAdapter 생성자를 참조 하십시오."
  example:
  - "The following example uses the <xref:System.Data.OleDb.OleDbCommand>, OleDbDataAdapter and <xref:System.Data.OleDb.OleDbConnection>, to select records from an Access data source, and populate a <xref:System.Data.DataSet> with the selected rows. The filled <xref:System.Data.DataSet> is then returned. To accomplish this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is an SQL SELECT statement.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.oledb.oled_7_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.oledb.oled_7_1.cs)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("RowUpdated")]

      [System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public sealed class OleDbDataAdapter : System.Data.Common.DbDataAdapter, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DataAdapter
  - System.Data.Common.DbDataAdapter
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  - System.Data.Common.DbDataAdapter.ClearBatch
  - System.Data.Common.DbDataAdapter.DefaultSourceTableName
  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DbDataAdapter.ExecuteBatch
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  - System.Data.Common.DbDataAdapter.FillCommandBehavior
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  - System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  - System.Data.Common.DbDataAdapter.GetFillParameters
  - System.Data.Common.DbDataAdapter.InitializeBatching
  - System.Data.Common.DbDataAdapter.TerminateBatching
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.UpdateBatchSize
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter()
  nameWithType: OleDbDataAdapter.OleDbDataAdapter()
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref> 클래스입니다."
  remarks: "인스턴스를 만들 때 <xref:System.Data.OleDb.OleDbDataAdapter>, 다음 읽기/쓰기 속성은 다음 초기 값으로 설정 됩니다.</xref:System.Data.OleDb.OleDbDataAdapter>      | 속성 | 초기 값 |   |----------------|-------------------|   | <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>| `MissingMappingAction.Passthrough`|   | <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>| `MissingSchemaAction.Add`|       속성에 대 한 별도 호출을 통해 이러한 속성의 값을 변경할 수 있습니다.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_28_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_28_1.cs)]"
  syntax:
    content: public OleDbDataAdapter ();
    parameters: []
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)
  id: '#ctor(System.Data.OleDb.OleDbCommand)'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter(OleDbCommand)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref> 지정된 된 <xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref> 로 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>속성.</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>"
  remarks: "이 구현에서 <xref:System.Data.OleDb.OleDbDataAdapter>생성자는 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>속성에 지정 된 값을는 `selectCommand` 매개 변수.</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter>       인스턴스를 만들 때 <xref:System.Data.OleDb.OleDbDataAdapter>, 다음 읽기/쓰기 속성은 다음 초기 값으로 설정 됩니다.</xref:System.Data.OleDb.OleDbDataAdapter>      | 속성 | 초기 값 |   |----------------|-------------------|   | <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>| `MissingMappingAction.Passthrough`|   | <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>| `MissingSchemaAction.Add`|       속성에 대 한 별도 호출을 통해 이러한 속성의 값을 변경할 수 있습니다.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_17_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_17_1.cs)]"
  syntax:
    content: public OleDbDataAdapter (System.Data.OleDb.OleDbCommand selectCommand);
    parameters:
    - id: selectCommand
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref> SELECT 문 또는 저장된 프로시저를이 고로 설정 하는 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>의 속성은 <xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref>.</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>"
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)
  id: '#ctor(System.String,System.Data.OleDb.OleDbConnection)'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter(String,OleDbConnection)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref> 에 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>.</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*> 클래스"
  remarks: "이 구현에서 <xref:System.Data.OleDb.OleDbDataAdapter>열고 닫습니다는 <xref:System.Data.OleDb.OleDbConnection>열려 있지 않으면.</xref:System.Data.OleDb.OleDbConnection> </xref:System.Data.OleDb.OleDbDataAdapter> 이 호출 해야 하는 응용 프로그램에 유용할 수 있습니다는 <xref:System.Data.Common.DbDataAdapter.Fill%2A>둘 이상에 대 한 메서드 <xref:System.Data.OleDb.OleDbDataAdapter>개체.</xref:System.Data.OleDb.OleDbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 경우는 <xref:System.Data.OleDb.OleDbConnection>가 이미 열려 명시적으로 호출 해야 <xref:System.Data.OleDb.OleDbConnection.Close%2A>또는 **Dispose** 합니다. 닫으려면</xref:System.Data.OleDb.OleDbConnection.Close%2A> </xref:System.Data.OleDb.OleDbConnection>       인스턴스를 만들 때 <xref:System.Data.OleDb.OleDbDataAdapter>, 다음 읽기/쓰기 속성은 다음 초기 값으로 설정 됩니다.</xref:System.Data.OleDb.OleDbDataAdapter>      | 속성 | 초기 값 |   |----------------|-------------------|   | <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>| `MissingMappingAction.Passthrough`|   | <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>| `MissingSchemaAction.Add`|       속성에 별도 호출을 통해 이러한 속성 중 하나의 값을 변경할 수 있습니다.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example#1](~/add/codesnippet/visualbasic/f3cd089b-2d52-49c5-b101-_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example#1](~/add/codesnippet/csharp/f3cd089b-2d52-49c5-b101-_1.cs)]"
  syntax:
    content: public OleDbDataAdapter (string selectCommandText, System.Data.OleDb.OleDbConnection selectConnection);
    parameters:
    - id: selectCommandText
      type: System.String
      description: "SQL SELECT 문 또는 저장된 프로시저에서 사용 되는 문자열은 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>의 속성은 <xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref>.</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>"
    - id: selectConnection
      type: System.Data.OleDb.OleDbConnection
      description: "<xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref> 연결을 나타내는입니다."
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter(String,String)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref> 에 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>.</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*> 클래스"
  remarks: "이 오버 로드는 <xref:System.Data.OleDb.OleDbDataAdapter>생성자 사용 하 여는 `selectConnectionString` 매개 변수를 설정 된 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>속성.</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter> 그러나 연결이 열리지 않습니다. 여전히 명시적으로 열어야 연결 합니다.       인스턴스를 만들 때 <xref:System.Data.OleDb.OleDbDataAdapter>, 다음 읽기/쓰기 속성은 다음 초기 값으로 설정 됩니다.</xref:System.Data.OleDb.OleDbDataAdapter>      | 속성 | 초기 값 |   |----------------|-------------------|   | <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>| `MissingMappingAction.Passthrough`|   | <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>| `MissingSchemaAction.Add`|       속성에 대 한 별도 호출을 통해 이러한 속성의 값을 변경할 수 있습니다.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_4_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_4_1.cs)]"
  syntax:
    content: public OleDbDataAdapter (string selectCommandText, string selectConnectionString);
    parameters:
    - id: selectCommandText
      type: System.String
      description: "SQL SELECT 문 또는 저장된 프로시저에서 사용 되는 문자열은 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>의 속성은 <xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref>.</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>"
    - id: selectConnectionString
      type: System.String
      description: "연결 문자열입니다."
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "추가할 수 있습니다."
    - id: command
      type: System.Data.IDbCommand
      description: "추가할 수 있습니다."
    - id: statementType
      type: System.Data.StatementType
      description: "추가할 수 있습니다."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "추가할 수 있습니다."
    return:
      type: System.Data.Common.RowUpdatedEventArgs
      description: "추가할 수 있습니다."
  overload: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "추가할 수 있습니다."
    - id: command
      type: System.Data.IDbCommand
      description: "추가할 수 있습니다."
    - id: statementType
      type: System.Data.StatementType
      description: "추가할 수 있습니다."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "추가할 수 있습니다."
    return:
      type: System.Data.Common.RowUpdatingEventArgs
      description: "추가할 수 있습니다."
  overload: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  id: DeleteCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: OleDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "SQL 문 또는 저장된 프로시저는 데이터 집합에서 레코드를 삭제 하기 위한 값을 가져오거나 설정 합니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter.Update%2A>이 속성은 기본 키 정보는 <xref:System.Data.DataSet>DeleteCommand의 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>속성 및 <xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder> 사용을</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 설정 하는 경우에 자동으로 생성 될 수 있습니다</xref:System.Data.DataSet> 에 있으면 경우</xref:System.Data.Common.DbDataAdapter.Update%2A> 중 설정 하지 않으면 모든 추가 명령이 그러면에 <xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder> 이 세대 논리 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 키 열 정보를 적용. 자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다.       DeleteCommand 할당 된 경우에 이전에 만든 <xref:System.Data.OleDb.OleDbCommand>, <xref:System.Data.OleDb.OleDbCommand>가 복제 되지 않습니다.</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand> 이전에 만든에 대 한 참조를 유지 관리는 DeleteCommand <xref:System.Data.OleDb.OleDbCommand>개체입니다.</xref:System.Data.OleDb.OleDbCommand>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and DeleteCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_21_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_21_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand DeleteCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref> 하는 동안 사용 <xref:System.Data.Common.DbDataAdapter.Update*>삭제 된 행에 해당 하는 데이터 원본의 레코드를 삭제 하는 <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.OleDb.OleDbDataAdapter.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)
  id: Fill(System.Data.DataTable,System.Object)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable,Object)
  nameWithType: OleDbDataAdapter.Fill(DataTable,Object)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataTable,Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "추가 하거나 행을 새로 고칩니다는 <xref href=&quot;System.Data.DataTable&quot;> </xref> ADO에 맞게 <xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;> </xref> 또는 <xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;> </xref> 개체 지정을 사용 하 여 <xref href=&quot;System.Data.DataTable&quot;> </xref> 및 ADO 개체입니다."
  remarks: "ADO.NET 및 ADO ActiveX Data Objects () 간의 링크는 단방향 작업에는 ADO에서 데이터를 복사할 수 있다는 점에서 <xref:System.Data.DataSet>, ADO.NET에서 데이터에 대 한 업데이트가 처리 되어야 하지만.</xref:System.Data.DataSet>       Fill 메서드의이 오버 로드는 입력을 닫지 않습니다 `Recordset` 채우기 작업을 완료 합니다.       채우기의이 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리 하는 경우 및 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>OLE DB.NET Framework 데이터 공급자를 검색 한 첫 번째 결과 대 한 스키마 정보에 대 한.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       지정된 된 대상에 행을 추가 하는 채우기 작업 <xref:System.Data.DataTable>개체는 <xref:System.Data.DataSet>만들기는 <xref:System.Data.DataTable>경우 이미 없는 개체.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> 만들 때 한 <xref:System.Data.DataTable>개체 채우기 작업에는 일반적으로 열 이름 메타 데이터만 만듭니다.</xref:System.Data.DataTable> 그러나 경우는 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>속성이 `AddWithKey`, 적절 한 기본 키와 제약 조건도 만들어집니다.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>       동일한 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 여러 번 Fill 메서드를 사용할 수 있습니다. 기본 키가 있는 경우 이미 존재 하는 일치 하는 행과 들어오는 행이 병합 됩니다. 기본 키가 없으면 들어오는 행을 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 추가 기본 키 정보가 있는 경우 중복 행 조정 되어 <xref:System.Data.DataTable> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 해당 하는</xref:System.Data.DataTable> 에서 한 번만 표시 통해 기본 키 정보가 설정할 수 있습니다 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>를 지정 하 여는 <xref:System.Data.DataTable.PrimaryKey%2A>속성은 <xref:System.Data.DataTable>, 하거나 설정 하 여는 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>속성을 `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       경우는 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>OUTER JOIN의 결과 반환 된 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 결과 대 한 값</xref:System.Data.DataTable.PrimaryKey%2A> 을 설정 하지 않는</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 중복 행을 올바르게 확인할 수 있도록 하려면 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 참조 [기본 키 정의](~/add/includes/ajax-current-ext-md.md)합니다.       .NET Framework Data provider for OLE DB 제대로 작동 하려면 `AddWithKey` 하기 위해서는 네이티브 OLE DB 공급자 DBPROP_UNIQUEROWS 속성을 설정 하 여 필요한 기본 키 정보를 가져옵니다를 기본이 되는 열을 확인 한 다음 DBCOLUMN_KEYCOLUMN에서 검사 하 여 키 열은 `IColumnsRowset`합니다. 사용자 수에 각 <xref:System.Data.DataTable>했습니다.</xref:System.Data.DataTable> primary key 제약 조건을 명시적으로 또는 설정 이렇게 하면 들어오는 레코드 기존 레코드와 일치 하는 대신 업데이트 된 추가 합니다.       경우는 <xref:System.Data.OleDb.OleDbDataAdapter>중복 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 &quot;*columnname*1&quot; &quot;*columnname*2&quot;,&quot;*columnname*3&quot; 등.</xref:System.Data.DataTable> </xref:System.Data.OleDb.OleDbDataAdapter> 빈 열 이름에 추가 되는 <xref:System.Data.DataTable>, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, 및에 후속 빈 열에 대 한 다음 첫 번째 열에 대 한 빈 문자열을 사용 하 여.</xref:System.Data.DataTable>       Ado에서 값 `Recordset` 또는 `Record` 개체 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 저장소에 대 한 공용 언어 런타임 형식으로 변환 됩니다      > [!CAUTION] > Fill 메서드의이 오버 로드가 암시적으로 호출 하지 않으면 `Close` 채우기 작업이 완료 될 때 ADO 개체에 있습니다. 따라서 항상 호출 `Close` ADO를 사용 하 여 작업을 마쳤으면 `Recordset` 또는 `Record` 개체입니다. 이렇게 하면 데이터 원본에 기본 연결이 적절 한 시기에 릴리스 하 고 또한 기존의 참조가 계속 존재 하는 경우 가비지 수집에서 회수 되 고 관리 되지 않는 ADO 개체 때문에 가능한 액세스 위반을 방지 합니다.       호출 하는 경우는 `TableMappings.Add` 에서 메서드는 `DataAdapter` 및 빈 문자열을 원본 테이블 매개 변수를 명시적으로 매핑합니다, dataset 성공적으로 원본 테이블을 사용 하 여 찼는데 데이터 집합은 nothing으로 채워집니다. 예를 들어 다음 예제에서는에서 `rDataSet` 아무 것도 없으면 채워집니다.      ```   rAdapter.TableMappings.Add(&quot;source table&quot;, &quot;&quot;);   rAdapter.Fill(rDataSet, &quot;source table&quot;);      ```이 예제에서는 어떻게 여러 결과 처리할 때 결과 건너뛸 수 있습니다.       다음 예제에서는 <xref:System.Data.OleDb.OleDbDataAdapter>채울는 <xref:System.Data.DataTable>ADO를 사용 하 여 `Recordset`.</xref:System.Data.DataTable> </xref:System.Data.OleDb.OleDbDataAdapter> 이 예제 ADO 만들었다고 가정 `Recordset`합니다.      ```vb#   Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()        Dim custDS As DataSet = New DataSet        Dim custTable As DataTable = New DataTable(&quot;Customers&quot;)        custTable.Columns.Add(&quot;CustomerID&quot;, Type.GetType(&quot;System.String&quot;))        custTable.Columns.Add(&quot;CompanyName&quot;, Type.GetType(&quot;System.String&quot;))        custDS.Tables.Add(custTable)        &quot;Use ADO objects from ADO library (msado15.dll) imported        &quot; as.NET library ADODB.dll using TlbImp.exe        Dim adoConn As ADODB.Connection = New ADODB.Connection()        Dim adoRS As ADODB.Recordset = New ADODB.Recordset()        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1)        adoRS.Open(&quot;SELECT CustomerID, CompanyName FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)        custDA.Fill(custTable, adoRS)        adoRS.Close()        adoConn.Close()   ```      ```c#   OleDbDataAdapter custDA = new OleDbDataAdapter();        DataSet custDS = new DataSet();        DataTable custTable = new DataTable(&quot;Customers&quot;);        custTable.Columns.Add(&quot;CustomerID&quot;, typeof(String));        custTable.Columns.Add(&quot;CompanyName&quot;, typeof(String));        custDS.Tables.Add(custTable);        //Use ADO objects from ADO library (msado15.dll) imported        //  as.NET library ADODB.dll using TlbImp.exe        ADODB.Connection adoConn = new ADODB.Connection();        ADODB.Recordset adoRS = new ADODB.Recordset();        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1);        adoRS.Open(&quot;SELECT CustomerID, CompanyName FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);        custDA.Fill(custTable, adoRS);        adoRS.Close();        adoConn.Close();   ```"
  syntax:
    content: public int Fill (System.Data.DataTable dataTable, object ADODBRecordSet);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 레코드로 채울 및 필요한 경우 스키마입니다."
    - id: ADODBRecordSet
      type: System.Object
      description: "An ADO <xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;></xref> object."
    return:
      type: System.Int32
      description: "행 개수는 성공적으로 새로 고쳐진는 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다. 이 행을 반환 하지 않는 문에 의해 영향을 받는 행을 포함 되지 않습니다."
  overload: System.Data.OleDb.OleDbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)
  id: Fill(System.Data.DataSet,System.Object,System.String)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Object,String)
  nameWithType: OleDbDataAdapter.Fill(DataSet,Object,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataSet,Object,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "추가 하거나에서 행을 새로 고칩니다는 <xref href=&quot;System.Data.DataSet&quot;> </xref> ADO에 맞게 <xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;> </xref> 또는 <xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;> </xref> 개체 지정을 사용 하 여 <xref href=&quot;System.Data.DataSet&quot;> </xref>, ADO 개체 및 원본 테이블 이름입니다."
  remarks: "ADO.NET 및 ADO ActiveX Data Objects () 간의 링크는 단방향 작업에는 ADO에서 데이터를 복사할 수 있다는 점에서 <xref:System.Data.DataSet>, ADO.NET에서 데이터에 대 한 업데이트가 처리 되어야 하지만.</xref:System.Data.DataSet>       <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>메서드를 호출 하 여 여러 결과를 반복 합니다.는 `NextRecordset` 메서드를는 `Recordset`, 입력 닫는 `Recordset` 의 완료에는 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>작업.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>       <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>지정된 된 대상에 행을 추가 하는 작업 <xref:System.Data.DataTable>개체는 <xref:System.Data.DataSet>만들기는 <xref:System.Data.DataTable>경우 이미 없는 개체.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 만들 때 한 <xref:System.Data.DataTable>개체는 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>작업은 일반적으로 열 이름 메타 데이터만 만듭니다.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.DataTable> 그러나 경우는 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>속성이 `AddWithKey`, 적절 한 기본 키와 제약 조건도 만들어집니다.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>       기본 키 정보가 있는 경우 중복 행 조정 되어 <xref:System.Data.DataTable> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 해당 하는</xref:System.Data.DataTable> 에서 한 번만 표시 통해 기본 키 정보가 설정할 수 있습니다 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>를 지정 하 여는 <xref:System.Data.DataTable.PrimaryKey%2A>속성은 <xref:System.Data.DataTable>, 하거나 설정 하 여는 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>속성을 `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       .NET Framework Data provider for OLE DB 제대로 작동 하려면 `AddWithKey` DBPROP_UNIQUEROWS 속성을 설정 하 여 필요한 기본 키 정보를 가져올 확인 한 다음 기본이 되는 열을 네이티브 OLE DB provider가 필요에 DBCOLUMN_KEYCOLUMN를 검사 하 여 키 열은 **IColumnsRowset**합니다. 사용자 수에 각 <xref:System.Data.DataTable>했습니다.</xref:System.Data.DataTable> primary key 제약 조건을 명시적으로 또는 설정 이렇게 하면 대신 기존 레코드와 일치 하는 들어오는 레코드 업데이트 되도록 추가 됩니다.       경우는 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>OUTER JOIN의 결과 반환 된 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 결과 대 한 값</xref:System.Data.DataTable.PrimaryKey%2A> 을 설정 하지 않는</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 중복 행을 올바르게 확인할 수 있도록 하려면 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 참조 [기본 키 정의](~/add/includes/ajax-current-ext-md.md)합니다.       경우는 `Recordset` 의 시작 하기 전에 닫혀는 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>작업, 오류가 발생 하지 않습니다.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 행을 반환 하지 않는 쿼리가 표시 되기 때문에 이것이 필요 여러 결과 처리에 닫힌 하 여 `Recordset`합니다. <xref:System.Data.OleDb.OleDbDataAdapter>호출 `NextRecordset` 닫힌에 `Recordset` 하 고 처리를 계속 합니다.</xref:System.Data.OleDb.OleDbDataAdapter>       오류가 발생 하기 전에 추가 된 행에 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 남아 데이터 집합을 채우는 동안 오류 발생 작업의 나머지 부분 중단 됩니다.       경우는 <xref:System.Data.Common.DbDataAdapter>개체 중복 된 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 &quot;*columnname*1&quot; &quot;*columnname*2&quot;,&quot;*columnname*3&quot; 등.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet> 여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>각 결과 집합은 별도 테이블에 배치 됩니다.</xref:System.Data.DataSet> 추가 결과 집합이 지정한 테이블 이름 (예를 들어 &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하는 응용 프로그램 명명 패턴과 충돌 하지 않도록 해야 합니다.       Ado에서 값 `Recordset` 또는 `Record` 개체 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 저장소에 대 한 공용 언어 런타임 형식으로 변환 됩니다      > [!NOTE] >이 오버 로드는 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>메서드를 암시적으로 호출 `Close` 채우기 작업이 완료 되 면 ADO 개체에서.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>       다음 예제에서는 <xref:System.Data.OleDb.OleDbDataAdapter>채울는 <xref:System.Data.DataSet>ADO를 사용 하 여 `Recordset` ADO 즉 `Record` 개체입니다.</xref:System.Data.DataSet> </xref:System.Data.OleDb.OleDbDataAdapter> 이 예제 ADO 만들었다고 가정 `RecordSet` 및 `Record` 개체입니다.      ```vb#   Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()        Dim custDS As DataSet = New DataSet        &quot;Use ADO objects from ADO library (msado15.dll) imported        &quot; as.NET library ADODB.dll using TlbImp.exe        Dim adoConn As ADODB.Connection = New ADODB.Connection()        Dim adoRS As ADODB.Recordset = New ADODB.Recordset()        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1)        adoRS.Open(&quot;SELECT * FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)        custDA.Fill(custDS, adoRS, &quot;Customers&quot;)        adoConn.Close()   ```      ```c#   OleDbDataAdapter custDA = new OleDbDataAdapter();        DataSet custDS = new DataSet();        //Use ADO objects from ADO library (msado15.dll) imported        // as.NET library ADODB.dll using TlbImp.exe        ADODB.Connection adoConn = new ADODB.Connection();        ADODB.Recordset adoRS = new ADODB.Recordset();        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1);        adoRS.Open(&quot;SELECT * FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);        custDA.Fill(custDS, adoRS, &quot;Customers&quot;);        adoConn.Close();   ```"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, object ADODBRecordSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> 레코드로 채울 및 필요한 경우 스키마입니다."
    - id: ADODBRecordSet
      type: System.Object
      description: "An ADO <xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;></xref> object."
    - id: srcTable
      type: System.String
      description: "테이블 매핑에 사용할 원본 테이블입니다."
    return:
      type: System.Int32
      description: "행 수가 성공적으로 추가 하거나 새로 고쳐지지는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다. 이 행을 반환 하지 않는 문에 의해 영향을 받는 행을 포함 되지 않습니다."
  overload: System.Data.OleDb.OleDbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "원본 테이블이 올바르지 않습니다."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand
  id: InsertCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: InsertCommand
  nameWithType: OleDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "SQL 문 또는 데이터 원본에 새 레코드를 삽입 하는 데 사용 되는 저장된 프로시저를 가져오거나 설정 합니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter.Update%2A>이 속성은 기본 키 정보는 <xref:System.Data.DataSet>InsertCommand의 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>속성 및 <xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder> 사용을</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 설정 하는 경우에 자동으로 생성 될 수 있습니다</xref:System.Data.DataSet> 에 있으면 경우</xref:System.Data.Common.DbDataAdapter.Update%2A> 중 설정 하지 않으면 모든 추가 명령이 그러면에 <xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder> 이 세대 논리 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 키 열 정보를 적용. 자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다.       InsertCommand 할당 된 경우에 이전에 만든 <xref:System.Data.OleDb.OleDbCommand>, <xref:System.Data.OleDb.OleDbCommand>가 복제 되지 않습니다.</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand> 이전에 만든에 대 한 참조를 유지 관리는 InsertCommand <xref:System.Data.OleDb.OleDbCommand>개체입니다.</xref:System.Data.OleDb.OleDbCommand>      > [!NOTE] > 행을 반환 하는이 명령 실행 하는 경우 이러한 행에 추가할 수 있습니다는 <xref:System.Data.DataSet>어떻게 설정 하느냐에 따라는 <xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A>의 속성은 <xref:System.Data.OleDb.OleDbCommand>개체입니다.</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and InsertCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_9_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_9_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand InsertCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref> 하는 동안 사용 <xref:System.Data.Common.DbDataAdapter.Update*>새 행에 해당 하는 데이터 원본에서 레코드를 삽입 하는 <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.OleDb.OleDbDataAdapter.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatedEventArgs
      description: "추가할 수 있습니다."
  overload: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatingEventArgs
      description: "추가할 수 있습니다."
  overload: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdated
  id: RowUpdated
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: RowUpdated
  nameWithType: OleDbDataAdapter.RowUpdated
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdated
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "중에 발생 <xref:System.Data.Common.DbDataAdapter.Update*>데이터 원본에 대해 명령이 실행 된 후.</xref:System.Data.Common.DbDataAdapter.Update*> 업데이트를 시도 합니다. 따라서 이벤트 발생합니다."
  remarks: "사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>, 업데이트 하는 데이터 행 단위로 발생 하는 두 가지 이벤트가 있습니다.</xref:System.Data.Common.DbDataAdapter.Update%2A> 실행 순서는 다음과 같습니다: 1.  값은 <xref:System.Data.DataRow>매개 변수 값으로 이동 됩니다.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  명령을 실행합니다.      4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`, 첫 번째 반환 결과 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 에 놓입니다.      5.  출력 매개 변수가 있는 경우 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 배치      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>가 호출 됩니다.</xref:System.Data.DataRow.AcceptChanges%2A>"
  example:
  - "The following example shows the <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> and RowUpdated events being used.  \n  \n [!code-cs[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/csharp/e-system.data.oledb.oled_1_1.cs)]\n [!code-vb[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/visualbasic/e-system.data.oledb.oled_1_1.vb)]"
  syntax:
    content: public event System.Data.OleDb.OleDbRowUpdatedEventHandler RowUpdated;
    return:
      type: System.Data.OleDb.OleDbRowUpdatedEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdating
  id: RowUpdating
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: RowUpdating
  nameWithType: OleDbDataAdapter.RowUpdating
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdating
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "중에 발생 <xref:System.Data.Common.DbDataAdapter.Update*>데이터 원본에 대해 명령을 실행 하기 전에.</xref:System.Data.Common.DbDataAdapter.Update*> 업데이트를 시도 합니다. 따라서 이벤트 발생합니다."
  remarks: "사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>, 업데이트 하는 데이터 행 단위로 발생 하는 두 가지 이벤트가 있습니다.</xref:System.Data.Common.DbDataAdapter.Update%2A> 실행 순서는 다음과 같습니다: 1.  값은 <xref:System.Data.DataRow>매개 변수 값으로 이동 됩니다.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  명령을 실행합니다.      4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`, 첫 번째 반환 결과 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 에 놓입니다.      5.  출력 매개 변수가 있는 경우 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 배치      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>가 호출 됩니다.</xref:System.Data.DataRow.AcceptChanges%2A>"
  example:
  - "The following example shows the RowUpdating and <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdated> events being used.  \n  \n [!code-cs[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/csharp/e-system.data.oledb.oled_0_1.cs)]\n [!code-vb[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/visualbasic/e-system.data.oledb.oled_0_1.vb)]"
  syntax:
    content: public event System.Data.OleDb.OleDbRowUpdatingEventHandler RowUpdating;
    return:
      type: System.Data.OleDb.OleDbRowUpdatingEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand
  id: SelectCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: SelectCommand
  nameWithType: OleDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "SQL 문 또는 데이터 원본에서 레코드를 선택 하는 데 사용 되는 저장된 프로시저를 가져오거나 설정 합니다."
  remarks: "SelectCommand 할당 된 경우에 이전에 만든 <xref:System.Data.OleDb.OleDbCommand>, <xref:System.Data.OleDb.OleDbCommand>가 복제 되지 않습니다.</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand> 이전에 만든에 대 한 참조를 유지 관리 SelectCommand <xref:System.Data.OleDb.OleDbCommand>개체입니다.</xref:System.Data.OleDb.OleDbCommand>       에 테이블이 추가 된 SelectCommand 행을 반환 하는 경우는 <xref:System.Data.DataSet>, 예외가 발생 하지 않습니다.</xref:System.Data.DataSet>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the SelectCommand and <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_3_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_3_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand SelectCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref> 중 사용 되는 <xref:System.Data.Common.DbDataAdapter.Fill*>에 배치 하기 위해 데이터 원본에서 레코드를 선택는 <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.Common.DbDataAdapter.Fill*>"
  overload: System.Data.OleDb.OleDbDataAdapter.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  id: System#Data#IDbDataAdapter#DeleteCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "이 멤버에 대 한 참조 <xref:System.Data.IDbDataAdapter.DeleteCommand*>.</xref:System.Data.IDbDataAdapter.DeleteCommand*>"
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.OleDb.OleDbDataAdapter>인스턴스로 캐스팅 되는 <xref:System.Data.IDbDataAdapter>인터페이스.</xref:System.Data.IDbDataAdapter> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> 업데이트 하는 동안 데이터 집합에서 삭제 된 행에 대 한 데이터 원본에서 레코드를 삭제 하는 데 사용 합니다."
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  id: System#Data#IDbDataAdapter#InsertCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "이 멤버에 대 한 참조 <xref:System.Data.IDbDataAdapter.InsertCommand*>.</xref:System.Data.IDbDataAdapter.InsertCommand*>"
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.OleDb.OleDbDataAdapter>인스턴스로 캐스팅 되는 <xref:System.Data.IDbDataAdapter>인터페이스.</xref:System.Data.IDbDataAdapter> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> 데 사용 되는 업데이트 하는 동안 데이터 집합에 배치 하기 위해 데이터 원본에서 레코드를 삽입 합니다."
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  id: System#Data#IDbDataAdapter#SelectCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "이 멤버에 대 한 참조 <xref:System.Data.IDbDataAdapter.SelectCommand*>.</xref:System.Data.IDbDataAdapter.SelectCommand*>"
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.OleDb.OleDbDataAdapter>인스턴스로 캐스팅 되는 <xref:System.Data.IDbDataAdapter>인터페이스.</xref:System.Data.IDbDataAdapter> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> 업데이트 중에 사용 하는 데이터 집합에 배치 하기 위해 데이터 원본에서 레코드를 선택 합니다."
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  id: System#Data#IDbDataAdapter#UpdateCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "이 멤버에 대 한 참조 <xref:System.Data.IDbDataAdapter.UpdateCommand*>.</xref:System.Data.IDbDataAdapter.UpdateCommand*>"
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.OleDb.OleDbDataAdapter>인스턴스로 캐스팅 되는 <xref:System.Data.IDbDataAdapter>인터페이스.</xref:System.Data.IDbDataAdapter> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> 데이터 집합의 수정 된 행에 대 한 데이터 원본에는 업데이트에 업데이트 레코드 중에 사용 합니다."
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: OleDbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.OleDb.OleDbDataAdapter.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "이 멤버에 대 한 참조 &lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;합니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.OleDb.OleDbDataAdapter>인스턴스로 캐스팅 되는 <xref:System.ICloneable>인터페이스.</xref:System.ICloneable> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "새 <xref:System.Object>이 인스턴스의 복사본입니다.</xref:System.Object>"
  overload: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  id: UpdateCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: OleDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "SQL 문 또는 데이터 원본에서 레코드를 업데이트 하는 데 사용 되는 저장된 프로시저를 가져오거나 설정 합니다."
  remarks: "<xref:System.Data.Common.DbDataAdapter.Update%2A>이 속성은 기본 키 정보는 <xref:System.Data.DataSet>UpdateCommand의 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>속성 및 <xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder> 사용을</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 설정 하는 경우에 자동으로 생성 될 수 있습니다</xref:System.Data.DataSet> 에 있으면 경우</xref:System.Data.Common.DbDataAdapter.Update%2A> 중 설정 하지 않으면 모든 추가 명령이 그러면에 <xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder> 이 세대 논리 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 키 열 정보를 적용. 자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다.       UpdateCommand 할당 된 경우에 이전에 만든 <xref:System.Data.OleDb.OleDbCommand>, <xref:System.Data.OleDb.OleDbCommand>가 복제 되지 않습니다.</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand> 이전에 만든에 대 한 참조를 유지 관리는 UpdateCommand <xref:System.Data.OleDb.OleDbCommand>개체입니다.</xref:System.Data.OleDb.OleDbCommand>      > [!NOTE] > 행을 반환 하는이 명령 실행 하는 경우 이러한 행으로 병합 될 수 있습니다는 <xref:System.Data.DataSet>어떻게 설정 하느냐에 따라는 <xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A>의 속성은 <xref:System.Data.OleDb.OleDbCommand>개체입니다.</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and UpdateCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_7_1.cs)]\n [!code-vb[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_7_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand UpdateCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref> 하는 동안 사용 <xref:System.Data.Common.DbDataAdapter.Update*>수정 된 행에 해당 하는 데이터 원본에서 레코드를 업데이트 하는 <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.OleDb.OleDbDataAdapter.UpdateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.Common.DbDataAdapter
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter()
  nameWithType: OleDbDataAdapter.OleDbDataAdapter()
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter()
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter(OleDbCommand)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
- uid: System.Data.OleDb.OleDbCommand
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbCommand
  nameWithType: OleDbCommand
  fullName: System.Data.OleDb.OleDbCommand
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter(String,OleDbConnection)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.OleDb.OleDbConnection
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbConnection
  nameWithType: OleDbConnection
  fullName: System.Data.OleDb.OleDbConnection
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter(String,String)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,String)
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatedEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatedEventArgs
  nameWithType: RowUpdatedEventArgs
  fullName: System.Data.Common.RowUpdatedEventArgs
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Data.Common.DataTableMapping
  parent: System.Data.Common
  isExternal: false
  name: DataTableMapping
  nameWithType: DataTableMapping
  fullName: System.Data.Common.DataTableMapping
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatingEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatingEventArgs
  nameWithType: RowUpdatingEventArgs
  fullName: System.Data.Common.RowUpdatingEventArgs
- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: OleDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: Fill(DataTable,Object)
  nameWithType: OleDbDataAdapter.Fill(DataTable,Object)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataTable,Object)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: Fill(DataSet,Object,String)
  nameWithType: OleDbDataAdapter.Fill(DataSet,Object,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataSet,Object,String)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: OleDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdated
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: RowUpdated
  nameWithType: OleDbDataAdapter.RowUpdated
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdated
- uid: System.Data.OleDb.OleDbRowUpdatedEventHandler
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbRowUpdatedEventHandler
  nameWithType: OleDbRowUpdatedEventHandler
  fullName: System.Data.OleDb.OleDbRowUpdatedEventHandler
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdating
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: RowUpdating
  nameWithType: OleDbDataAdapter.RowUpdating
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdating
- uid: System.Data.OleDb.OleDbRowUpdatingEventHandler
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbRowUpdatingEventHandler
  nameWithType: OleDbRowUpdatingEventHandler
  fullName: System.Data.OleDb.OleDbRowUpdatingEventHandler
- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: OleDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: OleDbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.OleDb.OleDbDataAdapter.System.ICloneable.Clone()
- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: OleDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter
  nameWithType: OleDbDataAdapter.OleDbDataAdapter
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent
  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent
  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent
- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: OleDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.Fill*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: Fill
  nameWithType: OleDbDataAdapter.Fill
- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: OleDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdated
  nameWithType: OleDbDataAdapter.OnRowUpdated
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdating
  nameWithType: OleDbDataAdapter.OnRowUpdating
- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: OleDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: OleDbDataAdapter.System.ICloneable.Clone
- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: OleDbDataAdapter.UpdateCommand
