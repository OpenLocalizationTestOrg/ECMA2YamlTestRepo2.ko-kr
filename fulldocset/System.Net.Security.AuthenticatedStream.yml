### YamlMime:ManagedReference
items:
- uid: System.Net.Security.AuthenticatedStream
  id: AuthenticatedStream
  children:
  - System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)
  - System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  - System.Net.Security.AuthenticatedStream.InnerStream
  - System.Net.Security.AuthenticatedStream.IsAuthenticated
  - System.Net.Security.AuthenticatedStream.IsEncrypted
  - System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  - System.Net.Security.AuthenticatedStream.IsServer
  - System.Net.Security.AuthenticatedStream.IsSigned
  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  langs:
  - csharp
  name: AuthenticatedStream
  nameWithType: AuthenticatedStream
  fullName: System.Net.Security.AuthenticatedStream
  type: Class
  summary: "스트림 전체에서 자격 증명을 전달 하 고 요청 또는 클라이언트-서버 응용 프로그램에 대 한 인증을 수행에 대 한 메서드를 제공 합니다."
  remarks: "이 추상 클래스는 인증 된 스트림에 공통적인 속성과 메서드를 제공 합니다.       인증 된 스트림에 인증, 데이터 서명 및 무결성 및 <xref:System.Net.Security.AuthenticatedStream.InnerStream%2A>.</xref:System.Net.Security.AuthenticatedStream.InnerStream%2A> 를 사용 하 여 전송 하는 데이터의 기밀을 유지 하는 데 도움이 되는 암호화 서비스를 제공할 수 있습니다.       클라이언트와 서버에서 지 원하는 보안 프로토콜 함께 AuthenticatedStream에서 파생 된 클래스에서 구현 되는 보안 프로토콜에서 응용 프로그램에 사용할 수 있는 보안 기능을 결정 합니다. <xref:System.Net.Security.NegotiateStream>및 <xref:System.Net.Security.SslStream>클래스 AuthenticatedStream에서 상속 하 고 각각 Negotiate 및 Secure Sockets Layer 보안 프로토콜을 구현 합니다.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the properties of an authenticated stream.  \n  \n [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/t-system.net.security.au_1.cpp)]\n [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/t-system.net.security.au_1.cs)]"
  syntax:
    content: 'public abstract class AuthenticatedStream : System.IO.Stream'
  inheritance:
  - System.IO.Stream
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: AuthenticatedStream(Stream,Boolean)
  nameWithType: AuthenticatedStream.AuthenticatedStream(Stream,Boolean)
  fullName: System.Net.Security.AuthenticatedStream.AuthenticatedStream(Stream,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Net.Security.AuthenticatedStream&quot;> </xref> 클래스입니다."
  remarks: "지정 하는 경우 `true` 에 대 한는 `leaveStreamOpen` 닫는 매개 변수는 <xref:System.Net.Security.AuthenticatedStream>영향을 주지 않습니다는 `innerStream` 스트림.</xref:System.Net.Security.AuthenticatedStream>       이 생성자는 인증 된 스트림의 구현자에 대 한 제공 되며 <xref:System.Net.Security.AuthenticatedStream>.</xref:System.Net.Security.AuthenticatedStream> 에서 파생 된 클래스 에서만 호출 될 수 있습니다."
  syntax:
    content: protected AuthenticatedStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>에서 사용 하는 개체는 <xref href=&quot;System.Net.Security.AuthenticatedStream&quot;> </xref> 데이터 보내기 및 받기에 대 한.</xref:System.IO.Stream>"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "A <xref:System.Boolean>나타내는 여부이 <xref href=&quot;System.Net.Security.AuthenticatedStream&quot;> </xref> 개체도 닫힙니다. `innerStream`.</xref:System.Boolean>"
  overload: System.Net.Security.AuthenticatedStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -또는- <code>innerStream</code> 같으면 <xref:System.IO.Stream.Null>합니다."
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: AuthenticatedStream.Dispose(Boolean)
  fullName: System.Net.Security.AuthenticatedStream.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Net.Security.AuthenticatedStream&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public `Dispose()`메서드 및 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> `Dispose()`보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다. <xref:System.Object.Finalize%2A>호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</xref:System.Object.Finalize%2A>       경우는 `disposing` 매개 변수가 true 이면이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Net.Security.AuthenticatedStream>참조.</xref:System.Net.Security.AuthenticatedStream> 이 메서드 호출에서 `Dispose()` 각 참조 된 개체의 메서드."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Net.Security.AuthenticatedStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.InnerStream
  id: InnerStream
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: InnerStream
  nameWithType: AuthenticatedStream.InnerStream
  fullName: System.Net.Security.AuthenticatedStream.InnerStream
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "사용 하는 스트림을 가져옵니다 <xref href=&quot;System.Net.Security.AuthenticatedStream&quot;> </xref> 데이터 보내기 및 받기에 대 한 합니다."
  remarks: "<xref:System.Net.Security.AuthenticatedStream> <xref:System.Net.Security.AuthenticatedStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29>.</xref:System.Net.Security.AuthenticatedStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> 에 전달 된 스트림을 액세스 하도록이 속성을 사용할 수</xref:System.Net.Security.AuthenticatedStream> 에서 상속 된 클래스"
  syntax:
    content: protected System.IO.Stream InnerStream { get; }
    return:
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>개체입니다.</xref:System.IO.Stream>"
  overload: System.Net.Security.AuthenticatedStream.InnerStream*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: AuthenticatedStream.IsAuthenticated
  fullName: System.Net.Security.AuthenticatedStream.IsAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "가져옵니다는 <xref:System.Boolean>인증의 성공 여부를 나타내는 값입니다.</xref:System.Boolean>"
  remarks: "<xref:System.Net.Security.AuthenticatedStream>.</xref:System.Net.Security.AuthenticatedStream> 에서 상속 된 클래스에 정의 된 인증을 수행 하도록 호출 하는 메서드"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_3_1.cpp)]\n [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_3_1.cs)]"
  syntax:
    content: public abstract bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>인증이 성공 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.Security.AuthenticatedStream.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.IsEncrypted
  id: IsEncrypted
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: IsEncrypted
  nameWithType: AuthenticatedStream.IsEncrypted
  fullName: System.Net.Security.AuthenticatedStream.IsEncrypted
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "가져옵니다는 <xref:System.Boolean>데이터에이 사용 하 여 보낼지 여부를 나타내는 값 <xref href=&quot;System.Net.Security.AuthenticatedStream&quot;> </xref> 암호화 됩니다.</xref:System.Boolean>"
  remarks: "암호화가 데이터의 개인 정보를 보호 하는 즉,는 데이터를 전송 하는 동안 해독할 수 없으므로 제&3; 자가 확인할 수 있습니다."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_0_1.cpp)]\n [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_0_1.cs)]"
  syntax:
    content: public abstract bool IsEncrypted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>데이터는 네트워크를 통해 전송 되기 전에 암호화 및 암호를 해독 하는 경우에 도달한 경우에 원격 끝점이; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.Security.AuthenticatedStream.IsEncrypted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  id: IsMutuallyAuthenticated
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: IsMutuallyAuthenticated
  nameWithType: AuthenticatedStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "가져옵니다는 <xref:System.Boolean>서버와 클라이언트 모두 인증 되었는지 여부를 나타내는 값입니다.</xref:System.Boolean>"
  remarks: "일부 보안 프로토콜 상호 인증을 지원 합니다. 상속 된 클래스에서 구현 되는 보안 프로토콜에서 상호 인증을 지원 하는지 여부를 확인 하려면 <xref:System.Net.Security.AuthenticatedStream>, 클래스 설명서를 참조 합니다.</xref:System.Net.Security.AuthenticatedStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_4_1.cpp)]\n [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_4_1.cs)]"
  syntax:
    content: public abstract bool IsMutuallyAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>클라이언트와 서버; 인증 된 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.IsServer
  id: IsServer
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: IsServer
  nameWithType: AuthenticatedStream.IsServer
  fullName: System.Net.Security.AuthenticatedStream.IsServer
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "가져옵니다는 <xref:System.Boolean>연결의 로컬 측 서버로 인증 되었는지 여부를 나타내는 값입니다.</xref:System.Boolean>"
  remarks: "클라이언트 서버 인증에 사용 되는 대부분의 보안 프로토콜에는 특정 동작과 클라이언트 또는 서버 인지에 따라 인증에 대 한 자격 증명을 제공 하는 것에 대 한 요구 사항을 정의 합니다."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_2_1.cpp)]\n [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_2_1.cs)]"
  syntax:
    content: public abstract bool IsServer { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>로컬 끝점; 인증 된 클라이언트-서버 연결의 서버 쪽으로 인증 된 경우 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 로컬 끝점에서 클라이언트 인증 하는 경우."
  overload: System.Net.Security.AuthenticatedStream.IsServer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.IsSigned
  id: IsSigned
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: IsSigned
  nameWithType: AuthenticatedStream.IsSigned
  fullName: System.Net.Security.AuthenticatedStream.IsSigned
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "가져옵니다는 <xref:System.Boolean>이 스트림을 사용 하 여 전송 된 데이터가 서명 되었는지 여부를 나타내는 값입니다.</xref:System.Boolean>"
  remarks: "데이터의 무결성을 보호 하는 데 도움이 데이터 서명 즉, 수신자가 데이터가 전송 중에 있는 훼손 되었는지 여부를 확인할 수 있습니다."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_1_1.cpp)]\n [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_1_1.cs)]"
  syntax:
    content: public abstract bool IsSigned { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>데이터를 전송 하기 전에 서명 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.Security.AuthenticatedStream.IsSigned*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  id: LeaveInnerStreamOpen
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: LeaveInnerStreamOpen
  nameWithType: AuthenticatedStream.LeaveInnerStreamOpen
  fullName: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "사용 하는 스트림이 있는지 여부를 가져옵니다 <xref href=&quot;System.Net.Security.AuthenticatedStream&quot;> </xref> 에 데이터 보내기 및 받기 열려 있습니다."
  remarks: "로 설정 하면 `true`,이 클래스의 인스턴스를 닫은 후이 클래스의 생성자에 전달 된 스트림을 닫히지 것입니다. 로 설정 하면 `false`,이 클래스의 인스턴스를 닫거나 전송 스트림도 닫힙니다. 이 속성의 기본값은 `false`합니다."
  syntax:
    content: public bool LeaveInnerStreamOpen { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>내부 스트림의 있으면 계속 열려 있습니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IO.Stream
  isExternal: false
  name: System.IO.Stream
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: AuthenticatedStream(Stream,Boolean)
  nameWithType: AuthenticatedStream.AuthenticatedStream(Stream,Boolean)
  fullName: System.Net.Security.AuthenticatedStream.AuthenticatedStream(Stream,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: AuthenticatedStream.Dispose(Boolean)
  fullName: System.Net.Security.AuthenticatedStream.Dispose(Boolean)
- uid: System.Net.Security.AuthenticatedStream.InnerStream
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: InnerStream
  nameWithType: AuthenticatedStream.InnerStream
  fullName: System.Net.Security.AuthenticatedStream.InnerStream
- uid: System.Net.Security.AuthenticatedStream.IsAuthenticated
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: AuthenticatedStream.IsAuthenticated
  fullName: System.Net.Security.AuthenticatedStream.IsAuthenticated
- uid: System.Net.Security.AuthenticatedStream.IsEncrypted
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsEncrypted
  nameWithType: AuthenticatedStream.IsEncrypted
  fullName: System.Net.Security.AuthenticatedStream.IsEncrypted
- uid: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: AuthenticatedStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
- uid: System.Net.Security.AuthenticatedStream.IsServer
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsServer
  nameWithType: AuthenticatedStream.IsServer
  fullName: System.Net.Security.AuthenticatedStream.IsServer
- uid: System.Net.Security.AuthenticatedStream.IsSigned
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsSigned
  nameWithType: AuthenticatedStream.IsSigned
  fullName: System.Net.Security.AuthenticatedStream.IsSigned
- uid: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: LeaveInnerStreamOpen
  nameWithType: AuthenticatedStream.LeaveInnerStreamOpen
  fullName: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
- uid: System.Net.Security.AuthenticatedStream.#ctor*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: AuthenticatedStream
  nameWithType: AuthenticatedStream.AuthenticatedStream
- uid: System.Net.Security.AuthenticatedStream.Dispose*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: Dispose
  nameWithType: AuthenticatedStream.Dispose
- uid: System.Net.Security.AuthenticatedStream.InnerStream*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: InnerStream
  nameWithType: AuthenticatedStream.InnerStream
- uid: System.Net.Security.AuthenticatedStream.IsAuthenticated*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: AuthenticatedStream.IsAuthenticated
- uid: System.Net.Security.AuthenticatedStream.IsEncrypted*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsEncrypted
  nameWithType: AuthenticatedStream.IsEncrypted
- uid: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: AuthenticatedStream.IsMutuallyAuthenticated
- uid: System.Net.Security.AuthenticatedStream.IsServer*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsServer
  nameWithType: AuthenticatedStream.IsServer
- uid: System.Net.Security.AuthenticatedStream.IsSigned*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsSigned
  nameWithType: AuthenticatedStream.IsSigned
- uid: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: LeaveInnerStreamOpen
  nameWithType: AuthenticatedStream.LeaveInnerStreamOpen
