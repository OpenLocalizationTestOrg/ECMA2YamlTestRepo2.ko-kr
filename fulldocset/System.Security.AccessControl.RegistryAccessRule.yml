### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.RegistryAccessRule
  id: RegistryAccessRule
  children:
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.RegistryRights
  langs:
  - csharp
  name: RegistryAccessRule
  nameWithType: RegistryAccessRule
  fullName: System.Security.AccessControl.RegistryAccessRule
  type: Class
  summary: "허용 되거나 거부 된 사용자 또는 그룹에 대 한 액세스 권한 집합을 나타냅니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "RegistryAccessRule 클래스 레지스트리 키에 대해 Windows 액세스 제어 보안을 관리 하기 위한.NET Framework가 제공 하는 클래스 집합 중 하나입니다. 이러한 클래스와의 관계는 기본 Windows 액세스 제어 구조에 대해 간략하게 <xref:System.Security.AccessControl.RegistrySecurity>.</xref:System.Security.AccessControl.RegistrySecurity> 을 참조 하십시오.      > [!NOTE] > Windows 액세스 제어 보안 레지스트리 키에만 적용할 수 있습니다. 키에 저장 된 개별 키/값 쌍에 적용할 수 없습니다.       현재 레지스트리 키에 적용 된 규칙 목록이 사용는 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>가져올 메서드를 한 <xref:System.Security.AccessControl.RegistrySecurity>개체를 사용 하 여 해당 <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>메서드 RegistryAccessRule 개체의 컬렉션을 가져옵니다.</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.RegistrySecurity> </xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>       RegistryAccessRule 개체 내부 임의 제어 액세스 목록 (DACL)에서 액세스 제어 항목으로 일대일로 매핑되지 않습니다. 레지스트리 키에 대 한 모든 액세스 규칙 집합이 나타나면 집합은 현재 모든 액세스 제어 항목을 나타내는 데 필요한 규칙의 최소 수를 포함 합니다.      > [!NOTE] > 기본 액세스 제어 항목 변경 적용 하 고 규칙을 제거 합니다. 규칙의 정보는 액세스 제어 항목의 가장 작은 수를 유지 하기 위해 가능 하면 병합 됩니다. 따라서 규칙의 현재 목록의 읽을 때 하지 같습니다 정확 하 게 사용자가 추가한 모든 규칙의 목록입니다.       RegistryAccessRule 개체를 사용 하 여 허용 하거나 거부할 사용자 또는 그룹에 대 한 액세스 권한을 지정 합니다. 개체는 항상 나타냅니다 RegistryAccessRule 액세스가 허용 또는 둘 다 하지 액세스가 거부 합니다.       레지스트리 키에 규칙을 적용 하려면 사용 하 여는 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>가져올 메서드를는 <xref:System.Security.AccessControl.RegistrySecurity>개체입니다.</xref:System.Security.AccessControl.RegistrySecurity> </xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> 수정 된 <xref:System.Security.AccessControl.RegistrySecurity>추가 규칙을 사용 하 여 해당 메서드를 사용 하 여 개체는 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>메서드를 보안 개체를 다시 연결 합니다.</xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.RegistrySecurity>      > [!IMPORTANT] > 변경 하면는 <xref:System.Security.AccessControl.RegistrySecurity>개체를 호출 하기 전에 레지스트리 키의 액세스 수준을 적용 되지 않습니다는 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>레지스트리 키로 변경 된 보안 개체를 지정 하는 메서드.</xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.RegistrySecurity>       RegistryAccessRule 개체는 변경할 수 없습니다. 레지스트리 키에 대 한 보안의 메서드를 사용 하 여 수정 되는 <xref:System.Security.AccessControl.RegistrySecurity>규칙을 추가 하거나 제거 하는 클래스, 이렇게 하면 기본 액세스 제어 항목 수정 됩니다.</xref:System.Security.AccessControl.RegistrySecurity>"
  example:
  - "The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags> flag. The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags> and <xref:System.Security.AccessControl.PropagationFlags>.  \n  \n The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the object to create a subkey. The program creates a child subkey and a grandchild subkey, and then displays the security for each subkey. Finally, the program deletes the test keys.  \n  \n [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/visualbasic/t-system.security.access_11_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/csharp/t-system.security.access_11_1.cs)]"
  syntax:
    content: 'public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule'
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> 사용자 또는 액세스 권한으로 규칙이 적용 되는 그룹을 지정 하는 클래스 및 지정 된 액세스 권한을 허용 또는 거부 여부."
  remarks: "이 생성자는 기본 전파 및 상속을 지정합니다. 즉, <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>및 <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>.</xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName> </xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>"
  syntax:
    content: public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "사용자 또는 규칙 그룹에 적용 됩니다. 형식 이어야 합니다 <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> 또는 형식으로 <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> 변환할 수 있는 <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>합니다."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "비트 조합 <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> 된 권한을 나타내는 값을 허용 또는 거부 합니다."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "중 하나는 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> 권한 허용 여부를 나타내는 값입니다."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>잘못 된 값을 지정합니다.       -또는- <code>type</code> 잘못 된 값을 지정 합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -또는- <code>eventRights</code> 은&0;입니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>형식이 <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> 아니고과 같은 형식 <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> 변환할 수 있는 <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(String,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> 사용자 또는 규칙을 적용할 액세스 권한, 그룹의 이름을 지정 하는 클래스 및 지정 된 액세스 권한을 허용 또는 거부 여부."
  remarks: "이 생성자는 기본 전파 및 상속을 지정합니다. 즉, <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>및 <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>.</xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName> </xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>       이 생성자는 만들기는 <xref:System.Security.Principal.NTAccount>개체를 전달 하 여 `identity` 에 <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>생성자 및 새로 만든 전달 <xref:System.Security.Principal.NTAccount>개체는 <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29>생성자.</xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example creates registry access rules and adds them to a <xref:System.Security.AccessControl.RegistrySecurity> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.  \n  \n [!code-cs[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/add/codesnippet/csharp/cf7d2ba9-37b1-4239-a52a-_1.cs)]\n [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/cf7d2ba9-37b1-4239-a52a-_1.vb)]"
  syntax:
    content: public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "사용자 또는 그룹의 이름 규칙에 적용 됩니다."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "비트 조합 <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> 된 권한을 나타내는 값을 허용 또는 거부 합니다."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "중 하나는 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> 권한 허용 여부를 나타내는 값입니다."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>잘못 된 값을 지정합니다.       -또는- <code>type</code> 잘못 된 값을 지정 합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>registryRights</code>0입니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -또는- <code>identity</code> 은 길이가&0; 인 문자열입니다.       -또는- <code>identity</code> 512 자 보다 깁니다."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> 클래스, 사용자 또는 그룹 규칙을 적용할 액세스 권한, 상속 플래그를 지정 하는 전파 플래그 및 지정 된 액세스 권한을 허용 되거나 거부 된 여부."
  remarks: "All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.  \n  \n|Propagation flags|S|CS|GS|  \n|-----------------------|-------|--------|--------|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X||  \n|<xref:System.Security.AccessControl.PropagationFlags>||X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>||X||  \n  \n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \n  \n For example, if the <xref:System.Security.AccessControl.InheritanceFlags> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules."
  syntax:
    content: public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "사용자 또는 규칙 그룹에 적용 됩니다. 형식 이어야 합니다 <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> 또는 형식으로 <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> 변환할 수 있는 <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>합니다."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "비트 조합 <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> 권한을 지정 하는 값을 허용 또는 거부 합니다."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "비트 조합 <xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;> </xref> 액세스 권한을 다른 개체에서 상속 되는 방식을 지정 하는 플래그입니다."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "비트 조합 <xref href=&quot;System.Security.AccessControl.PropagationFlags&quot;> </xref> 액세스 권한을 다른 개체에 전파 되는 방법을 지정 하는 플래그입니다."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "중 하나는 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> 권한 허용 여부를 지정 하는 값입니다."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>잘못 된 값을 지정합니다.       -또는- <code>type</code> 잘못 된 값을 지정 합니다.       -또는- <code>inheritanceFlags</code> 잘못 된 값을 지정 합니다.       -또는- <code>propagationFlags</code> 잘못 된 값을 지정 합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -또는- <code>registryRights</code> 은&0;입니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>형식이 <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, 아니고과 같은 형식 <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> 변환할 수 있는 <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> 클래스, 사용자 또는 그룹 규칙을 적용할 액세스 권한, 상속 플래그의 이름을 지정 하는 전파 플래그 및 지정 된 액세스 권한을 허용 되거나 거부 된 여부."
  remarks: "All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.  \n  \n|Propagation flags|S|CS|GS|  \n|-----------------------|-------|--------|--------|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X||  \n|<xref:System.Security.AccessControl.PropagationFlags>||X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>||X||  \n  \n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \n  \n For example, if the <xref:System.Security.AccessControl.InheritanceFlags> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.  \n  \n This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> constructor."
  example:
  - "The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, and then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags> flag. The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags> and <xref:System.Security.AccessControl.PropagationFlags>.  \n  \n The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the <xref:System.Security.AccessControl.RegistrySecurity> object to create a subkey. The program creates a child subkey and a grandchild subkey, and then displays the rules for each subkey. Finally, the program deletes the test keys.  \n  \n [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/visualbasic/43217ff3-f8bd-4a0e-bd95-_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/csharp/43217ff3-f8bd-4a0e-bd95-_1.cs)]"
  syntax:
    content: public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "사용자 또는 그룹의 이름 규칙에 적용 됩니다."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "비트 조합 <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> 된 권한을 나타내는 값을 허용 또는 거부 합니다."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "비트 조합 <xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;> </xref> 액세스 권한을 다른 개체에서 상속 되는 방식을 지정 하는 플래그입니다."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "비트 조합 <xref href=&quot;System.Security.AccessControl.PropagationFlags&quot;> </xref> 액세스 권한을 다른 개체에 전파 되는 방법을 지정 하는 플래그입니다."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "중 하나는 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> 권한 허용 여부를 지정 하는 값입니다."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>잘못 된 값을 지정합니다.       -또는- <code>type</code> 잘못 된 값을 지정 합니다.       -또는- <code>inheritanceFlags</code> 잘못 된 값을 지정 합니다.       -또는- <code>propagationFlags</code> 잘못 된 값을 지정 합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>0입니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -또는- <code>identity</code> 은 길이가&0; 인 문자열입니다.       -또는- <code>identity</code> 512 자 보다 깁니다."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  id: RegistryRights
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "액세스 규칙에 따라 허용 되거나 거부 권한을 가져옵니다."
  remarks: "<xref:System.Security.AccessControl.RegistryAccessRule>개체는 변경할 수 없습니다.</xref:System.Security.AccessControl.RegistryAccessRule> 다른 사용자, 서로 다른 권한을 또는 다른를 나타내는 새 액세스 규칙을 만들 수 있습니다 <xref:System.Security.AccessControl.AccessControlType>, 있지만 기존 액세스 규칙을 수정할 수 없습니다.</xref:System.Security.AccessControl.AccessControlType>"
  syntax:
    content: public System.Security.AccessControl.RegistryRights RegistryRights { get; }
    return:
      type: System.Security.AccessControl.RegistryRights
      description: "비트 조합 <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> 값 된 권한을 나타내는 허용 또는 액세스 규칙에 의해 거부 합니다."
  overload: System.Security.AccessControl.RegistryAccessRule.RegistryRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.RegistryRights
  parent: System.Security.AccessControl
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryRights
  fullName: System.Security.AccessControl.RegistryRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(String,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryRights
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor*
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule
  nameWithType: RegistryAccessRule.RegistryAccessRule
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights*
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
