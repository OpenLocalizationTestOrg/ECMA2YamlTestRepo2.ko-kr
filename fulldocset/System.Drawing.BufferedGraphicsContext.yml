### YamlMime:ManagedReference
items:
- uid: System.Drawing.BufferedGraphicsContext
  id: BufferedGraphicsContext
  children:
  - System.Drawing.BufferedGraphicsContext.#ctor
  - System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)
  - System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)
  - System.Drawing.BufferedGraphicsContext.Dispose
  - System.Drawing.BufferedGraphicsContext.Finalize
  - System.Drawing.BufferedGraphicsContext.Invalidate
  - System.Drawing.BufferedGraphicsContext.MaximumBuffer
  langs:
  - csharp
  name: BufferedGraphicsContext
  nameWithType: BufferedGraphicsContext
  fullName: System.Drawing.BufferedGraphicsContext
  type: Class
  summary: "이중 버퍼링 하는 데 사용할 수 있는 그래픽 버퍼를 만드는 방법을 제공 합니다."
  remarks: "BufferedGraphicsContext 클래스를 사용 하면 해당 그래픽에 대 한 사용자 지정 이중 버퍼링을 구현할 수 있습니다. 이중 버퍼링을 사용 하는 그래픽 줄이거나 깜빡임을 표시 화면을 그려서 발생 하는 제거할 수 있습니다.      > [!NOTE] > 설정 하는 이중 버퍼링을 사용 하는 가장 간단한 방법은 <xref:System.Windows.Forms.ControlStyles>컨트롤 사용 하 여 컨트롤 스타일 플래그는 <xref:System.Windows.Forms.Control.SetStyle%2A>메서드.</xref:System.Windows.Forms.Control.SetStyle%2A> </xref:System.Windows.Forms.ControlStyles> 설정의 <xref:System.Windows.Forms.ControlStyles>컨트롤 스타일 플래그는 컨트롤에 대 한 코드를 추가 하지 않고도 기본 그래픽 버퍼를 통해 컨트롤에 대 한 모든 그리기를 리디렉션합니다.</xref:System.Windows.Forms.ControlStyles> 이 플래그가로 설정 되어 `true` 기본적으로 합니다.       BufferedGraphicsContext 클래스 만들고 그래픽 버퍼를 구성 하기 위한 메서드를 제공 합니다. <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>메서드 만듭니다는 <xref:System.Drawing.BufferedGraphics>도 버퍼에 쓸 출력 장치에 해당 콘텐츠를 렌더링 하는 데 사용할 메서드를 제공 하는 그래픽 버퍼에 대 한 래퍼 변수인.</xref:System.Drawing.BufferedGraphics> </xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>       정적에서은 현재 어플리케이션 도메인에 대 한 BufferedGraphicsContext를 검색할 수 있습니다 <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=fullName>속성.</xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=fullName> 애니메이션 같은 그래픽 위주의 응용 프로그램에 대 한 생성자를 사용 하는 전용된 BufferedGraphicsContext를 만들 수 있습니다 하지만 대부분의 응용 프로그램의 <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=fullName>속성 만으로도 충분 합니다.</xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=fullName>       그리기 버퍼링 된 그래픽 및 버퍼링을 사용자 지정 구현에 대 한 자세한 내용은 참조 하십시오. [이중 버퍼링 그래픽](~/add/includes/ajax-current-ext-md.md) 및 [하는 방법: 버퍼링 된 그래픽 수동 관리](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates how to acquire the BufferedGraphicsContext for the current application domain. This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.  \n  \n [!code-cs[BufferingExamples#1](~/add/codesnippet/csharp/t-system.drawing.buffere_2_1.cs)]\n [!code-cpp[BufferingExamples#1](~/add/codesnippet/cpp/t-system.drawing.buffere_2_1.cpp)]\n [!code-vb[BufferingExamples#1](~/add/codesnippet/visualbasic/t-system.drawing.buffere_2_1.vb)]"
  syntax:
    content: 'public sealed class BufferedGraphicsContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphicsContext.#ctor
  id: '#ctor'
  parent: System.Drawing.BufferedGraphicsContext
  langs:
  - csharp
  name: BufferedGraphicsContext()
  nameWithType: BufferedGraphicsContext.BufferedGraphicsContext()
  fullName: System.Drawing.BufferedGraphicsContext.BufferedGraphicsContext()
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Drawing.BufferedGraphicsContext&quot;> </xref> 클래스입니다."
  remarks: "애니메이션 같은 그래픽 위주의 응용 프로그램에 대 한 경우에 따라 성능을 개선할 수 있습니다는 전용 <xref:System.Drawing.BufferedGraphicsContext> <xref:System.Drawing.BufferedGraphicsManager>.</xref:System.Drawing.BufferedGraphicsManager> 에서 제공 하는 기본 인스턴스 대신</xref:System.Drawing.BufferedGraphicsContext> 사용 하 여 이 통해 만들고 그래픽 버퍼를 개별적으로 관리할 수 있습니다.      > [!NOTE] > <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>에 전용된 <xref:System.Drawing.BufferedGraphicsContext>.</xref:System.Drawing.BufferedGraphicsContext> 를 사용 하 여 완료 하면</xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 항상 호출 해야       전용된 그래픽 버퍼에 대 한 자세한 내용은 참조 [하는 방법: 버퍼링 된 그래픽 수동 관리](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public BufferedGraphicsContext ();
    parameters: []
  overload: System.Drawing.BufferedGraphicsContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)
  id: Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)
  parent: System.Drawing.BufferedGraphicsContext
  langs:
  - csharp
  name: Allocate(Graphics,Rectangle)
  nameWithType: BufferedGraphicsContext.Allocate(Graphics,Rectangle)
  fullName: System.Drawing.BufferedGraphicsContext.Allocate(Graphics,Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "지정 된 픽셀 형식을 사용 하 여 지정된 된 크기의 그래픽 버퍼를 만듭니다 <xref href=&quot;System.Drawing.Graphics&quot;> </xref>합니다."
  remarks: "값을 초과 하는 사각형이 Allocate 메서드를 호출할 때 필요에 따라 크기가 <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A>속성, 임시 <xref:System.Drawing.BufferedGraphicsContext>버퍼를 할당 하 고 버퍼의 임시 컨텍스트를 제공 하기 위해 만들어집니다.</xref:System.Drawing.BufferedGraphicsContext> </xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> 새 <xref:System.Drawing.BufferedGraphicsContext>와 다릅니다.는 <xref:System.Drawing.BufferedGraphicsContext>응용 프로그램에 대 한 도메인은 자동으로 삭제 시기는 <xref:System.Drawing.BufferedGraphics>메서드 삭제 된 할당에 의해 반환 된.</xref:System.Drawing.BufferedGraphics> </xref:System.Drawing.BufferedGraphicsContext> </xref:System.Drawing.BufferedGraphicsContext>"
  example:
  - "The following code example demonstrates creating a graphics buffer using the Allocate method. This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.  \n  \n [!code-cs[BufferingExamples#3](~/add/codesnippet/csharp/99d851e4-d9e2-4d32-8fa3-_1.cs)]\n [!code-cpp[BufferingExamples#3](~/add/codesnippet/cpp/99d851e4-d9e2-4d32-8fa3-_1.cpp)]\n [!code-vb[BufferingExamples#3](~/add/codesnippet/visualbasic/99d851e4-d9e2-4d32-8fa3-_1.vb)]"
  syntax:
    content: public System.Drawing.BufferedGraphics Allocate (System.Drawing.Graphics targetGraphics, System.Drawing.Rectangle targetRectangle);
    parameters:
    - id: targetGraphics
      type: System.Drawing.Graphics
      description: "<xref href=&quot;System.Drawing.Graphics&quot;> </xref> 새 버퍼에 대 한 픽셀 형식을 일치 하도록 합니다."
    - id: targetRectangle
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;> </xref> 생성 하기 위해 버퍼의 크기를 나타내는입니다."
    return:
      type: System.Drawing.BufferedGraphics
      description: "A <xref href=&quot;System.Drawing.BufferedGraphics&quot;> </xref> 지정된 된 크기의 버퍼를 그리는 데 사용할 수 있는 합니다."
  overload: System.Drawing.BufferedGraphicsContext.Allocate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)
  id: Allocate(System.IntPtr,System.Drawing.Rectangle)
  parent: System.Drawing.BufferedGraphicsContext
  langs:
  - csharp
  name: Allocate(IntPtr,Rectangle)
  nameWithType: BufferedGraphicsContext.Allocate(IntPtr,Rectangle)
  fullName: System.Drawing.BufferedGraphicsContext.Allocate(IntPtr,Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "지정 된 픽셀 형식을 사용 하 여 지정된 된 크기의 그래픽 버퍼를 만듭니다 <xref href=&quot;System.Drawing.Graphics&quot;> </xref>합니다."
  remarks: "호출 하는 경우는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>메서드 값을 초과 하는 필요에 따라 크기가 사각형과는 <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A>속성, 임시 <xref:System.Drawing.BufferedGraphicsContext>버퍼를 할당 하 고 버퍼의 임시 컨텍스트를 제공 하기 위해 만들어집니다.</xref:System.Drawing.BufferedGraphicsContext> </xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> </xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 새 <xref:System.Drawing.BufferedGraphicsContext>와 다릅니다.는 <xref:System.Drawing.BufferedGraphicsContext>응용 프로그램에 대 한 도메인 자동으로 삭제 됩니다 때는 <xref:System.Drawing.BufferedGraphics>에서 반환 되는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>메서드 삭제 됩니다.</xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> </xref:System.Drawing.BufferedGraphics> </xref:System.Drawing.BufferedGraphicsContext> </xref:System.Drawing.BufferedGraphicsContext>"
  example:
  - "The following code example demonstrates creating a graphics buffer using the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method. This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.  \n  \n [!code-cs[BufferingExamples#4](~/add/codesnippet/csharp/5334a85f-cb42-4a29-8bd2-_1.cs)]\n [!code-cpp[BufferingExamples#4](~/add/codesnippet/cpp/5334a85f-cb42-4a29-8bd2-_1.cpp)]\n [!code-vb[BufferingExamples#4](~/add/codesnippet/visualbasic/5334a85f-cb42-4a29-8bd2-_1.vb)]"
  syntax:
    content: public System.Drawing.BufferedGraphics Allocate (IntPtr targetDC, System.Drawing.Rectangle targetRectangle);
    parameters:
    - id: targetDC
      type: System.IntPtr
      description: "<xref:System.IntPtr>새 버퍼의 픽셀 형식에 맞게 장치 컨텍스트를.</xref:System.IntPtr>"
    - id: targetRectangle
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;> </xref> 생성 하기 위해 버퍼의 크기를 나타내는입니다."
    return:
      type: System.Drawing.BufferedGraphics
      description: "A <xref href=&quot;System.Drawing.BufferedGraphics&quot;> </xref> 지정된 된 크기의 버퍼를 그리는 데 사용할 수 있는 합니다."
  overload: System.Drawing.BufferedGraphicsContext.Allocate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphicsContext.Dispose
  id: Dispose
  parent: System.Drawing.BufferedGraphicsContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: BufferedGraphicsContext.Dispose()
  fullName: System.Drawing.BufferedGraphicsContext.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Drawing.BufferedGraphicsContext&quot;> </xref>합니다."
  remarks: "<xref:System.Drawing.BufferedGraphicsContext>.</xref:System.Drawing.BufferedGraphicsContext> 를 사용 하 여 작업을 마쳤으면 Dispose를 호출 합니다. Dispose 메서드는 <xref:System.Drawing.BufferedGraphicsContext>불안정 한 상태가.</xref:System.Drawing.BufferedGraphicsContext> Dispose를 호출한 후에 대 한 모든 참조를 해제 해야는 <xref:System.Drawing.BufferedGraphicsContext>가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Drawing.BufferedGraphicsContext>차지한.</xref:System.Drawing.BufferedGraphicsContext> </xref:System.Drawing.BufferedGraphicsContext> 자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md) 및 [Dispose 메서드를 구현](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > <xref:System.Drawing.BufferedGraphicsContext>.</xref:System.Drawing.BufferedGraphicsContext> 에 대 한 마지막 참조를 해제 하기 전에 항상 호출 삭제 가비지 수집기 <xref:System.Object.Finalize%2A> <xref:System.Drawing.BufferedGraphicsContext>.</xref:System.Drawing.BufferedGraphicsContext> 메서드</xref:System.Object.Finalize%2A> 를 호출할 때까지 사용 중인 리소스를 해제 되지 않습니다 그렇지 않은 경우"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.BufferedGraphicsContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphicsContext.Finalize
  id: Finalize
  parent: System.Drawing.BufferedGraphicsContext
  langs:
  - csharp
  name: Finalize()
  nameWithType: BufferedGraphicsContext.Finalize()
  fullName: System.Drawing.BufferedGraphicsContext.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "개체가를 리소스를 해제 하 고 가비지 수집에서 회수 하기 전에 다른 정리 작업을 수행할 수 있습니다."
  syntax:
    content: ~BufferedGraphicsContext ();
    parameters: []
  overload: System.Drawing.BufferedGraphicsContext.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphicsContext.Invalidate
  id: Invalidate
  parent: System.Drawing.BufferedGraphicsContext
  langs:
  - csharp
  name: Invalidate()
  nameWithType: BufferedGraphicsContext.Invalidate()
  fullName: System.Drawing.BufferedGraphicsContext.Invalidate()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "버퍼 할당 된 아직 삭제 되지 않았습니다 하는 경우 현재 그래픽 버퍼를 삭제 합니다."
  remarks: "그래픽 버퍼를 사용 하는 경우 표시 됩니다 삭제 되는 무료; 즉시 그렇지 않으면 삭제 됩니다 즉시 합니다."
  syntax:
    content: public void Invalidate ();
    parameters: []
  overload: System.Drawing.BufferedGraphicsContext.Invalidate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphicsContext.MaximumBuffer
  id: MaximumBuffer
  parent: System.Drawing.BufferedGraphicsContext
  langs:
  - csharp
  name: MaximumBuffer
  nameWithType: BufferedGraphicsContext.MaximumBuffer
  fullName: System.Drawing.BufferedGraphicsContext.MaximumBuffer
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "사용할 버퍼의 최대 크기를 가져오거나 설정 합니다."
  remarks: "이 속성을 사용 하면 메모리에 유지 해야 하는 버퍼에 대 한 최대 크기를 설정할 수 있습니다. 그러나 모든 크기의 버퍼를 할당할 수, 됩니다 MaximumBuffer 크기 보다 큰 크기 버퍼 일시적으로 사용 하 고 때 삭제는 <xref:System.Drawing.BufferedGraphics>개체를 해제 합니다.</xref:System.Drawing.BufferedGraphics>"
  example:
  - "The following example demonstrates setting the maximum size for the buffer for a <xref:System.Drawing.BufferedGraphicsContext>. This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.  \n  \n [!code-cs[BufferingExamples#2](~/add/codesnippet/csharp/p-system.drawing.buffere_0_1.cs)]\n [!code-cpp[BufferingExamples#2](~/add/codesnippet/cpp/p-system.drawing.buffere_0_1.cpp)]\n [!code-vb[BufferingExamples#2](~/add/codesnippet/visualbasic/p-system.drawing.buffere_0_1.vb)]"
  syntax:
    content: public System.Drawing.Size MaximumBuffer { get; set; }
    return:
      type: System.Drawing.Size
      description: "A <xref href=&quot;System.Drawing.Size&quot;> </xref> 버퍼 크기의 최대 크기를 나타내는입니다."
  overload: System.Drawing.BufferedGraphicsContext.MaximumBuffer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "높이 또는 크기의 너비 보다 작거나&0;입니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Drawing.BufferedGraphicsContext.#ctor
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: BufferedGraphicsContext()
  nameWithType: BufferedGraphicsContext.BufferedGraphicsContext()
  fullName: System.Drawing.BufferedGraphicsContext.BufferedGraphicsContext()
- uid: System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Allocate(Graphics,Rectangle)
  nameWithType: BufferedGraphicsContext.Allocate(Graphics,Rectangle)
  fullName: System.Drawing.BufferedGraphicsContext.Allocate(Graphics,Rectangle)
- uid: System.Drawing.BufferedGraphics
  parent: System.Drawing
  isExternal: false
  name: BufferedGraphics
  nameWithType: BufferedGraphics
  fullName: System.Drawing.BufferedGraphics
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Allocate(IntPtr,Rectangle)
  nameWithType: BufferedGraphicsContext.Allocate(IntPtr,Rectangle)
  fullName: System.Drawing.BufferedGraphicsContext.Allocate(IntPtr,Rectangle)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Drawing.BufferedGraphicsContext.Dispose
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Dispose()
  nameWithType: BufferedGraphicsContext.Dispose()
  fullName: System.Drawing.BufferedGraphicsContext.Dispose()
- uid: System.Drawing.BufferedGraphicsContext.Finalize
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Finalize()
  nameWithType: BufferedGraphicsContext.Finalize()
  fullName: System.Drawing.BufferedGraphicsContext.Finalize()
- uid: System.Drawing.BufferedGraphicsContext.Invalidate
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Invalidate()
  nameWithType: BufferedGraphicsContext.Invalidate()
  fullName: System.Drawing.BufferedGraphicsContext.Invalidate()
- uid: System.Drawing.BufferedGraphicsContext.MaximumBuffer
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: MaximumBuffer
  nameWithType: BufferedGraphicsContext.MaximumBuffer
  fullName: System.Drawing.BufferedGraphicsContext.MaximumBuffer
- uid: System.Drawing.Size
  parent: System.Drawing
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Drawing.Size
- uid: System.Drawing.BufferedGraphicsContext.#ctor*
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: BufferedGraphicsContext
  nameWithType: BufferedGraphicsContext.BufferedGraphicsContext
- uid: System.Drawing.BufferedGraphicsContext.Allocate*
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Allocate
  nameWithType: BufferedGraphicsContext.Allocate
- uid: System.Drawing.BufferedGraphicsContext.Dispose*
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Dispose
  nameWithType: BufferedGraphicsContext.Dispose
- uid: System.Drawing.BufferedGraphicsContext.Finalize*
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Finalize
  nameWithType: BufferedGraphicsContext.Finalize
- uid: System.Drawing.BufferedGraphicsContext.Invalidate*
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Invalidate
  nameWithType: BufferedGraphicsContext.Invalidate
- uid: System.Drawing.BufferedGraphicsContext.MaximumBuffer*
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: MaximumBuffer
  nameWithType: BufferedGraphicsContext.MaximumBuffer
