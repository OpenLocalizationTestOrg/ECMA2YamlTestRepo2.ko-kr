### YamlMime:ManagedReference
items:
- uid: System.Security.Principal.WindowsPrincipal
  id: WindowsPrincipal
  children:
  - System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)
  - System.Security.Principal.WindowsPrincipal.DeviceClaims
  - System.Security.Principal.WindowsPrincipal.Identity
  - System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)
  - System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)
  - System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)
  - System.Security.Principal.WindowsPrincipal.IsInRole(System.String)
  - System.Security.Principal.WindowsPrincipal.UserClaims
  langs:
  - csharp
  name: WindowsPrincipal
  nameWithType: WindowsPrincipal
  fullName: System.Security.Principal.WindowsPrincipal
  type: Class
  summary: "코드는 Windows 사용자의 Windows 그룹 구성원을 확인할 수 있습니다."
  remarks: "WindowsPrincipal 클래스는 Windows 사용자의 역할을 확인 하려면 주로 사용 됩니다. <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A?displayProperty=fullName>메서드 오버 로드를 통해 다른 역할 컨텍스트를 사용 하 여 사용자 역할을 확인할 수 있습니다.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A?displayProperty=fullName>"
  example:
  - "The following example demonstrates how to use the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method overloads. The <xref:System.Security.Principal.WindowsBuiltInRole> enumeration is used as the source for the relative identifiers (RIDs) that identify the built-in roles. The RIDs are used to determine the roles of the current principal.  \n  \n [!code-cs[System.Security.Principal.WindowsBuiltInRole Example#1](~/add/codesnippet/csharp/t-system.security.princi_6_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsBuiltInRole Example#1](~/add/codesnippet/cpp/t-system.security.princi_6_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#1](~/add/codesnippet/visualbasic/t-system.security.princi_6_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class WindowsPrincipal : System.Security.Claims.ClaimsPrincipal
  inheritance:
  - System.Object
  - System.Security.Claims.ClaimsPrincipal
  implements: []
  inheritedMembers:
  - System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  - System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.ClaimsPrincipal.Claims
  - System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  - System.Security.Claims.ClaimsPrincipal.Clone
  - System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsPrincipal.Current
  - System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  - System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsPrincipal.Identities
  - System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  platform:
  - net462
- uid: System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)
  id: '#ctor(System.Security.Principal.WindowsIdentity)'
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: WindowsPrincipal(WindowsIdentity)
  nameWithType: WindowsPrincipal.WindowsPrincipal(WindowsIdentity)
  fullName: System.Security.Principal.WindowsPrincipal.WindowsPrincipal(WindowsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Principal.WindowsPrincipal&quot;> </xref> 클래스 지정을 사용 하 여 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> 개체입니다."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Security.Principal.WindowsPrincipal> object from the current <xref:System.Security.Principal.WindowsIdentity> object.  \n  \n [!code-cpp[Classic WindowsPrincipal.WindowsPrincipal Example#1](~/add/codesnippet/cpp/95e6ca5c-553a-4cf6-a488-_1.cpp)]\n [!code-cs[Classic WindowsPrincipal.WindowsPrincipal Example#1](~/add/codesnippet/csharp/95e6ca5c-553a-4cf6-a488-_1.cs)]\n [!code-vb[Classic WindowsPrincipal.WindowsPrincipal Example#1](~/add/codesnippet/visualbasic/95e6ca5c-553a-4cf6-a488-_1.vb)]"
  syntax:
    content: public WindowsPrincipal (System.Security.Principal.WindowsIdentity ntIdentity);
    parameters:
    - id: ntIdentity
      type: System.Security.Principal.WindowsIdentity
      description: "새 인스턴스를 생성 시 사용할 개체가 <xref href=&quot;System.Security.Principal.WindowsPrincipal&quot;> </xref>합니다."
  overload: System.Security.Principal.WindowsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ntIdentity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Principal.WindowsPrincipal.DeviceClaims
  id: DeviceClaims
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: DeviceClaims
  nameWithType: WindowsPrincipal.DeviceClaims
  fullName: System.Security.Principal.WindowsPrincipal.DeviceClaims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "이 보안 주체에서 모든 Windows 장치 클레임을 가져옵니다."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> DeviceClaims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "이 보안 주체에서 모든 Windows 장치 클레임의 컬렉션입니다."
  overload: System.Security.Principal.WindowsPrincipal.DeviceClaims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsPrincipal.Identity
  id: Identity
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: Identity
  nameWithType: WindowsPrincipal.Identity
  fullName: System.Security.Principal.WindowsPrincipal.Identity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "현재 보안 주체 id를 가져옵니다."
  remarks: ''
  example:
  - "The following example retrieves the name of the user by using the Identity property of the <xref:System.Security.Principal.WindowsPrincipal> object.  \n  \n [!code-cpp[Classic WindowsPrincipal.Identity Example#1](~/add/codesnippet/cpp/p-system.security.princi_6_1.cpp)]\n [!code-vb[Classic WindowsPrincipal.Identity Example#1](~/add/codesnippet/visualbasic/p-system.security.princi_6_1.vb)]\n [!code-cs[Classic WindowsPrincipal.Identity Example#1](~/add/codesnippet/csharp/p-system.security.princi_6_1.cs)]"
  syntax:
    content: public override System.Security.Principal.IIdentity Identity { get; }
    return:
      type: System.Security.Principal.IIdentity
      description: "<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> 현재 사용자의 개체입니다."
  overload: System.Security.Principal.WindowsPrincipal.Identity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)
  id: IsInRole(System.Int32)
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: IsInRole(Int32)
  nameWithType: WindowsPrincipal.IsInRole(Int32)
  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "현재 보안 주체는 지정 된 RID (상대 식별자)를 갖는 Windows 사용자 그룹에 속하는지 여부를 결정 합니다."
  remarks: "When testing for newly created role information, such as a new user or a new group, it is important to log out and log in to force the propagation of role information within the domain. Not doing so can cause the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> test to return `false`. This method is not supported on Windows 98 or Windows Millennium Edition.  \n  \n For performance reasons, the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Security.Principal.SecurityIdentifier%29> overload is recommended as the preferable overload for determining the user's role.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. When you attempt to perform a task that requires administrative privileges, you can dynamically elevate your role by using the Consent dialog box. The code that executes the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method does not display the Consent dialog box. The code returns false if you are in the standard user role, even if you are in the Built-in Administrators group. You can elevate your privileges before you execute the code by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n Relative identifiers (RIDs) are components of a Windows user group's security identifier (SID) and are supported to help prevent cross-platform localization issues. Many user accounts, local groups, and global groups have a default RID value that is constant across all versions of Windows.  \n  \n For example, the RID for the BUILTIN\\Administrators role is 0x220. Using 0x220 as the input parameter for the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method results in `true` being returned if the current principal is an administrator.  \n  \n The following tables list the default RID values.  \n  \n|Built-in users|RID|  \n|---------------------|---------|  \n|DOMAINNAME\\Administrator|0x1F4|  \n|DOMAINNAME\\Guest|0x1F5|  \n  \n|Built-in global groups|RID|  \n|-----------------------------|---------|  \n|DOMAINNAME\\Domain Admins|0x200|  \n|DOMAINNAME\\Domain Users|0x201|  \n|DOMAINNAME\\Domain Guests|0x202|  \n  \n|Built-in local groups|RID|  \n|----------------------------|---------|  \n|BUILTIN\\Administrators|0x220|  \n|BUILTIN\\Users|0x221|  \n|BUILTIN\\Guests|0x222|  \n|BUILTIN\\Account Operators|0x224|  \n|BUILTIN\\Server Operators|0x225|  \n|BUILTIN\\Print Operators|0x226|  \n|BUILTIN\\Backup Operators|0x227|  \n|BUILTIN\\Replicator|0x228|"
  example:
  - "The following code example demonstrates the use of  the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> methods. The <xref:System.Security.Principal.WindowsBuiltInRole> enumeration is used as the source for the RIDs that identify the built-in roles. The RIDs are used to determine the roles of the current principal.  \n  \n [!code-cs[System.Security.Principal.WindowsBuiltInRole Example#1](~/add/codesnippet/csharp/m-system.security.princi_6_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsBuiltInRole Example#1](~/add/codesnippet/cpp/m-system.security.princi_6_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#1](~/add/codesnippet/visualbasic/m-system.security.princi_6_1.vb)]"
  syntax:
    content: public virtual bool IsInRole (int rid);
    parameters:
    - id: rid
      type: System.Int32
      description: "보안 주체의 멤버 자격 상태를 확인 하려면 Windows 사용자 그룹의 RID 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 보안 주체가 이면 지정된 된 Windows 사용자 그룹의 구성원 즉, 특정 역할; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Principal.WindowsPrincipal.IsInRole*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)
  id: IsInRole(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: IsInRole(SecurityIdentifier)
  nameWithType: WindowsPrincipal.IsInRole(SecurityIdentifier)
  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(SecurityIdentifier)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "현재 보안 주체가 지정 된 보안 식별자 (SID)를 가진 Windows 사용자 그룹에 속하는지 여부를 결정 합니다."
  remarks: "<xref:System.Security.Principal.SecurityIdentifier>사용자 또는 Windows 2000, Windows Server 및 Windows XP는 구현에는 그룹을 고유 하 게 식별 합니다.</xref:System.Security.Principal.SecurityIdentifier> 새 사용자 또는 새 그룹을 새로 만든된 역할 정보를 테스트할 때에 로그 아웃 한 도메인 내에서 역할 정보 전파 되도록에 로그인 하는 작업을 해야 합니다. 이렇게 하지 않으면 발생할 수 있습니다는 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>반환할 테스트 `false`.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> 이 메서드는 Windows 98 또는 Windows Millennium Edition에서 지원 되지 않습니다.      > [!NOTE] >에서 Windows Vista, 사용자 계정 컨트롤 (UAC)가 사용자 권한을 결정 합니다. 두 개의 런타임 액세스 토큰에 할당 된 기본 제공 Administrators 그룹의 구성원 인 경우: 표준 사용자 액세스 토큰 및 관리자 액세스 토큰입니다. 기본적으로 표준 사용자 역할에 속합니다. 관리자 권한이 필요한 작업을 수행 하려는 경우에 동의 대화 상자를 사용 하 여 사용자의 역할을 동적으로 높일 수 있습니다. 실행 하는 코드는 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>메서드 동의 대화 상자를 표시 하지 않습니다.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> 기본 제공 Administrators 그룹에 있는 경우에 표준 사용자 역할이 있는 경우 false를 반환 하는 코드입니다. 응용 프로그램 아이콘을 마우스 오른쪽 단추로 클릭 하 고 관리자 권한으로 실행 되도록 지정 하 여 코드를 실행 하기 전에 귀하의 권한을 높일 수 있습니다.       성능상의 이유로, 사용자의 역할을 확인 하는 것이 좋습니다 오버 로드입니다."
  example:
  - "The following code example demonstrates the use of the IsInRole method. The <xref:System.Security.Principal.WellKnownSidType> enumeration value is used to determine whether the current principal is an administrator. For the full code example, see the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Int32%29?displayProperty=fullName> method.  \n  \n [!code-cs[System.Security.Principal.WindowsBuiltInRole Example#5](~/add/codesnippet/csharp/d77961a9-c853-4372-a84b-_1.cs)]\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#5](~/add/codesnippet/visualbasic/d77961a9-c853-4372-a84b-_1.vb)]"
  syntax:
    content: public virtual bool IsInRole (System.Security.Principal.SecurityIdentifier sid);
    parameters:
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "A <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> Windows 사용자 그룹을 고유 하 게 식별 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 보안 주체가 지정된 된 Windows 사용자 그룹의 멤버인 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Principal.WindowsPrincipal.IsInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sid</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Windows는 Win32 오류를 반환 합니다."
  platform:
  - net462
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)
  id: IsInRole(System.Security.Principal.WindowsBuiltInRole)
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: IsInRole(WindowsBuiltInRole)
  nameWithType: WindowsPrincipal.IsInRole(WindowsBuiltInRole)
  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(WindowsBuiltInRole)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "현재 보안 주체가 지정 된 Windows 사용자 그룹에 속하는지 여부를 결정 <xref href=&quot;System.Security.Principal.WindowsBuiltInRole&quot;> </xref>합니다."
  remarks: "새 사용자 또는 새 그룹을 새로 만든된 역할 정보를 테스트할 때에 로그 아웃 한 도메인 내에서 역할 정보 전파 되도록에 로그인 하는 작업을 해야 합니다. 이렇게 하지 않으면 발생할 수 있습니다는 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>반환할 테스트 `false`.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> 이 메서드는 Windows 98 또는 Windows Millennium Edition에서 지원 되지 않습니다.       성능상의 이유로 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Security.Principal.SecurityIdentifier%29>오버 로드는 사용자의 역할을 결정 하기 위한 것이 좋습니다 오버 로드로 것이 좋습니다.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Security.Principal.SecurityIdentifier%29>      > [!NOTE] >에서 Windows Vista, 사용자 계정 컨트롤 (UAC)가 사용자 권한을 결정 합니다. 두 개의 런타임 액세스 토큰에 할당 된 기본 제공 Administrators 그룹의 구성원 인 경우: 표준 사용자 액세스 토큰 및 관리자 액세스 토큰입니다. 기본적으로 표준 사용자 역할에 속합니다. 관리자 권한이 필요한 작업을 수행 하려는 경우에 동의 대화 상자를 사용 하 여 사용자의 역할을 동적으로 높일 수 있습니다. 실행 하는 코드는 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>메서드 동의 대화 상자를 표시 하지 않습니다.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> 기본 제공 Administrators 그룹에 있는 경우에 표준 사용자 역할이 있는 경우 false를 반환 하는 코드입니다. 응용 프로그램 아이콘을 마우스 오른쪽 단추로 클릭 하 고 관리자 권한으로 실행 되도록 지정 하 여 코드를 실행 하기 전에 귀하의 권한을 높일 수 있습니다."
  example:
  - "The following example uses the <xref:System.Security.Principal.WindowsBuiltInRole> enumeration is used to determine whether the current principal is an <xref:System.Security.Principal.WindowsBuiltInRole>. For the full code example, see the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Int32%29?displayProperty=fullName> method.  \n  \n [!code-cs[System.Security.Principal.WindowsBuiltInRole Example#4](~/add/codesnippet/csharp/045134c5-625f-4bfe-be2f-_1.cs)]\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#4](~/add/codesnippet/visualbasic/045134c5-625f-4bfe-be2f-_1.vb)]"
  syntax:
    content: public virtual bool IsInRole (System.Security.Principal.WindowsBuiltInRole role);
    parameters:
    - id: role
      type: System.Security.Principal.WindowsBuiltInRole
      description: "중 하나는 <xref href=&quot;System.Security.Principal.WindowsBuiltInRole&quot;> </xref> 값입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 보안 주체가 지정된 된 Windows 사용자 그룹의 멤버인 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Principal.WindowsPrincipal.IsInRole*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>role</code>유효 하지 않거나 <xref href=&quot;System.Security.Principal.WindowsBuiltInRole&quot;> </xref> 값입니다."
  platform:
  - net462
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.String)
  id: IsInRole(System.String)
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: IsInRole(String)
  nameWithType: WindowsPrincipal.IsInRole(String)
  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "현재 보안 주체가 지정된 된 이름 가진 Windows 사용자 그룹에 속하는지 여부를 결정 합니다."
  remarks: "When testing for newly created role information, such as a new user or a new group, it is important to log out and log in to force the propagation of role information within the domain. Not doing so can cause the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> test to return `false`. This method is not supported on Windows 98 or Windows Millennium Edition.  \n  \n For performance reasons, the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Security.Principal.SecurityIdentifier%29> overload is recommended as the preferable overload for determining the user's role.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. When you attempt to perform a task that requires administrative privileges, you can dynamically elevate your role by using the Consent dialog box. The code that executes the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method does not display the Consent dialog box. The code returns false if you are in the standard user role, even if you are in the Built-in Administrators group. You can elevate your privileges before you execute the code by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n For built-in roles, the `role` string should be in the form \"BUILTIN\\\\*RoleNameHere*\". For example, to test for membership in the Windows administrator role, the string representing the role should be \"BUILTIN\\Administrators\". Note that the backslash might need to be escaped. The following table lists the built-in roles.  \n  \n> [!NOTE]\n>  The spelling for the BUILTIN roles in string format differs from the spelling used in the <xref:System.Security.Principal.WindowsBuiltInRole> enumeration. For example, the spelling for an administrator in the enumeration is \"Administrator\", not \"Administrators\". When using this overload, use the spelling for the role from the following table.  \n  \n|Built-in local groups|  \n|----------------------------|  \n|BUILTIN\\Administrators|  \n|BUILTIN\\Users|  \n|BUILTIN\\Guests|  \n|BUILTIN\\Account Operators|  \n|BUILTIN\\Server Operators|  \n|BUILTIN\\Print Operators|  \n|BUILTIN\\Backup Operators|  \n|BUILTIN\\Replicator|  \n  \n For machine-specific roles, the `role` string should be in the form \"MachineName\\\\*RoleNameHere*\".  \n  \n For domain-specific roles, the `role` string should be in the form \"DomainName\\\\*RoleNameHere*\"; for example, `\"SomeDomain\\Domain Users`\".  \n  \n> [!NOTE]\n>  In the .NET Framework version 1.0, the `role` parameter is case-sensitive. In the .NET Framework version 1.1 and later, the `role` parameter is case-insensitive."
  example:
  - "The following code example demonstrates the use of the IsInRole method.  \n  \n The strings `BUILTIN\\Administrators` and `BUILTIN\\Users` are used to determine whether the current principal is an administrator or a user. For the full code example, see the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Int32%29?displayProperty=fullName> method.  \n  \n [!code-cs[System.Security.Principal.WindowsBuiltInRole Example#3](~/add/codesnippet/csharp/m-system.security.princi_1_1.cs)]\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#3](~/add/codesnippet/visualbasic/m-system.security.princi_1_1.vb)]"
  syntax:
    content: public override bool IsInRole (string role);
    parameters:
    - id: role
      type: System.String
      description: "구성원 자격을 확인할에 대 한 Windows 사용자 그룹의 이름입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 보안 주체가 지정된 된 Windows 사용자 그룹의 멤버인 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Principal.WindowsPrincipal.IsInRole*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsPrincipal.UserClaims
  id: UserClaims
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: UserClaims
  nameWithType: WindowsPrincipal.UserClaims
  fullName: System.Security.Principal.WindowsPrincipal.UserClaims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "이 보안 주체에서 모든 Windows 사용자 클레임을 가져옵니다."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> UserClaims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "이 보안 주체에서 모든 Windows 사용자 클레임의 컬렉션입니다."
  overload: System.Security.Principal.WindowsPrincipal.UserClaims*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: System.Security.Claims.ClaimsPrincipal
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: WindowsPrincipal(WindowsIdentity)
  nameWithType: WindowsPrincipal.WindowsPrincipal(WindowsIdentity)
  fullName: System.Security.Principal.WindowsPrincipal.WindowsPrincipal(WindowsIdentity)
- uid: System.Security.Principal.WindowsIdentity
  parent: System.Security.Principal
  isExternal: false
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
- uid: System.Security.Principal.WindowsPrincipal.DeviceClaims
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: DeviceClaims
  nameWithType: WindowsPrincipal.DeviceClaims
  fullName: System.Security.Principal.WindowsPrincipal.DeviceClaims
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Principal.WindowsPrincipal.Identity
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: Identity
  nameWithType: WindowsPrincipal.Identity
  fullName: System.Security.Principal.WindowsPrincipal.Identity
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: IsInRole(Int32)
  nameWithType: WindowsPrincipal.IsInRole(Int32)
  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: IsInRole(SecurityIdentifier)
  nameWithType: WindowsPrincipal.IsInRole(SecurityIdentifier)
  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(SecurityIdentifier)
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: SecurityIdentifier
  nameWithType: SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: IsInRole(WindowsBuiltInRole)
  nameWithType: WindowsPrincipal.IsInRole(WindowsBuiltInRole)
  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(WindowsBuiltInRole)
- uid: System.Security.Principal.WindowsBuiltInRole
  parent: System.Security.Principal
  isExternal: false
  name: WindowsBuiltInRole
  nameWithType: WindowsBuiltInRole
  fullName: System.Security.Principal.WindowsBuiltInRole
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.String)
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: IsInRole(String)
  nameWithType: WindowsPrincipal.IsInRole(String)
  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Principal.WindowsPrincipal.UserClaims
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: UserClaims
  nameWithType: WindowsPrincipal.UserClaims
  fullName: System.Security.Principal.WindowsPrincipal.UserClaims
- uid: System.Security.Principal.WindowsPrincipal.#ctor*
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: WindowsPrincipal
  nameWithType: WindowsPrincipal.WindowsPrincipal
- uid: System.Security.Principal.WindowsPrincipal.DeviceClaims*
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: DeviceClaims
  nameWithType: WindowsPrincipal.DeviceClaims
- uid: System.Security.Principal.WindowsPrincipal.Identity*
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: Identity
  nameWithType: WindowsPrincipal.Identity
- uid: System.Security.Principal.WindowsPrincipal.IsInRole*
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: IsInRole
  nameWithType: WindowsPrincipal.IsInRole
- uid: System.Security.Principal.WindowsPrincipal.UserClaims*
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: UserClaims
  nameWithType: WindowsPrincipal.UserClaims
