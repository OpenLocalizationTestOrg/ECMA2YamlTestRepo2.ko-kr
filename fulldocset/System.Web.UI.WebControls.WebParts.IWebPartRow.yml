### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow
  id: IWebPartRow
  children:
  - System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(System.Web.UI.WebControls.WebParts.RowCallback)
  - System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
  langs:
  - csharp
  name: IWebPartRow
  nameWithType: IWebPartRow
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow
  type: Interface
  summary: "단일 데이터 필드를 사용 하 여 두 개의 서버 컨트롤을 연결 하기 위한 공급자 인터페이스를 정의 합니다."
  remarks: "이 인터페이스는 웹 파트 연결에서 사용 되는 설계 되었습니다. 웹 파트 연결에 상주 하는 두 개의 서버 컨트롤에는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>영역 소비자 역할을 하는 한 컨트롤, 공급자 역할을 다른 컨트롤을 연결 및 공유 데이터를 설정 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 웹 파트 연결에서 데이터를 공유 하기 위한 메커니즘은 공급자는 콜백 메서드를 사용 하 여 소비자에 제공 하는 인터페이스 인스턴스를 합니다. 연결을 설정 하려면 소비자 및 공급자 둘 다 사용 해야 같은 인터페이스 형식을 데이터를 공유 합니다. 소비자는 공급자가 보낸 인터페이스 형식을 인식 하지 못하는 경우 컨트롤 변환기를 사용 하 여 연결할 수 있습니다 (한 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>개체) 소비자에서 인식 하는 유형으로 공급자에서 보내는 인터페이스 인스턴스를 변환 하는.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 연결에 대 한 자세한 내용은 참조 하십시오. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>및 [웹 파트 연결 개요](~/add/includes/ajax-current-ext-md.md).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>       IWebPartRow 인터페이스는 데이터 행에 따라 연결을 만들기 위한 표준 인터페이스도 설정 하는 웹 파트 컨트롤에 포함 된 공급자 인터페이스입니다. 웹 파트 연결에 사용 하는 사용자 지정 인터페이스를 만들 수도 있지만 많은 데이터 기반 웹 응용 프로그램에서 편리 하 게 공통 필드를 기반으로 연결을 만들려면 (세부 정보를 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.IWebPartField>인터페이스), 테이블 (세부 정보를 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.IWebPartTable>인터페이스), 또는 데이터 원본의 행.</xref:System.Web.UI.WebControls.WebParts.IWebPartTable> </xref:System.Web.UI.WebControls.WebParts.IWebPartField> 일반 연결에는 <xref:System.Web.UI.WebControls.WebParts.WebPart>공급자는 IWebPartRow 인터페이스를 구현 하 고 특수 한 콜백 메서드에서 소비자에 게 인터페이스의 인스턴스를 제공 하는 대로 역할을 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 예를 들어 공급자는 사용자 정보 테이블의 사용자에 해당 하는 행에 대 한 IWebPartRow 인터페이스를 구현할 수 있습니다. 다른 <xref:System.Web.UI.WebControls.WebParts.WebPart>소비자는 인터페이스 인스턴스를 받을 수 사용자 데이터를 추출, 사용 하 여 해당 사용자의 계정에 대 한 추가 정보를 조회 하 고 페이지에서 해당 사용자와 관련 된 모든 정보를 표시 하는 특수 메서드를 정의 하는 역할을 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>       IWebPartRow 인터페이스에 노출 된 두 명의 멤버가 있습니다. <xref:System.Web.UI.WebControls.WebParts.IWebPartRow.Schema%2A>에 캡슐화 된 데이터 행에 대 한 스키마 정보를 반환 하는 속성을 <xref:System.ComponentModel.PropertyDescriptorCollection>개체입니다.</xref:System.ComponentModel.PropertyDescriptorCollection> </xref:System.Web.UI.WebControls.WebParts.IWebPartRow.Schema%2A> <xref:System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData%2A>메서드 (예: 공급자 제어) 구현 자가 사용 하 여 콜백 메서드가 호출 되 면 인터페이스 인스턴스의 행 데이터를 검색 하는 메서드 선언.</xref:System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData%2A>"
  example:
  - "The following code example demonstrates how to create a static connection between two controls using the IWebPartRow interface. The code example has three parts:  \n  \n-   Source code for two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can form a connection using the IWebPartRow interface, with one control acting as the provider, and the other acting as the consumer.  \n  \n-   A Web page that hosts the controls and declares the static connection in persistence format.  \n  \n-   A description of what happens when the example code runs.  \n  \n The first part of the code example is the source code for the two custom controls. First is the code for the provider, which implements the IWebPartRow interface. For simplicity in the example, the provider creates a table with some data rather than connecting to a database. The `GetConnectionInterface` method serves as the provider's connection point, the callback method that returns the interface instance to the consumer. As for the consumer, it retrieves the interface instance from the provider in its method named `SetConnectionInterface`, which is marked with a `ConnectionConsumer` attribute. After retrieving the instance of the interface, the consumer, in its `OnPreRender` method, calls the implementation of the <xref:System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData%2A> method in the provider, to retrieve the actual data and write it to the page.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_327_1.cs)]\n [!code-vb[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_327_1.vb)]  \n  \n The second part of the code example is the Web page that declares the static connection and hosts the controls. Near the top of the page is a `Register` directive that declares the namespace of the source code contained in the App_Code directory. The connection is declared using an `<asp:webpartconnection>` element. The custom consumer and provider controls are declared in a `<zonetemplate>` element within an `<asp:webpartzone>` element, which is required for them to be able to connect (they must reside within a zone that inherits from the <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> class).  \n  \n [!code-vb[WebParts_IWebPartRow_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_327_2.aspx)]\n [!code-cs[WebParts_IWebPartRow_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_327_2.aspx)]  \n  \n Load the page in a browser. The consumer control displays the data provided from the specified row, which the provider makes available through an instance of the IWebPartRow interface."
  syntax:
    content: public interface IWebPartRow
  implements: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(System.Web.UI.WebControls.WebParts.RowCallback)
  id: GetRowData(System.Web.UI.WebControls.WebParts.RowCallback)
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  langs:
  - csharp
  name: GetRowData(RowCallback)
  nameWithType: IWebPartRow.GetRowData(RowCallback)
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(RowCallback)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "두 인터페이스에 의해 연결의 기본으로 사용 되는 행에 대 한 데이터를 반환 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤입니다."
  remarks: "이 메서드를 사용 하 여 인터페이스에 의해 전달 된 데이터 행 값을 검색 합니다. 이 메서드를 구현 하는 공급자 및 호출 된 시점 소비자는를 처리 하거나 데이터를 렌더링 합니다."
  example:
  - "The following code example shows the implementation and use of the GetRowData method. The complete example is shown in the class overview for the <xref:System.Web.UI.WebControls.WebParts.IWebPartRow> interface. The provider control implements the GetRowData method, returning the value of a particular row in the data table. The consumer control calls the GetRowData method in its `OnPreRender` method, so that the value of the data can be written to the page.  \n  \n [!code-cs[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/csharp/98668bea-41a0-4fc3-85fe-_1.cs)]\n [!code-vb[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/visualbasic/98668bea-41a0-4fc3-85fe-_1.vb)]"
  syntax:
    content: public void GetRowData (System.Web.UI.WebControls.WebParts.RowCallback callback);
    parameters:
    - id: callback
      type: System.Web.UI.WebControls.WebParts.RowCallback
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.RowCallback&quot;> </xref> 데이터를 수신 하는 메서드의 주소를 포함 하는 대리자입니다."
  overload: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
  id: Schema
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  langs:
  - csharp
  name: Schema
  nameWithType: IWebPartRow.Schema
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "두 데이터를 공유 하는 데 사용 되는 데이터 행에 대 한 스키마 정보를 가져옵니다 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤입니다."
  remarks: "이 속성은 데이터에 대 한 속성 정보를 제공 합니다. 사용 하 여는 <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>인터페이스 얻게 연결에서 한 <xref:System.ComponentModel.PropertyDescriptorCollection>스키마 속성에서 참조 하는 개체입니다.</xref:System.ComponentModel.PropertyDescriptorCollection> </xref:System.Web.UI.WebControls.WebParts.IWebPartRow> 호출 하는 지정 `Schema[n].GetValue(RowData)` 의 값을 반환 된 *n*행의 열 번째 합니다. 행의 값을 가져오려면 스키마 속성을 사용 해야 합니다."
  example:
  - "The following code example shows the implementation and use of the Schema property. The complete example is shown in the class overview for the <xref:System.Web.UI.WebControls.WebParts.IWebPartRow> interface. The provider control implements the Schema property. Then the consumer control, in its `RenderContents` method, queries the Schema property to retrieve information about the row as it writes the row data to the page.  \n  \n [!code-cs[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_721_1.cs)]\n [!code-vb[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_721_1.vb)]"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection Schema { get; }
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> 데이터를 설명 하는 합니다."
  overload: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(System.Web.UI.WebControls.WebParts.RowCallback)
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  isExternal: false
  name: GetRowData(RowCallback)
  nameWithType: IWebPartRow.GetRowData(RowCallback)
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(RowCallback)
- uid: System.Web.UI.WebControls.WebParts.RowCallback
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: RowCallback
  nameWithType: RowCallback
  fullName: System.Web.UI.WebControls.WebParts.RowCallback
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  isExternal: false
  name: Schema
  nameWithType: IWebPartRow.Schema
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData*
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  isExternal: false
  name: GetRowData
  nameWithType: IWebPartRow.GetRowData
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema*
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  isExternal: false
  name: Schema
  nameWithType: IWebPartRow.Schema
