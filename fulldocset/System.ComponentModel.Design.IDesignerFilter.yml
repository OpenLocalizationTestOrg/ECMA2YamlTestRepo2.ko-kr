### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Design.IDesignerFilter
  id: IDesignerFilter
  children:
  - System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)
  - System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)
  - System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)
  - System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)
  - System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)
  - System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)
  langs:
  - csharp
  name: IDesignerFilter
  nameWithType: IDesignerFilter
  fullName: System.ComponentModel.Design.IDesignerFilter
  type: Interface
  summary: "에 액세스 하 고의 사전 필터링 디자이너 수 있도록 하는 인터페이스를 제공는 <xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref> 구성 요소 디자이너에서 디자인 타임 환경에 노출할 수 있는 속성, 특성 및 이벤트 설명자를 저장 하는 합니다."
  remarks: "IDesignerFilter 하면 디자이너가 <xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor> 통해 연결 된 해당 구성 요소가 노출 하는 속성, 특성 및 이벤트 설명자의 집합을 필터링 하려면 이름이로 시작 하는이 인터페이스의 메서드 `Pre` 로 시작 하는 이름이 메서드 직전에 호출 된 `Post`합니다.       특성, 이벤트 또는 속성 설명자를 추가 하려는 경우 사용 하 여 한 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>, 또는 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>메서드.</xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> </xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A> </xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>       변경 하거나 특성, 이벤트 또는 속성 설명자를 사용 하 여 제거 하려는 경우는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>, 또는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>메서드.</xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A> </xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A> </xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>"
  example:
  - "The following example demonstrates an override of <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> that adds a property of the designer to the Properties window when the designer's control is selected at design time. See the example for the <xref:System.Windows.Forms.Design.ControlDesigner> class for a complete designer example that uses the IDesignerFilter interface.  \n  \n [!code-cpp[ControlDesignerExample#2](~/add/codesnippet/cpp/t-system.componentmodel._159_1.cpp)]\n [!code-vb[ControlDesignerExample#2](~/add/codesnippet/visualbasic/t-system.componentmodel._159_1.vb)]\n [!code-cs[ControlDesignerExample#2](~/add/codesnippet/csharp/t-system.componentmodel._159_1.cs)]"
  syntax:
    content: public interface IDesignerFilter
  implements: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)
  id: PostFilterAttributes(System.Collections.IDictionary)
  parent: System.ComponentModel.Design.IDesignerFilter
  langs:
  - csharp
  name: PostFilterAttributes(IDictionary)
  nameWithType: IDesignerFilter.PostFilterAttributes(IDictionary)
  fullName: System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(IDictionary)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "파생된 클래스에서 재정의 하는 경우 사용 하면 디자이너를 통해 노출 되는 특성 집합에서 항목을 제거 하거나 변경는 <xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>합니다."
  remarks: "이 메서드는 변경 하거나이 인터페이스를 구현 하는 디자이너의 연결된 된 구성 요소에 <xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor> 통해 노출 되는 특성의 사전에서 항목을 제거 하는 방법을 제공합니다       특성의 사전 키는 특성의 형식 Id입니다. 개체는 이름 필드에 <xref:System.Attribute>.</xref:System.Attribute> <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>.</xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A> 직후에이 메서드는       유형 ID 특성의 모든 개체 일 수 있습니다. 기본적으로 <xref:System.Attribute>반환 해당 <xref:System.Type>의 값으로 해당 <xref:System.Attribute.TypeId%2A>속성.</xref:System.Attribute.TypeId%2A> </xref:System.Type> </xref:System.Attribute> 확인할 수 있습니다는 <xref:System.Attribute.TypeId%2A>알려진 같은지 사전에 있는 특성의 <xref:System.Attribute.TypeId%2A>식별 하거나, 사용 하는 특성에 대 한 <xref:System.Reflection>자체 특성 개체를 식별 하기.</xref:System.Reflection> </xref:System.Attribute.TypeId%2A> </xref:System.Attribute.TypeId%2A>       같은 특성 <xref:System.Attribute.TypeId%2A>새 특성이 이전 특성을 대체 기존 또는 상속 된 특성은 구성 요소에 추가 되 면.</xref:System.Attribute.TypeId%2A> 많은 특성에 대해 동일한 유형의 새 특성을 형식의 이전 특성을 바뀝니다. 그러나 일부 유형의 특성을 반환할는 <xref:System.Attribute.TypeId%2A>특성을 선택적으로 구별 하는.</xref:System.Attribute.TypeId%2A> 예를 들어, 한 형식에 대 한와 같은 다양 한 유형의 동시에 활성 디자이너를 제공 하기 위해는 <xref:System.ComponentModel.Design.IRootDesigner>및 <xref:System.ComponentModel.Design.IDesigner>, <xref:System.ComponentModel.DesignerAttribute>반환 클래스는 <xref:System.Attribute.TypeId%2A>특성과 기본 디자이너 형식을 고유 하 게 식별 하는.</xref:System.Attribute.TypeId%2A> </xref:System.ComponentModel.DesignerAttribute> </xref:System.ComponentModel.Design.IDesigner> </xref:System.ComponentModel.Design.IRootDesigner> <xref:System.ComponentModel.DesignerAttribute>생성자를 사용 하면 특정 종류를 사용 하는 디자이너의 디자이너 기본 형식을 지정 하 고 <xref:System.ComponentModel.DesignerAttribute>반환는 <xref:System.Attribute.TypeId%2A>이 반영 하.</xref:System.Attribute.TypeId%2A> </xref:System.ComponentModel.DesignerAttribute> </xref:System.ComponentModel.DesignerAttribute> 따라서 추가 하는 경우 새 <xref:System.ComponentModel.DesignerAttribute>기존의 기본 디자이너 유형으로 동일한 형식의 기본를 디자이너 형식과 <xref:System.ComponentModel.DesignerAttribute>, 기존 특성을 새 특성으로 바뀝니다.</xref:System.ComponentModel.DesignerAttribute> </xref:System.ComponentModel.DesignerAttribute>"
  syntax:
    content: public void PostFilterAttributes (System.Collections.IDictionary attributes);
    parameters:
    - id: attributes
      type: System.Collections.IDictionary
      description: "<xref:System.Attribute>구성 요소의 클래스에 대 한 개체입니다.</xref:System.Attribute> 특성의 사전 키는 <xref:System.Attribute.TypeId*>특성의 값입니다.</xref:System.Attribute.TypeId*>"
  overload: System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)
  id: PostFilterEvents(System.Collections.IDictionary)
  parent: System.ComponentModel.Design.IDesignerFilter
  langs:
  - csharp
  name: PostFilterEvents(IDictionary)
  nameWithType: IDesignerFilter.PostFilterEvents(IDictionary)
  fullName: System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(IDictionary)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "파생된 클래스에서 재정의 하는 경우 사용 하면 디자이너를 통해 노출 하는 이벤트 집합에서 항목을 제거 하거나 변경는 <xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>합니다."
  remarks: "이 메서드는 변경 하거나 <xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor> 를 통해 노출 되는 이벤트의 사전에서 항목을 제거 하는 방법을 제공합니다       이벤트의 사전 키는 이벤트의 이름입니다. 개체는 이름 필드에 <xref:System.ComponentModel.EventDescriptor>.</xref:System.ComponentModel.EventDescriptor> <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>.</xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A> 직후에이 메서드는"
  syntax:
    content: public void PostFilterEvents (System.Collections.IDictionary events);
    parameters:
    - id: events
      type: System.Collections.IDictionary
      description: "<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> 구성 요소 클래스의 이벤트를 나타내는 개체입니다. 이벤트의 사전 키는 이벤트 이름입니다."
  overload: System.ComponentModel.Design.IDesignerFilter.PostFilterEvents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)
  id: PostFilterProperties(System.Collections.IDictionary)
  parent: System.ComponentModel.Design.IDesignerFilter
  langs:
  - csharp
  name: PostFilterProperties(IDictionary)
  nameWithType: IDesignerFilter.PostFilterProperties(IDictionary)
  fullName: System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(IDictionary)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "파생된 클래스에서 재정의 하는 경우 변경 하거나 항목을 통해 노출 되는 속성 집합에서 제거 하려면 디자이너를 사용 하면 한 <xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>합니다."
  remarks: "이 메서드는 변경 하거나 <xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor> 통해 노출 되는 속성의 사전에서 항목을 제거 하는 방법을 제공합니다       속성의 사전 키는 속성의 이름입니다. 개체는 이름 필드에 <xref:System.ComponentModel.PropertyDescriptor>.</xref:System.ComponentModel.PropertyDescriptor> <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>.</xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> 직후에이 메서드는"
  syntax:
    content: public void PostFilterProperties (System.Collections.IDictionary properties);
    parameters:
    - id: properties
      type: System.Collections.IDictionary
      description: "<xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> 구성 요소 클래스의 속성을 나타내는 개체입니다. 속성의 사전 키는 속성 이름입니다."
  overload: System.ComponentModel.Design.IDesignerFilter.PostFilterProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)
  id: PreFilterAttributes(System.Collections.IDictionary)
  parent: System.ComponentModel.Design.IDesignerFilter
  langs:
  - csharp
  name: PreFilterAttributes(IDictionary)
  nameWithType: IDesignerFilter.PreFilterAttributes(IDictionary)
  fullName: System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(IDictionary)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "파생된 클래스에서 재정의 되 면 디자이너를 통해 노출 되는 특성 집합에 항목을 추가할 수 있습니다는 <xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>합니다."
  remarks: "이 메서드는이 인터페이스를 구현 하는 디자이너의 연결된 된 구성 요소에 <xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor> 를 통해 노출 하는 특성의 사전에 항목을 추가 하는 방법을 제공합니다       특성의 사전 키는 특성의 형식 Id입니다. 개체는 이름 필드에 <xref:System.Attribute>.</xref:System.Attribute> <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>.</xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A> 바로 앞에이 메서드는       유형 ID 특성의 모든 개체 일 수 있습니다. 기본적으로 <xref:System.Attribute>반환 해당 <xref:System.Type>의 값으로 해당 <xref:System.Attribute.TypeId%2A>속성.</xref:System.Attribute.TypeId%2A> </xref:System.Type> </xref:System.Attribute> 확인할 수 있습니다는 <xref:System.Attribute.TypeId%2A>알려진 같은지 사전에 있는 특성의 <xref:System.Attribute.TypeId%2A>식별 하거나, 사용 하는 특성에 대 한 <xref:System.Reflection>자체 특성 개체를 식별 하기.</xref:System.Reflection> </xref:System.Attribute.TypeId%2A> </xref:System.Attribute.TypeId%2A>       같은 특성 <xref:System.Attribute.TypeId%2A>새 특성이 이전 특성을 대체 기존 또는 상속 된 특성은 구성 요소에 추가 되 면.</xref:System.Attribute.TypeId%2A> 많은 특성에 대해 동일한 유형의 새 특성을 형식의 이전 특성을 바뀝니다. 그러나 일부 유형의 특성을 반환할는 <xref:System.Attribute.TypeId%2A>특성을 선택적으로 구별 하는.</xref:System.Attribute.TypeId%2A> 예를 들어, 한 형식에 대 한와 같은 다양 한 유형의 동시에 활성 디자이너를 제공 하기 위해는 <xref:System.ComponentModel.Design.IRootDesigner>및 <xref:System.ComponentModel.Design.IDesigner>, <xref:System.ComponentModel.DesignerAttribute>반환 클래스는 <xref:System.Attribute.TypeId%2A>특성과 기본 디자이너 형식을 고유 하 게 식별 하는.</xref:System.Attribute.TypeId%2A> </xref:System.ComponentModel.DesignerAttribute> </xref:System.ComponentModel.Design.IDesigner> </xref:System.ComponentModel.Design.IRootDesigner> <xref:System.ComponentModel.DesignerAttribute>생성자를 사용 하면 특정 종류를 사용 하는 디자이너의 디자이너 기본 형식을 지정 하 고 <xref:System.ComponentModel.DesignerAttribute>반환는 <xref:System.Attribute.TypeId%2A>이 반영 하.</xref:System.Attribute.TypeId%2A> </xref:System.ComponentModel.DesignerAttribute> </xref:System.ComponentModel.DesignerAttribute> 따라서 추가 하는 경우 새 <xref:System.ComponentModel.DesignerAttribute>기존의 기본 디자이너 유형으로 동일한 형식의 기본를 디자이너 형식과 <xref:System.ComponentModel.DesignerAttribute>, 기존 특성을 새 특성으로 바뀝니다.</xref:System.ComponentModel.DesignerAttribute> </xref:System.ComponentModel.DesignerAttribute>"
  syntax:
    content: public void PreFilterAttributes (System.Collections.IDictionary attributes);
    parameters:
    - id: attributes
      type: System.Collections.IDictionary
      description: "<xref:System.Attribute>구성 요소의 클래스에 대 한 개체입니다.</xref:System.Attribute> 특성의 사전 키는 <xref:System.Attribute.TypeId*>특성의 값입니다.</xref:System.Attribute.TypeId*>"
  overload: System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)
  id: PreFilterEvents(System.Collections.IDictionary)
  parent: System.ComponentModel.Design.IDesignerFilter
  langs:
  - csharp
  name: PreFilterEvents(IDictionary)
  nameWithType: IDesignerFilter.PreFilterEvents(IDictionary)
  fullName: System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(IDictionary)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "파생된 클래스에서 재정의 되 면 디자이너를 통해 노출 하는 이벤트 집합에 항목을 추가할 수 있습니다는 <xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>합니다."
  remarks: "이 메서드는 디자이너에 <xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor> 통해 노출 하는 이벤트의 사전에 항목을 추가 하는 방법을 제공합니다       이벤트의 사전 키는 이벤트의 이름입니다. 개체는 이름 필드에 <xref:System.ComponentModel.EventDescriptor>.</xref:System.ComponentModel.EventDescriptor> <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>.</xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A> 바로 앞에이 메서드는"
  syntax:
    content: public void PreFilterEvents (System.Collections.IDictionary events);
    parameters:
    - id: events
      type: System.Collections.IDictionary
      description: "<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> 구성 요소 클래스의 이벤트를 나타내는 개체입니다. 이벤트의 사전 키는 이벤트 이름입니다."
  overload: System.ComponentModel.Design.IDesignerFilter.PreFilterEvents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)
  id: PreFilterProperties(System.Collections.IDictionary)
  parent: System.ComponentModel.Design.IDesignerFilter
  langs:
  - csharp
  name: PreFilterProperties(IDictionary)
  nameWithType: IDesignerFilter.PreFilterProperties(IDictionary)
  fullName: System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(IDictionary)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "파생된 클래스에서 재정의 되 면 통해 디자이너를 통해 노출 되는 속성 집합에 항목을 추가할 수는 <xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>합니다."
  remarks: "이 메서드는 디자이너에 <xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor> 를 통해 노출 되는 속성의 사전에 항목을 추가 하는 방법을 제공합니다       속성의 사전 키는 속성의 이름입니다. 개체는 이름 필드에 <xref:System.ComponentModel.PropertyDescriptor>.</xref:System.ComponentModel.PropertyDescriptor> <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>.</xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A> 바로 앞에이 메서드는"
  syntax:
    content: public void PreFilterProperties (System.Collections.IDictionary properties);
    parameters:
    - id: properties
      type: System.Collections.IDictionary
      description: "<xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> 구성 요소 클래스의 속성을 나타내는 개체입니다. 속성의 사전 키는 속성 이름입니다."
  overload: System.ComponentModel.Design.IDesignerFilter.PreFilterProperties*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)
  parent: System.ComponentModel.Design.IDesignerFilter
  isExternal: false
  name: PostFilterAttributes(IDictionary)
  nameWithType: IDesignerFilter.PostFilterAttributes(IDictionary)
  fullName: System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)
  parent: System.ComponentModel.Design.IDesignerFilter
  isExternal: false
  name: PostFilterEvents(IDictionary)
  nameWithType: IDesignerFilter.PostFilterEvents(IDictionary)
  fullName: System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(IDictionary)
- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)
  parent: System.ComponentModel.Design.IDesignerFilter
  isExternal: false
  name: PostFilterProperties(IDictionary)
  nameWithType: IDesignerFilter.PostFilterProperties(IDictionary)
  fullName: System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(IDictionary)
- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)
  parent: System.ComponentModel.Design.IDesignerFilter
  isExternal: false
  name: PreFilterAttributes(IDictionary)
  nameWithType: IDesignerFilter.PreFilterAttributes(IDictionary)
  fullName: System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(IDictionary)
- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)
  parent: System.ComponentModel.Design.IDesignerFilter
  isExternal: false
  name: PreFilterEvents(IDictionary)
  nameWithType: IDesignerFilter.PreFilterEvents(IDictionary)
  fullName: System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(IDictionary)
- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)
  parent: System.ComponentModel.Design.IDesignerFilter
  isExternal: false
  name: PreFilterProperties(IDictionary)
  nameWithType: IDesignerFilter.PreFilterProperties(IDictionary)
  fullName: System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(IDictionary)
- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes*
  parent: System.ComponentModel.Design.IDesignerFilter
  isExternal: false
  name: PostFilterAttributes
  nameWithType: IDesignerFilter.PostFilterAttributes
- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterEvents*
  parent: System.ComponentModel.Design.IDesignerFilter
  isExternal: false
  name: PostFilterEvents
  nameWithType: IDesignerFilter.PostFilterEvents
- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterProperties*
  parent: System.ComponentModel.Design.IDesignerFilter
  isExternal: false
  name: PostFilterProperties
  nameWithType: IDesignerFilter.PostFilterProperties
- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes*
  parent: System.ComponentModel.Design.IDesignerFilter
  isExternal: false
  name: PreFilterAttributes
  nameWithType: IDesignerFilter.PreFilterAttributes
- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterEvents*
  parent: System.ComponentModel.Design.IDesignerFilter
  isExternal: false
  name: PreFilterEvents
  nameWithType: IDesignerFilter.PreFilterEvents
- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterProperties*
  parent: System.ComponentModel.Design.IDesignerFilter
  isExternal: false
  name: PreFilterProperties
  nameWithType: IDesignerFilter.PreFilterProperties
