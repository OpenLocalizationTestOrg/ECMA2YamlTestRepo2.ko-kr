### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.Touch
  id: Touch
  children:
  - System.Windows.Input.Touch.FrameReported
  langs:
  - csharp
  name: Touch
  nameWithType: Touch
  fullName: System.Windows.Input.Touch
  type: Class
  summary: "운영 체제에서 다중 터치 입력을 처리 하는 응용 프로그램 수준 서비스를 제공 하 고 시킵니다는 <xref href=&quot;System.Windows.Input.Touch.FrameReported&quot;> </xref> 이벤트입니다."
  remarks: "<xref:System.Windows.Input.Touch.FrameReported>이벤트는 [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] Silverlight와의 호환성을 지원 하기 위해.</xref:System.Windows.Input.Touch.FrameReported> Silverlight와의 호환성을 확인 해야 하는 경우 사용 하 여 터치 이벤트와 같은 <xref:System.Windows.UIElement.TouchDown>및 <xref:System.Windows.UIElement.TouchMove>의 <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, 또는 <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.UIElement3D> </xref:System.Windows.UIElement> </xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.UIElement.TouchDown>       <xref:System.Windows.Input.Touch.FrameReported>이벤트 등의 다른 WPF 입력된 이벤트가 <xref:System.Windows.UIElement.TouchDown>및 <xref:System.Windows.UIElement.TouchMove>.</xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.UIElement.TouchDown> 과 동일한 이벤트 모델을 사용 하지 않습니다</xref:System.Windows.Input.Touch.FrameReported> 개체 트리는 UI 통해 라우팅하는 요소 관련 이벤트로 노출 되는 대신는 <xref:System.Windows.Input.Touch.FrameReported>이벤트는 응용 프로그램 수준에서 처리 하는 단일 이벤트.</xref:System.Windows.Input.Touch.FrameReported> 따라서 사용할 수 없습니다는 `sender` 어떤 요소가 터치 되었는지 확인 하려면 이벤트 처리기의 매개 변수입니다.       사용 하 여는 <xref:System.Windows.Input.TouchFrameEventArgs>가져오려는 <xref:System.Windows.Input.TouchPoint>터치 이벤트와 관련 된 된 값.</xref:System.Windows.Input.TouchPoint> </xref:System.Windows.Input.TouchFrameEventArgs> <xref:System.Windows.Input.TouchPoint>, 얻을 수 있습니다는 <xref:System.Windows.Input.TouchPoint.Position%2A>터치의 확인 여부는 <xref:System.Windows.Input.TouchAction>가 <xref:System.Windows.Input.TouchAction>, <xref:System.Windows.Input.TouchAction>, 또는 <xref:System.Windows.Input.TouchAction>작업.</xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchPoint.Position%2A> </xref:System.Windows.Input.TouchPoint> <xref:System.Windows.Input.TouchPoint> <xref:System.Windows.Input.TouchDevice>.</xref:System.Windows.Input.TouchDevice> 얻으려고</xref:System.Windows.Input.TouchPoint> 할 수도 있습니다. <xref:System.Windows.Input.TouchDevice>, 장치를 확인할 수 있습니다 <xref:System.Windows.Input.TouchDevice.Id%2A>있는 위치의 요소에 대 한 정보를 얻을.</xref:System.Windows.Input.TouchDevice.Id%2A> </xref:System.Windows.Input.TouchDevice>"
  example:
  - "The following example enables you to create simple patterns on a <xref:System.Windows.Controls.Canvas> by dragging two fingers across a touchscreen. Each touch is represented by a <xref:System.Windows.Input.TouchDevice>.The pattern is created by drawing a line between the touch points provided by the touches. This example requires a Windows Touch–compatible screen.  \n  \n The following markup creates the user interface, which consists of a <xref:System.Windows.Controls.Canvas> that is centered in a <xref:System.Windows.Controls.Grid>.  \n  \n [!code-xml[TouchFrameSample#000](~/add/codesnippet/xaml/wpftouchframesample/mainwindow.xaml#000)]  \n  \n The following code handles the <xref:System.Windows.Input.Touch.FrameReported> event. When a touch presses on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \n  \n [!code-vb[TouchFrameSample#100](~/add/codesnippet/visualbasic/wpftouchframesample/mainwindow.xaml.vb#100)]\n [!code-cs[TouchFrameSample#100](~/add/codesnippet/csharp/wpftouchframesample/mainwindow.xaml.cs#100)]"
  syntax:
    content: public static class Touch
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.Touch.FrameReported
  id: FrameReported
  parent: System.Windows.Input.Touch
  langs:
  - csharp
  name: FrameReported
  nameWithType: Touch.FrameReported
  fullName: System.Windows.Input.Touch.FrameReported
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "터치 메시지를 보낼 때 발생 합니다."
  remarks: "프레임은&1; 멀티 터치 메시지 또는 터치 포인트의 일련의 합니다. FrameReported 이벤트를 처리 하의 세부 정보에 액세스 하 여 작업에 응답할 수는 <xref:System.Windows.Input.TouchPoint>에서 <xref:System.Windows.Input.TouchFrameEventArgs>이벤트 데이터입니다.</xref:System.Windows.Input.TouchFrameEventArgs> </xref:System.Windows.Input.TouchPoint>       FrameReported 이벤트 다른 동일한 이벤트 모델을 사용 하지 않는 [!INCLUDE[TLA#tla_titlewinclient](~/add/includes/tlasharptla-titlewinclient-md.md)] 등 <xref:System.Windows.UIElement.TouchDown> <xref:System.Windows.UIElement.TouchMove>.</xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.UIElement.TouchDown> 의 이벤트를 입력 합니다. 개체 트리는 UI 통해 라우팅하는 요소 관련 이벤트로 노출 되는 대신 FrameReported 이벤트는 응용 프로그램 수준에서 처리 하는 단일 이벤트가입니다. 따라서 사용할 수 없습니다는 `sender` 어떤 요소가 터치 되었는지 확인 하려면 이벤트 처리기의 매개 변수입니다."
  example:
  - "The following example handles the FrameReported event. When a touch presses on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \n  \n This example is part of a larger example that is available in the <xref:System.Windows.Input.Touch> class overview.  \n  \n [!code-vb[TouchFrameSample#110](~/add/codesnippet/visualbasic/wpftouchframesample/mainwindow.xaml.vb#110)]\n [!code-cs[TouchFrameSample#110](~/add/codesnippet/csharp/wpftouchframesample/mainwindow.xaml.cs#110)]"
  syntax:
    content: public static event System.Windows.Input.TouchFrameEventHandler FrameReported;
    return:
      type: System.Windows.Input.TouchFrameEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Input.Touch.FrameReported
  parent: System.Windows.Input.Touch
  isExternal: false
  name: FrameReported
  nameWithType: Touch.FrameReported
  fullName: System.Windows.Input.Touch.FrameReported
- uid: System.Windows.Input.TouchFrameEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: TouchFrameEventHandler
  nameWithType: TouchFrameEventHandler
  fullName: System.Windows.Input.TouchFrameEventHandler
