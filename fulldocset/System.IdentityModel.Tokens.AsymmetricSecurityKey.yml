### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey
  id: AsymmetricSecurityKey
  children:
  - System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor
  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)
  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)
  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)
  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)
  - System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey
  langs:
  - csharp
  name: AsymmetricSecurityKey
  nameWithType: AsymmetricSecurityKey
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey
  type: Class
  summary: "비대칭 키에 대 한 기본 클래스입니다."
  remarks: "이 사용할 수 없습니다 클래스 [!INCLUDE[vsindigo](~/add/includes/vsindigo-md.md)] 부분 신뢰에서 실행 합니다."
  syntax:
    content: 'public abstract class AsymmetricSecurityKey : System.IdentityModel.Tokens.SecurityKey'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityKey
  implements: []
  inheritedMembers:
  - System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.KeySize
  platform:
  - net462
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  langs:
  - csharp
  name: AsymmetricSecurityKey()
  nameWithType: AsymmetricSecurityKey.AsymmetricSecurityKey()
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.AsymmetricSecurityKey()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Tokens.AsymmetricSecurityKey&quot;> </xref> 클래스입니다."
  syntax:
    content: protected AsymmetricSecurityKey ();
    parameters: []
  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)
  id: GetAsymmetricAlgorithm(System.String,System.Boolean)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  langs:
  - csharp
  name: GetAsymmetricAlgorithm(String,Boolean)
  nameWithType: AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "파생된 클래스에서 재정의 되 면 지정된 된 비대칭 암호화 알고리즘을 가져옵니다."
  remarks: "정적 필드를 사용 하 여는 <xref:System.IdentityModel.Tokens.SecurityAlgorithms>알고리즘을 지정 하려면 클래스.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.AsymmetricAlgorithm GetAsymmetricAlgorithm (string algorithm, bool privateKey);
    parameters:
    - id: algorithm
      type: System.String
      description: "만들려는 비대칭 알고리즘입니다."
    - id: privateKey
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>알고리즘을 만드는 데 개인 키가 있어야 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> 지정된 된 비대칭 암호화 알고리즘을 나타내는입니다.       일반적으로 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 에 전달 되는 <code> privateKey </code> 매개 변수는 개인 키로는 해독에 필요 합니다."
  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)
  id: GetHashAlgorithmForSignature(System.String)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  langs:
  - csharp
  name: GetHashAlgorithmForSignature(String)
  nameWithType: AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "파생된 클래스에서 재정의 하는 경우 디지털 서명에 대 한 해시를 생성 하는 암호화 알고리즘을 가져옵니다."
  remarks: "정적 필드를 사용 하 여는 <xref:System.IdentityModel.Tokens.SecurityAlgorithms>알고리즘을 지정 하려면 클래스.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.HashAlgorithm GetHashAlgorithmForSignature (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "해시 알고리즘입니다."
    return:
      type: System.Security.Cryptography.HashAlgorithm
      description: "A <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref> 디지털 서명에 대 한 해시를 생성 하는 합니다."
  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)
  id: GetSignatureDeformatter(System.String)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  langs:
  - csharp
  name: GetSignatureDeformatter(String)
  nameWithType: AsymmetricSecurityKey.GetSignatureDeformatter(String)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "파생된 클래스에서 재정의 하는 경우 디지털 서명에 대 한 디 포맷터 알고리즘을 가져옵니다."
  remarks: "서명 디 포맷터는 디지털 서명을 확인 하 고 일반적으로 사용 됩니다.       정적 필드를 사용 하 여는 <xref:System.IdentityModel.Tokens.SecurityAlgorithms>알고리즘을 지정 하려면 클래스.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.AsymmetricSignatureDeformatter GetSignatureDeformatter (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "디지털 서명에 대 한 디 포맷터 알고리즘입니다."
    return:
      type: System.Security.Cryptography.AsymmetricSignatureDeformatter
      description: "<xref href=&quot;System.Security.Cryptography.AsymmetricSignatureDeformatter&quot;> </xref> 디지털 서명에 대 한 디 포맷터 알고리즘을 나타내는입니다."
  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)
  id: GetSignatureFormatter(System.String)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  langs:
  - csharp
  name: GetSignatureFormatter(String)
  nameWithType: AsymmetricSecurityKey.GetSignatureFormatter(String)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "파생된 클래스에서 재정의 하는 경우 디지털 서명에 대 한 포맷터 알고리즘을 가져옵니다."
  remarks: "일반적으로 서명 포맷터는 디지털 서명을 생성 하 사용 됩니다.       정적 필드를 사용 하 여는 <xref:System.IdentityModel.Tokens.SecurityAlgorithms>알고리즘을 지정 하려면 클래스.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.AsymmetricSignatureFormatter GetSignatureFormatter (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "디지털 서명에 대 한 포맷터 알고리즘입니다."
    return:
      type: System.Security.Cryptography.AsymmetricSignatureFormatter
      description: "<xref href=&quot;System.Security.Cryptography.AsymmetricSignatureFormatter&quot;> </xref> 디지털 서명에 대 한 포맷터 알고리즘을 나타내는입니다."
  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey
  id: HasPrivateKey
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  langs:
  - csharp
  name: HasPrivateKey()
  nameWithType: AsymmetricSecurityKey.HasPrivateKey()
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "파생된 클래스에서 재정의 되 면 개인 키를 사용할 수 있는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public abstract bool HasPrivateKey ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>개인 키를 사용할 수 없는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: System.IdentityModel.Tokens.SecurityKey
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: AsymmetricSecurityKey()
  nameWithType: AsymmetricSecurityKey.AsymmetricSecurityKey()
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.AsymmetricSecurityKey()
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetAsymmetricAlgorithm(String,Boolean)
  nameWithType: AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetHashAlgorithmForSignature(String)
  nameWithType: AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)
- uid: System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetSignatureDeformatter(String)
  nameWithType: AsymmetricSecurityKey.GetSignatureDeformatter(String)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(String)
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricSignatureDeformatter
  nameWithType: AsymmetricSignatureDeformatter
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetSignatureFormatter(String)
  nameWithType: AsymmetricSecurityKey.GetSignatureFormatter(String)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(String)
- uid: System.Security.Cryptography.AsymmetricSignatureFormatter
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricSignatureFormatter
  nameWithType: AsymmetricSignatureFormatter
  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: HasPrivateKey()
  nameWithType: AsymmetricSecurityKey.HasPrivateKey()
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey()
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor*
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: AsymmetricSecurityKey
  nameWithType: AsymmetricSecurityKey.AsymmetricSecurityKey
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetAsymmetricAlgorithm
  nameWithType: AsymmetricSecurityKey.GetAsymmetricAlgorithm
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature*
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetHashAlgorithmForSignature
  nameWithType: AsymmetricSecurityKey.GetHashAlgorithmForSignature
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter*
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetSignatureDeformatter
  nameWithType: AsymmetricSecurityKey.GetSignatureDeformatter
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter*
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetSignatureFormatter
  nameWithType: AsymmetricSecurityKey.GetSignatureFormatter
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey*
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: HasPrivateKey
  nameWithType: AsymmetricSecurityKey.HasPrivateKey
