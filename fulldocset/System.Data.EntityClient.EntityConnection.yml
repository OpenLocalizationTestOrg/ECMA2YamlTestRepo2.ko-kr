### YamlMime:ManagedReference
items:
- uid: System.Data.EntityClient.EntityConnection
  id: EntityConnection
  children:
  - System.Data.EntityClient.EntityConnection.#ctor
  - System.Data.EntityClient.EntityConnection.#ctor(System.String)
  - System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)
  - System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.EntityClient.EntityConnection.BeginTransaction
  - System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)
  - System.Data.EntityClient.EntityConnection.Close
  - System.Data.EntityClient.EntityConnection.ConnectionString
  - System.Data.EntityClient.EntityConnection.ConnectionTimeout
  - System.Data.EntityClient.EntityConnection.CreateCommand
  - System.Data.EntityClient.EntityConnection.CreateDbCommand
  - System.Data.EntityClient.EntityConnection.Database
  - System.Data.EntityClient.EntityConnection.DataSource
  - System.Data.EntityClient.EntityConnection.DbProviderFactory
  - System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)
  - System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.EntityClient.EntityConnection.GetMetadataWorkspace
  - System.Data.EntityClient.EntityConnection.Open
  - System.Data.EntityClient.EntityConnection.ServerVersion
  - System.Data.EntityClient.EntityConnection.State
  - System.Data.EntityClient.EntityConnection.StoreConnection
  langs:
  - csharp
  name: EntityConnection
  nameWithType: EntityConnection
  fullName: System.Data.EntityClient.EntityConnection
  type: Class
  summary: "개념적 모델 및 데이터 원본 연결에 대 한 참조를 포함합니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "실수로 개체와 같은 설정 되지 않도록 <xref:System.Data.Common.CommandTrees>및 <xref:System.Data.Objects.ObjectContext>해당 메타 데이터와 비동기화 EntityConnection 해당 메타 데이터를 잠가야 합니다.</xref:System.Data.Objects.ObjectContext> </xref:System.Data.Common.CommandTrees> 연결 문자열을 변경할 수 없습니다 메타 데이터가 잠긴 후 합니다. 다음은 메타 데이터가 잠기는 두 가지 시나리오:-The EntityConnection 인스턴스 또는 기본 생성자를 통해 생성 된 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>연결 문자열을 허용 하는 생성자입니다.</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 두 경우 모두 연결을 열기 전에 연결 문자열이 여러 번 변경 될 수 있습니다. 호출 <xref:System.Data.EntityClient.EntityConnection.Open%2A>또는 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>하면 메타 데이터가 잠깁니다.</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> </xref:System.Data.EntityClient.EntityConnection.Open%2A>      -EntityConnection 인스턴스 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> <xref:System.Data.Metadata.Edm.MetadataWorkspace>및에 <xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> 허용 하는 생성자</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 를 통해 생성 이 경우 메타 데이터 생성 시에 잠겨 있습니다. 연결 문자열에도 변경할 수 없습니다.       메타 데이터가 로드 되는 EntityConnection 개념적 모델, 저장소 모델 및 매핑 파일은 모두 있는지 확인 합니다.       코드 예제를 보려면 참조 [EntityClient 작업](http://msdn.microsoft.com/en-us/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)합니다."
  syntax:
    content: 'public sealed class EntityConnection : System.Data.Common.DbConnection'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbConnection
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbConnection.GetSchema
  - System.Data.Common.DbConnection.GetSchema(System.String)
  - System.Data.Common.DbConnection.GetSchema(System.String,System.String[])
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.#ctor
  id: '#ctor'
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EntityConnection()
  nameWithType: EntityConnection.EntityConnection()
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection()
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> 클래스입니다."
  remarks: "실수로 개체와 같은 설정 되지 않도록 <xref:System.Data.Common.CommandTrees>및 <xref:System.Data.Objects.ObjectContext>해당 메타 데이터와 비동기화 <xref:System.Data.EntityClient.EntityConnection>해당 메타 데이터를 잠가야 합니다.</xref:System.Data.EntityClient.EntityConnection> </xref:System.Data.Objects.ObjectContext> </xref:System.Data.Common.CommandTrees> 연결 문자열을 변경할 수 없습니다 메타 데이터가 잠긴 후 합니다. 다음은 메타 데이터가 잠기는 두 가지 시나리오:- <xref:System.Data.EntityClient.EntityConnection>인스턴스가 기본 생성자를 통해 또는 통해 생성 되는 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>연결 문자열을 허용 하는 생성자입니다.</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> </xref:System.Data.EntityClient.EntityConnection> 두 경우 모두 연결을 열기 전에 연결 문자열이 여러 번 변경 될 수 있습니다. 호출 <xref:System.Data.EntityClient.EntityConnection.Open%2A>또는 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>하면 메타 데이터가 잠깁니다.</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> </xref:System.Data.EntityClient.EntityConnection.Open%2A>      <xref:System.Data.EntityClient.EntityConnection>인스턴스 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> <xref:System.Data.Metadata.Edm.MetadataWorkspace>및에 <xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> 허용 하는 생성자</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 를 통해 생성</xref:System.Data.EntityClient.EntityConnection> - 이 경우 메타 데이터 생성 시에 잠겨 있습니다. 연결 문자열에도 변경할 수 없습니다.       메타 데이터가 로드 되는 <xref:System.Data.EntityClient.EntityConnection>개념적 모델, 저장소 모델 및 매핑 파일이 모두 있는지 확인 합니다.</xref:System.Data.EntityClient.EntityConnection>       코드 예제를 보려면 참조 [EntityClient 작업](http://msdn.microsoft.com/en-us/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)합니다."
  syntax:
    content: public EntityConnection ();
    parameters: []
  overload: System.Data.EntityClient.EntityConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EntityConnection(String)
  nameWithType: EntityConnection.EntityConnection(String)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(String)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> 연결 문자열에 기반 하는 클래스입니다."
  remarks: "응용 프로그램의 구성 파일에 저장 되어 있는 명명 된 연결 문자열에 생성 합니다. 이 명명 된 연결 문자열을 대신 제공 될 수 있습니다는 `connectionString` <xref:System.Data.EntityClient.EntityConnection>클래스</xref:System.Data.EntityClient.EntityConnection> 를 인스턴스화할 때 매개 변수       실수로 개체를 설정 되지 않도록 <xref:System.Data.Common.CommandTrees>및 <xref:System.Data.Objects.ObjectContext>해당 메타 데이터와 비동기화 <xref:System.Data.EntityClient.EntityConnection>해당 메타 데이터를 잠가야 합니다.</xref:System.Data.EntityClient.EntityConnection> </xref:System.Data.Objects.ObjectContext> </xref:System.Data.Common.CommandTrees> 연결 문자열을 변경할 수 없습니다 메타 데이터가 잠긴 후 합니다. 다음은 메타 데이터가 잠기는 두 가지 시나리오:- <xref:System.Data.EntityClient.EntityConnection>인스턴스가 기본 생성자를 통해 또는 연결 문자열을 허용 하는이 생성자 (EntityConnection)를 통해 생성 됩니다.</xref:System.Data.EntityClient.EntityConnection> 두 경우 모두 연결을 열기 전에 연결 문자열이 여러 번 변경 될 수 있습니다. 호출 <xref:System.Data.EntityClient.EntityConnection.Open%2A>또는 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>하면 메타 데이터가 잠깁니다.</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> </xref:System.Data.EntityClient.EntityConnection.Open%2A>      <xref:System.Data.EntityClient.EntityConnection>인스턴스 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> <xref:System.Data.Metadata.Edm.MetadataWorkspace>및에 <xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> 허용 하는 생성자</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 를 통해 생성</xref:System.Data.EntityClient.EntityConnection> - 이 경우 메타 데이터 생성 시에 잠겨 있습니다. 연결 문자열에도 변경할 수 없습니다.       메타 데이터가 로드 되는 <xref:System.Data.EntityClient.EntityConnection>개념적 모델, 저장소 모델 및 매핑 파일이 모두 있는지 확인 합니다.</xref:System.Data.EntityClient.EntityConnection>       코드 예제를 보려면 참조 [EntityClient 작업](http://msdn.microsoft.com/en-us/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)합니다."
  syntax:
    content: public EntityConnection (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "공급자별 연결 문자열입니다."
  overload: System.Data.EntityClient.EntityConnection.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "잘못 된 연결 문자열 키워드를 제공 하거나 필요한 연결 문자열 키워드를 지정 하지 않았습니다."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)
  id: '#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)'
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EntityConnection(MetadataWorkspace,DbConnection)
  nameWithType: EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> 클래스를 지정 된 <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;> </xref> 및 <xref href=&quot;System.Data.Common.DbConnection&quot;> </xref>합니다."
  remarks: "이 생성자를 만들 수는 <xref:System.Data.EntityClient.EntityConnection>에서 아니라 디스크에 파일 또는 어셈블리에 포함된 된 리소스에서 메타 데이터에서.</xref:System.Data.EntityClient.EntityConnection>       실수로 개체와 같은 설정 되지 않도록 <xref:System.Data.Common.CommandTrees>및 <xref:System.Data.Objects.ObjectContext>해당 메타 데이터와 비동기화는 <xref:System.Data.EntityClient.EntityConnection>해당 메타 데이터를 잠가야 합니다.</xref:System.Data.EntityClient.EntityConnection> </xref:System.Data.Objects.ObjectContext> </xref:System.Data.Common.CommandTrees> 연결 문자열을 변경할 수 없습니다 메타 데이터가 잠긴 후 합니다. 다음은 메타 데이터가 잠기는 두 가지 시나리오:- <xref:System.Data.EntityClient.EntityConnection>인스턴스가 기본 생성자를 통해 또는 통해 생성 되는 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>연결 문자열을 허용 하는 생성자입니다.</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> </xref:System.Data.EntityClient.EntityConnection> 두 경우 모두 연결을 열기 전에 연결 문자열이 여러 번 변경 될 수 있습니다. 호출 <xref:System.Data.EntityClient.EntityConnection.Open%2A>또는 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>하면 메타 데이터가 잠깁니다.</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> </xref:System.Data.EntityClient.EntityConnection.Open%2A>      <xref:System.Data.EntityClient.EntityConnection>인스턴스는 <xref:System.Data.Metadata.Edm.MetadataWorkspace>및에 <xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> 허용 하는이 생성자 (EntityConnection)를 통해 생성</xref:System.Data.EntityClient.EntityConnection> - 이 경우 메타 데이터 생성 시에 잠겨 있습니다. 연결 문자열에도 변경할 수 없습니다.       메타 데이터가 로드 되는 <xref:System.Data.EntityClient.EntityConnection>개념적 모델, 저장소 모델 및 매핑 파일이 모두 있는지 확인 합니다.</xref:System.Data.EntityClient.EntityConnection>"
  syntax:
    content: public EntityConnection (System.Data.Metadata.Edm.MetadataWorkspace workspace, System.Data.Common.DbConnection connection);
    parameters:
    - id: workspace
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "A <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;> </xref> 이 연관 될 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>합니다."
    - id: connection
      type: System.Data.Common.DbConnection
      description: "기본 데이터 원본에 대 한 연결 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> 개체입니다."
  overload: System.Data.EntityClient.EntityConnection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>workspace</code> or <code>connection</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "개념적 모델 작업 영역에서 누락 되었습니다.       -또는-작업 영역에서 매핑 파일은 없습니다.       -또는-작업 영역에서 저장소 모델은 없습니다.       -또는- <code> connection </code> 닫힌된 상태에 있지 않습니다."
  - type: System.Data.ProviderIncompatibleException
    commentId: T:System.Data.ProviderIncompatibleException
    description: "<code> connection </code> ADO.NET Entity Framework 호환 공급자에서 가져오지 않았습니다."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "추가할 수 있습니다."
    return:
      type: System.Data.Common.DbTransaction
      description: "추가할 수 있습니다."
  overload: System.Data.EntityClient.EntityConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: EntityConnection.BeginTransaction()
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "기본 공급자를 사용 하 여 트랜잭션을 시작 합니다."
  remarks: "BeginTransaction 메서드에서 사용 된 <xref:System.Data.IsolationLevel>트랜잭션 격리 수준을.</xref:System.Data.IsolationLevel> 다른 격리 수준을 지정 하려면 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>.</xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 를 호출 합니다. 이 값은 기본 공급자에 따라 다르게 해석 될 수 있습니다. 트랜잭션 격리 수준을 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>.</xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 를 호출 하 여 명시적으로 지정 해야 여러 공급자 들 간에 이동 가능 하도록 응용 프로그램을 사용 하도록 하려는 경우       특정 순간에 BeginTransaction 통해 만들어진 활성 트랜잭션이 둘 이상 있을 수 있습니다. <xref:System.Data.EntityClient.EntityConnection>이미 있는 <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> 현재 트랜잭션 결과</xref:System.Data.EntityClient.EntityConnection> 에 BeginTransaction 오버 로드를 호출 하려는 경우"
  syntax:
    content: public System.Data.EntityClient.EntityTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.EntityClient.EntityTransaction
      description: "A new <xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;></xref>. 반환 된 <xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;> </xref> 인스턴스와 나중에 연결 될 수는 <xref href=&quot;System.Data.EntityClient.EntityCommand&quot;> </xref> 해당 트랜잭션에서 명령을 실행할 수 있습니다."
  overload: System.Data.EntityClient.EntityConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "기본 공급자에서 알 수 없습니다.       -또는-BeginTransaction에 대 한 호출에서 만들어진는 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> 현재 트랜잭션이 이미 있습니다.       -또는-의 상태는 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> 않습니다 <xref href=&quot;System.Data.ConnectionState&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "기본 공급자를 사용 하 여 지정 된 격리 수준의 트랜잭션을 시작 합니다."
  remarks: "특정 순간에 둘 이상의 활성 트랜잭션이 수 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>.</xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 통해 만들어진 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> <xref:System.Data.EntityClient.EntityConnection>이미 있는 <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> 현재 트랜잭션 결과</xref:System.Data.EntityClient.EntityConnection> 에 대 한 오버 로드</xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 중 하나를 호출 하려고"
  syntax:
    content: public System.Data.EntityClient.EntityTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "트랜잭션 격리 수준입니다."
    return:
      type: System.Data.EntityClient.EntityTransaction
      description: "A new <xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;></xref>. 반환 된 <xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;> </xref> 인스턴스와 나중에 연결 될 수는 <xref href=&quot;System.Data.EntityClient.EntityCommand&quot;> </xref> 해당 트랜잭션에서 명령을 실행할 수 있습니다."
  overload: System.Data.EntityClient.EntityConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "기본 공급자에서 알 수 없습니다.       -또는-에 대 한 호출 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction*>에서 수행 된는 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> 현재 트랜잭션이 이미.</xref:System.Data.EntityClient.EntityConnection.BeginTransaction*>       -또는-의 상태는 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> 않습니다 <xref href=&quot;System.Data.ConnectionState&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: EntityConnection.ChangeDatabase(String)
  fullName: System.Data.EntityClient.EntityConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "지원 안 됨"
  remarks: "ChangeDatabase 메서드는 <xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> 에서 파생 된 경우에 필요 이 메서드는 지원 되지 않으며 <xref:System.NotSupportedException>.</xref:System.NotSupportedException> 발생 합니다."
  syntax:
    content: public override void ChangeDatabase (string databaseName);
    parameters:
    - id: databaseName
      type: System.String
      description: "지원 안 됨"
  overload: System.Data.EntityClient.EntityConnection.ChangeDatabase*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "메서드가 호출 될 때를 나타냅니다."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Close
  id: Close
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Close()
  nameWithType: EntityConnection.Close()
  fullName: System.Data.EntityClient.EntityConnection.Close()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "데이터베이스에 연결을 닫습니다."
  remarks: "기본 데이터 공급자가 알 수 없는 경우 Close 호출은 아무 작업도 수행 하지 않습니다."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.EntityClient.EntityConnection.Close*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결을 닫는 중 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: EntityConnection.ConnectionString
  fullName: System.Data.EntityClient.EntityConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "가져오거나는 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> 연결 문자열입니다."
  remarks: "An `EntityClient` connection string consists of a sequence of keyword/value parameter pairs separated by semicolons. The equals sign (=) connects each keyword and its value. The following table lists the valid names for keyword values in the ConnectionString.  \n  \n|Keyword|Description|  \n|-------------|-----------------|  \n|`Provider`|Required if the `Name` keyword is not specified. The provider name, which is used to retrieve the <xref:System.Data.Common.DbProviderFactory> object for the underlying provider. This value is constant.<br /><br /> When the `Name` keyword is not included in the connection string, a non-empty value for the `Provider` keyword is required. This keyword is mutually exclusive with the `Name` keyword.|  \n|`Provider Connection String`|Optional. Specifies the provider-specific connection string that is passed to the underlying data source. This connection string is expressed by using valid keyword/value pairs for the data provider. An invalid `Provider Connection String` will cause a run-time error when it is evaluated by the data source.<br /><br /> This keyword is mutually exclusive with the `Name` keyword.<br /><br /> The value of the `Provider Connection String` must be surrounded by quotes. The following is an example:<br /><br /> `Provider Connection String =\"Server=serverName; User ID = userID\";`<br /><br /> The following example is not going to work:<br /><br /> `Provider Connection String =Server=serverName; User ID = userID`|  \n|`Metadata`|Required if the `Name` keyword is not specified. A pipe-delimited list of directories, files, and resource locations in which to look for model and mapping information. The following is an example:<br /><br /> `Metadata=`<br /><br /> `c:\\model &#124; c:\\model\\sql\\mapping.msl;`<br /><br /> Blank spaces on each side of the pipe separator are ignored.<br /><br /> This keyword is mutually exclusive with the `Name` keyword.|  \n|`Name`|The application can optionally specify the connection name in an application configuration file that provides the required keyword/value connection string values. In this case, you cannot supply them directly in the connection string. The `Name` keyword is not allowed in a configuration file.<br /><br /> When the `Name` keyword is not included in the connection string, a non-empty values for Provider keyword is required.<br /><br /> This keyword is mutually exclusive with all the other connection string keywords.|  \n  \n The application can supply the keyword/values directly in the ConnectionString property, or it can specify a value for the `Name` keyword. If the `Name` keyword is specified, the connection string keyword/values are retrieved from an application configuration file, as follows:  \n  \n `Name=AdventureWorksEntities;`  \n  \n If the `Name` keyword is used in the ConnectionString property, other keywords are not allowed. The `Name` keyword refers to a named connection string that is stored in the `connectionStrings` section in an application configuration file, as shown in the following example. The `Provider`, `Metadata`, and `Provider Connection String` values are retrieved from the configuration file at run time.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n The keyword/value pairs can also be supplied directly in the ConnectionString property, as shown in the following example. In this case, the `Name` keyword is not used.  \n  \n```  \n\"Provider=System.Data.SqlClient;  \nMetadata=c:\\metadata|c:\\Metadata\\Sql;  \nProvider Connection String= 'Data Source=localhost;  \n    Initial Catalog=AdventureWorks;Integrated Security=True;Connection Timeout=60' \"  \n```  \n  \n To avoid inadvertently putting objects such as <xref:System.Data.Common.CommandTrees> and <xref:System.Data.Objects.ObjectContext> out of sync with their metadata, <xref:System.Data.EntityClient.EntityConnection> must lock its metadata. No changes to the connection string are allowed after the metadata is locked. The following are two scenarios in which metadata is locked:  \n  \n-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the default constructor, or through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> constructor, which accepts a connection string. In either case the connection string might be changed multiple times before the connection is opened. Calling <xref:System.Data.EntityClient.EntityConnection.Open%2A> or <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> locks the metadata.  \n  \n-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> constructor, which accepts a <xref:System.Data.Metadata.Edm.MetadataWorkspace> and a <xref:System.Data.Common.DbConnection>. In this case the metadata is locked at construction time. No changes to the connection string are ever allowed.  \n  \n When metadata is loaded, the <xref:System.Data.EntityClient.EntityConnection> verifies that the conceptual model, the storage model, and the mapping file are all present."
  example:
  - "The following example demonstrates how to use the <xref:System.Data.EntityClient.EntityConnectionStringBuilder> in conjunction with a <xref:System.Data.SqlClient.SqlConnectionStringBuilder>. The code sets properties of a `SqlConnectionStringBuilder` to create a <xref:System.Data.SqlClient.SqlConnection> string that supplies part of the underlying provider connection string. Note that the `Provider` name cannot be set by using the `SqlConnectionStringBuilder`, because it does not use valid `SqlConnection` syntax. The code creates the <xref:System.Data.EntityClient.EntityConnection> string by setting `EntityConnectionStringBuilder` properties.  \n  \n [!code-vb[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/add/codesnippet/visualbasic/eSQLExamplesVB/Program.vb#buildingconnectionstringwithentitycommand)]\n [!code-cs[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/add/codesnippet/csharp/eSQLExamplesCS/Program.cs#buildingconnectionstringwithentitycommand)]"
  syntax:
    content: public override string ConnectionString { get; set; }
    return:
      type: System.String
      description: "데이터 원본에 초기 연결을 설정 하는 데 필요한 연결 문자열입니다. 기본값은 빈 문자열입니다. 닫힌된 연결, 현재 설정된에 값이 반환 됩니다. 설정 값이 없는 경우 빈 문자열이 반환 됩니다."
  overload: System.Data.EntityClient.EntityConnection.ConnectionString*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "다음 연결 문자열 속성을 설정 하려고 했습니다는 [EntityConnection](~/add/includes/ajax-current-ext-md.md)의 <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;> </xref> 초기화 되었습니다. [MetadataWorkspace](~/add/includes/ajax-current-ext-md.md) 은 때 초기화는 <xref href=&quot;System.Data.Odbc.OdbcError&quot;> </xref> 인스턴스가 사용 하는 오버 로드를 통해 생성 되는 <xref href=&quot;System.Data.Odbc.OdbcError&quot;> </xref> 매개 변수로 되거나는 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> 인스턴스가 열렸을 합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "잘못 된 연결 문자열 키워드를 제공 하거나 필요한 연결 문자열 키워드를 지정 하지 않았습니다."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: EntityConnection.ConnectionTimeout
  fullName: System.Data.EntityClient.EntityConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "시도 끝내 고 하 고 오류를 생성 하기 전에 연결을 설정 하려고 할 때 대기 시간 수를 가져옵니다."
  remarks: "기본 데이터 공급자를 알 수 없는 경우&0;을 반환 합니다."
  syntax:
    content: public override int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "시간 (초) 연결이 열리기 전까지 기다려야 합니다. 기본값은 기본 데이터 공급자의 기본 제한 시간입니다."
  overload: System.Data.EntityClient.EntityConnection.ConnectionTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "설정 값이 0 보다 작은 경우"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: EntityConnection.CreateCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "새 인스턴스를 만듭니다는 <xref href=&quot;System.Data.EntityClient.EntityCommand&quot;> </xref>와 <xref:System.Data.EntityClient.EntityCommand.Connection*>이 설정 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>.</xref:System.Data.EntityClient.EntityCommand.Connection*>"
  syntax:
    content: public System.Data.EntityClient.EntityCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.EntityClient.EntityCommand
      description: "<xref href=&quot;System.Data.EntityClient.EntityCommand&quot;> </xref> 개체입니다."
  overload: System.Data.EntityClient.EntityConnection.CreateCommand*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "기본 데이터 공급자의 이름을 알 수 없습니다."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: EntityConnection.CreateDbCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "추가할 수 있습니다."
  overload: System.Data.EntityClient.EntityConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Database
  id: Database
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Database
  nameWithType: EntityConnection.Database
  fullName: System.Data.EntityClient.EntityConnection.Database
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "현재 데이터베이스 이름이 나 연결이 열린 후 사용할 데이터베이스의 이름을 가져옵니다."
  remarks: "특정 키워드 값에 대 한 같은 `Database`, 데이터베이스 속성에 매핑되는 기본 데이터 공급자에 대 한 설명서를 참조 하십시오. 에 대 한 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 해당 키워드에 대 한 설명서를 참조 하십시오.는 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>속성.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>"
  syntax:
    content: public override string Database { get; }
    return:
      type: System.String
      description: "값은 <xref uid=&quot;langword_csharp_Database&quot; name=&quot;Database&quot; href=&quot;&quot;> </xref> 기본 데이터 공급자의 속성입니다."
  overload: System.Data.EntityClient.EntityConnection.Database*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "기본 데이터 공급자를 알 수 없습니다."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.DataSource
  id: DataSource
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: EntityConnection.DataSource
  fullName: System.Data.EntityClient.EntityConnection.DataSource
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "연결할 데이터 원본의 이름이 나 네트워크 주소를 가져옵니다."
  remarks: "특정 키워드 값에 대 한 같은 `DataSource`, DataSource 속성에 매핑되는 기본 데이터 공급자에 대 한 설명서를 참조 하십시오. 에 대 한 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 해당 키워드에 대 한 설명서를 참조 하십시오.는 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>속성.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>"
  syntax:
    content: public override string DataSource { get; }
    return:
      type: System.String
      description: "데이터 원본의 이름입니다. 기본값은 빈 문자열입니다."
  overload: System.Data.EntityClient.EntityConnection.DataSource*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "기본 데이터 공급자를 알 수 없습니다."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.DbProviderFactory
  id: DbProviderFactory
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: DbProviderFactory
  nameWithType: EntityConnection.DbProviderFactory
  fullName: System.Data.EntityClient.EntityConnection.DbProviderFactory
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }
    return:
      type: System.Data.Common.DbProviderFactory
      description: "추가할 수 있습니다."
  overload: System.Data.EntityClient.EntityConnection.DbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EntityConnection.Dispose(Boolean)
  fullName: System.Data.EntityClient.EntityConnection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "추가할 수 있습니다."
  overload: System.Data.EntityClient.EntityConnection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: EntityConnection.EnlistTransaction(Transaction)
  fullName: System.Data.EntityClient.EntityConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "이 인 리스트 먼 트 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> 지정 된 트랜잭션에 합니다."
  remarks: "이 메서드는 전달 된 <xref:System.Transactions.Transaction>.</xref:System.Transactions.Transaction> 명시적으로 참여 하는 데이터 원본 연결에 대 한 호출 전달"
  syntax:
    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "트랜잭션 개체를에 참여 하는입니다."
  overload: System.Data.EntityClient.EntityConnection.EnlistTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "상태는 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> 않습니다 <xref href=&quot;System.Data.ConnectionState&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace
  id: GetMetadataWorkspace
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: GetMetadataWorkspace()
  nameWithType: EntityConnection.GetMetadataWorkspace()
  fullName: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "반환 된 <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;> </xref> 이 연관 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>합니다."
  remarks: "A <xref:System.Data.Metadata.Edm.MetadataWorkspace>자동으로 생성 되는 <xref:System.Data.EntityClient.EntityConnection>클래스가 만들어집니다.</xref:System.Data.EntityClient.EntityConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> 만들기 프로세스에는 메타 데이터 관련 예외가 발생할 수 있습니다. 메타 데이터는 메모리에 로드 하 고 엔터티 데이터 모델 (EDM) 응용 프로그램 데이터 원본에 대 한 해당 메타 데이터 정보에 액세스할 수를 사용 합니다. 자세한 내용은 참조 [ADO.NET 메타 데이터](http://msdn.microsoft.com/en-us/196097a5-a791-4ac4-9e6a-805685d481d5)합니다.       실수로 개체와 같은 설정 되지 않도록 <xref:System.Data.Common.CommandTrees>및 <xref:System.Data.Objects.ObjectContext>해당 메타 데이터와 비동기화 <xref:System.Data.EntityClient.EntityConnection>해당 메타 데이터를 잠가야 합니다.</xref:System.Data.EntityClient.EntityConnection> </xref:System.Data.Objects.ObjectContext> </xref:System.Data.Common.CommandTrees> 연결 문자열을 변경할 수 없습니다 메타 데이터가 잠긴 후 합니다. 다음은 메타 데이터가 잠기는 두 가지 시나리오:- <xref:System.Data.EntityClient.EntityConnection>인스턴스가 기본 생성자를 통해 또는 통해 생성 되는 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>연결 문자열을 허용 하는 생성자입니다.</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> </xref:System.Data.EntityClient.EntityConnection> 두 경우 모두 연결을 열기 전에 연결 문자열이 여러 번 변경할 수 있습니다. <xref:System.Data.EntityClient.EntityConnection.Open%2A>또는 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>하면 메타 데이터가 잠깁니다.</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A></xref:System.Data.EntityClient.EntityConnection.Open%2A>      <xref:System.Data.EntityClient.EntityConnection>인스턴스 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> <xref:System.Data.Metadata.Edm.MetadataWorkspace>및에 <xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> 허용 하는 생성자</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 를 통해 생성</xref:System.Data.EntityClient.EntityConnection> - 이 경우 메타 데이터 생성 시에 잠겨 있습니다. 연결 문자열에도 변경할 수 없습니다.       메타 데이터가 로드 되는 <xref:System.Data.EntityClient.EntityConnection>개념적 모델, 저장소 모델 및 매핑 파일이 모두 있는지 확인 합니다.</xref:System.Data.EntityClient.EntityConnection>"
  syntax:
    content: public System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace ();
    parameters: []
    return:
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "<xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;> </xref> 이 연관 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>합니다."
  overload: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace*
  exceptions:
  - type: System.Data.MetadataException
    commentId: T:System.Data.MetadataException
    description: "인라인 연결 문자열에 잘못 된 <xref uid=&quot;langword_csharp_Metadata&quot; name=&quot;Metadata&quot; href=&quot;&quot;> </xref> 키워드 값입니다."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Open
  id: Open
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Open()
  nameWithType: EntityConnection.Open()
  fullName: System.Data.EntityClient.EntityConnection.Open()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "기본 데이터 공급자를 호출 하 여 데이터 원본에 대 한 연결을 설정<xref uid=&quot;langword_csharp_ Open&quot; name=&quot; Open&quot; href=&quot;&quot;> </xref> 메서드."
  remarks: "실수로 개체와 같은 설정 되지 않도록 <xref:System.Data.Common.CommandTrees>및 <xref:System.Data.Objects.ObjectContext>해당 메타 데이터와 비동기화 <xref:System.Data.EntityClient.EntityConnection>해당 메타 데이터를 잠가야 합니다.</xref:System.Data.EntityClient.EntityConnection> </xref:System.Data.Objects.ObjectContext> </xref:System.Data.Common.CommandTrees> 연결 문자열을 변경할 수 없습니다 메타 데이터가 잠긴 후 합니다. 다음은 메타 데이터가 잠기는 두 가지 시나리오:- <xref:System.Data.EntityClient.EntityConnection>인스턴스가 기본 생성자를 통해 또는 통해 생성 되는 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>연결 문자열을 허용 하는 생성자입니다.</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> </xref:System.Data.EntityClient.EntityConnection> 두 경우 모두 연결을 열기 전에 연결 문자열이 여러 번 변경 될 수 있습니다. 호출 <xref:System.Data.EntityClient.EntityConnection.Open%2A>또는 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>하면 메타 데이터가 잠깁니다.</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> </xref:System.Data.EntityClient.EntityConnection.Open%2A>      - <xref:System.Data.EntityClient.EntityConnection>인스턴스가 통해 생성 되는 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29>허용 하는 생성자는 <xref:System.Data.Metadata.Edm.MetadataWorkspace>및에 <xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> </xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> </xref:System.Data.EntityClient.EntityConnection> 이 경우 메타 데이터 생성 시에 잠겨 있습니다. 연결 문자열에도 변경할 수 없습니다.       메타 데이터가 로드 되는 <xref:System.Data.EntityClient.EntityConnection>개념적 모델, 저장소 모델 및 매핑 파일이 모두 있는지 확인 합니다.</xref:System.Data.EntityClient.EntityConnection>"
  syntax:
    content: public override void Open ();
    parameters: []
  overload: System.Data.EntityClient.EntityConnection.Open*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결을 열 또는 기본 데이터 공급자의 이름을 알 수 없는 오류가 발생 합니다."
  - type: System.Data.MetadataException
    commentId: T:System.Data.MetadataException
    description: "인라인 연결 문자열에 잘못 된 <xref uid=&quot;langword_csharp_Metadata&quot; name=&quot;Metadata&quot; href=&quot;&quot;> </xref> 키워드 값입니다."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: EntityConnection.ServerVersion
  fullName: System.Data.EntityClient.EntityConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "클라이언트가 연결 된 데이터 원본의 버전을 포함 하는 문자열을 가져옵니다."
  syntax:
    content: public override string ServerVersion { get; }
    return:
      type: System.String
      description: "공급자 연결 문자열에 포함 된 데이터 원본의 버전입니다."
  overload: System.Data.EntityClient.EntityConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결이 닫혀 있습니다."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.State
  id: State
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: State
  nameWithType: EntityConnection.State
  fullName: System.Data.EntityClient.EntityConnection.State
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "가져옵니다는 <xref href=&quot;System.Data.ConnectionState&quot;> </xref> 속성 기본 공급자의 경우는 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> 열려 합니다. 그렇지 않으면 반환 <xref href=&quot;System.Data.ConnectionState&quot;> </xref>합니다."
  syntax:
    content: public override System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "<xref href=&quot;System.Data.ConnectionState&quot;></xref>두 경우에는 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>의 내부 상태와 기본 공급자의 <xref href=&quot;System.Data.ConnectionState&quot;> </xref> 열려 있습니다. 경우는 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>의 상태는 open 이지만 공급자의 <xref href=&quot;System.Data.ConnectionState&quot;> </xref> 닫힌 경우이 속성은 반환 <xref href=&quot;System.Data.ConnectionState&quot;> </xref>합니다. 그렇지 않으면 반환 <xref href=&quot;System.Data.ConnectionState&quot;> </xref>합니다."
  overload: System.Data.EntityClient.EntityConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.StoreConnection
  id: StoreConnection
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: StoreConnection
  nameWithType: EntityConnection.StoreConnection
  fullName: System.Data.EntityClient.EntityConnection.StoreConnection
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "사용 되는 기본 데이터 원본 연결에 대 한 액세스를 제공는 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> 개체입니다."
  remarks: "경우는 <xref:System.Data.EntityClient.EntityConnection>개체가 닫혀, 반환 된 데이터 원본 연결을 닫습니다.</xref:System.Data.EntityClient.EntityConnection> 열려 있으면 열린 데이터 원본 연결이 반환 됩니다. 데이터 원본 연결 정보를 설정한 경우, 반환 된 값은 항상 null입니다. (예: 기본 생성자가 사용 하 고 연결 문자열이 없는 나중에 설정 된 경우) 데이터 원본 연결 정보가 없는 경우 null 참조가 반환 됩니다.       Entity Framework에서 사용 되는 데이터 원본 연결 응용 프로그램의 다른 부분과 공유할 수 있습니다. 데이터 원본 연결으로 반환 됩니다는 <xref:System.Data.Common.DbConnection>에서 개체는 <xref:System.Data.Objects.ObjectContext.Connection%2A>속성 <xref:System.Data.Objects.ObjectContext>, 또는 <xref:System.Data.EntityClient.EntityConnection>안내 하십시오.</xref:System.Data.EntityClient.EntityConnection> StoreConnection 속성에서</xref:System.Data.Objects.ObjectContext> </xref:System.Data.Objects.ObjectContext.Connection%2A> </xref:System.Data.Common.DbConnection>"
  syntax:
    content: public System.Data.Common.DbConnection StoreConnection { get; }
    return:
      type: System.Data.Common.DbConnection
      description: "<xref href=&quot;System.Data.Common.DbConnection&quot;> </xref> 데이터 원본 연결에 대 한 합니다."
  overload: System.Data.EntityClient.EntityConnection.StoreConnection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.Common.DbConnection
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.ProviderIncompatibleException
  parent: System.Data
  isExternal: false
  name: ProviderIncompatibleException
  nameWithType: ProviderIncompatibleException
  fullName: System.Data.ProviderIncompatibleException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Data.MetadataException
  parent: System.Data
  isExternal: false
  name: MetadataException
  nameWithType: MetadataException
  fullName: System.Data.MetadataException
- uid: System.Data.EntityClient.EntityConnection.#ctor
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection()
  nameWithType: EntityConnection.EntityConnection()
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection()
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.String)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection(String)
  nameWithType: EntityConnection.EntityConnection(String)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection(MetadataWorkspace,DbConnection)
  nameWithType: EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
- uid: System.Data.Metadata.Edm.MetadataWorkspace
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: MetadataWorkspace
  nameWithType: MetadataWorkspace
  fullName: System.Data.Metadata.Edm.MetadataWorkspace
- uid: System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: EntityConnection.BeginTransaction()
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction()
- uid: System.Data.EntityClient.EntityTransaction
  parent: System.Data.EntityClient
  isExternal: false
  name: EntityTransaction
  nameWithType: EntityTransaction
  fullName: System.Data.EntityClient.EntityTransaction
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: EntityConnection.ChangeDatabase(String)
  fullName: System.Data.EntityClient.EntityConnection.ChangeDatabase(String)
- uid: System.Data.EntityClient.EntityConnection.Close
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Close()
  nameWithType: EntityConnection.Close()
  fullName: System.Data.EntityClient.EntityConnection.Close()
- uid: System.Data.EntityClient.EntityConnection.ConnectionString
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionString
  nameWithType: EntityConnection.ConnectionString
  fullName: System.Data.EntityClient.EntityConnection.ConnectionString
- uid: System.Data.EntityClient.EntityConnection.ConnectionTimeout
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: EntityConnection.ConnectionTimeout
  fullName: System.Data.EntityClient.EntityConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.EntityClient.EntityConnection.CreateCommand
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: EntityConnection.CreateCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateCommand()
- uid: System.Data.EntityClient.EntityCommand
  parent: System.Data.EntityClient
  isExternal: false
  name: EntityCommand
  nameWithType: EntityCommand
  fullName: System.Data.EntityClient.EntityCommand
- uid: System.Data.EntityClient.EntityConnection.CreateDbCommand
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: EntityConnection.CreateDbCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateDbCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.EntityClient.EntityConnection.Database
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Database
  nameWithType: EntityConnection.Database
  fullName: System.Data.EntityClient.EntityConnection.Database
- uid: System.Data.EntityClient.EntityConnection.DataSource
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DataSource
  nameWithType: EntityConnection.DataSource
  fullName: System.Data.EntityClient.EntityConnection.DataSource
- uid: System.Data.EntityClient.EntityConnection.DbProviderFactory
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: EntityConnection.DbProviderFactory
  fullName: System.Data.EntityClient.EntityConnection.DbProviderFactory
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EntityConnection.Dispose(Boolean)
  fullName: System.Data.EntityClient.EntityConnection.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: EntityConnection.EnlistTransaction(Transaction)
  fullName: System.Data.EntityClient.EntityConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: GetMetadataWorkspace()
  nameWithType: EntityConnection.GetMetadataWorkspace()
  fullName: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace()
- uid: System.Data.EntityClient.EntityConnection.Open
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Open()
  nameWithType: EntityConnection.Open()
  fullName: System.Data.EntityClient.EntityConnection.Open()
- uid: System.Data.EntityClient.EntityConnection.ServerVersion
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ServerVersion
  nameWithType: EntityConnection.ServerVersion
  fullName: System.Data.EntityClient.EntityConnection.ServerVersion
- uid: System.Data.EntityClient.EntityConnection.State
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: State
  nameWithType: EntityConnection.State
  fullName: System.Data.EntityClient.EntityConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.EntityClient.EntityConnection.StoreConnection
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: StoreConnection
  nameWithType: EntityConnection.StoreConnection
  fullName: System.Data.EntityClient.EntityConnection.StoreConnection
- uid: System.Data.EntityClient.EntityConnection.#ctor*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection
  nameWithType: EntityConnection.EntityConnection
- uid: System.Data.EntityClient.EntityConnection.BeginDbTransaction*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: EntityConnection.BeginDbTransaction
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: EntityConnection.BeginTransaction
- uid: System.Data.EntityClient.EntityConnection.ChangeDatabase*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: EntityConnection.ChangeDatabase
- uid: System.Data.EntityClient.EntityConnection.Close*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Close
  nameWithType: EntityConnection.Close
- uid: System.Data.EntityClient.EntityConnection.ConnectionString*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionString
  nameWithType: EntityConnection.ConnectionString
- uid: System.Data.EntityClient.EntityConnection.ConnectionTimeout*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: EntityConnection.ConnectionTimeout
- uid: System.Data.EntityClient.EntityConnection.CreateCommand*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateCommand
  nameWithType: EntityConnection.CreateCommand
- uid: System.Data.EntityClient.EntityConnection.CreateDbCommand*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: EntityConnection.CreateDbCommand
- uid: System.Data.EntityClient.EntityConnection.Database*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Database
  nameWithType: EntityConnection.Database
- uid: System.Data.EntityClient.EntityConnection.DataSource*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DataSource
  nameWithType: EntityConnection.DataSource
- uid: System.Data.EntityClient.EntityConnection.DbProviderFactory*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: EntityConnection.DbProviderFactory
- uid: System.Data.EntityClient.EntityConnection.Dispose*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Dispose
  nameWithType: EntityConnection.Dispose
- uid: System.Data.EntityClient.EntityConnection.EnlistTransaction*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: EntityConnection.EnlistTransaction
- uid: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: GetMetadataWorkspace
  nameWithType: EntityConnection.GetMetadataWorkspace
- uid: System.Data.EntityClient.EntityConnection.Open*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Open
  nameWithType: EntityConnection.Open
- uid: System.Data.EntityClient.EntityConnection.ServerVersion*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ServerVersion
  nameWithType: EntityConnection.ServerVersion
- uid: System.Data.EntityClient.EntityConnection.State*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: State
  nameWithType: EntityConnection.State
- uid: System.Data.EntityClient.EntityConnection.StoreConnection*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: StoreConnection
  nameWithType: EntityConnection.StoreConnection
