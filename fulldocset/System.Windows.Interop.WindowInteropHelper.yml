### YamlMime:ManagedReference
items:
- uid: System.Windows.Interop.WindowInteropHelper
  id: WindowInteropHelper
  children:
  - System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  - System.Windows.Interop.WindowInteropHelper.EnsureHandle
  - System.Windows.Interop.WindowInteropHelper.Handle
  - System.Windows.Interop.WindowInteropHelper.Owner
  langs:
  - csharp
  name: WindowInteropHelper
  nameWithType: WindowInteropHelper
  fullName: System.Windows.Interop.WindowInteropHelper
  type: Class
  summary: "사이의 상호 운용을 지원 [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] 및 [!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)] 코드입니다."
  remarks: "이 클래스의 멤버 수에 대 한 내부 액세스 하려면 호출자는 [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] HWND 및 부모 HWND의는 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.</xref:System.Windows.Window>  이러한 멤버를 통해 적절 한 보안 검사가 수행 됩니다.       해당 HWND를 기반으로 하는 보다 구체적인 개체 필요할 때마다이 클래스를 사용 합니다.       호스트 해야 하는 예제 시나리오는 한 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 대화 상자에는 [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] 응용 프로그램입니다. 와 WindowInteropHelper 초기화는 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 대화 상자에 대 한 window 개체입니다. 가져올 수 있습니다는 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 에서 창 핸들 (HWND)는 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>속성에 대 한 소유자를 지정는 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 창에는 <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A>속성.</xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> </xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 다음 코드 예제에서는 WindowInteropHelper 호스트할 때 사용 하는 방법을 보여 줍니다는 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 대화 상자에는 [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] 응용 프로그램입니다.       [!code-cs[CorePseudocode #WindowInteropHelper](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)][!code-vb[CorePseudocode #WindowInteropHelper](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper) ] 을 가져오는 것이 클래스에서 지원 되는 또 다른 시나리오로 <xref:System.Windows.Interop.HwndSource>에서 개체는 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>개체입니다.</xref:System.Windows.Window> </xref:System.Windows.Interop.HwndSource>   <xref:System.Windows.Interop.HwndSource>직접 처리할 수 있으므로 [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] 를 통해 메시지는 <xref:System.Windows.Interop.HwndSource.AddHook%2A>메서드.</xref:System.Windows.Interop.HwndSource.AddHook%2A> </xref:System.Windows.Interop.HwndSource> 사용 하 여 <xref:System.Windows.Interop.HwndSource>및 <xref:System.Windows.Interop.HwndSource.AddHook%2A>대신는 <xref:System.Windows.Window>해당 기능이 나에서 처리 된 메시지를 계속 처리할 수 있습니다 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)].</xref:System.Windows.Window> </xref:System.Windows.Interop.HwndSource.AddHook%2A> </xref:System.Windows.Interop.HwndSource> <xref:System.Windows.Window>다음 호출 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>에서 HWND <xref:System.Windows.Interop.HwndSource>.</xref:System.Windows.Interop.HwndSource> 를 가져오려는 WindowInteropHelper에</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 소스</xref:System.Windows.Window> 를 사용 하 여 한 WindowInteropHelper 만들기"
  syntax:
    content: public sealed class WindowInteropHelper
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  id: '#ctor(System.Windows.Window)'
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: WindowInteropHelper(Window)
  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)
  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Interop.WindowInteropHelper&quot;> </xref> 지정 된 항목에 대 한 클래스 [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] 창."
  remarks: "창 대화 상자 또는 범위 내에서 호스팅하기에 적합 하지 않은 일 수 있습니다는 [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] 응용 프로그램입니다."
  syntax:
    content: public WindowInteropHelper (System.Windows.Window window);
    parameters:
    - id: window
      type: System.Windows.Window
      description: "A [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window 개체입니다."
  overload: System.Windows.Interop.WindowInteropHelper.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle
  id: EnsureHandle
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: EnsureHandle()
  nameWithType: WindowInteropHelper.EnsureHandle()
  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "HWND 아직 생성 되지 않은 경우 창의 HWND를 만듭니다."
  remarks: "관리 되는 <xref:System.Windows.Window>.</xref:System.Windows.Window> 실제 모습에서 창 핸들 (HWND) 만들기를 분리 하려면 때 EnsureHandle 방법 사용 창을 표시 하는 데 필요 없이 해당 작업을 수행할 수 있는 자동화 클라이언트가 있을 경우에 유용 합니다.       이 메서드는 네이티브 창이 집합 만듭니다 네이티브 창이 아직 만들지 않은 경우는 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>속성과 HWND 반환 합니다.</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 네이티브 창이 이미 생성 된 경우 기존 기본 창 핸들 반환 됩니다.       이 메서드를 호출 하 여 네이티브 창이 만들어지면는 <xref:System.Windows.Window.SourceInitialized>이벤트가 발생 합니다.</xref:System.Windows.Window.SourceInitialized>       쿼리는 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>속성 EnsureHandle 메서드가 호출 된 후 기존 창 핸들을 반환 합니다.</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 시각적 트리 후까지 창에 연결 되어 있지는 <xref:System.Windows.Window.Show%2A>메서드를 호출 합니다.</xref:System.Windows.Window.Show%2A>       한 번 이상 EnsureHandle 메서드를 호출 합니다. 새 창 핸들을 만들지 않습니다. 메서드를 호출 하면 EnsureHandle 핸들에 대 한 호출에서 이미 만들어진 때의 <xref:System.Windows.Window.Show%2A>메서드는 새 창 핸들을 만들지 않습니다.</xref:System.Windows.Window.Show%2A> 네이티브 창 핸들이 없는 EnsureHandle 메서드를 호출할 때 경우에 만들어집니다.       창 설정 된 속성을 통해 p/invoke 네이티브 창 Api를 사용 하 여 Api 관리 되는 창에 나타나지 않을 수 있습니다. 예를 들어, EnsureHandle 메서드를 호출한 후에 네이티브 MS_EX_TOPMOST 플래그를 사용 하 여 창을 설정 하는 경우는 <xref:System.Windows.Window.Topmost%2A>네이티브 설정을 반영 하도록 속성은 아닙니다.</xref:System.Windows.Window.Topmost%2A>"
  syntax:
    content: public IntPtr EnsureHandle ();
    parameters: []
    return:
      type: System.IntPtr
      description: "<xref:System.IntPtr>HWND를 나타내는입니다.</xref:System.IntPtr>"
  overload: System.Windows.Interop.WindowInteropHelper.EnsureHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.Handle
  id: Handle
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: Handle
  nameWithType: WindowInteropHelper.Handle
  fullName: System.Windows.Interop.WindowInteropHelper.Handle
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "에 대 한 창 핸들을 가져옵니다는 [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] 이 만드는 데 사용 되는 창 <xref href=&quot;System.Windows.Interop.WindowInteropHelper&quot;> </xref>합니다."
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] 창 핸들 (HWND)."
  overload: System.Windows.Interop.WindowInteropHelper.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.Owner
  id: Owner
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: Owner
  nameWithType: WindowInteropHelper.Owner
  fullName: System.Windows.Interop.WindowInteropHelper.Owner
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "핸들을 가져오거나 설정 합니다.는 [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] 소유자 창."
  remarks: "이 속성을 설정 하 여 windows 부모를 재지정할 수 있습니다. 일반 [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] 프로그래밍을 이미 사용 중인 windows 부모 재지정 하지 않습니다."
  syntax:
    content: public IntPtr Owner { get; set; }
    return:
      type: System.IntPtr
      description: "소유자 창 핸들 (HWND)입니다."
  overload: System.Windows.Interop.WindowInteropHelper.Owner*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: WindowInteropHelper(Window)
  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)
  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)
- uid: System.Windows.Window
  parent: System.Windows
  isExternal: false
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: EnsureHandle()
  nameWithType: WindowInteropHelper.EnsureHandle()
  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Interop.WindowInteropHelper.Handle
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Handle
  nameWithType: WindowInteropHelper.Handle
  fullName: System.Windows.Interop.WindowInteropHelper.Handle
- uid: System.Windows.Interop.WindowInteropHelper.Owner
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Owner
  nameWithType: WindowInteropHelper.Owner
  fullName: System.Windows.Interop.WindowInteropHelper.Owner
- uid: System.Windows.Interop.WindowInteropHelper.#ctor*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: WindowInteropHelper
  nameWithType: WindowInteropHelper.WindowInteropHelper
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: EnsureHandle
  nameWithType: WindowInteropHelper.EnsureHandle
- uid: System.Windows.Interop.WindowInteropHelper.Handle*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Handle
  nameWithType: WindowInteropHelper.Handle
- uid: System.Windows.Interop.WindowInteropHelper.Owner*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Owner
  nameWithType: WindowInteropHelper.Owner
