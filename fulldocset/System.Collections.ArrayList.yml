### YamlMime:ManagedReference
items:
- uid: System.Collections.ArrayList
  id: ArrayList
  children:
  - System.Collections.ArrayList.#ctor
  - System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  - System.Collections.ArrayList.#ctor(System.Int32)
  - System.Collections.ArrayList.Adapter(System.Collections.IList)
  - System.Collections.ArrayList.Add(System.Object)
  - System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - System.Collections.ArrayList.BinarySearch(System.Object)
  - System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.Capacity
  - System.Collections.ArrayList.Clear
  - System.Collections.ArrayList.Clone
  - System.Collections.ArrayList.Contains(System.Object)
  - System.Collections.ArrayList.CopyTo(System.Array)
  - System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  - System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  - System.Collections.ArrayList.Count
  - System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  - System.Collections.ArrayList.FixedSize(System.Collections.IList)
  - System.Collections.ArrayList.GetEnumerator
  - System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  - System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.Insert(System.Int32,System.Object)
  - System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.IsFixedSize
  - System.Collections.ArrayList.IsReadOnly
  - System.Collections.ArrayList.IsSynchronized
  - System.Collections.ArrayList.Item(System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  - System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  - System.Collections.ArrayList.Remove(System.Object)
  - System.Collections.ArrayList.RemoveAt(System.Int32)
  - System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  - System.Collections.ArrayList.Reverse
  - System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  - System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.Sort
  - System.Collections.ArrayList.Sort(System.Collections.IComparer)
  - System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  - System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  - System.Collections.ArrayList.Synchronized(System.Collections.IList)
  - System.Collections.ArrayList.SyncRoot
  - System.Collections.ArrayList.ToArray
  - System.Collections.ArrayList.ToArray(System.Type)
  - System.Collections.ArrayList.TrimToSize
  langs:
  - csharp
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
  type: Class
  summary: "구현 된 <xref:System.Collections.IList>인터페이스 필요에 따라 크기가 동적으로 증가 하는 배열을 사용 하 여 필요에 따라.</xref:System.Collections.IList>       이 형식에 대 한.NET Framework 소스 코드를 찾아보려면 참조는 [참조 소스](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)합니다."
  remarks: "> [!NOTE]>이 형식에 대 한.NET Framework 소스 코드를 보려면를 참조 하십시오.는 [참조 소스](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)합니다. 소스 코드를 온라인, 오프 라인에서 살펴보고에 대 한 참조를 다운로드 및; 디버그 시 소스 (패치 및 업데이트 포함)를 단계별로 실행 참조 [지침](http://referencesource.microsoft.com/)합니다.       ArrayList 클래스 개체의 유형이 다른 컬렉션을 보유 하도록 설계 되었습니다. 그러나 항상를 제공 하지 않습니다 최상의 성능을 합니다. 대신 다음 좋습니다:-다른 유형의 개체를 사용 하 여 컬렉션에는 `List<Object>` (C#에서) 또는 `List(Of Object)` (Visual Basic)에서는 입력 합니다.      -유형이 같은 개체의 컬렉션을 사용 하 여 <xref:System.Collections.Generic.List%601>클래스</xref:System.Collections.Generic.List%601>       &quot;성능 고려 사항&quot; 섹션을 참조는 <xref:System.Collections.Generic.List%601>참조 항목에 대 한 이러한 클래스의 상대 성능 설명은.</xref:System.Collections.Generic.List%601>       ArrayList 정렬할 보장 되지 않습니다.  호출 하 여 ArrayList를 정렬 해야 해당 <xref:System.Collections.ArrayList.Sort%2A>메서드 작업을 수행 하기 전에 (예: <xref:System.Collections.ArrayList.BinarySearch%2A>) 정렬할 목록의 해야 하는.</xref:System.Collections.ArrayList.BinarySearch%2A> </xref:System.Collections.ArrayList.Sort%2A> 새 요소를 추가할 때 자동으로 정렬 된 컬렉션을 유지 하려면 <xref:System.Collections.Generic.SortedSet%601>클래스</xref:System.Collections.Generic.SortedSet%601> 를 사용할 수 있습니다.       ArrayList 용량이 ArrayList 저장할 수 있는 요소의 수입니다. ArrayList에 요소가 추가 되 면 용량이 자동으로 증가 하면 재할당을 통해 필요에 따라 합니다. 호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.ArrayList.TrimToSize%2A>하거나 설정 하는 <xref:System.Collections.ArrayList.Capacity%2A>속성이 명시적으로.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.TrimToSize%2A>       매우 큰 ArrayList 개체에 대 한 설정 하 여 64 비트 시스템의 2 십억 요소에 최대 용량을 늘릴 수는 `enabled` 에 구성 요소의 특성 `true` 런타임 환경에서 합니다.       이 컬렉션의 요소는 정수 인덱스를 사용 하 여 액세스할 수 있습니다.  이 컬렉션의 인덱스는&0;부터 시작 합니다.       ArrayList 컬렉션에는 `null` 을 유효한 값으로. 또한 중복 되는 요소가 있습니다.       다차원 배열 ArrayList 컬렉션에서 요소로 사용 하 여 지원 되지 않습니다."
  example:
  - "The following code example shows how to create and initialize an ArrayList and how to display its values.  \n  \n [!code-cpp[Classic ArrayList Example#1](~/add/codesnippet/cpp/t-system.collections.arr_1.cpp)]\n [!code-cs[Classic ArrayList Example#1](~/add/codesnippet/csharp/t-system.collections.arr_1.cs)]\n [!code-vb[Classic ArrayList Example#1](~/add/codesnippet/visualbasic/t-system.collections.arr_1.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.ArrayList/ArrayListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class ArrayList : ICloneable, System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor
  id: '#ctor'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 비어 있는 상태에서 기본 초기 용량을 가지는 클래스입니다."
  remarks: "용량은 <xref:System.Collections.ArrayList>요소의 수가 하는 <xref:System.Collections.ArrayList>보유할 수 있습니다.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> 요소에 추가 되는 <xref:System.Collections.ArrayList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라.</xref:System.Collections.ArrayList>       컬렉션의 크기를 예상할 수 있는 경우 초기 용량을 지정 하지 않아도 크기 조정 작업 <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 에 요소를 추가 하는 동안 여러 번 수행       이 생성자는 o (1) 연산입니다."
  syntax:
    content: public ArrayList ();
    parameters: []
  overload: System.Collections.ArrayList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 지정된 된 컬렉션에서 복사 된 요소를 포함 하 고 복사 된 요소의 수와 같은 초기 용량을 가지는 클래스입니다."
  remarks: "용량은 <xref:System.Collections.ArrayList>요소의 수가 하는 <xref:System.Collections.ArrayList>보유할 수 있습니다.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> 요소에 추가 되는 <xref:System.Collections.ArrayList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라.</xref:System.Collections.ArrayList>       컬렉션의 크기를 예상할 수 있는 경우 초기 용량을 지정 하지 않아도 크기 조정 작업 <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 에 요소를 추가 하는 동안 여러 번 수행       요소는 <xref:System.Collections.ArrayList>순서는 <xref:System.Collections.IEnumerator> <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.IEnumerator> 가 읽을</xref:System.Collections.ArrayList> 에 복사 됩니다.       이 생성자는는 O (`n`) 작업, 여기서 `n` 에 있는 요소의 수는 `c`합니다."
  syntax:
    content: public ArrayList (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>해당 요소가 새 목록에 복사 됩니다.</xref:System.Collections.ICollection>"
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 비어 하며 지정된 된 초기 용량을 포함 합니다."
  remarks: "용량은 <xref:System.Collections.ArrayList>요소의 수가 하는 <xref:System.Collections.ArrayList>보유할 수 있습니다.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> 요소에 추가 되는 <xref:System.Collections.ArrayList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라.</xref:System.Collections.ArrayList>       컬렉션의 크기를 예상할 수 있는 경우 초기 용량을 지정 하지 않아도 크기 조정 작업 <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 에 요소를 추가 하는 동안 여러 번 수행       이 생성자는는 O (`n`) 작업, 여기서 `n` 은 `capacity`합니다."
  syntax:
    content: public ArrayList (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "새 목록에 처음 저장할 수 있는 요소의 수입니다."
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>가&0; 보다 작습니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  id: Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "만듭니다는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> <xref:System.Collections.IList>.</xref:System.Collections.IList> 특정에 대 한 래퍼"
  remarks: "어댑터는 <xref:System.Collections.IList>.</xref:System.Collections.IList> 의 내용을 복사 하지 않습니다. 대신, 한 <xref:System.Collections.ArrayList> <xref:System.Collections.IList>; <xref:System.Collections.IList> <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 에 영향을 줄</xref:System.Collections.IList> 을 따라서 변경 내용은</xref:System.Collections.IList> 래퍼</xref:System.Collections.ArrayList> 만 생성       <xref:System.Collections.ArrayList>클래스는 제네릭 제공 <xref:System.Collections.ArrayList.Reverse%2A>, <xref:System.Collections.ArrayList.BinarySearch%2A>및 <xref:System.Collections.ArrayList.Sort%2A>메서드.</xref:System.Collections.ArrayList.Sort%2A> </xref:System.Collections.ArrayList.BinarySearch%2A> </xref:System.Collections.ArrayList.Reverse%2A> </xref:System.Collections.ArrayList> 하지만이 래퍼 <xref:System.Collections.IList>는 래퍼를 통해 이러한 일반 작업을 수행할 수 있습니다. 수 <xref:System.Collections.IList>.</xref:System.Collections.IList> 에 직접 적용 되는 작업 보다는</xref:System.Collections.IList> 를 사용 하는 수단을 수 있습니다.       이 메서드는 o (1) 작업.      ## 버전 호환성.NET Framework 버전 1.0 및 1.1에서는 호출는 <xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29>메서드 오버 로드에는 <xref:System.Collections.ArrayList>래퍼 아닌 수로 상한을으로 두 번째 인수를 처리 하는 열거자를 반환 합니다.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29> 에 [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] 두 번째 인수 수로 올바르게 처리 됩니다."
  syntax:
    content: public static System.Collections.ArrayList Adapter (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>래핑할.</xref:System.Collections.IList>"
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> <xref:System.Collections.IList>.</xref:System.Collections.IList> 래퍼"
  overload: System.Collections.ArrayList.Adapter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Add(System.Object)
  id: Add(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "개체의 끝에 추가 된 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "<xref:System.Collections.ArrayList>허용 `null` 을 유효한 값으로 중복 요소를 허용 합니다.</xref:System.Collections.ArrayList>       경우 <xref:System.Collections.ArrayList.Count%2A>이미 <xref:System.Collections.ArrayList.Capacity%2A>의 용량이 <xref:System.Collections.ArrayList>자동으로 내부 배열을 다시 할당 하 여 증가 하는 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A>       경우 <xref:System.Collections.ArrayList.Count%2A>는 보다 작은 <xref:System.Collections.ArrayList.Capacity%2A>,이 메서드는 o (1) 작업.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> 이 메서드는 O 됩니다 용량을 새 요소로 적용로 늘려야 하는 경우 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_4_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_4_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_4_1.cpp)]"
  syntax:
    content: public virtual int Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>의 끝에 추가할 수는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Int32
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 하는 인덱스는 <code> value </code> 추가 되었습니다."
  overload: System.Collections.ArrayList.Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다.       -또는- <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 크기가 고정된 되어 있습니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  id: AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "요소에 추가 <xref:System.Collections.ICollection>의 끝에는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ArrayList>허용 `null` 을 유효한 값으로 중복 요소를 허용 합니다.</xref:System.Collections.ArrayList>       <xref:System.Collections.ICollection> <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 유지</xref:System.Collections.ICollection> 에 있는 요소의 순서       하는 경우 새 <xref:System.Collections.ArrayList.Count%2A>(현재 <xref:System.Collections.ArrayList.Count%2A>컬렉션의 크기를 더한) 보다 커야 <xref:System.Collections.ArrayList.Capacity%2A>의 용량이 <xref:System.Collections.ArrayList>자동으로 새 요소를 수용 하기 위해 내부 배열을 다시 할당 하 여 증가 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> </xref:System.Collections.ArrayList.Count%2A>       경우는 <xref:System.Collections.ArrayList>을 늘리지 않고도 새 요소를 수용할 수는 <xref:System.Collections.ArrayList.Capacity%2A>,이 메서드는 O는 (`n`) 작업, 여기서 `n` 추가할 요소의 수입니다.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList> 용량을 새 요소를 수용 하기 위해 증가 하는 경우이 메서드는 O는 됩니다 (`n` + `m`) 작업을 여기서 `n` 요소를 추가할 수의 수 및 `m` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_0_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_0_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_0_1.cpp)]"
  syntax:
    content: public virtual void AddRange (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>의 끝에 있는 요소를 추가할는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> 컬렉션 자체가 일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, 요소를 포함할 수는 있습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.ArrayList.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다.       -또는- <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 크기가 고정된 되어 있습니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  id: BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "정렬 된 전체 검색 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 요소에 대 한 기본 비교자를 사용 하 고 요소의&0;부터 시작 하는 인덱스를 반환 합니다."
  remarks: "`value` 매개 변수 및의 각 요소는 <xref:System.Collections.ArrayList>구현 해야 합니다는 <xref:System.IComparable>비교에 사용 되는 인터페이스입니다.</xref:System.IComparable> </xref:System.Collections.ArrayList> 요소는 <xref:System.Collections.ArrayList>값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야는 <xref:System.IComparable>구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.</xref:System.IComparable> </xref:System.Collections.ArrayList>       비교 `null` 종류와 허용 되 고 <xref:System.IComparable>.</xref:System.IComparable> 를 사용 하는 경우 예외가 생성 되지 않습니다 정렬할 때 `null` 다른 개체 보다 작은 것으로 간주 됩니다.       경우는 <xref:System.Collections.ArrayList>포함 둘 이상의 요소가 동일한 값을 가진 메서드가 반환, 각 항목 중 하 나와 반드시 첫 번째 항목 중 하나를 반환할 수 있습니다.</xref:System.Collections.ArrayList>       경우는 <xref:System.Collections.ArrayList>지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</xref:System.Collections.ArrayList> 검색 값 보다 큰 첫 번째 요소의 인덱스를 가져올이 음의 정수 비트 보수 연산을 (~)를 적용할 수 있습니다. 값을 삽입할 때는 <xref:System.Collections.ArrayList>, 정렬 순서를 유지 하기 위해이 인덱스를 삽입 지점으로 사용 해야 합니다.</xref:System.Collections.ArrayList>       이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to use <xref:System.Collections.ArrayList.BinarySearch%2A> to locate a specific object in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_13_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_13_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_13_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>찾으려고 합니다.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Int32
      description: "부터 <code> value </code> 정렬 된 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>경우 <code> value </code> 이 고, 그렇지 않으면 음수 번호 보다 큰 다음 요소의 인덱스의 비트 보수인 <code> value </code> 또는 <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*> 의 비트 보수 더 큰 요소가 없는 경우"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "모두 <code> value </code> 나 요소의 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 구현는 <xref:System.IComparable>인터페이스.</xref:System.IComparable>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>value</code>요소와 동일한 형식의 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "정렬 된 전체 검색 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 요소에 대 한 지정된 된 비교자를 사용 하 고 요소의&0;부터 시작 하는 인덱스를 반환 합니다."
  remarks: "비교자는 요소를 비교 하는 방법을 사용자 지정 합니다. 예를 들어, 사용할 수는 <xref:System.Collections.CaseInsensitiveComparer>대/소문자 구분 문자열 검색을 수행 하는 비교자로 인스턴스.</xref:System.Collections.CaseInsensitiveComparer>       경우 `comparer` 제공의 요소는 <xref:System.Collections.ArrayList>사용 하 여 지정된 된 값과 비교할 <xref:System.Collections.IComparer>구현.</xref:System.Collections.IComparer> </xref:System.Collections.ArrayList> 요소는 <xref:System.Collections.ArrayList>값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야 `comparer`, 그렇지 않으면 결과가 올바르지 않을 수 있습니다.</xref:System.Collections.ArrayList>       경우 `comparer` 은 `null`, 비교를 수행를 사용 하는 <xref:System.IComparable>또는 지정 된 값은 요소 자체에서 제공 되는 구현 합니다.</xref:System.IComparable> 요소는 <xref:System.Collections.ArrayList>값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야는 <xref:System.IComparable>구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.</xref:System.IComparable> </xref:System.Collections.ArrayList>       비교 `null` 종류와 허용 되 고 <xref:System.IComparable>.</xref:System.IComparable> 를 사용 하는 경우 예외가 생성 되지 않습니다 정렬할 때 `null` 다른 개체 보다 작은 것으로 간주 됩니다.       경우는 <xref:System.Collections.ArrayList>포함 둘 이상의 요소가 동일한 값을 가진 메서드가 반환, 각 항목 중 하 나와 반드시 첫 번째 항목 중 하나를 반환할 수 있습니다.</xref:System.Collections.ArrayList>       경우는 <xref:System.Collections.ArrayList>지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</xref:System.Collections.ArrayList> 검색 값 보다 큰 첫 번째 요소의 인덱스를 가져올이 음의 정수 비트 보수 연산을 (~)를 적용할 수 있습니다. 값을 삽입할 때는 <xref:System.Collections.ArrayList>, 정렬 순서를 유지 하기 위해이 인덱스를 삽입 지점으로 사용 해야 합니다.</xref:System.Collections.ArrayList>       이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following example creates an <xref:System.Collections.ArrayList> of colored animals. The provided <xref:System.Collections.IComparer> performs the string comparison for the binary search. The results of both an iterative search and a binary search are displayed.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/cpp/51ebb232-4223-422e-9ecb-_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/csharp/51ebb232-4223-422e-9ecb-_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/visualbasic/51ebb232-4223-422e-9ecb-_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value, System.Collections.IComparer comparer);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>찾으려고 합니다.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>요소를 비교할 때 사용할 구현입니다.</xref:System.Collections.IComparer>       -또는- <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 되는 기본 비교자를 사용 하는 <xref:System.IComparable>각 요소의 구현.</xref:System.IComparable>"
    return:
      type: System.Int32
      description: "부터 <code> value </code> 정렬 된 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>경우 <code> value </code> 이 고, 그렇지 않으면 음수 번호 보다 큰 다음 요소의 인덱스의 비트 보수인 <code> value </code> 또는 <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*> 의 비트 보수 더 큰 요소가 없는 경우"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>comparer</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 않으며 <code>value</code> 의 요소 또는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 구현는 <xref:System.IComparable> 인터페이스입니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 및 <code>value</code> 의 요소와 동일한 형식의 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "정렬 된 범위에서 요소를 검색 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 요소에 대 한 지정된 된 비교자를 사용 하 고 요소의&0;부터 시작 하는 인덱스를 반환 합니다."
  remarks: "비교자는 요소를 비교 하는 방법을 사용자 지정 합니다. 예를 들어, 사용할 수는 <xref:System.Collections.CaseInsensitiveComparer>대/소문자 구분 문자열 검색을 수행 하는 비교자로 인스턴스.</xref:System.Collections.CaseInsensitiveComparer>       경우 `comparer` 제공의 요소는 <xref:System.Collections.ArrayList>사용 하 여 지정된 된 값과 비교할 <xref:System.Collections.IComparer>구현.</xref:System.Collections.IComparer> </xref:System.Collections.ArrayList> 요소는 <xref:System.Collections.ArrayList>값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야 `comparer`, 그렇지 않으면 결과가 올바르지 않을 수 있습니다.</xref:System.Collections.ArrayList>       경우 `comparer` 은 `null`, 비교를 수행를 사용 하는 <xref:System.IComparable>또는 지정 된 값은 요소 자체에서 제공 되는 구현 합니다.</xref:System.IComparable> 요소는 <xref:System.Collections.ArrayList>값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야는 <xref:System.IComparable>구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.</xref:System.IComparable> </xref:System.Collections.ArrayList>       비교 `null` 종류와 허용 되 고 <xref:System.IComparable>.</xref:System.IComparable> 를 사용 하는 경우 예외가 생성 되지 않습니다 정렬할 때 `null` 다른 개체 보다 작은 것으로 간주 됩니다.       경우는 <xref:System.Collections.ArrayList>포함 둘 이상의 요소가 동일한 값을 가진 메서드가 반환, 각 항목 중 하 나와 반드시 첫 번째 항목 중 하나를 반환할 수 있습니다.</xref:System.Collections.ArrayList>       경우는 <xref:System.Collections.ArrayList>지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</xref:System.Collections.ArrayList> 검색 값 보다 큰 첫 번째 요소의 인덱스를 가져올이 음의 정수 비트 보수 연산을 (~)를 적용할 수 있습니다. 값을 삽입할 때는 <xref:System.Collections.ArrayList>, 정렬 순서를 유지 하기 위해이 인덱스를 삽입 지점으로 사용 해야 합니다.</xref:System.Collections.ArrayList>       이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 은 `count`합니다."
  syntax:
    content: public virtual int BinarySearch (int index, int count, object value, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "검색할 범위의 시작 인덱스&0;부터 시작 합니다."
    - id: count
      type: System.Int32
      description: "검색할 범위의 길이입니다."
    - id: value
      type: System.Object
      description: "<xref:System.Object>찾으려고 합니다.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>요소를 비교할 때 사용할 구현입니다.</xref:System.Collections.IComparer>       -또는- <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 되는 기본 비교자를 사용 하는 <xref:System.IComparable>각 요소의 구현.</xref:System.IComparable>"
    return:
      type: System.Int32
      description: "부터 <code> value </code> 정렬 된 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>경우 <code> value </code> 이 고, 그렇지 않으면 음수 번호 보다 큰 다음 요소의 인덱스의 비트 보수인 <code> value </code> 또는 <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*> 의 비트 보수 더 큰 요소가 없는 경우"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>및 <code>count</code> 의 올바른 범위를 나타내지 않습니다는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다.       -또는- <code>comparer</code> 은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 않으며 <code>value</code> 의 요소 또는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 구현는 <xref:System.IComparable> 인터페이스입니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 및 <code>value</code> 의 요소와 동일한 형식의 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다.       -또는- <code>count</code> 가&0; 보다 작습니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.Capacity
  id: Capacity
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "요소의 수를 가져오거나는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 포함 될 수 있습니다."
  remarks: "용량에는 요소의 수가 하는 <xref:System.Collections.ArrayList>저장할 수 있습니다.</xref:System.Collections.ArrayList> <xref:System.Collections.ArrayList.Count%2A>에서 요소를 실제로 <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 의 수</xref:System.Collections.ArrayList.Count%2A>       용량은 항상 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> 보다 크거나 같은 경우 경우 <xref:System.Collections.ArrayList.Count%2A>요소를 추가 하는 동안 용량을 초과 하면, 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여 용량을 증가 시켜 자동으로.</xref:System.Collections.ArrayList.Count%2A>       호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.ArrayList.TrimToSize%2A>또는 용량 속성을 명시적으로 설정 하 여.</xref:System.Collections.ArrayList.TrimToSize%2A> 용량 값을 명시적으로 설정 하는 경우 내부 배열에서 지정 된 용량에 맞게도 다시 할당 합니다.       이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. 속성을 설정 하는 O (`n`) 작업, 여기서 `n` 은 새 용량입니다."
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "요소의 수는는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 포함 될 수 있습니다."
  overload: System.Collections.ArrayList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "용량이 <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*> 보다 작은 값으로 설정 되어"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "시스템에서 사용할 수 있는 메모리가 부족 합니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.Clear
  id: Clear
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "모든 요소를 제거는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "<xref:System.Collections.ArrayList.Count%2A>가&0;으로 설정 하 고 컬렉션의 요소에 다른 개체에 대 한 참조도 해제 됩니다.</xref:System.Collections.ArrayList.Count%2A>       <xref:System.Collections.ArrayList.Capacity%2A>변경 되지 않습니다.</xref:System.Collections.ArrayList.Capacity%2A>  용량을 다시 설정 하는 <xref:System.Collections.ArrayList>, 호출 <xref:System.Collections.ArrayList.TrimToSize%2A>설정 또는 <xref:System.Collections.ArrayList.Capacity%2A>속성을 직접.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.TrimToSize%2A> </xref:System.Collections.ArrayList> 빈 트리밍 <xref:System.Collections.ArrayList>의 용량 설정는 <xref:System.Collections.ArrayList>기본 용량을.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_18_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_18_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_18_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.ArrayList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다.       -또는- <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 크기가 고정된 되어 있습니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.Clone
  id: Clone
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "단순 복사본을 만듭니다는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "컬렉션의 단순 복사본은 참조 형식 또는 값 형식 참조에서 참조 하는 개체를 복사 하지 않습니다 여부는 컬렉션의 요소에만 복사 합니다. 새 컬렉션에 대 한 참조는 원본 컬렉션에 대 한 참조를 가리키는 동일한 개체를 가리킵니다.       반면, 요소를 복사 하는 컬렉션의 전체 복사본 및 뿐만 아니라 해당 요소에서 직접 또는 간접적으로 참조 하는 모든 항목입니다.       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "단순 복사는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  overload: System.Collections.ArrayList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "에 요소가 있는지 여부를 결정은 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       이 메서드는 <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> 를 호출 하 여 같은지를 확인 합니다.       컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> .NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  syntax:
    content: public virtual bool Contains (object item);
    parameters:
    - id: item
      type: System.Object
      description: "<xref:System.Object>에서 찾으려고는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>item</code> is found in the <xref href=&quot;System.Collections.ArrayList&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.ArrayList.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  id: CopyTo(System.Array)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "전체 복사 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 호환 되는&1; 차원 <xref:System.Array>대상 배열의 처음부터 시작 하는 위치입니다.</xref:System.Array>"
  remarks: "지정된 된 배열의 호환 되는 형식 이어야 합니다.       이 방법은 사용 하 여 <xref:System.Array.Copy%2A?displayProperty=fullName>요소를 복사해올.</xref:System.Array.Copy%2A?displayProperty=fullName>       <xref:System.Array>열거자 <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 을 반복 하는 같은 순서로</xref:System.Array> 요소가 복사 되       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cs[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.arr_6_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_6_1.vb)]\n [!code-cpp[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.arr_6_1.cpp)]"
  syntax:
    content: public virtual void CopyTo (Array array);
    parameters:
    - id: array
      type: System.Array
      description: "1 차원 <xref:System.Array>에서 복사한 요소의 대상인 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> <xref:System.Array>0부터 시작 하는 인덱스가 있어야 합니다.</xref:System.Array>"
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>가 다차원 배열인 경우       -또는-소스에 있는 요소의 수 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 요소 수보다 크면 하는 대상 <code>array</code> 포함 될 수 있습니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "소스의 형식을 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 대상의 형식으로 자동 캐스팅할 수 없는 <code> array </code>합니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "전체 복사 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 호환 되는&1; 차원 <xref:System.Array>대상 배열의 지정된 된 인덱스부터 시작 합니다.</xref:System.Array>"
  remarks: "지정된 된 배열의 호환 되는 형식 이어야 합니다.       이 방법은 사용 하 여 <xref:System.Array.Copy%2A?displayProperty=fullName>요소를 복사해올.</xref:System.Array.Copy%2A?displayProperty=fullName>       <xref:System.Array>열거자 <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 을 반복 하는 같은 순서로</xref:System.Array> 요소가 복사 되       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_27_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_27_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_27_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "1 차원 <xref:System.Array>에서 복사한 요소의 대상인 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> <xref:System.Array>0부터 시작 하는 인덱스가 있어야 합니다.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "인덱스는&0;부터 시작 `array` 복사가 시작 되는 합니다."
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>가&0; 보다 작습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>가 다차원 배열인 경우       -또는-소스에 있는 요소의 수 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 에서 사용 가능한 공간 보다 큰 <code>arrayIndex</code> 대상의 끝에 <code>array</code>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "소스의 형식을 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 대상의 형식으로 자동 캐스팅할 수 없는 <code> array </code>합니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "요소의 범위를 복사는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 호환 되는&1; 차원 <xref:System.Array>대상 배열의 지정된 된 인덱스부터 시작 합니다.</xref:System.Array>"
  remarks: "지정된 된 배열의 호환 되는 형식 이어야 합니다.       이 방법은 사용 하 여 <xref:System.Array.Copy%2A?displayProperty=fullName>요소를 복사해올.</xref:System.Array.Copy%2A?displayProperty=fullName>       <xref:System.Array>열거자 <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 을 반복 하는 같은 순서로</xref:System.Array> 요소가 복사 되       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `count`합니다."
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/971aa346-8de3-42af-8cd4-_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/971aa346-8de3-42af-8cd4-_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/971aa346-8de3-42af-8cd4-_1.vb)]"
  syntax:
    content: public virtual void CopyTo (int index, Array array, int arrayIndex, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "원본 인덱스는&0;부터 시작 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 복사가 시작 되는 합니다."
    - id: array
      type: System.Array
      description: "1 차원 <xref:System.Array>에서 복사한 요소의 대상인 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> <xref:System.Array>0부터 시작 하는 인덱스가 있어야 합니다.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "인덱스는&0;부터 시작 `array` 복사가 시작 되는 합니다."
    - id: count
      type: System.Int32
      description: "복사할 요소의 수입니다."
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다.       -또는- <code>arrayIndex</code> 가&0; 보다 작습니다.       -또는- <code>count</code> 가&0; 보다 작습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>가 다차원 배열인 경우       -또는- <code>index</code> 보다 크거나 같으면는 <xref:System.Collections.ArrayList.Count*> 소스의 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다.       -또는-에서 요소 수가 <code>index</code> 소스 끝에 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 에서 사용 가능한 공간 보다 큰 <code>arrayIndex</code> 대상의 끝에 <code>array</code>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "소스의 형식을 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 대상의 형식으로 자동 캐스팅할 수 없는 <code> array </code>합니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.Count
  id: Count
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "에 실제로 포함 된 요소의 수를 가져옵니다는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "<xref:System.Collections.ArrayList.Capacity%2A>요소의 수가 하는 <xref:System.Collections.ArrayList>저장할 수 있습니다.</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Capacity%2A> Count가 실제로 있는 <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 에 있는 요소 수       <xref:System.Collections.ArrayList.Capacity%2A>개수 보다 크거나 같은 경우 항상입니다.</xref:System.Collections.ArrayList.Capacity%2A> 개수를 초과 하는 경우 <xref:System.Collections.ArrayList.Capacity%2A>요소를 추가 하는 동안 용량이 자동으로 증가 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여.</xref:System.Collections.ArrayList.Capacity%2A>       이 속성의 값을 검색 하는 것은 o (1) 작업입니다."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "에 실제로 포함 된 요소의 수는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  overload: System.Collections.ArrayList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  id: FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "반환 된 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 고정된 크기입니다."
  remarks: "이 래퍼를 추가 및 원래 <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 삭제를 방지 하기 위해 사용할 수 있습니다. 여전히 요소를 수정 하거나 바꿀 수 있습니다.       크기가 고정된 된 컬렉션은 지정 된 추가 및 요소를 제거 하지 못하도록 하는 래퍼 컬렉션 따라서를 추가 하거나 제거할 요소를 포함 하 여 내부 컬렉션을 변경 하는 경우 고정 크기 컬렉션에 해당 변경 내용을 반영 합니다.       이 메서드는 o (1) 작업."
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/m-system.collections.arr_12_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_12_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/m-system.collections.arr_12_1.cpp)]"
  syntax:
    content: public static System.Collections.ArrayList FixedSize (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 래핑할 합니다."
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 고정된 크기입니다."
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  id: FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "반환 된 <xref:System.Collections.IList>고정된 크기.</xref:System.Collections.IList>"
  remarks: "이 래퍼를 추가 및 원래 <xref:System.Collections.IList>.</xref:System.Collections.IList> 삭제를 방지 하기 위해 사용할 수 있습니다. 여전히 요소를 수정 하거나 바꿀 수 있습니다.       크기가 고정된 된 컬렉션은 지정 된 추가 및 요소를 제거 하지 못하도록 하는 래퍼 컬렉션 따라서를 추가 하거나 제거할 요소를 포함 하 여 내부 컬렉션을 변경 하는 경우 고정 크기 컬렉션에 해당 변경 내용을 반영 합니다.       이 메서드는 o (1) 작업."
  syntax:
    content: public static System.Collections.IList FixedSize (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>래핑할.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>고정된 크기.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "전체에 대 한 열거자를 반환 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "`foreach` C# 언어의 (`for each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.  따라서 사용 하 여 `foreach` 열거자를 직접 조작 하는 대신이 좋습니다.       열거자는 컬렉션의에서 데이터를 읽는 데 사용할 수 있지만 기본 컬렉션을 수정 하는 사용할 수 없습니다.       처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다. <xref:System.Collections.IEnumerator.Reset%2A>또한이 위치로 복원 열거자를 가져옵니다.</xref:System.Collections.IEnumerator.Reset%2A>  이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>정의 되지 않습니다.</xref:System.Collections.IEnumerator.Current%2A> 따라서 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> 의 값을 읽기 전에 컬렉션의 첫 번째 요소로 열거자를</xref:System.Collections.IEnumerator.MoveNext%2A> 호출 해야 합니다.       <xref:System.Collections.IEnumerator.Current%2A>될 때까지 동일한 개체를 반환 <xref:System.Collections.IEnumerator.MoveNext%2A>또는 <xref:System.Collections.IEnumerator.Reset%2A>호출 됩니다.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>설정 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       경우 <xref:System.Collections.IEnumerator.MoveNext%2A>전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A>반환할 수도 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> 마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`, <xref:System.Collections.IEnumerator.Current%2A>정의 되지 않습니다.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>다시, 컬렉션의 첫 번째 요소를 호출할 수 있습니다 <xref:System.Collections.IEnumerator.Reset%2A>그 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> 설정 하려면       열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다. 컬렉션 변경 되 면 추가, 수정 또는 요소를 삭제와 같은 열거자는 무효화 하 고 해당 동작은 정의 되지 않습니다.       열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.  을 열거 하는 동안 스레드로부터 안전을 보장 하려면 전체 열거 동안 컬렉션을 잠글 수 있습니다.  컬렉션에 여러 스레드에서 읽기 및 쓰기에 대 한 액세스를 허용 하려면 사용자 지정 동기화를 구현 해야 합니다.       이 메서드는 o (1) 작업."
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_2_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_2_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>전체 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  id: GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "요소 범위에 대 한 열거자를 반환 합니다.는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "`foreach` C# 언어의 (`for each` Visual c + +에서 `For Each` Visual Basic)은 열거자의 복잡성을 숨깁니다.  따라서 사용 하 여 `foreach` 열거자를 직접 조작 하는 대신이 좋습니다.       열거자는 컬렉션의에서 데이터를 읽는 데 사용할 수 있지만 기본 컬렉션을 수정 하는 사용할 수 없습니다.       처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다. <xref:System.Collections.IEnumerator.Reset%2A>또한이 위치로 복원 열거자를 가져옵니다.</xref:System.Collections.IEnumerator.Reset%2A>  이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>정의 되지 않습니다.</xref:System.Collections.IEnumerator.Current%2A> 따라서 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> 의 값을 읽기 전에 컬렉션의 첫 번째 요소로 열거자를</xref:System.Collections.IEnumerator.MoveNext%2A> 호출 해야 합니다.       <xref:System.Collections.IEnumerator.Current%2A>될 때까지 동일한 개체를 반환 <xref:System.Collections.IEnumerator.MoveNext%2A>또는 <xref:System.Collections.IEnumerator.Reset%2A>호출 됩니다.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>설정 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       경우 <xref:System.Collections.IEnumerator.MoveNext%2A>전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A>반환할 수도 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> 마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`, <xref:System.Collections.IEnumerator.Current%2A>정의 되지 않습니다.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>다시, 컬렉션의 첫 번째 요소를 호출할 수 있습니다 <xref:System.Collections.IEnumerator.Reset%2A>그 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> 설정 하려면       열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다. 컬렉션 변경 되 면 추가, 수정 또는 요소를 삭제와 같은 열거자는 무효화 하 고 해당 동작은 정의 되지 않습니다.       열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.  을 열거 하는 동안 스레드로부터 안전을 보장 하려면 전체 열거 동안 컬렉션을 잠글 수 있습니다.  컬렉션에 여러 스레드에서 읽기 및 쓰기에 대 한 액세스를 허용 하려면 사용자 지정 동기화를 구현 해야 합니다.       이 메서드는 o (1) 작업.      ## 버전 호환성.NET Framework 버전 1.0 및 1.1에서는 열거자에 대 한 프로그램 <xref:System.Collections.ArrayList>반환한 래퍼는 <xref:System.Collections.ArrayList.Adapter%2A>메서드 아닌 수로 상한을으로 두 번째 인수를 처리 합니다.</xref:System.Collections.ArrayList.Adapter%2A> </xref:System.Collections.ArrayList> 에 [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] 두 번째 인수 수로 올바르게 처리 됩니다."
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_10_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_10_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "0부터 시작 인덱스는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 열거자를 참조 해야 합니다."
    - id: count
      type: System.Int32
      description: "에 있는 요소의 수는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 열거자를 참조 해야 합니다."
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>의 요소는 지정 된 범위는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다.       -또는- <code>count</code> 가&0; 보다 작습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>및 <code>count</code> 의 올바른 범위를 지정 하지 않으면는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "반환 된 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 소스에 있는 요소의 하위 집합을 나타내는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "이 메서드는 요소의 복사본을 만들지 않습니다. 새 <xref:System.Collections.ArrayList>원본 <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 보기 창이</xref:System.Collections.ArrayList> 그러나 모든 후속 변경 내용은 원본 <xref:System.Collections.ArrayList>보기 창 <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 이 통해 수행 되어야 합니다</xref:System.Collections.ArrayList> 소스에 직접 변경 되 면 <xref:System.Collections.ArrayList>를 보기 창 <xref:System.Collections.ArrayList>무효화 될 것에 대 한 모든 작업 <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> 을 반환 합니다</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       이 메서드는 o (1) 작업."
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/m-system.collections.arr_7_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/m-system.collections.arr_7_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_7_1.vb)]"
  syntax:
    content: public virtual System.Collections.ArrayList GetRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "0부터 시작 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 범위 시작 되는 인덱스입니다."
    - id: count
      type: System.Int32
      description: "범위에 있는 요소의 수입니다."
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 소스에 있는 요소의 하위 집합을 나타내는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  overload: System.Collections.ArrayList.GetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다.       -또는- <code>count</code> 가&0; 보다 작습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>및 <code>count</code> 에 있는 요소의 유효한 범위를 나타내지 않습니다는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정된 된 검색 <xref:System.Object>전체에서 처음 나타나는&0;부터 시작 하는 인덱스를 반환 하 고 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  remarks: "<xref:System.Collections.ArrayList>검색은 앞으로 첫 번째 요소부터 마지막 요소에서.</xref:System.Collections.ArrayList>       이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       이 메서드는 <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> 를 호출 하 여 같은지를 확인 합니다.       컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> .NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_28_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_28_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_28_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>에서 찾으려고는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Int32
      description: "첫 번째로 나타나는 항목의&0;부터 시작 인덱스 <code> value </code> 전체 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>이거나, 없는 경우, 그렇지 않으면-1입니다."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  id: IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정된 된 검색 <xref:System.Object>의 요소 범위 내에서 처음 나타나는&0;부터 시작 인덱스를 반환 하 고는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 지정된 된 인덱스에서 마지막 요소로 확장 하는.</xref:System.Object>"
  remarks: "<xref:System.Collections.ArrayList>까지 검색은 `startIndex` 마지막 요소의 끝.</xref:System.Collections.ArrayList>       이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (`n`) 작업, 여기서 `n` 의 요소 수 `startIndex` <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 의 끝에       이 메서드는 <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> 를 호출 하 여 같은지를 확인 합니다.       컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> .NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_22_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_22_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_22_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>에서 찾으려고는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    - id: startIndex
      type: System.Int32
      description: "검색의&0;부터 시작 인덱스입니다. 0 (영) 빈 목록에서 유효합니다."
    return:
      type: System.Int32
      description: "첫 번째로 나타나는 항목의&0;부터 시작 인덱스 <code> value </code> 의 요소 범위 내에서 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 에서 확장 하는 <code> startIndex </code> 검색 되지 않으면, 마지막 요소까지-1입니다."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>유효한 인덱스 범위를 벗어났습니다는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정된 된 검색 <xref:System.Object>의 요소 범위 내에서 처음 나타나는&0;부터 시작 인덱스를 반환 하 고는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 지정된 된 인덱스에서 시작 하는 지정 된 개수의 요소를 포함 하.</xref:System.Object>"
  remarks: "<xref:System.Collections.ArrayList>까지 검색은 `startIndex` 에서 끝나는 `startIndex` 플러스 `count` 에서 1을 뺀 경우 `count` 가 0 보다 크면.</xref:System.Collections.ArrayList>       이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (`n`) 작업, 여기서 `n` 은 `count`합니다.       이 메서드는 <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> 를 호출 하 여 같은지를 확인 합니다.       컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> .NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_19_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_19_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_19_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>에서 찾으려고는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    - id: startIndex
      type: System.Int32
      description: "검색의&0;부터 시작 인덱스입니다. 0 (영) 빈 목록에서 유효합니다."
    - id: count
      type: System.Int32
      description: "검색할 섹션에 있는 요소의 수입니다."
    return:
      type: System.Int32
      description: "첫 번째로 나타나는 항목의&0;부터 시작 인덱스 <code> value </code> 의 요소 범위 내에서 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 에서 시작 하 <code> startIndex </code> 포함 <code> count </code> 개의 요소를 검색 되지 않으면-1입니다."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>유효한 인덱스 범위를 벗어났습니다는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다.       -또는- <code>count</code> 가&0; 보다 작습니다.       -또는- <code>startIndex</code> 및 <code>count</code> 의 올바른 섹션을 지정 하지 않으면는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "요소를 삽입는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 지정 된 인덱스입니다."
  remarks: "<xref:System.Collections.ArrayList>허용 `null` 을 유효한 값으로 중복 요소를 허용 합니다.</xref:System.Collections.ArrayList>       경우 <xref:System.Collections.ArrayList.Count%2A>이미 <xref:System.Collections.ArrayList.Capacity%2A>의 용량이 <xref:System.Collections.ArrayList>자동으로 내부 배열을 다시 할당 하 여 증가 하는 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A>       경우 `index` 같으면 <xref:System.Collections.ArrayList.Count%2A>, `value` <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 의 끝에 추가</xref:System.Collections.ArrayList.Count%2A>       연속 요소를 컬렉션의 목록, 삽입 지점 다음에 오는 요소를 아래로 이동 처럼 새 요소를 적용 합니다. 컬렉션은 지정 된 경우 이동 되는 요소의 인덱스도 업데이트 됩니다. 요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화 되어 있는 컬렉션에는 이러한 동작이 적용 되지 않습니다.       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/m-system.collections.arr_15_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_15_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/m-system.collections.arr_15_1.cpp)]"
  syntax:
    content: public virtual void Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "인덱스&0;부터 시작 `value` 삽입 해야 합니다."
    - id: value
      type: System.Object
      description: "<xref:System.Object>삽입할.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.ArrayList.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다.       -또는- <code>index</code> 보다 크면 <xref:System.Collections.ArrayList.Count*>합니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다.       -또는- <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 크기가 고정된 되어 있습니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  id: InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "컬렉션의 요소를 삽입 하는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 지정 된 인덱스입니다."
  remarks: "<xref:System.Collections.ArrayList>허용 `null` 을 유효한 값으로 중복 요소를 허용 합니다.</xref:System.Collections.ArrayList>       하는 경우 새 <xref:System.Collections.ArrayList.Count%2A>(현재 <xref:System.Collections.ArrayList.Count%2A>컬렉션의 크기를 더한) 보다 커야 <xref:System.Collections.ArrayList.Capacity%2A>의 용량이 <xref:System.Collections.ArrayList>자동으로 새 요소를 수용 하기 위해 내부 배열을 다시 할당 하 여 증가 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> </xref:System.Collections.ArrayList.Count%2A>       경우 `index` 같은지 <xref:System.Collections.ArrayList.Count%2A>, 요소 <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 의 끝에 추가 되며</xref:System.Collections.ArrayList.Count%2A> 를       <xref:System.Collections.ICollection> <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 유지</xref:System.Collections.ICollection> 에 있는 요소의 순서       연속 요소를 컬렉션의 목록, 삽입 지점 다음에 오는 요소를 아래로 이동 처럼 새 요소를 적용 합니다. 컬렉션은 지정 된 경우 이동 되는 요소의 인덱스도 업데이트 됩니다. 요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화 되어 있는 컬렉션에는 이러한 동작이 적용 되지 않습니다.       이 메서드는 O는 (`n` + `m`) 작업, 여기서 `n` 요소를 추가할 수의 수 및 `m` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/2b051d32-7260-4f65-b4d6-_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/2b051d32-7260-4f65-b4d6-_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/2b051d32-7260-4f65-b4d6-_1.cpp)]"
  syntax:
    content: public virtual void InsertRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "새 요소를 삽입 해야 하는&0;부터 시작 하는 인덱스입니다."
    - id: c
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>에 요소를 삽입 해야는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> 컬렉션 자체가 일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, 요소를 포함할 수는 있습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.ArrayList.InsertRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다.       -또는- <code>index</code> 보다 크면 <xref:System.Collections.ArrayList.Count*>합니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다.       -또는- <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 크기가 고정된 되어 있습니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 크기가 고정된 되어 있습니다."
  remarks: "컬렉션 크기가 고정된 된 컬렉션을 만든 후 기존 요소를 수정할 수 있습니다에 추가 하거나 제거할 요소의 수 없습니다.       크기가 고정된 된 컬렉션은 지정 된 추가 및 요소를 제거 하지 못하도록 하는 래퍼 컬렉션 따라서를 추가 하거나 제거할 요소를 포함 하 여 내부 컬렉션을 변경 하는 경우 고정 크기 컬렉션에 해당 변경 내용을 반영 합니다.       이 속성의 값을 검색 하는 것은 o (1) 작업입니다."
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/p-system.collections.arr_2_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_2_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/p-system.collections.arr_2_1.cpp)]"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 고정 되어 고, 그렇지 않으면 크기가 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.ArrayList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다."
  remarks: "읽기 전용 컬렉션에서는 컬렉션을 만든 후에 추가, 제거 또는 요소를 수정할 수 없습니다.       읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.       이 속성의 값을 검색 하는 것은 o (1) 작업입니다."
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/p-system.collections.arr_3_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/p-system.collections.arr_3_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용, 되지 않았으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.ArrayList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "에 대 한 액세스 여부를 나타내는 값을 가져옵니다는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 이 동기화 되었으면 (스레드로부터 안전 하 게 보호)."
  remarks: "스레드로부터 안전을 보장 하려면는 <xref:System.Collections.ArrayList>에서 반환 되는 래퍼를 통해 모든 작업을 완료 해야 합니다는 <xref:System.Collections.ArrayList.Synchronized%2A>메서드.</xref:System.Collections.ArrayList.Synchronized%2A> </xref:System.Collections.ArrayList>       컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_0_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_0_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_0_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_0_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.arr_0_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.arr_0_2.cs)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우에 대 한 액세스는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 은 동기화 (스레드로부터 안전함); 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.ArrayList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정된 된 인덱스에 요소를 가져오거나 설정 합니다."
  remarks: "항목을 반환 된 <xref:System.Object>이므로 합니다. 조작 하기 위해 원래 형식으로 반환된 된 값을 캐스팅 해야 할 수 있습니다.</xref:System.Object> 사항에 유의 해야 <xref:System.Collections.ArrayList>는 강력한 형식의 컬렉션이 아닙니다.</xref:System.Collections.ArrayList> 강력한 형식의 좋은 <xref:System.Collections.Generic.List%601>.</xref:System.Collections.Generic.List%601> 을 참조 하십시오.       <xref:System.Collections.ArrayList>허용 `null` 을 유효한 값으로 중복 요소를 허용 합니다.</xref:System.Collections.ArrayList>       이 속성은 다음 구문을 사용 하 여 컬렉션의 특정 요소를 액세스 하는 기능 제공: `myCollection[index]`합니다.       C# 언어는 키워드를 사용 하 여 항목 속성을 구현 하는 대신 인덱서를 정의 합니다. Visual Basic에서는 동일한 인덱싱 기능을 기본 속성으로 항목을 구현 합니다.       이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. o (1) 작업 이기도 속성을 설정 합니다."
  example:
  - "The following code example creates an <xref:System.Collections.ArrayList> and adds several items. The example demonstrates accessing elements with the Item property (the indexer in C#), and changing an element by assigning a new value to the Item property for a specified index. The example also shows that the Item property cannot be used to access or add elements outside the current size of the list.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#1](~/add/codesnippet/cpp/p-system.collections.arr_1_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Item#1](~/add/codesnippet/csharp/p-system.collections.arr_1_1.cs)]\n [!code-vb[System.Collections.ArrayList.Item#1](~/add/codesnippet/visualbasic/p-system.collections.arr_1_1.vb)]  \n  \n The following example uses the Item property explicitly to assign values to items in the list. The example defines a class that inherits an <xref:System.Collections.ArrayList> and adds a method to scramble the list items.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#2](~/add/codesnippet/cpp/p-system.collections.arr_1_2.cpp)]\n [!code-vb[System.Collections.ArrayList.Item#2](~/add/codesnippet/visualbasic/p-system.collections.arr_1_2.vb)]\n [!code-cs[System.Collections.ArrayList.Item#2](~/add/codesnippet/csharp/p-system.collections.arr_1_2.cs)]"
  syntax:
    content: public virtual object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "가져오거나 설정할 요소의&0;부터 시작 하는 인덱스입니다."
    return:
      type: System.Object
      description: "지정된 된 인덱스에 요소입니다."
  overload: System.Collections.ArrayList.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다.       -또는- <code>index</code> 보다 크거나 같으면 <xref:System.Collections.ArrayList.Count*>합니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  id: LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정된 된 검색 <xref:System.Object>전체에서 마지막 요소의&0;부터 시작 하는 인덱스를 반환 하 고 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  remarks: "<xref:System.Collections.ArrayList>뒤로 마지막 요소에서 시작 하 고 첫 번째 요소의 끝에 검색 됩니다.</xref:System.Collections.ArrayList>       이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> .NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_14_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_14_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_14_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>에서 찾으려고는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Int32
      description: "마지막으로 나타나는 항목의&0;부터 시작 인덱스 <code> value </code> 전체는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>이거나, 없는 경우, 그렇지 않으면-1입니다."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  id: LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정된 된 검색 <xref:System.Object>의 요소 범위에서 마지막으로 검색의&0;부터 시작 하는 인덱스를 반환 하 고는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 첫 번째 요소에서 지정 된 인덱스로 확장 하는.</xref:System.Object>"
  remarks: "<xref:System.Collections.ArrayList>뒤로 검색 됩니다에 `startIndex` 첫 번째 요소에서 끝나는.</xref:System.Collections.ArrayList>       이 메서드는 선형 검색; 수행 따라서이 메서드는 O는 (`n`) 작업, 여기서 `n` 의 시작 부분에서 요소 수는 <xref:System.Collections.ArrayList>를 `startIndex`.</xref:System.Collections.ArrayList>       이 메서드는 <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> 를 호출 하 여 같은지를 확인 합니다.       컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> .NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_26_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_26_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_26_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>에서 찾으려고는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    - id: startIndex
      type: System.Int32
      description: "역방향 검색의&0;부터 시작 인덱스입니다."
    return:
      type: System.Int32
      description: "마지막으로 나타나는 항목의&0;부터 시작 인덱스 <code> value </code> 의 요소 범위 내에서 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 에서 첫 번째 요소를 확장 하는 <code> startIndex </code>이거나, 없는 경우, 그렇지 않으면-1입니다."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>유효한 인덱스 범위를 벗어났습니다는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정된 된 검색 <xref:System.Object>의 요소 범위에서 마지막으로 검색의&0;부터 시작 하는 인덱스를 반환 하 고는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 지정된 된 수의 지정된 된 인덱스에서 끝나고 요소를 포함 하는.</xref:System.Object>"
  remarks: "<xref:System.Collections.ArrayList>뒤로 검색 됩니다에 `startIndex` 에서 끝나는 `startIndex` 뺀 `count` + 1, 경우 `count` 가 0 보다 크면.</xref:System.Collections.ArrayList>       이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (`n`) 작업, 여기서 `n` 은 `count`합니다.       이 메서드는 <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> 를 호출 하 여 같은지를 확인 합니다.       컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> .NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A>및 <xref:System.IComparable.CompareTo%2A>의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element. Note that `LastIndexOf` is a backward search; therefore, `count` must be less than or equal to `startIndex` + 1.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/62fe9219-7086-43ad-b565-_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/62fe9219-7086-43ad-b565-_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/62fe9219-7086-43ad-b565-_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>에서 찾으려고는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    - id: startIndex
      type: System.Int32
      description: "역방향 검색의&0;부터 시작 인덱스입니다."
    - id: count
      type: System.Int32
      description: "검색할 섹션에 있는 요소의 수입니다."
    return:
      type: System.Int32
      description: "중 마지막 요소의&0;부터 시작 인덱스 <code> value </code> 의 요소 범위 내에서 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 포함 된 <code> count </code> 에서 끝나고 요소 수 <code> startIndex </code>이거나, 없는 경우, 그렇지 않으면-1입니다."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>유효한 인덱스 범위를 벗어났습니다는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다.       -또는- <code>count</code> 가&0; 보다 작습니다.       -또는- <code>startIndex</code> 및 <code>count</code> 의 올바른 섹션을 지정 하지 않으면는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  id: ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "읽기 전용 반환 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 래퍼입니다."
  remarks: "수정 하지 못하게 하려면 `list`, 노출 `list` 이 래퍼를 사용할 때만 합니다.       읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션. 기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.       이 메서드는 o (1) 작업."
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_9_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_9_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_9_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList ReadOnly (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 래핑할 합니다."
    return:
      type: System.Collections.ArrayList
      description: "읽기 전용 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 래퍼 <code> list </code>합니다."
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  id: ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "읽기 전용 반환 <xref:System.Collections.IList>래퍼.</xref:System.Collections.IList>"
  remarks: "수정 하지 못하게 하려면 `list`, 노출 `list` 이 래퍼를 사용할 때만 합니다.       읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션. 기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.       이 메서드는 o (1) 작업."
  syntax:
    content: public static System.Collections.IList ReadOnly (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>래핑할.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "읽기 전용 <xref:System.Collections.IList>래퍼 <code> list </code>.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "첫 번째는 특정 개체에서 제거 된 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "경우는 <xref:System.Collections.ArrayList>지정 된 개체가 들어 있지 않은 여 <xref:System.Collections.ArrayList>변경 되지 않습니다.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> 예외가 throw 되지 않습니다.       이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       이 메서드는 <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> 를 호출 하 여 같은지를 확인 합니다.       목록 처럼 연속 된 요소 컬렉션에서 제거 된 요소 다음에 오는 요소는 빈된 자리를 차지 하도록 위로 이동 합니다. 컬렉션은 지정 된 경우 이동 되는 요소의 인덱스도 업데이트 됩니다. 요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화 되어 있는 컬렉션에는 이러한 동작이 적용 되지 않습니다."
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_5_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_5_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_5_1.cs)]"
  syntax:
    content: public virtual void Remove (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref:System.Object>에서 제거 하 고 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.ArrayList.Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다.       -또는- <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 크기가 고정된 되어 있습니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정된 된 인덱스에 요소를 제거는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "컬렉션의 크기 조정 되는 요소를 제거한 후의 값은 <xref:System.Collections.ArrayList.Count%2A>속성은&1; 씩 감소 합니다.</xref:System.Collections.ArrayList.Count%2A>       목록 처럼 연속 된 요소 컬렉션에서 제거 된 요소 다음에 오는 요소는 빈된 자리를 차지 하도록 위로 이동 합니다. 컬렉션은 지정 된 경우 이동 되는 요소의 인덱스도 업데이트 됩니다. 요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화 되어 있는 컬렉션에는 이러한 동작이 적용 되지 않습니다.       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_24_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_24_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_24_1.cs)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "제거할 요소의&0;부터 시작 하는 인덱스입니다."
  overload: System.Collections.ArrayList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다.       -또는- <code>index</code> 보다 크거나 같으면 <xref:System.Collections.ArrayList.Count*>합니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다.       -또는- <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 크기가 고정된 되어 있습니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "요소 범위를 제거는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "목록 처럼 연속 된 요소 컬렉션에서 제거 된 요소 다음에 오는 요소는 빈된 자리를 차지 하도록 위로 이동 합니다. 컬렉션은 지정 된 경우 이동 되는 요소의 인덱스도 업데이트 됩니다. 요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화 되어 있는 컬렉션에는 이러한 동작이 적용 되지 않습니다.       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_21_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_21_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_21_1.cs)]"
  syntax:
    content: public virtual void RemoveRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "제거할 요소 범위의 시작 인덱스&0;부터 시작 합니다."
    - id: count
      type: System.Int32
      description: "제거할 요소의 수입니다."
  overload: System.Collections.ArrayList.RemoveRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다.       -또는- <code>count</code> 가&0; 보다 작습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>및 <code>count</code> 에 있는 요소의 유효한 범위를 나타내지 않습니다는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다.       -또는- <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 크기가 고정된 되어 있습니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  id: Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "반환 된 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 요소가 지정된 된 값의 복사본 인 합니다."
  remarks: "<xref:System.Collections.ArrayList>허용 `null` 을 유효한 값으로 중복 요소를 허용 합니다.</xref:System.Collections.ArrayList>       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `count`합니다."
  example:
  - "The following code example shows how to create and initialize a new <xref:System.Collections.ArrayList> with the same value.  \n  \n [!code-cpp[Classic ArrayList.Repeat Example#1](~/add/codesnippet/cpp/m-system.collections.arr_1_1.cpp)]\n [!code-cs[Classic ArrayList.Repeat Example#1](~/add/codesnippet/csharp/m-system.collections.arr_1_1.cs)]\n [!code-vb[Classic ArrayList.Repeat Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_1_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList Repeat (object value, int count);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>에 여러 번 새 복사할 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> 값일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
    - id: count
      type: System.Int32
      description: "횟수 `value` 복사 해야 합니다."
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 와 <code> count </code> 의 요소는 모두의 복사본 수 <code> value </code>합니다."
  overload: System.Collections.ArrayList.Repeat*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>count</code>가&0; 보다 작습니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse
  id: Reverse
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "전체에 있는 요소의 순서를 반대로 바꿉니다 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "이 방법은 사용 하 여 <xref:System.Array.Reverse%2A?displayProperty=fullName>는 요소의 순서를 반대로 바꾸려면 되도록에 있는 요소 <xref:System.Collections.ArrayList>[i] 여기서 i 범위 내에 있는 인덱스는 이동 <xref:System.Collections.ArrayList>[j] 여기서 j는 `index`  +  `index`  +  `count` -i-1.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName>       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to reverse the sort order of the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Reverse Example#1](~/add/codesnippet/csharp/m-system.collections.arr_20_1.cs)]\n [!code-cpp[Classic ArrayList.Reverse Example#1](~/add/codesnippet/cpp/m-system.collections.arr_20_1.cpp)]\n [!code-vb[Classic ArrayList.Reverse Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_20_1.vb)]"
  syntax:
    content: public virtual void Reverse ();
    parameters: []
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "지정 된 범위의 요소 순서를 반대로 바꿉니다."
  remarks: "이 방법은 사용 하 여 <xref:System.Array.Reverse%2A?displayProperty=fullName>는 요소의 순서를 반대로 바꾸려면 되도록에 있는 요소 <xref:System.Collections.ArrayList>[i] 여기서 i 범위 내에 있는 인덱스는 이동 <xref:System.Collections.ArrayList>[j] 여기서 j는 `index`  +  `index`  +  `count` -i-1.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName>       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `count`합니다."
  example:
  - "The following code example shows how to reverse the sort order of the values in a range of elements in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_3_1.cpp)]\n [!code-cs[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_3_1.cs)]\n [!code-vb[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual void Reverse (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "순서를 반대로 바꿀 범위의&0;부터 시작 인덱스입니다."
    - id: count
      type: System.Int32
      description: "순서를 반대로 바꿀 범위의 요소 수입니다."
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다.       -또는- <code>count</code> 가&0; 보다 작습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>및 <code>count</code> 에 있는 요소의 유효한 범위를 나타내지 않습니다는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  id: SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "요소 범위에 대해 컬렉션의 요소를 복사는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "<xref:System.Collections.ArrayList>허용 `null` 을 유효한 값으로 중복 요소를 허용 합니다.</xref:System.Collections.ArrayList>       <xref:System.Collections.ICollection> <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 유지</xref:System.Collections.ICollection> 에 있는 요소의 순서       이 메서드는 O는 (`n` + 1) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/23e2a8fa-8e09-46ee-8256-_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/23e2a8fa-8e09-46ee-8256-_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/23e2a8fa-8e09-46ee-8256-_1.vb)]"
  syntax:
    content: public virtual void SetRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "0부터 시작 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 인덱스의 요소를 복사를 시작할 `c`합니다."
    - id: c
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>요소를 복사할는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> 컬렉션 자체가 일 수 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, 요소를 포함할 수는 있습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Collections.ArrayList.SetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다.       -또는- <code>index</code> 에 있는 요소의 수를 더한 값 <code>c</code> 보다 크면 <xref:System.Collections.ArrayList.Count*>합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort
  id: Sort
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "전체에 요소를 정렬 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "이 방법은 사용 하 여 <xref:System.Array.Sort%2A?displayProperty=fullName>, QuickSort 알고리즘을 사용 하 여.</xref:System.Array.Sort%2A?displayProperty=fullName> QuickSort 알고리즘은 비교 하는 &quot;작음 보다 크거나 같음&quot; 의미 정렬 (불안정 한 정렬을 라고도 함)은 최종 정렬 된 목록에서 먼저 발생 되어야 두 요소 중 비교 연산을 결정 합니다. 그러나 두 요소가 같은 경우 원래 순서 유지 되지 않을 수 있습니다. 반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다. 안정적인 정렬을 수행 하려면 사용자 지정을 구현 해야 <xref:System.Collections.IComparer>이 메서드의 다른 오버 로드와 함께 사용 하는 인터페이스입니다.</xref:System.Collections.IComparer>       평균적으로이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>최악의 경우에는 o (`n`^2) 작업.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Sort Example#1](~/add/codesnippet/csharp/m-system.collections.arr_11_1.cs)]\n [!code-vb[Classic ArrayList.Sort Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_11_1.vb)]\n [!code-cpp[Classic ArrayList.Sort Example#1](~/add/codesnippet/cpp/m-system.collections.arr_11_1.cpp)]"
  syntax:
    content: public virtual void Sort ();
    parameters: []
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  id: Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "전체에 요소를 정렬 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 지정된 된 비교자를 사용 하 여 합니다."
  remarks: "Sort 메서드를 사용 하 여 구현 하는 사용자 지정 비교자로 개체의 목록을 정렬 하는 <xref:System.Collections.IComparer>인터페이스.</xref:System.Collections.IComparer> 전달 하는 경우 `null` 에 대 한 `comparer`, 사용 하 여이 메서드는 <xref:System.IComparable>각 요소의 구현.</xref:System.IComparable> 이 경우 목록에 포함 된 개체를 구현 하는지 확인 해야는 <xref:System.Collections.IComparer>인터페이스 또는 예외가 발생 합니다.</xref:System.Collections.IComparer>       또한를 사용 하 여 <xref:System.IComparable>구현 목록 (불안정 한 정렬을 라고도 함) 비교 정렬을 수행 의미 이므로, 즉, 두 개의 요소가 동일한 경우 해당 순서 수 유지 되지.</xref:System.IComparable> 반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다. 안정적인 정렬을 수행 하려면 사용자 지정을 구현 해야 <xref:System.Collections.IComparer>인터페이스.</xref:System.Collections.IComparer>       평균적으로이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>최악의 경우에는 o (`n`^2) 작업.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/cpp/m-system.collections.arr_16_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/csharp/m-system.collections.arr_16_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/visualbasic/m-system.collections.arr_16_1.vb)]"
  syntax:
    content: public virtual void Sort (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>요소를 비교할 때 사용할 구현입니다.</xref:System.Collections.IComparer>       -또는-null 참조 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual basic에서) 사용 하는 <xref:System.IComparable>각 요소의 구현.</xref:System.IComparable>"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "두 요소를 비교 하는 동안 오류가 발생 했습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>에 대 한 전달 <code> comparer </code>, 목록에서 요소 <xref:System.IComparable>.</xref:System.IComparable> 를 구현 하지 않습니다"
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "요소 범위에 요소를 정렬 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 지정된 된 비교자를 사용 하 여 합니다."
  remarks: "경우 `comparer` 로 설정 된 `null`, 즉, 두 개의 요소가 동일한 경우 해당 순서 수 유지 되지 않으면이 메서드 (불안정 한 정렬을 라고도 함) 비교 정렬을 수행 합니다. 반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다. 안정적인 정렬을 수행 하려면 사용자 지정을 구현 해야 <xref:System.Collections.IComparer>인터페이스.</xref:System.Collections.IComparer>       평균적으로이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 은 `count`최악의 경우에는 O(n^2) 연산입니다."
  example:
  - "The following code example shows how to sort the values in a range of elements in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/cpp/b0a7df76-2f5d-45d4-bb7a-_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/csharp/b0a7df76-2f5d-45d4-bb7a-_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/visualbasic/b0a7df76-2f5d-45d4-bb7a-_1.vb)]"
  syntax:
    content: public virtual void Sort (int index, int count, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "정렬할 범위의의&0;부터 시작 인덱스입니다."
    - id: count
      type: System.Int32
      description: "정렬할 범위의 길이입니다."
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>요소를 비교할 때 사용할 구현입니다.</xref:System.Collections.IComparer>       -또는-null 참조 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual basic에서) 사용 하는 <xref:System.IComparable>각 요소의 구현.</xref:System.IComparable>"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다.       -또는- <code>count</code> 가&0; 보다 작습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>및 <code>count</code> 의 올바른 범위를 지정 하지 않으면는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "두 요소를 비교 하는 동안 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  id: Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "반환 된 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 래퍼를 동기화 (스레드로부터 안전함)."
  remarks: "스레드로부터 안전을 보장 하려면는 <xref:System.Collections.ArrayList>,이 래퍼를 통해 모든 작업을 완료 해야 합니다.</xref:System.Collections.ArrayList>       컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_25_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_25_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_25_1.cs)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_25_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.arr_25_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.arr_25_2.cs)]"
  syntax:
    content: public static System.Collections.ArrayList Synchronized (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 동기화 합니다."
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 래퍼를 동기화 (스레드로부터 안전함)."
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  id: Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "반환 된 <xref:System.Collections.IList>래퍼를 동기화 (스레드로부터 안전함).</xref:System.Collections.IList>"
  remarks: "스레드로부터 안전을 보장 하려면는 <xref:System.Collections.ArrayList>,이 래퍼를 통해 모든 작업을 완료 해야 합니다.</xref:System.Collections.ArrayList>       컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_23_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_23_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_23_1.cs)]  \n  \n This method is an O(1) operation."
  syntax:
    content: public static System.Collections.IList Synchronized (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>동기화.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>래퍼를 동기화 (스레드로부터 안전함).</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.SyncRoot
  id: SyncRoot
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체를 가져옵니다는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "동기화 된 버전을 만들려면는 <xref:System.Collections.ArrayList>를 사용 하 여는 <xref:System.Collections.ArrayList.Synchronized%2A>메서드.</xref:System.Collections.ArrayList.Synchronized%2A> </xref:System.Collections.ArrayList> 하지만 파생된 클래스의 동기화 된 버전을 제공할 수 있습니다는 <xref:System.Collections.ArrayList>SyncRoot 속성을 사용 하 여.</xref:System.Collections.ArrayList> 동기화 하는 코드의 SyncRoot에 대 한 작업을 수행 해야는 <xref:System.Collections.ArrayList>, <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> 으로 만들어지므로</xref:System.Collections.ArrayList> 이렇게 하면 다른 개체에서 파생 된 컬렉션의 적절 한 작업입니다. 특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <xref:System.Collections.ArrayList>개체입니다.</xref:System.Collections.ArrayList>       컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_4_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_4_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_4_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  overload: System.Collections.ArrayList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray
  id: ToArray
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "요소에 복사는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 새 <xref:System.Object>배열.</xref:System.Object>"
  remarks: "사용 하 여 요소가 복사 되 <xref:System.Array.Copy%2A?displayProperty=fullName>는 O 변수인 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  syntax:
    content: public virtual object[] ToArray ();
    parameters: []
    return:
      type: System.Object[]
      description: "<xref:System.Object>배열 요소의 복사본을 포함 하는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  overload: System.Collections.ArrayList.ToArray*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray(System.Type)
  id: ToArray(System.Type)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "요소에 복사는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 지정 된 요소 형식의 새 배열입니다."
  remarks: "개체는 <xref:System.Collections.ArrayList>개체 캐스팅는 <xref:System.Type>에 지정 된는 `type` 매개 변수.</xref:System.Type> </xref:System.Collections.ArrayList>       사용 하 여 요소가 복사 되 <xref:System.Array.Copy%2A?displayProperty=fullName>는 O 변수인 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  example:
  - "The following copy example shows how to copy the elements of an <xref:System.Collections.ArrayList> to a string array.  \n  \n [!code-cs[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/csharp/m-system.collections.arr_17_1.cs)]\n [!code-cpp[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/cpp/m-system.collections.arr_17_1.cpp)]\n [!code-vb[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/visualbasic/m-system.collections.arr_17_1.vb)]"
  syntax:
    content: public virtual Array ToArray (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "요소 <xref:System.Type>를 만들고 요소를 복사할 대상 배열입니다.</xref:System.Type>"
    return:
      type: System.Array
      description: "요소 복사본을 포함 하는 지정 된 요소 형식의 배열에서 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  overload: System.Collections.ArrayList.ToArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "소스의 형식을 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 지정된 된 형식으로 자동 캐스팅할 수 없습니다."
  platform:
  - net462
- uid: System.Collections.ArrayList.TrimToSize
  id: TrimToSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "용량을 실제로 수의 요소는 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>합니다."
  remarks: "이 메서드는 새 요소가 컬렉션에 추가 될 경우 컬렉션의 메모리 오버 헤드를 최소화할 데 사용할 수 있습니다.       다시 설정 하는 <xref:System.Collections.ArrayList>를 초기 상태로 호출는 <xref:System.Collections.ArrayList.Clear%2A>메서드 TrimToSize를 호출 하기 전에.</xref:System.Collections.ArrayList.Clear%2A> </xref:System.Collections.ArrayList> 빈 트리밍 <xref:System.Collections.ArrayList>의 용량 설정는 <xref:System.Collections.ArrayList>기본 용량을.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_8_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_8_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_8_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.ArrayList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 읽기 전용입니다.       -또는- <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 크기가 고정된 되어 있습니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.ArrayList.#ctor
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ArrayList.Add(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
- uid: System.Collections.ArrayList.Capacity
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
- uid: System.Collections.ArrayList.Clone
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
- uid: System.Collections.ArrayList.Contains(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
- uid: System.Collections.ArrayList.Count
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
- uid: System.Collections.ArrayList.GetEnumerator
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
- uid: System.Collections.ArrayList.IsFixedSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
- uid: System.Collections.ArrayList.Remove(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
- uid: System.Collections.ArrayList.Reverse
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
- uid: System.Collections.ArrayList.Sort
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
- uid: System.Collections.ArrayList.SyncRoot
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.ArrayList.ToArray(System.Type)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.ArrayList.TrimToSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
- uid: System.Collections.ArrayList.#ctor*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList.ArrayList
- uid: System.Collections.ArrayList.Adapter*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter
  nameWithType: ArrayList.Adapter
- uid: System.Collections.ArrayList.Add*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add
  nameWithType: ArrayList.Add
- uid: System.Collections.ArrayList.AddRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange
  nameWithType: ArrayList.AddRange
- uid: System.Collections.ArrayList.BinarySearch*
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch
  nameWithType: ArrayList.BinarySearch
- uid: System.Collections.ArrayList.Capacity*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear
  nameWithType: ArrayList.Clear
- uid: System.Collections.ArrayList.Clone*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone
  nameWithType: ArrayList.Clone
- uid: System.Collections.ArrayList.Contains*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains
  nameWithType: ArrayList.Contains
- uid: System.Collections.ArrayList.CopyTo*
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo
  nameWithType: ArrayList.CopyTo
- uid: System.Collections.ArrayList.Count*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize
  nameWithType: ArrayList.FixedSize
- uid: System.Collections.ArrayList.GetEnumerator*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator
  nameWithType: ArrayList.GetEnumerator
- uid: System.Collections.ArrayList.GetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange
  nameWithType: ArrayList.GetRange
- uid: System.Collections.ArrayList.IndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf
  nameWithType: ArrayList.IndexOf
- uid: System.Collections.ArrayList.Insert*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert
  nameWithType: ArrayList.Insert
- uid: System.Collections.ArrayList.InsertRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange
  nameWithType: ArrayList.InsertRange
- uid: System.Collections.ArrayList.IsFixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item
  nameWithType: ArrayList.Item
- uid: System.Collections.ArrayList.LastIndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf
  nameWithType: ArrayList.LastIndexOf
- uid: System.Collections.ArrayList.ReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly
  nameWithType: ArrayList.ReadOnly
- uid: System.Collections.ArrayList.Remove*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove
  nameWithType: ArrayList.Remove
- uid: System.Collections.ArrayList.RemoveAt*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt
  nameWithType: ArrayList.RemoveAt
- uid: System.Collections.ArrayList.RemoveRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange
  nameWithType: ArrayList.RemoveRange
- uid: System.Collections.ArrayList.Repeat*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat
  nameWithType: ArrayList.Repeat
- uid: System.Collections.ArrayList.Reverse*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse
  nameWithType: ArrayList.Reverse
- uid: System.Collections.ArrayList.SetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange
  nameWithType: ArrayList.SetRange
- uid: System.Collections.ArrayList.Sort*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort
  nameWithType: ArrayList.Sort
- uid: System.Collections.ArrayList.Synchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized
  nameWithType: ArrayList.Synchronized
- uid: System.Collections.ArrayList.SyncRoot*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray
  nameWithType: ArrayList.ToArray
- uid: System.Collections.ArrayList.TrimToSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize
  nameWithType: ArrayList.TrimToSize
