### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlReader
  id: XamlReader
  children:
  - System.Xaml.XamlReader.#ctor
  - System.Xaml.XamlReader.Close
  - System.Xaml.XamlReader.Dispose(System.Boolean)
  - System.Xaml.XamlReader.IsDisposed
  - System.Xaml.XamlReader.IsEof
  - System.Xaml.XamlReader.Member
  - System.Xaml.XamlReader.Namespace
  - System.Xaml.XamlReader.NodeType
  - System.Xaml.XamlReader.Read
  - System.Xaml.XamlReader.ReadSubtree
  - System.Xaml.XamlReader.SchemaContext
  - System.Xaml.XamlReader.Skip
  - System.Xaml.XamlReader.System#IDisposable#Dispose
  - System.Xaml.XamlReader.Type
  - System.Xaml.XamlReader.Value
  langs:
  - csharp
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
  type: Class
  summary: "XAML 입력을 사용 하 고 XAML 노드 스트림을 생성 하는 클래스에 대 한 기본 정의 제공 합니다."
  remarks: "XamlReader 추상 클래스 이며 구현 또는 모든 멤버에 대 한 작업 결과 포함 하는 정의 제공 하지 않습니다. XamlReader의 구현 하지 않은 멤버는 해당 멤버에 대 한 설명에 명시 되어 있습니다. 특히, XamlReader 추상 구현 해야 하는 멤버가 몇 개 및 여러 가상 멤버를 포함 합니다.       가상 멤버의 <xref:System.Xaml.XamlReader.ReadSubtree%2A>및 <xref:System.Xaml.XamlReader.Skip%2A>각 대부분의 경우에 적합 한 기본 구현을 제공 합니다.</xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.ReadSubtree%2A> 그러나는 <xref:System.Xaml.XamlReader.ReadSubtree%2A>및 <xref:System.Xaml.XamlReader.Skip%2A>기본 구현은 구현 된 XAML 판독기의 예상 되는 동작은 다른; 의존 특히는 <xref:System.Xaml.XamlReader.Read%2A>재정의.</xref:System.Xaml.XamlReader.Read%2A> </xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.ReadSubtree%2A> <xref:System.Xaml.XamlReader.Dispose%2A>작업 기본 구현이 있는 가상 멤버 이기도 합니다.</xref:System.Xaml.XamlReader.Dispose%2A>       다음 두 가지 클래스는 관련성이 가장 높은 및.NET Framework XAML 서비스의 클래스와 System.Xaml 어셈블리 실제 파생:- <xref:System.Xaml.XamlObjectReader>, 실행 시 응용 프로그램의 활성 개체 그래프를 사용 하 여 개체 그래프를 읽습니다.</xref:System.Xaml.XamlObjectReader>      - <xref:System.Xaml.XamlXmlReader> <xref:System.Xml.XmlReader>중간 도우미 클래스로 파일을 로드 하</xref:System.Xml.XmlReader> 는 일반을 사용 하 여 XML 텍스트 파일 형태로 XAML을 읽는,</xref:System.Xaml.XamlXmlReader>       다른 프레임 워크의 다른 XAML 판독기 <xref:System.Windows.Baml2006.Baml2006Reader>및 <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.</xref:System.Activities.Debugger.XamlDebuggerXmlReader> </xref:System.Windows.Baml2006.Baml2006Reader> 포함       와 다른 XamlReader [!INCLUDE[TLA#tla_xmldom](~/add/includes/tlasharptla-xmldom-md.md)] 및 <xref:System.Xml.XmlReader>XamlReader 없기 때문에 디자인 원칙은 `Create` 기본 기본 XAML 판독기 구현을 반환 하는 메서드.</xref:System.Xml.XmlReader> 대신 해당 생성자 또는 다른 클래스 관련 도우미 Api 호출 하 여 특정 XAML 판독기 파생된 클래스를 인스턴스화해야 합니다.      ## 대부분에 대 한 판독기 하위 트리에서 XamlReader에서 파생 되는 특정 XAML 판독기 클래스의 컨텍스트에서 XamlReader API를 호출 합니다. 그러나 하나의 특별 한 경우에 액세스할 XamlReader API 인스턴스에서 실용적인 XAML 판독기가 public이 고 <xref:System.Xaml.XamlObjectReader>또는 <xref:System.Xaml.XamlXmlReader>.</xref:System.Xaml.XamlXmlReader> </xref:System.Xaml.XamlObjectReader> 에서 파생 되지 않습니다. 이 경우 호출 하는 경우 <xref:System.Xaml.XamlReader.ReadSubtree%2A>, XamlReader 인스턴스를 반환 하는.</xref:System.Xaml.XamlReader.ReadSubtree%2A> 기본 구현에서 XamlReader이이 API에 의해 반환 되는 내부 클래스입니다.       하위 트리를 읽어 같은 Api에 대 한 유효한 작업을 주지는 XamlReader 가져온 <xref:System.Xaml.XamlReader.Read%2A>및 <xref:System.Xaml.XamlReader.NodeType%2A>, 이러한 작업은 부모 판독기 클래스 기반 및</xref:System.Xaml.XamlReader.NodeType%2A> </xref:System.Xaml.XamlReader.Read%2A> 이 디자인을 사용 하면 하위 트리 입력 된 프레임 수준 추적을 내부 클래스입니다. 활성 하위 트리 XamlReader 하면 현재 노드 위치 하위 트리의 경계를 벗어나 이동 되 면 특정 하위 판독기 파일 끝이 보고 하는지 또는 `null` 현재 노드에 있습니다.       하위 트리 판독기 사용에 대 한 정보는 특정 XamlReader Api에 포함 됩니다."
  syntax:
    content: 'public abstract class XamlReader : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.#ctor
  id: '#ctor'
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Xaml.XamlReader.XamlReader()
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "초기화는 <xref href=&quot;System.Xaml.XamlReader&quot;> </xref> 클래스입니다."
  syntax:
    content: protected XamlReader ();
    parameters: []
  overload: System.Xaml.XamlReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Close
  id: Close
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Close()
  nameWithType: XamlReader.Close()
  fullName: System.Xaml.XamlReader.Close()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "XAML 노드 스트림을 닫습니다."
  remarks: "기본 구현에서 호출 닫기를 호출 <xref:System.Xaml.XamlReader.Dispose%2A>와 `isDisposing` 매개 변수로 `true`.</xref:System.Xaml.XamlReader.Dispose%2A>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Xaml.XamlReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: XamlReader.Dispose(Boolean)
  fullName: System.Xaml.XamlReader.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Xaml.XamlReader&quot;> </xref>, 선택적으로 관리 되는 리소스를 해제 합니다."
  remarks: "가져오려는 기본 클래스를 호출 해야 <xref:System.Xaml.XamlReader.IsDisposed%2A>= `true`.</xref:System.Xaml.XamlReader.IsDisposed%2A>"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 리소스만 해제 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlReader.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.IsDisposed
  id: IsDisposed
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
  fullName: System.Xaml.XamlReader.IsDisposed
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다 여부 <xref:System.Xaml.XamlReader.Dispose*>호출한.</xref:System.Xaml.XamlReader.Dispose*>"
  syntax:
    content: protected bool IsDisposed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <xref:System.Xaml.XamlReader.Dispose*>호출 않았으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Xaml.XamlReader.Dispose*>"
  overload: System.Xaml.XamlReader.IsDisposed*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.IsEof
  id: IsEof
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: IsEof
  nameWithType: XamlReader.IsEof
  fullName: System.Xaml.XamlReader.IsEof
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "파생된 클래스에서 구현 하는 경우 판독기 위치가 파일 끝에 있는지 여부를 보고 하는 값을 가져옵니다."
  remarks: "하위 트리 판독기는 입력 한 하위 범위를 올바르게 반영 하는 동작으로 IsEof를 호출할 수 있습니다. 자세한 내용은의 &quot;하위 트리 판독기&quot; 섹션을 참조 하십시오. <xref:System.Xaml.XamlReader>, 참조 <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> 또는</xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract bool IsEof { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>위치가 개념의 파일 끝 XAML 노드 스트림의;에 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlReader.IsEof*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Member
  id: Member
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Member
  nameWithType: XamlReader.Member
  fullName: System.Xaml.XamlReader.Member
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "파생된 클래스에서 구현 된 경우 현재 멤버를 가져옵니다 판독기 위치에서 판독기 위치에 있으면는 <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref>합니다."
  remarks: "하위 트리 판독기 동작 제한 사항이 있는 멤버를 호출할 수 있습니다. 자세한 내용은의 &quot;하위 트리 판독기&quot; 섹션을 참조 하십시오. <xref:System.Xaml.XamlReader>, 참조 <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> 또는</xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlMember Member { get; }
    return:
      type: System.Xaml.XamlMember
      description: "현재 멤버입니다. 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>판독기 위치 멤버에 없는 경우, 합니다."
  overload: System.Xaml.XamlReader.Member*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Namespace
  id: Namespace
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Namespace
  nameWithType: XamlReader.Namespace
  fullName: System.Xaml.XamlReader.Namespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "파생된 클래스에서 구현 하는 경우 현재 노드에서 XAML 네임 스페이스 정보를 가져옵니다."
  remarks: "이 API의 계획 된 디자인은 <xref:System.Xaml.XamlReader.NodeType%2A> <xref:System.Xaml.XamlNodeType>.</xref:System.Xaml.XamlNodeType> 현재 노드의</xref:System.Xaml.XamlReader.NodeType%2A> 경우에만 null이 아닌 결과 반환 하는 것 XAML 스키마 컨텍스트에서 해석 된 속성의 일반 범위 지정 관점에서 개체 또는 멤버에 적용 되는 XAML 네임 스페이스를 보고 하지 않습니다. 응용 프로그램 작동에 대 한 정보를 캐시 하는 수단을 제공 해야 하므로 XAML 네임 스페이스 XAML 스키마 컨텍스트를 작성기 것으로 보고 되는 방법 외에 해당 정보가 필요한 경우 XAML 노드를 트래버스할 합니다. 참조<xref:System.Xaml.XamlXmlReader.Namespace%2A> 참조 구현에 메모와 관련해 서.</xref:System.Xaml.XamlXmlReader.Namespace%2A>"
  syntax:
    content: public abstract System.Xaml.NamespaceDeclaration Namespace { get; }
    return:
      type: System.Xaml.NamespaceDeclaration
      description: "사용 가능한 경우 XAML 네임 스페이스 정보 그렇지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlReader.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.NodeType
  id: NodeType
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: NodeType
  nameWithType: XamlReader.NodeType
  fullName: System.Xaml.XamlReader.NodeType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "파생된 클래스에서 구현 된 경우에 현재 노드의 형식을 가져옵니다."
  remarks: "하위 트리 판독기 동작이 제한 NodeType을 호출할 수 있습니다. 자세한 내용은의 &quot;하위 트리 판독기&quot; 섹션을 참조 하십시오. <xref:System.Xaml.XamlReader>, 참조 <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> 또는</xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlNodeType NodeType { get; }
    return:
      type: System.Xaml.XamlNodeType
      description: "값은 <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref> 열거 합니다."
  overload: System.Xaml.XamlReader.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Read
  id: Read
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Read()
  nameWithType: XamlReader.Read()
  fullName: System.Xaml.XamlReader.Read()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "파생된 클래스에서 구현 된 경우 노드를 사용할 수 있는 경우 해당 원본에서 다음 XAML 노드를 제공 합니다."
  remarks: "하위 트리 판독기 동작이 제한 읽기, 호출할 수 있습니다. 자세한 내용은의 &quot;하위 트리 판독기&quot; 섹션을 참조 하십시오. <xref:System.Xaml.XamlReader>, 참조 <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> 또는</xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract bool Read ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>노드를 사용할 수 없는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlReader.Read*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.ReadSubtree
  id: ReadSubtree
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: ReadSubtree()
  nameWithType: XamlReader.ReadSubtree()
  fullName: System.Xaml.XamlReader.ReadSubtree()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환은 <xref href=&quot;System.Xaml.XamlReader&quot;> </xref> 현재를 기반으로 하는 <xref href=&quot;System.Xaml.XamlReader&quot;> </xref>, 여기서 반환 된 <xref href=&quot;System.Xaml.XamlReader&quot;> </xref> XAML 노드 구조의 하위 트리를 반복 하는 데 사용 됩니다."
  remarks: "이 메서드는 기본 구현을 유효한 <xref:System.Xaml.XamlReader>.</xref:System.Xaml.XamlReader> 를 반환 합니다. 반환 된 <xref:System.Xaml.XamlReader>특정 제한 하는 내부 클래스 <xref:System.Xaml.XamlReader>작업.</xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader> 제한은 크기가 지정 된 하위 트리만 읽고 XAML 노드 집합에 대 한 큰 원본 및 파일의 끝을 반환 하는 목적과 일치 또는 `null` 하위 트리 종료 되 면 현재 노드에 있습니다.       초기에서 현재 노드를 확인 해야 하는 일반적으로 <xref:System.Xaml.XamlReader.Read%2A>하위 트리 판독기 해야 하는지 여부를 확인 하려면.</xref:System.Xaml.XamlReader.Read%2A> 이 확인 하는 방법은 구현 관련; 수 있습니다. 그러나 모든 하위 트리에 대 한 여러 하위 트리 판독기를 만들지 마십시오. 또한 특정 노드의 사례에 대 한 하위 트리 판독기를 호출 하지 않습니다 (예: <xref:System.Xaml.XamlNodeType>) 노드의 하위 트리를 포함할 수 없는.</xref:System.Xaml.XamlNodeType>       하위 트리 판독기를 얻은 후 호출 해야 <xref:System.Xaml.XamlReader.Read%2A>현재 노드를 가져오는 데 (호출 또는 <xref:System.Xaml.XamlReader.Skip%2A>다음 노드를 가져올 수).</xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.Read%2A> 자동으로 가져오지 못하면 초기 노드 위치 하위 트리 판독기를 만들 때.       ReadSubtree이 기본 구현에서 호출 하 여 사용 하는 판독기는 내부 클래스입니다. 내부 클래스 동작을 기반으로 <xref:System.Xaml.XamlReader>ReadSubtree를 호출할 때 사용 되는 구현.</xref:System.Xaml.XamlReader> 내부 클래스의 목적은를 래핑하는 <xref:System.Xaml.XamlReader.Read%2A>및 일반 이동 동작.</xref:System.Xaml.XamlReader.Read%2A> 간 이동을 추적 하 여 원하는 하위 내부에 머무는 <xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType> 쌍 또는 <xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType> 쌍.</xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> 또한 올바르게 반환 `false` 에 대 한 <xref:System.Xaml.XamlReader.Read%2A>및 `true` 에 대 한 <xref:System.Xaml.XamlReader.IsEof%2A>때 판독기가 끝에는 하위 트리의 진입점에 의해 정의 된 대로.</xref:System.Xaml.XamlReader.IsEof%2A> </xref:System.Xaml.XamlReader.Read%2A> 일반적으로 한다고 가정 하기 모든 <xref:System.Xaml.XamlReader>하위 트리 판독기에서 호출 API에는 전체와 동일한 구현 <xref:System.Xaml.XamlReader>이동 동작을 바 운 딩을 제외한.</xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader>       그러나 ReadSubtree 가상입니다. 따라서 특정 <xref:System.Xaml.XamlReader>구현에서 다른 동작을 제공할 수는 <xref:System.Xaml.XamlReader>내부 래퍼 동작 및 <xref:System.Xaml.XamlReader>구현을 반환 하 여 하위 트리 판독기 기능을 비활성화할 수도 있습니다 <xref:System.NotImplementedException>또는 다른 예외.</xref:System.NotImplementedException> </xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public virtual System.Xaml.XamlReader ReadSubtree ();
    parameters: []
    return:
      type: System.Xaml.XamlReader
      description: "새 XAML 판독기는 하위 트리의 인스턴스."
  overload: System.Xaml.XamlReader.ReadSubtree*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.SchemaContext
  id: SchemaContext
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
  fullName: System.Xaml.XamlReader.SchemaContext
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "파생된 클래스에서 구현 하는 경우 정보 집합에 대 한 XAML 스키마 컨텍스트 정보를 제공 하는 개체를 가져옵니다."
  syntax:
    content: public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }
    return:
      type: System.Xaml.XamlSchemaContext
      description: "정보에 대 한 XAML 스키마 컨텍스트 정보를 제공 하는 개체를 설정 합니다."
  overload: System.Xaml.XamlReader.SchemaContext*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Skip
  id: Skip
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Skip()
  nameWithType: XamlReader.Skip()
  fullName: System.Xaml.XamlReader.Skip()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "현재 노드를 건너뛰고 판독기 위치를 다음 노드로 이동 합니다."
  remarks: "건너뛴 후 <xref:System.Xaml.XamlReader.Read%2A>Skip 구현은 기본적으로 호출 됩니다.</xref:System.Xaml.XamlReader.Read%2A> 일반적으로 Skip 호출 하지 않으면 및 <xref:System.Xaml.XamlReader.Read%2A>순서로.</xref:System.Xaml.XamlReader.Read%2A>       에 따라 다른 동작이 수행 됩니다 기본 Skip 구현에서에서 <xref:System.Xaml.XamlReader.NodeType%2A>가 현재 판독기 위치.</xref:System.Xaml.XamlReader.NodeType%2A> 가 현재 판독기 위치 하는 경우는 <xref:System.Xaml.XamlNodeType>또는 <xref:System.Xaml.XamlNodeType>, 멤버 또는 개체를 건너뜁니다.</xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> 다른 <xref:System.Xaml.XamlReader.NodeType%2A>값, 아무 작업도 수행 호출 이외의 <xref:System.Xaml.XamlReader.Read%2A>현재 위치에서.</xref:System.Xaml.XamlReader.Read%2A> </xref:System.Xaml.XamlReader.NodeType%2A>       하위 트리 판독기 동작이 제한 Skip을 호출할 수 있습니다. 자세한 내용은의 &quot;하위 트리 판독기&quot; 섹션을 참조 하십시오. <xref:System.Xaml.XamlReader>, 참조 <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> 또는</xref:System.Xaml.XamlReader>       해당 하는 XML <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>.</xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName> 를 기반으로 하는 Skip의 노드 트리 동작 에 따라는 <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>노드 및 해당 하위 트리를 단일 항목 노드 뿐 아니라 동작 동일성을 건너뛰기 건너뜁니다.</xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>"
  syntax:
    content: public virtual void Skip ();
    parameters: []
  overload: System.Xaml.XamlReader.Skip*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: XamlReader.System.IDisposable.Dispose()
  fullName: System.Xaml.XamlReader.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "현재 인스턴스에서 사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Xaml.XamlReader&quot;> </xref> 클래스입니다."
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Xaml.XamlReader.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Type
  id: Type
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Type
  nameWithType: XamlReader.Type
  fullName: System.Xaml.XamlReader.Type
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "파생된 클래스에서 구현 하는 경우 가져옵니다는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 현재 노드의 합니다."
  remarks: "하위 트리 판독기 동작이 제한 형식을 호출할 수 있습니다. 자세한 내용은의 &quot;하위 트리 판독기&quot; 섹션을 참조 하십시오. <xref:System.Xaml.XamlReader>, 참조 <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> 또는</xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlType Type { get; }
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> 현재 노드의 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>현재 판독기 위치 개체에 없는 경우, 합니다."
  overload: System.Xaml.XamlReader.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Value
  id: Value
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Value
  nameWithType: XamlReader.Value
  fullName: System.Xaml.XamlReader.Value
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "파생된 클래스에서 구현 된 경우 현재 노드의 값을 가져옵니다."
  syntax:
    content: public abstract object Value { get; }
    return:
      type: System.Object
      description: "현재 노드의 값 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>현재 판독기 위치에 없는 경우, 한 <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref> 노드 형식입니다."
  overload: System.Xaml.XamlReader.Value*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xaml.XamlReader.#ctor
  parent: System.Xaml.XamlReader
  isExternal: false
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Xaml.XamlReader.XamlReader()
- uid: System.Xaml.XamlReader.Close
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Close()
  nameWithType: XamlReader.Close()
  fullName: System.Xaml.XamlReader.Close()
- uid: System.Xaml.XamlReader.Dispose(System.Boolean)
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: XamlReader.Dispose(Boolean)
  fullName: System.Xaml.XamlReader.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlReader.IsDisposed
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
  fullName: System.Xaml.XamlReader.IsDisposed
- uid: System.Xaml.XamlReader.IsEof
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsEof
  nameWithType: XamlReader.IsEof
  fullName: System.Xaml.XamlReader.IsEof
- uid: System.Xaml.XamlReader.Member
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Member
  nameWithType: XamlReader.Member
  fullName: System.Xaml.XamlReader.Member
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlReader.Namespace
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Namespace
  nameWithType: XamlReader.Namespace
  fullName: System.Xaml.XamlReader.Namespace
- uid: System.Xaml.NamespaceDeclaration
  parent: System.Xaml
  isExternal: false
  name: NamespaceDeclaration
  nameWithType: NamespaceDeclaration
  fullName: System.Xaml.NamespaceDeclaration
- uid: System.Xaml.XamlReader.NodeType
  parent: System.Xaml.XamlReader
  isExternal: false
  name: NodeType
  nameWithType: XamlReader.NodeType
  fullName: System.Xaml.XamlReader.NodeType
- uid: System.Xaml.XamlNodeType
  parent: System.Xaml
  isExternal: false
  name: XamlNodeType
  nameWithType: XamlNodeType
  fullName: System.Xaml.XamlNodeType
- uid: System.Xaml.XamlReader.Read
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Read()
  nameWithType: XamlReader.Read()
  fullName: System.Xaml.XamlReader.Read()
- uid: System.Xaml.XamlReader.ReadSubtree
  parent: System.Xaml.XamlReader
  isExternal: false
  name: ReadSubtree()
  nameWithType: XamlReader.ReadSubtree()
  fullName: System.Xaml.XamlReader.ReadSubtree()
- uid: System.Xaml.XamlReader
  parent: System.Xaml
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
- uid: System.Xaml.XamlReader.SchemaContext
  parent: System.Xaml.XamlReader
  isExternal: false
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
  fullName: System.Xaml.XamlReader.SchemaContext
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlReader.Skip
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Skip()
  nameWithType: XamlReader.Skip()
  fullName: System.Xaml.XamlReader.Skip()
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose
  parent: System.Xaml.XamlReader
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: XamlReader.System.IDisposable.Dispose()
  fullName: System.Xaml.XamlReader.System.IDisposable.Dispose()
- uid: System.Xaml.XamlReader.Type
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Type
  nameWithType: XamlReader.Type
  fullName: System.Xaml.XamlReader.Type
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Xaml.XamlReader.Value
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Value
  nameWithType: XamlReader.Value
  fullName: System.Xaml.XamlReader.Value
- uid: System.Xaml.XamlReader.#ctor*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader.XamlReader
- uid: System.Xaml.XamlReader.Close*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Close
  nameWithType: XamlReader.Close
- uid: System.Xaml.XamlReader.Dispose*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Dispose
  nameWithType: XamlReader.Dispose
- uid: System.Xaml.XamlReader.IsDisposed*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
- uid: System.Xaml.XamlReader.IsEof*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsEof
  nameWithType: XamlReader.IsEof
- uid: System.Xaml.XamlReader.Member*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Member
  nameWithType: XamlReader.Member
- uid: System.Xaml.XamlReader.Namespace*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Namespace
  nameWithType: XamlReader.Namespace
- uid: System.Xaml.XamlReader.NodeType*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: NodeType
  nameWithType: XamlReader.NodeType
- uid: System.Xaml.XamlReader.Read*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Read
  nameWithType: XamlReader.Read
- uid: System.Xaml.XamlReader.ReadSubtree*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: ReadSubtree
  nameWithType: XamlReader.ReadSubtree
- uid: System.Xaml.XamlReader.SchemaContext*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
- uid: System.Xaml.XamlReader.Skip*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Skip
  nameWithType: XamlReader.Skip
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: XamlReader.System.IDisposable.Dispose
- uid: System.Xaml.XamlReader.Type*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Type
  nameWithType: XamlReader.Type
- uid: System.Xaml.XamlReader.Value*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Value
  nameWithType: XamlReader.Value
