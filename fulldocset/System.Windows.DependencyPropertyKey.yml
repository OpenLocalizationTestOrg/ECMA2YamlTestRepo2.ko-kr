### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyPropertyKey
  id: DependencyPropertyKey
  children:
  - System.Windows.DependencyPropertyKey.DependencyProperty
  - System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  langs:
  - csharp
  name: DependencyPropertyKey
  nameWithType: DependencyPropertyKey
  fullName: System.Windows.DependencyPropertyKey
  type: Class
  summary: "읽기 전용 종속성 속성에 대 한 제한 된 쓰기에 대 한 종속성 속성 식별자를 제공합니다."
  remarks: "메서드 <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>또는 <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A> </xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> 를 사용 하 여 종속성 속성 등록 호출의 반환 값으로 가져온 DependencyPropertyKey 인스턴스       종속성 속성을 등록 하는 형식은 DependencyPropertyKey를 사용 하 여에 대 한 호출 수 <xref:System.Windows.DependencyObject.SetValue%2A>및 <xref:System.Windows.DependencyObject.ClearValue%2A>클래스 논리의 일부로 속성의 값을 조정 하는.</xref:System.Windows.DependencyObject.ClearValue%2A> </xref:System.Windows.DependencyObject.SetValue%2A> 키의 액세스 수준에서 허용 하는 경우 관련된 클래스 צ ְ ײ 키와 종속성 속성도 합니다. 예를 들어, 키 internal로 선언할 수 있습니다 및 기타 형식을 동일한 어셈블리 내에서 해당 종속성 속성을 설정할 수도 있습니다.       읽기 전용 종속성 속성 등록 반환한 DependencyPropertyKey 하지 이루어져야 public 속성을 설정할 수 있게 키가 노출 하기 때문에 따라서 읽기 전용 종속성 속성으로 등록 지점 하는데 합니다. 또한 키가 노출 간에 불일치가 발생 사용할 수 있는 종속성 속성이 동작 및 해당 [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] 는 잘못 된 클래스 디자인 속성 래퍼 구현이 있습니다.       키 자체를 노출 하는 대신 노출 해야는 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>으로 DependencyPropertyKey의 값을 `public static readonly` <xref:System.Windows.DependencyProperty>프로그램 클래스의</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> 그러면 유효한 종속성 속성 식별자 속성 시스템 작업 로컬 설정 값을 열거 하는 등 특정 반환할 속성이 있습니다. 그러나 가져온 따라서 식별자가 없습니다의 전체 기능은 <xref:System.Windows.DependencyProperty>많은 속성 시스템 작업에 대 한.</xref:System.Windows.DependencyProperty>"
  example:
  - "The following example registers a read-only dependency property, and also uses the key for two purposes in other class members: implementing the get \"wrapper\", and as the identifier for a protected determination operation that sets the value based on calculations of other property values.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public sealed class DependencyPropertyKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.DependencyPropertyKey.DependencyProperty
  id: DependencyProperty
  parent: System.Windows.DependencyPropertyKey
  langs:
  - csharp
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
  fullName: System.Windows.DependencyPropertyKey.DependencyProperty
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "이 특수 한 읽기 전용 종속성 속성 식별자와 연결 된 종속성 속성 식별자를 가져옵니다."
  remarks: "DependencyProperty 값은 참여 공통 속성 시스템 작업을 사용 하 여 일부 동일한 인터페이스는 사용 된 것과 읽기 / 쓰기 종속성 속성에 대 한 읽기 전용 속성의 식별자를 사용 합니다.       읽기 전용 종속성 속성의 get 속성 접근자를 구현 하기 위해 만들고이 <xref:System.Windows.DependencyProperty>프로그램 클래스에 대 한 식별자</xref:System.Windows.DependencyProperty> 를 노출 합니다. 이 두 가지 용도로 사용:-사용자 소유 하는 클래스 요구는 <xref:System.Windows.DependencyProperty>식별자 속성 래퍼에 대 한 get 접근자를 구현 하는 데.</xref:System.Windows.DependencyProperty> 사용 된 <xref:System.Windows.DependencyProperty>에 대 한 매개 변수로 <xref:System.Windows.DependencyObject.GetValue%2A>get 접근자를 구현 하는 호출.</xref:System.Windows.DependencyObject.GetValue%2A> </xref:System.Windows.DependencyProperty>      - <xref:System.Windows.DependencyProperty>메타 데이터를 사용 하는 다른 메서드는 표준 양식에서 액세스할 수 있도록 식별자 속성 시스템에 종속성 속성을 노출 합니다.</xref:System.Windows.DependencyProperty> 예를 들어, 호출한 경우 <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>일부에 <xref:System.Windows.DependencyObject>로컬에서 설정한 속성 (값 및 식별자)의 열거형 식별자를 가져옵니다는 읽기 전용 종속성 속성에 대해 반환 되 여 <xref:System.Windows.DependencyProperty>대신 값.</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> 노출 되지 않은 한 <xref:System.Windows.DependencyProperty>식별자 어떤 방식으로든에서 읽기 전용 종속성 속성의 보안을 증가 하지 않습니다, 이기 후속 파생 된 클래스, 클래스 인스턴스 모두에 대해 잘못 된 구문이 속성과 관련 된 작업 때문입니다.</xref:System.Windows.DependencyProperty>       노출 하는 <xref:System.Windows.DependencyProperty>키에서 직접 DependencyProperty를 호출 하거나 클래스에 있는 식별자를.</xref:System.Windows.DependencyProperty> 이 값을 사용 하 여 만들려는 `public static readonly` <xref:System.Windows.DependencyProperty> <xref:System.Windows.DependencyPropertyKey>.</xref:System.Windows.DependencyPropertyKey> 기능과 유사한는 클래스에는 식별자</xref:System.Windows.DependencyProperty>"
  example:
  - "The following example calls DependencyProperty to expose the <xref:System.Windows.DependencyProperty> identifier (`AquariumGraphicProperty`) for the `AquariumGraphic` read-only dependency property on a class. The example also shows the <xref:System.Windows.DependencyPropertyKey> creation (as an internal member) and the get accessor for `AquariumGraphic`.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public System.Windows.DependencyProperty DependencyProperty { get; }
    return:
      type: System.Windows.DependencyProperty
      description: "관련 종속성 속성 식별자입니다."
  overload: System.Windows.DependencyPropertyKey.DependencyProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  id: OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyPropertyKey
  langs:
  - csharp
  name: OverrideMetadata(Type,PropertyMetadata)
  nameWithType: DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  fullName: System.Windows.DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "이 종속성 속성 식별자로 표현 하는 읽기 전용 종속성 속성의 메타 데이터를 재정의 합니다."
  remarks: "읽기 전용 종속성 속성의 메타 데이터 재정의 메타 데이터에서 읽기 / 쓰기 종속성 속성을 재정의 하는 것과 비슷한 이유로 수행 하며 키 수준에서 액세스 제한 때문에 메타 데이터에 지정 된 동작 집합 동작을 변경할 수 (기본 값, 예를 들어).       으로 읽기 / 쓰기 종속성 속성이 있는 읽기 전용 종속성 속성의 메타 데이터 재정의 수행 해야 해당 속성 (속성을 등록 하는 개체의 특정 인스턴스가 시작 된 시간에 같은) 속성 시스템에서 사용 하 게 되 고 이전 합니다. OverrideMetadata에 대 한 호출으로 자신을 제공 하는 형식의 정적 생성자 내에서 수행 해야는 `forType` 이 메서드 또는 해당 클래스에 대 한 동등한 초기화 매개 변수입니다.       이 메서드를 효과적으로 전달 된 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>전달 하는 메서드는 <xref:System.Windows.DependencyPropertyKey>인스턴스 키 매개 변수로.</xref:System.Windows.DependencyPropertyKey> </xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example overrides metadata for an existing read-only dependency property that a class inherits. In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have. You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <xref:System.Windows.FrameworkPropertyMetadataOptions> values, etc.)  \n  \n [!code-cs[WPFAquariumSln#RODPOverride](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodpoverride)]\n [!code-vb[WPFAquariumSln#RODPOverride](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]"
  syntax:
    content: public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);
    parameters:
    - id: forType
      type: System.Type
      description: "형식에는이 종속성 속성 및 메타 데이터를 재정의 해야 합니다."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "이 형식에 제공 된 메타 데이터입니다."
  overload: System.Windows.DependencyPropertyKey.OverrideMetadata*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "시도 된 메타 데이터 읽기 / 쓰기 종속성 속성에 대 한 무시 (수행할 수 없습니다.이 서명을 사용 하 여)."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "제공 된 형식에 있는 속성에 대 한 메타 데이터가 이미 설정 된 경우"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.DependencyPropertyKey.DependencyProperty
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
  fullName: System.Windows.DependencyPropertyKey.DependencyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: OverrideMetadata(Type,PropertyMetadata)
  nameWithType: DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  fullName: System.Windows.DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyPropertyKey.DependencyProperty*
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata*
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: OverrideMetadata
  nameWithType: DependencyPropertyKey.OverrideMetadata
