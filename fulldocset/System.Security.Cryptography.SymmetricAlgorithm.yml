### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.SymmetricAlgorithm
  id: SymmetricAlgorithm
  children:
  - System.Security.Cryptography.SymmetricAlgorithm.#ctor
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Clear
  - System.Security.Cryptography.SymmetricAlgorithm.Create
  - System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.Key
  - System.Security.Cryptography.SymmetricAlgorithm.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  langs:
  - csharp
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
  type: Class
  summary: "대칭 알고리즘의 모든 구현이 상속 해야 합니다는 추상 기본 클래스를 나타냅니다."
  remarks: "호출 (cbc) 암호 블록 체인 모드를 사용 하 여 SymmetricAlgorithm 클래스에서 파생 된 클래스는 키가 필요 하 (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) 및 초기화 벡터 (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) 데이터에 대해 암호화 변환을 수행 하려면.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>  SymmetricAlgorithm 클래스 중 하나를 사용 하 여 암호화 된 데이터를 해독 하려면 설정 해야 합니다는 <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>속성 및 <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>속성 암호화에 사용 된 동일한 값을.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>  유용 하 게 되려면 대칭 알고리즘에 대 한 비밀 키는 보낸 사람과 받는 사람 에게만 알 수 있어야 합니다.       <xref:System.Security.Cryptography.RijndaelManaged><xref:System.Security.Cryptography.DESCryptoServiceProvider>, <xref:System.Security.Cryptography.RC2CryptoServiceProvider>, 및 <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider>대칭 알고리즘의 구현입니다.</xref:System.Security.Cryptography.TripleDESCryptoServiceProvider> </xref:System.Security.Cryptography.RC2CryptoServiceProvider> </xref:System.Security.Cryptography.DESCryptoServiceProvider></xref:System.Security.Cryptography.RijndaelManaged>       파생 된 클래스를 사용 하는 경우 인지 충분 하지 않습니다., 단순히 개체를 사용 하 여 완료 한 후 가비지 수집을 강제로 보안 측면에서 note 합니다. 명시적으로 호출 해야는 <xref:System.Security.Cryptography.SymmetricAlgorithm.Clear%2A>해제 되기 전에 개체 내에서 중요 한 데이터를 영구 개체에 메서드.</xref:System.Security.Cryptography.SymmetricAlgorithm.Clear%2A> Note 가비지 수집 수집 된 개체의 내용을 지우지 있지만 메모리를 재할당 된 것으로 표시 합니다. 따라서 할당 되지 않은 메모리의 가비지 수집된 개체에 포함 된 데이터는 메모리 힙에 존재할 수 여전히 있습니다. 암호화 개체의 경우이 데이터는 키 데이터 또는 일반 텍스트 블록이 같은 중요 한 정보를 포함할 수 있습니다.       .NET Framework의 구현 중요 한 데이터를 포함 하는 모든 암호화 클래스는 `Clear` 메서드. 를 호출할 때는 `Clear` 메서드는 개체 내에서 모든 중요 한 데이터를&0;으로 덮어쓴을 다음 가비지 수집을 안전 하 게 될 수 있도록 개체를 해제 합니다. 다음 호출 해야 개체를&0;으로 설정 하 고 출시 되었습니다는 `Dispose` 사용 하 여 메서드는 `disposing` 매개 변수 설정 `True` 삭제 하기 위해 관리 되는 모든 및이 관리 되지 않는 개체에 연결 된 리소스입니다."
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to encrypt a file specified by `inName`, and outputs the encrypted result to the file specified by `outName`. The `desKey` and `desIV` parameters to the method are 8-byte arrays. You must have the high encryption pack installed to run this example.  \n  \n [!code-cpp[Classic CryptoStream Example#1](~/add/codesnippet/cpp/t-system.security.crypto_19_1.cpp)]\n [!code-cs[Classic CryptoStream Example#1](~/add/codesnippet/csharp/t-system.security.crypto_19_1.cs)]\n [!code-vb[Classic CryptoStream Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_19_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class SymmetricAlgorithm : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: SymmetricAlgorithm()
  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> 클래스입니다."
  remarks: "추상 클래스의 인스턴스를 만들 수 없습니다. 응용 프로그램 코드는 파생된 클래스의 새 인스턴스를 만듭니다."
  syntax:
    content: protected SymmetricAlgorithm ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "대칭 알고리즘에서 파생 된 클래스의 구현 올바르지 않습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  id: BlockSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: BlockSize
  nameWithType: SymmetricAlgorithm.BlockSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "비트 암호화 작업의 블록 크기를 가져오거나 설정 합니다."
  remarks: "블록 크기는 암호화 하거나 한 번에 해독할 수 있는 데이터의 기본 단위입니다. 연속 된 요소로; 블록 크기 보다 긴 메시지 처리 메시지의 블록 크기 보다 짧은 블록의 크기에 도달 하기 위해 추가 된 비트를 채워야 합니다. 올바른 블록 크기는 사용 되는 대칭 알고리즘에 따라 결정 됩니다."
  syntax:
    content: public virtual int BlockSize { get; set; }
    return:
      type: System.Int32
      description: "블록 크기 (비트)"
  overload: System.Security.Cryptography.SymmetricAlgorithm.BlockSize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "블록 크기가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  id: BlockSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: BlockSizeValue
  nameWithType: SymmetricAlgorithm.BlockSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "비트 암호화 작업의 블록 크기를 나타냅니다."
  remarks: "블록 크기는 암호화 하거나 한 번에 해독할 수 있는 데이터의 기본 단위입니다. 연속 된 요소로; 블록 크기 보다 긴 메시지 처리 메시지의 블록 크기 보다 짧은 블록의 크기에 도달 하기 위해 추가 된 비트를 채워야 합니다. 올바른 블록 크기는 사용 되는 대칭 알고리즘에 따라 결정 됩니다.       이 필드는 <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>속성.</xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>"
  syntax:
    content: protected int BlockSizeValue;
    return:
      type: System.Int32
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear
  id: Clear
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Clear()
  nameWithType: SymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> 클래스입니다."
  remarks: "파생 된 클래스를 사용 하는 경우 인지 충분 하지 않습니다., 단순히 개체를 사용 하 여 완료 한 후 가비지 수집을 강제로 보안 측면에서 note 합니다. 명시적으로 개체를 해제 되기 전에 개체 내에서 중요 한 데이터를 비워야에서 Clear 메서드를 호출 해야 합니다. Note 가비지 수집 수집 된 개체의 내용을 지우지 있지만 메모리를 재할당 된 것으로 표시 합니다. 따라서 할당 되지 않은 메모리의 가비지 수집된 개체에 포함 된 데이터는 메모리 힙에 존재할 수 여전히 있습니다. 암호화 개체의 경우이 데이터는 키 데이터 또는 일반 텍스트 블록이 같은 중요 한 정보를 포함할 수 있습니다.       .NET Framework의 구현 중요 한 데이터를 포함 하는 모든 암호화 클래스는 `Clear` 메서드. 를 호출할 때는 `Clear` 메서드는 개체 내에서 모든 중요 한 데이터를&0;으로 덮어쓴을 다음 가비지 수집을 안전 하 게 될 수 있도록 개체를 해제 합니다. 다음 호출 해야 개체를&0;으로 설정 하 고 출시 되었습니다는 `Dispose` 사용 하 여 메서드는 `disposing` 매개 변수 설정 `True` 삭제 하기 위해 관리 되는 모든 및이 관리 되지 않는 개체에 연결 된 리소스입니다."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Create()
  nameWithType: SymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘을 수행 하는 데 사용 하는 기본 암호화 개체를 만듭니다."
  remarks: ''
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to encrypt a file specified by `inName`, and outputs the encrypted result to the file specified by `outName`. The `desKey` and `desIV` parameters to the method are 8-byte arrays. You must have the high encryption pack installed to run this example.  \n  \n [!code-cpp[Classic CryptoStream Example#1](~/add/codesnippet/cpp/m-system.security.crypto_114_1.cpp)]\n [!code-cs[Classic CryptoStream Example#1](~/add/codesnippet/csharp/m-system.security.crypto_114_1.cs)]\n [!code-vb[Classic CryptoStream Example#1](~/add/codesnippet/visualbasic/m-system.security.crypto_114_1.vb)]"
  syntax:
    content: public static System.Security.Cryptography.SymmetricAlgorithm Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "대칭 알고리즘을 수행 하는 데 사용 하는 기본 암호화 개체입니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Create(String)
  nameWithType: SymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘을 수행 하는 데 지정된 된 암호화 개체를 만듭니다."
  syntax:
    content: public static System.Security.Cryptography.SymmetricAlgorithm Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "특정 구현 이름은 <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> 클래스를 사용 합니다."
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "대칭 알고리즘을 수행 하는 데 사용 되는 암호화 개체입니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  id: CreateDecryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateDecryptor()
  nameWithType: SymmetricAlgorithm.CreateDecryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 사용 대칭 암호 해독기 개체를 만듭니다 <> </> *> 속성 및 초기화 벡터 (<>*>)."
  remarks: "이 메서드를 사용 하 여 만든 암호화 된 메시지 해독는 <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>동일한 서명으로 오버 로드.</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>"
  syntax:
    content: public virtual System.Security.Cryptography.ICryptoTransform CreateDecryptor ();
    parameters: []
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "대칭 암호 해독기 개체입니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  id: CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateDecryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "파생된 클래스에서 재정의 되 면 지정 된 대칭 암호 해독기 개체를 만듭니다 <> </> *> 속성 및 초기화 벡터 (<>*>)."
  remarks: "사용 하 여 생성 된 암호화 된 메시지를 해독 하는이 메서드는 <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>동일한 매개 변수 오버 로드.</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>"
  syntax:
    content: public abstract System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "대칭 알고리즘에 사용할 비밀 키입니다."
    - id: rgbIV
      type: System.Byte[]
      description: "대칭 알고리즘에 사용할 초기화 벡터입니다."
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "대칭 암호 해독기 개체입니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  id: CreateEncryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateEncryptor()
  nameWithType: SymmetricAlgorithm.CreateEncryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재의 대칭 암호기 개체를 만듭니다 <> </> *> 속성 및 초기화 벡터 (<>*>)."
  remarks: "하는 경우 현재 <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>속성은 `null`, <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>메서드를 호출 하에 새로운 임의 <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>.</xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> 만들</xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> 하는 경우 현재 <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>속성은 `null`, <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A>메서드를 호출 하에 새로운 임의 <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> 만들</xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>       사용 하 여 <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>이 메서드의 결과 암호를 해독 하려면 동일한 서명으로 오버 로드.</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>"
  example:
  - "The following example encrypts a string using the transform object returned from the CreateEncryptor method.  \n  \n [!code-cpp[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/cpp/m-system.security.crypto_124_1.cpp)]\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/csharp/m-system.security.crypto_124_1.cs)]\n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/visualbasic/m-system.security.crypto_124_1.vb)]"
  syntax:
    content: public virtual System.Security.Cryptography.ICryptoTransform CreateEncryptor ();
    parameters: []
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "대칭 암호기 개체입니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  id: CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateEncryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "파생된 클래스에서 재정의 되 면 지정 된 대칭 암호기 개체를 만듭니다 <> </> *> 속성 및 초기화 벡터 (<>*>)."
  remarks: "사용 하 여 <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>이 메서드의 결과 암호를 해독 하려면 같은 매개 변수 오버 로드.</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>"
  syntax:
    content: public abstract System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "대칭 알고리즘에 사용할 비밀 키입니다."
    - id: rgbIV
      type: System.Byte[]
      description: "대칭 알고리즘에 사용할 초기화 벡터입니다."
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "대칭 암호기 개체입니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Dispose()
  nameWithType: SymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 인스턴스에서 사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> 클래스입니다."
  remarks: "호출 `Dispose` <xref:System.Security.Cryptography.SymmetricAlgorithm>.</xref:System.Security.Cryptography.SymmetricAlgorithm> 를 사용 하 여 작업을 마쳤으면 `Dispose` 메서드는 <xref:System.Security.Cryptography.SymmetricAlgorithm>불안정 한 상태가.</xref:System.Security.Cryptography.SymmetricAlgorithm> 호출한 후 `Dispose`에 대 한 모든 참조를 해제 해야는 <xref:System.Security.Cryptography.SymmetricAlgorithm>가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Security.Cryptography.SymmetricAlgorithm>차지한.</xref:System.Security.Cryptography.SymmetricAlgorithm> </xref:System.Security.Cryptography.SymmetricAlgorithm>       자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md) 및 [Dispose 메서드를 구현](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > 항상 호출 `Dispose` <xref:System.Security.Cryptography.SymmetricAlgorithm>.</xref:System.Security.Cryptography.SymmetricAlgorithm> 에 대 한 마지막 참조를 해제 하기 전에 사용 중인 리소스가 가비지 수집기 호출할 때까지 해제 되지 것입니다 그렇지 않은 경우는 <xref:System.Security.Cryptography.SymmetricAlgorithm>개체의 `Finalize` 메서드.</xref:System.Security.Cryptography.SymmetricAlgorithm>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public `Dispose()` 메서드 및 `Finalize` 메서드. `Dispose()`보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다. `Finalize`호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.       경우는 `disposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Security.Cryptography.SymmetricAlgorithm>참조.</xref:System.Security.Cryptography.SymmetricAlgorithm> 이 메서드 호출에서 `Dispose()` 각 참조 된 개체의 메서드."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  id: FeedbackSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: FeedbackSize
  nameWithType: SymmetricAlgorithm.FeedbackSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "비트 암호화 작업의 피드백 크기를 가져오거나 설정 합니다."
  remarks: "피드백 크기는 연속 된 암호화 또는 암호 해독 작업으로 다시 전달 되는 데이터 양을 결정 합니다. 피드백 크기는 블록 크기 보다 클 수 없습니다."
  syntax:
    content: public virtual int FeedbackSize { get; set; }
    return:
      type: System.Int32
      description: "비트에서 피드백 크기입니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "피드백 크기 블록 크기 보다 큽니다."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  id: FeedbackSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: FeedbackSizeValue
  nameWithType: SymmetricAlgorithm.FeedbackSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "비트 암호화 작업의 피드백 크기를 나타냅니다."
  remarks: "피드백 크기는 연속 된 암호화 또는 암호 해독 작업으로 다시 전달 되는 데이터 양을 결정 합니다. 피드백 크기는 블록 크기 보다 클 수 없습니다.       이 필드는 <xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize%2A>속성.</xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize%2A>"
  syntax:
    content: protected int FeedbackSizeValue;
    return:
      type: System.Int32
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  id: GenerateIV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: GenerateIV()
  nameWithType: SymmetricAlgorithm.GenerateIV()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "파생된 클래스에서 재정의 되 면 임의 초기화 벡터를 생성 (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>) 알고리즘에 사용할.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>"
  remarks: "일반적으로이 메서드를 사용할 이유가 없습니다 때문에 않습니다 `CreateEncryptor()` 또는 `CreateEncryptor(null, null)` 초기화 벡터과 키를 자동으로 생성 합니다. 그러나 다음 GenerateIV 메서드를 사용 하 여 서로 다른 초기화 벡터를 사용 하 여 대칭 알고리즘 인스턴스를 다시 사용 하는 것이 좋습니다."
  syntax:
    content: public abstract void GenerateIV ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  id: GenerateKey
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: GenerateKey()
  nameWithType: SymmetricAlgorithm.GenerateKey()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "파생된 클래스에서 재정의 되 면 생성는 임의 키 (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key*>) 알고리즘에 사용할.</xref:System.Security.Cryptography.SymmetricAlgorithm.Key*>"
  remarks: "일반적으로이 메서드를 사용할 이유가 없습니다 때문에 않습니다 `CreateEncryptor()` 또는 `CreateEncryptor(null, null)` 초기화 벡터과 키를 자동으로 생성 합니다. 그러나 다음 GenerateKey 메서드를 사용 하 여 다른 키로 대칭 알고리즘 인스턴스를 다시 사용 하는 것이 좋습니다."
  syntax:
    content: public abstract void GenerateKey ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV
  id: IV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: IV
  nameWithType: SymmetricAlgorithm.IV
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘에 대 한 초기화 벡터 (IV)을 가져오거나 설정 합니다."
  remarks: "IV 속성 중 하나의 새 인스턴스를 만들 때마다 자동으로 새 임의 값으로 설정 됩니다는 <xref:System.Security.Cryptography.SymmetricAlgorithm>클래스 또는 수동으로 호출 하는 경우는 <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A>메서드.</xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm>  IV 속성의 크기와 동일 해야는 <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>속성 8로 나눈 값입니다.</xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>       파생 된 클래스는 <xref:System.Security.Cryptography.SymmetricAlgorithm>클래스 호출 (cbc) 암호 블록 체인 모드를 사용 하 여 필요한 키와 데이터에 대해 암호화 변환을 수행할 경우 초기화 벡터입니다.</xref:System.Security.Cryptography.SymmetricAlgorithm>  중 하나를 사용 하 여 암호화 된 데이터를 해독 하는 <xref:System.Security.Cryptography.SymmetricAlgorithm>설정 해야 클래스는 <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>속성 및 암호화에 사용 된 동일한 값 IV 속성.</xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm>       지정 된 비밀 키 *k*, 초기화 벡터를 사용 하지 않는 단순 블록 암호는 일반 텍스트의 동일한 입력된 블록 암호 텍스트의 동일한 출력 블록으로 암호화 합니다. 일반 텍스트 스트림에 중복 된 블록이 있는 경우 암호 텍스트 스트림에 중복 된 블록이 해야 합니다. 일반 텍스트 블록의 구조에 대 한 정보가 권한 없는 사용자가 하는 경우 알려진된 암호화 텍스트 블록을 해독 하 고 사용자의 키를 복구할 수에 해당 정보를 사용할 수 있습니다. 이 문제를 해결 하려면 다음 블록을 암호화 하는 프로세스에 정보를 이전 블록은 mixed입니다. 따라서 두 개의 동일한 일반 텍스트 블록의 출력 차이가 있습니다. 이 기술은 이전 블록을 사용 하 여 다음 블록을 암호화를 첫 번째 데이터 블록을 암호화 하 한 초기화 벡터가 필요 합니다."
  syntax:
    content: public virtual byte[] IV { get; set; }
    return:
      type: System.Byte[]
      description: "초기화 벡터입니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.IV*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "로 초기화 벡터를 설정 하려고 했습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "초기화 벡터 크기가 잘못 되었습니다.로 설정 하려고 했습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  id: IVValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: IVValue
  nameWithType: SymmetricAlgorithm.IVValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "초기화 벡터를 나타냅니다 (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>) 대칭 알고리즘에 대 한.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>"
  remarks: "이 필드는 <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>속성.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>"
  syntax:
    content: protected byte[] IVValue;
    return:
      type: System.Byte[]
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key
  id: Key
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Key
  nameWithType: SymmetricAlgorithm.Key
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘에 대 한 비밀 키를 가져오거나 설정 합니다."
  remarks: "비밀 키 암호화 및 암호 해독에 사용 됩니다. 찾기가 성공 하려면 대칭 알고리즘에 대 한 비밀 키의 보낸 사람과 받는 사람에 알려야 합니다. 유효한 키 크기 특정 대칭 알고리즘 구현에 의해 지정 되 고에 나열 된는 <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>속성.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>       이 속성이 `null` 사용 하는 경우는 <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>메서드는 새 임의 값을 만들어야 합니다.</xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>"
  syntax:
    content: public virtual byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "대칭 알고리즘에 사용할 비밀 키입니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Key*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "키를 설정 하려고 했습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "키 크기가 올바르지 않습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  id: KeySize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: KeySize
  nameWithType: SymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘에서 사용 하는 비밀 키의 비트에서 크기를 가져오거나 설정 합니다."
  remarks: "유효한 키 크기 특정 대칭 알고리즘 구현에 의해 지정 되 고에 나열 된는 <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>속성.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>"
  syntax:
    content: public virtual int KeySize { get; set; }
    return:
      type: System.Int32
      description: "대칭 알고리즘에서 사용 하는 비밀 키의 비트 크기입니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.KeySize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "키 크기가 올바르지 않습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  id: KeySizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: KeySizeValue
  nameWithType: SymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘에서 사용 하는 비밀 키의 비트에서 크기를 나타냅니다."
  remarks: "유효한 키 크기 특정 대칭 알고리즘 구현에 의해 지정 되 고에 나열 된는 <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>속성.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>       이 필드는 <xref:System.Security.Cryptography.SymmetricAlgorithm.KeySize%2A>속성.</xref:System.Security.Cryptography.SymmetricAlgorithm.KeySize%2A>"
  syntax:
    content: protected int KeySizeValue;
    return:
      type: System.Int32
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  id: KeyValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: KeyValue
  nameWithType: SymmetricAlgorithm.KeyValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘에 대 한 비밀 키를 나타냅니다."
  remarks: "비밀 키 암호화 및 암호 해독에 사용 됩니다. 찾기가 성공 하려면 대칭 알고리즘에 대 한 비밀 키의 보낸 사람과 받는 사람에 알려야 합니다. 유효한 키 크기 특정 대칭 알고리즘 구현에 의해 지정 되 고에 나열 된는 <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>속성.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>       이 필드는 <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>속성.</xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>"
  syntax:
    content: protected byte[] KeyValue;
    return:
      type: System.Byte[]
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  id: LegalBlockSizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalBlockSizes
  nameWithType: SymmetricAlgorithm.LegalBlockSizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘에서 지 원하는 비트에서 블록 크기를 가져옵니다."
  remarks: "대칭 알고리즘에는이 배열에 있는 항목과 일치 하는 블록 크기만 지원 합니다."
  example:
  - "The following example shows the value of LegalBlockSizes for the symmetric algorithms.  \n  \n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/visualbasic/p-system.security.crypto_95_1.vb)]\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/csharp/p-system.security.crypto_95_1.cs)]"
  syntax:
    content: public virtual System.Security.Cryptography.KeySizes[] LegalBlockSizes { get; }
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "알고리즘에서 지 원하는 블록 크기가 들어 있는 배열입니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  id: LegalBlockSizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalBlockSizesValue
  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘에서 지 원하는 비트에서 블록 크기를 지정 합니다."
  remarks: "대칭 알고리즘에는이 배열에 있는 항목과 일치 하는 블록 크기만 지원 합니다.       이 필드는 <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes%2A>속성.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes%2A>"
  syntax:
    content: protected System.Security.Cryptography.KeySizes[] LegalBlockSizesValue;
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizes
  nameWithType: SymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘에서 지 원하는 비트에서 키 크기를 가져옵니다."
  remarks: "대칭 알고리즘에는이 배열에 있는 항목과 일치 하는 키 크기만 지원 합니다."
  example:
  - "The following example shows the value of LegalKeySizes for the symmetric algorithms.  \n  \n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/visualbasic/p-system.security.crypto_72_1.vb)]\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/csharp/p-system.security.crypto_72_1.cs)]"
  syntax:
    content: public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "알고리즘에서 지 원하는 키 크기가 들어 있는 배열입니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  id: LegalKeySizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizesValue
  nameWithType: SymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘에서 지 원하는 비트에서 키 크기를 지정 합니다."
  remarks: "대칭 알고리즘에는이 배열에 있는 항목과 일치 하는 키 크기만 지원 합니다.       이 필드는 <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>속성.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>"
  syntax:
    content: protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode
  id: Mode
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Mode
  nameWithType: SymmetricAlgorithm.Mode
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘의 작업에 대 한 모드를 가져오거나 설정 합니다."
  remarks: "참조 <xref:System.Security.Cryptography.CipherMode>특정 모드에 대 한 열거형.</xref:System.Security.Cryptography.CipherMode>"
  syntax:
    content: public virtual System.Security.Cryptography.CipherMode Mode { get; set; }
    return:
      type: System.Security.Cryptography.CipherMode
      description: "대칭 알고리즘의 작동을 위해 사용 되는 모드입니다. 기본값은 <xref href=&quot;System.Security.Cryptography.CipherMode&quot;> </xref>합니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Mode*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "암호화 모드 중 하나는 <xref href=&quot;System.Security.Cryptography.CipherMode&quot;> </xref> 값입니다."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  id: ModeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: ModeValue
  nameWithType: SymmetricAlgorithm.ModeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘에 사용 된 암호화 모드를 나타냅니다."
  remarks: "참조 <xref:System.Security.Cryptography.CipherMode>특정 모드에 대 한 열거형.</xref:System.Security.Cryptography.CipherMode>       이 필드는 <xref:System.Security.Cryptography.SymmetricAlgorithm.Mode%2A>속성.</xref:System.Security.Cryptography.SymmetricAlgorithm.Mode%2A>"
  syntax:
    content: protected System.Security.Cryptography.CipherMode ModeValue;
    return:
      type: System.Security.Cryptography.CipherMode
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding
  id: Padding
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Padding
  nameWithType: SymmetricAlgorithm.Padding
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘에 사용 된 패딩 모드를 가져오거나 설정 합니다."
  remarks: "대부분의 일반 텍스트 메시지 완전히 블록을 작성 하는 바이트 수로 구성 되어 있지 않습니다. 종종 마지막 블록을 채울 바이트 수가 충분 하지 않습니다. 이 경우 안쪽 여백 문자열을 텍스트에 추가 됩니다. 예를 들어 블록 길이가 64 비트 마지막 블록 40 비트만 포함 하는 경우 24 비트의 패딩이 추가 됩니다. 참조는 <xref:System.Security.Cryptography.PaddingMode>특정 모드에 대 한 열거형.</xref:System.Security.Cryptography.PaddingMode>"
  syntax:
    content: public virtual System.Security.Cryptography.PaddingMode Padding { get; set; }
    return:
      type: System.Security.Cryptography.PaddingMode
      description: "대칭 알고리즘에 사용 된 패딩 모드입니다. 기본값은 <xref href=&quot;System.Security.Cryptography.PaddingMode&quot;> </xref>합니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Padding*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "패딩 모드 중 하나는 <xref href=&quot;System.Security.Cryptography.PaddingMode&quot;> </xref> 값입니다."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  id: PaddingValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: PaddingValue
  nameWithType: SymmetricAlgorithm.PaddingValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "대칭 알고리즘에 사용 된 패딩 모드를 나타냅니다."
  remarks: "대부분의 일반 텍스트 메시지 완전히 블록을 작성 하는 바이트 수로 구성 되어 있지 않습니다. 종종 마지막 블록을 채울 바이트 수가 충분 하지 않습니다. 이 경우 안쪽 여백 문자열을 텍스트에 추가 됩니다. 예를 들어 블록 길이가 64 비트 마지막 블록 40 비트만 포함 하는 경우 24 비트의 패딩이 추가 됩니다. 참조는 <xref:System.Security.Cryptography.PaddingMode>특정 모드에 대 한 열거형.</xref:System.Security.Cryptography.PaddingMode>       이 필드는 <xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A>속성.</xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A>"
  syntax:
    content: protected System.Security.Cryptography.PaddingMode PaddingValue;
    return:
      type: System.Security.Cryptography.PaddingMode
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  id: ValidKeySize(System.Int32)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: ValidKeySize(Int32)
  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정된 된 키 크기가 현재 알고리즘에 올바른지 여부를 결정 합니다."
  syntax:
    content: public bool ValidKeySize (int bitLength);
    parameters:
    - id: bitLength
      type: System.Int32
      description: "유효한 키 크기를 확인 하려면 비트 길이입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정된 된 키 크기가 현재 알고리즘에 대 한 유효한 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: SymmetricAlgorithm()
  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: BlockSize
  nameWithType: SymmetricAlgorithm.BlockSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: BlockSizeValue
  nameWithType: SymmetricAlgorithm.BlockSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: SymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Create()
  nameWithType: SymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create()
- uid: System.Security.Cryptography.SymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Create(String)
  nameWithType: SymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateDecryptor()
  nameWithType: SymmetricAlgorithm.CreateDecryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateDecryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateEncryptor()
  nameWithType: SymmetricAlgorithm.CreateEncryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateEncryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: SymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: FeedbackSize
  nameWithType: SymmetricAlgorithm.FeedbackSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: FeedbackSizeValue
  nameWithType: SymmetricAlgorithm.FeedbackSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateIV()
  nameWithType: SymmetricAlgorithm.GenerateIV()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateKey()
  nameWithType: SymmetricAlgorithm.GenerateKey()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: IV
  nameWithType: SymmetricAlgorithm.IV
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV
- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: IVValue
  nameWithType: SymmetricAlgorithm.IVValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Key
  nameWithType: SymmetricAlgorithm.Key
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: SymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeySizeValue
  nameWithType: SymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeyValue
  nameWithType: SymmetricAlgorithm.KeyValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalBlockSizes
  nameWithType: SymmetricAlgorithm.LegalBlockSizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
- uid: System.Security.Cryptography.KeySizes[]
  parent: System.Security.Cryptography
  isExternal: false
  name: KeySizes
  nameWithType: KeySizes
  fullName: System.Security.Cryptography.KeySizes[]
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    nameWithType: KeySizes
    fullName: KeySizes[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalBlockSizesValue
  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: SymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalKeySizesValue
  nameWithType: SymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Mode
  nameWithType: SymmetricAlgorithm.Mode
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode
- uid: System.Security.Cryptography.CipherMode
  parent: System.Security.Cryptography
  isExternal: false
  name: CipherMode
  nameWithType: CipherMode
  fullName: System.Security.Cryptography.CipherMode
- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: ModeValue
  nameWithType: SymmetricAlgorithm.ModeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Padding
  nameWithType: SymmetricAlgorithm.Padding
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding
- uid: System.Security.Cryptography.PaddingMode
  parent: System.Security.Cryptography
  isExternal: false
  name: PaddingMode
  nameWithType: PaddingMode
  fullName: System.Security.Cryptography.PaddingMode
- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: PaddingValue
  nameWithType: SymmetricAlgorithm.PaddingValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: ValidKeySize(Int32)
  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(Int32)
- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: BlockSize
  nameWithType: SymmetricAlgorithm.BlockSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Clear
  nameWithType: SymmetricAlgorithm.Clear
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Create
  nameWithType: SymmetricAlgorithm.Create
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateDecryptor
  nameWithType: SymmetricAlgorithm.CreateDecryptor
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateEncryptor
  nameWithType: SymmetricAlgorithm.CreateEncryptor
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Dispose
  nameWithType: SymmetricAlgorithm.Dispose
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: FeedbackSize
  nameWithType: SymmetricAlgorithm.FeedbackSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateIV
  nameWithType: SymmetricAlgorithm.GenerateIV
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateKey
  nameWithType: SymmetricAlgorithm.GenerateKey
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: IV
  nameWithType: SymmetricAlgorithm.IV
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Key
  nameWithType: SymmetricAlgorithm.Key
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: SymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalBlockSizes
  nameWithType: SymmetricAlgorithm.LegalBlockSizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: SymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Mode
  nameWithType: SymmetricAlgorithm.Mode
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Padding
  nameWithType: SymmetricAlgorithm.Padding
- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: ValidKeySize
  nameWithType: SymmetricAlgorithm.ValidKeySize
