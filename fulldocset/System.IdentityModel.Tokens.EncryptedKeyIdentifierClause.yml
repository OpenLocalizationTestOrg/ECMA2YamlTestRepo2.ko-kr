### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  id: EncryptedKeyIdentifierClause
  children:
  - System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String)
  - System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)
  - System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String)
  - System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.Byte[],System.Int32)
  - System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName
  - System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier
  - System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod
  - System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey
  - System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(System.Byte[],System.String,System.String)
  - System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.ToString
  langs:
  - csharp
  name: EncryptedKeyIdentifierClause
  nameWithType: EncryptedKeyIdentifierClause
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  type: Class
  summary: "암호화 된 키를 식별 하는 키 식별자 절을 나타냅니다."
  remarks: "일반적으로 EncryptedKeyIdentifierClause 이외로 사용, 사용자 지정 보안 토큰 서비스를 만들 때 필요가 없습니다. 보안 토큰 서비스에서 보안 토큰을 반환할 때 발급 된 보안 토큰 연결 되 고 연결 되지 않은 보안 토큰에 대 한 참조를 포함 합니다. 연결 된 참조는 SOAP 메시지의 보안 헤더에 포함 된 보안 토큰을 연결 되지 않은 참조는 SOAP 메시지의 보안 헤더에 포함 되지 않은 보안 토큰입니다. 일반적으로 이러한 참조는 발급 된 보안 토큰의 신뢰성을 확인 합니다. EncryptedKeyIdentifierClause 클래스를 사용 하 여 암호화 된 키를 참조 하도록 합니다. <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey%2A>메서드 암호화 된 키를 반환 합니다.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey%2A>       [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]통신 형식에 대해 제대로 구성 되는 래핑된 키를 허용 합니다. 통신 중에 지정 된 키 래핑 알고리즘 허용 되 고 사용 합니다. 와 호환 되도록 확인 되지 않습니다.는 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>끝점에서 지정한.</xref:System.ServiceModel.Security.SecurityAlgorithmSuite>"
  syntax:
    content: 'public sealed class EncryptedKeyIdentifierClause : System.IdentityModel.Tokens.BinaryKeyIdentifierClause'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  - System.IdentityModel.Tokens.BinaryKeyIdentifierClause
  implements: []
  inheritedMembers:
  - System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer
  - System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetRawBuffer
  - System.IdentityModel.Tokens.BinaryKeyIdentifierClause.Matches(System.Byte[])
  - System.IdentityModel.Tokens.BinaryKeyIdentifierClause.Matches(System.Byte[],System.Int32)
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CanCreateKey
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CreateKey
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Id
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String)
  id: '#ctor(System.Byte[],System.String)'
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  langs:
  - csharp
  name: EncryptedKeyIdentifierClause(Byte[],String)
  nameWithType: EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String)
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Tokens.EncryptedKeyIdentifierClause&quot;> </xref> 클래스 암호화 된 지정한 키와 키를 암호화 하는 데 사용 된 암호화 알고리즘을 사용 합니다."
  remarks: "정적 상수 문자열을 사용은 <xref:System.IdentityModel.Tokens.SecurityAlgorithms>는 암호화 알고리즘을 지정 하는 `encryptionMethod` 매개 변수.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public EncryptedKeyIdentifierClause (byte[] encryptedKey, string encryptionMethod);
    parameters:
    - id: encryptedKey
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>암호화 된 키가 들어 있습니다.</xref:System.Byte> 반환 되는 값을 설정 하는 <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey*>메서드.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey*>"
    - id: encryptionMethod
      type: System.String
      description: "키를 암호화 하는 데 사용 되는 암호화 알고리즘입니다. 값을 설정 하는 <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod*>속성.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod*>"
  overload: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>encryptionMethod</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>encryptedKey</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>encryptedKey</code>길이가&0;입니다."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)
  id: '#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)'
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  langs:
  - csharp
  name: EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier)
  nameWithType: EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier)
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Tokens.EncryptedKeyIdentifierClause&quot;> </xref> 클래스 지정된 된 키에 암호화 된 암호화 키에 대 한 키 식별자 및 키를 암호화 하는 데 사용 된 암호화 알고리즘을 사용 합니다."
  remarks: "정적 상수 문자열을 사용은 <xref:System.IdentityModel.Tokens.SecurityAlgorithms>는 암호화 알고리즘을 지정 하는 `encryptionMethod` 매개 변수.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public EncryptedKeyIdentifierClause (byte[] encryptedKey, string encryptionMethod, System.IdentityModel.Tokens.SecurityKeyIdentifier encryptingKeyIdentifier);
    parameters:
    - id: encryptedKey
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>암호화 된 키가 들어 있습니다.</xref:System.Byte> 반환 되는 값을 설정 하는 <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey*>메서드.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey*>"
    - id: encryptionMethod
      type: System.String
      description: "키를 암호화 하는 데 사용 되는 암호화 알고리즘입니다. 값을 설정 하는 <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod*>속성.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod*>"
    - id: encryptingKeyIdentifier
      type: System.IdentityModel.Tokens.SecurityKeyIdentifier
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;> </xref> 암호화 하는 키에 지정 된 키 식별자를 나타내는 `encryptedKey` 매개 변수입니다. 값을 설정 하는 <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier*>속성.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier*>"
  overload: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>encryptionMethod</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>encryptedKey</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>encryptedKey</code>길이가&0;입니다."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String)
  id: '#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String)'
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  langs:
  - csharp
  name: EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier,String)
  nameWithType: EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier,String)
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier,String)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Tokens.EncryptedKeyIdentifierClause&quot;> </xref> 클래스 지정된 된 키에 암호화 된 키, 암호화 키 및 사용자가 읽을 수 있는 이름에 대 한 키 식별자를 암호화 하는 데 사용 된 암호화 알고리즘을 사용 합니다."
  remarks: "정적 상수 문자열을 사용은 <xref:System.IdentityModel.Tokens.SecurityAlgorithms>는 암호화 알고리즘을 지정 하는 `encryptionMethod` 매개 변수.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public EncryptedKeyIdentifierClause (byte[] encryptedKey, string encryptionMethod, System.IdentityModel.Tokens.SecurityKeyIdentifier encryptingKeyIdentifier, string carriedKeyName);
    parameters:
    - id: encryptedKey
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>암호화 된 키가 들어 있습니다.</xref:System.Byte> 반환 되는 값을 설정 하는 <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey*>메서드.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey*>"
    - id: encryptionMethod
      type: System.String
      description: "키를 암호화 하는 데 사용 되는 암호화 알고리즘입니다. 값을 설정 하는 <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod*>속성.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod*>"
    - id: encryptingKeyIdentifier
      type: System.IdentityModel.Tokens.SecurityKeyIdentifier
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;> </xref> 에 지정 된 암호화 키에 대 한 키 식별자를 나타내는 `encryptedKey` 매개 변수입니다. 값을 설정 하는 <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier*>속성.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier*>"
    - id: carriedKeyName
      type: System.String
      description: "에 지정 된 키와 연결 된 사용자가 읽을 수 있는 이름은 `encryptedKey` 매개 변수입니다. 값을 설정 하는 <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName*>속성.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName*>"
  overload: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>encryptionMethod</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>encryptedKey</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>encryptedKey</code>길이가&0;입니다."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.Byte[],System.Int32)
  id: '#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.Byte[],System.Int32)'
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  langs:
  - csharp
  name: EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier,String,Byte[],Int32)
  nameWithType: EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier,String,Byte[],Int32)
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier,String,Byte[],Int32)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Tokens.EncryptedKeyIdentifierClause&quot;> </xref> 클래스 지정된 된 키에 암호화 된 키, 키 및 사용자가 읽을 수 있는 이름에 대 한 키 식별자를 암호화 하는 데 사용 된 암호화 알고리즘을 사용 합니다."
  remarks: "경우는 `derivationNonce` 및 `derivationLength` 토큰의 직접 보안 키 대신 유추 된 파생된 키가 사용 하는 매개 변수를 지정 합니다.       정적 상수 문자열을 사용은 <xref:System.IdentityModel.Tokens.SecurityAlgorithms>는 암호화 알고리즘을 지정 하는 `encryptionMethod` 매개 변수.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public EncryptedKeyIdentifierClause (byte[] encryptedKey, string encryptionMethod, System.IdentityModel.Tokens.SecurityKeyIdentifier encryptingKeyIdentifier, string carriedKeyName, byte[] derivationNonce, int derivationLength);
    parameters:
    - id: encryptedKey
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>암호화 된 키가 들어 있습니다.</xref:System.Byte> 반환 되는 값을 설정 하는 <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey*>메서드.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey*>"
    - id: encryptionMethod
      type: System.String
      description: "키를 암호화 하는 데 사용 되는 암호화 알고리즘입니다. 값을 설정 하는 <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod*>속성.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod*>"
    - id: encryptingKeyIdentifier
      type: System.IdentityModel.Tokens.SecurityKeyIdentifier
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;> </xref> 에 지정 된 키에 대 한 키 식별자를 나타내는 `encryptedKey` 매개 변수입니다. 값을 설정 하는 <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier*>속성.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier*>"
    - id: carriedKeyName
      type: System.String
      description: "에 지정 된 키와 연결 된 사용자가 읽을 수 있는 이름은 `encryptedKey` 매개 변수입니다. 값을 설정 하는 <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName*>속성.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName*>"
    - id: derivationNonce
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>파생된 키를 만드는 데 사용 된 nonce를 포함 하는.</xref:System.Byte> 반환 되는 값을 설정 하는 <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce*>메서드.</xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce*>"
    - id: derivationLength
      type: System.Int32
      description: "파생된 키의 크기입니다. 값을 설정 하는 <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength*>속성.</xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength*>"
  overload: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>encryptionMethod</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>encryptedKey</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>encryptedKey</code>길이가&0;입니다."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName
  id: CarriedKeyName
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  langs:
  - csharp
  name: CarriedKeyName
  nameWithType: EncryptedKeyIdentifierClause.CarriedKeyName
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "암호화 된 키와 연결 된 사용자가 읽을 수 있는 이름을 가져옵니다."
  remarks: "에 위치한 CarriedKeyName 속성으로 XML로 serialize 될 때는 `CarriedKeyName`> 요소입니다. 암호화 된 키에 대 한는 `CarriedKeyName`> 요소는 사용자가 읽을 수 있는 이름을 키 값을 연결 하는 선택적 요소입니다. 이 이름을 사용 하 여 키를 참조 하도록 한 다음 사용할 수 있습니다는 `KeyName`> 내에서 요소는 `KeyInfo`> 요소입니다. 동일한 `CarriedKeyName`> 요소 값 ID 값을 달리 단일 문서 내에서 여러 번 발생할 수 있습니다. 키의 값 모두에 동일 해야 `EncryptedKey`> 동일한 식별 되는 요소 `CarriedKeyName`> XML 문서 내에서 이름입니다."
  syntax:
    content: public string CarriedKeyName { get; }
    return:
      type: System.String
      description: "암호화 된 키와 연결 된 사용자가 읽을 수 있는 이름입니다."
  overload: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier
  id: EncryptingKeyIdentifier
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  langs:
  - csharp
  name: EncryptingKeyIdentifier
  nameWithType: EncryptedKeyIdentifierClause.EncryptingKeyIdentifier
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "암호화 키에 대 한 키 식별자를 가져옵니다."
  syntax:
    content: public System.IdentityModel.Tokens.SecurityKeyIdentifier EncryptingKeyIdentifier { get; }
    return:
      type: System.IdentityModel.Tokens.SecurityKeyIdentifier
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;> </xref> 암호화 하는 키에 대 한 키 식별자를 나타내는입니다."
  overload: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod
  id: EncryptionMethod
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  langs:
  - csharp
  name: EncryptionMethod
  nameWithType: EncryptedKeyIdentifierClause.EncryptionMethod
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "키를 암호화 하는 데 사용 되는 암호화 알고리즘을 가져옵니다."
  remarks: "일반적으로 EncryptionMethod 속성의 값은 <xref:System.IdentityModel.Tokens.SecurityAlgorithms>클래스</xref:System.IdentityModel.Tokens.SecurityAlgorithms> 의 정적 상수 문자열 중 하나"
  syntax:
    content: public string EncryptionMethod { get; }
    return:
      type: System.String
      description: "키를 암호화 하는 데 사용 되는 암호화 알고리즘입니다."
  overload: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey
  id: GetEncryptedKey
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  langs:
  - csharp
  name: GetEncryptedKey()
  nameWithType: EncryptedKeyIdentifierClause.GetEncryptedKey()
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "암호화 된 키를 가져옵니다."
  remarks: "GetEncryptedKey 메서드에 의해 반환 되는 배열이 암호화 된 키의 복제본입니다."
  syntax:
    content: public byte[] GetEncryptedKey ();
    parameters: []
    return:
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>암호화 된 키가 들어 있는.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  id: Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  langs:
  - csharp
  name: Matches(SecurityKeyIdentifierClause)
  nameWithType: EncryptedKeyIdentifierClause.Matches(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(SecurityKeyIdentifierClause)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "이 인스턴스에 대 한 키 식별자가 지정 된 키 식별자 절과 동일한 지 여부를 나타내는 값을 반환 합니다."
  syntax:
    content: public override bool Matches (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> 와 비교할 수 있습니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <code> keyIdentifierClause </code> 유형의 <xref href=&quot;System.IdentityModel.Tokens.EncryptedKeyIdentifierClause&quot;> </xref> 에 동일한 암호화 된 키, 암호화 방법 및 사용자가 읽을 수 있는 이름에 현재 인스턴스와 및 그렇지 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyIdentifierClause</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(System.Byte[],System.String,System.String)
  id: Matches(System.Byte[],System.String,System.String)
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  langs:
  - csharp
  name: Matches(Byte[],String,String)
  nameWithType: EncryptedKeyIdentifierClause.Matches(Byte[],String,String)
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(Byte[],String,String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "이 인스턴스의 키 식별자와 같은지 여부를 지정 된 암호화 된 키, 암호화 방법 및 사용자가 읽을 수 있는 이름을 나타내는 값을 반환 합니다."
  syntax:
    content: public bool Matches (byte[] encryptedKey, string encryptionMethod, string carriedKeyName);
    parameters:
    - id: encryptedKey
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>암호화 된 키가 들어 있습니다.</xref:System.Byte>"
    - id: encryptionMethod
      type: System.String
      description: "키를 암호화 하는 데 사용 되는 암호화 알고리즘입니다."
    - id: carriedKeyName
      type: System.String
      description: "암호화 된 키와 연결 된 사용자가 읽을 수 있는 이름입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <code> encryptedKey </code>, <code> encryptionMethod </code> 및 <code> carriedKeyName </code> 매개 변수에서 반환 된 값이 서로 다르면는 <> </> *> 메서드 및 <> </> *>와 <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName*>속성, 각각; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName*>"
  overload: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.ToString
  id: ToString
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  langs:
  - csharp
  name: ToString()
  nameWithType: EncryptedKeyIdentifierClause.ToString()
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.ToString()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "현재 개체를 나타내는 문자열을 반환 합니다."
  remarks: "ToString 메서드는 암호화 된 키와 키를 암호화 하는 데 사용 되는 암호화 알고리즘을 포함 하는 문자열을 반환 합니다."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "현재 개체입니다."
  overload: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.BinaryKeyIdentifierClause
  isExternal: false
  name: System.IdentityModel.Tokens.BinaryKeyIdentifierClause
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String)
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: EncryptedKeyIdentifierClause(Byte[],String)
  nameWithType: EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String)
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier)
  nameWithType: EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier)
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier)
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifier
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifier
  nameWithType: SecurityKeyIdentifier
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifier
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String)
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier,String)
  nameWithType: EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier,String)
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier,String)
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.Byte[],System.Int32)
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier,String,Byte[],Int32)
  nameWithType: EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier,String,Byte[],Int32)
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause(Byte[],String,SecurityKeyIdentifier,String,Byte[],Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: CarriedKeyName
  nameWithType: EncryptedKeyIdentifierClause.CarriedKeyName
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: EncryptingKeyIdentifier
  nameWithType: EncryptedKeyIdentifierClause.EncryptingKeyIdentifier
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: EncryptionMethod
  nameWithType: EncryptedKeyIdentifierClause.EncryptionMethod
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: GetEncryptedKey()
  nameWithType: EncryptedKeyIdentifierClause.GetEncryptedKey()
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey()
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: Matches(SecurityKeyIdentifierClause)
  nameWithType: EncryptedKeyIdentifierClause.Matches(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(SecurityKeyIdentifierClause)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(System.Byte[],System.String,System.String)
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: Matches(Byte[],String,String)
  nameWithType: EncryptedKeyIdentifierClause.Matches(Byte[],String,String)
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(Byte[],String,String)
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.ToString
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: ToString()
  nameWithType: EncryptedKeyIdentifierClause.ToString()
  fullName: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.ToString()
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor*
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: EncryptedKeyIdentifierClause
  nameWithType: EncryptedKeyIdentifierClause.EncryptedKeyIdentifierClause
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName*
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: CarriedKeyName
  nameWithType: EncryptedKeyIdentifierClause.CarriedKeyName
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier*
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: EncryptingKeyIdentifier
  nameWithType: EncryptedKeyIdentifierClause.EncryptingKeyIdentifier
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod*
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: EncryptionMethod
  nameWithType: EncryptedKeyIdentifierClause.EncryptionMethod
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey*
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: GetEncryptedKey
  nameWithType: EncryptedKeyIdentifierClause.GetEncryptedKey
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches*
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: Matches
  nameWithType: EncryptedKeyIdentifierClause.Matches
- uid: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.ToString*
  parent: System.IdentityModel.Tokens.EncryptedKeyIdentifierClause
  isExternal: false
  name: ToString
  nameWithType: EncryptedKeyIdentifierClause.ToString
