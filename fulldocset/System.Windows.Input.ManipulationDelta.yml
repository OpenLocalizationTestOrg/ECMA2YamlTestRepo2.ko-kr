### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.ManipulationDelta
  id: ManipulationDelta
  children:
  - System.Windows.Input.ManipulationDelta.#ctor(System.Windows.Vector,System.Double,System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Input.ManipulationDelta.Expansion
  - System.Windows.Input.ManipulationDelta.Rotation
  - System.Windows.Input.ManipulationDelta.Scale
  - System.Windows.Input.ManipulationDelta.Translation
  langs:
  - csharp
  name: ManipulationDelta
  nameWithType: ManipulationDelta
  fullName: System.Windows.Input.ManipulationDelta
  type: Class
  summary: "조작 이벤트가 발생할 때 누적 된 변환 데이터를 포함 합니다."
  remarks: "ManipulationDelta 클래스 조작 하는 위치에 변경 내용에 대 한 정보를 포함합니다.  [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]변경 내용을으로 해석 한 <xref:System.Windows.Input.ManipulationDelta.Translation%2A>, <xref:System.Windows.Input.ManipulationDelta.Expansion%2A>, 또는 <xref:System.Windows.Input.ManipulationDelta.Rotation%2A>.</xref:System.Windows.Input.ManipulationDelta.Rotation%2A> </xref:System.Windows.Input.ManipulationDelta.Expansion%2A> </xref:System.Windows.Input.ManipulationDelta.Translation%2A> 때는 <xref:System.Windows.UIElement.ManipulationDelta>에서 이벤트가 발생 한 <xref:System.Windows.UIElement>, ManipulationDelta 개체에 속성을 사용 하 여 조작 해야 하는 개체를 변환 합니다.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement.ManipulationDelta>  <xref:System.Windows.Input.ManipulationDeltaEventArgs>클래스 ManipulationDelta 형식의 두 개 속성도 제공: <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>및 <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>.</xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> </xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> </xref:System.Windows.Input.ManipulationDeltaEventArgs>       조작에 대 한 자세한 내용은 참조는 [입력 개요](~/add/includes/ajax-current-ext-md.md)합니다.  예를 보려면 조작에 응답 하는 응용 프로그램 참조 [연습: 만드는 첫 번째 터치 응용 프로그램](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event.  The example applies the <xref:System.Windows.Input.ManipulationDelta.Translation%2A>, <xref:System.Windows.Input.ManipulationDelta.Scale%2A>, and <xref:System.Windows.Input.ManipulationDelta.Rotation%2A> properties to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public class ManipulationDelta
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDelta.#ctor(System.Windows.Vector,System.Double,System.Windows.Vector,System.Windows.Vector)
  id: '#ctor(System.Windows.Vector,System.Double,System.Windows.Vector,System.Windows.Vector)'
  parent: System.Windows.Input.ManipulationDelta
  langs:
  - csharp
  name: ManipulationDelta(Vector,Double,Vector,Vector)
  nameWithType: ManipulationDelta.ManipulationDelta(Vector,Double,Vector,Vector)
  fullName: System.Windows.Input.ManipulationDelta.ManipulationDelta(Vector,Double,Vector,Vector)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.ManipulationDelta&quot;> </xref> 클래스입니다."
  syntax:
    content: public ManipulationDelta (System.Windows.Vector translation, double rotation, System.Windows.Vector scale, System.Windows.Vector expansion);
    parameters:
    - id: translation
      type: System.Windows.Vector
      description: "조작의 선형 동작 [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]합니다."
    - id: rotation
      type: System.Double
      description: "각도 조작의 회전 합니다."
    - id: scale
      type: System.Windows.Vector
      description: "조작 크기의 승수로 크기가 조정 됩니다."
    - id: expansion
      type: System.Windows.Vector
      description: "에 조작의 크기가 조정 양 [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]합니다."
  overload: System.Windows.Input.ManipulationDelta.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDelta.Expansion
  id: Expansion
  parent: System.Windows.Input.ManipulationDelta
  langs:
  - csharp
  name: Expansion
  nameWithType: ManipulationDelta.Expansion
  fullName: System.Windows.Input.ManipulationDelta.Expansion
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "에 조작의 크기가 조정 크기를 가져오거나 설정 합니다. [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]합니다."
  remarks: "<xref:System.Windows.Input.ManipulationDelta.Scale%2A>확장 속성을 보고 조작 하는 크기 조정 및.</xref:System.Windows.Input.ManipulationDelta.Scale%2A>  두 기능 간의 차이점에는 값이 보고 되는 방법입니다.  확장 속성에서 크기 조정 조작을 보고 [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]합니다. <xref:System.Windows.Input.ManipulationDelta.Scale%2A>승수로 값을 보고 하는 속성.</xref:System.Windows.Input.ManipulationDelta.Scale%2A>  경우 <xref:System.Windows.Input.ManipulationDelta.Scale%2A>이 0.5 이면 50%까지 크기를 줄이면으로 조작 해석 됩니다.</xref:System.Windows.Input.ManipulationDelta.Scale%2A>  경우 <xref:System.Windows.Input.ManipulationDelta.Scale%2A>가 2 이면 조작 100% 크기를 늘리면로 해석 됩니다.</xref:System.Windows.Input.ManipulationDelta.Scale%2A>"
  syntax:
    content: public System.Windows.Vector Expansion { get; }
    return:
      type: System.Windows.Vector
      description: "에 조작의 크기가 조정 양 [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]합니다."
  overload: System.Windows.Input.ManipulationDelta.Expansion*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDelta.Rotation
  id: Rotation
  parent: System.Windows.Input.ManipulationDelta
  langs:
  - csharp
  name: Rotation
  nameWithType: ManipulationDelta.Rotation
  fullName: System.Windows.Input.ManipulationDelta.Rotation
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "조작의 회전 각도 가져오거나 설정 합니다."
  remarks: "회전 속성에는 조작 하는 축을 중심으로 회전로 해석 되는 방법을 보고 합니다.  축은 조작을 시작한 연락처의 두 점 사이의 지점 일반적으로 합니다."
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event.  The example applies the <xref:System.Windows.Input.ManipulationDelta.Translation%2A>, <xref:System.Windows.Input.ManipulationDelta.Scale%2A>, and Rotation properties to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public double Rotation { get; }
    return:
      type: System.Double
      description: "각도 조작의 회전 합니다."
  overload: System.Windows.Input.ManipulationDelta.Rotation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDelta.Scale
  id: Scale
  parent: System.Windows.Input.ManipulationDelta
  langs:
  - csharp
  name: Scale
  nameWithType: ManipulationDelta.Scale
  fullName: System.Windows.Input.ManipulationDelta.Scale
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "승수로 조작의 크기가 조정 크기를 가져오거나 설정 합니다."
  remarks: "소수 자릿수 및 <xref:System.Windows.Input.ManipulationDelta.Expansion%2A>속성 둘 다 보고 조작 하는 크기 조정.</xref:System.Windows.Input.ManipulationDelta.Expansion%2A>  두 기능 간의 차이점에는 값이 보고 되는 방법입니다.  소수 자릿수 속성 승수로 값을 보고합니다.  눈금 0.5 이면 조작 50%까지 크기를 줄이면로 해석 됩니다.  소수 자릿수 2 이면 조작 100% 크기를 늘리면로 해석 됩니다. <xref:System.Windows.Input.ManipulationDelta.Expansion%2A>속성에서 크기 조정 조작을 보고 [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)].</xref:System.Windows.Input.ManipulationDelta.Expansion%2A>"
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event.  The example applies the <xref:System.Windows.Input.ManipulationDelta.Translation%2A>, Scale, and <xref:System.Windows.Input.ManipulationDelta.Rotation%2A> properties to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public System.Windows.Vector Scale { get; }
    return:
      type: System.Windows.Vector
      description: "조작 크기의 크기가 조정 됩니다."
  overload: System.Windows.Input.ManipulationDelta.Scale*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDelta.Translation
  id: Translation
  parent: System.Windows.Input.ManipulationDelta
  langs:
  - csharp
  name: Translation
  nameWithType: ManipulationDelta.Translation
  fullName: System.Windows.Input.ManipulationDelta.Translation
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "조작의 선형 동작을 가져오거나 설정 합니다."
  remarks: "번역 속성에는 조작 하는 화면 가로 및 세로로 이동할로 해석 되는 방법을 보고 합니다."
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event.  The example applies the Translation, <xref:System.Windows.Input.ManipulationDelta.Scale%2A>, and <xref:System.Windows.Input.ManipulationDelta.Rotation%2A> properties to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public System.Windows.Vector Translation { get; }
    return:
      type: System.Windows.Vector
      description: "조작의 선형 동작 [!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]합니다."
  overload: System.Windows.Input.ManipulationDelta.Translation*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Input.ManipulationDelta.#ctor(System.Windows.Vector,System.Double,System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Input.ManipulationDelta
  isExternal: false
  name: ManipulationDelta(Vector,Double,Vector,Vector)
  nameWithType: ManipulationDelta.ManipulationDelta(Vector,Double,Vector,Vector)
  fullName: System.Windows.Input.ManipulationDelta.ManipulationDelta(Vector,Double,Vector,Vector)
- uid: System.Windows.Vector
  parent: System.Windows
  isExternal: false
  name: Vector
  nameWithType: Vector
  fullName: System.Windows.Vector
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Input.ManipulationDelta.Expansion
  parent: System.Windows.Input.ManipulationDelta
  isExternal: false
  name: Expansion
  nameWithType: ManipulationDelta.Expansion
  fullName: System.Windows.Input.ManipulationDelta.Expansion
- uid: System.Windows.Input.ManipulationDelta.Rotation
  parent: System.Windows.Input.ManipulationDelta
  isExternal: false
  name: Rotation
  nameWithType: ManipulationDelta.Rotation
  fullName: System.Windows.Input.ManipulationDelta.Rotation
- uid: System.Windows.Input.ManipulationDelta.Scale
  parent: System.Windows.Input.ManipulationDelta
  isExternal: false
  name: Scale
  nameWithType: ManipulationDelta.Scale
  fullName: System.Windows.Input.ManipulationDelta.Scale
- uid: System.Windows.Input.ManipulationDelta.Translation
  parent: System.Windows.Input.ManipulationDelta
  isExternal: false
  name: Translation
  nameWithType: ManipulationDelta.Translation
  fullName: System.Windows.Input.ManipulationDelta.Translation
- uid: System.Windows.Input.ManipulationDelta.#ctor*
  parent: System.Windows.Input.ManipulationDelta
  isExternal: false
  name: ManipulationDelta
  nameWithType: ManipulationDelta.ManipulationDelta
- uid: System.Windows.Input.ManipulationDelta.Expansion*
  parent: System.Windows.Input.ManipulationDelta
  isExternal: false
  name: Expansion
  nameWithType: ManipulationDelta.Expansion
- uid: System.Windows.Input.ManipulationDelta.Rotation*
  parent: System.Windows.Input.ManipulationDelta
  isExternal: false
  name: Rotation
  nameWithType: ManipulationDelta.Rotation
- uid: System.Windows.Input.ManipulationDelta.Scale*
  parent: System.Windows.Input.ManipulationDelta
  isExternal: false
  name: Scale
  nameWithType: ManipulationDelta.Scale
- uid: System.Windows.Input.ManipulationDelta.Translation*
  parent: System.Windows.Input.ManipulationDelta
  isExternal: false
  name: Translation
  nameWithType: ManipulationDelta.Translation
