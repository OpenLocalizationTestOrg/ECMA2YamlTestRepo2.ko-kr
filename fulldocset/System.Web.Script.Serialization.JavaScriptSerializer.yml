### YamlMime:ManagedReference
items:
- uid: System.Web.Script.Serialization.JavaScriptSerializer
  id: JavaScriptSerializer
  children:
  - System.Web.Script.Serialization.JavaScriptSerializer.#ctor
  - System.Web.Script.Serialization.JavaScriptSerializer.#ctor(System.Web.Script.Serialization.JavaScriptTypeResolver)
  - System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(System.Object,System.Type)
  - System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)
  - System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(System.String,System.Type)
  - System.Web.Script.Serialization.JavaScriptSerializer.Deserialize``1(System.String)
  - System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject(System.String)
  - System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength
  - System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit
  - System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters(System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})
  - System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object)
  - System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object,System.Text.StringBuilder)
  langs:
  - csharp
  name: JavaScriptSerializer
  nameWithType: JavaScriptSerializer
  fullName: System.Web.Script.Serialization.JavaScriptSerializer
  type: Class
  summary: '[Json.NET](http://www.newtonsoft.com/json) 사용 되는 serialization 및 deserialization을 수행 해야 합니다. AJAX 사용 응용 프로그램에 대 한 serialization 및 deserialization 기능을 제공합니다.'
  remarks: "The JavaScriptSerializer class is used internally by the asynchronous communication layer to serialize and deserialize the data that is passed between the browser and the Web server. You cannot access that instance of the serializer. However, this class exposes a public API. Therefore, you can use the class when you want to work with JavaScript Object Notation (JSON) in managed code.  \n  \n To serialize an object, use the <xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A> method. To deserialize a JSON string, use the <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A> or <xref:System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject%2A> methods. To serialize and deserialize types that are not natively supported by JavaScriptSerializer, implement custom converters by using the <xref:System.Web.Script.Serialization.JavaScriptConverter> class. Then register the converters by using the <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> method.  \n  \n## Mapping Between Managed Types and JSON  \n The following table shows the mapping between managed types and JSON for the serialization process. These managed types are natively supported by JavaScriptSerializer. When you are deserializing from a JSON string to a managed type, the same mapping applies. However, deserialization can be asymmetric; not all serializable managed types can be deserialized from JSON.  \n  \n> [!NOTE]\n>  A multidimensional array is serialized as a one-dimensional array, and you should use it as a flat array.  \n  \n|Managed type|JSON equivalent|  \n|------------------|---------------------|  \n|<xref:System.String> (UTF-8 encoding only).|String|  \n|<xref:System.Char>|String|  \n|Single null char (such as, \\0 )|Null|  \n|<xref:System.Boolean>|Boolean. Represented in JSON as `true` or `false`|  \n|`null` (`null` object references and <xref:System.Nullable> value types).|A string value of null|  \n|<xref:System.DBNull>|A string value of null|  \n|Primitive numeric (or numeric-compatible) types: <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Double>, and <xref:System.Single>. The culture-invariant string representation is used.|Number|  \n|<xref:System.DateTime>|Date object, represented in JSON as \"\\\\/Date(number of ticks)\\\\/\". The number of ticks is a positive or negative long value that indicates the number of ticks (milliseconds) that have elapsed since midnight 01 January, 1970 UTC.<br /><br /> The maximum supported date value is <xref:System.DateTime.MaxValue> (12/31/9999 11:59:59 PM) and the minimum supported date value is <xref:System.DateTime.MinValue> (1/1/0001 12:00:00 AM).|  \n|Enumerations of integer type|Integer equivalent of the enumeration value|  \n|Types that implement <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> that are not also implementations of <xref:System.Collections.IDictionary> or <xref:System.Collections.Generic.IDictionary%602?displayProperty=fullName>. This includes types such as <xref:System.Array>, <xref:System.Collections.ArrayList>, and <xref:System.Collections.Generic.List%601>.|Array that uses JSON array syntax|  \n|Types that implement <xref:System.Collections.IDictionary> or <xref:System.Collections.Generic.IDictionary%602?displayProperty=fullName>. This includes types such as <xref:System.Collections.Generic.Dictionary%602> and <xref:System.Collections.Hashtable>.|JavaScript object that uses JSON dictionary syntax|  \n|Custom concrete (non-abstract) types that have public instance properties that have get accessors or public instance fields.<br /><br /> Note that public write-only properties, public property or public field attributes marked with <xref:System.Web.Script.Serialization.ScriptIgnoreAttribute>, and public indexed properties in these types are ignored.|JavaScript object that uses JSON dictionary syntax. A special metadata property named \"__type\" is included to ensure correct deserialization. Make sure that public instance properties have get and set accessors to ensure correct deserialization.|  \n|<xref:System.Guid>|String representation of a GUID|  \n|<xref:System.Uri>|String representation of the return value of <xref:System.Uri.GetComponents%2A>|"
  example:
  - "The first example provides a simple illustration of how to serialize and deserialize data objects. It requires a class names Person which is shown below.  \n  \n [!code-cs[System.Web.Script.Serialization.JavaScriptSerializer#1](~/add/codesnippet/csharp/t-system.web.script.seri_1_1.cs)]\n [!code-vb[System.Web.Script.Serialization.JavaScriptSerializer#1](~/add/codesnippet/visualbasic/t-system.web.script.seri_1_1.vb)]  \n  \n [!code-cs[System.Web.Script.Serialization.JavaScriptSerializer#2](~/add/codesnippet/csharp/t-system.web.script.seri_1_2.cs)]\n [!code-vb[System.Web.Script.Serialization.JavaScriptSerializer#2](~/add/codesnippet/visualbasic/t-system.web.script.seri_1_2.vb)]  \n  \n The next example shows a more complicated and complete project that uses the JavaScriptSerializer class to save and restore the state of an object by using JSON serialization. This code uses a custom converter that is provided for the <xref:System.Web.Script.Serialization.JavaScriptConverter> class.  \n  \n [!code-vb[System.Web.Script.Serialization#4](~/add/codesnippet/visualbasic/t-system.web.script.seri_1_3.aspx)]\n [!code-cs[System.Web.Script.Serialization#4](~/add/codesnippet/csharp/t-system.web.script.seri_1_3.aspx)]"
  syntax:
    content: public class JavaScriptSerializer
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.#ctor
  id: '#ctor'
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: JavaScriptSerializer()
  nameWithType: JavaScriptSerializer.JavaScriptSerializer()
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.JavaScriptSerializer()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Script.Serialization.JavaScriptSerializer&quot;> </xref> 형식 확인 자가 없는 클래스입니다."
  remarks: "인스턴스는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>클래스 없이 형식 확인자 serialize 된 JSON 문자열의 형식 메타 데이터 속성 (이름: &quot;__type&quot;)를 포함 하지 않습니다.</xref:System.Web.Script.Serialization.JavaScriptSerializer> 형식 메타 데이터 속성은 사용 된 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A>및 <xref:System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject%2A>JSON 문자열로 변환 될 적절 한 관리를 확인 하는 메서드를 입력 합니다.</xref:System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject%2A> </xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A> 유형 해결 프로그램에 대 한 내용은 <xref:System.Web.Script.Serialization.JavaScriptTypeResolver>클래스</xref:System.Web.Script.Serialization.JavaScriptTypeResolver> 를 참조 하십시오."
  syntax:
    content: public JavaScriptSerializer ();
    parameters: []
  overload: System.Web.Script.Serialization.JavaScriptSerializer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.#ctor(System.Web.Script.Serialization.JavaScriptTypeResolver)
  id: '#ctor(System.Web.Script.Serialization.JavaScriptTypeResolver)'
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: JavaScriptSerializer(JavaScriptTypeResolver)
  nameWithType: JavaScriptSerializer.JavaScriptSerializer(JavaScriptTypeResolver)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.JavaScriptSerializer(JavaScriptTypeResolver)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Script.Serialization.JavaScriptSerializer&quot;> </xref> 를 가진 사용자 지정 형식 확인자입니다."
  remarks: "개체를 직렬화 할은 때는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>클래스에서 사용 하는 `resolver` 매개 변수에 지정 된 형식 메타 데이터 속성 (&quot;__type&quot;)에 대 한 serialize 된 JSON 문자열에 포함할 적절 한 값.</xref:System.Web.Script.Serialization.JavaScriptSerializer> 마찬가지로,는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>확인자 인스턴스를 사용 하 여 적절 한 관리 되는 형식으로 형식 메타 데이터 속성 값 확인, 클래스는 JSON 문자열을 역직렬화 합니다.</xref:System.Web.Script.Serialization.JavaScriptSerializer>       설정할 수 있습니다는 `resolver` 매개 변수를 `null`,이 값은 호출 하 여 <xref:System.Web.Script.Serialization.JavaScriptSerializer.%23ctor%2A>생성자.</xref:System.Web.Script.Serialization.JavaScriptSerializer.%23ctor%2A>       인스턴스 <xref:System.Web.Script.Serialization.JavaScriptSerializer>특별 한 유형 해결 프로그램을 사용 하 여 클라이언트 스크립트에서 웹 서비스 호출에 대 한 비동기 통신 계층에서 사용 되는.</xref:System.Web.Script.Serialization.JavaScriptSerializer> 웹 서비스의 메서드 서명에 또는 수 있는 정의 된 deserialize 할 수 있는 형식 제한 하는이 형식 확인자는 <xref:System.Web.Script.Services.GenerateScriptTypeAttribute>적용 합니다.</xref:System.Web.Script.Services.GenerateScriptTypeAttribute> 이 기본 제공 형식 확인자를 프로그래밍 방식으로 수정할 수 없습니다.      > [!IMPORTANT] > 사용자 지정 형식 확인자를 사용 하 여 초기화이 개체의 인스턴스를 사용 하 여 보안상 위험 해질 수 있습니다. 신뢰할 수 있는 데이터에만이 개체를 사용 하십시오. 자세한 내용은 참조 [신뢰할 수 없는 데이터 보안 위험](http://go.microsoft.com/fwlink/?LinkId=330378)합니다."
  syntax:
    content: public JavaScriptSerializer (System.Web.Script.Serialization.JavaScriptTypeResolver resolver);
    parameters:
    - id: resolver
      type: System.Web.Script.Serialization.JavaScriptTypeResolver
      description: "사용자 지정 형식 확인자 개체입니다."
  overload: System.Web.Script.Serialization.JavaScriptSerializer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(System.Object,System.Type)
  id: ConvertToType(System.Object,System.Type)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: ConvertToType(Object,Type)
  nameWithType: JavaScriptSerializer.ConvertToType(Object,Type)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(Object,Type)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "지정된 된 형식으로 지정된 된 개체를 변환 합니다."
  remarks: "경우는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>인스턴스 형식을 사용자 지정 변환기가 등록 되어 있는, serializer 호출 하 여 직렬화 되는 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A>메서드를 JSON 형식 문자열로 변환 되는 이름/값 쌍의 사전.</xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> </xref:System.Web.Script.Serialization.JavaScriptSerializer>       <xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A>메서드가 개체 그래프는 너무 복잡 하거나의 인스턴스를 등록 하는 경우 예외가 throw 될 수 <xref:System.Web.Script.Serialization.JavaScriptConverter>변환기 재귀가 발생 했습니다.</xref:System.Web.Script.Serialization.JavaScriptConverter> </xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A>"
  syntax:
    content: public object ConvertToType (object obj, Type targetType);
    parameters:
    - id: obj
      type: System.Object
      description: "변환할 개체입니다."
    - id: targetType
      type: System.Type
      description: "개체를 변환할 형식입니다."
    return:
      type: System.Object
      description: "Serialize 된 JSON 문자열입니다."
  overload: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*>.</xref:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*> 의 값을 초과 하는 결과 JSON 형식 문자열       -또는- <code> obj </code> 순환 참조를 포함 합니다. 순환 참조는 자식 개체의 부모 개체에 대 한 부모 개체에 있는 자식 개체에 대 한 참조가 있을 때 발생 합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "에 정의 된 재귀 제한을 <xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*>를 초과 했습니다.</xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*>"
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)
  id: ConvertToType``1(System.Object)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: ConvertToType(Object)
  nameWithType: JavaScriptSerializer.ConvertToType(Object)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(Object)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  syntax:
    content: public T ConvertToType<T> (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "추가할 수 있습니다."
    return:
      type: T
      description: "추가할 수 있습니다."
  overload: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(System.String,System.Type)
  id: Deserialize(System.String,System.Type)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: Deserialize(String,Type)
  nameWithType: JavaScriptSerializer.Deserialize(String,Type)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(String,Type)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "지정 된 형식의 개체를 JSON 형식 문자열로 변환합니다."
  remarks: "이 deserialization 메서드는 방법은 특정 형식으로 개체 그래프의 루트를 캐스팅 하 려 하지 않습니다는 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A>메서드는 않습니다.</xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A>"
  syntax:
    content: public object Deserialize (string input, Type targetType);
    parameters:
    - id: input
      type: System.String
      description: "역직렬화 할 JSON 문자열입니다."
    - id: targetType
      type: System.Type
      description: "결과 개체의 형식입니다."
    return:
      type: System.Object
      description: "Deserialize 된 개체입니다."
  overload: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "길이가 <code> input </code> 의 값을 초과 <> </> *> 합니다.       -또는-으로 정의 된 재귀도 <> </> *>를 초과 했습니다.       -또는- <code> input </code> 예기치 않은 문자 시퀀스가 포함 되어 있습니다.       -또는- <code> input </code> 사전 형식 이므로 문자열이 아닌 키 값을 발견 했습니다.       -또는- <code> input </code> 대상 형식에 사용할 수 없는 멤버 정의 포함 합니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>input</code>사용자 지정 형식 되지만 현재 serializer와 연결 되어 있는 한 유형 해결 프로그램 해당 관리 되는 형식을 찾을 수 없습니다 되었음을 나타내는 &quot;__type&quot; 속성을 포함 합니다.       -또는- <code>input</code> 나타내는 사용자 지정 형식 이지만 해당 JSON 문자열을 역직렬화의 결과 원하는 대상 형식에 할당할 수 없습니다 &quot;__type&quot; 속성을 포함 합니다.       -또는- <code>input</code> 나타내는 &quot;__type&quot; 속성이 포함 <xref:System.Object> 또는 인스턴스화할 수 없는 유형 (예: 추상 형식 또는 인터페이스).       -또는-JSON 배열을 JSON deserialization 대상으로 사용 하기 위해 지원 되지 않는 배열 형식의 관리 되는 형식으로 변환 하려고 했습니다.       -또는-변환할 수 없으면 <code>input</code> 대상 형식을 캐스팅 합니다."
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize``1(System.String)
  id: Deserialize``1(System.String)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: Deserialize(String)
  nameWithType: JavaScriptSerializer.Deserialize(String)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(String)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  syntax:
    content: public T Deserialize<T> (string input);
    parameters:
    - id: input
      type: System.String
      description: "추가할 수 있습니다."
    return:
      type: T
      description: "추가할 수 있습니다."
  overload: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject(System.String)
  id: DeserializeObject(System.String)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: DeserializeObject(String)
  nameWithType: JavaScriptSerializer.DeserializeObject(String)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject(String)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "개체 그래프에 지정된 된 JSON 문자열을 변환합니다."
  remarks: "이 deserialization 메서드는 특정 형식으로 개체 그래프의 루트를 캐스팅 하 려 하지 않습니다과 마찬가지로 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A>메서드.</xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A>"
  syntax:
    content: public object DeserializeObject (string input);
    parameters:
    - id: input
      type: System.String
      description: "Deserialize 할 JSON 문자열입니다."
    return:
      type: System.Object
      description: "Deserialize 된 개체입니다."
  overload: System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> input </code> 의 값을 초과 하는 길이 <> </> *> 합니다.       -또는-으로 정의 된 재귀도 <> </> *>를 초과 했습니다.       -또는- <code> input </code> 예기치 않은 문자 시퀀스가 포함 되어 있습니다.       -또는- <code> input </code> 사전 형식 이므로 문자열이 아닌 키 값을 발견 했습니다.       -또는- <code> input </code> 대상 형식에 사용할 수 없는 멤버 정의 포함 합니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>input</code>사용자 지정 형식 되지만 현재 serializer와 연결 되어 있는 한 유형 해결 프로그램 해당 관리 되는 형식을 찾을 수 없습니다 되었음을 나타내는 &quot;__type&quot; 속성을 포함 합니다.       -또는- <code>input</code> 나타내는 사용자 지정 형식 이지만 해당 JSON 문자열을 역직렬화의 결과 원하는 대상 형식에 할당할 수 없습니다 &quot;__type&quot; 속성을 포함 합니다.       -또는- <code>input</code> 나타내는 &quot;__type&quot; 속성이 포함 <xref:System.Object> 또는 인스턴스화할 수 없는 유형 (예: 추상 형식 또는 인터페이스).       -또는-JSON 배열을 JSON deserialization 대상으로 사용 하기 위해 지원 되지 않는 배열 형식의 관리 되는 형식으로 변환 하려고 했습니다.       -또는-변환할 수 없으면 <code>input</code> 대상 형식을 캐스팅 합니다."
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength
  id: MaxJsonLength
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: MaxJsonLength
  nameWithType: JavaScriptSerializer.MaxJsonLength
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "허용 되는 JSON 문자열의 최대 길이 가져오거나 설정 합니다.는 <xref href=&quot;System.Web.Script.Serialization.JavaScriptSerializer&quot;> </xref> 클래스입니다."
  remarks: 'MaxJsonLength 속성의 값은 <xref:System.Web.Script.Serialization.JavaScriptSerializer>클래스</xref:System.Web.Script.Serialization.JavaScriptSerializer> 의 인스턴스를 명시적으로 만들어야 하는 경우에 적용 됩니다. 사용 하 여는 `jsonSerialization` 비동기 통신 계층에서 사용 되는 내부 serializer 인스턴스에 대 한 최대 길이 설정 하려면 구성 파일의 요소입니다. Serialization에 대 한 구성 요소에 대 한 자세한 내용은 참조 [하는 방법: Microsoft Ajax에서 ASP.NET 서비스 구성](~/add/includes/ajax-current-ext-md.md)합니다.'
  syntax:
    content: public int MaxJsonLength { get; set; }
    return:
      type: System.Int32
      description: "JSON 문자열의 최대 길이입니다. 기본값은은 2097152 자로, 4MB의 유니코드 문자열 데이터와 같습니다."
  overload: System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "속성은&1; 보다 작은 값으로 설정 됩니다."
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit
  id: RecursionLimit
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: RecursionLimit
  nameWithType: JavaScriptSerializer.RecursionLimit
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "처리할 개체 수준 수에 대 한 제한을 설정 하거나 가져옵니다."
  remarks: "RecursionLimit 속성은 개체 계층의 수준 수를 참조 하는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>다음과 같은 경우에 처리 합니다:-는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>클래스는 JSON 문자열을 역직렬화 합니다.</xref:System.Web.Script.Serialization.JavaScriptSerializer> </xref:System.Web.Script.Serialization.JavaScriptSerializer>      -는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>클래스는 직렬화 하는 동안 개체 graph를 검색 합니다.</xref:System.Web.Script.Serialization.JavaScriptSerializer>       RecursionLimit 값 <xref:System.Web.Script.Serialization.JavaScriptSerializer>클래스</xref:System.Web.Script.Serialization.JavaScriptSerializer> 의 인스턴스를 명시적으로 만들어야 하는 경우에 적용 됩니다. 사용 하 여는 `jsonSerialization` 비동기 통신 계층에서 사용 되는 내부 serializer 인스턴스의 처리할 개체 수준 수를 설정 하려면 구성 파일의 요소입니다. Serialization에 대 한 구성 요소에 대 한 자세한 내용은 참조 [하는 방법: Microsoft Ajax에서 ASP.NET 서비스 구성](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public int RecursionLimit { get; set; }
    return:
      type: System.Int32
      description: "개체 수준 수입니다. 기본값은 100입니다."
  overload: System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "속성은&1; 보다 작은 값으로 설정 됩니다."
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters(System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})
  id: RegisterConverters(System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: RegisterConverters(IEnumerable<JavaScriptConverter>)
  nameWithType: JavaScriptSerializer.RegisterConverters(IEnumerable<JavaScriptConverter>)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters(IEnumerable<JavaScriptConverter>)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "와 사용자 지정 변환기는 <xref href=&quot;System.Web.Script.Serialization.JavaScriptSerializer&quot;> </xref> 인스턴스."
  remarks: "하나 이상의 사용자 지정 변환기를 등록할 수 있습니다는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>RegisterConverters 메서드를 사용 하 여 인스턴스.</xref:System.Web.Script.Serialization.JavaScriptSerializer> 사용자 지정 변환기를 등록 하는 경우 <xref:System.Web.Script.Serialization.JavaScriptSerializer>변환기를 사용 하 여 관리 되는 형식을 serialize 하 고 관리 되는 형식에 대 한 JSON 문자열을 deserialize 하는 데.</xref:System.Web.Script.Serialization.JavaScriptSerializer>       여러 변환기 동일한 <xref:System.Web.Script.Serialization.JavaScriptSerializer>인스턴스 및 이러한 변환기는 동일한 형식에 대 한 지원을 나타낼 수 있습니다.</xref:System.Web.Script.Serialization.JavaScriptSerializer> 결과적으로, 특정 형식에 대 한 등록 되어 있는 마지막 변환기는 사용해 <xref:System.Web.Script.Serialization.JavaScriptSerializer>형식을 직렬화 할.</xref:System.Web.Script.Serialization.JavaScriptSerializer>       사용자 지정 변환기에 대 한 자세한 내용은 <xref:System.Web.Script.Serialization.JavaScriptConverter>클래스</xref:System.Web.Script.Serialization.JavaScriptConverter> 를 참조 하십시오."
  example:
  - "The following example shows how to register a custom converter with a <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance. This code example is part of a larger example provided for the <xref:System.Web.Script.Serialization.JavaScriptSerializer>class.  \n  \n [!code-vb[System.Web.Script.Serialization#1](~/add/codesnippet/visualbasic/0b038c1f-1fc5-4957-9daf-_1.aspx)]\n [!code-cs[System.Web.Script.Serialization#1](~/add/codesnippet/csharp/0b038c1f-1fc5-4957-9daf-_1.aspx)]"
  syntax:
    content: public void RegisterConverters (System.Collections.Generic.IEnumerable<System.Web.Script.Serialization.JavaScriptConverter> converters);
    parameters:
    - id: converters
      type: System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter}
      description: "등록할 사용자 지정 변환기를 포함 하는 배열입니다."
  overload: System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>converters</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object)
  id: Serialize(System.Object)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: Serialize(Object)
  nameWithType: JavaScriptSerializer.Serialize(Object)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(Object)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "개체를 JSON 문자열로 변환합니다."
  remarks: "경우는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>인스턴스 형식을 사용자 지정 변환기가 등록 되어 있는, serializer 호출 하 여 직렬화 되는 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A>메서드를 JSON 문자열로 변환 되는 이름/값 쌍의 사전.</xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> </xref:System.Web.Script.Serialization.JavaScriptSerializer>       Serialize 메서드에 개체 그래프는 너무 복잡 하거나의 인스턴스를 등록 하는 경우 예외가 throw 될 수 <xref:System.Web.Script.Serialization.JavaScriptConverter>변환기 재귀가 발생 했습니다.</xref:System.Web.Script.Serialization.JavaScriptConverter>"
  example:
  - "The following example provides a simple illustration of how to serialize and deserialize data objects. It requires a class names Person which is shown below.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string Serialize (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "직렬화 할 개체입니다."
    return:
      type: System.String
      description: "Serialize 된 JSON 문자열입니다."
  overload: System.Web.Script.Serialization.JavaScriptSerializer.Serialize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*>.</xref:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*> 의 값을 초과 하는 결과 JSON 문자열       -또는- <code> obj </code> 순환 참조를 포함 합니다. 순환 참조는 자식 개체의 부모 개체에 대 한 부모 개체에 있는 자식 개체에 대 한 참조가 있을 때 발생 합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "에 정의 된 재귀 제한을 <xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*>를 초과 했습니다.</xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*>"
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object,System.Text.StringBuilder)
  id: Serialize(System.Object,System.Text.StringBuilder)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: Serialize(Object,StringBuilder)
  nameWithType: JavaScriptSerializer.Serialize(Object,StringBuilder)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(Object,StringBuilder)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "개체를 직렬화 하 고 결과 JSON 문자열을 지정 된 기록 <xref:System.Text.StringBuilder>개체입니다.</xref:System.Text.StringBuilder>"
  remarks: "경우는 <xref:System.Web.Script.Serialization.JavaScriptSerializer>인스턴스 형식을 사용자 지정 변환기가 등록 되어 있는, serializer 호출 하 여 직렬화 되는 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A>메서드를 JSON 문자열로 변환 되는 이름/값 쌍의 사전.</xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> </xref:System.Web.Script.Serialization.JavaScriptSerializer>       <xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A>메서드가 개체 그래프는 너무 복잡 하거나의 인스턴스를 등록 하는 경우 예외가 throw 될 수 <xref:System.Web.Script.Serialization.JavaScriptConverter>변환기 재귀가 발생 했습니다.</xref:System.Web.Script.Serialization.JavaScriptConverter> </xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A>"
  syntax:
    content: public void Serialize (object obj, System.Text.StringBuilder output);
    parameters:
    - id: obj
      type: System.Object
      description: "직렬화 할 개체입니다."
    - id: output
      type: System.Text.StringBuilder
      description: "<xref:System.Text.StringBuilder>JSON 문자열을 기록 하는 데 사용 되는 개체입니다.</xref:System.Text.StringBuilder>"
  overload: System.Web.Script.Serialization.JavaScriptSerializer.Serialize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*>.</xref:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*> 의 값을 초과 하는 결과 JSON 문자열       -또는- <code> obj </code> 순환 참조를 포함 합니다. 순환 참조는 자식 개체의 부모 개체에 대 한 부모 개체에 있는 자식 개체에 대 한 참조가 있을 때 발생 합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "에 정의 된 재귀 제한을 <xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*>를 초과 했습니다.</xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>output</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Web.Script.Serialization.JavaScriptSerializer.#ctor
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: JavaScriptSerializer()
  nameWithType: JavaScriptSerializer.JavaScriptSerializer()
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.JavaScriptSerializer()
- uid: System.Web.Script.Serialization.JavaScriptSerializer.#ctor(System.Web.Script.Serialization.JavaScriptTypeResolver)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: JavaScriptSerializer(JavaScriptTypeResolver)
  nameWithType: JavaScriptSerializer.JavaScriptSerializer(JavaScriptTypeResolver)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.JavaScriptSerializer(JavaScriptTypeResolver)
- uid: System.Web.Script.Serialization.JavaScriptTypeResolver
  parent: System.Web.Script.Serialization
  isExternal: false
  name: JavaScriptTypeResolver
  nameWithType: JavaScriptTypeResolver
  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver
- uid: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(System.Object,System.Type)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: ConvertToType(Object,Type)
  nameWithType: JavaScriptSerializer.ConvertToType(Object,Type)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(Object,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: ConvertToType(Object)
  nameWithType: JavaScriptSerializer.ConvertToType(Object)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(Object)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(System.String,System.Type)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: Deserialize(String,Type)
  nameWithType: JavaScriptSerializer.Deserialize(String,Type)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(String,Type)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize``1(System.String)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: Deserialize(String)
  nameWithType: JavaScriptSerializer.Deserialize(String)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(String)
- uid: System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject(System.String)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: DeserializeObject(String)
  nameWithType: JavaScriptSerializer.DeserializeObject(String)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject(String)
- uid: System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: MaxJsonLength
  nameWithType: JavaScriptSerializer.MaxJsonLength
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: RecursionLimit
  nameWithType: JavaScriptSerializer.RecursionLimit
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit
- uid: System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters(System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: RegisterConverters(IEnumerable<JavaScriptConverter>)
  nameWithType: JavaScriptSerializer.RegisterConverters(IEnumerable<JavaScriptConverter>)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters(IEnumerable<JavaScriptConverter>)
- uid: System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<JavaScriptConverter>
  nameWithType: IEnumerable<JavaScriptConverter>
  fullName: System.Collections.Generic.IEnumerable<System.Web.Script.Serialization.JavaScriptConverter>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Web.Script.Serialization.JavaScriptConverter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.Script.Serialization.JavaScriptConverter
    name: JavaScriptConverter
    nameWithType: JavaScriptConverter
    fullName: JavaScriptConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: Serialize(Object)
  nameWithType: JavaScriptSerializer.Serialize(Object)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(Object)
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object,System.Text.StringBuilder)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: Serialize(Object,StringBuilder)
  nameWithType: JavaScriptSerializer.Serialize(Object,StringBuilder)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(Object,StringBuilder)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Web.Script.Serialization.JavaScriptSerializer.#ctor*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: JavaScriptSerializer
  nameWithType: JavaScriptSerializer.JavaScriptSerializer
- uid: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: ConvertToType
  nameWithType: JavaScriptSerializer.ConvertToType
- uid: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType<T>*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: ConvertToType<T>
  nameWithType: JavaScriptSerializer.ConvertToType<T>
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: Deserialize
  nameWithType: JavaScriptSerializer.Deserialize
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize<T>*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: Deserialize<T>
  nameWithType: JavaScriptSerializer.Deserialize<T>
- uid: System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: DeserializeObject
  nameWithType: JavaScriptSerializer.DeserializeObject
- uid: System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: MaxJsonLength
  nameWithType: JavaScriptSerializer.MaxJsonLength
- uid: System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: RecursionLimit
  nameWithType: JavaScriptSerializer.RecursionLimit
- uid: System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: RegisterConverters
  nameWithType: JavaScriptSerializer.RegisterConverters
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Serialize*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: Serialize
  nameWithType: JavaScriptSerializer.Serialize
