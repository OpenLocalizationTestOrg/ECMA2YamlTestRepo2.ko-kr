### YamlMime:ManagedReference
items:
- uid: System.LocalDataStoreSlot
  id: LocalDataStoreSlot
  children:
  - System.LocalDataStoreSlot.Finalize
  langs:
  - csharp
  name: LocalDataStoreSlot
  nameWithType: LocalDataStoreSlot
  fullName: System.LocalDataStoreSlot
  type: Class
  summary: "로컬 데이터를 저장할 메모리 슬롯을 캡슐화 합니다. 이 클래스는 상속 될 수 없습니다."
  remarks: ".NET Framework에서는 스레드 로컬 저장소 (TLS)를 사용 하기 위한 두 가지 메커니즘을 제공: 스레드 상대 정적 필드 및 데이터 슬롯입니다.      -스레드 상대 정적 필드는 `static` 필드 (`Shared` Visual Basic의 필드)로 표시 되는 <xref:System.ThreadStaticAttribute>특성.</xref:System.ThreadStaticAttribute> 데이터 슬롯 보다 나은 성능을 제공 하며 컴파일 타임 형식 검사를 사용 하도록 설정 합니다.      -데이터 슬롯은 느리고 스레드 상대 정적 필드 보다 사용 하기가 더 어렵습니다. 데이터 형식 <xref:System.Object>이므로 합니다. 사용 하기 전에 올바른 형식으로 캐스팅 해야</xref:System.Object> 로 저장 되므로 또한 그러나 정적 필드에 할당할 컴파일 타임에 정보가 부족 하 여 있는 경우 데이터 슬롯을 사용할 수 있습니다.       TLS를 사용 하는 방법에 대 한 자세한 내용은 참조 [스레드 로컬 저장소: 스레드 상대 정적 필드 및 데이터 슬롯](~/add/includes/ajax-current-ext-md.md)합니다.       마찬가지로.NET Framework 로컬 컨텍스트 저장소를 사용 하기 위한 두 가지 메커니즘을 제공: 상황에 맞는 상대 정적 필드 및 데이터 슬롯입니다. 상황에 맞는 상대 정적 필드는 표시 된 정적 필드는 <xref:System.ContextStaticAttribute>특성.</xref:System.ContextStaticAttribute> 이 두 가지 메커니즘을 사용 하 여 간의 장단점 스레드 상대 정적 필드 및 데이터 슬롯을 사용 하 여의 관계와 비슷합니다.       LocalDataStoreSlot 구조 스레드 로컬 저장소 메모리 메커니즘으로 사용 되 고 컨텍스트는 스레드 및 상황에 맞는 데이터를 각각 저장 하는 데 사용할 수 있습니다. 공용 언어 런타임에서 생성 될 때 각 프로세스에 다중 슬롯 데이터 저장소 배열을 할당 합니다. 스레드 또는 컨텍스트로 개체 만료 된 후 다시 사용 하는 다양 한 함수를 데이터 저장소에 데이터 슬롯을 할당, 저장 하 고,이 슬롯에서 데이터 값을 검색 하 고 데이터 슬롯을 확보 하는 스레드 또는 컨텍스트로 호출 합니다.       데이터 슬롯은 스레드 또는 컨텍스트로; 당 고유 해당 값은 스레드 또는 컨텍스트로 개체 간에 공유 되지 않습니다. 이름이 나 인덱스 번호로 데이터 슬롯을 할당할 수 있습니다.       로컬 데이터를 저장 하는 방법에 대 한 자세한 내용은 <xref:System.Threading.Thread>또는 <xref:System.Runtime.Remoting.Contexts.Context>.</xref:System.Runtime.Remoting.Contexts.Context> </xref:System.Threading.Thread> 를 참조 하십시오. 과 같은 LocalDataStoreSlot 클래스 메서드와 함께 사용 됩니다 <xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=fullName>, <xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=fullName>, <xref:System.Threading.Thread.GetData%2A?displayProperty=fullName>, 및 <xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=fullName>; 것 되지 않은 하는 자체의 메서드를 사용 해야 합니다.</xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=fullName> </xref:System.Threading.Thread.GetData%2A?displayProperty=fullName> </xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=fullName> </xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=fullName>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class LocalDataStoreSlot
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.LocalDataStoreSlot.Finalize
  id: Finalize
  parent: System.LocalDataStoreSlot
  langs:
  - csharp
  name: Finalize()
  nameWithType: LocalDataStoreSlot.Finalize()
  fullName: System.LocalDataStoreSlot.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "리소스가 해제 되 고 가비지 수집기가 회수 하는 경우 다른 정리 작업이 수행 되도록는 <xref href=&quot;System.LocalDataStoreSlot&quot;> </xref> 개체입니다."
  remarks: "현재 개체가 종료 될 때 가비지 수집기에서 Finalize를 호출 합니다."
  syntax:
    content: ~LocalDataStoreSlot ();
    parameters: []
  overload: System.LocalDataStoreSlot.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.LocalDataStoreSlot.Finalize
  parent: System.LocalDataStoreSlot
  isExternal: false
  name: Finalize()
  nameWithType: LocalDataStoreSlot.Finalize()
  fullName: System.LocalDataStoreSlot.Finalize()
- uid: System.LocalDataStoreSlot.Finalize*
  parent: System.LocalDataStoreSlot
  isExternal: false
  name: Finalize
  nameWithType: LocalDataStoreSlot.Finalize
