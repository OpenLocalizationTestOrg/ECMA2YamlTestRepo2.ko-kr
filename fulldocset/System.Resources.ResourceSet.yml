### YamlMime:ManagedReference
items:
- uid: System.Resources.ResourceSet
  id: ResourceSet
  children:
  - System.Resources.ResourceSet.#ctor
  - System.Resources.ResourceSet.#ctor(System.IO.Stream)
  - System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)
  - System.Resources.ResourceSet.#ctor(System.String)
  - System.Resources.ResourceSet.Close
  - System.Resources.ResourceSet.Dispose
  - System.Resources.ResourceSet.Dispose(System.Boolean)
  - System.Resources.ResourceSet.GetDefaultReader
  - System.Resources.ResourceSet.GetDefaultWriter
  - System.Resources.ResourceSet.GetEnumerator
  - System.Resources.ResourceSet.GetObject(System.String)
  - System.Resources.ResourceSet.GetObject(System.String,System.Boolean)
  - System.Resources.ResourceSet.GetString(System.String)
  - System.Resources.ResourceSet.GetString(System.String,System.Boolean)
  - System.Resources.ResourceSet.Reader
  - System.Resources.ResourceSet.ReadResources
  - System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator
  - System.Resources.ResourceSet.Table
  langs:
  - csharp
  name: ResourceSet
  nameWithType: ResourceSet
  fullName: System.Resources.ResourceSet
  type: Class
  summary: "대체 규칙과 함께 다른 모든 문화권을 무시 하 고 하나의 특정 문화권에 대 한 지역화 된 모든 리소스를 저장 합니다.       **보안 정보**: 신뢰할 수 없는 데이터를 사용 하 여이 클래스의 메서드를 호출 하는 것은 보안상 위험 합니다. 신뢰할 수 있는 데이터에만 클래스에서 메서드를 호출 합니다. 자세한 내용은 참조 [신뢰할 수 없는 데이터 보안 위험](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)합니다."
  remarks: "<xref:System.Resources.IResourceReader>모든 이름 및 값을 로드 하 고에 <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> 에 저장 하 여</xref:System.Resources.IResourceReader> ResourceSet 클래스 열거 사용자 지정 <xref:System.Resources.IResourceReader>사용할 수 있습니다.</xref:System.Resources.IResourceReader>       호출 하 여 특정 문화권의 리소스를 나타내는 ResourceSet 개체를 인스턴스화할 수 있습니다는 <xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=fullName>메서드.</xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=fullName>      > [!IMPORTANT] >이 형식이 구현 하는 <xref:System.IDisposable>인터페이스.</xref:System.IDisposable> 형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다. 직접 형식의 삭제 하려면 해당 <xref:System.IDisposable.Dispose%2A>에서 메서드는 `try` / `catch` 블록.</xref:System.IDisposable.Dispose%2A> 작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다. 자세한 내용은의 &quot;를 사용 하는 개체는 구현 IDisposable&quot; 섹션을 참조 하십시오.는 <xref:System.IDisposable>인터페이스 항목.</xref:System.IDisposable>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ResourceSet : IDisposable, System.Collections.IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.#ctor
  id: '#ctor'
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: ResourceSet()
  nameWithType: ResourceSet.ResourceSet()
  fullName: System.Resources.ResourceSet.ResourceSet()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Resources.ResourceSet&quot;> </xref> 클래스 기본 속성을 사용 합니다."
  syntax:
    content: protected ResourceSet ();
    parameters: []
  overload: System.Resources.ResourceSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: ResourceSet(Stream)
  nameWithType: ResourceSet.ResourceSet(Stream)
  fullName: System.Resources.ResourceSet.ResourceSet(Stream)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "새 인스턴스를 만듭니다는 <xref href=&quot;System.Resources.ResourceSet&quot;> </xref> 시스템 기본값을 사용 하 여 클래스 <xref href=&quot;System.Resources.ResourceReader&quot;> </xref> 지정 된 스트림에서 리소스를 읽는 합니다."
  syntax:
    content: public ResourceSet (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>리소스를 읽을 수 있습니다.</xref:System.IO.Stream> 스트림은 기존 리소스 파일을 참조 해야 합니다."
  overload: System.Resources.ResourceSet.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> stream </code> 를 읽을 수 없습니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stream</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)
  id: '#ctor(System.Resources.IResourceReader)'
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: ResourceSet(IResourceReader)
  nameWithType: ResourceSet.ResourceSet(IResourceReader)
  fullName: System.Resources.ResourceSet.ResourceSet(IResourceReader)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "새 인스턴스를 만듭니다는 <xref href=&quot;System.Resources.ResourceSet&quot;> </xref> 클래스 지정된 된 리소스 판독기를 사용 합니다."
  remarks: "이 생성자를 사용 하는 사용자가 제공한 <xref:System.Resources.IResourceReader>.</xref:System.Resources.IResourceReader> 를 사용 하 여 사용자 지정 리소스 형식 지원"
  syntax:
    content: public ResourceSet (System.Resources.IResourceReader reader);
    parameters:
    - id: reader
      type: System.Resources.IResourceReader
      description: "사용 되는 판독기입니다."
  overload: System.Resources.ResourceSet.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>reader</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Resources.ResourceSet.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: ResourceSet(String)
  nameWithType: ResourceSet.ResourceSet(String)
  fullName: System.Resources.ResourceSet.ResourceSet(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "새 인스턴스를 만듭니다는 <xref href=&quot;System.Resources.ResourceSet&quot;> </xref> 시스템 기본값을 사용 하 여 클래스 <xref href=&quot;System.Resources.ResourceReader&quot;> </xref> 를 열고 지정된 된 파일에서 리소스를 읽습니다."
  remarks: ''
  example:
  - "The following code example defines a new instance of the <xref:System.Resources.ResourceSet> class for a specific file, iterates through the resources used by that file, and displays their contents to the console.  \n  \n [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/cpp/m-system.resources.resou_2_1.cpp)]\n [!code-cs[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/csharp/m-system.resources.resou_2_1.cs)]\n [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.resources.resou_2_1.vb)]"
  syntax:
    content: public ResourceSet (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "읽을 리소스 파일입니다."
  overload: System.Resources.ResourceSet.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>fileName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Resources.ResourceSet.Close
  id: Close
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: Close()
  nameWithType: ResourceSet.Close()
  fullName: System.Resources.ResourceSet.Close()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "사용 하는 모든 리소스를 해제를 닫고 <xref href=&quot;System.Resources.ResourceSet&quot;> </xref>합니다."
  remarks: "모든 호출에 대 한 메서드는 <xref:System.Resources.ResourceSet>후이 메서드에 대 한 호출에 실패할 수 있습니다.</xref:System.Resources.ResourceSet>       Close 여러 번 안전 하 게 호출할 수 있습니다.      > [!NOTE] > 닫기를 호출의 현재 구현에서 <xref:System.Resources.ResourceSet.Dispose%2A>(`true`).</xref:System.Resources.ResourceSet.Dispose%2A>"
  example:
  - "The following code example uses the Close method to release all resources used by the calling <xref:System.Resources.ResourceSet> instance.  \n  \n [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/cpp/m-system.resources.resou_15_1.cpp)]\n [!code-cs[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/csharp/m-system.resources.resou_15_1.cs)]\n [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.resources.resou_15_1.vb)]"
  syntax:
    content: public virtual void Close ();
    parameters: []
  overload: System.Resources.ResourceSet.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.Dispose
  id: Dispose
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: Dispose()
  nameWithType: ResourceSet.Dispose()
  fullName: System.Resources.ResourceSet.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "현재 인스턴스에서 사용 하는 리소스 (메모리 제외)를 삭제 <xref href=&quot;System.Resources.ResourceSet&quot;> </xref>합니다."
  remarks: "<xref:System.Resources.ResourceSet.Dispose%2A> <xref:System.Resources.ResourceSet>.</xref:System.Resources.ResourceSet> 를 사용 하 여 작업을 마쳤으면</xref:System.Resources.ResourceSet.Dispose%2A> 호출 <xref:System.Resources.ResourceSet.Dispose%2A>메서드는 <xref:System.Resources.ResourceSet>불안정 한 상태가.</xref:System.Resources.ResourceSet> </xref:System.Resources.ResourceSet.Dispose%2A> 호출한 후 <xref:System.Resources.ResourceSet.Dispose%2A>에 대 한 모든 참조를 해제 해야는 <xref:System.Resources.ResourceSet>차지 했던 메모리를 가비지 수집에 의해 회수 될 수 있도록 합니다.</xref:System.Resources.ResourceSet> </xref:System.Resources.ResourceSet.Dispose%2A>      > [!NOTE] > 현재 메서드는 <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>안내 하십시오.</xref:System.IDisposable.Dispose%2A?displayProperty=fullName> 구현 이 구현에서는 호출 <xref:System.Resources.ResourceSet.Dispose%2A>(`true`).</xref:System.Resources.ResourceSet.Dispose%2A>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Resources.ResourceSet.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ResourceSet.Dispose(Boolean)
  fullName: System.Resources.ResourceSet.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "를 요청 하는 경우 내부 관리 되는 개체를 닫고 현재 인스턴스와 연관 된 (메모리 제외) 리소스를 해제 합니다."
  remarks: "경우는 `dispose` 매개 변수는 `true`, 현재 메서드 뿐 아니라 관련 된 모든 개체와 연결 된 모든 리소스를 해제 합니다. 경우 `dispose` 은 `false`, 현재 메서드가, 할당 된 리소스를 해제 하 고 연결 된 모든 개체를 무시 합니다."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "현재 인스턴스에 포함 된 개체를 명시적으로 닫아야 합니다 있는지 여부를 나타냅니다."
  overload: System.Resources.ResourceSet.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.GetDefaultReader
  id: GetDefaultReader
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: GetDefaultReader()
  nameWithType: ResourceSet.GetDefaultReader()
  fullName: System.Resources.ResourceSet.GetDefaultReader()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "이 종류의 기본 설정된 리소스 판독기 클래스를 반환 <xref href=&quot;System.Resources.ResourceSet&quot;> </xref>합니다."
  syntax:
    content: public virtual Type GetDefaultReader ();
    parameters: []
    return:
      type: System.Type
      description: "반환 된 <xref:System.Type>이러한 종류에 대 한 기본 설정된 리소스 판독기의 <xref href=&quot;System.Resources.ResourceSet&quot;> </xref>.</xref:System.Type>"
  overload: System.Resources.ResourceSet.GetDefaultReader*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.GetDefaultWriter
  id: GetDefaultWriter
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: GetDefaultWriter()
  nameWithType: ResourceSet.GetDefaultWriter()
  fullName: System.Resources.ResourceSet.GetDefaultWriter()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "이 종류의 기본 설정된 리소스 작성기 클래스를 반환 <xref href=&quot;System.Resources.ResourceSet&quot;> </xref>합니다."
  syntax:
    content: public virtual Type GetDefaultWriter ();
    parameters: []
    return:
      type: System.Type
      description: "반환 된 <xref:System.Type>이러한 종류에 대 한 기본 설정된 리소스 작성기의 <xref href=&quot;System.Resources.ResourceSet&quot;> </xref>.</xref:System.Type>"
  overload: System.Resources.ResourceSet.GetDefaultWriter*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.GetEnumerator
  id: GetEnumerator
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ResourceSet.GetEnumerator()
  fullName: System.Resources.ResourceSet.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "반환 된 <xref:System.Collections.IDictionaryEnumerator>반복할 수 있는 <xref href=&quot;System.Resources.ResourceSet&quot;> </xref>.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "열거자는 컬렉션의 데이터 읽기를 허용 합니다. 내부 컬렉션을 수정 하 여 열거자를 사용할 수 없습니다.       처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다. <xref:System.Collections.IEnumerator.Reset%2A>또한이 위치로 복원 열거자를 가져옵니다.</xref:System.Collections.IEnumerator.Reset%2A> 이 위치에서, 호출 <xref:System.Collections.IEnumerator.Current%2A>예외를 throw 합니다.</xref:System.Collections.IEnumerator.Current%2A> 따라서 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> 의 값을 읽기 전에 컬렉션의 첫 번째 요소로 열거자를</xref:System.Collections.IEnumerator.MoveNext%2A> 호출 해야 합니다.       <xref:System.Collections.IEnumerator.Current%2A>될 때까지 동일한 개체를 반환 <xref:System.Collections.IEnumerator.MoveNext%2A>또는 <xref:System.Collections.IEnumerator.Reset%2A>호출 됩니다.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>설정 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       컬렉션의 끝이 전달 된 후 열거자는 컬렉션의 마지막 요소 뒤에 배치 하 고 호출 되 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> 마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A>반환 `false`호출, <xref:System.Collections.IEnumerator.Current%2A>예외를 throw 합니다.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>다시, 컬렉션의 첫 번째 요소를 호출할 수 있습니다 <xref:System.Collections.IEnumerator.Reset%2A>그 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> 설정 하려면       열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다. 열거자는 무효화 및 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A> <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> throw</xref:System.Collections.IEnumerator.Reset%2A> 또는</xref:System.Collections.IEnumerator.MoveNext%2A> 을 다음에 호출할 추가, 수정 또는 삭제 요소와 같은 컬렉션에 변경 내용이 있는 경우 사이 컬렉션이 수정 되는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A>및 <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>열거자가 이미 무효로 되 었 하는 경우에로 설정 하는 요소를 반환 합니다.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       사용할 수는 <xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=fullName>현재 요소에 저장 된 값에 액세스 하는 속성입니다.</xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=fullName> 사용 하 여는 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName>속성을 현재 요소의 키에 액세스 합니다.</xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> 사용 하 여는 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName>현재 요소의 값에 액세스 하는 속성입니다.</xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName>       열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 을 열거 하는 동안 스레드로부터 안전을 보장 하려면 전체 열거 동안 컬렉션을 잠글 또는 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다."
  example:
  - "The following example demonstrates how to create a <xref:System.Resources.ResourceSet>`rs` for the file `items.resources`. Next, the GetEnumerator method is used to create an <xref:System.Collections.IDictionaryEnumerator> for `rs`. The <xref:System.Collections.IDictionaryEnumerator> iterates through `rs` and displays the contents to the console.  \n  \n [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/cpp/m-system.resources.resou_5_1.cpp)]\n [!code-cs[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/csharp/m-system.resources.resou_5_1.cs)]\n [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.resources.resou_5_1.vb)]"
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "An <xref:System.Collections.IDictionaryEnumerator> for this <xref href=&quot;System.Resources.ResourceSet&quot;></xref>.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Resources.ResourceSet.GetEnumerator*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "리소스 집합을 닫히거나 삭제 되었습니다."
  platform:
  - net462
- uid: System.Resources.ResourceSet.GetObject(System.String)
  id: GetObject(System.String)
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: GetObject(String)
  nameWithType: ResourceSet.GetObject(String)
  fullName: System.Resources.ResourceSet.GetObject(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "지정 된 이름의 리소스 개체를 검색 합니다."
  remarks: "리소스 개체의 이름은 대/소문자 구분입니다. 대/소문자 구분 검색을 위한 <xref:System.Resources.ResourceSet.GetObject%2A>.</xref:System.Resources.ResourceSet.GetObject%2A> 사용"
  syntax:
    content: public virtual object GetObject (string name);
    parameters:
    - id: name
      type: System.String
      description: "검색할 리소스의 대/소문자 구분 이름입니다."
    return:
      type: System.Object
      description: "요청 된 리소스입니다."
  overload: System.Resources.ResourceSet.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "개체를 닫히거나 삭제 되었습니다."
  platform:
  - net462
- uid: System.Resources.ResourceSet.GetObject(System.String,System.Boolean)
  id: GetObject(System.String,System.Boolean)
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: GetObject(String,Boolean)
  nameWithType: ResourceSet.GetObject(String,Boolean)
  fullName: System.Resources.ResourceSet.GetObject(String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "요청 된 경우 지정 된 이름의 리소스 개체에 대 한 대/소문자 구분 방식으로 검색 합니다."
  remarks: "하는 경우의 값은 `ignoreCase` 매개 변수는 `true`, 이름 &quot;Resource&quot;를 사용 하 여 리소스 이름 &quot;resource&quot;를 사용 하 여 리소스와 같습니다. 단,이 메서드가 항상 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>.</xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> 를 사용 하 여 대/소문자 구분 문자열 비교를 수행 장점은이 메서드에 의해 수행 되는 대/소문자 구분 문자열 비교의 결과가 문화권에 관계 없이 모든 컴퓨터에서 동일한 지입니다. 단점은 결과 모든 문화권의 대/소문자 규칙와 일치 하지 않습니다.       예를 들어, 터키어 알파벳에 점을 사용 하 여 i: 문자의 두 가지 버전 및 점이 없는 경우가 있습니다. 터키어 문자 I (유니코드 0049)으로 간주 됩니다에 다른 문자 (유니코드 0131) ı의 대문자 버전. 문자 (유니코드 0069) i 또 다른 문자 İ (유니코드 0130)의 소문자 버전을 간주 됩니다. 이 대/소문자 규칙을 대/소문자 구분 문자열 비교에 따라 &quot;TR-TR&quot; (터키어-터키에서) 문화권에 대 한 장치 (유니코드 0049) 및 i (0069 유니코드) 문자의 실패 합니다. 사용 하는 `GetObject` 메서드 `ignoreCase` 로 설정 `true`,이 비교가 성공 합니다."
  syntax:
    content: public virtual object GetObject (string name, bool ignoreCase);
    parameters:
    - id: name
      type: System.String
      description: "검색할 리소스의 이름입니다."
    - id: ignoreCase
      type: System.Boolean
      description: "지정 된 이름의 대/소문자를 무시할지 여부를 나타냅니다."
    return:
      type: System.Object
      description: "요청 된 리소스입니다."
  overload: System.Resources.ResourceSet.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "개체를 닫히거나 삭제 되었습니다."
  platform:
  - net462
- uid: System.Resources.ResourceSet.GetString(System.String)
  id: GetString(System.String)
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: GetString(String)
  nameWithType: ResourceSet.GetString(String)
  fullName: System.Resources.ResourceSet.GetString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "검색 한 <xref:System.String>지정 된 이름의 리소스.</xref:System.String>"
  syntax:
    content: public virtual string GetString (string name);
    parameters:
    - id: name
      type: System.String
      description: "검색할 리소스의 이름입니다."
    return:
      type: System.String
      description: "값에 <xref:System.String>.</xref:System.String> 이 리소스의 값"
  overload: System.Resources.ResourceSet.GetString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "지정 하는 리소스 <code> name </code> <xref:System.String>.</xref:System.String> 아닙니다"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "개체를 닫히거나 삭제 되었습니다."
  platform:
  - net462
- uid: System.Resources.ResourceSet.GetString(System.String,System.Boolean)
  id: GetString(System.String,System.Boolean)
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: GetString(String,Boolean)
  nameWithType: ResourceSet.GetString(String,Boolean)
  fullName: System.Resources.ResourceSet.GetString(String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "검색 한 <xref:System.String>소문자를 요청 하는 경우 지정한 이름의 리소스.</xref:System.String>"
  remarks: "하는 경우의 값은 `ignoreCase` 매개 변수는 `true`, 이름 &quot;Resource&quot;를 사용 하 여 리소스 이름 &quot;resource&quot;를 사용 하 여 리소스와 같습니다. 단,이 메서드가 항상 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>.</xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> 를 사용 하 여 대/소문자 구분 문자열 비교를 수행 장점은이 메서드에 의해 수행 되는 대/소문자 구분 문자열 비교의 결과가 문화권에 관계 없이 모든 컴퓨터에서 동일한 지입니다. 단점은 결과 모든 문화권의 대/소문자 규칙와 일치 하지 않습니다.       예를 들어, 터키어 알파벳에 점을 사용 하 여 i: 문자의 두 가지 버전 및 점이 없는 경우가 있습니다. 터키어 문자 I (유니코드 0049)으로 간주 됩니다에 다른 문자 (유니코드 0131) ı의 대문자 버전. 문자 (유니코드 0069) i 또 다른 문자 İ (유니코드 0130)의 소문자 버전을 간주 됩니다. 이 대/소문자 규칙을 대/소문자 구분 문자열 비교에 따라 &quot;TR-TR&quot; (터키어-터키에서) 문화권에 대 한 장치 (유니코드 0049) 및 i (0069 유니코드) 문자의 실패 합니다. 사용 하는 `GetString` 메서드 `ignoreCase` 로 설정 `true`,이 비교가 성공 합니다."
  syntax:
    content: public virtual string GetString (string name, bool ignoreCase);
    parameters:
    - id: name
      type: System.String
      description: "검색할 리소스의 이름입니다."
    - id: ignoreCase
      type: System.Boolean
      description: "지정 된 이름의 대/소문자의 대/소문자를 무시할지 여부를 나타냅니다."
    return:
      type: System.String
      description: "값에 <xref:System.String>.</xref:System.String> 이 리소스의 값"
  overload: System.Resources.ResourceSet.GetString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "지정 하는 리소스 <code> name </code> <xref:System.String>.</xref:System.String> 아닙니다"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "개체를 닫히거나 삭제 되었습니다."
  platform:
  - net462
- uid: System.Resources.ResourceSet.Reader
  id: Reader
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: Reader
  nameWithType: ResourceSet.Reader
  fullName: System.Resources.ResourceSet.Reader
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "나타냅니다는 <xref href=&quot;System.Resources.IResourceReader&quot;> </xref> 리소스를 읽는 데 사용 합니다."
  syntax:
    content: protected System.Resources.IResourceReader Reader;
    return:
      type: System.Resources.IResourceReader
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.ReadResources
  id: ReadResources
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: ReadResources()
  nameWithType: ResourceSet.ReadResources()
  fullName: System.Resources.ResourceSet.ReadResources()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "모든 리소스를 읽고에 저장 한 <xref href=&quot;System.Collections.Hashtable&quot;> </xref> 에 표시 된는 <xref href=&quot;System.Resources.ResourceSet.Table&quot;> </xref> 속성입니다."
  syntax:
    content: protected virtual void ReadResources ();
    parameters: []
  overload: System.Resources.ResourceSet.ReadResources*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ResourceSet.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Resources.ResourceSet.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "반환 된 <xref:System.Collections.IEnumerator>와 경합 상태를 방지 하기 위해 개체 <xref uid=&quot;langword_csharp_Dispose&quot; name=&quot;Dispose&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IEnumerator> 이 멤버는 사용자 코드에서 직접 사용할 수 없습니다."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "현재에 대 한 열거자 <xref href=&quot;System.Resources.ResourceSet&quot;> </xref> 개체입니다."
  overload: System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.Table
  id: Table
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: Table
  nameWithType: ResourceSet.Table
  fullName: System.Resources.ResourceSet.Table
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "<xref href=&quot;System.Collections.Hashtable&quot;> </xref> 리소스가 저장 됩니다."
  syntax:
    content: protected System.Collections.Hashtable Table;
    return:
      type: System.Collections.Hashtable
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Resources.ResourceSet.#ctor
  parent: System.Resources.ResourceSet
  isExternal: false
  name: ResourceSet()
  nameWithType: ResourceSet.ResourceSet()
  fullName: System.Resources.ResourceSet.ResourceSet()
- uid: System.Resources.ResourceSet.#ctor(System.IO.Stream)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: ResourceSet(Stream)
  nameWithType: ResourceSet.ResourceSet(Stream)
  fullName: System.Resources.ResourceSet.ResourceSet(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: ResourceSet(IResourceReader)
  nameWithType: ResourceSet.ResourceSet(IResourceReader)
  fullName: System.Resources.ResourceSet.ResourceSet(IResourceReader)
- uid: System.Resources.IResourceReader
  parent: System.Resources
  isExternal: false
  name: IResourceReader
  nameWithType: IResourceReader
  fullName: System.Resources.IResourceReader
- uid: System.Resources.ResourceSet.#ctor(System.String)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: ResourceSet(String)
  nameWithType: ResourceSet.ResourceSet(String)
  fullName: System.Resources.ResourceSet.ResourceSet(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Resources.ResourceSet.Close
  parent: System.Resources.ResourceSet
  isExternal: false
  name: Close()
  nameWithType: ResourceSet.Close()
  fullName: System.Resources.ResourceSet.Close()
- uid: System.Resources.ResourceSet.Dispose
  parent: System.Resources.ResourceSet
  isExternal: false
  name: Dispose()
  nameWithType: ResourceSet.Dispose()
  fullName: System.Resources.ResourceSet.Dispose()
- uid: System.Resources.ResourceSet.Dispose(System.Boolean)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ResourceSet.Dispose(Boolean)
  fullName: System.Resources.ResourceSet.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Resources.ResourceSet.GetDefaultReader
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetDefaultReader()
  nameWithType: ResourceSet.GetDefaultReader()
  fullName: System.Resources.ResourceSet.GetDefaultReader()
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Resources.ResourceSet.GetDefaultWriter
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetDefaultWriter()
  nameWithType: ResourceSet.GetDefaultWriter()
  fullName: System.Resources.ResourceSet.GetDefaultWriter()
- uid: System.Resources.ResourceSet.GetEnumerator
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetEnumerator()
  nameWithType: ResourceSet.GetEnumerator()
  fullName: System.Resources.ResourceSet.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Resources.ResourceSet.GetObject(System.String)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetObject(String)
  nameWithType: ResourceSet.GetObject(String)
  fullName: System.Resources.ResourceSet.GetObject(String)
- uid: System.Resources.ResourceSet.GetObject(System.String,System.Boolean)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetObject(String,Boolean)
  nameWithType: ResourceSet.GetObject(String,Boolean)
  fullName: System.Resources.ResourceSet.GetObject(String,Boolean)
- uid: System.Resources.ResourceSet.GetString(System.String)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetString(String)
  nameWithType: ResourceSet.GetString(String)
  fullName: System.Resources.ResourceSet.GetString(String)
- uid: System.Resources.ResourceSet.GetString(System.String,System.Boolean)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetString(String,Boolean)
  nameWithType: ResourceSet.GetString(String,Boolean)
  fullName: System.Resources.ResourceSet.GetString(String,Boolean)
- uid: System.Resources.ResourceSet.Reader
  parent: System.Resources.ResourceSet
  isExternal: false
  name: Reader
  nameWithType: ResourceSet.Reader
  fullName: System.Resources.ResourceSet.Reader
- uid: System.Resources.ResourceSet.ReadResources
  parent: System.Resources.ResourceSet
  isExternal: false
  name: ReadResources()
  nameWithType: ResourceSet.ReadResources()
  fullName: System.Resources.ResourceSet.ReadResources()
- uid: System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator
  parent: System.Resources.ResourceSet
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ResourceSet.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Resources.ResourceSet.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Resources.ResourceSet.Table
  parent: System.Resources.ResourceSet
  isExternal: false
  name: Table
  nameWithType: ResourceSet.Table
  fullName: System.Resources.ResourceSet.Table
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Resources.ResourceSet.#ctor*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: ResourceSet
  nameWithType: ResourceSet.ResourceSet
- uid: System.Resources.ResourceSet.Close*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: Close
  nameWithType: ResourceSet.Close
- uid: System.Resources.ResourceSet.Dispose*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: Dispose
  nameWithType: ResourceSet.Dispose
- uid: System.Resources.ResourceSet.GetDefaultReader*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetDefaultReader
  nameWithType: ResourceSet.GetDefaultReader
- uid: System.Resources.ResourceSet.GetDefaultWriter*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetDefaultWriter
  nameWithType: ResourceSet.GetDefaultWriter
- uid: System.Resources.ResourceSet.GetEnumerator*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetEnumerator
  nameWithType: ResourceSet.GetEnumerator
- uid: System.Resources.ResourceSet.GetObject*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetObject
  nameWithType: ResourceSet.GetObject
- uid: System.Resources.ResourceSet.GetString*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetString
  nameWithType: ResourceSet.GetString
- uid: System.Resources.ResourceSet.ReadResources*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: ReadResources
  nameWithType: ResourceSet.ReadResources
- uid: System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ResourceSet.System.Collections.IEnumerable.GetEnumerator
