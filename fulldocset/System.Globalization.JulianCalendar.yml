### YamlMime:ManagedReference
items:
- uid: System.Globalization.JulianCalendar
  id: JulianCalendar
  children:
  - System.Globalization.JulianCalendar.#ctor
  - System.Globalization.JulianCalendar.AddMonths(System.DateTime,System.Int32)
  - System.Globalization.JulianCalendar.AddYears(System.DateTime,System.Int32)
  - System.Globalization.JulianCalendar.AlgorithmType
  - System.Globalization.JulianCalendar.Eras
  - System.Globalization.JulianCalendar.GetDayOfMonth(System.DateTime)
  - System.Globalization.JulianCalendar.GetDayOfWeek(System.DateTime)
  - System.Globalization.JulianCalendar.GetDayOfYear(System.DateTime)
  - System.Globalization.JulianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.GetDaysInYear(System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.GetEra(System.DateTime)
  - System.Globalization.JulianCalendar.GetLeapMonth(System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.GetMonth(System.DateTime)
  - System.Globalization.JulianCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.GetYear(System.DateTime)
  - System.Globalization.JulianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.IsLeapYear(System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.JulianEra
  - System.Globalization.JulianCalendar.MaxSupportedDateTime
  - System.Globalization.JulianCalendar.MinSupportedDateTime
  - System.Globalization.JulianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.ToFourDigitYear(System.Int32)
  - System.Globalization.JulianCalendar.TwoDigitYearMax
  langs:
  - csharp
  name: JulianCalendar
  nameWithType: JulianCalendar
  fullName: System.Globalization.JulianCalendar
  type: Class
  summary: "율리우스력을 나타냅니다."
  remarks: "45 기원전 줄리어스 시저 라는 음력 달력에 달력 개정 된을 정렬 합니다. 율리우스력은 일반 달력의 선행 프로그램.      > [!NOTE] >를 사용 하는 방법에 대 한 정보에 대 한는 <xref:System.Globalization.HebrewCalendar>클래스 오류 코드 및 기타 달력.NET Framework의 클래스를 참조 하십시오 [달력 작업](~/add/includes/ajax-current-ext-md.md).</xref:System.Globalization.HebrewCalendar>       JulianCalendar 클래스에는 현재 연대만 인식합니다.       일반 달력 달리 율리우스력&4;로 균등 하 게 나눌 수는 연도로 윤년을 정의 합니다. 따라서 달력 오차가 생깁니다 128 년 마다 1 일입니다. 평년은 365 일이 고 윤년 수는 366 일입니다.       그레고리오 력 율리우스력이 28에서 31 일 12 개월: (31 일) 년 1 월, 년 2 월 (28 이나 29 일), 년 3 월 (31 일), 년 4 월 (30 일), 년 5 월 (31 일), 년 6 월 (30 일), 7 월 (31 일), (31 일) 8 월, 년 9 월 (30 일), 년 10 월 (31 일), 11 월 (30 일)이 고 12 월 (31 일)입니다. 2 월 29 일 윤년 평년 28에 있습니다.       A.d. 2001 년 1 월 1 일 일반 달력에서은 A.D. 2000 년 12 월 19 일에 해당 율리우스력에.       현재는 JulianCalendar <xref:System.Globalization.CultureInfo>클래스</xref:System.Globalization.CultureInfo> 에서 지 원하는 문화권에서 사용 되지 않는 경우 따라서 JulianCalendar 클래스 율리우스력의 날짜 계산에 사용할 수 있습니다.       각 <xref:System.Globalization.CultureInfo>개체가 집합 일정을 지원 합니다.</xref:System.Globalization.CultureInfo> <xref:System.Globalization.CultureInfo.Calendar%2A>문화권에 대 한 기본 일정을 반환 하는 속성 및 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>속성 문화권에서 지원 되는 모든 달력을 포함 하는 배열을 반환 합니다.</xref:System.Globalization.CultureInfo.OptionalCalendars%2A> </xref:System.Globalization.CultureInfo.Calendar%2A> A <xref:System.Globalization.CultureInfo> <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>새 <xref:System.Globalization.Calendar>.</xref:System.Globalization.Calendar> </xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> 의 속성</xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 을 설정 해야 하는 응용 프로그램에서</xref:System.Globalization.CultureInfo> 사용 하는 달력을 변경 하려면"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class JulianCalendar : System.Globalization.Calendar
  inheritance:
  - System.Globalization.Calendar
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.#ctor
  id: '#ctor'
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: JulianCalendar()
  nameWithType: JulianCalendar.JulianCalendar()
  fullName: System.Globalization.JulianCalendar.JulianCalendar()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Globalization.JulianCalendar&quot;> </xref> 클래스입니다."
  syntax:
    content: public JulianCalendar ();
    parameters: []
  overload: System.Globalization.JulianCalendar.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.AddMonths(System.DateTime,System.Int32)
  id: AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: AddMonths(DateTime,Int32)
  nameWithType: JulianCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.JulianCalendar.AddMonths(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "<xref:System.DateTime>지정한 <xref:System.DateTime>.</xref:System.DateTime> 반대쪽 개월 즉 지정 된 수</xref:System.DateTime> 를 반환합니다."
  remarks: "결과의 날짜 부분 <xref:System.DateTime>결과 일 결과 결과 연도의 월에 유효한 날짜가 아닌 경우 영향을 받는.</xref:System.DateTime> 결과 결과 연도의 월에 유효 마지막 날짜로 변경 됩니다. 결과 <xref:System.DateTime>는 결과 월 <xref:System.DateTime>.</xref:System.DateTime> 지정 된 연도 범위를 벗어나는 경우 영향을</xref:System.DateTime> 의 연도 부분 이 구현은 현재 연대만 지원합니다. 따라서 <xref:System.ArgumentException>결과 연도 <xref:System.DateTime>.</xref:System.DateTime> 지정 된 연대를 벗어나는 경우 throw 됩니다</xref:System.ArgumentException> 시간 부분은 결과 <xref:System.DateTime>지정 <xref:System.DateTime>.</xref:System.DateTime> 동일 하 게 유지</xref:System.DateTime>       예를 들어 지정된 된 월 10 월 31 일,이 경우 지정 된 날짜가 해당 월의 고 값은의 `months` 결과 연도 지정 된 연도, 월은 4 월, 결과 일은 4 월의 마지막 날 30 번째 날, 매개 변수는 6입니다.       하는 경우의 값은 `months` 매개 변수는 음수 이면 결과 <xref:System.DateTime>에 지정 된 <xref:System.DateTime>.</xref:System.DateTime> 이전의</xref:System.DateTime>       <xref:System.DateTime.Kind%2A>반환 된 <xref:System.DateTime>값을 항상 같음 <xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> 의 속성</xref:System.DateTime.Kind%2A> 유지할 수 있습니다는 <xref:System.DateTime.Kind%2A>의 속성은 `time` 호출 하 여 매개 변수는 <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>메서드를 다음 예제와 같이.</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> </xref:System.DateTime.Kind%2A>       [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.j_20_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#5  ](~/add/codesnippet/csharp/m-system.globalization.j_20_1.cs)]"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_20_2.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_20_2.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_20_2.cs)]"
  syntax:
    content: public override DateTime AddMonths (DateTime time, int months);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>를 추가할 개월.</xref:System.DateTime>"
    - id: months
      type: System.Int32
      description: "추가할 개월 수입니다."
    return:
      type: System.DateTime
      description: "<xref:System.DateTime> <xref:System.DateTime>.</xref:System.DateTime> 지정한 월의 지정된 된 수를 더한 해당 결과</xref:System.DateTime>"
  overload: System.Globalization.JulianCalendar.AddMonths*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "그 결과 <xref:System.DateTime>지원 되는 범위를 벗어납니다.</xref:System.DateTime>"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>months</code>-120000 미만입니다.       -또는- <code>months</code> 120000 보다 큽니다."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.AddYears(System.DateTime,System.Int32)
  id: AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: AddYears(DateTime,Int32)
  nameWithType: JulianCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.JulianCalendar.AddYears(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "<xref:System.DateTime>즉는 지정 된 연도 수 만큼 경과한 지정된 <xref:System.DateTime>.</xref:System.DateTime> </xref:System.DateTime> 반환"
  remarks: "결과의 날짜 부분 <xref:System.DateTime>결과 일 결과 결과 연도의 월에 유효한 날짜가 아닌 경우 영향을 받는.</xref:System.DateTime> 결과 결과 연도의 월에 유효 마지막 날짜로 변경 됩니다. <xref:System.DateTime>지정 된 <xref:System.DateTime>.</xref:System.DateTime> 동일 하 게 유지</xref:System.DateTime> 결과의 월 부분 이 구현은 현재 연대만 지원합니다. 따라서 <xref:System.ArgumentException>결과 연도 <xref:System.DateTime>.</xref:System.DateTime> 지정 된 연대를 벗어나는 경우 throw 됩니다</xref:System.ArgumentException> 시간 부분은 결과 <xref:System.DateTime>지정 <xref:System.DateTime>.</xref:System.DateTime> 동일 하 게 유지</xref:System.DateTime>       예를 들어 2 월에 28 일 제외 하 고 29 일 할당 했을 때 윤년 있습니다. 지정한 날짜가 윤년의 2 월 29 번째 날과 값 이면 `years` 1 이면 결과 날짜는 다음 연도에 대 한 2 월 28 번째 날입니다.       경우 `years` 가 음수 이면 결과 <xref:System.DateTime>에 지정 된 <xref:System.DateTime>.</xref:System.DateTime> 보다 빠릅니다.</xref:System.DateTime>       <xref:System.DateTime.Kind%2A>반환 된 <xref:System.DateTime>값을 항상 같음 <xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> 의 속성</xref:System.DateTime.Kind%2A> 유지할 수 있습니다는 <xref:System.DateTime.Kind%2A>의 속성은 `time` 호출 하 여 매개 변수는 <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>메서드를 다음 예제와 같이.</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> </xref:System.DateTime.Kind%2A>       [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.j_19_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#8  ](~/add/codesnippet/csharp/m-system.globalization.j_19_1.cs)]"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_19_2.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_19_2.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_19_2.cs)]"
  syntax:
    content: public override DateTime AddYears (DateTime time, int years);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>를 추가할 년 동안.</xref:System.DateTime>"
    - id: years
      type: System.Int32
      description: "더할 연도 수입니다."
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>결과로 표시 되는 지정 된 <xref:System.DateTime>.</xref:System.DateTime> 지정 된 년 수를 추가 합니다.</xref:System.DateTime>"
  overload: System.Globalization.JulianCalendar.AddYears*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "그 결과 <xref:System.DateTime>지원 되는 범위를 벗어납니다.</xref:System.DateTime>"
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.AlgorithmType
  id: AlgorithmType
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: AlgorithmType
  nameWithType: JulianCalendar.AlgorithmType
  fullName: System.Globalization.JulianCalendar.AlgorithmType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "현재 달력 지, 음력 인지 또는 둘의 조합을 나타내는 값을 가져옵니다."
  remarks: ''
  example:
  - "The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  \n  \n [!code-cs[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/csharp/p-system.globalization.j_6_1.cs)]\n [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/visualbasic/p-system.globalization.j_6_1.vb)]"
  syntax:
    content: public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }
    return:
      type: System.Globalization.CalendarAlgorithmType
      description: "항상 반환 <xref href=&quot;System.Globalization.CalendarAlgorithmType&quot;> </xref>합니다."
  overload: System.Globalization.JulianCalendar.AlgorithmType*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.Eras
  id: Eras
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: Eras
  nameWithType: JulianCalendar.Eras
  fullName: System.Globalization.JulianCalendar.Eras
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "에 있는 연대의 목록을 가져옵니다는 <xref href=&quot;System.Globalization.JulianCalendar&quot;> </xref>합니다."
  remarks: "<xref:System.Globalization.JulianCalendar>클래스 현재 연대만 인식 합니다.</xref:System.Globalization.JulianCalendar> 이 속성에는 항상 하나의 요소만 있는 배열을 반환합니다."
  syntax:
    content: public override int[] Eras { get; }
    return:
      type: System.Int32[]
      description: "에 있는 연대를 나타내는 정수 배열에서 <xref href=&quot;System.Globalization.JulianCalendar&quot;> </xref>합니다."
  overload: System.Globalization.JulianCalendar.Eras*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetDayOfMonth(System.DateTime)
  id: GetDayOfMonth(System.DateTime)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetDayOfMonth(DateTime)
  nameWithType: JulianCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.JulianCalendar.GetDayOfMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "지정 된 <xref:System.DateTime>.</xref:System.DateTime> 해당 월의 일을 반환합니다."
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_8_1.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_8_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_8_1.cs)]"
  syntax:
    content: public override int GetDayOfMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>읽을 수 있습니다.</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "1에서 31에서 월의 일을 나타내는 정수 <code> time </code>합니다."
  overload: System.Globalization.JulianCalendar.GetDayOfMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetDayOfWeek(System.DateTime)
  id: GetDayOfWeek(System.DateTime)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetDayOfWeek(DateTime)
  nameWithType: JulianCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.JulianCalendar.GetDayOfWeek(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "지정한 <xref:System.DateTime>.</xref:System.DateTime> 주의 일을 반환합니다."
  remarks: "<xref:System.DayOfWeek>값은 일요일, 월요일, 화요일, 수요일, 목요일, 금요일, 토요일 및.</xref:System.DayOfWeek>"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_6_1.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_6_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_6_1.cs)]"
  syntax:
    content: public override DayOfWeek GetDayOfWeek (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>읽을 수 있습니다.</xref:System.DateTime>"
    return:
      type: System.DayOfWeek
      description: "A <xref:System.DayOfWeek>값의 요일을 나타내는 <code> time </code>.</xref:System.DayOfWeek>"
  overload: System.Globalization.JulianCalendar.GetDayOfWeek*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetDayOfYear(System.DateTime)
  id: GetDayOfYear(System.DateTime)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetDayOfYear(DateTime)
  nameWithType: JulianCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.JulianCalendar.GetDayOfYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "지정한 <xref:System.DateTime>.</xref:System.DateTime> 연간 일을 반환합니다."
  remarks: "날짜의 해당 연도의 첫 번째 날부터의 일 수로 정의 됩니다. 예를 들어 첫 번째 월의 첫 번째 날에 대 한 GetDayOfYear 1을 반환 하 고 GetDayOfYear 지난 달의 마지막 날에 대 한 해당 연도의 총 일 수를 반환 합니다. 총 <xref:System.Globalization.JulianCalendar.GetDaysInYear%2A>.</xref:System.Globalization.JulianCalendar.GetDaysInYear%2A> 반환한 것과 동일한 값은"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_0_1.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_0_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_0_1.cs)]"
  syntax:
    content: public override int GetDayOfYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>읽을 수 있습니다.</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "1에서 366의 연간 일을 나타내는 정수 <code> time </code>합니다."
  overload: System.Globalization.JulianCalendar.GetDayOfYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: JulianCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetDaysInMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "지정 된 연대의 지정 된 연도의 지정한 월의 일 수를 반환합니다."
  remarks: "이 메서드를 2 월 28 이나 29 반환 (`month` = 2) 인지 여부에 따라 `year` 윤년 인지 합니다."
  example:
  - "The following example calls GetDaysInMonth for the second month in each of five years in each era.  \n  \n [!code-cpp[System.Globalization.JulianCalendar.GetDaysInMonth#1](~/add/codesnippet/cpp/44fd8236-349c-466d-b6f3-_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar.GetDaysInMonth#1](~/add/codesnippet/csharp/44fd8236-349c-466d-b6f3-_1.cs)]\n [!code-vb[System.Globalization.JulianCalendar.GetDaysInMonth#1](~/add/codesnippet/visualbasic/44fd8236-349c-466d-b6f3-_1.vb)]"
  syntax:
    content: public override int GetDaysInMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "연도 나타내는 정수입니다."
    - id: month
      type: System.Int32
      description: "월을 나타내는 1부터 12 정수입니다."
    - id: era
      type: System.Int32
      description: "연대를 나타내는 정수입니다."
    return:
      type: System.Int32
      description: "지정 된 연대의 지정 된 연도의 지정한 월의 일 수입니다."
  overload: System.Globalization.JulianCalendar.GetDaysInMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code>달력에서 지 원하는 범위를 벗어납니다.       -또는- <code>year</code> 달력에서 지 원하는 범위를 벗어납니다.       -또는- <code>month</code> 달력에서 지 원하는 범위를 벗어납니다."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetDaysInYear(System.Int32,System.Int32)
  id: GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetDaysInYear(Int32,Int32)
  nameWithType: JulianCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetDaysInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "지정 된 연대의 지정 된 연도의 일 수를 반환합니다."
  remarks: "이 메서드가 반환 365 또는 여부에 따라 366 `year` 윤년 인지 합니다."
  example:
  - "The following example calls GetDaysInYear for five years in each era.  \n  \n [!code-cs[System.Globalization.JulianCalendar.GetDaysInYear#1](~/add/codesnippet/csharp/m-system.globalization.j_11_1.cs)]\n [!code-cpp[System.Globalization.JulianCalendar.GetDaysInYear#1](~/add/codesnippet/cpp/m-system.globalization.j_11_1.cpp)]\n [!code-vb[System.Globalization.JulianCalendar.GetDaysInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_11_1.vb)]"
  syntax:
    content: public override int GetDaysInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "연도 나타내는 정수입니다."
    - id: era
      type: System.Int32
      description: "연대를 나타내는 정수입니다."
    return:
      type: System.Int32
      description: "지정 된 연대의 지정 된 연도의 일 수 있습니다."
  overload: System.Globalization.JulianCalendar.GetDaysInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code>달력에서 지 원하는 범위를 벗어납니다.       -또는- <code>year</code> 달력에서 지 원하는 범위를 벗어납니다."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetEra(System.DateTime)
  id: GetEra(System.DateTime)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetEra(DateTime)
  nameWithType: JulianCalendar.GetEra(DateTime)
  fullName: System.Globalization.JulianCalendar.GetEra(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "지정 된 <xref:System.DateTime>.</xref:System.DateTime> 연대를 반환합니다."
  remarks: "<xref:System.Globalization.JulianCalendar>클래스 현재 연대만 인식 합니다.</xref:System.Globalization.JulianCalendar>"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_1_1.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_1_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_1_1.cs)]"
  syntax:
    content: public override int GetEra (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>읽을 수 있습니다.</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "연대를 나타내는 정수 <code> time </code>합니다."
  overload: System.Globalization.JulianCalendar.GetEra*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetLeapMonth(System.Int32,System.Int32)
  id: GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetLeapMonth(Int32,Int32)
  nameWithType: JulianCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetLeapMonth(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "지정 된 연도 및 연대의 윤 월을 계산합니다."
  remarks: "윤 월의 개념을 지 원하는 일정에서 윤 월에 특정 월 또는 연도의 모든 달이 지난 후 발생할 수 있습니다. 예를 들어는 <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>메서드 13 지정된 된 날짜와 관련 된 달을 나타내는 1 사이의 숫자를 반환 합니다.</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> 해당 연도의 8 및 9 번째 달을 윤 월 되어 있는 경우는 <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>메서드가 윤 월에 대 한 9 및 10 번째 8 월에 대 한 8을 반환 합니다.</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>"
  syntax:
    content: public override int GetLeapMonth (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "연도 나타내는 정수입니다."
    - id: era
      type: System.Int32
      description: "연대를 나타내는 정수입니다."
    return:
      type: System.Int32
      description: "지정 된 연도 및 연대의 윤 월을 나타내는 양의 정수입니다. 달력 윤 월을 지원 하지 않는 경우 또는 경우이 메서드가&0;을 반환 하는 또는 <code> year </code> 및 <code> era </code> 윤년을 지정 하지 마십시오."
  overload: System.Globalization.JulianCalendar.GetLeapMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetMonth(System.DateTime)
  id: GetMonth(System.DateTime)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetMonth(DateTime)
  nameWithType: JulianCalendar.GetMonth(DateTime)
  fullName: System.Globalization.JulianCalendar.GetMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "지정 된 <xref:System.DateTime>.</xref:System.DateTime> 월을 반환합니다."
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_15_1.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_15_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_15_1.cs)]"
  syntax:
    content: public override int GetMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>읽을 수 있습니다.</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "1에서 12 월에는 정수 <code> time </code>합니다."
  overload: System.Globalization.JulianCalendar.GetMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetMonthsInYear(System.Int32,System.Int32)
  id: GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: JulianCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetMonthsInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "지정 된 연대의 지정 된 연도의 월 수를 반환합니다."
  remarks: ''
  example:
  - "The following example calls GetMonthsInYear for five years in each era.  \n  \n [!code-vb[System.Globalization.JulianCalendar.GetMonthsInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_7_1.vb)]\n [!code-cpp[System.Globalization.JulianCalendar.GetMonthsInYear#1](~/add/codesnippet/cpp/m-system.globalization.j_7_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar.GetMonthsInYear#1](~/add/codesnippet/csharp/m-system.globalization.j_7_1.cs)]"
  syntax:
    content: public override int GetMonthsInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "연도 나타내는 정수입니다."
    - id: era
      type: System.Int32
      description: "연대를 나타내는 정수입니다."
    return:
      type: System.Int32
      description: "지정 된 연대의 지정 된 연도의 월 수입니다."
  overload: System.Globalization.JulianCalendar.GetMonthsInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code>달력에서 지 원하는 범위를 벗어납니다.       -또는- <code>year</code> 달력에서 지 원하는 범위를 벗어납니다."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetYear(System.DateTime)
  id: GetYear(System.DateTime)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetYear(DateTime)
  nameWithType: JulianCalendar.GetYear(DateTime)
  fullName: System.Globalization.JulianCalendar.GetYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "지정 된 <xref:System.DateTime>.</xref:System.DateTime> 연도 반환합니다."
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_12_1.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_12_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_12_1.cs)]"
  syntax:
    content: public override int GetYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>읽을 수 있습니다.</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "연도를 나타내는 정수 <code> time </code>합니다."
  overload: System.Globalization.JulianCalendar.GetYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: JulianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "지정된 된 연대의 지정된 된 날짜가 윤 일인지 여부를 결정 합니다."
  remarks: "일반 달력 달리 율리우스력&4;로 균등 하 게 나눌 수는 연도로 윤년을 정의 합니다. 따라서 달력 오차가 생깁니다 128 년 마다 1 일입니다. 예를 들어 1999은 윤년이 아니지만 2000은 합니다. 평년은 365 일이 고 윤년 수는 366 일입니다.       윤 일은 윤년에만 있는 일입니다. 율리우스력을 2 월 29 번째 날이 유일한 윤 일입니다."
  example:
  - "The following example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.  \n  \n [!code-cs[System.Globalization.JulianCalendar.IsLeapDay#1](~/add/codesnippet/csharp/dc155d8f-dfc5-4b2c-b5d1-_1.cs)]\n [!code-cpp[System.Globalization.JulianCalendar.IsLeapDay#1](~/add/codesnippet/cpp/dc155d8f-dfc5-4b2c-b5d1-_1.cpp)]\n [!code-vb[System.Globalization.JulianCalendar.IsLeapDay#1](~/add/codesnippet/visualbasic/dc155d8f-dfc5-4b2c-b5d1-_1.vb)]"
  syntax:
    content: public override bool IsLeapDay (int year, int month, int day, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "연도 나타내는 정수입니다."
    - id: month
      type: System.Int32
      description: "월을 나타내는 1부터 12 정수입니다."
    - id: day
      type: System.Int32
      description: "일을 나타내는 1부터 31 까지의 정수입니다."
    - id: era
      type: System.Int32
      description: "연대를 나타내는 정수입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 날짜가 윤 일 이면이 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Globalization.JulianCalendar.IsLeapDay*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>달력에서 지 원하는 범위를 벗어납니다.       -또는- <code>month</code> 달력에서 지 원하는 범위를 벗어납니다.       -또는- <code>day</code> 달력에서 지 원하는 범위를 벗어납니다.       -또는- <code>era</code> 달력에서 지 원하는 범위를 벗어납니다."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: JulianCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.IsLeapMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "지정 된 연대의 지정 된 연도의 지정한 월이 윤 월 인지 확인 합니다."
  remarks: "일반 달력 달리 율리우스력&4;로 균등 하 게 나눌 수는 연도로 윤년을 정의 합니다. 따라서 달력 오차가 생깁니다 128 년 마다 1 일입니다. 예를 들어 1999은 윤년이 아니지만 2000은 합니다. 평년은 365 일이 고 윤년 수는 366 일입니다.       윤 월은 윤년에만 있는 한 전체 월. 율리우스력 윤 월은 수 없습니다."
  example:
  - "The following example calls IsLeapMonth for all the months in five years in the current era.  \n  \n [!code-vb[System.Globalization.JulianCalendar.IsLeapMonth#1](~/add/codesnippet/visualbasic/ba7f2b6b-4831-427c-a7c2-_1.vb)]\n [!code-cs[System.Globalization.JulianCalendar.IsLeapMonth#1](~/add/codesnippet/csharp/ba7f2b6b-4831-427c-a7c2-_1.cs)]\n [!code-cpp[System.Globalization.JulianCalendar.IsLeapMonth#1](~/add/codesnippet/cpp/ba7f2b6b-4831-427c-a7c2-_1.cpp)]"
  syntax:
    content: public override bool IsLeapMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "연도 나타내는 정수입니다."
    - id: month
      type: System.Int32
      description: "월을 나타내는 1부터 12 정수입니다."
    - id: era
      type: System.Int32
      description: "연대를 나타내는 정수입니다."
    return:
      type: System.Boolean
      description: "이 메서드는 항상 반환 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>파생된 클래스에서 재정의 하지 않으면 합니다."
  overload: System.Globalization.JulianCalendar.IsLeapMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>달력에서 지 원하는 범위를 벗어납니다.       -또는- <code>month</code> 달력에서 지 원하는 범위를 벗어납니다.       -또는- <code>era</code> 달력에서 지 원하는 범위를 벗어납니다."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.IsLeapYear(System.Int32,System.Int32)
  id: IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: IsLeapYear(Int32,Int32)
  nameWithType: JulianCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.IsLeapYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "지정 된 연대의 지정 된 연도가 윤년 인지 여부를 결정 합니다."
  remarks: "일반 달력 달리 율리우스력&4;로 균등 하 게 나눌 수는 연도로 윤년을 정의 합니다. 따라서 달력 오차가 생깁니다 128 년 마다 1 일입니다. 예를 들어 1999은 윤년이 아니지만 2000은 합니다. 평년은 365 일이 고 윤년 수는 366 일입니다."
  example:
  - "The following example calls IsLeapYear for five years in each of the eras.  \n  \n [!code-cpp[System.Globalization.JulianCalendar.IsLeapYear#1](~/add/codesnippet/cpp/m-system.globalization.j_3_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar.IsLeapYear#1](~/add/codesnippet/csharp/m-system.globalization.j_3_1.cs)]\n [!code-vb[System.Globalization.JulianCalendar.IsLeapYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_3_1.vb)]"
  syntax:
    content: public override bool IsLeapYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "연도 나타내는 정수입니다."
    - id: era
      type: System.Int32
      description: "연대를 나타내는 정수입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정된 된 연도가 윤년 이면 인지 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Globalization.JulianCalendar.IsLeapYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>달력에서 지 원하는 범위를 벗어납니다.       -또는- <code>era</code> 달력에서 지 원하는 범위를 벗어납니다."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.JulianEra
  id: JulianEra
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: JulianEra
  nameWithType: JulianCalendar.JulianEra
  fullName: System.Globalization.JulianCalendar.JulianEra
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "현재 연대를 나타냅니다. 이 필드는 상수입니다."
  remarks: "<xref:System.Globalization.JulianCalendar>클래스 현재 연대만 인식 합니다.</xref:System.Globalization.JulianCalendar> 이 필드는 항상 1을 반환합니다."
  syntax:
    content: public static readonly int JulianEra;
    return:
      type: System.Int32
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.MaxSupportedDateTime
  id: MaxSupportedDateTime
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: MaxSupportedDateTime
  nameWithType: JulianCalendar.MaxSupportedDateTime
  fullName: System.Globalization.JulianCalendar.MaxSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "날짜와 시간에서 지 원하는 가져옵니다는 <xref href=&quot;System.Globalization.JulianCalendar&quot;> </xref> 클래스입니다."
  remarks: ''
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cpp[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.j_2_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.j_2_1.cs)]\n [!code-vb[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.j_2_1.vb)]"
  syntax:
    content: public override DateTime MaxSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "날짜와 시간에서 지원 되는 <xref href=&quot;System.Globalization.JulianCalendar&quot;> </xref> 서 기 9999 년 12 월 31 일의 마지막 순간 클래스 에 해당 합니다."
  overload: System.Globalization.JulianCalendar.MaxSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.MinSupportedDateTime
  id: MinSupportedDateTime
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: MinSupportedDateTime
  nameWithType: JulianCalendar.MinSupportedDateTime
  fullName: System.Globalization.JulianCalendar.MinSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "시작 날짜와 시간에서 지 원하는 가져옵니다는 <xref href=&quot;System.Globalization.JulianCalendar&quot;> </xref> 클래스입니다."
  remarks: ''
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cpp[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.j_3_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.j_3_1.cs)]\n [!code-vb[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.j_3_1.vb)]"
  syntax:
    content: public override DateTime MinSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "시작 날짜와 시간에서 지원 되는 <xref href=&quot;System.Globalization.JulianCalendar&quot;> </xref> 서 기 0001 년 1 월 1 일의 첫 번째 순간 클래스 에 해당 합니다."
  overload: System.Globalization.JulianCalendar.MinSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: JulianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "반환 된 <xref:System.DateTime>지정 된 날짜 및 시간 지정된 된 연대에 설정 된.</xref:System.DateTime>"
  syntax:
    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "연도 나타내는 정수입니다."
    - id: month
      type: System.Int32
      description: "월을 나타내는 1부터 12 정수입니다."
    - id: day
      type: System.Int32
      description: "일을 나타내는 1부터 31 까지의 정수입니다."
    - id: hour
      type: System.Int32
      description: "정수 0에서 23 시간을 나타냅니다."
    - id: minute
      type: System.Int32
      description: "정수 0에서 59 분을 나타냅니다."
    - id: second
      type: System.Int32
      description: "정수 0에서 59 초를 나타냅니다."
    - id: millisecond
      type: System.Int32
      description: "밀리초를 나타내는 0부터 999 정수입니다."
    - id: era
      type: System.Int32
      description: "연대를 나타내는 정수입니다."
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>지정한 날짜와 현재 연대의 시간으로 설정 된.</xref:System.DateTime>"
  overload: System.Globalization.JulianCalendar.ToDateTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>달력에서 지 원하는 범위를 벗어납니다.       -또는- <code>month</code> 달력에서 지 원하는 범위를 벗어납니다.       -또는- <code>day</code> 달력에서 지 원하는 범위를 벗어납니다.       -또는- <code>hour</code> 가 0 보다 작거나 23 보다 큽니다.       -또는- <code>minute</code> 가 0 보다 작거나 59 보다 큽니다.       -또는- <code>second</code> 가 0 보다 작거나 59 보다 큽니다.       -또는- <code>millisecond</code> 가 0 보다 작거나 999 보다 큽니다.       -또는- <code>era</code> 달력에서 지 원하는 범위를 벗어납니다."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.ToFourDigitYear(System.Int32)
  id: ToFourDigitYear(System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: ToFourDigitYear(Int32)
  nameWithType: JulianCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.JulianCalendar.ToFourDigitYear(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "사용 하 여 지정된 된 연도 네 자리 연도로 변환는 <xref:System.Globalization.JulianCalendar.TwoDigitYearMax*>속성을 적절 한 세기를 확인 합니다.</xref:System.Globalization.JulianCalendar.TwoDigitYearMax*>"
  remarks: "<xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A>두 자릿수 연도로 표시할 수 있는 100 년 범위의 마지막 연도입니다.</xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> 세기 지정 된를 찾아 확인 `year` 100 년 간의 범위 내에서. 예를 들어 경우 <xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A>설정 2029로 100 년 범위의 1930에서 2029.</xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> 따라서 30의 2 자리 숫자 값 2 자리 값은 29 2029로 해석 됩니다 1930으로 해석 됩니다.       ToFourDigitYear 두 자리 연도 또는 네 자리 연도 지원합니다. 두 자리 연도 값 (100 미만)를 전달 하면이 메서드는 값에 따라 네 자릿수 값을 변환 하는 <xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A>적절 한 네 자리 연도 나타내는 값입니다.</xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> ToFourDigitYear에 지원 되는 달력 범위 내에 있는 네 자리 연도 값을 제공 하는 응용 프로그램, 메서드는 실제 입력된 값을 반환 합니다. 지원 되는 달력 범위 밖에 있는&4; 자리 값을 제공 하는 응용 프로그램 또는 음수 값을 제공 하는 경우 메서드는 예외가 throw 됩니다."
  syntax:
    content: public override int ToFourDigitYear (int year);
    parameters:
    - id: year
      type: System.Int32
      description: "변환할 연도를 나타내는 두 자리 또는 네 자리 정수입니다."
    return:
      type: System.Int32
      description: "네 자릿수로 표시를 포함 하는 정수 <code> year </code>합니다."
  overload: System.Globalization.JulianCalendar.ToFourDigitYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>달력에서 지 원하는 범위를 벗어납니다."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.TwoDigitYearMax
  id: TwoDigitYearMax
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: TwoDigitYearMax
  nameWithType: JulianCalendar.TwoDigitYearMax
  fullName: System.Globalization.JulianCalendar.TwoDigitYearMax
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "두 자릿수 연도로 표시할 수 있는 100 년 범위의 마지막 연도 가져오거나 설정 합니다."
  remarks: "이 속성에는 2 자리 연도를를 4 자리 연도 변환할 수 있습니다. 예를 들어이 속성을 2029로 설정 하는 경우는 100 년 간의 범위는 1930에서 2029 합니다. 따라서 30의 2 자리 숫자 값 2 자리 값은 29 2029로 해석 됩니다 1930으로 해석 됩니다.       <xref:System.Globalization.JulianCalendar>클래스 시스템 설정의 변경 내용을 검색 하지 않습니다.</xref:System.Globalization.JulianCalendar>       응용 프로그램 99로는 2 자리 연도 문자 그대로 해석 되도록 하려면이 값을 설정할 수 있습니다. 예를 들어이 속성이 99, 100 년 간의 범위는 0 (아닙니다: 대부분의 달력에 대 한 유효한 값)에서 99 사이로. 따라서 30의 2 자리 숫자 값은 30로 해석 됩니다."
  syntax:
    content: public override int TwoDigitYearMax { get; set; }
    return:
      type: System.Int32
      description: "두 자릿수 연도로 표시할 수 있는 100 년 범위의 마지막 연도입니다."
  overload: System.Globalization.JulianCalendar.TwoDigitYearMax*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Set 작업에 지정 된 값은 99 보다 작아야 합니다.       -또는-set 작업에 지정 된 값 보다 크면 <xref uid=&quot;langword_csharp_MaxSupportedDateTime.Year&quot; name=&quot;MaxSupportedDateTime.Year&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "집합 작업의 현재 인스턴스는 읽기 전용입니다."
  platform:
  - net462
references:
- uid: System.Globalization.Calendar
  isExternal: false
  name: System.Globalization.Calendar
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Globalization.JulianCalendar.#ctor
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: JulianCalendar()
  nameWithType: JulianCalendar.JulianCalendar()
  fullName: System.Globalization.JulianCalendar.JulianCalendar()
- uid: System.Globalization.JulianCalendar.AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: AddMonths(DateTime,Int32)
  nameWithType: JulianCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.JulianCalendar.AddMonths(DateTime,Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.JulianCalendar.AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: AddYears(DateTime,Int32)
  nameWithType: JulianCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.JulianCalendar.AddYears(DateTime,Int32)
- uid: System.Globalization.JulianCalendar.AlgorithmType
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: JulianCalendar.AlgorithmType
  fullName: System.Globalization.JulianCalendar.AlgorithmType
- uid: System.Globalization.CalendarAlgorithmType
  parent: System.Globalization
  isExternal: false
  name: CalendarAlgorithmType
  nameWithType: CalendarAlgorithmType
  fullName: System.Globalization.CalendarAlgorithmType
- uid: System.Globalization.JulianCalendar.Eras
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: Eras
  nameWithType: JulianCalendar.Eras
  fullName: System.Globalization.JulianCalendar.Eras
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.JulianCalendar.GetDayOfMonth(System.DateTime)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDayOfMonth(DateTime)
  nameWithType: JulianCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.JulianCalendar.GetDayOfMonth(DateTime)
- uid: System.Globalization.JulianCalendar.GetDayOfWeek(System.DateTime)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDayOfWeek(DateTime)
  nameWithType: JulianCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.JulianCalendar.GetDayOfWeek(DateTime)
- uid: System.DayOfWeek
  parent: System
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: System.Globalization.JulianCalendar.GetDayOfYear(System.DateTime)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDayOfYear(DateTime)
  nameWithType: JulianCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.JulianCalendar.GetDayOfYear(DateTime)
- uid: System.Globalization.JulianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: JulianCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetDaysInMonth(Int32,Int32,Int32)
- uid: System.Globalization.JulianCalendar.GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDaysInYear(Int32,Int32)
  nameWithType: JulianCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetDaysInYear(Int32,Int32)
- uid: System.Globalization.JulianCalendar.GetEra(System.DateTime)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetEra(DateTime)
  nameWithType: JulianCalendar.GetEra(DateTime)
  fullName: System.Globalization.JulianCalendar.GetEra(DateTime)
- uid: System.Globalization.JulianCalendar.GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetLeapMonth(Int32,Int32)
  nameWithType: JulianCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetLeapMonth(Int32,Int32)
- uid: System.Globalization.JulianCalendar.GetMonth(System.DateTime)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetMonth(DateTime)
  nameWithType: JulianCalendar.GetMonth(DateTime)
  fullName: System.Globalization.JulianCalendar.GetMonth(DateTime)
- uid: System.Globalization.JulianCalendar.GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: JulianCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetMonthsInYear(Int32,Int32)
- uid: System.Globalization.JulianCalendar.GetYear(System.DateTime)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetYear(DateTime)
  nameWithType: JulianCalendar.GetYear(DateTime)
  fullName: System.Globalization.JulianCalendar.GetYear(DateTime)
- uid: System.Globalization.JulianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: JulianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.JulianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: JulianCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.IsLeapMonth(Int32,Int32,Int32)
- uid: System.Globalization.JulianCalendar.IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: IsLeapYear(Int32,Int32)
  nameWithType: JulianCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.IsLeapYear(Int32,Int32)
- uid: System.Globalization.JulianCalendar.JulianEra
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: JulianEra
  nameWithType: JulianCalendar.JulianEra
  fullName: System.Globalization.JulianCalendar.JulianEra
- uid: System.Globalization.JulianCalendar.MaxSupportedDateTime
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: JulianCalendar.MaxSupportedDateTime
  fullName: System.Globalization.JulianCalendar.MaxSupportedDateTime
- uid: System.Globalization.JulianCalendar.MinSupportedDateTime
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: JulianCalendar.MinSupportedDateTime
  fullName: System.Globalization.JulianCalendar.MinSupportedDateTime
- uid: System.Globalization.JulianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: JulianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Globalization.JulianCalendar.ToFourDigitYear(System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: ToFourDigitYear(Int32)
  nameWithType: JulianCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.JulianCalendar.ToFourDigitYear(Int32)
- uid: System.Globalization.JulianCalendar.TwoDigitYearMax
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: JulianCalendar.TwoDigitYearMax
  fullName: System.Globalization.JulianCalendar.TwoDigitYearMax
- uid: System.Globalization.JulianCalendar.#ctor*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: JulianCalendar
  nameWithType: JulianCalendar.JulianCalendar
- uid: System.Globalization.JulianCalendar.AddMonths*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: AddMonths
  nameWithType: JulianCalendar.AddMonths
- uid: System.Globalization.JulianCalendar.AddYears*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: AddYears
  nameWithType: JulianCalendar.AddYears
- uid: System.Globalization.JulianCalendar.AlgorithmType*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: JulianCalendar.AlgorithmType
- uid: System.Globalization.JulianCalendar.Eras*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: Eras
  nameWithType: JulianCalendar.Eras
- uid: System.Globalization.JulianCalendar.GetDayOfMonth*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDayOfMonth
  nameWithType: JulianCalendar.GetDayOfMonth
- uid: System.Globalization.JulianCalendar.GetDayOfWeek*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDayOfWeek
  nameWithType: JulianCalendar.GetDayOfWeek
- uid: System.Globalization.JulianCalendar.GetDayOfYear*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDayOfYear
  nameWithType: JulianCalendar.GetDayOfYear
- uid: System.Globalization.JulianCalendar.GetDaysInMonth*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDaysInMonth
  nameWithType: JulianCalendar.GetDaysInMonth
- uid: System.Globalization.JulianCalendar.GetDaysInYear*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDaysInYear
  nameWithType: JulianCalendar.GetDaysInYear
- uid: System.Globalization.JulianCalendar.GetEra*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetEra
  nameWithType: JulianCalendar.GetEra
- uid: System.Globalization.JulianCalendar.GetLeapMonth*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetLeapMonth
  nameWithType: JulianCalendar.GetLeapMonth
- uid: System.Globalization.JulianCalendar.GetMonth*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetMonth
  nameWithType: JulianCalendar.GetMonth
- uid: System.Globalization.JulianCalendar.GetMonthsInYear*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetMonthsInYear
  nameWithType: JulianCalendar.GetMonthsInYear
- uid: System.Globalization.JulianCalendar.GetYear*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetYear
  nameWithType: JulianCalendar.GetYear
- uid: System.Globalization.JulianCalendar.IsLeapDay*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: IsLeapDay
  nameWithType: JulianCalendar.IsLeapDay
- uid: System.Globalization.JulianCalendar.IsLeapMonth*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: IsLeapMonth
  nameWithType: JulianCalendar.IsLeapMonth
- uid: System.Globalization.JulianCalendar.IsLeapYear*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: IsLeapYear
  nameWithType: JulianCalendar.IsLeapYear
- uid: System.Globalization.JulianCalendar.MaxSupportedDateTime*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: JulianCalendar.MaxSupportedDateTime
- uid: System.Globalization.JulianCalendar.MinSupportedDateTime*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: JulianCalendar.MinSupportedDateTime
- uid: System.Globalization.JulianCalendar.ToDateTime*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: ToDateTime
  nameWithType: JulianCalendar.ToDateTime
- uid: System.Globalization.JulianCalendar.ToFourDigitYear*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: ToFourDigitYear
  nameWithType: JulianCalendar.ToFourDigitYear
- uid: System.Globalization.JulianCalendar.TwoDigitYearMax*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: JulianCalendar.TwoDigitYearMax
