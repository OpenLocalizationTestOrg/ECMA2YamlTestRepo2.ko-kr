### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Description.IServiceBehavior
  id: IServiceBehavior
  children:
  - System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  - System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  - System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  langs:
  - csharp
  name: IServiceBehavior
  nameWithType: IServiceBehavior
  fullName: System.ServiceModel.Description.IServiceBehavior
  type: Interface
  summary: "수정 하거나 전체 서비스를 사용자 지정 확장을 삽입 하는 메커니즘을 제공 포함 하는 <xref href=&quot;System.ServiceModel.ServiceHostBase&quot;> </xref>합니다."
  remarks: "수정, 검사 또는 응용 프로그램 수준에서 서비스 차원 실행의 일부 측면을 확장 하는 IServiceBehavior를 구현:-사용은 <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>메서드를 런타임 속성 값을 변경 하거나 오류 처리기, 메시지, 매개 변수 인터셉터 등, 보안 확장명 및 기타 사용자 지정 확장명 개체 등의 사용자 지정 확장 개체를 삽입 합니다.</xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>      -사용 된 <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>하기 전에 설명을 검사 하는 메서드 [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] 제대로 실행할 수 있는지 확인 하려면 실행 서비스를 생성 합니다.</xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>      -사용 된 <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>전달할 메서드는 바인딩 요소에는 서비스에 대 한 사용자 지정 정보는 서비스를 올바르게 지원할 수 있도록 합니다.</xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>       IServiceBehavior 개체 정확해 중요; 파일인 않지만 종종 이러한 메서드에 대 한 사용 이러한 경우에 사용 되지 않은 메서드는 값 없이 반환할 수 있습니다.      > [!NOTE] > IServiceBehavior 메서드의 모두 통과 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>및 <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>개체를 매개 변수로.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> <xref:System.ServiceModel.Description.ServiceDescription>매개 변수는 검사 전용 이므로이 개체를 수정할 경우 실행 동작이 정의 되지 않습니다.</xref:System.ServiceModel.Description.ServiceDescription>       의도 한 사용자 지정 작업을 수행 하려면 IServiceBehavior 개체에 추가 해야 합니다는 <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>는 서비스 런타임 생성이 이루어지기 전에 속성.</xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> 이 작업을 수행 하는 방법은 세 가지가:-프로그래밍 방식으로 사용자 지정 서비스 동작을 추가 <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>지점 이전의 속성 위치는 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName>메서드가 호출 되는 <xref:System.ServiceModel.ServiceHost?displayProperty=fullName>개체입니다.</xref:System.ServiceModel.ServiceHost?displayProperty=fullName> </xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>      -IServiceBehavior를 구현 하는 사용자 지정 특성을 만들고 수정 해야 하는 서비스 클래스를 표시 하려면 사용 합니다. 경우는 <xref:System.ServiceModel.ServiceHost>개체가 생성 되 면 [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] 리플렉션을 사용 하 여 서비스 유형에 대 한 특성을 검색 합니다.</xref:System.ServiceModel.ServiceHost> 에 <xref:System.ServiceModel.Description.ServiceDescription>요청 했습니다.</xref:System.ServiceModel.Description.ServiceDescription> 동작 컬렉션에 추가 됩니다 IServiceBehavior를 구현 하는 특성이 있는 경우      확장 된 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>응용 프로그램 또는 컴퓨터 구성 파일에서 동작 사양을 지원 하기 위해 클래스.</xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName> 자세한 내용은 예제 부분을 참조 하세요.       서비스 동작 예제 [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] 포함는 <xref:System.ServiceModel.ServiceBehaviorAttribute>특성에는 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=fullName>및 <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=fullName>동작.</xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=fullName> </xref:System.ServiceModel.ServiceBehaviorAttribute>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following IServiceBehavior implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public interface IServiceBehavior
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  id: AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  nameWithType: IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  fullName: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "계약 구현을 지원를 바인딩 요소를 사용자 지정 데이터를 전달 하는 기능을 제공 합니다."
  remarks: "AddBindingParameters 메서드를 사용 하 여 사용자 지정 데이터 개체를 추가 하는 `parameters` 위한 계약을 지원 하도록 할 추가 정보를 수집 하는 데 사용할 수 바인딩 요소 컬렉션입니다.       이 메서드는 수신 URI 마다 한 번씩 호출 됩니다. 예를 들어 서비스에&4; 개의 끝점이 있고 그 중 두는 경우 동일한 수신 URI가이 메서드는 세 번 호출 됩니다. 이유는는 `bindingParameters` 각 채널 스택을 대상 이며 수신 URI 마다 한 개의 채널 스택을 합니다. 호출할 때마다 수신 URI에서 해당 끝점을 수신 하기 때문에 두 번의 호출 가져오고 단일 <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>, 한 번의 호출&2;의 컬렉션을 가져옵니다 <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>개체.</xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>      > [!NOTE] >의 모든는 <xref:System.ServiceModel.Description.IServiceBehavior>메서드가 통과 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>및 <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>개체를 매개 변수로.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> <xref:System.ServiceModel.Description.ServiceDescription>매개 변수는 검사 및 사용자 지정에만 삽입 이므로 이러한 개체를 수정할 경우 실행 동작이 정의 되지 않습니다.</xref:System.ServiceModel.Description.ServiceDescription>"
  syntax:
    content: public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "서비스의 서비스 설명입니다."
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "서비스의 호스트입니다."
    - id: endpoints
      type: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint}
      description: "서비스 끝점입니다."
    - id: bindingParameters
      type: System.ServiceModel.Channels.BindingParameterCollection
      description: "사용자 지정 하는 바인딩 요소 개체 액세스입니다."
  overload: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  id: ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "런타임 속성 값을 변경 하거나 오류 처리기, 메시지, 매개 변수 인터셉터 등, 보안 확장명 및 기타 사용자 지정 확장명 개체 등의 사용자 지정 확장 개체를 삽입 하는 기능을 제공 합니다."
  remarks: "검사 하거나 수정 하 ApplyDispatchBehavior 메서드를 구현 하는 <xref:System.ServiceModel.ServiceHostBase>일부 사용자 지정 실행 시나리오를 지원 하기 위해 생성 되는 개체입니다.</xref:System.ServiceModel.ServiceHostBase>      > [!NOTE] >의 모든는 <xref:System.ServiceModel.Description.IServiceBehavior>메서드가 통과 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>및 <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>개체를 매개 변수로.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> <xref:System.ServiceModel.Description.ServiceDescription>매개 변수는 검사 및 사용자 지정에만 삽입 이므로 이러한 개체를 수정할 경우 실행 동작이 정의 되지 않습니다.</xref:System.ServiceModel.Description.ServiceDescription>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "서비스 설명입니다."
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "현재 구축 중인 호스트입니다."
  overload: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  id: Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: Validate(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "서비스 호스트를 검사 하는 기능 및 서비스를 성공적으로 실행할 수 있는지 확인 하려면 서비스 설명을 제공 합니다."
  remarks: "Validate 메서드를 사용 하 여 현재 서비스 시나리오에 따라 제대로 실행할 수 있는지 여부를 확인 합니다.      > [!NOTE] >의 모든는 <xref:System.ServiceModel.Description.IServiceBehavior>메서드가 통과 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>및 <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>개체를 매개 변수로.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> <xref:System.ServiceModel.Description.ServiceDescription>매개 변수는 검사 및 사용자 지정에만 삽입 이므로 이러한 개체를 수정할 경우 실행 동작이 정의 되지 않습니다.</xref:System.ServiceModel.Description.ServiceDescription>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "서비스 설명입니다."
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "현재 생성 중인 서비스 호스트입니다."
  overload: System.ServiceModel.Description.IServiceBehavior.Validate*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  nameWithType: IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  fullName: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
- uid: System.ServiceModel.Description.ServiceDescription
  parent: System.ServiceModel.Description
  isExternal: false
  name: ServiceDescription
  nameWithType: ServiceDescription
  fullName: System.ServiceModel.Description.ServiceDescription
- uid: System.ServiceModel.ServiceHostBase
  parent: System.ServiceModel
  isExternal: false
  name: ServiceHostBase
  nameWithType: ServiceHostBase
  fullName: System.ServiceModel.ServiceHostBase
- uid: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ServiceEndpoint>
  nameWithType: Collection<ServiceEndpoint>
  fullName: System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.ServiceModel.Description.ServiceEndpoint>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Description.ServiceEndpoint
    name: ServiceEndpoint
    nameWithType: ServiceEndpoint
    fullName: ServiceEndpoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Channels.BindingParameterCollection
  parent: System.ServiceModel.Channels
  isExternal: true
  name: BindingParameterCollection
  nameWithType: BindingParameterCollection
  fullName: System.ServiceModel.Channels.BindingParameterCollection
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
- uid: System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: Validate(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: AddBindingParameters
  nameWithType: IServiceBehavior.AddBindingParameters
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: ApplyDispatchBehavior
  nameWithType: IServiceBehavior.ApplyDispatchBehavior
- uid: System.ServiceModel.Description.IServiceBehavior.Validate*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: Validate
  nameWithType: IServiceBehavior.Validate
