### YamlMime:ManagedReference
items:
- uid: System.Security.CodeAccessPermission
  id: CodeAccessPermission
  children:
  - System.Security.CodeAccessPermission.#ctor
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Copy
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  - System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  - System.Security.CodeAccessPermission.ToXml
  - System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: CodeAccessPermission
  nameWithType: CodeAccessPermission
  fullName: System.Security.CodeAccessPermission
  type: Class
  summary: "모든 코드 액세스 권한의 기본 구조를 정의합니다."
  remarks: "코드 액세스 권한 스택 워크를 사용 하 여 사용 권한을 코드의 모든 호출자에 게 부여 되어 있는지 확인 하십시오. 사용 권한 개체가 `null`, <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>.</xref:System.Security.Permissions.PermissionState?displayProperty=fullName> 상태와 사용 권한 개체와 동일한 처리       호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다.       CodeAccessPermission 클래스의 상속 자가 보안 인프라를 확장 하는 권한으로 제대로 작동 하려면 완전 신뢰를 부여 되어야 합니다. 상속자는 완전히 신뢰할 수 있는, CodeAccessPermission 문제를 확인 하는 <xref:System.Security.Permissions.SecurityAction>에 대 한 <xref:System.Security.Permissions.SecurityPermissionFlag>= `true` 및 <xref:System.Security.Permissions.SecurityPermissionFlag>= `true`.</xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityAction>"
  example:
  - "The following code example shows a permission derived from the CodeAccessPermission class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/csharp/t-system.security.codeac_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/cpp/t-system.security.codeac_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/visualbasic/t-system.security.codeac_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk
  inheritance:
  - System.Object
  implements:
  - System.Security.IPermission
  - System.Security.IStackWalk
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.#ctor
  id: '#ctor'
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: CodeAccessPermission()
  nameWithType: CodeAccessPermission.CodeAccessPermission()
  fullName: System.Security.CodeAccessPermission.CodeAccessPermission()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> 클래스입니다."
  remarks: "이 생성자를 호출 하 여 파생된 클래스의 인스턴스를 만들 때마다 형식의 상태를 초기화 하 합니다. 파생된 클래스 생성자의 생성자 선언에이 생성자를 명시적으로 호출할 수, 있지만이 대개 필요는 없습니다. 대부분의 컴파일러에서는 사용자에 대 한 호출을 자동으로 생성 됩니다."
  syntax:
    content: protected CodeAccessPermission ();
    parameters: []
  overload: System.Security.CodeAccessPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Assert
  id: Assert
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Assert()
  nameWithType: CodeAccessPermission.Assert()
  fullName: System.Security.CodeAccessPermission.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "호출 코드에서 스택의 상위 호출자가 리소스에 액세스할 수 있는 권한이 부여 되지 않았습니다 하는 경우에이 메서드를 호출 하는 코드를 통해 사용 권한 요구로 보호 되는 리소스를 액세스할 수 있음을 선언 합니다. Assert를 사용 하 여 보안 문제가 발생할 수 있습니다."
  remarks: "호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다. Assert를 호출 하면이 메서드를 호출 하는 코드를 넘어 진행에서 호출 스택의 하위 원래 스택 워크를 수 없습니다. 따라서 호출 스택의 상위 호출자에 리소스를 액세스할 수 있는 필수 권한이 없는 경우에은 여전히 액세스할 수는 데 필요한 사용 권한을이 메서드를 호출 하는 코드를 통해. 어설션을 Assert를 호출 하는 코드 어설션하는 사용 권한에 대해 보안 검사를 통과 하는 경우에 유효 합니다.       Assert 호출 호출 하는 코드는 호출자에 반환 될 때까지 유효 합니다. 하나의 Assert 프레임에서 활성화할 수 있습니다. 현재 Assert <xref:System.Security.SecurityException>.</xref:System.Security.SecurityException> 프레임 결과에 있을 때 Assert 호출 하려는 경우 호출 <xref:System.Security.CodeAccessPermission.RevertAssert%2A>또는 <xref:System.Security.CodeAccessPermission.RevertAll%2A>활성 Assert를 제거 하려면.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertAssert%2A>       Assert 권한에 대 한 요청이 실패 합니다 부여 되지 않은 권한은 대해 무시 됩니다. 그러나 코드가 호출 스택에 낮은 호출 <xref:System.Security.CodeAccessPermission.Demand%2A>권한에 대해는 <xref:System.Security.SecurityException>스택 워크 Assert 호출 하려고 하는 코드에 도달 하면 throw 됩니다.</xref:System.Security.SecurityException> </xref:System.Security.CodeAccessPermission.Demand%2A> 이것은에 부여 하 려 했지만 어설션을 호출한 하는 코드에는 권한이 부여 되지 있기 때문입니다.      > [!CAUTION] > 메서드를 잘못 사용 하는 경우 보안 문제가 발생할 수 있습니다는 모든 코드 호출 체인에 지정된 된 리소스를 액세스할 수 있는 권한이 부여 되어야 하는 요구 사항을 제거 Assert를 호출 하기 때문에 있습니다. 따라서 매우 주의 해 서 사용 해야 합니다."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출 코드에 없는 <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>합니다.       -또는-현재 프레임에 대 한 활성 Assert가 이미 있습니다."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Copy
  id: Copy
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: CodeAccessPermission.Copy()
  fullName: System.Security.CodeAccessPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "파생된 클래스에서 구현 된 경우 만들고 현재 권한 개체의 동일한 복사본을 반환 합니다."
  remarks: "사용 권한 개체의 복사본을 원래 권한 개체 리소스에 동일한 액세스를 권한을 나타냅니다."
  example:
  - "The following code example shows an override of the Copy method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/csharp/m-system.security.codeac_0_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/cpp/m-system.security.codeac_0_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/visualbasic/m-system.security.codeac_0_1.vb)]"
  syntax:
    content: public abstract System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "현재 권한 개체의 복사본입니다."
  overload: System.Security.CodeAccessPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Demand
  id: Demand
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Demand()
  nameWithType: CodeAccessPermission.Demand()
  fullName: System.Security.CodeAccessPermission.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "강제로 <xref:System.Security.SecurityException>런타임 시 경우 모든 호출 스택의 상위 호출자가 현재 인스턴스가 지정한 사용 권한이 부여 되지 않았습니다.</xref:System.Security.SecurityException>"
  remarks: "이 메서드는 일반적으로 호출자에 게 리소스에 액세스할 수 있는 권한이 있는지 확인 하려면 보안 라이브러리에서 사용 됩니다. 예를 들어 보안 클래스 라이브러리의 파일 클래스 호출 필요한에 대 한 수요가 <xref:System.Security.Permissions.FileIOPermission>는 호출자가 요청한 파일 작업을 수행 하기 전에.</xref:System.Security.Permissions.FileIOPermission>       이 메서드를 호출 하는 코드의 사용 권한은 검사 하지 않습니다. 검사 해당 코드의 직접 실행 호출자에서 시작 되 고 스택 위로 진행 됩니다. 호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다. 요청이 없는 경우에 성공 하면 <xref:System.Security.SecurityException>발생 합니다.</xref:System.Security.SecurityException>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출 스택의 상위 호출자가 현재 인스턴스에 의해 지정 된 사용 권한이 없습니다.       -또는-호출 스택의 상위 호출자가 호출 <xref:System.Security.CodeAccessPermission.Deny*>현재 권한 개체입니다.</xref:System.Security.CodeAccessPermission.Deny*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Deny
  id: Deny
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Deny()
  nameWithType: CodeAccessPermission.Deny()
  fullName: System.Security.CodeAccessPermission.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "현재 인스턴스가 지정 된 리소스에 액세스 하려면이 메서드를 호출 하는 코드를 사용 하 여 호출 스택의 상위 호출자가 되지 않도록 합니다."
  remarks: "> [!IMPORTANT]> Deny 메서드 완전히 신뢰할 수 있는 코드에 의해 실수로 액세스 로부터 리소스를 보호에 사용할 해야 합니다. 하지 신뢰할 수 없는 코드 리소스 의도적인 악용 으로부터 보호 하기 위해 사용 해야 합니다. 예를 들어 경우 메서드 `A` 에 대 한 사용 권한 거부 하 고 다음 메서드를 호출 `B`, 메서드 `B` 명백히 Deny <xref:System.Security.CodeAccessPermission.Assert%2A>.</xref:System.Security.CodeAccessPermission.Assert%2A> 를 실행 하 여 재정의할 수 있습니다 호출된 된 메서드가 스택의 항상 높습니다. 따라서 경우 메서드 `B` 보안 시스템에서 보호 된 리소스에 액세스 하려고 하기 때문에 여 사용 권한을 확인 하기 시작 메서드 `B` 직접 실행 호출자 이며 워크 없습니다 거부 되어 있는지 확인 하기 위해 스택의 우선 또는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A>스택의 더 낮은.</xref:System.Security.CodeAccessPermission.PermitOnly%2A> 메서드 `B`, 리소스에 액세스 하려고 하는 수는 스택 워크 즉시 사용 하 여 중지 된 <xref:System.Security.CodeAccessPermission.Assert%2A>메서드.</xref:System.Security.CodeAccessPermission.Assert%2A> 메서드에서 Deny 스택에 배치 하는 경우 `A` (호출 하는 방법)가 검색 되지 않습니다.       이 메서드는 호출 스택의 상위 호출자가 해당 호출자가 액세스할 수 있는 권한이 부여 되어 있는 경우에이 메서드를 호출 하는 코드를 통해 보호 된 리소스에 액세스 하지 못하도록 방지 합니다. 호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다.       Deny는 프로그래머의 책임을 제한 하거나에서 거부 된 권한으로 보호 되는 리소스에 액세스 하는 데 사용 되 고 거부를 호출 하는 메서드를 방지할 수 있으므로 실수로 인 한 보안 문제를 방지할 수 있습니다. 메서드는 사용 권한에서 거부를 호출 하는 경우는 <xref:System.Security.CodeAccessPermission.Demand%2A>Deny에 도달 하면 해당 보안 검사에서 실패에 해당 권한이 하위 호출 스택의 호출자가 호출 됩니다.</xref:System.Security.CodeAccessPermission.Demand%2A>       호출 하는 코드는 호출자에 반환 될 때까지 거부에 대 한 호출 효과적입니다. 하나의 거부 프레임에서 활성화할 수 있습니다. 현재 거부 <xref:System.Security.SecurityException>.</xref:System.Security.SecurityException> 프레임 결과에 있을 때 거부를 호출 하려고 호출 <xref:System.Security.CodeAccessPermission.RevertDeny%2A>또는 <xref:System.Security.CodeAccessPermission.RevertAll%2A>활성 거부를 제거 하려면.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertDeny%2A> 거부 권한에 대 한 요청이 실패 합니다 부여 되지 않은 권한은 대해 무시 됩니다."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Deny*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "현재 프레임에 대 한 활성 Deny는 이미입니다."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: CodeAccessPermission.Equals(Object)
  fullName: System.Security.CodeAccessPermission.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "확인 여부를 지정 된 <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> 현재 개체가 같은지 <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>합니다."
  remarks: "자세한 내용은 <xref:System.Object.Equals%2A>.</xref:System.Object.Equals%2A> 을 참조 하십시오."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> 현재와 비교할 개체 <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하는 경우 지정 된 <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> 현재 개체가 같은지 <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.CodeAccessPermission.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: CodeAccessPermission.FromXml(SecurityElement)
  fullName: System.Security.CodeAccessPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "파생된 클래스에서 재정의 하는 경우에 포함 된 XML 인코딩에서 지정된 된 상태의 보안 개체를 다시 생성 합니다."
  remarks: "보안 개체를 확장 하는 사용자 지정 코드를 구현 해야는 <xref:System.Security.CodeAccessPermission.ToXml%2A>및 보안을 인코딩할 수 있는 개체를 만드는 FromXml 메서드.</xref:System.Security.CodeAccessPermission.ToXml%2A>"
  example:
  - "The following code example shows an override of the FromXml method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/csharp/m-system.security.codeac_1_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/cpp/m-system.security.codeac_1_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/visualbasic/m-system.security.codeac_1_1.vb)]"
  syntax:
    content: public abstract void FromXml (System.Security.SecurityElement elem);
    parameters:
    - id: elem
      type: System.Security.SecurityElement
      description: "XML은 보안 개체를 다시 만드는 데 사용할 인코딩입니다."
  overload: System.Security.CodeAccessPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>elem</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> elem </code> 매개 변수는 현재 인스턴스와 동일한 형식의 인스턴스에 대 한 XML 인코딩이 포함 되어 있지 않습니다.       -또는-의 버전 번호는 <code> elem </code> 매개 변수는 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.GetHashCode
  id: GetHashCode
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: CodeAccessPermission.GetHashCode()
  fullName: System.Security.CodeAccessPermission.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "에 대 한 해시 코드를 가져옵니다는 <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> 개체 해시 알고리즘 및 데이터 해시 테이블 같은 구조에 적합 합니다."
  remarks: "두 인스턴스가 같은 권한의 대 한 해시 코드 서로 다를 수 있으므로 해시 코드를 사용 두 개를 비교 하 <xref:System.Security.CodeAccessPermission>개체입니다.</xref:System.Security.CodeAccessPermission>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "현재에 대 한 해시 코드 <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> 개체입니다."
  overload: System.Security.CodeAccessPermission.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: CodeAccessPermission.Intersect(IPermission)
  fullName: System.Security.CodeAccessPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "파생된 클래스에서 구현 된 경우 만들고 있는 현재 사용 권한 및 지정한 사용 권한의 공통 사용 권한을 반환 합니다."
  remarks: "두 사용 권한의 공통 사항에는 모두 공통으로 설명 하는 작업 집합을 설명 하는 권한입니다. 원래 사용 권한을 모두 전달 하는 요구만 교집합에 전달 합니다."
  example:
  - "The following code example shows an override of the Intersect method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/csharp/m-system.security.codeac_3_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/cpp/m-system.security.codeac_3_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/visualbasic/m-system.security.codeac_3_1.vb)]"
  syntax:
    content: public abstract System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "현재 사용 권한 집합과 교차 하는 사용 권한입니다. 현재 사용 권한과 동일한 형식 이어야 합니다."
    return:
      type: System.Security.IPermission
      description: "현재 사용 권한 및 지정한 사용 권한의의 교차 부분을 나타내는 새 사용 권한. 이 새로운 사용 권한은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 교집합이 비어 있는 경우."
  overload: System.Security.CodeAccessPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code> 매개 변수가 않습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 및 현재 사용 권한과 동일한 클래스의 인스턴스가 아닙니다."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: CodeAccessPermission.IsSubsetOf(IPermission)
  fullName: System.Security.CodeAccessPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "파생된 클래스에서 구현 하는 경우에 현재 사용 권한이 지정된 된 사용 권한의 하위 집합 인지 확인 합니다."
  remarks: "The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be `true` for all overrides of the IsSubsetOf method. *X*, *Y*, and *Z* represent custom code access permission objects that are not null references, *U* represents an unrestricted code access permission, and *N* represents an empty permission with a <xref:System.Security.Permissions.PermissionState> of <xref:System.Security.Permissions.PermissionState>.  \n  \n-   *X*.IsSubsetOf(*X*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*Y*) returns the same value as *Y*.IsSubsetOf(*X*) if and only if *X* and *Y* represent the same set of permissions.  \n  \n-   If *X*.IsSubsetOf(*Y*) and *Y*.IsSubsetOf(*Z*) both return `true`, *X*.IsSubsetOf(*Z*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*U*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*N*) returns `false`.  \n  \n-   *N*.IsSubsetOf(*X*) returns `true`.  \n  \n If *X* and *Y* represent custom code access permission objects that are null references, *X*.IsSubsetOf(*Y*) returns `true`. If *Z* is also null, the compound set operation *X*.Union(*Y*).IsSubsetOf(*Z*) also returns `true` because the union of two null permissions is a null permission."
  example:
  - "The following code example shows an override of the IsSubsetOf method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/csharp/m-system.security.codeac_5_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/cpp/m-system.security.codeac_5_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/visualbasic/m-system.security.codeac_5_1.vb)]"
  syntax:
    content: public abstract bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "권한 하위 집합 관계에 대해 테스트 하는 것입니다. 이 사용 권한은 현재 권한과 동일한 형식 이어야 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 사용 권한이 지정 된 사용 권한의 하위 집합이 면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.CodeAccessPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code> 매개 변수가 않습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 아니고 현재 사용 권한과 동일한 형식이 있습니다."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.PermitOnly
  id: PermitOnly
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: CodeAccessPermission.PermitOnly()
  fullName: System.Security.CodeAccessPermission.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "현재 인스턴스가 지정 된 리소스를 제외한 모든 리소스에 액세스 하려면이 메서드를 호출 하는 코드를 사용 하 여 호출 스택의 상위 호출자가 되지 않도록 합니다."
  remarks: "> [!IMPORTANT]> PermitOnly 메서드는 완전히 신뢰할 수 있는 코드에 의해 실수로 액세스 로부터 리소스를 보호에 사용할 해야 합니다. 하지 신뢰할 수 없는 코드 리소스 의도적인 악용 으로부터 보호 하기 위해 사용 해야 합니다. 예를 들어 경우 메서드 `A` 사용 권한에 대해 PermitOnly 발급 하 고 다음 메서드를 호출 `B`, 메서드 `B` 명백히는 PermitOnly <xref:System.Security.CodeAccessPermission.Assert%2A>.</xref:System.Security.CodeAccessPermission.Assert%2A> 를 실행 하 여 재정의할 수 있습니다 호출된 된 메서드가 스택의 항상 높습니다. 따라서 경우 메서드 `B` 보안 시스템에서 보호 된 리소스에 액세스 하려고 하기 때문에 여 사용 권한을 확인 하기 시작 메서드 `B` 직접 실행 호출자 이며 워크 우선이 있는지 확인 하기 위해 스택의 없습니다 <xref:System.Security.CodeAccessPermission.Deny%2A>또는 PermitOnly는 스택의 하위.</xref:System.Security.CodeAccessPermission.Deny%2A> 메서드 `B`, 리소스에 액세스 하려고 하는 수는 스택 워크 즉시 사용 하 여 중지 된 <xref:System.Security.CodeAccessPermission.Assert%2A>메서드.</xref:System.Security.CodeAccessPermission.Assert%2A> 메서드에서 PermitOnly 스택에 배치 하는 경우 `A` (호출 하는 방법)가 검색 되지 않습니다.       PermitOnly는 비슷합니다 <xref:System.Security.CodeAccessPermission.Deny%2A>그렇지 않은 경우는 성공 시 작동이 실패 하도록 스택 워크 있는 상황에서,.</xref:System.Security.CodeAccessPermission.Deny%2A> 차이점은 <xref:System.Security.CodeAccessPermission.Deny%2A>지정 스택을 사용 하면 사용 권한을 워크 실패 하지만 PermitOnly 스택 워크 실패 하지 않게 되는 유일한 권한을 지정 합니다.</xref:System.Security.CodeAccessPermission.Deny%2A>       코드 지정 된 리소스에만 액세스할 수 사용 될 수 있도록 하려면이 메서드를 호출 합니다. PermitOnly에 대 한 호출 호출 하는 코드는 호출자에 반환 될 때까지 유효 합니다. 하나의 PermitOnly 프레임에서 활성화할 수 있습니다. 현재 PermitOnly <xref:System.Security.SecurityException>.</xref:System.Security.SecurityException> 프레임 결과에 있을 때 PermitOnly 호출 하려는 경우 호출 <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A>또는 <xref:System.Security.CodeAccessPermission.RevertAll%2A>활성 PermitOnly를 제거 하려면.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A>       PermitOnly는 권한에 대 한 요청이 실패 합니다 부여 되지 않은 사용 권한을 무시 됩니다. 그러나 코드에 대 한 호출에 낮은 나중 스택 하는 경우 호출 <xref:System.Security.CodeAccessPermission.Demand%2A>권한에 대해는 <xref:System.Security.SecurityException>스택 워크 PermitOnly을 호출 하려고 하는 코드에 도달 하면 throw 됩니다.</xref:System.Security.SecurityException> </xref:System.Security.CodeAccessPermission.Demand%2A> 해당 권한이 PermitOnly 호출 했지만 PermitOnly를 호출 하는 코드에는 권한이 부여 되지 때문입니다. 호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.CodeAccessPermission.PermitOnly*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "현재 프레임에 대 한 활성 PermitOnly는 이미입니다."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertAll
  id: RevertAll
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertAll()
  nameWithType: CodeAccessPermission.RevertAll()
  fullName: System.Security.CodeAccessPermission.RevertAll()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "모든 이전 재정의가 제거 될 현재 프레임에 대 한 합니다."
  remarks: "재정의 없는 경우 (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, 또는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) 현재 프레임에 대 한는 <xref:System.ExecutionEngineException>throw 됩니다.</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.PermitOnly%2A> </xref:System.Security.CodeAccessPermission.Deny%2A> </xref:System.Security.CodeAccessPermission.Assert%2A>"
  syntax:
    content: public static void RevertAll ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertAll*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "인 <> </> *>, <> </> *>, 또는 <xref:System.Security.CodeAccessPermission.PermitOnly*>현재 프레임에 대 한.</xref:System.Security.CodeAccessPermission.PermitOnly*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertAssert
  id: RevertAssert
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertAssert()
  nameWithType: CodeAccessPermission.RevertAssert()
  fullName: System.Security.CodeAccessPermission.RevertAssert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "이전의 모든 <xref:System.Security.CodeAccessPermission.Assert*>제거할 현재 프레임에 대 한.</xref:System.Security.CodeAccessPermission.Assert*>"
  remarks: "없는 경우 없는 <xref:System.Security.CodeAccessPermission.Assert%2A>현재 프레임에 대 한는 <xref:System.ExecutionEngineException>throw 됩니다.</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.Assert%2A>"
  syntax:
    content: public static void RevertAssert ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertAssert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "인 <xref:System.Security.CodeAccessPermission.Assert*>현재 프레임에 대 한.</xref:System.Security.CodeAccessPermission.Assert*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertDeny
  id: RevertDeny
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertDeny()
  nameWithType: CodeAccessPermission.RevertDeny()
  fullName: System.Security.CodeAccessPermission.RevertDeny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "이전의 모든 <xref:System.Security.CodeAccessPermission.Deny*>제거할 현재 프레임에 대 한.</xref:System.Security.CodeAccessPermission.Deny*>"
  remarks: "없는 경우 없는 <xref:System.Security.CodeAccessPermission.Deny%2A>현재 프레임에 대 한는 <xref:System.ExecutionEngineException>throw 됩니다.</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.Deny%2A>"
  syntax:
    content: public static void RevertDeny ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertDeny*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "인 <xref:System.Security.CodeAccessPermission.Deny*>현재 프레임에 대 한.</xref:System.Security.CodeAccessPermission.Deny*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertPermitOnly
  id: RevertPermitOnly
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertPermitOnly()
  nameWithType: CodeAccessPermission.RevertPermitOnly()
  fullName: System.Security.CodeAccessPermission.RevertPermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "이전의 모든 <xref:System.Security.CodeAccessPermission.PermitOnly*>제거할 현재 프레임에 대 한.</xref:System.Security.CodeAccessPermission.PermitOnly*>"
  remarks: "없는 경우 없는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A>현재 프레임에 대 한는 <xref:System.ExecutionEngineException>throw 됩니다.</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.PermitOnly%2A>"
  syntax:
    content: public static void RevertPermitOnly ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertPermitOnly*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "인 <xref:System.Security.CodeAccessPermission.PermitOnly*>현재 프레임에 대 한.</xref:System.Security.CodeAccessPermission.PermitOnly*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.ToString
  id: ToString
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: ToString()
  nameWithType: CodeAccessPermission.ToString()
  fullName: System.Security.CodeAccessPermission.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "만들고 현재 권한 개체의 문자열 표현을 반환 합니다."
  remarks: "이 메서드는 사용 권한을 문자열로 표시 하기 위해 필요한 경우 디버깅에 유용 합니다."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "현재 권한 개체의 문자열 표현입니다."
  overload: System.Security.CodeAccessPermission.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.ToXml
  id: ToXml
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: CodeAccessPermission.ToXml()
  fullName: System.Security.CodeAccessPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "파생된 클래스에서 재정의 되 면 보안 개체 및 현재 상태에 대 한 XML 인코딩을 만듭니다."
  remarks: "보안 개체를 확장 하는 사용자 지정 코드는 ToXml 구현 해야 하 고 <xref:System.Security.CodeAccessPermission.FromXml%2A>보안 인코딩할 수 있는 개체를 만드는 메서드.</xref:System.Security.CodeAccessPermission.FromXml%2A>"
  example:
  - "The following code example shows an override of the ToXml method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/csharp/m-system.security.codeac_4_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/cpp/m-system.security.codeac_4_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/visualbasic/m-system.security.codeac_4_1.vb)]"
  syntax:
    content: public abstract System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "모든 상태 정보를 포함 하는 보안 개체의 XML 인코딩입니다."
  overload: System.Security.CodeAccessPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: CodeAccessPermission.Union(IPermission)
  fullName: System.Security.CodeAccessPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "파생된 클래스에서 재정의 되 면 현재 사용 권한 및 지정한 사용 권한을 합한 사용 권한을 만듭니다."
  remarks: "Union에 대 한 호출의 결과는 현재 사용 권한 및 지정한 사용 권한의 둘 다로 나타나는 모든 작업을 나타내는 권한입니다. 사용 권한 중 하나를 전달 하는 모든 요청의 합집합을 통과 합니다."
  example:
  - "The following code example shows an override of the Union method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/csharp/m-system.security.codeac_2_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/cpp/m-system.security.codeac_2_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/visualbasic/m-system.security.codeac_2_1.vb)]"
  syntax:
    content: public virtual System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "현재 사용 권한과 결합할 사용 권한 현재 사용 권한과 동일한 형식 이어야 합니다."
    return:
      type: System.Security.IPermission
      description: "현재 사용 권한 및 지정한 사용 권한의 합집합을 나타내는 새 사용 권한."
  overload: System.Security.CodeAccessPermission.Union*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <code>other</code> parameter is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. 이 메서드는 전달 될 때이 수준의 지원만 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.CodeAccessPermission.#ctor
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: CodeAccessPermission()
  nameWithType: CodeAccessPermission.CodeAccessPermission()
  fullName: System.Security.CodeAccessPermission.CodeAccessPermission()
- uid: System.Security.CodeAccessPermission.Assert
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Assert()
  nameWithType: CodeAccessPermission.Assert()
  fullName: System.Security.CodeAccessPermission.Assert()
- uid: System.Security.CodeAccessPermission.Copy
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Copy()
  nameWithType: CodeAccessPermission.Copy()
  fullName: System.Security.CodeAccessPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.CodeAccessPermission.Demand
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Demand()
  nameWithType: CodeAccessPermission.Demand()
  fullName: System.Security.CodeAccessPermission.Demand()
- uid: System.Security.CodeAccessPermission.Deny
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Deny()
  nameWithType: CodeAccessPermission.Deny()
  fullName: System.Security.CodeAccessPermission.Deny()
- uid: System.Security.CodeAccessPermission.Equals(System.Object)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Equals(Object)
  nameWithType: CodeAccessPermission.Equals(Object)
  fullName: System.Security.CodeAccessPermission.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: CodeAccessPermission.FromXml(SecurityElement)
  fullName: System.Security.CodeAccessPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.CodeAccessPermission.GetHashCode
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: GetHashCode()
  nameWithType: CodeAccessPermission.GetHashCode()
  fullName: System.Security.CodeAccessPermission.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: CodeAccessPermission.Intersect(IPermission)
  fullName: System.Security.CodeAccessPermission.Intersect(IPermission)
- uid: System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: CodeAccessPermission.IsSubsetOf(IPermission)
  fullName: System.Security.CodeAccessPermission.IsSubsetOf(IPermission)
- uid: System.Security.CodeAccessPermission.PermitOnly
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: PermitOnly()
  nameWithType: CodeAccessPermission.PermitOnly()
  fullName: System.Security.CodeAccessPermission.PermitOnly()
- uid: System.Security.CodeAccessPermission.RevertAll
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAll()
  nameWithType: CodeAccessPermission.RevertAll()
  fullName: System.Security.CodeAccessPermission.RevertAll()
- uid: System.Security.CodeAccessPermission.RevertAssert
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAssert()
  nameWithType: CodeAccessPermission.RevertAssert()
  fullName: System.Security.CodeAccessPermission.RevertAssert()
- uid: System.Security.CodeAccessPermission.RevertDeny
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertDeny()
  nameWithType: CodeAccessPermission.RevertDeny()
  fullName: System.Security.CodeAccessPermission.RevertDeny()
- uid: System.Security.CodeAccessPermission.RevertPermitOnly
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertPermitOnly()
  nameWithType: CodeAccessPermission.RevertPermitOnly()
  fullName: System.Security.CodeAccessPermission.RevertPermitOnly()
- uid: System.Security.CodeAccessPermission.ToString
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToString()
  nameWithType: CodeAccessPermission.ToString()
  fullName: System.Security.CodeAccessPermission.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.CodeAccessPermission.ToXml
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToXml()
  nameWithType: CodeAccessPermission.ToXml()
  fullName: System.Security.CodeAccessPermission.ToXml()
- uid: System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: CodeAccessPermission.Union(IPermission)
  fullName: System.Security.CodeAccessPermission.Union(IPermission)
- uid: System.Security.CodeAccessPermission.#ctor*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: CodeAccessPermission
  nameWithType: CodeAccessPermission.CodeAccessPermission
- uid: System.Security.CodeAccessPermission.Assert*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Assert
  nameWithType: CodeAccessPermission.Assert
- uid: System.Security.CodeAccessPermission.Copy*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Copy
  nameWithType: CodeAccessPermission.Copy
- uid: System.Security.CodeAccessPermission.Demand*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Demand
  nameWithType: CodeAccessPermission.Demand
- uid: System.Security.CodeAccessPermission.Deny*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Deny
  nameWithType: CodeAccessPermission.Deny
- uid: System.Security.CodeAccessPermission.Equals*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Equals
  nameWithType: CodeAccessPermission.Equals
- uid: System.Security.CodeAccessPermission.FromXml*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: FromXml
  nameWithType: CodeAccessPermission.FromXml
- uid: System.Security.CodeAccessPermission.GetHashCode*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: GetHashCode
  nameWithType: CodeAccessPermission.GetHashCode
- uid: System.Security.CodeAccessPermission.Intersect*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Intersect
  nameWithType: CodeAccessPermission.Intersect
- uid: System.Security.CodeAccessPermission.IsSubsetOf*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: CodeAccessPermission.IsSubsetOf
- uid: System.Security.CodeAccessPermission.PermitOnly*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: PermitOnly
  nameWithType: CodeAccessPermission.PermitOnly
- uid: System.Security.CodeAccessPermission.RevertAll*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAll
  nameWithType: CodeAccessPermission.RevertAll
- uid: System.Security.CodeAccessPermission.RevertAssert*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAssert
  nameWithType: CodeAccessPermission.RevertAssert
- uid: System.Security.CodeAccessPermission.RevertDeny*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertDeny
  nameWithType: CodeAccessPermission.RevertDeny
- uid: System.Security.CodeAccessPermission.RevertPermitOnly*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertPermitOnly
  nameWithType: CodeAccessPermission.RevertPermitOnly
- uid: System.Security.CodeAccessPermission.ToString*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToString
  nameWithType: CodeAccessPermission.ToString
- uid: System.Security.CodeAccessPermission.ToXml*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToXml
  nameWithType: CodeAccessPermission.ToXml
- uid: System.Security.CodeAccessPermission.Union*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Union
  nameWithType: CodeAccessPermission.Union
