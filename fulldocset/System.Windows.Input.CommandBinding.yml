### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.CommandBinding
  id: CommandBinding
  children:
  - System.Windows.Input.CommandBinding.#ctor
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  - System.Windows.Input.CommandBinding.CanExecute
  - System.Windows.Input.CommandBinding.Command
  - System.Windows.Input.CommandBinding.Executed
  - System.Windows.Input.CommandBinding.PreviewCanExecute
  - System.Windows.Input.CommandBinding.PreviewExecuted
  langs:
  - csharp
  name: CommandBinding
  nameWithType: CommandBinding
  fullName: System.Windows.Input.CommandBinding
  type: Class
  summary: "바인딩하는 <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> 명령을 구현 하는 이벤트 처리기에 있습니다."
  remarks: "CommandBinding와 명령을 연결는 <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> 및 <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> 이벤트 구현 하 고 명령의 상태를 확인 합니다.</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.PreviewExecuted>       경우는 <xref:System.Windows.Input.RoutedCommand.Execute%2A>또는 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>의 메서드는 <xref:System.Windows.Input.RoutedCommand>호출 되는 <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> 또는 <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> 명령 대상에서 발생 하는.</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> </xref:System.Windows.Input.RoutedCommand.Execute%2A>  명령 대상에는 CommandBinding 명령에 대 한 경우 적절 한 처리기가 호출 됩니다.  명령 대상에는 CommandBinding 명령에 대 한이 없는 경우는 CommandBinding가 있는 요소가 발견 될 때까지 이벤트가 요소 트리를 통해 라우팅됩니다.       CommandBinding가 제한적으로 사용 된 <xref:System.Windows.Input.ICommand>즉 하지에<xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand>  CommandBinding 바인딩합니다 명령을 ¿¡´는 <xref:System.Windows.Input.ExecutedRoutedEventHandler>및 <xref:System.Windows.Input.CanExecuteRoutedEventHandler>를 수신 대기 하는 <xref:System.Windows.Input.CommandManager.Executed>및 <xref:System.Windows.Input.CommandManager.CanExecute>라우트된 이벤트는 발생 시기는 <xref:System.Windows.Input.RoutedCommand.Execute%2A>및 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>의 메서드는 <xref:System.Windows.Input.RoutedCommand>호출 됩니다.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> </xref:System.Windows.Input.RoutedCommand.Execute%2A> </xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.ExecutedRoutedEventHandler>"
  syntax:
    content: public class CommandBinding
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding()
  nameWithType: CommandBinding.CommandBinding()
  fullName: System.Windows.Input.CommandBinding.CommandBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> 클래스입니다."
  syntax:
    content: public CommandBinding ();
    parameters: []
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  id: '#ctor(System.Windows.Input.ICommand)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand)
  nameWithType: CommandBinding.CommandBinding(ICommand)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> <xref:System.Windows.Input.ICommand>.</xref:System.Windows.Input.ICommand> 지정된을 사용 하 여 클래스"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "새 기본 명령 <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> 에 있습니다."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> 클래스 지정을 사용 하 여 <xref:System.Windows.Input.ICommand>와 지정 된 <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> 이벤트 처리기.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "새 기본 명령 <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> 에 있습니다."
    - id: executed
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "에 대 한 처리기는 <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> 새 이벤트 <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>합니다."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> 클래스 지정을 사용 하 여 <xref:System.Windows.Input.ICommand>와 지정 된 <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> 및 <xref href=&quot;System.Windows.Input.CommandBinding.CanExecute&quot;> </xref> 이벤트 처리기.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "새 기본 명령 <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> 에 있습니다."
    - id: executed
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "에 대 한 처리기는 <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> 새 이벤트 <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>합니다."
    - id: canExecute
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "에 대 한 처리기는 <xref href=&quot;System.Windows.Input.CommandBinding.CanExecute&quot;> </xref> 새 이벤트 <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>합니다."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.CanExecute
  id: CanExecute
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CanExecute
  nameWithType: CommandBinding.CanExecute
  fullName: System.Windows.Input.CommandBinding.CanExecute
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이 명령은 연결 될 때 발생 <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> 명령 대상에서 명령을 실행할 수 있는지 여부를 확인 하는 검사를 시작 합니다."
  remarks: "때는 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>에서 메서드는 <xref:System.Windows.Input.RoutedCommand>호출 되는 <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>명령 대상에서 이벤트가 발생 합니다.</xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A>  이벤트 처리 되지 않은 경우 CanExecute 이벤트가 발생 합니다.  명령 대상에는 <xref:System.Windows.Input.CommandBinding>CanExecute 처리기에 대 한 명령에 대 한 <xref:System.Windows.Input.CommandBinding>호출 됩니다.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  명령 대상에 없는 경우는 <xref:System.Windows.Input.CommandBinding>를 가진 요소를 검색 하 고 요소 트리를 CanExecute 이벤트 버블링 명령에 대 한 <xref:System.Windows.Input.CommandBinding>명령과 관련 된.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>      <a name=&quot;routedEventInfo_CanExecute&quot;></a># # 이벤트 정보 라우트된 | | |   |-|-|   | 식별자 필드 | <xref:System.Windows.Input.CommandManager.CanExecuteEvent>|   | 라우팅 전략 | 버블링 |   | 대리자 | <xref:System.Windows.Input.CanExecuteRoutedEventHandler>|      -해당 터널링 이벤트는 <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.</xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.CommandManager.CanExecuteEvent>"
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \n  \n [!code-cs[commandwithhandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlercanexecutehandler)]\n [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlercanexecutehandler)]"
  syntax:
    content: public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;
    return:
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.Command
  id: Command
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: Command
  nameWithType: CommandBinding.Command
  fullName: System.Windows.Input.CommandBinding.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "가져오거나는 <xref:System.Windows.Input.ICommand>이 연관 <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref>.</xref:System.Windows.Input.ICommand>"
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandWithHandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[commandhandlerprocedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \n  \n [!code-cs[commandWithHandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlercanexecutehandler)]\n [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlercanexecutehandler)]  \n  \n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-cs[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; set; }
    return:
      type: System.Windows.Input.ICommand
      description: "이 바인딩과 연결 된 명령입니다."
  overload: System.Windows.Input.CommandBinding.Command*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.Executed
  id: Executed
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: Executed
  nameWithType: CommandBinding.Executed
  fullName: System.Windows.Input.CommandBinding.Executed
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이 명령은 연결 될 때 발생 <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> 실행 합니다."
  remarks: "때는 <xref:System.Windows.Input.RoutedCommand>실행 발생에서 <xref:System.Windows.Input.CommandBinding.PreviewExecuted>명령 대상에서 이벤트.</xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.RoutedCommand>  경우는 <xref:System.Windows.Input.CommandBinding.PreviewExecuted>이벤트가 처리 되지 않은, 명령 대상에서 실행 된 이벤트가 발생 합니다.</xref:System.Windows.Input.CommandBinding.PreviewExecuted>  명령 대상에는 <xref:System.Windows.Input.CommandBinding>Executed 처리기에 대 한 특정 명령의 <xref:System.Windows.Input.CommandBinding>호출 됩니다.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  명령 대상에 없는 경우는 <xref:System.Windows.Input.CommandBinding>해당 특정 명령 Executed 이벤트 버블링 있는 요소를 검색 하 고 요소 트리는 <xref:System.Windows.Input.CommandBinding>명령과 관련 된.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  경우는 <xref:System.Windows.Input.CommandBinding>발견 되지 않으면이 명령은 처리 되지 않습니다.</xref:System.Windows.Input.CommandBinding>      <a name=&quot;routedEventInfo_Executed&quot;></a># # 이벤트 정보 라우트된 | | |   |-|-|   | 식별자 필드 | <xref:System.Windows.Input.CommandManager.ExecutedEvent>|   | 라우팅 전략 | 버블링 |   | 대리자 | <xref:System.Windows.Input.ExecutedRoutedEventHandler>|      -해당 터널링 이벤트는 <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.</xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.ExecutedRoutedEventHandler> </xref:System.Windows.Input.CommandManager.ExecutedEvent>"
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-cs[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: public event System.Windows.Input.ExecutedRoutedEventHandler Executed;
    return:
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.PreviewCanExecute
  id: PreviewCanExecute
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: PreviewCanExecute
  nameWithType: CommandBinding.PreviewCanExecute
  fullName: System.Windows.Input.CommandBinding.PreviewCanExecute
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이 명령은 연결 될 때 발생 <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> 현재 명령 대상에서 명령을 실행할 수 있는지 여부를 확인 하는 검사를 시작 합니다."
  remarks: "경우는 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>메서드를 한 <xref:System.Windows.Input.RoutedCommand>호출 되는 명령 대상에 있으면 명령 대상에서 이벤트는 발생 PreviewCanExecute는 <xref:System.Windows.Input.CommandBinding>명령에 대 한.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 그런 다음 <xref:System.Windows.Input.CommandBinding.CanExecute>하에 대 한 처리기 <xref:System.Windows.Input.CommandBinding>호출 됩니다.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.CanExecute>  명령 대상에 없는 경우는 <xref:System.Windows.Input.CommandBinding>명령에 대 한는 <xref:System.Windows.Input.CommandBinding.CanExecute>이벤트 거품을 가진 요소를 검색 하는 요소 트리를 한 <xref:System.Windows.Input.CommandBinding>명령과 관련 된.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding>  이벤트 처리 되지 않은 경우는 <xref:System.Windows.Input.CommandBinding.CanExecute>이벤트가 발생 합니다.</xref:System.Windows.Input.CommandBinding.CanExecute>      <a name=&quot;routedEventInfo_PreviewCanExecute&quot;></a># # 이벤트 정보 라우트된 | | |   |-|-|   | 식별자 필드 | <xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|   | 라우팅 전략 | 터널링 |   | 대리자 | <xref:System.Windows.Input.CanExecuteRoutedEventHandler>|      -해당 버블링 이벤트는 <xref:System.Windows.Input.CommandBinding.CanExecute>.</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>"
  syntax:
    content: public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;
    return:
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.PreviewExecuted
  id: PreviewExecuted
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: PreviewExecuted
  nameWithType: CommandBinding.PreviewExecuted
  fullName: System.Windows.Input.CommandBinding.PreviewExecuted
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이 명령은 연결 될 때 발생 <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> 실행 합니다."
  remarks: "경우는 <xref:System.Windows.Input.RoutedCommand>실행 되 면 명령 대상에서 PreviewExecuted 이벤트를 발생 시킵니다.</xref:System.Windows.Input.RoutedCommand>  명령 대상에는 <xref:System.Windows.Input.CommandBinding>는 PreviewExecuted 명령에 대 한 처리기에 대 한 <xref:System.Windows.Input.CommandBinding>호출 됩니다.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  명령 대상에 없는 경우는 <xref:System.Windows.Input.CommandBinding>PreviewExecuted 이벤트 터널링 된 요소를 검색 하 고 요소 트리는 명령에 대 한 한 <xref:System.Windows.Input.CommandBinding>명령과 관련 된.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  미리 보기 이벤트 처리 되지 않은 경우는 <xref:System.Windows.Input.CommandBinding.Executed>명령 대상에서 이벤트가 발생 합니다.</xref:System.Windows.Input.CommandBinding.Executed>      <a name=&quot;routedEventInfo_PreviewExecuted&quot;></a># # 이벤트 정보 라우트된 | | |   |-|-|   | 식별자 필드 | <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|   | 라우팅 전략 | 터널링 |   | 대리자 | <xref:System.Windows.Input.ExecutedRoutedEventHandler>|      -해당 버블링 이벤트는 <xref:System.Windows.Input.CommandBinding.Executed>.</xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.ExecutedRoutedEventHandler> </xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>"
  syntax:
    content: public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;
    return:
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Input.CommandBinding.#ctor
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding()
  nameWithType: CommandBinding.CommandBinding()
  fullName: System.Windows.Input.CommandBinding.CommandBinding()
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand)
  nameWithType: CommandBinding.CommandBinding(ICommand)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
- uid: System.Windows.Input.ExecutedRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: ExecutedRoutedEventHandler
  nameWithType: ExecutedRoutedEventHandler
  fullName: System.Windows.Input.ExecutedRoutedEventHandler
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
- uid: System.Windows.Input.CanExecuteRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: CanExecuteRoutedEventHandler
  nameWithType: CanExecuteRoutedEventHandler
  fullName: System.Windows.Input.CanExecuteRoutedEventHandler
- uid: System.Windows.Input.CommandBinding.CanExecute
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CanExecute
  nameWithType: CommandBinding.CanExecute
  fullName: System.Windows.Input.CommandBinding.CanExecute
- uid: System.Windows.Input.CommandBinding.Command
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Command
  nameWithType: CommandBinding.Command
  fullName: System.Windows.Input.CommandBinding.Command
- uid: System.Windows.Input.CommandBinding.Executed
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Executed
  nameWithType: CommandBinding.Executed
  fullName: System.Windows.Input.CommandBinding.Executed
- uid: System.Windows.Input.CommandBinding.PreviewCanExecute
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: PreviewCanExecute
  nameWithType: CommandBinding.PreviewCanExecute
  fullName: System.Windows.Input.CommandBinding.PreviewCanExecute
- uid: System.Windows.Input.CommandBinding.PreviewExecuted
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: PreviewExecuted
  nameWithType: CommandBinding.PreviewExecuted
  fullName: System.Windows.Input.CommandBinding.PreviewExecuted
- uid: System.Windows.Input.CommandBinding.#ctor*
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding
  nameWithType: CommandBinding.CommandBinding
- uid: System.Windows.Input.CommandBinding.Command*
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Command
  nameWithType: CommandBinding.Command
