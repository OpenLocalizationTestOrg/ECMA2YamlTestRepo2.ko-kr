### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.DynamicILInfo
  id: DynamicILInfo
  children:
  - System.Reflection.Emit.DynamicILInfo.DynamicMethod
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  langs:
  - csharp
  name: DynamicILInfo
  nameWithType: DynamicILInfo
  fullName: System.Reflection.Emit.DynamicILInfo
  type: Class
  summary: "Microsoft intermediate language MSIL ()를 생성 하는 다른 방법에 대 한 지원 및 메타 데이터에 대 한 토큰을 만들기 위한 및 코드, 예외 처리 및 로컬 변수 서명에 blob을 삽입 하기 위한 메서드를 포함 하 여 동적 메서드를 제공 합니다."
  remarks: "DynamicILInfo 클래스 <xref:System.Reflection.Emit.ILGenerator>.</xref:System.Reflection.Emit.ILGenerator> 를 사용 하는 대신 MSIL 생성기를 직접 작성 하는 개발자를 수 있습니다.       다른 형식의 인스턴스를 만들려면, 메서드, 및 등 호출에 MSIL을 생성 하면 이러한 엔터티에 대 한 토큰 포함 되어야 합니다. DynamicILInfo 클래스는 다양 한 오버 로드를 제공는 <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>현재 DynamicILInfo의 범위에 유효한 토큰을 반환 하는 메서드.</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> 예를 들어의 오버 로드를 호출 하는 경우는 <xref:System.Console.WriteLine%2A?displayProperty=fullName>메서드를 가져올 수 있습니다는 <xref:System.RuntimeMethodHandle>오버 로드 하 고 전달 하는 <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>메서드에서 프로그램 MSIL에 포함할 수 있는 토큰을 가져오기 위해.</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> </xref:System.RuntimeMethodHandle> </xref:System.Console.WriteLine%2A?displayProperty=fullName>       만든 후 <xref:System.Byte>사용할 수 있습니다 로컬 변수 서명에, 예외 및 코드 본문에 대 한 배열는 <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, 및 <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A>로 삽입 하는 메서드는 <xref:System.Reflection.Emit.DynamicMethod>DynamicILInfo 개체와 관련 된.</xref:System.Reflection.Emit.DynamicMethod> </xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> </xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A> </xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A> </xref:System.Byte>       사용자 고유의 메타 데이터와 MSIL를 생성 하려면 인프라 CLI (공용 언어) 설명서, &quot;II: 메타 데이터 정의 및 의미&quot; 및 &quot;III 파티션: CIL 명령 집합&quot; 경험 합니다. 이 설명서는 온라인입니다. 참조 [ECMA C# 및 Common Language Infrastructure 표준](http://go.microsoft.com/fwlink/?LinkID=99212) msdn 및 [Standard ecma-335-인프라 CLI (공용 언어)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 웹 사이트에 있습니다.      > [!NOTE] > 대리자를 만드는 다른 동적 메서드에 대리자 생성자를 직접 호출 하 여 코드를 생성할 DynamicILInfo를 사용 하지 마십시오. 대신를 사용 하 여는 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>대리자를 만드는 방법.</xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> 대리 생성자를 사용 하 여 만든 대리자에는 대상 동적 메서드에 대 한 참조가 없습니다. 동적 메서드가 대리자 사용 되는 동안 가비지 수집에 의해 회수 될 수 있습니다."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class DynamicILInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  id: DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "본문이 현재 인스턴스에 의해 생성 되는 동적 메서드를 가져옵니다."
  remarks: "A <xref:System.Reflection.Emit.DynamicILInfo>개체는 항상 동적 메서드에 연결 된.</xref:System.Reflection.Emit.DynamicILInfo> <xref:System.Reflection.Emit.DynamicILInfo>MSIL 스트림에, 예외 처리 및 <xref:System.Reflection.Emit.ILGenerator>클래스</xref:System.Reflection.Emit.ILGenerator> 를 사용 하지 않고 MSIL을 생성 하려는 개발자를 위한 동적 메서드에 로컬 변수 서명에 삽입의 다른 방법을 제공 하는 클래스는</xref:System.Reflection.Emit.DynamicILInfo> 의 용도"
  syntax:
    content: public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }
    return:
      type: System.Reflection.Emit.DynamicMethod
      description: "A <xref:System.Reflection.Emit.DynamicMethod>동적 메서드를 나타내는 개체 현재 <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> 개체 코드를 생성 합니다.</xref:System.Reflection.Emit.DynamicMethod>"
  overload: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  id: GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "현재 범위 내에 토큰을 가져옵니다. <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, 연결 된 동적 메서드의 시그니처를 나타내는입니다."
  remarks: '서명 blob에 대 한 자세한 내용은 &quot;II: 메타 데이터 정의 및 의미&quot; 인프라 CLI (공용 언어) 설명서를 참조 합니다. 이 설명서는 온라인입니다. 참조 [ECMA C# 및 Common Language Infrastructure 표준](http://go.microsoft.com/fwlink/?LinkID=99212) msdn 및 [Standard ecma-335-인프라 CLI (공용 언어)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 웹 사이트에 있습니다.'
  syntax:
    content: public int GetTokenFor (byte[] signature);
    parameters:
    - id: signature
      type: System.Byte[]
      description: "서명이 들어 있는 배열입니다."
    return:
      type: System.Int32
      description: "메타 데이터 및 연결된 된 동적 메서드의 MSIL 스트림에에 포함할 수 있는 토큰입니다."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  id: GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "현재 범위 내에 토큰을 가져옵니다. <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, 연결 된 메서드에서 호출할 수는 동적 메서드를 나타내는입니다."
  remarks: "이 메서드 오버 로드에서 반환 된 토큰을 사용 하면 현재 연관 된 동적 메서드에서 동적 메서드를 호출할 수 있습니다 <xref:System.Reflection.Emit.DynamicILInfo>개체입니다.</xref:System.Reflection.Emit.DynamicILInfo> 연결 된 동적 메서드를 재귀적으로 호출 하려면 값을 전달는 <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>속성.</xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>"
  syntax:
    content: public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);
    parameters:
    - id: method
      type: System.Reflection.Emit.DynamicMethod
      description: "동적 메서드를 호출 합니다."
    return:
      type: System.Int32
      description: "MSIL 명령 대상으로 연결된 된 동적 메서드의 MSIL 스트림에 포함할 수 있는 토큰입니다."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  id: GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "현재 범위 내에 토큰을 가져옵니다. <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>에 연결 된 동적 메서드에서 액세스 하는 필드 표시 합니다."
  remarks: "현재와 관련 된 동적 메서드를 통해 액세스할 수 있는 모든 필드에 대 한 토큰을 얻어야 <xref:System.Reflection.Emit.DynamicILInfo>개체입니다.</xref:System.Reflection.Emit.DynamicILInfo> <xref:System.Type.GetField%2A?displayProperty=fullName> <xref:System.Reflection.FieldInfo>액세스 한 다음 <xref:System.Reflection.FieldInfo.FieldHandle%2A> <xref:System.RuntimeFieldHandle>.</xref:System.RuntimeFieldHandle> 가져올 속성을</xref:System.Reflection.FieldInfo.FieldHandle%2A> 사용 하 여 필드에 대 한</xref:System.Reflection.FieldInfo> 가져올 메서드를</xref:System.Type.GetField%2A?displayProperty=fullName> 사용 하 여"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "액세스할 필드입니다."
    return:
      type: System.Int32
      description: "현재 범위에서 필드에 액세스 하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰 <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> 개체입니다."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  id: GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "현재 범위 내에 토큰을 가져옵니다. <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>에 연결 된 동적 메서드에서 액세스 하는 메서드를 나타내는입니다."
  remarks: "현재와 관련 된 동적 메서드를 통해 액세스할 수 있는 메서드에 대 한 토큰을 얻어야 <xref:System.Reflection.Emit.DynamicILInfo>개체입니다.</xref:System.Reflection.Emit.DynamicILInfo> <xref:System.Type.GetMethod%2A?displayProperty=fullName> <xref:System.Reflection.MethodInfo>액세스 하 고 다음 <xref:System.Reflection.MethodBase.MethodHandle%2A> <xref:System.RuntimeMethodHandle>.</xref:System.RuntimeMethodHandle> 가져올 속성</xref:System.Reflection.MethodBase.MethodHandle%2A> 을 사용 하려는 방법에 대 한</xref:System.Reflection.MethodInfo> 가져올 메서드를</xref:System.Type.GetMethod%2A?displayProperty=fullName> 사용 하 여      > [!NOTE] > 제네릭 형식에 속하는 메서드를 사용 하 여는 <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>메서드 오버 로드 하 고 지정 된 <xref:System.RuntimeTypeHandle>제네릭 형식에 대 한.</xref:System.RuntimeTypeHandle> </xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "에 액세스 하는 메서드."
    return:
      type: System.Int32
      description: "와 같은 메서드를 액세스 하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰 <xref:System.Reflection.Emit.OpCodes.Call>또는 <xref:System.Reflection.Emit.OpCodes.Ldtoken>, 현재 범위에서 <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> 개체입니다.</xref:System.Reflection.Emit.OpCodes.Ldtoken> </xref:System.Reflection.Emit.OpCodes.Call>"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "현재 범위 내에 토큰을 가져옵니다. <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, 연결 된 동적 메서드에서 사용할 형식을 나타내는입니다."
  remarks: "이 메서드 오버 로드에서 반환 된 토큰을 사용 하면 로컬 변수 유형을 정의 하 고 현재와 관련 된 동적 메서드에서 형식의 인스턴스를 만들려는 msil <xref:System.Reflection.Emit.DynamicILInfo>개체입니다.</xref:System.Reflection.Emit.DynamicILInfo>       가져오려는 <xref:System.RuntimeTypeHandle>형식을 나타내는 사용 하 여는 <xref:System.Type.TypeHandle%2A?displayProperty=fullName>속성.</xref:System.Type.TypeHandle%2A?displayProperty=fullName> </xref:System.RuntimeTypeHandle>"
  syntax:
    content: public int GetTokenFor (RuntimeTypeHandle type);
    parameters:
    - id: type
      type: System.RuntimeTypeHandle
      description: "형식이 사용 됩니다."
    return:
      type: System.Int32
      description: "현재 범위에서 형식이 필요한 MSIL 명령의 피연산자로 사용할 수 있는 토큰 <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> 개체입니다."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  id: GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "현재 범위 내에 토큰을 가져옵니다. <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, 연결 된 동적 메서드에서 사용할 리터럴 문자열을 나타내는입니다."
  syntax:
    content: public int GetTokenFor (string literal);
    parameters:
    - id: literal
      type: System.String
      description: "사용할 문자열입니다."
    return:
      type: System.Int32
      description: "현재 범위에는 문자열을 필요로 하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰 <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> 개체입니다."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "현재 범위 내에 토큰을 가져옵니다. <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, 지정된 된 제네릭 형식에는 필드는 필드에서 연결된 된 동적 메서드에서;에 액세스할 수를 나타내는입니다."
  remarks: "현재와 관련 된 동적 메서드를 통해 액세스할 수 있는 모든 필드에 대 한 토큰을 얻어야 <xref:System.Reflection.Emit.DynamicILInfo>개체입니다.</xref:System.Reflection.Emit.DynamicILInfo> <xref:System.Type.GetField%2A?displayProperty=fullName> <xref:System.Reflection.FieldInfo>액세스 하 고 다음 <xref:System.Reflection.FieldInfo.FieldHandle%2A> <xref:System.RuntimeFieldHandle>.</xref:System.RuntimeFieldHandle> 가져올 속성</xref:System.Reflection.FieldInfo.FieldHandle%2A> 을 사용 하려면 필드에 대 한</xref:System.Reflection.FieldInfo> 가져올 메서드를</xref:System.Type.GetField%2A?displayProperty=fullName> 사용 하 여"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "액세스할 필드입니다."
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "제네릭 형식 필드에 속해 있습니다."
    return:
      type: System.Int32
      description: "현재 범위에 있는 필드에 액세스 하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰 <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> 개체입니다."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "현재 범위 내에 토큰을 가져옵니다. <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, 제네릭 형식에 메서드를 나타내는입니다."
  remarks: "현재와 연결 된 동적 메서드에서 호출 될 메서드에 대 한 토큰을 얻어야 <xref:System.Reflection.Emit.DynamicILInfo>개체입니다.</xref:System.Reflection.Emit.DynamicILInfo> <xref:System.Type.GetMethod%2A?displayProperty=fullName> <xref:System.Reflection.MethodInfo>호출 하 고 다음 <xref:System.Reflection.MethodBase.MethodHandle%2A> <xref:System.RuntimeMethodHandle>.</xref:System.RuntimeMethodHandle> 가져올 속성</xref:System.Reflection.MethodBase.MethodHandle%2A> 을 사용 하려는 방법에 대 한</xref:System.Reflection.MethodInfo> 가져올 메서드를</xref:System.Type.GetMethod%2A?displayProperty=fullName> 사용 하 여"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "메서드입니다."
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "메서드는 제네릭 형식에 속합니다."
    return:
      type: System.Int32
      description: "와 같은 메서드를 액세스 하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰 <xref:System.Reflection.Emit.OpCodes.Call>또는 <xref:System.Reflection.Emit.OpCodes.Ldtoken>, 현재 범위에서 <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> 개체입니다.</xref:System.Reflection.Emit.OpCodes.Ldtoken> </xref:System.Reflection.Emit.OpCodes.Call>"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  id: SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "연결 된 동적 메서드의 코드 본문을 설정합니다."
  remarks: "유효성을 검사 하지 않습니다는 MSIL 스트림에에서 수행 됩니다.       두 번째로이 메서드를 호출 합니다. 첫 번째 MSIL 스트림에 두 번째 바꿉니다.       사용자 고유의 메타 데이터와 MSIL를 생성 하려면 인프라 CLI (공용 언어) 설명서, &quot;II: 메타 데이터 정의 및 의미&quot; 및 &quot;III 파티션: CIL 명령 집합&quot; 경험 합니다. 이 설명서는 온라인입니다. 참조 [ECMA C# 및 Common Language Infrastructure 표준](http://go.microsoft.com/fwlink/?LinkID=99212) msdn 및 [Standard ecma-335-인프라 CLI (공용 언어)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 웹 사이트에 있습니다."
  syntax:
    content: public void SetCode (byte[] code, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte[]
      description: "MSIL 스트림에 포함 된 배열입니다."
    - id: maxStackSize
      type: System.Int32
      description: "메서드를 실행 하는 경우 피연산자 스택에 항목의 최대 수입니다."
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  id: SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "연결 된 동적 메서드의 코드 본문을 설정합니다."
  remarks: "유효성을 검사 하지 않습니다는 MSIL 스트림에에서 수행 됩니다.       두 번째로이 메서드를 호출 합니다. 첫 번째 MSIL 스트림에 두 번째 바꿉니다.       공용 언어 인프라 (CLI) 설명서의 &quot;II: 메타 데이터 정의 및 의미&quot;에 익숙한 사용자 고유의 메타 데이터와 MSIL를 생성 하려면 및 &quot;파티션 III: CIL 명령 집합을 사용 합니다.&quot; 이 설명서는 온라인입니다. 참조 [ECMA C# 및 Common Language Infrastructure 표준](http://go.microsoft.com/fwlink/?LinkID=99212) msdn 및 [Standard ecma-335-인프라 CLI (공용 언어)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 웹 사이트에 있습니다."
  syntax:
    content: public void SetCode (byte* code, int codeSize, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte*
      description: "MSIL 스트림에 포함 하는 바이트 배열에 대 한 포인터입니다."
    - id: codeSize
      type: System.Int32
      description: "MSIL 스트림에 바이트의 수입니다."
    - id: maxStackSize
      type: System.Int32
      description: "메서드를 실행 하는 경우 피연산자 스택에 항목의 최대 수입니다."
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>code</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 및 <code>codeSize</code> 0 보다 큽니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>codeSize</code>0 보다 작습니다."
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  id: SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "연결 된 동적 메서드의 예외 메타 데이터를 설정합니다."
  remarks: '메서드에 대 한 예외 메타 데이터 정의 모두의 크기와 위치 `try`, `catch`, `finally`, 필터링 하 고 오류 블록입니다. 이 메타 데이터의 레이아웃에 정보를 &quot;II: 메타 데이터 정의 및 의미&quot; 인프라 CLI (공용 언어) 설명서를 참조 합니다. 이 설명서는 온라인입니다. 참조 [ECMA C# 및 Common Language Infrastructure 표준](http://go.microsoft.com/fwlink/?LinkID=99212) msdn 및 [Standard ecma-335-인프라 CLI (공용 언어)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 웹 사이트에 있습니다.'
  syntax:
    content: public void SetExceptions (byte[] exceptions);
    parameters:
    - id: exceptions
      type: System.Byte[]
      description: "예외 메타 데이터가 포함 된 배열입니다."
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  id: SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "연결 된 동적 메서드의 예외 메타 데이터를 설정합니다."
  remarks: '메서드에 대 한 예외 메타 데이터 정의 모두의 크기와 위치 `try`, `catch`, `finally`, 필터링 하 고 오류 블록입니다. 이 메타 데이터의 레이아웃에 정보를 인프라 CLI (공용 언어) 설명서, &quot;II: 메타 데이터 정의 및 의미&quot; 및 &quot;III 파티션: CIL 명령 집합&quot;를 참조 하십시오. 이 설명서는 온라인입니다. 참조 [ECMA C# 및 Common Language Infrastructure 표준](http://go.microsoft.com/fwlink/?LinkID=99212) msdn 및 [Standard ecma-335-인프라 CLI (공용 언어)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 웹 사이트에 있습니다.'
  syntax:
    content: public void SetExceptions (byte* exceptions, int exceptionsSize);
    parameters:
    - id: exceptions
      type: System.Byte*
      description: "예외 메타 데이터를 포함 하는 바이트 배열에 대 한 포인터입니다."
    - id: exceptionsSize
      type: System.Int32
      description: "예외 메타 데이터의 바이트 수입니다."
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>exceptions</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 및 <code>exceptionSize</code> 0 보다 큽니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>exceptionSize</code>0 보다 작습니다."
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  id: SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "연결된 된 동적 메서드에서 대 한 지역 변수의 레이아웃을 설명 하는 지역 변수 시그니처를 설정 합니다."
  remarks: "로컬 변수 서명에 메서드의 로컬 변수가의 레이아웃을 설명 합니다. 로컬 변수 서명에의 생성을 간소화 하기 위해 사용 하 여는 `static` (`Shared` Visual basic에서) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>가져올 메서드를 한 <xref:System.Reflection.Emit.SignatureHelper>로컬 서명에 대 한.</xref:System.Reflection.Emit.SignatureHelper> </xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>       로컬 변수 서명에 대 한 자세한 내용은 &quot;II: 메타 데이터 정의 및 의미&quot; 인프라 CLI (공용 언어) 설명서를 참조 합니다. 이 설명서는 온라인입니다. 참조 [ECMA C# 및 Common Language Infrastructure 표준](http://go.microsoft.com/fwlink/?LinkID=99212) msdn 및 [Standard ecma-335-인프라 CLI (공용 언어)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 웹 사이트에 있습니다."
  syntax:
    content: public void SetLocalSignature (byte[] localSignature);
    parameters:
    - id: localSignature
      type: System.Byte[]
      description: "지역 변수 <xref:System.Reflection.Emit.DynamicMethod>.</xref:System.Reflection.Emit.DynamicMethod> 연결된에 대 한 레이아웃을 포함 하는 배열"
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  id: SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "연결된 된 동적 메서드에서 대 한 지역 변수의 레이아웃을 설명 하는 지역 변수 시그니처를 설정 합니다."
  remarks: "로컬 변수 서명에 메서드의 로컬 변수가의 레이아웃을 설명 합니다. 로컬 변수 서명에의 생성을 간소화 하기 위해 사용 하 여는 `static` (`Shared` Visual basic에서) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>가져올 메서드를 한 <xref:System.Reflection.Emit.SignatureHelper>로컬 서명에 대 한.</xref:System.Reflection.Emit.SignatureHelper> </xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>       로컬 변수 서명에 대 한 자세한 내용은 &quot;II: 메타 데이터 정의 및 의미&quot; 인프라 CLI (공용 언어) 설명서를 참조 합니다. 이 설명서는 온라인입니다. 참조 [ECMA C# 및 Common Language Infrastructure 표준](http://go.microsoft.com/fwlink/?LinkID=99212) msdn 및 [Standard ecma-335-인프라 CLI (공용 언어)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 웹 사이트에 있습니다."
  syntax:
    content: public void SetLocalSignature (byte* localSignature, int signatureSize);
    parameters:
    - id: localSignature
      type: System.Byte*
      description: "지역 변수 <xref:System.Reflection.Emit.DynamicMethod>.</xref:System.Reflection.Emit.DynamicMethod> 연결된에 대 한 레이아웃을 포함 하는 배열"
    - id: signatureSize
      type: System.Int32
      description: "서명의 바이트 수입니다."
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localSignature</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 및 <code>signatureSize</code> 0 보다 큽니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>signatureSize</code>0 보다 작습니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicMethod
  parent: System.Reflection.Emit
  isExternal: true
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: true
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: true
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: true
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor
  nameWithType: DynamicILInfo.GetTokenFor
- uid: System.Reflection.Emit.DynamicILInfo.SetCode*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode
  nameWithType: DynamicILInfo.SetCode
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions
  nameWithType: DynamicILInfo.SetExceptions
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature
  nameWithType: DynamicILInfo.SetLocalSignature
