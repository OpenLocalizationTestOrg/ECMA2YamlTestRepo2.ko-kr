### YamlMime:ManagedReference
items:
- uid: System.Messaging.AccessControlList
  id: AccessControlList
  children:
  - System.Messaging.AccessControlList.#ctor
  - System.Messaging.AccessControlList.Add(System.Messaging.AccessControlEntry)
  - System.Messaging.AccessControlList.Contains(System.Messaging.AccessControlEntry)
  - System.Messaging.AccessControlList.CopyTo(System.Messaging.AccessControlEntry[],System.Int32)
  - System.Messaging.AccessControlList.IndexOf(System.Messaging.AccessControlEntry)
  - System.Messaging.AccessControlList.Insert(System.Int32,System.Messaging.AccessControlEntry)
  - System.Messaging.AccessControlList.Remove(System.Messaging.AccessControlEntry)
  langs:
  - csharp
  name: AccessControlList
  nameWithType: AccessControlList
  fullName: System.Messaging.AccessControlList
  type: Class
  summary: "하나 이상의 트러스티에 대 한 액세스 권한을 지정 하는 액세스 제어 항목의 목록을 포함 합니다."
  remarks: "AccessControlList 클래스를 사용 하 여 여러 트러스티 지정 액세스 권한을 설정할 때 한 번의 호출을 추가할 권한. 각 트러스티 및 액세스 권한 조합에 대 한 액세스 제어 항목을 추가 하 여 액세스 제어 목록을 생성 합니다.       AccessControlList 허용 또는 보안 개체에 대 한 액세스를 거부 하는 트러스티를 식별 합니다. 프로세스에는 보안 가능한 개체에 액세스 하려고 하는 경우 시스템에 대 한 액세스를 부여할 것인지 여부를 결정 하는 개체의 액세스 제어 목록의 액세스 제어 항목을 확인 합니다. 개체는 액세스 제어 목록에 없는 경우 시스템의 모든 공간에 대 한 모든 권한을 부여 합니다. 개체의 액세스 제어 목록에 항목이 없는 경우 시스템 개체에 액세스 하려는 모든 시도 거부 합니다.       시스템 또는 하나 이상의 모든 요청 된 액세스 권한을 허용 하는 찾을 때까지 요청 된 액세스 권한에 거부 될 때까지 시퀀스의 액세스 제어 항목을 확인 합니다.       각 시스템 검사 <xref:System.Messaging.AccessControlEntry>다음 이벤트 중 하나가 발생할 때까지 시퀀스의:-액세스 거부 <xref:System.Messaging.AccessControlEntry>는 스레드의 액세스 토큰에 표시 된 트러스티 중 하나에 요청 된 액세스 권한을 명시적으로 거부 합니다.</xref:System.Messaging.AccessControlEntry> </xref:System.Messaging.AccessControlEntry>      -하나 이상의 액세스가 허용 된 <xref:System.Messaging.AccessControlEntry>트러스티는 스레드의 액세스 토큰에 명시적으로 나열 된 모든 요청 된 액세스 권한 부여에 대 한 항목입니다.</xref:System.Messaging.AccessControlEntry>      -모든 <xref:System.Messaging.AccessControlEntry>가 항목을 체크 이며 여전히 하나 이상의 요청 된 액세스 권한이 허용 되지 않은 명시적으로,이 경우 암시적으로 액세스할 수 있습니다.</xref:System.Messaging.AccessControlEntry>"
  syntax:
    content: 'public class AccessControlList : System.Collections.CollectionBase'
  inheritance:
  - System.Object
  - System.Collections.CollectionBase
  implements: []
  inheritedMembers:
  - System.Collections.CollectionBase.Capacity
  - System.Collections.CollectionBase.Clear
  - System.Collections.CollectionBase.Count
  - System.Collections.CollectionBase.GetEnumerator
  - System.Collections.CollectionBase.InnerList
  - System.Collections.CollectionBase.List
  - System.Collections.CollectionBase.OnClear
  - System.Collections.CollectionBase.OnClearComplete
  - System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnValidate(System.Object)
  - System.Collections.CollectionBase.RemoveAt(System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  - System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  - System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  - System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  - System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  platform:
  - net462
- uid: System.Messaging.AccessControlList.#ctor
  id: '#ctor'
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: AccessControlList()
  nameWithType: AccessControlList.AccessControlList()
  fullName: System.Messaging.AccessControlList.AccessControlList()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Messaging.AccessControlList&quot;> </xref> 클래스입니다."
  syntax:
    content: public AccessControlList ();
    parameters: []
  overload: System.Messaging.AccessControlList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.AccessControlList.Add(System.Messaging.AccessControlEntry)
  id: Add(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: Add(AccessControlEntry)
  nameWithType: AccessControlList.Add(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Add(AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "액세스 제어 목록에 액세스 제어 항목을 추가합니다."
  syntax:
    content: public int Add (System.Messaging.AccessControlEntry entry);
    parameters:
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "A <xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> 액세스 제어 목록 끝에 추가 합니다."
    return:
      type: System.Int32
      description: "새 액세스 제어 항목 삽입 된 위치입니다."
  overload: System.Messaging.AccessControlList.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>entry</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.AccessControlList.Contains(System.Messaging.AccessControlEntry)
  id: Contains(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: Contains(AccessControlEntry)
  nameWithType: AccessControlList.Contains(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Contains(AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "특정 액세스 제어 항목 액세스 제어 목록에 포함 되는지 여부를 결정 합니다."
  syntax:
    content: public bool Contains (System.Messaging.AccessControlEntry entry);
    parameters:
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "<xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> 액세스 제어 목록에서 찾으려고 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>액세스 제어 목록;에 대 한 액세스 제어 항목이 발견 되는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Messaging.AccessControlList.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.AccessControlList.CopyTo(System.Messaging.AccessControlEntry[],System.Int32)
  id: CopyTo(System.Messaging.AccessControlEntry[],System.Int32)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: CopyTo(AccessControlEntry[],Int32)
  nameWithType: AccessControlList.CopyTo(AccessControlEntry[],Int32)
  fullName: System.Messaging.AccessControlList.CopyTo(AccessControlEntry[],Int32)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "복사본의 access 호환 가능한&1; 차원 배열에 전체 액세스 제어 목록 항목, 대상 배열의 지정한 인덱스에서 시작을 제어 합니다."
  syntax:
    content: public void CopyTo (System.Messaging.AccessControlEntry[] array, int index);
    parameters:
    - id: array
      type: System.Messaging.AccessControlEntry[]
      description: "형식의 배열 <xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> 액세스 제어 목록 항목 복사 될 합니다. 배열에는&0;부터 시작 하는 인덱스가 있어야 합니다."
    - id: index
      type: System.Int32
      description: "액세스 제어 목록 항목을 복사 하기 시작할 배열의 인덱스입니다."
  overload: System.Messaging.AccessControlList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>array</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> index </code> 매개 변수는&0; 보다 작은 합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> index </code> 매개 변수는 길이 보다 크거나는 <code> array </code> 매개 변수입니다.       -또는-소스 액세스 제어 목록에 있는 요소의 수는 사용 가능한 공간 보다 큽니다. <code> index </code> 액세스 제어 항목의 대상 배열의 끝에 있습니다."
  platform:
  - net462
- uid: System.Messaging.AccessControlList.IndexOf(System.Messaging.AccessControlEntry)
  id: IndexOf(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: IndexOf(AccessControlEntry)
  nameWithType: AccessControlList.IndexOf(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.IndexOf(AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "액세스 제어 목록에 대 한 액세스 제어 항목의 특정 인덱스를 결정합니다."
  syntax:
    content: public int IndexOf (System.Messaging.AccessControlEntry entry);
    parameters:
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "<xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> 액세스 제어 목록에서 찾으려고 합니다."
    return:
      type: System.Int32
      description: "목록에 발견 된 경우 항목의 인덱스 그렇지 않으면-1"
  overload: System.Messaging.AccessControlList.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.AccessControlList.Insert(System.Int32,System.Messaging.AccessControlEntry)
  id: Insert(System.Int32,System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: Insert(Int32,AccessControlEntry)
  nameWithType: AccessControlList.Insert(Int32,AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Insert(Int32,AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "지정된 된 위치에 대 한 액세스 제어 목록으로 액세스 제어 항목을 삽입합니다."
  remarks: "경우는 `index` 매개 변수 액세스 제어 목록에 있는 항목의 수 같으면 끝에 항목이 추가 됩니다. 그렇지 않으면 삽입 지점 뒤에 있는 항목이 목록에 새 항목을 수용 하기 위해 아래로 이동 합니다."
  syntax:
    content: public void Insert (int index, System.Messaging.AccessControlEntry entry);
    parameters:
    - id: index
      type: System.Int32
      description: "액세스 제어 항목을 삽입할&0;부터 시작 하는 인덱스입니다."
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "A <xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> 액세스 제어 목록에 삽입 하 합니다."
  overload: System.Messaging.AccessControlList.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> index </code> 매개 변수는이 액세스 제어 목록에 유효한 인덱스가 아닙니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>entry</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.AccessControlList.Remove(System.Messaging.AccessControlEntry)
  id: Remove(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: Remove(AccessControlEntry)
  nameWithType: AccessControlList.Remove(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Remove(AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "액세스 제어 목록에서 맨 처음 발견 되는 특정 액세스 제어 항목을 제거합니다."
  remarks: "제거 된 항목에 따라 액세스 제어 항목 위로 이동 하 여 빈된 자리를 차지 합니다."
  syntax:
    content: public void Remove (System.Messaging.AccessControlEntry entry);
    parameters:
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "<xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> 액세스 제어 목록에서를 제거 합니다."
  overload: System.Messaging.AccessControlList.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>entry</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.CollectionBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Messaging.AccessControlList.#ctor
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: AccessControlList()
  nameWithType: AccessControlList.AccessControlList()
  fullName: System.Messaging.AccessControlList.AccessControlList()
- uid: System.Messaging.AccessControlList.Add(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Add(AccessControlEntry)
  nameWithType: AccessControlList.Add(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Add(AccessControlEntry)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Messaging.AccessControlEntry
  parent: System.Messaging
  isExternal: false
  name: AccessControlEntry
  nameWithType: AccessControlEntry
  fullName: System.Messaging.AccessControlEntry
- uid: System.Messaging.AccessControlList.Contains(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Contains(AccessControlEntry)
  nameWithType: AccessControlList.Contains(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Contains(AccessControlEntry)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.AccessControlList.CopyTo(System.Messaging.AccessControlEntry[],System.Int32)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: CopyTo(AccessControlEntry[],Int32)
  nameWithType: AccessControlList.CopyTo(AccessControlEntry[],Int32)
  fullName: System.Messaging.AccessControlList.CopyTo(AccessControlEntry[],Int32)
- uid: System.Messaging.AccessControlEntry[]
  parent: System.Messaging
  isExternal: false
  name: AccessControlEntry
  nameWithType: AccessControlEntry
  fullName: System.Messaging.AccessControlEntry[]
  spec.csharp:
  - uid: System.Messaging.AccessControlEntry
    name: AccessControlEntry
    nameWithType: AccessControlEntry
    fullName: AccessControlEntry[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.AccessControlList.IndexOf(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: IndexOf(AccessControlEntry)
  nameWithType: AccessControlList.IndexOf(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.IndexOf(AccessControlEntry)
- uid: System.Messaging.AccessControlList.Insert(System.Int32,System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Insert(Int32,AccessControlEntry)
  nameWithType: AccessControlList.Insert(Int32,AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Insert(Int32,AccessControlEntry)
- uid: System.Messaging.AccessControlList.Remove(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Remove(AccessControlEntry)
  nameWithType: AccessControlList.Remove(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Remove(AccessControlEntry)
- uid: System.Messaging.AccessControlList.#ctor*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: AccessControlList
  nameWithType: AccessControlList.AccessControlList
- uid: System.Messaging.AccessControlList.Add*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Add
  nameWithType: AccessControlList.Add
- uid: System.Messaging.AccessControlList.Contains*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Contains
  nameWithType: AccessControlList.Contains
- uid: System.Messaging.AccessControlList.CopyTo*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: CopyTo
  nameWithType: AccessControlList.CopyTo
- uid: System.Messaging.AccessControlList.IndexOf*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: IndexOf
  nameWithType: AccessControlList.IndexOf
- uid: System.Messaging.AccessControlList.Insert*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Insert
  nameWithType: AccessControlList.Insert
- uid: System.Messaging.AccessControlList.Remove*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Remove
  nameWithType: AccessControlList.Remove
