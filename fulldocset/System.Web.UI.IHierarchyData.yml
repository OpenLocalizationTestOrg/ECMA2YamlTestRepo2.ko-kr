### YamlMime:ManagedReference
items:
- uid: System.Web.UI.IHierarchyData
  id: IHierarchyData
  children:
  - System.Web.UI.IHierarchyData.GetChildren
  - System.Web.UI.IHierarchyData.GetParent
  - System.Web.UI.IHierarchyData.HasChildren
  - System.Web.UI.IHierarchyData.Item
  - System.Web.UI.IHierarchyData.Path
  - System.Web.UI.IHierarchyData.Type
  langs:
  - csharp
  name: IHierarchyData
  nameWithType: IHierarchyData
  fullName: System.Web.UI.IHierarchyData
  type: Interface
  summary: "노드의 특성을 설명 하는 일부 속성과 노드 개체를 포함 하 여 계층적 데이터 구조의 노드를 노출 합니다. IHierarchyData 인터페이스를 구현 하는 개체에 포함 될 수 있는 <xref href=&quot;System.Web.UI.IHierarchicalEnumerable&quot;> </xref> 컬렉션, 및가 사용 되는 ASP.NET 사이트 탐색 및 데이터 소스 컨트롤입니다."
  remarks: "IHierarchyData 인터페이스의 계층 구조 노드를 나타내고 해당 부모 및 자식 노드를 계층 관계를 추적 하는 클래스에서 구현 됩니다. IHierarchyData 인터페이스를 구현 하는 클래스를 구현 하는 컬렉션에 포함 될 수는 <xref:System.Web.UI.IHierarchicalEnumerable>인터페이스.</xref:System.Web.UI.IHierarchicalEnumerable>"
  example:
  - "The following code example demonstrates how to implement the IHierarchyData interface with a class that wraps a <xref:System.IO.FileSystemInfo> object. The <xref:System.IO.FileSystemInfo> class is a good example of a hierarchical data node, which the IHierarchyData interface represents for ASP.NET hierarchical data source controls. This code example is part of a larger example provided for the <xref:System.Web.UI.HierarchicalDataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.FileSystemDataSource_1#5](~/add/codesnippet/csharp/t-system.web.ui.ihierarc_0_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#5](~/add/codesnippet/visualbasic/t-system.web.ui.ihierarc_0_1.vb)]  \n  \n The following code example demonstrates how to recursively iterate through an <xref:System.Web.UI.IHierarchicalEnumerable> collection, extract the IHierarchyData item from the enumerator using the <xref:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData%2A> method, and perform basic work with the data item.  \n  \n [!code-cs[System.Web.UI.IHierarchyData_1#1](~/add/codesnippet/csharp/t-system.web.ui.ihierarc_0_2.aspx)]\n [!code-vb[System.Web.UI.IHierarchyData_1#1](~/add/codesnippet/visualbasic/t-system.web.ui.ihierarc_0_2.aspx)]"
  syntax:
    content: public interface IHierarchyData
  implements: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.GetChildren
  id: GetChildren
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: GetChildren()
  nameWithType: IHierarchyData.GetChildren()
  fullName: System.Web.UI.IHierarchyData.GetChildren()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "현재 계층 노드의 모든 자식 노드를 나타내는 열거형 개체를 가져옵니다."
  remarks: "사용할 수는 <xref:System.Web.UI.IHierarchyData.HasChildren%2A>속성을 확인 여부는 <xref:System.Web.UI.IHierarchyData>자식 노드가.</xref:System.Web.UI.IHierarchyData> </xref:System.Web.UI.IHierarchyData.HasChildren%2A>"
  example:
  - "The following code example demonstrates how to check the <xref:System.Web.UI.IHierarchyData.HasChildren%2A> property to determine whether the current hierarchical data node has child nodes, and retrieve them using the GetChildren method. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface.  \n  \n [!code-cs[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/csharp/m-system.web.ui.ihierarc_3_1.cs)]\n [!code-vb[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/visualbasic/m-system.web.ui.ihierarc_3_1.vb)]"
  syntax:
    content: public System.Web.UI.IHierarchicalEnumerable GetChildren ();
    parameters: []
    return:
      type: System.Web.UI.IHierarchicalEnumerable
      description: "<xref href=&quot;System.Web.UI.IHierarchicalEnumerable&quot;> </xref> 계층적 현재 노드의 자식 노드의 컬렉션입니다."
  overload: System.Web.UI.IHierarchyData.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.GetParent
  id: GetParent
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: GetParent()
  nameWithType: IHierarchyData.GetParent()
  fullName: System.Web.UI.IHierarchyData.GetParent()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "가져옵니다는 <xref href=&quot;System.Web.UI.IHierarchyData&quot;> </xref> 계층적 현재 노드의 부모 노드를 나타내는 개체입니다."
  remarks: "<xref:System.Web.UI.IHierarchyData>인터페이스 HasParent 편의 속성을 정의 하지 않으므로 호출자에 대 한 GetParent 메서드의 반환 값을 확인 해야 합니다 `null` 확인 하려면 여부 현재 <xref:System.Web.UI.IHierarchyData>노드는 노드가 속한 계층적 데이터 구조의 루트 노드는.</xref:System.Web.UI.IHierarchyData> </xref:System.Web.UI.IHierarchyData>"
  example:
  - "The following code example demonstrates how to implement the GetParent method in a class that implements the <xref:System.Web.UI.IHierarchyData> interface. The `FileSystemHierarchyData` class wraps a <xref:System.IO.FileSystemInfo> object, and the GetParent method implementation checks the type of the <xref:System.IO.FileSystemInfo> object, and returns the appropriate parent object based on the type. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface and the <xref:System.Web.UI.HierarchicalDataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.FileSystemDataSource_1#10](~/add/codesnippet/csharp/m-system.web.ui.ihierarc_1_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#10](~/add/codesnippet/visualbasic/m-system.web.ui.ihierarc_1_1.vb)]"
  syntax:
    content: public System.Web.UI.IHierarchyData GetParent ();
    parameters: []
    return:
      type: System.Web.UI.IHierarchyData
      description: "<xref href=&quot;System.Web.UI.IHierarchyData&quot;> </xref> 계층적 현재 노드의 부모 노드를 나타내는 개체입니다."
  overload: System.Web.UI.IHierarchyData.GetParent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.HasChildren
  id: HasChildren
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: HasChildren
  nameWithType: IHierarchyData.HasChildren
  fullName: System.Web.UI.IHierarchyData.HasChildren
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "나타냅니다 있는지 여부를 계층적 데이터 노드는는 <xref href=&quot;System.Web.UI.IHierarchyData&quot;> </xref> 개체에서 나타내는 자식 노드가 있습니다."
  remarks: "HasChildren 속성은 호출자의 반환 값을 확인 하지 않으려면 수 있도록 해 주는 편의 속성은 <xref:System.Web.UI.IHierarchyData.GetChildren%2A>방법을 `null`.</xref:System.Web.UI.IHierarchyData.GetChildren%2A> HasChildren 속성이 반환 하는 경우 `true`, 호출 된 <xref:System.Web.UI.IHierarchyData.GetChildren%2A>를 검색할 메서드는 <xref:System.Web.UI.IHierarchicalEnumerable>자식 노드의 컬렉션입니다.</xref:System.Web.UI.IHierarchicalEnumerable> </xref:System.Web.UI.IHierarchyData.GetChildren%2A>"
  example:
  - "The following code example demonstrates how an ASP.NET hierarchical data-bound control uses an <xref:System.Web.UI.IHierarchyData> object in a recursive data-binding method. The items in an <xref:System.Web.UI.IHierarchicalEnumerable> collection are enumerated, and for each an <xref:System.Web.UI.IHierarchyData> object is retrieved using the <xref:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData%2A> method. Finally, the HasChildren property is checked to determine whether to recurse. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.HierarchicalDataBoundControl> class.  \n  \n [!code-vb[Samples.AspNet.GeneologyTree#5](~/add/codesnippet/visualbasic/p-system.web.ui.ihierarc_3_1.vb)]\n [!code-cs[Samples.AspNet.GeneologyTree#5](~/add/codesnippet/csharp/p-system.web.ui.ihierarc_3_1.cs)]"
  syntax:
    content: public bool HasChildren { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 노드에 자식 노드가 있으면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.IHierarchyData.HasChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.Item
  id: Item
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: Item
  nameWithType: IHierarchyData.Item
  fullName: System.Web.UI.IHierarchyData.Item
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "계층적 데이터 노드를 가져옵니다는 <xref href=&quot;System.Web.UI.IHierarchyData&quot;> </xref> 개체가 나타내는입니다."
  remarks: "다 수의 클래스와 같은 계층적 데이터 노드를 나타내는 반면는 <xref:System.Web.SiteMapNode>클래스를 구현에서 <xref:System.Web.UI.IHierarchyData>인터페이스를 직접, 다른 클래스는 인터페이스를 구현 하지 않는 클래스에 대 한 래퍼 역할만.</xref:System.Web.UI.IHierarchyData> </xref:System.Web.SiteMapNode> 비즈니스 개체는 기능적으로 동일 경우 경우가 항목은 제공 된 <xref:System.Web.UI.IHierarchyData>개체 하지만 쉽게 다시 디자인 될 수 없습니다.</xref:System.Web.UI.IHierarchyData>"
  example:
  - "The following code example demonstrates how to access <xref:System.Web.UI.IHierarchyData> properties, check the type of an <xref:System.Web.UI.IHierarchyData> object using the <xref:System.Web.UI.IHierarchyData.Type%2A> property, and cast the object to perform more type-specific operations. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface.  \n  \n [!code-cs[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/csharp/p-system.web.ui.ihierarc_1_1.cs)]\n [!code-vb[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/visualbasic/p-system.web.ui.ihierarc_1_1.vb)]"
  syntax:
    content: public object Item { get; }
    return:
      type: System.Object
      description: "<xref:System.Object>계층적 데이터 노드 개체입니다.</xref:System.Object>"
  overload: System.Web.UI.IHierarchyData.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.Path
  id: Path
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: Path
  nameWithType: IHierarchyData.Path
  fullName: System.Web.UI.IHierarchyData.Path
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "노드의 계층 경로 가져옵니다."
  remarks: "Path 속성 <xref:System.Web.UI.HierarchicalDataSourceControl.GetHierarchicalView%2A> <xref:System.Web.UI.HierarchicalDataSourceView>경로로 식별 된 노드에 해당 하는 개체</xref:System.Web.UI.HierarchicalDataSourceView> 를 검색 하는 메서드</xref:System.Web.UI.HierarchicalDataSourceControl.GetHierarchicalView%2A> 를 전달할 수 있습니다.      > [!CAUTION] > Path 속성으로 클라이언트는 데이터 바인딩된 컨트롤에 렌더링 될 수 있으므로 때문에 호스트 환경에 대 한 중요 한 정보를 포함 하지 않습니다."
  example:
  - "The following code example demonstrates how to implement the Path property in a class that implements the <xref:System.Web.UI.IHierarchyData> interface. The `FileSystemHierarchyData` class wraps a <xref:System.IO.FileSystemInfo> object, and the Path property implementation returns its file system path. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface and the <xref:System.Web.UI.HierarchicalDataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.FileSystemDataSource_1#7](~/add/codesnippet/csharp/p-system.web.ui.ihierarc_0_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#7](~/add/codesnippet/visualbasic/p-system.web.ui.ihierarc_0_1.vb)]"
  syntax:
    content: public string Path { get; }
    return:
      type: System.String
      description: "A <xref:System.String>현재 노드를 기준으로 계층 경로 식별 하는.</xref:System.String>"
  overload: System.Web.UI.IHierarchyData.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.Type
  id: Type
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: Type
  nameWithType: IHierarchyData.Type
  fullName: System.Web.UI.IHierarchyData.Type
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "형식 이름을 가져옵니다 <xref:System.Object>에 포함 된는 <xref:System.Web.UI.IHierarchyData.Item*>속성.</xref:System.Web.UI.IHierarchyData.Item*> </xref:System.Object>"
  remarks: "Type 속성을 반환 하지 않습니다는 <xref:System.Type?displayProperty=fullName>에 표시 되는 개체의 한 <xref:System.Web.UI.IHierarchyData>개체입니다.</xref:System.Web.UI.IHierarchyData> </xref:System.Type?displayProperty=fullName> 계층의 서로 다른 바인딩 가능 속성을 가진 항목을 구분 하기 위해 데이터 바인딩된 컨트롤에서 사용 하는 이름을 반환 합니다."
  example:
  - "The following code example demonstrates how to write the basic <xref:System.Web.UI.IHierarchyData> properties to an <xref:System.Web.HttpResponse> stream, then check the type of an <xref:System.Web.UI.IHierarchyData> object using the Type property and cast the object to perform more type-specific operations. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface.  \n  \n [!code-cs[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/csharp/p-system.web.ui.ihierarc_2_1.cs)]\n [!code-vb[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/visualbasic/p-system.web.ui.ihierarc_2_1.vb)]"
  syntax:
    content: public string Type { get; }
    return:
      type: System.String
      description: "개체의 형식 이름에서 <xref href=&quot;System.Web.UI.IHierarchyData&quot;> </xref> 개체가 나타내는입니다."
  overload: System.Web.UI.IHierarchyData.Type*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.IHierarchyData.GetChildren
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: GetChildren()
  nameWithType: IHierarchyData.GetChildren()
  fullName: System.Web.UI.IHierarchyData.GetChildren()
- uid: System.Web.UI.IHierarchicalEnumerable
  parent: System.Web.UI
  isExternal: false
  name: IHierarchicalEnumerable
  nameWithType: IHierarchicalEnumerable
  fullName: System.Web.UI.IHierarchicalEnumerable
- uid: System.Web.UI.IHierarchyData.GetParent
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: GetParent()
  nameWithType: IHierarchyData.GetParent()
  fullName: System.Web.UI.IHierarchyData.GetParent()
- uid: System.Web.UI.IHierarchyData
  parent: System.Web.UI
  isExternal: false
  name: IHierarchyData
  nameWithType: IHierarchyData
  fullName: System.Web.UI.IHierarchyData
- uid: System.Web.UI.IHierarchyData.HasChildren
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: HasChildren
  nameWithType: IHierarchyData.HasChildren
  fullName: System.Web.UI.IHierarchyData.HasChildren
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.IHierarchyData.Item
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Item
  nameWithType: IHierarchyData.Item
  fullName: System.Web.UI.IHierarchyData.Item
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.IHierarchyData.Path
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Path
  nameWithType: IHierarchyData.Path
  fullName: System.Web.UI.IHierarchyData.Path
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.IHierarchyData.Type
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Type
  nameWithType: IHierarchyData.Type
  fullName: System.Web.UI.IHierarchyData.Type
- uid: System.Web.UI.IHierarchyData.GetChildren*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: GetChildren
  nameWithType: IHierarchyData.GetChildren
- uid: System.Web.UI.IHierarchyData.GetParent*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: GetParent
  nameWithType: IHierarchyData.GetParent
- uid: System.Web.UI.IHierarchyData.HasChildren*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: HasChildren
  nameWithType: IHierarchyData.HasChildren
- uid: System.Web.UI.IHierarchyData.Item*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Item
  nameWithType: IHierarchyData.Item
- uid: System.Web.UI.IHierarchyData.Path*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Path
  nameWithType: IHierarchyData.Path
- uid: System.Web.UI.IHierarchyData.Type*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Type
  nameWithType: IHierarchyData.Type
