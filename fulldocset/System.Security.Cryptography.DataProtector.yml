### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DataProtector
  id: DataProtector
  children:
  - System.Security.Cryptography.DataProtector.#ctor(System.String,System.String,System.String[])
  - System.Security.Cryptography.DataProtector.ApplicationName
  - System.Security.Cryptography.DataProtector.Create(System.String,System.String,System.String,System.String[])
  - System.Security.Cryptography.DataProtector.GetHashedPurpose
  - System.Security.Cryptography.DataProtector.IsReprotectRequired(System.Byte[])
  - System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
  - System.Security.Cryptography.DataProtector.PrimaryPurpose
  - System.Security.Cryptography.DataProtector.Protect(System.Byte[])
  - System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])
  - System.Security.Cryptography.DataProtector.ProviderUnprotect(System.Byte[])
  - System.Security.Cryptography.DataProtector.SpecificPurposes
  - System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])
  langs:
  - csharp
  name: DataProtector
  nameWithType: DataProtector
  fullName: System.Security.Cryptography.DataProtector
  type: Class
  summary: "데이터 보호 기능에 대 한 기본 클래스를 제공 합니다."
  remarks: "This class protects stored data from viewing and tampering. The access to the protected data is obtained by creating an instance of this class and using the exact purpose strings that were used to protect the data.  The caller does not need a key to either protect or unprotect the data. The key is provided by the encryption algorithm.  \n  \n Derived classes must override the [ProviderProtect(Byte\\[\\])](assetId:///M:System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])?qualifyHint=False&autoUpgrade=True) and <xref:System.Security.Cryptography.DataProtector.Unprotect%2A> methods, which the DataProtector base class calls back into. They must also override the <xref:System.Security.Cryptography.DataProtector.IsReprotectRequired%2A> method, which can always return `true` with a  potential small loss of efficiency when applications refresh their database of stored cipher text. Derived classes should provide a constructor that calls the base class constructor, which sets the <xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>, <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>, and <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> properties."
  example:
  - "The following example demonstrates how to create a data protector that uses a protection class with an option for extra entropy. By default, the DataProtector class prepends the hash of the purpose properties to the data to be encrypted. You can turn that functionality off and use the hashed purpose as extra entropy when calling a data protector with an extra entropy option.  \n  \n [!code-cs[Cryptography.DataProtector#1](~/add/codesnippet/csharp/t-system.security.crypto_7_1.cs)]\n [!code-vb[Cryptography.DataProtector#1](~/add/codesnippet/visualbasic/t-system.security.crypto_7_1.vb)]  \n  \n The following example demonstrates a simple data protector that uses the <xref:System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext%2A> functionality of the DataProtector class.  \n  \n [!code-vb[Cryptography.MemoryProtector#1](~/add/codesnippet/visualbasic/t-system.security.crypto_7_2.vb)]\n [!code-cs[Cryptography.MemoryProtector#1](~/add/codesnippet/csharp/t-system.security.crypto_7_2.cs)]"
  syntax:
    content: public abstract class DataProtector
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.#ctor(System.String,System.String,System.String[])
  id: '#ctor(System.String,System.String,System.String[])'
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: DataProtector(String,String,String[])
  nameWithType: DataProtector.DataProtector(String,String,String[])
  fullName: System.Security.Cryptography.DataProtector.DataProtector(String,String,String[])
  type: Constructor
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 만듭니다는 <xref href=&quot;System.Security.Cryptography.DataProtector&quot;> </xref> 제공 된 응용 프로그램 이름, 주요 목적 및 특정 목적을 위해 사용 하 여 클래스입니다."
  remarks: "이 생성자는 설정의 <xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>, <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>, 및 <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>속성.</xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> </xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> </xref:System.Security.Cryptography.DataProtector.ApplicationName%2A> 이 세 가지 속성의 조합 보호 하는 데이터를 고유 하 게 식별 해야 합니다. 데이터가 고유 하 게 식별 되어 있지 않으면 잘못 된 데이터를 읽어 실수로 또는 내용에 대 한 기타 데이터를 대체할 수 있습니다. 기본 및 특정 목적 쌍의 예로 &quot;송장&quot;는 하 및 송장 번호, &quot;선물 카드&quot; 및 선물 카드 번호, &quot;password&quot; 및 URL 문자열입니다."
  syntax:
    content: protected DataProtector (string applicationName, string primaryPurpose, string[] specificPurposes);
    parameters:
    - id: applicationName
      type: System.String
      description: "응용 프로그램의 이름입니다."
    - id: primaryPurpose
      type: System.String
      description: "보호 된 데이터에 대 한 기본 용도입니다. 중요 한 추가 정보에 대 한 설명을 참조 하세요."
    - id: specificPurposes
      type: System.String[]
      description: "보호 된 데이터에 대 한 특정 용도입니다. 중요 한 추가 정보에 대 한 설명을 참조 하세요."
  overload: System.Security.Cryptography.DataProtector.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>applicationName</code>빈 문자열 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다.       -또는- <code>primaryPurpose</code> 은 빈 문자열 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다.       -또는- <code>specificPurposes</code> 는 빈 문자열이 포함 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.ApplicationName
  id: ApplicationName
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: ApplicationName
  nameWithType: DataProtector.ApplicationName
  fullName: System.Security.Cryptography.DataProtector.ApplicationName
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "응용 프로그램의 이름을 가져옵니다."
  syntax:
    content: protected string ApplicationName { get; }
    return:
      type: System.String
      description: "응용 프로그램의 이름입니다."
  overload: System.Security.Cryptography.DataProtector.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.Create(System.String,System.String,System.String,System.String[])
  id: Create(System.String,System.String,System.String,System.String[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: Create(String,String,String,String[])
  nameWithType: DataProtector.Create(String,String,String,String[])
  fullName: System.Security.Cryptography.DataProtector.Create(String,String,String,String[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "데이터 보호자의 지정 된 클래스 이름, 응용 프로그램 이름, 주요 목적 및 특정 목적을 위해 사용 하 여 데이터 보호기 구현의 인스턴스를 만듭니다."
  syntax:
    content: public static System.Security.Cryptography.DataProtector Create (string providerClass, string applicationName, string primaryPurpose, string[] specificPurposes);
    parameters:
    - id: providerClass
      type: System.String
      description: "데이터 보호자에 대 한 클래스 이름입니다."
    - id: applicationName
      type: System.String
      description: "응용 프로그램의 이름입니다."
    - id: primaryPurpose
      type: System.String
      description: "보호 된 데이터에 대 한 기본 용도입니다."
    - id: specificPurposes
      type: System.String[]
      description: "보호 된 데이터에 대 한 특정 용도입니다."
    return:
      type: System.Security.Cryptography.DataProtector
      description: "데이터 보호자 구현 개체입니다."
  overload: System.Security.Cryptography.DataProtector.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>providerClass</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.GetHashedPurpose
  id: GetHashedPurpose
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: GetHashedPurpose()
  nameWithType: DataProtector.GetHashedPurpose()
  fullName: System.Security.Cryptography.DataProtector.GetHashedPurpose()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "생성자에 의해 지정 된 속성 값의 해시를 만듭니다."
  remarks: "GetHashedPurpose 응용 프로그램 이름 및 전체 용도의 해시를 계산 합니다.  전체 용도 모든 연결 된 <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>및 <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>속성.</xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> </xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>  각각의 세 부분에는 앞의 길이로 해시를 되돌릴 수 있도록 합니다."
  example:
  - "The following example shows how to use the GetHashedPurpose method to hash the purpose properties for use as extra entropy.  It is part of a larger code example for the <xref:System.Security.Cryptography.DataProtector> class.  \n  \n [!code-cs[Cryptography.DataProtector#3](~/add/codesnippet/csharp/m-system.security.crypto_107_1.cs)]\n [!code-vb[Cryptography.DataProtector#3](~/add/codesnippet/visualbasic/m-system.security.crypto_107_1.vb)]"
  syntax:
    content: protected virtual byte[] GetHashedPurpose ();
    parameters: []
    return:
      type: System.Byte[]
      description: "해시를 포함 하는 바이트 배열을 <> </> *>, <> </> *>, 및 <xref:System.Security.Cryptography.DataProtector.SpecificPurposes*>속성.</xref:System.Security.Cryptography.DataProtector.SpecificPurposes*>"
  overload: System.Security.Cryptography.DataProtector.GetHashedPurpose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.IsReprotectRequired(System.Byte[])
  id: IsReprotectRequired(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: IsReprotectRequired(Byte[])
  nameWithType: DataProtector.IsReprotectRequired(Byte[])
  fullName: System.Security.Cryptography.DataProtector.IsReprotectRequired(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "다시 암호화 하는 지정된 된 암호화 된 데이터에 필요한 경우를 결정 합니다."
  syntax:
    content: public abstract bool IsReprotectRequired (byte[] encryptedData);
    parameters:
    - id: encryptedData
      type: System.Byte[]
      description: "암호화 된 데이터 계산 되도록 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>데이터를 다시 암호화 해야 합니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Cryptography.DataProtector.IsReprotectRequired*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
  id: PrependHashedPurposeToPlaintext
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: PrependHashedPurposeToPlaintext
  nameWithType: DataProtector.PrependHashedPurposeToPlaintext
  fullName: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "해시 앞 암호화 하기 전에 텍스트 배열에 추가 되어 있는지 여부를 지정 합니다."
  remarks: "기본적으로 가정 파생 된 클래스의 해시를 추가 합니다는 <xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>, <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>, 및 <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>속성 암호화, 및가 앞에 있는 일반 텍스트를 확인 하 고 암호 해독 하는 동안 해시를 확인 합니다.</xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> </xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> </xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>  파생된 클래스는 자체적으로 앞에 추가 데이터를 지정 하려는 경우 (예: 선택적 엔트로피 값)으로이 속성 수 재정의 되 고 반환 하도록 설정 `false`합니다.  PrependHashedPurposeToPlaintext 이면 `false`, <xref:System.Security.Cryptography.DataProtector.Protect%2A>및 <xref:System.Security.Cryptography.DataProtector.Unprotect%2A>를 통해 직접 전달는 <xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A>및 <xref:System.Security.Cryptography.DataProtector.ProviderUnprotect%2A>바이트 배열을 변경 하지 않고 재정의.</xref:System.Security.Cryptography.DataProtector.ProviderUnprotect%2A> </xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A> </xref:System.Security.Cryptography.DataProtector.Unprotect%2A> </xref:System.Security.Cryptography.DataProtector.Protect%2A>"
  syntax:
    content: protected virtual bool PrependHashedPurposeToPlaintext { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.PrimaryPurpose
  id: PrimaryPurpose
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: PrimaryPurpose
  nameWithType: DataProtector.PrimaryPurpose
  fullName: System.Security.Cryptography.DataProtector.PrimaryPurpose
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "보호 된 데이터에 대 한 주요 목적은 가져옵니다."
  syntax:
    content: protected string PrimaryPurpose { get; }
    return:
      type: System.String
      description: "보호 된 데이터에 대 한 기본 용도입니다."
  overload: System.Security.Cryptography.DataProtector.PrimaryPurpose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.Protect(System.Byte[])
  id: Protect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: Protect(Byte[])
  nameWithType: DataProtector.Protect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.Protect(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "지정 된 사용자 데이터를 보호합니다."
  syntax:
    content: public byte[] Protect (byte[] userData);
    parameters:
    - id: userData
      type: System.Byte[]
      description: "데이터를 보호할 수입니다."
    return:
      type: System.Byte[]
      description: "암호화 된 데이터를 포함 하는 바이트 배열입니다."
  overload: System.Security.Cryptography.DataProtector.Protect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>userData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])
  id: ProviderProtect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: ProviderProtect(Byte[])
  nameWithType: DataProtector.ProviderProtect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.ProviderProtect(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "파생 된 대리자 메서드는 클래스를 지정 된 <xref:System.Security.Cryptography.DataProtector.Protect*>기본 클래스의 메서드를 콜백 합니다.</xref:System.Security.Cryptography.DataProtector.Protect*>"
  remarks: ''
  example:
  - "The following example shows an implementation of the ProviderProtect method.  It is part of a larger code example for the <xref:System.Security.Cryptography.DataProtector> class.  \n  \n [!code-vb[Cryptography.MemoryProtector#3](~/add/codesnippet/visualbasic/m-system.security.crypto_130_1.vb)]\n [!code-cs[Cryptography.MemoryProtector#3](~/add/codesnippet/csharp/m-system.security.crypto_130_1.cs)]"
  syntax:
    content: protected abstract byte[] ProviderProtect (byte[] userData);
    parameters:
    - id: userData
      type: System.Byte[]
      description: "암호화할 데이터입니다."
    return:
      type: System.Byte[]
      description: "암호화 된 데이터를 포함 하는 바이트 배열입니다."
  overload: System.Security.Cryptography.DataProtector.ProviderProtect*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.ProviderUnprotect(System.Byte[])
  id: ProviderUnprotect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: ProviderUnprotect(Byte[])
  nameWithType: DataProtector.ProviderUnprotect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.ProviderUnprotect(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "파생 된 대리자 메서드는 클래스를 지정 된 <xref:System.Security.Cryptography.DataProtector.Unprotect*>기본 클래스의 메서드를 콜백 합니다.</xref:System.Security.Cryptography.DataProtector.Unprotect*>"
  remarks: ''
  example:
  - "The following example shows an implementation of the ProviderUnprotect method.  It is part of a larger code example for the <xref:System.Security.Cryptography.DataProtector> class.  \n  \n [!code-vb[Cryptography.MemoryProtector#4](~/add/codesnippet/visualbasic/m-system.security.crypto_20_1.vb)]\n [!code-cs[Cryptography.MemoryProtector#4](~/add/codesnippet/csharp/m-system.security.crypto_20_1.cs)]"
  syntax:
    content: protected abstract byte[] ProviderUnprotect (byte[] encryptedData);
    parameters:
    - id: encryptedData
      type: System.Byte[]
      description: "데이터를 암호화 합니다."
    return:
      type: System.Byte[]
      description: "암호화 되지 않은 데이터..."
  overload: System.Security.Cryptography.DataProtector.ProviderUnprotect*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.SpecificPurposes
  id: SpecificPurposes
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: SpecificPurposes
  nameWithType: DataProtector.SpecificPurposes
  fullName: System.Security.Cryptography.DataProtector.SpecificPurposes
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "보호 된 데이터에 대 한 특정 용도를 가져옵니다."
  syntax:
    content: protected System.Collections.Generic.IEnumerable<string> SpecificPurposes { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "보호 된 데이터에 대 한 특정 용도의 컬렉션입니다."
  overload: System.Security.Cryptography.DataProtector.SpecificPurposes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])
  id: Unprotect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: Unprotect(Byte[])
  nameWithType: DataProtector.Unprotect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.Unprotect(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "지정된 된 보호 된 데이터의 보호를 해제 합니다."
  syntax:
    content: public byte[] Unprotect (byte[] encryptedData);
    parameters:
    - id: encryptedData
      type: System.Byte[]
      description: "암호화 된 데이터를 보호 합니다."
    return:
      type: System.Byte[]
      description: "일반 텍스트 데이터를 포함 하는 바이트 배열입니다."
  overload: System.Security.Cryptography.DataProtector.Unprotect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>encryptedData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>encryptedData</code>잘못 된 용도 포함 되어 있습니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.DataProtector.#ctor(System.String,System.String,System.String[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: DataProtector(String,String,String[])
  nameWithType: DataProtector.DataProtector(String,String,String[])
  fullName: System.Security.Cryptography.DataProtector.DataProtector(String,String,String[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DataProtector.ApplicationName
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ApplicationName
  nameWithType: DataProtector.ApplicationName
  fullName: System.Security.Cryptography.DataProtector.ApplicationName
- uid: System.Security.Cryptography.DataProtector.Create(System.String,System.String,System.String,System.String[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Create(String,String,String,String[])
  nameWithType: DataProtector.Create(String,String,String,String[])
  fullName: System.Security.Cryptography.DataProtector.Create(String,String,String,String[])
- uid: System.Security.Cryptography.DataProtector
  parent: System.Security.Cryptography
  isExternal: false
  name: DataProtector
  nameWithType: DataProtector
  fullName: System.Security.Cryptography.DataProtector
- uid: System.Security.Cryptography.DataProtector.GetHashedPurpose
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: GetHashedPurpose()
  nameWithType: DataProtector.GetHashedPurpose()
  fullName: System.Security.Cryptography.DataProtector.GetHashedPurpose()
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DataProtector.IsReprotectRequired(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: IsReprotectRequired(Byte[])
  nameWithType: DataProtector.IsReprotectRequired(Byte[])
  fullName: System.Security.Cryptography.DataProtector.IsReprotectRequired(Byte[])
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: PrependHashedPurposeToPlaintext
  nameWithType: DataProtector.PrependHashedPurposeToPlaintext
  fullName: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
- uid: System.Security.Cryptography.DataProtector.PrimaryPurpose
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: PrimaryPurpose
  nameWithType: DataProtector.PrimaryPurpose
  fullName: System.Security.Cryptography.DataProtector.PrimaryPurpose
- uid: System.Security.Cryptography.DataProtector.Protect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Protect(Byte[])
  nameWithType: DataProtector.Protect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.Protect(Byte[])
- uid: System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ProviderProtect(Byte[])
  nameWithType: DataProtector.ProviderProtect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.ProviderProtect(Byte[])
- uid: System.Security.Cryptography.DataProtector.ProviderUnprotect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ProviderUnprotect(Byte[])
  nameWithType: DataProtector.ProviderUnprotect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.ProviderUnprotect(Byte[])
- uid: System.Security.Cryptography.DataProtector.SpecificPurposes
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: SpecificPurposes
  nameWithType: DataProtector.SpecificPurposes
  fullName: System.Security.Cryptography.DataProtector.SpecificPurposes
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Unprotect(Byte[])
  nameWithType: DataProtector.Unprotect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.Unprotect(Byte[])
- uid: System.Security.Cryptography.DataProtector.#ctor*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: DataProtector
  nameWithType: DataProtector.DataProtector
- uid: System.Security.Cryptography.DataProtector.ApplicationName*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ApplicationName
  nameWithType: DataProtector.ApplicationName
- uid: System.Security.Cryptography.DataProtector.Create*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Create
  nameWithType: DataProtector.Create
- uid: System.Security.Cryptography.DataProtector.GetHashedPurpose*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: GetHashedPurpose
  nameWithType: DataProtector.GetHashedPurpose
- uid: System.Security.Cryptography.DataProtector.IsReprotectRequired*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: IsReprotectRequired
  nameWithType: DataProtector.IsReprotectRequired
- uid: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: PrependHashedPurposeToPlaintext
  nameWithType: DataProtector.PrependHashedPurposeToPlaintext
- uid: System.Security.Cryptography.DataProtector.PrimaryPurpose*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: PrimaryPurpose
  nameWithType: DataProtector.PrimaryPurpose
- uid: System.Security.Cryptography.DataProtector.Protect*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Protect
  nameWithType: DataProtector.Protect
- uid: System.Security.Cryptography.DataProtector.ProviderProtect*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ProviderProtect
  nameWithType: DataProtector.ProviderProtect
- uid: System.Security.Cryptography.DataProtector.ProviderUnprotect*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ProviderUnprotect
  nameWithType: DataProtector.ProviderUnprotect
- uid: System.Security.Cryptography.DataProtector.SpecificPurposes*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: SpecificPurposes
  nameWithType: DataProtector.SpecificPurposes
- uid: System.Security.Cryptography.DataProtector.Unprotect*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Unprotect
  nameWithType: DataProtector.Unprotect
