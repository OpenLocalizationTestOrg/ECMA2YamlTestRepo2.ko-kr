### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlDataReader
  id: SqlDataReader
  children:
  - System.Data.SqlClient.SqlDataReader.Close
  - System.Data.SqlClient.SqlDataReader.Connection
  - System.Data.SqlClient.SqlDataReader.Depth
  - System.Data.SqlClient.SqlDataReader.FieldCount
  - System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetEnumerator
  - System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  - System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetName(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)
  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])
  - System.Data.SqlClient.SqlDataReader.GetSchemaTable
  - System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])
  - System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetString(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])
  - System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)
  - System.Data.SqlClient.SqlDataReader.HasRows
  - System.Data.SqlClient.SqlDataReader.IsClosed
  - System.Data.SqlClient.SqlDataReader.IsCommandBehavior(System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)
  - System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlDataReader.Item(System.Int32)
  - System.Data.SqlClient.SqlDataReader.Item(System.String)
  - System.Data.SqlClient.SqlDataReader.NextResult
  - System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlDataReader.Read
  - System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlDataReader.RecordsAffected
  - System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData(System.Int32)
  - System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  langs:
  - csharp
  name: SqlDataReader
  nameWithType: SqlDataReader
  fullName: System.Data.SqlClient.SqlDataReader
  type: Class
  summary: "SQL Server 데이터베이스에서 행의 정방향 전용 스트림을 읽는 방법을 제공 합니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "SqlDataReader를 만들려면 호출 해야 합니다는 <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>의 메서드는 <xref:System.Data.SqlClient.SqlCommand>직접 생성자를 사용 하는 대신 개체입니다.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>       SqlDataReader를 사용 하는 동안에서 관련 된 <xref:System.Data.SqlClient.SqlConnection>사용 중 제공 된 SqlDataReader을 이며 <xref:System.Data.SqlClient.SqlConnection>합니다. 닫지</xref:System.Data.SqlClient.SqlConnection> 에 없는 다른 작업을 수행할 수</xref:System.Data.SqlClient.SqlConnection> 이 때 까지는 <xref:System.Data.SqlClient.SqlDataReader.Close%2A>SqlDataReader의 메서드가 호출 됩니다.</xref:System.Data.SqlClient.SqlDataReader.Close%2A> <xref:System.Data.SqlClient.SqlDataReader.Close%2A>.</xref:System.Data.SqlClient.SqlDataReader.Close%2A> 호출 될 때까지 출력 매개 변수를 검색할 수 없습니다 예를 들어       변경 내용을 결과 데이터를 읽는 동안 다른 프로세스 또는 스레드별로 집합의 사용자에 게 표시 될 수 있습니다는 `SqlDataReader`합니다. 그러나 정확한 동작은 타이밍에 따라 변합니다.       <xref:System.Data.SqlClient.SqlDataReader.IsClosed%2A>및 <xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A>호출할 수 있는 속성만 SqlDataReader를 닫은 후.</xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A></xref:System.Data.SqlClient.SqlDataReader.IsClosed%2A> 하지만 <xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A>속성 수 있습니다 SqlDataReader 존재 하는 동안 액세스를 항상 호출 <xref:System.Data.SqlClient.SqlDataReader.Close%2A>의 값을 반환 하기 전에 <xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A>반환 값이 정확 보장 하기 위해.</xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A> </xref:System.Data.SqlClient.SqlDataReader.Close%2A> </xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A>       순차적 액세스를 사용 하는 경우 (<xref:System.Data.CommandBehavior?displayProperty=fullName>), <xref:System.InvalidOperationException>SqlDataReader 위치는 앞에 이전 열에서 작업을 시도한 읽은 다른 경우 발생 합니다.</xref:System.InvalidOperationException> </xref:System.Data.CommandBehavior?displayProperty=fullName>      > [!NOTE] > 최적의 성능을 위해 SqlDataReader 불필요 한 개체를 만들거나 데이터의 불필요 한 복사본을 만들지를 방지 합니다. 따라서 여러 번 호출 메서드에 같은 <xref:System.Data.SqlClient.SqlDataReader.GetValue%2A>동일한 개체에 대 한 참조를 반환 합니다.</xref:System.Data.SqlClient.SqlDataReader.GetValue%2A> <xref:System.Data.SqlClient.SqlDataReader.GetValue%2A>.</xref:System.Data.SqlClient.SqlDataReader.GetValue%2A> 같은 메서드에서 반환 되는 개체의 기본 값을 수정 하는 경우 각별히 주의 해야"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, a <xref:System.Data.SqlClient.SqlCommand>, and a SqlDataReader. The example reads through the data, writing it out to the console window. The code then closes the SqlDataReader. The <xref:System.Data.SqlClient.SqlConnection> is closed automatically at the end of the `using` code block.  \n  \n [!code-cs[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._3_1.cs)]\n [!code-vb[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._3_1.vb)]"
  syntax:
    content: 'public class SqlDataReader : System.Data.Common.DbDataReader, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Data.Common.DbDataReader
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Data.Common.DbDataReader.Dispose
  - System.Data.Common.DbDataReader.Dispose(System.Boolean)
  - System.Data.Common.DbDataReader.GetData(System.Int32)
  - System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)
  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)
  - System.Data.Common.DbDataReader.NextResultAsync
  - System.Data.Common.DbDataReader.ReadAsync
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Close
  id: Close
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Close()
  nameWithType: SqlDataReader.Close()
  fullName: System.Data.SqlClient.SqlDataReader.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "닫습니다는 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 개체입니다."
  remarks: "사용 하 여 끝나면 Close 메서드를 명시적으로 호출 해야는 <xref:System.Data.SqlClient.SqlDataReader>사용할 연결 된 <xref:System.Data.SqlClient.SqlConnection>다른 용도로.</xref:System.Data.SqlClient.SqlConnection> </xref:System.Data.SqlClient.SqlDataReader>       `Close` 메서드 출력 매개 변수, 반환 값에 대 한 값을 입력 하 고 `RecordsAffected`를 닫는 데 걸리는 시간은 증가 `SqlDataReader` 크거나 복잡 한 쿼리를 처리할 때 사용 했던 합니다. 반환 값과는 쿼리에 의해 영향 받는 레코드 수 없는 경우 중요 한를 닫는 데 걸리는 시간은 `SqlDataReader` 호출 하 여 줄일 수는 <xref:System.Data.SqlClient.SqlCommand.Cancel%2A>메서드는 연관 된 <xref:System.Data.SqlClient.SqlCommand>호출 하기 전에 개체는 `Close` 메서드.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.Cancel%2A>      > [!CAUTION] > 호출 하지 않으면 `Close` 또는 `Dispose` 연결, DataReader, 또는 다른 관리 개체에는 `Finalize` 클래스의 메서드로 합니다. 종료자에서만 클래스에 직접 속한 관리 되지 않는 리소스를 해제 해야 합니다. 클래스에 관리 되지 않는 리소스가 없는 경우 포함 되지 않습니다는 `Finalize` 클래스 정의에 메서드. 자세한 내용은 참조 [가비지 수집](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, a `SqlCommand`, and a <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it out to the console window. The code then closes the <xref:System.Data.SqlClient.SqlDataReader>. The <xref:System.Data.SqlClient.SqlConnection> is closed automatically at the end of the `using` code block.  \n  \n [!code-vb[Classic WebData SqlDataReader.Close Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._11_1.vb)]\n [!code-cs[Classic WebData SqlDataReader.Close Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._11_1.cs)]"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.SqlClient.SqlDataReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Connection
  id: Connection
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Connection
  nameWithType: SqlDataReader.Connection
  fullName: System.Data.SqlClient.SqlDataReader.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "가져옵니다는 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> 연관 된 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>합니다."
  syntax:
    content: protected System.Data.SqlClient.SqlConnection Connection { get; }
    return:
      type: System.Data.SqlClient.SqlConnection
      description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> 연관 된 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Depth
  id: Depth
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Depth
  nameWithType: SqlDataReader.Depth
  fullName: System.Data.SqlClient.SqlDataReader.Depth
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "현재 행의 중첩 깊이 나타내는 값을 가져옵니다."
  remarks: "가장 바깥쪽 테이블의 중첩 수준은&0;입니다. .NET Framework Data Provider for SQL Server 중첩을 지원 하지 않는 및 항상&0;을 반환 합니다."
  syntax:
    content: public override int Depth { get; }
    return:
      type: System.Int32
      description: "현재 행의 중첩 깊이입니다."
  overload: System.Data.SqlClient.SqlDataReader.Depth*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.FieldCount
  id: FieldCount
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: FieldCount
  nameWithType: SqlDataReader.FieldCount
  fullName: System.Data.SqlClient.SqlDataReader.FieldCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "현재 행에서 열 수를 가져옵니다."
  remarks: "기본적으로 행 (예: 삭제 쿼리)을 반환 하지 않는 쿼리를 실행 FieldCount이를 0으로 설정 합니다. 그러나 합니다. 0 개의 행을 반환 하는 쿼리와 일치 하지 않습니다이 (SELECT 등 \\* FROM *테이블* WHERE 1 = 2)는 쿼리에서 FieldCount 숨겨진된 필드를 포함 하는 테이블의 열 수를 반환 합니다. 사용 하 여 <xref:System.Data.SqlClient.SqlDataReader.VisibleFieldCount%2A>숨겨진된 필드를 제외 하려면.</xref:System.Data.SqlClient.SqlDataReader.VisibleFieldCount%2A>"
  syntax:
    content: public override int FieldCount { get; }
    return:
      type: System.Int32
      description: "위치 하지 않은 경우에 유효한 recordset 0; 그렇지 않은 경우 현재 행에서 열 수 있습니다. 기본값은-1입니다."
  overload: System.Data.SqlClient.SqlDataReader.FieldCount*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "SQL Server의 인스턴스로 현재 연결이 없습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)
  id: GetBoolean(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetBoolean(Int32)
  nameWithType: SqlDataReader.GetBoolean(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetBoolean(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "부울으로 지정 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터는 이미 부울 여야 하거나 예외가 생성 됩니다.       호출 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값을 확인 하려면.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override bool GetBoolean (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Boolean
      description: "열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetBoolean*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)
  id: GetByte(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetByte(Int32)
  nameWithType: SqlDataReader.GetByte(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetByte(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 바이트로 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터 바이트를 이미 이어야 합니다.       호출 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값을 확인 하려면.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override byte GetByte (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Byte
      description: "값을 byte로 지정된 된 열입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetByte*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: SqlDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정한 버퍼 오프셋에서 시작 하는 배열 버퍼에 지정 된 열 오프셋에서의 바이트 스트림을 읽습니다."
  remarks: "GetBytes 필드에 사용 가능한 바이트 수를 반환합니다. 대부분의 경우 이것은 필드의 길이입니다. 그러나 반환 된 숫자 보다 작을 수도 있습니다는 필드의 길이 경우 `GetBytes` 바이트를 얻는 필드에서 이미 사용 되었습니다. 이 있는 경우 예를 들어 경우 수는 <xref:System.Data.SqlClient.SqlDataReader>버퍼에 대형 데이터 구조를 읽고.</xref:System.Data.SqlClient.SqlDataReader> 자세한 내용은 참조는 `SequentialAccess` <xref:System.Data.CommandBehavior>.</xref:System.Data.CommandBehavior> 에 대 한 설정       버퍼를 전달 하는 경우 `null`, GetBytes (바이트)을 버퍼 오프셋된 매개 변수에 따라 나머지 크기가 아니라 전체 필드의 길이 반환 합니다.       변환이 수행 되지 않습니다. 따라서 검색 된 데이터 바이트 배열 있어야 합니다."
  syntax:
    content: public override long GetBytes (int i, long dataIndex, byte[] buffer, int bufferIndex, int length);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    - id: dataIndex
      type: System.Int64
      description: "읽기 작업을 시작할 필드 내의 인덱스입니다."
    - id: buffer
      type: System.Byte[]
      description: "바이트 스트림의 읽을 버퍼입니다."
    - id: bufferIndex
      type: System.Int32
      description: "내에 있는 인덱스는 `buffer` 쓰기 작업이 시작 되는 위치입니다."
    - id: length
      type: System.Int32
      description: "버퍼에 복사할 최대 길이입니다."
    return:
      type: System.Int64
      description: "실제 읽은 바이트 수입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetBytes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)
  id: GetChar(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetChar(Int32)
  nameWithType: SqlDataReader.GetChar(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetChar(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "단일 문자로 지정 된 열의 값을 가져옵니다."
  remarks: "지원 되지 않습니다 <xref:System.Data.SqlClient>.</xref:System.Data.SqlClient>"
  syntax:
    content: public override char GetChar (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Char
      description: "지정 된 열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetChar*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: SqlDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정한 열 오프셋에서의 문자 스트림을 지정한 버퍼 오프셋에서 시작 하는 배열로 버퍼에 읽습니다."
  remarks: "GetChars 필드에 사용할 수 있는 문자 수를 반환합니다. 자주이 필드의 길이 해당 합니다. 그러나 반환 된 숫자 보다 작을 수도 있습니다는 필드의 길이 경우 `GetChars` 문자를 가져올 필드에서 이미 사용 되었습니다. 이 있는 경우 예를 들어 경우 수는 <xref:System.Data.SqlClient.SqlDataReader>버퍼에 대형 데이터 구조를 읽고.</xref:System.Data.SqlClient.SqlDataReader> 자세한 내용은 참조는 `SequentialAccess` <xref:System.Data.CommandBehavior>.</xref:System.Data.CommandBehavior> 에 대 한 설정       실제 읽은 문자 수는 필드의 끝에 도달할 경우 요청 된 길이 보다 작을 수 수 있습니다. 버퍼를 전달 하는 경우 `null`, GetChars 문자 버퍼 오프셋된 매개 변수에 따라 나머지 크기가 아니라 전체 필드의 길이 반환 합니다.       변환이 수행 되지 않습니다. 따라서 합니다. 이미 검색 된 데이터는 문자 배열 여야 합니다.      > [!NOTE] > GetChars 메서드가 0을 반환 `dataIndex` 음수입니다."
  syntax:
    content: public override long GetChars (int i, long dataIndex, char[] buffer, int bufferIndex, int length);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    - id: dataIndex
      type: System.Int64
      description: "읽기 작업을 시작할 필드 내의 인덱스입니다."
    - id: buffer
      type: System.Char[]
      description: "바이트 스트림의 읽을 버퍼입니다."
    - id: bufferIndex
      type: System.Int32
      description: "내에 있는 인덱스는 `buffer` 쓰기 작업이 시작 되는 위치입니다."
    - id: length
      type: System.Int32
      description: "버퍼에 복사할 최대 길이입니다."
    return:
      type: System.Int64
      description: "실제 읽은 문자 수입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetChars*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)
  id: GetDataTypeName(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDataTypeName(Int32)
  nameWithType: SqlDataReader.GetDataTypeName(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDataTypeName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 데이터 형식을 나타내는 문자열을 가져옵니다."
  remarks: "백 엔드 데이터 형식의 이름을 반환합니다.       `numeric`에 대 한 SQL Server에서 동의어는 `decimal` 데이터 형식입니다. `GetDataTypeName`decimal 또는 numeric으로 정의 된 열에 대 한 &quot;십진수&quot;를 반환 합니다."
  syntax:
    content: public override string GetDataTypeName (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "찾을 열의 서 수 위치&0;부터 시작 합니다."
    return:
      type: System.String
      description: "지정 된 열의 데이터 형식을 나타내는 문자열입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetDataTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)
  id: GetDateTime(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDateTime(Int32)
  nameWithType: SqlDataReader.GetDateTime(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDateTime(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref:System.DateTime>개체입니다.</xref:System.DateTime>"
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 해야는 <xref:System.DateTime>개체입니다.</xref:System.DateTime>       호출 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값을 확인 하려면.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override DateTime GetDateTime (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.DateTime
      description: "지정 된 열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)
  id: GetDateTimeOffset(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDateTimeOffset(Int32)
  nameWithType: SqlDataReader.GetDateTimeOffset(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 검색 하는 <xref:System.DateTimeOffset>개체입니다.</xref:System.DateTimeOffset>"
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 해야는 <xref:System.DateTimeOffset>개체입니다.</xref:System.DateTimeOffset>       호출 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값을 확인 하려면.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public virtual DateTimeOffset GetDateTimeOffset (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.DateTimeOffset
      description: "지정 된 열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)
  id: GetDecimal(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDecimal(Int32)
  nameWithType: SqlDataReader.GetDecimal(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDecimal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref:System.Decimal>개체입니다.</xref:System.Decimal>"
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 해야는 <xref:System.Decimal>개체입니다.</xref:System.Decimal>       호출 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값을 확인 하려면.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override decimal GetDecimal (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Decimal
      description: "지정 된 열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetDecimal*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)
  id: GetDouble(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDouble(Int32)
  nameWithType: SqlDataReader.GetDouble(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDouble(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "배정밀도 부동 소수점 숫자로 지정 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터는 배정밀도 부동 소수점 숫자를 이미 이어야 합니다.       호출 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값을 확인 하려면.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override double GetDouble (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Double
      description: "지정 된 열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetDouble*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetEnumerator
  id: GetEnumerator
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SqlDataReader.GetEnumerator()
  fullName: System.Data.SqlClient.SqlDataReader.GetEnumerator()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "반환 된 <xref:System.Collections.IEnumerator>반복 하는 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "이 메서드를 사용 하 여 명시적 열거자를 검색할 수 있지만 지 원하는 언어는 `foreach` 구성 하는 것이 데이터 판독기의 행을 반복 하는 직접 루프 구문을 사용 합니다."
  syntax:
    content: public override System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Data.SqlClient.SqlDataReader.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)
  id: GetFieldType(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetFieldType(Int32)
  nameWithType: SqlDataReader.GetFieldType(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldType(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "가져옵니다는 <xref:System.Type>개체의 데이터 형식입니다.</xref:System.Type>"
  syntax:
    content: public override Type GetFieldType (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Type
      description: "<xref:System.Type>개체의 데이터 형식입니다.</xref:System.Type> 클라이언트의 경우 사용자 정의 형식 (UDT), 데이터베이스에서 반환 되는 형식이 없는 경우 **GetFieldType** null을 반환 합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetFieldType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)
  id: GetFieldValue``1(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetFieldValue(Int32)
  nameWithType: SqlDataReader.GetFieldValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: public override T GetFieldValue<T> (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "추가할 수 있습니다."
    return:
      type: T
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlDataReader.GetFieldValue<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  id: GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetFieldValueAsync(Int32,CancellationToken)
  nameWithType: SqlDataReader.GetFieldValueAsync(Int32,CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync(Int32,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: public override System.Threading.Tasks.Task<T> GetFieldValueAsync<T> (int i, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: i
      type: System.Int32
      description: "추가할 수 있습니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "추가할 수 있습니다."
    return:
      type: System.Threading.Tasks.Task{T}
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)
  id: GetFloat(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetFloat(Int32)
  nameWithType: SqlDataReader.GetFloat(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFloat(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "단 정밀도 부동 소수점 숫자의 지정된 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터는 단 정밀도 부동 소수점 숫자를 이미 이어야 합니다.       호출 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값을 확인 하려면.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override float GetFloat (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Single
      description: "지정 된 열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetFloat*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)
  id: GetGuid(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetGuid(Int32)
  nameWithType: SqlDataReader.GetGuid(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetGuid(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "전역 고유 식별자 (GUID)로 지정 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터는 GUID를 이미 여야 합니다.       호출 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값을 확인 하려면.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override Guid GetGuid (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Guid
      description: "지정 된 열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetGuid*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)
  id: GetInt16(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetInt16(Int32)
  nameWithType: SqlDataReader.GetInt16(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt16(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "16 비트 부호 있는 정수로 지정 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터는 16 비트 부호 있는 정수를 이미 여야 합니다.       호출 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값을 확인 하려면.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override short GetInt16 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Int16
      description: "지정 된 열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetInt16*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)
  id: GetInt32(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetInt32(Int32)
  nameWithType: SqlDataReader.GetInt32(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt32(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "부호 있는 32 비트 정수로 지정 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터는 32 비트 부호 있는 정수를 이미 여야 합니다.       호출 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값을 확인 하려면.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override int GetInt32 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Int32
      description: "지정 된 열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetInt32*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)
  id: GetInt64(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetInt64(Int32)
  nameWithType: SqlDataReader.GetInt64(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt64(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "64 비트 부호 있는 정수로 지정 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터는 64 비트 부호 있는 정수를 이미 여야 합니다.       호출 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값을 확인 하려면.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override long GetInt64 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Int64
      description: "지정 된 열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetInt64*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetName(System.Int32)
  id: GetName(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetName(Int32)
  nameWithType: SqlDataReader.GetName(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 이름을 가져옵니다."
  syntax:
    content: public override string GetName (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.String
      description: "지정 된 열의 이름입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)
  id: GetOrdinal(System.String)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetOrdinal(String)
  nameWithType: SqlDataReader.GetOrdinal(String)
  fullName: System.Data.SqlClient.SqlDataReader.GetOrdinal(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "열을 가져옵니다 서 수 이며 열의 이름을 지정 합니다."
  remarks: "`GetOrdinal`대/소문자 구분 조회를 먼저 수행합니다. 대/소문자 구분 검색 발생 한 두 번째 실패 하면 (대/소문자 구분 비교를 수행 데이터베이스 데이터 정렬을 사용 하 여). 비교는 대/소문자 culture 별 규칙에 의해 영향을 예기치 않은 결과가 발생할 수 있습니다. 예를 들어, 터키어, 다음 예제에서는 잘못 된 결과가 발생의 파일 시스템에서 문자 &quot;i&quot;에 대 한 대/소문자 규칙을 사용 하지 않으므로 &quot;file&quot;의 합니다. 메서드에서 throw 된 `IndexOutOfRange` 서 수는&0;부터 시작 하는 열을 찾을 수 없는 경우 예외입니다.       `GetOrdinal`가 되지 일본어가 나 너비 구분 됩니다.       서 수 기반 조회가 명명 된 조회 보다 효율적 이므로, 것이 없습니다 효율적 호출 `GetOrdinal` 루프 내에서. 호출 하 여 시간 절약 `GetOrdinal` 을 한 번 루프 내에서 사용할 정수 변수에 결과 할당 합니다."
  example:
  - "The following example demonstrates how to use the GetOrdinal method.  \n  \n [!code-cs[Classic WebData SqlDataReader.GetOrdinal#1](~/add/codesnippet/csharp/m-system.data.sqlclient._27_1.cs)]\n [!code-vb[Classic WebData SqlDataReader.GetOrdinal#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._27_1.vb)]"
  syntax:
    content: public override int GetOrdinal (string name);
    parameters:
    - id: name
      type: System.String
      description: "열의 이름입니다."
    return:
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetOrdinal*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "지정 된 이름이 올바른 열 이름이 아닙니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)
  id: GetProviderSpecificFieldType(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetProviderSpecificFieldType(Int32)
  nameWithType: SqlDataReader.GetProviderSpecificFieldType(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "가져옵니다는 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> 기본 공급자별 필드 형식의 표현입니다."
  syntax:
    content: public override Type GetProviderSpecificFieldType (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "<xref:System.Int32>열 서 수를 나타내는.</xref:System.Int32>"
    return:
      type: System.Type
      description: "가져옵니다는 <xref:System.Object>기본 공급자별 필드 형식의 표현을 즉.</xref:System.Object>"
  overload: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)
  id: GetProviderSpecificValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetProviderSpecificValue(Int32)
  nameWithType: SqlDataReader.GetProviderSpecificValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "가져옵니다는 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> 기본 공급자 특정 값의 표현입니다."
  syntax:
    content: public override object GetProviderSpecificValue (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "<xref:System.Int32>열 서 수를 나타내는.</xref:System.Int32>"
    return:
      type: System.Object
      description: "<xref:System.Object>기본 공급자 특정 값의 표현입니다.</xref:System.Object>"
  overload: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])
  id: GetProviderSpecificValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetProviderSpecificValues(Object[])
  nameWithType: SqlDataReader.GetProviderSpecificValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "기본 공급자 특정 값의 표현일 하는 개체의 배열을 가져옵니다."
  syntax:
    content: public override int GetProviderSpecificValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "배열을 <xref:System.Object>열 값을 복사할 대상.</xref:System.Object>"
    return:
      type: System.Int32
      description: "기본 공급자 특정 값의 표현일 하는 개체의 배열입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSchemaTable
  id: GetSchemaTable
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSchemaTable()
  nameWithType: SqlDataReader.GetSchemaTable()
  fullName: System.Data.SqlClient.SqlDataReader.GetSchemaTable()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "반환 된 <xref href=&quot;System.Data.DataTable&quot;> </xref> 의 열 메타 데이터를 설명 하는 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>합니다."
  remarks: "GetSchemaTable에 대 한 메서드는 다음 순서 대로 각 열에 대 한 메타 데이터를 반환 합니다. | DataReader 열 | 설명 |   |-----------------------|-----------------|   | AllowDBNull | 소비자가 null 값으로는 열을 설정할 수 있는 경우 공급자는 소비자가 열을 null 값으로 설정할 수 있는지 여부를 확인할 수 없는 경우 설정 합니다. 그렇지 않으면, 설정 하지 않습니다. 열은 null 값으로 설정할 수 없습니다 하는 경우에 null 값 포함 될 수 있습니다. |   | BaseCatalogName | 열이 포함 된 데이터 저장소에 있는 카탈로그의 이름입니다. 기본 카탈로그 이름을 확인할 수 없는 경우 NULL입니다. 이 열의 기본 null 값입니다. |   | BaseColumnName | 데이터 저장소에 있는 열의 이름입니다. 이 별칭을 사용 하는 경우 열 이름 열에 반환 된 열 이름으로 달라질 수 있습니다. 데이터의 열 저장소 행 집합 열이 파생 되지만 동일 하지는 않습니다, 하는 경우 또는 기본 열 이름을 확인할 수 없는 경우 null 값입니다. 이 열의 기본 null 값입니다. |   | BaseSchemaName | 열이 포함 된 데이터 저장소에 있는 스키마의 이름입니다. 기본 스키마 이름을 확인할 수 없는 경우 null 값입니다. 이 열의 기본 null 값입니다. |   | BaseServerName | <xref:System.Data.SqlClient.SqlDataReader>에서 사용 하는 Microsoft SQL Server 인스턴스의 이름입니다. |   | BaseTableName | 테이블 또는 뷰의 열이 포함 된 데이터 저장소의 이름입니다.</xref:System.Data.SqlClient.SqlDataReader> 기본 테이블 이름을 확인할 수 없는 경우 null 값입니다. 이 열의 기본 null 값입니다. |   | ColumnName | 열의 이름입니다. 이 고유 아닐 수 있습니다. 이 확인할 수 없는 경우에 null 값이 반환 됩니다. 이 이름은 항상 현재 보기 또는 명령 텍스트에 있는 열의 최근 이름 바꾸기가 반영 합니다. |   | ColumnOrdinal | 열의&0;부터 시작 서 수입니다. 이 열에 null 값을 포함할 수 없습니다. |   | ColumnSize | 열에 있는 값의 가능한 최대 길이입니다. 고정 길이 데이터 형식을 사용 하는 열에 대 한 데이터 형식의 크기입니다. 에 대 한 `nvarchar(MAX)`, `varchar(MAX)`, 및 `varbinary(MAX)` SQL Server 데이터베이스의 최대 크기에 저장 된 열에는 2GB입니다. 이러한 열을 저장 및 파일과 액세스 하는 경우에 파일 시스템에서 최대 크기에 제한이 적용 됩니다. 사용 하는 경우이 값이 변경 된 `Type System Version` 연결 문자열에서 키워드입니다.  새 형식에 대 한 하위 형식으로 표시 됩니다. MAX 데이터 형식에 대 한 일반적인 4k 반환 `nvarchar` 에 대해 8000 `varchar`합니다. 자세한 내용은 SQL Server 온라인 설명서의 TRANSACT-SQL 참조를 참조 하십시오. |   | N a m e | 지정 된 열의 데이터 형식을 나타내는 문자열을 반환 합니다. |   | IsAliased | `true`: 열 이름은 별칭입니다.<br /><br /> `false`: 열 이름이 별칭 않습니다. |   | IsAutoIncrement | `true`: 고정 된 증가분의 새 행에 열 값을 할당 합니다.<br /><br /> `false`:이 열은 고정 된 증가분의 새 행에 값을 할당 하지 않습니다. 이 열의 기본값은 `false`. |   | IsColumnSet | `true`: 열이 열 집합의 멤버인 스파스 열입니다. |   | 먼저 IsExpression | `true`: 열이 식입니다.<br /><br /> `false`: 열 식이 아닙니다. |   | IsHidden | `true`: 열이 숨겨집니다.<br /><br /> `false`: 열 숨겨지지 않습니다. |   | IsIdentity | `true`: 열이 id 열입니다.<br /><br /> `false`: 열 id 열이 없습니다. |   | IsKey | `true`: 열이 행 집합의 열 집합 중 하나를 전체적으로 볼 때, 해당 행을 고유 하 게 식별 합니다. 열 집합 `IsKey` 로 설정 `true` 행 집합의 행을 고유 하 게 식별 해야 합니다. 이 열 집합이 열의 최소 집합 임을 않아도가 됩니다. 기본 테이블 기본 키, 고유 제약 조건 또는 고유 인덱스에서이 열 집합을 생성할 수 있습니다.<br /><br /> `false`:이 열은 행을 식별할 필요가 없습니다. |   | IsLong | `true`:는 긴 BLOB (Binary Object) 매우 긴 데이터가 포함 된 열이 포함 되어 있습니다. 매우 긴 데이터의 정의 공급자 마다 다릅니다.<br /><br /> `false`:이 열에는 긴 BLOB (Binary Object) 매우 긴 데이터가 포함 된 없습니다. |   | IsReadOnly | `true`: 열을 수정할 수 없습니다.<br /><br /> `false`:이 열을 수정할 수 있습니다. |   | Isrowversion은 | `true`:는 열에 쓸 수 없는 영구 행 식별자가 포함 된이 고 id에만 의미가 행입니다.<br /><br /> `false`: 열에 쓸 수 없는 영구 행 식별자는이 고 id에만 의미가 행. |   | IsUnique | `true`: 열이 유형이 `timestamp`합니다.<br /><br /> `false`: 열 유형이 아닙니다 `timestamp`. |   | NonVersionedProviderType | 현재 관계 없이 열의 형식을 `Type System Version` 연결 문자열에 지정 합니다. <xref:System.Data.SqlDbType>열거형에서 값이 반환된 됩니다. |   | NumericPrecision | 경우 `ProviderType` 숫자 데이터 형식 열의 최대 전체 자릿수입니다.</xref:System.Data.SqlDbType> 전체 자릿수는 열의 정의에 따라 달라 집니다. 경우 `ProviderType` 형식이 아닌 숫자 데이터, 255입니다. |   | NumericScale | 경우 `ProviderType` DBTYPE_DECIMAL 또는 DBTYPE_NUMERIC, 소수점 오른쪽 자릿수입니다. 그렇지 않으면 255입니다. |   | ProviderSpecificDataType | 공급자 관련 데이터 형식을 기반으로 열의 반환는 `Type System Version` 연결 문자열에서 키워드입니다. |   | ProviderType | 표시기는 열의 데이터 형식입니다. 열의 데이터 형식을 다양 행이 개체 여야 합니다. 이 열에 null 값을 포함할 수 없습니다. |   | UdtAssemblyQualifiedName | 이것이 <xref:System.Type.AssemblyQualifiedName%2A>.</xref:System.Type.AssemblyQualifiedName%2A> 에 따라 UDT의 어셈블리의 정규화 된 이름 열이 사용자 정의 형식 (UDT), 열이 UDT가 아닌 경우이 매개 변수가 null입니다. |   | 이 값 | 행에 XML 열에 대 한 정보를 포함 하는 경우이 XML 인스턴스의 스키마 컬렉션이 있는 데이터베이스의 이름입니다. 이 값은 `null` (`Nothing` Visual basic에서) 컬렉션은 현재 데이터베이스에 정의 된 경우. 없으면 스키마 컬렉션이 없는 경우 null도는 `XmlSchemaCollectionName` 및 `XmlSchemaCollectionOwningSchema` 도 열은 null입니다. |   | XmlSchemaCollectionName | 행에 XML 열에 대 한 정보를 포함 하는 경우에이 XML 인스턴스의 스키마 컬렉션의 이름입니다. 이 값은 `null` (`Nothing` Visual basic에서) 연결 된 스키마 컬렉션이 있는 경우. 값이 null 인 경우는 `XmlSchemaCollectionDatabase` 및 `XmlSchemaCollectionOwningSchema` 도 열은 null입니다. |   | XmlSchemaCollectionOwningSchema | 행에 XML 열에 대 한 정보를 포함 하는 경우이 XML 인스턴스의 스키마 컬렉션이 있는 소유 관계형 스키마입니다. 이 값은 `null` (`Nothing` Visual basic에서) 컬렉션은 현재 데이터베이스에 정의 된 경우. 없으면 스키마 컬렉션이 없는 경우 null도는 `XmlSchemaCollectionDatabase` 및 `XmlSchemaCollectionName` 도 열은 null입니다. |      > [!NOTE] > 올바른 정보를 반환 하는 메타 데이터 열, 호출 해야 되도록 <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>와 `behavior` 매개 변수 설정 `KeyInfo`.</xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> 그렇지 않으면 스키마 테이블의 열 중 일부 기본값, null 또는 잘못 된 데이터를 반환할 수 있습니다."
  syntax:
    content: public override System.Data.DataTable GetSchemaTable ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 열 메타 데이터를 설명 하는 합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSchemaTable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 닫혀 있습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)
  id: GetSqlBinary(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlBinary(Int32)
  nameWithType: SqlDataReader.GetSqlBinary(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBinary(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref href=&quot;System.Data.SqlTypes.SqlBinary&quot;> </xref>합니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터에 이진 구조 있어야 하거나 예외가 생성 됩니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlBinary GetSqlBinary (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlBinary
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlTypes.SqlBinary&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlBinary*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)
  id: GetSqlBoolean(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlBoolean(Int32)
  nameWithType: SqlDataReader.GetSqlBoolean(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref href=&quot;System.Data.SqlTypes.SqlBoolean&quot;> </xref>합니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터는 이미 부울 이어야 하거나 예외가 생성 됩니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlBoolean GetSqlBoolean (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlBoolean*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)
  id: GetSqlByte(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlByte(Int32)
  nameWithType: SqlDataReader.GetSqlByte(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlByte(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref href=&quot;System.Data.SqlTypes.SqlByte&quot;> </xref>합니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 byte, 이거나 예외가 생성 됩니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlByte GetSqlByte (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlByte
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlTypes.SqlByte&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlByte*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)
  id: GetSqlBytes(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlBytes(Int32)
  nameWithType: SqlDataReader.GetSqlBytes(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBytes(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다 <xref href=&quot;System.Data.SqlTypes.SqlBytes&quot;> </xref>합니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlBytes GetSqlBytes (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlBytes
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlTypes.SqlBytes&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlBytes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)
  id: GetSqlChars(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlChars(Int32)
  nameWithType: SqlDataReader.GetSqlChars(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlChars(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다 <xref href=&quot;System.Data.SqlTypes.SqlChars&quot;> </xref>합니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlChars GetSqlChars (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlChars
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlTypes.SqlChars&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlChars*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)
  id: GetSqlDateTime(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlDateTime(Int32)
  nameWithType: SqlDataReader.GetSqlDateTime(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref href=&quot;System.Data.SqlTypes.SqlDateTime&quot;> </xref>합니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 날짜/시간 값을 검색 한 데이터에 있어야 하거나 예외가 생성 됩니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlDateTime GetSqlDateTime (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlDateTime
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlTypes.SqlDateTime&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)
  id: GetSqlDecimal(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlDecimal(Int32)
  nameWithType: SqlDataReader.GetSqlDecimal(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref href=&quot;System.Data.SqlTypes.SqlDecimal&quot;> </xref>합니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터에&10; 진수 값 있어야 하거나 예외가 생성 됩니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlDecimal GetSqlDecimal (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlDecimal
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlTypes.SqlDecimal&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlDecimal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)
  id: GetSqlDouble(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlDouble(Int32)
  nameWithType: SqlDataReader.GetSqlDouble(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDouble(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref href=&quot;System.Data.SqlTypes.SqlDouble&quot;> </xref>합니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 배정밀도 부동 소수점 숫자 이거나 예외가 생성 됩니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlDouble GetSqlDouble (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlTypes.SqlDouble&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlDouble*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)
  id: GetSqlGuid(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlGuid(Int32)
  nameWithType: SqlDataReader.GetSqlGuid(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlGuid(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref href=&quot;System.Data.SqlTypes.SqlGuid&quot;> </xref>합니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터는 이미는 GUID 여야 하거나 예외가 생성 됩니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlGuid GetSqlGuid (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlGuid
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlTypes.SqlGuid&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlGuid*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)
  id: GetSqlInt16(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlInt16(Int32)
  nameWithType: SqlDataReader.GetSqlInt16(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt16(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref href=&quot;System.Data.SqlTypes.SqlInt16&quot;> </xref>합니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터는 16 비트 부호 있는 정수 있어야 하거나 예외가 생성 됩니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlInt16 GetSqlInt16 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlInt16
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlTypes.SqlInt16&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlInt16*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)
  id: GetSqlInt32(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlInt32(Int32)
  nameWithType: SqlDataReader.GetSqlInt32(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt32(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref href=&quot;System.Data.SqlTypes.SqlInt32&quot;> </xref>합니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 32 비트 부호 있는 정수 이거나 예외가 생성 됩니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlInt32 GetSqlInt32 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlInt32
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlTypes.SqlInt32&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlInt32*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)
  id: GetSqlInt64(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlInt64(Int32)
  nameWithType: SqlDataReader.GetSqlInt64(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt64(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref href=&quot;System.Data.SqlTypes.SqlInt64&quot;> </xref>합니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 64 비트 부호 있는 정수 이거나 예외가 생성 됩니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlInt64 GetSqlInt64 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlInt64
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlTypes.SqlInt64&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlInt64*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)
  id: GetSqlMoney(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlMoney(Int32)
  nameWithType: SqlDataReader.GetSqlMoney(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlMoney(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref href=&quot;System.Data.SqlTypes.SqlMoney&quot;> </xref>합니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터에&10; 진수 값 있어야 하거나 예외가 생성 됩니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlMoney GetSqlMoney (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlMoney
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlTypes.SqlMoney&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlMoney*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)
  id: GetSqlSingle(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlSingle(Int32)
  nameWithType: SqlDataReader.GetSqlSingle(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlSingle(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref href=&quot;System.Data.SqlTypes.SqlSingle&quot;> </xref>합니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터에는 단 정밀도 부동 소수점 수 있어야 하거나 예외가 생성 됩니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlSingle GetSqlSingle (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlSingle
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlTypes.SqlSingle&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlSingle*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)
  id: GetSqlString(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlString(Int32)
  nameWithType: SqlDataReader.GetSqlString(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlString(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 가져옵니다는 <xref href=&quot;System.Data.SqlTypes.SqlString&quot;> </xref>합니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 문자열로 검색 되는 데이터에 있어야 하거나 예외가 생성 됩니다."
  syntax:
    content: public virtual System.Data.SqlTypes.SqlString GetSqlString (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlString
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlTypes.SqlString&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)
  id: GetSqlValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlValue(Int32)
  nameWithType: SqlDataReader.GetSqlValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "SQL Server 형식으로 지정 된 열의 데이터 값을 반환합니다."
  remarks: "GetSqlValue 네이티브 SQL Server 형식을 사용 하 여 데이터를 반환 합니다. .NET Framework 형식을 사용 하 여 데이터를 검색 하려면 <xref:System.Data.SqlClient.SqlDataReader.GetValue%2A>.</xref:System.Data.SqlClient.SqlDataReader.GetValue%2A> 를 참조 하세요."
  syntax:
    content: public virtual object GetSqlValue (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Object
      description: "로 표시 된 열의 값을 <xref href=&quot;System.Data.SqlDbType&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])
  id: GetSqlValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlValues(Object[])
  nameWithType: SqlDataReader.GetSqlValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "배열을 채웁니다 <xref:System.Object>레코드의 모든 열에 대 한 값이 포함 된 SQL Server 형식으로 표현 됩니다.</xref:System.Object>"
  remarks: "한 번의 호출을 CLR 형식 시스템 대신 SQL 형식 체계를 사용 하 여 레코드의 모든 열에 대 한 값을 반환 합니다. 길이 <xref:System.Object>배열 레코드의 열 개수와 일치 하지 않아도 됩니다.</xref:System.Object> 전달할 수는 <xref:System.Object>보다 적은 수의 레코드에 포함 된 열에 포함 된 배열입니다.</xref:System.Object> 데이터의 양만 <xref:System.Object>배열 저장 열 서 수는 0에서 시작 하는 배열에 복사 됩니다.</xref:System.Object> 전달할 수도 있습니다는 <xref:System.Object>결과 행에 포함 된 열 개수 이상의 길이가.</xref:System.Object> 나머지 열은 그대로 유지 되지 않습니다."
  syntax:
    content: public virtual int GetSqlValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "배열을 <xref:System.Object>값을 복사할 대상.</xref:System.Object> 열 값은 SQL Server 형식으로 표현 됩니다."
    return:
      type: System.Int32
      description: "복사 된 열 수를 나타내는 정수입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlValues*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>values</code>null입니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)
  id: GetSqlXml(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlXml(Int32)
  nameWithType: SqlDataReader.GetSqlXml(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlXml(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "XML 값으로 지정 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터에는 XML 값 있어야 합니다.       호출 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값을 확인 하려면.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlXml GetSqlXml (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Data.SqlTypes.SqlXml
      description: "A <xref href=&quot;System.Data.SqlTypes.SqlXml&quot;> </xref> 해당 필드에 저장 된 XML을 포함 하는 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetSqlXml*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0 <xref:System.Data.DataTableReader.FieldCount*>-1</xref:System.Data.DataTableReader.FieldCount*> ~ 범위를 벗어납니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 열 닫힌에 액세스 하려고 했습니다 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "검색된 된 데이터와 호환 되지 않습니다.는 <xref href=&quot;System.Data.SqlTypes.SqlXml&quot;> </xref> 유형입니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)
  id: GetStream(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetStream(Int32)
  nameWithType: SqlDataReader.GetStream(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetStream(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "바이너리, 이미지, varbinary, UDT 및 variant 데이터 형식에 <xref:System.IO.Stream>.</xref:System.IO.Stream> 로 검색"
  remarks: "<xref:System.IO.Stream.ReadTimeout%2A>값을 기본값으로 설정 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>; 수정할 수 있지만 <xref:System.IO.Stream.ReadTimeout%2A>GetStream을 통해.</xref:System.IO.Stream.ReadTimeout%2A> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A></xref:System.IO.Stream.ReadTimeout%2A>       Null 값 (0 바이트)는 비어 있는 것으로 반환 됩니다 <xref:System.IO.Stream>.</xref:System.IO.Stream>       <xref:System.Data.SqlClient.SqlDataReader.GetBytes%2A>발생는 <xref:System.InvalidOperationException>GetStream에서 반환 된 개체에 사용 하는 경우에 예외 때 <xref:System.Data.CommandBehavior>적용 됩니다.</xref:System.Data.CommandBehavior> </xref:System.InvalidOperationException></xref:System.Data.SqlClient.SqlDataReader.GetBytes%2A>       <xref:System.Data.SqlClient.SqlException><xref:System.IO.Stream> <xref:System.IO.IOException> <xref:System.Data.SqlClient.SqlException>.</xref:System.Data.SqlClient.SqlException> 에 대 한 내부 예외를 확인 하십시오;</xref:System.IO.IOException> 예외로 throw 됩니다</xref:System.IO.Stream> 에서 발생 한 예외</xref:System.Data.SqlClient.SqlException>       다음 <xref:System.IO.Stream>GetStream에서 반환 된 개체에 사용할 수 없는 멤버:-BeginWrite-EndWrite 길이-위치-Seek-SetLength-쓰기-WriteByte-WriteTimeout 경우 연결 속성에 `ContextConnection=true`, GetStream 순차적 모두에 대 한 동기 데이터를 검색할 수만 있게 (<xref:System.Data.CommandBehavior>) 및 비순차 (<xref:System.Data.CommandBehavior>) 액세스.</xref:System.Data.CommandBehavior> </xref:System.Data.CommandBehavior> </xref:System.IO.Stream>       자세한 내용은 참조 [SqlClient 스트리밍 지원](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public override System.IO.Stream GetStream (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.IO.Stream
      description: "스트림 개체입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetStream*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결이 삭제 되거나 데이터 검색 중 닫힙니다.       <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 데이터 검색 중 닫혀 있습니다.       데이터가 읽을 수 없습니다 (예를 들어 첫 번째 <> </> *> 호출 되거나가 false를 반환 하지 않은).       순차 모드에서 이전에 읽은 열 읽기 하려고 했습니다.       진행 중인 비동기 작업이 했습니다. 이 모든 Get에 적용 됩니다* 메서드에서 때 순차 모드에서 실행 되는 스트림을 읽는 동안 호출할 수 있습니다."
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "존재 하지 않는 열 읽기 하려고 합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "반환 되는 형식은 아래 형식 중 하나 였습니다:-이진-이미지-varbinary-udt"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetString(System.Int32)
  id: GetString(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetString(Int32)
  nameWithType: SqlDataReader.GetString(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetString(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 문자열로 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터는 문자열 이어야 이미입니다.       호출 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값을 확인 하려면.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override string GetString (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.String
      description: "지정 된 열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetString*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)
  id: GetTextReader(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetTextReader(Int32)
  nameWithType: SqlDataReader.GetTextReader(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetTextReader(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Char, NChar, NText, NVarChar, text, varChar, 및 Variant 데이터 형식을 <xref:System.IO.TextReader>.</xref:System.IO.TextReader> 검색"
  remarks: "<xref:System.Data.SqlClient.SqlException><xref:System.IO.TextReader> <xref:System.IO.IOException> <xref:System.Data.SqlClient.SqlException>.</xref:System.Data.SqlClient.SqlException> 에 대 한 내부 예외를 확인 하십시오;</xref:System.IO.IOException> 예외로 throw 됩니다</xref:System.IO.TextReader> 에서 발생 한 예외</xref:System.Data.SqlClient.SqlException>       Null 값 (0 바이트)는 비어 있는 것으로 반환 됩니다 <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       <xref:System.Data.SqlClient.SqlDataReader.GetChars%2A>발생는 <xref:System.InvalidOperationException>GetTextReader에서 반환 된 개체에 사용 하는 경우에 예외 때 <xref:System.Data.CommandBehavior>적용 됩니다.</xref:System.Data.CommandBehavior> </xref:System.InvalidOperationException></xref:System.Data.SqlClient.SqlDataReader.GetChars%2A>       때 연결 속성 `ContextConnection=true`, GetTextReader 순차적 모두에 대 한 동기 데이터를 검색할 수만 있게 (<xref:System.Data.CommandBehavior>) 및 비순차 (<xref:System.Data.CommandBehavior>) 액세스.</xref:System.Data.CommandBehavior> </xref:System.Data.CommandBehavior>       자세한 내용은 참조 [SqlClient 스트리밍 지원](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public override System.IO.TextReader GetTextReader (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "검색할 열입니다."
    return:
      type: System.IO.TextReader
      description: "반환 된 개체입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetTextReader*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결이 삭제 되거나 데이터 검색 중 닫힙니다.       <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 데이터 검색 중 닫혀 있습니다.       데이터가 읽을 수 없습니다 (예를 들어 첫 번째 <> </> *> 호출 되거나가 false를 반환 하지 않은).       순차 모드에서 이전에 읽은 열 읽기 하려고 했습니다.       진행 중인 비동기 작업이 했습니다. 이 모든 Get에 적용 됩니다* 메서드에서 때 순차 모드에서 실행 되는 스트림을 읽는 동안 호출할 수 있습니다."
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "존재 하지 않는 열 읽기 하려고 합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "반환 되는 형식은 아래 형식 중 하나 였습니다:-char-nchar ntext-nvarchar-텍스트-varchar"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)
  id: GetTimeSpan(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetTimeSpan(Int32)
  nameWithType: SqlDataReader.GetTimeSpan(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetTimeSpan(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 열의 값을 검색 하는 <xref:System.TimeSpan>개체입니다.</xref:System.TimeSpan>"
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 해야는 <xref:System.TimeSpan>개체입니다.</xref:System.TimeSpan>       호출 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값을 확인 하려면.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public virtual TimeSpan GetTimeSpan (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.TimeSpan
      description: "지정 된 열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetTimeSpan*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetValue(Int32)
  nameWithType: SqlDataReader.GetValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "네이티브 형식으로 지정 된 열의 값을 가져옵니다."
  remarks: "Getvalue가.NET Framework 형식을 사용 하 여 데이터를 반환 합니다."
  syntax:
    content: public override object GetValue (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Object
      description: "이 메서드가 반환 <xref href=&quot;System.DBNull&quot;> </xref> null 데이터베이스 열에 대 한 합니다."
  overload: System.Data.SqlClient.SqlDataReader.GetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetValues(Object[])
  nameWithType: SqlDataReader.GetValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "현재 행의 열 값이 있는 개체의 배열을 채웁니다."
  remarks: "이 메서드는 대부분의 응용 프로그램에 대 한 각 열을 개별적으로 검색 하는 대신 모든 열을 검색 하는 효율적인 방법을 제공 합니다.       전달할 수는 <xref:System.Object>보다 적은 수의 결과 행에 포함 된 열에 포함 된 배열입니다.</xref:System.Object> 데이터의 양만 <xref:System.Object>배열 저장 배열에 복사 합니다.</xref:System.Object> 전달할 수도 있습니다는 <xref:System.Object>결과 행에 포함 된 열 개수 이상의 길이가.</xref:System.Object>       이 메서드가 반환 <xref:System.DBNull>null 데이터베이스 열에 대 한.</xref:System.DBNull>"
  example:
  - "The following example demonstrates using a correctly sized  array  to read all values from the current row in the supplied <xref:System.Data.SqlClient.SqlDataReader>. In addition, the sample demonstrates using a fixed-sized array that could be either smaller or larger than the number of available columns.  \n  \n [!code-cs[DataWorks DataTableReader.GetValueObject#2](~/add/codesnippet/csharp/m-system.data.sqlclient._28_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetValueObject#2](~/add/codesnippet/visualbasic/m-system.data.sqlclient._28_1.vb)]"
  syntax:
    content: public override int GetValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "배열을 <xref:System.Object>특성 열을 복사할 대상.</xref:System.Object>"
    return:
      type: System.Int32
      description: "인스턴스 수가 <xref:System.Object>배열의.</xref:System.Object>"
  overload: System.Data.SqlClient.SqlDataReader.GetValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)
  id: GetXmlReader(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetXmlReader(Int32)
  nameWithType: SqlDataReader.GetXmlReader(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetXmlReader(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> XML 형식의 데이터를 검색합니다."
  remarks: "<xref:System.Xml.XmlReader>GetXmlReader에서 반환 된 개체는 비동기 작업을 지원 하지 않습니다.</xref:System.Xml.XmlReader> 에는 <xref:System.Xml.XmlReader>캐스트 XML 열에 있는 서버와 <xref:System.Data.SqlClient.SqlDataReader.GetTextReader%2A> <xref:System.Xml.XmlReader.Create%2A>.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Data.SqlClient.SqlDataReader.GetTextReader%2A> 사용 하 여와 nvarchar (max)</xref:System.Xml.XmlReader> 비동기 작업을 수행 해야 하는 경우       <xref:System.Data.SqlClient.SqlException><xref:System.Xml.XmlReader> <xref:System.Xml.XmlException> <xref:System.Data.SqlClient.SqlException>.</xref:System.Data.SqlClient.SqlException> 에 대 한 내부 예외를 확인 하십시오;</xref:System.Xml.XmlException> 예외로 throw 됩니다</xref:System.Xml.XmlReader> 에서 발생 한 예외</xref:System.Data.SqlClient.SqlException>       <xref:System.Data.SqlClient.SqlDataReader.GetChars%2A>발생는 <xref:System.InvalidOperationException>GetXmlReader에서 반환 된 개체에 사용 하는 경우에 예외 때 <xref:System.Data.CommandBehavior>적용 됩니다.</xref:System.Data.CommandBehavior> </xref:System.InvalidOperationException></xref:System.Data.SqlClient.SqlDataReader.GetChars%2A>       자세한 내용은 참조 [SqlClient 스트리밍 지원](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public virtual System.Xml.XmlReader GetXmlReader (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "지정 된 열의 값입니다."
    return:
      type: System.Xml.XmlReader
      description: "반환 된 개체입니다."
  overload: System.Data.SqlClient.SqlDataReader.GetXmlReader*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결이 삭제 되거나 데이터 검색 중 닫힙니다.       <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 데이터 검색 중 닫혀 있습니다.       데이터가 읽을 수 없습니다 (예를 들어 첫 번째 <> </> *> 호출 되거나가 false를 반환 하지 않은).       순차 모드에서 이전에 읽은 열 읽기 하려고 합니다.       진행 중인 비동기 작업이 했습니다. 이 모든 Get에 적용 됩니다* 메서드에서 때 순차 모드에서 실행 되는 스트림을 읽는 동안 호출할 수 있습니다."
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "존재 하지 않는 열 읽기 하려고 합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "반환된 된 형식이 xml이 아닙니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.HasRows
  id: HasRows
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: HasRows
  nameWithType: SqlDataReader.HasRows
  fullName: System.Data.SqlClient.SqlDataReader.HasRows
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 하나 이상의 행을 포함 합니다."
  syntax:
    content: public override bool HasRows { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 하나 이상의 행을 포함 하지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.HasRows*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.IsClosed
  id: IsClosed
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: IsClosed
  nameWithType: SqlDataReader.IsClosed
  fullName: System.Data.SqlClient.SqlDataReader.IsClosed
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "나타내는 부울 값을 검색 하는지 여부를 지정 된 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 인스턴스가 닫혔습니다."
  remarks: "읽을 수 없으면는 <xref:System.Data.SqlClient.SqlDataReader>닫힌 인스턴스.</xref:System.Data.SqlClient.SqlDataReader>"
  syntax:
    content: public override bool IsClosed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하는 경우 지정 된 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 인스턴스가 닫혀 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.IsClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.IsCommandBehavior(System.Data.CommandBehavior)
  id: IsCommandBehavior(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: IsCommandBehavior(CommandBehavior)
  nameWithType: SqlDataReader.IsCommandBehavior(CommandBehavior)
  fullName: System.Data.SqlClient.SqlDataReader.IsCommandBehavior(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "확인 여부를 지정 된 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> 의 일치 하는 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 합니다."
  remarks: "이 멤버는.NET Framework 인프라를 지원 하며 사용자 코드에서 직접 사용할 수 없습니다."
  syntax:
    content: protected bool IsCommandBehavior (System.Data.CommandBehavior condition);
    parameters:
    - id: condition
      type: System.Data.CommandBehavior
      description: "A <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> 열거 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하는 경우 지정 된 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> 가 true 이면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 그렇지 않은 경우."
  overload: System.Data.SqlClient.SqlDataReader.IsCommandBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)
  id: IsDBNull(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: IsDBNull(Int32)
  nameWithType: SqlDataReader.IsDBNull(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.IsDBNull(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "열에 존재 하지 않거나 누락 된 값이 들어 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "Get 메서드는 형식화 된를 호출 하기 전에 null 열 값을 확인 하려면이 메서드를 호출 (예를 들어 <xref:System.Data.SqlClient.SqlDataReader.GetByte%2A>, <xref:System.Data.SqlClient.SqlDataReader.GetChar%2A>등)에 오류가 발생 하지 않도록 합니다.</xref:System.Data.SqlClient.SqlDataReader.GetChar%2A> </xref:System.Data.SqlClient.SqlDataReader.GetByte%2A>       [!code-vb[#1 SqlDataReader_IsDbNull](~/add/codesnippet/visualbasic/m-system.data.sqlclient._29_1.vb)][!code-cs[SqlDataReader_IsDbNull&#1;  ](~/add/codesnippet/csharp/m-system.data.sqlclient._29_1.cs)]"
  syntax:
    content: public override bool IsDBNull (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 열 값에 해당 하는 경우 <xref href=&quot;System.DBNull&quot;> </xref>고, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.IsDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  id: IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: IsDBNullAsync(Int32,CancellationToken)
  nameWithType: SqlDataReader.IsDBNullAsync(Int32,CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(Int32,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "비동기 버전의 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull*>, 열에 존재 하지 않거나 누락 된 값이 들어 있는지 여부를 나타내는 값을 가져옵니다입니다.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull*>       취소 토큰은 명령 제한 시간이 경과 하기 전에 작업을 중단 되어야 하는 요청에 사용할 수 있습니다. 예외는 반환 된 작업 개체를 통해 보고 됩니다."
  remarks: "자세한 내용은 참조 [SqlClient 스트리밍 지원](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public override System.Threading.Tasks.Task<bool> IsDBNullAsync (int i, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: i
      type: System.Int32
      description: "검색할&0;부터 시작 하는 열입니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "작업을 취소 해야 한다는 알림을 전파 하는 취소 명령입니다. 취소를 보장 하지는 않습니다. 설정 <xref uid=&quot;langword_csharp_CancellationToken.None&quot; name=&quot;CancellationToken.None&quot; href=&quot;&quot;> </xref> 하면이 메서드가 <xref:System.Data.SqlClient.SqlDataReader.IsDBNull*>.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull*> 같음 반환된 된 작업 취소 됨으로 표시 되어야 합니다."
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 열 값에 해당 하는 경우 <xref uid=&quot;langword_csharp_DBNull&quot; name=&quot;DBNull&quot; href=&quot;&quot;> </xref> 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.IsDBNullAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결이 삭제 되거나 데이터 검색 중 닫힙니다.       <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 데이터 검색 중 닫혀 있습니다.       데이터가 읽을 수 없습니다 (예를 들어 첫 번째 <> </> *> 호출 되거나가 false를 반환 하지 않은).       순차 모드에서 이전에 읽은 열 읽기 하려고 합니다.       진행 중인 비동기 작업이 했습니다. 이 모든 Get에 적용 됩니다* 메서드에서 때 순차 모드에서 실행 되는 스트림을 읽는 동안 호출할 수 있습니다.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>연결 문자열에 지정 됩니다."
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "존재 하지 않는 열 읽기 하려고 합니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SqlDataReader.Item(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "열 서 수를 지정 된 네이티브 형식으로 지정 된 열의 값을 가져옵니다."
  syntax:
    content: public override object this[int i] { get; }
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Object
      description: "네이티브 형식으로 지정 된 열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "전달 된 <xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*> 0k 범위를 벗어납니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Item(System.String)
  id: Item(System.String)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Item(String)
  nameWithType: SqlDataReader.Item(String)
  fullName: System.Data.SqlClient.SqlDataReader.Item(String)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "열 이름이 지정 된 네이티브 형식으로 지정 된 열의 값을 가져옵니다."
  remarks: "대/소문자 구분 조회를 먼저 수행 됩니다. 실패 한 경우에 두 번째 대/소문자 구분 검색이 수행 됩니다 (대/소문자 구분 비교를 수행 데이터베이스 데이터 정렬을 사용 하 여). 비교는 대/소문자 culture 별 규칙에 의해 영향을 예기치 않은 결과가 발생할 수 있습니다. 예를 들어, 터키어, 다음 예제에서는 잘못 된 결과가 발생의 파일 시스템에서 문자 &quot;i&quot;에 대 한 대/소문자 규칙을 사용 하지 않으므로 &quot;file&quot;의 합니다.       이 메서드는 일본어가 나 너비 구분 하지 않습니다."
  syntax:
    content: public override object this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: "열 이름입니다."
    return:
      type: System.Object
      description: "네이티브 형식으로 지정 된 열의 값입니다."
  overload: System.Data.SqlClient.SqlDataReader.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "지정한 이름 가진 열을 찾았습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.NextResult
  id: NextResult
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: NextResult()
  nameWithType: SqlDataReader.NextResult()
  fullName: System.Data.SqlClient.SqlDataReader.NextResult()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "TRANSACT-SQL 일괄 처리 문의 결과를 읽을 때 데이터 판독기를 다음 결과로 이동 합니다."
  remarks: "TRANSACT-SQL 일괄 처리 문을 실행 하 여 생성할 수 있는 여러 결과 처리 하는 데 사용 합니다.       기본적으로 데이터 판독기가 첫 번째 결과에 배치 됩니다."
  syntax:
    content: public override bool NextResult ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>결과 집합이 더 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.NextResult*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)
  id: NextResultAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: NextResultAsync(CancellationToken)
  nameWithType: SqlDataReader.NextResultAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.NextResultAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "비동기 버전의 <xref:System.Data.SqlClient.SqlDataReader.NextResult*>, 일괄 처리의 결과 읽을 때 다음 결과 데이터 판독기를 이동 하 [!INCLUDE[tsql](~/add/includes/tsql-md.md)] 문.</xref:System.Data.SqlClient.SqlDataReader.NextResult*>       취소 토큰은 명령 제한 시간이 경과 하기 전에 작업을 중단 되어야 하는 요청에 사용할 수 있습니다.  예외는 반환 된 작업 개체를 통해 보고 됩니다."
  remarks: "비동기 프로그래밍에 대 한 자세한 내용은 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], 참조 [비동기 프로그래밍](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public override System.Threading.Tasks.Task<bool> NextResultAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "취소 명령입니다."
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "비동기 작업을 나타내는 작업입니다."
  overload: System.Data.SqlClient.SqlDataReader.NextResultAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "작업 완료 전에 동일한 인스턴스에 대해 NextResultAsync를 두 번 이상 호출 합니다.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>연결 문자열에 지정 됩니다."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: '[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]명령 텍스트를 실행 하는 동안 오류가 발생 했습니다.'
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Read
  id: Read
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Read()
  nameWithType: SqlDataReader.Read()
  fullName: System.Data.SqlClient.SqlDataReader.Read()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "이동 된 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 를 다음 레코드로 합니다."
  remarks: "기본 위치는 <xref:System.Data.SqlClient.SqlDataReader>첫 번째 레코드 앞입니다.</xref:System.Data.SqlClient.SqlDataReader> 따라서 데이터에 액세스 하려면 Read를 호출 해야 합니다.       하나의 `SqlDataReader` 당 관련 <xref:System.Data.SqlClient.SqlConnection>한 번에 열려 있을 수 있습니다 및 첫 번째 닫힐 때까지 다른를 열려는 작업에 실패 합니다.</xref:System.Data.SqlClient.SqlConnection> 마찬가지로는 `SqlDataReader` 사용 되는 연결 된 `SqlConnection` 중인 할 때까지 호출 <xref:System.Data.SqlClient.SqlDataReader.Close%2A>.</xref:System.Data.SqlClient.SqlDataReader.Close%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, a <xref:System.Data.SqlClient.SqlCommand>, and a <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it out to the console window. The code then closes the <xref:System.Data.SqlClient.SqlDataReader>. The <xref:System.Data.SqlClient.SqlConnection> is closed automatically at the end of the `using` code block.  \n  \n [!code-cs[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._26_1.cs)]\n [!code-vb[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._26_1.vb)]"
  syntax:
    content: public override bool Read ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>행이 더 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlDataReader.Read*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: '[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]명령 텍스트를 실행 하는 동안 오류가 발생 했습니다.'
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)
  id: ReadAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: ReadAsync(CancellationToken)
  nameWithType: SqlDataReader.ReadAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.ReadAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "비동기 버전의 <xref:System.Data.SqlClient.SqlDataReader.Read*>, 어떤 발전은 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 를 다음 레코드로.</xref:System.Data.SqlClient.SqlDataReader.Read*>       취소 토큰은 명령 제한 시간이 경과 하기 전에 작업을 중단 되어야 하는 요청에 사용할 수 있습니다. 예외는 반환 된 작업 개체를 통해 보고 됩니다."
  remarks: "경우는 `behavior` 의 매개 변수 <xref:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync%2A>로 설정 된 `Default`, ReadAsync 작업을 반환 하기 전에 전체 행을 읽습니다.</xref:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync%2A>       자세한 내용은 비동기 프로그래밍에 대 한 코드 샘플을 포함 하는 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], 참조 [비동기 프로그래밍](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public override System.Threading.Tasks.Task<bool> ReadAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "취소 명령입니다."
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "비동기 작업을 나타내는 작업입니다."
  overload: System.Data.SqlClient.SqlDataReader.ReadAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "작업 완료 전에 동일한 인스턴스에 대해 ReadAsync를 두 번 이상 호출 합니다.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>연결 문자열에 지정 됩니다."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: '[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]명령 텍스트를 실행 하는 동안 오류가 발생 했습니다.'
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.RecordsAffected
  id: RecordsAffected
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: RecordsAffected
  nameWithType: SqlDataReader.RecordsAffected
  fullName: System.Data.SqlClient.SqlDataReader.RecordsAffected
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "변경, 삽입 또는 TRANSACT-SQL 문 실행 하 여 삭제 된 행의 수를 가져옵니다."
  remarks: "모든 행을 <xref:System.Data.SqlClient.SqlDataReader>.</xref:System.Data.SqlClient.SqlDataReader> 를 닫을 때까지 RecordsAffected 속성이 설정 되지       이 속성의 값은 누적 합니다. 예를 들어, 일괄 처리 모드의 값에 두 개의 레코드를 삽입 하면 `RecordsAffected` 은&2;가 됩니다.       <xref:System.Data.SqlClient.SqlDataReader.IsClosed%2A>RecordsAffected 후 호출할 수 있는 유일한 속성은 및에서 <xref:System.Data.SqlClient.SqlDataReader>닫힙니다.</xref:System.Data.SqlClient.SqlDataReader></xref:System.Data.SqlClient.SqlDataReader.IsClosed%2A>"
  syntax:
    content: public override int RecordsAffected { get; }
    return:
      type: System.Int32
      description: "행 수가 변경, 삽입 또는 삭제 행이 없는 영향을 받은 경우에 0 또는 문이 실패 했습니다. 및 SELECT 문에 대 한-1을 추가 합니다."
  overload: System.Data.SqlClient.SqlDataReader.RecordsAffected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData(System.Int32)
  id: System#Data#IDataRecord#GetData(System.Int32)
  isEii: true
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: System.Data.IDataRecord.GetData(Int32)
  nameWithType: SqlDataReader.System.Data.IDataRecord.GetData(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.System.Data.IDataRecord.GetData(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "반환 된 <xref href=&quot;System.Data.IDataReader&quot;> </xref> 지정 된 열 서 수입니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.SqlClient.SqlDataReader>인스턴스로 캐스팅 되는 <xref:System.IDataRecord>인터페이스.</xref:System.IDataRecord> </xref:System.Data.SqlClient.SqlDataReader>"
  syntax:
    content: System.Data.IDataReader IDataRecord.GetData (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "열 서 수입니다."
    return:
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref> 인스턴스는 지정 된 열 서 수입니다."
  overload: System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  id: VisibleFieldCount
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: VisibleFieldCount
  nameWithType: SqlDataReader.VisibleFieldCount
  fullName: System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "필드 수를 가져옵니다는 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 있는 숨겨지지 않습니다."
  remarks: "필드 수를 확인 하려면이 값은 사용 된 <xref:System.Data.SqlClient.SqlDataReader>표시 됩니다.</xref:System.Data.SqlClient.SqlDataReader> 예를 들어 부분 기본 키에 대해 SELECT 숨김 필드로 키의 나머지 부분을 반환합니다. 숨겨진된 필드는 항상 표시 되는 필드에 추가 됩니다."
  syntax:
    content: public override int VisibleFieldCount { get; }
    return:
      type: System.Int32
      description: "표시 되는 필드의 수입니다."
  overload: System.Data.SqlClient.SqlDataReader.VisibleFieldCount*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbDataReader
  isExternal: false
  name: System.Data.Common.DbDataReader
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.Data.SqlClient.SqlDataReader.Close
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Close()
  nameWithType: SqlDataReader.Close()
  fullName: System.Data.SqlClient.SqlDataReader.Close()
- uid: System.Data.SqlClient.SqlDataReader.Connection
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Connection
  nameWithType: SqlDataReader.Connection
  fullName: System.Data.SqlClient.SqlDataReader.Connection
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlDataReader.Depth
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Depth
  nameWithType: SqlDataReader.Depth
  fullName: System.Data.SqlClient.SqlDataReader.Depth
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlDataReader.FieldCount
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: FieldCount
  nameWithType: SqlDataReader.FieldCount
  fullName: System.Data.SqlClient.SqlDataReader.FieldCount
- uid: System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetBoolean(Int32)
  nameWithType: SqlDataReader.GetBoolean(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetBoolean(Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetByte(Int32)
  nameWithType: SqlDataReader.GetByte(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetByte(Int32)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: SqlDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetChar(Int32)
  nameWithType: SqlDataReader.GetChar(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetChar(Int32)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: SqlDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDataTypeName(Int32)
  nameWithType: SqlDataReader.GetDataTypeName(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDataTypeName(Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDateTime(Int32)
  nameWithType: SqlDataReader.GetDateTime(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDateTime(Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDateTimeOffset(Int32)
  nameWithType: SqlDataReader.GetDateTimeOffset(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(Int32)
- uid: System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDecimal(Int32)
  nameWithType: SqlDataReader.GetDecimal(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDecimal(Int32)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDouble(Int32)
  nameWithType: SqlDataReader.GetDouble(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDouble(Int32)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Data.SqlClient.SqlDataReader.GetEnumerator
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetEnumerator()
  nameWithType: SqlDataReader.GetEnumerator()
  fullName: System.Data.SqlClient.SqlDataReader.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldType(Int32)
  nameWithType: SqlDataReader.GetFieldType(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldType(Int32)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldValue(Int32)
  nameWithType: SqlDataReader.GetFieldValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValue(Int32)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldValueAsync(Int32,CancellationToken)
  nameWithType: SqlDataReader.GetFieldValueAsync(Int32,CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync(Int32,CancellationToken)
- uid: System.Threading.Tasks.Task{T}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFloat(Int32)
  nameWithType: SqlDataReader.GetFloat(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFloat(Int32)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetGuid(Int32)
  nameWithType: SqlDataReader.GetGuid(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetGuid(Int32)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt16(Int32)
  nameWithType: SqlDataReader.GetInt16(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt16(Int32)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt32(Int32)
  nameWithType: SqlDataReader.GetInt32(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt32(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt64(Int32)
  nameWithType: SqlDataReader.GetInt64(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt64(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetName(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetName(Int32)
  nameWithType: SqlDataReader.GetName(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetName(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetOrdinal(String)
  nameWithType: SqlDataReader.GetOrdinal(String)
  fullName: System.Data.SqlClient.SqlDataReader.GetOrdinal(String)
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificFieldType(Int32)
  nameWithType: SqlDataReader.GetProviderSpecificFieldType(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificValue(Int32)
  nameWithType: SqlDataReader.GetProviderSpecificValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(Int32)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificValues(Object[])
  nameWithType: SqlDataReader.GetProviderSpecificValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlDataReader.GetSchemaTable
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSchemaTable()
  nameWithType: SqlDataReader.GetSchemaTable()
  fullName: System.Data.SqlClient.SqlDataReader.GetSchemaTable()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBinary(Int32)
  nameWithType: SqlDataReader.GetSqlBinary(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBinary(Int32)
- uid: System.Data.SqlTypes.SqlBinary
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlBinary
  nameWithType: SqlBinary
  fullName: System.Data.SqlTypes.SqlBinary
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBoolean(Int32)
  nameWithType: SqlDataReader.GetSqlBoolean(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(Int32)
- uid: System.Data.SqlTypes.SqlBoolean
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlBoolean
  nameWithType: SqlBoolean
  fullName: System.Data.SqlTypes.SqlBoolean
- uid: System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlByte(Int32)
  nameWithType: SqlDataReader.GetSqlByte(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlByte(Int32)
- uid: System.Data.SqlTypes.SqlByte
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlByte
  nameWithType: SqlByte
  fullName: System.Data.SqlTypes.SqlByte
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBytes(Int32)
  nameWithType: SqlDataReader.GetSqlBytes(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBytes(Int32)
- uid: System.Data.SqlTypes.SqlBytes
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlBytes
  nameWithType: SqlBytes
  fullName: System.Data.SqlTypes.SqlBytes
- uid: System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlChars(Int32)
  nameWithType: SqlDataReader.GetSqlChars(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlChars(Int32)
- uid: System.Data.SqlTypes.SqlChars
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlChars
  nameWithType: SqlChars
  fullName: System.Data.SqlTypes.SqlChars
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDateTime(Int32)
  nameWithType: SqlDataReader.GetSqlDateTime(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(Int32)
- uid: System.Data.SqlTypes.SqlDateTime
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlDateTime
  nameWithType: SqlDateTime
  fullName: System.Data.SqlTypes.SqlDateTime
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDecimal(Int32)
  nameWithType: SqlDataReader.GetSqlDecimal(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(Int32)
- uid: System.Data.SqlTypes.SqlDecimal
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlDecimal
  nameWithType: SqlDecimal
  fullName: System.Data.SqlTypes.SqlDecimal
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDouble(Int32)
  nameWithType: SqlDataReader.GetSqlDouble(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDouble(Int32)
- uid: System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlDouble
  nameWithType: SqlDouble
  fullName: System.Data.SqlTypes.SqlDouble
- uid: System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlGuid(Int32)
  nameWithType: SqlDataReader.GetSqlGuid(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlGuid(Int32)
- uid: System.Data.SqlTypes.SqlGuid
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlGuid
  nameWithType: SqlGuid
  fullName: System.Data.SqlTypes.SqlGuid
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt16(Int32)
  nameWithType: SqlDataReader.GetSqlInt16(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt16(Int32)
- uid: System.Data.SqlTypes.SqlInt16
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt16
  nameWithType: SqlInt16
  fullName: System.Data.SqlTypes.SqlInt16
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt32(Int32)
  nameWithType: SqlDataReader.GetSqlInt32(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt32(Int32)
- uid: System.Data.SqlTypes.SqlInt32
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt32
  nameWithType: SqlInt32
  fullName: System.Data.SqlTypes.SqlInt32
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt64(Int32)
  nameWithType: SqlDataReader.GetSqlInt64(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt64(Int32)
- uid: System.Data.SqlTypes.SqlInt64
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt64
  nameWithType: SqlInt64
  fullName: System.Data.SqlTypes.SqlInt64
- uid: System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlMoney(Int32)
  nameWithType: SqlDataReader.GetSqlMoney(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlMoney(Int32)
- uid: System.Data.SqlTypes.SqlMoney
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlMoney
  nameWithType: SqlMoney
  fullName: System.Data.SqlTypes.SqlMoney
- uid: System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlSingle(Int32)
  nameWithType: SqlDataReader.GetSqlSingle(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlSingle(Int32)
- uid: System.Data.SqlTypes.SqlSingle
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlSingle
  nameWithType: SqlSingle
  fullName: System.Data.SqlTypes.SqlSingle
- uid: System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlString(Int32)
  nameWithType: SqlDataReader.GetSqlString(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlString(Int32)
- uid: System.Data.SqlTypes.SqlString
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlString
  nameWithType: SqlString
  fullName: System.Data.SqlTypes.SqlString
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlValue(Int32)
  nameWithType: SqlDataReader.GetSqlValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValue(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlValues(Object[])
  nameWithType: SqlDataReader.GetSqlValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValues(Object[])
- uid: System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlXml(Int32)
  nameWithType: SqlDataReader.GetSqlXml(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlXml(Int32)
- uid: System.Data.SqlTypes.SqlXml
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlXml
  nameWithType: SqlXml
  fullName: System.Data.SqlTypes.SqlXml
- uid: System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetStream(Int32)
  nameWithType: SqlDataReader.GetStream(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetStream(Int32)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Data.SqlClient.SqlDataReader.GetString(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetString(Int32)
  nameWithType: SqlDataReader.GetString(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetString(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetTextReader(Int32)
  nameWithType: SqlDataReader.GetTextReader(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetTextReader(Int32)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetTimeSpan(Int32)
  nameWithType: SqlDataReader.GetTimeSpan(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetTimeSpan(Int32)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetValue(Int32)
  nameWithType: SqlDataReader.GetValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetValue(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetValues(Object[])
  nameWithType: SqlDataReader.GetValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetValues(Object[])
- uid: System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetXmlReader(Int32)
  nameWithType: SqlDataReader.GetXmlReader(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetXmlReader(Int32)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Data.SqlClient.SqlDataReader.HasRows
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: HasRows
  nameWithType: SqlDataReader.HasRows
  fullName: System.Data.SqlClient.SqlDataReader.HasRows
- uid: System.Data.SqlClient.SqlDataReader.IsClosed
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsClosed
  nameWithType: SqlDataReader.IsClosed
  fullName: System.Data.SqlClient.SqlDataReader.IsClosed
- uid: System.Data.SqlClient.SqlDataReader.IsCommandBehavior(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsCommandBehavior(CommandBehavior)
  nameWithType: SqlDataReader.IsCommandBehavior(CommandBehavior)
  fullName: System.Data.SqlClient.SqlDataReader.IsCommandBehavior(CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsDBNull(Int32)
  nameWithType: SqlDataReader.IsDBNull(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.IsDBNull(Int32)
- uid: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsDBNullAsync(Int32,CancellationToken)
  nameWithType: SqlDataReader.IsDBNullAsync(Int32,CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(Int32,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlDataReader.Item(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Item(Int32)
  nameWithType: SqlDataReader.Item(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.Item(Int32)
- uid: System.Data.SqlClient.SqlDataReader.Item(System.String)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Item(String)
  nameWithType: SqlDataReader.Item(String)
  fullName: System.Data.SqlClient.SqlDataReader.Item(String)
- uid: System.Data.SqlClient.SqlDataReader.NextResult
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: NextResult()
  nameWithType: SqlDataReader.NextResult()
  fullName: System.Data.SqlClient.SqlDataReader.NextResult()
- uid: System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: NextResultAsync(CancellationToken)
  nameWithType: SqlDataReader.NextResultAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.NextResultAsync(CancellationToken)
- uid: System.Data.SqlClient.SqlDataReader.Read
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Read()
  nameWithType: SqlDataReader.Read()
  fullName: System.Data.SqlClient.SqlDataReader.Read()
- uid: System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: ReadAsync(CancellationToken)
  nameWithType: SqlDataReader.ReadAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.ReadAsync(CancellationToken)
- uid: System.Data.SqlClient.SqlDataReader.RecordsAffected
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: RecordsAffected
  nameWithType: SqlDataReader.RecordsAffected
  fullName: System.Data.SqlClient.SqlDataReader.RecordsAffected
- uid: System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: System.Data.IDataRecord.GetData(Int32)
  nameWithType: SqlDataReader.System.Data.IDataRecord.GetData(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.System.Data.IDataRecord.GetData(Int32)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: VisibleFieldCount
  nameWithType: SqlDataReader.VisibleFieldCount
  fullName: System.Data.SqlClient.SqlDataReader.VisibleFieldCount
- uid: System.Data.SqlClient.SqlDataReader.Close*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Close
  nameWithType: SqlDataReader.Close
- uid: System.Data.SqlClient.SqlDataReader.Connection*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Connection
  nameWithType: SqlDataReader.Connection
- uid: System.Data.SqlClient.SqlDataReader.Depth*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Depth
  nameWithType: SqlDataReader.Depth
- uid: System.Data.SqlClient.SqlDataReader.FieldCount*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: FieldCount
  nameWithType: SqlDataReader.FieldCount
- uid: System.Data.SqlClient.SqlDataReader.GetBoolean*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetBoolean
  nameWithType: SqlDataReader.GetBoolean
- uid: System.Data.SqlClient.SqlDataReader.GetByte*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetByte
  nameWithType: SqlDataReader.GetByte
- uid: System.Data.SqlClient.SqlDataReader.GetBytes*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetBytes
  nameWithType: SqlDataReader.GetBytes
- uid: System.Data.SqlClient.SqlDataReader.GetChar*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetChar
  nameWithType: SqlDataReader.GetChar
- uid: System.Data.SqlClient.SqlDataReader.GetChars*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetChars
  nameWithType: SqlDataReader.GetChars
- uid: System.Data.SqlClient.SqlDataReader.GetDataTypeName*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDataTypeName
  nameWithType: SqlDataReader.GetDataTypeName
- uid: System.Data.SqlClient.SqlDataReader.GetDateTime*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDateTime
  nameWithType: SqlDataReader.GetDateTime
- uid: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDateTimeOffset
  nameWithType: SqlDataReader.GetDateTimeOffset
- uid: System.Data.SqlClient.SqlDataReader.GetDecimal*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDecimal
  nameWithType: SqlDataReader.GetDecimal
- uid: System.Data.SqlClient.SqlDataReader.GetDouble*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDouble
  nameWithType: SqlDataReader.GetDouble
- uid: System.Data.SqlClient.SqlDataReader.GetEnumerator*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetEnumerator
  nameWithType: SqlDataReader.GetEnumerator
- uid: System.Data.SqlClient.SqlDataReader.GetFieldType*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldType
  nameWithType: SqlDataReader.GetFieldType
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValue<T>*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldValue<T>
  nameWithType: SqlDataReader.GetFieldValue<T>
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync<T>*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldValueAsync<T>
  nameWithType: SqlDataReader.GetFieldValueAsync<T>
- uid: System.Data.SqlClient.SqlDataReader.GetFloat*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFloat
  nameWithType: SqlDataReader.GetFloat
- uid: System.Data.SqlClient.SqlDataReader.GetGuid*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetGuid
  nameWithType: SqlDataReader.GetGuid
- uid: System.Data.SqlClient.SqlDataReader.GetInt16*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt16
  nameWithType: SqlDataReader.GetInt16
- uid: System.Data.SqlClient.SqlDataReader.GetInt32*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt32
  nameWithType: SqlDataReader.GetInt32
- uid: System.Data.SqlClient.SqlDataReader.GetInt64*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt64
  nameWithType: SqlDataReader.GetInt64
- uid: System.Data.SqlClient.SqlDataReader.GetName*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetName
  nameWithType: SqlDataReader.GetName
- uid: System.Data.SqlClient.SqlDataReader.GetOrdinal*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetOrdinal
  nameWithType: SqlDataReader.GetOrdinal
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificFieldType
  nameWithType: SqlDataReader.GetProviderSpecificFieldType
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificValue
  nameWithType: SqlDataReader.GetProviderSpecificValue
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificValues
  nameWithType: SqlDataReader.GetProviderSpecificValues
- uid: System.Data.SqlClient.SqlDataReader.GetSchemaTable*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSchemaTable
  nameWithType: SqlDataReader.GetSchemaTable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBinary*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBinary
  nameWithType: SqlDataReader.GetSqlBinary
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBoolean*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBoolean
  nameWithType: SqlDataReader.GetSqlBoolean
- uid: System.Data.SqlClient.SqlDataReader.GetSqlByte*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlByte
  nameWithType: SqlDataReader.GetSqlByte
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBytes*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBytes
  nameWithType: SqlDataReader.GetSqlBytes
- uid: System.Data.SqlClient.SqlDataReader.GetSqlChars*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlChars
  nameWithType: SqlDataReader.GetSqlChars
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDateTime*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDateTime
  nameWithType: SqlDataReader.GetSqlDateTime
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDecimal*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDecimal
  nameWithType: SqlDataReader.GetSqlDecimal
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDouble*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDouble
  nameWithType: SqlDataReader.GetSqlDouble
- uid: System.Data.SqlClient.SqlDataReader.GetSqlGuid*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlGuid
  nameWithType: SqlDataReader.GetSqlGuid
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt16*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt16
  nameWithType: SqlDataReader.GetSqlInt16
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt32*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt32
  nameWithType: SqlDataReader.GetSqlInt32
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt64*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt64
  nameWithType: SqlDataReader.GetSqlInt64
- uid: System.Data.SqlClient.SqlDataReader.GetSqlMoney*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlMoney
  nameWithType: SqlDataReader.GetSqlMoney
- uid: System.Data.SqlClient.SqlDataReader.GetSqlSingle*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlSingle
  nameWithType: SqlDataReader.GetSqlSingle
- uid: System.Data.SqlClient.SqlDataReader.GetSqlString*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlString
  nameWithType: SqlDataReader.GetSqlString
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValue*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlValue
  nameWithType: SqlDataReader.GetSqlValue
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValues*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlValues
  nameWithType: SqlDataReader.GetSqlValues
- uid: System.Data.SqlClient.SqlDataReader.GetSqlXml*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlXml
  nameWithType: SqlDataReader.GetSqlXml
- uid: System.Data.SqlClient.SqlDataReader.GetStream*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetStream
  nameWithType: SqlDataReader.GetStream
- uid: System.Data.SqlClient.SqlDataReader.GetString*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetString
  nameWithType: SqlDataReader.GetString
- uid: System.Data.SqlClient.SqlDataReader.GetTextReader*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetTextReader
  nameWithType: SqlDataReader.GetTextReader
- uid: System.Data.SqlClient.SqlDataReader.GetTimeSpan*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetTimeSpan
  nameWithType: SqlDataReader.GetTimeSpan
- uid: System.Data.SqlClient.SqlDataReader.GetValue*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetValue
  nameWithType: SqlDataReader.GetValue
- uid: System.Data.SqlClient.SqlDataReader.GetValues*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetValues
  nameWithType: SqlDataReader.GetValues
- uid: System.Data.SqlClient.SqlDataReader.GetXmlReader*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetXmlReader
  nameWithType: SqlDataReader.GetXmlReader
- uid: System.Data.SqlClient.SqlDataReader.HasRows*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: HasRows
  nameWithType: SqlDataReader.HasRows
- uid: System.Data.SqlClient.SqlDataReader.IsClosed*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsClosed
  nameWithType: SqlDataReader.IsClosed
- uid: System.Data.SqlClient.SqlDataReader.IsCommandBehavior*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsCommandBehavior
  nameWithType: SqlDataReader.IsCommandBehavior
- uid: System.Data.SqlClient.SqlDataReader.IsDBNull*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsDBNull
  nameWithType: SqlDataReader.IsDBNull
- uid: System.Data.SqlClient.SqlDataReader.IsDBNullAsync*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsDBNullAsync
  nameWithType: SqlDataReader.IsDBNullAsync
- uid: System.Data.SqlClient.SqlDataReader.Item*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Item
  nameWithType: SqlDataReader.Item
- uid: System.Data.SqlClient.SqlDataReader.NextResult*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: NextResult
  nameWithType: SqlDataReader.NextResult
- uid: System.Data.SqlClient.SqlDataReader.NextResultAsync*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: NextResultAsync
  nameWithType: SqlDataReader.NextResultAsync
- uid: System.Data.SqlClient.SqlDataReader.Read*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Read
  nameWithType: SqlDataReader.Read
- uid: System.Data.SqlClient.SqlDataReader.ReadAsync*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: ReadAsync
  nameWithType: SqlDataReader.ReadAsync
- uid: System.Data.SqlClient.SqlDataReader.RecordsAffected*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: RecordsAffected
  nameWithType: SqlDataReader.RecordsAffected
- uid: System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: System.Data.IDataRecord.GetData
  nameWithType: SqlDataReader.System.Data.IDataRecord.GetData
- uid: System.Data.SqlClient.SqlDataReader.VisibleFieldCount*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: VisibleFieldCount
  nameWithType: SqlDataReader.VisibleFieldCount
