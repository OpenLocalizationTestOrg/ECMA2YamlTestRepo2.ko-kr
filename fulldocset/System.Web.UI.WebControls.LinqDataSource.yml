### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSource
  id: LinqDataSource
  children:
  - System.Web.UI.WebControls.LinqDataSource.#ctor
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  - System.Web.UI.WebControls.LinqDataSource.AutoPage
  - System.Web.UI.WebControls.LinqDataSource.AutoSort
  - System.Web.UI.WebControls.LinqDataSource.ContextCreated
  - System.Web.UI.WebControls.LinqDataSource.ContextCreating
  - System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  - System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  - System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  - System.Web.UI.WebControls.LinqDataSource.CreateView
  - System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Deleted
  - System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  - System.Web.UI.WebControls.LinqDataSource.Deleting
  - System.Web.UI.WebControls.LinqDataSource.EnableDelete
  - System.Web.UI.WebControls.LinqDataSource.EnableInsert
  - System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  - System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  - System.Web.UI.WebControls.LinqDataSource.GroupBy
  - System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  - System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Inserted
  - System.Web.UI.WebControls.LinqDataSource.Inserting
  - System.Web.UI.WebControls.LinqDataSource.InsertParameters
  - System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OrderBy
  - System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  - System.Web.UI.WebControls.LinqDataSource.Select
  - System.Web.UI.WebControls.LinqDataSource.Selected
  - System.Web.UI.WebControls.LinqDataSource.Selecting
  - System.Web.UI.WebControls.LinqDataSource.SelectParameters
  - System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  - System.Web.UI.WebControls.LinqDataSource.TableName
  - System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Updated
  - System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  - System.Web.UI.WebControls.LinqDataSource.Updating
  - System.Web.UI.WebControls.LinqDataSource.Where
  - System.Web.UI.WebControls.LinqDataSource.WhereParameters
  langs:
  - csharp
  name: LinqDataSource
  nameWithType: LinqDataSource
  fullName: System.Web.UI.WebControls.LinqDataSource
  type: Class
  summary: "태그 텍스트를 검색 및 수정 데이터 개체의에서 데이터를 통해 ASP.NET 웹 페이지에서의 LINQ (Language-Integrated Query) 사용할 수 있습니다."
  remarks: "이 항목의:- [소개](#introduction)      -   [작업 순서](#order_of_operations)      -   [데이터 순서 지정](#ordering_data)      -   [데이터 그룹화](#grouping_data)      -   [데이터 수정](#data_modifications)      -   [런타임에 평가 값](#evaluating_value_at_run_time)      -   [저장 프로시저 작업](#working_with_stored_procedures)      -   [선언적 구문](#declarative_syntax) <a name=&quot;introduction&quot;> </a> # # Introduction Language-Integrated 쿼리 (LINQ)는 탐색, 필터 및 프로젝션 작업에서 선언적 방식으로 표현할 수 있도록 쿼리 연산자의 집합을 정의 하는 쿼리 구문입니다. .NET 기반 프로그래밍 언어입니다.       데이터 개체는 메모리 내 데이터 컬렉션 또는 데이터베이스에서 데이터를 표시 하는 개체 수 있습니다. 검색 하거나 각 작업에 대해 SQL 명령을 작성 하지 않고 데이터를 수정할 수 있습니다.       LinqDataSource 컨트롤을 사용 하면 LINQ를 태그 텍스트의 속성을 설정 하 여 ASP.NET 웹 페이지에서 사용할 수 있습니다. LinqDataSource 컨트롤 데이터 명령을 자동으로 생성할 LINQ to SQL 사용 합니다. LINQ to SQL에 대 한 자세한 내용은 참조 [LINQ to SQL](~/add/includes/ajax-current-ext-md.md)합니다.       설정 하는 메모리 내 데이터 컬렉션에서 데이터를 검색 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>속성 데이터 컬렉션을 포함 하는 클래스에.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 설정한는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>속성 데이터 컬렉션을 반환 하는 필드나 속성을.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 예를 들어 라는 클래스를 할 수 있습니다 `Person` 라는 속성이 포함 된 `FavoriteCities` 문자열 값의 배열을 반환 하는 합니다. 설정 하는 경우에 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>속성을 `Person` 설정 하 고는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>속성을 `FavoriteCities`.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>       데이터베이스를 쿼리 하는 경우 먼저 데이터베이스와 테이블을 나타내는 엔터티 클래스를 만들어야 합니다. 사용할 수는 [!INCLUDE[vs_ordesigner_long](~/add/includes/vs-ordesigner-long-md.md)] 또는 SqlMetal.exe 유틸리티를 이러한 클래스를 생성 합니다. 다음 설정의 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>데이터베이스를 나타내는 클래스에 속성을 설정 하 고는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>속성을 데이터베이스 테이블을 나타내는 속성입니다.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>      <a name=&quot;order_of_operations&quot;></a># # 작업 The LinqDataSource 컨트롤의 순서는 다음 순서 대로 데이터 작업을 적용 합니다. 1.  여기서 (데이터 레코드를 반환할 지정).      2.  Order By (정렬)입니다.      3.  Group By (값을 공유 하는 집계 데이터 레코드).      4.  (정렬 그룹화 된 데이터)로 그룹을 정렬 합니다.      5.  (필드 또는 반환할 속성 지정)을 선택 합니다.      6.  (사용자가 선택한 속성에 의해 정렬 데이터 레코드)을 자동 정렬 합니다.      7.  자동 페이지 (검색 데이터 레코드에 사용자가 선택한의 하위 집합)입니다.       에 조건을 추가할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>쿼리에서 반환 되는 데이터 레코드를 필터링 할 속성입니다.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>, LinqDataSource 컨트롤 데이터 개체에서 모든 레코드를 검색 하 고 속성이 설정 되지 않았습니다.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>      <a name=&quot;ordering_data&quot;></a># # 사용 하는 데이터 순서는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>속성을 기준으로 정렬 하려면 반환된 된 데이터에서 속성의 이름을 지정 합니다.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>      > [!NOTE] > LinqDataSource 컨트롤을 사용 하는 경우 [!INCLUDE[ss2k](~/add/includes/ss2k-md.md)] 또는 [!INCLUDE[ssEW](~/add/includes/ssew-md.md)] 및 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>속성이 `true`에 값을 제공 해야는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 기본적으로는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>속성은 `true`.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 값을 할당 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성을 포함 해야 모든 identity 열은 쿼리에서 반환 되는 속성 목록에.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>      <a name=&quot;grouping_data&quot;></a># #-사용 하는 데이터를 그룹화 하는 중는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>속성을 통해 데이터 레코드 값이 같은 통합 하는 사용 되는 속성을 지정 합니다.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 데이터를 그룹화 할 때 포함할 수 있습니다 `Key` 및 `It`에 속성을 동적으로 만들어지는 있는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> `Key` 속성은 속성 또는 데이터를 그룹화 하는 데 사용 된 속성의 값을 나타냅니다. 예를 들어, 속성을 기준으로 그룹화 한 경우 `Category`, `Key` 속성의 모든 고유 값에 포함 됩니다는 `Category` 속성입니다. `It` 속성은 그룹화 된 데이터의에서 개별 레코드의 컬렉션을 나타냅니다. 반복할 수 있습니다는 `It` 그룹화 작업에서 통합 된 개별 레코드를 검색 하는 속성입니다. 예를 들어, 속성을 기준으로 그룹화 한 경우 `Category`, `It` 에 공통 값을 공유 하는 모든 개별 레코드를 포함 하는 속성은 `Category` 속성입니다.       사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>그룹화 된 데이터 정렬에 사용할 속성을 지정 하는 속성.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 데이터를 그룹화 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>속성 개별 레코드는 그룹화 된 데이터 정렬 방법을 지정 합니다.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       기본적으로 LinqDataSource 컨트롤 데이터 개체에서 모든 속성에 대 한 값을 검색합니다. 사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성을 통해 사용 가능한 속성의 하위 집합을 사용 하려는 경우를 반환 하는 속성을 지정 합니다.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Select 작업이 Where, 이후에 적용 된다는 Order By 및 Group By 작업 합니다. 따라서 Select 절에 별칭 이름을 만들 경우 별칭은 사용할 수 없는 경우 다른 절에서      <a name=&quot;data_modifications&quot;></a># # 데이터 수정 내용을 사용 하 여 데이터 수정 사용 되는지 여부를 지정할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, 및 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> LinqDataSource 컨트롤에서 데이터를 수정 하기 위한 사용자 인터페이스는 데이터 바인딩된 컨트롤을 통해와 같이 제공 일반적으로 <xref:System.Web.UI.WebControls.DetailsView>컨트롤.</xref:System.Web.UI.WebControls.DetailsView> 설정 뿐만 아니라 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>를 `true`, 다음과 같은 자동 데이터 수정을 사용 하도록 설정 하는 데 필요한:- <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성 값을 할당할 수 없습니다.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>      - <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>속성 값을 할당할 수 없습니다.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>      <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> 에서 파생 되어야 합니다</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 에 할당 된-클래스      -할당 된 속성은 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>속성 <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> 에서 파생 되어야 합니다</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       두 가지 방법으로 데이터 바인딩된 컨트롤에 표시 되는 속성을 제한할 수 있습니다. 설정 하거나는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성의 속성 또는 있습니다 하위 집합을 추가 하 여 데이터 바인딩된 컨트롤에 대 한 필드를 정의할 수 <xref:System.Web.UI.WebControls.DataControlField>컨트롤.</xref:System.Web.UI.WebControls.DataControlField> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 그러나 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성을 의미 자동 업데이트, 삽입 및 삭제 작업을 사용할 수 없습니다.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 사용 가능한 속성의 하위 집합을 사용 하는 동안 자동으로 데이터 수정을 활성화 하려는 경우 설정 하지 않으면는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 대신, 데이터 개체에서 모든 속성을 검색 하 고 데이터 바인딩된 컨트롤을 사용 하 여 표시 되는 속성을 관리 합니다. 사용 하는 경우는 <xref:System.Web.UI.WebControls.DetailsView>컨트롤 또는 <xref:System.Web.UI.WebControls.GridView>컨트롤을 설정 해야는 <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>또는 <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>속성을 `false`.</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> 따라서 데이터 바인딩된 컨트롤을 데이터 편집 및 삭제에 대 한 단추가 자동으로 포함 수 없습니다. 데이터 바인딩된 컨트롤에 표시 되지 않는 모든 값은 뷰 상태에 저장 됩니다. 전달 됩니다 변경 되지 않은 데이터 원본에 데이터 업데이트를 수행 하는 경우.      <a name=&quot;evaluating_value_at_run_time&quot;></a># # 값을 계산 실행 시 그룹화 값을 매개 변수를 추가할 수 있습니다 또는 필터링, 순서 지정에 대해 런타임 시 값을 평가할 수 있는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>       기본값을 지정 하려면 매개 변수를 추가할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>       데이터 작업이 실행 되기 전에 값을 수정 하거나 검사 하려는 경우를 처리할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating>이벤트.</xref:System.Web.UI.WebControls.LinqDataSource.Updating> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Inserting> </xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 데이터 작업을 취소 하거나 사용자 입력에 따라 데이터 클래스의 속성을 설정 하는 경우에 발생 한 유효성 검사 오류 검사를 이러한 이벤트를 처리할 수도 있습니다.       데이터 작업이 완료 된 다음 값을 검사 하려면 처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.Updated>이벤트.</xref:System.Web.UI.WebControls.LinqDataSource.Updated> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted>      <a name=&quot;working_with_stored_procedures&quot;></a># #에서 데이터를 검색 저장된 프로시저에 대 한 이벤트 처리기를 만들어 LinqDataSource 컨트롤을 사용 하는 작업 저장 프로시저 수에 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>이벤트.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트 처리기를 하면 저장된 프로시저를 나타내는 데이터 컨텍스트 클래스에서 메서드를 호출 하 고 결과를 설정의 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>의 속성은 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>개체입니다.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 메서드에서 반환 되는 형식에 지정 된 형식과 일치 해야 사용 자동 업데이트, 삽입 및 데이터에 대 한 삭제 작업 하려는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 데이터 컨텍스트 메서드 만들기에 대 한 자세한 내용은 참조 [하는 방법: 저장된 프로시저 및 함수 (O/R 디자이너)에 매핑된 DataContext 만들기 메서드](~/add/includes/ajax-current-ext-md.md)합니다.      <a name=&quot;declarative_syntax&quot;></a># # 선언적 구문 <CodeContentPlaceHolder>0</CodeContentPlaceHolder>"
  example:
  - "The following example shows a LinqDataSource control that retrieves data from an entity class named `Products`. The entity class could have been generated by using the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)] or the SqlMetal.exe utility. The <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is set to return only records that have a value in the `Price` property greater than 50. A <xref:System.Web.UI.WebControls.GridView> control is bound to the LinqDataSource control to display the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_1.aspx)]  \n  \n The following example shows a LinqDataSource control that enables users to update, delete, and insert records in the data source. A <xref:System.Web.UI.WebControls.DetailsView> control is bound to the LinqDataSource control and enables users to see and modify the data. Notice that no SQL commands are required in order to select, update, delete, or insert the records.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_2.aspx)]  \n  \n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event that sets the data object based on a value in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_3.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_3.vb)]  \n  \n The following example shows a LinqDataSource control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed (aliased) to `Products`. The renamed `Products` object contains a collection of the individual records in a grouping. Each instance will contain all the columns from the `Products` table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_4.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls that display the data from the LinqDataSource control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data, and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_5.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_5.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("ContextTypeName")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  - System.Web.UI.WebControls.QueryableDataSource
  - System.Web.UI.WebControls.ContextDataSource
  implements:
  - System.Web.DynamicData.IDynamicDataSource
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  - System.Web.UI.WebControls.ContextDataSource.EntitySetName
  - System.Web.UI.WebControls.ContextDataSource.EntityTypeName
  - System.Web.UI.WebControls.QueryableDataSource.GetView(System.String)
  - System.Web.UI.WebControls.QueryableDataSource.GetViewNames
  - System.Web.UI.WebControls.QueryableDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.QueryableDataSource.QueryCreated
  - System.Web.UI.WebControls.QueryableDataSource.RaiseViewChanged
  - System.Web.UI.WebControls.QueryableDataSource.SaveViewState
  - System.Web.UI.WebControls.QueryableDataSource.TrackViewState
  - System.Web.UI.WebControls.QueryableDataSource.UpdateParameterVales
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> 클래스입니다."
  syntax:
    content: public LinqDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.LinqDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  id: AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "표시 하는 값을 가져오거나 설정 합니다. 여부는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> 컨트롤의 값에 따라 Order By 절을 동적으로 만듭니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>컬렉션.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>"
  remarks: "AutoGenerateOrderByClause 속성을 설정 하면 `true`, <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤의 값을 기반으로 하는 Order By 절을 동적으로 만듭니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>제어 첫 번째 매개 변수에서 데이터를 정렬 하 고 각 추가 매개 변수에 대 한 데이터를 추가로 정렬 합니다.</xref:System.Web.UI.WebControls.LinqDataSource> 매개 변수를 포함 하는 `null` 또는 빈 값은 Order By 절에 포함 되지 않습니다.       설정 하지 않으면는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>는 AutoGenerateOrderByClause로 설정 된 경우 속성 `true`파서가 Order By 절을 동적으로 만들기 때문에.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> <xref:System.Web.UI.WebControls.LinqDataSource>제어는 AutoGenerateOrderByClause로 설정 된 경우 예외를 throw `true` 및 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>속성 값이 할당 됩니다.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateOrderByClause set to `true`. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_120_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_120_1.aspx)]"
  syntax:
    content: public bool AutoGenerateOrderByClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> 컨트롤 Order By 절을 만듭니다, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  id: AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "표시 하는 값을 가져오거나 설정 합니다. 여부는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> 컨트롤 Where를 동적으로 만듭니다 절에 정의 된 값에 따라는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>컬렉션.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>"
  remarks: "AutoGenerateWhereClause 속성을 설정 하면 `true`, <xref:System.Web.UI.WebControls.LinqDataSource>Where에서는 동적으로 생성 하는 컨트롤의 매개 변수에서 절은 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 에 추가 하는 각 매개 변수에 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>컬렉션 있어야 해당 <xref:System.Web.UI.WebControls.Parameter.Name%2A>쿼리 되는 데이터 개체의 속성을 일치 하는 값으로 설정 된 속성.</xref:System.Web.UI.WebControls.Parameter.Name%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 자동으로 생성 된 위치 절에 값이 지정 되었는지 여부를 확인 합니다는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>컬렉션 데이터 개체에 일치 하는 속성의 값과 같으면.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 둘 이상의 매개 변수를 제공 하는 경우 매개 변수는 논리적으로 연결 됩니다 `AND` 작업 합니다. 매개 변수를 포함 하는 `null` Where에 빈 값이 포함 되지 않은 또는 절.       자동으로 생성 된 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>절 같음에 대해서만 테스트할 수 있으며, 매개 변수 에서만 연결할 수는 `AND` 작업.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> AutoGenerateWhereClause 속성을 설정 하지 마십시오 `true` 같은지 테스트 하지 않는 조건을 추가 해야 할 경우 또는 매개 변수를 연결 해야 할 경우는 `OR` 작업 합니다. AutoGenerateWhereClause 속성을 설정 하 여 이러한 작업을 수행할 수 있습니다 `false` 의 자리 표시자를 추가 하 고는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>속성에서 각 매개 변수에 대해는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 에 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>속성을 각 자리 표시자 이름 앞에 @ 기호.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       설정 하지 않으면는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>AutoGenerateWhereClause 속성이 속성 `true`파서가 Where를 동적으로 만들기 때문에 절.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> <xref:System.Web.UI.WebControls.LinqDataSource>제어 AutoGenerateWhereClause 속성은 예외가 throw `true` 및 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>속성 값이 할당 됩니다.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateWhereClause set to `true`. A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data that is returned from the query. A <xref:System.Web.UI.WebControls.DropDownList> control is included that is populated with three values. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection with the name set to `Category,` which matches one of the properties of the data object. Its <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> property is set to the ID of the <xref:System.Web.UI.WebControls.DropDownList> control. The <xref:System.Web.UI.WebControls.LinqDataSource> control automatically creates the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter records based on the value that the user selects from the <xref:System.Web.UI.WebControls.DropDownList> control. The query returns the records whose `Category` property matches the value that the user has selected from the <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/csharp/p-system.web.ui.webcontr_223_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_223_1.aspx)]"
  syntax:
    content: public bool AutoGenerateWhereClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> 컨트롤을 만듭니다는 Where 절, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  id: AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "표시 하는 값을 가져오거나 설정 합니다. 여부는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> 컨트롤은 실행 시 데이터의 섹션을 통해 탐색을 지원 합니다."
  remarks: "자동 페이지 속성을 설정 `true` 에서 페이징을 사용 하도록 설정 된 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤.</xref:System.Web.UI.WebControls.LinqDataSource> 데이터를 통해 사용자를 사용 하도록 설정 하려면 페이징을 위한 인터페이스를 제공 하는 데이터 바인딩된 컨트롤을 연결 된 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤.</xref:System.Web.UI.WebControls.LinqDataSource> 자동 페이지 속성이로 설정 된 경우 `true`, <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤이 데이터 바인딩된 컨트롤에서 한 페이지에 대 한 충분 한 레코드만 검색.</xref:System.Web.UI.WebControls.LinqDataSource> 사용 하 여는 <xref:System.Linq.Enumerable.Skip%2A>및 <xref:System.Linq.Enumerable.Take%2A>현재 페이지에 대 한 레코드를 검색 하는 메서드.</xref:System.Linq.Enumerable.Take%2A> </xref:System.Linq.Enumerable.Skip%2A>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoPage property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users page through the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_959_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_959_1.aspx)]"
  syntax:
    content: public bool AutoPage { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>사용자가 데이터를 통해 페이징할 수 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  id: AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "표시 하는 값을 가져오거나 설정 합니다. 여부는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> 컨트롤이 실행 시 데이터 정렬을 지원 합니다."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>컨트롤은 데이터 정렬에 대 한 두 가지 방법을 지원 합니다.</xref:System.Web.UI.WebControls.LinqDataSource> 자동 정렬 속성을 사용 하 여 실행 시 정렬을 사용 하거나 설정할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>디자인 타임에 정렬을 정의 하려면 속성.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       자동 정렬 속성을 설정 `true` 의 정렬을 활성화 하려면는 <xref:System.Web.UI.WebControls.LinqDataSource>데이터 바인딩된 컨트롤에서 정렬 식을 기반으로 하는 컨트롤입니다.</xref:System.Web.UI.WebControls.LinqDataSource> 데이터 바인딩된 컨트롤을 정렬에 사용할 속성을 실행 시 선택할 수 있도록 인터페이스를 제공 합니다.       설정 하 여 반환할 데이터의 순서를 프로그래밍 방식으로 설정할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>속성 속성이 나 정렬에 사용 되는 속성을.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>속성에 속성이 설정 되어 있고 자동 정렬 속성은 `true`, 식에 다음 데이터 바인딩된 컨트롤에서 정렬 식이 적용 되는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 따라서 최종 정렬 데이터를 결정 합니다."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoSort property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users sort the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_766_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_766_1.aspx)]"
  syntax:
    content: public bool AutoSort { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>사용자가 데이터를 정렬할 수 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  id: ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "컨텍스트 유형 개체의 인스턴스가 만들어진 후 발생 합니다."
  remarks: "컨텍스트 형식 개체를 검사 하거나 개체를 만드는 동안 발생 하는 예외를 검사 하려면 ContextCreated 이벤트를 처리 합니다. 컨텍스트 형식 개체를 검색할는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>의 속성은 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>이 이벤트와 연결 된 개체입니다.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 데이터 작업 중에 발생 하는 예외를 검색할는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>       컨텍스트 형식 개체 선택, 업데이트, 삽입 및 삭제 작업 중 생성 되 고 요청이 전체에서 다시 사용 됩니다.       이벤트가 발생 하지는 한 번이 있습니다. 프로그래밍 방식으로 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>속성을 하는 동안 개체로 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>이벤트.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 추가 조건을 원래 값에서 개체 또는 상태 보기에 저장할 수 필요가 없습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>속성이 구현 하는 <xref:System.Data.Linq.ITable>인터페이스.</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> ContextCreated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  id: ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "컨텍스트 형식 개체의 인스턴스를 만들기 전에 발생 합니다."
  remarks: "기본적으로는 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤에 지정 된 형식의 인스턴스를 만듭니다는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤 개체의 인스턴스를 만드는 데이터 컨텍스트 개체의 기본 생성자를 호출 합니다.</xref:System.Web.UI.WebControls.LinqDataSource> 기본이 아닌 생성자를 사용 해야 하거나에 지정 된 것과에서 다른 값과 개체를 만들어야 할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 이 경우 ContextCreating 이벤트를 처리 하 고 수동으로 데이터 컨텍스트 개체를 생성 해야 합니다.       컨텍스트 형식 개체 선택, 업데이트, 삽입 및 삭제 작업 동안 만들어집니다.       이벤트가 발생 하지는 한 번이 있습니다. 프로그래밍 방식으로 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>속성에 대 한 이벤트 처리기에 있는 개체에는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>이벤트.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 추가 조건을 원래 값에서 개체 또는 상태 보기에 저장할 수 필요가 없습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>속성이 구현 하는 <xref:System.Data.Linq.ITable>인터페이스.</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  example:
  - "The following example shows how to create the data context object by using a non-default constructor during the ContextCreating event. The code assigns the object to the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_153_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_153_1.vb)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs> ContextCreating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  id: ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "컨텍스트 형식 개체를 삭제 하기 전에 발생 합니다."
  remarks: "개체를 수동으로 삭제 하기 위해 ContextDisposing 이벤트 처리 되거나 삭제 될 개체 앞에 개체에 지정 된 정리를 수행 하려면."
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs> ContextDisposing;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  id: ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "해당 값에 데이터를 검색 하려는 속성을 포함 하는 형식의 이름을 가져오거나 설정 합니다."
  remarks: "사용 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource>메모리 데이터 수집 또는 데이터베이스에서 데이터를 검색 컨트롤을 두 개의 속성을 지정 해야 합니다.</xref:System.Web.UI.WebControls.LinqDataSource> 첫 번째는 데이터 원본을 나타내는 데이터 컨텍스트 클래스입니다. 두 번째는 데이터가 포함 된 데이터 컨텍스트 클래스의 속성입니다. 데이터 컨텍스트 클래스의 이름으로 ContextTypeName 속성을 설정 하 고 설정한는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>속성 데이터를 포함 하는 데이터 컬렉션을.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       예를 들어 데이터베이스에서 데이터를 검색 하는 경우 데이터베이스를 나타내는 클래스의 이름으로 ContextTypeName 속성을 설정 합니다. 설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>속성을 데이터베이스에서 테이블을 나타내는 속성입니다.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 사용 하 여 데이터베이스에서 클래스를 생성 하는 [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)] 또는 SqlMetal.exe 유틸리티를 자동으로 이러한 클래스를 생성 합니다.       배열 등 메모리 내 데이터 컬렉션에서 데이터를 검색할 때 ContextTypeName 속성 배열 속성을 포함 하는 클래스의 이름으로 설정 합니다. 다음 설정의 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>속성을 가져오는 배열의 속성입니다.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       자동으로 업데이트, 삽입 또는 삭제 작업을 통해 <xref:System.Web.UI.WebControls.LinqDataSource>제어 ContextTypeName 속성에 할당 된 클래스 <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> 에서 파생 되어야 합니다</xref:System.Web.UI.WebControls.LinqDataSource> 또한 속성 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> 에서 파생 되어야 합니다</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 에 할당 또는 하지 않는 필요 자동 업데이트 하기 위해 삽입, 삭제 작업을 하는 경우 모든 종류의 클래스 이름이 ContextTypeName 속성에 할당할 수 있습니다.       클래스의 인스턴스에서 데이터를 선택 하는 방법에 대 한 정보를 참조 하십시오.는 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows how to set the ContextTypeName property to a class that contains an array of strings. It also shows how to set the property to a class (generated by the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]) that represents a database.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ To SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_2.vb)]"
  syntax:
    content: public override string ContextTypeName { get; set; }
    return:
      type: System.String
      description: "데이터를 검색 하는 클래스의 이름입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  id: CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "쿼리 가능한 뷰를 반환합니다."
  syntax:
    content: protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.QueryableDataSourceView
      description: "쿼리할 수는 보기입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  id: CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "새 인스턴스를 만듭니다는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceView&quot;> </xref> 이 컨트롤과 연결 된 클래스입니다."
  remarks: "사용자 지정 보기를 제공 하려면이 메서드는 파생된 클래스에서 재정의할 수 있습니다."
  syntax:
    content: protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.LinqDataSourceView
      description: "데이터 바인딩된 컨트롤에 대 한 인터페이스 역할을 하는 개체입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.CreateView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  id: Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "삭제 작업을 수행 합니다."
  remarks: "일반적으로 사용자 코드에서 Delete 메서드를 호출할 필요가 없습니다. 사용 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource>사용자가 레코드를 삭제할 작업 수행 데이터 바인딩된 컨트롤이 데이터 바인딩된 컨트롤과 함께 Delete 메서드를 자동으로 호출 됩니다.</xref:System.Web.UI.WebControls.LinqDataSource> 명시적으로 데이터를 삭제 하기 위한 사용자가 소유한 프로세스를 만들 때 Delete 메서드를 호출 합니다. 예를 들어 데이터 바인딩된 컨트롤 외부 이벤트에 따라 레코드를 삭제 하려는 경우 Delete 메서드를 호출할 수 있습니다."
  syntax:
    content: public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "레코드 삭제에 대 한 행 키 값입니다."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "데이터 충돌을 감지 계산 되는 행 값."
    return:
      type: System.Int32
      description: "삭제 작업에 영향을 받는 레코드 수입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "삭제 작업이 완료 되 면 발생 합니다."
  remarks: "삭제 된 이벤트 삭제 작업에서 발생 한 예외를 catch 하는 작업이 완료 된 후에 출력 매개 변수를 검사를 처리 합니다. 출력 매개 변수를 검색할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>이벤트 처리기에 전달 되는 개체입니다.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Deleted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "이 속성은 사용 되지 않습니다는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> 클래스입니다."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "컬렉션 매개 변수입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "삭제 작업이 수행 되기 전에 발생합니다."
  remarks: "삭제, 삭제 작업을 하기 전에 값을 변경 하거나 삭제 작업을 취소 하려면 데이터 클래스의 데이터 유효성 검사 오류를 검사 하는 개체의 유효성을 검사 하려면 Deleting 이벤트를 처리 합니다. <xref:System.Web.UI.WebControls.LinqDataSource>제어가 전달은 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>개체를 삭제 하면 이벤트에 대 한 이벤트 처리기.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>개체가 삭제 되 고 삭제 작업을 취소할 수 있도록 하는 데이터를 포함 합니다.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 데이터 클래스 throw 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException>예외는 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>에서 해당 예외를 포함 하는 개체는 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceValidationException>       Deleting 이벤트에 대 한 이벤트 처리기에서 예외가 throw 되 면 해당 이벤트 처리기에서 예외를 처리 해야 합니다. 예외에 대 한 이벤트 처리기에 전달 되지 것입니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>이벤트 (통해는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>의 속성은 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>개체).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>속성 Deleting 이벤트 이후에 throw 된 예외가 포함 합니다.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Deleting event. The code cancels the delete operation based on a property in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> property and a value from the Web page. In the example, when the `OnSale` property is set to `true`, the user must select a <xref:System.Web.UI.WebControls.CheckBox> control to confirm that a record should be deleted.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_77_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_77_1.cs)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Deleting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  id: EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "통해 데이터 레코드를 삭제할 수 있는지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> 제어 합니다."
  remarks: "EnableDelete 속성을 설정 `true` 사용자가 통해 데이터 레코드를 삭제할 수 있도록 하려는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤.</xref:System.Web.UI.WebControls.LinqDataSource> EnableDelete 다음과 같은 경우 `true`, <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤 LINQ to SQL 사용 하 여 데이터 삭제 명령을 자동으로 만들려면.</xref:System.Web.UI.WebControls.LinqDataSource> 사용자가 같은 삭제할 레코드를 선택할 수 있는 인터페이스를 포함 해야는 <xref:System.Web.UI.WebControls.DetailsView>컨트롤.</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤이 자동 삭제 작업을 지원 하지 않는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성 또는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>속성이 설정 되어.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 이 경우에 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤 삭제 작업이 시도 되 면 예외를 throw 합니다.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableDelete set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users delete a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_368_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_368_1.aspx)]"
  syntax:
    content: public bool EnableDelete { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>자동 삭제 작업을 사용 하면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  id: EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "통해 데이터 레코드를 삽입할 수 있는지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> 제어 합니다."
  remarks: "EnableInsert 속성을 설정 `true` 사용자가 통해 새 데이터 레코드를 삽입할 수 있도록 하려는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤.</xref:System.Web.UI.WebControls.LinqDataSource> EnableInsert 다음과 같은 경우 `true`, <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤 LINQ to SQL 사용 하 여 데이터를 삽입 하려면 명령을 자동으로 만들려면.</xref:System.Web.UI.WebControls.LinqDataSource> 와 같은 새 레코드를 삽입 하는 사용자가 수 있는 인터페이스를 포함 해야는 <xref:System.Web.UI.WebControls.DetailsView>컨트롤.</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤이 자동 삽입 작업을 지원 하지 않는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성 또는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>속성이 설정 되어.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 이 경우에 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤 삽입 작업이 시도 되 면 예외를 throw 합니다.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableInsert set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and displays a button that switches the control to insert mode where users can create and save a new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1142_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1142_1.aspx)]"
  syntax:
    content: public bool EnableInsert { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>자동 삽입 작업을 사용 하면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  id: EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "데이터 컨텍스트 개체에 대 한 변경 추적 되는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "EnableObjectTracking 속성을 LINQ To SQL 데이터 컨텍스트 개체에서 데이터를 선택 하는 경우에 사용 됩니다.       읽기 전용 데이터와 상호 작용 하는 경우 EnableObjectTracking 속성을 설정 `false` 는 데이터가 변경 되었는지 여부를 확인 하려면 캐시 되지 때문에 성능이 향상 됩니다. 그러나 지연 된 쿼리 실행도 비활성화 됩니다. 이 속성으로 설정 되어 있어야 `true` 지연 된 쿼리 실행을 사용 하려는 경우."
  syntax:
    content: public bool EnableObjectTracking { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>변경;에 대 한 데이터 컨텍스트 개체를 추적 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  id: EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "통해 데이터 레코드를 업데이트할 수 있는지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> 제어 합니다."
  remarks: "EnableUpdate 속성을 설정 `true` 사용자가 사용 하 여 데이터 레코드를 업데이트할 수 있도록 하려는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤.</xref:System.Web.UI.WebControls.LinqDataSource> EnableUpdate 다음과 같은 경우 `true`, <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤 LINQ to SQL 사용 하 여 데이터를 업데이트 하는 명령을 자동으로 만들려면.</xref:System.Web.UI.WebControls.LinqDataSource> 와 같은 레코드를 업데이트 하는 사용자가 수 있는 인터페이스를 포함 해야는 <xref:System.Web.UI.WebControls.DetailsView>컨트롤.</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤이 자동 업데이트 작업을 지원 하지 않는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성 또는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>속성이 설정 되어.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 이 경우에 <xref:System.Web.UI.WebControls.LinqDataSource>제어 업데이트 작업이 시도 되 면 예외를 throw 합니다.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableUpdate set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users update a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_116_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_116_1.aspx)]"
  syntax:
    content: public bool EnableUpdate { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>자동 업데이트 작업을 사용 하면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  id: GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "검색된 된 데이터를 그룹화 하는 데는 사용 되는 속성을 지정 하는 값을 가져오거나 설정 합니다."
  remarks: "GroupBy 속성을 사용 하 여 데이터 레코드 값이 같은 통합 하는 것에 대 한는 사용 되는 속성을 지정할 수 있습니다. 예를 들어 GroupBy 속성을 설정 하면 `Name`, 동일한 쿼리에 모든 레코드 `Name` 속성 값을 단일 통합 레코드로 반환 합니다.       모든 속성을 포함 하 여 둘 이상의 속성 GroupBy 속성에 할당할 수 있습니다는 `new` 함수와 쉼표를 사용 하 여 각 속성을 구분 합니다. 속성을 기준으로 그룹화 하려면 예를 들어 `Name` 차례로 `Category`, GroupBy 속성을 설정 `new(Name, Category)`합니다.       그룹화에 사용 되는 속성의 값은 생성 된 속성인 통해 반환 되 `Key`합니다. 포함 하는 `Key` 속성에는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>그룹화 된 값을 검색 하는 속성.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 설정할 수 있습니다는 `Key` 속성을 사용 하 여 별칭은 `As` 있지만 키워드를 별칭을 사용 하지 않아도 됩니다. 예를 들어 GroupBy 속성 이라는 속성을 설정할 수 있습니다 `Category`합니다. 통합된 된 값을 검색할 수 있습니다는 `Category` 속성을 설정 하 여는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성을 `new(Key As ProductCategory)`.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       그룹의 개별 레코드를 포함 하 여 액세스할 수 있습니다는 `It` 속성에는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> `It` 속성 그룹화 된 속성의 값을 공유 하는 레코드의 컬렉션을 포함 합니다. 반복할 수 있습니다는 `It` 개별 레코드를 검색 하는 속성입니다.       GroupBy 속성은 집계 메서드와 함께 자주 사용 됩니다. 다음과 같은 집계 메서드를 사용할 수 있습니다:- `Count()`       -    `Average(` *열* `)`       -    `Sum(` *열* `)`       -    `Max(` *열* `)`       -    `Min(` *열* `)`       -    `Where(` *조건* `)`       -    `Any()`       -    `All(` *조건* `)` 자세한 내용은 참조 [NIB: LinqDataSource 웹 서버 컨트롤 개요](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136) 및 [하는 방법: 그룹 및 집계 데이터를 사용 하 여 LinqDataSource 컨트롤](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af)합니다."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that groups the returned data by a property named `Category`. It returns the shared values and calculates the average price for the grouped records.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_1.aspx)]  \n  \n The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed `Products`. The renamed `Products` object contains a collection of the individual records in a grouping, and each instance contains all the columns from the Products table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_2.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls for displaying the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_3.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_3.aspx)]"
  syntax:
    content: public string GroupBy { get; set; }
    return:
      type: System.String
      description: "Group By 절을 만드는 데 사용 되는 문자열입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  id: GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Group By 절을 만드는 데 사용 되는 매개 변수의 컬렉션을 가져옵니다."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>컨트롤 런타임 시 Group By 절을 만들려는 GroupByParameters 컬렉션의 매개 변수를 사용 합니다.</xref:System.Web.UI.WebControls.LinqDataSource> 일반적으로 데이터를 그룹화 GroupByParameters 컬렉션을 사용 하지 않습니다. 대신 사용할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 런타임 시 Group By 절에는 값을 설정 해야 고 속성 이름이 올바르지 않은 경우에 GroupByParameters 컬렉션을 사용 합니다. 예를 들어 데이터를 그룹화 할 지 여부에 따라 GroupByParameters 컬렉션을 사용는 `LastName` 데이터 레코드의 속성에는 사용자가 제공한 값과 같으면 합니다.       속성으로 데이터를 그룹화 하려는 경우 런타임 시 설정 하지 않아도 해당 속성에 속성 그룹화를 정의할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 예를 들어 데이터베이스 테이블의 값을 반환 하 여 그룹화 `LastName`설정, <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>&quot;LastName&quot; 매개 변수 없이.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성에 의해 동적으로 데이터를 그룹화 하려는 경우에 대 한 이벤트 처리기를 만들는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>이벤트 및 사용자 지정의 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>필요에 따라 속성.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting>       속성의 이름을 GroupByParameters 컬렉션의 매개 변수에 대 한 값으로 할당할 수 없습니다. 조건을 추가 하려는 경우 GroupByParameters 컬렉션에 매개 변수를 추가 하는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>런타임에 설정 해야 하는 속성.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       GroupByParameters 컬렉션에 값을 설정 하려면 각 매개 변수에 이름을 할당 하 고이 다음에 자리 표시자를 추가할는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>속성에 명명 된 매개 변수입니다.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Group By 절에 각 매개 변수 이름 앞에 @ 기호입니다."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Group By 절을 만드는 데 사용 되는 매개 변수입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  id: Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "삽입 작업을 수행 합니다."
  remarks: "일반적으로 사용자 코드에서 Insert 메서드를 호출할 필요가 없습니다. 자동으로 데이터 바인딩된 컨트롤에서는 사용자가 새 레코드 삽입 작업을 수행 하는 경우 Insert 메서드를 호출 해야 합니다. 데이터 삽입을 위한 프로세스를 직접 만들려는 경우에 Insert 메서드를 명시적으로 호출 합니다."
  example:
  - "The following example shows how to programmatically insert a new record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains default values to the Insert method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_2.aspx)]"
  syntax:
    content: public int Insert (System.Collections.IDictionary values);
    parameters:
    - id: values
      type: System.Collections.IDictionary
      description: "행 값을 데이터 소스에 삽입할 수 있습니다."
    return:
      type: System.Int32
      description: "삽입 작업에 영향을 받는 행의 수입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "삽입 작업이 완료 되 면 발생 합니다."
  remarks: "삽입 작업에서 발생 한 예외를 catch 하거나 삽입 작업이 완료 된 다음 값을 확인 하려면 Inserted 이벤트를 처리 합니다. 통해 새 값을 검색할 수는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>이벤트 처리기에 전달 되는 개체입니다.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 예를 들어, 사용할 수는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>새 데이터 레코드에 대 한 데이터베이스에서 생성 된 identity 속성을 검색할 개체입니다.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  example:
  - "The following example shows how to create an event handler for the Inserted event that checks for exceptions and retrieves the identity property for the new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_96_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_96_1.aspx)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Inserted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "삽입 작업이 수행 되기 전에 발생합니다."
  remarks: "삽입할 수, 데이터 클래스의 삽입 작업을 하기 전에 값을 변경 하거나 삽입 작업을 취소 하려면에서 데이터 유효성 검사 오류를 검사 하는 개체의 유효성을 검사 하려면 삽입 이벤트를 처리 합니다. <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>데이터 소스에 삽입할 새 개체를 포함 하는이 이벤트에 대 한 이벤트 처리기에 전달 된 개체입니다.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>       <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>데이터 클래스에 의해 throw 되는 유효성 검사 예외를 포함 하는 개체</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 는 삽입 작업 중에 유효성 검사 오류가 발생 하는 경우 유효성 검사 오류가 삽입할 값을 데이터 클래스에 속성의 형식과 일치 하지 않는 경우 또는 사용자 지정 유효성 검사를 통과 하지 못하면 발생 합니다. 삽입 이벤트에 대 한 이벤트 처리기를 유효성 검사 예외를 검색할 수 있으며 적절 한 조치를 취할 수 있습니다.       삽입 이벤트에 대 한 이벤트 처리기에서 예외가 throw 되 면 해당 이벤트 처리기에서 예외를 처리 해야 합니다. 예외에 대 한 이벤트 처리기에 전달 되지 것입니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>이벤트 (통해는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>의 속성은 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>개체).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>속성 삽입 이벤트 이후에 throw 된 예외가 포함 합니다.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Inserting event that modifies data before the insert operation. The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_110_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_110_1.vb)]  \n  \n The following example shows an event handler for the Inserting event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Inserting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "삽입 작업 중에 사용 되는 매개 변수의 컬렉션을 가져옵니다."
  remarks: "삽입 작업에 필요한 값은에 전달 되는 일반적으로 <xref:System.Web.UI.WebControls.LinqDataSource>데이터 바인딩된 컨트롤에 의해 제어 됩니다.</xref:System.Web.UI.WebControls.LinqDataSource> 정의할 때 지정 삽입 매개 변수는 기본값을 제공 하려는 경우 값을 빈 값 `null`합니다. 사용자가 값을 제공 하지 때 처리 해야 하는 값에 대해서만 삽입 됩니다 하는 모든 값에 대 한 매개 변수를 제공 필요가 없습니다.       InsertParameters 컬렉션에서 제공 하는 값은 데이터 원본에 정의 되어 있지만 데이터 컨트롤에 바인딩되지 않는 필드에 대해서만 사용 됩니다. 예를 들어 데이터베이스 테이블에 열 이름, 주소 및 PostalCode 이라는 가정 하지만 <xref:System.Web.UI.WebControls.ListView>이름과 주소 필드에만 테이블에 바인딩된 컨트롤을 바인딩된.</xref:System.Web.UI.WebControls.ListView> InsertParameters 컬렉션 값의 PostalCode 필드에 대해서만 사용 됩니다. 또한 이름과 주소 필드에 대 한 사용 되지 않습니다 됩니다. 이러한 필드에 대 한 입력 값이 없는 경우에 마찬가지입니다. 데이터 바인딩된 컨트롤이 자동으로 생성 데이터 원본의 모든 필드에 대 한 필드, 값이 없는 InsertParameters 컬렉션에서 사용 됩니다."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with a parameter that provides a default value in the InsertParameters collection. If the user does not provide a value for the `Category` property, the default value that is provided by the parameter is saved in the database.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1053_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1053_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "삽입 작업 중 사용 되는 매개 변수입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "초기화는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> 개체입니다."
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "이벤트 데이터입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  id: OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "발생 된 <xref href=&quot;System.Web.UI.Control.Unload&quot;> </xref> 이벤트입니다."
  syntax:
    content: protected override void OnUnload (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>이벤트 데이터를 포함 하는 개체입니다.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  id: OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "검색된 된 데이터를 정렬 하기 위한 어떤 필드가 사용 되는지를 지정 하는 값을 가져오거나 설정 합니다."
  remarks: "OrderBy 속성을 사용 하 여 정렬에 사용할 반환된 된 데이터에서 어떤 속성을 지정 합니다. 데이터 정렬에 대 한 속성 데이터 원본에 있어야 하지만에 포함 될 필요가 없습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 공간을 추가할 수 있습니다 및 `Ascending`, `ASC`, `Descending`, 또는 `DESC` 정렬 된 데이터 반환 되는 방법을 지정 하기 위해 OrderBy 문자열의 속성에 있습니다.       쉼표를 사용 하 여 각 속성을 구분 하 여 r b y 속성에서 둘 이상의 속성을 제공할 수 있습니다. 예를 들어 명명 된 속성으로 정렬할 수 `LastName` 및 `FirstName`, OrderBy 속성 &quot;성, 이름&quot;을 설정 합니다.      > [!NOTE] > 사용 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource>보호로 [!INCLUDE[ss2k](~/add/includes/ss2k-md.md)] 또는 [!INCLUDE[ssEW](~/add/includes/ssew-md.md)] 및 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>속성이 `true`, OrderBy 속성의 값을 제공 해야 합니다.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 기본적으로는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>속성은 `true`.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 값을 할당 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성을 포함 해야 모든 identity 열은 쿼리에서 반환 되는 속성 목록에.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>속성이 `true`, 데이터 바인딩된 컨트롤에서 정렬 식을 전달할 수는 <xref:System.Web.UI.WebControls.LinqDataSource>런타임 시 컨트롤.</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> <xref:System.Web.UI.WebControls.LinqDataSource>OrderBy 속성을 적용 한 후 제어를 데이터 바인딩된 컨트롤에서에서 정렬 식을 적용 됩니다.</xref:System.Web.UI.WebControls.LinqDataSource> 따라서 데이터를 데이터 바인딩된 컨트롤에서에서 정렬 식에 따라 반환 됩니다."
  example:
  - "The following example returns data in reverse alphabetical order based on values in the `Category` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_348_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_348_1.aspx)]"
  syntax:
    content: public string OrderBy { get; set; }
    return:
      type: System.String
      description: "Order By 절을 만드는 데 사용 되는 문자열입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  id: OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Order By 절을 만드는 데 사용 되는 매개 변수의 컬렉션을 가져옵니다."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>컨트롤 런타임 시 Order By 절을 만들려는 경우에 OrderByParameters 컬렉션에 매개 변수를 사용 합니다.</xref:System.Web.UI.WebControls.LinqDataSource> 일반적으로 설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>속성을 `true` OrderByParameters 컬렉션에 매개 변수를 추가 하면.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>속성이로 설정 되어 `true`, 경우에 OrderByParameters 컬렉션의 각 매개 변수에 OrderByParameters 컬렉션에 지정 된 시퀀스에서 Order By 절에 추가 됩니다.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>속성은 `true`, 매개 변수를 시퀀스에 적용 되 고 자리 표시자와 일치 하지 않습니다 때문에 이름을 지정할 필요가 없습니다.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>       Order By 절에서 런타임 시 값을 설정 해야 경우에 OrderByParameters 컬렉션을 사용할 필요가 없습니다. 데이터 정렬에 사용할 필드를 정의할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 예를 들어 데이터베이스 테이블의 값을 반환 하 여 정렬 `LastName`설정, <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>&quot;LastName&quot; 매개 변수 없이.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       경우에 OrderByParameters 컬렉션 매개 변수를 설정 하 고 자리 표시자에 매개 변수와 일치는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>속성에 있지만이 방법은 응용 프로그램 제한 된.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 이 방법을 사용 하면 경우에 OrderByParameters 컬렉션의 매개 변수 열 이름을 나타낼 수 없습니다. 매개 변수 값으로 설정할 수 있으며 다음 속성의 값에 해당 값을 비교할 수 있습니다. 예를 들어 속성의 값 매개 변수가 나타내는 실행 시간 값 보다 작은 지 여부에 따라 데이터를 정렬할 수 있습니다."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property set to `true`. A parameter is included in the OrderByParameters collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_757_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_757_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Order By 절을 만드는 데 사용 되는 매개 변수입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  id: OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "그룹화 된 데이터 정렬에 사용 되는 필드를 가져오거나 설정 합니다."
  remarks: "OrderGroupsBy 속성을 사용 하 여 데이터 그룹의 정렬 방식을 지정할 수 있습니다. 예를 들어 하 여 그룹화 수는 `CategoryID` 속성 및 각 범주 ID의 평균을 기준으로 그룹화 한 다음 정렬은 `Price` 속성입니다.       데이터를 그룹화 한 경우에 OrderGroupsBy 속성을 설정할 수 있습니다. 설정 하지 않고 OrderGroupsBy 속성을 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>속성은 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤에서 예외가 throw 됩니다.</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       데이터를 그룹화 하는 데 사용 되는 속성이 나 그룹화 된 데이터에 집계 함수 결과 데이터를 정렬 하는 데 사용 되는 속성 이어야 합니다. 데이터를 정렬 하는 방법을 지정 하려면 OrderGroupsBy 문자열에서 속성 이름에 공백과 &quot;오름차순&quot;, &quot;ASC&quot;, &quot;Descending&quot; 또는 &quot;DESC&quot; 문자열을 추가할 수 있습니다.       OrderGroupsBy 속성에 둘 이상의 속성을 지정할 수 있습니다. 쉼표를 사용 하 여 각 속성을 구분 합니다."
  example:
  - "The following example shows how to group the data by using two properties, and how to sort the grouped data by using one of those properties. The data from a table named `Products` is grouped by using properties named `CategoryID` and `Discontinued`. The grouped data is sorted by the `CategoryID` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_1.aspx)]  \n  \n The following example shows how to group the data by using a property, and how to sort it based on the results of an aggregation function. The data from the `Products` table is grouped by using the `CategoryID` property. It is sorted based on the average of the `UnitPrice` property within each group.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_2.aspx)]"
  syntax:
    content: public string OrderGroupsBy { get; set; }
    return:
      type: System.String
      description: "그룹 Order By 절을 만드는 데 사용 되는 문자열입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  id: OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "그룹 Order By 절을 만드는 데 사용 되는 매개 변수의 컬렉션을 가져옵니다."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>제어 런타임에 그룹 Order By 절을 만들려는 OrderGroupsByParameters 컬렉션의 매개 변수를 사용 합니다.</xref:System.Web.UI.WebControls.LinqDataSource>       런타임에 그룹 Order By 절에서 값을 설정 해야 하는 경우에 OrderGroupsByParameters 컬렉션에 값을 추가 합니다. 사용 하 여 데이터를 정렬 하는 데 사용 되는 필드를 정의할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>       OrderGroupsByParameters 컬렉션 매개 변수를 설정 하 고 일치의 자리 표시자에 매개 변수는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 그러나이 방법을 사용 하면 OrderGroupsByParameters 컬렉션의 매개 변수를 나타낼 수 없습니다 열 이름입니다. 이러한 값을 나타내야 합니다. 매개 변수 값으로 설정할 수 있으며 다음 속성에 해당 값을 비교할 수 있습니다. 예를 들어 속성의 값 매개 변수가 나타내는 실행 시간 값 보다 작은 지 여부에 따라 데이터를 정렬할 수 있습니다."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "그룹 Order By 절을 만드는 데 사용 되는 매개 변수입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  id: Select
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "속성 및 검색된 된 데이터에 포함 된 계산 된 값을 가져오거나 설정 합니다."
  remarks: "Select 속성을 설정 하지 않으면는 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤 데이터 개체에서 모든 속성 (데이터 열)을 검색 합니다.</xref:System.Web.UI.WebControls.LinqDataSource> Select 속성을 사용 하 여 개체에서 속성의 하위 집합을 검색 하거나 데이터를 검색 하는 경우 새 값을 계산 합니다.       반환된 된 데이터에 포함 하려는 속성의 이름에 Select 속성을 설정 하 여 검색 속성을 지정 합니다.       데이터 개체에서 속성의 하위 집합을 검색 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤 Select 속성에서 지정 하는 속성만 포함 하는 클래스를 동적으로 만듭니다.</xref:System.Web.UI.WebControls.LinqDataSource> 데이터 개체의 속성이 아닌 속성을 계산 하는 경우는 클래스를 동적으로 만들도 합니다. 이러한 경우 쿼리에서 반환 된 개체는 하지에 지정 된 클래스의 인스턴스는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 를 대신 사용 해야는 `new` 메서드를 나타내는 새 클래스는 쿼리에서 반환 된 선택 속성에 있습니다. 예를 들어만 반환 하는 `FirstName` 및 `LastName` Select 속성을 포함 하는 개체에서 속성을 두 개 이상의 이러한 속성을 설정 `new(FirstName, LastName)`합니다. <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤에서 지정한 새 클래스를 동적으로 만들는 `new` 메서드.</xref:System.Web.UI.WebControls.LinqDataSource>       사용할 수는 `As` 선택한 값에 별칭을 지정 하는 키워드입니다. 별칭을 지정 하는 경우에 된 속성을 포함 해야는 `new` 메서드. 결과에 따라 바인딩하는 데이터 바인딩된 컨트롤의 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤 속성의 별칭으로 참조 해야 합니다.</xref:System.Web.UI.WebControls.LinqDataSource> 예를 들어, Select 속성을 설정 하면 `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, 데이터 바인딩 컨트롤 두 속성에 액세스할 수 `SalesRegion` 및 `RevenueThousands`합니다.       사용 된 `new` 다음 표에 나열 된 조건에 따라 Select 속성에는 함수입니다.      | 선택 | 새로운 사용 | 예 |   |------------|----------------|-------------|   | 속성을 단일. | `new` 필요 하지 않습니다. | `Select=&quot;Category&quot;`|   | 여러 속성입니다. | `new` 필요 합니다. | `Select=&quot;new(Cateogry, Name)&quot;`|   | 단일 컴퓨터 또는 별칭이 있는 여러 속성이 있습니다. | `new` 필요 합니다. | `Select=&quot;new(Category As CategoryGroup)&quot;`|       자동 데이터 수정을 사용 하도록 설정 하려는 데이터 개체에서 모든 속성을 표시 하지 않을 경우에 Select 속성을 설정 하지 마십시오. 대신, 관리 데이터 바인딩된 컨트롤을 통해 표시 합니다. 사용 하는 경우는 <xref:System.Web.UI.WebControls.DetailsView>컨트롤 또는 <xref:System.Web.UI.WebControls.GridView>컨트롤을 설정 해야는 <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>또는 <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>속성을 `false`.</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> 데이터 바인딩된 컨트롤에 표시 되지 않는 모든 값은 뷰 상태에 저장 됩니다. 전달 됩니다 변경 되지 않은 데이터 원본에 데이터 업데이트를 수행 하는 경우.       쿼리에서 데이터를에서 그룹화 하는 경우 Select 속성에서 집계 메서드를 포함할 수 있습니다. 다음과 같은 집계 메서드를 사용할 수 있습니다:- `Count()`       -    `Average(` *열* `)`       -    `Sum(` *열* `)`       -    `Max(` *열* `)`       -    `Min(` *열* `)`       -    `Where(` *조건* `)`       -    `Any()`       -    `All(` *조건* `)` 자세한 내용은 참조 [NIB: LinqDataSource 웹 서버 컨트롤 개요](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136) 및 [하는 방법: 그룹 및 집계 데이터를 사용 하 여 LinqDataSource 컨트롤](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af)합니다.       데이터를 그룹화 할 때 포함할 수 있습니다 `Key` 및 `It`, Select 속성에 속성을 동적으로 만들어지는입니다. `Key` 속성은 속성 또는 데이터를 그룹화 하는 데 사용 된 속성의 값을 나타냅니다. 예를 들어, 속성을 기준으로 그룹화 한 경우 `Category`, `Key` 속성의 각 고유 값에 포함 됩니다는 `Category` 속성입니다. `It` 속성은 그룹화 된 데이터의에서 개별 레코드의 컬렉션을 나타냅니다. 반복할 수 있습니다는 `It` 그룹화 작업에서 통합 된 개별 레코드를 검색 하는 속성입니다. 예를 들어, 속성을 기준으로 그룹화 한 경우 `Category`, `It` 에 공통 값을 공유 하는 모든 개별 레코드를 포함 하는 속성은 `Category` 속성입니다.       포함 하는 경우는 `It` 데이터를 그룹화 하는 경우 Select 속성에서 키워드를 별칭을 할당 해야는 `It` 키워드입니다. <xref:System.Web.UI.WebControls.LinqDataSource>제어 하는 경우 예외가 throw 됩니다 `It` 별칭에는 없습니다.</xref:System.Web.UI.WebControls.LinqDataSource> 에 대 한 별칭을 할당할 수는 `Key` 키워드, 하지만이 필요 하지 않습니다."
  example:
  - "The following example shows how to set the Select property to a subset of properties in the data object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_1.aspx)]  \n  \n The following example shows how to retrieve values in a property that has been used to group data, and to retrieve the average for the grouped records. The `Key` keyword contains the property that has been used for grouping data. In this example, `Key` will contain the shared values from the `ProductCategory` property.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_2.aspx)]"
  syntax:
    content: public string Select { get; set; }
    return:
      type: System.String
      description: "Select 절을 만드는 데 사용 되는 문자열입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "데이터 검색 작업이 완료 되 면 발생 합니다."
  remarks: "데이터 검색 작업에서 발생 한 예외를 catch 하거나 검색 작업이 완료 된 후 데이터 개체를 확인 하려면 선택한 이벤트를 처리 합니다. 개체는에서 사용할 수는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>이벤트 처리기에 전달 되는 개체입니다.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Selected;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "데이터 검색 작업이 수행 되기 전에 발생합니다."
  remarks: "다음 작업을 수행 하기 위해 Selecting 이벤트를 처리 합니다.-데이터 검색에 대 한 매개 변수를 수정 합니다.      -쿼리를 프로그래밍 방식으로 생성 합니다.      -정렬 또는 페이징에 대 한 값을 수정 합니다.      -사용자 지정 정렬 또는 페이징을 수행 합니다.      -데이터 검색 작업을 취소 합니다.       <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>데이터 검색 작업에 대 한 매개 변수를 포함 하는이 이벤트에 대 한 이벤트 처리기에 전달 되는 개체입니다.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 쿼리를 실행 또는 새 결과 집합을 만들고에 할당할 수 전에 Selecting 이벤트 처리기의 매개 변수를 수정할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>       사용자 지정 정렬 또는이 이벤트 처리기에서 페이징을 구현 하는 기능 <xref:System.Web.UI.WebControls.LinqDataSource>.</xref:System.Web.UI.WebControls.LinqDataSource> 에 바인딩되는 컨트롤에 의해 제한 될 수 있습니다. 예를 들어, 열 머리글의는 <xref:System.Web.UI.WebControls.GridView>컨트롤을 클릭 하면, 컨트롤이 있는 자동 정렬 순서 대로 재정의할 설정할 수는 이벤트 처리기를 수행 합니다.</xref:System.Web.UI.WebControls.GridView>       Selecting 이벤트에 대 한 이벤트 처리기에서 예외가 throw 되 면 해당 이벤트 처리기에서 예외를 처리 해야 합니다. 예외에 대 한 이벤트 처리기에 전달 되지 것입니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Selected>이벤트 (통해는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>의 속성은 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>개체).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>속성 Selecting 이벤트 이후에 throw 되는 예외가 포함 합니다.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Selecting event. The handler creates a query that retrieves values from an array of string values in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/e-system.web.ui.webcontr_69_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_69_1.vb)]  \n  \n The following example shows how to assign the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property to the object that is returned from a method that represents a stored procedure.  \n  \n [Visual Basic]  \n  \n```  \nProtected Sub LinqDataSource_Selecting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceSelectEventArgs)  \n    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  \n    e.Result = exampleContext.GetRegisteredCustomers()  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Selecting(object sender,   \n        LinqDataSourceSelectEventArgs e)  \n{  \n    ExampleDataContext exampleContext = new ExampleDataContext();  \n    e.Result = exampleContext.GetRegisteredCustomers();  \n}  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Selecting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "데이터 검색 작업 중에 사용 되는 매개 변수의 컬렉션을 가져옵니다."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>컨트롤 런타임 시 Select 절을 만들려는 SelectParameters 컬렉션의 매개 변수를 사용 합니다.</xref:System.Web.UI.WebControls.LinqDataSource> Select 절에 실행 시간 값을 사용할 때만 SelectParameters 컬렉션에 매개 변수를 추가 합니다. 예를 들어 사용자의 프로필에 속성을 나타내는 SelectParameters 컬렉션에는 매개 변수를 추가할 수 있습니다. 새 값을 계산 하는 데이터 소스에서 해당 속성 및 값 다음 사용할 수 있습니다.       Select 절에서 런타임 시 값을 설정 해야 하는 경우만 SelectParameters 컬렉션을 사용할 필요가 없습니다. 검색할 속성을 정의할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 예를 들어, 반환 하는 `FirstName` 및 `LastName` 데이터베이스 테이블에서 값이 설정 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>&quot;FirstName, LastName&quot;에 매개 변수 없이.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       자리 표시자를 추가 SelectParameters 컬렉션에 값을 설정 하는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>명명 된 매개 변수에 대 한 속성.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Select 절에서 각 매개 변수 이름 앞에 @ 기호입니다.       속성 이름을 나타내는 데 SelectParameters 컬렉션의 매개 변수를 사용할 수 없습니다. 동적으로 설정 하는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>속성을 속성의 이름에 대 한 이벤트 처리기를 만들고는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>이벤트 및 사용자 지정는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>필요에 따라 속성.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>"
  example:
  - "The following example shows how to use a user-supplied value to calculate a value in the returned data. The user can enter a value in the text box that represents the number of manufacturing days. That value is divided by a value from a database that represents the number of days to manufacture a product. The returned value indicates how many products can be manufactured during the specified number of days. The user's input is included in the Select command through the SelectParameters collection.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_129_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_129_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Select 절을 만드는 데 사용 되는 매개 변수입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  id: StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "데이터는 변경 되지 않았는지 다른 프로세스에 의해 업데이트 되거나 삭제 되기 전에 고유 하도록 뷰 상태에 데이터 원본에서 데이터를 저장 해야 하는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "기본적으로 업데이트 및 삭제 작업, 설정 된는 <xref:System.Web.UI.WebControls.LinqDataSource>제어 모든 레코드 뷰 상태에 대 한 원래 값을 저장 합니다.</xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>모든 기본 키에 대 한 값을 저장 하는 컨트롤 및 모든 속성으로 표시 되지 `UpdateCheck.Never` 에 `Column` 특성.</xref:System.Web.UI.WebControls.LinqDataSource> 설정한는 `UpdateCheck` 의 속성은 `Column` 특성에 [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]합니다.       LINQ to SQL 업데이트 하거나 데이터를 삭제, 전에 데이터 원본에 있는 현재 값에 대 한 뷰 상태의 값을 확인 합니다. 값이 일치 하지 않는 데이터 원본 레코드 변경 되었습니다. 이 경우 LINQ to SQL 예외를 throw 업데이트를 계속 되거나 않는 작업을 삭제 합니다. LINQ to SQL에 대 한 자세한 내용은 참조 [LINQ to SQL](~/add/includes/ajax-current-ext-md.md)합니다.       보기에 원래 값이 저장 상태 불필요 하 게 커질 하도록 페이지 크기를 발생할 수 있으며 악의적인 사용자에 게 중요 한 데이터를 노출할 수 있습니다. StoreOriginalValuesInViewState 속성을 설정 하 여 보기에 상태 값이 저장 하지 않으려면 `false`합니다. 이 작업을 수행 하는 경우 데이터가 변경 되지 않은 고유 하도록 고유한 방법을 제공 해야 합니다. StoreOriginalValuesInViewState 속성을 설정 하는 경우 `false`, 데이터 바인딩된 컨트롤에 대 한 뷰 상태에 원래 값이 유지 되지 않습니다. 이 경우 LINQ to SQL 데이터의 무결성을 확인할 수 없습니다. LINQ to SQL 데이터 원본의 데이터를에서 실제로 변경 되지 않은 경우에 데이터 충돌을 표시 하는 예외가 throw 됩니다.       데이터 원본 업데이트 하는 동안 자동으로 업데이트 하는 타임 스탬프 필드를 있으면 해당 값만 뷰 상태에 저장할 수 있습니다. 이 경우에 타임 스탬프 엔터티 클래스에서 속성 `IsVersion=true` 모든 속성이로 설정 되 고 `UpdateCheck.Never`합니다. 타임 스탬프 필드는 자동으로 업데이트 되므로 데이터베이스에서 해당 레코드의 데이터가 변경 될 때마다 LINQ to SQL은 데이터가 변경 된 경우 해당 값에서 결정 합니다. 이렇게 하면 상태 보기의 크기를 줄일 수 및 중요 한 데이터가 노출 됩니다. LINQ to SQL은 상태를 확인할 데이터 일관성에 대 한 보기에 타임 스탬프 값을 비교 하 여 데이터베이스의 타임 스탬프 값으로. 자세한 내용은 참조 [연습: 타임 스탬프를 사용 하 여 데이터 무결성 검사를 LinqDataSource 컨트롤과](http://msdn.microsoft.com/en-us/e7700162-4f05-4130-81f7-3be1361027fa)합니다."
  syntax:
    content: public bool StoreOriginalValuesInViewState { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>상태 값 보기에 저장 되는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  id: System#Web#DynamicData#IDynamicDataSource#ContextType
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "이 멤버에 대 한 참조 <xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>합니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Web.UI.WebControls.LinqDataSource>인스턴스로 캐스팅 되는 <xref:System.Web.DynamicData.IDynamicDataSource>인터페이스.</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }
    return:
      type: System.Type
      description: "클래스와 연결 된 형식입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  id: System#Web#DynamicData#IDynamicDataSource#EntitySetName
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "이 멤버에 대 한 참조 <xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>합니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Web.UI.WebControls.LinqDataSource>인스턴스로 캐스팅 되는 <xref:System.Web.DynamicData.IDynamicDataSource>인터페이스.</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }
    return:
      type: System.String
      description: "엔터티의 이름입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  id: TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "데이터 컬렉션을 나타내는 데이터 컨텍스트 클래스의 속성이 나 필드의 이름을 가져오거나 설정 합니다."
  remarks: "검색할 데이터를 나타내는 필드나 속성의 이름으로 TableName 속성을 설정 합니다. 데이터베이스 테이블에 연결 하는 경우 속성의 이름은 일반적으로 테이블의 이름과 동일 합니다. 메모리 내 데이터 컬렉션에 연결 하는 경우 데이터 컬렉션을 반환 하는 필드나 속성의 이름으로 TableName 속성을 설정 합니다.       검색 작업에 대 한 TableName 속성에 모든 형식을 반환 하는 속성을 할당할 수 있습니다. 속성으로 표현 하는 개체 구현 하지 않습니다 <xref:System.Collections.IEnumerable>, <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤이 자동으로 줄 바꿈됩니다 개체의 인스턴스에서는 <xref:System.Collections.IEnumerable>개체입니다.</xref:System.Collections.IEnumerable> </xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Collections.IEnumerable>       자동으로 업데이트, 삽입 또는 삭제 작업의 경우 클래스 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>속성 <xref:System.Data.Linq.DataContext>및 속성 <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> 에서 파생 되어야 TableName에 할당 된 속성에서</xref:System.Data.Linq.DataContext> 파생 되어야</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 에 할당 된       클래스의 인스턴스에서 데이터를 선택 하는 방법에 대 한 정보를 참조 하십시오.는 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows two <xref:System.Web.UI.WebControls.LinqDataSource> controls. In one <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property in a class. That property returns an array of strings. In the other <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property that represents a database table.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ to SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_2.vb)]"
  syntax:
    content: public string TableName { get; set; }
    return:
      type: System.String
      description: "데이터 컬렉션을 포함 하는 속성의 이름을 포함 하는 문자열입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.TableName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  id: Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "업데이트 작업을 수행 합니다."
  remarks: "일반적으로 사용자 코드에서 Update 메서드를 호출할 필요가 없습니다. 자동으로 데이터 바인딩된 컨트롤에서는 사용자가 레코드를 업데이트 하는 작업을 수행 하는 경우 Update 메서드를 호출 해야 합니다. 데이터 업데이트에 대 한 사용자가 소유한 프로세스를 만들려고 할 때에 Update 메서드를 명시적으로 호출 합니다."
  example:
  - "The following example shows how to programmatically update a record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains the key value, a <xref:System.Collections.Specialized.ListDictionary> object that contains the original values, and a <xref:System.Collections.Specialized.ListDictionary> object that contains the new values to the Update method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_2.aspx)]"
  syntax:
    content: public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "레코드를 업데이트할 수에 대 한 행 키 값입니다."
    - id: values
      type: System.Collections.IDictionary
      description: "행 값을 데이터 원본에서 업데이트할 수 있습니다."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "데이터 충돌을 감지 계산 되는 행 값."
    return:
      type: System.Int32
      description: "업데이트 작업에 영향을 받는 레코드 수입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.Update*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "업데이트 작업이 완료 되 면 발생 합니다."
  remarks: "업데이트 작업에서 발생 한 예외를 catch 하거나 업데이트 작업이 완료 된 후 출력 매개 변수 값을 확인 하려면 업데이트 된 이벤트를 처리 합니다. 출력 매개 변수는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>이벤트 처리기에 전달 되는 개체입니다.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Updated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "이 컬렉션에서 사용 되지 않는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> 클래스입니다."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "컬렉션 매개 변수입니다."
  overload: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "업데이트 작업이 수행 되기 전에 발생합니다."
  remarks: "업데이트, 업데이트 작업 전의 값을 변경 하거나 업데이트 작업을 취소 하는 데이터 클래스의 데이터 유효성 검사 오류를 검사 하는 개체의 유효성을 검사 하려면 업데이트 이벤트를 처리 합니다. <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>이벤트 처리기에 전달 되는 개체에는 원래 개체와 업데이트 된 개체를 모두 포함 되어 있습니다.</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>       <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>데이터 클래스에 의해 throw 되는 유효성 검사 예외를 포함 하는 개체</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 업데이트 작업 중에 유효성 검사 오류가 발생 하는 경우 유효성 검사 오류가 업데이트할 값 데이터 클래스에 속성의 형식과 일치 하지 않는 경우 또는 사용자 지정 유효성 검사를 통과 하지 못하면 발생 합니다. 업데이트 이벤트에 대 한 이벤트 처리기를 유효성 검사 예외를 검색할 수 있으며 적절 한 조치를 취할 수 있습니다.       업데이트 이벤트에 대 한 이벤트 처리기에서 예외가 throw 되 면 해당 이벤트 처리기에서 예외를 처리 해야 합니다. 예외에 대 한 이벤트 처리기에 전달 되지 것입니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Updated>이벤트 (통해는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>의 속성은 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>개체).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Updated> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>속성 업데이트 이벤트 이후에 throw 된 예외가 포함 합니다.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Updating event. The code compares properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to see whether a value has changed. If the value has changed, a value of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_16_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_16_1.cs)]  \n  \n The following example shows an event handler for the Updating event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> Updating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  id: Where
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "가져오거나 조건을 지정 하는 값 검색된 된 데이터에 포함 된 레코드에 대해 true 이어야 합니다."
  remarks: "You use the Where property to specify the conditions for the record to be returned from a query. The syntax for the Where property is the same as the syntax for a LINQ Where clause in C#.  \n  \n You specify an expression that results in a Boolean value, and if the expression evaluates to `true` for a given row, the row is included in the result set. Expressions are composed of column names, comparison operators, and values to compare to, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50\"...>  \n```  \n  \n To specify multiple expressions linked by logical `AND` or `OR` operators, you use `&&` as a logical AND operator and `||` as a logical OR operator, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50 && Price < 100\"...>  \n<asp:LinqDataSource ... Where=\"Price <= 50 || Price >= 100\"...>  \n```  \n  \n If you want to test a property against a literal string value, the literal string value must be enclosed in double quotation marks. To do this in markup, enclose the Where clause value in single quotation marks, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where='Category = \"Sports\"' ... >  \n```  \n  \n To test against a literal string value in code, use escape characters that are appropriate to the language you are using in order to insert double quotation marks, as shown in the following example:  \n  \n```vb#  \nLinqDataSource1.Where = \"Category = \"\"Sports\"\"\"  \n```  \n  \n```c#  \nLinqDataSource1.Where = \"Category = \\\"Sports\\\"\";  \n```  \n  \n If you want to test whether a string is greater than or less than another string, you must use methods of the <xref:System.String> class instead of using `<` or `>` operators between the column name and the string value. The following examples show how to select rows that have Category values that are less than, less than or equal to, greater than, or greater than or equal to \"Sports\":  \n  \n```  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") < 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") <= 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") > 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") >= 0' ... >  \n```  \n  \n You can also use other methods of the <xref:System.String> class, such as <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.Contains%2A>. For more information about how to compare strings, see [Comparing Strings](~/add/includes/ajax-current-ext-md.md). For more information about Where clause syntax, see [C# Operators](~/add/includes/ajax-current-ext-md.md) and [where clause](~/add/includes/ajax-current-ext-md.md).  \n  \n In addition to filtering based on static values that you define when you create the Web page, you can filter based on dynamic values that are evaluated at run time. In that case, you include a named parameter in the Where property that acts as a placeholder for the value. You then add a parameter that has the matching name to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.  \n  \n Alternatively, you can set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` and define the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection. When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, you do not have to include the named parameters in the Where property. Instead, the <xref:System.Web.UI.WebControls.LinqDataSource> control automatically generates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> property.  \n  \n For more information about how to filter data, see [Walkthrough: Selecting and Filtering a Subset of Data with the LinqDataSource and GridView Controls](http://msdn.microsoft.com/en-us/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)."
  example:
  - "The following example shows how to filter the data returned from a query based on a static condition.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_1.aspx)]  \n  \n The following example shows how to filter the data based on a value that is provided by the user at run time. In this example a <xref:System.Web.UI.WebControls.DropDownList> control and a <xref:System.Web.UI.WebControls.GridView> control are displayed on the page. When the user selects one of the values in the <xref:System.Web.UI.WebControls.DropDownList> control, the <xref:System.Web.UI.WebControls.LinqDataSource> control selects from the `Products` table only rows that have `UserPrice` values equal to the selected value. The <xref:System.Web.UI.WebControls.GridView> control then displays the filtered data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_2.aspx)]"
  syntax:
    content: public string Where { get; set; }
    return:
      type: System.String
      description: "Where를 만드는 데 사용 되는 문자열 절."
  overload: System.Web.UI.WebControls.LinqDataSource.Where*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  id: WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Where를 만드는 데 사용 되는 매개 변수 컬렉션을 가져옵니다 절."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>제어를 사용 하 여 매개 변수 WhereParameters 컬렉션에 Where 만들 런타임 시 절.</xref:System.Web.UI.WebControls.LinqDataSource> 프로그래밍 방식으로 where에서 조건 중 하나 이상을 설정할 때 WhereParameters 컬렉션에 매개 변수를 추가 하면 절. 값과 같은 성 가진 레코드에 대 한 데이터베이스 테이블을 검색할 수는 예를 들어 한 <xref:System.Web.UI.WebControls.TextBox>컨트롤.</xref:System.Web.UI.WebControls.TextBox> 이 경우 매개 변수를 입력란 값에 대 한 WhereParameters 컬렉션 추가 합니다.       Where에서 런타임 시 값을 설정 하지 않은 경우 절 않아도 WhereParameters 컬렉션을 사용 하도록 합니다. 검색할 필드를 정의할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 예를 들어, 데이터베이스 테이블에서 값을 반환할 위치 `LastName` 태그의 &quot;Adams&quot; equals 설정는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>속성을 `&quot;LastName = &quot;Adams&quot;&quot;` 매개 변수 없이.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       WhereParameters 컬렉션에 값을 설정 하려면 각 매개 변수에 이름을 할당 하 고이 다음에 자리 표시자를 추가할는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>해당 매개 변수에 대 한 속성.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Where에서 절, 각 매개 변수 이름 앞에 @ 기호입니다."
  example:
  - "The following example shows how to use the WhereParameters collection to dynamically create the Where clause. The <xref:System.Web.UI.WebControls.LinqDataSource> control returns all the records with a value in the `Price` column that is greater than the value selected by the user in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_594_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_594_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Where를 만드는 데 사용 되는 매개 변수의 컬렉션 절에는 <xref:System.Web.UI.WebControls.LinqDataSource.Where*>속성.</xref:System.Web.UI.WebControls.LinqDataSource.Where*>"
  overload: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.ContextDataSource
  isExternal: false
  name: System.Web.UI.WebControls.ContextDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceStatusEventArgs>
  nameWithType: EventHandler<LinqDataSourceStatusEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
    name: LinqDataSourceStatusEventArgs
    nameWithType: LinqDataSourceStatusEventArgs
    fullName: LinqDataSourceStatusEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceContextEventArgs>
  nameWithType: EventHandler<LinqDataSourceContextEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceContextEventArgs
    name: LinqDataSourceContextEventArgs
    nameWithType: LinqDataSourceContextEventArgs
    fullName: LinqDataSourceContextEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDisposeEventArgs>
  nameWithType: EventHandler<LinqDataSourceDisposeEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs
    name: LinqDataSourceDisposeEventArgs
    nameWithType: LinqDataSourceDisposeEventArgs
    fullName: LinqDataSourceDisposeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
- uid: System.Web.UI.WebControls.QueryableDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: QueryableDataSourceView
  nameWithType: QueryableDataSourceView
  fullName: System.Web.UI.WebControls.QueryableDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
- uid: System.Web.UI.WebControls.LinqDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSourceView
  nameWithType: LinqDataSourceView
  fullName: System.Web.UI.WebControls.LinqDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDeleteEventArgs>
  nameWithType: EventHandler<LinqDataSourceDeleteEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs
    name: LinqDataSourceDeleteEventArgs
    nameWithType: LinqDataSourceDeleteEventArgs
    fullName: LinqDataSourceDeleteEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceInsertEventArgs>
  nameWithType: EventHandler<LinqDataSourceInsertEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
    name: LinqDataSourceInsertEventArgs
    nameWithType: LinqDataSourceInsertEventArgs
    fullName: LinqDataSourceInsertEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceSelectEventArgs>
  nameWithType: EventHandler<LinqDataSourceSelectEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceSelectEventArgs
    name: LinqDataSourceSelectEventArgs
    nameWithType: LinqDataSourceSelectEventArgs
    fullName: LinqDataSourceSelectEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceUpdateEventArgs>
  nameWithType: EventHandler<LinqDataSourceUpdateEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
    name: LinqDataSourceUpdateEventArgs
    nameWithType: LinqDataSourceUpdateEventArgs
    fullName: LinqDataSourceUpdateEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource
  nameWithType: LinqDataSource.LinqDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView
  nameWithType: LinqDataSource.CreateQueryableView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView
  nameWithType: LinqDataSource.CreateView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete
  nameWithType: LinqDataSource.Delete
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert
  nameWithType: LinqDataSource.Insert
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit
  nameWithType: LinqDataSource.OnInit
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload
  nameWithType: LinqDataSource.OnUnload
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update
  nameWithType: LinqDataSource.Update
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Where*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
