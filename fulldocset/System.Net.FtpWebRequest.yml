### YamlMime:ManagedReference
items:
- uid: System.Net.FtpWebRequest
  id: FtpWebRequest
  children:
  - System.Net.FtpWebRequest.Abort
  - System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  - System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  - System.Net.FtpWebRequest.ClientCertificates
  - System.Net.FtpWebRequest.ConnectionGroupName
  - System.Net.FtpWebRequest.ContentLength
  - System.Net.FtpWebRequest.ContentOffset
  - System.Net.FtpWebRequest.ContentType
  - System.Net.FtpWebRequest.Credentials
  - System.Net.FtpWebRequest.DefaultCachePolicy
  - System.Net.FtpWebRequest.EnableSsl
  - System.Net.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)
  - System.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)
  - System.Net.FtpWebRequest.GetRequestStream
  - System.Net.FtpWebRequest.GetResponse
  - System.Net.FtpWebRequest.Headers
  - System.Net.FtpWebRequest.KeepAlive
  - System.Net.FtpWebRequest.Method
  - System.Net.FtpWebRequest.PreAuthenticate
  - System.Net.FtpWebRequest.Proxy
  - System.Net.FtpWebRequest.ReadWriteTimeout
  - System.Net.FtpWebRequest.RenameTo
  - System.Net.FtpWebRequest.RequestUri
  - System.Net.FtpWebRequest.ServicePoint
  - System.Net.FtpWebRequest.Timeout
  - System.Net.FtpWebRequest.UseBinary
  - System.Net.FtpWebRequest.UseDefaultCredentials
  - System.Net.FtpWebRequest.UsePassive
  langs:
  - csharp
  name: FtpWebRequest
  nameWithType: FtpWebRequest
  fullName: System.Net.FtpWebRequest
  type: Class
  summary: "FTP 파일 전송 프로토콜 () 클라이언트를 구현합니다."
  remarks: "FtpWebRequest의 인스턴스를 가져오려면는 <xref:System.Net.WebRequest.Create%2A>메서드.</xref:System.Net.WebRequest.Create%2A> 사용할 수도 있습니다는 <xref:System.Net.WebClient>클래스를 업로드 하 여 FTP 서버에서 정보를 다운로드 합니다.</xref:System.Net.WebClient> 이러한 방법 중 하나를 사용 하 여, 지정 하면 FTP 체계를 사용 하 여 네트워크 리소스 (예를 들어 `&quot;ftp://contoso.com&quot;`) FtpWebRequest 클래스 프로그래밍 방식으로 FTP 서버와 상호 작용 하는 기능을 제공 합니다.       URI는 상대 또는 절대 수 있습니다. 폼의 URI가 `&quot;ftp://contoso.com/%2fpath&quot;` (%2f는 이스케이프 된 &quot;/&quot;), 다음 URI는 절대, 및 현재 디렉터리는 `/path`합니다. 그러나 경우, URI는 폼의 `&quot;ftp://contoso.com/path&quot;`,.NET Framework가 FTP 서버에 로그인 하는 먼저 (사용자 이름 및 암호를 사용 하 여 설정한는 <xref:System.Net.FtpWebRequest.Credentials%2A>속성), 현재 디렉터리로 설정 됩니다 `<UserLoginDirectory>/path`.</xref:System.Net.FtpWebRequest.Credentials%2A>       유효한 사용자 이름을 지정 해야 하 고 암호는 서버 또는 서버에 대 한 익명 로그온을 허용 해야 합니다. 설정 하 여 서버에 연결 하는 데 사용 되는 자격 증명을 지정할 수 있습니다는 <xref:System.Net.FtpWebRequest.Credentials%2A>속성 열을 포함할 수에 <xref:System.Uri.UserInfo%2A>URI의 부분에 전달 되는 <xref:System.Net.WebRequest.Create%2A>메서드.</xref:System.Net.WebRequest.Create%2A> </xref:System.Uri.UserInfo%2A> </xref:System.Net.FtpWebRequest.Credentials%2A> 포함 하는 경우 <xref:System.Uri.UserInfo%2A>URI에 대 한 정보는 <xref:System.Net.FtpWebRequest.Credentials%2A>속성이 지정 된 사용자 이름 및 암호 정보로 새 네트워크 자격 증명으로 설정 되어 있습니다.</xref:System.Net.FtpWebRequest.Credentials%2A> </xref:System.Uri.UserInfo%2A>      > [!CAUTION] > 하지 않는 한는 <xref:System.Net.FtpWebRequest.EnableSsl%2A>속성은 `true`, 모든 데이터와 명령을, 사용자 이름 및 암호 정보를 포함 하 여 서버에 일반 텍스트로 전송 됩니다.</xref:System.Net.FtpWebRequest.EnableSsl%2A> 네트워크 트래픽을 모니터링 하는 모든 자격 증명을 볼 수 있으며 서버에 연결 하는 데 사용. 자격 증명을 요구 하 고 Secure Sockets Layer (SSL)를 지원 하는 FTP 서버에 연결 하는 경우 설정 해야 <xref:System.Net.FtpWebRequest.EnableSsl%2A>를 `true`.</xref:System.Net.FtpWebRequest.EnableSsl%2A>       있어야 <xref:System.Net.WebPermission>리소스에 액세스할 때 FTP; 그렇지 않으면는 <xref:System.Security.SecurityException>예외가 throw 됩니다.</xref:System.Security.SecurityException> </xref:System.Net.WebPermission>       설정 하 여 서버에 보낼 FTP 명령을 지정 하십시오.는 <xref:System.Net.FtpWebRequest.Method%2A>속성에 정의 된 값으로는 <xref:System.Net.WebRequestMethods.Ftp>구조.</xref:System.Net.WebRequestMethods.Ftp> </xref:System.Net.FtpWebRequest.Method%2A> 텍스트 데이터를 전송 하려면 변경 된 <xref:System.Net.FtpWebRequest.UseBinary%2A>속성의 기본값에서 (`true`)를 `false`.</xref:System.Net.FtpWebRequest.UseBinary%2A> 자세한 내용 및 제한 사항 <xref:System.Net.FtpWebRequest.Method%2A>.</xref:System.Net.FtpWebRequest.Method%2A> 를 참조 하세요.       FtpWebRequest 개체를 사용 하 여 서버에 파일 업로드를 파일 콘텐츠를 호출 하 여 얻은 요청 스트림에 써야는 <xref:System.Net.FtpWebRequest.GetRequestStream%2A>메서드 또는 해당 비동기 메서드인은 <xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A>및 <xref:System.Net.FtpWebRequest.EndGetRequestStream%2A>메서드.</xref:System.Net.FtpWebRequest.EndGetRequestStream%2A> </xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A> </xref:System.Net.FtpWebRequest.GetRequestStream%2A> 스트림에 쓸 하며 요청을 보내기 전에 스트림을 닫습니다.       요청은 호출 하 여 서버에 보냅니다는 <xref:System.Net.FtpWebRequest.GetResponse%2A>메서드 또는 해당 비동기 메서드인은 <xref:System.Net.FtpWebRequest.BeginGetResponse%2A>및 <xref:System.Net.FtpWebRequest.EndGetResponse%2A>메서드.</xref:System.Net.FtpWebRequest.EndGetResponse%2A> </xref:System.Net.FtpWebRequest.BeginGetResponse%2A> </xref:System.Net.FtpWebRequest.GetResponse%2A> 요청 된 작업이 완료 되 면는 <xref:System.Net.FtpWebResponse>개체가 반환 됩니다.</xref:System.Net.FtpWebResponse> <xref:System.Net.FtpWebResponse>개체는 서버에서 다운로드 된 데이터는 작업의 상태를 제공 합니다.</xref:System.Net.FtpWebResponse>       읽기 또는 쓰기 서버를 사용 하 여 시간 제한 값을 설정할 수 있습니다는 <xref:System.Net.FtpWebRequest.ReadWriteTimeout%2A>속성.</xref:System.Net.FtpWebRequest.ReadWriteTimeout%2A> 호출 하는 메서드에서 throw 한 <xref:System.Net.WebException> <xref:System.Net.WebExceptionStatus> <xref:System.Net.WebExceptionStatus>.</xref:System.Net.WebExceptionStatus> 로 설정</xref:System.Net.WebExceptionStatus> 된</xref:System.Net.WebException> 제한 시간 초과 하는 경우       명령이 성공적으로 수행 하는 경우 FTP 서버에서 파일을 다운로드, 응답 개체의 스트림에서 요청된 된 파일의 내용을 사용할 수 있습니다. 호출 하 여이 스트림에 액세스할 수는 <xref:System.Net.FtpWebResponse.GetResponseStream%2A>메서드.</xref:System.Net.FtpWebResponse.GetResponseStream%2A> 자세한 내용은 <xref:System.Net.FtpWebResponse>.</xref:System.Net.FtpWebResponse> 을 참조 하십시오.       경우는 <xref:System.Net.FtpWebRequest.Proxy%2A>속성을 설정 하거나 직접 또는 구성 파일에 지정된 된 프록시를 통해 FTP 서버와의 통신 이루어집니다.</xref:System.Net.FtpWebRequest.Proxy%2A> 지정 된 프록시만는 HTTP 프록시를는 <xref:System.Net.WebRequestMethods.Ftp.DownloadFile>, <xref:System.Net.WebRequestMethods.Ftp.ListDirectory>, 및 <xref:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails>명령이 지원 됩니다.</xref:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails> </xref:System.Net.WebRequestMethods.Ftp.ListDirectory> </xref:System.Net.WebRequestMethods.Ftp.DownloadFile>       이진 콘텐츠를 다운로드만 캐시 됩니다. 즉, 콘텐츠를 사용 하 여 수신 된 <xref:System.Net.WebRequestMethods.Ftp.DownloadFile>명령에 <xref:System.Net.FtpWebRequest.UseBinary%2A>속성이로 설정 `true`.</xref:System.Net.FtpWebRequest.UseBinary%2A> </xref:System.Net.WebRequestMethods.Ftp.DownloadFile>       가능 하면 여러 FtpWebRequests도 기존 연결을 사용 합니다.       FTP 프로토콜에 대 한 자세한 내용은 RFC 959, &quot;파일 전송 프로토콜,&quot;에서 사용 가능한 참조 [http://www.rfc-editor.org/](http://www.ietf.org/rfc/rfc959.txt)합니다."
  example:
  - "The following code example demonstrates deleting a file from an FTP server.  \n  \n [!code-cpp[NCLFtpClient#4](~/add/codesnippet/cpp/t-system.net.ftpwebrequest_1.cpp)]\n [!code-cs[NCLFtpClient#4](~/add/codesnippet/csharp/t-system.net.ftpwebrequest_1.cs)]  \n  \n The following code example demonstrates downloading a file from an FTP server by using the <xref:System.Net.WebClient> class.  \n  \n [!code-cpp[NCLFtpClient#5](~/add/codesnippet/cpp/t-system.net.ftpwebrequest_2.cpp)]\n [!code-cs[NCLFtpClient#5](~/add/codesnippet/csharp/t-system.net.ftpwebrequest_2.cs)]  \n  \n The following code example demonstrates using asynchronous operations to upload a file to an FTP server.  \n  \n [!code-cs[NCLFtpAsync#1](~/add/codesnippet/csharp/t-system.net.ftpwebrequest_3.cs)]\n [!code-cpp[NCLFtpAsync#1](~/add/codesnippet/cpp/t-system.net.ftpwebrequest_3.cpp)]"
  syntax:
    content: 'public sealed class FtpWebRequest : System.Net.WebRequest'
  inheritance:
  - System.Net.WebRequest
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.FtpWebRequest.Abort
  id: Abort
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: Abort()
  nameWithType: FtpWebRequest.Abort()
  fullName: System.Net.FtpWebRequest.Abort()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "비동기 FTP 작업을 종료합니다."
  remarks: "진행 중인 작업이 없으면이 메서드는 아무 작업도 수행 하지 않습니다. 파일 전송이 진행 중인 경우이 메서드는 전송을 종료 합니다.      > [!NOTE] > 응용 프로그램에 네트워크 추적을 사용 하도록 설정 하면이 멤버에서 추적 정보를 출력 합니다. 자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates how the user can terminate an asynchronous upload of a file from the local directory to the server.  \n  \n [!code-cpp[NCLFtpClient#10](~/add/codesnippet/cpp/m-system.net.ftpwebreque_3_1.cpp)]\n [!code-cs[NCLFtpClient#10](~/add/codesnippet/csharp/m-system.net.ftpwebreque_3_1.cs)]"
  syntax:
    content: public override void Abort ();
    parameters: []
  overload: System.Net.FtpWebRequest.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  id: BeginGetRequestStream(System.AsyncCallback,System.Object)
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: BeginGetRequestStream(AsyncCallback,Object)
  nameWithType: FtpWebRequest.BeginGetRequestStream(AsyncCallback,Object)
  fullName: System.Net.FtpWebRequest.BeginGetRequestStream(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "비동기적으로 여는 요청 콘텐츠 스트림을 쓰기 위해 시작 합니다."
  remarks: "호출 하 여 비동기 작업을 완료 해야 합니다는 <xref:System.Net.FtpWebRequest.EndGetRequestStream%2A>메서드.</xref:System.Net.FtpWebRequest.EndGetRequestStream%2A> 일반적으로 <xref:System.Net.FtpWebRequest.EndGetRequestStream%2A>에서 참조 하는 메서드에 의해 호출 `callback`.</xref:System.Net.FtpWebRequest.EndGetRequestStream%2A> 속성을 확인 작업의 상태를 확인 하려면는 <xref:System.IAsyncResult>이 메서드에서 반환 된 개체입니다.</xref:System.IAsyncResult>       이 메서드는 스트림에 대 한 대기 하는 동안 차단 하지 않습니다. 호출을 차단 하려면 <xref:System.Net.FtpWebRequest.GetRequestStream%2A>이 메서드 대신.</xref:System.Net.FtpWebRequest.GetRequestStream%2A>       비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > 응용 프로그램에 네트워크 추적을 사용 하도록 설정 하면이 멤버에서 추적 정보를 출력 합니다. 자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates beginning an asynchronous operation to get a request's stream. This code example is part of a larger example provided for the <xref:System.Net.FtpWebRequest> class overview.  \n  \n [!code-cs[NCLFtpAsync#4](~/add/codesnippet/csharp/7dded3fc-ce2a-466f-b201-_1.cs)]\n [!code-cpp[NCLFtpAsync#4](~/add/codesnippet/cpp/7dded3fc-ce2a-466f-b201-_1.cpp)]"
  syntax:
    content: public override IAsyncResult BeginGetRequestStream (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>작업이 완료 될 때 호출할 메서드를 참조 하는 대리자입니다.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다. 이 개체에 전달 되는 `callback` 작업이 완료 될 때 delegate입니다."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>작업의 상태를 나타내는 인스턴스입니다.</xref:System.IAsyncResult>"
  overload: System.Net.FtpWebRequest.BeginGetRequestStream*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이 메서드에 대 한 이전 호출 또는 <xref:System.Net.FtpWebRequest.GetRequestStream*>아직 완료 되지 않았습니다.</xref:System.Net.FtpWebRequest.GetRequestStream*>"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "FTP 서버에 연결할 수 없습니다."
  - type: System.Net.ProtocolViolationException
    commentId: T:System.Net.ProtocolViolationException
    description: "<xref:System.Net.FtpWebRequest.Method*> <xref:System.Net.WebRequestMethods.Ftp.UploadFile>.</xref:System.Net.WebRequestMethods.Ftp.UploadFile> 속성이 설정 되지 않은</xref:System.Net.FtpWebRequest.Method*>"
  platform:
  - net462
- uid: System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  id: BeginGetResponse(System.AsyncCallback,System.Object)
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: BeginGetResponse(AsyncCallback,Object)
  nameWithType: FtpWebRequest.BeginGetResponse(AsyncCallback,Object)
  fullName: System.Net.FtpWebRequest.BeginGetResponse(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "시작 요청을 보내고 응답을 비동기적으로 FTP 서버에서 수신 합니다."
  remarks: "호출 하 여 비동기 작업을 완료 해야 합니다는 <xref:System.Net.FtpWebRequest.EndGetResponse%2A>메서드.</xref:System.Net.FtpWebRequest.EndGetResponse%2A> 일반적으로 <xref:System.Net.FtpWebRequest.EndGetResponse%2A>에서 참조 하는 메서드에 의해 호출 `callback`.</xref:System.Net.FtpWebRequest.EndGetResponse%2A> 속성을 확인 작업의 상태를 확인 하려면는 <xref:System.IAsyncResult>BeginGetResponse 메서드에서 반환 된 개체입니다.</xref:System.IAsyncResult>       경우는 <xref:System.Net.FtpWebRequest.Proxy%2A>속성을 설정 하거나 직접 또는 구성 파일에 지정된 된 프록시를 통해 FTP 서버와의 통신 이루어집니다.</xref:System.Net.FtpWebRequest.Proxy%2A>       BeginGetResponse 서버 로부터 응답을 기다리는 동안 차단 하지 않습니다. 호출을 차단 하려면는 <xref:System.Net.FtpWebRequest.GetResponse%2A>BeginGetResponse 대신 메서드.</xref:System.Net.FtpWebRequest.GetResponse%2A>       비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/add/includes/ajax-current-ext-md.md)합니다.       응용 프로그램에 네트워크 추적을 사용 하도록 설정 하면이 멤버에서 추적 정보를 출력 합니다. 자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > 경우는 <xref:System.Net.WebException>은 사용 하 여 throw 되는 <xref:System.Net.WebException.Response%2A>및 <xref:System.Net.WebException.Status%2A>속성의 서버에서 응답을 결정 하는 예외.</xref:System.Net.WebException.Status%2A> </xref:System.Net.WebException.Response%2A> </xref:System.Net.WebException>"
  example:
  - "The following code example demonstrates ending an asynchronous operation to get a request's stream, and then starting a request to get the response. This code example is part of a larger example provided for the <xref:System.Net.FtpWebRequest> class overview.  \n  \n [!code-cs[NCLFtpAsync#5](~/add/codesnippet/csharp/m-system.net.ftpwebreque_0_1.cs)]\n [!code-cpp[NCLFtpAsync#5](~/add/codesnippet/cpp/m-system.net.ftpwebreque_0_1.cpp)]"
  syntax:
    content: public override IAsyncResult BeginGetResponse (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>작업이 완료 될 때 호출할 메서드를 참조 하는 대리자입니다.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다. 이 개체에 전달 되는 `callback` 작업이 완료 될 때 delegate입니다."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>작업의 상태를 나타내는 인스턴스입니다.</xref:System.IAsyncResult>"
  overload: System.Net.FtpWebRequest.BeginGetResponse*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.FtpWebRequest.GetResponse*>또는 BeginGetResponse가 이미이 인스턴스에 대 한 호출 되었습니다.</xref:System.Net.FtpWebRequest.GetResponse*>"
  platform:
  - net462
- uid: System.Net.FtpWebRequest.ClientCertificates
  id: ClientCertificates
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: ClientCertificates
  nameWithType: FtpWebRequest.ClientCertificates
  fullName: System.Net.FtpWebRequest.ClientCertificates
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "FTP 서버에 암호화 된 연결을 설정 하는 데 사용 되는 인증서를 가져오거나 설정 합니다."
  remarks: "클라이언트 인증서는 초기 SSL 연결 협상 하는 동안 클라이언트를 인증 하는 데 사용 됩니다. 자세한 내용은 <xref:System.Net.FtpWebRequest.EnableSsl%2A>.</xref:System.Net.FtpWebRequest.EnableSsl%2A> 을 참조 하십시오.      > [!NOTE] >.NET Framework SSL 세션에서는 만들어지면 하 고 가능한 경우 새 요청에 대 한 캐시 된 세션을 사용 하려고 합니다. .NET Framework의 첫 번째 요소를 사용 하 여 SSL 세션을 다시 사용을 시도할 때 <xref:System.Net.HttpWebRequest.ClientCertificates%2A>(있는지 하나), 하는 경우 익명 세션을 다시 사용 하려고 <xref:System.Net.HttpWebRequest.ClientCertificates%2A>비어 있습니다.</xref:System.Net.HttpWebRequest.ClientCertificates%2A> </xref:System.Net.HttpWebRequest.ClientCertificates%2A>"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; set; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;> </xref> 클라이언트 인증서가 들어 있는 개체입니다."
  overload: System.Net.FtpWebRequest.ClientCertificates*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "설정 작업은 지정 된 값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.ConnectionGroupName
  id: ConnectionGroupName
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: ConnectionGroupName
  nameWithType: FtpWebRequest.ConnectionGroupName
  fullName: System.Net.FtpWebRequest.ConnectionGroupName
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "현재 요청을 보내는 데 사용 하는 서비스 지점이 들어 있는 연결 그룹의 이름을 가져오거나 설정 합니다."
  remarks: "연결 그룹 특정 연결 또는 연결 집합을 요청 집합을 연결 합니다. 연결 그룹에 연결 요청에 자격 증명은 동일 하며 요청에서 연결 그룹 이름을 지정 하는 경우 동일한 응용 프로그램 도메인에서 시작 된 요청에 의해서만 재사용할 수 있습니다. 요청 연결 그룹 이름을 지정 하지 않는 경우에 연결 그룹에 연결 되지 않은 요청 된 서버에 대 한 기존 연결을 사용할 수 있습니다. 자격 증명이 동일 하면 기존 연결이 닫히고 새 요청을 다시 인증 해야 합니다.       연결 그룹을 사용 하 여이 모든 사용자의 자격 증명으로 인증 된 연결을 다시 사용 하려면 사용자에 대 한 요청 수 있기 때문 성능을 향상 시킬 수 있습니다.       호출 후 되므로 ConnectionGroupName 속성 변경의 <xref:System.Net.FtpWebRequest.GetRequestStream%2A>, <xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A>, <xref:System.Net.FtpWebRequest.GetResponse%2A>, 또는 <xref:System.Net.FtpWebRequest.BeginGetResponse%2A>메서드를 사용 하면은 <xref:System.InvalidOperationException>예외.</xref:System.InvalidOperationException> </xref:System.Net.FtpWebRequest.BeginGetResponse%2A> </xref:System.Net.FtpWebRequest.GetResponse%2A> </xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A> </xref:System.Net.FtpWebRequest.GetRequestStream%2A>"
  example:
  - "The following code example retrieves the value of this property.  \n  \n [!code-cpp[NCLFtpClient#16](~/add/codesnippet/cpp/p-system.net.ftpwebreque_8_1.cpp)]\n [!code-cs[NCLFtpClient#16](~/add/codesnippet/csharp/p-system.net.ftpwebreque_8_1.cs)]"
  syntax:
    content: public override string ConnectionGroupName { get; set; }
    return:
      type: System.String
      description: "A <xref:System.String>연결 그룹의 이름이 포함 된 값입니다.</xref:System.String>"
  overload: System.Net.FtpWebRequest.ConnectionGroupName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이미 진행 중인 요청에 대 한이 속성에 대 한 새 값이 지정 됩니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.ContentLength
  id: ContentLength
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: ContentLength
  nameWithType: FtpWebRequest.ContentLength
  fullName: System.Net.FtpWebRequest.ContentLength
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "무시 되는 값을 가져오거나 설정 합니다.는 <xref href=&quot;System.Net.FtpWebRequest&quot;> </xref> 클래스입니다."
  remarks: "ContentLength 속성은 다른 구현과의 호환성을 위해서만 제공 됩니다는 <xref:System.Net.WebRequest>및 <xref:System.Net.WebResponse>클래스.</xref:System.Net.WebResponse> </xref:System.Net.WebRequest> ContentLength 사용할 이유가 없습니다 있습니다."
  syntax:
    content: public override long ContentLength { get; set; }
    return:
      type: System.Int64
      description: "<xref:System.Int64>무시 해야 하는 값입니다.</xref:System.Int64>"
  overload: System.Net.FtpWebRequest.ContentLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.FtpWebRequest.ContentOffset
  id: ContentOffset
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: ContentOffset
  nameWithType: FtpWebRequest.ContentOffset
  fullName: System.Net.FtpWebRequest.ContentOffset
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "이 요청에서 다운로드 되 고 파일에 대 한 바이트 오프셋을 가져오거나 설정 합니다."
  remarks: "FTP 서버에서 파일을 다운로드할 때는 ContentOffset 속성을 설정 합니다. 이 오프셋에서 다운로드할 데이터의 시작을 표시 하는 서버의 파일 위치를 나타냅니다. 오프셋; 파일의 시작 부분에서 바이트 수로 지정 첫 번째 바이트의 오프셋은&0;입니다.       설정 ContentOffset 하면은 <xref:System.Net.FtpWebRequest>보낼 컴퓨터를 다시 시작 (`REST`) 서버에 명령을.</xref:System.Net.FtpWebRequest> 이 명령은 서버에 데이터를 업로드 하는 경우 대부분의 FTP 서버 구현에서 무시 됩니다.       ContentOffset 호출한 후 변경의 <xref:System.Net.FtpWebRequest.GetRequestStream%2A>, <xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A>, <xref:System.Net.FtpWebRequest.GetResponse%2A>, 또는 <xref:System.Net.FtpWebRequest.BeginGetResponse%2A>메서드를 사용 하면 프로그램 <xref:System.InvalidOperationException>예외.</xref:System.InvalidOperationException> </xref:System.Net.FtpWebRequest.BeginGetResponse%2A> </xref:System.Net.FtpWebRequest.GetResponse%2A> </xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A> </xref:System.Net.FtpWebRequest.GetRequestStream%2A>"
  example:
  - "The following code example demonstrates downloading part of a file from a server and appending the downloaded data to a local file.  \n  \n [!code-cpp[NclFtpClient#7](~/add/codesnippet/cpp/p-system.net.ftpwebreque_4_1.cpp)]\n [!code-cs[NclFtpClient#7](~/add/codesnippet/csharp/p-system.net.ftpwebreque_4_1.cs)]"
  syntax:
    content: public long ContentOffset { get; set; }
    return:
      type: System.Int64
      description: "<xref:System.Int64>파일 오프셋을 바이트 단위로 지정 하는 인스턴스.</xref:System.Int64> 기본값은&0;입니다."
  overload: System.Net.FtpWebRequest.ContentOffset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이미 진행 중인 요청에 대 한이 속성에 대 한 새 값이 지정 됩니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "이 속성은 지정 된 값은&0; 보다 작습니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.ContentType
  id: ContentType
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: ContentType
  nameWithType: FtpWebRequest.ContentType
  fullName: System.Net.FtpWebRequest.ContentType
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "항상에 <xref:System.NotSupportedException>.</xref:System.NotSupportedException> throw"
  remarks: "ContentType 속성의 다른 구현과 호환성을 위해서만 제공 되는 <xref:System.Net.WebRequest>및 <xref:System.Net.WebResponse>클래스.</xref:System.Net.WebResponse> </xref:System.Net.WebRequest> ContentType 사용할 이유가 없습니다 있습니다."
  syntax:
    content: public override string ContentType { get; set; }
    return:
      type: System.String
      description: "항상에 <xref:System.NotSupportedException>.</xref:System.NotSupportedException> throw"
  overload: System.Net.FtpWebRequest.ContentType*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "콘텐츠 형식 정보 FTP에 대 한 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.Credentials
  id: Credentials
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: Credentials
  nameWithType: FtpWebRequest.Credentials
  fullName: System.Net.FtpWebRequest.Credentials
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "FTP 서버와 통신 하는 데 자격 증명을 가져오거나 설정 합니다."
  remarks: "익명 로그온을 사용 하 여 연결할 때 자격 증명을 지정할 필요가 없습니다. 형식의 자격 증명을 사용 하 여 자격 증명 속성을 설정 해야 <xref:System.Net.NetworkCredential>; 이렇게 하면 사용자 이름 및 암호 수 수 읽을 서버로 전송 합니다.</xref:System.Net.NetworkCredential>      > [!CAUTION] > 서버에 전송 하지 않는 한 자격 증명 정보는 암호화 되지 않습니다는 <xref:System.Net.FtpWebRequest.EnableSsl%2A>속성이 `true`.</xref:System.Net.FtpWebRequest.EnableSsl%2A>       자격 증명을 호출한 후 변경의 <xref:System.Net.FtpWebRequest.GetRequestStream%2A>, <xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A>, <xref:System.Net.FtpWebRequest.GetResponse%2A>, 또는 <xref:System.Net.FtpWebRequest.BeginGetResponse%2A>메서드를 사용 하면은 <xref:System.InvalidOperationException>예외.</xref:System.InvalidOperationException> </xref:System.Net.FtpWebRequest.BeginGetResponse%2A> </xref:System.Net.FtpWebRequest.GetResponse%2A> </xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A> </xref:System.Net.FtpWebRequest.GetRequestStream%2A>"
  example:
  - "The following code example retrieves the value of this property and uses it to display the user name.  \n  \n [!code-cpp[NCLFtpClient#14](~/add/codesnippet/cpp/p-system.net.ftpwebreque_6_1.cpp)]\n [!code-cs[NCLFtpClient#14](~/add/codesnippet/csharp/p-system.net.ftpwebreque_6_1.cs)]"
  syntax:
    content: public override System.Net.ICredentials Credentials { get; set; }
    return:
      type: System.Net.ICredentials
      description: "<xref:System.Net.ICredentials>인스턴스이거나, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 는 속성이 설정 되지 않은 경우.</xref:System.Net.ICredentials>"
  overload: System.Net.FtpWebRequest.Credentials*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "설정 작업은 지정 된 값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.Net.ICredentials>아닌 다른 형식의 <xref:System.Net.NetworkCredential>set 작업에 대해 지정 되었습니다.</xref:System.Net.NetworkCredential> </xref:System.Net.ICredentials>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이미 진행 중인 요청에 대 한이 속성에 대 한 새 값이 지정 됩니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.DefaultCachePolicy
  id: DefaultCachePolicy
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: DefaultCachePolicy
  nameWithType: FtpWebRequest.DefaultCachePolicy
  fullName: System.Net.FtpWebRequest.DefaultCachePolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "모든 FTP 요청에 대 한 기본 캐시 정책을 정의합니다."
  remarks: "사용 하 여 받은 콘텐츠만 <xref:System.Net.WebRequestMethods.Ftp.DownloadFile>명령 캐시 됩니다.</xref:System.Net.WebRequestMethods.Ftp.DownloadFile>       다음 표에서 ftp 캐싱 <xref:System.Net.FtpWebRequest>.</xref:System.Net.FtpWebRequest> 정책이 영향을 설명      | 정책 | 효과 |   |------------|------------|   | <xref:System.Net.Cache.RequestCacheLevel>| 리소스를 새 콘텐츠 길이 정확 하 고 만료, 수정 및 콘텐츠 길이 특성은 캐시 된 리소스를 반환 합니다. |   | <xref:System.Net.Cache.RequestCacheLevel>| 서버에서 리소스를 반환 합니다. |   | <xref:System.Net.Cache.RequestCacheLevel>| 콘텐츠 길이 있고 항목 크기;와 일치 하는 경우 캐시 된 리소스를 반환 합니다. 그렇지 않으면는 <xref:System.Net.WebException>를 throw 합니다. |   | <xref:System.Net.Cache.RequestCacheLevel>| 콘텐츠 길이가 제공 되 고 일치 항목 크기가; 캐시 된 리소스를 반환 합니다. 그렇지 않은 경우 리소스 서버에서 다운로드 하 고 호출자에 게 반환 됩니다. |   | <xref:System.Net.Cache.RequestCacheLevel>| 캐시 된 리소스의 타임 스탬프 서버에서 리소스의 타임 스탬프와 동일한 경우 캐시 된 리소스를 반환 합니다. 그렇지 않으면 리소스는 서버에서 다운로드, 캐시에 저장 된이 고 호출자에 게 반환 합니다. |   | <xref:System.Net.Cache.RequestCacheLevel>| 서버에서 리소스를 다운로드 하는 캐시에 저장 하 고 호출자에 게 리소스를 반환 합니다. |   | <xref:System.Net.Cache.RequestCacheLevel>| 캐시 된 리소스가 있으면 삭제 됩니다.</xref:System.Net.Cache.RequestCacheLevel> </xref:System.Net.Cache.RequestCacheLevel> </xref:System.Net.Cache.RequestCacheLevel> </xref:System.Net.Cache.RequestCacheLevel> </xref:System.Net.WebException> </xref:System.Net.Cache.RequestCacheLevel> </xref:System.Net.Cache.RequestCacheLevel> </xref:System.Net.Cache.RequestCacheLevel> 리소스는 서버에서 다운로드 되 고 호출자에 게 반환 됩니다. |      > [!NOTE] > 설정은 DefaultCachePolicy 모든 구성 설정을 재정의 합니다."
  syntax:
    content: public static System.Net.Cache.RequestCachePolicy DefaultCachePolicy { get; set; }
    return:
      type: System.Net.Cache.RequestCachePolicy
      description: "A <xref href=&quot;System.Net.Cache.RequestCachePolicy&quot;> </xref> FTP 요청에 대 한 캐시 정책을 정의 하는 합니다."
  overload: System.Net.FtpWebRequest.DefaultCachePolicy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "호출자에 게가이 속성을 설정 하려고 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.EnableSsl
  id: EnableSsl
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: EnableSsl
  nameWithType: FtpWebRequest.EnableSsl
  fullName: System.Net.FtpWebRequest.EnableSsl
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져오거나는 <xref:System.Boolean>SSL 연결을 사용 해야 함을 지정 하는.</xref:System.Boolean>"
  remarks: "> [!CAUTION]> EnableSsl 속성은 않으면 `true`, 모든 데이터와 명령을, 사용자 이름 및 암호 정보를 포함 하 여 서버에 일반 텍스트로 전송 됩니다. 네트워크 트래픽을 모니터링 하는 모든 자격 증명을 볼 수 있으며 서버에 연결 하는 데 사용. SSL을 지원 하 고 자격 증명을 요구 하는 FTP 서버에 연결 하는 경우 설정 해야 EnableSsl `true`합니다.       `&quot;AUTH TLS&quot;` 명령을 암호화 된 세션을 요청 하는 서버로 전송 됩니다. 수신 하는 서버에서이 명령을 인식 하지는 <xref:System.Net.WebException>예외.</xref:System.Net.WebException>"
  example:
  - "The following code example uses an encrypted connection to download the directory listing from an FTP server.  \n  \n [!code-cpp[NCLFtpClient#8](~/add/codesnippet/cpp/p-system.net.ftpwebreque_11_1.cpp)]\n [!code-cs[NCLFtpClient#8](~/add/codesnippet/csharp/p-system.net.ftpwebreque_11_1.cs)]"
  syntax:
    content: public bool EnableSsl { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>제어 및 데이터 전송이 암호화 되; 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.FtpWebRequest.EnableSsl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "FTP 서버에 연결을 이미 설정 했습니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)
  id: EndGetRequestStream(System.IAsyncResult)
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: EndGetRequestStream(IAsyncResult)
  nameWithType: FtpWebRequest.EndGetRequestStream(IAsyncResult)
  fullName: System.Net.FtpWebRequest.EndGetRequestStream(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "보류 중인 비동기 작업을 시작 <xref:System.Net.FtpWebRequest.BeginGetRequestStream*></xref:System.Net.FtpWebRequest.BeginGetRequestStream*> 끝"
  remarks: "작업이 완료 되지 않은 경우, 작업이 완료 될 때까지 EndGetRequestStream 메서드 차단 합니다. 작업이 완료 되었는지 여부를 확인 하려면 검토는 <xref:System.IAsyncResult.IsCompleted%2A>EndGetRequestStream를 호출 하기 전에 속성.</xref:System.IAsyncResult.IsCompleted%2A>       &quot;예외&quot;에 설명 된 예외, 외에도 EndGetRequestStream 다시 쓰기 위해 스트림을 여는 동안 throw 된 예외를 throw 합니다.      > [!NOTE] > 응용 프로그램에 네트워크 추적을 사용 하도록 설정 하면이 멤버에서 추적 정보를 출력 합니다. 자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates ending an asynchronous operation to get a request's stream. This code example is part of a larger example provided for the <xref:System.Net.FtpWebRequest> class overview.  \n  \n [!code-cs[NCLFtpAsync#5](~/add/codesnippet/csharp/m-system.net.ftpwebreque_1_1.cs)]\n [!code-cpp[NCLFtpAsync#5](~/add/codesnippet/cpp/m-system.net.ftpwebreque_1_1.cpp)]"
  syntax:
    content: public override System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>작업이 시작 될 때 반환 된 개체입니다.</xref:System.IAsyncResult>"
    return:
      type: System.IO.Stream
      description: "쓰기 가능한 <xref:System.IO.Stream>이 인스턴스와 연결 된 인스턴스.</xref:System.IO.Stream>"
  overload: System.Net.FtpWebRequest.EndGetRequestStream*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>호출 하 여 가져오지 못한 <xref:System.Net.FtpWebRequest.BeginGetRequestStream*>합니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "로 식별 된 작업에 대 한이 메서드가 이미 호출 된 <code> asyncResult </code>합니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)
  id: EndGetResponse(System.IAsyncResult)
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: EndGetResponse(IAsyncResult)
  nameWithType: FtpWebRequest.EndGetResponse(IAsyncResult)
  fullName: System.Net.FtpWebRequest.EndGetResponse(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "보류 중인 비동기 작업을 시작 <xref:System.Net.FtpWebRequest.BeginGetResponse*></xref:System.Net.FtpWebRequest.BeginGetResponse*> 끝"
  remarks: "작업이 완료 되지 않은 경우 시간에 EndGetResponse 메서드 라고, EndGetResponse 블록은 작업이 완료 될 때까지 합니다. 확인을 차단 하지는 <xref:System.IAsyncResult.IsCompleted%2A>EndGetResponse를 호출 하기 전에 속성.</xref:System.IAsyncResult.IsCompleted%2A>       &quot;예외&quot;에 설명 된 예외, 외에도 EndGetResponse 다시 서버와 통신 하는 동안 throw 된 예외를 throw 합니다.      > [!NOTE] > 응용 프로그램에 네트워크 추적을 사용 하도록 설정 하면이 멤버에서 추적 정보를 출력 합니다. 자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates ending an asynchronous operation to get a response. This code example is part of a larger example provided for the <xref:System.Net.FtpWebRequest> class overview.  \n  \n [!code-cs[NCLFtpAsync#6](~/add/codesnippet/csharp/m-system.net.ftpwebreque_5_1.cs)]\n [!code-cpp[NCLFtpAsync#6](~/add/codesnippet/cpp/m-system.net.ftpwebreque_5_1.cpp)]"
  syntax:
    content: public override System.Net.WebResponse EndGetResponse (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>작업이 시작 될 때 반환 된입니다.</xref:System.IAsyncResult>"
    return:
      type: System.Net.WebResponse
      description: "A <xref:System.Net.WebResponse>가 포함 된 참조는 <xref href=&quot;System.Net.FtpWebResponse&quot;> </xref> 인스턴스.</xref:System.Net.WebResponse> 이 개체는 요청에 대 한 FTP 서버의 응답을 포함합니다."
  overload: System.Net.FtpWebRequest.EndGetResponse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>호출 하 여 가져오지 못한 <xref:System.Net.FtpWebRequest.BeginGetResponse*>합니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "로 식별 된 작업에 대 한이 메서드가 이미 호출 된 <code> asyncResult </code>합니다."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "HTTP 프록시를 사용 하 여 오류가 있습니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.GetRequestStream
  id: GetRequestStream
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: GetRequestStream()
  nameWithType: FtpWebRequest.GetRequestStream()
  fullName: System.Net.FtpWebRequest.GetRequestStream()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "FTP 서버에 데이터를 업로드 하는 데 사용 되는 스트림을 검색 합니다."
  remarks: "Getrequeststream을 호출 메서드를 호출 하기 전에 요청 속성을 설정 합니다. 데이터를 스트림에 작성 한 후 요청을 보내기 전에 스트림을 닫아야 합니다.       설정 하지 않은 경우는 <xref:System.Net.FtpWebRequest.Method%2A>속성을 <xref:System.Net.WebRequestMethods.Ftp.UploadFile>또는 <xref:System.Net.WebRequestMethods.Ftp.AppendFile>, 스트림을 가져올 수 없습니다.</xref:System.Net.WebRequestMethods.Ftp.AppendFile> </xref:System.Net.WebRequestMethods.Ftp.UploadFile> </xref:System.Net.FtpWebRequest.Method%2A>       스트림에 대 한 대기 하는 동안 차단 getrequeststream을 호출 합니다. 이 방지 하려면 호출는 <xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A>getrequeststream을 호출 하는 대신 메서드.</xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A>      > [!NOTE] > 응용 프로그램에 네트워크 추적을 사용 하도록 설정 하면이 멤버에서 추적 정보를 출력 합니다. 자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates copying a file to a request's data stream and sending a request to the server to upload the data and append it to a file.  \n  \n [!code-cpp[NCLFtpClient#3](~/add/codesnippet/cpp/m-system.net.ftpwebreque_4_1.cpp)]\n [!code-cs[NCLFtpClient#3](~/add/codesnippet/csharp/m-system.net.ftpwebreque_4_1.cs)]"
  syntax:
    content: public override System.IO.Stream GetRequestStream ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "쓰기 가능한 <xref:System.IO.Stream>인스턴스를 현재 요청에 의해 서버에 보내도록 데이터를 저장 하는 데 사용 합니다.</xref:System.IO.Stream>"
  overload: System.Net.FtpWebRequest.GetRequestStream*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.FtpWebRequest.BeginGetRequestStream*> has been called and has not completed.  \n  \n \\- or -  \n  \n An HTTP proxy is enabled, and you attempted to use an FTP command other than &lt;xref:System.Net.WebRequestMethods.Ftp.DownloadFile?displayProperty=fullName&gt;, &lt;xref:System.Net.WebRequestMethods.Ftp.ListDirectory?displayProperty=fullName&gt;, or &lt;xref:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails?displayProperty=fullName&gt;."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "FTP 서버에 연결할 수 없습니다."
  - type: System.Net.ProtocolViolationException
    commentId: T:System.Net.ProtocolViolationException
    description: "<xref:System.Net.FtpWebRequest.Method*>속성으로 설정 되지 않은 &lt;xref:System.Net.WebRequestMethods.Ftp.UploadFile?displayProperty=fullName&gt; 또는 &lt;xref:System.Net.WebRequestMethods.Ftp.AppendFile?displayProperty=fullName&gt;.</xref:System.Net.FtpWebRequest.Method*>"
  platform:
  - net462
- uid: System.Net.FtpWebRequest.GetResponse
  id: GetResponse
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: GetResponse()
  nameWithType: FtpWebRequest.GetResponse()
  fullName: System.Net.FtpWebRequest.GetResponse()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "FTP 서버 응답을 반환합니다."
  remarks: "<xref:System.Net.WebResponse> <xref:System.Net.FtpWebResponse>.</xref:System.Net.FtpWebResponse> 이 메서드에서 반환 된 개체</xref:System.Net.WebResponse> 캐스팅 해야 FTP 관련 속성에 액세스 하려면       GetResponse 하면 제어 연결을 설정, 데이터 연결을 만들 수도 있습니다. GetResponse 응답을 받을 때까지 차단 됩니다. 이 방지 하려면이 작업 수행 하면이 비동기적으로 호출 하 여는 <xref:System.Net.FtpWebRequest.BeginGetResponse%2A>및 <xref:System.Net.FtpWebRequest.EndGetResponse%2A>메서드 대신 GetResponse.</xref:System.Net.FtpWebRequest.EndGetResponse%2A> </xref:System.Net.FtpWebRequest.BeginGetResponse%2A>       경우는 <xref:System.Net.FtpWebRequest.Proxy%2A>속성을 설정 하거나 직접 또는 구성 파일에서 FTP 서버와의 통신 프록시를 통해 이루어집니다.</xref:System.Net.FtpWebRequest.Proxy%2A>       경우는 <xref:System.Net.WebException>은 사용 하 여 throw 되는 <xref:System.Net.WebException.Response%2A>및 <xref:System.Net.WebException.Status%2A>속성의 서버에서 응답을 결정 하는 예외.</xref:System.Net.WebException.Status%2A> </xref:System.Net.WebException.Response%2A> </xref:System.Net.WebException>       응용 프로그램에 네트워크 추적을 사용 하도록 설정 하면이 멤버에서 추적 정보를 출력 합니다. 자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > 요청을 다시 발급 하지; GetResponse 여러 번 호출 동일한 응답 개체를 반환 합니다."
  example:
  - "The following code example demonstrates copying a file to a request's data stream and sending a request to append data to a file to the server. The example calls GetResponse to send the request and block until the response is returned by the server.  \n  \n [!code-cpp[NCLFtpClient#3](~/add/codesnippet/cpp/m-system.net.ftpwebreque_2_1.cpp)]\n [!code-cs[NCLFtpClient#3](~/add/codesnippet/csharp/m-system.net.ftpwebreque_2_1.cs)]"
  syntax:
    content: public override System.Net.WebResponse GetResponse ();
    parameters: []
    return:
      type: System.Net.WebResponse
      description: "A <xref:System.Net.WebResponse>가 포함 된 참조는 <xref href=&quot;System.Net.FtpWebResponse&quot;> </xref> 인스턴스.</xref:System.Net.WebResponse> 이 개체는 요청에 대 한 FTP 서버의 응답을 포함합니다."
  overload: System.Net.FtpWebRequest.GetResponse*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "GetResponse or <xref:System.Net.FtpWebRequest.BeginGetResponse*> has already been called for this instance.  \n  \n \\- or -  \n  \n An HTTP proxy is enabled, and you attempted to use an FTP command other than &lt;xref:System.Net.WebRequestMethods.Ftp.DownloadFile?displayProperty=fullName&gt;, &lt;xref:System.Net.WebRequestMethods.Ftp.ListDirectory?displayProperty=fullName&gt;, or &lt;xref:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails?displayProperty=fullName&gt;."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<xref:System.Net.FtpWebRequest.EnableSsl*> is set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, but the server does not support this feature.  \n  \n \\- or -  \n  \n A <xref:System.Net.FtpWebRequest.Timeout*> was specified and the timeout has expired."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.Headers
  id: Headers
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: Headers
  nameWithType: FtpWebRequest.Headers
  fullName: System.Net.FtpWebRequest.Headers
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "빈 가져옵니다 <xref:System.Net.WebHeaderCollection>개체입니다.</xref:System.Net.WebHeaderCollection>"
  remarks: "헤더 속성의 다른 구현과 호환성을 위해서만 제공 됩니다는 <xref:System.Net.WebRequest>및 <xref:System.Net.WebResponse>클래스.</xref:System.Net.WebResponse> </xref:System.Net.WebRequest> 헤더를 사용 하도록 않아도가 됩니다."
  syntax:
    content: public override System.Net.WebHeaderCollection Headers { get; set; }
    return:
      type: System.Net.WebHeaderCollection
      description: "빈 <xref:System.Net.WebHeaderCollection>개체입니다.</xref:System.Net.WebHeaderCollection>"
  overload: System.Net.FtpWebRequest.Headers*
  exceptions: []
  platform:
  - net462
- uid: System.Net.FtpWebRequest.KeepAlive
  id: KeepAlive
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: KeepAlive
  nameWithType: FtpWebRequest.KeepAlive
  fullName: System.Net.FtpWebRequest.KeepAlive
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져오거나는 <xref:System.Boolean>FTP 서버에 제어 연결이 요청 완료 후 닫히는지 여부를 지정 하는 값입니다.</xref:System.Boolean>"
  remarks: "KeepAlive 속성이로 설정 된 경우 `false`를 호출 하는 경우 제어 연결이 닫혀는 <xref:System.Net.FtpWebResponse.Close%2A>메서드.</xref:System.Net.FtpWebResponse.Close%2A>       KeepAlive를 호출한 후 변경의 <xref:System.Net.FtpWebRequest.GetRequestStream%2A>, <xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A>, <xref:System.Net.FtpWebRequest.GetResponse%2A>, 또는 <xref:System.Net.FtpWebRequest.BeginGetResponse%2A>메서드를 사용 하면 프로그램 <xref:System.InvalidOperationException>예외.</xref:System.InvalidOperationException> </xref:System.Net.FtpWebRequest.BeginGetResponse%2A> </xref:System.Net.FtpWebRequest.GetResponse%2A> </xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A> </xref:System.Net.FtpWebRequest.GetRequestStream%2A>"
  example:
  - "The following code example retrieves and displays property values for a specified <xref:System.Net.FtpWebRequest> object.  \n  \n [!code-cpp[NCLFtpClient#15](~/add/codesnippet/cpp/p-system.net.ftpwebreque_0_1.cpp)]\n [!code-cs[NCLFtpClient#15](~/add/codesnippet/csharp/p-system.net.ftpwebreque_0_1.cs)]"
  syntax:
    content: public bool KeepAlive { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>서버에 연결을 제거 되어야 할지; 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.FtpWebRequest.KeepAlive*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이미 진행 중인 요청에 대 한이 속성에 대 한 새 값이 지정 됩니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.Method
  id: Method
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: Method
  nameWithType: FtpWebRequest.Method
  fullName: System.Net.FtpWebRequest.Method
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "FTP 서버에 보낼 명령을 가져오거나 설정 합니다."
  remarks: "메서드 속성 어떤 명령이 서버로 전송을 결정 합니다. <xref:System.Net.WebRequestMethods.Ftp>클래스</xref:System.Net.WebRequestMethods.Ftp> 의 public 필드 멤버에 정의 된 문자열을 사용 하 여 메서드를 설정 문자열에 정의 하는 <xref:System.Net.WebRequestMethods.Ftp>클래스 메서드가 속성에 대 한 지원 되는 유일한 옵션은.</xref:System.Net.WebRequestMethods.Ftp> 메서드 속성을 다른 값으로 설정 하면 프로그램 <xref:System.ArgumentException>예외.</xref:System.ArgumentException>       메서드 설정할 때 <xref:System.Net.WebRequestMethods.Ftp.UploadFile>를 호출 하기 전에 수행 해야 합니다는 <xref:System.Net.FtpWebRequest.GetRequestStream%2A>메서드.</xref:System.Net.FtpWebRequest.GetRequestStream%2A> </xref:System.Net.WebRequestMethods.Ftp.UploadFile> 올바른 순서로 원인에서 이러한 멤버를 호출 하지 않으면은 <xref:System.Net.ProtocolViolationException>요청 스트림에 얻으려고 시도 하는 동안 예외가 발생 했습니다.</xref:System.Net.ProtocolViolationException>       에 제공 된 자격 증명은 <xref:System.Net.FtpWebRequest>개체에 지정된 된 메서드를 수행할 수 있는 권한이 있어야 합니다.</xref:System.Net.FtpWebRequest> 그렇지 않으면 하며 FTP 명령이 실패 합니다.       명령의 성공 여부를 확인 하려면는 <xref:System.Net.FtpWebResponse.StatusCode%2A>및 <xref:System.Net.FtpWebResponse.StatusDescription%2A>속성.</xref:System.Net.FtpWebResponse.StatusDescription%2A> </xref:System.Net.FtpWebResponse.StatusCode%2A>"
  example:
  - "The following code example sets this property to <xref:System.Net.WebRequestMethods.Ftp.DeleteFile>.  \n  \n [!code-cpp[NCLFtpClient#4](~/add/codesnippet/cpp/p-system.net.ftpwebreque_2_1.cpp)]\n [!code-cs[NCLFtpClient#4](~/add/codesnippet/csharp/p-system.net.ftpwebreque_2_1.cs)]"
  syntax:
    content: public override string Method { get; set; }
    return:
      type: System.String
      description: "A <xref:System.String>서버로 보낼 FTP 명령이 들어 있는 값입니다.</xref:System.String> 기본값은 <xref:System.Net.WebRequestMethods.Ftp.DownloadFile>.</xref:System.Net.WebRequestMethods.Ftp.DownloadFile>"
  overload: System.Net.FtpWebRequest.Method*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이미 진행 중인 요청에 대 한이 속성에 대 한 새 값이 지정 됩니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The method is invalid.  \n  \n \\- or -  \n  \n The method is not supported.  \n  \n \\- or -  \n  \n Multiple methods were specified."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.PreAuthenticate
  id: PreAuthenticate
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: PreAuthenticate
  nameWithType: FtpWebRequest.PreAuthenticate
  fullName: System.Net.FtpWebRequest.PreAuthenticate
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "항상에 <xref:System.NotSupportedException>.</xref:System.NotSupportedException> throw"
  remarks: "PreAuthenticate 속성의 다른 구현과 호환성을 위해서만 제공 됩니다는 <xref:System.Net.WebRequest>및 <xref:System.Net.WebResponse>클래스.</xref:System.Net.WebResponse> </xref:System.Net.WebRequest>"
  syntax:
    content: public override bool PreAuthenticate { get; set; }
    return:
      type: System.Boolean
      description: "항상에 <xref:System.NotSupportedException>.</xref:System.NotSupportedException> throw"
  overload: System.Net.FtpWebRequest.PreAuthenticate*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "FTP에 대 한 사전 인증이 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.Proxy
  id: Proxy
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: Proxy
  nameWithType: FtpWebRequest.Proxy
  fullName: System.Net.FtpWebRequest.Proxy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "FTP 서버와 통신 하는 데 프록시를 가져오거나 설정 합니다."
  remarks: "프록시 속성을 식별 하는 <xref:System.Net.IWebProxy>FTP 서버와 통신 하는 인스턴스.</xref:System.Net.IWebProxy> 프록시 구성 파일 및 Internet Explorer 로컬 영역 네트워크 설정을 사용 하 여 시스템에 의해 설정 됩니다. 프록시가 쓰일 수를 지정 하려면에서 반환 하 여 프록시 인스턴스를 프록시 설정의 <xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A?displayProperty=fullName>메서드.</xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A?displayProperty=fullName> 프록시 자동 검색에 대 한 자세한 내용은 참조 [자동 프록시 검색](~/add/includes/ajax-current-ext-md.md)합니다.       데이터는 요청 스트림에 쓰기 또는 응답을 받은 하기 전에 프록시를 설정 해야 합니다. 프록시를 호출한 후 변경의 <xref:System.Net.FtpWebRequest.GetRequestStream%2A>, <xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A>, <xref:System.Net.FtpWebRequest.GetResponse%2A>, 또는 <xref:System.Net.FtpWebRequest.BeginGetResponse%2A>메서드를 사용 하면 프로그램 <xref:System.InvalidOperationException>예외.</xref:System.InvalidOperationException> </xref:System.Net.FtpWebRequest.BeginGetResponse%2A> </xref:System.Net.FtpWebRequest.GetResponse%2A> </xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A> </xref:System.Net.FtpWebRequest.GetRequestStream%2A>       <xref:System.Net.FtpWebRequest>클래스는 HTTP 및 ISA 방화벽 클라이언트 프록시를 지원 합니다.</xref:System.Net.FtpWebRequest>       지정 된 프록시만는 HTTP 프록시를는 <xref:System.Net.WebRequestMethods.Ftp.DownloadFile>, <xref:System.Net.WebRequestMethods.Ftp.ListDirectory>, 및 <xref:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails>명령이 지원 됩니다.</xref:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails> </xref:System.Net.WebRequestMethods.Ftp.ListDirectory> </xref:System.Net.WebRequestMethods.Ftp.DownloadFile>"
  example:
  - "The following code example displays this property value.  \n  \n [!code-cpp[NCLFtpClient#16](~/add/codesnippet/cpp/p-system.net.ftpwebreque_1_1.cpp)]\n [!code-cs[NCLFtpClient#16](~/add/codesnippet/csharp/p-system.net.ftpwebreque_1_1.cs)]"
  syntax:
    content: public override System.Net.IWebProxy Proxy { get; set; }
    return:
      type: System.Net.IWebProxy
      description: "<xref:System.Net.IWebProxy>인스턴스 FTP 서버와 통신 합니다.</xref:System.Net.IWebProxy>"
  overload: System.Net.FtpWebRequest.Proxy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "이 속성 설정할 수 없습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이미 진행 중인 요청에 대 한이 속성에 대 한 새 값이 지정 됩니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.ReadWriteTimeout
  id: ReadWriteTimeout
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: ReadWriteTimeout
  nameWithType: FtpWebRequest.ReadWriteTimeout
  fullName: System.Net.FtpWebRequest.ReadWriteTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "스트림에 쓰거나 읽을 때의 제한 시간을 가져오거나 설정 합니다."
  remarks: "ReadWriteTimeout 반환한 스트림에 쓸 때 사용 되는 <xref:System.Net.FtpWebRequest.GetRequestStream%2A>메서드나에서 반환 된 스트림에서 읽기는 <xref:System.Net.FtpWebResponse.GetResponseStream%2A>메서드.</xref:System.Net.FtpWebResponse.GetResponseStream%2A> </xref:System.Net.FtpWebRequest.GetRequestStream%2A>       ReadWriteTimeout 속성에 대 한 제한 시간을 제어 하는 구체적으로,는 <xref:System.IO.Stream.Read%2A>반환한 스트림을 읽는 데 사용 되는 메서드는 <xref:System.Net.FtpWebResponse.GetResponseStream%2A>메서드, 및에 대 한는 <xref:System.IO.Stream.Write%2A>에서 반환 된 스트림에 쓰기 위해 사용 되는 메서드는 <xref:System.Net.FtpWebRequest.GetRequestStream%2A>메서드.</xref:System.Net.FtpWebRequest.GetRequestStream%2A> </xref:System.IO.Stream.Write%2A> </xref:System.Net.FtpWebResponse.GetResponseStream%2A> </xref:System.IO.Stream.Read%2A> 호출 하는 메서드에서 throw 한 <xref:System.Net.WebException> <xref:System.Net.WebExceptionStatus> <xref:System.Net.WebExceptionStatus>.</xref:System.Net.WebExceptionStatus> 로 설정</xref:System.Net.WebExceptionStatus> 된</xref:System.Net.WebException> 제한 시간 초과 하는 경우       요청이 완료 될 때까지 대기 하는 시간을 지정 하려면 사용 된 <xref:System.Net.FtpWebRequest.Timeout%2A>속성.</xref:System.Net.FtpWebRequest.Timeout%2A>"
  syntax:
    content: public int ReadWriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "읽기 또는 쓰기가 가능한 제한 시간 (밀리초)의 수입니다. 기본값은 300, 000 밀리초 (5 분)입니다."
  overload: System.Net.FtpWebRequest.ReadWriteTimeout*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "요청이 이미 전송 되었습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Set 작업이&0; 보다 작거나 같음 및 같지 않은 지정 된 값은 &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;합니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.RenameTo
  id: RenameTo
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: RenameTo
  nameWithType: FtpWebRequest.RenameTo
  fullName: System.Net.FtpWebRequest.RenameTo
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "이름을 바꿀 파일의 새 이름을 가져오거나 설정 합니다."
  syntax:
    content: public string RenameTo { get; set; }
    return:
      type: System.String
      description: "이름을 바꿀 파일의 새 이름입니다."
  overload: System.Net.FtpWebRequest.RenameTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "설정 작업은 지정 된 값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 빈 문자열입니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이미 진행 중인 요청에 대 한이 속성에 대 한 새 값이 지정 됩니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.RequestUri
  id: RequestUri
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: RequestUri
  nameWithType: FtpWebRequest.RequestUri
  fullName: System.Net.FtpWebRequest.RequestUri
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "이 인스턴스에서 요청한 URI를 가져옵니다."
  remarks: "RequestUri 속성의 값은 URI 될 때 지정 되는 <xref:System.Net.WebRequest.Create%2A>이 인스턴스를 가져오는 메서드를 호출 했습니다.</xref:System.Net.WebRequest.Create%2A>"
  example:
  - "The following code example displays this property value.  \n  \n [!code-cpp[NCLFtpClient#14](~/add/codesnippet/cpp/p-system.net.ftpwebreque_5_1.cpp)]\n [!code-cs[NCLFtpClient#14](~/add/codesnippet/csharp/p-system.net.ftpwebreque_5_1.cs)]"
  syntax:
    content: public override Uri RequestUri { get; }
    return:
      type: System.Uri
      description: "A <xref:System.Uri>파일 전송 프로토콜을 사용 하 여 액세스 하는 리소스를 식별 하는 인스턴스.</xref:System.Uri>"
  overload: System.Net.FtpWebRequest.RequestUri*
  exceptions: []
  platform:
  - net462
- uid: System.Net.FtpWebRequest.ServicePoint
  id: ServicePoint
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: ServicePoint
  nameWithType: FtpWebRequest.ServicePoint
  fullName: System.Net.FtpWebRequest.ServicePoint
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져옵니다는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> FTP 서버에 연결 하는 데 사용 되는 개체입니다."
  remarks: "없는 경우 <xref:System.Net.ServicePoint>개체가, FTP 서버에 만들어집니다.</xref:System.Net.ServicePoint> FTP 서버에 대 한 열 수 있는 연결의 최대 수를 설정 하려면 설정는 <xref:System.Net.ServicePoint.ConnectionLimit%2A>의 속성은 <xref:System.Net.ServicePoint>이 속성에서 반환 된 인스턴스.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.ConnectionLimit%2A>"
  example:
  - "The following code example retrieves the service point from a request and sets the maximum number of connections to one.  \n  \n [!code-cpp[NCLFtpClient#1](~/add/codesnippet/cpp/p-system.net.ftpwebreque_9_1.cpp)]\n [!code-cs[NCLFtpClient#1](~/add/codesnippet/csharp/p-system.net.ftpwebreque_9_1.cs)]"
  syntax:
    content: public System.Net.ServicePoint ServicePoint { get; }
    return:
      type: System.Net.ServicePoint
      description: "A <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 연결 동작을 사용자 지정 하는 데 사용할 수 있습니다."
  overload: System.Net.FtpWebRequest.ServicePoint*
  exceptions: []
  platform:
  - net462
- uid: System.Net.FtpWebRequest.Timeout
  id: Timeout
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: Timeout
  nameWithType: FtpWebRequest.Timeout
  fullName: System.Net.FtpWebRequest.Timeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "요청 대기 시간 (밀리초)의 수를 가져오거나 설정 합니다."
  remarks: "무한 값을 지정 하려면 제한 시간 속성을 설정 <xref:System.Threading.Timeout.Infinite>(-1).</xref:System.Threading.Timeout.Infinite> 이 설정은 기본값입니다.       제한 시간 (밀리초)를 통한 동기 요청이 수입니다는 <xref:System.Net.FtpWebRequest.GetResponse%2A>메서드 응답 및에 대 한 대기는 <xref:System.Net.FtpWebRequest.GetRequestStream%2A>메서드는 스트림을 기다립니다.</xref:System.Net.FtpWebRequest.GetRequestStream%2A> </xref:System.Net.FtpWebRequest.GetResponse%2A> 리소스 제한 시간 안에 응답 하지 않으면 요청에서 throw 한 <xref:System.Net.WebException> <xref:System.Net.WebException.Status%2A>속성이 <xref:System.Net.WebExceptionStatus>.</xref:System.Net.WebExceptionStatus> 로 설정</xref:System.Net.WebException.Status%2A> </xref:System.Net.WebException>       호출한 후 제한 시간 변경 된 <xref:System.Net.FtpWebRequest.GetRequestStream%2A>, <xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A>, <xref:System.Net.FtpWebRequest.GetResponse%2A>, 또는 <xref:System.Net.FtpWebRequest.BeginGetResponse%2A>메서드를 사용 하면은 <xref:System.InvalidOperationException>예외.</xref:System.InvalidOperationException> </xref:System.Net.FtpWebRequest.BeginGetResponse%2A> </xref:System.Net.FtpWebRequest.GetResponse%2A> </xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A> </xref:System.Net.FtpWebRequest.GetRequestStream%2A>       DNS 도메인 이름 () 쿼리는 최대 15 초 반환할 또는 제한 시간 걸릴 수 있습니다. 요청에는 해상도 필요로 하는 호스트 이름을 포함 하는 경우 제한 시간 값으로 설정 하는 보다 작은 15 초 전에 15 초 이상 걸릴 수 있습니다는 <xref:System.Net.WebException>요청에서 제한 시간을 나타내기 위해 throw 되.</xref:System.Net.WebException>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[NCLFtpClient#23](~/add/codesnippet/cpp/p-system.net.ftpwebreque_3_1.cpp)]\n [!code-cs[NCLFtpClient#23](~/add/codesnippet/csharp/p-system.net.ftpwebreque_3_1.cs)]"
  syntax:
    content: public override int Timeout { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>요청이 시간 초과 전까지 대기 하는 시간 (밀리초)의 수를 포함 하는 값입니다.</xref:System.Int32> 기본값은 <xref:System.Threading.Timeout.Infinite>.</xref:System.Threading.Timeout.Infinite>"
  overload: System.Net.FtpWebRequest.Timeout*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "지정 된 값 보다 작은&0; 이므로 없습니다 <xref:System.Threading.Timeout.Infinite>.</xref:System.Threading.Timeout.Infinite>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이미 진행 중인 요청에 대 한이 속성에 대 한 새 값이 지정 됩니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.UseBinary
  id: UseBinary
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: UseBinary
  nameWithType: FtpWebRequest.UseBinary
  fullName: System.Net.FtpWebRequest.UseBinary
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져오거나는 <xref:System.Boolean>파일 전송에 대 한 데이터 형식을 지정 하는 값입니다.</xref:System.Boolean>"
  remarks: "이미지와 같이 데이터를 이진 보내는 경우이 속성을 설정 `true`합니다. 텍스트를 보내는 경우 속성을 설정 `false`합니다. 지정 `true` 하면는 <xref:System.Net.FtpWebRequest>보내려고는 `&quot;TYPE I&quot;` 서버로 명령을.</xref:System.Net.FtpWebRequest> 지정 `false` 하면는 <xref:System.Net.FtpWebRequest>보내려고는 `&quot;Type A&quot;` 서버로 명령을.</xref:System.Net.FtpWebRequest> FTP 서버에는 이러한 명령은 무시할 수 있습니다.       UseBinary 호출한 후 변경의 <xref:System.Net.FtpWebRequest.GetRequestStream%2A>, <xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A>, <xref:System.Net.FtpWebRequest.GetResponse%2A>, 또는 <xref:System.Net.FtpWebRequest.BeginGetResponse%2A>메서드를 사용 하면 프로그램 <xref:System.InvalidOperationException>예외.</xref:System.InvalidOperationException> </xref:System.Net.FtpWebRequest.BeginGetResponse%2A> </xref:System.Net.FtpWebRequest.GetResponse%2A> </xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A> </xref:System.Net.FtpWebRequest.GetRequestStream%2A>"
  example:
  - "The following code example retrieves and displays property values for a specified <xref:System.Net.FtpWebRequest> object.  \n  \n [!code-cpp[NCLFtpClient#15](~/add/codesnippet/cpp/p-system.net.ftpwebreque_7_1.cpp)]\n [!code-cs[NCLFtpClient#15](~/add/codesnippet/csharp/p-system.net.ftpwebreque_7_1.cs)]"
  syntax:
    content: public bool UseBinary { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>서버에 전송 될 데이터 임을 나타내려면 이진; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 데이터가 텍스트 임을 나타냅니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.FtpWebRequest.UseBinary*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이미 진행 중인 요청에 대 한이 속성에 대 한 새 값이 지정 됩니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.UseDefaultCredentials
  id: UseDefaultCredentials
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: UseDefaultCredentials
  nameWithType: FtpWebRequest.UseDefaultCredentials
  fullName: System.Net.FtpWebRequest.UseDefaultCredentials
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "항상에 <xref:System.NotSupportedException>.</xref:System.NotSupportedException> throw"
  remarks: "UseDefaultCredentials 속성의 다른 구현과 호환성을 위해서만 제공 됩니다는 <xref:System.Net.WebRequest>및 <xref:System.Net.WebResponse>클래스.</xref:System.Net.WebResponse> </xref:System.Net.WebRequest> UseDefaultCredentials 사용할 이유가 없습니다 있습니다."
  syntax:
    content: public override bool UseDefaultCredentials { get; set; }
    return:
      type: System.Boolean
      description: "항상에 <xref:System.NotSupportedException>.</xref:System.NotSupportedException> throw"
  overload: System.Net.FtpWebRequest.UseDefaultCredentials*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "FTP에 대 한 기본 자격 증명 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Net.FtpWebRequest.UsePassive
  id: UsePassive
  parent: System.Net.FtpWebRequest
  langs:
  - csharp
  name: UsePassive
  nameWithType: FtpWebRequest.UsePassive
  fullName: System.Net.FtpWebRequest.UsePassive
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "클라이언트 응용 프로그램의 데이터 전송 프로세스의 동작을 가져오거나 설정 합니다."
  remarks: "UsePassive 속성을 설정 `true` 보냅니다는 &quot;`PASV&quot;` 서버에 명령 합니다. 이 명령은 데이터 포트에서 수신 전송 명령 받는 즉시 시작 하는 것이 아니라 연결을 대기 하는 서버를 요청 합니다.       UsePassive를 사용 하 여 지정 된 동작에 대 한 RFC 959, &quot;파일 전송 프로토콜&quot; 섹션 3.2, &quot;데이터 연결 설정&quot; 및 4.1.2, &quot;전송 매개 변수,&quot; 사용할 수 있는 명령에서 참조 [http://www.rfc-editor.org/](http://www.ietf.org/rfc/rfc959.txt)합니다.       UsePassive 호출한 후 변경의 <xref:System.Net.FtpWebRequest.GetRequestStream%2A>, <xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A>, <xref:System.Net.FtpWebRequest.GetResponse%2A>, 또는 <xref:System.Net.FtpWebRequest.BeginGetResponse%2A>메서드를 사용 하면 프로그램 <xref:System.InvalidOperationException>예외.</xref:System.InvalidOperationException> </xref:System.Net.FtpWebRequest.BeginGetResponse%2A> </xref:System.Net.FtpWebRequest.GetResponse%2A> </xref:System.Net.FtpWebRequest.BeginGetRequestStream%2A> </xref:System.Net.FtpWebRequest.GetRequestStream%2A>       UsePassive로 설정 되어 있으면 `true`, FTP 서버는 파일의 크기를 보낼 수 없습니다 및 다운로드 진행률에서&0;이 항상 가능 합니다. UsePassive로 설정 되어 있으면 `false`, 방화벽에서 경고를 생성 하 고 파일 다운로드를 차단할 수 있습니다."
  example:
  - "The following code example retrieves and displays property values for a specified <xref:System.Net.FtpWebRequest> object.  \n  \n [!code-cpp[NCLFtpClient#6](~/add/codesnippet/cpp/p-system.net.ftpwebreque_10_1.cpp)]\n [!code-cs[NCLFtpClient#6](~/add/codesnippet/csharp/p-system.net.ftpwebreque_10_1.cs)]"
  syntax:
    content: public bool UsePassive { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>프로세스에서 데이터 포트;에 대 한 연결에 대 한 수신 대기 하는 클라이언트 응용 프로그램의 데이터를 전송 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 클라이언트에서 데이터 포트에 대 한 연결을 시작 해야 할 경우. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.FtpWebRequest.UsePassive*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이미 진행 중인 요청에 대 한이 속성에 대 한 새 값이 지정 됩니다."
  platform:
  - net462
references:
- uid: System.Net.WebRequest
  isExternal: false
  name: System.Net.WebRequest
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.WebException
  isExternal: true
  name: System.Net.WebException
- uid: System.Net.ProtocolViolationException
  isExternal: true
  name: System.Net.ProtocolViolationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.FtpWebRequest.Abort
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: Abort()
  nameWithType: FtpWebRequest.Abort()
  fullName: System.Net.FtpWebRequest.Abort()
- uid: System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: BeginGetRequestStream(AsyncCallback,Object)
  nameWithType: FtpWebRequest.BeginGetRequestStream(AsyncCallback,Object)
  fullName: System.Net.FtpWebRequest.BeginGetRequestStream(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: BeginGetResponse(AsyncCallback,Object)
  nameWithType: FtpWebRequest.BeginGetResponse(AsyncCallback,Object)
  fullName: System.Net.FtpWebRequest.BeginGetResponse(AsyncCallback,Object)
- uid: System.Net.FtpWebRequest.ClientCertificates
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: ClientCertificates
  nameWithType: FtpWebRequest.ClientCertificates
  fullName: System.Net.FtpWebRequest.ClientCertificates
- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509CertificateCollection
  nameWithType: X509CertificateCollection
  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection
- uid: System.Net.FtpWebRequest.ConnectionGroupName
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: ConnectionGroupName
  nameWithType: FtpWebRequest.ConnectionGroupName
  fullName: System.Net.FtpWebRequest.ConnectionGroupName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.FtpWebRequest.ContentLength
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: ContentLength
  nameWithType: FtpWebRequest.ContentLength
  fullName: System.Net.FtpWebRequest.ContentLength
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.FtpWebRequest.ContentOffset
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: ContentOffset
  nameWithType: FtpWebRequest.ContentOffset
  fullName: System.Net.FtpWebRequest.ContentOffset
- uid: System.Net.FtpWebRequest.ContentType
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: ContentType
  nameWithType: FtpWebRequest.ContentType
  fullName: System.Net.FtpWebRequest.ContentType
- uid: System.Net.FtpWebRequest.Credentials
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: Credentials
  nameWithType: FtpWebRequest.Credentials
  fullName: System.Net.FtpWebRequest.Credentials
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: true
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Net.FtpWebRequest.DefaultCachePolicy
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: DefaultCachePolicy
  nameWithType: FtpWebRequest.DefaultCachePolicy
  fullName: System.Net.FtpWebRequest.DefaultCachePolicy
- uid: System.Net.Cache.RequestCachePolicy
  parent: System.Net.Cache
  isExternal: false
  name: RequestCachePolicy
  nameWithType: RequestCachePolicy
  fullName: System.Net.Cache.RequestCachePolicy
- uid: System.Net.FtpWebRequest.EnableSsl
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: EnableSsl
  nameWithType: FtpWebRequest.EnableSsl
  fullName: System.Net.FtpWebRequest.EnableSsl
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: EndGetRequestStream(IAsyncResult)
  nameWithType: FtpWebRequest.EndGetRequestStream(IAsyncResult)
  fullName: System.Net.FtpWebRequest.EndGetRequestStream(IAsyncResult)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: EndGetResponse(IAsyncResult)
  nameWithType: FtpWebRequest.EndGetResponse(IAsyncResult)
  fullName: System.Net.FtpWebRequest.EndGetResponse(IAsyncResult)
- uid: System.Net.WebResponse
  parent: System.Net
  isExternal: true
  name: WebResponse
  nameWithType: WebResponse
  fullName: System.Net.WebResponse
- uid: System.Net.FtpWebRequest.GetRequestStream
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: GetRequestStream()
  nameWithType: FtpWebRequest.GetRequestStream()
  fullName: System.Net.FtpWebRequest.GetRequestStream()
- uid: System.Net.FtpWebRequest.GetResponse
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: GetResponse()
  nameWithType: FtpWebRequest.GetResponse()
  fullName: System.Net.FtpWebRequest.GetResponse()
- uid: System.Net.FtpWebRequest.Headers
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: Headers
  nameWithType: FtpWebRequest.Headers
  fullName: System.Net.FtpWebRequest.Headers
- uid: System.Net.WebHeaderCollection
  parent: System.Net
  isExternal: true
  name: WebHeaderCollection
  nameWithType: WebHeaderCollection
  fullName: System.Net.WebHeaderCollection
- uid: System.Net.FtpWebRequest.KeepAlive
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: KeepAlive
  nameWithType: FtpWebRequest.KeepAlive
  fullName: System.Net.FtpWebRequest.KeepAlive
- uid: System.Net.FtpWebRequest.Method
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: Method
  nameWithType: FtpWebRequest.Method
  fullName: System.Net.FtpWebRequest.Method
- uid: System.Net.FtpWebRequest.PreAuthenticate
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: PreAuthenticate
  nameWithType: FtpWebRequest.PreAuthenticate
  fullName: System.Net.FtpWebRequest.PreAuthenticate
- uid: System.Net.FtpWebRequest.Proxy
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: Proxy
  nameWithType: FtpWebRequest.Proxy
  fullName: System.Net.FtpWebRequest.Proxy
- uid: System.Net.IWebProxy
  parent: System.Net
  isExternal: true
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Net.FtpWebRequest.ReadWriteTimeout
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: ReadWriteTimeout
  nameWithType: FtpWebRequest.ReadWriteTimeout
  fullName: System.Net.FtpWebRequest.ReadWriteTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.FtpWebRequest.RenameTo
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: RenameTo
  nameWithType: FtpWebRequest.RenameTo
  fullName: System.Net.FtpWebRequest.RenameTo
- uid: System.Net.FtpWebRequest.RequestUri
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: RequestUri
  nameWithType: FtpWebRequest.RequestUri
  fullName: System.Net.FtpWebRequest.RequestUri
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.FtpWebRequest.ServicePoint
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: ServicePoint
  nameWithType: FtpWebRequest.ServicePoint
  fullName: System.Net.FtpWebRequest.ServicePoint
- uid: System.Net.ServicePoint
  parent: System.Net
  isExternal: false
  name: ServicePoint
  nameWithType: ServicePoint
  fullName: System.Net.ServicePoint
- uid: System.Net.FtpWebRequest.Timeout
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: Timeout
  nameWithType: FtpWebRequest.Timeout
  fullName: System.Net.FtpWebRequest.Timeout
- uid: System.Net.FtpWebRequest.UseBinary
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: UseBinary
  nameWithType: FtpWebRequest.UseBinary
  fullName: System.Net.FtpWebRequest.UseBinary
- uid: System.Net.FtpWebRequest.UseDefaultCredentials
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: FtpWebRequest.UseDefaultCredentials
  fullName: System.Net.FtpWebRequest.UseDefaultCredentials
- uid: System.Net.FtpWebRequest.UsePassive
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: UsePassive
  nameWithType: FtpWebRequest.UsePassive
  fullName: System.Net.FtpWebRequest.UsePassive
- uid: System.Net.FtpWebRequest.Abort*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: Abort
  nameWithType: FtpWebRequest.Abort
- uid: System.Net.FtpWebRequest.BeginGetRequestStream*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: BeginGetRequestStream
  nameWithType: FtpWebRequest.BeginGetRequestStream
- uid: System.Net.FtpWebRequest.BeginGetResponse*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: BeginGetResponse
  nameWithType: FtpWebRequest.BeginGetResponse
- uid: System.Net.FtpWebRequest.ClientCertificates*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: ClientCertificates
  nameWithType: FtpWebRequest.ClientCertificates
- uid: System.Net.FtpWebRequest.ConnectionGroupName*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: ConnectionGroupName
  nameWithType: FtpWebRequest.ConnectionGroupName
- uid: System.Net.FtpWebRequest.ContentLength*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: ContentLength
  nameWithType: FtpWebRequest.ContentLength
- uid: System.Net.FtpWebRequest.ContentOffset*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: ContentOffset
  nameWithType: FtpWebRequest.ContentOffset
- uid: System.Net.FtpWebRequest.ContentType*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: ContentType
  nameWithType: FtpWebRequest.ContentType
- uid: System.Net.FtpWebRequest.Credentials*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: Credentials
  nameWithType: FtpWebRequest.Credentials
- uid: System.Net.FtpWebRequest.DefaultCachePolicy*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: DefaultCachePolicy
  nameWithType: FtpWebRequest.DefaultCachePolicy
- uid: System.Net.FtpWebRequest.EnableSsl*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: EnableSsl
  nameWithType: FtpWebRequest.EnableSsl
- uid: System.Net.FtpWebRequest.EndGetRequestStream*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: EndGetRequestStream
  nameWithType: FtpWebRequest.EndGetRequestStream
- uid: System.Net.FtpWebRequest.EndGetResponse*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: EndGetResponse
  nameWithType: FtpWebRequest.EndGetResponse
- uid: System.Net.FtpWebRequest.GetRequestStream*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: GetRequestStream
  nameWithType: FtpWebRequest.GetRequestStream
- uid: System.Net.FtpWebRequest.GetResponse*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: GetResponse
  nameWithType: FtpWebRequest.GetResponse
- uid: System.Net.FtpWebRequest.Headers*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: Headers
  nameWithType: FtpWebRequest.Headers
- uid: System.Net.FtpWebRequest.KeepAlive*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: KeepAlive
  nameWithType: FtpWebRequest.KeepAlive
- uid: System.Net.FtpWebRequest.Method*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: Method
  nameWithType: FtpWebRequest.Method
- uid: System.Net.FtpWebRequest.PreAuthenticate*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: PreAuthenticate
  nameWithType: FtpWebRequest.PreAuthenticate
- uid: System.Net.FtpWebRequest.Proxy*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: Proxy
  nameWithType: FtpWebRequest.Proxy
- uid: System.Net.FtpWebRequest.ReadWriteTimeout*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: ReadWriteTimeout
  nameWithType: FtpWebRequest.ReadWriteTimeout
- uid: System.Net.FtpWebRequest.RenameTo*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: RenameTo
  nameWithType: FtpWebRequest.RenameTo
- uid: System.Net.FtpWebRequest.RequestUri*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: RequestUri
  nameWithType: FtpWebRequest.RequestUri
- uid: System.Net.FtpWebRequest.ServicePoint*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: ServicePoint
  nameWithType: FtpWebRequest.ServicePoint
- uid: System.Net.FtpWebRequest.Timeout*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: Timeout
  nameWithType: FtpWebRequest.Timeout
- uid: System.Net.FtpWebRequest.UseBinary*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: UseBinary
  nameWithType: FtpWebRequest.UseBinary
- uid: System.Net.FtpWebRequest.UseDefaultCredentials*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: FtpWebRequest.UseDefaultCredentials
- uid: System.Net.FtpWebRequest.UsePassive*
  parent: System.Net.FtpWebRequest
  isExternal: false
  name: UsePassive
  nameWithType: FtpWebRequest.UsePassive
