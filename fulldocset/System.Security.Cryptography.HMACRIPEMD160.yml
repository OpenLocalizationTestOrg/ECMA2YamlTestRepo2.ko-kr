### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACRIPEMD160
  id: HMACRIPEMD160
  children:
  - System.Security.Cryptography.HMACRIPEMD160.#ctor
  - System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  langs:
  - csharp
  name: HMACRIPEMD160
  nameWithType: HMACRIPEMD160
  fullName: System.Security.Cryptography.HMACRIPEMD160
  type: Class
  summary: "HMAC 해시 기반 메시지 인증 코드 ()를 사용 하 여 계산 된 <xref href=&quot;System.Security.Cryptography.RIPEMD160&quot;> </xref> 됩니다."
  remarks: "HMACRIPEMD160에 ripemd-160 해시 함수에서 생성 된 및로 HMAC 해시 기반 메시지 인증 코드 () 사용 되는 키 지정된 해시 알고리즘의 형식입니다. HMAC 프로세스는 비밀 키를 메시지 데이터와 혼합, 해시 함수가 그 결과, 비밀 키와 해당 해시 값을 다시, 혼합 및 해시 함수를 두 번 적용 합니다. 출력 해시는 160 비트 길이입니다.       HMAC는 발신자와 수신자 공유 비밀 키를 보안 되지 않은 채널을 통해 보낸 메시지가 훼손 되었는지 여부를 확인 데 사용할 수 있습니다. 보낸 사람에 게는 원본 데이터에 대 한 해시 값을 계산 하 고 단일 메시지로 원래 데이터와 해시 값을 보냅니다. 수신자는 받은 메시지에 대해 해시 값을 다시 계산 하 고 계산된 HMAC 전송 된 HMAC 일치 하는지 확인 합니다.       비밀 키의 지식이 없어도 메시지를 변경 하 고 올바른 해시 값을 다시 만들기 때문에 데이터 나 해시 값을 변경한 경우 불일치가 발생 합니다. 따라서 원래과 계산 된 해시 값이 일치 하는 경우에 메시지가 인증 됩니다.       HMACRIPEMD160 모든 크기의 키를 받아서 해시 시퀀스 160 비트를 생성 합니다.       RIPEMD 해시 알고리즘 및 해당 승계인 유럽 익숙한 프로젝트에서 개발 되었습니다. 원래 RIPEMD 알고리즘 나중에 강화 된 및 ripemd-160 이름을 바꿀 MD4 및 m d&5;를 교체 하도록 설계 되었습니다. Ripemd-160 해시 알고리즘에는 160 비트 해시 값을 생성 합니다. 알고리즘의 디자이너에 공용 도메인 것 있을 수 있습니다."
  example:
  - "The following example shows how to sign a file by using the HMACRIPEMD160 object and then how to verify the file.  \n  \n [!code-vb[HMACRIPEMD160#1](~/add/codesnippet/visualbasic/t-system.security.crypto_102_1.vb)]\n [!code-cpp[HMACRIPEMD160#1](~/add/codesnippet/cpp/t-system.security.crypto_102_1.cpp)]\n [!code-cs[HMACRIPEMD160#1](~/add/codesnippet/csharp/t-system.security.crypto_102_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACRIPEMD160 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACRIPEMD160
  langs:
  - csharp
  name: HMACRIPEMD160()
  nameWithType: HMACRIPEMD160.HMACRIPEMD160()
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;> </xref> 임의로 생성 된 64 비트 키를 사용 하 여 클래스입니다."
  remarks: "<xref:System.Security.Cryptography.HMACRIPEMD160>ripemd-160 해시 함수에서 생성 된 및로 HMAC 해시 기반 메시지 인증 코드 () 사용 되는 키 지정된 해시 알고리즘 유형이입니다.</xref:System.Security.Cryptography.HMACRIPEMD160> HMAC 프로세스는 비밀 키를 메시지 데이터와 혼합, 해시 함수가 그 결과, 비밀 키와 해당 해시 값을 다시, 혼합 및 해시 함수를 두 번 적용 합니다. 출력 해시는 160 바이트의 길이입니다.       이 생성자는 64 바이트, 임의로 생성 된 키를 사용합니다."
  syntax:
    content: public HMACRIPEMD160 ();
    parameters: []
  overload: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACRIPEMD160
  langs:
  - csharp
  name: HMACRIPEMD160(Byte[])
  nameWithType: HMACRIPEMD160.HMACRIPEMD160(Byte[])
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;> </xref> 지정 된 키 데이터를 사용 하 여 클래스입니다."
  remarks: "<xref:System.Security.Cryptography.HMACRIPEMD160>ripemd-160 해시 함수에서 생성 된 및로 HMAC 해시 기반 메시지 인증 코드 () 사용 되는 키 지정된 해시 알고리즘 유형이입니다.</xref:System.Security.Cryptography.HMACRIPEMD160> HMAC 프로세스는 비밀 키를 메시지 데이터와 혼합, 해시 함수가 그 결과, 비밀 키와 해당 해시 값을 다시, 혼합 및 해시 함수를 두 번 적용 합니다. 출력 해시는 160 바이트의 길이입니다."
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.
  syntax:
    content: public HMACRIPEMD160 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "에 대 한 비밀 키 <xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;> </xref> 암호화 합니다. 키 길이 가능 합니다. 하지만 (사용 하 여 s h A-1) 해시 되기 64 바이트를 초과 하는 경우 64 비트 키를 파생 합니다. 따라서 비밀 키의 권장된 크기는 64 바이트입니다."
  overload: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160()
  nameWithType: HMACRIPEMD160.HMACRIPEMD160()
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160()
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160(Byte[])
  nameWithType: HMACRIPEMD160.HMACRIPEMD160(Byte[])
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160
  nameWithType: HMACRIPEMD160.HMACRIPEMD160
