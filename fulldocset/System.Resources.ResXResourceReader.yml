### YamlMime:ManagedReference
items:
- uid: System.Resources.ResXResourceReader
  id: ResXResourceReader
  children:
  - System.Resources.ResXResourceReader.#ctor(System.IO.Stream)
  - System.Resources.ResXResourceReader.#ctor(System.IO.TextReader)
  - System.Resources.ResXResourceReader.#ctor(System.String)
  - System.Resources.ResXResourceReader.#ctor(System.IO.Stream,System.ComponentModel.Design.ITypeResolutionService)
  - System.Resources.ResXResourceReader.#ctor(System.IO.Stream,System.Reflection.AssemblyName[])
  - System.Resources.ResXResourceReader.#ctor(System.IO.TextReader,System.ComponentModel.Design.ITypeResolutionService)
  - System.Resources.ResXResourceReader.#ctor(System.IO.TextReader,System.Reflection.AssemblyName[])
  - System.Resources.ResXResourceReader.#ctor(System.String,System.ComponentModel.Design.ITypeResolutionService)
  - System.Resources.ResXResourceReader.#ctor(System.String,System.Reflection.AssemblyName[])
  - System.Resources.ResXResourceReader.BasePath
  - System.Resources.ResXResourceReader.Close
  - System.Resources.ResXResourceReader.Dispose(System.Boolean)
  - System.Resources.ResXResourceReader.Finalize
  - System.Resources.ResXResourceReader.FromFileContents(System.String)
  - System.Resources.ResXResourceReader.FromFileContents(System.String,System.ComponentModel.Design.ITypeResolutionService)
  - System.Resources.ResXResourceReader.FromFileContents(System.String,System.Reflection.AssemblyName[])
  - System.Resources.ResXResourceReader.GetEnumerator
  - System.Resources.ResXResourceReader.GetMetadataEnumerator
  - System.Resources.ResXResourceReader.System#Collections#IEnumerable#GetEnumerator
  - System.Resources.ResXResourceReader.System#IDisposable#Dispose
  - System.Resources.ResXResourceReader.UseResXDataNodes
  langs:
  - csharp
  name: ResXResourceReader
  nameWithType: ResXResourceReader
  fullName: System.Resources.ResXResourceReader
  type: Class
  summary: "XML 리소스 (.resx) 파일 및 스트림을 열거 하 고 순차 리소스 이름 / 값 쌍을 읽습니다."
  remarks: "ResXResourceReader 클래스의 기본 구현을 제공는 <xref:System.Resources.IResourceReader>XML 형식의 리소스 정보를 읽는 인터페이스입니다.</xref:System.Resources.IResourceReader> 리소스에서 정보를 읽는 이진 리소스 형식, <xref:System.Resources.ResourceReader>클래스</xref:System.Resources.ResourceReader> 를 사용 하 여       ResXResourceReader 클래스를 사용 하 여 사전 열거자를 이동 하 여.resx 파일에서 리소스를 열거할 (<xref:System.Collections.IDictionaryEnumerator>)에서 반환 하는 <xref:System.Resources.ResXResourceReader.GetEnumerator%2A>메서드.</xref:System.Resources.ResXResourceReader.GetEnumerator%2A> </xref:System.Collections.IDictionaryEnumerator> 제공 하는 메서드를 호출 하면 <xref:System.Collections.IDictionaryEnumerator>다음 리소스를 이동 하 고 이름 및.resx 파일의 각 리소스의 값을 읽을.</xref:System.Collections.IDictionaryEnumerator>      > [!NOTE] > The ResXResourceReader 클래스는 두 명의 열거자를 제공 합니다. <xref:System.Resources.ResXResourceReader.GetEnumerator%2A?displayProperty=fullName>메서드가 반환 되는 <xref:System.Collections.IDictionaryEnumerator>않으면이 메서드를 사용 하 여 리소스를 열거 하는 것이 좋습니다.</xref:System.Collections.IDictionaryEnumerator> </xref:System.Resources.ResXResourceReader.GetEnumerator%2A?displayProperty=fullName> <xref:System.Resources.ResXResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=fullName>메서드는 명시적 인터페이스 구현을 반환 하는 <xref:System.Collections.IEnumerator>; 개체의 사용 권장 하지는 않습니다.</xref:System.Collections.IEnumerator> </xref:System.Resources.ResXResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=fullName>       다음 예제에서는 <xref:System.Resources.ResXResourceReader.GetEnumerator%2A>메서드는 <xref:System.Collections.IDictionaryEnumerator>.resx 파일에 리소스를 열거 하는 데 사용 되는 개체입니다.</xref:System.Collections.IDictionaryEnumerator> </xref:System.Resources.ResXResourceReader.GetEnumerator%2A> 예제에 포함 되어는 `CreateResourceFile` 루틴을 필요한 리소스 파일을 만듭니다.       [!code-cs[System.Resources.ResXResourceReader.Class#1](~/add/codesnippet/csharp/t-system.resources.resxr_1_1.cs)][!code-vb[System.Resources.ResXResourceReader.Class#1](~/add/codesnippet/visualbasic/t-system.resources.resxr_1_1.vb) ] 경우는 <xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>속성은 `true`의 값은 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName>속성은 한 <xref:System.Resources.ResXDataNode>리소스 값이 아닌 개체.</xref:System.Resources.ResXDataNode> </xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> </xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>   이렇게 하면 리소스 항목의 주석에서 사용할 수는 <xref:System.Resources.ResXDataNode.Comment%2A?displayProperty=fullName>속성.</xref:System.Resources.ResXDataNode.Comment%2A?displayProperty=fullName> 다음 예제에서는 <xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>속성을 `true` .resx 파일의 리소스를 열거 하 고 [!code-cs [System.Resources.ResXResourceReader.Class#2](~/add/codesnippet/csharp/t-system.resources.resxr_1_2.cs)][!code-vb[System.Resources.ResXResourceReader.Class#2](~/add/codesnippet/visualbasic/t-system.resources.resxr_1_2.vb) ] 경우 <xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>은 `true`, <xref:System.Resources.ResXDataNode>열거형에서 항목 중 하나를 지정할 수 있습니다:-데이터와 함께 리소스인.</xref:System.Resources.ResXDataNode> </xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>   </xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A> 이 경우에 <xref:System.Resources.ResXDataNode.FileRef%2A?displayProperty=fullName>속성은 `null`.</xref:System.Resources.ResXDataNode.FileRef%2A?displayProperty=fullName>      -리소스 데이터를 포함 하는 파일의 이름과 함께 명명 된 리소스입니다. 이 경우는 <xref:System.Resources.ResXDataNode.FileRef%2A?displayProperty=fullName>속성에서 반환 된 <xref:System.Resources.ResXFileRef>해당 파일 이름을 포함 하는 리소스에 대 한 정보를 제공 하는 개체.</xref:System.Resources.ResXFileRef> </xref:System.Resources.ResXDataNode.FileRef%2A?displayProperty=fullName> <xref:System.Resources.ResXResourceReader.BasePath%2A>상대 파일 경로 대 한 참조 점을 제공 하는 속성</xref:System.Resources.ResXResourceReader.BasePath%2A> 을 항상 설정 해야 상대 파일 이름을 사용 하는 경우       인스턴스화할 수 해당 리소스를 열거 하는 것이 아니라.resx 파일에서 명명 된 리소스를 검색 하려는 경우는 <xref:System.Resources.ResXResourceSet>개체와 호출 해당 `GetString` 및 `GetObject` 메서드.</xref:System.Resources.ResXResourceSet>      > [!NOTE] > The ResXResourceReader 클래스에는 링크 요청 및 모든 멤버에 적용 되는 클래스 수준에서 상속 요청이 포함 되어 있습니다. A <xref:System.Security.SecurityException>직접 실행 호출자 또는 파생된 클래스 중 하나에 완전 신뢰 권한이 없는 경우 예외가 throw 됩니다.</xref:System.Security.SecurityException>"
  example:
  - "The following example demonstrates how to use a ResXResourceReader to iterate through the resources in a .resx file. First, the ResXResourceReader`rsxr` is created for the file `items.resx`. Next, the <xref:System.Resources.ResXResourceReader.GetEnumerator%2A> method is used to create an <xref:System.Collections.IDictionaryEnumerator> to iterate through the resources and display the contents to the console.  \n  \n [!code-cpp[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/cpp/t-system.resources.resxr_1_3.cpp)]\n [!code-cs[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/csharp/t-system.resources.resxr_1_3.cs)]\n [!code-vb[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/visualbasic/t-system.resources.resxr_1_3.vb)]"
  syntax:
    content: 'public class ResXResourceReader : System.Resources.IResourceReader'
  inheritance:
  - System.Object
  implements:
  - System.Resources.IResourceReader
  inheritedMembers: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(Stream)
  nameWithType: ResXResourceReader.ResXResourceReader(Stream)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(Stream)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 지정된 스트림에 대 한 클래스입니다."
  remarks: >-
    > [!NOTE]

    >  The <xref:System.Resources.ResXResourceReader.Dispose%2A> and <xref:System.Resources.ResXResourceReader.Close%2A> methods do not close the stream you specify in this constructor.
  syntax:
    content: public ResXResourceReader (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "리소스를 포함 하는 입력된 스트림."
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.TextReader)
  id: '#ctor(System.IO.TextReader)'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(TextReader)
  nameWithType: ResXResourceReader.ResXResourceReader(TextReader)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(TextReader)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> <xref:System.IO.TextReader>.</xref:System.IO.TextReader> 지정된에 대 한 클래스"
  syntax:
    content: public ResXResourceReader (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "리소스를 포함 하는 텍스트 입력된 스트림."
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(String)
  nameWithType: ResXResourceReader.ResXResourceReader(String)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(String)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 지정된 된 리소스 파일에 대 한 클래스입니다."
  remarks: ''
  example:
  - "The following example creates a new instance of the <xref:System.Resources.ResXResourceReader> class for the specified file, iterates through the resources of the file, and displays the contents to the console.  \n  \n [!code-cpp[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/cpp/m-system.resources.resxr_1_1.cpp)]\n [!code-cs[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/csharp/m-system.resources.resxr_1_1.cs)]\n [!code-vb[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/visualbasic/m-system.resources.resxr_1_1.vb)]"
  syntax:
    content: public ResXResourceReader (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "읽을 리소스 파일의 경로입니다."
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.Stream,System.ComponentModel.Design.ITypeResolutionService)
  id: '#ctor(System.IO.Stream,System.ComponentModel.Design.ITypeResolutionService)'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(Stream,ITypeResolutionService)
  nameWithType: ResXResourceReader.ResXResourceReader(Stream,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(Stream,ITypeResolutionService)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 클래스 입력 스트림과 형식 확인 서비스를 사용 합니다."
  syntax:
    content: public ResXResourceReader (System.IO.Stream stream, System.ComponentModel.Design.ITypeResolutionService typeResolver);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "리소스를 포함 하는 입력된 스트림."
    - id: typeResolver
      type: System.ComponentModel.Design.ITypeResolutionService
      description: "형식 리소스에 지정 된 이름을 확인 하는 개체입니다."
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.Stream,System.Reflection.AssemblyName[])
  id: '#ctor(System.IO.Stream,System.Reflection.AssemblyName[])'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(Stream,AssemblyName[])
  nameWithType: ResXResourceReader.ResXResourceReader(Stream,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(Stream,AssemblyName[])
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 스트림과 어셈블리 이름 배열을 사용 하 여 클래스입니다."
  syntax:
    content: public ResXResourceReader (System.IO.Stream stream, System.Reflection.AssemblyName[] assemblyNames);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "리소스를 포함 하는 입력된 스트림."
    - id: assemblyNames
      type: System.Reflection.AssemblyName[]
      description: "배열을 <xref:System.Reflection.AssemblyName>하나 이상의 어셈블리를 지정 하는 개체입니다.</xref:System.Reflection.AssemblyName> 어셈블리는 리소스의 형식 이름을 실제 형식으로 확인 하는 데 사용 됩니다."
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.TextReader,System.ComponentModel.Design.ITypeResolutionService)
  id: '#ctor(System.IO.TextReader,System.ComponentModel.Design.ITypeResolutionService)'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(TextReader,ITypeResolutionService)
  nameWithType: ResXResourceReader.ResXResourceReader(TextReader,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(TextReader,ITypeResolutionService)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 클래스 텍스트 스트림 판독기와 형식 확인 서비스를 사용 합니다."
  syntax:
    content: public ResXResourceReader (System.IO.TextReader reader, System.ComponentModel.Design.ITypeResolutionService typeResolver);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "리소스를 포함 하는 텍스트 스트림 판독기입니다."
    - id: typeResolver
      type: System.ComponentModel.Design.ITypeResolutionService
      description: "형식 리소스에 지정 된 이름을 확인 하는 개체입니다."
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.TextReader,System.Reflection.AssemblyName[])
  id: '#ctor(System.IO.TextReader,System.Reflection.AssemblyName[])'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(TextReader,AssemblyName[])
  nameWithType: ResXResourceReader.ResXResourceReader(TextReader,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(TextReader,AssemblyName[])
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 클래스 사용는 <xref:System.IO.TextReader>개체 및 어셈블리 이름의 배열입니다.</xref:System.IO.TextReader>"
  syntax:
    content: public ResXResourceReader (System.IO.TextReader reader, System.Reflection.AssemblyName[] assemblyNames);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "텍스트의 스트림에서 리소스를 읽는 데 사용 되는 개체입니다."
    - id: assemblyNames
      type: System.Reflection.AssemblyName[]
      description: "배열을 <xref:System.Reflection.AssemblyName>하나 이상의 어셈블리를 지정 하는 개체입니다.</xref:System.Reflection.AssemblyName> 어셈블리는 리소스의 형식 이름을 실제 형식으로 확인 하는 데 사용 됩니다."
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.String,System.ComponentModel.Design.ITypeResolutionService)
  id: '#ctor(System.String,System.ComponentModel.Design.ITypeResolutionService)'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(String,ITypeResolutionService)
  nameWithType: ResXResourceReader.ResXResourceReader(String,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(String,ITypeResolutionService)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 클래스 파일 이름과 형식 확인 서비스를 사용 합니다."
  syntax:
    content: public ResXResourceReader (string fileName, System.ComponentModel.Design.ITypeResolutionService typeResolver);
    parameters:
    - id: fileName
      type: System.String
      description: "리소스를 포함 하는 XML 리소스 파일의 이름입니다."
    - id: typeResolver
      type: System.ComponentModel.Design.ITypeResolutionService
      description: "형식 리소스에 지정 된 이름을 확인 하는 개체입니다."
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.String,System.Reflection.AssemblyName[])
  id: '#ctor(System.String,System.Reflection.AssemblyName[])'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(String,AssemblyName[])
  nameWithType: ResXResourceReader.ResXResourceReader(String,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(String,AssemblyName[])
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 클래스 XML 리소스 파일 이름 및 어셈블리 이름 배열을 사용 합니다."
  syntax:
    content: public ResXResourceReader (string fileName, System.Reflection.AssemblyName[] assemblyNames);
    parameters:
    - id: fileName
      type: System.String
      description: "리소스를 포함 하는 XML 리소스 파일의 이름입니다."
    - id: assemblyNames
      type: System.Reflection.AssemblyName[]
      description: "배열을 <xref:System.Reflection.AssemblyName>하나 이상의 어셈블리를 지정 하는 개체입니다.</xref:System.Reflection.AssemblyName> 어셈블리는 리소스의 형식 이름을 실제 형식으로 확인 하는 데 사용 됩니다."
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.BasePath
  id: BasePath
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: BasePath
  nameWithType: ResXResourceReader.BasePath
  fullName: System.Resources.ResXResourceReader.BasePath
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "에 지정 된 상대 파일 경로 대 한 기본 경로 가져오거나 설정 합니다.는 <xref href=&quot;System.Resources.ResXFileRef&quot;> </xref> 개체입니다."
  remarks: "BasePath 속성에 할당 된 상대 파일 경로 참조를 확인을 사용 하 여 <xref:System.Resources.ResXFileRef.FileName%2A>속성 <xref:System.Resources.ResXFileRef>개체.</xref:System.Resources.ResXFileRef> </xref:System.Resources.ResXFileRef.FileName%2A>  기본적으로 해당 값은 <xref:System.String.Empty?displayProperty=fullName>에서 반환 되 고 현재 디렉터리에 대 한 관계에서 상대 파일 경로 참조를 확인 하 고는 <xref:System.Environment.CurrentDirectory%2A?displayProperty=fullName>속성.</xref:System.Environment.CurrentDirectory%2A?displayProperty=fullName> </xref:System.String.Empty?displayProperty=fullName> 리소스 열거를 시작 하기 전에이 속성을 설정 해야 합니다."
  example:
  - "The following example creates an XML resource file that contains images of dog breeds, and also creates a string resource that specifies the application that created the resource. <xref:System.Resources.ResXFileRef> objects are used to store the path to the images rather than storing the binary images themselves in the resource file. The example sets the BasePath property so that the relative file paths in the images' file names are interpreted as subdirectories of a directory named C:\\data\\\\.  \n  \n [!code-vb[System.Resources.ResXResourceReader.BasePath#1](~/add/codesnippet/visualbasic/p-system.resources.resxr_1_1.vb)]\n [!code-cs[System.Resources.ResXResourceReader.BasePath#1](~/add/codesnippet/csharp/p-system.resources.resxr_1_1.cs)]  \n  \n Note that you must add a reference to System.Drawing.dll to compile the project successfully. The example also requires that the necessary images exist in a directory named C:\\data\\images\\\\."
  syntax:
    content: public string BasePath { get; set; }
    return:
      type: System.String
      description: "경로, 앞에 추가 하는 경우 상대 파일 경로에 지정 된 한 <xref href=&quot;System.Resources.ResXFileRef&quot;> </xref> 개체, 절대 경로를 리소스 파일을 생성 합니다."
  overload: System.Resources.ResXResourceReader.BasePath*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "집합 작업에서 XML 리소스 파일에 아직 액세스 및 사용 하기 때문에 값을 지정할 수 없습니다."
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.Close
  id: Close
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: Close()
  nameWithType: ResXResourceReader.Close()
  fullName: System.Resources.ResXResourceReader.Close()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref>합니다."
  remarks: "닫기 사용을 사용 하는 리소스 호출에서 <xref:System.Resources.ResXResourceReader>다른 용도에 다시 할당 됩니다.</xref:System.Resources.ResXResourceReader> 닫기에 대 한 자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example displays the resources of a file to the console, and then uses the Close method to shut down the reader and to make its resources available for other processes.  \n  \n [!code-cpp[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/cpp/m-system.resources.resxr_2_1.cpp)]\n [!code-cs[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/csharp/m-system.resources.resxr_2_1.cs)]\n [!code-vb[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/visualbasic/m-system.resources.resxr_2_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Resources.ResXResourceReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ResXResourceReader.Dispose(Boolean)
  fullName: System.Resources.ResXResourceReader.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드 중 하나에서 호출할 수 있습니다는 <xref:System.Resources.ResXResourceReader.System%23IDisposable%23Dispose%2A>메서드 또는 <xref:System.Object.Finalize%2A?displayProperty=fullName>메서드.</xref:System.Object.Finalize%2A?displayProperty=fullName> </xref:System.Resources.ResXResourceReader.System%23IDisposable%23Dispose%2A> <xref:System.Resources.ResXResourceReader.System%23IDisposable%23Dispose%2A>이 메서드를 호출는 `disposing` 매개 변수 설정 `true`합니다.</xref:System.Resources.ResXResourceReader.System%23IDisposable%23Dispose%2A> <xref:System.Object.Finalize%2A>이 메서드를 호출 `disposing` 로 설정 `false`합니다.</xref:System.Object.Finalize%2A>       경우는 `disposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Resources.ResXResourceReader>참조.</xref:System.Resources.ResXResourceReader> 이 메서드 호출에서 `Dispose` 각 참조 된 개체의 메서드."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Resources.ResXResourceReader.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.Finalize
  id: Finalize
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: Finalize()
  nameWithType: ResXResourceReader.Finalize()
  fullName: System.Resources.ResXResourceReader.Finalize()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "이 멤버는 재정의 <xref:System.Object.Finalize*>메서드.</xref:System.Object.Finalize*>"
  syntax:
    content: ~ResXResourceReader ();
    parameters: []
  overload: System.Resources.ResXResourceReader.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.FromFileContents(System.String)
  id: FromFileContents(System.String)
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: FromFileContents(String)
  nameWithType: ResXResourceReader.FromFileContents(String)
  fullName: System.Resources.ResXResourceReader.FromFileContents(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "새 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 개체 내용이 XML 리소스 파일 형식인 문자열을 읽도록 초기화 합니다."
  syntax:
    content: public static System.Resources.ResXResourceReader FromFileContents (string fileContents);
    parameters:
    - id: fileContents
      type: System.String
      description: "XML 리소스 형식 정보를 포함 하는 문자열입니다."
    return:
      type: System.Resources.ResXResourceReader
      description: "리소스를 읽는 하는 개체는 <code> fileContents </code> 문자열입니다."
  overload: System.Resources.ResXResourceReader.FromFileContents*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.FromFileContents(System.String,System.ComponentModel.Design.ITypeResolutionService)
  id: FromFileContents(System.String,System.ComponentModel.Design.ITypeResolutionService)
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: FromFileContents(String,ITypeResolutionService)
  nameWithType: ResXResourceReader.FromFileContents(String,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.FromFileContents(String,ITypeResolutionService)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "새로 만듭니다. <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 개체를 초기화 콘텐츠가 XML 리소스 파일의 형태로 문자열을 읽고 사용 하는 <xref href=&quot;System.ComponentModel.Design.ITypeResolutionService&quot;> </xref> 개체는 리소스에 지정 된 형식 이름을 확인 하도록 합니다."
  syntax:
    content: public static System.Resources.ResXResourceReader FromFileContents (string fileContents, System.ComponentModel.Design.ITypeResolutionService typeResolver);
    parameters:
    - id: fileContents
      type: System.String
      description: "XML 리소스 형식 정보를 포함 하는 문자열입니다."
    - id: typeResolver
      type: System.ComponentModel.Design.ITypeResolutionService
      description: "형식 리소스에 지정 된 이름을 확인 하는 개체입니다."
    return:
      type: System.Resources.ResXResourceReader
      description: "리소스를 읽는 하는 개체는 <code> fileContents </code> 문자열입니다."
  overload: System.Resources.ResXResourceReader.FromFileContents*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.FromFileContents(System.String,System.Reflection.AssemblyName[])
  id: FromFileContents(System.String,System.Reflection.AssemblyName[])
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: FromFileContents(String,AssemblyName[])
  nameWithType: ResXResourceReader.FromFileContents(String,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.FromFileContents(String,AssemblyName[])
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "새 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 개체 및 콘텐츠가 XML 리소스 파일의 형태로 문자열을 읽고 하 고 배열을 사용 하 여 초기화 합니다 <xref:System.Reflection.AssemblyName>개체는 리소스에 지정 된 형식 이름을 확인할 수 있습니다.</xref:System.Reflection.AssemblyName>"
  syntax:
    content: public static System.Resources.ResXResourceReader FromFileContents (string fileContents, System.Reflection.AssemblyName[] assemblyNames);
    parameters:
    - id: fileContents
      type: System.String
      description: "콘텐츠가 XML 리소스 파일의 형태로 문자열."
    - id: assemblyNames
      type: System.Reflection.AssemblyName[]
      description: "배열을 <xref:System.Reflection.AssemblyName>하나 이상의 어셈블리를 지정 하는 개체입니다.</xref:System.Reflection.AssemblyName> 어셈블리는 리소스의 형식 이름을 실제 형식으로 확인 하는 데 사용 됩니다."
    return:
      type: System.Resources.ResXResourceReader
      description: "리소스를 읽는 하는 개체는 <code> fileContents </code> 문자열입니다."
  overload: System.Resources.ResXResourceReader.FromFileContents*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.GetEnumerator
  id: GetEnumerator
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ResXResourceReader.GetEnumerator()
  fullName: System.Resources.ResXResourceReader.GetEnumerator()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "현재는 열거자를 반환 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 개체입니다."
  remarks: "XML 리소스 (.resx) 스트림 또는 관련 된 현재 문자열에서 이름/값 쌍을 검색 하는 GetEnumerator 메서드가 <xref:System.Resources.ResXResourceReader>개체입니다.</xref:System.Resources.ResXResourceReader> 그러나 경우는 <xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>속성이 `true` 리소스 항목으로 검색 됩니다 GetEnumerator를 호출 하기 전에 <xref:System.Resources.ResXDataNode>개체.</xref:System.Resources.ResXDataNode> </xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A> 이 경우 모든 리소스 노드 유형에 관계 없이 반환 됩니다."
  example:
  - "The following example uses the GetEnumerator method to obtain an <xref:System.Collections.IDictionaryEnumerator> object that is used to enumerate the resources in a .resx file. The example includes a `CreateResourceFile` routine that creates the necessary resource file.  \n  \n [!code-cs[System.Resources.ResXResourceReader.Class#1](~/add/codesnippet/csharp/m-system.resources.resxr_0_1.cs)]\n [!code-vb[System.Resources.ResXResourceReader.Class#1](~/add/codesnippet/visualbasic/m-system.resources.resxr_0_1.vb)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "현재에 대 한 열거자 <xref href=&quot;System.Resources.ResourceReader&quot;> </xref> 개체입니다."
  overload: System.Resources.ResXResourceReader.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.GetMetadataEnumerator
  id: GetMetadataEnumerator
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: GetMetadataEnumerator()
  nameWithType: ResXResourceReader.GetMetadataEnumerator()
  fullName: System.Resources.ResXResourceReader.GetMetadataEnumerator()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "현재 XML 리소스 파일 또는 스트림에서 디자인 타임 속성을 검색할 수 있는 사전 열거자를 제공 합니다."
  remarks: "리소스는 리소스 파일 또는 스트림에서에 이름/값 쌍으로 저장 됩니다. 메타 데이터를를 호출 하는 디자인 타임 속성에 리소스 파일 또는 스트림의 런타임 데이터 리소스와 함께 저장 됩니다. GetMetadataEnumerator 메서드는 제공 된 <xref:System.Collections.IDictionaryEnumerator>리소스 파일 또는 스트림에서 현재와 관련 된 메타 데이터를 검색할 수 있는 개체 <xref:System.Resources.ResXResourceReader>개체입니다.</xref:System.Resources.ResXResourceReader> </xref:System.Collections.IDictionaryEnumerator> 그러나 경우는 <xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>속성이 `true` GetMetadataEnumerator를 호출 하기 전에 리소스 노드가 검색 됩니다.</xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>"
  example:
  - "The following example uses the GetMetadataEnumerator method to iterate through the metadata resources in an XML resource file. This code example is part of a larger example provided for the <xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A> property.  \n  \n [!code-vb[System.Resources.ResxresourceReader Example#4](~/add/codesnippet/visualbasic/m-system.resources.resxr_4_1.vb)]\n [!code-cpp[System.Resources.ResxresourceReader Example#4](~/add/codesnippet/cpp/m-system.resources.resxr_4_1.cpp)]\n [!code-cs[System.Resources.ResxresourceReader Example#4](~/add/codesnippet/csharp/m-system.resources.resxr_4_1.cs)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetMetadataEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "리소스의 메타 데이터에 대 한 열거자입니다."
  overload: System.Resources.ResXResourceReader.GetMetadataEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ResXResourceReader.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Resources.ResXResourceReader.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "현재는 열거자를 반환 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 개체입니다. 이 멤버에 대 한 참조는 &lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName&gt; 메서드."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Resources.ResXResourceReader>인스턴스로 캐스팅 되는 <xref:System.Collections.IEnumerable>인터페이스.</xref:System.Collections.IEnumerable> </xref:System.Resources.ResXResourceReader> 호출 하는 좋습니다는.resx 파일의 리소스를 열거 하는 <xref:System.Resources.ResXResourceReader.GetEnumerator%2A?displayProperty=fullName>메서드를 호출 합니다는 `MoveNext` 메서드 반환 된 <xref:System.Collections.IDictionaryEnumerator>개체입니다.</xref:System.Collections.IDictionaryEnumerator> </xref:System.Resources.ResXResourceReader.GetEnumerator%2A?displayProperty=fullName>"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "XML 리소스 (.resx) 스트림 또는 관련 된 현재 문자열에서 이름/값 쌍을 반복할 수 있는 열거자 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 개체입니다."
  overload: System.Resources.ResXResourceReader.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: ResXResourceReader.System.IDisposable.Dispose()
  fullName: System.Resources.ResXResourceReader.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다. 이 멤버에 대 한 참조는 &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt; 메서드."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Resources.ResXResourceReader>인스턴스로 캐스팅 되는 <xref:System.IDisposable>인터페이스.</xref:System.IDisposable> </xref:System.Resources.ResXResourceReader>"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Resources.ResXResourceReader.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.UseResXDataNodes
  id: UseResXDataNodes
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: UseResXDataNodes
  nameWithType: ResXResourceReader.UseResXDataNodes
  fullName: System.Resources.ResXResourceReader.UseResXDataNodes
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "지정 하는 값을 가져오거나 설정 합니다. 여부 <xref href=&quot;System.Resources.ResXDataNode&quot;> </xref> 현재 XML 리소스 파일 또는 스트림에서 읽을 때 반환 됩니다."
  remarks: "리소스 열거를 시작 하기 전에 UseResXDataNodes 속성을 설정할 수 있습니다. 기본적으로 해당 값은 `false`합니다."
  example:
  - "The following example enumerates and displays resource items in an XML file. Initially, UseResXDataNodes is set to `false` to show both data and metadata items as they occur in the resource file. The second enumeration has the UseResXDataNodes set to `true` so that resource data elements are returned as <xref:System.Resources.ResXDataNode>objects.  \n  \n [!code-vb[System.Resources.ResXResourceReader Example#2](~/add/codesnippet/visualbasic/p-system.resources.resxr_0_1.vb)]\n [!code-cpp[System.Resources.ResXResourceReader Example#2](~/add/codesnippet/cpp/p-system.resources.resxr_0_1.cpp)]\n [!code-cs[System.Resources.ResXResourceReader Example#2](~/add/codesnippet/csharp/p-system.resources.resxr_0_1.cs)]  \n  \n The resource XML file used by the example contains one data node and one metadata node. To use the XML file with the previous example, copy the following text and save it to a file named Resource1.resx.  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<root>  \n  <resheader name=\"resmimetype\">  \n    <value>text/microsoft-resx</value>  \n  </resheader>  \n  <resheader name=\"version\">  \n    <value>2.0</value>  \n  </resheader>  \n  <resheader name=\"reader\">  \n    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0,  \n           Culture=neutral, PublicKeyToken=b77a5c561934e089  \n    </value>  \n  </resheader>  \n  <resheader name=\"writer\">  \n    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0,  \n           Culture=neutral, PublicKeyToken=b77a5c561934e089  \n    </value>  \n  </resheader>  \n  <data name=\"DataSample\" xml:space=\"preserve\">  \n    <value>Sample DATA value</value>  \n  </data>  \n  <metadata name=\"MetadataSample\">  \n    <value>Sample METADATA value</value>  \n  </metadata>  \n</root>  \n```"
  syntax:
    content: public bool UseResXDataNodes { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>리소스 데이터 노드가 검색 되는 경우 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 리소스 데이터 노드가 무시 됩니다."
  overload: System.Resources.ResXResourceReader.UseResXDataNodes*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "집합 작업에서 리소스 파일 또는 스트림에 대 한 열거자 이미 열려 있습니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.Stream)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(Stream)
  nameWithType: ResXResourceReader.ResXResourceReader(Stream)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.TextReader)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(TextReader)
  nameWithType: ResXResourceReader.ResXResourceReader(TextReader)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Resources.ResXResourceReader.#ctor(System.String)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(String)
  nameWithType: ResXResourceReader.ResXResourceReader(String)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.Stream,System.ComponentModel.Design.ITypeResolutionService)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(Stream,ITypeResolutionService)
  nameWithType: ResXResourceReader.ResXResourceReader(Stream,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(Stream,ITypeResolutionService)
- uid: System.ComponentModel.Design.ITypeResolutionService
  parent: System.ComponentModel.Design
  isExternal: false
  name: ITypeResolutionService
  nameWithType: ITypeResolutionService
  fullName: System.ComponentModel.Design.ITypeResolutionService
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.Stream,System.Reflection.AssemblyName[])
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(Stream,AssemblyName[])
  nameWithType: ResXResourceReader.ResXResourceReader(Stream,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(Stream,AssemblyName[])
- uid: System.Reflection.AssemblyName[]
  parent: System.Reflection
  isExternal: true
  name: AssemblyName
  nameWithType: AssemblyName
  fullName: System.Reflection.AssemblyName[]
  spec.csharp:
  - uid: System.Reflection.AssemblyName
    name: AssemblyName
    nameWithType: AssemblyName
    fullName: AssemblyName[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.TextReader,System.ComponentModel.Design.ITypeResolutionService)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(TextReader,ITypeResolutionService)
  nameWithType: ResXResourceReader.ResXResourceReader(TextReader,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(TextReader,ITypeResolutionService)
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.TextReader,System.Reflection.AssemblyName[])
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(TextReader,AssemblyName[])
  nameWithType: ResXResourceReader.ResXResourceReader(TextReader,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(TextReader,AssemblyName[])
- uid: System.Resources.ResXResourceReader.#ctor(System.String,System.ComponentModel.Design.ITypeResolutionService)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(String,ITypeResolutionService)
  nameWithType: ResXResourceReader.ResXResourceReader(String,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(String,ITypeResolutionService)
- uid: System.Resources.ResXResourceReader.#ctor(System.String,System.Reflection.AssemblyName[])
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(String,AssemblyName[])
  nameWithType: ResXResourceReader.ResXResourceReader(String,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(String,AssemblyName[])
- uid: System.Resources.ResXResourceReader.BasePath
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: BasePath
  nameWithType: ResXResourceReader.BasePath
  fullName: System.Resources.ResXResourceReader.BasePath
- uid: System.Resources.ResXResourceReader.Close
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: Close()
  nameWithType: ResXResourceReader.Close()
  fullName: System.Resources.ResXResourceReader.Close()
- uid: System.Resources.ResXResourceReader.Dispose(System.Boolean)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ResXResourceReader.Dispose(Boolean)
  fullName: System.Resources.ResXResourceReader.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Resources.ResXResourceReader.Finalize
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: Finalize()
  nameWithType: ResXResourceReader.Finalize()
  fullName: System.Resources.ResXResourceReader.Finalize()
- uid: System.Resources.ResXResourceReader.FromFileContents(System.String)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: FromFileContents(String)
  nameWithType: ResXResourceReader.FromFileContents(String)
  fullName: System.Resources.ResXResourceReader.FromFileContents(String)
- uid: System.Resources.ResXResourceReader
  parent: System.Resources
  isExternal: false
  name: ResXResourceReader
  nameWithType: ResXResourceReader
  fullName: System.Resources.ResXResourceReader
- uid: System.Resources.ResXResourceReader.FromFileContents(System.String,System.ComponentModel.Design.ITypeResolutionService)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: FromFileContents(String,ITypeResolutionService)
  nameWithType: ResXResourceReader.FromFileContents(String,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.FromFileContents(String,ITypeResolutionService)
- uid: System.Resources.ResXResourceReader.FromFileContents(System.String,System.Reflection.AssemblyName[])
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: FromFileContents(String,AssemblyName[])
  nameWithType: ResXResourceReader.FromFileContents(String,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.FromFileContents(String,AssemblyName[])
- uid: System.Resources.ResXResourceReader.GetEnumerator
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: GetEnumerator()
  nameWithType: ResXResourceReader.GetEnumerator()
  fullName: System.Resources.ResXResourceReader.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Resources.ResXResourceReader.GetMetadataEnumerator
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: GetMetadataEnumerator()
  nameWithType: ResXResourceReader.GetMetadataEnumerator()
  fullName: System.Resources.ResXResourceReader.GetMetadataEnumerator()
- uid: System.Resources.ResXResourceReader.System#Collections#IEnumerable#GetEnumerator
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ResXResourceReader.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Resources.ResXResourceReader.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Resources.ResXResourceReader.System#IDisposable#Dispose
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: ResXResourceReader.System.IDisposable.Dispose()
  fullName: System.Resources.ResXResourceReader.System.IDisposable.Dispose()
- uid: System.Resources.ResXResourceReader.UseResXDataNodes
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: UseResXDataNodes
  nameWithType: ResXResourceReader.UseResXDataNodes
  fullName: System.Resources.ResXResourceReader.UseResXDataNodes
- uid: System.Resources.ResXResourceReader.#ctor*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader
  nameWithType: ResXResourceReader.ResXResourceReader
- uid: System.Resources.ResXResourceReader.BasePath*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: BasePath
  nameWithType: ResXResourceReader.BasePath
- uid: System.Resources.ResXResourceReader.Close*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: Close
  nameWithType: ResXResourceReader.Close
- uid: System.Resources.ResXResourceReader.Dispose*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: Dispose
  nameWithType: ResXResourceReader.Dispose
- uid: System.Resources.ResXResourceReader.Finalize*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: Finalize
  nameWithType: ResXResourceReader.Finalize
- uid: System.Resources.ResXResourceReader.FromFileContents*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: FromFileContents
  nameWithType: ResXResourceReader.FromFileContents
- uid: System.Resources.ResXResourceReader.GetEnumerator*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: GetEnumerator
  nameWithType: ResXResourceReader.GetEnumerator
- uid: System.Resources.ResXResourceReader.GetMetadataEnumerator*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: GetMetadataEnumerator
  nameWithType: ResXResourceReader.GetMetadataEnumerator
- uid: System.Resources.ResXResourceReader.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ResXResourceReader.System.Collections.IEnumerable.GetEnumerator
- uid: System.Resources.ResXResourceReader.System#IDisposable#Dispose*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: ResXResourceReader.System.IDisposable.Dispose
- uid: System.Resources.ResXResourceReader.UseResXDataNodes*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: UseResXDataNodes
  nameWithType: ResXResourceReader.UseResXDataNodes
