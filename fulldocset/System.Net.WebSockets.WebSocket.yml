### YamlMime:ManagedReference
items:
- uid: System.Net.WebSockets.WebSocket
  id: WebSocket
  children:
  - System.Net.WebSockets.WebSocket.#ctor
  - System.Net.WebSockets.WebSocket.Abort
  - System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.CloseStatus
  - System.Net.WebSockets.WebSocket.CloseStatusDescription
  - System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  - System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  - System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  - System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  - System.Net.WebSockets.WebSocket.Dispose
  - System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  - System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  - System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.RegisterPrefixes
  - System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.State
  - System.Net.WebSockets.WebSocket.SubProtocol
  - System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  langs:
  - csharp
  name: WebSocket
  nameWithType: WebSocket
  fullName: System.Net.WebSockets.WebSocket
  type: Class
  summary: "WebSocket 클래스를 보내고 WebSocket 업그레이드가 완료 된 후 데이터를 받을 수 있습니다."
  remarks: "클래스 중 일부는 <xref:System.Net.WebSockets>네임 스페이스는 Windows 7, Windows Vista SP2 및 Windows Server 2008에서 지원 됩니다.</xref:System.Net.WebSockets> 그러나 클라이언트와 서버 Websocket의 유일한 공용 구현은 Windows 8 및 Windows Server 2012에서 사용할 수 있습니다. 클래스 및 클래스 요소에는 <xref:System.Net.WebSockets>Windows 7, Windows Vista SP2 및 Windows Server 2008에서 지원 되는 네임 스페이스는 추상 클래스입니다.</xref:System.Net.WebSockets> 이렇게 하면 응용 프로그램 개발자 상속 하 고 클라이언트 Websocket의 실제 구현을 가진 추상 클래스를 확장 합니다."
  syntax:
    content: 'public abstract class WebSocket : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.#ctor
  id: '#ctor'
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: WebSocket()
  nameWithType: WebSocket.WebSocket()
  fullName: System.Net.WebSockets.WebSocket.WebSocket()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "인스턴스를 만듭니다는 <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> 클래스입니다."
  syntax:
    content: protected WebSocket ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.Abort
  id: Abort
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: Abort()
  nameWithType: WebSocket.Abort()
  fullName: System.Net.WebSockets.WebSocket.Abort()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "WebSocket 연결을 중단 하 고 보류 중인 IO 작업을 모두 취소 합니다."
  syntax:
    content: public abstract void Abort ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "정의한 close 핸드셰이크를 사용 하 여 비동기 작업으로 WebSocket 연결을 닫습니다는 [WebSocket 프로토콜 사양](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06) 섹션 7입니다."
  remarks: "이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task>개체 WebSocket 닫힌 후에 완료 됩니다.</xref:System.Threading.Tasks.Task>       정의한 close 핸드셰이크를 사용 하 여 WebSocket 연결을 종료 하는이 메서드는 [WebSocket 프로토콜 사양](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06) 섹션 7입니다."
  syntax:
    content: public abstract System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "WebSocket 연결을 닫는 이유를 나타냅니다."
    - id: statusDescription
      type: System.String
      description: "연결이 닫힌 이유에 대해 사용자가 읽을 수 있는 설명을 지정 합니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "작업을 취소 해야 한다는 알림을 전파 하는 데 사용할 수 있는 토큰입니다."
    return:
      type: System.Threading.Tasks.Task
      description: "<xref:System.Threading.Tasks.Task>입니다.</xref:System.Threading.Tasks.Task> 반환       비동기 작업을 나타내는 작업 개체입니다."
  overload: System.Net.WebSockets.WebSocket.CloseAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "시작 하거나에서 정의한 close 핸드셰이크를 완료 된 [WebSocket 프로토콜 사양 섹션 7](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06)합니다."
  remarks: "이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task>개체 WebSocket에서 출력 닫힌 후에 완료 됩니다.</xref:System.Threading.Tasks.Task>"
  syntax:
    content: public abstract System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "WebSocket 연결을 닫는 이유를 나타냅니다."
    - id: statusDescription
      type: System.String
      description: "연결이 닫힌 이유에 대해 사용자가 읽을 수 있는 설명을 지정할 수 있습니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "작업을 취소 해야 한다는 알림을 전파 하는 데 사용할 수 있는 토큰입니다."
    return:
      type: System.Threading.Tasks.Task
      description: "<xref:System.Threading.Tasks.Task>입니다.</xref:System.Threading.Tasks.Task> 반환       비동기 작업을 나타내는 작업 개체입니다."
  overload: System.Net.WebSockets.WebSocket.CloseOutputAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseStatus
  id: CloseStatus
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseStatus
  nameWithType: WebSocket.CloseStatus
  fullName: System.Net.WebSockets.WebSocket.CloseStatus
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "원격 끝점이 close 핸드셰이크를 시작한 이유는 이유를 나타냅니다."
  remarks: "Close 핸드셰이크가 아직 시작 되지 않았습니다, WebSocketCloseStatus.None 반환 됩니다."
  syntax:
    content: public abstract Nullable<System.Net.WebSockets.WebSocketCloseStatus> CloseStatus { get; }
    return:
      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocketCloseStatus&quot;></xref>."
  overload: System.Net.WebSockets.WebSocket.CloseStatus*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription
  id: CloseStatusDescription
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseStatusDescription
  nameWithType: WebSocket.CloseStatusDescription
  fullName: System.Net.WebSockets.WebSocket.CloseStatusDescription
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "원격 끝점을 연결이 닫히기 이유 이유를 설명할 수 있습니다."
  syntax:
    content: public abstract string CloseStatusDescription { get; }
    return:
      type: System.String
      description: "<xref:System.String>입니다.</xref:System.String> 반환"
  overload: System.Net.WebSockets.WebSocket.CloseStatusDescription*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  id: CreateClientBuffer(System.Int32,System.Int32)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CreateClientBuffer(Int32,Int32)
  nameWithType: WebSocket.CreateClientBuffer(Int32,Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateClientBuffer(Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "이를 사용 하는 버퍼의 클라이언트를 만들기 <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> 인스턴스."
  syntax:
    content: public static ArraySegment<byte> CreateClientBuffer (int receiveBufferSize, int sendBufferSize);
    parameters:
    - id: receiveBufferSize
      type: System.Int32
      description: "크기 (바이트)는 클라이언트의 수신 버퍼 합니다."
    - id: sendBufferSize
      type: System.Int32
      description: "송신 버퍼의 바이트 크기입니다."
    return:
      type: System.ArraySegment{System.Byte}
      description: "반환 &lt;xref:System.ArraySegment%601&gt;합니다.       클라이언트 버퍼 있는 배열입니다."
  overload: System.Net.WebSockets.WebSocket.CreateClientBuffer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  id: CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  nameWithType: WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  fullName: System.Net.WebSockets.WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "이 API는.NET Framework 인프라를 지원 하며 사용자 코드에서 직접 사용할 수 없습니다.       WSPC 프레이밍을 위해 사용 하는 클라이언트 쪽 WebSocket 클래스를 만드는 호출자를 허용 합니다."
  syntax:
    content: public static System.Net.WebSockets.WebSocket CreateClientWebSocket (System.IO.Stream innerStream, string subProtocol, int receiveBufferSize, int sendBufferSize, TimeSpan keepAliveInterval, bool useZeroMaskingKey, ArraySegment<byte> internalBuffer);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "IO 작업에 사용할 연결입니다."
    - id: subProtocol
      type: System.String
      description: "클라이언트에서 하위 프로토콜입니다."
    - id: receiveBufferSize
      type: System.Int32
      description: "클라이언트 WebSocket의 바이트 크기 수신 버퍼 합니다."
    - id: sendBufferSize
      type: System.Int32
      description: "버퍼를 전송 하는 클라이언트 WebSocket의 바이트에서 크기입니다."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "데이터를 연결 유지를와 연결을 통해 프레임은 전송 하는 방법을 정기적으로 결정 합니다. 연결이 유휴 경우에 적용 됩니다."
    - id: useZeroMaskingKey
      type: System.Boolean
      description: "WebSocket에 대 한 임의 키 또는 정적 키 (방금 제로)를 사용할 수 있는지 여부를 나타냅니다. 마스킹."
    - id: internalBuffer
      type: System.ArraySegment{System.Byte}
      description: "WPC에서 내부 버퍼에 사용 됩니다. 크기에 적어도 `2 * ReceiveBufferSize + SendBufferSize + 256 + 20 (16 on 32-bit)`합니다."
    return:
      type: System.Net.WebSockets.WebSocket
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocket&quot;></xref>."
  overload: System.Net.WebSockets.WebSocket.CreateClientWebSocket*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  id: CreateServerBuffer(System.Int32)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CreateServerBuffer(Int32)
  nameWithType: WebSocket.CreateServerBuffer(Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateServerBuffer(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "WebSocket 서버 버퍼를 만듭니다."
  syntax:
    content: public static ArraySegment<byte> CreateServerBuffer (int receiveBufferSize);
    parameters:
    - id: receiveBufferSize
      type: System.Int32
      description: "원하는 버퍼의 바이트 크기입니다."
    return:
      type: System.ArraySegment{System.Byte}
      description: "반환 &lt;xref:System.ArraySegment%601&gt;합니다."
  overload: System.Net.WebSockets.WebSocket.CreateServerBuffer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  id: DefaultKeepAliveInterval
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: DefaultKeepAliveInterval
  nameWithType: WebSocket.DefaultKeepAliveInterval
  fullName: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "밀리초 단위로 기본 WebSocket 프로토콜 연결 유지 간격을 가져옵니다."
  syntax:
    content: public static TimeSpan DefaultKeepAliveInterval { get; }
    return:
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>입니다.</xref:System.TimeSpan> 반환       기본 WebSocket 프로토콜 연결 유지 간격 (밀리초)입니다. 이 간격에 대 한 일반적인 값은 30 초입니다."
  overload: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.Dispose
  id: Dispose
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: Dispose()
  nameWithType: WebSocket.Dispose()
  fullName: System.Net.WebSockets.WebSocket.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "ASP.NET 및 자체 호스트 된 구현에 대 한 관리 되지 않는 리소스를 정리 하는 데 사용 합니다."
  syntax:
    content: public abstract void Dispose ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  id: IsApplicationTargeting45
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: IsApplicationTargeting45()
  nameWithType: WebSocket.IsApplicationTargeting45()
  fullName: System.Net.WebSockets.WebSocket.IsApplicationTargeting45()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "WebSocket 인스턴스 대상으로 하는 경우를 나타내는 값을 반환 [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]합니다."
  syntax:
    content: public static bool IsApplicationTargeting45 ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref:System.Boolean>입니다.</xref:System.Boolean> 반환       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> 대상인 [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]고, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.WebSockets.WebSocket.IsApplicationTargeting45*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  id: IsStateTerminal(System.Net.WebSockets.WebSocketState)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: IsStateTerminal(WebSocketState)
  nameWithType: WebSocket.IsStateTerminal(WebSocketState)
  fullName: System.Net.WebSockets.WebSocket.IsStateTerminal(WebSocketState)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "WebSocket 인스턴스 상태가 닫히거나 중단 하는 경우를 나타내는 값을 반환 합니다."
  syntax:
    content: protected static bool IsStateTerminal (System.Net.WebSockets.WebSocketState state);
    parameters:
    - id: state
      type: System.Net.WebSockets.WebSocketState
      description: "WebSocket의 현재 상태입니다."
    return:
      type: System.Boolean
      description: "<xref:System.Boolean>입니다.</xref:System.Boolean> 반환       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> 닫혀 않으면 또는 중단 된 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.WebSockets.WebSocket.IsStateTerminal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "데이터를 받고는 <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> 연결 비동기적으로 합니다."
  remarks: "이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task%601>개체는 데이터에 <xref:System.Net.WebSockets.WebSocket>했습니다.</xref:System.Net.WebSockets.WebSocket> 수신 된 후 완료 됩니다</xref:System.Threading.Tasks.Task%601>       정확히 하나의 송신 포트 및 수신 각 지원 <xref:System.Net.WebSockets.WebSocket>병렬로 개체.</xref:System.Net.WebSockets.WebSocket>"
  syntax:
    content: public abstract System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync (ArraySegment<byte> buffer, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "응용 프로그램 버퍼 받은 데이터에 대 한 저장소 위치를 참조 합니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "작업을 취소 해야 한다는 알림을 전파 합니다."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
      description: "반환 &lt;xref:System.Threading.Tasks.Task%601&gt;합니다.       비동기 작업을 나타내는 작업 개체입니다. &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; 작업 개체에서 속성 반환는 <xref:System.Byte>받은 데이터가 들어 있는 배열입니다.</xref:System.Byte>"
  overload: System.Net.WebSockets.WebSocket.ReceiveAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes
  id: RegisterPrefixes
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: RegisterPrefixes()
  nameWithType: WebSocket.RegisterPrefixes()
  fullName: System.Net.WebSockets.WebSocket.RegisterPrefixes()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "이 API는.NET Framework 인프라를 지원 하며 사용자 코드에서 직접 사용할 수 없습니다. WebSocket 요청 (ws 및 wss)에 대 한 접두사를 등록 하는 호출자를 허용 합니다."
  syntax:
    content: public static void RegisterPrefixes ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.RegisterPrefixes*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "통해 데이터를 보냅니다는 <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> 연결 비동기적으로 합니다."
  remarks: "이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task>개체에 <xref:System.Net.WebSockets.WebSocket>했습니다.</xref:System.Net.WebSockets.WebSocket> 데이터를 보낸 후에 완료 됩니다</xref:System.Threading.Tasks.Task>       정확히 하나의 송신 포트 및 수신 각 지원 <xref:System.Net.WebSockets.WebSocket>병렬로 개체.</xref:System.Net.WebSockets.WebSocket>"
  syntax:
    content: public abstract System.Threading.Tasks.Task SendAsync (ArraySegment<byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "연결을 통해 전송 될 버퍼입니다."
    - id: messageType
      type: System.Net.WebSockets.WebSocketMessageType
      description: "응용 프로그램에서 이진 또는 텍스트 메시지를 보내는 지 여부를 나타냅니다."
    - id: endOfMessage
      type: System.Boolean
      description: "&quot;버퍼&quot;의 데이터는 메시지의 마지막 부분 인지를 나타냅니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "작업을 취소 해야 한다는 알림을 전파 하는 토큰입니다."
    return:
      type: System.Threading.Tasks.Task
      description: "비동기 작업을 나타내는 작업 개체입니다."
  overload: System.Net.WebSockets.WebSocket.SendAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.State
  id: State
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: State
  nameWithType: WebSocket.State
  fullName: System.Net.WebSockets.WebSocket.State
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "WebSocket 연결의 현재 상태를 반환합니다."
  syntax:
    content: public abstract System.Net.WebSockets.WebSocketState State { get; }
    return:
      type: System.Net.WebSockets.WebSocketState
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocketState&quot;></xref>."
  overload: System.Net.WebSockets.WebSocket.State*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.SubProtocol
  id: SubProtocol
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: SubProtocol
  nameWithType: WebSocket.SubProtocol
  fullName: System.Net.WebSockets.WebSocket.SubProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "핸드셰이크 열기 중에서 협상 된 하위 프로토콜입니다."
  syntax:
    content: public abstract string SubProtocol { get; }
    return:
      type: System.String
      description: "<xref:System.String>입니다.</xref:System.String> 반환"
  overload: System.Net.WebSockets.WebSocket.SubProtocol*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  id: ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: ThrowOnInvalidState(WebSocketState,WebSocketState[])
  nameWithType: WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
  fullName: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "연결이 예상 되는 상태에 있는지 확인 합니다."
  syntax:
    content: protected static void ThrowOnInvalidState (System.Net.WebSockets.WebSocketState state, System.Net.WebSockets.WebSocketState[] validStates);
    parameters:
    - id: state
      type: System.Net.WebSockets.WebSocketState
      description: "WebSocket이 유효한 상태 목록에 대해 테스트의 현재 상태입니다."
    - id: validStates
      type: System.Net.WebSockets.WebSocketState[]
      description: "올바른 연결 상태 목록입니다."
  overload: System.Net.WebSockets.WebSocket.ThrowOnInvalidState*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.WebSockets.WebSocket.#ctor
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: WebSocket()
  nameWithType: WebSocket.WebSocket()
  fullName: System.Net.WebSockets.WebSocket.WebSocket()
- uid: System.Net.WebSockets.WebSocket.Abort
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Abort()
  nameWithType: WebSocket.Abort()
  fullName: System.Net.WebSockets.WebSocket.Abort()
- uid: System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.WebSockets.WebSocketCloseStatus
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketCloseStatus
  nameWithType: WebSocketCloseStatus
  fullName: System.Net.WebSockets.WebSocketCloseStatus
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Net.WebSockets.WebSocket.CloseStatus
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: WebSocket.CloseStatus
  fullName: System.Net.WebSockets.WebSocket.CloseStatus
- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
  parent: System
  isExternal: true
  name: Nullable<WebSocketCloseStatus>
  nameWithType: Nullable<WebSocketCloseStatus>
  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    nameWithType: WebSocketCloseStatus
    fullName: WebSocketCloseStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: WebSocket.CloseStatusDescription
  fullName: System.Net.WebSockets.WebSocket.CloseStatusDescription
- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientBuffer(Int32,Int32)
  nameWithType: WebSocket.CreateClientBuffer(Int32,Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateClientBuffer(Int32,Int32)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  nameWithType: WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  fullName: System.Net.WebSockets.WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
- uid: System.Net.WebSockets.WebSocket
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocket
  nameWithType: WebSocket
  fullName: System.Net.WebSockets.WebSocket
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateServerBuffer(Int32)
  nameWithType: WebSocket.CreateServerBuffer(Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateServerBuffer(Int32)
- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: DefaultKeepAliveInterval
  nameWithType: WebSocket.DefaultKeepAliveInterval
  fullName: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
- uid: System.Net.WebSockets.WebSocket.Dispose
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Dispose()
  nameWithType: WebSocket.Dispose()
  fullName: System.Net.WebSockets.WebSocket.Dispose()
- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsApplicationTargeting45()
  nameWithType: WebSocket.IsApplicationTargeting45()
  fullName: System.Net.WebSockets.WebSocket.IsApplicationTargeting45()
- uid: System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsStateTerminal(WebSocketState)
  nameWithType: WebSocket.IsStateTerminal(WebSocketState)
  fullName: System.Net.WebSockets.WebSocket.IsStateTerminal(WebSocketState)
- uid: System.Net.WebSockets.WebSocketState
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  nameWithType: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState
- uid: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<WebSocketReceiveResult>
  nameWithType: Task<WebSocketReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.WebSocketReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    nameWithType: WebSocketReceiveResult
    fullName: WebSocketReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: RegisterPrefixes()
  nameWithType: WebSocket.RegisterPrefixes()
  fullName: System.Net.WebSockets.WebSocket.RegisterPrefixes()
- uid: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
- uid: System.Net.WebSockets.WebSocketMessageType
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketMessageType
  nameWithType: WebSocketMessageType
  fullName: System.Net.WebSockets.WebSocketMessageType
- uid: System.Net.WebSockets.WebSocket.State
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: State
  nameWithType: WebSocket.State
  fullName: System.Net.WebSockets.WebSocket.State
- uid: System.Net.WebSockets.WebSocket.SubProtocol
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: WebSocket.SubProtocol
  fullName: System.Net.WebSockets.WebSocket.SubProtocol
- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ThrowOnInvalidState(WebSocketState,WebSocketState[])
  nameWithType: WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
  fullName: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
- uid: System.Net.WebSockets.WebSocketState[]
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  nameWithType: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState[]
  spec.csharp:
  - uid: System.Net.WebSockets.WebSocketState
    name: WebSocketState
    nameWithType: WebSocketState
    fullName: WebSocketState[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.WebSockets.WebSocket.#ctor*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: WebSocket
  nameWithType: WebSocket.WebSocket
- uid: System.Net.WebSockets.WebSocket.Abort*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Abort
  nameWithType: WebSocket.Abort
- uid: System.Net.WebSockets.WebSocket.CloseAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseAsync
  nameWithType: WebSocket.CloseAsync
- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseOutputAsync
  nameWithType: WebSocket.CloseOutputAsync
- uid: System.Net.WebSockets.WebSocket.CloseStatus*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: WebSocket.CloseStatus
- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: WebSocket.CloseStatusDescription
- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientBuffer
  nameWithType: WebSocket.CreateClientBuffer
- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientWebSocket
  nameWithType: WebSocket.CreateClientWebSocket
- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateServerBuffer
  nameWithType: WebSocket.CreateServerBuffer
- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: DefaultKeepAliveInterval
  nameWithType: WebSocket.DefaultKeepAliveInterval
- uid: System.Net.WebSockets.WebSocket.Dispose*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Dispose
  nameWithType: WebSocket.Dispose
- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsApplicationTargeting45
  nameWithType: WebSocket.IsApplicationTargeting45
- uid: System.Net.WebSockets.WebSocket.IsStateTerminal*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsStateTerminal
  nameWithType: WebSocket.IsStateTerminal
- uid: System.Net.WebSockets.WebSocket.ReceiveAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ReceiveAsync
  nameWithType: WebSocket.ReceiveAsync
- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: RegisterPrefixes
  nameWithType: WebSocket.RegisterPrefixes
- uid: System.Net.WebSockets.WebSocket.SendAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SendAsync
  nameWithType: WebSocket.SendAsync
- uid: System.Net.WebSockets.WebSocket.State*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: State
  nameWithType: WebSocket.State
- uid: System.Net.WebSockets.WebSocket.SubProtocol*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: WebSocket.SubProtocol
- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ThrowOnInvalidState
  nameWithType: WebSocket.ThrowOnInvalidState
