### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlElement
  id: XmlElement
  children:
  - System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  - System.Xml.XmlElement.Attributes
  - System.Xml.XmlElement.CloneNode(System.Boolean)
  - System.Xml.XmlElement.GetAttribute(System.String)
  - System.Xml.XmlElement.GetAttribute(System.String,System.String)
  - System.Xml.XmlElement.GetAttributeNode(System.String)
  - System.Xml.XmlElement.GetAttributeNode(System.String,System.String)
  - System.Xml.XmlElement.GetElementsByTagName(System.String)
  - System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)
  - System.Xml.XmlElement.HasAttribute(System.String)
  - System.Xml.XmlElement.HasAttribute(System.String,System.String)
  - System.Xml.XmlElement.HasAttributes
  - System.Xml.XmlElement.InnerText
  - System.Xml.XmlElement.InnerXml
  - System.Xml.XmlElement.IsEmpty
  - System.Xml.XmlElement.LocalName
  - System.Xml.XmlElement.Name
  - System.Xml.XmlElement.NamespaceURI
  - System.Xml.XmlElement.NextSibling
  - System.Xml.XmlElement.NodeType
  - System.Xml.XmlElement.OwnerDocument
  - System.Xml.XmlElement.ParentNode
  - System.Xml.XmlElement.Prefix
  - System.Xml.XmlElement.RemoveAll
  - System.Xml.XmlElement.RemoveAllAttributes
  - System.Xml.XmlElement.RemoveAttribute(System.String)
  - System.Xml.XmlElement.RemoveAttribute(System.String,System.String)
  - System.Xml.XmlElement.RemoveAttributeAt(System.Int32)
  - System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)
  - System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)
  - System.Xml.XmlElement.SchemaInfo
  - System.Xml.XmlElement.SetAttribute(System.String,System.String)
  - System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)
  - System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)
  - System.Xml.XmlElement.SetAttributeNode(System.String,System.String)
  - System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)
  langs:
  - csharp
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
  type: Class
  summary: "요소를 나타냅니다."
  remarks: "요소는 W3C 문서 개체 모델 (DOM)에서 가장 일반적인 노드 중 하나입니다. 요소는 관련 된 특성이 있을 수 있습니다. `XmlElement` 클래스에는 특성에 액세스 하기 위한 여러 메서드가 (<xref:System.Xml.XmlElement.GetAttribute%2A>, <xref:System.Xml.XmlElement.SetAttribute%2A>, <xref:System.Xml.XmlElement.RemoveAttribute%2A>, <xref:System.Xml.XmlElement.GetAttributeNode%2A>등).</xref:System.Xml.XmlElement.GetAttributeNode%2A> </xref:System.Xml.XmlElement.RemoveAttribute%2A> </xref:System.Xml.XmlElement.SetAttribute%2A> </xref:System.Xml.XmlElement.GetAttribute%2A> 사용할 수도 있습니다는 <xref:System.Xml.XmlElement.Attributes%2A>속성을 반환 하는 <xref:System.Xml.XmlAttributeCollection>컬렉션에서 특성 이름이 나 인덱스로 액세스할 수 있습니다.</xref:System.Xml.XmlAttributeCollection> </xref:System.Xml.XmlElement.Attributes%2A>"
  syntax:
    content: 'public class XmlElement : System.Xml.XmlLinkedNode'
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  - System.Xml.XmlLinkedNode
  implements: []
  inheritedMembers:
  - System.Xml.XmlLinkedNode.PreviousSibling
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.BaseURI
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.CreateNavigator
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.IsReadOnly
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  platform:
  - net462
- uid: System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  id: '#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)'
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: XmlElement(String,String,String,XmlDocument)
  nameWithType: XmlElement.XmlElement(String,String,String,XmlDocument)
  fullName: System.Xml.XmlElement.XmlElement(String,String,String,XmlDocument)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xml.XmlElement&quot;> </xref> 클래스입니다."
  remarks: "<xref:System.Xml.XmlElement>직접; 대신 <xref:System.Xml.XmlDocument.CreateElement%2A>.</xref:System.Xml.XmlDocument.CreateElement%2A> 와 같은 메서드를 사용 하 여</xref:System.Xml.XmlElement> 인스턴스화할 수 없습니다"
  syntax:
    content: protected XmlElement (string prefix, string localName, string namespaceURI, System.Xml.XmlDocument doc);
    parameters:
    - id: prefix
      type: System.String
      description: "네임 스페이스 접두사입니다. 참조는 <xref:System.Xml.XmlElement.Prefix*>속성.</xref:System.Xml.XmlElement.Prefix*>"
    - id: localName
      type: System.String
      description: "로컬 이름입니다. 참조는 <xref:System.Xml.XmlElement.LocalName*>속성.</xref:System.Xml.XmlElement.LocalName*>"
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 참조는 <xref:System.Xml.XmlElement.NamespaceURI*>속성.</xref:System.Xml.XmlElement.NamespaceURI*>"
    - id: doc
      type: System.Xml.XmlDocument
      description: "부모 XML 문서입니다."
  overload: System.Xml.XmlElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.Attributes
  id: Attributes
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: Attributes
  nameWithType: XmlElement.Attributes
  fullName: System.Xml.XmlElement.Attributes
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "가져옵니다는 <xref href=&quot;System.Xml.XmlAttributeCollection&quot;> </xref> 이 노드에 대 한 특성 목록이 들어 있는입니다."
  remarks: ''
  example:
  - "The following example uses changes the value of the first attribute.  \n  \n [!code-cpp[Classic WebData XmlElement.Attributes Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._0_1.cpp)]\n [!code-cs[Classic WebData XmlElement.Attributes Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._0_1.cs)]\n [!code-vb[Classic WebData XmlElement.Attributes Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._0_1.vb)]"
  syntax:
    content: public override System.Xml.XmlAttributeCollection Attributes { get; }
    return:
      type: System.Xml.XmlAttributeCollection
      description: "<xref href=&quot;System.Xml.XmlAttributeCollection&quot;></xref>이 노드에 대 한 특성 목록이 들어 있는입니다."
  overload: System.Xml.XmlElement.Attributes*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlElement.CloneNode(Boolean)
  fullName: System.Xml.XmlElement.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "이 노드의 복제본을 만듭니다."
  remarks: "이 메서드는 노드에 대 한 복사 생성자로 사용 됩니다. 중복 된 노드는 부모 없습니다 (<xref:System.Xml.XmlNode.ParentNode%2A> 반환 `null`).</xref:System.Xml.XmlNode.ParentNode%2A>"
  example:
  - "The following example creates a new element, clones it, and then adds both elements into an XML document.  \n  \n [!code-cpp[Classic WebData XmlElement.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._3_1.cpp)]\n [!code-cs[Classic WebData XmlElement.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._3_1.cs)]\n [!code-vb[Classic WebData XmlElement.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._3_1.vb)]"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정된 된 노드 아래의 하위 트리를 재귀적으로를 복제. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 노드 자체만 복제 하려면 (및 해당 특성 노드가 있는 경우는 <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref>)."
    return:
      type: System.Xml.XmlNode
      description: "복제 된 노드입니다."
  overload: System.Xml.XmlElement.CloneNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: GetAttribute(String)
  nameWithType: XmlElement.GetAttribute(String)
  fullName: System.Xml.XmlElement.GetAttribute(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 이름의 특성에 대 한 값을 반환합니다."
  remarks: ''
  example:
  - "The following example checks to see if the element has the specified attribute.  \n  \n [!code-cs[Classic WebData XmlElement.HasAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._0_1.cs)]\n [!code-vb[Classic WebData XmlElement.HasAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._0_1.vb)]\n [!code-cpp[Classic WebData XmlElement.HasAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._0_1.cpp)]"
  syntax:
    content: public virtual string GetAttribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "검색할 특성의 이름입니다. 정규화 된 이름입니다. 일치는 <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> 일치 하는 노드의 속성입니다."
    return:
      type: System.String
      description: "지정된 된 특성의 값입니다. 일치 하는 특성을 찾을 수 없는 경우 또는 특성 지정 된 또는 기본값 하지 않는 경우 빈 문자열이 반환 됩니다."
  overload: System.Xml.XmlElement.GetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.GetAttribute(System.String,System.String)
  id: GetAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: GetAttribute(String,String)
  nameWithType: XmlElement.GetAttribute(String,String)
  fullName: System.Xml.XmlElement.GetAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 로컬 이름과 네임 스페이스 URI와 특성에 대 한 값을 반환합니다."
  syntax:
    content: public virtual string GetAttribute (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "검색할 특성의 로컬 이름입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 특성의 URI 검색 합니다."
    return:
      type: System.String
      description: "지정된 된 특성의 값입니다. 일치 하는 특성을 찾을 수 없는 경우 또는 특성 지정 된 또는 기본값 하지 않는 경우 빈 문자열이 반환 됩니다."
  overload: System.Xml.XmlElement.GetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.GetAttributeNode(System.String)
  id: GetAttributeNode(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: GetAttributeNode(String)
  nameWithType: XmlElement.GetAttributeNode(String)
  fullName: System.Xml.XmlElement.GetAttributeNode(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "반환 된 <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;> </xref> 지정 된 이름입니다."
  remarks: ''
  example:
  - "The following example checks to see if the element has the specified attribute.  \n  \n [!code-cpp[Classic WebData XmlElement.GetAttributeNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._5_1.cpp)]\n [!code-cs[Classic WebData XmlElement.GetAttributeNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._5_1.cs)]\n [!code-vb[Classic WebData XmlElement.GetAttributeNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._5_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlAttribute GetAttributeNode (string name);
    parameters:
    - id: name
      type: System.String
      description: "검색할 특성의 이름입니다. 정규화 된 이름입니다. 일치는 <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> 일치 하는 노드의 속성입니다."
    return:
      type: System.Xml.XmlAttribute
      description: "지정 된 <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;> </xref> 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 일치 하는 특성을 찾을 수 없는 경우."
  overload: System.Xml.XmlElement.GetAttributeNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.GetAttributeNode(System.String,System.String)
  id: GetAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: GetAttributeNode(String,String)
  nameWithType: XmlElement.GetAttributeNode(String,String)
  fullName: System.Xml.XmlElement.GetAttributeNode(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "반환 된 <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> 지정 된 로컬 이름 및 네임 스페이스 URI입니다."
  syntax:
    content: public virtual System.Xml.XmlAttribute GetAttributeNode (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "특성의 로컬 이름입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 특성의 URI입니다."
    return:
      type: System.Xml.XmlAttribute
      description: "지정 된 <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;> </xref> 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 일치 하는 특성을 찾을 수 없는 경우."
  overload: System.Xml.XmlElement.GetAttributeNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: XmlElement.GetElementsByTagName(String)
  fullName: System.Xml.XmlElement.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "반환 된 <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> <xref:System.Xml.XmlElement.Name*>.</xref:System.Xml.XmlElement.Name*> 지정 된 일치 하는 모든 하위 요소의 목록이 포함 된"
  remarks: "노드는 이러한에서 발생 하는 한 전위 순서에 배치 됩니다는 <xref:System.Xml.XmlElement>트리.</xref:System.Xml.XmlElement>      > [!NOTE] >를 사용 하는 것이 좋습니다.는 <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>또는 <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName>GetElementsByTagName 메서드 대신 메서드.</xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> </xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>"
  example:
  - "The following example gets and displays all the book titles.  \n  \n [!code-cpp[Classic WebData XmlElement.GetElementsByTagName Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._13_1.cpp)]\n [!code-vb[Classic WebData XmlElement.GetElementsByTagName Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._13_1.vb)]\n [!code-cs[Classic WebData XmlElement.GetElementsByTagName Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._13_1.cs)]  \n  \n The example uses the file, `2books.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlElement.GetElementsByTagName Example#2](~/add/codesnippet/xml/m-system.xml.xmlelement._13_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNodeList GetElementsByTagName (string name);
    parameters:
    - id: name
      type: System.String
      description: "일치 시킬 이름 태그입니다. 정규화 된 이름입니다. 일치는 <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> 일치 하는 노드의 속성입니다. 별표 (*)는 모든 태그와 일치 하는 특수 값입니다."
    return:
      type: System.Xml.XmlNodeList
      description: "<xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> 일치 하는 모든 노드 목록이 포함 된 합니다. 일치 하는 노드가 없는 경우에 목록이 비어 있습니다."
  overload: System.Xml.XmlElement.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)
  id: GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: GetElementsByTagName(String,String)
  nameWithType: XmlElement.GetElementsByTagName(String,String)
  fullName: System.Xml.XmlElement.GetElementsByTagName(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "반환 된 <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> 지정 된 일치 하는 모든 하위 요소의 목록이 포함 된 <> </> *> 및 <> </> *> 합니다."
  remarks: "노드는 이러한에서 발생 하는 한 전위 순서에 배치 됩니다는 `XmlElement` 트리 합니다.      > [!NOTE] >를 사용 하는 것이 좋습니다.는 <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>또는 <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName>GetElementsByTagName 메서드 대신 메서드.</xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> </xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Xml.XmlNodeList GetElementsByTagName (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "와 일치 하도록 로컬 이름입니다. 별표 (*)는 모든 태그와 일치 하는 특수 값입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 URI와 일치 하도록 합니다."
    return:
      type: System.Xml.XmlNodeList
      description: "<xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> 일치 하는 모든 노드 목록이 포함 된 합니다. 일치 하는 노드가 없는 경우에 목록이 비어 있습니다."
  overload: System.Xml.XmlElement.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.HasAttribute(System.String)
  id: HasAttribute(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: HasAttribute(String)
  nameWithType: XmlElement.HasAttribute(String)
  fullName: System.Xml.XmlElement.HasAttribute(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "현재 노드가 지정 된 이름의 특성이 있는지 확인 합니다."
  remarks: ''
  example:
  - "The following example checks to see if the element has the specified attribute.  \n  \n [!code-cs[Classic WebData XmlElement.HasAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._7_1.cs)]\n [!code-vb[Classic WebData XmlElement.HasAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._7_1.vb)]\n [!code-cpp[Classic WebData XmlElement.HasAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._7_1.cpp)]"
  syntax:
    content: public virtual bool HasAttribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "찾을 특성의 이름입니다. 정규화 된 이름입니다. 일치는 <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> 일치 하는 노드의 속성입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 노드에 지정된 된 특성 있으면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xml.XmlElement.HasAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.HasAttribute(System.String,System.String)
  id: HasAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: HasAttribute(String,String)
  nameWithType: XmlElement.HasAttribute(String,String)
  fullName: System.Xml.XmlElement.HasAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "현재 노드가 지정 된 로컬 이름과 네임 스페이스 URI 사용 하 여 특성에 있는지 여부를 결정 합니다."
  syntax:
    content: public virtual bool HasAttribute (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "찾을 특성의 로컬 이름입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 특성의 URI 찾으려고 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 노드에 지정된 된 특성 있으면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xml.XmlElement.HasAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.HasAttributes
  id: HasAttributes
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: HasAttributes
  nameWithType: XmlElement.HasAttributes
  fullName: System.Xml.XmlElement.HasAttributes
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "가져옵니다는 <xref uid=&quot;langword_csharp_boolean&quot; name=&quot;boolean&quot; href=&quot;&quot;> </xref> 현재 노드에 특성이 있는지 여부를 나타내는 값입니다."
  remarks: "이 속성은 문서 개체 모델 (DOM)에 Microsoft 확장입니다."
  example:
  - "The following example removes all attributes from the root element.  \n  \n [!code-cpp[Classic WebData XmlElement.HasAttributes Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._5_1.cpp)]\n [!code-vb[Classic WebData XmlElement.HasAttributes Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._5_1.vb)]\n [!code-cs[Classic WebData XmlElement.HasAttributes Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._5_1.cs)]"
  syntax:
    content: public virtual bool HasAttributes { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 노드에 특성이; 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xml.XmlElement.HasAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.InnerText
  id: InnerText
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: InnerText
  nameWithType: XmlElement.InnerText
  fullName: System.Xml.XmlElement.InnerText
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "노드와 모든 자식의 연결된 된 값을 가져오거나 설정 합니다."
  remarks: "이 속성을 설정 모든 자식이 지정된 된 문자열의 구문 분석 된 내용으로 바뀝니다.       이 속성은 문서 개체 모델 (DOM)에 Microsoft 확장입니다."
  example:
  - "The following example compares the `InnerText` and <xref:System.Xml.XmlElement.InnerXml%2A> properties.  \n  \n [!code-cpp[Classic WebData XmlElement.InnerXml Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._7_1.cpp)]\n [!code-cs[Classic WebData XmlElement.InnerXml Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._7_1.cs)]\n [!code-vb[Classic WebData XmlElement.InnerXml Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._7_1.vb)]"
  syntax:
    content: public override string InnerText { get; set; }
    return:
      type: System.String
      description: "노드와 모든 자식의 연결 된 값."
  overload: System.Xml.XmlElement.InnerText*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.InnerXml
  id: InnerXml
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: InnerXml
  nameWithType: XmlElement.InnerXml
  fullName: System.Xml.XmlElement.InnerXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "이 노드의 자식을 나타내는 태그를 가져오거나 설정 합니다."
  remarks: "이 속성을 설정 노드의 자식이 지정된 된 문자열의 구문 분석 된 내용으로 바뀝니다. 현재 네임 스페이스 컨텍스트에서 구문 분석이 수행 됩니다.       이 속성은 문서 개체 모델 (DOM)에 Microsoft 확장입니다."
  example:
  - "The following example compares the <xref:System.Xml.XmlElement.InnerText%2A> and `InnerXml` properties.  \n  \n [!code-cpp[Classic WebData XmlElement.InnerXml Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._2_1.cpp)]\n [!code-cs[Classic WebData XmlElement.InnerXml Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._2_1.cs)]\n [!code-vb[Classic WebData XmlElement.InnerXml Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._2_1.vb)]"
  syntax:
    content: public override string InnerXml { get; set; }
    return:
      type: System.String
      description: "이 노드의 자식 나타내는 태그입니다."
  overload: System.Xml.XmlElement.InnerXml*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "지정 된 XML이 경우이 속성을 설정 형식이 잘못 되었습니다."
  platform:
  - net462
- uid: System.Xml.XmlElement.IsEmpty
  id: IsEmpty
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: IsEmpty
  nameWithType: XmlElement.IsEmpty
  fullName: System.Xml.XmlElement.IsEmpty
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "요소의 태그 서식을 가져오거나 설정 합니다."
  remarks: "이 속성은 문서 개체 모델 (DOM)의 Microsoft 확장입니다."
  example:
  - "The following example adds content to an empty element.  \n  \n [!code-cpp[Classic WebData XmlElement.IsEmpty Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._8_1.cpp)]\n [!code-cs[Classic WebData XmlElement.IsEmpty Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._8_1.cs)]\n [!code-vb[Classic WebData XmlElement.IsEmpty Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._8_1.vb)]"
  syntax:
    content: public bool IsEmpty { get; set; }
    return:
      type: System.Boolean
      description: "반환 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 요소가 짧은 태그 형식으로 직렬화 하는 경우 &quot;&lt;항목 /&gt;&quot;; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> for the long format &quot;&lt;item&gt;&lt;/item&gt;&quot;.       이 속성을 설정할 때로 설정 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, 요소의 자식이 제거 되 고 요소가 짧은 태그 형식으로 직렬화 됩니다. 경우로 설정 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, (에 관계 없이 여부 요소의 내용이) 속성의 값이 변경; 해당 요소가 비어 있으면 긴 형식으로 직렬화 됩니다.       이 속성은 문서 개체 모델 (DOM)에 Microsoft 확장입니다."
  overload: System.Xml.XmlElement.IsEmpty*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.LocalName
  id: LocalName
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: LocalName
  nameWithType: XmlElement.LocalName
  fullName: System.Xml.XmlElement.LocalName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "현재 노드의 로컬 이름을 가져옵니다."
  remarks: "노드는 접두사가 없는 경우 `LocalName` <xref:System.Xml.XmlElement.Name%2A>.</xref:System.Xml.XmlElement.Name%2A> 와 같습니다"
  example:
  - "The following example displays information on the ISBN element.  \n  \n [!code-vb[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._4_1.vb)]\n [!code-cs[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._4_1.cs)]\n [!code-cpp[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._4_1.cpp)]"
  syntax:
    content: public override string LocalName { get; }
    return:
      type: System.String
      description: "접두사와 함께 현재 노드의 이름을 제거 합니다. 예를 들어 <xref uid=&quot;langword_csharp_LocalName&quot; name=&quot;LocalName&quot; href=&quot;&quot;> </xref> 은 book 요소에 대 한 &lt;예&gt;합니다."
  overload: System.Xml.XmlElement.LocalName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.Name
  id: Name
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: Name
  nameWithType: XmlElement.Name
  fullName: System.Xml.XmlElement.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "노드의 정규화 된 이름을 가져옵니다."
  remarks: ''
  example:
  - "The following example displays information on the ISBN element.  \n  \n [!code-cpp[Classic WebData XmlElement.Name Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._1_1.cpp)]\n [!code-cs[Classic WebData XmlElement.Name Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._1_1.cs)]\n [!code-vb[Classic WebData XmlElement.Name Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._1_1.vb)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "노드의 정규화 된 이름입니다. 에 대 한 <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> 노드 요소의 태그 이름입니다."
  overload: System.Xml.XmlElement.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.NamespaceURI
  id: NamespaceURI
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: NamespaceURI
  nameWithType: XmlElement.NamespaceURI
  fullName: System.Xml.XmlElement.NamespaceURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "이 노드의 URI 네임 스페이스를 가져옵니다."
  remarks: "네임 스페이스를 만들 때 지정 된 URI입니다. 예를 들어 `NamespaceURI` urn: 요소에 대 한 샘플은 \\<예 xmlns:bk = &quot;urn: 예제&quot; >"
  example:
  - "The following example displays information on the ISBN element.  \n  \n [!code-vb[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._6_1.vb)]\n [!code-cs[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._6_1.cs)]\n [!code-cpp[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._6_1.cpp)]"
  syntax:
    content: public override string NamespaceURI { get; }
    return:
      type: System.String
      description: "네임 스페이스가이 노드의 URI입니다. 네임 스페이스 URI가 없는 경우이 속성은 String.Empty를 반환 합니다."
  overload: System.Xml.XmlElement.NamespaceURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.NextSibling
  id: NextSibling
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: NextSibling
  nameWithType: XmlElement.NextSibling
  fullName: System.Xml.XmlElement.NextSibling
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "가져옵니다는 <xref href=&quot;System.Xml.XmlNode&quot;> </xref> 이 요소 바로 다음 합니다."
  syntax:
    content: public override System.Xml.XmlNode NextSibling { get; }
    return:
      type: System.Xml.XmlNode
      description: "<xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;> </xref> 이 요소 바로 다음 합니다."
  overload: System.Xml.XmlElement.NextSibling*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.NodeType
  id: NodeType
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: NodeType
  nameWithType: XmlElement.NodeType
  fullName: System.Xml.XmlElement.NodeType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "현재 노드의 형식을 가져옵니다."
  syntax:
    content: public override System.Xml.XmlNodeType NodeType { get; }
    return:
      type: System.Xml.XmlNodeType
      description: "노드 형식입니다. 에 대 한 <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> 노드의 경우이 값은 XmlNodeType.Element 합니다."
  overload: System.Xml.XmlElement.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.OwnerDocument
  id: OwnerDocument
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: OwnerDocument
  nameWithType: XmlElement.OwnerDocument
  fullName: System.Xml.XmlElement.OwnerDocument
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "가져옵니다는 <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> 이 노드가 속한를 합니다."
  remarks: "현재 노드에 노드를 추가할 때 사용 하 여는 `XmlDocument` 에서 반환 되는 `OwnerDocument` 속성 노드를 만듭니다."
  example:
  - "The following example inserts a new element into an XML document.  \n  \n [!code-cpp[Classic WebData XmlElement.OwnerDocument Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._3_1.cpp)]\n [!code-vb[Classic WebData XmlElement.OwnerDocument Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._3_1.vb)]\n [!code-cs[Classic WebData XmlElement.OwnerDocument Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._3_1.cs)]"
  syntax:
    content: public override System.Xml.XmlDocument OwnerDocument { get; }
    return:
      type: System.Xml.XmlDocument
      description: "<xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> 이 요소가 속한를 합니다."
  overload: System.Xml.XmlElement.OwnerDocument*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.ParentNode
  id: ParentNode
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: ParentNode
  nameWithType: XmlElement.ParentNode
  fullName: System.Xml.XmlElement.ParentNode
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "(부모를 가질 수 있는 노드)에 대 한이 노드의 부모를 가져옵니다."
  syntax:
    content: public override System.Xml.XmlNode ParentNode { get; }
    return:
      type: System.Xml.XmlNode
      description: "<xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;> </xref> 현재 노드의 부모인 합니다. 노드를 만든 경우 및 아직 트리를 추가 하지 또는 트리에서 제거 된 경우 부모는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다. 다른 모든 노드에 대해 반환 되는 값에는 <xref:System.Xml.XmlNode.NodeType*>노드의.</xref:System.Xml.XmlNode.NodeType*> 다음 표에서 가능한 반환 값에 대 한 설명의 <xref uid=&quot;langword_csharp_ParentNode&quot; name=&quot;ParentNode&quot; href=&quot;&quot;> </xref> 속성입니다."
  overload: System.Xml.XmlElement.ParentNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.Prefix
  id: Prefix
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: Prefix
  nameWithType: XmlElement.Prefix
  fullName: System.Xml.XmlElement.Prefix
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "이 노드의 네임 스페이스 접두사를 가져오거나 설정 합니다."
  remarks: "설정 속성 변경 내용을이 <xref:System.Xml.XmlElement.Name%2A>속성에 대 한 정규화 된 이름을 포함 하는 `XmlElement`.</xref:System.Xml.XmlElement.Name%2A> 그러나 접두사를 변경 해도 요소의 네임 스페이스 URI는 변경 되지 않습니다."
  example:
  - "The following example displays information on the ISBN element.  \n  \n [!code-vb[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._9_1.vb)]\n [!code-cs[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._9_1.cs)]\n [!code-cpp[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._9_1.cpp)]"
  syntax:
    content: public override string Prefix { get; set; }
    return:
      type: System.String
      description: "이 노드의 네임 스페이스 접두사입니다. 접두사가 없는 경우이 속성은 String.Empty를 반환 합니다."
  overload: System.Xml.XmlElement.Prefix*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "이 노드는 읽기 전용"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "지정된 된 접두사에 잘못 된 문자가 있습니다.       지정된 된 접두사의 형식이 잘못 되었습니다.       이 노드의 네임 스페이스 Uri가 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다.       지정 된 접두사가 &quot;xml&quot;이 고이 노드의 네임 스페이스 Uri가 http://www.w3.org/XML/1998/namespace와에서 다른 합니다."
  platform:
  - net462
- uid: System.Xml.XmlElement.RemoveAll
  id: RemoveAll
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: RemoveAll()
  nameWithType: XmlElement.RemoveAll()
  fullName: System.Xml.XmlElement.RemoveAll()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "모든 지정 된 특성 및 현재 노드의 자식 항목을 제거합니다. 기본 특성은 제거 되지 않습니다."
  remarks: ''
  example:
  - "The following example removes all attributes and child nodes from the root element.  \n  \n [!code-cpp[Classic WebData XmlElement.RemoveAll Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._6_1.cpp)]\n [!code-vb[Classic WebData XmlElement.RemoveAll Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._6_1.vb)]\n [!code-cs[Classic WebData XmlElement.RemoveAll Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._6_1.cs)]"
  syntax:
    content: public override void RemoveAll ();
    parameters: []
  overload: System.Xml.XmlElement.RemoveAll*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.RemoveAllAttributes
  id: RemoveAllAttributes
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: RemoveAllAttributes()
  nameWithType: XmlElement.RemoveAllAttributes()
  fullName: System.Xml.XmlElement.RemoveAllAttributes()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "요소에서 지정 된 모든 특성을 제거합니다. 기본 특성은 제거 되지 않습니다."
  remarks: "이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  example:
  - "The following example removes all attributes from the root element.  \n  \n [!code-cpp[Classic WebData XmlElement.RemoveAllAttributes Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._9_1.cpp)]\n [!code-cs[Classic WebData XmlElement.RemoveAllAttributes Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._9_1.cs)]\n [!code-vb[Classic WebData XmlElement.RemoveAllAttributes Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._9_1.vb)]"
  syntax:
    content: public virtual void RemoveAllAttributes ();
    parameters: []
  overload: System.Xml.XmlElement.RemoveAllAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.RemoveAttribute(System.String)
  id: RemoveAttribute(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: RemoveAttribute(String)
  nameWithType: XmlElement.RemoveAttribute(String)
  fullName: System.Xml.XmlElement.RemoveAttribute(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "이름으로 특성을 제거 합니다."
  remarks: "제거 된 특성 기본값을 포함 하는 특성 즉시 표시는 기본 값을 가질 경우 및 해당 하는 경우 해당 네임 스페이스 URI, 로컬 이름 및 접두사입니다."
  example:
  - "The following example removes an attribute from an element.  \n  \n [!code-cpp[Classic WebData XmlElement.RemoveAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._1_1.cpp)]\n [!code-cs[Classic WebData XmlElement.RemoveAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._1_1.cs)]\n [!code-vb[Classic WebData XmlElement.RemoveAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._1_1.vb)]"
  syntax:
    content: public virtual void RemoveAttribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "제거할 특성의 이름입니다. 정규화 된 이름입니다. 일치는 <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> 일치 하는 노드의 속성입니다."
  overload: System.Xml.XmlElement.RemoveAttribute*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "노드는 읽기 전용입니다."
  platform:
  - net462
- uid: System.Xml.XmlElement.RemoveAttribute(System.String,System.String)
  id: RemoveAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: RemoveAttribute(String,String)
  nameWithType: XmlElement.RemoveAttribute(String,String)
  fullName: System.Xml.XmlElement.RemoveAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 로컬 이름과 네임 스페이스 URI 사용 하 여 특성을 제거합니다. (제거한 특성 기본 값이 있으면 바로 대체)."
  remarks: "제거 된 특성 기본값을 포함 하는 특성 즉시 표시는 기본 값을 가질 경우 및 해당 하는 경우 해당 네임 스페이스 URI, 로컬 이름 및 접두사입니다."
  example:
  - "The following example removes an attribute from an element.  \n  \n [!code-cpp[Classic WebData XmlElement.RemoveAttribute1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._12_1.cpp)]\n [!code-vb[Classic WebData XmlElement.RemoveAttribute1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._12_1.vb)]\n [!code-cs[Classic WebData XmlElement.RemoveAttribute1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._12_1.cs)]"
  syntax:
    content: public virtual void RemoveAttribute (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "제거할 특성의 로컬 이름입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스를 제거 하려면 특성의 URI입니다."
  overload: System.Xml.XmlElement.RemoveAttribute*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "노드는 읽기 전용입니다."
  platform:
  - net462
- uid: System.Xml.XmlElement.RemoveAttributeAt(System.Int32)
  id: RemoveAttributeAt(System.Int32)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: RemoveAttributeAt(Int32)
  nameWithType: XmlElement.RemoveAttributeAt(Int32)
  fullName: System.Xml.XmlElement.RemoveAttributeAt(Int32)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "요소에서 지정 된 인덱스 특성 노드를 제거합니다. (제거한 특성 기본 값이 있으면 바로 대체)."
  remarks: "이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  example:
  - "The following example removes an attribute from an element.  \n  \n [!code-cpp[Classic WebData XmlElement.RemoveAttributeAt Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._2_1.cpp)]\n [!code-vb[Classic WebData XmlElement.RemoveAttributeAt Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._2_1.vb)]\n [!code-cs[Classic WebData XmlElement.RemoveAttributeAt Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._2_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlNode RemoveAttributeAt (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "제거할 노드의 인덱스입니다. 첫 번째 노드에 인덱스 0에 있습니다."
    return:
      type: System.Xml.XmlNode
      description: "특성 노드가 제거 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 지정된 된 인덱스에서 노드인 경우."
  overload: System.Xml.XmlElement.RemoveAttributeAt*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)
  id: RemoveAttributeNode(System.Xml.XmlAttribute)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: RemoveAttributeNode(XmlAttribute)
  nameWithType: XmlElement.RemoveAttributeNode(XmlAttribute)
  fullName: System.Xml.XmlElement.RemoveAttributeNode(XmlAttribute)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 제거 <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref>합니다."
  syntax:
    content: public virtual System.Xml.XmlAttribute RemoveAttributeNode (System.Xml.XmlAttribute oldAttr);
    parameters:
    - id: oldAttr
      type: System.Xml.XmlAttribute
      description: "<xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;> </xref> 노드를 제거 합니다. 제거한 특성 기본 값이 있으면 즉시 바뀝니다."
    return:
      type: System.Xml.XmlAttribute
      description: "제거 된 <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;> </xref> 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우 <code> oldAttr </code> 의 특성 노드가 <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xml.XmlElement.RemoveAttributeNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "이 노드는 읽기 전용입니다."
  platform:
  - net462
- uid: System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)
  id: RemoveAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: RemoveAttributeNode(String,String)
  nameWithType: XmlElement.RemoveAttributeNode(String,String)
  fullName: System.Xml.XmlElement.RemoveAttributeNode(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "제거는 <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> 로컬 이름 및 네임 스페이스 URI로 지정 합니다. (제거한 특성 기본 값이 있으면 바로 대체)."
  remarks: ''
  example:
  - "The following example removes an attribute from an element.  \n  \n [!code-cpp[Classic WebData XmlElement.RemoveAttributeNode1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._11_1.cpp)]\n [!code-cs[Classic WebData XmlElement.RemoveAttributeNode1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._11_1.cs)]\n [!code-vb[Classic WebData XmlElement.RemoveAttributeNode1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._11_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlAttribute RemoveAttributeNode (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "특성의 로컬 이름입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 특성의 URI입니다."
    return:
      type: System.Xml.XmlAttribute
      description: "제거 된 <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;> </xref> 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우는 <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> 일치 하는 특성 노드는 없습니다."
  overload: System.Xml.XmlElement.RemoveAttributeNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "이 노드는 읽기 전용입니다."
  platform:
  - net462
- uid: System.Xml.XmlElement.SchemaInfo
  id: SchemaInfo
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: SchemaInfo
  nameWithType: XmlElement.SchemaInfo
  fullName: System.Xml.XmlElement.SchemaInfo
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "스키마 유효성 검사 이후를 스키마 유효성 검사의 결과로이 노드에 할당 된를 가져옵니다."
  remarks: "이 노드의 유효성을 검사할 때 SchemaInfo 속성이 설정 되어 있습니다."
  syntax:
    content: public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "<xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref> 이 노드의 스키마 유효성 검사 이후를 포함 하는 개체입니다."
  overload: System.Xml.XmlElement.SchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.SetAttribute(System.String,System.String)
  id: SetAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: SetAttribute(String,String)
  nameWithType: XmlElement.SetAttribute(String,String)
  fullName: System.Xml.XmlElement.SetAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정한 이름 가진 특성의 값을 설정합니다."
  remarks: "해당 값이 변경 되는 요소에 동일한 이름의 특성이 이미 있으면 `value`합니다. `value`간단한 문자열이입니다. 설정 되는 구문 분석 되지 됩니다. 엔터티 참조로 인식 되도록 하려면 다음 구문 사용 같은 모든 태그 리터럴 텍스트로 처리 및 기록 될 때 제대로 구현 하 여 이스케이프 해야 합니다. 엔터티 참조를 포함 하는 특성 값을 지정 하려면 사용자를 만들어야는 <xref:System.Xml.XmlAttribute>노드와 함께 <xref:System.Xml.XmlText>및 <xref:System.Xml.XmlEntityReference>노드 적절 한 하위 트리를 작성 및 사용 하 여 <xref:System.Xml.XmlElement.SetAttributeNode%2A>특성의 값으로 할당할 수 있습니다.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlEntityReference> </xref:System.Xml.XmlText> </xref:System.Xml.XmlAttribute>"
  syntax:
    content: public virtual void SetAttribute (string name, string value);
    parameters:
    - id: name
      type: System.String
      description: "특성을 만들거나 변경할의 이름입니다. 정규화 된 이름입니다. 이름에 콜론이 포함 된 경우 접두사와 로컬 이름 구성 요소로 구문 분석 됩니다."
    - id: value
      type: System.String
      description: "특성에 대해 설정할 값입니다."
  overload: System.Xml.XmlElement.SetAttribute*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "지정된 된 이름에 잘못 된 문자가 포함 되어 있습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "노드는 읽기 전용입니다."
  platform:
  - net462
- uid: System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)
  id: SetAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: SetAttribute(String,String,String)
  nameWithType: XmlElement.SetAttribute(String,String,String)
  fullName: System.Xml.XmlElement.SetAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 로컬 이름과 네임 스페이스 URI가 있는 특성의 값을 설정합니다."
  syntax:
    content: public virtual string SetAttribute (string localName, string namespaceURI, string value);
    parameters:
    - id: localName
      type: System.String
      description: "특성의 로컬 이름입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 특성의 URI입니다."
    - id: value
      type: System.String
      description: "특성에 대해 설정할 값입니다."
    return:
      type: System.String
      description: "특성 값입니다."
  overload: System.Xml.XmlElement.SetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)
  id: SetAttributeNode(System.Xml.XmlAttribute)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: SetAttributeNode(XmlAttribute)
  nameWithType: XmlElement.SetAttributeNode(XmlAttribute)
  fullName: System.Xml.XmlElement.SetAttributeNode(XmlAttribute)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 추가 <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref>합니다."
  remarks: "요소에 해당 이름 가진 특성이 이미 있으면 새 식으로 대체 됩니다."
  syntax:
    content: public virtual System.Xml.XmlAttribute SetAttributeNode (System.Xml.XmlAttribute newAttr);
    parameters:
    - id: newAttr
      type: System.Xml.XmlAttribute
      description: "<xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;> </xref> 노드를이 요소에 대 한 특성 컬렉션에 추가 합니다."
    return:
      type: System.Xml.XmlAttribute
      description: "특성이 동일한 기존 특성을 대체 하는 경우 이름, 이전 <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;> </xref> 반환 되 고, 그러지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 반환 됩니다."
  overload: System.Xml.XmlElement.SetAttributeNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> newAttr </code> 이 노드를 다른 문서에서 생성 합니다. 또는이 노드는 읽기 전용입니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code> newAttr </code> 는 이미 다른 특성 <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> 개체입니다. 명시적으로 복제 해야 <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;> </xref> 다른에서 다시 사용 하는 노드 <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> 개체입니다."
  platform:
  - net462
- uid: System.Xml.XmlElement.SetAttributeNode(System.String,System.String)
  id: SetAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: SetAttributeNode(String,String)
  nameWithType: XmlElement.SetAttributeNode(String,String)
  fullName: System.Xml.XmlElement.SetAttributeNode(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 추가 <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref>합니다."
  remarks: "`XmlAttribute` 자식을 포함 하지 않습니다. 사용 하 여 <xref:System.Xml.XmlAttribute.Value%2A>특성에는 텍스트 값을 할당 하거나 사용 하 여 <xref:System.Xml.XmlNode.AppendChild%2A>(또는 비슷한 메서드) 특성에 자식을 추가할 수 있습니다.</xref:System.Xml.XmlNode.AppendChild%2A> </xref:System.Xml.XmlAttribute.Value%2A>"
  example:
  - "The following example adds an attribute to an element.  \n  \n [!code-cs[Classic WebData XmlElement.SetAttributeNode1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._4_1.cs)]\n [!code-vb[Classic WebData XmlElement.SetAttributeNode1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._4_1.vb)]\n [!code-cpp[Classic WebData XmlElement.SetAttributeNode1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._4_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlAttribute SetAttributeNode (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "특성의 로컬 이름입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 특성의 URI입니다."
    return:
      type: System.Xml.XmlAttribute
      description: "The <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref> to add."
  overload: System.Xml.XmlElement.SetAttributeNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)
  id: WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlElement.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlElement.WriteContentTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "노드의 모든 자식을 지정 <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> 저장"
  remarks: "이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  example:
  - "The following example displays the contents of the element to the console.  \n  \n [!code-cpp[Classic WebData XmlElement.WriteContentTo Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._8_1.cpp)]\n [!code-vb[Classic WebData XmlElement.WriteContentTo Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._8_1.vb)]\n [!code-cs[Classic WebData XmlElement.WriteContentTo Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._8_1.cs)]"
  syntax:
    content: public override void WriteContentTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> 를 저장 합니다."
  overload: System.Xml.XmlElement.WriteContentTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: WriteTo(XmlWriter)
  nameWithType: XmlElement.WriteTo(XmlWriter)
  fullName: System.Xml.XmlElement.WriteTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> 현재 노드"
  remarks: "이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  example:
  - "The following example adds an attribute to an element and then displays the modified element.  \n  \n [!code-cs[Classic WebData XmlElement.WriteTo Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._10_1.cs)]\n [!code-cpp[Classic WebData XmlElement.WriteTo Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._10_1.cpp)]\n [!code-vb[Classic WebData XmlElement.WriteTo Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._10_1.vb)]"
  syntax:
    content: public override void WriteTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> 를 저장 합니다."
  overload: System.Xml.XmlElement.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Xml.XmlLinkedNode
  isExternal: false
  name: System.Xml.XmlLinkedNode
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  parent: System.Xml.XmlElement
  isExternal: false
  name: XmlElement(String,String,String,XmlDocument)
  nameWithType: XmlElement.XmlElement(String,String,String,XmlDocument)
  fullName: System.Xml.XmlElement.XmlElement(String,String,String,XmlDocument)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml.XmlElement.Attributes
  parent: System.Xml.XmlElement
  isExternal: false
  name: Attributes
  nameWithType: XmlElement.Attributes
  fullName: System.Xml.XmlElement.Attributes
- uid: System.Xml.XmlAttributeCollection
  parent: System.Xml
  isExternal: false
  name: XmlAttributeCollection
  nameWithType: XmlAttributeCollection
  fullName: System.Xml.XmlAttributeCollection
- uid: System.Xml.XmlElement.CloneNode(System.Boolean)
  parent: System.Xml.XmlElement
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlElement.CloneNode(Boolean)
  fullName: System.Xml.XmlElement.CloneNode(Boolean)
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlElement.GetAttribute(System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetAttribute(String)
  nameWithType: XmlElement.GetAttribute(String)
  fullName: System.Xml.XmlElement.GetAttribute(String)
- uid: System.Xml.XmlElement.GetAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetAttribute(String,String)
  nameWithType: XmlElement.GetAttribute(String,String)
  fullName: System.Xml.XmlElement.GetAttribute(String,String)
- uid: System.Xml.XmlElement.GetAttributeNode(System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetAttributeNode(String)
  nameWithType: XmlElement.GetAttributeNode(String)
  fullName: System.Xml.XmlElement.GetAttributeNode(String)
- uid: System.Xml.XmlAttribute
  parent: System.Xml
  isExternal: false
  name: XmlAttribute
  nameWithType: XmlAttribute
  fullName: System.Xml.XmlAttribute
- uid: System.Xml.XmlElement.GetAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetAttributeNode(String,String)
  nameWithType: XmlElement.GetAttributeNode(String,String)
  fullName: System.Xml.XmlElement.GetAttributeNode(String,String)
- uid: System.Xml.XmlElement.GetElementsByTagName(System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: XmlElement.GetElementsByTagName(String)
  fullName: System.Xml.XmlElement.GetElementsByTagName(String)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetElementsByTagName(String,String)
  nameWithType: XmlElement.GetElementsByTagName(String,String)
  fullName: System.Xml.XmlElement.GetElementsByTagName(String,String)
- uid: System.Xml.XmlElement.HasAttribute(System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: HasAttribute(String)
  nameWithType: XmlElement.HasAttribute(String)
  fullName: System.Xml.XmlElement.HasAttribute(String)
- uid: System.Xml.XmlElement.HasAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: HasAttribute(String,String)
  nameWithType: XmlElement.HasAttribute(String,String)
  fullName: System.Xml.XmlElement.HasAttribute(String,String)
- uid: System.Xml.XmlElement.HasAttributes
  parent: System.Xml.XmlElement
  isExternal: false
  name: HasAttributes
  nameWithType: XmlElement.HasAttributes
  fullName: System.Xml.XmlElement.HasAttributes
- uid: System.Xml.XmlElement.InnerText
  parent: System.Xml.XmlElement
  isExternal: false
  name: InnerText
  nameWithType: XmlElement.InnerText
  fullName: System.Xml.XmlElement.InnerText
- uid: System.Xml.XmlElement.InnerXml
  parent: System.Xml.XmlElement
  isExternal: false
  name: InnerXml
  nameWithType: XmlElement.InnerXml
  fullName: System.Xml.XmlElement.InnerXml
- uid: System.Xml.XmlElement.IsEmpty
  parent: System.Xml.XmlElement
  isExternal: false
  name: IsEmpty
  nameWithType: XmlElement.IsEmpty
  fullName: System.Xml.XmlElement.IsEmpty
- uid: System.Xml.XmlElement.LocalName
  parent: System.Xml.XmlElement
  isExternal: false
  name: LocalName
  nameWithType: XmlElement.LocalName
  fullName: System.Xml.XmlElement.LocalName
- uid: System.Xml.XmlElement.Name
  parent: System.Xml.XmlElement
  isExternal: false
  name: Name
  nameWithType: XmlElement.Name
  fullName: System.Xml.XmlElement.Name
- uid: System.Xml.XmlElement.NamespaceURI
  parent: System.Xml.XmlElement
  isExternal: false
  name: NamespaceURI
  nameWithType: XmlElement.NamespaceURI
  fullName: System.Xml.XmlElement.NamespaceURI
- uid: System.Xml.XmlElement.NextSibling
  parent: System.Xml.XmlElement
  isExternal: false
  name: NextSibling
  nameWithType: XmlElement.NextSibling
  fullName: System.Xml.XmlElement.NextSibling
- uid: System.Xml.XmlElement.NodeType
  parent: System.Xml.XmlElement
  isExternal: false
  name: NodeType
  nameWithType: XmlElement.NodeType
  fullName: System.Xml.XmlElement.NodeType
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: true
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.XmlElement.OwnerDocument
  parent: System.Xml.XmlElement
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlElement.OwnerDocument
  fullName: System.Xml.XmlElement.OwnerDocument
- uid: System.Xml.XmlElement.ParentNode
  parent: System.Xml.XmlElement
  isExternal: false
  name: ParentNode
  nameWithType: XmlElement.ParentNode
  fullName: System.Xml.XmlElement.ParentNode
- uid: System.Xml.XmlElement.Prefix
  parent: System.Xml.XmlElement
  isExternal: false
  name: Prefix
  nameWithType: XmlElement.Prefix
  fullName: System.Xml.XmlElement.Prefix
- uid: System.Xml.XmlElement.RemoveAll
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAll()
  nameWithType: XmlElement.RemoveAll()
  fullName: System.Xml.XmlElement.RemoveAll()
- uid: System.Xml.XmlElement.RemoveAllAttributes
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAllAttributes()
  nameWithType: XmlElement.RemoveAllAttributes()
  fullName: System.Xml.XmlElement.RemoveAllAttributes()
- uid: System.Xml.XmlElement.RemoveAttribute(System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttribute(String)
  nameWithType: XmlElement.RemoveAttribute(String)
  fullName: System.Xml.XmlElement.RemoveAttribute(String)
- uid: System.Xml.XmlElement.RemoveAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttribute(String,String)
  nameWithType: XmlElement.RemoveAttribute(String,String)
  fullName: System.Xml.XmlElement.RemoveAttribute(String,String)
- uid: System.Xml.XmlElement.RemoveAttributeAt(System.Int32)
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttributeAt(Int32)
  nameWithType: XmlElement.RemoveAttributeAt(Int32)
  fullName: System.Xml.XmlElement.RemoveAttributeAt(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttributeNode(XmlAttribute)
  nameWithType: XmlElement.RemoveAttributeNode(XmlAttribute)
  fullName: System.Xml.XmlElement.RemoveAttributeNode(XmlAttribute)
- uid: System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttributeNode(String,String)
  nameWithType: XmlElement.RemoveAttributeNode(String,String)
  fullName: System.Xml.XmlElement.RemoveAttributeNode(String,String)
- uid: System.Xml.XmlElement.SchemaInfo
  parent: System.Xml.XmlElement
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlElement.SchemaInfo
  fullName: System.Xml.XmlElement.SchemaInfo
- uid: System.Xml.Schema.IXmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: IXmlSchemaInfo
  nameWithType: IXmlSchemaInfo
  fullName: System.Xml.Schema.IXmlSchemaInfo
- uid: System.Xml.XmlElement.SetAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: SetAttribute(String,String)
  nameWithType: XmlElement.SetAttribute(String,String)
  fullName: System.Xml.XmlElement.SetAttribute(String,String)
- uid: System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: SetAttribute(String,String,String)
  nameWithType: XmlElement.SetAttribute(String,String,String)
  fullName: System.Xml.XmlElement.SetAttribute(String,String,String)
- uid: System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)
  parent: System.Xml.XmlElement
  isExternal: false
  name: SetAttributeNode(XmlAttribute)
  nameWithType: XmlElement.SetAttributeNode(XmlAttribute)
  fullName: System.Xml.XmlElement.SetAttributeNode(XmlAttribute)
- uid: System.Xml.XmlElement.SetAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: SetAttributeNode(String,String)
  nameWithType: XmlElement.SetAttributeNode(String,String)
  fullName: System.Xml.XmlElement.SetAttributeNode(String,String)
- uid: System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlElement
  isExternal: false
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlElement.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlElement.WriteContentTo(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlElement
  isExternal: false
  name: WriteTo(XmlWriter)
  nameWithType: XmlElement.WriteTo(XmlWriter)
  fullName: System.Xml.XmlElement.WriteTo(XmlWriter)
- uid: System.Xml.XmlElement.#ctor*
  parent: System.Xml.XmlElement
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement.XmlElement
- uid: System.Xml.XmlElement.Attributes*
  parent: System.Xml.XmlElement
  isExternal: false
  name: Attributes
  nameWithType: XmlElement.Attributes
- uid: System.Xml.XmlElement.CloneNode*
  parent: System.Xml.XmlElement
  isExternal: false
  name: CloneNode
  nameWithType: XmlElement.CloneNode
- uid: System.Xml.XmlElement.GetAttribute*
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetAttribute
  nameWithType: XmlElement.GetAttribute
- uid: System.Xml.XmlElement.GetAttributeNode*
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetAttributeNode
  nameWithType: XmlElement.GetAttributeNode
- uid: System.Xml.XmlElement.GetElementsByTagName*
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetElementsByTagName
  nameWithType: XmlElement.GetElementsByTagName
- uid: System.Xml.XmlElement.HasAttribute*
  parent: System.Xml.XmlElement
  isExternal: false
  name: HasAttribute
  nameWithType: XmlElement.HasAttribute
- uid: System.Xml.XmlElement.HasAttributes*
  parent: System.Xml.XmlElement
  isExternal: false
  name: HasAttributes
  nameWithType: XmlElement.HasAttributes
- uid: System.Xml.XmlElement.InnerText*
  parent: System.Xml.XmlElement
  isExternal: false
  name: InnerText
  nameWithType: XmlElement.InnerText
- uid: System.Xml.XmlElement.InnerXml*
  parent: System.Xml.XmlElement
  isExternal: false
  name: InnerXml
  nameWithType: XmlElement.InnerXml
- uid: System.Xml.XmlElement.IsEmpty*
  parent: System.Xml.XmlElement
  isExternal: false
  name: IsEmpty
  nameWithType: XmlElement.IsEmpty
- uid: System.Xml.XmlElement.LocalName*
  parent: System.Xml.XmlElement
  isExternal: false
  name: LocalName
  nameWithType: XmlElement.LocalName
- uid: System.Xml.XmlElement.Name*
  parent: System.Xml.XmlElement
  isExternal: false
  name: Name
  nameWithType: XmlElement.Name
- uid: System.Xml.XmlElement.NamespaceURI*
  parent: System.Xml.XmlElement
  isExternal: false
  name: NamespaceURI
  nameWithType: XmlElement.NamespaceURI
- uid: System.Xml.XmlElement.NextSibling*
  parent: System.Xml.XmlElement
  isExternal: false
  name: NextSibling
  nameWithType: XmlElement.NextSibling
- uid: System.Xml.XmlElement.NodeType*
  parent: System.Xml.XmlElement
  isExternal: false
  name: NodeType
  nameWithType: XmlElement.NodeType
- uid: System.Xml.XmlElement.OwnerDocument*
  parent: System.Xml.XmlElement
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlElement.OwnerDocument
- uid: System.Xml.XmlElement.ParentNode*
  parent: System.Xml.XmlElement
  isExternal: false
  name: ParentNode
  nameWithType: XmlElement.ParentNode
- uid: System.Xml.XmlElement.Prefix*
  parent: System.Xml.XmlElement
  isExternal: false
  name: Prefix
  nameWithType: XmlElement.Prefix
- uid: System.Xml.XmlElement.RemoveAll*
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAll
  nameWithType: XmlElement.RemoveAll
- uid: System.Xml.XmlElement.RemoveAllAttributes*
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAllAttributes
  nameWithType: XmlElement.RemoveAllAttributes
- uid: System.Xml.XmlElement.RemoveAttribute*
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttribute
  nameWithType: XmlElement.RemoveAttribute
- uid: System.Xml.XmlElement.RemoveAttributeAt*
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttributeAt
  nameWithType: XmlElement.RemoveAttributeAt
- uid: System.Xml.XmlElement.RemoveAttributeNode*
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttributeNode
  nameWithType: XmlElement.RemoveAttributeNode
- uid: System.Xml.XmlElement.SchemaInfo*
  parent: System.Xml.XmlElement
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlElement.SchemaInfo
- uid: System.Xml.XmlElement.SetAttribute*
  parent: System.Xml.XmlElement
  isExternal: false
  name: SetAttribute
  nameWithType: XmlElement.SetAttribute
- uid: System.Xml.XmlElement.SetAttributeNode*
  parent: System.Xml.XmlElement
  isExternal: false
  name: SetAttributeNode
  nameWithType: XmlElement.SetAttributeNode
- uid: System.Xml.XmlElement.WriteContentTo*
  parent: System.Xml.XmlElement
  isExternal: false
  name: WriteContentTo
  nameWithType: XmlElement.WriteContentTo
- uid: System.Xml.XmlElement.WriteTo*
  parent: System.Xml.XmlElement
  isExternal: false
  name: WriteTo
  nameWithType: XmlElement.WriteTo
