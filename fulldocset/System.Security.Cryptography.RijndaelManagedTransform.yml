### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.RijndaelManagedTransform
  id: RijndaelManagedTransform
  children:
  - System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
  - System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
  - System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
  - System.Security.Cryptography.RijndaelManagedTransform.Clear
  - System.Security.Cryptography.RijndaelManagedTransform.Dispose
  - System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
  - System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
  - System.Security.Cryptography.RijndaelManagedTransform.Reset
  - System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: RijndaelManagedTransform
  nameWithType: RijndaelManagedTransform
  fullName: System.Security.Cryptography.RijndaelManagedTransform
  type: Class
  summary: "Rijndael 알고리즘을 사용 하 여 데이터의 암호화 변환을 수행 합니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "> [!NOTE]>이 클래스를 사용 하는 권장 되지 않습니다. 사용 하는 것이 좋습니다 <xref:System.Security.Cryptography.RijndaelManaged>와 <xref:System.Security.Cryptography.CryptoStream>개체입니다.</xref:System.Security.Cryptography.CryptoStream> </xref:System.Security.Cryptography.RijndaelManaged> <xref:System.Security.Cryptography.CryptoStream>RijndaelManagedTransform를 직접 사용 하는 경우 발생할 수 있는 패딩 문제를 처리 하는 개체입니다.</xref:System.Security.Cryptography.CryptoStream> 예를 들어, <xref:System.Security.Cryptography.RijndaelManaged>클래스</xref:System.Security.Cryptography.RijndaelManaged> 를 참조 하십시오.       둘 다는 <xref:System.Security.Cryptography.RijndaelManaged.CreateEncryptor%2A>및 <xref:System.Security.Cryptography.RijndaelManaged.CreateDecryptor%2A>현재 키 정보를 사용 하 여 초기화 되는 RijndaelManagedTransform 클래스의 인스턴스를 반환 하는 메서드 <xref:System.Security.Cryptography.RijndaelManaged>개체입니다.</xref:System.Security.Cryptography.RijndaelManaged> </xref:System.Security.Cryptography.RijndaelManaged.CreateDecryptor%2A> </xref:System.Security.Cryptography.RijndaelManaged.CreateEncryptor%2A>  를 암호화 하거나 Rijndael 알고리즘을 사용 하 여 데이터의 암호를 해독 하려면 이러한 메서드를 반환한 RijndaelManagedTransform 개체에 전달 된 <xref:System.Security.Cryptography.CryptoStream>개체입니다.</xref:System.Security.Cryptography.CryptoStream>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class RijndaelManagedTransform : System.Security.Cryptography.ICryptoTransform
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICryptoTransform
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
  id: BlockSizeValue
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: BlockSizeValue
  nameWithType: RijndaelManagedTransform.BlockSizeValue
  fullName: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "블록 크기를 가져옵니다."
  syntax:
    content: public int BlockSizeValue { get; }
    return:
      type: System.Int32
      description: "바이트의 데이터 블록의 크기입니다."
  overload: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: RijndaelManagedTransform.CanReuseTransform
  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 변형을 다시 사용할 수 있는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: RijndaelManagedTransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "여러 개의 블록을 변형할 수 있는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>여러 개의 블록을 변환할 수 있으면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.Clear
  id: Clear
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: Clear()
  nameWithType: RijndaelManagedTransform.Clear()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Security.Cryptography.RijndaelManagedTransform&quot;> </xref> 클래스입니다."
  remarks: "이 메서드는 <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>클래스</xref:System.IDisposable.Dispose%2A?displayProperty=fullName> 에 대 한 간단한 호출       호출 `Dispose` 에서 사용 하는 리소스는 <xref:System.Security.Cryptography.RijndaelManagedTransform>다른 용도에 다시 할당 됩니다.</xref:System.Security.Cryptography.RijndaelManagedTransform> 에 대 한 자세한 내용은 `Dispose`, 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.RijndaelManagedTransform.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.Dispose
  id: Dispose
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: Dispose()
  nameWithType: RijndaelManagedTransform.Dispose()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 인스턴스에서 사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Security.Cryptography.RijndaelManagedTransform&quot;> </xref> 클래스입니다."
  remarks: "호출 `Dispose` <xref:System.Security.Cryptography.RijndaelManagedTransform>.</xref:System.Security.Cryptography.RijndaelManagedTransform> 를 사용 하 여 작업을 마쳤으면 `Dispose` 메서드는 <xref:System.Security.Cryptography.RijndaelManagedTransform>불안정 한 상태가.</xref:System.Security.Cryptography.RijndaelManagedTransform> 호출한 후 `Dispose`에 대 한 모든 참조를 해제 해야는 <xref:System.Security.Cryptography.RijndaelManagedTransform>가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Security.Cryptography.RijndaelManagedTransform>차지한.</xref:System.Security.Cryptography.RijndaelManagedTransform> </xref:System.Security.Cryptography.RijndaelManagedTransform>       자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md) 및 [Dispose 메서드를 구현](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > 항상 호출 `Dispose` <xref:System.Security.Cryptography.RijndaelManagedTransform>.</xref:System.Security.Cryptography.RijndaelManagedTransform> 에 대 한 마지막 참조를 해제 하기 전에 사용 중인 리소스가 가비지 수집기 호출할 때까지 해제 되지 것입니다 그렇지 않은 경우는 <xref:System.Security.Cryptography.RijndaelManagedTransform>개체의 `Finalize` 메서드.</xref:System.Security.Cryptography.RijndaelManagedTransform>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.RijndaelManagedTransform.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: RijndaelManagedTransform.InputBlockSize
  fullName: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "입력된 블록 크기를 가져옵니다."
  syntax:
    content: public int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "입력된 데이터의 크기 (바이트)를 차단합니다."
  overload: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: RijndaelManagedTransform.OutputBlockSize
  fullName: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "출력 블록 크기를 가져옵니다."
  syntax:
    content: public int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "출력 데이터의 크기 (바이트)를 차단합니다."
  overload: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.Reset
  id: Reset
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: Reset()
  nameWithType: RijndaelManagedTransform.Reset()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "내부 상태를 다시 설정 <xref href=&quot;System.Security.Cryptography.RijndaelManagedTransform&quot;> </xref> 다른 암호화 또는 암호 해독 작업에 다시 사용할 수 있도록 합니다."
  remarks: "Reset 메서드 <xref:System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock%2A>.</xref:System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock%2A> 를 호출 하는 경우 자동으로 호출 됩니다. 예를 들어 입력된 암호화 된 데이터 가비지 상태이 고 해독할 수 없는 경우 Reset 메서드를 호출 하지 됩니다. 이 경우 예외가 발생 하 고 재설정이 호출 되지 않습니다. 직접이 예제의 Reset 메서드를 호출 하도록 선택할 수 있습니다."
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.Cryptography.RijndaelManagedTransform.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "입력된 바이트 배열의 지정된 된 영역에 대 한 변환을 계산 하 고 결과 변환을 출력 바이트 배열의 지정된 된 영역에 복사 합니다."
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "작업을 수행 하려면 입력 합니다."
    - id: inputOffset
      type: System.Int32
      description: "데이터 사용을 시작할 입력된 바이트 배열의 오프셋입니다."
    - id: inputCount
      type: System.Int32
      description: "데이터로 사용할 입력된 바이트 배열의 바이트 수입니다."
    - id: outputBuffer
      type: System.Byte[]
      description: "데이터를 쓸 출력입니다."
    - id: outputOffset
      type: System.Int32
      description: "데이터 쓰기를 시작할 출력 바이트 배열의 오프셋입니다."
    return:
      type: System.Int32
      description: "쓴 바이트 수입니다."
  overload: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>outputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "입력된 버퍼의 길이 사용 하면 입력 오프셋과 입력된 횟수의 합계 보다 작습니다.       -또는-의 값은 <code> inputCount </code> 매개 변수는 0 보다 작습니다.       -또는-의 값은 <code> inputCount </code> 매개 변수가의 길이 보다 크면는 <code> inputBuffer </code> 매개 변수입니다.       -또는-의 길이 <code> inputCount </code> 매개 변수가 입력된 블록 크기에 따라 떨어지지 않습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "값은 <code> inputOffset </code> 매개 변수가 음수입니다."
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정 된 바이트 배열의 지정된 된 영역에 대 한 변환을 계산합니다."
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "작업을 수행 하려면 입력 합니다."
    - id: inputOffset
      type: System.Int32
      description: "데이터 사용을 시작할 바이트 배열의 오프셋입니다."
    - id: inputCount
      type: System.Int32
      description: "데이터로 사용할 바이트 배열의 바이트 수입니다."
    return:
      type: System.Byte[]
      description: "계산 된 변환 합니다."
  overload: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "값은 <code> inputCount </code> 매개 변수는 0 보다 작습니다.       -또는-의 값은 <code> inputCount </code> 매개 변수는의 길이 보다 큰 <code> inputBuffer </code> 매개 변수입니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "값은 <code> inputOffset </code> 매개 변수가 음수입니다."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "길이 <code> inputCount </code> 매개 변수가 입력된 블록 크기에 따라 떨어지지 않습니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: BlockSizeValue
  nameWithType: RijndaelManagedTransform.BlockSizeValue
  fullName: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: RijndaelManagedTransform.CanReuseTransform
  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: RijndaelManagedTransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.RijndaelManagedTransform.Clear
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Clear()
  nameWithType: RijndaelManagedTransform.Clear()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Clear()
- uid: System.Security.Cryptography.RijndaelManagedTransform.Dispose
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Dispose()
  nameWithType: RijndaelManagedTransform.Dispose()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Dispose()
- uid: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: InputBlockSize
  nameWithType: RijndaelManagedTransform.InputBlockSize
  fullName: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
- uid: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: RijndaelManagedTransform.OutputBlockSize
  fullName: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
- uid: System.Security.Cryptography.RijndaelManagedTransform.Reset
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Reset()
  nameWithType: RijndaelManagedTransform.Reset()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Reset()
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: BlockSizeValue
  nameWithType: RijndaelManagedTransform.BlockSizeValue
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: RijndaelManagedTransform.CanReuseTransform
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: RijndaelManagedTransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.RijndaelManagedTransform.Clear*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Clear
  nameWithType: RijndaelManagedTransform.Clear
- uid: System.Security.Cryptography.RijndaelManagedTransform.Dispose*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Dispose
  nameWithType: RijndaelManagedTransform.Dispose
- uid: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: InputBlockSize
  nameWithType: RijndaelManagedTransform.InputBlockSize
- uid: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: RijndaelManagedTransform.OutputBlockSize
- uid: System.Security.Cryptography.RijndaelManagedTransform.Reset*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Reset
  nameWithType: RijndaelManagedTransform.Reset
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: TransformBlock
  nameWithType: RijndaelManagedTransform.TransformBlock
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: TransformFinalBlock
  nameWithType: RijndaelManagedTransform.TransformFinalBlock
