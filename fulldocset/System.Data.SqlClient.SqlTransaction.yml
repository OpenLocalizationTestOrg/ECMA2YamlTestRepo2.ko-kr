### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlTransaction
  id: SqlTransaction
  children:
  - System.Data.SqlClient.SqlTransaction.Commit
  - System.Data.SqlClient.SqlTransaction.Connection
  - System.Data.SqlClient.SqlTransaction.DbConnection
  - System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlTransaction.IsolationLevel
  - System.Data.SqlClient.SqlTransaction.Rollback
  - System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  - System.Data.SqlClient.SqlTransaction.Save(System.String)
  langs:
  - csharp
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
  type: Class
  summary: "나타냅니다는 [!INCLUDE[tsql](~/add/includes/tsql-md.md)] 에 만들 트랜잭션을 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 데이터베이스입니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "The application creates a SqlTransaction object by calling <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> on the <xref:System.Data.SqlClient.SqlConnection> object. All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the SqlTransaction object.  \n  \n> [!NOTE]\n>  `Try`/`Catch` exception handling should always be used when committing or rolling back a SqlTransaction. Both <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generate an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \n  \n For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see [Explicit Transactions](http://msdn.microsoft.com/library/ms175127\\(SQL.105\\).aspx) and [Coding Efficient Transactions](http://msdn.microsoft.com/library/ms187484\\(SQL.105\\).aspx)."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a SqlTransaction. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error, or if it is disposed without first being committed. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._10_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._10_1.vb)]"
  syntax:
    content: 'public sealed class SqlTransaction : System.Data.Common.DbTransaction'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Data.Common.DbTransaction
  implements: []
  inheritedMembers:
  - System.Data.Common.DbTransaction.Dispose
  - System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Commit
  id: Commit
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: SqlTransaction.Commit()
  fullName: System.Data.SqlClient.SqlTransaction.Commit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "데이터베이스 트랜잭션을 커밋합니다."
  remarks: "Commit 메서드 TRANSACT-SQL COMMIT TRANSACTION 문을 하는 것과 같습니다. 롤백할 수 없습니다 트랜잭션이 커밋된 후 모든 수정 내용이 데이터베이스의 영구적인 부분이 있어야 하기 때문에 있습니다. 자세한 내용은 SQL Server 온라인 설명서를 참조 합니다.      > [!NOTE]  >   `Try` / `Catch` 예외 처리 커밋 또는 롤백에 <xref:System.Data.SqlClient.SqlTransaction>.</xref:System.Data.SqlClient.SqlTransaction> 때 항상 사용 해야 둘 다 `Commit` 및 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>생성 한 <xref:System.InvalidOperationException>연결을 종료 하거나 서버에서 트랜잭션이 이미 롤백된 경우.</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>       SQL Server 트랜잭션에 대 한 자세한 내용은 &quot;명시적 트랜잭션&quot; 및 SQL Server 온라인 설명서의 &quot;효율적인 트랜잭션 코딩&quot;를 참조 하십시오."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the Commit, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._25_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._25_1.vb)]"
  syntax:
    content: public override void Commit ();
    parameters: []
  overload: System.Data.SqlClient.SqlTransaction.Commit*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "트랜잭션을 커밋하는 동안 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "트랜잭션이 이미 커밋 또는 롤백됩니다.       -또는-연결이 끊어졌습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Connection
  id: Connection
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Connection
  nameWithType: SqlTransaction.Connection
  fullName: System.Data.SqlClient.SqlTransaction.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "가져옵니다는 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> 에 트랜잭션과 관련 된 개체 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 트랜잭션이 더 이상 유효한 경우."
  remarks: "단일 응용 프로그램에는 각각&0; 개 이상의 트랜잭션을 사용 하 여 여러 데이터베이스 연결을 있을 수 있습니다. 이 속성을 사용 하면 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> 만든 특정 트랜잭션과 관련 된 연결 개체를 확인할 수 있습니다."
  syntax:
    content: public System.Data.SqlClient.SqlConnection Connection { get; }
    return:
      type: System.Data.SqlClient.SqlConnection
      description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> 트랜잭션과 관련 된 개체입니다."
  overload: System.Data.SqlClient.SqlTransaction.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.DbConnection
  id: DbConnection
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
  fullName: System.Data.SqlClient.SqlTransaction.DbConnection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbConnection DbConnection { get; }
    return:
      type: System.Data.Common.DbConnection
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlTransaction.DbConnection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SqlTransaction.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlTransaction.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "추가할 수 있습니다."
  overload: System.Data.SqlClient.SqlTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel
  id: IsolationLevel
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
  fullName: System.Data.SqlClient.SqlTransaction.IsolationLevel
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "지정 된 <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> 이 트랜잭션에 대 한 합니다."
  remarks: "병렬 트랜잭션은 지원 되지 않습니다. 따라서는 <xref:System.Data.IsolationLevel>전체 트랜잭션에 적용 됩니다.</xref:System.Data.IsolationLevel>       SQL Server 격리 수준에 대 한 자세한 내용은 &quot;격리 수준에서&quot; 데이터베이스 엔진의 SQL Server 온라인 설명서를 참조 하십시오."
  syntax:
    content: public override System.Data.IsolationLevel IsolationLevel { get; }
    return:
      type: System.Data.IsolationLevel
      description: "<xref href=&quot;System.Data.IsolationLevel&quot;> </xref> 이 트랜잭션에 대 한 합니다. 기본값은 <xref uid=&quot;langword_csharp_ReadCommitted&quot; name=&quot;ReadCommitted&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.SqlClient.SqlTransaction.IsolationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Rollback
  id: Rollback
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Rollback()
  nameWithType: SqlTransaction.Rollback()
  fullName: System.Data.SqlClient.SqlTransaction.Rollback()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "보류 상태에서 트랜잭션을 롤백합니다."
  remarks: "Rollback 메서드 TRANSACT-SQL ROLLBACK TRANSACTION 문을 하는 것과 같습니다. 자세한 내용은 SQL Server 온라인 설명서를 참조 합니다.       트랜잭션이 롤백할 수 보류 상태에서 (후 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>호출 하기 전에 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>라고).</xref:System.Data.SqlClient.SqlTransaction.Commit%2A> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> 다시 이벤트 삭제 하기 전에 트랜잭션이 `Commit` 또는 `Rollback` 라고 합니다.      > [!NOTE]  >   `Try` / `Catch` 트랜잭션을 롤백할 때 항상 예외 처리를 사용 해야 합니다. A `Rollback` 생성 한 <xref:System.InvalidOperationException>연결을 종료 하거나 서버에서 트랜잭션이 이미 롤백된 경우.</xref:System.InvalidOperationException>       SQL Server 트랜잭션에 대 한 자세한 내용은 &quot;명시적 트랜잭션&quot; 및 SQL Server 온라인 설명서의 &quot;효율적인 트랜잭션 코딩&quot;를 참조 하십시오."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and Rollback methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._8_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._8_1.vb)]"
  syntax:
    content: public override void Rollback ();
    parameters: []
  overload: System.Data.SqlClient.SqlTransaction.Rollback*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "트랜잭션을 커밋하는 동안 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "트랜잭션이 이미 커밋 또는 롤백됩니다.       -또는-연결이 끊어졌습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  id: Rollback(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Rollback(String)
  nameWithType: SqlTransaction.Rollback(String)
  fullName: System.Data.SqlClient.SqlTransaction.Rollback(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "보류 상태에서 트랜잭션을 롤백합니다 고, 트랜잭션 또는 저장점 이름을 지정 합니다."
  remarks: "<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>TRANSACT-SQL ROLLBACK TRANSACTION 문을 하는 것과 같습니다.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> 자세한 내용은 &quot;명시적 트랜잭션&quot; 및 SQL Server 온라인 설명서의 &quot;트랜잭션 저장점&quot;를 참조 하십시오.       트랜잭션이 롤백할 수 보류 상태에서 (후 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>호출 하기 전에 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>라고).</xref:System.Data.SqlClient.SqlTransaction.Commit%2A> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> 하기 전에 삭제 되는 경우 트랜잭션이 `Commit` 또는 `Rollback` 라고 합니다.      > [!NOTE]  >   `Try` / `Catch` 트랜잭션을 롤백할 때 항상 예외 처리를 사용 해야 합니다. A `Rollback` 생성 한 <xref:System.InvalidOperationException>연결을 종료 하거나 서버에서 트랜잭션이 이미 롤백된 경우.</xref:System.InvalidOperationException>       SQL Server 트랜잭션에 대 한 자세한 내용은 &quot;명시적 트랜잭션&quot; 및 SQL Server 온라인 설명서의 &quot;효율적인 트랜잭션 코딩&quot;를 참조 하십시오."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._40_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._40_1.vb)]"
  syntax:
    content: public void Rollback (string transactionName);
    parameters:
    - id: transactionName
      type: System.String
      description: "트랜잭션이 롤백 또는 롤백할 수 있는 저장 점으로의 이름입니다."
  overload: System.Data.SqlClient.SqlTransaction.Rollback*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "트랜잭션 이름이 지정 되지 않았습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "트랜잭션이 이미 커밋 또는 롤백됩니다.       -또는-연결이 끊어졌습니다."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)
  id: Save(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Save(String)
  nameWithType: SqlTransaction.Save(String)
  fullName: System.Data.SqlClient.SqlTransaction.Save(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "트랜잭션의 일부를 사용할 수 있으며 저장점 이름을 지정 하는 트랜잭션에 저장 점을 만듭니다."
  remarks: "Save 메서드 TRANSACT-SQL SAVE TRANSACTION 문을 하는 것과 같습니다.       사용 되는 값은 `savePoint` 매개 변수에서 사용 하는 일 수는 `transactionName` 일부 구현의 매개 변수는 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>메서드.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>       저장 점은 트랜잭션의 일부를 롤백해야 하는 메커니즘을 제공 합니다. Save 메서드를 사용 하 여 저장 점을 만들 한 다음 이후의 호출에서 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>메서드를 트랜잭션의 시작 부분으로 롤백하는 대신 저장 점으로 롤백하려면.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>"
  syntax:
    content: public void Save (string savePointName);
    parameters:
    - id: savePointName
      type: System.String
      description: "저장 점의 이름입니다."
  overload: System.Data.SqlClient.SqlTransaction.Save*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "트랜잭션을 커밋하는 동안 오류가 발생 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "트랜잭션이 이미 커밋 또는 롤백됩니다.       -또는-연결이 끊어졌습니다."
  platform:
  - net462
references:
- uid: System.Data.Common.DbTransaction
  isExternal: false
  name: System.Data.Common.DbTransaction
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.SqlClient.SqlTransaction.Commit
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Commit()
  nameWithType: SqlTransaction.Commit()
  fullName: System.Data.SqlClient.SqlTransaction.Commit()
- uid: System.Data.SqlClient.SqlTransaction.Connection
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Connection
  nameWithType: SqlTransaction.Connection
  fullName: System.Data.SqlClient.SqlTransaction.Connection
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlTransaction.DbConnection
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
  fullName: System.Data.SqlClient.SqlTransaction.DbConnection
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SqlTransaction.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlTransaction.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
  fullName: System.Data.SqlClient.SqlTransaction.IsolationLevel
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.SqlClient.SqlTransaction.Rollback
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback()
  nameWithType: SqlTransaction.Rollback()
  fullName: System.Data.SqlClient.SqlTransaction.Rollback()
- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback(String)
  nameWithType: SqlTransaction.Rollback(String)
  fullName: System.Data.SqlClient.SqlTransaction.Rollback(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Save(String)
  nameWithType: SqlTransaction.Save(String)
  fullName: System.Data.SqlClient.SqlTransaction.Save(String)
- uid: System.Data.SqlClient.SqlTransaction.Commit*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Commit
  nameWithType: SqlTransaction.Commit
- uid: System.Data.SqlClient.SqlTransaction.Connection*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Connection
  nameWithType: SqlTransaction.Connection
- uid: System.Data.SqlClient.SqlTransaction.DbConnection*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
- uid: System.Data.SqlClient.SqlTransaction.Dispose*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Dispose
  nameWithType: SqlTransaction.Dispose
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
- uid: System.Data.SqlClient.SqlTransaction.Rollback*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback
  nameWithType: SqlTransaction.Rollback
- uid: System.Data.SqlClient.SqlTransaction.Save*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Save
  nameWithType: SqlTransaction.Save
