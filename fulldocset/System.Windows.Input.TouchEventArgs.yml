### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.TouchEventArgs
  id: TouchEventArgs
  children:
  - System.Windows.Input.TouchEventArgs.#ctor(System.Windows.Input.TouchDevice,System.Int32)
  - System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints(System.Windows.IInputElement)
  - System.Windows.Input.TouchEventArgs.GetTouchPoint(System.Windows.IInputElement)
  - System.Windows.Input.TouchEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  - System.Windows.Input.TouchEventArgs.TouchDevice
  langs:
  - csharp
  name: TouchEventArgs
  nameWithType: TouchEventArgs
  fullName: System.Windows.Input.TouchEventArgs
  type: Class
  summary: "터치식 입력된 이벤트에 대 한 데이터를 제공합니다."
  remarks: "다음 이벤트 TouchEventArgs를 사용합니다.      -   <xref:System.Windows.UIElement.TouchUp?displayProperty=fullName>      -   <xref:System.Windows.UIElement.TouchDown?displayProperty=fullName>      -   <xref:System.Windows.UIElement.TouchEnter?displayProperty=fullName>      -   <xref:System.Windows.UIElement.TouchLeave?displayProperty=fullName>      -   <xref:System.Windows.UIElement.TouchMove?displayProperty=fullName>      -   <xref:System.Windows.UIElement3D.TouchUp?displayProperty=fullName>      -   <xref:System.Windows.UIElement3D.TouchDown?displayProperty=fullName>      -   <xref:System.Windows.UIElement3D.TouchEnter?displayProperty=fullName>      -   <xref:System.Windows.UIElement3D.TouchLeave?displayProperty=fullName>      -   <xref:System.Windows.UIElement3D.TouchMove?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.TouchUp?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.TouchDown?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.TouchEnter?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.TouchLeave?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.TouchMove?displayProperty=fullName></xref:System.Windows.ContentElement.TouchMove?displayProperty=fullName></xref:System.Windows.ContentElement.TouchLeave?displayProperty=fullName></xref:System.Windows.ContentElement.TouchEnter?displayProperty=fullName></xref:System.Windows.ContentElement.TouchDown?displayProperty=fullName></xref:System.Windows.ContentElement.TouchUp?displayProperty=fullName></xref:System.Windows.UIElement3D.TouchMove?displayProperty=fullName></xref:System.Windows.UIElement3D.TouchLeave?displayProperty=fullName></xref:System.Windows.UIElement3D.TouchEnter?displayProperty=fullName></xref:System.Windows.UIElement3D.TouchDown?displayProperty=fullName></xref:System.Windows.UIElement3D.TouchUp?displayProperty=fullName></xref:System.Windows.UIElement.TouchMove?displayProperty=fullName></xref:System.Windows.UIElement.TouchLeave?displayProperty=fullName></xref:System.Windows.UIElement.TouchEnter?displayProperty=fullName></xref:System.Windows.UIElement.TouchDown?displayProperty=fullName></xref:System.Windows.UIElement.TouchUp?displayProperty=fullName>"
  example:
  - "The following example handles the <xref:System.Windows.UIElement.TouchUp> events that occur on a <xref:System.Windows.Controls.Canvas>. It checks the <xref:System.Windows.Input.TouchDevice.Captured%2A> property to verify that the device that raised the event is captured to the <xref:System.Windows.Controls.Canvas>. If it is, the <xref:System.Windows.Input.TouchDevice> is released.  \n  \n This example is part of a larger example that is available in the <xref:System.Windows.Input.TouchDevice> class overview.  \n  \n [!code-vb[TouchEventsSample#130](~/add/codesnippet/visualbasic/wpftoucheventssample/mainwindow.xaml.vb#130)]\n [!code-cs[TouchEventsSample#130](~/add/codesnippet/csharp/wpftoucheventssample/mainwindow.xaml.cs#130)]"
  syntax:
    content: 'public class TouchEventArgs : System.Windows.Input.InputEventArgs'
  inheritance:
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  - System.Windows.Input.InputEventArgs
  implements: []
  inheritedMembers:
  - System.Windows.Input.InputEventArgs.Device
  - System.Windows.Input.InputEventArgs.Timestamp
  - System.Windows.RoutedEventArgs.Handled
  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.Windows.RoutedEventArgs.RoutedEvent
  - System.Windows.RoutedEventArgs.Source
  platform:
  - net462
- uid: System.Windows.Input.TouchEventArgs.#ctor(System.Windows.Input.TouchDevice,System.Int32)
  id: '#ctor(System.Windows.Input.TouchDevice,System.Int32)'
  parent: System.Windows.Input.TouchEventArgs
  langs:
  - csharp
  name: TouchEventArgs(TouchDevice,Int32)
  nameWithType: TouchEventArgs.TouchEventArgs(TouchDevice,Int32)
  fullName: System.Windows.Input.TouchEventArgs.TouchEventArgs(TouchDevice,Int32)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> 클래스입니다."
  syntax:
    content: public TouchEventArgs (System.Windows.Input.TouchDevice touchDevice, int timestamp);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "이 이벤트와 연결할 입력된 장치입니다."
    - id: timestamp
      type: System.Int32
      description: "입력이 발생 한 시간입니다."
  overload: System.Windows.Input.TouchEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints(System.Windows.IInputElement)
  id: GetIntermediateTouchPoints(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchEventArgs
  langs:
  - csharp
  name: GetIntermediateTouchPoints(IInputElement)
  nameWithType: TouchEventArgs.GetIntermediateTouchPoints(IInputElement)
  fullName: System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints(IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "터치 이벤트를 모든 터치 가장 최근와 이전 사이 수집 된 지점을 반환 합니다."
  syntax:
    content: public System.Windows.Input.TouchPointCollection GetIntermediateTouchPoints (System.Windows.IInputElement relativeTo);
    parameters:
    - id: relativeTo
      type: System.Windows.IInputElement
      description: "좌표 공간을 정의 하는 요소입니다."
    return:
      type: System.Windows.Input.TouchPointCollection
      description: "와 가장 최근의 이전에 수집 된 모든 터치 포인트 터치 이벤트입니다."
  overload: System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchEventArgs.GetTouchPoint(System.Windows.IInputElement)
  id: GetTouchPoint(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchEventArgs
  langs:
  - csharp
  name: GetTouchPoint(IInputElement)
  nameWithType: TouchEventArgs.GetTouchPoint(IInputElement)
  fullName: System.Windows.Input.TouchEventArgs.GetTouchPoint(IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "지정 된 요소를 기준으로 터치 장치의 현재 위치를 반환합니다."
  syntax:
    content: public System.Windows.Input.TouchPoint GetTouchPoint (System.Windows.IInputElement relativeTo);
    parameters:
    - id: relativeTo
      type: System.Windows.IInputElement
      description: "좌표 공간을 정의 하는 요소입니다."
    return:
      type: System.Windows.Input.TouchPoint
      description: "지정된 된 요소를 기준으로 터치 장치의 현재 위치입니다."
  overload: System.Windows.Input.TouchEventArgs.GetTouchPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  id: InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.TouchEventArgs
  langs:
  - csharp
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: TouchEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.TouchEventArgs.InvokeEventHandler(Delegate,Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이벤트 시스템 효율성을 높일 수 있는 형식별 방법으로 이벤트 처리기를 호출 합니다."
  remarks: "이 구현으로 <xref:System.EventHandler%601>형식 <xref:System.Windows.Input.TouchEventArgs>다음 호출 합니다.의</xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> 제네릭 처리기 캐스팅 이 구현 패턴 및에 대 한 이유에 대 한 자세한 내용은 참조 <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>및 [라우트된 이벤트 개요](~/add/includes/ajax-current-ext-md.md).</xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>"
  syntax:
    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);
    parameters:
    - id: genericHandler
      type: System.Delegate
      description: "제네릭 처리기 유형별 방식에서으로 호출입니다."
    - id: genericTarget
      type: System.Object
      description: "처리기를 호출 하는 대상입니다."
  overload: System.Windows.Input.TouchEventArgs.InvokeEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchEventArgs.TouchDevice
  id: TouchDevice
  parent: System.Windows.Input.TouchEventArgs
  langs:
  - csharp
  name: TouchDevice
  nameWithType: TouchEventArgs.TouchDevice
  fullName: System.Windows.Input.TouchEventArgs.TouchDevice
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "터치를 이벤트를 생성을 가져옵니다."
  remarks: ''
  example:
  - "The following example handles the <xref:System.Windows.UIElement.TouchUp> events that occur on a <xref:System.Windows.Controls.Canvas>. It checks the <xref:System.Windows.Input.TouchDevice.Captured%2A> property to verify that the device that raised the event is captured to the <xref:System.Windows.Controls.Canvas>. If it is, the <xref:System.Windows.Input.TouchDevice> is released.  \n  \n This example is part of a larger example that is available in the <xref:System.Windows.Input.TouchDevice> class overview.  \n  \n [!code-vb[TouchEventsSample#130](~/add/codesnippet/visualbasic/wpftoucheventssample/mainwindow.xaml.vb#130)]\n [!code-cs[TouchEventsSample#130](~/add/codesnippet/csharp/wpftoucheventssample/mainwindow.xaml.cs#130)]"
  syntax:
    content: public System.Windows.Input.TouchDevice TouchDevice { get; }
    return:
      type: System.Windows.Input.TouchDevice
      description: "터치 이벤트를 생성 합니다."
  overload: System.Windows.Input.TouchEventArgs.TouchDevice*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputEventArgs
  isExternal: false
  name: System.Windows.Input.InputEventArgs
- uid: System.Windows.Input.TouchEventArgs.#ctor(System.Windows.Input.TouchDevice,System.Int32)
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: TouchEventArgs(TouchDevice,Int32)
  nameWithType: TouchEventArgs.TouchEventArgs(TouchDevice,Int32)
  fullName: System.Windows.Input.TouchEventArgs.TouchEventArgs(TouchDevice,Int32)
- uid: System.Windows.Input.TouchDevice
  parent: System.Windows.Input
  isExternal: false
  name: TouchDevice
  nameWithType: TouchDevice
  fullName: System.Windows.Input.TouchDevice
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: GetIntermediateTouchPoints(IInputElement)
  nameWithType: TouchEventArgs.GetIntermediateTouchPoints(IInputElement)
  fullName: System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints(IInputElement)
- uid: System.Windows.Input.TouchPointCollection
  parent: System.Windows.Input
  isExternal: false
  name: TouchPointCollection
  nameWithType: TouchPointCollection
  fullName: System.Windows.Input.TouchPointCollection
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.TouchEventArgs.GetTouchPoint(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: GetTouchPoint(IInputElement)
  nameWithType: TouchEventArgs.GetTouchPoint(IInputElement)
  fullName: System.Windows.Input.TouchEventArgs.GetTouchPoint(IInputElement)
- uid: System.Windows.Input.TouchPoint
  parent: System.Windows.Input
  isExternal: false
  name: TouchPoint
  nameWithType: TouchPoint
  fullName: System.Windows.Input.TouchPoint
- uid: System.Windows.Input.TouchEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: TouchEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.TouchEventArgs.InvokeEventHandler(Delegate,Object)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.TouchEventArgs.TouchDevice
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: TouchDevice
  nameWithType: TouchEventArgs.TouchDevice
  fullName: System.Windows.Input.TouchEventArgs.TouchDevice
- uid: System.Windows.Input.TouchEventArgs.#ctor*
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: TouchEventArgs
  nameWithType: TouchEventArgs.TouchEventArgs
- uid: System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints*
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: GetIntermediateTouchPoints
  nameWithType: TouchEventArgs.GetIntermediateTouchPoints
- uid: System.Windows.Input.TouchEventArgs.GetTouchPoint*
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: GetTouchPoint
  nameWithType: TouchEventArgs.GetTouchPoint
- uid: System.Windows.Input.TouchEventArgs.InvokeEventHandler*
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: InvokeEventHandler
  nameWithType: TouchEventArgs.InvokeEventHandler
- uid: System.Windows.Input.TouchEventArgs.TouchDevice*
  parent: System.Windows.Input.TouchEventArgs
  isExternal: false
  name: TouchDevice
  nameWithType: TouchEventArgs.TouchDevice
