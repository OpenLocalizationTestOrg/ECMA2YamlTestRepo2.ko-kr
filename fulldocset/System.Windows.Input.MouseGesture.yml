### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.MouseGesture
  id: MouseGesture
  children:
  - System.Windows.Input.MouseGesture.#ctor
  - System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction)
  - System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction,System.Windows.Input.ModifierKeys)
  - System.Windows.Input.MouseGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  - System.Windows.Input.MouseGesture.Modifiers
  - System.Windows.Input.MouseGesture.MouseAction
  langs:
  - csharp
  name: MouseGesture
  nameWithType: MouseGesture
  fullName: System.Windows.Input.MouseGesture
  type: Class
  summary: "명령을 호출 하는 데 사용할 수 있는 마우스 입력된 제스처를 정의 합니다."
  remarks: "와 달리는 <xref:System.Windows.Input.KeyGesture>, <xref:System.Windows.Input.MouseAction>와 쌍이 되어야 하지 않아도 <xref:System.Windows.Input.ModifierKeys>유효한 MouseGesture 되도록.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.MouseAction> </xref:System.Windows.Input.KeyGesture>       MouseGesture에 바인딩될 수는 <xref:System.Windows.Input.RoutedCommand>(또는 기타 <xref:System.Windows.Input.ICommand>구현)를 통해는 <xref:System.Windows.Input.MouseBinding>명령이 MouseGesture 발생할 때 호출 될 수 있도록 합니다.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.RoutedCommand>       MouseGesture에 대 한 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 에서 일반적으로 설정 된 속성, 특성 사용 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 은 <xref:System.Windows.Input.MouseBinding.Gesture%2A>, 제스처 마우스로 하나 이상의 보조 키를 모두 나타낼 수 있는 경우에서.</xref:System.Windows.Input.MouseBinding.Gesture%2A> 설정할 수도 있습니다는 <xref:System.Windows.Input.MouseBinding.Gesture%2A>속성을 마우스로 클릭 하면 파일이 수.</xref:System.Windows.Input.MouseBinding.Gesture%2A> 일반적으로 것이 좋습니다만 사용 하는 <xref:System.Windows.Input.KeyBinding.Gesture%2A>에서 특성 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]를 설정 하는 대신 <xref:System.Windows.Input.MouseBinding.MouseAction%2A>한정자를 지정 하지 않은 경우에.</xref:System.Windows.Input.MouseBinding.MouseAction%2A> </xref:System.Windows.Input.KeyBinding.Gesture%2A> 이 모호성을 방지 하는, 가장 효율적인된 구문을 제공 및 serialization에 대 한 가장 간단한 표현을 제공 합니다.       MouseGesture [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] 개체 요소 사용이 가능 하지만 드물게, 일반적으로 설정할 수 있으므로 <xref:System.Windows.Input.MouseBinding.Gesture%2A>속성 <xref:System.Windows.Input.MouseBinding>속성 요소 구문 사용 하지 않고 인라인.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.MouseBinding.Gesture%2A>      <a name=&quot;xamlAttributeUsage_MouseGesture&quot;></a># # XAML 특성 사용 ```   <object property=&quot;mouseAction&quot;/>   - or -   <object property=&quot;oneOrMoreModifierKeys+mouseAction&quot;/>   ``` <a name=&quot;xamlValues_MouseGesture&quot;> </a> # # XAML 값 `mouseAction` <xref:System.Windows.Input.MouseAction>단일 마우스 동작.</xref:System.Windows.Input.MouseAction>                 `oneOrMoreModifierKeys`에 정의 된 하나 이상의 보조 키의 <xref:System.Windows.Input.ModifierKeys>열거형.</xref:System.Windows.Input.ModifierKeys> 둘 이상의 한정자 키가 제공 하는 경우 각 보조키 &quot;+&quot; 문자로 구분 됩니다."
  example:
  - "The following example shows to create a MouseGesture and associate it with a <xref:System.Windows.Input.RoutedCommand> through a <xref:System.Windows.Input.MouseBinding>.  When the mouse wheel is clicked while the <xref:System.Windows.Input.ModifierKeys> key is pressed, the <xref:System.Windows.Input.ApplicationCommands.Open%2A> is invoked.  \n  \n [!code-xml[commandlibrarysnippets#MouseBindingMouseGestureXAML](~/add/codesnippet/xaml/CommandLibarySnippets/Window1.xaml#mousebindingmousegesturexaml)]  \n  \n [!code-cs[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#mousebindingaddedtoinputbinding)]\n [!code-vb[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#mousebindingaddedtoinputbinding)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.Input.MouseGestureConverter))]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.MouseGestureValueSerializer))]

      public class MouseGesture : System.Windows.Input.InputGesture
  inheritance:
  - System.Object
  - System.Windows.Input.InputGesture
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.MouseGesture.#ctor
  id: '#ctor'
  parent: System.Windows.Input.MouseGesture
  langs:
  - csharp
  name: MouseGesture()
  nameWithType: MouseGesture.MouseGesture()
  fullName: System.Windows.Input.MouseGesture.MouseGesture()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.MouseGesture&quot;> </xref> 클래스입니다."
  syntax:
    content: public MouseGesture ();
    parameters: []
  overload: System.Windows.Input.MouseGesture.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction)
  id: '#ctor(System.Windows.Input.MouseAction)'
  parent: System.Windows.Input.MouseGesture
  langs:
  - csharp
  name: MouseGesture(MouseAction)
  nameWithType: MouseGesture.MouseGesture(MouseAction)
  fullName: System.Windows.Input.MouseGesture.MouseGesture(MouseAction)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.MouseGesture&quot;> </xref> 사용 하 여 지정 된 클래스 <xref href=&quot;System.Windows.Input.MouseAction&quot;> </xref>합니다."
  syntax:
    content: public MouseGesture (System.Windows.Input.MouseAction mouseAction);
    parameters:
    - id: mouseAction
      type: System.Windows.Input.MouseAction
      description: "이 제스처와 연결 된 동작입니다."
  overload: System.Windows.Input.MouseGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>mouseAction</code>유효 하지 않거나 <xref href=&quot;System.Windows.Input.MouseAction&quot;> </xref> 값입니다."
  platform:
  - net462
- uid: System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction,System.Windows.Input.ModifierKeys)
  id: '#ctor(System.Windows.Input.MouseAction,System.Windows.Input.ModifierKeys)'
  parent: System.Windows.Input.MouseGesture
  langs:
  - csharp
  name: MouseGesture(MouseAction,ModifierKeys)
  nameWithType: MouseGesture.MouseGesture(MouseAction,ModifierKeys)
  fullName: System.Windows.Input.MouseGesture.MouseGesture(MouseAction,ModifierKeys)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.MouseGesture&quot;> </xref> 사용 하 여 지정 된 클래스 <xref href=&quot;System.Windows.Input.MouseAction&quot;> </xref> 및 <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>합니다."
  syntax:
    content: public MouseGesture (System.Windows.Input.MouseAction mouseAction, System.Windows.Input.ModifierKeys modifiers);
    parameters:
    - id: mouseAction
      type: System.Windows.Input.MouseAction
      description: "이 제스처와 연결 된 동작입니다."
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "이 제스처와 연결 된 한정자입니다."
  overload: System.Windows.Input.MouseGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>mouseAction</code>유효 하지 않거나 <xref href=&quot;System.Windows.Input.MouseAction&quot;> </xref> 값-또는- <code>modifiers</code> 유효 하지 않거나 <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref> 값입니다."
  platform:
  - net462
- uid: System.Windows.Input.MouseGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  id: Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.MouseGesture
  langs:
  - csharp
  name: Matches(Object,InputEventArgs)
  nameWithType: MouseGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.MouseGesture.Matches(Object,InputEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "결정 여부 <xref href=&quot;System.Windows.Input.MouseGesture&quot;> </xref> 연결 된 지정 된 입력과 일치 <xref href=&quot;System.Windows.Input.InputEventArgs&quot;> </xref> 개체입니다."
  remarks: ''
  example:
  - "The following example shows how to test whether a <xref:System.Windows.Input.MouseGesture> matches the input associated with an instance of an <xref:System.Windows.Input.InputEventArgs>. A <xref:System.Windows.UIElement.MouseDown> event handler compares the event data with the <xref:System.Windows.Input.MouseGesture> by using the Matches method.  \n  \n [!code-cs[commandlibrarysnippets#KeyDownHandlerMouseGestureMatches](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keydownhandlermousegesturematches)]\n [!code-vb[commandlibrarysnippets#KeyDownHandlerMouseGestureMatches](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keydownhandlermousegesturematches)]"
  syntax:
    content: public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);
    parameters:
    - id: targetElement
      type: System.Object
      description: "대상입니다."
    - id: inputEventArgs
      type: System.Windows.Input.InputEventArgs
      description: "입력된 이벤트의 데이터는이 제스처와 비교할입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 이벤트 데이터 일치 하는 경우 <xref href=&quot;System.Windows.Input.MouseGesture&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Input.MouseGesture.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.MouseGesture.Modifiers
  id: Modifiers
  parent: System.Windows.Input.MouseGesture
  langs:
  - csharp
  name: Modifiers
  nameWithType: MouseGesture.Modifiers
  fullName: System.Windows.Input.MouseGesture.Modifiers
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "와 연결 된 보조 키를 가져오거나 설정 합니다. <xref href=&quot;System.Windows.Input.MouseGesture&quot;> </xref>합니다."
  remarks: "A <xref:System.Windows.Input.KeyGesture> <xref:System.Windows.Input.MouseAction> <xref:System.Windows.Input.ModifierKeys>에 유효한 <xref:System.Windows.Input.MouseGesture>.</xref:System.Windows.Input.MouseGesture> 되려면</xref:System.Windows.Input.ModifierKeys> 와 쌍이 되어야 하지 않아도</xref:System.Windows.Input.MouseAction> </xref:System.Windows.Input.KeyGesture> 달리       <xref:System.Windows.Input.ModifierKeys>비트 필드 열거형 이므로 여러 보조 키를 동시에 누를 수 있습니다.</xref:System.Windows.Input.ModifierKeys> 보조 키의 정확한 집합을 확인 하려면 비트 연산을 사용 눌렀습니다.      <a name=&quot;xamlAttributeUsage_Modifiers&quot;></a># # XAML 특성 사용 ```   <object Modifiers=&quot;oneOrMoreModifierKeys&quot;/>   ``` <a name=&quot;xamlValues_Modifiers&quot;> </a> # # XAML 값 *oneOrMoreModifierKeys* 에 정의 된 하나 이상의 보조 키의 <xref:System.Windows.Input.ModifierKeys>&quot;+&quot; 문자로 구분 열거형.</xref:System.Windows.Input.ModifierKeys>      "
  example:
  - "The following example shows to create a <xref:System.Windows.Input.MouseGesture> and associate it with a <xref:System.Windows.Input.RoutedCommand> through a <xref:System.Windows.Input.MouseBinding>.  \n  \n [!code-cs[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#mousebindingaddedtoinputbinding)]\n [!code-vb[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#mousebindingaddedtoinputbinding)]"
  syntax:
    content: public System.Windows.Input.ModifierKeys Modifiers { get; set; }
    return:
      type: System.Windows.Input.ModifierKeys
      description: "이 제스처와 연결 된 보조 키입니다. 기본값은 <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>합니다."
  overload: System.Windows.Input.MouseGesture.Modifiers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.MouseGesture.MouseAction
  id: MouseAction
  parent: System.Windows.Input.MouseGesture
  langs:
  - csharp
  name: MouseAction
  nameWithType: MouseGesture.MouseAction
  fullName: System.Windows.Input.MouseGesture.MouseAction
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "가져오거나는 <xref href=&quot;System.Windows.Input.MouseAction&quot;> </xref> 이 제스처와 연결 합니다."
  remarks: "A <xref:System.Windows.Input.KeyGesture> <xref:System.Windows.Input.MouseAction> <xref:System.Windows.Input.ModifierKeys>에 유효한 <xref:System.Windows.Input.MouseGesture>.</xref:System.Windows.Input.MouseGesture> 되려면</xref:System.Windows.Input.ModifierKeys> 와 쌍이 되어야 하지 않아도</xref:System.Windows.Input.MouseAction> </xref:System.Windows.Input.KeyGesture> 달리"
  example:
  - "The following example shows to create a <xref:System.Windows.Input.MouseGesture> and associate it with a <xref:System.Windows.Input.RoutedCommand> through a <xref:System.Windows.Input.MouseBinding>.  \n  \n [!code-cs[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#mousebindingaddedtoinputbinding)]\n [!code-vb[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#mousebindingaddedtoinputbinding)]"
  syntax:
    content: public System.Windows.Input.MouseAction MouseAction { get; set; }
    return:
      type: System.Windows.Input.MouseAction
      description: "이 제스처와 관련 된 마우스 동작입니다. 기본값은 <xref href=&quot;System.Windows.Input.MouseAction&quot;> </xref>합니다."
  overload: System.Windows.Input.MouseGesture.MouseAction*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputGesture
  isExternal: false
  name: System.Windows.Input.InputGesture
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Windows.Input.MouseGesture.#ctor
  parent: System.Windows.Input.MouseGesture
  isExternal: false
  name: MouseGesture()
  nameWithType: MouseGesture.MouseGesture()
  fullName: System.Windows.Input.MouseGesture.MouseGesture()
- uid: System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction)
  parent: System.Windows.Input.MouseGesture
  isExternal: false
  name: MouseGesture(MouseAction)
  nameWithType: MouseGesture.MouseGesture(MouseAction)
  fullName: System.Windows.Input.MouseGesture.MouseGesture(MouseAction)
- uid: System.Windows.Input.MouseAction
  parent: System.Windows.Input
  isExternal: false
  name: MouseAction
  nameWithType: MouseAction
  fullName: System.Windows.Input.MouseAction
- uid: System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction,System.Windows.Input.ModifierKeys)
  parent: System.Windows.Input.MouseGesture
  isExternal: false
  name: MouseGesture(MouseAction,ModifierKeys)
  nameWithType: MouseGesture.MouseGesture(MouseAction,ModifierKeys)
  fullName: System.Windows.Input.MouseGesture.MouseGesture(MouseAction,ModifierKeys)
- uid: System.Windows.Input.ModifierKeys
  parent: System.Windows.Input
  isExternal: false
  name: ModifierKeys
  nameWithType: ModifierKeys
  fullName: System.Windows.Input.ModifierKeys
- uid: System.Windows.Input.MouseGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.MouseGesture
  isExternal: false
  name: Matches(Object,InputEventArgs)
  nameWithType: MouseGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.MouseGesture.Matches(Object,InputEventArgs)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.InputEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: InputEventArgs
  nameWithType: InputEventArgs
  fullName: System.Windows.Input.InputEventArgs
- uid: System.Windows.Input.MouseGesture.Modifiers
  parent: System.Windows.Input.MouseGesture
  isExternal: false
  name: Modifiers
  nameWithType: MouseGesture.Modifiers
  fullName: System.Windows.Input.MouseGesture.Modifiers
- uid: System.Windows.Input.MouseGesture.MouseAction
  parent: System.Windows.Input.MouseGesture
  isExternal: false
  name: MouseAction
  nameWithType: MouseGesture.MouseAction
  fullName: System.Windows.Input.MouseGesture.MouseAction
- uid: System.Windows.Input.MouseGesture.#ctor*
  parent: System.Windows.Input.MouseGesture
  isExternal: false
  name: MouseGesture
  nameWithType: MouseGesture.MouseGesture
- uid: System.Windows.Input.MouseGesture.Matches*
  parent: System.Windows.Input.MouseGesture
  isExternal: false
  name: Matches
  nameWithType: MouseGesture.Matches
- uid: System.Windows.Input.MouseGesture.Modifiers*
  parent: System.Windows.Input.MouseGesture
  isExternal: false
  name: Modifiers
  nameWithType: MouseGesture.Modifiers
- uid: System.Windows.Input.MouseGesture.MouseAction*
  parent: System.Windows.Input.MouseGesture
  isExternal: false
  name: MouseAction
  nameWithType: MouseGesture.MouseAction
