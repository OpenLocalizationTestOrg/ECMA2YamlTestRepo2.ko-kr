### YamlMime:ManagedReference
items:
- uid: System.Numerics.Vector3
  id: Vector3
  children:
  - System.Numerics.Vector3.#ctor(System.Single)
  - System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)
  - System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)
  - System.Numerics.Vector3.Abs(System.Numerics.Vector3)
  - System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.CopyTo(System.Single[])
  - System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)
  - System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)
  - System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Equals(System.Numerics.Vector3)
  - System.Numerics.Vector3.Equals(System.Object)
  - System.Numerics.Vector3.GetHashCode
  - System.Numerics.Vector3.Length
  - System.Numerics.Vector3.LengthSquared
  - System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)
  - System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)
  - System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)
  - System.Numerics.Vector3.Negate(System.Numerics.Vector3)
  - System.Numerics.Vector3.Normalize(System.Numerics.Vector3)
  - System.Numerics.Vector3.One
  - System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)
  - System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)
  - System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)
  - System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)
  - System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)
  - System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.ToString
  - System.Numerics.Vector3.ToString(System.String)
  - System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)
  - System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  - System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)
  - System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  - System.Numerics.Vector3.UnitX
  - System.Numerics.Vector3.UnitY
  - System.Numerics.Vector3.UnitZ
  - System.Numerics.Vector3.X
  - System.Numerics.Vector3.Y
  - System.Numerics.Vector3.Z
  - System.Numerics.Vector3.Zero
  langs:
  - csharp
  name: Vector3
  nameWithType: Vector3
  fullName: System.Numerics.Vector3
  type: Struct
  summary: "세 개의 단 정밀도 부동 소수점 값으로 벡터를 나타냅니다."
  remarks: "Vector3 구조체 하드웨어 가속이 적용에 대 한 지원을 제공합니다."
  syntax:
    content: 'public struct Vector3 : IEquatable<System.Numerics.Vector3>, IFormattable'
  inheritance:
  - System.ValueType
  implements:
  - System.IEquatable<System.Numerics.Vector3>
  - System.IFormattable
  platform:
  - net462
- uid: System.Numerics.Vector3.#ctor(System.Single)
  id: '#ctor(System.Single)'
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Vector3(Single)
  nameWithType: Vector3.Vector3(Single)
  fullName: System.Numerics.Vector3.Vector3(Single)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "새 <xref href=&quot;System.Numerics.Vector3&quot;> </xref> 세 개의 요소가 동일한 값을 포함 하는 개체입니다."
  syntax:
    content: public Vector3 (float value);
    parameters:
    - id: value
      type: System.Single
      description: "세 요소 모두에 할당할 값입니다."
  overload: System.Numerics.Vector3.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)
  id: '#ctor(System.Numerics.Vector2,System.Single)'
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Vector3(Vector2,Single)
  nameWithType: Vector3.Vector3(Vector2,Single)
  fullName: System.Numerics.Vector3.Vector3(Vector2,Single)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "새 <xref href=&quot;System.Numerics.Vector3&quot;> </xref> 지정 된 위치에서 개체 <xref href=&quot;System.Numerics.Vector2&quot;> </xref> 개체와 지정된 된 값입니다."
  syntax:
    content: public Vector3 (System.Numerics.Vector2 value, float z);
    parameters:
    - id: value
      type: System.Numerics.Vector2
      description: "두 개의 요소가 있는 벡터입니다."
    - id: z
      type: System.Single
      description: "에 할당할 추가 값은 <xref href=&quot;System.Numerics.Vector3.Z&quot;> </xref> 필드입니다."
  overload: System.Numerics.Vector3.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single)'
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Vector3(Single,Single,Single)
  nameWithType: Vector3.Vector3(Single,Single,Single)
  fullName: System.Numerics.Vector3.Vector3(Single,Single,Single)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "해당 요소가 지정된 된 값 벡터를 만듭니다."
  syntax:
    content: public Vector3 (float x, float y, float z);
    parameters:
    - id: x
      type: System.Single
      description: "에 할당할 값은 <xref href=&quot;System.Numerics.Vector3.X&quot;> </xref> 필드입니다."
    - id: y
      type: System.Single
      description: "에 할당할 값은 <xref href=&quot;System.Numerics.Vector3.Y&quot;> </xref> 필드입니다."
    - id: z
      type: System.Single
      description: "에 할당할 값은 <xref href=&quot;System.Numerics.Vector3.Z&quot;> </xref> 필드입니다."
  overload: System.Numerics.Vector3.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Abs(System.Numerics.Vector3)
  id: Abs(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Abs(Vector3)
  nameWithType: Vector3.Abs(Vector3)
  fullName: System.Numerics.Vector3.Abs(Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "요소가 각 지정된 된 벡터 요소의 절대 값 벡터를 반환 합니다."
  syntax:
    content: public static System.Numerics.Vector3 Abs (System.Numerics.Vector3 value);
    parameters:
    - id: value
      type: System.Numerics.Vector3
      description: "벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "절대 값 벡터입니다."
  overload: System.Numerics.Vector3.Abs*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Add(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Add(Vector3,Vector3)
  nameWithType: Vector3.Add(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Add(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "두 벡터를 더합니다."
  syntax:
    content: public static System.Numerics.Vector3 Add (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "추가할 첫 번째 벡터입니다."
    - id: right
      type: System.Numerics.Vector3
      description: "추가할 두 번째 벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "합한 벡터입니다."
  overload: System.Numerics.Vector3.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  id: Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Clamp(Vector3,Vector3,Vector3)
  nameWithType: Vector3.Clamp(Vector3,Vector3,Vector3)
  fullName: System.Numerics.Vector3.Clamp(Vector3,Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "최소값과 최대값 사이로 벡터를 제한 합니다."
  syntax:
    content: public static System.Numerics.Vector3 Clamp (System.Numerics.Vector3 value1, System.Numerics.Vector3 min, System.Numerics.Vector3 max);
    parameters:
    - id: value1
      type: System.Numerics.Vector3
      description: "제한할 벡터입니다."
    - id: min
      type: System.Numerics.Vector3
      description: "최소값입니다."
    - id: max
      type: System.Numerics.Vector3
      description: "최대값입니다."
    return:
      type: System.Numerics.Vector3
      description: "제한 된 벡터입니다."
  overload: System.Numerics.Vector3.Clamp*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.CopyTo(System.Single[])
  id: CopyTo(System.Single[])
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: CopyTo(Single[])
  nameWithType: Vector3.CopyTo(Single[])
  fullName: System.Numerics.Vector3.CopyTo(Single[])
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정된 된 배열에 벡터의 요소를 복사합니다."
  remarks: '`array` must have at least three elements. The method copies the vector''s elements starting at index 0.'
  syntax:
    content: public void CopyTo (float[] array);
    parameters:
    - id: array
      type: System.Single[]
      description: "대상 배열입니다."
  overload: System.Numerics.Vector3.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "현재 인스턴스에 있는 요소의 수는 배열의 보다 큰 경우"
  - type: System.RankException
    commentId: T:System.RankException
    description: "<code>array</code>가 다차원 배열인 경우"
  platform:
  - net462
- uid: System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)
  id: CopyTo(System.Single[],System.Int32)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: CopyTo(Single[],Int32)
  nameWithType: Vector3.CopyTo(Single[],Int32)
  fullName: System.Numerics.Vector3.CopyTo(Single[],Int32)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정된 된 인덱스에서 시작 하는 지정 된 배열에 벡터의 요소 위치에 복사 합니다."
  remarks: '`array`요소는 세 가지 벡터 요소에 맞게 충분 한 수가 있어야 합니다. 즉, 요소 `index`, `index` + 1, 및 `index` 2에 이미 있어야 + `array`합니다.'
  syntax:
    content: public void CopyTo (float[] array, int index);
    parameters:
    - id: array
      type: System.Single[]
      description: "대상 배열입니다."
    - id: index
      type: System.Int32
      description: "벡터의 첫 번째 요소를 복사할 인덱스입니다."
  overload: System.Numerics.Vector3.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "현재 인스턴스에 있는 요소의 수는 배열의 보다 큰 경우"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작습니다.       -또는- <code>index</code> 배열 길이 보다 크거나 합니다."
  - type: System.RankException
    commentId: T:System.RankException
    description: "<code>array</code>가 다차원 배열인 경우"
  platform:
  - net462
- uid: System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Cross(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Cross(Vector3,Vector3)
  nameWithType: Vector3.Cross(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Cross(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "두 벡터의 외적을 계산 합니다."
  syntax:
    content: public static System.Numerics.Vector3 Cross (System.Numerics.Vector3 vector1, System.Numerics.Vector3 vector2);
    parameters:
    - id: vector1
      type: System.Numerics.Vector3
      description: "첫 번째 벡터입니다."
    - id: vector2
      type: System.Numerics.Vector3
      description: "두 번째 벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "외적입니다."
  overload: System.Numerics.Vector3.Cross*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Distance(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Distance(Vector3,Vector3)
  nameWithType: Vector3.Distance(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Distance(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정 된 두 점 사이의 유클리드 거리를 계산합니다."
  syntax:
    content: public static float Distance (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2);
    parameters:
    - id: value1
      type: System.Numerics.Vector3
      description: "첫 번째 점입니다."
    - id: value2
      type: System.Numerics.Vector3
      description: "두 번째 점입니다."
    return:
      type: System.Single
      description: "거리입니다."
  overload: System.Numerics.Vector3.Distance*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)
  id: DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: DistanceSquared(Vector3,Vector3)
  nameWithType: Vector3.DistanceSquared(Vector3,Vector3)
  fullName: System.Numerics.Vector3.DistanceSquared(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정 된 두 점 사이의 제곱 유 클 리 디안 거리를 반환 합니다."
  syntax:
    content: public static float DistanceSquared (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2);
    parameters:
    - id: value1
      type: System.Numerics.Vector3
      description: "첫 번째 점입니다."
    - id: value2
      type: System.Numerics.Vector3
      description: "두 번째 점입니다."
    return:
      type: System.Single
      description: "거리 제곱입니다."
  overload: System.Numerics.Vector3.DistanceSquared*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Divide(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Divide(Vector3,Vector3)
  nameWithType: Vector3.Divide(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Divide(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "첫 번째 벡터를 두 번째 나눕니다."
  syntax:
    content: public static System.Numerics.Vector3 Divide (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "첫 번째 벡터입니다."
    - id: right
      type: System.Numerics.Vector3
      description: "두 번째 벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "나누기 결과로 하는 벡터입니다."
  overload: System.Numerics.Vector3.Divide*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)
  id: Divide(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Divide(Vector3,Single)
  nameWithType: Vector3.Divide(Vector3,Single)
  fullName: System.Numerics.Vector3.Divide(Vector3,Single)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정 된 스칼라 값으로 지정된 된 벡터를 나눕니다."
  syntax:
    content: public static System.Numerics.Vector3 Divide (System.Numerics.Vector3 left, float divisor);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "벡터입니다."
    - id: divisor
      type: System.Single
      description: "스칼라 값입니다."
    return:
      type: System.Numerics.Vector3
      description: "나누기의 결과로 생성 되는 벡터입니다."
  overload: System.Numerics.Vector3.Divide*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Dot(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Dot(Vector3,Vector3)
  nameWithType: Vector3.Dot(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Dot(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "두 벡터의 내적을 반환합니다."
  syntax:
    content: public static float Dot (System.Numerics.Vector3 vector1, System.Numerics.Vector3 vector2);
    parameters:
    - id: vector1
      type: System.Numerics.Vector3
      description: "첫 번째 벡터입니다."
    - id: vector2
      type: System.Numerics.Vector3
      description: "두 번째 벡터입니다."
    return:
      type: System.Single
      description: "내적입니다."
  overload: System.Numerics.Vector3.Dot*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Equals(System.Numerics.Vector3)
  id: Equals(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Equals(Vector3)
  nameWithType: Vector3.Equals(Vector3)
  fullName: System.Numerics.Vector3.Equals(Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "이 인스턴스와 다른 벡터가 같은지 여부를 나타내는 값을 반환 합니다."
  remarks: "두 벡터가 같으면 경우 해당 <xref:System.Numerics.Vector3>, <xref:System.Numerics.Vector3>, 및 <xref:System.Numerics.Vector3>요소가&0;과 같은.</xref:System.Numerics.Vector3> </xref:System.Numerics.Vector3> </xref:System.Numerics.Vector3>"
  syntax:
    content: public bool Equals (System.Numerics.Vector3 other);
    parameters:
    - id: other
      type: System.Numerics.Vector3
      description: "다른 벡터입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>두 벡터가 같으면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Numerics.Vector3.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Vector3.Equals(Object)
  fullName: System.Numerics.Vector3.Equals(Object)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "이 인스턴스와 지정 된 개체가 같은지 여부를 나타내는 값을 반환 합니다."
  remarks: "현재 인스턴스 및 `obj` 같은지 경우 `obj` 는 <xref:System.Numerics.Vector3>개체와 해당 요소가 같은지.</xref:System.Numerics.Vector3>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "현재 인스턴스와 비교할 개체입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하는 경우 현재 인스턴스 및 <code> obj </code> 같고, 그렇지 않으면, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> <xref uid=&quot;langword_csharp_&quot; name=&quot;&quot; href=&quot;&quot;> </xref>합니다. If <code>obj</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, the method returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Vector3.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.GetHashCode
  id: GetHashCode
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Vector3.GetHashCode()
  fullName: System.Numerics.Vector3.GetHashCode()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "이 인스턴스에 대 한 해시 코드를 반환합니다."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "해시 코드입니다."
  overload: System.Numerics.Vector3.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Length
  id: Length
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Length()
  nameWithType: Vector3.Length()
  fullName: System.Numerics.Vector3.Length()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "이 벡터 개체의 길이 반환합니다."
  syntax:
    content: public float Length ();
    parameters: []
    return:
      type: System.Single
      description: "벡터의 길이입니다."
  overload: System.Numerics.Vector3.Length*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.LengthSquared
  id: LengthSquared
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: LengthSquared()
  nameWithType: Vector3.LengthSquared()
  fullName: System.Numerics.Vector3.LengthSquared()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "제곱 벡터의 길이 반환 합니다."
  remarks: "이 작업에 대 한 호출 보다 더 나은 성능을 제공는 <xref:System.Numerics.Vector3.Length%2A>메서드.</xref:System.Numerics.Vector3.Length%2A>"
  syntax:
    content: public float LengthSquared ();
    parameters: []
    return:
      type: System.Single
      description: "벡터 길이 제곱입니다."
  overload: System.Numerics.Vector3.LengthSquared*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)
  id: Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Lerp(Vector3,Vector3,Single)
  nameWithType: Vector3.Lerp(Vector3,Vector3,Single)
  fullName: System.Numerics.Vector3.Lerp(Vector3,Vector3,Single)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정된 된 가중치에 따라 두 벡터 사이의 선형 보간을 수행 합니다."
  syntax:
    content: public static System.Numerics.Vector3 Lerp (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2, float amount);
    parameters:
    - id: value1
      type: System.Numerics.Vector3
      description: "첫 번째 벡터입니다."
    - id: value2
      type: System.Numerics.Vector3
      description: "두 번째 벡터입니다."
    - id: amount
      type: System.Single
      description: "값 0과 1의 가중치를 나타내는 사이의 `value2`합니다."
    return:
      type: System.Numerics.Vector3
      description: "보간된 벡터입니다."
  overload: System.Numerics.Vector3.Lerp*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Max(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Max(Vector3,Vector3)
  nameWithType: Vector3.Max(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Max(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "요소가 각 지정 된 두 벡터의 요소 쌍의 최대값인 벡터를 반환 합니다."
  syntax:
    content: public static System.Numerics.Vector3 Max (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2);
    parameters:
    - id: value1
      type: System.Numerics.Vector3
      description: "첫 번째 벡터입니다."
    - id: value2
      type: System.Numerics.Vector3
      description: "두 번째 벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "최대화 된 벡터입니다."
  overload: System.Numerics.Vector3.Max*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Min(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Min(Vector3,Vector3)
  nameWithType: Vector3.Min(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Min(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "요소가 각 지정 된 두 벡터의 요소 쌍의 최소값인 벡터를 반환 합니다."
  syntax:
    content: public static System.Numerics.Vector3 Min (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2);
    parameters:
    - id: value1
      type: System.Numerics.Vector3
      description: "첫 번째 벡터입니다."
    - id: value2
      type: System.Numerics.Vector3
      description: "두 번째 벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "최소화 된 벡터입니다."
  overload: System.Numerics.Vector3.Min*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Multiply(Vector3,Vector3)
  nameWithType: Vector3.Multiply(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Multiply(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "두 벡터를 곱합니다."
  syntax:
    content: public static System.Numerics.Vector3 Multiply (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "첫 번째 벡터입니다."
    - id: right
      type: System.Numerics.Vector3
      description: "두 번째 벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "벡터 곱입니다."
  overload: System.Numerics.Vector3.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)
  id: Multiply(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Multiply(Vector3,Single)
  nameWithType: Vector3.Multiply(Vector3,Single)
  fullName: System.Numerics.Vector3.Multiply(Vector3,Single)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "벡터와 지정 된 스칼라를 곱합니다."
  syntax:
    content: public static System.Numerics.Vector3 Multiply (System.Numerics.Vector3 left, float right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "곱할 벡터입니다."
    - id: right
      type: System.Single
      description: "스칼라 값입니다."
    return:
      type: System.Numerics.Vector3
      description: "크기 조정 된 벡터입니다."
  overload: System.Numerics.Vector3.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)
  id: Multiply(System.Single,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Multiply(Single,Vector3)
  nameWithType: Vector3.Multiply(Single,Vector3)
  fullName: System.Numerics.Vector3.Multiply(Single,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "스칼라 값을 지정된 된 벡터를 곱합니다."
  syntax:
    content: public static System.Numerics.Vector3 Multiply (float left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Single
      description: "크기 조정 된 값입니다."
    - id: right
      type: System.Numerics.Vector3
      description: "벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "크기 조정 된 벡터입니다."
  overload: System.Numerics.Vector3.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Negate(System.Numerics.Vector3)
  id: Negate(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Negate(Vector3)
  nameWithType: Vector3.Negate(Vector3)
  fullName: System.Numerics.Vector3.Negate(Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정된 된 벡터를 부정합니다."
  syntax:
    content: public static System.Numerics.Vector3 Negate (System.Numerics.Vector3 value);
    parameters:
    - id: value
      type: System.Numerics.Vector3
      description: "부정할 벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "부정 된 벡터입니다."
  overload: System.Numerics.Vector3.Negate*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Normalize(System.Numerics.Vector3)
  id: Normalize(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Normalize(Vector3)
  nameWithType: Vector3.Normalize(Vector3)
  fullName: System.Numerics.Vector3.Normalize(Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정된 된 벡터와 방향은 같지만 길이가&1; 인 벡터를 반환 합니다."
  syntax:
    content: public static System.Numerics.Vector3 Normalize (System.Numerics.Vector3 value);
    parameters:
    - id: value
      type: System.Numerics.Vector3
      description: "정규화 할 벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "정규화 된 벡터입니다."
  overload: System.Numerics.Vector3.Normalize*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.One
  id: One
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: One
  nameWithType: Vector3.One
  fullName: System.Numerics.Vector3.One
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "3 요소가 1과 같은 벡터를 가져옵니다."
  syntax:
    content: public static System.Numerics.Vector3 One { get; }
    return:
      type: System.Numerics.Vector3
      description: "세 개의 요소가&1;과 같은 벡터 (즉, 벡터를 반환 `(1,1,1)`합니다."
  overload: System.Numerics.Vector3.One*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)
  id: op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Addition(Vector3,Vector3)
  nameWithType: Vector3.op_Addition(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Addition(Vector3,Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "두 벡터를 더합니다."
  remarks: "에 대 한 추가 작업을 정의 하는 추가 메서드 <xref:System.Numerics.Vector3>개체입니다.</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_Addition (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "추가할 첫 번째 벡터입니다."
    - id: right
      type: System.Numerics.Vector3
      description: "추가할 두 번째 벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "합한 벡터입니다."
  overload: System.Numerics.Vector3.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)
  id: op_Division(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Division(Vector3,Vector3)
  nameWithType: Vector3.op_Division(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Division(Vector3,Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "첫 번째 벡터를 두 번째 나눕니다."
  remarks: "나누기 메서드 정의 대 한 나누기 연산에서 구하는 <xref:System.Numerics.Vector3>개체입니다.</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_Division (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "첫 번째 벡터입니다."
    - id: right
      type: System.Numerics.Vector3
      description: "두 번째 벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "나눈 결과로 생성 되는 벡터 <code> left </code> 여 <code> right </code>합니다."
  overload: System.Numerics.Vector3.op_Division*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)
  id: op_Division(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Division(Vector3,Single)
  nameWithType: Vector3.op_Division(Vector3,Single)
  fullName: System.Numerics.Vector3.op_Division(Vector3,Single)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정 된 스칼라 값으로 지정된 된 벡터를 나눕니다."
  remarks: "나누기 메서드 정의 대 한 나누기 연산에서 구하는 <xref:System.Numerics.Vector3>개체입니다.</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_Division (System.Numerics.Vector3 value1, float value2);
    parameters:
    - id: value1
      type: System.Numerics.Vector3
      description: "벡터입니다."
    - id: value2
      type: System.Single
      description: "스칼라 값입니다."
    return:
      type: System.Numerics.Vector3
      description: "나누기의 결과입니다."
  overload: System.Numerics.Vector3.op_Division*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)
  id: op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Equality(Vector3,Vector3)
  nameWithType: Vector3.op_Equality(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Equality(Vector3,Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정 된 두 벡터에 있는 요소의 각 쌍이 같은지 여부를 나타내는 값을 반환 합니다."
  remarks: "두 개의 <xref:System.Numerics.Vector3>개체의 경우 각 같은 요소는 `left` 의 해당 요소와 같은지 `right`.</xref:System.Numerics.Vector3>"
  syntax:
    content: public static bool op_Equality (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "비교할 첫 번째 벡터입니다."
    - id: right
      type: System.Numerics.Vector3
      description: "비교할 두 번째 벡터입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>left</code> and <code>right</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Vector3.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)
  id: op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Inequality(Vector3,Vector3)
  nameWithType: Vector3.op_Inequality(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Inequality(Vector3,Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정 된 두 벡터가 같은지 여부를 나타내는 값을 반환 합니다."
  syntax:
    content: public static bool op_Inequality (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "비교할 첫 번째 벡터입니다."
    - id: right
      type: System.Numerics.Vector3
      description: "비교할 두 번째 벡터입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>left</code> and <code>right</code> are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Vector3.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  id: op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Multiply(Vector3,Vector3)
  nameWithType: Vector3.op_Multiply(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Multiply(Vector3,Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "두 벡터를 곱합니다."
  remarks: "Multiply 메서드 정의 대 한 곱하기 연산을 <xref:System.Numerics.Vector3>개체입니다.</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_Multiply (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "첫 번째 벡터입니다."
    - id: right
      type: System.Numerics.Vector3
      description: "두 번째 벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "벡터 곱입니다."
  overload: System.Numerics.Vector3.op_Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)
  id: op_Multiply(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Multiply(Vector3,Single)
  nameWithType: Vector3.op_Multiply(Vector3,Single)
  fullName: System.Numerics.Vector3.op_Multiply(Vector3,Single)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "배수로 지정된 된 스칼라 값으로 지정된 된 벡터입니다."
  remarks: "Multiply 메서드 정의 대 한 곱하기 연산을 <xref:System.Numerics.Vector3>개체입니다.</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_Multiply (System.Numerics.Vector3 left, float right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "벡터입니다."
    - id: right
      type: System.Single
      description: "스칼라 값입니다."
    return:
      type: System.Numerics.Vector3
      description: "크기 조정 된 벡터입니다."
  overload: System.Numerics.Vector3.op_Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)
  id: op_Multiply(System.Single,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Multiply(Single,Vector3)
  nameWithType: Vector3.op_Multiply(Single,Vector3)
  fullName: System.Numerics.Vector3.op_Multiply(Single,Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "스칼라 값으로 지정된 된 벡터입니다."
  remarks: "Multiply 메서드 정의 대 한 곱하기 연산을 <xref:System.Numerics.Vector3>개체입니다.</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_Multiply (float left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Single
      description: "벡터입니다."
    - id: right
      type: System.Numerics.Vector3
      description: "스칼라 값입니다."
    return:
      type: System.Numerics.Vector3
      description: "크기 조정 된 벡터입니다."
  overload: System.Numerics.Vector3.op_Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)
  id: op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Subtraction(Vector3,Vector3)
  nameWithType: Vector3.op_Subtraction(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Subtraction(Vector3,Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "첫 번째에서 두 번째 벡터를 뺍니다."
  remarks: "빼기 메서드 정의 대해 빼기 연산을 <xref:System.Numerics.Vector3>개체입니다.</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_Subtraction (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "첫 번째 벡터입니다."
    - id: right
      type: System.Numerics.Vector3
      description: "두 번째 벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "뺀 결과로 생성 되는 벡터 <code> right </code> 에서 <code> left </code>합니다."
  overload: System.Numerics.Vector3.op_Subtraction*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)
  id: op_UnaryNegation(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_UnaryNegation(Vector3)
  nameWithType: Vector3.op_UnaryNegation(Vector3)
  fullName: System.Numerics.Vector3.op_UnaryNegation(Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정된 된 벡터를 부정합니다."
  remarks: "UnaryNegation 메서드 정의 대 한 단항 부정 연산을 <xref:System.Numerics.Vector3>개체입니다.</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_UnaryNegation (System.Numerics.Vector3 value);
    parameters:
    - id: value
      type: System.Numerics.Vector3
      description: "부정할 벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "부정 된 벡터입니다."
  overload: System.Numerics.Vector3.op_UnaryNegation*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Reflect(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Reflect(Vector3,Vector3)
  nameWithType: Vector3.Reflect(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Reflect(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정 된 법선이 있는 표면 벡터 반사를 반환 합니다."
  syntax:
    content: public static System.Numerics.Vector3 Reflect (System.Numerics.Vector3 vector, System.Numerics.Vector3 normal);
    parameters:
    - id: vector
      type: System.Numerics.Vector3
      description: "원본 벡터입니다."
    - id: normal
      type: System.Numerics.Vector3
      description: "반사 되는 표면의 법선입니다."
    return:
      type: System.Numerics.Vector3
      description: "반사 된 벡터입니다."
  overload: System.Numerics.Vector3.Reflect*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)
  id: SquareRoot(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: SquareRoot(Vector3)
  nameWithType: Vector3.SquareRoot(Vector3)
  fullName: System.Numerics.Vector3.SquareRoot(Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "요소가 각 지정된 된 벡터 요소의 제곱근 인 벡터를 반환 합니다."
  syntax:
    content: public static System.Numerics.Vector3 SquareRoot (System.Numerics.Vector3 value);
    parameters:
    - id: value
      type: System.Numerics.Vector3
      description: "벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "제곱근 벡터입니다."
  overload: System.Numerics.Vector3.SquareRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Subtract(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Subtract(Vector3,Vector3)
  nameWithType: Vector3.Subtract(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Subtract(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "첫 번째에서 두 번째 벡터를 뺍니다."
  syntax:
    content: public static System.Numerics.Vector3 Subtract (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "첫 번째 벡터입니다."
    - id: right
      type: System.Numerics.Vector3
      description: "두 번째 벡터입니다."
    return:
      type: System.Numerics.Vector3
      description: "차이 벡터입니다."
  overload: System.Numerics.Vector3.Subtract*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.ToString
  id: ToString
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: ToString()
  nameWithType: Vector3.ToString()
  fullName: System.Numerics.Vector3.ToString()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "기본 형식을 사용 하 여 현재 인스턴스의 문자열 표현을 반환 합니다."
  remarks: "이 메서드는 벡터의 각 요소 형식이 &quot;G&quot; (일반) 형식 문자열 및 현재 스레드 문화권의 서식 설정 규칙을 사용 하 여 문자열을 반환 합니다. &quot;\\<&quot; 및 &quot;>&quot; 문자를 시작 하 고 끝내는 문자열과 현재 문화권의 사용 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName>속성 뒤에 공백이 각 요소를 구분 하는 데 사용 됩니다.</xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "현재 인스턴스의 문자열 표현입니다."
  overload: System.Numerics.Vector3.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.ToString(System.String)
  id: ToString(System.String)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: ToString(String)
  nameWithType: Vector3.ToString(String)
  fullName: System.Numerics.Vector3.ToString(String)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정된 된 형식 문자열로 개별 요소의 형식을 사용 하 여 현재 인스턴스의 문자열 표현을 반환 합니다."
  remarks: "이 메서드를 사용 하 여 벡터의 각 요소는 형식을 있는 문자열을 반환 `format` 및 현재 문화권 서식 지정 규칙입니다. &quot;\\<&quot; 및 &quot;>&quot; 문자를 시작 하 고 끝내는 문자열과 현재 문화권의 사용 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName>속성 뒤에 공백이 각 요소를 구분 하는 데 사용 됩니다.</xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName>"
  syntax:
    content: public string ToString (string format);
    parameters:
    - id: format
      type: System.String
      description: "A [표준](~/add/includes/ajax-current-ext-md.md) 또는 [사용자 지정 숫자 형식 문자열](~/add/includes/ajax-current-ext-md.md) 개별 요소의 형식을 정의 하는 합니다."
    return:
      type: System.String
      description: "현재 인스턴스의 문자열 표현입니다."
  overload: System.Numerics.Vector3.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: ToString(String,IFormatProvider)
  nameWithType: Vector3.ToString(String,IFormatProvider)
  fullName: System.Numerics.Vector3.ToString(String,IFormatProvider)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정 된 형식 문자열로 개별 요소의 형식을 지정 된 형식 공급자로 문화권별 형식 지정을 정의 하 하 여 현재 인스턴스의 문자열 표현을 반환 합니다."
  remarks: "이 메서드를 사용 하 여 벡터의 각 요소는 형식을 있는 문자열을 반환 `format` 및 `formatProvider`합니다. &quot;\\<&quot; 및 &quot;>&quot; 문자는 시작 및 종료 지점 문자열과 형식 공급자를 사용 하는 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName>속성 뒤에 공백이 각 요소를 구분 하는 데 사용 됩니다.</xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName>"
  syntax:
    content: public string ToString (string format, IFormatProvider formatProvider);
    parameters:
    - id: format
      type: System.String
      description: "A [표준](~/add/includes/ajax-current-ext-md.md) 또는 [사용자 지정 숫자 형식 문자열](~/add/includes/ajax-current-ext-md.md) 개별 요소의 형식을 정의 하는 합니다."
    - id: formatProvider
      type: System.IFormatProvider
      description: "문화권별 서식 지정 정보를 제공 하는 형식 공급자입니다."
    return:
      type: System.String
      description: "현재 인스턴스의 문자열 표현입니다."
  overload: System.Numerics.Vector3.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  id: Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Transform(Vector3,Matrix4x4)
  nameWithType: Vector3.Transform(Vector3,Matrix4x4)
  fullName: System.Numerics.Vector3.Transform(Vector3,Matrix4x4)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정된 된 4x4 행렬으로 벡터를 변형 합니다."
  syntax:
    content: public static System.Numerics.Vector3 Transform (System.Numerics.Vector3 position, System.Numerics.Matrix4x4 matrix);
    parameters:
    - id: position
      type: System.Numerics.Vector3
      description: "변형할 벡터입니다."
    - id: matrix
      type: System.Numerics.Matrix4x4
      description: "변환 행렬입니다."
    return:
      type: System.Numerics.Vector3
      description: "변형 된 벡터입니다."
  overload: System.Numerics.Vector3.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)
  id: Transform(System.Numerics.Vector3,System.Numerics.Quaternion)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Transform(Vector3,Quaternion)
  nameWithType: Vector3.Transform(Vector3,Quaternion)
  fullName: System.Numerics.Vector3.Transform(Vector3,Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정된 된 쿼터 니 언 회전 값으로 벡터를 변형 합니다."
  syntax:
    content: public static System.Numerics.Vector3 Transform (System.Numerics.Vector3 value, System.Numerics.Quaternion rotation);
    parameters:
    - id: value
      type: System.Numerics.Vector3
      description: "회전할 벡터입니다."
    - id: rotation
      type: System.Numerics.Quaternion
      description: "적용할 회전입니다."
    return:
      type: System.Numerics.Vector3
      description: "변형 된 벡터입니다."
  overload: System.Numerics.Vector3.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  id: TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: TransformNormal(Vector3,Matrix4x4)
  nameWithType: Vector3.TransformNormal(Vector3,Matrix4x4)
  fullName: System.Numerics.Vector3.TransformNormal(Vector3,Matrix4x4)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "지정된 된 4x4 행렬으로 벡터 법선을 변형합니다."
  syntax:
    content: public static System.Numerics.Vector3 TransformNormal (System.Numerics.Vector3 normal, System.Numerics.Matrix4x4 matrix);
    parameters:
    - id: normal
      type: System.Numerics.Vector3
      description: "원본 벡터입니다."
    - id: matrix
      type: System.Numerics.Matrix4x4
      description: "행렬입니다."
    return:
      type: System.Numerics.Vector3
      description: "변형 된 벡터입니다."
  overload: System.Numerics.Vector3.TransformNormal*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.UnitX
  id: UnitX
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: UnitX
  nameWithType: Vector3.UnitX
  fullName: System.Numerics.Vector3.UnitX
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "벡터를 (1,0,0)을 가져옵니다."
  syntax:
    content: public static System.Numerics.Vector3 UnitX { get; }
    return:
      type: System.Numerics.Vector3
      description: "벡터 `(1,0,0)`합니다."
  overload: System.Numerics.Vector3.UnitX*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.UnitY
  id: UnitY
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: UnitY
  nameWithType: Vector3.UnitY
  fullName: System.Numerics.Vector3.UnitY
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "벡터를 (0,1,0)을 가져옵니다."
  syntax:
    content: public static System.Numerics.Vector3 UnitY { get; }
    return:
      type: System.Numerics.Vector3
      description: "벡터 `(0,1,0)`..."
  overload: System.Numerics.Vector3.UnitY*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.UnitZ
  id: UnitZ
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: UnitZ
  nameWithType: Vector3.UnitZ
  fullName: System.Numerics.Vector3.UnitZ
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "벡터를 (0,0,1)을 가져옵니다."
  syntax:
    content: public static System.Numerics.Vector3 UnitZ { get; }
    return:
      type: System.Numerics.Vector3
      description: "벡터 `(0,0,1)`합니다."
  overload: System.Numerics.Vector3.UnitZ*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.X
  id: X
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: X
  nameWithType: Vector3.X
  fullName: System.Numerics.Vector3.X
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "벡터의 X 구성 요소입니다."
  syntax:
    content: public float X;
    return:
      type: System.Single
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Y
  id: Y
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Y
  nameWithType: Vector3.Y
  fullName: System.Numerics.Vector3.Y
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "벡터의 Y 구성 요소입니다."
  syntax:
    content: public float Y;
    return:
      type: System.Single
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Z
  id: Z
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Z
  nameWithType: Vector3.Z
  fullName: System.Numerics.Vector3.Z
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "벡터의 Z 구성 요소입니다."
  syntax:
    content: public float Z;
    return:
      type: System.Single
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Zero
  id: Zero
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Zero
  nameWithType: Vector3.Zero
  fullName: System.Numerics.Vector3.Zero
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "3 요소가 0과 같은 벡터를 가져옵니다."
  syntax:
    content: public static System.Numerics.Vector3 Zero { get; }
    return:
      type: System.Numerics.Vector3
      description: "세 개의 요소가&0;과 같은 벡터 (즉, 벡터를 반환 `(0,0,0)`합니다."
  overload: System.Numerics.Vector3.Zero*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.RankException
  isExternal: true
  name: System.RankException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Numerics.Vector3.#ctor(System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Vector3(Single)
  nameWithType: Vector3.Vector3(Single)
  fullName: System.Numerics.Vector3.Vector3(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Vector3(Vector2,Single)
  nameWithType: Vector3.Vector3(Vector2,Single)
  fullName: System.Numerics.Vector3.Vector3(Vector2,Single)
- uid: System.Numerics.Vector2
  parent: System.Numerics
  isExternal: false
  name: Vector2
  nameWithType: Vector2
  fullName: System.Numerics.Vector2
- uid: System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Vector3(Single,Single,Single)
  nameWithType: Vector3.Vector3(Single,Single,Single)
  fullName: System.Numerics.Vector3.Vector3(Single,Single,Single)
- uid: System.Numerics.Vector3.Abs(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Abs(Vector3)
  nameWithType: Vector3.Abs(Vector3)
  fullName: System.Numerics.Vector3.Abs(Vector3)
- uid: System.Numerics.Vector3
  parent: System.Numerics
  isExternal: false
  name: Vector3
  nameWithType: Vector3
  fullName: System.Numerics.Vector3
- uid: System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Add(Vector3,Vector3)
  nameWithType: Vector3.Add(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Add(Vector3,Vector3)
- uid: System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Clamp(Vector3,Vector3,Vector3)
  nameWithType: Vector3.Clamp(Vector3,Vector3,Vector3)
  fullName: System.Numerics.Vector3.Clamp(Vector3,Vector3,Vector3)
- uid: System.Numerics.Vector3.CopyTo(System.Single[])
  parent: System.Numerics.Vector3
  isExternal: false
  name: CopyTo(Single[])
  nameWithType: Vector3.CopyTo(Single[])
  fullName: System.Numerics.Vector3.CopyTo(Single[])
- uid: System.Single[]
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single[]
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: Single[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)
  parent: System.Numerics.Vector3
  isExternal: false
  name: CopyTo(Single[],Int32)
  nameWithType: Vector3.CopyTo(Single[],Int32)
  fullName: System.Numerics.Vector3.CopyTo(Single[],Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Cross(Vector3,Vector3)
  nameWithType: Vector3.Cross(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Cross(Vector3,Vector3)
- uid: System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Distance(Vector3,Vector3)
  nameWithType: Vector3.Distance(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Distance(Vector3,Vector3)
- uid: System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: DistanceSquared(Vector3,Vector3)
  nameWithType: Vector3.DistanceSquared(Vector3,Vector3)
  fullName: System.Numerics.Vector3.DistanceSquared(Vector3,Vector3)
- uid: System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Divide(Vector3,Vector3)
  nameWithType: Vector3.Divide(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Divide(Vector3,Vector3)
- uid: System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Divide(Vector3,Single)
  nameWithType: Vector3.Divide(Vector3,Single)
  fullName: System.Numerics.Vector3.Divide(Vector3,Single)
- uid: System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Dot(Vector3,Vector3)
  nameWithType: Vector3.Dot(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Dot(Vector3,Vector3)
- uid: System.Numerics.Vector3.Equals(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Equals(Vector3)
  nameWithType: Vector3.Equals(Vector3)
  fullName: System.Numerics.Vector3.Equals(Vector3)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Numerics.Vector3.Equals(System.Object)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Equals(Object)
  nameWithType: Vector3.Equals(Object)
  fullName: System.Numerics.Vector3.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Numerics.Vector3.GetHashCode
  parent: System.Numerics.Vector3
  isExternal: false
  name: GetHashCode()
  nameWithType: Vector3.GetHashCode()
  fullName: System.Numerics.Vector3.GetHashCode()
- uid: System.Numerics.Vector3.Length
  parent: System.Numerics.Vector3
  isExternal: false
  name: Length()
  nameWithType: Vector3.Length()
  fullName: System.Numerics.Vector3.Length()
- uid: System.Numerics.Vector3.LengthSquared
  parent: System.Numerics.Vector3
  isExternal: false
  name: LengthSquared()
  nameWithType: Vector3.LengthSquared()
  fullName: System.Numerics.Vector3.LengthSquared()
- uid: System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Lerp(Vector3,Vector3,Single)
  nameWithType: Vector3.Lerp(Vector3,Vector3,Single)
  fullName: System.Numerics.Vector3.Lerp(Vector3,Vector3,Single)
- uid: System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Max(Vector3,Vector3)
  nameWithType: Vector3.Max(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Max(Vector3,Vector3)
- uid: System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Min(Vector3,Vector3)
  nameWithType: Vector3.Min(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Min(Vector3,Vector3)
- uid: System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Multiply(Vector3,Vector3)
  nameWithType: Vector3.Multiply(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Multiply(Vector3,Vector3)
- uid: System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Multiply(Vector3,Single)
  nameWithType: Vector3.Multiply(Vector3,Single)
  fullName: System.Numerics.Vector3.Multiply(Vector3,Single)
- uid: System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Multiply(Single,Vector3)
  nameWithType: Vector3.Multiply(Single,Vector3)
  fullName: System.Numerics.Vector3.Multiply(Single,Vector3)
- uid: System.Numerics.Vector3.Negate(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Negate(Vector3)
  nameWithType: Vector3.Negate(Vector3)
  fullName: System.Numerics.Vector3.Negate(Vector3)
- uid: System.Numerics.Vector3.Normalize(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Normalize(Vector3)
  nameWithType: Vector3.Normalize(Vector3)
  fullName: System.Numerics.Vector3.Normalize(Vector3)
- uid: System.Numerics.Vector3.One
  parent: System.Numerics.Vector3
  isExternal: false
  name: One
  nameWithType: Vector3.One
  fullName: System.Numerics.Vector3.One
- uid: System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Addition(Vector3,Vector3)
  nameWithType: Vector3.op_Addition(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Addition(Vector3,Vector3)
- uid: System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Division(Vector3,Vector3)
  nameWithType: Vector3.op_Division(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Division(Vector3,Vector3)
- uid: System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Division(Vector3,Single)
  nameWithType: Vector3.op_Division(Vector3,Single)
  fullName: System.Numerics.Vector3.op_Division(Vector3,Single)
- uid: System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Equality(Vector3,Vector3)
  nameWithType: Vector3.op_Equality(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Equality(Vector3,Vector3)
- uid: System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Inequality(Vector3,Vector3)
  nameWithType: Vector3.op_Inequality(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Inequality(Vector3,Vector3)
- uid: System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Multiply(Vector3,Vector3)
  nameWithType: Vector3.op_Multiply(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Multiply(Vector3,Vector3)
- uid: System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Multiply(Vector3,Single)
  nameWithType: Vector3.op_Multiply(Vector3,Single)
  fullName: System.Numerics.Vector3.op_Multiply(Vector3,Single)
- uid: System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Multiply(Single,Vector3)
  nameWithType: Vector3.op_Multiply(Single,Vector3)
  fullName: System.Numerics.Vector3.op_Multiply(Single,Vector3)
- uid: System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Subtraction(Vector3,Vector3)
  nameWithType: Vector3.op_Subtraction(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Subtraction(Vector3,Vector3)
- uid: System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_UnaryNegation(Vector3)
  nameWithType: Vector3.op_UnaryNegation(Vector3)
  fullName: System.Numerics.Vector3.op_UnaryNegation(Vector3)
- uid: System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Reflect(Vector3,Vector3)
  nameWithType: Vector3.Reflect(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Reflect(Vector3,Vector3)
- uid: System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: SquareRoot(Vector3)
  nameWithType: Vector3.SquareRoot(Vector3)
  fullName: System.Numerics.Vector3.SquareRoot(Vector3)
- uid: System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Subtract(Vector3,Vector3)
  nameWithType: Vector3.Subtract(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Subtract(Vector3,Vector3)
- uid: System.Numerics.Vector3.ToString
  parent: System.Numerics.Vector3
  isExternal: false
  name: ToString()
  nameWithType: Vector3.ToString()
  fullName: System.Numerics.Vector3.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Numerics.Vector3.ToString(System.String)
  parent: System.Numerics.Vector3
  isExternal: false
  name: ToString(String)
  nameWithType: Vector3.ToString(String)
  fullName: System.Numerics.Vector3.ToString(String)
- uid: System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.Vector3
  isExternal: false
  name: ToString(String,IFormatProvider)
  nameWithType: Vector3.ToString(String,IFormatProvider)
  fullName: System.Numerics.Vector3.ToString(String,IFormatProvider)
- uid: System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Transform(Vector3,Matrix4x4)
  nameWithType: Vector3.Transform(Vector3,Matrix4x4)
  fullName: System.Numerics.Vector3.Transform(Vector3,Matrix4x4)
- uid: System.Numerics.Matrix4x4
  parent: System.Numerics
  isExternal: false
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: System.Numerics.Matrix4x4
- uid: System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Transform(Vector3,Quaternion)
  nameWithType: Vector3.Transform(Vector3,Quaternion)
  fullName: System.Numerics.Vector3.Transform(Vector3,Quaternion)
- uid: System.Numerics.Quaternion
  parent: System.Numerics
  isExternal: false
  name: Quaternion
  nameWithType: Quaternion
  fullName: System.Numerics.Quaternion
- uid: System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  parent: System.Numerics.Vector3
  isExternal: false
  name: TransformNormal(Vector3,Matrix4x4)
  nameWithType: Vector3.TransformNormal(Vector3,Matrix4x4)
  fullName: System.Numerics.Vector3.TransformNormal(Vector3,Matrix4x4)
- uid: System.Numerics.Vector3.UnitX
  parent: System.Numerics.Vector3
  isExternal: false
  name: UnitX
  nameWithType: Vector3.UnitX
  fullName: System.Numerics.Vector3.UnitX
- uid: System.Numerics.Vector3.UnitY
  parent: System.Numerics.Vector3
  isExternal: false
  name: UnitY
  nameWithType: Vector3.UnitY
  fullName: System.Numerics.Vector3.UnitY
- uid: System.Numerics.Vector3.UnitZ
  parent: System.Numerics.Vector3
  isExternal: false
  name: UnitZ
  nameWithType: Vector3.UnitZ
  fullName: System.Numerics.Vector3.UnitZ
- uid: System.Numerics.Vector3.X
  parent: System.Numerics.Vector3
  isExternal: false
  name: X
  nameWithType: Vector3.X
  fullName: System.Numerics.Vector3.X
- uid: System.Numerics.Vector3.Y
  parent: System.Numerics.Vector3
  isExternal: false
  name: Y
  nameWithType: Vector3.Y
  fullName: System.Numerics.Vector3.Y
- uid: System.Numerics.Vector3.Z
  parent: System.Numerics.Vector3
  isExternal: false
  name: Z
  nameWithType: Vector3.Z
  fullName: System.Numerics.Vector3.Z
- uid: System.Numerics.Vector3.Zero
  parent: System.Numerics.Vector3
  isExternal: false
  name: Zero
  nameWithType: Vector3.Zero
  fullName: System.Numerics.Vector3.Zero
- uid: System.Numerics.Vector3.#ctor*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Vector3
  nameWithType: Vector3.Vector3
- uid: System.Numerics.Vector3.Abs*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Abs
  nameWithType: Vector3.Abs
- uid: System.Numerics.Vector3.Add*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Add
  nameWithType: Vector3.Add
- uid: System.Numerics.Vector3.Clamp*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Clamp
  nameWithType: Vector3.Clamp
- uid: System.Numerics.Vector3.CopyTo*
  parent: System.Numerics.Vector3
  isExternal: false
  name: CopyTo
  nameWithType: Vector3.CopyTo
- uid: System.Numerics.Vector3.Cross*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Cross
  nameWithType: Vector3.Cross
- uid: System.Numerics.Vector3.Distance*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Distance
  nameWithType: Vector3.Distance
- uid: System.Numerics.Vector3.DistanceSquared*
  parent: System.Numerics.Vector3
  isExternal: false
  name: DistanceSquared
  nameWithType: Vector3.DistanceSquared
- uid: System.Numerics.Vector3.Divide*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Divide
  nameWithType: Vector3.Divide
- uid: System.Numerics.Vector3.Dot*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Dot
  nameWithType: Vector3.Dot
- uid: System.Numerics.Vector3.Equals*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Equals
  nameWithType: Vector3.Equals
- uid: System.Numerics.Vector3.GetHashCode*
  parent: System.Numerics.Vector3
  isExternal: false
  name: GetHashCode
  nameWithType: Vector3.GetHashCode
- uid: System.Numerics.Vector3.Length*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Length
  nameWithType: Vector3.Length
- uid: System.Numerics.Vector3.LengthSquared*
  parent: System.Numerics.Vector3
  isExternal: false
  name: LengthSquared
  nameWithType: Vector3.LengthSquared
- uid: System.Numerics.Vector3.Lerp*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Lerp
  nameWithType: Vector3.Lerp
- uid: System.Numerics.Vector3.Max*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Max
  nameWithType: Vector3.Max
- uid: System.Numerics.Vector3.Min*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Min
  nameWithType: Vector3.Min
- uid: System.Numerics.Vector3.Multiply*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Multiply
  nameWithType: Vector3.Multiply
- uid: System.Numerics.Vector3.Negate*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Negate
  nameWithType: Vector3.Negate
- uid: System.Numerics.Vector3.Normalize*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Normalize
  nameWithType: Vector3.Normalize
- uid: System.Numerics.Vector3.One*
  parent: System.Numerics.Vector3
  isExternal: false
  name: One
  nameWithType: Vector3.One
- uid: System.Numerics.Vector3.op_Addition*
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Addition
  nameWithType: Vector3.op_Addition
- uid: System.Numerics.Vector3.op_Division*
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Division
  nameWithType: Vector3.op_Division
- uid: System.Numerics.Vector3.op_Equality*
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Equality
  nameWithType: Vector3.op_Equality
- uid: System.Numerics.Vector3.op_Inequality*
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Inequality
  nameWithType: Vector3.op_Inequality
- uid: System.Numerics.Vector3.op_Multiply*
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Multiply
  nameWithType: Vector3.op_Multiply
- uid: System.Numerics.Vector3.op_Subtraction*
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Subtraction
  nameWithType: Vector3.op_Subtraction
- uid: System.Numerics.Vector3.op_UnaryNegation*
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_UnaryNegation
  nameWithType: Vector3.op_UnaryNegation
- uid: System.Numerics.Vector3.Reflect*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Reflect
  nameWithType: Vector3.Reflect
- uid: System.Numerics.Vector3.SquareRoot*
  parent: System.Numerics.Vector3
  isExternal: false
  name: SquareRoot
  nameWithType: Vector3.SquareRoot
- uid: System.Numerics.Vector3.Subtract*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Subtract
  nameWithType: Vector3.Subtract
- uid: System.Numerics.Vector3.ToString*
  parent: System.Numerics.Vector3
  isExternal: false
  name: ToString
  nameWithType: Vector3.ToString
- uid: System.Numerics.Vector3.Transform*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Transform
  nameWithType: Vector3.Transform
- uid: System.Numerics.Vector3.TransformNormal*
  parent: System.Numerics.Vector3
  isExternal: false
  name: TransformNormal
  nameWithType: Vector3.TransformNormal
- uid: System.Numerics.Vector3.UnitX*
  parent: System.Numerics.Vector3
  isExternal: false
  name: UnitX
  nameWithType: Vector3.UnitX
- uid: System.Numerics.Vector3.UnitY*
  parent: System.Numerics.Vector3
  isExternal: false
  name: UnitY
  nameWithType: Vector3.UnitY
- uid: System.Numerics.Vector3.UnitZ*
  parent: System.Numerics.Vector3
  isExternal: false
  name: UnitZ
  nameWithType: Vector3.UnitZ
- uid: System.Numerics.Vector3.Zero*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Zero
  nameWithType: Vector3.Zero
