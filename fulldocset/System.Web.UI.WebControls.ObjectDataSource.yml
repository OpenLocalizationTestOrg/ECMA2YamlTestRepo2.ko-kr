### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.ObjectDataSource
  id: ObjectDataSource
  children:
  - System.Web.UI.WebControls.ObjectDataSource.#ctor
  - System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  - System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  - System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  - System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  - System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  - System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  - System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  - System.Web.UI.WebControls.ObjectDataSource.Delete
  - System.Web.UI.WebControls.ObjectDataSource.Deleted
  - System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  - System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  - System.Web.UI.WebControls.ObjectDataSource.Deleting
  - System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  - System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  - System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  - System.Web.UI.WebControls.ObjectDataSource.Filtering
  - System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  - System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  - System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  - System.Web.UI.WebControls.ObjectDataSource.Insert
  - System.Web.UI.WebControls.ObjectDataSource.Inserted
  - System.Web.UI.WebControls.ObjectDataSource.Inserting
  - System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  - System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  - System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  - System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  - System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  - System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  - System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  - System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  - System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  - System.Web.UI.WebControls.ObjectDataSource.Select
  - System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  - System.Web.UI.WebControls.ObjectDataSource.Selected
  - System.Web.UI.WebControls.ObjectDataSource.Selecting
  - System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  - System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  - System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  - System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  - System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  - System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  - System.Web.UI.WebControls.ObjectDataSource.TypeName
  - System.Web.UI.WebControls.ObjectDataSource.Update
  - System.Web.UI.WebControls.ObjectDataSource.Updated
  - System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  - System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  - System.Web.UI.WebControls.ObjectDataSource.Updating
  langs:
  - csharp
  name: ObjectDataSource
  nameWithType: ObjectDataSource
  fullName: System.Web.UI.WebControls.ObjectDataSource
  type: Class
  summary: "다중 계층 웹 응용 프로그램 아키텍처의 데이터 바인딩된 컨트롤에 데이터를 제공 하는 비즈니스 개체를 나타냅니다."
  remarks: "이 항목의:- [소개](#introduction)      -   [목적](#purpose)      -   [데이터 검색](#retrieving_data)      -   [데이터 작업을 수행](#performing_data_operations)      -   [데이터 필터링](#filtering_data)      -   [캐싱](#caching)      -   [기능](#features)      -   [데이터 뷰](#data_view)      -   [를 사용 하 여 LINQ to SQL](#using_linq_to_sql)      -   [선언적 구문](#declarative_syntax) <a name=&quot;introduction&quot;> </a> # # 소개 An ObjectDataSource 컨트롤 만드는 클래스와 함께 작동 합니다.       ObjectDataSource 컨트롤 태그에 해당 메서드의 이름을 한 데이터를 검색 및 업데이트 하는 메서드를 만듭니다. ObjectDataSource 포스트백 처리 또는 렌더링 중 지정 된 메서드를 호출 합니다.       시각적으로 ObjectDataSource 컨트롤 렌더링 되지 않습니다. 결과적으로 ObjectDataSource 기능 지원 하지 않는 시각적와 같은 <xref:System.Web.UI.DataSourceControl.EnableTheming%2A>또는 <xref:System.Web.UI.DataSourceControl.SkinID%2A>속성.</xref:System.Web.UI.DataSourceControl.SkinID%2A> </xref:System.Web.UI.DataSourceControl.EnableTheming%2A>      <a name=&quot;purpose&quot;></a># # 용도 매우 일반적인 응용 프로그램 디자인 방법은 비즈니스 논리에서 프레젠테이션 계층을 구분 하 고 비즈니스 개체의 비즈니스 논리를 캡슐화 합니다. 이러한 비즈니스 개체 프레젠테이션 계층 및&3; 계층 응용 프로그램 아키텍처에는 데이터 계층 사이 고유한 계층을 형성 합니다. ObjectDataSource 컨트롤을 사용 하면 개발자가 자신의&3; 계층 응용 프로그램 아키텍처를 유지 하면서 ASP.NET 데이터 소스 제어를 사용 하도록 합니다.       ObjectDataSource 컨트롤 리플렉션을 사용 하 여 검색, 업데이트, 삽입 및 데이터를 삭제 하려면 메서드를 호출 하 고 비즈니스 개체의 인스턴스를 만듭니다. <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>속성은 ObjectDataSource를 사용 하는 클래스의 이름을 식별 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> ObjectDataSource 컨트롤을 만들고 각 메서드 호출;에 대 한 클래스의 인스턴스를 삭제 합니다. 보유 하지 않는 개체가 메모리에 웹 요청 수명에 대 한 합니다. 경우에 사용할 수 있는 비즈니스 개체 많은 리소스가 필요 하거나 만들고 삭제 하는 비용이 많이 소요 되는 중요 한 고려 사항입니다. 부담이 큰 개체가 사용 하는 최적의 디자인 선택 하지 않을 수 있지만 사용 하 여 개체의 수명 주기를 제어할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>      > [!NOTE] >으로 식별 되는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>속성 인스턴스 메서드 일 수 있습니다 또는 `static` (`Shared` Visual basic에서) 메서드.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 메서드가 이면 `static` (`Shared` Visual basic에서), 비즈니스 개체의 인스턴스 만들어지지 않습니다 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>이벤트가 발생 하지 않습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>      <a name=&quot;retrieving_data&quot;></a># # 설정에서 비즈니스 개체 데이터를 검색 하는 데이터를 검색 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성 데이터를 검색 하는 메서드의 이름입니다.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 메서드가 반환 하지 않는 경우는 <xref:System.Collections.IEnumerable>또는 <xref:System.Data.DataSet>개체를 개체에 런타임에 의해 래핑된는 <xref:System.Collections.IEnumerable>컬렉션.</xref:System.Collections.IEnumerable> </xref:System.Data.DataSet> </xref:System.Collections.IEnumerable> 메서드 시그니처에 매개 변수가 추가할 수 있습니다 <xref:System.Web.UI.WebControls.Parameter>개체를 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>컬렉션에 지정 된 메서드에 전달 하려는 값에 바인딩할는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.Parameter> 매개 변수를 사용 하도록 ObjectDataSource 컨트롤에 대 한 순서로 매개 변수 이름 및 메서드 시그니처의 매개 변수 형식과 일치 해야 합니다. 자세한 내용은 참조 [ObjectDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.       ObjectDataSource 컨트롤 데이터를 검색할 때마다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드를 호출 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 이 메서드는 지정 된 메서드에 프로그래밍 방식의 액세스를 제공 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 지정 된 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성은 ObjectDataSource에 바인딩되는 컨트롤에 의해 자동으로 호출 됩니다 때 해당 `DataBind` 메서드를 호출 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 설정 하는 경우는 `DataSourceID` 데이터 바인딩된 컨트롤의 속성을 컨트롤 자동으로 데이터에 바인딩하는 데이터 원본에서 필요에 따라 합니다. 설정의 `DataSourceID` 속성은 데이터 바인딩된 컨트롤을 ObjectDataSource 컨트롤에 바인딩하는 것이 좋습니다. 설정할 수 있습니다는 `DataSource` 속성이 아니라 다음 명시적으로 호출 해야는 `DataBind` 데이터 바인딩된 컨트롤의 메서드. 호출할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>언제 든 지 데이터를 검색 하려면 프로그래밍 방식으로 메서드.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       데이터 소스 컨트롤에 데이터 바인딩된 컨트롤에 바인딩하는 방법에 대 한 자세한 내용은 참조 [데이터 소스 제어를 사용 하 여 데이터에 바인딩](http://msdn.microsoft.com/en-us/e41adfff-8fb8-449e-9cd1-9bd49788c5f7)합니다.      <a name=&quot;performing_data_operations&quot;></a># # 수행 작업에 따라 데이터는 ObjectDataSource를 제어 하는 비즈니스 개체의 기능에 연동, 업데이트, 삽입 및 삭제 같은 데이터 작업을 수행할 수 있습니다. 이러한 데이터 작업을 수행 하려면 적절 한 메서드 이름 및 수행 하려는 작업에 대 한 관련된 매개 변수를 설정 합니다. 예를 들어 업데이트 작업에 대 한 설정에서 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>속성을 업데이트를 수행 하 고 추가 하는 비즈니스 개체 메서드 이름에 필요한 매개 변수가 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> ObjectDataSource 컨트롤이 데이터 바인딩된 컨트롤에 연결 된 경우 매개 변수는 데이터 바인딩된 컨트롤에 의해 추가 됩니다. 이 경우 메서드의 매개 변수 이름이 데이터 바인딩된 컨트롤의 필드 이름과 일치 하는지 확인 해야 합니다. 업데이트가 수행 되는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>메서드가 호출 되는 데이터 바인딩된 컨트롤에서 사용자 코드에서 명시적으로 또는 자동으로.</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 동일한 일반 패턴에 대 한 뒤 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>및 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>작업.</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 비즈니스 개체는 일괄 처리 되지 않고 이러한 유형의 데이터 작업에 대 한 하나의 레코드를 한 번에 수행할 예정 됩니다.      <a name=&quot;filtering_data&quot;></a># #-ObjectDataSource 컨트롤에서 검색 되는 데이터를 필터링 할 수는 데이터를 필터링 하는 중는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성을 데이터로 반환 되 면 한 <xref:System.Data.DataSet>또는 <xref:System.Data.DataTable>개체입니다.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 설정할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>속성 형식을 사용 하 여 필터링 식에 구문 문자열 및에 지정 된 매개 변수를 식의 값을 바인딩하는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>      <a name=&quot;caching&quot;></a># #는 ObjectDataSource 여러 요청에 대해 비즈니스 개체의 인스턴스를 유지 하지 않는 있지만 캐싱로 식별 되는 메서드 호출의 결과 캐시할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 데이터가 캐시를 다시 호출 하면 되는 동안는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>비즈니스 개체를 만들고 호출 하는 대신 캐시 된 데이터를 반환 하는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>리플렉션을 사용 하 여.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 캐싱을 사용 하면 않으려면 개체를 만들고 웹 서버의 메모리 해당 데이터 메서드를 호출 합니다. 자동으로 캐시 된 데이터는 ObjectDataSource 때는 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>속성이로 설정 되어 `true`, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>속성은 캐시 삭제 되기 전에 캐시 데이터를 저장 하는 시간 (초)의 수입니다.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 지정할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>속성과 선택적 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> ObjectDataSource 컨트롤을 사용 하면 모든 종류의 데이터를 캐시할 수 있지만 리소스 또는 여러 요청을 처리 하는 공유할 수 없는 상태를 유지 하는 개체를 캐시 하지 않습니다 (예: 열기 <xref:System.Data.SqlClient.SqlDataReader>개체) 이므로 개체의 동일한 인스턴스에 여러 요청을 처리 하는 데 사용 됩니다.</xref:System.Data.SqlClient.SqlDataReader>      <a name=&quot;features&quot;></a># # 기능을 다음 표에서 ObjectDataSource 컨트롤의 기능에 설명 합니다.      | 기능 | 요구 사항 |   |----------------|------------------|   | 선택 하면 | 데이터를 선택 하는 비즈니스 개체 메서드의 이름으로 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성을 설정 하 고 프로그래밍 방식으로 또는 데이터 바인딩된 컨트롤을 사용 하 여 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>컬렉션의 모든 필요한 매개 변수를 포함 합니다. |   | 정렬 | 정렬 조건을 전달 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>메서드의 매개 변수 이름에 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>속성을 설정 합니다. |   | 필터링 | 설정의 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>속성 필터링 식에 사용 하 고 필요에 따라 모든 매개 변수를 추가 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>컬렉션 데이터를 필터링 할 때는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드를 호출 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>  </xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성에 지정 된 메서드는 <xref:System.Data.DataSet>반환 해야 합니다 또는 <xref:System.Data.DataTable>. |   | 페이징 | 데이터 소스 페이징을 지원 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>메서드 검색할 레코드의 최대 수와 검색할 첫 번째 레코드의 인덱스에 대 한 매개 변수를 포함 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 이러한 매개 변수 이름 설정 해야 합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>및 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>속성을 각각.</xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> ObjectDataSource 컨트롤 직접으로 지정한 메서드의에서 페이징을 지원 하지 않더라도 데이터 바인딩된 컨트롤을 자체적으로 페이징을 수행할 수 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 이 작업을 수행할 수 있게 되기를 데이터 바인딩된 컨트롤에 대 한 중요 한 점은 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성으로 지정 하는 메서드가 <xref:System.Collections.ICollection>인터페이스를 구현 하는 개체를 반환 합니다. |   | 업데이트 | 데이터를 업데이트 하는 비즈니스 개체 메서드 이름에 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>속성을 설정 하 고 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>컬렉션의 모든 필요한 매개 변수를 포함 합니다. |   | 삭제 | 비즈니스 개체 메서드 또는 데이터를 삭제 하는 함수 이름에 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>속성을 설정 하 고 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>컬렉션의 모든 필요한 매개 변수를 포함 합니다. |   | 삽입 | 비즈니스 개체 메서드 또는 데이터를 삽입 하는 함수 이름에 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>속성을 설정 하 고 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>컬렉션의 모든 필요한 매개 변수를 포함 합니다. |   | 캐싱 | <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>속성을 설정 `true`, 및는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>및 캐시 된 데이터에 대해 원하는 캐싱 동작에 따라 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>속성입니다. |      > [!NOTE] > ObjectDataSource 클래스를 사용 하 여 데이터 업데이트 하거나 삽입 하는 클라이언트에 입력 하는 문자열 변환 되지 않습니다 자동으로 클라이언트 culture 형식에서 서버 문화권 형식으로.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Collections.ICollection> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 예를 들어 클라이언트 culture의 날짜 형식으로 DD/MM/YYYY를 지정할 수 있습니다 및 서버에서의 날짜 형식은 MM/DD/YYYY를 수 있습니다. 이 경우 2009 년 10 월 5 일은에 입력 한 <xref:System.Web.UI.WebControls.TextBox>5/10/2009로 제어할 수 있지만 2009 년 5 월 10 일으로 해석 됩니다.</xref:System.Web.UI.WebControls.TextBox> 2009 년 10 월 15 일은 15/10/2009로 입력 및 잘못 된 날짜로 거부 됩니다.      <a name=&quot;data_view&quot;></a># # 데이터 보기 이름으로 모든 데이터 소스 컨트롤과 ObjectDataSource 컨트롤은 데이터 원본 뷰 클래스와 연결 합니다. ObjectDataSource 컨트롤이 페이지 개발자가 데이터를 사용 하는 인터페이스 동안는 <xref:System.Web.UI.WebControls.ObjectDataSourceView>클래스는 데이터 바인딩된 컨트롤을 사용 하는 인터페이스입니다.</xref:System.Web.UI.WebControls.ObjectDataSourceView> 또한는 <xref:System.Web.UI.WebControls.ObjectDataSourceView>클래스는 데이터 소스 컨트롤의 기능을 설명 하 고 실제 작업을 수행 합니다.</xref:System.Web.UI.WebControls.ObjectDataSourceView> ObjectDataSource 컨트롤에 연결 된 하나만 <xref:System.Web.UI.WebControls.ObjectDataSourceView>, 이름은 항상 및 `DefaultView`.</xref:System.Web.UI.WebControls.ObjectDataSourceView> 반면는 <xref:System.Web.UI.WebControls.ObjectDataSourceView>개체에 의해 노출 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A>다양 한 속성 및 메서드에 래핑된 메서드와 ObjectDataSource 컨트롤에서 직접 노출.</xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 내부적으로 <xref:System.Web.UI.WebControls.ObjectDataSourceView>개체 검색, 삽입, 업데이트, 삭제, 필터링 및 데이터 정렬 등의 모든 데이터 작업을 수행 합니다.</xref:System.Web.UI.WebControls.ObjectDataSourceView> 자세한 내용은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>.</xref:System.Web.UI.WebControls.ObjectDataSourceView> 을 참조 하십시오.      <a name=&quot;using_linq_to_sql&quot;></a># #를 사용 하 여 LINQ to SQL 있습니다 ObjectDataSource 컨트롤 LINQ to SQL 클래스와 함께 사용할 수 있습니다. 이렇게 하려면 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>데이터 컨텍스트 클래스의 이름으로 속성</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 을 설정 하면 또한 설정는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>메서드는 해당 작업을 수행 하는 데이터 컨텍스트 클래스의 메서드를.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>데이터 컨텍스트 클래스의 삭제를 취소 하려면 이벤트</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 에 대 한 이벤트 처리기를 만들어야 합니다. 이 단계는 필요 LINQ to SQL에서는 지연 된 실행을 지원 하기 때문에 반면 ObjectDataSource 컨트롤에서 선택 작업 한 후 데이터 컨텍스트를 삭제 하려고 합니다. LINQ to SQL 클래스 만들기 하는 방법에 대 한 자세한 내용은 참조 [하는 방법: 만들 LINQ to SQL 클래스 웹 프로젝트에서](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081)합니다. 참조 데이터 컨텍스트 클래스의 삭제를 취소 하는 방법의 예는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>      ## Entity Framework 있습니다를 사용 하 여 Entity Framework와 함께 ObjectDataSource 컨트롤을 사용할 수도 있습니다. 자세한 내용은 참조 [Entity Framework와 ObjectDataSource 컨트롤을 사용 하 여](http://go.microsoft.com/fwlink/?LinkId=209117)합니다.      <a name=&quot;declarative_syntax&quot;></a>    ## Declarative Syntax      ```   <asp:ObjectDataSource       CacheDuration=&quot;string|Infinite&quot;       CacheExpirationPolicy=&quot;Absolute|Sliding&quot;       CacheKeyDependency=&quot;string&quot;       ConflictDetection=&quot;OverwriteChanges|CompareAllValues&quot;       ConvertNullToDBNull=&quot;True|False&quot;       DataObjectTypeName=&quot;string&quot;       DeleteMethod=&quot;string&quot;       EnableCaching=&quot;True|False&quot;       EnablePaging=&quot;True|False&quot;       EnableTheming=&quot;True|False&quot;       EnableViewState=&quot;True|False&quot;       FilterExpression=&quot;string&quot;       ID=&quot;string&quot;       InsertMethod=&quot;string&quot;       MaximumRowsParameterName=&quot;string&quot;       OldValuesParameterFormatString=&quot;string&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDeleted=&quot;Deleted event handler&quot;       OnDeleting=&quot;Deleting event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnFiltering=&quot;Filtering event handler&quot;       OnInit=&quot;Init event handler&quot;       OnInserted=&quot;Inserted event handler&quot;       OnInserting=&quot;Inserting event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnObjectCreated=&quot;ObjectCreated event handler&quot;       OnObjectCreating=&quot;ObjectCreating event handler&quot;       OnObjectDisposing=&quot;ObjectDisposing event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnSelected=&quot;Selected event handler&quot;       OnSelecting=&quot;Selecting event handler&quot;       OnUnload=&quot;Unload event handler&quot;       OnUpdated=&quot;Updated event handler&quot;       OnUpdating=&quot;Updating event handler&quot;       runat=&quot;server&quot;       SelectCountMethod=&quot;string&quot;       SelectMethod=&quot;string&quot;       SkinID=&quot;string&quot;       SortParameterName=&quot;string&quot;       SqlCacheDependency=&quot;string&quot;       StartRowIndexParameterName=&quot;string&quot;       TypeName=&quot;string&quot;       UpdateMethod=&quot;string&quot;       Visible=&quot;True|False&quot;   >           <DeleteParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </DeleteParameters>           <FilterParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </FilterParameters>           <InsertParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </InsertParameters>           <SelectParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </SelectParameters>           <UpdateParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </UpdateParameters>   </asp:ObjectDataSource>   ```"
  example:
  - "A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://code.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=aspnetmsdnexamples&DownloadId=14838).  \n  \n This section shows an ObjectDataSource in markup in an .aspx page and it shows the business objects that it works with. The example is the .aspx page. It contains a <xref:System.Web.UI.WebControls.GridView> control that is bound to an ObjectDataSource control. The ObjectDataSource control markup specifies the name of the business object and the name of the business object method to call in order to retrieve data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_105_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_105_1.aspx)]  \n  \n The following example shows the business object that the ObjectDataSource control in the .aspx page uses. (Many other ObjectDataSource code examples use this business object also.) The example consists of the following two basic classes:  \n  \n-   The `EmployeeLogic` class is the business logic class that the ObjectDataSource uses.  \n  \n-   The `NorthwindEmployee` class defines the data object that is returned by the `GetAllEmployees` method of the `EmployeeLogic` class.  \n  \n An additional `NorthwindDataException` class is provided as a convenience.  \n  \n This set of example classes works with the Northwind Traders database, which is available with Microsoft SQL Server and Microsoft Access. For a complete working example, you must compile and use these classes with the .aspx page example that is provided. For information about how to install the Northwind Traders database, see [How to: Install Sample Databases](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_105_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_105_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("TypeName")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ObjectDataSource))]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class ObjectDataSource : System.Web.UI.DataSourceControl
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  implements: []
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDataSource()
  nameWithType: ObjectDataSource.ObjectDataSource()
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 클래스입니다."
  syntax:
    content: public ObjectDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDataSource(String,String)
  nameWithType: ObjectDataSource.ObjectDataSource(String,String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource(String,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 클래스 지정 된 형식 이름 및 데이터 검색 메서드 이름을 사용 합니다."
  remarks: "값은 `typeName` Bin 또는 App_Code 디렉터리에 있는 코드는 부분적으로 정규화 된 형식 또는 전역 어셈블리 캐시에 등록 되어 있는 코드에 대 한 정규화 된 형식 이름 매개 변수 수 있습니다. 에 대 한 적절 한 참조를 추가 해야 전역 어셈블리 캐시를 사용 하는 경우는 `assemblies` Machine.config 또는 Web.config 구성 파일의 섹션입니다."
  syntax:
    content: public ObjectDataSource (string typeName, string selectMethod);
    parameters:
    - id: typeName
      type: System.String
      description: "클래스의 이름 하는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 작동 합니다."
    - id: selectMethod
      type: System.String
      description: "메서드의 이름을 사용 하는 함수 또는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 를 데이터를 검색 하기 위해 호출 합니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  id: CacheDuration
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "초 단위로 데이터 소스 제어의 데이터를 캐시에서 검색 되는 시간 길이 가져오거나는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 데이터 캐싱을 지원 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 데이터 캐시 되어 있는 동안에 호출 된 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드 검색 데이터는 비즈니스 대신 캐시에서 개체를 <xref:System.Web.UI.WebControls.ObjectDataSource>연동.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 캐시가 만료 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드가 비즈니스 개체의 데이터를 검색 하 고 다시 데이터를 캐시 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       <xref:System.Web.UI.WebControls.ObjectDataSource>데이터를 자동으로 캐시 하는 컨트롤 때는 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>속성이 `true` CacheDuration 속성 캐시는 캐시 엔트리가 삭제 되기 전에 데이터를 저장 하는 시간 (초)의 수를 나타내는 0 보다 큰 값으로 설정 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 값이 0 무한정 캐시를 나타냅니다.       캐시 기간의 조합에 따라 조정 되 고 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>설정.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>속성이로 설정 되는 <xref:System.Web.UI.DataSourceCacheExpiry>값은 <xref:System.Web.UI.WebControls.ObjectDataSource>첫 번째 호출에서 데이터를 캐시는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드 많아야 CacheDuration 속성에 의해 지정 된 기간 동안 메모리에 보관 하 고.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 데이터는 메모리를 필요로 하는 경우 지속 시간 이전 해제 될 수 있습니다. 다음 호출 하는 동안 캐시는 다음의 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>속성이 <xref:System.Web.UI.DataSourceCacheExpiry>값, 데이터 소스 제어의 첫 번째 호출에서 데이터를 캐시는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드, 하지만 캐시에 각 후속 호출에 보관 하는 기간을 다시 설정는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 에 대 한 마지막 호출 후 CacheDuration 속성에 동일한 시간에 대 한 작업이 수행 되지 않은 경우 캐시가 만료 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> object supports caching. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> control supports caching. To enable caching, you must implement the method that retrieves data, which is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, to return the data as a <xref:System.Data.DataSet> object. In this example, the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the CacheDuration and <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> properties are set. The <xref:System.Web.UI.WebControls.ObjectDataSource> caches data that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property for 30 seconds.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1024_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1024_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList> object. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>.  \n  \n This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1024_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1024_2.cs)]"
  syntax:
    content: public virtual int CacheDuration { get; set; }
    return:
      type: System.Int32
      description: "시간 (초)의 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 의 결과 캐시 한 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>속성 호출.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> 기본값은 0입니다. 값은 음수일 수 없습니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheDuration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  id: CacheExpirationPolicy
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "캐시 만료 동작은 가져오거나, 기간, 함께 사용 하면 데이터 소스 제어를 사용 하는 캐시의 동작을 설명 합니다."
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 데이터 캐싱을 지원 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 데이터 캐시 되어 있는 동안에 호출 된 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드 검색 데이터는 비즈니스 대신 캐시에서 개체를 <xref:System.Web.UI.WebControls.ObjectDataSource>연동.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 캐시가 만료 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드가 비즈니스 개체의 데이터를 검색 하 고 다시 데이터를 캐시 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       <xref:System.Web.UI.WebControls.ObjectDataSource>데이터를 자동으로 캐시 하는 컨트롤 때는 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>속성 `true` 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>속성 캐시는 캐시 엔트리가 삭제 되기 전에 데이터를 저장 하는 시간 (초)의 수를 나타내는 0 보다 큰 값으로 설정 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 값이 0 무한정 캐시 기간을 나타냅니다.       캐시 기간 및 CacheExpirationPolicy 설정 조합에 따라 조정 됩니다. CacheExpirationPolicy 속성이로 설정 된 경우는 <xref:System.Web.UI.DataSourceCacheExpiry>값의 <xref:System.Web.UI.WebControls.ObjectDataSource>첫 번째 호출에서 데이터를 캐시는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드 많아야 하 여 지정 된 시간 기간 동안 메모리에 보관 하 고는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> 데이터는 메모리를 필요로 하는 경우 지속 시간 이전 해제 될 수 있습니다. 다음 호출 하는 동안 캐시는 다음의 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> CacheExpirationPolicy 속성이로 설정 된 경우는 <xref:System.Web.UI.DataSourceCacheExpiry>값, 데이터 소스 제어의 첫 번째 호출에서 데이터를 캐시는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드, 하지만 각 후속 호출에 대 한 캐시 보관 하는 기간을 다시 설정 된 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.DataSourceCacheExpiry> 해당 하는 한 번에 대 한 작업이 수행 되지 않은 경우 캐시가 만료 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>속성에 대 한 마지막 호출 후의 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> object supports filtering and caching. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> control supports filtering and caching. To enable filtering and caching, you must implement the method that retrieves data, which is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, to return the data as a <xref:System.Data.DataSet> object. In this example, caching is enabled because the `EmployeeLogic` object returns data as a <xref:System.Data.DataSet>, the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> and CacheExpirationPolicy properties are set. The <xref:System.Web.UI.WebControls.ObjectDataSource> caches data that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property for 30 seconds.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1282_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1282_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList>. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1282_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1282_2.cs)]"
  syntax:
    content: public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }
    return:
      type: System.Web.UI.DataSourceCacheExpiry
      description: "중 하나는 <xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;> </xref> 값입니다. 기본값은 <xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  id: CacheKeyDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "캐시 개체 데이터 소스 제어에 의해 만들어진 모든 데이터에 연결 된 사용자 정의 키 종속성을 가져오거나 설정 합니다."
  remarks: "임의의 문자열 값으로 CacheKeyDependency 속성을 설정할 수 있습니다.       키 만료 되 면 모든 캐시 개체도 명시적으로 만료 됩니다. 이 캐시 항목에 의해 만들어진 무효화 될 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource>고유한 페이지에서 프로그래밍 방식으로 코드.</xref:System.Web.UI.WebControls.ObjectDataSource>       <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 데이터 캐싱을 지원 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 데이터 캐시 되어 있는 동안에 호출 된 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드 검색 데이터는 비즈니스 대신 캐시에서 개체를 <xref:System.Web.UI.WebControls.ObjectDataSource>연동.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 캐시가 만료 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드가 비즈니스 개체의 데이터를 검색 하 고 다시 데이터를 캐시 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       <xref:System.Web.UI.WebControls.ObjectDataSource>데이터를 자동으로 캐시 하는 컨트롤 때는 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>속성 `true` 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>속성 캐시는 캐시 엔트리가 삭제 되기 전에 데이터를 저장 하는 시간 (초)의 수를 나타내는 0 보다 큰 값으로 설정 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 값이 0 무한정 캐시를 나타냅니다.       에 의해 만들어진 모든 캐시 항목 간의 종속성을 만들려면 CacheKeyDependency 속성을 설정할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤과 키.</xref:System.Web.UI.WebControls.ObjectDataSource> 있습니다 수 모든 캐시 항목 프로그래밍 방식으로 언제 든 지 하 여 만료 키를 만료 합니다. 키를 사용 하 여 만료 된 <xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName>메서드 매개 변수로 현재 CacheKeyDependency 값.</xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName>       모든 조합에 대 한 고유 캐시 엔트리가 만들어집니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 여러 <xref:System.Web.UI.WebControls.ObjectDataSource>수 동일한 캐시 항목 시나리오에 사용할 컨트롤 같은 형식, 메서드 및 매개 변수를 사용 하 여 데이터를 로드 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that retrieve records from the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve and display the employee record that is selected by the user.  \n  \n Caching is enabled for the <xref:System.Web.UI.WebControls.ObjectDataSource> control. Therefore, each record is retrieved only one time from the database. The CacheKeyDependency property is set to \"EmployeeDetails\", but any string value can work as the key. The Web page also includes a <xref:System.Web.UI.WebControls.Button> control that the user can click to expire the cached data.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.Control.Load> event and a handler for the <xref:System.Web.UI.WebControls.Button.Click> event of the <xref:System.Web.UI.WebControls.Button> control. The <xref:System.Web.UI.Control.Load> event handler creates a cache item with a key set to the CacheKeyDependency value. The <xref:System.Web.UI.WebControls.Button.Click> event handler removes the cache item whose key is equal to the CacheKeyDependency value. When the cache item is removed, all the cached data that is dependent on the key is expired.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_2.vb)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and the Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_3.cs)]"
  syntax:
    content: public virtual string CacheKeyDependency { get; set; }
    return:
      type: System.String
      description: "만든 모든 캐시 개체를 식별 하는 키의 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  id: ConflictDetection
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "새 값만에 전달 되 고 있는지 여부를 결정 하는 값을 가져오거나 설정 합니다.는 <xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;> </xref> 메서드 또는 이전 및 새 값에 전달 되는 <xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;> </xref> 메서드."
  remarks: "이 속성으로 지정한 메서드의에 이전 및 새 값에 대 한 매개 변수 적용 되었는지 여부를 결정은 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 예를 들어, 된 메서드가 해당로 지정 된는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성에서 반환은 <xref:System.Data.DataTable>열이 포함 된 컨트롤 `Name` 및 `Number`, ConflictDetection 속성을로 설정 하 고는 <xref:System.Web.UI.ConflictOptions>필드에 대 한 매개 변수를 만드는 `Name` 및 `Number` 에 대 한는 `Update` 메서드.</xref:System.Web.UI.ConflictOptions> </xref:System.Data.DataTable> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> ConflictDetection 속성이로 설정 된 경우는 <xref:System.Web.UI.ConflictOptions>값 매개 변수가 대해 만들어진 `Name`, `Number`, `original_Name`, 및 `original_Number`.</xref:System.Web.UI.ConflictOptions> (원래 값에 대 한 정확한 이름은 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>속성입니다.)</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> <xref:System.Web.UI.WebControls.ObjectDataSource>다음 여부를 확인 메서드는에 지정 된 된 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>속성에 일치 하는 매개 변수가.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       동시성 제어에는 데이터는 읽기 및 여러 클라이언트가 액세스 하 고 동일한 데이터를 조작 하는 경우 저장소에서 변경 하는 방법을 제어 하려면 데이터 저장소를 사용 하는 기술입니다. 예를 들어 하나의 클라이언트 데이터 읽고는 사용자에 게 제공 하는 동안 다른 클라이언트가 동일한 데이터를 읽고를 다른 사용자에 게 제공 합니다. 두 사용자가 데이터를 업데이트 하는 데이터 저장소에 제출 하는 경우 두 클라이언트 모두 동일한 데이터에 대해 서로 다른 값을 제공할 수 있습니다 때문에 예기치 않은 결과가 발생할 수 있습니다. 충돌로 간주 됩니다. ConflictDetection 속성을 설정 하 여는 <xref:System.Web.UI.ConflictOptions>값의 `Update` 후에 충돌을 감지 하 고 처리할 필요에 따라 데이터 원본에 이전 및 새 값을 비교 수 있습니다.</xref:System.Web.UI.ConflictOptions>       ConflictDetection 속성에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>"
  syntax:
    content: public System.Web.UI.ConflictOptions ConflictDetection { get; set; }
    return:
      type: System.Web.UI.ConflictOptions
      description: "중 하나는 <xref href=&quot;System.Web.UI.ConflictOptions&quot;> </xref> 값입니다. 기본값은 <xref href=&quot;System.Web.UI.ConflictOptions&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  id: ConvertNullToDBNull
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "나타내는 값을 가져오거나 여부는 <xref href=&quot;System.Web.UI.WebControls.Parameter&quot;> </xref> 에서 업데이트, 삽입 또는 삭제 작업에 전달 되는 값이 자동으로 변환 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 에 <xref href=&quot;System.DBNull.Value&quot;> </xref> 값을 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 제어 합니다."
  remarks: "변환 되지 않으면 `null` 에 <xref:System.DBNull.Value>값 실행 시 오류가 발생할 수 있습니다.</xref:System.DBNull.Value> ConvertNullToDBNull 속성을 사용 하는지 여부를 <xref:System.Web.UI.WebControls.Parameter>에서 업데이트, 삽입 또는 삭제 작업에 전달 되는 값이 자동으로 변환 `null` 에 <xref:System.DBNull.Value>값을 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.DBNull.Value> </xref:System.Web.UI.WebControls.Parameter>"
  syntax:
    content: public bool ConvertNullToDBNull { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>있는 경우 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 에 값을 <xref href=&quot;System.Web.UI.WebControls.Parameter&quot;> </xref> 에 전달 된 개체는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 컨트롤은 자동으로 변환 <xref href=&quot;System.DBNull.Value&quot;> </xref> 값, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  id: DataObjectTypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "클래스의 이름을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 컨트롤 업데이트에 대 한 매개 변수를 사용 하 여, 삽입 또는 삭제를 데이터 바인딩된 컨트롤에서 개별 값을 전달 하는 대신 데이터 작업 합니다."
  remarks: "에 전달 되는 여러 매개 변수를 지정 하는 대신는 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>메서드를 여러 데이터 필드 값을 집계 하는 하나의 개체를 만들 수 있습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 이 하나의 개체가 여러 매개 변수 대신 메서드로 전달 됩니다.       기본적으로는 <xref:System.Web.UI.WebControls.ObjectDataSource>데이터 바인딩된 컨트롤에 바인딩되는 컨트롤은 데이터 바인딩된 컨트롤을 만들도록는 <xref:System.Web.UI.WebControls.Parameter>개체 데이터 소스에서 각 매개 변수에 대해.</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체에 여러 필드가, 하는 경우 결과 메서드 또한에 여러 필드가 있습니다. DataObjectTypeName 속성을 사용 하면 각 데이터 필드에 대 한 속성을 가진 형식을 지정할 수 있습니다. 그런 다음 여러 매개 변수는 메서드에 전달 하는 대신 런타임 하나의 개체를 만들고 모든 속성을 설정 합니다. 이 개체는 메서드 호출에 대 한 parameters 컬렉션에 추가 됩니다.       DataObjectTypeName 속성에 지정 된 형식 매개 변수가 없는, 기본 생성자가 있어야 하므로 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤 형식의 인스턴스를 만들 수 있습니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 형식을 허용 하는 설정 가능한 속성 있어야는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤을 데이터 바인딩된 컨트롤에서 전달 되는 값을 사용 하 여 개체를 채웁니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 에 있는 속성 이름은 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 데이터 바인딩된 컨트롤에 의해 전달 되는 값의 매개 변수 이름과 정확히 일치 해야 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource>       DataObjectTypeName 속성이 설정 된 경우와 <xref:System.Web.UI.WebControls.ObjectDataSource>에 연결 된 데이터 바인딩된 컨트롤에서 지정 된 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>및 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>속성 각각 한 개의 매개 변수만 DataObjectTypeName 속성에 지정 된 형식의.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>속성이로 설정 되어는 <xref:System.Web.UI.ConflictOptions>값을 지정 된 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>속성 DataObjectTypeName 속성에 지정 된 형식의 매개 변수 하나 있어야 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>속성이로 설정 되는 <xref:System.Web.UI.ConflictOptions>값을 지정 된 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>속성 DataObjectTypeName 속성에 지정 된 형식의 두 매개 변수를 가져야 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 원래 값을 포함 하는 첫 번째 매개 변수 두 번째 매개 변수는 새 값을 포함 합니다.       DataObjectTypeName 속성에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>와 연결 된는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A>"
  example:
  - "The section contains two code examples. The first code example demonstrates how to implement a type that combines all parameter values into one object, using the DataObjectTypeName property. The second code example shows the Web page that uses the two classes that are used in the first code example.  \n  \n The following code example demonstrates how to implement a type that combines all parameter values into one object, using the DataObjectTypeName property. The select method of the `AggregateData` class returns a <xref:System.Data.DataTable> object with two columns named `Name` and `Number`. Similarly, the `NewData` class defines two read/write properties, `Name` and `Number`. The `Insert` method of the `AggregateData` class takes one parameter of type `NewData`. The `TypeName` property of the <xref:System.Web.UI.WebControls.ObjectDataSource> is set to `AggregateData` and the DataObjectTypeName property is set to `NewData`.  \n  \n [!code-cs[ObjectDataSourceDataObjectTypeName#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_183_1.cs)]\n [!code-vb[ObjectDataSourceDataObjectTypeName#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_183_1.vb)]  \n  \n The following code example shows the Web page that uses the two classes that are used in the preceding code example.  \n  \n [!code-cs[ObjectDataSourceDataObjectTypeName#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_183_2.aspx)]\n [!code-vb[ObjectDataSourceDataObjectTypeName#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_183_2.aspx)]"
  syntax:
    content: public string DataObjectTypeName { get; set; }
    return:
      type: System.String
      description: "개체의 형식을 식별 하는 부분적으로 또는 완전히 정규화 된 클래스 이름을 하는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 에 대 한 매개 변수로 사용할 수는 <> </> *>, <> </> *>, 또는 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>작업.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete
  id: Delete
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Delete()
  nameWithType: ObjectDataSource.Delete()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Delete()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "로 식별 되는 메서드를 호출 하 여 삭제 작업을 수행 합니다.는 <> </> *> 속성에 있는 모든 매개 변수는 <> </> *> 컬렉션입니다."
  remarks: "삭제 작업을 수행 하기 전에 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A> 처리할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>이벤트 매개 변수의 값을 확인 하 고 작업을 삭제 하기 전에 전처리를 수행할 수 있습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 삭제 작업을 수행 하는 <xref:System.Web.UI.WebControls.ObjectDataSourceView>로 식별 되는 개체의 인스턴스를 만들고 하기 위해는 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 다음으로 식별 되는 메서드를 호출는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>속성, 연결 된 모든를 사용 하 여 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 매개 변수 이름을 삭제 매개 변수 연결된 된 데이터 바인딩 컨트롤에 연결 하는 경우에 따라 만들어집니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 삭제 작업이 완료 된 후의 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> 처리할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>이벤트 모든 반환 값과 출력 매개 변수 예외를 검사 하 고 후 처리를 수행할 수 있습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>       Delete 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A>의 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A>      ## 데이터 바인딩된 컨트롤 때는 <xref:System.Web.UI.WebControls.ObjectDataSource>제어와 같은 연결 된 데이터 바인딩 컨트롤의 <xref:System.Web.UI.WebControls.GridView>제어, 필요한 경우가 아니라면 페이지 코드에서 Delete 메서드를 호출 하.</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> Delete 메서드 대신 데이터 바인딩된 컨트롤에서 직접 호출 됩니다.       매개 변수가 병합, 개체 수명 및 방법 확인 하는 방법에 대 한 자세한 내용은 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 을 참조 하십시오."
  syntax:
    content: public int Delete ();
    parameters: []
    return:
      type: System.Int32
      description: "경우 기본 데이터 저장소에서 삭제 된 행의 수를 나타내는 값은 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows*>속성의는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs&quot;> </xref> 에 설정 된는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource.Deleted&quot;> </xref> 이벤트; 그렇지 않으면-1.</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: ObjectDataSource.Deleted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "발생 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>작업이 완료 된.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>"
  remarks: "반환 값 또는 출력 매개 변수의 값을 확인 하거나 후 예외가 throw 되었는지 여부를 확인 하려면 삭제 된 이벤트를 처리 한 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>작업이 완료 된.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 사용할 수 있는 반환 값, 출력 매개 변수 및 속성을 처리 하는 예외는 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>이벤트와 연결 된 개체입니다.</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       사용할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>에서 삭제 된 행의 수를 반환 하는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>메서드.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> 이 위해 설정 된 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> 으로 지정 하는 메서드에서 삭제 된 행 수를 반환 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>속성, 값은 사용할 수는 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>개체.</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event before the operation is performed and the `NorthwindEmployeeDeleted` delegate is called to handle the Deleted event after the operation has completed to perform exception handling. In this code example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindEmployeeDeleted` method.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_116_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_116_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_116_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_116_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  id: DeleteMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "메서드 또는 함수의 이름을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 컨트롤이 호출 데이터를 삭제 합니다."
  remarks: "일괄 처리 대신 한 번에 하나씩 레코드의 데이터를 삭제 하는 비즈니스 개체 가정 합니다.       DeleteMethod 속성에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A>       매개 변수 이름에 대해 구성 되었는지 확인는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤에 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>컬렉션 select 메서드에 의해 반환 되는 열 이름과 일치 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>      ## 개체 수명 DeleteMethod 속성으로 식별 되는 메서드는 인스턴스 메서드 일 수 또는 `static` (`Shared` Visual basic에서) 메서드. 인스턴스 메서드인 경우 비즈니스 개체가 생성 되 고 DeleteMethod 속성을 호출할 때마다 제거 합니다. 처리할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>DeleteMethod 속성을 호출 하기 전에 비즈니스 개체를 사용 하는 이벤트입니다.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 처리할 수도 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>DeleteMethod 속성이 호출 된 후에 발생 하는 이벤트입니다.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 비즈니스 개체를 구현 하는 경우는 <xref:System.IDisposable>인터페이스는 <xref:System.IDisposable.Dispose%2A>메서드는 개체가 소멸 되기 전에 호출 됩니다.</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> 메서드가 `static` (`Shared` Visual basic에서) 메서드를 비즈니스 개체를 만들지는 및 처리할 수 없는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## 매개 변수가 병합 매개 변수를 추가 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>컬렉션 다음 세 가지 소스의:-런타임에 데이터 바인딩된 컨트롤에서.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>      `DeleteParameters` 요소를 선언적으로 합니다.      `Deleting` 메서드를 선언적으로 합니다.       첫째, 매개 변수를 데이터 바인딩된 컨트롤에서 생성 된에 추가 되 고 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 예를 들어 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 바인딩되는 <xref:System.Web.UI.WebControls.GridView>열이 있는 컨트롤 `Name` 및 `Number`, 매개 변수를 `Name` 및 `Number` 컬렉션에 추가 됩니다.</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 정확한 이름은 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 이러한 매개 변수의 데이터 형식이 `string`합니다. 다음에 나와 있는 매개 변수는 `DeleteParameters` 요소가 추가 됩니다. 경우에 매개 변수는 `DeleteParameters` 요소가 이미 있는 매개 변수의 동일한 이름으로 발견 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>기존 매개 변수 컬렉션에 지정 된 매개 변수의 이름과 일치 하도록 수정 됩니다는 `DeleteParameters` 요소.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 일반적으로이 매개 변수에서 데이터의 유형을 수정 하도록 사용 됩니다. 마지막으로 프로그래밍 방식으로 추가 및 제거할 수 있습니다에 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>이벤트를 발생 하기 전에 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>메서드를 실행 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 메서드는 매개 변수가 병합 된 후 확인 됩니다. 메서드 해상도 다음 섹션에서 설명 합니다.      ## 때 메서드 해상도 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>메서드가 호출 되 면 데이터 바인딩된 컨트롤에서 선언적으로 생성 된 매개 변수에서 데이터 필드는 `DeleteParameters` 요소 및에 추가 된 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>이벤트 처리기 모두 병합 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> </xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> (자세한 내용은 이전 섹션 참조). <xref:System.Web.UI.WebControls.ObjectDataSource>개체 호출할 메서드를 찾으려고 시도 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 첫째, DeleteMethod 속성에 지정 된 이름 가진 하나 이상의 메서드를 찾습니다. 일치 항목이 없는 경우는 <xref:System.InvalidOperationException>예외가 throw 됩니다.</xref:System.InvalidOperationException> 일치 하는 항목이 없는 경우 일치 하는 매개 변수 이름을 찾습니다. 예를 들어 하 여 지정 된 유형에 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>속성이 라는 두 가지 방법 `DeleteARecord`.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 하나의 `DeleteARecord` 하나의 매개 변수가 `ID`, 다른 `DeleteARecord`&2; 개의 매개 변수가 `Name` 및 `Number`합니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>컬렉션에 명명 된 매개 변수만 `ID`, `DeleteARecord` 메서드 테이블만 `ID` 매개 변수 라고 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 매개 변수 형식의 메서드 확인 과정에서 확인 되지 않습니다. 매개 변수의 순서가 중요 하지 않습니다.       경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>속성은 메서드를 다른 방식으로 확인 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> <xref:System.Web.UI.WebControls.ObjectDataSource>에 지정 된 매개 변수 유형 중 하나를 사용 하 여 DeleteMethod 속성에 지정 된 이름의 메서드를 찾습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 이 경우 매개 변수의 이름을 중요 하지 않습니다."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the DeleteMethod property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event before the operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event after the operation has completed to perform exception handling. In this example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindDataException` delegate.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_23_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_23_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_23_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_23_2.cs)]"
  syntax:
    content: public string DeleteMethod { get; set; }
    return:
      type: System.String
      description: "사용 하는 함수 또는 메서드의 이름을 나타내는 문자열의 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 데이터를 삭제 하려면 사용 합니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "사용 되는 매개 변수를 포함 하는 매개 변수 컬렉션을 가져옵니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>메서드.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>"
  remarks: "이름 및 유형의 DeleteParameters 컬렉션에 포함 된 매개 변수 이름 및 매개 변수 형식과 일치 해야 합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>메서드 서명을.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 매개 변수 이름은 영향을 받는 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>속성 및 대/소문자 구분 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 매개 변수 컬렉션에 데이터 바인딩된 컨트롤, 선언적으로 지정 된 매개 변수 및 매개 변수를 프로그래밍 방식으로 추가 되는 데이터에 따라 달라 집니다. 자세한 내용은 &quot;매개 변수가 병합&quot;의 참조 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>및 [ObjectDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md).</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>       DeleteParameters 속성 검색은 <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A>에 포함 된 속성의 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A>       매개 변수가 병합, 개체 수명 및 방법 확인 하는 방법에 대 한 자세한 내용은 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 을 참조 하십시오."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use the DeleteParameters property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event is called with two parameters. One parameter, `EmpID`, comes from the <xref:System.Web.UI.WebControls.DataGrid> control, and is based on the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property. The other parameter comes from the declarative DeleteParameters property. The `EmployeeLogic` class overloads the `DeleteEmployee` method. One overload takes a `NorthwindEmployee` parameter, and the other takes an <xref:System.Int32> parameter named `anID`. In the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event, the entries in the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property are adjusted to include only one parameter named `anID` with the value from `original_EmpID`. When the event handler exists, the matching `DeleteEmployee` method is called.  \n  \n The following code example shows the Web page that displays the <xref:System.Web.UI.WebControls.DataGrid> control and handles the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_11#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_729_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_729_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_729_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_11#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_729_2.cs)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> 에서 사용 하는 매개 변수를 포함 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>메서드.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: ObjectDataSource.Deleting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "앞에 오는 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>작업.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>"
  remarks: "매개 변수 값의 유효성을 검사 하는 응용 프로그램에 적용 되는 추가 초기화를 수행 하도록 삭제 하면 이벤트를 처리 또는 하기 전에 값을 매개 변수를 변경 하는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 삭제 작업을 수행 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 매개 변수는 사용할 수는 <xref:System.Collections.IDictionary>액세스 하는 컬렉션의 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>속성에 의해 노출 되는 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>개체입니다.</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       설정 하 여 삭제 작업을 취소할 수 있습니다는 <xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>를 `true`.</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the Deleting event before the operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event after the operation has completed to perform exception handling. In this code example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindEmployeeDeleted` method.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_138_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_138_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_138_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_138_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  id: EnableCaching
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "나타내는 값을 가져오거나 여부는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 컨트롤에 데이터 캐싱을 사용 하도록 설정 합니다."
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 데이터 캐싱을 지원 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 데이터 캐시 되어 있는 동안에 호출는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드는 캐시에서 데이터를 검색 하지 않고 <xref:System.Web.UI.WebControls.ObjectDataSource>비즈니스 개체의 인스턴스를 만들고 해당 데이터 메서드를 호출 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 캐시가 만료 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드가 비즈니스 개체의 데이터를 검색 하 고 다시 데이터를 캐시 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       <xref:System.Web.UI.WebControls.ObjectDataSource>EnableCaching 속성이로 설정 된 경우 자동으로 데이터를 캐시 제어 `true` 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>속성 캐시는 캐시 엔트리가 삭제 되기 전에 데이터를 저장 하는 시간 (초)의 수를 나타내는 0 보다 큰 값으로 설정 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 값이 0 무한정 캐시를 나타냅니다."
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that retrieve records from the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve and display the employee record that is selected by the user.  \n  \n Caching is enabled for the <xref:System.Web.UI.WebControls.ObjectDataSource> control. Therefore, each record is retrieved only one time from the database. The <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> property is set to \"EmployeeDetails\", but any string value can work as the key. The Web page also includes a <xref:System.Web.UI.WebControls.Button> control that the user can click to expire the cached data.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.Control.Load> event and a handler for the <xref:System.Web.UI.WebControls.Button.Click> event of the <xref:System.Web.UI.WebControls.Button> control. The <xref:System.Web.UI.Control.Load> event handler creates a cache item with a key set to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> value. The <xref:System.Web.UI.WebControls.Button.Click> event handler removes the cache item whose key is equal to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> value. When the cache item is removed, all the cached data that is dependent on the key is expired.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_2.vb)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and the Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_3.cs)]"
  syntax:
    content: public virtual bool EnableCaching { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>데이터 소스 제어를 위해 데이터 캐싱을 사용 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.EnableCaching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "EnableCaching 속성이로 설정 되어 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 여는 방법을 지정 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>속성에서 반환 된 <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref>.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  id: EnablePaging
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "데이터 소스 컨트롤에 검색 된 데이터 집합에 페이징을 지원 하는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "페이징을 <xref:System.Web.UI.WebControls.ObjectDataSource>제어 EnablePaging를 설정 하 여 처리 됩니다 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSource>적절 한 매개 변수를 사용 하 고 비즈니스 개체에서 선택 메서드를 정의 하 고.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> EnablePaging 속성이로 설정 된 경우 `true`, <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>컬렉션 요청 된 첫 번째 행 및 요청 된 행의 수에 대 한 두 개의 추가 매개 변수를 포함 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 에 정의 된 대로이 두 매개 변수 이름은 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>및 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> `Select` 메서드 요청된 수가 지정된 된 인덱스에서 시작 하는 행을 반환 해야 합니다. 데이터 페이지 크기에 따라 균등 하 게 나누지 수 때문에 적은 수의 행 마지막 페이지에 포함 될 수 있습니다. 따라서 요청 된 행의 수는 실제로 반환 되는 행의 최대 수입니다.       연결된 된 데이터 바인딩된 컨트롤에서 페이징이 활성화 된 데이터 바인딩 컨트롤 호출는 `Select` 메서드 시작 인덱스와 요청 된 행의 수를 사용 합니다. 또한 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>속성이 설정 되 면 데이터 바인딩된 컨트롤 페이저 컨트롤을 렌더링 하기 전에 메서드를 호출 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 예를 들어 경우는 <xref:System.Web.UI.WebControls.GridView>컨트롤에서 페이징을 사용 하 여 지정 된 장치와 5의 페이지 크기는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>속성 반환 20, 호출기에 4 개의 페이지만 표시 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.GridView>       EnablePaging 속성에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>개체입니다.</xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose EnablePaging property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_3.vb)]"
  syntax:
    content: public bool EnablePaging { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>데이터 소스 컨트롤에 데이터 페이징 작업을 지 원하는 경우를 검색 합니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.EnablePaging*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  id: FilterExpression
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "필터링 된 메서드가 해당 때 적용 되는 식을 가져오거나 설정 합니다. 지정 된는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>속성이 호출 되었습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 데이터 필터링을 지 원하는 경우에만 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드가 반환 되는 <xref:System.Data.DataSet>또는 <xref:System.Data.DataTable>개체.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       FilterExpression 속성에 사용 되는 구문은 형식 문자열 스타일 식입니다. 필터 식 구문은에 허용 되는 동일한 구문을 <xref:System.Data.DataColumn.Expression%2A>속성.</xref:System.Data.DataColumn.Expression%2A> 매개 변수를 추가 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>컬렉션 형식 문자열 자리 표시자를 포함할 수도 있습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 예를 들어 포함 `&quot;{0}&quot;` 매개 변수 값에 대 한 대체 식에 있습니다. 인덱스에 있는 매개 변수 자리 표시자는는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>       FilterExpression 속성에 매개 변수를 포함할 수 있습니다. 매개 변수 형식의 문자열 또는 문자 형식인 경우 매개 변수를 작은따옴표로 묶어야 합니다. 매개 변수가 숫자 형식인 경우에 따옴표가 필요 하지 않습니다.       <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>FilterExpression 속성에 있는 자리 표시자에 대 한 계산 되는 매개 변수를 포함 하는 컬렉션.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>       FilterExpression 속성에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A>      > [!NOTE] > 클라이언트에서 수신 하는 모든 필터 매개 변수 값의 유효성을 검사 해야 합니다. 런타임에 매개 변수 값은 필터 식으로 대체 하 고에 적용 됩니다는 <xref:System.Data.DataSet>또는 <xref:System.Data.DataTable>에서 반환 되는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> 반환 되는 항목의 수를 제한 하려면 보안 조치로 FilterExpression 속성을 사용 하는 경우에 필터링이 발생 하기 전에 매개 변수 값을 확인 해야 합니다."
  example:
  - "The following code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The <xref:System.Web.UI.WebControls.ObjectDataSource> control can filter data only when the method that retrieves the data retrieves it as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object. For this reason, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property identifies a business object method that retrieves data as a <xref:System.Data.DataSet>.  \n  \n The code example consists of a <xref:System.Web.UI.WebControls.TextBox> control, a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.ObjectDataSource> control, and a **Submit** button. By default, the <xref:System.Web.UI.WebControls.TextBox> is populated with the name of one of the Northwind Traders employees. The <xref:System.Web.UI.WebControls.GridView> displays information about the employee that is identified by the name in the <xref:System.Web.UI.WebControls.TextBox>. To retrieve data on another employee, enter the full name of the employee in the <xref:System.Web.UI.WebControls.TextBox>, and then click the **Submit** button.  \n  \n The FilterExpression property specifies an expression that is used to filter the data that is retrieved by the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. It uses parameter placeholders that are evaluated to the parameters that are contained in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection. In this example, the parameter placeholder is bounded by single quotation marks because the type of the parameter is a string type that might contain spaces. If the type of the parameter is a numeric or date type, bounding quotation marks are not required.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_597_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_597_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n For simplicity, the `EmployeeLogic` class creates a static set of data, rather than retrieving the data from a data tier. It is also helpful for this example, because the sample relies on you to provide the full name of a Northwind Traders employee to demonstrate filtering. For a complete working example, you must compile and use these classes with the Web Forms code examples that are provided.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_597_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_597_2.vb)]"
  syntax:
    content: public string FilterExpression { get; set; }
    return:
      type: System.String
      description: "로 식별 되는 함수나 메서드를 사용 하 여 데이터를 검색할 때 적용 되는 필터링 식을 나타내는 문자열의 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.FilterExpression*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "FilterExpression 속성에 설정 및 <xref:System.Web.UI.WebControls.ObjectDataSource.Select*>메서드 반환 하지 않습니다는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 또는 <xref href=&quot;System.Data.DataTable&quot;> </xref>.</xref:System.Web.UI.WebControls.ObjectDataSource.Select*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Filtering
  id: Filtering
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Filtering
  nameWithType: ObjectDataSource.Filtering
  fullName: System.Web.UI.WebControls.ObjectDataSource.Filtering
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "필터 작업 전에 발생합니다."
  remarks: "필터링 이벤트를 처리 하기 전에 필터 매개 변수 값에 대해 유효성 검사 작업을 수행할는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 필터 작업을 수행 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 설정 하 여 선택한 작업을 취소할 수는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs>를 `true`.</xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 경우에 이벤트가 발생 된 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>속성을 설정 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>       필터링 이벤트에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName>의 이벤트는 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연관 된는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName>      > [!IMPORTANT] > 클라이언트에서 수신 하는 모든 필터 매개 변수 값의 유효성을 검사 해야 합니다. 런타임에 매개 변수 값은 필터 식으로 대체 하 고에 적용 됩니다는 <xref:System.Data.DataSet>또는 <xref:System.Data.DataTable>에서 반환 되는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> 사용 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>필터링이 발생 하기 전에 매개 변수 값의 유효성을 검사 해야 반환 되는 항목의 수를 제한 하려면 보안 조치로 속성.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  id: FilterParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "연결 된 모든 매개 변수 자리 표시자에 매개 변수 컬렉션을 가져옵니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>문자열.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 데이터 필터링을 지 원하는 경우에만 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드가 반환 되는 <xref:System.Data.DataSet>또는 <xref:System.Data.DataTable>개체.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       에 사용 되는 구문에서 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>형식 문자열 스타일 식.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 필터 식 구문은에 허용 되는 동일한 구문을 <xref:System.Data.DataColumn.Expression%2A>속성.</xref:System.Data.DataColumn.Expression%2A> FilterParameters 컬렉션에 매개 변수를 추가 하는 경우에 형식 문자열 자리 표시자를 포함할 수 있습니다. 예를 들어 포함 `&quot;{0}&quot;` 매개 변수 값에 대 한 대체 식에 있습니다. 자리 표시자 FilterParameters 컬렉션의 매개 변수 인덱스에 따라 바뀝니다.       매개 변수를 포함할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 매개 변수는 문자열 또는 문자 형식인 경우 매개 변수를 작은따옴표로 묶어야 합니다. 매개 변수가 숫자 형식인 경우에 따옴표가 필요 하지 않습니다.       FilterParameters 속성 검색은 <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A>에 포함 된 속성의 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> object to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The second code example provides an example of a middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The <xref:System.Web.UI.WebControls.ObjectDataSource> control can filter data only when the method that retrieves the data retrieves it as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object. For this reason, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property identifies a business object method that retrieves data as a <xref:System.Data.DataSet>.  \n  \n The code example consists of a <xref:System.Web.UI.WebControls.TextBox> control, a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.ObjectDataSource> control, and a **Submit** button. By default, the <xref:System.Web.UI.WebControls.TextBox> is populated with the name of one of the Northwind Traders employees. The <xref:System.Web.UI.WebControls.GridView> displays information about the employee that is identified by the name in the <xref:System.Web.UI.WebControls.TextBox>. To retrieve data on another employee, in the <xref:System.Web.UI.WebControls.TextBox>, enter the full name of the employee, and then click the **Submit** button.  \n  \n The <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property specifies an expression that is used to filter the data that is retrieved by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. It uses parameter placeholders that are evaluated to the parameters that are contained in the FilterParameters collection. In this example, the parameter placeholder is bounded by single quotation marks because the type of the parameter is a string type that might contain spaces. If the type of the parameter is a numeric or date type, bounding quotation marks are not required. The FilterParameters collection contains one parameter, a <xref:System.Web.UI.WebControls.FormParameter> object that is bound to the <xref:System.Web.UI.WebControls.TextBox> control.  \n  \n> [!IMPORTANT]\n>  You should validate any filter parameter value that you receive from the client. The runtime simply substitutes the parameter value into the filter expression and applies it to the <xref:System.Data.DataView> object that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If you are using the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_647_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_647_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n For simplicity, the `EmployeeLogic` class creates a static set of data, rather than retrieving the data from a data tier. It is also helpful for this example, because the sample relies on you to provide the full name of a Northwind Traders employee to demonstrate filtering. For a complete working example, you must compile and use these classes with the Web Forms code examples that are provided.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_647_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_647_2.vb)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> 에 모든 매개 변수 자리 표시자와 연관 된 매개 변수 집합을 포함 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.FilterParameters*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "설정한는 <> </> *> 속성 및 <> </> *> 메서드가 반환 하지 않습니다는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 또는 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  id: GetView(System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: GetView(String)
  nameWithType: ObjectDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "데이터 소스 제어와 연결 된 명명 된 데이터 원본 뷰를 검색 합니다."
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤은 하나의 데이터 원본 뷰를 지원 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 모든 데이터 원본 뷰 개체와 마찬가지로 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 데이터와 원본 제어 해당 기능을 정의 내부 데이터 저장소에서 데이터를 검색 해야 하 고 정렬, 삽입, 삭제 및 업데이트와 같은 작업을 수행 하는 모든 작업을 수행 합니다.</xref:System.Web.UI.WebControls.ObjectDataSourceView>       영역의 GetView 메서드 페이지 코드가 아니라 데이터 바인딩된 컨트롤에서 호출 하는 데 사용 됩니다."
  syntax:
    content: protected override System.Web.UI.DataSourceView GetView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "검색할 보기의 이름입니다. 때문에 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 하나의 뷰만 지원 `viewName` 는 무시 됩니다."
    return:
      type: System.Web.UI.DataSourceView
      description: "<xref href=&quot;System.Web.UI.WebControls.ObjectDataSourceView&quot;> </xref> 라는 <xref uid=&quot;langword_csharp_DefaultView&quot; name=&quot;DefaultView&quot; href=&quot;&quot;> </xref> 연관 된는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.GetView*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "지정 된 <code> viewName </code> 은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 아닌 <xref uid=&quot;langword_csharp_DefaultView&quot; name=&quot;DefaultView&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  id: GetViewNames
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: GetViewNames()
  nameWithType: ObjectDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetViewNames()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "와 연결 된 뷰 개체의 목록을 나타내는 이름의 컬렉션을 검색 된 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>제어 라는 하나의 뷰만 지원 `DefaultView`, 원본 데이터에.</xref:System.Web.UI.WebControls.ObjectDataSource> 여기서 메서드는이 뷰 이름만의 단일 요소 컬렉션을 반환합니다.       여기서 메서드 페이지 코드가 아니라 데이터 바인딩된 컨트롤에서 호출 하는 데 사용 됩니다."
  syntax:
    content: protected override System.Collections.ICollection GetViewNames ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>와 관련 된 보기의 이름을 포함 하는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Web.UI.WebControls.ObjectDataSource.GetViewNames*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert
  id: Insert
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Insert()
  nameWithType: ObjectDataSource.Insert()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Insert()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "로 식별 되는 메서드를 호출 하 여 삽입 작업을 수행 합니다.는 <> </> *> 속성 및에서 매개 변수는 <> </> *> 컬렉션입니다."
  remarks: "삽입 작업을 수행 하기 전에 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A> 처리할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>이벤트 매개 변수의 값을 확인 하 고 삽입 작업 전에 전처리를 수행할 수 있습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 삽입 작업을 수행 하는 <xref:System.Web.UI.WebControls.ObjectDataSourceView>로 식별 되는 개체의 인스턴스를 만들고 하기 위해는 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 다음으로 식별 되는 메서드를 호출는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>속성, 연결 된 모든를 사용 하 여 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 삽입 작업이 완료 되 면는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A> 처리할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>이벤트 모든 반환 값과 출력 매개 변수 예외를 검사 하 고 후 처리를 수행할 수 있습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>       Insert 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A>의 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연관 된는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A>       매개 변수가 병합, 개체 수명 및 방법 확인 하는 방법에 대 한 자세한 내용은 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 을 참조 하십시오.      ## 데이터 바인딩된 컨트롤 때는 <xref:System.Web.UI.WebControls.ObjectDataSource>개체와 같은 연결 된 데이터 바인딩 컨트롤은 <xref:System.Web.UI.WebControls.GridView>컨트롤 필요 없는 메서드를 호출 하는 Insert 페이지 코드에서.</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> Insert 메서드 대신 데이터 바인딩된 컨트롤에서 직접 호출 됩니다."
  syntax:
    content: public int Insert ();
    parameters: []
    return:
      type: System.Int32
      description: "내부 데이터 저장소에 삽입 된 행 수를 나타내는 값입니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: ObjectDataSource.Inserted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "발생 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>작업이 완료 된.</xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>"
  remarks: "반환 값 또는 출력 매개 변수의 값을 검사 하거나 후 예외가 throw 되었는지 여부를 확인 하려면 Inserted 이벤트 처리는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>작업이 완료 된.</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 사용할 수 있는 반환 값, 출력 매개 변수 및 속성을 처리 하는 예외는 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>이벤트와 연결 된 개체입니다.</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: ObjectDataSource.Inserting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "앞에 오는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>작업.</xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>"
  remarks: "삽입 이벤트를 처리 매개 변수 값의 유효성을 검사 하는 응용 프로그램에 적용 되는 추가 초기화를 수행할 또는 하기 전에 값을 매개 변수를 변경 하는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤 삽입 작업을 수행 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 매개 변수는 사용할 수는 <xref:System.Collections.IDictionary>액세스 하는 컬렉션의 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>속성에 의해 노출 되는 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>개체입니다.</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example of the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property identifies which method performs the insert operation.  \n  \n In this example, the `UpdateEmployeeInfo` method is used to perform an insert; however, it requires a `NorthwindEmployee` parameter to insert the data. For this reason, the collection of strings that the <xref:System.Web.UI.WebControls.DetailsView> control passes automatically is not sufficient. The `NorthwindEmployeeInserting` delegate is an <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> object that handles the Inserting event and enables you to manipulate the input parameters before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation proceeds. Because the `UpdateEmployeeInfo` method requires a `NorthwindEmployee` object as a parameter, one is created using the collection of strings and is added to the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection using a parameter name (`ne`) that the method expects. You might perform steps like these when using an existing middle-tier object as a data source with types and methods that are not designed specifically for use with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property is called. If the `Insert` method of the object has a method signature that includes parameters, the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_105_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_105_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a stateless class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n An additional `NorthwindDataException` class is provided as a convenience. For a complete working example, you must compile and use these classes. The `UpdateEmployeeInfo` method is not completely implemented, so you will not insert data into the Northwind Traders database when you experiment with this example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_105_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_105_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  id: InsertMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "메서드 또는 함수의 이름을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 컨트롤이 호출 데이터를 삽입 합니다."
  remarks: "비즈니스 개체 일괄 처리 대신 한 번에 하나씩 레코드의 데이터를 삽입으로 간주 됩니다.       InsertMethod 속성에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>개체입니다.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A>      ## 개체 수명 InsertMethod 속성으로 식별 되는 메서드는 인스턴스 메서드 일 수 또는 `static` (`Shared` Visual basic에서) 메서드. 인스턴스 메서드인 경우 비즈니스 개체가 생성 되 고 InsertMethod 속성에 지정 된 메서드를 호출할 때마다 제거 합니다. 처리할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>InsertMethod 속성을 호출 하기 전에 비즈니스 개체를 사용 하는 이벤트입니다.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 처리할 수도 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>메서드에 의해 지정 된 후에 발생 하는 이벤트는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>속성이 호출 되었습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 비즈니스 개체를 구현 하는 경우는 <xref:System.IDisposable>인터페이스는 <xref:System.IDisposable.Dispose%2A>메서드는 개체가 소멸 되기 전에 호출 됩니다.</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> 메서드가 `static` (`Shared` Visual basic에서), 비즈니스 개체를 만들지는 및 처리할 수 없는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## 매개 변수가 병합 매개 변수를 추가 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>컬렉션 다음 세 가지 소스의:-런타임에 데이터 바인딩된 컨트롤에서.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>      `InsertParameters` 요소를 선언적으로 합니다.      `Inserting` 메서드를 프로그래밍 방식으로 합니다.       첫째, 매개 변수를 데이터 바인딩된 컨트롤에서 생성 된에 추가 되 고 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 예를 들어 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 바인딩되는 <xref:System.Web.UI.WebControls.GridView>열이 있는 컨트롤 `Name` 및 `Number`, 매개 변수를 `Name` 및 `Number` 컬렉션에 추가 됩니다.</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 이러한 매개 변수의 데이터 형식이 `string`합니다. 다음에 나와 있는 매개 변수는 `InsertParameters` 요소가 추가 됩니다. 경우에 매개 변수는 `InsertParameters` 요소가 이미 있는 매개 변수의 동일한 이름으로 발견 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>기존 매개 변수 컬렉션에 지정 된 매개 변수의 이름과 일치 하도록 수정 됩니다는 `InsertParameters` 요소.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 일반적으로이 매개 변수에서 데이터의 유형을 수정 하도록 사용 됩니다. 마지막으로 프로그래밍 방식으로 추가 및 제거할 수 있습니다에 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>이벤트를 발생 하기 전에 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>메서드를 실행 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 메서드는 매개 변수가 병합 된 후 확인 됩니다. 메서드 해상도 다음 섹션에서 설명 합니다.      > [!IMPORTANT] > 클라이언트에서 수신 하는 모든 매개 변수 값의 유효성을 검사 해야 합니다. 런타임에 매개 변수 값으로 InsertMethod 속성에 있습니다.      ## 때 메서드 해상도 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>메서드가 호출 되 면 데이터 바인딩된 컨트롤에서 선언적으로 생성 된 매개 변수에서 데이터 필드는 `InsertParameters` 요소 및에 추가 된 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>이벤트 처리기 모두 병합 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> </xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> (자세한 내용은 이전 섹션 참조). <xref:System.Web.UI.WebControls.ObjectDataSource>개체 호출할 메서드를 찾으려고 시도 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 첫째, InsertMethod 속성에 지정 된 이름 가진 하나 이상의 메서드를 찾습니다. 일치 항목이 없는 경우는 <xref:System.InvalidOperationException>예외가 throw 됩니다.</xref:System.InvalidOperationException> 일치 하는 항목이 없는 경우 일치 하는 매개 변수 이름을 찾습니다. 예를 들어 지정 된 형식에서 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>속성이 라는 두 가지 방법 `InsertARecord`.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 하나의 `InsertARecord` 하나의 매개 변수가 `ID`, 다른 `InsertARecord`&2; 개의 매개 변수가 `Name` 및 `Number`합니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>컬렉션에 명명 된 매개 변수만 `ID`, `InsertARecord` 메서드 테이블만 `ID` 매개 변수 라고 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 매개 변수 형식의 메서드 확인 과정에서 확인 되지 않습니다. 매개 변수의 순서가 중요 하지 않습니다.       경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>속성은 메서드를 다른 방식으로 확인 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> <xref:System.Web.UI.WebControls.ObjectDataSource>에 지정 된 매개 변수 유형 중 하나를 사용 하 여 InsertMethod 속성에 지정 된 이름의 메서드를 찾습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 이 경우 매개 변수의 이름을 중요 하지 않습니다."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example of the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The InsertMethod property identifies which method performs the insert operation.  \n  \n In this example, the `UpdateEmployeeInfo` method is used to perform an insert; however, it requires a `NorthwindEmployee` parameter to insert the data. For this reason, the collection of strings that the <xref:System.Web.UI.WebControls.DetailsView> control passes automatically is not sufficient. The `NorthwindEmployeeInserting` delegate is an <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> object that handles the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event and enables you to manipulate the input parameters before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation proceeds. Because the `UpdateEmployeeInfo` method requires a `NorthwindEmployee` object as a parameter, one is created using the collection of strings and is added to the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection using a parameter name (`ne`) that the method expects. You might perform steps like these when using an existing middle-tier object as a data source with types and methods that are not designed specifically for use with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the InsertMethod property is called. If the `Insert` method of the object has a method signature that includes parameters, the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1235_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1235_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a stateless class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n An additional `NorthwindDataException` class is provided as a convenience. For a complete working example, you must compile and use these classes. The `UpdateEmployeeInfo` method is not completely implemented, so you will not insert data into the Northwind Traders database when you experiment with this example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1235_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1235_2.cs)]"
  syntax:
    content: public string InsertMethod { get; set; }
    return:
      type: System.String
      description: "사용 하는 함수 또는 메서드의 이름을 나타내는 문자열의 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 사용 하 여 데이터를 삽입 합니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ObjectDataSource.InsertMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "사용 되는 매개 변수를 포함 하는 매개 변수 컬렉션을 가져옵니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>"
  remarks: "이름 및 유형의에 있는 매개 변수 이름 및 InsertParameters 컬렉션에 포함 되어 있는 매개 변수 형식과 일치 해야 합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>속성 서명.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 매개 변수 이름은 대/소문자를 구분 합니다. 와 같은 매개 변수를 제공 하는 데이터 바인딩된 컨트롤을 작업할 때의 <xref:System.Web.UI.WebControls.GridView>및 <xref:System.Web.UI.WebControls.DetailsView>컨트롤은 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 데이터 바인딩된 컨트롤에서 제공 되는 매개 변수를 사용 하 여 컬렉션에 명시적으로 지정 된 매개 변수를 자동으로 병합 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.DetailsView> </xref:System.Web.UI.WebControls.GridView> 데이터 바인딩된 컨트롤에는 항상 해당 매개 변수를 제공 하기 때문에이 중요 <xref:System.String>형식이 있고 메서드 시그니처에 숫자 또는 날짜 형식을 명시적으로 지정 해야 하는 경우에 올바른 형식의 InsertParameters 컬렉션의 매개 변수를 포함 합니다.</xref:System.String> 그렇지 않은 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤 컬렉션의 매개 변수에 의해 정의 된 형식에 따라 매개 변수를 캐스팅 하 려 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 자세한 내용은 참조 [ObjectDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.       InsertParameters 속성 검색은 <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A>에 포함 된 속성의 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연관 된는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A>       매개 변수가 병합, 개체 수명 및 방법 확인 하는 방법에 대 한 자세한 내용은 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 을 참조 하십시오."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example implementation of the `Insert` method that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays text boxes in which you can enter data for a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property identifies which method performs the insert operation.  \n  \n If you click the **Insert** button, the operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property and any parameters that are specified in the InsertParameters collection. In this code example, one parameter is specified in the InsertParameters collection that corresponds to the supervisor's ID. This is because even though the ID is displayed in the <xref:System.Web.UI.WebControls.GridView.Rows%2A> collection for the <xref:System.Web.UI.WebControls.DetailsView> control as a <xref:System.Web.UI.WebControls.BoundField> object, it is passed as a string to the <xref:System.Web.UI.WebControls.ObjectDataSource> control. By adding it explicitly to the InsertParameters collection with a <xref:System.Web.UI.WebControls.Parameter.Type%2A> property set to the <xref:System.TypeCode> value, it will be passed correctly by the <xref:System.Web.UI.WebControls.ObjectDataSource> to the method as an <xref:System.Int32>, not as a string.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property is called. If the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method of the object has a method signature that includes parameters, the InsertParameters collection must contain parameters that have names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n> [!IMPORTANT]\n>  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_8#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_752_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_752_1.aspx)]  \n  \n The following code example provides an example implementation of the `Insert` method that the preceding code example uses. The `InsertNewEmployeeWrapper` method is added to the `EmployeeLogic` middle-tier object that is provided in the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview to enable the object to work more easily with the <xref:System.Web.UI.WebControls.ObjectDataSource> control in Web scenarios, without a substantial rewrite to the actual business logic.  \n  \n To run the example, you must have the `NorthwindEmployee` class that is provided in the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview. This example illustrates only how to connect the <xref:System.Web.UI.WebControls.ObjectDataSource> to a business object method that gets data for a new database record by using parameters. The example does not add records to the database, because the `Save` method of the `NorthwindEmployee` class does not include code to update the database.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_752_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_8#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_752_2.cs)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> 로 식별 되는 메서드에서 사용 되는 매개 변수를 포함 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  id: LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: LoadViewState(Object)
  nameWithType: ObjectDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "이전에 저장 된 뷰 상태를 로드는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 제어 합니다."
  remarks: "이 메서드는.NET Framework 인프라에서 주로 사용 하 고 사용자 코드에서 직접 사용할 수 없습니다. 그러나 컨트롤 개발자가 사용자 지정 서버 컨트롤에서 해당 뷰 상태를 복원 하는 방법을 지정 하려면이 메서드를 재정의할 수 있습니다. 자세한 내용은 참조 [ASP.NET 상태 관리 개요](~/add/includes/ajax-current-ext-md.md)합니다.       LoadViewState 메서드는 이전에 저장 된 뷰 상태를 로드 하는 데 사용 되는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource>"
  syntax:
    content: protected override void LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "컨트롤에 대 한 저장 된 뷰 상태 값을 포함 하는 개체입니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.LoadViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  id: MaximumRowsParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "데이터 소스 페이징 지원에 대 한 검색할 레코드 수를 지정 하는 데 사용 되는 비즈니스 개체 데이터 검색 메서드 매개 변수의 이름을 가져오거나 설정 합니다."
  remarks: "MaximumRowsParameterName 속성은 데이터 소스 페이징을 지 원하는 데 사용 됩니다. <xref:System.Web.UI.WebControls.ObjectDataSource>제어를 참조 하십시오 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 에서 페이징은 지 원하는 방법에 대 한 정보에 대 한       MaximumRowsParameterName 속성에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The MaximumRowsParameterName property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_3.vb)]"
  syntax:
    content: public string MaximumRowsParameterName { get; set; }
    return:
      type: System.String
      description: "이름에서 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>검색할 레코드 수를 지정 하는 데 사용 되는 매개 변수.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> 기본값은 `&quot;maximumRows&quot;`합니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  id: ObjectCreated
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectCreated
  nameWithType: ObjectDataSource.ObjectCreated
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "로 식별 되는 개체 뒤에 오는 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>속성이 만들어집니다.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>"
  remarks: "앞에 비즈니스 개체에만 적용 되는 다른 초기화를 수행 하거나 ObjectCreated 이벤트 속성을 설정, 비즈니스 개체에 다른 메서드를 호출할를 처리 하는 <xref:System.Web.UI.WebControls.ObjectDataSource>데이터 작업을 수행 하는 비즈니스 개체 데이터 메서드를 호출 하는 개체입니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 액세스 하는 개체에 대 한 참조는 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>속성에 의해 노출 되는 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>개체입니다.</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>       메서드를 식별 하는 데이터 작업을 수행 하는 데는 경우 `static` (`Shared` Visual basic에서), <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>고 ObjectCreated 이벤트가 발생 하지 않습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  id: ObjectCreating
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectCreating
  nameWithType: ObjectDataSource.ObjectCreating
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "로 식별 되는 개체 앞에 오는 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>속성이 만들어집니다.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>"
  remarks: "메서드를 식별 하는 데이터 작업을 수행 하는 데는 경우 `static` (`Shared` Visual basic에서)는 ObjectCreating 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>이벤트는 발생 하지 않습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>       <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 자동으로 리플렉션을 사용 하 여 해당 형식의 인스턴스를 만들려면 비즈니스 개체의 기본 생성자를 호출 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> ObjectCreating 이벤트를 다른 생성자를 명시적으로 호출을 처리 하 고 결과를 개체의 인스턴스는 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>속성은 연결 된 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>개체입니다.</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. The second code example provides the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. You might work with a business object that is very expensive to create (in terms of time or resources) for every data operation your Web page performs. One way to work with an expensive object might be to create an instance of it once, and then cache it for subsequent operations instead of creating and destroying it for every data operation.  \n  \n> [!NOTE]\n>  In a production application, multiple requests might end up simultaneously using the same instance. Therefore, the object needs to be implemented in a thread-safe manner.  \n  \n This code example demonstrates this pattern. You can handle the ObjectCreating event to check the cache for an object first, and only create an instance of the object, if one is not already cached. Then, handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event to cache the business object for future use, instead of destroying it. In this code example, the <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> object is set to `true` to direct the <xref:System.Web.UI.WebControls.ObjectDataSource> to not call <xref:System.IDisposable.Dispose%2A> method on the object.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_72_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_72_1.aspx)]  \n  \n The following code example provides the example middle-tier business object that the preceding code example uses. The code example consists of a basic business object, defined by the `EmployeeLogic` class, which is a stateful class that encapsulates business logic. For a complete working example, you must compile this code as a library and use these classes from an ASP.NET page (.aspx file).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_72_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_72_2.vb)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  id: ObjectDisposing
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDisposing
  nameWithType: ObjectDataSource.ObjectDisposing
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "로 식별 되는 개체 앞에 오는 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>속성은 무시 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>"
  remarks: "ObjectDisposing 이벤트는 비즈니스 개체의 인스턴스가 삭제 되기 전에 항상 발생 됩니다. 비즈니스 개체를 구현 하는 경우는 <xref:System.IDisposable>인터페이스는 <xref:System.IDisposable.Dispose%2A>메서드는이 이벤트가 발생 한 후에 호출 됩니다.</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable>       개체에 다른 메서드를 호출, 속성을 설정 또는 개체를 제거 하기 전에 개체에 지정 된 정리를 수행할 ObjectDisposing 이벤트를 처리 합니다. 액세스 하는 개체에 대 한 참조는 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>속성에 의해 노출 되는 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>개체입니다.</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>       사용 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤 ObjectDisposing 이벤트에 대 한 처리기의 데이터 컨텍스트 클래스의 삭제 취소 해야 LINQ to SQL 클래스를 사용 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 이 단계는 필요 LINQ to SQL에서는 지연 된 실행을 지원 하기 때문에 반면는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 선택 작업 한 후 데이터 컨텍스트를 삭제 하려고 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. The second code example provides the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. You might work with a business object that is very expensive to create (in terms of time or resources) for every data operation your Web page performs. One way to work with an expensive object might be to create an instance of it once, and then cache it for subsequent operations instead of creating and destroying it for every data operation. This example demonstrates this pattern. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> event to check the cache for an object first, and only create an instance of it, if one is not already cached. Then, handle the ObjectDisposing event to cache the business object for future use, instead of destroying it. In this code example, the <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> object is set to `true` to direct the <xref:System.Web.UI.WebControls.ObjectDataSource> to not call the <xref:System.IDisposable.Dispose%2A> method on the object.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_11_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_11_1.aspx)]  \n  \n The following code example provides the example middle-tier business object that the preceding code example uses. The code example consists of a basic business object, defined by the `EmployeeLogic` class, which is a stateful class that encapsulates business logic. For a complete working example, you must compile this code as a library and use these classes from an ASP.NET page (.aspx file).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_11_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_11_2.vb)]  \n  \n The following example shows how to handle the ObjectDisposing event when using an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a LINQ to SQL class.  \n  \n```vb#  \nPublic Sub ExampleObjectDisposing(ByVal sender As Object, _   \n        ByVal e As ObjectDataSourceDisposingEventArgs)  \n    e.Cancel = True  \nEnd Sub  \n```  \n  \n```c#  \npublic void ExampleObjectDisposing(object sender,   \n        ObjectDataSourceDisposingEventArgs e)  \n{  \n    e.Cancel = true;  \n}  \n```"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  id: OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "에 전달 되는 원래 값에 대 한 매개 변수 이름에 적용할 형식 문자열을 가져오거나 설정 합니다.는 <xref uid=&quot;langword_csharp_Delete&quot; name=&quot;Delete&quot; href=&quot;&quot;> </xref> 또는 <xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;> </xref> 메서드."
  remarks: "값은 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>속성으로 식별 하는 것과 같은 기본 키에 적용 됩니다는 `DataKeyNames` 또는 삭제에는 데이터 바인딩된 컨트롤의 속성 업데이트 시나리오 및 위치는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>속성는 <xref:System.Web.UI.ConflictOptions>값 및 원래 값 집합을 해당 데이터 메서드에 전달 됩니다.</xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>       다음은 변경할 수 있는 두 가지 일반적인 시나리오는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>속성:-업데이트에 이전 및 새 값을 구분할 수 속성을 변경 하려는 경우도 있습니다.</xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> 경우는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>속성이로 설정 되는 <xref:System.Web.UI.ConflictOptions>의 값, 매개 변수는 원래 값과 새 값 모두에 추가 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> 서식 문자열 사용 하지 않고 동일한 이름 가진 두 개의 매개 변수는 각 데이터 필드에 대 한 만들어졌습니다. 원래 값 매개 변수의 이름을 변경 하 여 충돌을 감지 하 고 키 값을 비교 하려면 데이터 원본에 데이터를 비교할 수 있습니다.      -일부 비주얼 디자이너에는 원래 값 및 키에 대 한 특정 이름 지정 체계를 구현 합니다.       OldValuesParameterFormatString 속성에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>"
  syntax:
    content: public string OldValuesParameterFormatString { get; set; }
    return:
      type: System.String
      description: "모든 이름에 적용 된 형식 문자열을 나타내는 문자열을 <code> oldValues </code> 에 키 매개 변수가 전달 또는 <> </> *> 또는 <> </> *> 메서드. 기본값은 `&quot;{0}&quot;`, 해당 매개 변수 이름이 필드 이름입니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: ObjectDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.ObjectDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "추가 <xref href=&quot;System.Web.UI.Page.LoadComplete&quot;> </xref> 이벤트 처리기를 포함 하는 페이지는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 제어 합니다."
  remarks: "이벤트를 발생 시키는 대리자를 통해 이벤트 처리기를 호출 합니다. 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.       OnInit 메서드는 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할를 수도 있습니다. 이 파생된 클래스에서 이벤트를 처리 하는 기본 방법입니다."
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>이벤트 데이터를 포함 하는.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.ObjectDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  id: ParsingCulture
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
  fullName: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "가져옵니다는 culture 정보에 표시 된 형식의 개체를 생성 하기 위해 실제 속성 형식에 문자열 값을 변환 하는 경우 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*>.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*> 사용 되는지 나타내는 값을 설정 하거나"
  syntax:
    content: public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }
    return:
      type: System.Web.UI.WebControls.ParsingCulture
      description: "문화권 정보입니다. 기본값은 <xref href=&quot;System.Web.UI.WebControls.ParsingCulture&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  id: SaveViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SaveViewState()
  nameWithType: ObjectDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "상태를 저장 된 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 제어 합니다."
  syntax:
    content: protected override object SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "서버 컨트롤 현재 뷰 상태; 반환 그렇지 않으면 반환 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>컨트롤과 연결 된 뷰 상태가 없는 경우, 합니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.SaveViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Select
  id: Select
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Select()
  nameWithType: ObjectDataSource.Select()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Select()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "로 식별 되는 메서드를 호출 하 여 기본 데이터 저장소에서 데이터를 검색는 <> </> *>의 매개 변수를 사용 하 여 속성의 <> </> *> 컬렉션입니다."
  remarks: "지정된 된 메서드는 어떤 메서드 시그니처를 가질 수 있지만 반환 하거나에 대 한 다음 표에 나열 된 형식 중 하나에서 파생 될는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤을 성공적으로 호출 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource>      | 반환 형식 | 작업 |   |-----------------|------------|   | <xref:System.Collections.IEnumerable>| <xref:System.Collections.IEnumerable>Select 메서드에 의해 반환 됩니다. |   | <xref:System.Data.DataTable>| <xref:System.Data.DataTable>를 사용 하 여 한 <xref:System.Data.DataView>가 만들어져 Select 메서드에 의해 반환 합니다. |   | <xref:System.Data.DataView>| <xref:System.Data.DataView>Select 메서드에 의해 반환 됩니다. |   | <xref:System.Data.DataSet>| <xref:System.Data.DataSet>의 첫 번째 <xref:System.Data.DataTable>추출 되 고는 <xref:System.Data.DataView>가 만들어져 Select 메서드에 의해 반환 합니다. |   | <xref:System.Object>| 개체가 요소가 하나인 <xref:System.Collections.IEnumerable>컬렉션에 래핑된 이며 Select 메서드에 의해 반환 됩니다. |       로 식별 되는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성에는 인스턴스 메서드 일 수 또는 `static` (`Shared` Visual basic에서) 메서드.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Collections.IEnumerable> </xref:System.Object> </xref:System.Data.DataView>  </xref:System.Data.DataTable></xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Data.DataView> </xref:System.Data.DataView>  </xref:System.Data.DataView></xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Collections.IEnumerable> </xref:System.Collections.IEnumerable> 인스턴스 메서드인 경우 비즈니스 개체가 만들어지고 소멸 될 때마다 지정 된 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성이 호출 제외 하 고 지정 된 메서드를 호출 하 고 동일한 인스턴스가 사용 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성 및 지정 된 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Select 메서드는 반환 된 <xref:System.Collections.IEnumerable>인터페이스.</xref:System.Collections.IEnumerable> 그러나 캐싱 및 필터링 시나리오를 사용 하려면 반환 값 이어야 합니다는 <xref:System.Data.DataSet>개체입니다.</xref:System.Data.DataSet> <xref:System.Data.DataSet>클래스의 <xref:System.Collections.IEnumerable>인터페이스, <xref:System.Web.UI.WebControls.ObjectDataSource>제어 기본 <xref:System.Data.DataView> <xref:System.Collections.IEnumerable>.</xref:System.Collections.IEnumerable> 를 구현 하는 컨트롤</xref:System.Data.DataView> 을 자동으로 추출</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Collections.IEnumerable> 구현 하지 않는</xref:System.Data.DataSet> 동안       선택 작업을 수행 하기 전에 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A> 처리할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>이벤트 매개 변수의 값을 확인 하 고 작업을 선택 하기 전에 전처리를 수행할 수 있습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 데이터 검색 작업을 수행 하는 <xref:System.Web.UI.WebControls.ObjectDataSourceView>로 식별 되는 개체의 인스턴스를 만들고 하기 위해는 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 다음으로 식별 되는 메서드를 호출는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성, 연결 된 모든를 사용 하 여 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 선택 작업이 완료 되 면는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.Selected> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A> 처리할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected>이벤트 모든 반환 값과 출력 매개 변수 예외를 검사 하 고 후 처리를 수행할 수 있습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Selected>       경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성에서 반환은 <xref:System.Data.DataSet>, <xref:System.Data.DataTable>, 또는 <xref:System.Data.DataView>개체 및 캐싱을 사용 하도록 설정 된 <xref:System.Web.UI.WebControls.ObjectDataSource>에서 데이터를 검색 하 고 작업을 선택 하는 동안 캐시에 데이터를 저장 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Data.DataView> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 캐시 또는 생성 된 경우 삭제 된 새로 고침의 조합에 의해 지정 된 캐싱 동작에 따라는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>       경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성에서 반환은 <xref:System.Data.DataSet>또는 <xref:System.Data.DataTable>개체 및 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>속성이 지정 된 경우, 제공 된 함께 평가 되 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>속성 및 결과 필터 데이터 목록에 선택 작업 동안 적용 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>       Select 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>의 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연관 된는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>       매개 변수가 병합, 개체 수명 및 방법 확인 하는 방법에 대 한 자세한 내용은 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 을 참조 하십시오.      ## 데이터 바인딩된 컨트롤 때는 <xref:System.Web.UI.WebControls.ObjectDataSource>제어와 같은 연결 된 데이터 바인딩 컨트롤의 <xref:System.Web.UI.WebControls.GridView>제어, 필요한 경우가 아니라면 페이지 코드에서 Select 메서드를 호출 하.</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> Select 메서드 대신 데이터 바인딩된 컨트롤에서 직접 호출 됩니다."
  example:
  - For a code example, see <xref:System.Web.UI.WebControls.ObjectDataSource>.
  syntax:
    content: public System.Collections.IEnumerable Select ();
    parameters: []
    return:
      type: System.Collections.IEnumerable
      description: "<xref:System.Collections.IEnumerable>데이터 행 목록입니다.</xref:System.Collections.IEnumerable>"
  overload: System.Web.UI.WebControls.ObjectDataSource.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  id: SelectCountMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "메서드 또는 함수의 이름을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 제어를 행 수를 검색 하기 위해 호출 합니다."
  remarks: "SelectCountMethod 속성 데이터 소스 페이징을 지원 하기 위해 총 행 수를 검색 하는 데 사용 되는 비즈니스 개체 메서드를 식별 합니다. SelectCountMethod 속성은 경우에 평가 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>속성이 `true`.</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>       SelectCountMethod 속성에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> <xref:System.Web.UI.WebControls.ObjectDataSource>제어를 참조 하십시오 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 에서 페이징은 지 원하는 방법에 대 한 정보에 대 한"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The SelectCountMethod property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the SelectCountMethod property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_3.vb)]"
  syntax:
    content: public string SelectCountMethod { get; set; }
    return:
      type: System.String
      description: "사용 하는 함수 또는 메서드의 이름을 나타내는 문자열의 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 사용 하 여 행 수를 검색 합니다. 이 메서드는 정수를 반환 해야 (<xref:System.Int32>).</xref:System.Int32> 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: ObjectDataSource.Selected
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selected
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "발생 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select*>작업이 완료 된.</xref:System.Web.UI.WebControls.ObjectDataSource.Select*>"
  remarks: "반환 값 또는 출력 매개 변수의 값을 확인 하거나 후 예외가 throw 되었는지 여부를 확인 하려면 선택한 이벤트를 처리 한 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>작업이 완료 된.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 사용할 수 있는 반환 값, 출력 매개 변수 및 속성을 처리 하는 예외는 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>이벤트와 연결 된 개체입니다.</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_1.aspx)]  \n  \n The second example shows handlers for the Selected and <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> events. The Selected event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_3.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: ObjectDataSource.Selecting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selecting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "앞에 오는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select*>작업.</xref:System.Web.UI.WebControls.ObjectDataSource.Select*>"
  remarks: "매개 변수 값의 유효성을 검사 하는 응용 프로그램에 적용 되는 추가 초기화를 수행 하도록 선택 하면 이벤트를 처리 또는 하기 전에 값을 매개 변수를 변경 하는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 데이터 검색 작업을 수행 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 매개 변수는 사용할 수는 <xref:System.Collections.IDictionary>액세스 하는 컬렉션의 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>속성에 의해 노출 되는 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>개체입니다.</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       이 이벤트를 한 번 호출에 대해 두 번 발생 시킬 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드를 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>속성을 설정 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs>개체 선택 하는 경우이 호출 되어 데이터를 검색 하거나 검색할 수를 결정 하는 데 사용 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  id: SelectMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "메서드 또는 함수의 이름을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 컨트롤이 호출 데이터를 검색 합니다."
  remarks: "지정된 된 메서드는 어떤 메서드 시그니처를 가질 수 있지만 대 한 다음 표에 표시 된 형식 중 하나를 반환 해야 합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤을 성공적으로 호출 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource>      | 반환 형식 | 작업 |   |-----------------|------------|   | <xref:System.Collections.IEnumerable>| <xref:System.Collections.IEnumerable> <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드에 의해 반환 됩니다. |   | <xref:System.Data.DataTable>| <xref:System.Data.DataView>는 <xref:System.Data.DataTable>를 사용 하 여 만들어지고 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>확장 메서드에서 반환한. |   | <xref:System.Data.DataView>| <xref:System.Data.DataView> <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드에 의해 반환 됩니다. |   | <xref:System.Data.DataSet>| <xref:System.Data.DataSet>의 첫 번째 <xref:System.Data.DataTable>추출 되 고 한 <xref:System.Data.DataView>생성 되어 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>확장 메서드에서 반환한. |   | <xref:System.Object>| 개체가 요소가 하나인 <xref:System.Collections.IEnumerable>컬렉션에 래핑된 이며 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>확장 메서드에서 반환한. |       SelectMethod 속성이에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Collections.IEnumerable> </xref:System.Object> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataView>  </xref:System.Data.DataTable></xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataView> </xref:System.Data.DataView> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataTable> </xref:System.Data.DataView> </xref:System.Data.DataTable> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Collections.IEnumerable> </xref:System.Collections.IEnumerable>       사용 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource>삭제 하거나 데이터를 업데이트, 매개 변수 이름에 대해 구성 되었는지 확인 하는 클래스는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤에 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>컬렉션 또는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>컬렉션 select 메서드에 의해 반환 되는 열 이름과 일치 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource>      ## 개체 수명 SelectMethod 속성으로 식별 되는 메서드는 인스턴스 메서드 일 수 또는 `static` (`Shared` Visual basic에서) 메서드. 인스턴스 메서드인 경우 비즈니스 개체가 생성 되 고 있는 SelectMethod 속성으로 지정 하는 메서드를 호출할 때마다 제거 합니다. 처리할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>SelectMethod 속성으로 지정 된 메서드를 호출 하기 전에 비즈니스 개체를 사용 하는 이벤트입니다.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 처리할 수도 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>SelectMethod 속성으로 지정 된 메서드가 호출 된 후 발생 하는 이벤트입니다.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 비즈니스 개체를 구현 하는 경우는 <xref:System.IDisposable>인터페이스는 <xref:System.IDisposable.Dispose%2A>메서드는 개체가 소멸 되기 전에 호출 됩니다.</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> 메서드가 `static` (`Shared` Visual basic에서), 비즈니스 개체를 만들지는 및 처리할 수 없는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## 병합 매개 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>이러한 원본의 컬렉션:-에서 선언적으로 `SelectParameters` 요소.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>      -에서 프로그래밍 방식으로 `Selecting` 메서드.       첫째,에 나열 된 매개 변수는 `SelectParameters` 요소가 추가 됩니다. 둘째, 매개 변수는 프로그래밍 방식으로 추가 및 제거에 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>이벤트를 발생 하기 전에 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드를 실행 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 메서드는 매개 변수가 병합 된 후 확인 됩니다. 메서드 해상도 다음 섹션에서 설명 합니다.      > [!IMPORTANT] > 클라이언트에서 수신 하는 모든 매개 변수 값의 유효성을 검사 해야 합니다. 런타임에 매개 변수 값으로 SelectMethod 속성에 있습니다.      ## 때 메서드 해상도 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드가 호출 되 면 데이터 바인딩된 컨트롤에서 선언적으로 생성 된 매개 변수에서 데이터 필드는 `SelectParameters` 요소 및에 추가 된 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>이벤트 처리기 모두 병합 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (자세한 내용은 이전 섹션 참조). <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤 다음 시도를 호출할 메서드를 찾습니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 첫째, SelectMethod 속성에 지정 된 이름 가진 하나 이상의 메서드를 찾습니다. 일치 항목이 없는 경우는 <xref:System.InvalidOperationException>예외가 throw 됩니다.</xref:System.InvalidOperationException> 일치 하는 항목이 없는 경우 일치 하는 매개 변수 이름을 찾습니다. 예를 들어 지정 된 형식에서 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>속성이 라는 두 가지 방법 `SelectARecord`.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 하나의 `SelectARecord` 하나의 매개 변수가 `ID`, 다른 `SelectARecord`&2; 개의 매개 변수가 `Name` 및 `Number`합니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>컬렉션에 명명 된 매개 변수만 `ID`, `SelectARecord` 메서드 테이블만 `ID` 매개 변수 라고 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 매개 변수 형식의 메서드 확인 과정에서 확인 되지 않습니다. 매개 변수의 순서가 중요 하지 않습니다.       경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>속성은 메서드를 다른 방식으로 확인 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> <xref:System.Web.UI.WebControls.ObjectDataSource>에 지정 된 매개 변수 유형 중 하나를 사용 하는 SelectMethod 속성에 지정 된 이름의 메서드를 찾습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 이 경우 매개 변수의 이름을 중요 하지 않습니다."
  example:
  - "The following code example demonstrates how a <xref:System.Web.UI.WebControls.GridView> control can display data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control on a Web Forms page. The <xref:System.Web.UI.WebControls.ObjectDataSource> identifies a partially or fully qualified class name with its <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property and a method that is called to retrieve data with its SelectMethod property. At run time, the object is created and the method is called using reflection. The <xref:System.Web.UI.WebControls.GridView> control enumerates through the <xref:System.Collections.IEnumerable> collection that is returned by the method that is specified by the SelectMethod property, and displays the data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_540_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_540_1.aspx)]"
  syntax:
    content: public string SelectMethod { get; set; }
    return:
      type: System.String
      description: "사용 하는 함수 또는 메서드의 이름을 나타내는 문자열의 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 사용 하 여 데이터를 검색 합니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "으로 지정한 메서드의에서 사용 되는 매개 변수 컬렉션을 가져옵니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "SelectParameters 속성 get는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A>       매개 변수 컬렉션에 추가 하는 SelectParameters 선언적으로 사용 하 여는 `SelectParameters` 요소에 대 한 처리기에서 프로그래밍 방식으로 또는 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 실행 시에 나열 된 매개 변수는 `SelectParameters` 먼저 요소를 컬렉션에 추가 됩니다. Parameters 컬렉션의 다음 추가 또는 제거에 대 한 처리기가는 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>이벤트가 발생 하기 전에 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드를 실행 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>       전에 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드가 실행 될, 이름 및 SelectParameters 컬렉션에 포함 된 매개 변수 형식으로 지정 된 메서드의 서명과 일치 해야는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 예를 들어 라는 select 메서드 `GetEmployeesByStateAndAge` 사용는 `string` , 정수를 매개 변수로 SelectParameters 컬렉션에는 두 개의 매개 변수가 포함 되어야 합니다. 첫 번째 매개 변수는 문자열을 확인 해야 하 고 두 번째 매개 변수는 정수를 확인 해야 합니다. 태그에서 두 매개 변수를 지정할 수 있습니다는 `SelectParameters` 요소입니다. 될 수 있습니다에 추가할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>이벤트 처리기 또는 하나의 매개 변수 태그에 추가할 수 있으며, 다른 하나는 프로그래밍 방식으로 추가할 수 있습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>       자세한 내용은 참조 [ObjectDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md) 및 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod>      > [!IMPORTANT] >에 대 한 코드에는 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>이벤트 처리기 또는으로 지정 하는 방법에는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성을 클라이언트에서 수신 하는 모든 매개 변수 값 유효성을 검사 하 고 있는지 확인 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>"
  example:
  - "The following code example demonstrates how to retrieve a single data record using an <xref:System.Web.UI.WebControls.ObjectDataSource> control and display it in a <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.ObjectDataSource> control retrieves a specific employee record by calling the `GetEmployee` method of the `EmployeeLogic` class. The `GetEmployee` method requires an employee ID parameter. The <xref:System.Web.UI.WebControls.ObjectDataSource> control uses a `QueryStringParameter` element in markup to create a <xref:System.Web.UI.WebControls.QueryStringParameter> object that will retrieve the value of a specified query-string parameter from the URL and pass it to the `GetEmployee` method.  \n  \n Other parameter classes can be used to retrieve values from other sources, such as control properties, form fields, cookies, ASP.NET profile data, or session state. You can also use a parameter object that is defined in markup in order to pass a hard-coded value to the select method. For more information about parameter classes that are available, see [Using Parameters with Data Source Controls for Filtering](~/add/includes/ajax-current-ext-md.md).  \n  \n To run this example, you will need the following:  \n  \n-   A Web site that has a connection string named `NorthwindConnection` that connects to the Northwind Traders database. For more information, see the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview.  \n  \n-   The `EmployeeLogic` class that is shown as one of the code examples for the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview. The class file must be located in the App_Code folder.  \n  \n-   The sample code can be run as an .aspx page. If you request the page without a query-string parameter, an error message is displayed. If you request the page using a query string such as `?empid=1` after the name of the .aspx file, you will see the details for the requested employee.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_3#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1025_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1025_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "으로 지정한 메서드의에서 사용 되는 매개 변수 컬렉션은 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  id: SortParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "비즈니스 개체의 이름을 가져오거나는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>매개 변수 데이터 정렬 지원을 원본에 대 한 정렬 식을 지정 하는 데 사용 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "SortParameterName 속성은 데이터 소스 정렬을 지 원하는 데 사용 됩니다. 때는 <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>속성이에 설정 되는 <xref:System.Web.UI.DataSourceSelectArguments>개체를 전달는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드, SortParameterName 값의 매개 변수 이름을 식별 합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>비즈니스 개체 메서드 기준인 데이터 정렬.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.DataSourceSelectArguments> </xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>       경우는 <xref:System.Web.UI.WebControls.ObjectDataSource>연결 된 값이 매개 변수 사용 하 여 뒤에 쉼표로 구분 된 필드 값의 형식에 전달 되는 데이터 바인딩된 컨트롤을 `&quot;ASC&quot;` 또는 `&quot;DESC&quot;`.</xref:System.Web.UI.WebControls.ObjectDataSource> 예를 들어, 오름차순 정렬에 대 한 값 `Name` 것 `&quot;Name ASC&quot;`합니다.       SortParameterName 속성에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to implement a type that supports sorting. The second code example demonstrates how to implement a sort expression.  \n  \n The following code example demonstrates how to implement a type that supports sorting. The `SelectMethod` of the `SortingData` class takes a parameter, `sortExpression`. The string that is passed to `SelectMethod` is used for the <xref:System.Data.DataView.Sort%2A> property of the <xref:System.Data.DataView> object that is returned by `SelectMethod`.  \n  \n [!code-cs[ObjectDataSourceSorting#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_386_1.cs)]\n [!code-vb[ObjectDataSourceSorting#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_386_1.vb)]  \n  \n The following code example demonstrates how to implement a sort expression. The code in the Web page creates an instance of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property is set to `SortingData` and the SortParameterName property is set to `sortExpression`. The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true`. When the user clicks the **Sort** button, the field name, `Name` or `Number`, is passed to `SelectMethod` in the sort parameter.  \n  \n [!code-cs[ObjectDataSourceSorting#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_386_2.aspx)]\n [!code-vb[ObjectDataSourceSorting#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_386_2.aspx)]"
  syntax:
    content: public string SortParameterName { get; set; }
    return:
      type: System.String
      description: "데이터를 정렬 하는 데 사용 되는 매개 변수를 나타내는 데 사용 하는 메서드 매개 변수의 이름입니다. 기본값은 빈 문자열입니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.SortParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  id: SqlCacheDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "데이터베이스 및 Microsoft SQL Server 캐시 종속성에 사용할 테이블을 지정 하는 세미콜론으로 구분 된 문자열을 가져오거나 설정 합니다."
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>똑같이 선택적 만료 정책을 기반으로 하는 <xref:System.Web.Caching.SqlCacheDependency>(데이터베이스 서버에 대 한 서비스 구성 해야 합니다) 데이터 캐시에 대 한 개체입니다.</xref:System.Web.Caching.SqlCacheDependency> </xref:System.Web.UI.WebControls.ObjectDataSource>       SQL Server는 캐시 무효화에 대 한 두 가지 메커니즘을 지원: 폴링 및 알림. 각 메커니즘에 대 한 다른 구문에는 <xref:System.Web.Caching.SqlCacheDependency>개체입니다.</xref:System.Web.Caching.SqlCacheDependency>       <xref:System.Web.UI.WebControls.ObjectDataSource>폴링만 지원 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> <xref:System.Web.Caching.SqlCacheDependency>문자열 만드는 데 사용 되는 <xref:System.Data.SqlClient.SqlDependency>에 전달 되는 개체는 <xref:System.Data.Common.DbCommand>전에 생성자는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>메서드를 실행 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.Common.DbCommand> </xref:System.Data.SqlClient.SqlDependency> </xref:System.Web.Caching.SqlCacheDependency> 데이터베이스 및 테이블에서 사용 되는 동일한 형식에 따라 식별 하는 SqlCacheDependency 문자열은 `@ Page` 지시문을 문자열의 첫 번째 부분 인 SQL Server 데이터베이스에 연결 문자열 뒤에 마지막으로 데이터베이스 테이블의 이름 (예를 들어 `&quot;connectionstring1:table1&quot;`). 연결 문자열 및 테이블 이름 쌍은 세미콜론으로 구분 SqlCacheDependency 속성 둘 이상의 테이블에 의존 하는 경우 (예를 들어 `&quot;connectionstring1:table1&quot;;connectionstring2:table2&quot;`).       구현에서 캐시 논리 작성 해야 하는 알림을 지원 하려면 프로그램 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성 처리를 생성 하 고는 <xref:System.Web.Caching.SqlCacheDependency>코드에서이 개체.</xref:System.Web.Caching.SqlCacheDependency> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.ObjectDataSource> object. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.ObjectDataSource> control. In this example, the database is polled every 120 seconds. If the data in the Northwind Traders Employees table changes during that time, any data that is cached by the <xref:System.Web.UI.WebControls.ObjectDataSource> control and displayed by the <xref:System.Web.UI.WebControls.GridView> control is expired and a new set of data is retrieved on the next request for the page.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_7#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_787_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_7#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_787_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList> object. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_787_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_787_2.cs)]"
  syntax:
    content: public virtual string SqlCacheDependency { get; set; }
    return:
      type: System.String
      description: "문자열 데이터베이스를 나타내며 SQL Server 캐시 종속성에 사용할 테이블입니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  id: StartRowIndexParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "데이터 소스 페이징 지원에 대 한 검색을 첫 번째 레코드의 식별자의 값을 나타내는 데 사용 되는 데이터 검색 메서드 매개 변수의 이름을 가져오거나 설정 합니다."
  remarks: "StartRowIndexParameterName 속성은 데이터 소스 페이징을 지 원하는 데 사용 됩니다. <xref:System.Web.UI.WebControls.ObjectDataSource>제어를 참조 하십시오 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 에서 페이징은 지 원하는 방법에 대 한 정보에 대 한       StartRowIndexParameterName 속성에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the StartRowIndexParameterName property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_3.vb)]"
  syntax:
    content: public string StartRowIndexParameterName { get; set; }
    return:
      type: System.String
      description: "검색할 첫 번째 레코드를 나타내는 데 사용 하는 비즈니스 개체 메서드 매개 변수의 이름입니다. 매개 변수는 정수 값을 반환 해야 합니다. 기본값은 `&quot;startRowIndex&quot;`합니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: ObjectDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "뷰 상태 변경을 추적는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 에 저장할 수 있도록 컨트롤의 <xref href=&quot;System.Web.UI.StateBag&quot;> </xref> 개체입니다."
  remarks: "TrackViewState 메서드는 개체에 대 한 뷰 상태의 일부로 컨트롤의 변경 내용을 추적 하 고 저장을 시작 하려면 시작 위치를 표시 하도록 재정의 됩니다."
  syntax:
    content: protected override void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.ObjectDataSource.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName
  id: TypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.TypeName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "클래스의 이름을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 개체가 나타내는입니다."
  remarks: "개체의 인스턴스를 만들는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤 리플렉션을 사용 하 여 런타임 시 형식 이름으로 식별 되는 형식을 로드, 컨트롤에 바인딩합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 따라서, Bin 또는 App_Code 디렉터리에 있는 코드는 부분적으로 정규화 된 형식 또는 전역 어셈블리 캐시에 등록 되어 있는 코드에 대 한 정규화 된 형식 이름을 TypeName 속성의 값 수 있습니다. 에 대 한 적절 한 참조를 추가 해야 전역 어셈블리 캐시를 사용 하는 경우는 `assemblies` Machine.config 또는 Web.config 파일의 섹션입니다.       유형을 처리 하지 않는 한 기본 생성자를 있어야는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>해당 형식의 인스턴스를 직접 만들어야 하는 이벤트입니다.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 형식의 인스턴스를 호출할 때마다 만들어집니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>메서드, 형식에 메서드는 멤버 메서드입니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드는 인스턴스 생성 되지 않습니다 `static` (`Shared` Visual basic에서). 형식을 구현 하는 경우는 <xref:System.IDisposable>인터페이스는 <xref:System.IDisposable.Dispose%2A>메서드는 개체가 소멸 되기 전에 호출 됩니다.</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable>"
  example:
  - "The following code example demonstrates how a <xref:System.Web.UI.WebControls.GridView> control can display data by using an <xref:System.Web.UI.WebControls.ObjectDataSource> control on a Web Forms page. The <xref:System.Web.UI.WebControls.ObjectDataSource> identifies a partially or fully qualified class name with its TypeName property and a method that is called to retrieve data with its <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. At run time, the object is created and the method is called using reflection. The <xref:System.Web.UI.WebControls.GridView> control enumerates through the <xref:System.Collections.IEnumerable> collection that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, and displays the data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_850_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_850_1.aspx)]  \n  \n The following example shows the class that the TypeName property value refers to.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_850_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_850_2.vb)]"
  syntax:
    content: public string TypeName { get; set; }
    return:
      type: System.String
      description: "개체의 형식을 식별 하는 부분적으로 또는 완전히 정규화 된 클래스 이름을 하는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 나타냅니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ObjectDataSource.TypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Update
  id: Update
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Update()
  nameWithType: ObjectDataSource.Update()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Update()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "로 식별 되는 메서드를 호출 하 여 업데이트 작업을 수행 합니다.는 <> </> *> 속성 및에 있는 매개 변수는 <> </> *> 컬렉션입니다."
  remarks: "일괄 처리 대신 한 번에 하나씩 레코드의 데이터를 업데이트 하는 비즈니스 개체 가정 합니다.       업데이트 작업을 수행 하기 전에 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.Updating> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A> 처리할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>이벤트 매개 변수의 값을 검사 하 고 모든 업데이트 작업이 수행 되기 전에 전처리를 수행할 수 있습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 업데이트 작업을 수행 하는 <xref:System.Web.UI.WebControls.ObjectDataSourceView>로 식별 되는 개체의 인스턴스를 만들고 하기 위해는 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 다음으로 식별 되는 메서드를 호출는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>속성, 연결 된 모든를 사용 하 여 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 업데이트 작업이 완료 되 면는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.Updated>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.Updated> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A> 처리할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Updated>이벤트 모든 반환 값과 출력 매개 변수 예외를 검사 하 고 후 처리를 수행할 수 있습니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Updated>       큐브의 Update 메서드에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>의 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연관 된는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>       매개 변수가 병합, 개체 수명 및 방법 확인 하는 방법에 대 한 자세한 내용은 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 을 참조 하십시오.      > [!IMPORTANT] > 클라이언트에서 수신 하는 모든 매개 변수 값의 유효성을 검사 해야 합니다. 런타임에 매개 변수 값에는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>      ## 데이터 바인딩된 컨트롤 때는 <xref:System.Web.UI.WebControls.ObjectDataSource>제어와 같은 연결 된 데이터 바인딩 컨트롤의 <xref:System.Web.UI.WebControls.GridView>제어, 필요한 경우가 아니라면 페이지 코드에서 Update 메서드를 호출 하.</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 큐브의 Update 메서드에 대신 데이터 바인딩된 컨트롤에서 직접 호출 됩니다."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> objects to update data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a Northwind employee, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection contains a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that raises the Update operation is enabled only after an employee is selected.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_97_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_97_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_97_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_97_2.vb)]"
  syntax:
    content: public int Update ();
    parameters: []
    return:
      type: System.Int32
      description: "내부 데이터 저장소에서 업데이트 된 행 수를 나타내는 값입니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.Update*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: ObjectDataSource.Updated
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "발생 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.Update*>작업이 완료 된.</xref:System.Web.UI.WebControls.ObjectDataSource.Update*>"
  remarks: "반환 값 또는 출력 매개 변수의 값을 확인 하거나 후 예외가 throw 되었는지 여부를 확인 하려면 업데이트 된 이벤트를 처리 한 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>작업이 완료 된.</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 사용할 수 있는 반환 값, 출력 매개 변수 및 속성을 처리 하는 예외는 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>이벤트와 연결 된 개체입니다.</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  id: UpdateMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "메서드 또는 함수의 이름을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 컨트롤이 호출 데이터를 업데이트 합니다."
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>제어 UpdateMethod 속성으로 식별 되는 메서드가 아닌 일괄 처리에서 한 번에 하나씩 업데이트를 수행 하는 것으로 가정 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource>       UpdateMethod 속성에 위임는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A>의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A>       매개 변수 이름에 대해 구성 되었는지 확인는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤에 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>컬렉션 select 메서드에 의해 반환 되는 열 이름과 일치 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>      ## 개체 수명 UpdateMethod 속성으로 식별 되는 메서드는 인스턴스 메서드 일 수 또는 `static` (`Shared` Visual basic에서) 메서드. 인스턴스 메서드인 경우 비즈니스 개체가 생성 되 고 있는 UpdateMethod 속성으로 지정 하는 메서드를 호출할 때마다 제거 합니다. 처리할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>UpdateMethod 속성으로 지정 된 메서드를 호출 하기 전에 비즈니스 개체를 사용 하는 이벤트입니다.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 처리할 수도 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>UpdateMethod 속성으로 지정 된 메서드가 호출 된 후 발생 하는 이벤트입니다.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 비즈니스 개체를 구현 하는 경우는 <xref:System.IDisposable>인터페이스는 <xref:System.IDisposable.Dispose%2A>메서드는 개체가 소멸 되기 전에 호출 됩니다.</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> 메서드가 `static` (`Shared` Visual basic에서), 비즈니스 개체를 만들지는 및 처리할 수 없는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>이벤트.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## 매개 변수가 병합 매개 변수를 추가 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>컬렉션 다음 세 가지 소스의:-런타임에 데이터 바인딩된 컨트롤에서.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>      `UpdateParameters` 요소를 선언적으로 합니다.      <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>이벤트 처리기를 프로그래밍 방식으로.</xref:System.Web.UI.WebControls.ObjectDataSource.Updating>       첫째, 매개 변수를 데이터 바인딩된 컨트롤에서 생성 된에 추가 되 고 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 예를 들어 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 바인딩되는 <xref:System.Web.UI.WebControls.GridView>열이 있는 컨트롤 `Name` 및 `Number`, 매개 변수를 `Name` 및 `Number` 컬렉션에 추가 됩니다.</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 정확한 이름은 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 이러한 매개 변수의 데이터 형식이 `string`합니다. 다음에 나와 있는 매개 변수는 `UpdateParameters` 요소가 추가 됩니다. 경우에 매개 변수는 `UpdateParameters` 요소가 이미 있는 매개 변수의 동일한 이름으로 발견 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>기존 매개 변수 컬렉션에 지정 된 매개 변수의 이름과 일치 하도록 수정 됩니다는 `UpdateParameters` 요소.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 일반적으로이 매개 변수에서 데이터의 유형을 수정 하도록 사용 됩니다. 마지막으로 프로그래밍 방식으로 추가 및 제거할 수 있습니다에 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>이벤트를 발생 하기 전에 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>메서드를 실행 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 메서드는 매개 변수가 병합 된 후 확인 됩니다. 메서드 해상도 다음 섹션에서 설명 합니다.      > [!IMPORTANT] > 클라이언트에서 수신 하는 모든 매개 변수 값의 유효성을 검사 해야 합니다. 런타임에 매개 변수 값으로 UpdateMethod 속성에 있습니다.      ## 때 메서드 해상도 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>메서드가 호출 되 면 데이터 바인딩된 컨트롤에서 선언적으로 생성 된 매개 변수에서 데이터 필드는 `UpdateParameters` 요소 및에 추가 된 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>이벤트 처리기 모두 병합 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.Updating> </xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> (자세한 내용은 이전 섹션 참조). <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤 다음 시도를 호출할 메서드를 찾습니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 첫째, UpdateMethod 속성에 지정 된 이름 가진 하나 이상의 메서드를 찾습니다. 일치 항목이 없는 경우는 <xref:System.InvalidOperationException>예외가 throw 됩니다.</xref:System.InvalidOperationException> 일치 하는 항목이 없는 경우 일치 하는 매개 변수 이름을 찾습니다. 예를 들어 지정 된 형식에서 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>속성이 라는 두 가지 방법 `UpdateARecord`.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 하나의 `UpdateARecord` 하나의 매개 변수가 `ID`, 다른 `UpdateARecord`&2; 개의 매개 변수가 `Name` 및 `Number`합니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>컬렉션에 명명 된 매개 변수만 `ID`, `UpdateARecord` 메서드 테이블만 `ID` 매개 변수 라고 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 매개 변수 형식의 메서드 확인 과정에서 확인 되지 않습니다. 매개 변수의 순서가 중요 하지 않습니다.       경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>속성은 메서드를 다른 방식으로 확인 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> <xref:System.Web.UI.WebControls.ObjectDataSource>에 지정 된 매개 변수 유형 중 하나를 사용 하 여 UpdateMethod 속성에 지정 된 이름의 메서드를 찾습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 이 경우 매개 변수의 이름을 중요 하지 않습니다."
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_1.aspx)]  \n  \n The second example shows handlers for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> and <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> events. The <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_3.cs)]"
  syntax:
    content: public string UpdateMethod { get; set; }
    return:
      type: System.String
      description: "사용 하는 함수 또는 메서드의 이름을 나타내는 문자열의 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> 데이터 업데이트를 사용 하 여 합니다. 기본값은 빈 문자열입니다."
  overload: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "지정 된 메서드에 의해 사용 되는 매개 변수를 포함 하는 매개 변수 컬렉션을 가져옵니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>"
  remarks: "이름 및 유형의 UpdateParameters 컬렉션에 포함 된 매개 변수 이름 및 매개 변수 형식과 일치 해야 합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>메서드 서명을.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 매개 변수 이름은 영향을 받는 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>속성 및 대/소문자 구분 됩니다.</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> Parameters 컬렉션의 데이터 바인딩된 컨트롤, 선언적으로 지정 된 매개 변수 및 프로그래밍 방식으로 추가 되는 매개 변수에서 데이터에 따라 달라 집니다. 자세한 내용은 &quot;매개 변수가 병합&quot; 섹션을 참조 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>및 [ObjectDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md).</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>       UpdateParameters 속성 검색은 <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A>에 포함 된 속성의 <xref:System.Web.UI.WebControls.ObjectDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A>       매개 변수가 병합, 개체 수명 및 방법 확인 하는 방법에 대 한 자세한 내용은 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 을 참조 하십시오.      > [!IMPORTANT] > 클라이언트에서 수신 하는 모든 매개 변수 값의 유효성을 검사 해야 합니다. 런타임에 매개 변수 값에는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> objects to update data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a Northwind employee, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the UpdateParameters collection contains a <xref:System.Web.UI.WebControls.ControlParameter> that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that raises the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> operation is enabled only after an employee is selected.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_610_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_610_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_610_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_610_2.vb)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> 변수로 지정 된 메서드에서 사용 되는 매개 변수를 포함 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: ObjectDataSource.Updating
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "앞에 오는 <xref:System.Web.UI.WebControls.ObjectDataSource.Update*>작업.</xref:System.Web.UI.WebControls.ObjectDataSource.Update*>"
  remarks: "매개 변수 값의 유효성을 검사 하는 응용 프로그램에 적용 되는 추가 초기화를 수행 하도록 업데이트 이벤트를 처리 또는 하기 전에 값을 매개 변수를 변경 하는 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤이 업데이트 작업을 수행 합니다.</xref:System.Web.UI.WebControls.ObjectDataSource> 매개 변수는 사용할 수는 <xref:System.Collections.IDictionary>액세스 하는 컬렉션의 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>속성에 의해 노출 되는 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>개체입니다.</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_1.aspx)]  \n  \n The second example shows handlers for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> and Updating events. The <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The Updating event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_3.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.DataSourceControl
  isExternal: false
  name: System.Web.UI.DataSourceControl
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource()
  nameWithType: ObjectDataSource.ObjectDataSource()
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource()
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource(String,String)
  nameWithType: ObjectDataSource.ObjectDataSource(String,String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
- uid: System.Web.UI.DataSourceCacheExpiry
  parent: System.Web.UI
  isExternal: false
  name: DataSourceCacheExpiry
  nameWithType: DataSourceCacheExpiry
  fullName: System.Web.UI.DataSourceCacheExpiry
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
- uid: System.Web.UI.ConflictOptions
  parent: System.Web.UI
  isExternal: false
  name: ConflictOptions
  nameWithType: ConflictOptions
  fullName: System.Web.UI.ConflictOptions
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Delete()
  nameWithType: ObjectDataSource.Delete()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Delete()
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleted
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Deleted
  nameWithType: ObjectDataSource.Deleted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleted
- uid: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceStatusEventHandler
  nameWithType: ObjectDataSourceStatusEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Deleting
  nameWithType: ObjectDataSource.Deleting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleting
- uid: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceMethodEventHandler
  nameWithType: ObjectDataSourceMethodEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
- uid: System.Web.UI.WebControls.ObjectDataSource.Filtering
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Filtering
  nameWithType: ObjectDataSource.Filtering
  fullName: System.Web.UI.WebControls.ObjectDataSource.Filtering
- uid: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceFilteringEventHandler
  nameWithType: ObjectDataSourceFilteringEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetView(String)
  nameWithType: ObjectDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetView(String)
- uid: System.Web.UI.DataSourceView
  parent: System.Web.UI
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetViewNames()
  nameWithType: ObjectDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetViewNames()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Insert()
  nameWithType: ObjectDataSource.Insert()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Insert()
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserted
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Inserted
  nameWithType: ObjectDataSource.Inserted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserted
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Inserting
  nameWithType: ObjectDataSource.Inserting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserting
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: LoadViewState(Object)
  nameWithType: ObjectDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectCreated
  nameWithType: ObjectDataSource.ObjectCreated
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
- uid: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceObjectEventHandler
  nameWithType: ObjectDataSourceObjectEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectCreating
  nameWithType: ObjectDataSource.ObjectCreating
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDisposing
  nameWithType: ObjectDataSource.ObjectDisposing
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
- uid: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceDisposingEventHandler
  nameWithType: ObjectDataSourceDisposingEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: ObjectDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.ObjectDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
  fullName: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
- uid: System.Web.UI.WebControls.ParsingCulture
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParsingCulture
  nameWithType: ParsingCulture
  fullName: System.Web.UI.WebControls.ParsingCulture
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SaveViewState()
  nameWithType: ObjectDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.SaveViewState()
- uid: System.Web.UI.WebControls.ObjectDataSource.Select
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Select()
  nameWithType: ObjectDataSource.Select()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Select()
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.Selected
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Selected
  nameWithType: ObjectDataSource.Selected
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selected
- uid: System.Web.UI.WebControls.ObjectDataSource.Selecting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Selecting
  nameWithType: ObjectDataSource.Selecting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selecting
- uid: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceSelectingEventHandler
  nameWithType: ObjectDataSourceSelectingEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TrackViewState()
  nameWithType: ObjectDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.TrackViewState()
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.TypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Update
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Update()
  nameWithType: ObjectDataSource.Update()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Update()
- uid: System.Web.UI.WebControls.ObjectDataSource.Updated
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Updated
  nameWithType: ObjectDataSource.Updated
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updated
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.Updating
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Updating
  nameWithType: ObjectDataSource.Updating
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updating
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource
  nameWithType: ObjectDataSource.ObjectDataSource
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Delete
  nameWithType: ObjectDataSource.Delete
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetView
  nameWithType: ObjectDataSource.GetView
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetViewNames
  nameWithType: ObjectDataSource.GetViewNames
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Insert
  nameWithType: ObjectDataSource.Insert
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: LoadViewState
  nameWithType: ObjectDataSource.LoadViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OnInit
  nameWithType: ObjectDataSource.OnInit
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SaveViewState
  nameWithType: ObjectDataSource.SaveViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.Select*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Select
  nameWithType: ObjectDataSource.Select
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TrackViewState
  nameWithType: ObjectDataSource.TrackViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Update*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Update
  nameWithType: ObjectDataSource.Update
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
