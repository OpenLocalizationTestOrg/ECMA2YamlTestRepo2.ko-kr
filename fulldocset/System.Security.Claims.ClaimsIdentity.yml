### YamlMime:ManagedReference
items:
- uid: System.Security.Claims.ClaimsIdentity
  id: ClaimsIdentity
  children:
  - System.Security.Claims.ClaimsIdentity.#ctor
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.Actor
  - System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.AuthenticationType
  - System.Security.Claims.ClaimsIdentity.BootstrapContext
  - System.Security.Claims.ClaimsIdentity.Claims
  - System.Security.Claims.ClaimsIdentity.Clone
  - System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.CustomSerializationData
  - System.Security.Claims.ClaimsIdentity.DefaultIssuer
  - System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  - System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  - System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  - System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.IsAuthenticated
  - System.Security.Claims.ClaimsIdentity.Label
  - System.Security.Claims.ClaimsIdentity.Name
  - System.Security.Claims.ClaimsIdentity.NameClaimType
  - System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.RoleClaimType
  - System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
  type: Class
  summary: "클레임 기반 id를 나타냅니다."
  remarks: "클레임 기반 id;의 구체적인 구현인 ClaimsIdentity 클래스 즉, 클레임의 컬렉션에서 설명 하는 id입니다. 클레임은 오른쪽, 속성을 설명 하는 발급자 또는 일부 다른 품질 해당 엔터티에 의해 수행 된 엔터티에 대 한 문입니다. 이 엔터티를 클레임의 주체 라고 합니다. <xref:System.Security.Claims.Claim>클래스</xref:System.Security.Claims.Claim> 는 클레임이 표시 됩니다. 해당 id를 나타내는 엔터티를 설명 하는 ClaimsIdentity에 포함 된 클레임 권한 부여 및 인증을 내리는 데 사용할 수 있습니다. 클레임 기반 액세스 모델 역할에만 의존 하는 보다 일반적인 액세스 모델을 통해 많은 이점이 있습니다. 예를 들어 클레임을 훨씬 더 많은 특정 한 방식으로 권한 부여 또는 인증에 대해 평가할 수 나타내지만 id에 대 한 훨씬 더 많은 정보를 제공할 수 있습니다.       .NET Framework 4.5 부터는 Windows Identity Foundation (WIF) 및 클레임 기반 id 완벽 하 게에 통합 되었으며.NET Framework입니다. 즉.NET Framework의 id를 나타내는 많은 클래스가 이제 ClaimsIdentity에서 파생 되 고 클레임의 컬렉션을 통해 속성에 설명 합니다. 이 이전 버전의.NET Framework를 구현 하는 이러한 클래스와 다릅니다는 <xref:System.Security.Principal.IIdentity>인터페이스를 직접.</xref:System.Security.Principal.IIdentity> 클레임 id를 설명 하는 컬렉션을 통해 액세스할 수는 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>속성.</xref:System.Security.Claims.ClaimsIdentity.Claims%2A> ClaimsIdentity 클래스 검색 및 클레임을 수정 하기 위한 여러 가지 방법을 제공 하 고 완벽 하 게 통합 언어 쿼리 (LINQ)를 지원 합니다. 응용 프로그램 코드에서 ClaimsIdentity 개체는 <xref:System.Security.Claims.ClaimsPrincipal>개체; <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> 반환한 주 서버 등</xref:System.Security.Claims.ClaimsPrincipal> 을 통해 액세스 일반적으로      > [!NOTE] >는 <xref:System.Security.Claims.ClaimsPrincipal>클래스에는 <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>속성 이름도.</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> </xref:System.Security.Claims.ClaimsPrincipal> 대부분의 경우 사용자의 클레임을 통해 액세스 해야는 <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName>컬렉션 통하지 않고는 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션.</xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName> 여기서 보안 주체가 둘 이상의 ClaimsIdentity를 포함 하 고 평가 하거나 특정 id를 수정 해야 할 경우에만 개별 ClaimsIdentity는 클레임에 액세스 해야 합니다.      > [!IMPORTANT] > 추가 하거나 클레임을 제거 하는 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션, 호출자가 완전 신뢰가 필요 합니다.</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>       클레임 기반 모델에는 <xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>속성 및 <xref:System.Security.Principal.IPrincipal.IsInRole%28System.String%29?displayProperty=fullName>메서드는 id가 포함 된 클레임을 평가 하 여 구현 됩니다.</xref:System.Security.Principal.IPrincipal.IsInRole%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> 클레임 기반 모델의 기본 구현에서 제공 되는 <xref:System.Security.Claims.ClaimsIdentity.Name%2A?displayProperty=fullName>속성 및 <xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A?displayProperty=fullName>메서드.</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity.Name%2A?displayProperty=fullName> <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>및 <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>속성을 사용 하면 이러한 작업을 수행할 때 id에 포함 된 클레임을 평가 하는 데 사용 해야 하는 클레임 형식을 지정할 수 있습니다.</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>       위임 시나리오에서 사용할 수는 <xref:System.Security.Claims.ClaimsIdentity.Actor%2A>및 <xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>속성.</xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ClaimsIdentity : System.Security.Principal.IIdentity
  inheritance:
  - System.Object
  implements:
  - System.Security.Principal.IIdentity
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor
  id: '#ctor'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity()
  nameWithType: ClaimsIdentity.ClaimsIdentity()
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> 클래스는 빈 클레임 컬렉션입니다."
  remarks: "다음 표에서 <xref:System.Security.Claims.ClaimsIdentity>클래스</xref:System.Security.Claims.ClaimsIdentity> 의 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 값 |   |--------------|-----------|   | <xref:System.Security.Claims.ClaimsIdentity.Actor%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>| 빈 컬렉션입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>속성의 값에 따라 반환 될 <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>속성의 값입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.Label%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.Name%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.Name%2A>속성의 값에 따라 반환 될는 <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>및 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>| <xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|   | <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>| <xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.Actor%2A>"
  syntax:
    content: public ClaimsIdentity ();
    parameters: []
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> 의 열거 된 컬렉션을 사용 하 여 클래스 <xref href=&quot;System.Security.Claims.Claim&quot;> </xref> 개체입니다."
  remarks: "다음 표에서 <xref:System.Security.Claims.ClaimsIdentity>클래스</xref:System.Security.Claims.ClaimsIdentity> 의 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 값 |   |--------------|-----------|   | <xref:System.Security.Claims.ClaimsIdentity.Actor%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>| 초기화 된 `claims` 매개 변수입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>속성의 값에 따라 반환 될 <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>속성의 값입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.Label%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.Name%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.Name%2A>속성의 값에 따라 반환 될는 <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>및 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>| <xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|   | <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>| <xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.Actor%2A>"
  syntax:
    content: public ClaimsIdentity (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "클레임 id를 채울 클레임입니다."
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(BinaryReader)
  nameWithType: ClaimsIdentity.ClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(BinaryReader)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public ClaimsIdentity (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "추가할 수 있습니다."
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(SerializationInfo)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> 클래스를 사용 하 여 만든 serialize 된 스트림으로부터 <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref>합니다."
  syntax:
    content: protected ClaimsIdentity (System.Runtime.Serialization.SerializationInfo info);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Serialize 된 데이터입니다."
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(ClaimsIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected ClaimsIdentity (System.Security.Claims.ClaimsIdentity other);
    parameters:
    - id: other
      type: System.Security.Claims.ClaimsIdentity
      description: "추가할 수 있습니다."
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  id: '#ctor(System.Security.Principal.IIdentity)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> <xref:System.Security.Principal.IIdentity>.</xref:System.Security.Principal.IIdentity> 지정 된 이름 및 인증 유형을 사용 하 여 클래스"
  remarks: "다음 표에서 <xref:System.Security.Claims.ClaimsIdentity>클래스</xref:System.Security.Claims.ClaimsIdentity> 의 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 값 |   |--------------|-----------|   | <xref:System.Security.Claims.ClaimsIdentity.Actor%2A>| 경우 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 값은 `identity.Actor` 속성, 그렇지 않으면 `null`. |   | <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>| 값은 `identity.AuthenticationType` (<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName>) 속성이 사용 됩니다. |   | <xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>| 경우 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 값은 `identity.BootStrapContext` 속성, 그렇지 않으면 `null`. |   | <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>| 경우 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 클레임을 `identity` 고, 그러지 않으면 추가 된 새 인스턴스를 빈 컬렉션입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>속성의 값에 따라 반환 될 <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>속성의 값입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.Label%2A>| 경우 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 값은 `identity.Label` 속성, 그렇지 않으면 `null`. |   | <xref:System.Security.Claims.ClaimsIdentity.Name%2A>| 경우 `identity` 에서 할당할 수 없으면 <xref:System.Security.Claims.ClaimsIdentity>, 않습니다 `null`, 있고는 <xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>하지 않은 속성에 `null`; 이름 클레임의 값을 사용 하 여 새 인스턴스에 추가 됩니다는 <xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>속성.</xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> </xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.Name%2A>속성의 값에 따라 반환 될는 <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>및 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>| 경우 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 값은 `identity.NameClaimType` 속성은 사용, 그렇지 않으면, <xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>사용 됩니다. |   | <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>| 경우 `identity` 에서 할당할 수 <xref:System.Security.Claims.ClaimsIdentity>의 값은 `identity.RoleClaimType` 속성은 사용 되 고, 그렇지 않으면 <xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>사용 됩니다. |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A>"
  syntax:
    content: public ClaimsIdentity (System.Security.Principal.IIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "새 클레임 id를 기반으로 사용할 id입니다."
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> 클래스는은 빈 클레임 컬렉션 및 지정 된 인증 형식입니다."
  remarks: "다음 표에서 <xref:System.Security.Claims.ClaimsIdentity>클래스</xref:System.Security.Claims.ClaimsIdentity> 의 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 값 |   |--------------|-----------|   | <xref:System.Security.Claims.ClaimsIdentity.Actor%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>| 값은 `authenticationType` 매개 변수.</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 경우는 `authenticationType` 매개 변수는 `null` 속성이로 설정 된 빈 문자열로 `null`. |   | <xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>| 빈 컬렉션입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>속성의 값에 따라 반환 될 <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>속성의 값입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.Label%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.Name%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.Name%2A>속성의 값에 따라 반환 될는 <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>및 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>| <xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|   | <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>| <xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>"
  syntax:
    content: public ClaimsIdentity (string authenticationType);
    parameters:
    - id: authenticationType
      type: System.String
      description: "사용 되는 인증 형식입니다."
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IEnumerable<Claim>,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> 된 지정 된 클레임 및 인증 유형입니다."
  remarks: "다음 표에서 <xref:System.Security.Claims.ClaimsIdentity>클래스</xref:System.Security.Claims.ClaimsIdentity> 의 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 값 |   |--------------|-----------|   | <xref:System.Security.Claims.ClaimsIdentity.Actor%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>| 값은 `authenticationType` 매개 변수.</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 경우는 `authenticationType` 매개 변수는 `null` 속성이로 설정 된 빈 문자열로 `null`. |   | <xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>| 초기화 된 `claims` 매개 변수입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>속성의 값에 따라 반환 될 <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>속성의 값입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.Label%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.Name%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.Name%2A>속성의 값에 따라 반환 될는 <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>및 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>| <xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|   | <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>| <xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>"
  syntax:
    content: public ClaimsIdentity (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "클레임 id를 채울 클레임입니다."
    - id: authenticationType
      type: System.String
      description: "사용 되는 인증 형식입니다."
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> 클래스를 사용 하 여 만든 serialize 된 스트림으로부터 <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref>합니다."
  syntax:
    content: protected ClaimsIdentity (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Serialize 된 데이터입니다."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Serialization에 대 한 컨텍스트입니다."
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: '#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> 클래스 지정된 된 클레임 및 지정 된 <xref:System.Security.Principal.IIdentity>.</xref:System.Security.Principal.IIdentity> 사용"
  remarks: "다음 표에서 <xref:System.Security.Claims.ClaimsIdentity>클래스</xref:System.Security.Claims.ClaimsIdentity> 의 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 값 |   |--------------|-----------|   | <xref:System.Security.Claims.ClaimsIdentity.Actor%2A>| 경우 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 값은 `identity.Actor` 속성, 그렇지 않으면 `null`. |   | <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>| `authenticationType` 매개 변수.</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 경우는 `authenticationType` 매개 변수는 `null` 또는 빈 문자열인 경우의 값은 `identity.AuthenticationType` (<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName>) 속성이 사용 됩니다. |   | <xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>| 경우 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 값은 `identity.BootStrapContext` 속성, 그렇지 않으면 `null`. |   | <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>| 초기화 된 `claims` 매개 변수.</xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> </xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> 경우 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 클레임을 `identity` 하 여 지정 된 하기 전에 새 인스턴스를 추가 `claims` 매개 변수입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>속성의 값에 따라 반환 될 <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>속성의 값입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.Label%2A>| 경우 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 값은 `identity.Label` 속성, 그렇지 않으면 `null`. |   | <xref:System.Security.Claims.ClaimsIdentity.Name%2A>| 경우 `identity` 에서 할당할 수 없으면 <xref:System.Security.Claims.ClaimsIdentity>, 않습니다 `null`, 있고는 <xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>하지 않은 속성에 `null`; 이름 클레임의 값을 사용 하 여 새 인스턴스에 추가 됩니다는 <xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>속성.</xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity> **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.Name%2A>속성의 값에 따라 반환 될는 <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>및 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>| 경우 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 값은 `identity.NameClaimType` 속성은 사용, 그렇지 않으면, <xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>사용 됩니다. |   | <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>| 경우 `identity` 에서 할당할 수 <xref:System.Security.Claims.ClaimsIdentity>의 값은 `identity.RoleClaimType` 속성은 사용 되 고, 그렇지 않으면 <xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>사용 됩니다. |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A>"
  syntax:
    content: public ClaimsIdentity (System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "새 클레임 id를 기반으로 사용할 id입니다."
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "클레임 id를 채울 클레임입니다."
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> 된 지정 된 인증 유형, 이름 클레임 유형 및 역할 클레임 유형입니다."
  remarks: "다음 표에서 <xref:System.Security.Claims.ClaimsIdentity>클래스</xref:System.Security.Claims.ClaimsIdentity> 의 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 값 |   |--------------|-----------|   | <xref:System.Security.Claims.ClaimsIdentity.Actor%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>| 값은 `authenticationType` 매개 변수.</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 경우는 `authenticationType` 매개 변수는 `null` 속성이로 설정 된 빈 문자열로 `null`. |   | <xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>| 빈 컬렉션입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>속성의 값에 따라 반환 될 <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>속성의 값입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.Label%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.Name%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.Name%2A>속성의 값에 따라 반환 될는 <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>및 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>| 값은 `nameType` 매개 변수.</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> 경우는 `nameType` 매개 변수는 null 또는 빈 문자열이 면 속성이 <xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>로 설정 됩니다. |   | <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>| 값은 `roleType` 매개 변수.</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> 경우는 `roleType` 매개 변수는 null 또는 빈 문자열인 경우는 속성이로 설정 되어 <xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>. |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>"
  syntax:
    content: public ClaimsIdentity (string authenticationType, string nameType, string roleType);
    parameters:
    - id: authenticationType
      type: System.String
      description: "사용 되는 인증 형식입니다."
    - id: nameType
      type: System.String
      description: "이름 클레임에 클레임 형식입니다."
    - id: roleType
      type: System.String
      description: "역할 클레임에 클레임 형식입니다."
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> 된 지정 된 클레임이, 인증 유형, 이름 클레임 유형 및 역할 클레임 유형입니다."
  remarks: "다음 표에서 <xref:System.Security.Claims.ClaimsIdentity>클래스</xref:System.Security.Claims.ClaimsIdentity> 의 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 값 |   |--------------|-----------|   | <xref:System.Security.Claims.ClaimsIdentity.Actor%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>| 값은 `authenticationType` 매개 변수.</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 경우는 `authenticationType` 매개 변수는 `null` 속성이로 설정 된 빈 문자열로 `null`. |   | <xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>| 초기화 된 `claims` 매개 변수입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>속성의 값에 따라 반환 될 <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>속성의 값입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.Label%2A>| `null`.|   | <xref:System.Security.Claims.ClaimsIdentity.Name%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.Name%2A>속성의 값에 따라 반환 될는 <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>및 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>| 값은 `nameType` 매개 변수.</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> 그러나 경우는 `nameType` 매개 변수는 `null` 빈 문자열이 면 속성이 <xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>로 설정 합니다. |   | <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>| 값은 `roleClaimType` 매개 변수.</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> 그러나 경우는 `roleClaimType` 매개 변수는 `null` 빈 문자열이 면 속성으로 설정 되어 <xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>. |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>"
  syntax:
    content: public ClaimsIdentity (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "클레임 id를 채울 클레임입니다."
    - id: authenticationType
      type: System.String
      description: "사용 되는 인증 형식입니다."
    - id: nameType
      type: System.String
      description: "이름 클레임에 클레임 형식입니다."
    - id: roleType
      type: System.String
      description: "역할 클레임에 클레임 형식입니다."
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  id: '#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> 클래스 지정 된 위치에서 <xref:System.Security.Principal.IIdentity>클레임 유형 지정 된 클레임이, 인증 유형, 이름 클레임 유형 및 역할을 사용 하 여.</xref:System.Security.Principal.IIdentity>"
  remarks: "다음 표에서 <xref:System.Security.Claims.ClaimsIdentity>클래스</xref:System.Security.Claims.ClaimsIdentity> 의 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 값 |   |--------------|-----------|   | <xref:System.Security.Claims.ClaimsIdentity.Actor%2A>| 경우 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 값은 `identity.Actor` 속성, 그렇지 않으면 `null`. |   | <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>| `authenticationType` 매개 변수.</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 경우는 `authenticationType` 매개 변수는 `null` 또는 빈 문자열인 경우의 값은 `identity.AuthenticationType` (<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName>) 속성이 사용 됩니다. |   | <xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>| 경우 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 값은 `identity.BootStrapContext` 속성, 그렇지 않으면 `null`. |   | <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>| 초기화 된 `claims` 매개 변수.</xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> </xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> 경우 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 클레임을 `identity` 하 여 지정 된 하기 전에 새 인스턴스를 추가 `claims` 매개 변수입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>| **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>속성의 값에 따라 반환 될 <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>속성의 값입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.Label%2A>| 경우 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 값은 `identity.Label` 속성, 그렇지 않으면 `null`. |   | <xref:System.Security.Claims.ClaimsIdentity.Name%2A>| 경우 `identity` 에서 할당할 수 없으면 <xref:System.Security.Claims.ClaimsIdentity>, 않습니다 `null`, 있고는 <xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>하지 않은 속성에 `null`; 이름 클레임의 값을 사용 하 여 새 인스턴스에 추가 됩니다는 <xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>속성.</xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity> **참고:** 에 액세스할 때 <xref:System.Security.Claims.ClaimsIdentity.Name%2A>속성의 값에 따라 반환 될는 <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>및 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션입니다. |   | <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>| 값은 `nameType` 매개 변수.</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> 그러나 경우의 값은 `nameType` 매개 변수는 `null` 또는 빈 문자열 및 `identity` <xref:System.Security.Claims.ClaimsIdentity>에서 할당할 수의 값은 `identity.NameClaimType` 속성은 사용, 그렇지 않으면, <xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>사용 됩니다. |   | <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>| 값은 `roleClaimType` 매개 변수.</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> </xref:System.Security.Claims.ClaimsIdentity> 그러나 경우의 값은 `roleClaimType` 매개 변수는 `null` 빈 문자열 및 id에서 할당할 수 없거나 <xref:System.Security.Claims.ClaimsIdentity>의 값은 `identity.RoleClaimType` 속성은 사용 되 고, 그렇지 않으면 <xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>사용 됩니다. |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType> </xref:System.Security.Claims.ClaimsIdentity>"
  syntax:
    content: public ClaimsIdentity (System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "새 클레임 id를 기반으로 사용할 id입니다."
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "새 클레임 id를 채울 클레임입니다."
    - id: authenticationType
      type: System.String
      description: "사용 되는 인증 형식입니다."
    - id: nameType
      type: System.String
      description: "이름 클레임에 클레임 형식입니다."
    - id: roleType
      type: System.String
      description: "역할 클레임에 클레임 형식입니다."
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Actor
  id: Actor
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Actor
  nameWithType: ClaimsIdentity.Actor
  fullName: System.Security.Claims.ClaimsIdentity.Actor
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "위임 권한 부여 된 해당 발신자의 id를 가져오거나 설정 합니다."
  remarks: "응용 프로그램에 재귀적 행위자 속성을 검사 하 여 어 졌으 며 현재 호출 하는 위임 체인을 액세스할 수 있습니다. 대신 호출 위임 받을 토큰을 통해 액세스할 수는 <xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>속성.</xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>"
  syntax:
    content: public System.Security.Claims.ClaimsIdentity Actor { get; set; }
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "위임 권한 부여 된 해당 발신자 합니다."
  overload: System.Security.Claims.ClaimsIdentity.Actor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "현재 인스턴스에 속성을 설정 하려고 발생 합니다."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  id: AddClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: AddClaim(Claim)
  nameWithType: ClaimsIdentity.AddClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaim(Claim)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "이 단일 클레임에 클레임 id를 추가 합니다."
  remarks: "클레임 유효성을 검사 하 고이 클레임 id에 주체과 다른 경우는 <xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName>메서드를 호출 하는 올바른 주체를 사용 하 여 새 클레임을 만들려면 매개 변수로이 클레임 id입니다.</xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName>       이 메서드는는 `SecurityCritical` 엔터티 id에 대 한 클레임을 추가할 수는 컨트롤에 적용 된 특성입니다. 추가 파이프 아래로 권한 부여 결정을 따라에 있는 클레임에는 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션.</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>"
  syntax:
    content: public virtual void AddClaim (System.Security.Claims.Claim claim);
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "추가할 클레임입니다."
  overload: System.Security.Claims.ClaimsIdentity.AddClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>claim</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: AddClaims(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.AddClaims(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaims(IEnumerable<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "이 대 한 클레임 목록을 클레임 id를 추가 합니다."
  remarks: "각 클레임 유효성을 검사 하 고이 클레임 id에 주체과 다른 경우는 <xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName>메서드를 호출 하는 올바른 주체를 사용 하 여 새 클레임을 만들려면 매개 변수로이 클레임 id입니다.</xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName>       이 메서드는는 `SecurityCritical` 엔터티 id에 대 한 클레임을 추가할 수는 컨트롤에 적용 된 특성입니다. 추가 파이프 아래로 권한 부여 결정을 따라에 있는 클레임에는 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션.</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>"
  syntax:
    content: public virtual void AddClaims (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "추가할 클레임입니다."
  overload: System.Security.Claims.ClaimsIdentity.AddClaims*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>claims</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType
  id: AuthenticationType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: AuthenticationType
  nameWithType: ClaimsIdentity.AuthenticationType
  fullName: System.Security.Claims.ClaimsIdentity.AuthenticationType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "인증 유형을 가져옵니다."
  remarks: "<xref:System.Security.Claims.AuthenticationTypes>클래스</xref:System.Security.Claims.AuthenticationTypes> 에 정의 된 값 중 하나에 일반적으로"
  syntax:
    content: public virtual string AuthenticationType { get; }
    return:
      type: System.String
      description: "인증 유형입니다."
  overload: System.Security.Claims.ClaimsIdentity.AuthenticationType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext
  id: BootstrapContext
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: BootstrapContext
  nameWithType: ClaimsIdentity.BootstrapContext
  fullName: System.Security.Claims.ClaimsIdentity.BootstrapContext
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "만드는 데 사용 하는 토큰을 가져오거나 설정 합니다.이 클레임 id입니다."
  remarks: "The underlying object is an instance of the <xref:System.IdentityModel.Tokens.BootstrapContext?displayProperty=fullName> class.  \n  \n Set the `saveBootstrapContext` attribute on either the [\\&lt;identityConfiguration\\&gt;](../Topic/%3CidentityConfiguration%3E.md) or the [\\&lt;securityTokenHandlerConfiguration\\&gt;](../Topic/%3CsecurityTokenHandlerConfiguration%3E.md) element in a configuration file to specify whether the token used to generate the <xref:System.Security.Claims.ClaimsIdentity> should be preserved in the BootstrapContext property.  \n  \n If the BootstrapContext property is not `null`, applications can access the original token and the claims it produced through the properties and methods of the <xref:System.IdentityModel.Tokens.BootstrapContext?displayProperty=fullName> class."
  syntax:
    content: public object BootstrapContext { get; set; }
    return:
      type: System.Object
      description: "부트스트랩 컨텍스트입니다."
  overload: System.Security.Claims.ClaimsIdentity.BootstrapContext*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Claims
  id: Claims
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Claims
  nameWithType: ClaimsIdentity.Claims
  fullName: System.Security.Claims.ClaimsIdentity.Claims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "연결 된 클레임을 가져옵니다.이 클레임 id입니다."
  remarks: "컬렉션 항목은 포함 될 수 있습니다 `null`합니다.       기본적으로 클레임 컬렉션에 포함 된 클레임에 <xref:System.Security.Claims.ClaimsIdentity>.</xref:System.Security.Claims.ClaimsIdentity> 나타내는 엔터티를 설명 합니다. 클레임은 권한을 갖는 엔터티 및 속성에 설명 하 고 인증 및 권한 부여에 대 한 결정을 내리는 응용 프로그램에서 검사할 수 있습니다.      > [!NOTE] >는 <xref:System.Security.Claims.ClaimsPrincipal>클래스에는 <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>속성 이름도.</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> </xref:System.Security.Claims.ClaimsPrincipal> 대부분의 경우 사용자의 클레임을 통해 액세스 해야는 <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName>컬렉션 대신 클레임 컬렉션을 통해.</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName> 개별 클레임에 액세스 해야 합니다 <xref:System.Security.Claims.ClaimsIdentity>이상 보안 주체가 포함 하는 경우에만 <xref:System.Security.Claims.ClaimsIdentity>를 평가 하거나 특정 id를 수정 해야 하 고.</xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity>"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "연결 된 클레임 컬렉션을이 클레임 id입니다."
  overload: System.Security.Claims.ClaimsIdentity.Claims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Clone
  id: Clone
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Clone()
  nameWithType: ClaimsIdentity.Clone()
  fullName: System.Security.Claims.ClaimsIdentity.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "새 반환 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> 에서 복사한이 클레임 id입니다."
  syntax:
    content: public virtual System.Security.Claims.ClaimsIdentity Clone ();
    parameters: []
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "현재 인스턴스의 복사본입니다."
  overload: System.Security.Claims.ClaimsIdentity.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  id: CreateClaim(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: CreateClaim(BinaryReader)
  nameWithType: ClaimsIdentity.CreateClaim(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.CreateClaim(BinaryReader)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual System.Security.Claims.Claim CreateClaim (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "추가할 수 있습니다."
    return:
      type: System.Security.Claims.Claim
      description: "추가할 수 있습니다."
  overload: System.Security.Claims.ClaimsIdentity.CreateClaim*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: CustomSerializationData
  nameWithType: ClaimsIdentity.CustomSerializationData
  fullName: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    return:
      type: System.Byte[]
      description: "추가할 수 있습니다."
  overload: System.Security.Claims.ClaimsIdentity.CustomSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  id: DefaultIssuer
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: DefaultIssuer
  nameWithType: ClaimsIdentity.DefaultIssuer
  fullName: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "기본 발급자; &quot;LOCAL AUTHORITY&quot;입니다."
  syntax:
    content: public const string DefaultIssuer;
    return:
      type: System.String
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  id: DefaultNameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: DefaultNameClaimType
  nameWithType: ClaimsIdentity.DefaultNameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "기본 이름은 클레임 유형입니다. <xref href=&quot;System.Security.Claims.ClaimTypes.Name&quot;></xref>."
  syntax:
    content: public const string DefaultNameClaimType;
    return:
      type: System.String
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  id: DefaultRoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: DefaultRoleClaimType
  nameWithType: ClaimsIdentity.DefaultRoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "기본 역할 클레임 유형입니다. <xref href=&quot;System.Security.Claims.ClaimTypes.Role&quot;></xref>."
  syntax:
    content: public const string DefaultRoleClaimType;
    return:
      type: System.String
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  id: FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "지정된 된 조건자와 일치 하는 클레임을 모두 검색 합니다."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "일치 하는 논리를 수행 하는 함수입니다."
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "일치 하는 클레임입니다. 목록에는 읽기 전용입니다."
  overload: System.Security.Claims.ClaimsIdentity.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  id: FindAll(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindAll(String)
  nameWithType: ClaimsIdentity.FindAll(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "지정 된 클레임 형식을 갖는 클레임을 모두 검색 합니다."
  remarks: "서 수에 맞는 대/소문자를 사용 하는 비교를 수행 `type`합니다."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (string type);
    parameters:
    - id: type
      type: System.String
      description: "클레임와 일치 시킬 클레임 형식입니다."
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "일치 하는 클레임입니다. 목록에는 읽기 전용입니다."
  overload: System.Security.Claims.ClaimsIdentity.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  id: FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "지정된 된 조건자에 일치 하는 첫 번째 클레임을 검색 합니다."
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "일치 하는 논리를 수행 하는 함수입니다."
    return:
      type: System.Security.Claims.Claim
      description: "첫 번째 일치 하는 클레임이 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 일치 항목이 없는 경우."
  overload: System.Security.Claims.ClaimsIdentity.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  id: FindFirst(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindFirst(String)
  nameWithType: ClaimsIdentity.FindFirst(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "지정 된 클레임 유형으로 첫 번째 클레임을 검색합니다."
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (string type);
    parameters:
    - id: type
      type: System.String
      description: "일치 시킬 클레임 형식입니다."
    return:
      type: System.Security.Claims.Claim
      description: "첫 번째 일치 하는 클레임이 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 일치 항목이 없는 경우."
  overload: System.Security.Claims.ClaimsIdentity.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "채웁니다는 <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> 현재 직렬화 하는 데 필요한 데이터로 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> 개체입니다."
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "데이터로 채울 개체입니다."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "이 serialization에 대 한 대상입니다. Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Claims.ClaimsIdentity.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  id: HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsIdentity.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Id가 지정 된 조건자와 일치 하는 클레임을 클레임이 있는지 여부를 결정 합니다."
  syntax:
    content: public virtual bool HasClaim (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "일치 하는 논리를 수행 하는 함수입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>일치 하는 클레임이 있으면; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Claims.ClaimsIdentity.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  id: HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: HasClaim(String,String)
  nameWithType: ClaimsIdentity.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Id가 클레임 형식 및 값 지정 된 클레임을 클레임이 있는지 여부를 결정 합니다."
  remarks: "확인 하지 않습니다는 <xref:System.Security.Claims.Claim.Issuer%2A>또는 <xref:System.Security.Claims.Claim.OriginalIssuer%2A>속성.</xref:System.Security.Claims.Claim.OriginalIssuer%2A> </xref:System.Security.Claims.Claim.Issuer%2A> 대/소문자 구분 value;에 서 수를 사용 하는 비교를 수행 형식에 맞는 사례입니다."
  syntax:
    content: public virtual bool HasClaim (string type, string value);
    parameters:
    - id: type
      type: System.String
      description: "일치 시킬 클레임의 형식입니다."
    - id: value
      type: System.String
      description: "일치 시킬 클레임의 값입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>일치 하는 항목이 있으면; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Claims.ClaimsIdentity.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**.       -or-       <code>value</code> is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  id: IsAuthenticated
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: ClaimsIdentity.IsAuthenticated
  fullName: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Id가 인증 되었는지 여부를 나타내는 값을 가져옵니다."
  remarks: '`true`경우는 <xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>속성은 `null` 또는 빈 문자열입니다.</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>'
  syntax:
    content: public virtual bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>id가 인증 된 경우 그렇지 않으면 **false**합니다."
  overload: System.Security.Claims.ClaimsIdentity.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Label
  id: Label
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Label
  nameWithType: ClaimsIdentity.Label
  fullName: System.Security.Claims.ClaimsIdentity.Label
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "이 클레임 id에 대 한 레이블을 가져오거나 설정 합니다."
  syntax:
    content: public string Label { get; set; }
    return:
      type: System.String
      description: "레이블입니다."
  overload: System.Security.Claims.ClaimsIdentity.Label*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Name
  id: Name
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Name
  nameWithType: ClaimsIdentity.Name
  fullName: System.Security.Claims.ClaimsIdentity.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "가져옵니다이의 이름을 클레임 id입니다."
  remarks: "반환 값 이름과 일치 하는 형식 가진 첫 번째 클레임을 클레임 유형에 설정 된 <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>속성.</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> 이름 클레임 유형이 일치 하는 없는 클레임을 반환 `null`합니다."
  syntax:
    content: public virtual string Name { get; }
    return:
      type: System.String
      description: "이름 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Claims.ClaimsIdentity.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType
  id: NameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: NameClaimType
  nameWithType: ClaimsIdentity.NameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.NameClaimType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "에 대 한 값을 제공 하는 클레임 결정 하는 데 사용 되는 클레임 형식을 가져옵니다는 <xref:System.Security.Claims.ClaimsIdentity.Name*>속성의이 클레임 id입니다.</xref:System.Security.Claims.ClaimsIdentity.Name*>"
  remarks: "NameClaimType 속성의 클레임 유형을 지정 (<xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>)이이 id에 대 한 이름을 제공 하는 데 사용 되는.</xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName> 이름을 통해 액세스 되는 <xref:System.Security.Claims.ClaimsIdentity.Name%2A>속성.</xref:System.Security.Claims.ClaimsIdentity.Name%2A>       이 속성은 생성자에서 설정 됩니다."
  syntax:
    content: public string NameClaimType { get; }
    return:
      type: System.String
      description: "이름 클레임 형식입니다."
  overload: System.Security.Claims.ClaimsIdentity.NameClaimType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  id: RemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: RemoveClaim(Claim)
  nameWithType: ClaimsIdentity.RemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim(Claim)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "클레임 id에서 클레임을 제거 하려고 시도 합니다."
  remarks: "Id가 소유 하지 않은 때문에 클레임을 제거할 수 없습니다 것 같습니다. 예를 들어이 경우 보안 주체가 소유 하는 역할 클레임에 대 한 것입니다. 와 달리는 <xref:System.Security.Claims.ClaimsIdentity.TryRemoveClaim%2A>클레임 제거 되었는지 여부를 나타내는 부울 값을 반환 하는 메서드를 RemoveClaim 경우 예외를 throw 클레임을 제거할 수 없습니다 개체 참조가 일치 하는 지정 된 클레임 (<xref:System.Object.ReferenceEquals%2A>).</xref:System.Object.ReferenceEquals%2A> </xref:System.Security.Claims.ClaimsIdentity.TryRemoveClaim%2A>       이 메서드는는 `SecurityCritical` 엔터티 id에서 클레임을 제거할 수는 컨트롤에 적용 된 특성입니다. 추가 파이프 아래로 권한 부여 결정을 따라에 있는 클레임에는 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션.</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>"
  syntax:
    content: public virtual void RemoveClaim (System.Security.Claims.Claim claim);
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "제거할 클레임입니다."
  overload: System.Security.Claims.ClaimsIdentity.RemoveClaim*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "클레임을 제거할 수 없습니다."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType
  id: RoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: RoleClaimType
  nameWithType: ClaimsIdentity.RoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.RoleClaimType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "이 클레임 중.NET Framework 역할 클레임 id에는 클레임 형식을 가져옵니다."
  remarks: "역할 클레임 유형은 클레임 유형 (<xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>)에 대 한이 id를 평가할 때 사용 되는 <xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName>메서드.</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName> </xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName> <xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName>메서드는 현재 보안 주체가 지정된 된 역할에 적용 되는지 확인 합니다.</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName> 클레임 기반 모델은 주 서버에서 클레임을 사용 하려면이 검사를 확장 합니다. A <xref:System.Security.Claims.ClaimsPrincipal>개체 하나 이상 포함 될 수 <xref:System.Security.Claims.ClaimsIdentity>개체 및 각 id 개체 여러 개 포함할 수 <xref:System.Security.Claims.Claim>개체.</xref:System.Security.Claims.Claim> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsPrincipal> RoleClaimType 속성이 평가할 때 역할에 대 한 값을 제공 하는 데 사용 해야 하는 클레임의 클레임 유형을 지정 <xref:System.Security.Claims.ClaimsIdentity>개체입니다.</xref:System.Security.Claims.ClaimsIdentity> 속성은 생성자에 의해 설정 됩니다. 공통 값은 <xref:System.Security.Claims.ClaimTypes.Role?displayProperty=fullName>.</xref:System.Security.Claims.ClaimTypes.Role?displayProperty=fullName>"
  syntax:
    content: public string RoleClaimType { get; }
    return:
      type: System.String
      description: "역할 클레임 유형입니다."
  overload: System.Security.Claims.ClaimsIdentity.RoleClaimType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  id: TryRemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: TryRemoveClaim(Claim)
  nameWithType: ClaimsIdentity.TryRemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(Claim)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "클레임 id에서 클레임을 제거 하려고 시도 합니다."
  remarks: "Id가 소유 하지 않은 때문에 클레임을 제거할 수 없습니다 것 같습니다. 예를 들어이 경우 보안 주체가 소유 하는 역할 클레임에 대 한 것입니다.       지정 된 클레임 개체 참조 일치 (<xref:System.Object.ReferenceEquals%2A>).</xref:System.Object.ReferenceEquals%2A>       이 메서드는는 `SecurityCritical` 엔터티 id에서 클레임을 제거할 수는 컨트롤에 적용 된 특성입니다. 추가 파이프 아래로 권한 부여 결정을 따라에 있는 클레임에는 <xref:System.Security.Claims.ClaimsIdentity.Claims%2A>컬렉션.</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>"
  syntax:
    content: public virtual bool TryRemoveClaim (System.Security.Claims.Claim claim);
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "제거할 클레임입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>클레임은 성공적으로 제거 되었으면; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Claims.ClaimsIdentity.TryRemoveClaim*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public virtual void WriteTo (System.IO.BinaryWriter writer);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "추가할 수 있습니다."
  overload: System.Security.Claims.ClaimsIdentity.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual void WriteTo (System.IO.BinaryWriter writer, byte[] userData);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "추가할 수 있습니다."
    - id: userData
      type: System.Byte[]
      description: "추가할 수 있습니다."
  overload: System.Security.Claims.ClaimsIdentity.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Claims.ClaimsIdentity.#ctor
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity()
  nameWithType: ClaimsIdentity.ClaimsIdentity()
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity()
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(BinaryReader)
  nameWithType: ClaimsIdentity.ClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(BinaryReader)
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(SerializationInfo)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(ClaimsIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity)
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IEnumerable<Claim>,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String,String,String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
- uid: System.Security.Claims.ClaimsIdentity.Actor
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Actor
  nameWithType: ClaimsIdentity.Actor
  fullName: System.Security.Claims.ClaimsIdentity.Actor
- uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaim(Claim)
  nameWithType: ClaimsIdentity.AddClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaim(Claim)
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaims(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.AddClaims(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaims(IEnumerable<Claim>)
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: ClaimsIdentity.AuthenticationType
  fullName: System.Security.Claims.ClaimsIdentity.AuthenticationType
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: BootstrapContext
  nameWithType: ClaimsIdentity.BootstrapContext
  fullName: System.Security.Claims.ClaimsIdentity.BootstrapContext
- uid: System.Security.Claims.ClaimsIdentity.Claims
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Claims
  nameWithType: ClaimsIdentity.Claims
  fullName: System.Security.Claims.ClaimsIdentity.Claims
- uid: System.Security.Claims.ClaimsIdentity.Clone
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Clone()
  nameWithType: ClaimsIdentity.Clone()
  fullName: System.Security.Claims.ClaimsIdentity.Clone()
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CreateClaim(BinaryReader)
  nameWithType: ClaimsIdentity.CreateClaim(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.CreateClaim(BinaryReader)
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsIdentity.CustomSerializationData
  fullName: System.Security.Claims.ClaimsIdentity.CustomSerializationData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultIssuer
  nameWithType: ClaimsIdentity.DefaultIssuer
  fullName: System.Security.Claims.ClaimsIdentity.DefaultIssuer
- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultNameClaimType
  nameWithType: ClaimsIdentity.DefaultNameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
- uid: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultRoleClaimType
  nameWithType: ClaimsIdentity.DefaultRoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(Predicate<Claim>)
- uid: System.Predicate{System.Security.Claims.Claim}
  parent: System
  isExternal: true
  name: Predicate<Claim>
  nameWithType: Predicate<Claim>
  fullName: System.Predicate<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindAll(String)
  nameWithType: ClaimsIdentity.FindAll(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(String)
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(Predicate<Claim>)
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindFirst(String)
  nameWithType: ClaimsIdentity.FindFirst(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(String)
- uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsIdentity.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(Predicate<Claim>)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: HasClaim(String,String)
  nameWithType: ClaimsIdentity.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(String,String)
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: ClaimsIdentity.IsAuthenticated
  fullName: System.Security.Claims.ClaimsIdentity.IsAuthenticated
- uid: System.Security.Claims.ClaimsIdentity.Label
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Label
  nameWithType: ClaimsIdentity.Label
  fullName: System.Security.Claims.ClaimsIdentity.Label
- uid: System.Security.Claims.ClaimsIdentity.Name
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Name
  nameWithType: ClaimsIdentity.Name
  fullName: System.Security.Claims.ClaimsIdentity.Name
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: NameClaimType
  nameWithType: ClaimsIdentity.NameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.NameClaimType
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RemoveClaim(Claim)
  nameWithType: ClaimsIdentity.RemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim(Claim)
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RoleClaimType
  nameWithType: ClaimsIdentity.RoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.RoleClaimType
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: TryRemoveClaim(Claim)
  nameWithType: ClaimsIdentity.TryRemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(Claim)
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
- uid: System.Security.Claims.ClaimsIdentity.#ctor*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity.ClaimsIdentity
- uid: System.Security.Claims.ClaimsIdentity.Actor*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Actor
  nameWithType: ClaimsIdentity.Actor
- uid: System.Security.Claims.ClaimsIdentity.AddClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaim
  nameWithType: ClaimsIdentity.AddClaim
- uid: System.Security.Claims.ClaimsIdentity.AddClaims*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaims
  nameWithType: ClaimsIdentity.AddClaims
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: ClaimsIdentity.AuthenticationType
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: BootstrapContext
  nameWithType: ClaimsIdentity.BootstrapContext
- uid: System.Security.Claims.ClaimsIdentity.Claims*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Claims
  nameWithType: ClaimsIdentity.Claims
- uid: System.Security.Claims.ClaimsIdentity.Clone*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Clone
  nameWithType: ClaimsIdentity.Clone
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CreateClaim
  nameWithType: ClaimsIdentity.CreateClaim
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsIdentity.CustomSerializationData
- uid: System.Security.Claims.ClaimsIdentity.FindAll*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindAll
  nameWithType: ClaimsIdentity.FindAll
- uid: System.Security.Claims.ClaimsIdentity.FindFirst*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindFirst
  nameWithType: ClaimsIdentity.FindFirst
- uid: System.Security.Claims.ClaimsIdentity.GetObjectData*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: GetObjectData
  nameWithType: ClaimsIdentity.GetObjectData
- uid: System.Security.Claims.ClaimsIdentity.HasClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: HasClaim
  nameWithType: ClaimsIdentity.HasClaim
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: ClaimsIdentity.IsAuthenticated
- uid: System.Security.Claims.ClaimsIdentity.Label*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Label
  nameWithType: ClaimsIdentity.Label
- uid: System.Security.Claims.ClaimsIdentity.Name*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Name
  nameWithType: ClaimsIdentity.Name
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: NameClaimType
  nameWithType: ClaimsIdentity.NameClaimType
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RemoveClaim
  nameWithType: ClaimsIdentity.RemoveClaim
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RoleClaimType
  nameWithType: ClaimsIdentity.RoleClaimType
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: TryRemoveClaim
  nameWithType: ClaimsIdentity.TryRemoveClaim
- uid: System.Security.Claims.ClaimsIdentity.WriteTo*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: WriteTo
  nameWithType: ClaimsIdentity.WriteTo
