### YamlMime:ManagedReference
items:
- uid: System.Activities.Statements.CompensableActivity
  id: CompensableActivity
  children:
  - System.Activities.Statements.CompensableActivity.#ctor
  - System.Activities.Statements.CompensableActivity.Body
  - System.Activities.Statements.CompensableActivity.CacheMetadata(System.Activities.NativeActivityMetadata)
  - System.Activities.Statements.CompensableActivity.Cancel(System.Activities.NativeActivityContext)
  - System.Activities.Statements.CompensableActivity.CancellationHandler
  - System.Activities.Statements.CompensableActivity.CanInduceIdle
  - System.Activities.Statements.CompensableActivity.CompensationHandler
  - System.Activities.Statements.CompensableActivity.ConfirmationHandler
  - System.Activities.Statements.CompensableActivity.Execute(System.Activities.NativeActivityContext)
  - System.Activities.Statements.CompensableActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  - System.Activities.Statements.CompensableActivity.Variables
  langs:
  - csharp
  name: CompensableActivity
  nameWithType: CompensableActivity
  fullName: System.Activities.Statements.CompensableActivity
  type: Class
  summary: "활동의 자식 활동의 보정을 지원입니다."
  remarks: "CompensableActivity는 개발자가 지정할 수 있습니다는 <xref:System.Activities.Statements.CompensableActivity.Body%2A>가 핵심 비즈니스 논리를 수행 하는 장기 실행 작업을 정의 하는 활동.</xref:System.Activities.Statements.CompensableActivity.Body%2A> 또한 개발자를가 필요에 따라 <xref:System.Activities.Statements.CompensableActivity.Body%2A>.</xref:System.Activities.Statements.CompensableActivity.Body%2A> 성공적으로 완료 또는 오류 발생 시 적절 한 비즈니스 논리를 예약 하는 보정 및 확인 작업을 지정할 수 있습니다. CompensableActivity의 보정 및 확인 사용 하 여 호출 되는 <xref:System.Activities.Statements.CompensationToken>CompensableActivity에서 반환 된.</xref:System.Activities.Statements.CompensationToken> <xref:System.Activities.Statements.CompensationToken><xref:System.Activities.WorkflowElement%601.Result%2A>인수는 CompensableActivity 활동의 <xref:System.Activities.Statements.CompensableActivity.Body%2A>.</xref:System.Activities.Statements.CompensableActivity.Body%2A> 성공적으로 완료 한 후</xref:System.Activities.WorkflowElement%601.Result%2A> 반환 된 형식화 된 불투명 개체</xref:System.Activities.Statements.CompensationToken> 이 <xref:System.Activities.Statements.CompensationToken>에서 사용 되는 <xref:System.Activities.Statements.Confirm>및 <xref:System.Activities.Statements.Compensate>CompensableActivity의 확인 및 보정을 명시적으로 호출 하는 활동.</xref:System.Activities.Statements.Compensate> </xref:System.Activities.Statements.Confirm> </xref:System.Activities.Statements.CompensationToken> CompensableActivity는 워크플로에 중첩 된 계층 구조로 구성 될 수 있습니다. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][보정 프로그래밍 모델](http://msdn.microsoft.com/en-us/29e5442c-1df7-401d-a6ca-746e617cbf9f)합니다."
  syntax:
    content: >-
      [System.Windows.Markup.ContentProperty("Body")]

      public sealed class CompensableActivity : System.Activities.NativeActivity<System.Activities.Statements.CompensationToken>
  inheritance:
  - System.Object
  - System.Activities.Activity
  - System.Activities.ActivityWithResult
  - System.Activities.Activity`1
  - System.Activities.NativeActivity`1
  implements: []
  inheritedMembers:
  - System.Activities.Activity.CacheId
  - System.Activities.Activity.Constraints
  - System.Activities.Activity.DisplayName
  - System.Activities.Activity.Id
  - System.Activities.Activity.ShouldSerializeDisplayName
  - System.Activities.Activity.ToString
  - System.Activities.Activity`1.FromValue(`0)
  - System.Activities.Activity`1.FromVariable(System.Activities.Variable)
  - System.Activities.Activity`1.FromVariable(System.Activities.Variable{`0})
  - System.Activities.Activity`1.op_Implicit(`0)
  - System.Activities.Activity`1.op_Implicit(System.Activities.Variable)
  - System.Activities.Activity`1.op_Implicit(System.Activities.Variable{`0})
  - System.Activities.Activity`1.Result
  - System.Activities.ActivityWithResult.ResultType
  - System.Activities.NativeActivity`1.Abort(System.Activities.NativeActivityAbortContext)
  - System.Activities.NativeActivity`1.CacheMetadata(System.Activities.ActivityMetadata)
  - System.Activities.NativeActivity`1.Implementation
  - System.Activities.NativeActivity`1.ImplementationVersion
  - System.Activities.NativeActivity`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)
  - System.Activities.NativeActivity`1.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)
  platform:
  - net462
- uid: System.Activities.Statements.CompensableActivity.#ctor
  id: '#ctor'
  parent: System.Activities.Statements.CompensableActivity
  langs:
  - csharp
  name: CompensableActivity()
  nameWithType: CompensableActivity.CompensableActivity()
  fullName: System.Activities.Statements.CompensableActivity.CompensableActivity()
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Activities.Statements.CompensableActivity&quot;> </xref> 클래스입니다."
  syntax:
    content: public CompensableActivity ();
    parameters: []
  overload: System.Activities.Statements.CompensableActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.CompensableActivity.Body
  id: Body
  parent: System.Activities.Statements.CompensableActivity
  langs:
  - csharp
  name: Body
  nameWithType: CompensableActivity.Body
  fullName: System.Activities.Statements.CompensableActivity.Body
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "활동을 가져오거나 때 예약 되는 <xref href=&quot;System.Activities.Statements.CompensableActivity&quot;> </xref> 실행 합니다."
  remarks: "이 속성은 런타임에 읽기 전용입니다. 런타임에 값이 설정 되는 경우는 <xref:System.InvalidOperationException>throw 됩니다.</xref:System.InvalidOperationException>"
  syntax:
    content: public System.Activities.Activity Body { get; set; }
    return:
      type: System.Activities.Activity
      description: "활동을 예약 하는 경우는 <xref href=&quot;System.Activities.Statements.CompensableActivity&quot;> </xref> 실행 합니다."
  overload: System.Activities.Statements.CompensableActivity.Body*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.CompensableActivity.CacheMetadata(System.Activities.NativeActivityMetadata)
  id: CacheMetadata(System.Activities.NativeActivityMetadata)
  parent: System.Activities.Statements.CompensableActivity
  langs:
  - csharp
  name: CacheMetadata(NativeActivityMetadata)
  nameWithType: CompensableActivity.CacheMetadata(NativeActivityMetadata)
  fullName: System.Activities.Statements.CompensableActivity.CacheMetadata(NativeActivityMetadata)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  syntax:
    content: protected override void CacheMetadata (System.Activities.NativeActivityMetadata metadata);
    parameters:
    - id: metadata
      type: System.Activities.NativeActivityMetadata
      description: "추가할 수 있습니다."
  overload: System.Activities.Statements.CompensableActivity.CacheMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.CompensableActivity.Cancel(System.Activities.NativeActivityContext)
  id: Cancel(System.Activities.NativeActivityContext)
  parent: System.Activities.Statements.CompensableActivity
  langs:
  - csharp
  name: Cancel(NativeActivityContext)
  nameWithType: CompensableActivity.Cancel(NativeActivityContext)
  fullName: System.Activities.Statements.CompensableActivity.Cancel(NativeActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  syntax:
    content: protected override void Cancel (System.Activities.NativeActivityContext context);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "추가할 수 있습니다."
  overload: System.Activities.Statements.CompensableActivity.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.CompensableActivity.CancellationHandler
  id: CancellationHandler
  parent: System.Activities.Statements.CompensableActivity
  langs:
  - csharp
  name: CancellationHandler
  nameWithType: CompensableActivity.CancellationHandler
  fullName: System.Activities.Statements.CompensableActivity.CancellationHandler
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "작업을 취소할 때 예약 되는 활동을 가져오거나 설정 합니다."
  remarks: "CancellationHandler는 사용 하 여는 <xref:System.Activities.Statements.CompensableActivity.Body%2A> <xref:System.Activities.Statements.CompensableActivity>.</xref:System.Activities.Statements.CompensableActivity> </xref:System.Activities.Statements.CompensableActivity.Body%2A> 에 대 한 사용자 지정 취소 논리를 지정할 수 있습니다.       이 속성은 런타임에 읽기 전용입니다. 런타임에 값이 설정 되는 경우는 <xref:System.InvalidOperationException>throw 됩니다.</xref:System.InvalidOperationException>"
  syntax:
    content: public System.Activities.Activity CancellationHandler { get; set; }
    return:
      type: System.Activities.Activity
      description: "작업을 취소할 때 예약 되는 활동입니다."
  overload: System.Activities.Statements.CompensableActivity.CancellationHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.CompensableActivity.CanInduceIdle
  id: CanInduceIdle
  parent: System.Activities.Statements.CompensableActivity
  langs:
  - csharp
  name: CanInduceIdle
  nameWithType: CompensableActivity.CanInduceIdle
  fullName: System.Activities.Statements.CompensableActivity.CanInduceIdle
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  syntax:
    content: protected override bool CanInduceIdle { get; }
    return:
      type: System.Boolean
      description: "추가할 수 있습니다."
  overload: System.Activities.Statements.CompensableActivity.CanInduceIdle*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.CompensableActivity.CompensationHandler
  id: CompensationHandler
  parent: System.Activities.Statements.CompensableActivity
  langs:
  - csharp
  name: CompensationHandler
  nameWithType: CompensableActivity.CompensationHandler
  fullName: System.Activities.Statements.CompensableActivity.CompensationHandler
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "에 대해 보정을 수행할 때 예약 되는 활동을 가져오거나 설정 합니다.는 <xref href=&quot;System.Activities.Statements.CompensableActivity&quot;> </xref>합니다."
  remarks: "CompensationHandler는 사용 하 여는 <xref:System.Activities.Statements.CompensableActivity.Body%2A> <xref:System.Activities.Statements.CompensableActivity>.</xref:System.Activities.Statements.CompensableActivity> </xref:System.Activities.Statements.CompensableActivity.Body%2A> 에 대 한 사용자 지정 보정 논리를 지정할 수 있습니다.       이 속성은 런타임에 읽기 전용입니다. 런타임에 값이 설정 되는 경우는 <xref:System.InvalidOperationException>throw 됩니다.</xref:System.InvalidOperationException>"
  syntax:
    content: public System.Activities.Activity CompensationHandler { get; set; }
    return:
      type: System.Activities.Activity
      description: "활동에 보정을 수행할 때 예약 되는 <xref href=&quot;System.Activities.Statements.CompensableActivity&quot;> </xref>합니다."
  overload: System.Activities.Statements.CompensableActivity.CompensationHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.CompensableActivity.ConfirmationHandler
  id: ConfirmationHandler
  parent: System.Activities.Statements.CompensableActivity
  langs:
  - csharp
  name: ConfirmationHandler
  nameWithType: CompensableActivity.ConfirmationHandler
  fullName: System.Activities.Statements.CompensableActivity.ConfirmationHandler
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "이 대 한 확인을 수행할 때 예약 된 활동을 가져오거나 설정 합니다. <xref href=&quot;System.Activities.Statements.CompensableActivity&quot;> </xref>합니다."
  remarks: "ConfirmationHandler는 사용 하 여는 <xref:System.Activities.Statements.CompensableActivity.Body%2A> <xref:System.Activities.Statements.CompensableActivity>.</xref:System.Activities.Statements.CompensableActivity> </xref:System.Activities.Statements.CompensableActivity.Body%2A> 에 대 한 사용자 지정 확인 논리를 지정할 수 있습니다.       이 속성은 런타임에 읽기 전용입니다. 런타임에 값이 설정 되는 경우는 <xref:System.InvalidOperationException>throw 됩니다.</xref:System.InvalidOperationException>"
  syntax:
    content: public System.Activities.Activity ConfirmationHandler { get; set; }
    return:
      type: System.Activities.Activity
      description: "이 대 한 확인을 수행할 때 예약 된 활동 <xref href=&quot;System.Activities.Statements.CompensableActivity&quot;> </xref>합니다."
  overload: System.Activities.Statements.CompensableActivity.ConfirmationHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.CompensableActivity.Execute(System.Activities.NativeActivityContext)
  id: Execute(System.Activities.NativeActivityContext)
  parent: System.Activities.Statements.CompensableActivity
  langs:
  - csharp
  name: Execute(NativeActivityContext)
  nameWithType: CompensableActivity.Execute(NativeActivityContext)
  fullName: System.Activities.Statements.CompensableActivity.Execute(NativeActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  syntax:
    content: protected override void Execute (System.Activities.NativeActivityContext context);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "추가할 수 있습니다."
  overload: System.Activities.Statements.CompensableActivity.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.CompensableActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  id: OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  parent: System.Activities.Statements.CompensableActivity
  langs:
  - csharp
  name: OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  nameWithType: CompensableActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  fullName: System.Activities.Statements.CompensableActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  syntax:
    content: protected override void OnCreateDynamicUpdateMap (System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata metadata, System.Activities.Activity originalActivity);
    parameters:
    - id: metadata
      type: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata
      description: "추가할 수 있습니다."
    - id: originalActivity
      type: System.Activities.Activity
      description: "추가할 수 있습니다."
  overload: System.Activities.Statements.CompensableActivity.OnCreateDynamicUpdateMap*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.CompensableActivity.Variables
  id: Variables
  parent: System.Activities.Statements.CompensableActivity
  langs:
  - csharp
  name: Variables
  nameWithType: CompensableActivity.Variables
  fullName: System.Activities.Statements.CompensableActivity.Variables
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "컬렉션을 가져옵니다 <xref:System.WorkflowModel.Variable>이 대 한 개체 <xref href=&quot;System.Activities.Statements.CompensableActivity&quot;> </xref>.</xref:System.WorkflowModel.Variable>"
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Activities.Variable> Variables { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Activities.Variable}
      description: "컬렉션 <xref:System.WorkflowModel.Variable>이 대 한 개체 <xref href=&quot;System.Activities.Statements.CompensableActivity&quot;> </xref>.</xref:System.WorkflowModel.Variable>"
  overload: System.Activities.Statements.CompensableActivity.Variables*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Activities.NativeActivity`1
  isExternal: false
  name: System.Activities.NativeActivity<System.Activities.Statements.CompensationToken>
- uid: System.Activities.Statements.CompensableActivity.#ctor
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: CompensableActivity()
  nameWithType: CompensableActivity.CompensableActivity()
  fullName: System.Activities.Statements.CompensableActivity.CompensableActivity()
- uid: System.Activities.Statements.CompensableActivity.Body
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: Body
  nameWithType: CompensableActivity.Body
  fullName: System.Activities.Statements.CompensableActivity.Body
- uid: System.Activities.Activity
  parent: System.Activities
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Activities.Activity
- uid: System.Activities.Statements.CompensableActivity.CacheMetadata(System.Activities.NativeActivityMetadata)
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: CacheMetadata(NativeActivityMetadata)
  nameWithType: CompensableActivity.CacheMetadata(NativeActivityMetadata)
  fullName: System.Activities.Statements.CompensableActivity.CacheMetadata(NativeActivityMetadata)
- uid: System.Activities.NativeActivityMetadata
  parent: System.Activities
  isExternal: false
  name: NativeActivityMetadata
  nameWithType: NativeActivityMetadata
  fullName: System.Activities.NativeActivityMetadata
- uid: System.Activities.Statements.CompensableActivity.Cancel(System.Activities.NativeActivityContext)
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: Cancel(NativeActivityContext)
  nameWithType: CompensableActivity.Cancel(NativeActivityContext)
  fullName: System.Activities.Statements.CompensableActivity.Cancel(NativeActivityContext)
- uid: System.Activities.NativeActivityContext
  parent: System.Activities
  isExternal: false
  name: NativeActivityContext
  nameWithType: NativeActivityContext
  fullName: System.Activities.NativeActivityContext
- uid: System.Activities.Statements.CompensableActivity.CancellationHandler
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: CancellationHandler
  nameWithType: CompensableActivity.CancellationHandler
  fullName: System.Activities.Statements.CompensableActivity.CancellationHandler
- uid: System.Activities.Statements.CompensableActivity.CanInduceIdle
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: CanInduceIdle
  nameWithType: CompensableActivity.CanInduceIdle
  fullName: System.Activities.Statements.CompensableActivity.CanInduceIdle
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Activities.Statements.CompensableActivity.CompensationHandler
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: CompensationHandler
  nameWithType: CompensableActivity.CompensationHandler
  fullName: System.Activities.Statements.CompensableActivity.CompensationHandler
- uid: System.Activities.Statements.CompensableActivity.ConfirmationHandler
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: ConfirmationHandler
  nameWithType: CompensableActivity.ConfirmationHandler
  fullName: System.Activities.Statements.CompensableActivity.ConfirmationHandler
- uid: System.Activities.Statements.CompensableActivity.Execute(System.Activities.NativeActivityContext)
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: Execute(NativeActivityContext)
  nameWithType: CompensableActivity.Execute(NativeActivityContext)
  fullName: System.Activities.Statements.CompensableActivity.Execute(NativeActivityContext)
- uid: System.Activities.Statements.CompensableActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  nameWithType: CompensableActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  fullName: System.Activities.Statements.CompensableActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
- uid: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata
  parent: System.Activities.DynamicUpdate
  isExternal: false
  name: NativeActivityUpdateMapMetadata
  nameWithType: NativeActivityUpdateMapMetadata
  fullName: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata
- uid: System.Activities.Statements.CompensableActivity.Variables
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: Variables
  nameWithType: CompensableActivity.Variables
  fullName: System.Activities.Statements.CompensableActivity.Variables
- uid: System.Collections.ObjectModel.Collection{System.Activities.Variable}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Variable>
  nameWithType: Collection<Variable>
  fullName: System.Collections.ObjectModel.Collection<System.Activities.Variable>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Activities.Variable>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.Variable
    name: Variable
    nameWithType: Variable
    fullName: Variable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Statements.CompensableActivity.#ctor*
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: CompensableActivity
  nameWithType: CompensableActivity.CompensableActivity
- uid: System.Activities.Statements.CompensableActivity.Body*
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: Body
  nameWithType: CompensableActivity.Body
- uid: System.Activities.Statements.CompensableActivity.CacheMetadata*
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: CacheMetadata
  nameWithType: CompensableActivity.CacheMetadata
- uid: System.Activities.Statements.CompensableActivity.Cancel*
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: Cancel
  nameWithType: CompensableActivity.Cancel
- uid: System.Activities.Statements.CompensableActivity.CancellationHandler*
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: CancellationHandler
  nameWithType: CompensableActivity.CancellationHandler
- uid: System.Activities.Statements.CompensableActivity.CanInduceIdle*
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: CanInduceIdle
  nameWithType: CompensableActivity.CanInduceIdle
- uid: System.Activities.Statements.CompensableActivity.CompensationHandler*
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: CompensationHandler
  nameWithType: CompensableActivity.CompensationHandler
- uid: System.Activities.Statements.CompensableActivity.ConfirmationHandler*
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: ConfirmationHandler
  nameWithType: CompensableActivity.ConfirmationHandler
- uid: System.Activities.Statements.CompensableActivity.Execute*
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: Execute
  nameWithType: CompensableActivity.Execute
- uid: System.Activities.Statements.CompensableActivity.OnCreateDynamicUpdateMap*
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: OnCreateDynamicUpdateMap
  nameWithType: CompensableActivity.OnCreateDynamicUpdateMap
- uid: System.Activities.Statements.CompensableActivity.Variables*
  parent: System.Activities.Statements.CompensableActivity
  isExternal: false
  name: Variables
  nameWithType: CompensableActivity.Variables
