### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Security.SecureConversationServiceCredential
  id: SecureConversationServiceCredential
  children:
  - System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
  - System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
  langs:
  - csharp
  name: SecureConversationServiceCredential
  nameWithType: SecureConversationServiceCredential
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential
  type: Class
  summary: "보안 대화 서비스에 대 한 자격 증명 설정을 제공합니다."
  remarks: "보안 대화에서는 여러 메시지를 교환 하 고 보안을 유지 하려면 보안 컨텍스트 토큰 (SCT)를 사용 합니다. SCT는 통신 세션의 수명 동안 통신 당사자 간에 공유 됩니다. 서비스는 두 가지 종류의 Sct 발급할 수 있습니다:-첫 번째는 고유 id를 포함 하는 세션 기반 SCT입니다. 메시지의 id를 전달 하 고 서비스에서 SCT id와 콘텐츠 (예: 클레임, 보안 키 및 등) 간을 매핑하는 상태 매핑 캐시를 유지 합니다. 제대로 작동 하는 클라이언트는 서비스가 캐시 리소스를 최적화할 수 있도록 SCT 취소를 보내야 합니다. 호출 하 여이 클래스를 인스턴스화하는 경우 <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A>와 `requireCancellation` 매개 변수를 `true`, SCT이 방식이으로 실행 됩니다.</xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A>      -두 번째는 클라이언트의 쿠키에 상주 하는 독립적인된 SCT입니다. 이 SCT는 전체 상태 정보를 포함, 따라서 상태 관리 서비스에서 아니고 클라이언트의 SCT 취소가 필요 합니다. 이 &quot;쿠키 모드&quot; SCT 라고도 합니다. SCT는 전체 상태 정보에 포함 되어 있으므로 해당 크기는 세션 기반 경우에서 보다 큰입니다. 세션 기반 Sct와 함께 서비스 상태 정보를 저장합니다. 그러나 독립적 이므로 서비스 수명이 사용할 수 있으며 서비스 종료 및 다시 시작 하더라도 지속 합니다."
  syntax:
    content: public sealed class SecureConversationServiceCredential
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
  id: SecurityContextClaimTypes
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  langs:
  - csharp
  name: SecurityContextClaimTypes
  nameWithType: SecureConversationServiceCredential.SecurityContextClaimTypes
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "컬렉션을 가져옵니다는 <xref:System.Type>쿠키 serialization 위한 클레임.</xref:System.Type>"
  remarks: "클레임을 SCT 쿠키로 serialize 하는 데 [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] 사용 하 여 <xref:System.Runtime.Serialization.DataContractSerializer>기본값으로.</xref:System.Runtime.Serialization.DataContractSerializer> 클레임 리소스는 확장할 수 있으므로 [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] 알려진된 리소스 형식의 목록을 제공할 수 있습니다. 이 지원의 <xref:System.Runtime.Serialization.DataContractSerializer>할 때 원래의 강력한 형식 개체를 반환할 수 있도록 하는 쿠키의 클레임을 역직렬화 하는 동안.</xref:System.Runtime.Serialization.DataContractSerializer>"
  example:
  - "The following code shows how to get this property.  \n  \n [!code-cs[S_UE_SecureConversationServiceCredential#2](~/add/codesnippet/csharp/e8a69534-ad60-48be-9b2e-_1.cs)]"
  syntax:
    content: public System.Collections.ObjectModel.Collection<Type> SecurityContextClaimTypes { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Type}
      description: "컬렉션은 <xref:System.Type>쿠키 serialization 위한 클레임.</xref:System.Type>"
  overload: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
  id: SecurityStateEncoder
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  langs:
  - csharp
  name: SecurityStateEncoder
  nameWithType: SecureConversationServiceCredential.SecurityStateEncoder
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "사용자 지정 설정 하거나 가져옵니다 <xref href=&quot;System.ServiceModel.Security.SecurityStateEncoder&quot;> </xref> 인코딩 및 디코딩 쿠키 serialization에 대 한 합니다."
  remarks: "&quot;쿠키 모드&quot; 서비스 발생 하는 클라이언트 보안 컨텍스트 토큰 (SCT) 쿠키의 형태로 클라이언트에 보안 상태를 유지 하기 위해 보유 하지 않습니다. 클라이언트는 서비스의 보호를 해제 하 고 요청 메시지를 확인 하는 방법을 알 수 있도록 요청 메시지에서 다시 쿠키를 보냅니다. SCT는 비보안 네트워크를 통해 전송 되는 경우가, 보호 되어야 합니다.       기본적으로 [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] 사용 하 여는 <xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder>(DPAPI (데이터 보호 API)를 사용 하 여 쿠키를 보호 하는 클래스입니다.</xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> 웹 팜 환경에서 작동 하도록 DPAPI에 대 한 모든 백 엔드 서비스는 동일한 도메인 사용자 계정으로 실행 해야 합니다. 즉,는 서비스가 웹 호스팅되는 경우 인터넷 정보 서비스 (IIS) 작업자 프로세스는 도메인 사용자로 실행 되도록 구성 해야 합니다.       이 속성을 사용 하면 사용자 지정을 사용 하도록 <xref:System.ServiceModel.Security.SecurityStateEncoder>를 암호화 하 고 쿠키를 암호 해독 DPAPI에 종속 되지 않습니다.</xref:System.ServiceModel.Security.SecurityStateEncoder>"
  example:
  - "The following code shows how to set this property.  \n  \n [!code-cs[S_UE_SecureConversationServiceCredential#1](~/add/codesnippet/csharp/72c1f567-836b-4b6f-bbcd-_1.cs)]"
  syntax:
    content: public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }
    return:
      type: System.ServiceModel.Security.SecurityStateEncoder
      description: "A <xref href=&quot;System.ServiceModel.Security.SecurityStateEncoder&quot;> </xref> 개체는 사용자 지정의 <xref href=&quot;System.ServiceModel.Security.DataProtectionSecurityStateEncoder&quot;> </xref>합니다."
  overload: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  isExternal: false
  name: SecurityContextClaimTypes
  nameWithType: SecureConversationServiceCredential.SecurityContextClaimTypes
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
- uid: System.Collections.ObjectModel.Collection{System.Type}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Type>
  nameWithType: Collection<Type>
  fullName: System.Collections.ObjectModel.Collection<System.Type>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Type>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  isExternal: false
  name: SecurityStateEncoder
  nameWithType: SecureConversationServiceCredential.SecurityStateEncoder
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
- uid: System.ServiceModel.Security.SecurityStateEncoder
  parent: System.ServiceModel.Security
  isExternal: false
  name: SecurityStateEncoder
  nameWithType: SecurityStateEncoder
  fullName: System.ServiceModel.Security.SecurityStateEncoder
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes*
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  isExternal: false
  name: SecurityContextClaimTypes
  nameWithType: SecureConversationServiceCredential.SecurityContextClaimTypes
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder*
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  isExternal: false
  name: SecurityStateEncoder
  nameWithType: SecureConversationServiceCredential.SecurityStateEncoder
