### YamlMime:ManagedReference
items:
- uid: System.Security.SecureString
  id: SecureString
  children:
  - System.Security.SecureString.#ctor
  - System.Security.SecureString.#ctor(System.Char*,System.Int32)
  - System.Security.SecureString.AppendChar(System.Char)
  - System.Security.SecureString.Clear
  - System.Security.SecureString.Copy
  - System.Security.SecureString.Dispose
  - System.Security.SecureString.InsertAt(System.Int32,System.Char)
  - System.Security.SecureString.IsReadOnly
  - System.Security.SecureString.Length
  - System.Security.SecureString.MakeReadOnly
  - System.Security.SecureString.RemoveAt(System.Int32)
  - System.Security.SecureString.SetAt(System.Int32,System.Char)
  langs:
  - csharp
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
  type: Class
  summary: "유지 해야 처럼 기밀을 더 이상 필요 없는 컴퓨터 메모리에서 삭제 하 여 텍스트를 나타냅니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "SecureString은 보안 수단을 제공 하는 문자열 형식입니다. 일반 텍스트로 프로세스 메모리에 잠재적으로 중요 한 문자열을 저장 하지 않도록 하려고 합니다.  그러나 (자세한 내용은는 [보안은 SecureString?](#HowSecure) 섹션.) SecureString의 인스턴스 값 인스턴스를 초기화 하는 경우 기본 플랫폼에서 지원 되는 메커니즘을 사용 하 여 자동으로 보호 되는 값을 수정 하는 경우 또는 합니다. 응용 프로그램 인스턴스를 변경할 수 없는 렌더링할 수 및 호출 하 여 더 이상 수정할 수는 <xref:System.Security.SecureString.MakeReadOnly%2A>메서드.</xref:System.Security.SecureString.MakeReadOnly%2A>       SecureString 인스턴스의 최대 길이 65, 536 자입니다.      > [!IMPORTANT] >이 형식이 구현 하는 <xref:System.IDisposable>인터페이스.</xref:System.IDisposable> 형식의 인스턴스를 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다. 직접 형식의 삭제 하려면 해당 <xref:System.IDisposable.Dispose%2A>에서 메서드는 `try` / `catch` 블록.</xref:System.IDisposable.Dispose%2A> 작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다. 자세한 내용은의 &quot;를 사용 하는 개체는 구현 IDisposable&quot; 섹션을 참조 하십시오.는 <xref:System.IDisposable>인터페이스 항목.</xref:System.IDisposable>       SecureString 클래스와 해당 멤버 COM에 표시 되지 않습니다. 자세한 내용은 <xref:System.Runtime.InteropServices.ComVisibleAttribute>.</xref:System.Runtime.InteropServices.ComVisibleAttribute> 을 참조 하십시오.       이 섹션에서는: [vs 문자열입니다. SecureString](#vsString)[SecureString 작업](#Ops)[SecureString interop 및](#interop)[SecureString은 얼마나 안전?               ](#HowSecure)      <a name=&quot;vsString&quot;></a># # 문자열 SecureString 비교의 인스턴스는 <xref:System.String?displayProperty=fullName>클래스는 모두 변경할 수 없는 더 이상 필요 없는 프로그래밍 방식으로 예약 될 가비지 수집에 대 한; 즉, 인스턴스는 읽기 전용 카탈로그 항목이 생성 된 후 컴퓨터 메모리에서 인스턴스 삭제할 수는 경우 예측할 수 없는.</xref:System.String?displayProperty=fullName> 때문에 <xref:System.String?displayProperty=fullName>인스턴스를 변경할 수 없는 경우, 기존 인스턴스를 수정 하는 작업은 실제로 조작 하기 위한 것의 복사본을 만듭니다.</xref:System.String?displayProperty=fullName> 따라서 경우는 <xref:System.String>암호, 신용 카드 번호 또는 개인 데이터와 같은 중요 한 정보를 포함 하는 개체, 응용 프로그램 컴퓨터 메모리에서 데이터를 삭제할 수 없으므로 사용 된 후 정보 누설 될 위험이 있습니다.</xref:System.String>       SecureString 개체는 비슷합니다는 <xref:System.String>텍스트 값이 있다는 점에서.</xref:System.String> 그러나 SecureString 개체를 메모리에 고정 값이 보호 메커니즘을 사용할 수 있습니다, 응용 프로그램 읽기 전용으로 표시 하 고 컴퓨터 메모리에서 삭제 될 때까지 수정할 수 있는 기본 운영 체제에서 제공 하는 암호화와 같은 응용 프로그램 호출 하 여 하나는 <xref:System.Security.SecureString.Dispose%2A>메서드 또는.NET Framework 가비지 수집기에 의해.</xref:System.Security.SecureString.Dispose%2A>       SecureString 클래스의 제한 사항을 논의 알려면는 [보안은 SecureString?](#HowSecure) 섹션.       [맨 위로 이동](#top) <a name=&quot;Ops&quot;> </a> # # SecureString 작업은 SecureString 클래스는 다음 작업을 수행할 수 있는 멤버를 포함 합니다: 매개 변수가 없는 생성자를 호출 하 여 SecureString 개체를 인스턴스화하는 SecureString 개체를 인스턴스화합니다.             추가 문자를 SecureString 개체를 호출 하 여 SecureString 개체를 단일 문자를 한 번에 추가할 수는 <xref:System.Security.SecureString.AppendChar%2A>또는 <xref:System.Security.SecureString.InsertAt%2A>메서드.</xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      > [!IMPORTANT] >는 <xref:System.String>중요 한 데이터 변경 불가능 <xref:System.String>클래스</xref:System.String> 의 메모리 지 속성 결과 따라 이미 있기 때문에,</xref:System.String> A SecureString 개체를 생성 하지 해야 와 같은 문자 런타임 관리 되지 않는 소스에서은 SecureString 개체를 생성 하는 가장 좋은 방법은 <xref:System.Console.ReadKey%2A?displayProperty=fullName>메서드.</xref:System.Console.ReadKey%2A?displayProperty=fullName>       제거 문자 SecureString 개체를 호출 하 여 개별 문자를 바꿀 수 있습니다는 <xref:System.Security.SecureString.SetAt%2A>메서드를 호출 하 여 개별 문자 제거는 <xref:System.Security.SecureString.RemoveAt%2A>메서드 또는 호출 하 여 모든 문자는 SecureString 인스턴스에 제거는 <xref:System.Security.SecureString.Clear%2A>메서드.</xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.SetAt%2A>       읽기 전용 SecureString 개체를 만들기 호출 SecureString 개체를 나타내는 문자열을 정의 하면 해당 <xref:System.Security.SecureString.MakeReadOnly%2A>읽기 전용 문자열을 만드는 메서드와 알림이.</xref:System.Security.SecureString.MakeReadOnly%2A>       SecureString 개체는 SecureString 클래스에 대 한 정보를 가져옵니다는 문자열에 대 한 정보를 제공 하는 두 명의 멤버: 해당 <xref:System.Security.SecureString.Length%2A>; 문자열에 u t f&16;으로 인코딩된 코드 단위 수를 나타내는 속성 및 <xref:System.Security.SecureString.IsReadOnly%2A>, 메서드 인스턴스가 읽기 전용인 지 여부를 나타냅니다.</xref:System.Security.SecureString.IsReadOnly%2A> </xref:System.Security.SecureString.Length%2A>       때문에 SecureString 구현 SecureString 인스턴스에 할당 된 메모리를 해제는 <xref:System.IDisposable>인터페이스를 호출 하 여 해당 메모리를 해제는 <xref:System.Security.SecureString.Dispose%2A>메서드.</xref:System.Security.SecureString.Dispose%2A> </xref:System.IDisposable>       SecureString 클래스에 검사, 비교, 또는 SecureString 값으로 변환 하는 멤버가 없습니다. 이러한 멤버가 없으므로 실수로 또는 악의적으로 노출 로부터 인스턴스 값을 보호할 수 있습니다. 적절 한 멤버를 사용 하 여는 <xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>클래스 같은 <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A>SecureString 개체의 값을 조작 하기 위한 메서드를.</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> </xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>       .NET Framework 클래스 라이브러리는 다음과 같은 방법으로 SecureString 인스턴스를 일반적으로 사용:-를 사용 하 여 프로세스에 대 한 암호 정보를 제공 하는 <xref:System.Diagnostics.ProcessStartInfo>구조 또는 오버 로드를 호출 하는 <xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName>SecureString 유형의 매개 변수가 있는 메서드가.</xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName> </xref:System.Diagnostics.ProcessStartInfo>      -호출 하 여 네트워크 암호 정보를 제공 하는 <xref:System.Net.NetworkCredential>SecureString 유형의 또는 사용 하 여 매개 변수를 가진 클래스 생성자는 <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName>속성.</xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName> </xref:System.Net.NetworkCredential>      -호출 하 여 SQL Server 인증에 대 한 암호 정보를 제공 하는 <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>생성자 또는 값을 검색 하는 <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName>속성.</xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName> </xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>      -에 비관리 코드에는 문자열을 전달 합니다. 자세한 내용은 참조는 [SecureString interop 및](#interop) 섹션.       [맨 위로 이동](#top) <a name=&quot;interop&quot;> </a> # # SecureString interop SecureString을 운영 체제에서 직접 지원 하지 않으므로 변환 해야 SecureString 개체의 값을 필수 string 형식에 네이티브 메서드에서 문자열을 전달 하기 전에 및 합니다.        <xref:System.Runtime.InteropServices.Marshal>클래스에이 작업을 수행 하는&5; 개의 메서드가:- <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>com 인식 되는 이진 문자열 (BSTR) SecureString 문자열 값으로 변환 하는,</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal>      - <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>및 <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>, 관리 되지 않는 메모리에서 ANSI 문자열을 SecureString 문자열 값을 복사입니다.</xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>      - <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>및 <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>, 관리 되지 않는 메모리에서 유니코드 문자열을 SecureString 문자열 값을 복사입니다.</xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>       이러한 각 방법의 관리 되지 않는 메모리의 일반 텍스트 문자열을 만듭니다. 것은을 비우고 더 이상 필요 하는 즉시 해당 메모리를 확보 하는 개발자의 책임입니다. 문자열 변환 및 메모리 할당 메서드는 각각 해당 하는 메서드를 비우고 할당된 된 메모리: | 할당 및 변환 메서드 | Free 메서드 및&0; |   |--------------------------------------|--------------------------|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName>|       [Back to top](#top)      <a name=&quot;HowSecure&quot;></a>    ## How secure is SecureString?</xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>    제대로 만들어지면 SecureString 인스턴스를 보다 효율적으로 데이터에 <xref:System.String>.</xref:System.String> 보다 문자 런타임 원본에서 문자열을 만들 때 <xref:System.String>여러 중간 메모리에 만듭니다. 반면 SecureString 바로 단일 인스턴스를 만듭니다.</xref:System.String>  가비지 수집의 <xref:System.String>개체 명확 하지 않습니다.</xref:System.String> 또한 메모리 고정 되지 않으므로 때문에 가비지 수집기 추가의 복사본을 만드는 <xref:System.String>메모리를 압축 하 고 이동 하는 경우 값.</xref:System.String> 반면, SecureString 개체에 할당 된 메모리가 고정 하 고 해당 메모리를 호출 하 여 해제할 수는 <xref:System.Security.SecureString.Dispose%2A>메서드.</xref:System.Security.SecureString.Dispose%2A>       <xref:System.String>인스턴스는 SecureString 인스턴스 있는 그대로 보안에 중요 한 제한 사항이</xref:System.String> 에 저장 된 데이터 보다 안전한 SecureString 인스턴스에 저장 된 데이터는 있지만 여기에 포함: 플랫폼에서 Windows 운영 체제은 SecureString 인스턴스의 내부 문자 배열의 내용을 암호화 합니다. 그러나 누락 된 Api 또는 키 관리 문제 인해 여부 암호화가 모든 플랫폼에서 사용할 수 없습니다. 이 인해 SecureString은.NET Core 아니라 데스크톱 (Windows만 해당)에 사용할 수 있습니다.       인스턴스는 다양 한 시간에 노출 될 수 있습니다 SecureString에 할당 된 일반 텍스트 암호화는 사용할 수는 SecureString 구현이 될지라도 기간:-Windows 보안 문자열 값을 사용 하려면 일반 텍스트 표현으로 변환에 대 한.NET Framework 여전히 운영 체제 수준에서 보안 문자열 구현을 제공 하지 않습니다.      -보안 문자열의 값 수정 될 때마다 메서드에 의해와 같은 <xref:System.Security.SecureString.AppendChar%2A>또는 <xref:System.Security.SecureString.RemoveAt%2A>를 해독 해야 합니다 (즉, 변환 된 뒤로를 일반 텍스트로), 수정, 한 다음 다시 암호화 합니다.</xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      -Interop 호출에 보안 문자열을 사용 하는 경우 ANSI 문자열, 유니코드 문자열 또는 이진 문자열 (BSTR)을 변환 합니다. 자세한 내용은 참조는 [SecureString interop 및](#interop) 섹션.       SecureString 인스턴스 값이 노출 되는 시간 간격 <xref:System.String>클래스</xref:System.String> 에 비해 줄어듭니다 단순히       보다 일반적으로, 저장소 사용량 및 SecureString 클래스 보호 되거나 기밀로 유지 해야 하는 문자열 값에 대 한 저장소 메커니즘을 정의 합니다. 그러나 외부.NET Framework 자체에서 사용 현황 메커니즘이 없습니다 SecureString을 지원합니다. 즉, 보안 문자열을 해당 대상에서 인식할 수 있는 가능한 형식 (일반적으로 일반 텍스트 형식)으로 변환 해야 하 고 암호 해독 및 변환 사용자 공간에서 수행 되어야 합니다.       SecureString 것 보다 더 안전 전반적으로 <xref:System.String>중요 한 문자열 데이터의 노출을 제한 하므로.</xref:System.String> 그러나 이러한 문자열 프로세스 또는 호스트 컴퓨터, 프로세스 덤프 또는 사용자가 볼 수 있는 스왑 파일에서 실행 되는 악성 프로세스 등의 원시 메모리에 액세스할 수 있는 작업에 노출 될 수 있습니다. SecureString 암호 보호를 사용 하는 대신 메서드 대신 불투명 핸들을 프로세스 외부에 저장 된 자격 증명을 사용 하는 것입니다.       [맨 위로 이동](#top)"
  example:
  - "The following example demonstrates how to use a SecureString to secure a user’s password for use as a credential to start a new process.  \n  \n [!code-vb[System.Security.SecureString.Ctor#4](~/add/codesnippet/visualbasic/t-system.security.secure_1.vb)]\n [!code-cs[System.Security.SecureString.Ctor#4](~/add/codesnippet/csharp/t-system.security.secure_1.cs)]"
  syntax:
    content: 'public sealed class SecureString : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecureString.#ctor
  id: '#ctor'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.SecureString&quot;> </xref> 클래스입니다."
  remarks: ''
  example:
  - "The following example uses the default (or parameterless) constructor to instantiate a new <xref:System.Security.SecureString> object. It then calls the <xref:System.Security.SecureString.AppendChar%2A> method to add an array of characters to it.  \n  \n [!code-cs[System.Security.SecureString.Ctor#2](~/add/codesnippet/csharp/m-system.security.secure_7_1.cs)]\n [!code-cpp[System.Security.SecureString.Ctor#2](~/add/codesnippet/cpp/m-system.security.secure_7_1.cpp)]\n [!code-vb[System.Security.SecureString.Ctor#2](~/add/codesnippet/visualbasic/m-system.security.secure_7_1.vb)]  \n  \n The following example creates a <xref:System.Security.SecureString> object from the value of a <xref:System.String> object.  \n  \n [!code-vb[System.Security.SecureString.Ctor#3](~/add/codesnippet/visualbasic/m-system.security.secure_7_2.vb)]\n [!code-cpp[System.Security.SecureString.Ctor#3](~/add/codesnippet/cpp/m-system.security.secure_7_2.cpp)]\n [!code-cs[System.Security.SecureString.Ctor#3](~/add/codesnippet/csharp/m-system.security.secure_7_2.cs)]"
  syntax:
    content: public SecureString ();
    parameters: []
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "문서를 보호 하거나이 인스턴스 값의 보호 해제 하는 동안 오류가 발생 했습니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "이 작업이이 플랫폼에서 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  id: '#ctor(System.Char*,System.Int32)'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.SecureString&quot;> </xref> 의 하위 배열에서 클래스 &lt;xref:System.Char?displayProperty=fullName&gt; 개체입니다.       이 생성자는 CLS 규격이 아닙니다. CLS 규격 대체 항목은 &lt;xref:System.Security.SecureString.%23ctor?displayProperty=fullName&gt;합니다."
  remarks: "이 생성자는 새 <xref:System.Security.SecureString>개체에 있는 문자의 수를 `value` 에 지정 된 `length`; 인스턴스의 값이 암호화 한 다음.</xref:System.Security.SecureString>       이 생성자는 C#에서는 안전 하지 않은 코드의 경우에만 정의 됩니다."
  example:
  - "The following example instantiates a new <xref:System.Security.SecureString> object by passing its constructor a pointer to a character array.  \n  \n [!code-cpp[System.Security.SecureString.Ctor2#1](~/add/codesnippet/cpp/m-system.security.secure_3_1.cpp)]\n [!code-cs[System.Security.SecureString.Ctor2#1](~/add/codesnippet/csharp/securestringctor/ctor1.cs#1)]"
  syntax:
    content: public SecureString (char* value, int length);
    parameters:
    - id: value
      type: System.Char*
      description: "배열에 대 한 포인터 &lt;xref:System.Char?displayProperty=fullName&gt; 개체입니다."
    - id: length
      type: System.Int32
      description: "요소 수가 `value` 새 인스턴스를 포함 하도록 합니다."
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>length</code>가 0 보다 작거나 65, 536 보다 큽니다."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "문서를 보호 하거나 값이 보안 문자열의 보호 해제 하는 동안 오류가 발생 했습니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "이 작업이이 플랫폼에서 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Security.SecureString.AppendChar(System.Char)
  id: AppendChar(System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "현재 보안 문자열의 끝에 문자를 추가 합니다."
  remarks: "있는 경우이 보안 문자열의 값이; 보호 된 구현에서는 암호화 같은 보호 메커니즘을 사용 하는 경우 `c` 붙여집니다; 보안 문자열의 새 값은 다시 보호 합니다."
  example:
  - "The following example demonstrates how the AppendChar, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_6_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_6_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_1.vb)]  \n  \n The following example demonstrates how the AppendChar and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_6_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_6_2.cs)]"
  syntax:
    content: public void AppendChar (char c);
    parameters:
    - id: c
      type: System.Char
      description: "이 보안 문자열에 추가할 문자입니다."
  overload: System.Security.SecureString.AppendChar*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "이 보안 문자열을 이미 삭제 되었습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이 보안 문자열은 읽기 전용입니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "이 작업을 수행이 보안 문자열의 길이 65, 536 자 보다 긴 것 만듭니다."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "문서를 보호 하거나 값이 보안 문자열의 보호 해제 하는 동안 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Security.SecureString.Clear
  id: Clear
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "현재 보안 문자열의 값을 삭제 합니다."
  remarks: "이 보안 문자열의 값을 포함 하는 컴퓨터 메모리를&0;으로 처리 한 후이 보안 문자열의 값의 길이&0;으로 설정 됩니다."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and Clear methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_5_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_5_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_5_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.SecureString.Clear*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "이 보안 문자열을 이미 삭제 되었습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이 보안 문자열은 읽기 전용입니다."
  platform:
  - net462
- uid: System.Security.SecureString.Copy
  id: Copy
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "현재 보안 문자열의 복사본을 만듭니다."
  remarks: "인스턴스는 <xref:System.Security.SecureString>은 읽기 전용으로 표시, 해당 인스턴스의 복사본 됩니다 읽기 전용입니다.</xref:System.Security.SecureString>"
  syntax:
    content: public System.Security.SecureString Copy ();
    parameters: []
    return:
      type: System.Security.SecureString
      description: "이 보안 문자열의 복제본입니다."
  overload: System.Security.SecureString.Copy*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "이 보안 문자열을 이미 삭제 되었습니다."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "문서를 보호 하거나 값이 보안 문자열의 보호 해제 하는 동안 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Security.SecureString.Dispose
  id: Dispose
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "현재 사용 되는 모든 리소스를 해제 <xref href=&quot;System.Security.SecureString&quot;> </xref> 개체입니다."
  remarks: "Dispose 메서드는이 값이 포함 된 할당된 된 메모리에 이진&0; 기록 <xref:System.Security.SecureString>한 다음 할당 된 메모리를 해제 합니다.</xref:System.Security.SecureString>       자세한 내용은 참조 [가비지 수집](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.SecureString.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  id: InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "지정된 된 인덱스 위치에서이 보안 문자열에 문자를 삽입 합니다."
  remarks: "인덱스는&0;부터 시작 합니다. 이 보안 문자열의 첫 번째 문자 인덱스 위치&0;입니다.       있는 경우 보안 문자열의 값이; 보호 된 구현에서는 암호화 같은 보호 메커니즘을 사용 하는 경우 `c` ; 지정 된 인덱스 위치에 삽입 되어 새 값은 다시 보호 합니다. InsertAt 메서드와 동일한 결과 생성 된 <xref:System.Security.SecureString.AppendChar%2A>메서드를 보안 문자열의 끝에 문자를 삽입 하는 경우는 `index` InsertAt의 매개 변수가이 인스턴스의 길이로 설정 됩니다.</xref:System.Security.SecureString.AppendChar%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, InsertAt, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_0_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_0_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_0_1.vb)]"
  syntax:
    content: public void InsertAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "인덱스 위치 매개 변수 `c` 삽입 됩니다."
    - id: c
      type: System.Char
      description: "삽입할 문자입니다."
  overload: System.Security.SecureString.InsertAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "이 보안 문자열을 이미 삭제 되었습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이 보안 문자열은 읽기 전용입니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 작거나이 보안 문자열의 길이 보다 큽니다.       -또는-이 작업을 수행 하 게 만드는이 보안 문자열의 길이 65, 536 자를 초과 합니다."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "문서를 보호 하거나 값이 보안 문자열의 보호 해제 하는 동안 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Security.SecureString.IsReadOnly
  id: IsReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "이 보안 문자열을 읽기 전용으로 표시 여부를 나타냅니다."
  remarks: "인스턴스 <xref:System.Security.SecureString> <xref:System.Security.SecureString.MakeReadOnly%2A>메서드를 <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> 인스턴스 throw의 값을 수정 하려고 시도</xref:System.Security.SecureString.MakeReadOnly%2A> 하 여 읽기 전용으로 표시 된</xref:System.Security.SecureString> 후 IsReadOnly 메서드를 사용 하 여 <xref:System.Security.SecureString>수정 하기 전에 읽기 전용</xref:System.Security.SecureString> 여부를 테스트 하려면"
  syntax:
    content: public bool IsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 보안 문자열이 읽기 전용 이면 표시 된 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.SecureString.IsReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "이 보안 문자열을 이미 삭제 되었습니다."
  platform:
  - net462
- uid: System.Security.SecureString.Length
  id: Length
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "현재 보안 문자열의 문자 수를 가져옵니다."
  remarks: "Length 속성 수를 반환 합니다. <xref:System.Char>의이 인스턴스 개체, 유니코드 문자 수가 아니라.</xref:System.Char> 개 이상의 유니코드 문자를 표현 될 수 있습니다 <xref:System.Char>개체입니다.</xref:System.Char>       최대 길이 <xref:System.Security.SecureString>인스턴스는 65, 536 자.</xref:System.Security.SecureString>"
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: "수가 &lt;xref:System.Char?displayProperty=fullName&gt; 개체가이 보안 문자열입니다."
  overload: System.Security.SecureString.Length*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "이 보안 문자열을 이미 삭제 되었습니다."
  platform:
  - net462
- uid: System.Security.SecureString.MakeReadOnly
  id: MakeReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "읽기 전용으로이 보안 문자열의 텍스트 값을 설정 합니다."
  remarks: "텍스트 값의 인스턴스를 초기화는 <xref:System.Security.SecureString>클래스와 <xref:System.Security.SecureString.%23ctor%2A>생성자를 사용 하 여 값을 수정 하 고는 <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, 및 <xref:System.Security.SecureString.AppendChar%2A>메서드.</xref:System.Security.SecureString.AppendChar%2A> </xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.SetAt%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.%23ctor%2A> </xref:System.Security.SecureString>       프로그램을 최종 수정을 수행한 후 인스턴스 값을 변경할 수 있도록 MakeReadOnly 메서드를 사용 (읽기 전용). 수정 하려는 추가 시도 <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> throw 값은 읽기 전용으로 표시 되 면 후       MakeReadOnly를 호출의 효과 영구적 때문에 <xref:System.Security.SecureString>클래스는 보안 문자열을 다시 수정할 수 있도록 의미를 제공 합니다.</xref:System.Security.SecureString> 사용 하 여는 <xref:System.Security.SecureString.IsReadOnly%2A>인스턴스에 있는지 여부를 테스트 메서드에 <xref:System.Security.SecureString>읽기 전용입니다.</xref:System.Security.SecureString> </xref:System.Security.SecureString.IsReadOnly%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password. After the password is collected, it is made read-only.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_1_1.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_1_1.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_1_1.cs)]"
  syntax:
    content: public void MakeReadOnly ();
    parameters: []
  overload: System.Security.SecureString.MakeReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "이 보안 문자열을 이미 삭제 되었습니다."
  platform:
  - net462
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "이 보안 문자열에서 지정된 된 인덱스 위치에 있는 문자를 제거합니다."
  remarks: "인덱스는&0;부터 시작 합니다. 이 인스턴스의의 첫 번째 문자 인덱스 위치&0;입니다.       있는 경우이 보안 문자열의 값이; 보호 된 구현에서는 암호화 같은 보호 메커니즘을 사용 하는 경우 지정된 된 인덱스 위치에 있는 문자가 제거 됩니다. 그런 다음 새 값이 다시 보호 합니다."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, RemoveAt, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_2_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_2_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_1.vb)]  \n  \n The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and RemoveAt methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_2_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_2_2.cs)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "이 보안 문자열에서 문자의 인덱스 위치입니다."
  overload: System.Security.SecureString.RemoveAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "이 보안 문자열을 이미 삭제 되었습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이 보안 문자열은 읽기 전용입니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 크거나이 보안 문자열의 길이 같은 작은 경우"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "문서를 보호 하거나 값이 보안 문자열의 보호 해제 하는 동안 오류가 발생 했습니다."
  platform:
  - net462
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  id: SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "지정 된 인덱스 위치의 기존 문자를 다른 문자로 바꿉니다."
  remarks: "인덱스는&0;부터 시작 합니다. 이 인스턴스의의 첫 번째 문자 인덱스 위치&0;입니다.       있는 경우 보안 문자열의 값이; 보호 된 구현에서는 암호화 같은 보호 메커니즘을 사용 하는 경우 `c` ; 지정한 인덱스 위치에 할당 된 새 값은 다시 보호 합니다."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, SetAt, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_4_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_4_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_4_1.vb)]"
  syntax:
    content: public void SetAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "이 보안 문자열에서 기존 문자의 인덱스 위치"
    - id: c
      type: System.Char
      description: "기존 문자를 대체 하는 문자입니다."
  overload: System.Security.SecureString.SetAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "이 보안 문자열을 이미 삭제 되었습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이 보안 문자열은 읽기 전용입니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>가&0; 보다 크거나이 보안 문자열의 길이 같은 작은 경우"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "문서를 보호 하거나 값이 보안 문자열의 보호 해제 하는 동안 오류가 발생 했습니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecureString.#ctor
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.SecureString.AppendChar(System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Security.SecureString.Clear
  parent: System.Security.SecureString
  isExternal: false
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
- uid: System.Security.SecureString.Copy
  parent: System.Security.SecureString
  isExternal: false
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.SecureString.Dispose
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
- uid: System.Security.SecureString.IsReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecureString.Length
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
- uid: System.Security.SecureString.#ctor*
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString
  nameWithType: SecureString.SecureString
- uid: System.Security.SecureString.AppendChar*
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar
  nameWithType: SecureString.AppendChar
- uid: System.Security.SecureString.Clear*
  parent: System.Security.SecureString
  isExternal: false
  name: Clear
  nameWithType: SecureString.Clear
- uid: System.Security.SecureString.Copy*
  parent: System.Security.SecureString
  isExternal: false
  name: Copy
  nameWithType: SecureString.Copy
- uid: System.Security.SecureString.Dispose*
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose
  nameWithType: SecureString.Dispose
- uid: System.Security.SecureString.InsertAt*
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt
  nameWithType: SecureString.InsertAt
- uid: System.Security.SecureString.IsReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly
  nameWithType: SecureString.IsReadOnly
- uid: System.Security.SecureString.Length*
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly
  nameWithType: SecureString.MakeReadOnly
- uid: System.Security.SecureString.RemoveAt*
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt
  nameWithType: SecureString.RemoveAt
- uid: System.Security.SecureString.SetAt*
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt
  nameWithType: SecureString.SetAt
