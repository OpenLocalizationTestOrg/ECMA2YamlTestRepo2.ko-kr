### YamlMime:ManagedReference
items:
- uid: System.UnhandledExceptionEventArgs
  id: UnhandledExceptionEventArgs
  children:
  - System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  - System.UnhandledExceptionEventArgs.ExceptionObject
  - System.UnhandledExceptionEventArgs.IsTerminating
  langs:
  - csharp
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs
  fullName: System.UnhandledExceptionEventArgs
  type: Class
  summary: "응용 프로그램 도메인에서 처리 되지 않은 예외가 있을 때 발생 되는 이벤트에 대 한 데이터를 제공 합니다."
  remarks: "UnhandledExceptionEventArgs 예외 개체 및 공용 언어 런타임의 종료 여부를 나타내는 플래그에 대 한 액세스를 제공 합니다. 로 전달 된 매개 변수 중 하나는 UnhandledExceptionEventArgs은 <xref:System.UnhandledExceptionEventHandler>에 대 한는 <xref:System.AppDomain.UnhandledException?displayProperty=fullName>이벤트.</xref:System.AppDomain.UnhandledException?displayProperty=fullName> </xref:System.UnhandledExceptionEventHandler>       이벤트 처리기 대리자에 대 한 자세한 내용은 참조 [이벤트](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class UnhandledExceptionEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  id: '#ctor(System.Object,System.Boolean)'
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.UnhandledExceptionEventArgs&quot;> </xref> 된 예외 개체 및 공용 언어 런타임 종료 플래그입니다."
  syntax:
    content: public UnhandledExceptionEventArgs (object exception, bool isTerminating);
    parameters:
    - id: exception
      type: System.Object
      description: "처리 되지 않은 예외입니다."
    - id: isTerminating
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>런타임의; 종료 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.UnhandledExceptionEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  id: ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "처리 되지 않은 예외 개체를 가져옵니다."
  remarks: "이 속성 형식을 <xref:System.Object>하나 <xref:System.Exception>.</xref:System.Exception> 에서 파생 된 것이 아니라</xref:System.Object> 개체를 반환합니다. 예외 형식 모두 <xref:System.Exception>를 <xref:System.Exception>.</xref:System.Exception> 에서 파생 되지 않은 개체를 사용 하 여 예외를 throw 하는 방법에 대 한 수</xref:System.Exception> 에서 파생 하는 공용 언어 사양 필요 하지만 이 예외와 함께 작동 하도록 다음을 수행할 수 있습니다:-적용는 <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>특성이 <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName>값 `true` 이벤트 처리기가 포함 된 어셈블리에.</xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName> </xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> 파생 되지 않은 모든 예외를 래핑합니다이 <xref:System.Exception>클래스에 <xref:System.Runtime.CompilerServices.RuntimeWrappedException>개체입니다.</xref:System.Runtime.CompilerServices.RuntimeWrappedException> </xref:System.Exception> 있습니다 수 다음 안전 하 게 캐스팅 (C#) 또는 변환 (Visual Basic의 경우)이이 속성을 반환 하는 개체는 <xref:System.Exception>개체를 원래 예외 개체를 검색 된 <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName>속성.</xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName> </xref:System.Exception> Note C# 및 Visual Basic 컴파일러 같은 일부 컴파일러에서는이 특성을 자동으로 적용 합니다.      -이 속성을 반환 하는 개체 캐스팅는 <xref:System.Exception>개체입니다.</xref:System.Exception>"
  example:
  - "The following example demonstrates the <xref:System.AppDomain.UnhandledException> event. It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain. It then throws two exceptions. The first is handled by a **try/catch** block. The second is unhandled and invokes the `MyHandle` routine before the application terminates.  \n  \n [!code-cs[AppDomain_UnhandledException#1](~/add/codesnippet/csharp/p-system.unhandledexcept_1.cs)]\n [!code-vb[AppDomain_UnhandledException#1](~/add/codesnippet/visualbasic/p-system.unhandledexcept_1.vb)]\n [!code-cpp[AppDomain_UnhandledException#1](~/add/codesnippet/cpp/p-system.unhandledexcept_1.cpp)]"
  syntax:
    content: public object ExceptionObject { get; }
    return:
      type: System.Object
      description: "처리 되지 않은 예외 개체입니다."
  overload: System.UnhandledExceptionEventArgs.ExceptionObject*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  id: IsTerminating
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "공용 언어 런타임의 종료 여부를 나타냅니다."
  remarks: ".NET Framework 버전 2.0부터,이 속성은 반환 `true` 대부분에 대 한 버전 1.0 및 1.1의 동작으로 되돌리려면 응용 프로그램 호환성 플래그를 사용 하지 않으면 예외를 처리 합니다. 일반적으로 인해 종료 응용 프로그램의 스레드 풀 스레드를 비롯 한 스레드의 가장 처리 되지 않은 예외 없이 진행 수 있도록 이유에서입니다. 런타임 종료 되지 않는 사례 목록을 비롯 한 자세한 내용은 참조 하십시오. [관리 되는 스레드의 예외](~/add/includes/ajax-current-ext-md.md)합니다.      ## 다음.NET Framework 버전 1.0 및 1.1에 적용 되는 버전 정보:이 속성은 반환 `true` 예외가 이지만 수신 응용 프로그램의 주 스레드에 의해 처리 되지 않습니다. 또한이 속성 반환 `true` 처리 되지 않은 예외를 수신 하는 관리 되지 않는 스레드가 관리 코드를 실행 합니다. 마지막으로,이 속성은 반환 `false` 스레드 풀 스레드 및 버전 1.0 및 1.1 이러한 스레드의에서 처리 되지 않은 예외를 catch 하 고 무시 하기 때문에 응용 프로그램에서 생성 하는 관리 되는 스레드에 대 한 합니다."
  syntax:
    content: public bool IsTerminating { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>런타임의; 종료 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.UnhandledExceptionEventArgs.IsTerminating*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
- uid: System.UnhandledExceptionEventArgs.#ctor*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs
- uid: System.UnhandledExceptionEventArgs.ExceptionObject*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
