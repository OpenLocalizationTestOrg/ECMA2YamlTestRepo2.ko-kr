### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  id: KeyContainerPermissionAccessEntryEnumerator
  children:
  - System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current
  - System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext
  - System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset
  - System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: KeyContainerPermissionAccessEntryEnumerator
  nameWithType: KeyContainerPermissionAccessEntryEnumerator
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  type: Class
  summary: "에 대 한 열거자를 나타냅니다 <xref href=&quot;System.Security.Permissions.KeyContainerPermissionAccessEntry&quot;> </xref> 개체에 <xref href=&quot;System.Security.Permissions.KeyContainerPermissionAccessEntryCollection&quot;> </xref>합니다."
  remarks: "열거자는 컬렉션의에서 데이터를 읽기만 허용 합니다. 내부 컬렉션을 수정 하 여 열거자를 사용할 수 없습니다.       처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다. <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A>메서드도 실행 하면 열거자가이 위치로 복원 합니다.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A> 이 위치에서, 호출 된 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>속성 예외를 throw 합니다.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A> 따라서 호출 해야 합니다는 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>하는 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소를 이동 하는 메서드는 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>속성.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A> </xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>       <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>될 때까지 동일한 개체를 반환 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>또는 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A>호출 됩니다.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A> </xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A></xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A> <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>설정 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>를 다음 요소로.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A></xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>       컬렉션의 끝이 전달 된 후 열거자는 컬렉션의 마지막 요소 뒤에 배치 하 고 호출 되 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>반환 `false`.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A> 마지막으로 호출 하는 경우 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>반환 `false`호출, <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>예외를 throw 합니다.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A> </xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A> <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>컬렉션의 첫 번째 요소에 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A>다음 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A> 호출을</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A> 호출</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A> 하는 다시 설정 하려면       열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다. 예: 추가, 수정 또는 요소를 삭제, 열거자가 복구할 수 없게 무효화 및 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A> <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A> <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> throw</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A> 또는</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A> 을 다음에 호출할 컬렉션 변경 될 경우 사이 컬렉션이 수정 되는 경우 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>및 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>, <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>열거자가 이미 무효로 되 었 하는 경우에 있는 현재 설정 되어, 요소를 반환 합니다.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A> </xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A> </xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>       열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class KeyContainerPermissionAccessEntryEnumerator : System.Collections.IEnumerator
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerator
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current
  id: Current
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.Current
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "컬렉션에서 현재 항목을 가져옵니다."
  remarks: "열거자를 만들 때이를 가리키지 않습니다 되는 개체로, 하므로 현재 속성이 유효 하지 하 고 액세스 하는 경우 예외가 throw 됩니다. 먼저 호출 해야 합니다는 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>메서드를 컬렉션의 첫 번째 개체에 커서를 놓습니다.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>       현재 속성에 대 한 중간 호출으로 여러 번 가져올 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>는 동일한 반환 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntry>때마다 개체.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntry> </xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Security.Permissions.KeyContainerPermissionAccessEntry Current { get; }
    return:
      type: System.Security.Permissions.KeyContainerPermissionAccessEntry
      description: "현재 <xref href=&quot;System.Security.Permissions.KeyContainerPermissionAccessEntry&quot;> </xref> 컬렉션의 개체입니다."
  overload: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "첫 번째 호출 하기 전에 현재 속성에 액세스는 <> </> *> 메서드. 커서는 컬렉션에서 첫 번째 개체 보다 앞에 있습니다.       -또는-The Current 속성에 대 한 호출 후 액세스는 <> </> *> 메서드가 반환 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, 컬렉션의 마지막 개체가 후 커서 위치 임을 나타냅니다."
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext
  id: MoveNext
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.MoveNext()
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "컬렉션의 다음 요소로 이동 합니다."
  remarks: "MoveNext 메서드 반환 `false` 컬렉션에 개체가 없는 경우 즉시 합니다.       MoveNext 반환 `true` 컬렉션의 끝에 도달 하면 될 때까지 합니다. 그런 다음 반환 `false` 각 연속 호출에 대 한 합니다. 그러나 한 번 MoveNext를 반환 했습니다 `false`, 액세스 하는 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>속성 예외를 throw 합니다.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>       만들어지면는 열거자가 첫 번째 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntry>컬렉션과 movenext 첫 번째 호출에서 개체 컬렉션의 첫 번째 개체에 열거자를 놓습니다.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntry>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>열거자를 다음 요소로 이동 성공 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 열거자가 컬렉션의 끝을 통과 하는 경우."
  overload: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset
  id: Reset
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.Reset()
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "열거자는 컬렉션의 시작 부분으로 다시 설정합니다."
  remarks: "열거자 앞 으로만 이동 가능한 방향으로 이동합니다. 이 메서드를 사용 하 여 컬렉션의 시작 부분으로 돌아갑니다.       Reset 메서드는 컬렉션의 첫 번째 개체에 커서를 놓습니다. 재설정을 호출한 후 않아도 호출 하 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>첫 번째 개체에 커서를 앞으로 이동 합니다.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "컬렉션에서 현재 개체를 가져옵니다."
  remarks: "이 메서드를 호출 하지 마십시오 사용 하 여는 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>속성 대신.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "컬렉션에서 현재 개체입니다."
  overload: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: Current
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.Current
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntry
  parent: System.Security.Permissions
  isExternal: false
  name: KeyContainerPermissionAccessEntry
  nameWithType: KeyContainerPermissionAccessEntry
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntry
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.MoveNext()
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: Reset()
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.Reset()
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset()
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System#Collections#IEnumerator#Current
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System.Collections.IEnumerator.Current
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current*
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: Current
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.Current
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext*
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.MoveNext
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset*
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: Reset
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.Reset
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.System.Collections.IEnumerator.Current
