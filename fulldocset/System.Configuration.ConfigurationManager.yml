### YamlMime:ManagedReference
items:
- uid: System.Configuration.ConfigurationManager
  id: ConfigurationManager
  children:
  - System.Configuration.ConfigurationManager.AppSettings
  - System.Configuration.ConfigurationManager.ConnectionStrings
  - System.Configuration.ConfigurationManager.GetSection(System.String)
  - System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  - System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  - System.Configuration.ConfigurationManager.OpenMachineConfiguration
  - System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  - System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  - System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  - System.Configuration.ConfigurationManager.RefreshSection(System.String)
  langs:
  - csharp
  name: ConfigurationManager
  nameWithType: ConfigurationManager
  fullName: System.Configuration.ConfigurationManager
  type: Class
  summary: "클라이언트 응용 프로그램에 대 한 구성 파일에 대 한 액세스를 제공합니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "ConfigurationManager 클래스를 사용 하면 컴퓨터 액세스, 응용 프로그램 및 사용자 구성 정보에 있습니다. 이 클래스는 <xref:System.Configuration.ConfigurationSettings>클래스는 사용 되지 않습니다.</xref:System.Configuration.ConfigurationSettings> 웹 응용 프로그램 <xref:System.Web.Configuration.WebConfigurationManager>클래스</xref:System.Web.Configuration.WebConfigurationManager> 를 사용 합니다.       ConfigurationManager 클래스를 사용 하려면 프로젝트를 참조 해야 합니다는 `System.Configuration` 어셈블리입니다. 기본적으로 콘솔 응용 프로그램 같은 일부 프로젝트 템플릿에서 직접 참조 해야 하므로이 어셈블리를 참조 하지 않습니다.      > [!NOTE] > 이름 및 응용 프로그램 구성 파일의 위치는 응용 프로그램 호스트에 따라 다릅니다. 자세한 내용은 참조 [NIB: 응용 프로그램 구성 파일](http://msdn.microsoft.com/en-us/0d05b1b8-b18b-43d8-bb3c-526ff0c44fe0)합니다.       기본 제공을 사용할 수 있습니다 <xref:System.Configuration>또는 구성 정보를 처리에서 파생 시켜.</xref:System.Configuration> 이러한 형식을 사용 하 여 구성 정보와 직접 협업할 수 및 사용자 지정 정보를 포함 하도록 구성 파일을 확장할 수 있습니다.       다음 작업을 수행할 수 있도록 하는 멤버를 포함 하는 ConfigurationManager 클래스:-구성 파일에서 섹션을 읽습니다. 구성 정보에 액세스 하려면 호출 된 <xref:System.Configuration.ConfigurationManager.GetSection%2A>메서드.</xref:System.Configuration.ConfigurationManager.GetSection%2A> 와 같은 일부 섹션에 대 한 `appSettings` 및 `connectionStrings`를 사용 하 여는 <xref:System.Configuration.ConfigurationManager.AppSettings%2A>및 <xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A>클래스.</xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A> </xref:System.Configuration.ConfigurationManager.AppSettings%2A> 이러한 멤버 읽기 전용 작업을 수행 및는 구성의 단일 캐시 된 인스턴스를 사용 하며 다중 스레드 인식 합니다.      -읽기 및 전체 구성 파일을 작성 합니다. 응용 프로그램 읽고 로컬 또는 원격으로 모든 수준에서 나 다른 응용 프로그램 또는 컴퓨터를 자체에 대 한 구성 설정을 쓸 수 있습니다. ConfigurationManager 클래스에서 제공 하는 방법 중 하나를 사용 하 여 SampleApp.exe.config 같은 구성 파일을 엽니다. 이러한 메서드는 반환 된 <xref:System.Configuration.Configuration>차례로 연결 된 구성 파일을 사용 하는 데 사용할 수는 속성과 메서드를 노출 하는 개체입니다.</xref:System.Configuration.Configuration> 메서드 읽기를 수행 하 고 쓰기 작업 또는 될 때마다 파일에 작성 된 구성 데이터를 만듭니다.      -구성 작업을 지원 합니다. 다음 형식은 다양 한 구성 작업을 지 원하는 데 사용 됩니다:- <xref:System.Configuration.SectionInformation>- <xref:System.Configuration.PropertyInformation>- <xref:System.Configuration.PropertyInformationCollection>- <xref:System.Configuration.ElementInformation>- <xref:System.Configuration.ContextInformation>- <xref:System.Configuration.ConfigurationSectionGroup>- <xref:System.Configuration.ConfigurationSectionGroupCollection>기존 구성 정보를 사용 하는 것 외에도 만들기 및와 같은 기본 제공 구성 형식을 확장 하 여 사용자 지정 구성 요소를 사용할 수는 <xref:System.Configuration.ConfigurationElement>, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>, 및 <xref:System.Configuration.ConfigurationSection>클래스.</xref:System.Configuration.ConfigurationSection> </xref:System.Configuration.ConfigurationProperty> </xref:System.Configuration.ConfigurationElementCollection> </xref:System.Configuration.ConfigurationElement> </xref:System.Configuration.ConfigurationSectionGroupCollection> </xref:System.Configuration.ConfigurationSectionGroup> </xref:System.Configuration.ContextInformation> </xref:System.Configuration.ElementInformation> </xref:System.Configuration.PropertyInformationCollection> </xref:System.Configuration.PropertyInformation> </xref:System.Configuration.SectionInformation> 기본 제공 구성 유형을 프로그래밍 방식으로 확장 하는 방법의 예를 들어 <xref:System.Configuration.ConfigurationSection>.</xref:System.Configuration.ConfigurationSection> 을 참조 하십시오. 특성 기반 모델을 사용 하 여 기본 제공 구성 형식을 확장 하는 방법의 예를 들어 <xref:System.Configuration.ConfigurationElement>.</xref:System.Configuration.ConfigurationElement> 을 참조 하십시오."
  example:
  - "The first example shows a simple console application that reads application settings, adds a new setting, and updates an existing setting.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadAllSettings();  \n            ReadSetting(\"Setting1\");  \n            ReadSetting(\"NotValid\");  \n            AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\");  \n            AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\");  \n            ReadAllSettings();  \n        }  \n  \n        static void ReadAllSettings()  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n  \n                if (appSettings.Count == 0)  \n                {  \n                    Console.WriteLine(\"AppSettings is empty.\");  \n                }  \n                else  \n                {  \n                    foreach (var key in appSettings.AllKeys)  \n                    {  \n                        Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings[key]);  \n                    }  \n                }  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void ReadSetting(string key)  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n                string result = appSettings[key] ?? \"Not Found\";  \n                Console.WriteLine(result);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void AddUpdateAppSettings(string key, string value)  \n        {  \n            try  \n            {  \n                var configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);  \n                var settings = configFile.AppSettings.Settings;  \n                if (settings[key] == null)  \n                {  \n                    settings.Add(key, value);  \n                }  \n                else  \n                {  \n                    settings[key].Value = value;  \n                }  \n                configFile.Save(ConfigurationSaveMode.Modified);  \n                ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error writing app settings\");  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nModule Module1  \n  \n    Sub Main()  \n        ReadAllSettings()  \n        ReadSetting(\"Setting1\")  \n        ReadSetting(\"NotValid\")  \n        AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\")  \n        AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\")  \n        ReadAllSettings()  \n    End Sub  \n  \n    Sub ReadAllSettings()  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n  \n            If appSettings.Count = 0 Then  \n                Console.WriteLine(\"AppSettings is empty.\")  \n            Else  \n                For Each key As String In appSettings.AllKeys  \n                    Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings(key))  \n                Next  \n            End If  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub ReadSetting(key As String)  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n            Dim result As String = appSettings(key)  \n            If IsNothing(result) Then  \n                result = \"Not found\"  \n            End If  \n            Console.WriteLine(result)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub AddUpdateAppSettings(key As String, value As String)  \n        Try  \n            Dim configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)  \n            Dim settings = configFile.AppSettings.Settings  \n            If IsNothing(settings(key)) Then  \n                settings.Add(key, value)  \n            Else  \n                settings(key).Value = value  \n            End If  \n            configFile.Save(ConfigurationSaveMode.Modified)  \n            ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error writing app settings\")  \n        End Try  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config file as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n  <appSettings>  \n    <add key=\"Setting1\" value=\"May 5, 2014\"/>  \n    <add key=\"Setting2\" value=\"May 6, 2014\"/>  \n  </appSettings>  \n</configuration>  \n```  \n  \n The following example shows how to use a connection string to read data from a database.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \nusing System.Data.SqlClient;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadProducts();  \n        }  \n  \n        static void ReadProducts()  \n        {  \n            var connectionString = ConfigurationManager.ConnectionStrings[\"WingtipToys\"].ConnectionString;  \n            string queryString = \"SELECT Id, ProductName FROM dbo.Products;\";  \n            using (var connection = new SqlConnection(connectionString))  \n            {  \n                var command = new SqlCommand(queryString, connection);  \n                connection.Open();  \n                using (var reader = command.ExecuteReader())  \n                {  \n                    while (reader.Read())  \n                    {  \n                        Console.WriteLine(String.Format(\"{0}, {1}\", reader[0], reader[1]));  \n                    }  \n                }  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nImports System.Data.SqlClient  \nModule Module1  \n  \n    Sub Main()  \n        ReadProducts()  \n    End Sub  \n  \n    Sub ReadProducts()  \n        Dim connectionString = ConfigurationManager.ConnectionStrings(\"WingtipToys\").ConnectionString  \n        Dim queryString = \"SELECT Id, ProductName FROM dbo.Products;\"  \n        Using connection As New SqlConnection(connectionString)  \n            Dim command = New SqlCommand(queryString, connection)  \n            connection.Open()  \n  \n            Using reader As SqlDataReader = command.ExecuteReader()  \n                While reader.Read()  \n                    Console.WriteLine(String.Format(\"{0}, {1}\", reader(0), reader(1)))  \n                End While  \n            End Using  \n        End Using  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n    <connectionStrings>  \n      <add name=\"WingtipToys\" connectionString=\"Data Source=(LocalDB)\\v11.0;Initial Catalog=WingtipToys;Integrated Security=True;Pooling=False\" />  \n    </connectionStrings>  \n</configuration>  \n```"
  syntax:
    content: public static class ConfigurationManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.AppSettings
  id: AppSettings
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
  fullName: System.Configuration.ConfigurationManager.AppSettings
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "가져옵니다는 <xref href=&quot;System.Configuration.AppSettingsSection&quot;> </xref> 현재 응용 프로그램의 기본 구성에 대 한 데이터입니다."
  remarks: "A <xref:System.Configuration.AppSettingsSection>개체 구성 파일의 내용을 포함 `appSettings` 섹션.</xref:System.Configuration.AppSettingsSection>"
  example:
  - "The first example shows a simple console application that reads application settings, adds a new setting, and updates an existing setting.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadAllSettings();  \n            ReadSetting(\"Setting1\");  \n            ReadSetting(\"NotValid\");  \n            AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\");  \n            AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\");  \n            ReadAllSettings();  \n        }  \n  \n        static void ReadAllSettings()  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n  \n                if (appSettings.Count == 0)  \n                {  \n                    Console.WriteLine(\"AppSettings is empty.\");  \n                }  \n                else  \n                {  \n                    foreach (var key in appSettings.AllKeys)  \n                    {  \n                        Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings[key]);  \n                    }  \n                }  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void ReadSetting(string key)  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n                string result = appSettings[key] ?? \"Not Found\";  \n                Console.WriteLine(result);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void AddUpdateAppSettings(string key, string value)  \n        {  \n            try  \n            {  \n                var configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);  \n                var settings = configFile.AppSettings.Settings;  \n                if (settings[key] == null)  \n                {  \n                    settings.Add(key, value);  \n                }  \n                else  \n                {  \n                    settings[key].Value = value;  \n                }  \n                configFile.Save(ConfigurationSaveMode.Modified);  \n                ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error writing app settings\");  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nModule Module1  \n  \n    Sub Main()  \n        ReadAllSettings()  \n        ReadSetting(\"Setting1\")  \n        ReadSetting(\"NotValid\")  \n        AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\")  \n        AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\")  \n        ReadAllSettings()  \n    End Sub  \n  \n    Sub ReadAllSettings()  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n  \n            If appSettings.Count = 0 Then  \n                Console.WriteLine(\"AppSettings is empty.\")  \n            Else  \n                For Each key As String In appSettings.AllKeys  \n                    Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings(key))  \n                Next  \n            End If  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub ReadSetting(key As String)  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n            Dim result As String = appSettings(key)  \n            If IsNothing(result) Then  \n                result = \"Not found\"  \n            End If  \n            Console.WriteLine(result)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub AddUpdateAppSettings(key As String, value As String)  \n        Try  \n            Dim configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)  \n            Dim settings = configFile.AppSettings.Settings  \n            If IsNothing(settings(key)) Then  \n                settings.Add(key, value)  \n            Else  \n                settings(key).Value = value  \n            End If  \n            configFile.Save(ConfigurationSaveMode.Modified)  \n            ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error writing app settings\")  \n        End Try  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config file as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n  <appSettings>  \n    <add key=\"Setting1\" value=\"May 5, 2014\"/>  \n    <add key=\"Setting2\" value=\"May 6, 2014\"/>  \n  </appSettings>  \n</configuration>  \n```"
  syntax:
    content: public static System.Collections.Specialized.NameValueCollection AppSettings { get; }
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: "반환 된 <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> 개체의 내용을 포함 하는 <xref href=&quot;System.Configuration.AppSettingsSection&quot;> </xref> 현재 응용 프로그램의 기본 구성에 대 한 개체입니다."
  overload: System.Configuration.ConfigurationManager.AppSettings*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "검색할 수 없습니다는 <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> 응용 프로그램 설정 데이터가 들어 있는 개체입니다."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.ConnectionStrings
  id: ConnectionStrings
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
  fullName: System.Configuration.ConfigurationManager.ConnectionStrings
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "가져옵니다는 <xref href=&quot;System.Configuration.ConnectionStringsSection&quot;> </xref> 현재 응용 프로그램의 기본 구성에 대 한 데이터입니다."
  remarks: "A <xref:System.Configuration.ConnectionStringsSection>개체 구성 파일의 내용을 포함 `connectionStrings` 섹션.</xref:System.Configuration.ConnectionStringsSection>"
  example:
  - "The following example shows how to use a connection string to read data from a database.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \nusing System.Data.SqlClient;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadProducts();  \n        }  \n  \n        static void ReadProducts()  \n        {  \n            var connectionString = ConfigurationManager.ConnectionStrings[\"WingtipToys\"].ConnectionString;  \n            string queryString = \"SELECT Id, ProductName FROM dbo.Products;\";  \n            using (var connection = new SqlConnection(connectionString))  \n            {  \n                var command = new SqlCommand(queryString, connection);  \n                connection.Open();  \n                using (var reader = command.ExecuteReader())  \n                {  \n                    while (reader.Read())  \n                    {  \n                        Console.WriteLine(String.Format(\"{0}, {1}\", reader[0], reader[1]));  \n                    }  \n                }  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nImports System.Data.SqlClient  \nModule Module1  \n  \n    Sub Main()  \n        ReadProducts()  \n    End Sub  \n  \n    Sub ReadProducts()  \n        Dim connectionString = ConfigurationManager.ConnectionStrings(\"WingtipToys\").ConnectionString  \n        Dim queryString = \"SELECT Id, ProductName FROM dbo.Products;\"  \n        Using connection As New SqlConnection(connectionString)  \n            Dim command = New SqlCommand(queryString, connection)  \n            connection.Open()  \n  \n            Using reader As SqlDataReader = command.ExecuteReader()  \n                While reader.Read()  \n                    Console.WriteLine(String.Format(\"{0}, {1}\", reader(0), reader(1)))  \n                End While  \n            End Using  \n        End Using  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n    <connectionStrings>  \n      <add name=\"WingtipToys\" connectionString=\"Data Source=(LocalDB)\\v11.0;Initial Catalog=WingtipToys;Integrated Security=True;Pooling=False\" />  \n    </connectionStrings>  \n</configuration>  \n```"
  syntax:
    content: public static System.Configuration.ConnectionStringSettingsCollection ConnectionStrings { get; }
    return:
      type: System.Configuration.ConnectionStringSettingsCollection
      description: "반환 된 <xref href=&quot;System.Configuration.ConnectionStringSettingsCollection&quot;> </xref> 개체의 내용을 포함 하는 <xref href=&quot;System.Configuration.ConnectionStringsSection&quot;> </xref> 현재 응용 프로그램의 기본 구성에 대 한 개체입니다."
  overload: System.Configuration.ConfigurationManager.ConnectionStrings*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "검색할 수 없습니다는 <xref href=&quot;System.Configuration.ConnectionStringSettingsCollection&quot;> </xref> 개체입니다."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.GetSection(System.String)
  id: GetSection(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: GetSection(String)
  nameWithType: ConfigurationManager.GetSection(String)
  fullName: System.Configuration.ConfigurationManager.GetSection(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "현재 응용 프로그램의 기본 구성에 지정 된 구성 섹션을 검색합니다."
  remarks: "클라이언트 응용 프로그램의 경우이 메서드는 응용 프로그램 구성 파일, 로컬 사용자 구성 파일 및 로밍 구성 파일을 병합 하 여 구성 파일을 검색 합니다.       GetSection 메서드 변경할 수 없는 런타임 구성 정보에 액세스 합니다. 구성을 변경 하려면 사용 된 <xref:System.Configuration.Configuration.GetSection%2A>열린 다음 방법 중 하나를 사용 하 여 가져올 구성 파일에서 메서드:- <xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A></xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A> </xref:System.Configuration.Configuration.GetSection%2A>"
  example:
  - "The following example shows how to use the GetSection method. The example is part of a larger example that is provided for the <xref:System.Configuration.ConfigurationManager> class.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#7](~/add/codesnippet/csharp/m-system.configuration.c_14_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#7](~/add/codesnippet/visualbasic/m-system.configuration.c_14_1.vb)]"
  syntax:
    content: public static object GetSection (string sectionName);
    parameters:
    - id: sectionName
      type: System.String
      description: "구성 섹션 경로 이름입니다."
    return:
      type: System.Object
      description: "지정 된 <xref href=&quot;System.Configuration.ConfigurationSection&quot;> </xref> 개체 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 섹션이 존재 하지 않습니다."
  overload: System.Configuration.ConfigurationManager.GetSection*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "구성 파일을 로드할 수 없습니다."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  id: OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenExeConfiguration(ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "현재 응용 프로그램에 대 한 구성 파일을 열고는 <xref href=&quot;System.Configuration.Configuration&quot;> </xref> 개체입니다."
  remarks: "클라이언트 응용 프로그램에는 모든 사용자, 개별 사용자에 게 적용 되는 별도 구성 및 로밍 사용자에 게 적용 되는 구성에 적용 되는 전역 구성을 사용 합니다. `userLevel` (구성 파일은 응용 프로그램과 같은 디렉터리에) 사용자 수준이 없는지 여부를 지정 하 여 열리는 구성 파일의 위치를 결정 하는 매개 변수는 사용자 단위 수준이 (구성 파일에 응용 프로그램 설정 경로 사용자 수준에 따라 결정) 또는 합니다.       다음 중 하나를 전달 하 여 가져올 구성에 대 한 값 지정 `userLevel`:-가져오려는 <xref:System.Configuration.Configuration>모든 사용자에 게 적용 되는 개체가 설정 `userLevel` <xref:System.Configuration.ConfigurationUserLevel>.</xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration>      -가져오려는 로컬 <xref:System.Configuration.Configuration>현재 사용자에 적용 되는 개체가 설정 `userLevel` <xref:System.Configuration.ConfigurationUserLevel>.</xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration>      -가져오려는 로밍 <xref:System.Configuration.Configuration>현재 사용자에 적용 되는 개체가 설정 `userLevel` <xref:System.Configuration.ConfigurationUserLevel>.</xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration>          > [!NOTE] > 가져오려는 <xref:System.Configuration.Configuration>개체는 리소스에 대 한 읽기 권한이 설정 상속 된 모든 구성 파일에 코드에 있어야 합니다.</xref:System.Configuration.Configuration> 구성 파일을 업데이트 하려면 구성 파일과에 존재 하는 디렉터리에 대 한 쓰기 권한이 또한으로 코드에 있어야 합니다."
  example:
  - "The following code example shows how to use the OpenExeConfiguration method.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#5](~/add/codesnippet/csharp/3eb7bc6f-f763-4df6-a789-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#5](~/add/codesnippet/visualbasic/3eb7bc6f-f763-4df6-a789-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenExeConfiguration (System.Configuration.ConfigurationUserLevel userLevel);
    parameters:
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "<xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref> 구성을 열고 합니다."
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "구성 파일을 로드할 수 없습니다."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  id: OpenExeConfiguration(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenExeConfiguration(String)
  nameWithType: ConfigurationManager.OpenExeConfiguration(String)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "로 지정 된 클라이언트 구성 파일을 열고는 <xref href=&quot;System.Configuration.Configuration&quot;> </xref> 개체입니다."
  remarks: "클라이언트 응용 프로그램에는 모든 사용자, 개별 사용자에 게 적용 되는 별도 구성 및 로밍 사용자에 게 적용 되는 구성에 적용 되는 전역 구성을 사용 합니다. `userLevel` 열리는 구성 파일의 위치를 결정 하는 값입니다. 그 여부를 나타냅니다 (구성 파일은 응용 프로그램과 같은 디렉터리에) 없는 사용자 수준에는 사용자 단위 수준 (구성 파일은 응용 프로그램 설정 경로 사용자 수준 형식에 의해 결정 됩니다.) 또는 합니다.       이 메서드 오버 로드를 호출 하는 것은 <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%28System.Configuration.ExeConfigurationFileMap%2CSystem.Configuration.ConfigurationUserLevel%2CSystem.Boolean%29>오버 로드는 `preLoad` 매개 변수 설정 `false`.</xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%28System.Configuration.ExeConfigurationFileMap%2CSystem.Configuration.ConfigurationUserLevel%2CSystem.Boolean%29>"
  example:
  - "The following code example shows how to use the OpenExeConfiguration method.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#6](~/add/codesnippet/csharp/m-system.configuration.c_28_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#6](~/add/codesnippet/visualbasic/m-system.configuration.c_28_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenExeConfiguration (string exePath);
    parameters:
    - id: exePath
      type: System.String
      description: "실행 (exe) 파일의 경로입니다."
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "구성 파일을 로드할 수 없습니다."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration
  id: OpenMachineConfiguration
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMachineConfiguration()
  nameWithType: ConfigurationManager.OpenMachineConfiguration()
  fullName: System.Configuration.ConfigurationManager.OpenMachineConfiguration()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "현재 컴퓨터에서 컴퓨터 구성 파일을 엽니다는 <xref href=&quot;System.Configuration.Configuration&quot;> </xref> 개체입니다."
  remarks: "Machine configuration settings apply to the whole computer and all applications that reside on it, unless overridden for the local application. Machine configuration settings are read from the Machine.config file of the currently running version of the .NET Framework. The Machine.config file is located in the following subdirectory:  \n  \n *%windir%*\\Microsoft.NET\\Framework\\\\*version*\\config  \n  \n> [!NOTE]\n>  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists. It is not possible to access the Machine.config file for other versions of the .NET Framework that might be installed on the computer."
  example:
  - "The following code example shows how to use the OpenMachineConfiguration method to obtain all sections that are contained in the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#4](~/add/codesnippet/csharp/m-system.configuration.c_32_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#4](~/add/codesnippet/visualbasic/m-system.configuration.c_32_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMachineConfiguration ();
    parameters: []
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenMachineConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "구성 파일을 로드할 수 없습니다."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  id: OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "로 지정 된 클라이언트 구성 파일을 열고는 <xref href=&quot;System.Configuration.Configuration&quot;> </xref> 지정된 된 파일 매핑 및 사용자 수준을 사용 하는 개체입니다."
  remarks: "<xref:System.Configuration.ConfigurationUserLevel>열리는 구성 파일의 위치를 결정 하는 개체입니다.</xref:System.Configuration.ConfigurationUserLevel> 파일에 없는 사용자 수준 (구성 파일은 응용 프로그램과 같은 디렉터리에)에 있는지 여부를 나타냅니다 아니면 사용자 단위 수준이 (구성 파일이 응용 프로그램 설정 경로 의해 결정 된 `userLevel`).      > [!NOTE] > 얻으려고는 <xref:System.Configuration.Configuration>개체는 리소스에 대 한 읽기 권한이 설정 상속 된 모든 구성 파일에 코드에 있어야 합니다.</xref:System.Configuration.Configuration> 구성 파일을 업데이트 하려면 구성 파일과에 존재 하는 디렉터리에 대 한 쓰기 권한이 또한으로 코드에 있어야 합니다."
  example:
  - "The following code example shows how to use the OpenMappedExeConfiguration method to obtain all sections that are contained by the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#9](~/add/codesnippet/csharp/3a231caa-8bb5-4e8b-a7ef-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#9](~/add/codesnippet/visualbasic/3a231caa-8bb5-4e8b-a7ef-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedExeConfiguration (System.Configuration.ExeConfigurationFileMap fileMap, System.Configuration.ConfigurationUserLevel userLevel);
    parameters:
    - id: fileMap
      type: System.Configuration.ExeConfigurationFileMap
      description: "<xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref> 응용 프로그램 기본 구성 파일 대신 사용할 구성 파일을 참조 하는 개체입니다."
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "<xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref> 구성을 열고 개체입니다."
    return:
      type: System.Configuration.Configuration
      description: "구성 개체입니다."
  overload: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "구성 파일을 로드할 수 없습니다."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  id: OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "로 지정 된 클라이언트 구성 파일을 열고는 <xref href=&quot;System.Configuration.Configuration&quot;> </xref> 지정 된 파일 매핑, 사용자 수준 및 미리 로드 옵션을 사용 하는 개체입니다."
  remarks: "<xref:System.Configuration.ConfigurationUserLevel>개체는 구성 파일의 위치를 결정 합니다.</xref:System.Configuration.ConfigurationUserLevel> 파일에 없는 사용자 수준 (구성 파일은 응용 프로그램과 같은 디렉터리에)에 있는지 여부를 나타냅니다 아니면 사용자 단위 수준이 (구성 파일은에 의해 결정 되는 응용 프로그램 설정 경로 `userLevel`).      > [!NOTE] > 얻으려고는 <xref:System.Configuration.Configuration>개체는 리소스에 대 한 읽기 권한이 설정 상속 된 모든 구성 파일에 코드에 있어야 합니다.</xref:System.Configuration.Configuration> 구성 파일을 업데이트 하려면 구성 파일과에 존재 하는 디렉터리에 대 한 쓰기 권한이 또한으로 코드에 있어야 합니다.       코드 예제를 참조 하십시오.는 <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>오버 로드.</xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedExeConfiguration (System.Configuration.ExeConfigurationFileMap fileMap, System.Configuration.ConfigurationUserLevel userLevel, bool preLoad);
    parameters:
    - id: fileMap
      type: System.Configuration.ExeConfigurationFileMap
      description: "<xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref> 기본 응용 프로그램 구성 파일 대신 사용할 구성 파일을 참조 하는 개체입니다."
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "<xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref> 구성을 열고 개체입니다."
    - id: preLoad
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>모든 섹션 그룹 및 섹션을 미리 로드 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Configuration.Configuration
      description: "구성 개체입니다."
  overload: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "구성 파일을 로드할 수 없습니다."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  id: OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedMachineConfiguration(ConfigurationFileMap)
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  fullName: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "컴퓨터 구성 파일을 엽니다는 <xref href=&quot;System.Configuration.Configuration&quot;> </xref> 지정된 된 파일 매핑을 사용 하는 개체입니다."
  remarks: "Machine configuration settings apply to the whole computer and all applications that reside on it, unless overridden for the local application. Machine configuration settings are read from the Machine.config file of the currently running version of the .NET Framework. The Machine.config file is located in the following subdirectory:  \n  \n *%windir%*\\Microsoft.NET\\Framework\\\\*version*\\config  \n  \n> [!NOTE]\n>  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists. It is not possible to access the Machine.config file for other versions of the .NET Framework that might be installed on the computer."
  example:
  - "The following code example shows how to use the OpenMappedMachineConfiguration method to obtain all sections in the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#4](~/add/codesnippet/csharp/b514431f-be81-4b1e-b58c-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#4](~/add/codesnippet/visualbasic/b514431f-be81-4b1e-b58c-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedMachineConfiguration (System.Configuration.ConfigurationFileMap fileMap);
    parameters:
    - id: fileMap
      type: System.Configuration.ConfigurationFileMap
      description: "<xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref> 응용 프로그램 기본 구성 파일 대신 사용할 구성 파일을 참조 하는 개체입니다."
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "구성 파일을 로드할 수 없습니다."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.RefreshSection(System.String)
  id: RefreshSection(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: RefreshSection(String)
  nameWithType: ConfigurationManager.RefreshSection(String)
  fullName: System.Configuration.ConfigurationManager.RefreshSection(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "명명된 된 섹션을 새로 고쳐서 다음에 검색 된 디스크에서 다시 읽도록 합니다."
  remarks: "이 메서드는 다른 섹션에 영향을 주지 않고 지정된 된 구성 섹션에 대 한 캐시를 무효화 합니다."
  example:
  - "The following code example shows how to use the RefreshSection method to refresh the application settings configuration section.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#7](~/add/codesnippet/csharp/m-system.configuration.c_34_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#7](~/add/codesnippet/visualbasic/m-system.configuration.c_34_1.vb)]"
  syntax:
    content: public static void RefreshSection (string sectionName);
    parameters:
    - id: sectionName
      type: System.String
      description: "구성 섹션 이름 이거나 새로 고칠 섹션의 구성 경로 및 섹션 이름입니다."
  overload: System.Configuration.ConfigurationManager.RefreshSection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Configuration.ConfigurationManager.AppSettings
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
  fullName: System.Configuration.ConfigurationManager.AppSettings
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Configuration.ConfigurationManager.ConnectionStrings
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
  fullName: System.Configuration.ConfigurationManager.ConnectionStrings
- uid: System.Configuration.ConnectionStringSettingsCollection
  parent: System.Configuration
  isExternal: false
  name: ConnectionStringSettingsCollection
  nameWithType: ConnectionStringSettingsCollection
  fullName: System.Configuration.ConnectionStringSettingsCollection
- uid: System.Configuration.ConfigurationManager.GetSection(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: GetSection(String)
  nameWithType: ConfigurationManager.GetSection(String)
  fullName: System.Configuration.ConfigurationManager.GetSection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration(ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
- uid: System.Configuration.Configuration
  parent: System.Configuration
  isExternal: false
  name: Configuration
  nameWithType: Configuration
  fullName: System.Configuration.Configuration
- uid: System.Configuration.ConfigurationUserLevel
  parent: System.Configuration
  isExternal: false
  name: ConfigurationUserLevel
  nameWithType: ConfigurationUserLevel
  fullName: System.Configuration.ConfigurationUserLevel
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration(String)
  nameWithType: ConfigurationManager.OpenExeConfiguration(String)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(String)
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMachineConfiguration()
  nameWithType: ConfigurationManager.OpenMachineConfiguration()
  fullName: System.Configuration.ConfigurationManager.OpenMachineConfiguration()
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
- uid: System.Configuration.ExeConfigurationFileMap
  parent: System.Configuration
  isExternal: false
  name: ExeConfigurationFileMap
  nameWithType: ExeConfigurationFileMap
  fullName: System.Configuration.ExeConfigurationFileMap
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedMachineConfiguration(ConfigurationFileMap)
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  fullName: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
- uid: System.Configuration.ConfigurationFileMap
  parent: System.Configuration
  isExternal: false
  name: ConfigurationFileMap
  nameWithType: ConfigurationFileMap
  fullName: System.Configuration.ConfigurationFileMap
- uid: System.Configuration.ConfigurationManager.RefreshSection(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: RefreshSection(String)
  nameWithType: ConfigurationManager.RefreshSection(String)
  fullName: System.Configuration.ConfigurationManager.RefreshSection(String)
- uid: System.Configuration.ConfigurationManager.AppSettings*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
- uid: System.Configuration.ConfigurationManager.ConnectionStrings*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
- uid: System.Configuration.ConfigurationManager.GetSection*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: GetSection
  nameWithType: ConfigurationManager.GetSection
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration
  nameWithType: ConfigurationManager.OpenExeConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMachineConfiguration
  nameWithType: ConfigurationManager.OpenMachineConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedMachineConfiguration
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration
- uid: System.Configuration.ConfigurationManager.RefreshSection*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: RefreshSection
  nameWithType: ConfigurationManager.RefreshSection
