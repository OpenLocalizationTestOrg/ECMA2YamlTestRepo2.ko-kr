### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlDataDocument
  id: XmlDataDocument
  children:
  - System.Xml.XmlDataDocument.#ctor
  - System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  - System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  - System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  - System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  - System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  - System.Xml.XmlDataDocument.DataSet
  - System.Xml.XmlDataDocument.GetElementById(System.String)
  - System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  - System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  - System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  - System.Xml.XmlDataDocument.Load(System.IO.Stream)
  - System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  - System.Xml.XmlDataDocument.Load(System.String)
  - System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  langs:
  - csharp
  name: XmlDataDocument
  nameWithType: XmlDataDocument
  fullName: System.Xml.XmlDataDocument
  type: Class
  summary: "구조화 된 데이터를 저장, 검색 및 관계형 통해 조작 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  remarks: "이 클래스 확장 <xref:System.Xml.XmlDocument>.</xref:System.Xml.XmlDocument> 관계형 데이터 또는 XML 데이터 로드를 World Wide Web Consortium (W3C) 문서 개체 모델 (DOM)를 사용 하 여 해당 데이터를 조작할 수 있습니다. DOM 노드 개체의 계층으로 데이터를 표시합니다. 때문에 `XmlDataDocument` 구현 하는 <xref:System.Xml.XPath.IXPathNavigable>인터페이스에도 사용할 수 있습니다 소스 문서로 <xref:System.Xml.Xsl.XslTransform>클래스</xref:System.Xml.Xsl.XslTransform> 에 대 한</xref:System.Xml.XPath.IXPathNavigable>       `XmlDataDocument`닫기는 정보에는 `DataSet` 로드 된 XML 데이터의 관계형 뷰를 제공 하는 클래스입니다. 변경 내용이 `XmlDataDocument` 에 반영 되는 `DataSet` 그 반대의 합니다.       로드 하는 `DataSet` XML 데이터와 함께 사용 하 여 <xref:System.Data.DataSet.ReadXmlSchema%2A>관계형 매핑을 만들려는.</xref:System.Data.DataSet.ReadXmlSchema%2A> XML 데이터 로드 <xref:System.Xml.XmlDataDocument.Load%2A>또는 <xref:System.Xml.XmlDocument.LoadXml%2A>.</xref:System.Xml.XmlDocument.LoadXml%2A> </xref:System.Xml.XmlDataDocument.Load%2A> 사용 하 여       관계형 데이터를 로드 하려면 지정 된 `DataSet` 에서 매개 변수로 관계형 데이터를 포함 하는 <xref:System.Xml.XmlDataDocument.%23ctor%2A>생성자.</xref:System.Xml.XmlDataDocument.%23ctor%2A>"
  syntax:
    content: >-
      [System.Obsolete("XmlDataDocument class will be removed in a future release.")]

      public class XmlDataDocument : System.Xml.XmlDocument
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  - System.Xml.XmlDocument
  implements: []
  inheritedMembers:
  - System.Xml.XmlDocument.BaseURI
  - System.Xml.XmlDocument.CreateAttribute(System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateCDataSection(System.String)
  - System.Xml.XmlDocument.CreateComment(System.String)
  - System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateDocumentFragment
  - System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String)
  - System.Xml.XmlDocument.CreateNavigator
  - System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  - System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  - System.Xml.XmlDocument.CreateTextNode(System.String)
  - System.Xml.XmlDocument.CreateWhitespace(System.String)
  - System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  - System.Xml.XmlDocument.DocumentElement
  - System.Xml.XmlDocument.DocumentType
  - System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  - System.Xml.XmlDocument.Implementation
  - System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  - System.Xml.XmlDocument.InnerText
  - System.Xml.XmlDocument.InnerXml
  - System.Xml.XmlDocument.IsReadOnly
  - System.Xml.XmlDocument.LoadXml(System.String)
  - System.Xml.XmlDocument.LocalName
  - System.Xml.XmlDocument.Name
  - System.Xml.XmlDocument.NameTable
  - System.Xml.XmlDocument.NodeChanged
  - System.Xml.XmlDocument.NodeChanging
  - System.Xml.XmlDocument.NodeInserted
  - System.Xml.XmlDocument.NodeInserting
  - System.Xml.XmlDocument.NodeRemoved
  - System.Xml.XmlDocument.NodeRemoving
  - System.Xml.XmlDocument.NodeType
  - System.Xml.XmlDocument.OwnerDocument
  - System.Xml.XmlDocument.ParentNode
  - System.Xml.XmlDocument.PreserveWhitespace
  - System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  - System.Xml.XmlDocument.Save(System.IO.Stream)
  - System.Xml.XmlDocument.Save(System.IO.TextWriter)
  - System.Xml.XmlDocument.Save(System.String)
  - System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.SchemaInfo
  - System.Xml.XmlDocument.Schemas
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  - System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.XmlResolver
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NamespaceURI
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.Prefix
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.#ctor
  id: '#ctor'
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: XmlDataDocument()
  nameWithType: XmlDataDocument.XmlDataDocument()
  fullName: System.Xml.XmlDataDocument.XmlDataDocument()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref> 클래스입니다."
  remarks: "빈 <xref:System.Data.DataSet>생성 되 고 연결 된는 `XmlDataDocument`.</xref:System.Data.DataSet>"
  syntax:
    content: public XmlDataDocument ();
    parameters: []
  overload: System.Xml.XmlDataDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  id: '#ctor(System.Data.DataSet)'
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: XmlDataDocument(DataSet)
  nameWithType: XmlDataDocument.XmlDataDocument(DataSet)
  fullName: System.Xml.XmlDataDocument.XmlDataDocument(DataSet)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref> 지정된 된 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  remarks: "`XmlDataDocument` 동기화가 지정 된 `DataSet`합니다. 모든 데이터는 `DataSet` 를 통해 즉시 사용할 수는 `XmlDataDocument`합니다. 모든 변경 내용을 `DataSet` 에 전파는 `XmlDataDocument`합니다. 변경한 내용은 `XmlDataDocument`일치 하는 제공는 `DataSet` 스키마에 전파는 `DataSet`합니다."
  example:
  - "The following example loads a customer table into an `XmlDataDocument`.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_0_1.cpp)]\n [!code-cs[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_0_1.cs)]\n [!code-vb[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_0_1.vb)]"
  syntax:
    content: public XmlDataDocument (System.Data.DataSet dataset);
    parameters:
    - id: dataset
      type: System.Data.DataSet
      description: "The <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref> to load into <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDataDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlDataDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDataDocument.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "현재 노드의 복제본을 만듭니다."
  remarks: "복제는 `XmlDataDocument` 도 복제는 <xref:System.Data.DataSet>스키마.</xref:System.Data.DataSet>       경우 `deep` 로 설정 된 `false`, 복제 된 `DataSet` 에 있는 데이터가 없습니다;이, 행이 없습니다.       경우 `deep` 로 설정 된 `true`, 복제 된 `DataSet` 스키마로 설정 되 고 데이터로 채워집니다.       참조 <xref:System.Xml.XmlNode.CloneNode%2A>에 `XmlNode` 이 메서드를 다른 노드 형식을 사용 하는 방법을 설명 하는 테이블을 표시 하는 클래스입니다.</xref:System.Xml.XmlNode.CloneNode%2A>"
  example:
  - "The following example loads a `DataSet` into an `XmlDataDocument` and then creates a shallow clone of the `XmlDataDocument`.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_4_1.cpp)]\n [!code-vb[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_4_1.vb)]\n [!code-cs[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_4_1.cs)]"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정된 된 노드 아래의 하위 트리를 재귀적으로를 복제. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 노드 자체만 복제 하려면."
    return:
      type: System.Xml.XmlNode
      description: "복제 된 노드입니다."
  overload: System.Xml.XmlDataDocument.CloneNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  id: CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateElement(String,String,String)
  nameWithType: XmlDataDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDataDocument.CreateElement(String,String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "지정 된 요소를 만듭니다 <> </> *>, <> </> *>, 및 <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "`Note to Inheritors`이 함수를 오버 로드 하는 경우에 확장성을 위해 사용할 수 없습니다. 대신,이 경우 기본 클래스에서 만든 요소를 반환할 수 있습니다 `XmlDataDocument`합니다. 다음 예를 참조하십시오.      ```   class MyXmlDataDocument : XmlDataDocument {    public override XmlElement CreateElement(string prefix, string localName, string nsURI) {      //Ensure we are returning the base class implementation of element.      XmlElement e = base.CreateElement(prefix, localName, nsURI);      //Add additional code here.      return e;    //Return the element created by XmlDataDocument.    }       }   ```"
  syntax:
    content: public override System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "새 요소의 접두사입니다. 경우 String.Empty 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, 접두사가 없는 합니다."
    - id: localName
      type: System.String
      description: "새 요소의 로컬 이름입니다."
    - id: namespaceURI
      type: System.String
      description: "네임 스페이스 식별자 URI (Uniform Resource) 새 요소입니다. 경우 String.Empty 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, 없습니다 namespaceURI는 합니다."
    return:
      type: System.Xml.XmlElement
      description: "A new <xref href=&quot;System.Xml.XmlElement&quot;></xref>."
  overload: System.Xml.XmlDataDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  id: CreateEntityReference(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateEntityReference(String)
  nameWithType: XmlDataDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDataDocument.CreateEntityReference(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "만듭니다는 <xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref> 지정 된 이름입니다."
  remarks: "<xref:System.Xml.XmlEntityReference>에 대 한 노드를 만들 수 없습니다 <xref:System.Xml.XmlDataDocument>개체입니다.</xref:System.Xml.XmlDataDocument></xref:System.Xml.XmlEntityReference> 이 메서드를 호출 하면 예외가 throw 됩니다."
  syntax:
    content: public override System.Xml.XmlEntityReference CreateEntityReference (string name);
    parameters:
    - id: name
      type: System.String
      description: "엔터티 참조의 이름입니다."
    return:
      type: System.Xml.XmlEntityReference
      description: "<xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref> 지정 된 이름입니다."
  overload: System.Xml.XmlDataDocument.CreateEntityReference*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "이 메서드를 호출 합니다."
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  id: CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDataDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDataDocument.CreateNavigator(XmlNode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "새 <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> 이 문서를 탐색 하기 위한 개체입니다. <xref uid=&quot;langword_csharp_XPathNavigator&quot; name=&quot;XPathNavigator&quot; href=&quot;&quot;> </xref> 에 지정 된 노드에 배치는 <code> node </code> 매개 변수입니다."
  remarks: "`XPathNavigator` 읽기 전용, 임의 데이터 액세스를 제공 합니다. 한 입력된 메커니즘으로 사용 될 때 성능 이점을 제공 XSLT 변형에 최적화 되어는 <xref:System.Xml.Xsl.XslTransform.Transform%2A>메서드.</xref:System.Xml.Xsl.XslTransform.Transform%2A>"
  example:
  - To see an XSLT transformation using `XmlDataDocument` and an `XPathNavigator`, see the <xref:System.Xml.Xsl.XslTransform.Transform%2A?displayProperty=fullName> method.
  syntax:
    content: protected override System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref> 탐색기를 처음에 배치 합니다."
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "<xref uid=&quot;langword_csharp_XPathNavigator&quot; name=&quot;XPathNavigator&quot; href=&quot;&quot;> </xref> 는 문서를 탐색 하는 데 사용 합니다."
  overload: System.Xml.XmlDataDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.DataSet
  id: DataSet
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
  fullName: System.Xml.XmlDataDocument.DataSet
  type: Property
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "가져옵니다는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 에 있는 데이터의 관계형 표현을 제공 하는 <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref>합니다."
  remarks: "`DataSet` 데이터에 액세스할 수 있습니다는 `XmlDataDocument` 관계형 모델을 사용 합니다. 테이블, 뷰, 행 및 열, 관계 등으로 데이터를 처리 하 고 등 수 있다는 의미 합니다. 변경한 내용은 `DataSet` 에서 바로 볼 수는 `XmlDataDocument`합니다."
  example:
  - "The following example modifies the price of a book using the `DataSet` methods.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/cpp/p-system.xml.xmldatadocu_1.cpp)]\n [!code-cs[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/csharp/p-system.xml.xmldatadocu_1.cs)]\n [!code-vb[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldatadocu_1.vb)]  \n  \n The example uses the following two files as input.  \n  \n `2books.xml`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/add/codesnippet/xml/p-system.xml.xmldatadocu_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/add/codesnippet/xml/p-system.xml.xmldatadocu_3.xml)]"
  syntax:
    content: public System.Data.DataSet DataSet { get; }
    return:
      type: System.Data.DataSet
      description: "A <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> 데이터에 액세스 하는 데 사용 하는 <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> 관계형 모델을 사용 합니다."
  overload: System.Xml.XmlDataDocument.DataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementById(System.String)
  id: GetElementById(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementById(String)
  nameWithType: XmlDataDocument.GetElementById(String)
  fullName: System.Xml.XmlDataDocument.GetElementById(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "가져옵니다는 <xref href=&quot;System.Xml.XmlElement&quot;> </xref> 에 지정 된 id 이 메서드는에서 지원 되지 않습니다는 <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref> 클래스입니다. 이 메서드를 호출 하면 예외가 throw 됩니다."
  remarks: "이 메서드는 <xref:System.Xml.XmlDataDocument>클래스</xref:System.Xml.XmlDataDocument> 에서 지원 되지 않습니다."
  syntax:
    content: public override System.Xml.XmlElement GetElementById (string elemId);
    parameters:
    - id: elemId
      type: System.String
      description: "일치 시킬 특성 ID입니다."
    return:
      type: System.Xml.XmlElement
      description: "<xref href=&quot;System.Xml.XmlElement&quot;> </xref> 에 지정 된 id"
  overload: System.Xml.XmlDataDocument.GetElementById*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "이 메서드를 호출 합니다."
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  id: GetElementFromRow(System.Data.DataRow)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementFromRow(DataRow)
  nameWithType: XmlDataDocument.GetElementFromRow(DataRow)
  fullName: System.Xml.XmlDataDocument.GetElementFromRow(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "검색 된 <xref href=&quot;System.Xml.XmlElement&quot;> </xref> 지정 된 연결 된 <xref href=&quot;System.Data.DataRow&quot;> </xref>합니다."
  remarks: ''
  example:
  - "The following example loads a `DataSet` into an `XmlDataDocument` and then creates an `XmlElement` representing the first customer record.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cs[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_1_1.cs)]\n [!code-cpp[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_1_1.cpp)]\n [!code-vb[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_1_1.vb)]"
  syntax:
    content: public System.Xml.XmlElement GetElementFromRow (System.Data.DataRow r);
    parameters:
    - id: r
      type: System.Data.DataRow
      description: "<xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> 인 관련 <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> 검색할 합니다."
    return:
      type: System.Xml.XmlElement
      description: "<xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> 의 지정 된 표현이 포함 된 <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xml.XmlDataDocument.GetElementFromRow*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: XmlDataDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDataDocument.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "반환 된 <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> <xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*> 지정 된 일치 하는 모든 하위 요소의 목록이 포함 된"
  remarks: >-
    > [!NOTE]

    >  It is recommended that you use the <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName> or <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> method instead of the GetElementsByTagName method.
  syntax:
    content: public override System.Xml.XmlNodeList GetElementsByTagName (string name);
    parameters:
    - id: name
      type: System.String
      description: "일치 시킬 정규화 된 이름입니다. 일치는 <> </> *> 일치 하는 노드의 속성입니다. 특수 값 &quot;*&quot; 모든 태그와 일치 합니다."
    return:
      type: System.Xml.XmlNodeList
      description: "<xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> 일치 하는 모든 노드 목록이 포함 된 합니다."
  overload: System.Xml.XmlDataDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  id: GetRowFromElement(System.Xml.XmlElement)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetRowFromElement(XmlElement)
  nameWithType: XmlDataDocument.GetRowFromElement(XmlElement)
  fullName: System.Xml.XmlDataDocument.GetRowFromElement(XmlElement)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "검색 된 <xref href=&quot;System.Data.DataRow&quot;> </xref> 지정 된 연결 된 <xref href=&quot;System.Xml.XmlElement&quot;> </xref>합니다."
  remarks: ''
  example:
  - "The following example modifies the price of the first book.  \n  \n [!code-cs[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_2_1.cs)]\n [!code-cpp[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_2_1.cpp)]\n [!code-vb[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_2_1.vb)]  \n  \n The example uses the following input files:  \n  \n `2books.xml`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/add/codesnippet/xml/m-system.xml.xmldatadocu_2_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/add/codesnippet/xml/m-system.xml.xmldatadocu_2_3.xml)]"
  syntax:
    content: public System.Data.DataRow GetRowFromElement (System.Xml.XmlElement e);
    parameters:
    - id: e
      type: System.Xml.XmlElement
      description: "<xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> 인 관련 <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> 검색할 합니다."
    return:
      type: System.Data.DataRow
      description: "<xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> 표현을 포함 하는 <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref>; <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 없는 경우 없는 <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> 연관는 <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xml.XmlDataDocument.GetRowFromElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XmlDataDocument.Load(Stream)
  fullName: System.Xml.XmlDataDocument.Load(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "로드는 <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> 지정 된 스트림에서 합니다."
  remarks: "`XmlDataDocument`엔터티 참조를 만들를 지원 하지 않습니다. 데이터 엔터티 참조를 포함 하는 경우는 `Load` 메서드를 확인 및 엔터티 참조를 확장 합니다.      > [!NOTE] > XML 데이터를 관계형으로 볼 수 있도록 먼저 데이터 매핑에 사용할 스키마를을 지정 해야 합니다. 이렇게 호출 하 여는 <xref:System.Data.DataSet.ReadXmlSchema%2A>메서드 또는 테이블 및 열 내에서 만들어는 `DataSet` 수동으로.</xref:System.Data.DataSet.ReadXmlSchema%2A> 이 단계를 호출 하기 전에 수행 해야 `Load`합니다."
  syntax:
    content: public override void Load (System.IO.Stream inStream);
    parameters:
    - id: inStream
      type: System.IO.Stream
      description: "로드할 XML 문서가 포함 된 스트림입니다."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  id: Load(System.IO.TextReader)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(TextReader)
  nameWithType: XmlDataDocument.Load(TextReader)
  fullName: System.Xml.XmlDataDocument.Load(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "로드는 <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> <xref:System.IO.TextReader>.</xref:System.IO.TextReader> 지정"
  remarks: "`XmlDataDocument`엔터티 참조를 만들를 지원 하지 않습니다. 데이터 엔터티 참조를 포함 하는 경우는 `Load` 메서드를 확인 및 엔터티 참조를 확장 합니다.      > [!NOTE] > XML 데이터를 관계형으로 볼 수 있도록 먼저 데이터 매핑에 사용할 스키마를을 지정 해야 합니다. 이렇게 호출 하 여는 <xref:System.Data.DataSet.ReadXmlSchema%2A>메서드 또는 테이블 및 열 내에서 만들어는 `DataSet` 수동으로.</xref:System.Data.DataSet.ReadXmlSchema%2A> 이 단계를 호출 하기 전에 수행 해야 `Load`합니다."
  syntax:
    content: public override void Load (System.IO.TextReader txtReader);
    parameters:
    - id: txtReader
      type: System.IO.TextReader
      description: "<xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> 를 문서에 XML 데이터를 제공 하는 데 사용 합니다."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(String)
  nameWithType: XmlDataDocument.Load(String)
  fullName: System.Xml.XmlDataDocument.Load(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "로드는 <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> 지정된 된 URL을 사용 하 여 합니다."
  remarks: "`XmlDataDocument`엔터티 참조를 만들를 지원 하지 않습니다. 데이터 엔터티 참조를 포함 하는 경우는 `Load` 메서드를 확인 및 엔터티 참조를 확장 합니다.      > [!NOTE] > XML 데이터를 관계형으로 볼 수 있도록 먼저 데이터 매핑에 사용할 스키마를을 지정 해야 합니다. 이렇게 호출 하 여는 <xref:System.Data.DataSet.ReadXmlSchema%2A>메서드 또는 테이블 및 열 내에서 만들어는 `DataSet` 수동으로.</xref:System.Data.DataSet.ReadXmlSchema%2A> 이 단계를 호출 하기 전에 수행 해야 `Load`합니다."
  syntax:
    content: public override void Load (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "로드할 XML 문서를 포함 하는 파일의 URL입니다."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XmlDataDocument.Load(XmlReader)
  fullName: System.Xml.XmlDataDocument.Load(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "로드는 <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> 지정"
  remarks: "`XmlDataDocument`엔터티 참조를 만들를 지원 하지 않습니다. 데이터 원본에 엔터티 참조를 만들어야 합니다는 <xref:System.Xml.XmlValidatingReader>와 <xref:System.Xml.XmlValidatingReader.EntityHandling%2A>속성 (이것이 기본 동작) EntityHandling.ExpandEntities로 설정 하 고 전달는 `XmlValidatingReader` 에 `Load` 메서드.</xref:System.Xml.XmlValidatingReader.EntityHandling%2A> </xref:System.Xml.XmlValidatingReader> 사용 하지 않는 경우는 `XmlValidatingReader`, `Load` 메서드에서 예외를 throw 합니다.       `Load` 메서드는 항상 유효 공백 유지 합니다. <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>속성 공백이 유지 되 고 있는지 여부를 결정 합니다.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> 기본값은 `false`, 공백이 유지 되지 않습니다.       초기 단계 (즉, ReadState=ReadState.Initial) 판독기가 있으면 `Load` 판독기의 전체 내용을 사용 하 고 그 결과에서 DOM을 빌드합니다.       판독기가 위치 일부 노드의 깊이 &quot;n&quot;에 이미, 해당 노드 및 &quot;n&quot; 수준을 닫는 끝 태그 까지의 모든 후속 형제가이 방법을 로드 합니다. 다음과 같은 결과가이 있습니다.       현재 노드 및 다음 형제 다음 다음과 같이 표시 하는 경우: ```   <!--comment--><element1>one</element1><element2>two</element2>   ``` `Load` 문서는 두 개의 루트 수준 요소를 가질 수 없으므로 예외를 throw 합니다.        현재 노드 및 다음 형제 다음 다음과 같이 표시 하는 경우: ```   <!--comment--><?process       instruction?><!--comment--></endtag>   ``` `Load` 성공 합니다; 그러나 있습니다는 불완전 한 DOM 트리는 루트 수준 요소가 없기 때문에 있습니다.        문서를 저장 하기 전에 루트 수준 요소를 추가 해야 합니다. 그렇지 않은 경우는 <xref:System.Xml.XmlDocument.Save%2A>메서드에서 예외를 throw 합니다.</xref:System.Xml.XmlDocument.Save%2A>       판독기가 배치 될 때까지 읽기를 계속 문서 (예를 들어 한 공백이 나 특성 노드)의 루트 수준에 대 한 유효 하지 않은 리프 노드에 판독기는 루트로 사용할 수 있는 노드에 합니다. 문서의 시점에서 로드 되기 시작 합니다."
  example:
  - "The following example modifies the price of a book using the `DataSet` methods.  \n  \n [!code-cpp[XmlDataDocument.Load#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_3_1.cpp)]\n [!code-cs[XmlDataDocument.Load#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_3_1.cs)]\n [!code-vb[XmlDataDocument.Load#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_3_1.vb)]  \n  \n The example uses the following two input files.  \n  \n `2books.xml`  \n  \n [!code-xml[XmlDataDocument.Load#2](~/add/codesnippet/xml/m-system.xml.xmldatadocu_3_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[XmlDataDocument.Load#3](~/add/codesnippet/xml/m-system.xml.xmldatadocu_3_3.xsd)]"
  syntax:
    content: public override void Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref uid=&quot;langword_csharp_XmlReader&quot; name=&quot;XmlReader&quot; href=&quot;&quot;> </xref> 로드할 XML 문서가 포함 된 합니다."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "엔터티 참조를 포함 하는 XML을 로드 하 고 판독기 엔터티를 확인할 수 없습니다."
  platform:
  - net462
references:
- uid: System.Xml.XmlDocument
  isExternal: false
  name: System.Xml.XmlDocument
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Xml.XmlDataDocument.#ctor
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument()
  nameWithType: XmlDataDocument.XmlDataDocument()
  fullName: System.Xml.XmlDataDocument.XmlDataDocument()
- uid: System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument(DataSet)
  nameWithType: XmlDataDocument.XmlDataDocument(DataSet)
  fullName: System.Xml.XmlDataDocument.XmlDataDocument(DataSet)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlDataDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDataDocument.CloneNode(Boolean)
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateElement(String,String,String)
  nameWithType: XmlDataDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDataDocument.CreateElement(String,String,String)
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateEntityReference(String)
  nameWithType: XmlDataDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDataDocument.CreateEntityReference(String)
- uid: System.Xml.XmlEntityReference
  parent: System.Xml
  isExternal: false
  name: XmlEntityReference
  nameWithType: XmlEntityReference
  fullName: System.Xml.XmlEntityReference
- uid: System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDataDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDataDocument.CreateNavigator(XmlNode)
- uid: System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XmlDataDocument.DataSet
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
  fullName: System.Xml.XmlDataDocument.DataSet
- uid: System.Xml.XmlDataDocument.GetElementById(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementById(String)
  nameWithType: XmlDataDocument.GetElementById(String)
  fullName: System.Xml.XmlDataDocument.GetElementById(String)
- uid: System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementFromRow(DataRow)
  nameWithType: XmlDataDocument.GetElementFromRow(DataRow)
  fullName: System.Xml.XmlDataDocument.GetElementFromRow(DataRow)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: XmlDataDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDataDocument.GetElementsByTagName(String)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetRowFromElement(XmlElement)
  nameWithType: XmlDataDocument.GetRowFromElement(XmlElement)
  fullName: System.Xml.XmlDataDocument.GetRowFromElement(XmlElement)
- uid: System.Xml.XmlDataDocument.Load(System.IO.Stream)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(Stream)
  nameWithType: XmlDataDocument.Load(Stream)
  fullName: System.Xml.XmlDataDocument.Load(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(TextReader)
  nameWithType: XmlDataDocument.Load(TextReader)
  fullName: System.Xml.XmlDataDocument.Load(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Xml.XmlDataDocument.Load(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(String)
  nameWithType: XmlDataDocument.Load(String)
  fullName: System.Xml.XmlDataDocument.Load(String)
- uid: System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XmlDataDocument.Load(XmlReader)
  fullName: System.Xml.XmlDataDocument.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.XmlDataDocument.#ctor*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument
  nameWithType: XmlDataDocument.XmlDataDocument
- uid: System.Xml.XmlDataDocument.CloneNode*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CloneNode
  nameWithType: XmlDataDocument.CloneNode
- uid: System.Xml.XmlDataDocument.CreateElement*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateElement
  nameWithType: XmlDataDocument.CreateElement
- uid: System.Xml.XmlDataDocument.CreateEntityReference*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateEntityReference
  nameWithType: XmlDataDocument.CreateEntityReference
- uid: System.Xml.XmlDataDocument.CreateNavigator*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateNavigator
  nameWithType: XmlDataDocument.CreateNavigator
- uid: System.Xml.XmlDataDocument.DataSet*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
- uid: System.Xml.XmlDataDocument.GetElementById*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementById
  nameWithType: XmlDataDocument.GetElementById
- uid: System.Xml.XmlDataDocument.GetElementFromRow*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementFromRow
  nameWithType: XmlDataDocument.GetElementFromRow
- uid: System.Xml.XmlDataDocument.GetElementsByTagName*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementsByTagName
  nameWithType: XmlDataDocument.GetElementsByTagName
- uid: System.Xml.XmlDataDocument.GetRowFromElement*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetRowFromElement
  nameWithType: XmlDataDocument.GetRowFromElement
- uid: System.Xml.XmlDataDocument.Load*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load
  nameWithType: XmlDataDocument.Load
