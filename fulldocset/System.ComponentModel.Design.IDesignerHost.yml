### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Design.IDesignerHost
  id: IDesignerHost
  children:
  - System.ComponentModel.Design.IDesignerHost.Activate
  - System.ComponentModel.Design.IDesignerHost.Activated
  - System.ComponentModel.Design.IDesignerHost.Container
  - System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)
  - System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)
  - System.ComponentModel.Design.IDesignerHost.CreateTransaction
  - System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)
  - System.ComponentModel.Design.IDesignerHost.Deactivated
  - System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)
  - System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)
  - System.ComponentModel.Design.IDesignerHost.GetType(System.String)
  - System.ComponentModel.Design.IDesignerHost.InTransaction
  - System.ComponentModel.Design.IDesignerHost.LoadComplete
  - System.ComponentModel.Design.IDesignerHost.Loading
  - System.ComponentModel.Design.IDesignerHost.RootComponent
  - System.ComponentModel.Design.IDesignerHost.RootComponentClassName
  - System.ComponentModel.Design.IDesignerHost.TransactionClosed
  - System.ComponentModel.Design.IDesignerHost.TransactionClosing
  - System.ComponentModel.Design.IDesignerHost.TransactionDescription
  - System.ComponentModel.Design.IDesignerHost.TransactionOpened
  - System.ComponentModel.Design.IDesignerHost.TransactionOpening
  langs:
  - csharp
  name: IDesignerHost
  nameWithType: IDesignerHost
  fullName: System.ComponentModel.Design.IDesignerHost
  type: Interface
  summary: "디자이너 트랜잭션 및 구성 요소를 관리 하기 위한 인터페이스를 제공 합니다."
  remarks: "IDesignerHost는 디자이너 트랜잭션 및 구성 요소 관리에 대 한 지원을 제공 하 여.NET Framework 양식 디자이너 아키텍처와 작동 하는 인터페이스입니다.       .NET Framework에는이 인터페이스의 구현을 제공 하지 않습니다. 디자이너를 지 원하는 개발 도구에서 인터페이스를 구현 합니다."
  example:
  - "The following example code demonstrates how to obtain the IDesignerHost service interface from a designer or sited component.  \n  \n [!code-cs[DesignerHostAcquisition#1](~/add/codesnippet/csharp/t-system.componentmodel._54_1.cs)]\n [!code-cpp[DesignerHostAcquisition#1](~/add/codesnippet/cpp/t-system.componentmodel._54_1.cpp)]\n [!code-vb[DesignerHostAcquisition#1](~/add/codesnippet/visualbasic/t-system.componentmodel._54_1.vb)]  \n  \n The following example code demonstrates using the IDesignerHost interface to list project components.  \n  \n [!code-cs[IDesignerHostExample#1](~/add/codesnippet/csharp/t-system.componentmodel._54_2.cs)]\n [!code-cpp[IDesignerHostExample#1](~/add/codesnippet/cpp/t-system.componentmodel._54_2.cpp)]\n [!code-vb[IDesignerHostExample#1](~/add/codesnippet/visualbasic/t-system.componentmodel._54_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IDesignerHost : IServiceProvider, System.ComponentModel.Design.IServiceContainer
  implements:
  - System.ComponentModel.Design.IServiceContainer
  - System.IServiceProvider
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.Activate
  id: Activate
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: Activate()
  nameWithType: IDesignerHost.Activate()
  fullName: System.ComponentModel.Design.IDesignerHost.Activate()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "이 호스트를 호스팅하는 디자이너를 활성화 합니다."
  remarks: "디자이너는 사용자 인터페이스를 표시 하기 전에 활성화 해야 합니다."
  syntax:
    content: public void Activate ();
    parameters: []
  overload: System.ComponentModel.Design.IDesignerHost.Activate*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.Activated
  id: Activated
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: Activated
  nameWithType: IDesignerHost.Activated
  fullName: System.ComponentModel.Design.IDesignerHost.Activated
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "이 디자이너가 활성화 될 때 발생 합니다."
  remarks: "디자이너를 표시 하기 전에 활성화 됩니다."
  syntax:
    content: public event EventHandler Activated;
    return:
      type: System.EventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.Container
  id: Container
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: Container
  nameWithType: IDesignerHost.Container
  fullName: System.ComponentModel.Design.IDesignerHost.Container
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "이 디자이너 호스트에 대 한 컨테이너를 가져옵니다."
  remarks: "이 <xref:System.ComponentModel.IContainer>현재 디자인 모드 문서의 구성 요소를 포함 합니다.</xref:System.ComponentModel.IContainer> 목록 또는 <xref:System.ComponentModel.IContainer.Components%2A> <xref:System.ComponentModel.IContainer>.</xref:System.ComponentModel.IContainer> 의 구성원</xref:System.ComponentModel.IContainer.Components%2A> 을 통해 현재 디자인 모드 문서의 구성 요소를 액세스할 수 있습니다."
  syntax:
    content: public System.ComponentModel.IContainer Container { get; }
    return:
      type: System.ComponentModel.IContainer
      description: "<xref href=&quot;System.ComponentModel.IContainer&quot;> </xref> 이 호스트에 대 한 합니다."
  overload: System.ComponentModel.Design.IDesignerHost.Container*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)
  id: CreateComponent(System.Type)
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: CreateComponent(Type)
  nameWithType: IDesignerHost.CreateComponent(Type)
  fullName: System.ComponentModel.Design.IDesignerHost.CreateComponent(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "지정 된 형식의 구성 요소를 만들어 디자인 문서에 추가 합니다."
  remarks: "구현 하는 개체 유형을 확인할 수 없는 경우 <xref:System.ComponentModel.IComponent>, 예외가 throw 됩니다.</xref:System.ComponentModel.IComponent>       이 메서드는 구성 요소에 대 한 이름을 지정 하지 않습니다. 메서드는 구성 요소를 만들고 디자이너 컨테이너에 추가 합니다."
  syntax:
    content: public System.ComponentModel.IComponent CreateComponent (Type componentClass);
    parameters:
    - id: componentClass
      type: System.Type
      description: "만들 구성 요소의 형식입니다."
    return:
      type: System.ComponentModel.IComponent
      description: "새로 만든된 구성 요소입니다."
  overload: System.ComponentModel.Design.IDesignerHost.CreateComponent*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)
  id: CreateComponent(System.Type,System.String)
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: CreateComponent(Type,String)
  nameWithType: IDesignerHost.CreateComponent(Type,String)
  fullName: System.ComponentModel.Design.IDesignerHost.CreateComponent(Type,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "지정 된 형식 및 이름, 구성 요소를 만들어 디자인 문서에 추가 합니다."
  remarks: "구현 하는 개체 유형을 확인할 수 없는 경우 <xref:System.ComponentModel.IComponent>, 예외가 throw 됩니다.</xref:System.ComponentModel.IComponent>       이 메서드는 구성 요소를 만들고 디자이너 컨테이너에 추가 합니다."
  syntax:
    content: public System.ComponentModel.IComponent CreateComponent (Type componentClass, string name);
    parameters:
    - id: componentClass
      type: System.Type
      description: "만들 구성 요소의 형식입니다."
    - id: name
      type: System.String
      description: "구성 요소에 대 한 이름입니다."
    return:
      type: System.ComponentModel.IComponent
      description: "새로 만든된 구성 요소입니다."
  overload: System.ComponentModel.Design.IDesignerHost.CreateComponent*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.CreateTransaction
  id: CreateTransaction
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: CreateTransaction()
  nameWithType: IDesignerHost.CreateTransaction()
  fullName: System.ComponentModel.Design.IDesignerHost.CreateTransaction()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "만듭니다는 <xref href=&quot;System.ComponentModel.Design.DesignerTransaction&quot;> </xref> 성능을 향상 하 고 취소 및 다시 실행 지원 기능에 대 한 이벤트 시퀀스를 캡슐화 할 수 있는 합니다."
  remarks: "이 메서드가 만드는 <xref:System.ComponentModel.Design.DesignerTransaction>일련의 작업을 캡슐화 하 사용할 수 있는.</xref:System.ComponentModel.Design.DesignerTransaction> 디자이너 트랜잭션 성능을 향상 시킬 수 있습니다, 그리고 여러 개의 업데이트 작업의 과정 동안 인해 깜빡임 줄이기 및 실행을 취소할 수 있습니다.       여러 구성 요소를 포함 하는 시간이 오래 걸리는 작업 이벤트가 많이 발생할 수 있습니다. 이러한 이벤트는 같은 부작용이 발생 수 또는 성능이 저하 되는 있습니다. 를 한 번에 여러 구성 요소에서 작동 하거나 단일 구성 요소에 대해 여러 속성을 설정할 때 이러한 변경 내용은 트랜잭션 내에서 수행 하 여 성능을 개선할 수 있습니다. 일부 작업의 처리는 <xref:System.ComponentModel.Design.IDesignerHost.TransactionOpening>및 <xref:System.ComponentModel.Design.IDesignerHost.TransactionClosed>이벤트는 트랜잭션이 진행에서 않는 경우에 작업을 수행 합니다.</xref:System.ComponentModel.Design.IDesignerHost.TransactionClosed> </xref:System.ComponentModel.Design.IDesignerHost.TransactionOpening> 트랜잭션 사용에 대 한 자세한 내용은 <xref:System.ComponentModel.Design.DesignerTransaction>.</xref:System.ComponentModel.Design.DesignerTransaction> 에 대 한 설명서를 참조 하십시오."
  syntax:
    content: public System.ComponentModel.Design.DesignerTransaction CreateTransaction ();
    parameters: []
    return:
      type: System.ComponentModel.Design.DesignerTransaction
      description: "새 인스턴스 <xref href=&quot;System.ComponentModel.Design.DesignerTransaction&quot;> </xref>합니다. 트랜잭션에서 단계를 완료 하는 경우 호출 해야 <xref:System.ComponentModel.Design.DesignerTransaction.Commit*>이 개체에.</xref:System.ComponentModel.Design.DesignerTransaction.Commit*>"
  overload: System.ComponentModel.Design.IDesignerHost.CreateTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)
  id: CreateTransaction(System.String)
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: CreateTransaction(String)
  nameWithType: IDesignerHost.CreateTransaction(String)
  fullName: System.ComponentModel.Design.IDesignerHost.CreateTransaction(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "만듭니다는 <xref href=&quot;System.ComponentModel.Design.DesignerTransaction&quot;> </xref> 성능을 개선 하 고 실행 취소를 사용 하 고, 지원 기능을 지정 된 트랜잭션 설명을 사용 하 여 다시 실행 하는 이벤트 순서를 캡슐화 할 수 있는 합니다."
  remarks: "이 메서드가 만드는 <xref:System.ComponentModel.Design.DesignerTransaction>일련의 작업을 캡슐화 하 사용할 수 있는.</xref:System.ComponentModel.Design.DesignerTransaction> 디자이너 트랜잭션 성능을 향상 시킬 수 있습니다, 그리고 여러 개의 업데이트 작업의 과정 동안 인해 깜빡임 줄이기 및 실행을 취소할 수 있습니다.       여러 구성 요소를 포함 하는 시간이 오래 걸리는 작업 이벤트가 많이 발생할 수 있습니다. 이러한 이벤트는 같은 부작용이 발생 수 또는 성능이 저하 되는 있습니다. 를 한 번에 여러 구성 요소에서 작동 하거나 단일 구성 요소에 대해 여러 속성을 설정할 때 이러한 변경 내용은 트랜잭션 내에서 수행 하 여 성능을 개선할 수 있습니다. 일부 작업의 처리는 <xref:System.ComponentModel.Design.IDesignerHost.TransactionOpening>및 <xref:System.ComponentModel.Design.IDesignerHost.TransactionClosed>이벤트는 트랜잭션이 진행에서 않는 경우에 작업을 수행 합니다.</xref:System.ComponentModel.Design.IDesignerHost.TransactionClosed> </xref:System.ComponentModel.Design.IDesignerHost.TransactionOpening> 트랜잭션 사용에 대 한 자세한 내용은 <xref:System.ComponentModel.Design.DesignerTransaction>.</xref:System.ComponentModel.Design.DesignerTransaction> 에 대 한 설명서를 참조 하십시오."
  syntax:
    content: public System.ComponentModel.Design.DesignerTransaction CreateTransaction (string description);
    parameters:
    - id: description
      type: System.String
      description: "제목 또는 새로 만든된 트랜잭션에 대 한 설명입니다."
    return:
      type: System.ComponentModel.Design.DesignerTransaction
      description: "A new <xref href=&quot;System.ComponentModel.Design.DesignerTransaction&quot;></xref>. 트랜잭션에서 단계를 완료 했으면, 호출 해야 <xref:System.ComponentModel.Design.DesignerTransaction.Commit*>이 개체에.</xref:System.ComponentModel.Design.DesignerTransaction.Commit*>"
  overload: System.ComponentModel.Design.IDesignerHost.CreateTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.Deactivated
  id: Deactivated
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: Deactivated
  nameWithType: IDesignerHost.Deactivated
  fullName: System.ComponentModel.Design.IDesignerHost.Deactivated
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "이 디자이너 비활성화 될 때 발생 합니다."
  remarks: "디자이너를 표시 하는 것은 더 이상 전에 비활성화 됩니다."
  syntax:
    content: public event EventHandler Deactivated;
    return:
      type: System.EventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)
  id: DestroyComponent(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: DestroyComponent(IComponent)
  nameWithType: IDesignerHost.DestroyComponent(IComponent)
  fullName: System.ComponentModel.Design.IDesignerHost.DestroyComponent(IComponent)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "지정된 된 구성 요소를 제거 하 고 디자이너 컨테이너에서 제거 합니다."
  syntax:
    content: public void DestroyComponent (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "제거할 구성 요소입니다."
  overload: System.ComponentModel.Design.IDesignerHost.DestroyComponent*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)
  id: GetDesigner(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: GetDesigner(IComponent)
  nameWithType: IDesignerHost.GetDesigner(IComponent)
  fullName: System.ComponentModel.Design.IDesignerHost.GetDesigner(IComponent)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "지정된 된 구성 요소를 포함 하는 디자이너 인스턴스를 가져옵니다."
  syntax:
    content: public System.ComponentModel.Design.IDesigner GetDesigner (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> 를 디자이너에 대 한를 검색 합니다."
    return:
      type: System.ComponentModel.Design.IDesigner
      description: "<xref href=&quot;System.ComponentModel.Design.IDesigner&quot;> </xref>, 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 지정된 된 구성 요소에 대 한 디자이너는 경우."
  overload: System.ComponentModel.Design.IDesignerHost.GetDesigner*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.GetType(System.String)
  id: GetType(System.String)
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: GetType(String)
  nameWithType: IDesignerHost.GetType(String)
  fullName: System.ComponentModel.Design.IDesignerHost.GetType(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "지정 된, 정규화 된 유형 이름의 인스턴스를 가져옵니다."
  syntax:
    content: public Type GetType (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "로드할 형식의의 이름입니다."
    return:
      type: System.Type
      description: "지정 된 형식 이름에 대 한 형식 개체 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 형식을 찾을 수 없는 경우."
  overload: System.ComponentModel.Design.IDesignerHost.GetType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.InTransaction
  id: InTransaction
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: InTransaction
  nameWithType: IDesignerHost.InTransaction
  fullName: System.ComponentModel.Design.IDesignerHost.InTransaction
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "현재 디자이너 호스트 트랜잭션에 적용 되는지 나타내는 값을 가져옵니다."
  syntax:
    content: public bool InTransaction { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>트랜잭션이 진행 중인 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ComponentModel.Design.IDesignerHost.InTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.LoadComplete
  id: LoadComplete
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: LoadComplete
  nameWithType: IDesignerHost.LoadComplete
  fullName: System.ComponentModel.Design.IDesignerHost.LoadComplete
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "이 디자이너에서 문서 로드 완료 될 때 발생 합니다."
  remarks: "이 이벤트는 디자이너에서 문서 로드를 완료 한 후에 발생 합니다."
  syntax:
    content: public event EventHandler LoadComplete;
    return:
      type: System.EventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.Loading
  id: Loading
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: Loading
  nameWithType: IDesignerHost.Loading
  fullName: System.ComponentModel.Design.IDesignerHost.Loading
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "디자이너 호스트는 현재 문서를 로드 하는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public bool Loading { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 디자이너 호스트 문서를 로드 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ComponentModel.Design.IDesignerHost.Loading*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.RootComponent
  id: RootComponent
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: RootComponent
  nameWithType: IDesignerHost.RootComponent
  fullName: System.ComponentModel.Design.IDesignerHost.RootComponent
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "현재 설계에 대 한 루트 구성으로 사용 하는 기본 클래스의 인스턴스를 가져옵니다."
  remarks: "이 기본 클래스는 일반적으로 <xref:System.Windows.Forms.Form>또는 <xref:System.Windows.Forms.UserControl>인스턴스이거나 사용자의 파생된 클래스를 확장 하는 클래스를 정의 합니다.</xref:System.Windows.Forms.UserControl> </xref:System.Windows.Forms.Form>"
  syntax:
    content: public System.ComponentModel.IComponent RootComponent { get; }
    return:
      type: System.ComponentModel.IComponent
      description: "루트 구성 요소 클래스의 인스턴스입니다."
  overload: System.ComponentModel.Design.IDesignerHost.RootComponent*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.RootComponentClassName
  id: RootComponentClassName
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: RootComponentClassName
  nameWithType: IDesignerHost.RootComponentClassName
  fullName: System.ComponentModel.Design.IDesignerHost.RootComponentClassName
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "디자인 하 고 클래스의 정규화 된 이름을 가져옵니다."
  syntax:
    content: public string RootComponentClassName { get; }
    return:
      type: System.String
      description: "기본 구성 요소 클래스의 정규화 된 이름입니다."
  overload: System.ComponentModel.Design.IDesignerHost.RootComponentClassName*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.TransactionClosed
  id: TransactionClosed
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: TransactionClosed
  nameWithType: IDesignerHost.TransactionClosed
  fullName: System.ComponentModel.Design.IDesignerHost.TransactionClosed
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "TransactionClosed 이벤트에 대 한 이벤트 처리기를 추가합니다."
  remarks: "이 이벤트는 트랜잭션이 닫힌 후에 발생 합니다.       트랜잭션을 여러 값을 변경할 경우에 따라 수 있습니다. 트랜잭션 메서드는 반복 되는 처리를 방지 하 여 깜박임 문제 및 성능을 방지 하기 위해 알아볼 수 있습니다. 이러한 메서드는 트랜잭션이 닫힐 때까지 처리를 지연 합니다."
  syntax:
    content: public event System.ComponentModel.Design.DesignerTransactionCloseEventHandler TransactionClosed;
    return:
      type: System.ComponentModel.Design.DesignerTransactionCloseEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.TransactionClosing
  id: TransactionClosing
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: TransactionClosing
  nameWithType: IDesignerHost.TransactionClosing
  fullName: System.ComponentModel.Design.IDesignerHost.TransactionClosing
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "TransactionClosing 이벤트에 대 한 이벤트 처리기를 추가합니다."
  remarks: "이 이벤트는 트랜잭션이 완료 되기 직전에 발생 합니다.       트랜잭션을 여러 값을 변경할 경우에 따라 수 있습니다. 트랜잭션 메서드는 반복 되는 처리를 방지 하 여 깜박임 문제 및 성능을 방지 하기 위해 알아볼 수 있습니다. 이러한 메서드는 트랜잭션이 닫힐 때까지 처리를 지연 합니다."
  syntax:
    content: public event System.ComponentModel.Design.DesignerTransactionCloseEventHandler TransactionClosing;
    return:
      type: System.ComponentModel.Design.DesignerTransactionCloseEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.TransactionDescription
  id: TransactionDescription
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: TransactionDescription
  nameWithType: IDesignerHost.TransactionDescription
  fullName: System.ComponentModel.Design.IDesignerHost.TransactionDescription
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "현재 트랜잭션의 설명을 가져옵니다."
  remarks: "설명은 마지막 설명이 <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A>.</xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A> 지정는"
  syntax:
    content: public string TransactionDescription { get; }
    return:
      type: System.String
      description: "현재 트랜잭션의 설명입니다."
  overload: System.ComponentModel.Design.IDesignerHost.TransactionDescription*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.TransactionOpened
  id: TransactionOpened
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: TransactionOpened
  nameWithType: IDesignerHost.TransactionOpened
  fullName: System.ComponentModel.Design.IDesignerHost.TransactionOpened
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "TransactionOpened 이벤트에 대 한 이벤트 처리기를 추가합니다."
  remarks: "이 이벤트는 트랜잭션이 시작 되었을 때 발생 합니다.       트랜잭션을 여러 값을 변경할 경우에 따라 수 있습니다. 트랜잭션 메서드는 반복 되는 처리를 방지 하 여 깜박임 문제 및 성능을 방지 하기 위해 알아볼 수 있습니다. 이러한 메서드는 트랜잭션이 닫힐 때까지 처리를 지연 합니다."
  syntax:
    content: public event EventHandler TransactionOpened;
    return:
      type: System.EventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.IDesignerHost.TransactionOpening
  id: TransactionOpening
  parent: System.ComponentModel.Design.IDesignerHost
  langs:
  - csharp
  name: TransactionOpening
  nameWithType: IDesignerHost.TransactionOpening
  fullName: System.ComponentModel.Design.IDesignerHost.TransactionOpening
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "TransactionOpening 이벤트에 대 한 이벤트 처리기를 추가합니다."
  remarks: "이 이벤트에는 트랜잭션이 시작 될 때 발생 합니다.       이 메서드를 사용 하면 디자이너 호스트 클라이언트에서 작업을 수행한 후 다른 처리기는 트랜잭션이 시작 된 메시지가 표시 됩니다. 만 첫 번째 호출 하는 경우에 지정 된 처리기가 호출 <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A>이루어집니다.</xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A> 후속 호출에서는 모든 트랜잭션이 삭제 된 때까지이 이벤트를 생성 하지 않습니다."
  syntax:
    content: public event EventHandler TransactionOpening;
    return:
      type: System.EventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Design.IDesignerHost.Activate
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: Activate()
  nameWithType: IDesignerHost.Activate()
  fullName: System.ComponentModel.Design.IDesignerHost.Activate()
- uid: System.ComponentModel.Design.IDesignerHost.Activated
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: Activated
  nameWithType: IDesignerHost.Activated
  fullName: System.ComponentModel.Design.IDesignerHost.Activated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.ComponentModel.Design.IDesignerHost.Container
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: Container
  nameWithType: IDesignerHost.Container
  fullName: System.ComponentModel.Design.IDesignerHost.Container
- uid: System.ComponentModel.IContainer
  parent: System.ComponentModel
  isExternal: false
  name: IContainer
  nameWithType: IContainer
  fullName: System.ComponentModel.IContainer
- uid: System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: CreateComponent(Type)
  nameWithType: IDesignerHost.CreateComponent(Type)
  fullName: System.ComponentModel.Design.IDesignerHost.CreateComponent(Type)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: CreateComponent(Type,String)
  nameWithType: IDesignerHost.CreateComponent(Type,String)
  fullName: System.ComponentModel.Design.IDesignerHost.CreateComponent(Type,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.Design.IDesignerHost.CreateTransaction
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: CreateTransaction()
  nameWithType: IDesignerHost.CreateTransaction()
  fullName: System.ComponentModel.Design.IDesignerHost.CreateTransaction()
- uid: System.ComponentModel.Design.DesignerTransaction
  parent: System.ComponentModel.Design
  isExternal: false
  name: DesignerTransaction
  nameWithType: DesignerTransaction
  fullName: System.ComponentModel.Design.DesignerTransaction
- uid: System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: CreateTransaction(String)
  nameWithType: IDesignerHost.CreateTransaction(String)
  fullName: System.ComponentModel.Design.IDesignerHost.CreateTransaction(String)
- uid: System.ComponentModel.Design.IDesignerHost.Deactivated
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: Deactivated
  nameWithType: IDesignerHost.Deactivated
  fullName: System.ComponentModel.Design.IDesignerHost.Deactivated
- uid: System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: DestroyComponent(IComponent)
  nameWithType: IDesignerHost.DestroyComponent(IComponent)
  fullName: System.ComponentModel.Design.IDesignerHost.DestroyComponent(IComponent)
- uid: System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: GetDesigner(IComponent)
  nameWithType: IDesignerHost.GetDesigner(IComponent)
  fullName: System.ComponentModel.Design.IDesignerHost.GetDesigner(IComponent)
- uid: System.ComponentModel.Design.IDesigner
  parent: System.ComponentModel.Design
  isExternal: false
  name: IDesigner
  nameWithType: IDesigner
  fullName: System.ComponentModel.Design.IDesigner
- uid: System.ComponentModel.Design.IDesignerHost.GetType(System.String)
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: GetType(String)
  nameWithType: IDesignerHost.GetType(String)
  fullName: System.ComponentModel.Design.IDesignerHost.GetType(String)
- uid: System.ComponentModel.Design.IDesignerHost.InTransaction
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: InTransaction
  nameWithType: IDesignerHost.InTransaction
  fullName: System.ComponentModel.Design.IDesignerHost.InTransaction
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Design.IDesignerHost.LoadComplete
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: LoadComplete
  nameWithType: IDesignerHost.LoadComplete
  fullName: System.ComponentModel.Design.IDesignerHost.LoadComplete
- uid: System.ComponentModel.Design.IDesignerHost.Loading
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: Loading
  nameWithType: IDesignerHost.Loading
  fullName: System.ComponentModel.Design.IDesignerHost.Loading
- uid: System.ComponentModel.Design.IDesignerHost.RootComponent
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: RootComponent
  nameWithType: IDesignerHost.RootComponent
  fullName: System.ComponentModel.Design.IDesignerHost.RootComponent
- uid: System.ComponentModel.Design.IDesignerHost.RootComponentClassName
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: RootComponentClassName
  nameWithType: IDesignerHost.RootComponentClassName
  fullName: System.ComponentModel.Design.IDesignerHost.RootComponentClassName
- uid: System.ComponentModel.Design.IDesignerHost.TransactionClosed
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: TransactionClosed
  nameWithType: IDesignerHost.TransactionClosed
  fullName: System.ComponentModel.Design.IDesignerHost.TransactionClosed
- uid: System.ComponentModel.Design.DesignerTransactionCloseEventHandler
  parent: System.ComponentModel.Design
  isExternal: false
  name: DesignerTransactionCloseEventHandler
  nameWithType: DesignerTransactionCloseEventHandler
  fullName: System.ComponentModel.Design.DesignerTransactionCloseEventHandler
- uid: System.ComponentModel.Design.IDesignerHost.TransactionClosing
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: TransactionClosing
  nameWithType: IDesignerHost.TransactionClosing
  fullName: System.ComponentModel.Design.IDesignerHost.TransactionClosing
- uid: System.ComponentModel.Design.IDesignerHost.TransactionDescription
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: TransactionDescription
  nameWithType: IDesignerHost.TransactionDescription
  fullName: System.ComponentModel.Design.IDesignerHost.TransactionDescription
- uid: System.ComponentModel.Design.IDesignerHost.TransactionOpened
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: TransactionOpened
  nameWithType: IDesignerHost.TransactionOpened
  fullName: System.ComponentModel.Design.IDesignerHost.TransactionOpened
- uid: System.ComponentModel.Design.IDesignerHost.TransactionOpening
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: TransactionOpening
  nameWithType: IDesignerHost.TransactionOpening
  fullName: System.ComponentModel.Design.IDesignerHost.TransactionOpening
- uid: System.ComponentModel.Design.IDesignerHost.Activate*
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: Activate
  nameWithType: IDesignerHost.Activate
- uid: System.ComponentModel.Design.IDesignerHost.Container*
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: Container
  nameWithType: IDesignerHost.Container
- uid: System.ComponentModel.Design.IDesignerHost.CreateComponent*
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: CreateComponent
  nameWithType: IDesignerHost.CreateComponent
- uid: System.ComponentModel.Design.IDesignerHost.CreateTransaction*
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: CreateTransaction
  nameWithType: IDesignerHost.CreateTransaction
- uid: System.ComponentModel.Design.IDesignerHost.DestroyComponent*
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: DestroyComponent
  nameWithType: IDesignerHost.DestroyComponent
- uid: System.ComponentModel.Design.IDesignerHost.GetDesigner*
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: GetDesigner
  nameWithType: IDesignerHost.GetDesigner
- uid: System.ComponentModel.Design.IDesignerHost.GetType*
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: GetType
  nameWithType: IDesignerHost.GetType
- uid: System.ComponentModel.Design.IDesignerHost.InTransaction*
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: InTransaction
  nameWithType: IDesignerHost.InTransaction
- uid: System.ComponentModel.Design.IDesignerHost.Loading*
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: Loading
  nameWithType: IDesignerHost.Loading
- uid: System.ComponentModel.Design.IDesignerHost.RootComponent*
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: RootComponent
  nameWithType: IDesignerHost.RootComponent
- uid: System.ComponentModel.Design.IDesignerHost.RootComponentClassName*
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: RootComponentClassName
  nameWithType: IDesignerHost.RootComponentClassName
- uid: System.ComponentModel.Design.IDesignerHost.TransactionDescription*
  parent: System.ComponentModel.Design.IDesignerHost
  isExternal: false
  name: TransactionDescription
  nameWithType: IDesignerHost.TransactionDescription
