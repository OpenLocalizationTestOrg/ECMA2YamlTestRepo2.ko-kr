### YamlMime:ManagedReference
items:
- uid: System.Data.DataColumn
  id: DataColumn
  children:
  - System.Data.DataColumn.#ctor
  - System.Data.DataColumn.#ctor(System.String)
  - System.Data.DataColumn.#ctor(System.String,System.Type)
  - System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  - System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  - System.Data.DataColumn.AllowDBNull
  - System.Data.DataColumn.AutoIncrement
  - System.Data.DataColumn.AutoIncrementSeed
  - System.Data.DataColumn.AutoIncrementStep
  - System.Data.DataColumn.Caption
  - System.Data.DataColumn.CheckNotAllowNull
  - System.Data.DataColumn.CheckUnique
  - System.Data.DataColumn.ColumnMapping
  - System.Data.DataColumn.ColumnName
  - System.Data.DataColumn.DataType
  - System.Data.DataColumn.DateTimeMode
  - System.Data.DataColumn.DefaultValue
  - System.Data.DataColumn.Expression
  - System.Data.DataColumn.ExtendedProperties
  - System.Data.DataColumn.MaxLength
  - System.Data.DataColumn.Namespace
  - System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataColumn.Ordinal
  - System.Data.DataColumn.Prefix
  - System.Data.DataColumn.RaisePropertyChanging(System.String)
  - System.Data.DataColumn.ReadOnly
  - System.Data.DataColumn.SetOrdinal(System.Int32)
  - System.Data.DataColumn.Table
  - System.Data.DataColumn.ToString
  - System.Data.DataColumn.Unique
  langs:
  - csharp
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
  type: Class
  summary: "에 있는 열의 스키마를 나타내는 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다."
  remarks: "DataColumn에 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 스키마 생성을 위한 기본 빌딩 블록은 <xref:System.Data.DataColumnCollection>.</xref:System.Data.DataColumnCollection> 에 하나 이상의 DataColumn 개체를 추가 하 여 스키마를 빌드합니다. 자세한 내용은 참조 [DataTable에 열 추가](~/add/includes/ajax-current-ext-md.md)합니다.       각 DataColumn에는 <xref:System.Data.DataColumn.DataType%2A>데이터 DataColumn의 종류를 결정 하는 속성을 포함 합니다.</xref:System.Data.DataColumn.DataType%2A> 예를 들어 데이터 형식을 문자열, 정수 또는&10; 진수를 제한할 수 있습니다. 때문에 특성에 포함 된 데이터는 <xref:System.Data.DataTable>병합 일반적으로 다시 원래 데이터 원본에 데이터 원본에서 데이터 형식을 일치 시켜야 합니다.</xref:System.Data.DataTable> 자세한 내용은 참조 [ADO.NET에서 데이터 형식 매핑을](~/add/includes/ajax-current-ext-md.md)합니다.       와 같은 <xref:System.Data.DataColumn.AllowDBNull%2A>, <xref:System.Data.DataColumn.Unique%2A>, 및 <xref:System.Data.DataColumn.ReadOnly%2A>항목 및 업데이트 함으로써 데이터 무결성 보장 하기 위해 데이터를 제한 합니다.</xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> 사용할 수도 있습니다는 <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, 및 <xref:System.Data.DataColumn.AutoIncrementStep%2A>자동 데이터 생성을 제어 하는 속성.</xref:System.Data.DataColumn.AutoIncrementStep%2A> </xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrement%2A> 에 대 한 자세한 내용은 <xref:System.Data.DataColumn.AutoIncrement%2A>열 참조 [AutoIncrement 열 만들기](~/add/includes/ajax-current-ext-md.md).</xref:System.Data.DataColumn.AutoIncrement%2A> 자세한 내용은 참조 [기본 키 정의](~/add/includes/ajax-current-ext-md.md)합니다.       만들어 DataColumn의 값이 고유한 지 확인 수는 <xref:System.Data.UniqueConstraint>추가 하는 <xref:System.Data.ConstraintCollection>의 <xref:System.Data.DataTable>DataColumn 속해 있는.</xref:System.Data.DataTable> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint> 자세한 내용은 참조 [DataTable 제약 조건](~/add/includes/ajax-current-ext-md.md)합니다.       DataColumn 개체 간의 관계를 만들기 <xref:System.Data.DataRelation>는 <xref:System.Data.DataRelationCollection> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRelationCollection> 에 추가 합니다</xref:System.Data.DataRelation>       사용할 수는 <xref:System.Data.DataColumn.Expression%2A>열에 값을 계산 하거나 집계 열을 만들 DataColumn 개체의 속성입니다.</xref:System.Data.DataColumn.Expression%2A> 자세한 내용은 참조 [식 열 만들기](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example creates a <xref:System.Data.DataTable> with several DataColumn objects.  \n  \n [!code-cs[Classic WebData DataColumn Example#1](~/add/codesnippet/csharp/t-system.data.datacolumn_1.cs)]\n [!code-vb[Classic WebData DataColumn Example#1](~/add/codesnippet/visualbasic/t-system.data.datacolumn_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("ColumnName")]

      [System.ComponentModel.DesignTimeVisible(false)]

      [System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem(false)]

      public class DataColumn : System.ComponentModel.MarshalByValueComponent
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements: []
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  - System.ComponentModel.MarshalByValueComponent.Site
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor
  id: '#ctor'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn()
  nameWithType: DataColumn.DataColumn()
  fullName: System.Data.DataColumn.DataColumn()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "새 인스턴스를 초기화 한 <xref href=&quot;System.Data.DataColumn&quot;> </xref> 형식 문자열로 클래스입니다."
  remarks: "<xref:System.Data.DataColumn>개체에 기본 <xref:System.Data.DataColumn.ColumnName%2A>또는 <xref:System.Data.DataColumn.Caption%2A>.</xref:System.Data.DataColumn.Caption%2A> </xref:System.Data.DataColumn.ColumnName%2A> </xref:System.Data.DataColumn> 를 만들 때 추가할 때 <xref:System.Data.DataColumnCollection> <xref:System.Data.DataColumn.ColumnName%2A>.</xref:System.Data.DataColumn.ColumnName%2A> 에 이름을 할당 되지 않은 경우 (&quot;Column1&quot;, &quot;Column2&quot; 등)는 기본 이름이 생성 됩니다,</xref:System.Data.DataColumnCollection>"
  example:
  - "The following example creates a new <xref:System.Data.DataColumn>, sets various properties, and adds it to a <xref:System.Data.DataColumnCollection> for the <xref:System.Data.DataTable> object.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_13_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_13_1.cs)]"
  syntax:
    content: public DataColumn ();
    parameters: []
  overload: System.Data.DataColumn.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String)
  nameWithType: DataColumn.DataColumn(String)
  fullName: System.Data.DataColumn.DataColumn(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.DataColumn&quot;> </xref> 지정 된 열 이름을 사용 하 여 형식 문자열로 클래스입니다."
  remarks: "기본적으로 열에 특정 이름이 됩니다는 <xref:System.Data.DataColumn.Caption%2A>속성 값.</xref:System.Data.DataColumn.Caption%2A>"
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> with a specified <xref:System.Data.DataColumn.ColumnName%2A>.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_6_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn1 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_6_1.cs)]"
  syntax:
    content: public DataColumn (string columnName);
    parameters:
    - id: columnName
      type: System.String
      description: "만들려는 열의 이름을 나타내는 문자열입니다. 경우 설정 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 빈 문자열 (&quot;&quot;), columns 컬렉션에 추가 될 때 기본 이름이 지정 됩니다."
  overload: System.Data.DataColumn.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type)
  id: '#ctor(System.String,System.Type)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type)
  nameWithType: DataColumn.DataColumn(String,Type)
  fullName: System.Data.DataColumn.DataColumn(String,Type)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.DataColumn&quot;> </xref> 클래스 지정한 열 이름과 데이터 형식을 사용 합니다."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> with a specified <xref:System.Data.DataColumn.ColumnName%2A> and <xref:System.Data.DataColumn.DataType%2A>.  \n  \n [!code-cs[Classic WebData DataColumn.DataColumn2 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_15_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataColumn2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_15_1.vb)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType);
    parameters:
    - id: columnName
      type: System.String
      description: "만들려는 열의 이름을 나타내는 문자열입니다. 경우 설정 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 빈 문자열 (&quot;&quot;), columns 컬렉션에 추가 될 때 기본 이름이 지정 됩니다."
    - id: dataType
      type: System.Type
      description: "에 지원 되는 <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*>"
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "더 <code> dataType </code> 지정 되었습니다."
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  id: '#ctor(System.String,System.Type,System.String)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type,String)
  nameWithType: DataColumn.DataColumn(String,Type,String)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.DataColumn&quot;> </xref> 클래스 지정한 이름, 데이터 형식 및 식을 사용 합니다."
  remarks: ''
  example:
  - "The following example creates a computed column.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn3 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_8_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn3 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_8_1.cs)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType, string expr);
    parameters:
    - id: columnName
      type: System.String
      description: "만들려는 열의 이름을 나타내는 문자열입니다. 경우 설정 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 빈 문자열 (&quot;&quot;), columns 컬렉션에 추가 될 때 기본 이름이 지정 됩니다."
    - id: dataType
      type: System.Type
      description: "에 지원 되는 <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*>"
    - id: expr
      type: System.String
      description: "이 열을 만드는 사용 되는 식입니다. 자세한 내용은 참조는 <xref:System.Data.DataColumn.Expression*>속성.</xref:System.Data.DataColumn.Expression*>"
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "더 <code> dataType </code> 지정 되었습니다."
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  id: '#ctor(System.String,System.Type,System.String,System.Data.MappingType)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type,String,MappingType)
  nameWithType: DataColumn.DataColumn(String,Type,String,MappingType)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String,MappingType)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.DataColumn&quot;> </xref> 클래스 지정 된 이름, 데이터 형식, 식 및 열 특성 인지를 결정 하는 값을 사용 합니다."
  remarks: "The `type` argument sets the <xref:System.Data.DataColumn.ColumnMapping%2A> property. The property specifies how a <xref:System.Data.DataColumn> is mapped when a <xref:System.Data.DataSet> is transformed into an XML document. For example, if the column is named \"fName,\" and the value it contains is \"Bob,\" and `type` is set to `MappingType.Attribute`, the XML element would be as follows:  \n  \n \\<Name fName = 'Bob'/>  \n  \n For more information about how columns are mapped to elements or attributes, see the <xref:System.Data.DataColumn.ColumnMapping%2A> property."
  example:
  - "The following example constructs a computed column.  \n  \n [!code-cs[Classic WebData DataColumn.DataColumn4 Example#1](~/add/codesnippet/csharp/0bebed42-c35c-4bf3-9757-_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataColumn4 Example#1](~/add/codesnippet/visualbasic/0bebed42-c35c-4bf3-9757-_1.vb)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType, string expr, System.Data.MappingType type);
    parameters:
    - id: columnName
      type: System.String
      description: "만들려는 열의 이름을 나타내는 문자열입니다. 경우 설정 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 빈 문자열 (&quot;&quot;), columns 컬렉션에 추가 될 때 기본 이름이 지정 됩니다."
    - id: dataType
      type: System.Type
      description: "에 지원 되는 <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*>"
    - id: expr
      type: System.String
      description: "이 열을 만드는 사용 되는 식입니다. 자세한 내용은 참조는 <xref:System.Data.DataColumn.Expression*>속성.</xref:System.Data.DataColumn.Expression*>"
    - id: type
      type: System.Data.MappingType
      description: "중 하나는 <xref href=&quot;System.Data.MappingType&quot;> </xref> 값입니다."
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "더 <code> dataType </code> 지정 되었습니다."
  platform:
  - net462
- uid: System.Data.DataColumn.AllowDBNull
  id: AllowDBNull
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
  fullName: System.Data.DataColumn.AllowDBNull
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "테이블에 속하는 행에 대 한이 열에 null 값 허용 되는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> and sets its AllowDBNull property to `true`.  \n  \n [!code-vb[Classic WebData DataColumn.AllowDBNull Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_2_1.vb)]\n [!code-cs[Classic WebData DataColumn.AllowDBNull Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_2_1.cs)]"
  syntax:
    content: public bool AllowDBNull { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>null 값 값이 허용 됩니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.DataColumn.AllowDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrement
  id: AutoIncrement
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
  fullName: System.Data.DataColumn.AutoIncrement
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "열이 테이블에 추가 하는 새 행에 대 한 열 값을 자동으로 증가 하는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "없으면이 열 형식은 Int16, Int32 또는 i n t&64;이이 속성이 설정 된 경우는 <xref:System.Data.DataColumn.DataType%2A>속성 Int32 강제 변환 됩니다.</xref:System.Data.DataColumn.DataType%2A> 계산된 열이 있는 경우 예외가 생성 됩니다. <xref:System.Data.DataColumn.Expression%2A>속성을 설정 합니다.</xref:System.Data.DataColumn.Expression%2A> 증가 한 값은 columns 컬렉션에 추가 될 때이 열에 대 한 행의 값은 기본값을 사용 하는 경우에 사용 됩니다.       사용 하 여 새 행을 만들 수 있습니다는 <xref:System.Data.DataRow.ItemArray%2A>의 속성은 <xref:System.Data.DataRow>클래스 및 값의 배열에 전달 합니다.</xref:System.Data.DataRow> </xref:System.Data.DataRow.ItemArray%2A> 자동 증분 열으로 설정 이것은 잠재적인 문제 `true`이므로 해당 값이 자동으로 생성 합니다. 사용 하 여 <xref:System.Data.DataRow.ItemArray%2A>속성, 현재 위치 `null` 배열에 있는 열의 위치에.</xref:System.Data.DataRow.ItemArray%2A> 자세한 내용은 <xref:System.Data.DataRow.ItemArray%2A> <xref:System.Data.DataRow>클래스</xref:System.Data.DataRow> 의 속성</xref:System.Data.DataRow.ItemArray%2A> 을 참조 하십시오.       열 형식이 <xref:System.Data.SqlTypes.SqlInt16>또는 <xref:System.Data.SqlTypes.SqlInt32>, AutoIncrement 작동 하지 것입니다.</xref:System.Data.SqlTypes.SqlInt32> </xref:System.Data.SqlTypes.SqlInt16> Int16 또는 i n t&32;를 대신 사용 합니다.       열 형식이 <xref:System.Data.SqlTypes.SqlInt64>또는 <xref:System.Data.SqlTypes.SqlDecimal>, AutoIncrement은 부분적 으로만 작동 합니다.</xref:System.Data.SqlTypes.SqlDecimal> </xref:System.Data.SqlTypes.SqlInt64> Int64 또는&10; 진수를 대신 사용 합니다.       경우는 <xref:System.Data.DataColumn.AutoIncrementStep%2A>값 현재 값에 추가 되는 오버플로 검사 되지 않습니다.</xref:System.Data.DataColumn.AutoIncrementStep%2A>"
  example:
  - "The following example sets the AutoIncrement, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, and <xref:System.Data.DataColumn.AutoIncrementStep%2A> properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_13_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_13_1.cs)]"
  syntax:
    content: public bool AutoIncrement { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>열의 값이 자동으로 증가 시키는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.DataColumn.AutoIncrement*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "열은 계산된 열입니다."
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrementSeed
  id: AutoIncrementSeed
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
  fullName: System.Data.DataColumn.AutoIncrementSeed
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "이 있는 열에 대 한 시작 값을 가져오거나 설정 합니다. 해당 <xref:System.Data.DataColumn.AutoIncrement*>속성이로 설정 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Data.DataColumn.AutoIncrement*> 기본값은 0입니다."
  remarks: ''
  example:
  - "The following example sets the <xref:System.Data.DataColumn.AutoIncrement%2A>, AutoIncrementSeed, and <xref:System.Data.DataColumn.AutoIncrementStep%2A> properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_15_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_15_1.cs)]"
  syntax:
    content: public long AutoIncrementSeed { get; set; }
    return:
      type: System.Int64
      description: "에 대 한 시작 값은 <xref:System.Data.DataColumn.AutoIncrement*>기능.</xref:System.Data.DataColumn.AutoIncrement*>"
  overload: System.Data.DataColumn.AutoIncrementSeed*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrementStep
  id: AutoIncrementStep
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
  fullName: System.Data.DataColumn.AutoIncrementStep
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 열에서 사용 되는 증가값을 가져오거나 설정 합니다. 해당 <xref:System.Data.DataColumn.AutoIncrement*>속성이로 설정 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Data.DataColumn.AutoIncrement*>"
  remarks: ''
  example:
  - "The following example sets the <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, and AutoIncrementStep properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_7_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_7_1.cs)]"
  syntax:
    content: public long AutoIncrementStep { get; set; }
    return:
      type: System.Int64
      description: "열의 값이 자동으로 기준인 증가 수입니다. 기본값은 1입니다."
  overload: System.Data.DataColumn.AutoIncrementStep*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "설정 값은&0;입니다."
  platform:
  - net462
- uid: System.Data.DataColumn.Caption
  id: Caption
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Caption
  nameWithType: DataColumn.Caption
  fullName: System.Data.DataColumn.Caption
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "열에 대 한 캡션을 가져오거나 설정 합니다."
  remarks: "Caption 속성을 사용 하 여 표시에 <xref:System.Data.DataColumn>.</xref:System.Data.DataColumn> 에 대 한 설명 또는 친숙 한 이름"
  example:
  - "The following example creates a new <xref:System.Data.DataTable>. It then adds three <xref:System.Data.DataColumn> objects to a <xref:System.Data.DataColumnCollection> and sets the Caption property for each <xref:System.Data.DataColumn>.  \n  \n [!code-cs[Classic WebData DataColumn.Caption Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_5_1.cs)]\n [!code-vb[Classic WebData DataColumn.Caption Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_5_1.vb)]"
  syntax:
    content: public string Caption { get; set; }
    return:
      type: System.String
      description: "열의 캡션입니다. 설정 되지 않은 경우, 반환 된 <xref:System.Data.DataColumn.ColumnName*>값.</xref:System.Data.DataColumn.ColumnName*>"
  overload: System.Data.DataColumn.Caption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.CheckNotAllowNull
  id: CheckNotAllowNull
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: CheckNotAllowNull()
  nameWithType: DataColumn.CheckNotAllowNull()
  fullName: System.Data.DataColumn.CheckNotAllowNull()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "이 멤버는.NET Framework 인프라를 지원 하며 사용자 코드에서 직접 사용할 수 없습니다."
  syntax:
    content: protected void CheckNotAllowNull ();
    parameters: []
  overload: System.Data.DataColumn.CheckNotAllowNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.CheckUnique
  id: CheckUnique
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: CheckUnique()
  nameWithType: DataColumn.CheckUnique()
  fullName: System.Data.DataColumn.CheckUnique()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "이 멤버는.NET Framework 인프라를 지원 하며 사용자 코드에서 직접 사용할 수 없습니다."
  syntax:
    content: protected void CheckUnique ();
    parameters: []
  overload: System.Data.DataColumn.CheckUnique*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ColumnMapping
  id: ColumnMapping
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
  fullName: System.Data.DataColumn.ColumnMapping
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "가져오거나는 <xref href=&quot;System.Data.MappingType&quot;> </xref> 열입니다."
  remarks: "ColumnMapping 속성 결정 방법을 <xref:System.Data.DataColumn>때 매핑되는 <xref:System.Data.DataSet>사용 하 여 XML 문서 저장는 <xref:System.Data.DataSet.WriteXml%2A>메서드.</xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataColumn>       그러나 예를 들어 경우는 <xref:System.Data.DataColumn>&quot;customerID&quot; 및 속성이로 설정 된 해당 ColumnMapping 라는 `MappingType.Element`, 열 값에는 다음과 같은 XML 생성 합니다: ```   <Customers>    <customerID>ALFKI</customerID>   ......    </Customers>    <Orders>    <OrderID>12345</OrderID>    <customerID>ALFKI</customerID>   ......    </Orders>   ``` 같은 열에 매핑된 경우 `MappingType.Attribute`, 다음 XML이 생성: ```   <Customers customerID=&quot;ALFKI&quot;........more attributes.....>    <Order orderID=&quot;1234&quot;....more attributes..../>    <Order orderID=&quot;1234&quot;....more attributes..../>   ...... More orders for this customer    </Customers>   ``` 사용은 <xref:System.Data.DataColumn.%23ctor%2A>생성자를 포함 하는 `type` 모두 지정 하는 방법에 대 한 인수는 <xref:System.Data.DataColumn>경우 매핑된 해당 <xref:System.Data.DataSet>XML 문서를 변환.</xref:System.Data.DataSet> </xref:System.Data.DataColumn> </xref:System.Data.DataColumn.%23ctor%2A> </xref:System.Data.DataColumn>       생성자 인수에는 ColumnMapping 속성 해당 `type`합니다."
  example:
  - "The following example sets the ColumnMapping type property of new <xref:System.Data.DataColumn>.  \n  \n [!code-cs[Classic WebData DataColumn.ColumnMapping Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_9_1.cs)]\n [!code-vb[Classic WebData DataColumn.ColumnMapping Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_9_1.vb)]"
  syntax:
    content: public virtual System.Data.MappingType ColumnMapping { get; set; }
    return:
      type: System.Data.MappingType
      description: "중 하나는 <xref href=&quot;System.Data.MappingType&quot;> </xref> 값입니다."
  overload: System.Data.DataColumn.ColumnMapping*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ColumnName
  id: ColumnName
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ColumnName
  nameWithType: DataColumn.ColumnName
  fullName: System.Data.DataColumn.ColumnName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "에 있는 열의 이름을 가져오거나 설정 합니다.는 <xref href=&quot;System.Data.DataColumnCollection&quot;> </xref>합니다."
  remarks: "경우는 <xref:System.Data.DataColumn>는 생성 값이 없어 ColumnName.</xref:System.Data.DataColumn> 그러나 때는 <xref:System.Data.DataColumn>에 추가 되는 <xref:System.Data.DataColumnCollection>에 대 한는 <xref:System.Data.DataTable>개체 (&quot;Column1&quot;, &quot;Column2&quot; 등)는 기본 이름이 지정 됩니다.</xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> </xref:System.Data.DataColumn>       기본적으로는 <xref:System.Data.DataColumn.Caption%2A>값 열 이름 값으로 설정 됩니다.</xref:System.Data.DataColumn.Caption%2A>"
  example:
  - "The following examples gets the ColumnName for every column in every table in a <xref:System.Data.DataSet>. The example also shows how to create a <xref:System.Data.DataColumn> with a new ColumnName.  \n  \n [!code-vb[Classic WebData DataColumn.ColumnName Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_8_1.vb)]\n [!code-cs[Classic WebData DataColumn.ColumnName Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_8_1.cs)]"
  syntax:
    content: public string ColumnName { get; set; }
    return:
      type: System.String
      description: "열의 이름입니다."
  overload: System.Data.DataColumn.ColumnName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "속성이로 설정 되어 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 빈 문자열 및 열 컬렉션에 속해 있습니다."
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "동일한 이름의 열 컬렉션에 이미 있습니다. 이름을 비교 대/소문자 구분 합니다."
  platform:
  - net462
- uid: System.Data.DataColumn.DataType
  id: DataType
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataType
  nameWithType: DataColumn.DataType
  fullName: System.Data.DataColumn.DataType
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "열에 저장 된 데이터 형식을 가져오거나 설정 합니다."
  remarks: "데이터 형식 값을 설정 하는 것은 매우 올바로 만들고 및 데이터 원본의 데이터를에서 업데이트 해야 합니다.       DataType 속성은 다음과 같은 기본.NET Framework 데이터 형식을 지원:- <xref:System.Boolean>- <xref:System.Byte>- <xref:System.Char>- <xref:System.DateTime>- <xref:System.Decimal>- <xref:System.Double>- <xref:System.Guid>- <xref:System.Int16>- <xref:System.Int32>- <xref:System.Int64>- <xref:System.SByte>- <xref:System.Single>- <xref:System.String>- <xref:System.TimeSpan>- <xref:System.UInt16>- <xref:System.UInt32>- <xref:System.UInt64>는 다음 배열 형식을:- `Byte[]` 데이터를 저장 하기 시작 된 열 뒤에이 속성을 변경 하는 경우 예외가 생성 됩니다.</xref:System.UInt64> </xref:System.UInt32> </xref:System.UInt16> </xref:System.TimeSpan> </xref:System.String> </xref:System.Single> </xref:System.SByte> </xref:System.Int64> </xref:System.Int32> </xref:System.Int16> </xref:System.Guid> </xref:System.Double> </xref:System.Decimal> </xref:System.DateTime> </xref:System.Char> </xref:System.Byte> </xref:System.Boolean>       경우 <xref:System.Data.DataColumn.AutoIncrement%2A>로 설정 된 `true` 설정의 DataType 속성이 정수 형식인 제외 하 고로 유형을 설정을 시도 하기 전에 예외가 생성 됩니다.</xref:System.Data.DataColumn.AutoIncrement%2A>      > [!NOTE] > 데이터 형식의 열 `Byte[]` 이므로, 기본.NET Framework 데이터 형식과 달리, 참조 데이터 형식의 특정 한 경우에는 특별 한 처리를 필요로 합니다. 데이터 형식의 열 `Byte[]` 로 사용 되는 <xref:System.Data.DataTable.PrimaryKey%2A>로 <xref:System.Data.DataView.Sort%2A>또는 <xref:System.Data.DataView.RowFilter%2A>에 대 한 키는 <xref:System.Data.DataView>, 열 값을 변경한 할당 해야는 `Byte[]` 열 값을 개별적으로 인스턴스화된 `Byte[]` 개체.</xref:System.Data.DataView> </xref:System.Data.DataView.RowFilter%2A> </xref:System.Data.DataView.Sort%2A> </xref:System.Data.DataTable.PrimaryKey%2A> 이 할당 정렬, 필터링 및 기본 키 작업에 의해 사용 되는 내부 인덱스의 업데이트를 트리거하도록 필요 합니다. 다음 예제에서이 확인할: ```   byte[] columnValue = (byte[])myDataTable.Rows[0][0];   byte[] newValue = (byte[])columnValue.Clone();   newValue[1] = 2;   myDataTable.Rows[0][0] = newValue;   ```       >  [!NOTE] > 기본.NET Framework 데이터 형식 이외의 다른 데이터 형식의 열을 정의할 수 있지만 및 `Byte[]`, 이러한 열은 다음과 같은 사용 제한에 따라 사용자 정의 형식으로 처리 합니다. (사용자 정의 형식에 대 한 자세한 내용은 참조 하십시오. [만들기 및 사용자 형식](http://msdn.microsoft.com/en-us/ec0266d2-7e5b-47e4-938a-85ac9d04fa40).)      -열에 포함 될 수 없습니다는 <xref:System.Data.DataView.RowFilter%2A>또는 <xref:System.Data.DataTable.Select%2A>식.</xref:System.Data.DataTable.Select%2A> </xref:System.Data.DataView.RowFilter%2A>      -열으로 사용 되는 경우는 <xref:System.Data.DataTable.PrimaryKey%2A>로 <xref:System.Data.DataView.Sort%2A>또는 <xref:System.Data.DataView>, 변경할 수 없는 필드로 처리 해야 합니다; 테이블에 추가 되 면 열 데이터를 변경 하지 않아야 합니다.</xref:System.Data.DataView> </xref:System.Data.DataView.Sort%2A> </xref:System.Data.DataTable.PrimaryKey%2A>      -해당 <xref:System.Data.DataColumn.ColumnMapping%2A>로 설정할 수 있습니다 `MappingType.Element`.</xref:System.Data.DataColumn.ColumnMapping%2A>      열의 데이터 형식이 있어야 구현으로 표시 해야 하는-클래스는 <xref:System.SerializableAttribute>, 필요한 경우 구현 하는 경우는 <xref:System.Runtime.Serialization.ISerializable>또는 <xref:System.Xml.Serialization.IXmlSerializable>인터페이스.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Runtime.Serialization.ISerializable> </xref:System.SerializableAttribute>      -변경 내용 추적에 대 한 지원은 제한 됩니다. 활용 하는 <xref:System.Data.DataTable>클래스의 변경 내용 추적 메커니즘을 열의 데이터 형식을 구현 하는 클래스를 구현는 <xref:System.ComponentModel.IChangeTracking>인터페이스, 또는 알리는 하는 것에 대 한 책임은 <xref:System.Data.DataRow>열 값이 변경 되 면 호출 하거나 <xref:System.Data.DataRow.SetModified%2A>행 또는 열 값 개체를 개별적으로 인스턴스화된 열 값 개체를 할당 하 여.</xref:System.Data.DataRow.SetModified%2A> </xref:System.Data.DataRow> </xref:System.ComponentModel.IChangeTracking> </xref:System.Data.DataTable>"
  example:
  - "The following example adds columns of several data types to a <xref:System.Data.DataTable>, and then adds one row to the table.  \n  \n [!code-cs[Classic WebData DataColumn.DataType Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_4_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataType Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_4_1.vb)]"
  syntax:
    content: public Type DataType { get; set; }
    return:
      type: System.Type
      description: "A <xref:System.Type>열 데이터 형식을 나타내는 개체입니다.</xref:System.Type>"
  overload: System.Data.DataColumn.DataType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "열에 이미 저장 된 데이터가 있습니다."
  platform:
  - net462
- uid: System.Data.DataColumn.DateTimeMode
  id: DateTimeMode
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
  fullName: System.Data.DataColumn.DateTimeMode
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "가져오거나는 <xref uid=&quot;langword_csharp_DateTimeMode&quot; name=&quot;DateTimeMode&quot; href=&quot;&quot;> </xref> 열에 대 한 합니다."
  remarks: "행에 추가 된 후 DateTimeMode를 수정할 수 없습니다는 <xref:System.Data.DataColumn>에서 수정 제외한 <xref:System.Data.DataSetDateTime>및 <xref:System.Data.DataSetDateTime>하거나 그 반대로.</xref:System.Data.DataSetDateTime> </xref:System.Data.DataSetDateTime> </xref:System.Data.DataColumn> 수정 `UnspecifiedLocal` 를 `Unspecified` 있으며 반대의 이러한 두 옵션 간의 차이점 serialization 중에 하 고 저장소는 영향을 주지 않습니다."
  syntax:
    content: public System.Data.DataSetDateTime DateTimeMode { get; set; }
    return:
      type: System.Data.DataSetDateTime
      description: "<xref href=&quot;System.Data.DataSetDateTime&quot;> </xref> 지정 된 열입니다."
  overload: System.Data.DataColumn.DateTimeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.DefaultValue
  id: DefaultValue
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
  fullName: System.Data.DataColumn.DefaultValue
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "새 행을 만들 때 열에 대 한 기본 값을 가져오거나 설정 합니다."
  remarks: "기본값은 열에 자동으로 할당 된 값 때는 <xref:System.Data.DataRow>만들어집니다 (예를 들어 날짜와 시간을 <xref:System.Data.DataRow>만들었습니다.</xref:System.Data.DataRow> </xref:System.Data.DataRow>       때 <xref:System.Data.DataColumn.AutoIncrement%2A>로 설정 된 true 이면 있을 수 있습니다 기본값이 없습니다.</xref:System.Data.DataColumn.AutoIncrement%2A>       사용 하 여 새 행을 만들 수 있습니다는 <xref:System.Data.DataRow.ItemArray%2A>의 속성은 <xref:System.Data.DataRow>클래스와 값의 배열을 전달 합니다.</xref:System.Data.DataRow> </xref:System.Data.DataRow.ItemArray%2A> 해당 값이 자동으로 생성 하기 때문에 이것이 기본값은 열에 대 한 잠재적인 문제입니다. 사용 하는 <xref:System.Data.DataRow.ItemArray%2A>속성 이러한 열이 있는 배치 `null` 배열에 있는 열의 위치에.</xref:System.Data.DataRow.ItemArray%2A> 자세한 내용은 참조는 <xref:System.Data.DataRow.ItemArray%2A>속성.</xref:System.Data.DataRow.ItemArray%2A>"
  example:
  - "The following example creates several <xref:System.Data.DataColumn> objects that have different data types, and sets appropriate default values to each column.  \n  \n [!code-vb[Classic WebData DataColumn.DefaultValue Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_0_1.vb)]"
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "열의 <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*> 에 적합 한 값"
  overload: System.Data.DataColumn.DefaultValue*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "행을 추가 하는 경우 기본값은 열의 데이터 형식 인스턴스의 아닙니다."
  platform:
  - net462
- uid: System.Data.DataColumn.Expression
  id: Expression
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Expression
  nameWithType: DataColumn.Expression
  fullName: System.Data.DataColumn.Expression
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "행을 필터링, 열에 값을 계산 하거나 집계 열을 만드는 데 식을 가져오거나 설정 합니다."
  remarks: "One use of the Expression property is to create calculated columns. For example, to calculate a tax value, the unit price is multiplied by a tax rate of a specific region. Because tax rates vary from region to region, it would be impossible to put a single tax rate in a column; instead, the value is calculated using the Expression property, as shown in the Visual Basic code in the following section:  \n  \n DataSet1.Tables(\"Products\").Columns(\"tax\").Expression = \"UnitPrice * 0.086\"  \n  \n A second use is to create an aggregate column. Similar to a calculated value, an aggregate performs an operation based on the complete set of rows in the <xref:System.Data.DataTable>. A simple example is to count the number of rows returned in the set. This is the method you would use to count the number of transactions completed by a particular salesperson, as shown in this Visual Basic code:  \n  \n```  \nDataSet1.Tables(\"Orders\").Columns(\"OrderCount\").Expression = \"Count(OrderID)\"  \n```  \n  \n## Expression Syntax  \n When you create an expression, use the <xref:System.Data.DataColumn.ColumnName%2A> property to refer to columns. For example, if the <xref:System.Data.DataColumn.ColumnName%2A> for one column is \"UnitPrice\", and another \"Quantity\", the expression would be as follows:  \n  \n \"UnitPrice * Quantity\"  \n  \n> [!NOTE]\n>  If a column is used in an expression, then the expression is said to have a dependency on that column. If a dependent column is renamed or removed, no exception is thrown. An exception will be thrown when the now-broken expression column is accessed.  \n  \n When you create an expression for a filter, enclose strings with single quotation marks:  \n  \n \"LastName = 'Jones'\"  \n  \n If a column name contains any non-alphanumeric characters or starts with a digit or matches (case-insensitively) any of the following reserved words, it requires special handling, as described in the following paragraphs.  \n  \n And  \n  \n Between  \n  \n Child  \n  \n False  \n  \n In  \n  \n Is  \n  \n Like  \n  \n Not  \n  \n Null  \n  \n Or  \n  \n Parent  \n  \n True  \n  \n If a column name satisfies one of the above conditions, it must be wrapped in either square brackets or the \"`\" (grave accent) quotes. For example, to use a column named \"Column#\" in an expression, you would write either \"[Column#]\":  \n  \n Total * [Column#]  \n  \n or \"\\`Column#`\":  \n  \n Total * \\`Column#`  \n  \n If the column name is enclosed in square brackets then any ']' and '\\\\' characters (but not any other characters) in it must be escaped by prepending them with the backslash (\"\\\\\") character. If the column name is enclosed in grave accent characters then it must not contain any grave accent characters in it. For example, a column named \"Column[]\\\\\" would be written:  \n  \n Total * [Column[\\\\]\\\\\\\\]  \n  \n or  \n  \n Total * \\`Column[]\\\\`  \n  \n## User-Defined Values  \n User-defined values may be used within expressions to be compared with column values. String values should be enclosed within single quotation marks (and each single quotation character in a string value has to be escaped by prepending it with another single quotation character). Date values should be enclosed within pound signs (#) or single quotes (') based on the data provider. Decimals and scientific notation are permissible for numeric values. For example:  \n  \n \"FirstName = 'John'\"  \n  \n \"Price <= 50.00\"  \n  \n \"Birthdate < #1/31/82#\"  \n  \n For columns that contain enumeration values, cast the value to an integer data type. For example:  \n  \n \"EnumColumn = 5\"  \n  \n## Parsing Literal Expressions  \n All literal expressions must be expressed in the invariant culture locale. When `DataSet` parses and converts literal expressions, it always uses the invariant culture, not the current culture.  \n  \n String literals are identified when there are single quotes surrounding the value. For example:  \n  \n 'John'  \n  \n `Boolean` literals are true and false; they are not quoted in expressions.  \n  \n `Integer` literals [+-]?[0-9]+ are treated as `System.Int32`, `System.Int64` or `System.Double`. `System.Double` can lose precision depending on how large the number is. For example, if the number in the literal is 2147483650, `DataSet` will first attempt to parse the number as an `Int32`. This will not succeed because the number is too large. In this case `DataSet` will parse the number as an `Int64`, which will succeed. If the literal was a number larger than the maximum value of an Int64, `DataSet` will parse the literal using `Double`.  \n  \n Real literals using scientific notation, such as 4.42372E-30, are parsed using `System.Double`.  \n  \n Real literals without scientific notation, but with a decimal point, are treated as `System.Decimal`. If the number exceeds the maximum or minimum values supported by `System.Decimal`, then it is parsed as a `System.Double`. For example:  \n  \n 142526.144524 will be converted to a `Decimal`.  \n  \n 345262.78036719560925667 will be treated as a `Double`.  \n  \n## Operators  \n Concatenation is allowed using Boolean AND, OR, and NOT operators. You can use parentheses to group clauses and force precedence. The AND operator has precedence over other operators. For example:  \n  \n (LastName = 'Smith' OR LastName = 'Jones') AND FirstName = 'John'  \n  \n When you create comparison expressions, the following operators are allowed:  \n  \n <  \n  \n \\>  \n  \n <=  \n  \n \\>=  \n  \n <>  \n  \n =  \n  \n IN  \n  \n LIKE  \n  \n The following arithmetic operators are also supported in expressions:  \n  \n \\+ (addition)  \n  \n \\- (subtraction)  \n  \n \\* (multiplication)  \n  \n / (division)  \n  \n % (modulus)  \n  \n## String Operators  \n To concatenate a string, use the + character. The value of the <xref:System.Data.DataSet.CaseSensitive%2A> property of the <xref:System.Data.DataSet> class determines whether string comparisons are case-sensitive. However, you can override that value with the <xref:System.Data.DataTable.CaseSensitive%2A> property of the <xref:System.Data.DataTable> class.  \n  \n## Wildcard Characters  \n Both the * and % can be used interchangeably for wildcard characters in a LIKE comparison. If the string in a LIKE clause contains a \\* or %, those characters should be enclosed in brackets ([]). If a bracket is in the clause, each bracket character should be enclosed in brackets (for example [[] or []]). A wildcard is allowed at the start and end of a pattern, or at the end of a pattern, or at the start of a pattern. For example:  \n  \n \"ItemName LIKE '*product\\*'\"  \n  \n \"ItemName LIKE '*product'\"  \n  \n \"ItemName LIKE 'product*'\"  \n  \n Wildcard characters are not allowed in the middle of a string. For example, 'te*xt' is not allowed.  \n  \n## Parent/Child Relation Referencing  \n A parent table may be referenced in an expression by prepending the column name with `Parent`. For example, the `Parent.Price` references the parent table's column named `Price`.  \n  \n When a child has more than one parent row, use Parent(RelationName).ColumnName. For example, the Parent(RelationName).Price references the parent table’s column named Price via the relation.  \n  \n A column in a child table may be referenced in an expression by prepending the column name with `Child`. However, because child relationships may return multiple rows, you must include the reference to the child column in an aggregate function. For example, `Sum(Child.Price)` would return the sum of the column named `Price` in the child table.  \n  \n If a table has more than one child, the syntax is: `Child(RelationName)`. For example, if a table has two child tables named `Customers` and `Orders`, and the <xref:System.Data.DataRelation> object is named `Customers2Orders`, the reference would be as follows:  \n  \n Avg(Child(Customers2Orders).Quantity)  \n  \n## Aggregates  \n The following aggregate types are supported:  \n  \n Sum (Sum)  \n  \n Avg (Average)  \n  \n Min (Minimum)  \n  \n Max (Maximum)  \n  \n Count (Count)  \n  \n StDev (Statistical standard deviation)  \n  \n Var (Statistical variance).  \n  \n Aggregates are ordinarily performed along relationships. Create an aggregate expression by using one of the functions listed earlier and a child table column as detailed in Parent/Child Relation Referencing that was discussed earlier. For example:  \n  \n Avg(Child.Price)  \n  \n Avg(Child(Orders2Details).Price)  \n  \n An aggregate can also be performed on a single table. For example, to create a summary of figures in a column named \"Price\":  \n  \n Sum(Price)  \n  \n> [!NOTE]\n>  If you use a single table to create an aggregate, there would be no group-by functionality. Instead, all rows would display the same value in the column.  \n  \n If a table has no rows, the aggregate functions will return `null`.  \n  \n Data types can always be determined by examining the <xref:System.Data.DataColumn.DataType%2A> property of a column. You can also convert data types using the Convert function, shown in the following section.  \n  \n An aggregate can only be applied to a single column and no other expressions can be used inside the aggregate.  \n  \n## Functions  \n The following functions are also supported:  \n  \n `CONVERT`  \n  \n|||  \n|-|-|  \n|Description|Converts particular expression to a specified .NET Framework Type.|  \n|Syntax|Convert(`expression`, `type`)|  \n|Arguments|`expression` -- The expression to convert.<br /><br /> `type` -- The .NET Framework type to which the value will be converted.|  \n  \n Example: myDataColumn.Expression=\"Convert(total, 'System.Int32')\"  \n  \n All conversions are valid with the following exceptions: `Boolean` can be coerced to and from `Byte`, `SByte`, `Int16`, `Int32`, `Int64`, `UInt16`, `UInt32`, `UInt64`, `String` and itself only. `Char` can be coerced to and from `Int32`, `UInt32`, `String`, and itself only. `DateTime` can be coerced to and from `String` and itself only. `TimeSpan` can be coerced to and from `String` and itself only.  \n  \n `LEN`  \n  \n|||  \n|-|-|  \n|Description|Gets the length of a string|  \n|Syntax|LEN(`expression`)|  \n|Arguments|`expression` -- The string to be evaluated.|  \n  \n Example: myDataColumn.Expression=\"Len(ItemName)\"  \n  \n `ISNULL`  \n  \n|||  \n|-|-|  \n|Description|Checks an expression and either returns the checked expression or a replacement value.|  \n|Syntax|ISNULL(`expression`, `replacementvalue`)|  \n|Arguments|`expression` -- The expression to check.<br /><br /> `replacementvalue` -- If expression is `null`, `replacementvalue` is returned.|  \n  \n Example: myDataColumn.Expression=\"IsNull(price, -1)\"  \n  \n `IIF`  \n  \n|||  \n|-|-|  \n|Description|Gets one of two values depending on the result of a logical expression.|  \n|Syntax|IIF(`expr`, `truepart`, `falsepart`)|  \n|Arguments|`expr` -- The expression to evaluate.<br /><br /> `truepart` -- The value to return if the expression is true.<br /><br /> `falsepart` -- The value to return if the expression is false.|  \n  \n Example: myDataColumn.Expression = \"IIF(total>1000, 'expensive', 'dear')  \n  \n `TRIM`  \n  \n|||  \n|-|-|  \n|Description|Removes all leading and trailing blank characters like \\r, \\n, \\t, ' '|  \n|Syntax|TRIM(`expression`)|  \n|Arguments|`expression` -- The expression to trim.|  \n  \n `SUBSTRING`  \n  \n|||  \n|-|-|  \n|Description|Gets a sub-string of a specified length, starting at a specified point in the string.|  \n|Syntax|SUBSTRING(`expression`, `start`, `length`)|  \n|Arguments|`expression` -- The source string for the substring.<br /><br /> `start` -- Integer that specifies where the substring starts.<br /><br /> `length` -- Integer that specifies the length of the substring.|  \n  \n Example: myDataColumn.Expression = \"SUBSTRING(phone, 7, 8)\"  \n  \n> [!NOTE]\n>  You can reset the Expression property by assigning it a null value or empty string. If a default value is set on the expression column, all previously filled rows are assigned the default value after the Expression property is reset."
  example:
  - "The following example creates three columns in a <xref:System.Data.DataTable>. The second and third columns contain expressions; the second calculates tax using a variable tax rate, and the third adds the result of the calculation to the value of the first column. The resulting table is displayed in a <xref:System.Windows.Forms.DataGrid> control.  \n  \n [!code-cs[Classic WebData DataColumn.Expression Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_1_1.cs)]\n [!code-vb[Classic WebData DataColumn.Expression Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_1_1.vb)]"
  syntax:
    content: public string Expression { get; set; }
    return:
      type: System.String
      description: "식으로, 열의 값을 계산 하거나 집계 열을 만듭니다. 식의 반환 형식을 기준는 <xref:System.Data.DataColumn.DataType*>열의.</xref:System.Data.DataColumn.DataType*>"
  overload: System.Data.DataColumn.Expression*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <>*> or <>*> property is set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "CONVERT 함수를 사용 하는 식은 문자열로 계산 되지만 문자열 형식 매개 변수를 변환할 수 있는 표현이 포함 되지 않습니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "CONVERT 함수를 사용 하는 경우 요청 된 캐스트가 불가능 합니다. 가능한 캐스트에 대 한 자세한 내용은 다음 섹션에 변환 함수를 참조 하십시오."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "SUBSTRING 함수를 사용 하면 시작 인수가 범위를 벗어났습니다.       -또는-길이 인수가 범위를 벗어났습니다. SUBSTRING 함수를 사용 합니다."
  - type: System.Exception
    commentId: T:System.Exception
    description: "LEN 함수 또는 TRIM 함수를 사용 하면 식이 문자열로 계산 되지 않습니다. <xref:System.Char>.</xref:System.Char> 을 평가 하는 식이 포함 됩니다."
  platform:
  - net462
- uid: System.Data.DataColumn.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
  fullName: System.Data.DataColumn.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "연결 된 사용자 지정 사용자 정보 컬렉션을 가져옵니다는 <xref href=&quot;System.Data.DataColumn&quot;> </xref>합니다."
  remarks: "ExtendedProperties 속성을 사용 하면 개체를 사용 하 여 사용자 지정 정보를 저장할 수 있습니다. 예를 들어 데이터를 새로 고쳐야 할 시간을 저장할 수 있습니다.       확장된 속성 <xref:System.String>.</xref:System.String> 형식 이어야 합니다. 형식이 아닌 속성 <xref:System.String>유지 되지 않습니다는 <xref:System.Data.DataColumn>XML로 기록 됩니다.</xref:System.Data.DataColumn> </xref:System.String>"
  example:
  - "The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the ExtendedProperties property. The second example retrieves the custom property.  \n  \n [!code-cs[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_10_1.cs)]\n [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_10_1.vb)]"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "A <xref href=&quot;System.Data.PropertyCollection&quot;> </xref> 사용자 정의 정보입니다."
  overload: System.Data.DataColumn.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.MaxLength
  id: MaxLength
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: MaxLength
  nameWithType: DataColumn.MaxLength
  fullName: System.Data.DataColumn.MaxLength
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "텍스트 열의 최대 길이 가져오거나 설정 합니다."
  remarks: "MaxLength 속성은 텍스트가 아닌 열에 대 한 무시 됩니다. A <xref:System.ArgumentException>MaxLength 문자열이 아닌 열에 할당 하는 경우 예외가 발생 합니다.</xref:System.ArgumentException>"
  syntax:
    content: public int MaxLength { get; set; }
    return:
      type: System.Int32
      description: "문자에서 열의 최대 길이입니다. 열 최대 길이가 없는 경우 값은-1 (기본값)."
  overload: System.Data.DataColumn.MaxLength*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Namespace
  id: Namespace
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Namespace
  nameWithType: DataColumn.Namespace
  fullName: System.Data.DataColumn.Namespace
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "네임 스페이스를 가져오거나 설정 합니다.는 <xref href=&quot;System.Data.DataColumn&quot;> </xref>합니다."
  remarks: "Namespace 속성이에 문서를 읽고 XML을 쓸 때 사용 되는 <xref:System.Data.DataTable>에 <xref:System.Data.DataSet>를 사용 하는 <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, 또는 <xref:System.Data.DataSet.WriteXmlSchema%2A>메서드.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable>       XML 문서의 네임 스페이스는 XML 특성 및 요소에 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 으로 읽을 때 범위를 지정 하는 데 사용 예를 들어 한 <xref:System.Data.DataSet>스키마가 포함 된 &quot;myCompany&quot; 네임 스페이스를 포함 문서에서 읽은 데이터를 읽을 하려고 및 (으로 <xref:System.Data.DataSet.ReadXml%2A>메서드) &quot;theirCompany&quot; 네임 스페이스를 포함 하는 문서에서</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> 기존 스키마에 해당 하지 않는 모든 데이터는 무시 됩니다."
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "네임 스페이스는 <xref href=&quot;System.Data.DataColumn&quot;> </xref>합니다."
  overload: System.Data.DataColumn.Namespace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "네임 스페이스에 이미 데이터가 있습니다."
  platform:
  - net462
- uid: System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "이 멤버는.NET Framework 인프라를 지원 하며 사용자 코드에서 직접 사용할 수 없습니다."
  syntax:
    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "매개 변수 참조입니다."
  overload: System.Data.DataColumn.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Ordinal
  id: Ordinal
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Ordinal
  nameWithType: DataColumn.Ordinal
  fullName: System.Data.DataColumn.Ordinal
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "(0부터 시작)에 있는 열의 위치를 가져옵니다는 <xref href=&quot;System.Data.DataColumnCollection&quot;> </xref> 컬렉션입니다."
  remarks: ''
  example:
  - "The following example returns the column name, ordinal, and data type of a column.  \n  \n [!code-vb[Classic WebData DataColumn.Ordinal Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_16_1.vb)]\n [!code-cs[Classic WebData DataColumn.Ordinal Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_16_1.cs)]"
  syntax:
    content: public int Ordinal { get; }
    return:
      type: System.Int32
      description: "열의 위치입니다. 열 컬렉션의 구성원이 아닙니다.-1을 가져옵니다."
  overload: System.Data.DataColumn.Ordinal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Prefix
  id: Prefix
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Prefix
  nameWithType: DataColumn.Prefix
  fullName: System.Data.DataColumn.Prefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "여부를 가져오거나 설정 XML 접두사의 네임 스페이스를 별칭을 지정 하는 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다."
  remarks: "<xref:System.Data.DataTable.Prefix%2A>에 대 한 네임 스페이스에 속하는 요소를 식별 하는 XML 문서 전체에서 사용 되는 <xref:System.Data.DataSet>개체 (의해 설정 된 <xref:System.Data.DataSet.Namespace%2A>속성).</xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable.Prefix%2A>"
  syntax:
    content: public string Prefix { get; set; }
    return:
      type: System.String
      description: "에 대 한 XML 접두사는 <xref href=&quot;System.Data.DataTable&quot;> </xref> 네임 스페이스입니다."
  overload: System.Data.DataColumn.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.RaisePropertyChanging(System.String)
  id: RaisePropertyChanging(System.String)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: RaisePropertyChanging(String)
  nameWithType: DataColumn.RaisePropertyChanging(String)
  fullName: System.Data.DataColumn.RaisePropertyChanging(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "이 멤버는.NET Framework 인프라를 지원 하며 사용자 코드에서 직접 사용할 수 없습니다."
  syntax:
    content: protected void RaisePropertyChanging (string name);
    parameters:
    - id: name
      type: System.String
      description: "매개 변수 참조입니다."
  overload: System.Data.DataColumn.RaisePropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ReadOnly
  id: ReadOnly
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
  fullName: System.Data.DataColumn.ReadOnly
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "열이 테이블에 행이 추가 되는 즉시 변경에 대 한 허용 하는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: ''
  example:
  - "The following example creates a <xref:System.Data.DataColumn> and sets its ReadOnly property `true`.  \n  \n [!code-vb[Classic WebData DataColumn.ReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_12_1.vb)]\n [!code-cs[Classic WebData DataColumn.ReadOnly Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_12_1.cs)]"
  syntax:
    content: public bool ReadOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>열이 읽기 전용; 이면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.DataColumn.ReadOnly*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "속성이로 설정 되어 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 계산된 열에 있습니다."
  platform:
  - net462
- uid: System.Data.DataColumn.SetOrdinal(System.Int32)
  id: SetOrdinal(System.Int32)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: SetOrdinal(Int32)
  nameWithType: DataColumn.SetOrdinal(Int32)
  fullName: System.Data.DataColumn.SetOrdinal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "서 수 또는의 위치를 변경는 <xref href=&quot;System.Data.DataColumn&quot;> </xref> 지정한 서 수 또는 위치에 있습니다."
  remarks: "또는 변경한 경우 서 수 위치는 <xref:System.Data.DataColumn>지정한 서 수 또는 위치에.</xref:System.Data.DataColumn> 경우 서 수는 0 보다 작거나 열-1 (마지막으로 열의 서 수를 보다 큼)의 기존 번호 보다 큰 다음 잘못 된 <xref:System.ArgumentException>throw 됩니다.</xref:System.ArgumentException>       열의 서 수를 변경 하면 열 열의 컬렉션에서 새 위치로 이동 합니다. 열의 새 서 수를 조정 하는 이전 및 새 서 수 사이 모든 열 번호가 됩니다."
  syntax:
    content: public void SetOrdinal (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "지정 된 서 수입니다."
  overload: System.Data.DataColumn.SetOrdinal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Table
  id: Table
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Table
  nameWithType: DataColumn.Table
  fullName: System.Data.DataColumn.Table
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "가져옵니다는 <xref href=&quot;System.Data.DataTable&quot;> </xref> 에 속해 있는 열입니다."
  remarks: ''
  example:
  - "The following example returns the parent table of a <xref:System.Data.DataColumn> through its Table property.  \n  \n [!code-vb[Classic WebData DataColumn.Table Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_6_1.vb)]\n [!code-cs[Classic WebData DataColumn.Table Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_6_1.cs)]"
  syntax:
    content: public System.Data.DataTable Table { get; }
    return:
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> 하는 <xref href=&quot;System.Data.DataColumn&quot;> </xref> 에 속합니다."
  overload: System.Data.DataColumn.Table*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ToString
  id: ToString
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ToString()
  nameWithType: DataColumn.ToString()
  fullName: System.Data.DataColumn.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "가져옵니다는 <xref:System.Data.DataColumn.Expression*>있을 경우 열의.</xref:System.Data.DataColumn.Expression*>"
  remarks: ''
  example:
  - "The following example uses the ToString property to return the default string of each member of a collection of <xref:System.Data.DataColumn> objects.  \n  \n [!code-vb[Classic WebData DataColumn.ToString Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_1_1.vb)]\n [!code-cs[Classic WebData DataColumn.ToString Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_1_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "<> </> *> 속성이 설정 되지 않았으면, 하는 경우이 값은 <> </> *> 속성."
  overload: System.Data.DataColumn.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Unique
  id: Unique
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Unique
  nameWithType: DataColumn.Unique
  fullName: System.Data.DataColumn.Unique
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "열의 각 행의 값이 고유 해야 하는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "이 속성이 false에서 true로 변경 되는 즉시 값이 고유한 지 확인 하려면이 열에 대해 unique 제약 조건을 만들어질 수 있습니다."
  example:
  - "The following example creates new <xref:System.Data.DataColumn>, sets its properties, and adds it to a table's columns collection.  \n  \n [!code-cs[Classic WebData DataColumn.Unique Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_3_1.cs)]\n [!code-vb[Classic WebData DataColumn.Unique Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_3_1.vb)]"
  syntax:
    content: public bool Unique { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>값은 고유 해야 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.DataColumn.Unique*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "열이 계산된 된 열입니다."
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DuplicateNameException
  parent: System.Data
  isExternal: false
  name: DuplicateNameException
  nameWithType: DuplicateNameException
  fullName: System.Data.DuplicateNameException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Data.DataColumn.#ctor
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn()
  nameWithType: DataColumn.DataColumn()
  fullName: System.Data.DataColumn.DataColumn()
- uid: System.Data.DataColumn.#ctor(System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String)
  nameWithType: DataColumn.DataColumn(String)
  fullName: System.Data.DataColumn.DataColumn(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataColumn.#ctor(System.String,System.Type)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type)
  nameWithType: DataColumn.DataColumn(String,Type)
  fullName: System.Data.DataColumn.DataColumn(String,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type,String)
  nameWithType: DataColumn.DataColumn(String,Type,String)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String)
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type,String,MappingType)
  nameWithType: DataColumn.DataColumn(String,Type,String,MappingType)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String,MappingType)
- uid: System.Data.MappingType
  parent: System.Data
  isExternal: false
  name: MappingType
  nameWithType: MappingType
  fullName: System.Data.MappingType
- uid: System.Data.DataColumn.AllowDBNull
  parent: System.Data.DataColumn
  isExternal: false
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
  fullName: System.Data.DataColumn.AllowDBNull
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataColumn.AutoIncrement
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
  fullName: System.Data.DataColumn.AutoIncrement
- uid: System.Data.DataColumn.AutoIncrementSeed
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
  fullName: System.Data.DataColumn.AutoIncrementSeed
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Data.DataColumn.AutoIncrementStep
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
  fullName: System.Data.DataColumn.AutoIncrementStep
- uid: System.Data.DataColumn.Caption
  parent: System.Data.DataColumn
  isExternal: false
  name: Caption
  nameWithType: DataColumn.Caption
  fullName: System.Data.DataColumn.Caption
- uid: System.Data.DataColumn.CheckNotAllowNull
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckNotAllowNull()
  nameWithType: DataColumn.CheckNotAllowNull()
  fullName: System.Data.DataColumn.CheckNotAllowNull()
- uid: System.Data.DataColumn.CheckUnique
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckUnique()
  nameWithType: DataColumn.CheckUnique()
  fullName: System.Data.DataColumn.CheckUnique()
- uid: System.Data.DataColumn.ColumnMapping
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
  fullName: System.Data.DataColumn.ColumnMapping
- uid: System.Data.DataColumn.ColumnName
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnName
  nameWithType: DataColumn.ColumnName
  fullName: System.Data.DataColumn.ColumnName
- uid: System.Data.DataColumn.DataType
  parent: System.Data.DataColumn
  isExternal: false
  name: DataType
  nameWithType: DataColumn.DataType
  fullName: System.Data.DataColumn.DataType
- uid: System.Data.DataColumn.DateTimeMode
  parent: System.Data.DataColumn
  isExternal: false
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
  fullName: System.Data.DataColumn.DateTimeMode
- uid: System.Data.DataSetDateTime
  parent: System.Data
  isExternal: false
  name: DataSetDateTime
  nameWithType: DataSetDateTime
  fullName: System.Data.DataSetDateTime
- uid: System.Data.DataColumn.DefaultValue
  parent: System.Data.DataColumn
  isExternal: false
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
  fullName: System.Data.DataColumn.DefaultValue
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataColumn.Expression
  parent: System.Data.DataColumn
  isExternal: false
  name: Expression
  nameWithType: DataColumn.Expression
  fullName: System.Data.DataColumn.Expression
- uid: System.Data.DataColumn.ExtendedProperties
  parent: System.Data.DataColumn
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
  fullName: System.Data.DataColumn.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataColumn.MaxLength
  parent: System.Data.DataColumn
  isExternal: false
  name: MaxLength
  nameWithType: DataColumn.MaxLength
  fullName: System.Data.DataColumn.MaxLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataColumn.Namespace
  parent: System.Data.DataColumn
  isExternal: false
  name: Namespace
  nameWithType: DataColumn.Namespace
  fullName: System.Data.DataColumn.Namespace
- uid: System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataColumn
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataColumn.Ordinal
  parent: System.Data.DataColumn
  isExternal: false
  name: Ordinal
  nameWithType: DataColumn.Ordinal
  fullName: System.Data.DataColumn.Ordinal
- uid: System.Data.DataColumn.Prefix
  parent: System.Data.DataColumn
  isExternal: false
  name: Prefix
  nameWithType: DataColumn.Prefix
  fullName: System.Data.DataColumn.Prefix
- uid: System.Data.DataColumn.RaisePropertyChanging(System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: RaisePropertyChanging(String)
  nameWithType: DataColumn.RaisePropertyChanging(String)
  fullName: System.Data.DataColumn.RaisePropertyChanging(String)
- uid: System.Data.DataColumn.ReadOnly
  parent: System.Data.DataColumn
  isExternal: false
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
  fullName: System.Data.DataColumn.ReadOnly
- uid: System.Data.DataColumn.SetOrdinal(System.Int32)
  parent: System.Data.DataColumn
  isExternal: false
  name: SetOrdinal(Int32)
  nameWithType: DataColumn.SetOrdinal(Int32)
  fullName: System.Data.DataColumn.SetOrdinal(Int32)
- uid: System.Data.DataColumn.Table
  parent: System.Data.DataColumn
  isExternal: false
  name: Table
  nameWithType: DataColumn.Table
  fullName: System.Data.DataColumn.Table
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataColumn.ToString
  parent: System.Data.DataColumn
  isExternal: false
  name: ToString()
  nameWithType: DataColumn.ToString()
  fullName: System.Data.DataColumn.ToString()
- uid: System.Data.DataColumn.Unique
  parent: System.Data.DataColumn
  isExternal: false
  name: Unique
  nameWithType: DataColumn.Unique
  fullName: System.Data.DataColumn.Unique
- uid: System.Data.DataColumn.#ctor*
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn.DataColumn
- uid: System.Data.DataColumn.AllowDBNull*
  parent: System.Data.DataColumn
  isExternal: false
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
- uid: System.Data.DataColumn.AutoIncrement*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
- uid: System.Data.DataColumn.AutoIncrementSeed*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
- uid: System.Data.DataColumn.AutoIncrementStep*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
- uid: System.Data.DataColumn.Caption*
  parent: System.Data.DataColumn
  isExternal: false
  name: Caption
  nameWithType: DataColumn.Caption
- uid: System.Data.DataColumn.CheckNotAllowNull*
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckNotAllowNull
  nameWithType: DataColumn.CheckNotAllowNull
- uid: System.Data.DataColumn.CheckUnique*
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckUnique
  nameWithType: DataColumn.CheckUnique
- uid: System.Data.DataColumn.ColumnMapping*
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
- uid: System.Data.DataColumn.ColumnName*
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnName
  nameWithType: DataColumn.ColumnName
- uid: System.Data.DataColumn.DataType*
  parent: System.Data.DataColumn
  isExternal: false
  name: DataType
  nameWithType: DataColumn.DataType
- uid: System.Data.DataColumn.DateTimeMode*
  parent: System.Data.DataColumn
  isExternal: false
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
- uid: System.Data.DataColumn.DefaultValue*
  parent: System.Data.DataColumn
  isExternal: false
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
- uid: System.Data.DataColumn.Expression*
  parent: System.Data.DataColumn
  isExternal: false
  name: Expression
  nameWithType: DataColumn.Expression
- uid: System.Data.DataColumn.ExtendedProperties*
  parent: System.Data.DataColumn
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
- uid: System.Data.DataColumn.MaxLength*
  parent: System.Data.DataColumn
  isExternal: false
  name: MaxLength
  nameWithType: DataColumn.MaxLength
- uid: System.Data.DataColumn.Namespace*
  parent: System.Data.DataColumn
  isExternal: false
  name: Namespace
  nameWithType: DataColumn.Namespace
- uid: System.Data.DataColumn.OnPropertyChanging*
  parent: System.Data.DataColumn
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataColumn.OnPropertyChanging
- uid: System.Data.DataColumn.Ordinal*
  parent: System.Data.DataColumn
  isExternal: false
  name: Ordinal
  nameWithType: DataColumn.Ordinal
- uid: System.Data.DataColumn.Prefix*
  parent: System.Data.DataColumn
  isExternal: false
  name: Prefix
  nameWithType: DataColumn.Prefix
- uid: System.Data.DataColumn.RaisePropertyChanging*
  parent: System.Data.DataColumn
  isExternal: false
  name: RaisePropertyChanging
  nameWithType: DataColumn.RaisePropertyChanging
- uid: System.Data.DataColumn.ReadOnly*
  parent: System.Data.DataColumn
  isExternal: false
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
- uid: System.Data.DataColumn.SetOrdinal*
  parent: System.Data.DataColumn
  isExternal: false
  name: SetOrdinal
  nameWithType: DataColumn.SetOrdinal
- uid: System.Data.DataColumn.Table*
  parent: System.Data.DataColumn
  isExternal: false
  name: Table
  nameWithType: DataColumn.Table
- uid: System.Data.DataColumn.ToString*
  parent: System.Data.DataColumn
  isExternal: false
  name: ToString
  nameWithType: DataColumn.ToString
- uid: System.Data.DataColumn.Unique*
  parent: System.Data.DataColumn
  isExternal: false
  name: Unique
  nameWithType: DataColumn.Unique
