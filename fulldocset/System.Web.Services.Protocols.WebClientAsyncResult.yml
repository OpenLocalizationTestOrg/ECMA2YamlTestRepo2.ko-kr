### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.WebClientAsyncResult
  id: WebClientAsyncResult
  children:
  - System.Web.Services.Protocols.WebClientAsyncResult.Abort
  - System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  - System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  - System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  - System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  langs:
  - csharp
  name: WebClientAsyncResult
  nameWithType: WebClientAsyncResult
  fullName: System.Web.Services.Protocols.WebClientAsyncResult
  type: Class
  summary: "구현을 제공 <xref:System.IAsyncResult>비동기 메서드를 표준 패턴을 구현 하는 XML 웹 서비스 프록시에 의해 사용 하기 위해.</xref:System.IAsyncResult>"
  remarks: "When you call the `BeginMyMethodName` method, where `MyMethodName` is the synchronous version of the method, on an XML Web service proxy class, an instance of the WebClientAsyncResult is returned. Following the standard asynchronous design pattern, that instance of WebClientAsyncResult must later be passed to `EndMyMethodName` to complete the asynchronous method call.  \n  \n For details on calling XML Web services asynchronously, see [&#91;\\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)."
  syntax:
    content: 'public class WebClientAsyncResult : IAsyncResult'
  inheritance:
  - System.Object
  implements:
  - System.IAsyncResult
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort
  id: Abort
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: Abort()
  nameWithType: WebClientAsyncResult.Abort()
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.Abort()
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "비동기 XML 웹 서비스 요청을 취소합니다."
  remarks: ''
  example:
  - The XML Web service request is canceled if the underlying transport supports the <xref:System.Net.WebRequest.Abort%2A?displayProperty=fullName> method. If the corresponding `End` method is subsequently called after the Abort method, a <xref:System.Net.WebException> is thrown, setting the <xref:System.Net.WebException.Status%2A> property to <xref:System.Net.WebExceptionStatus>.
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Web.Services.Protocols.WebClientAsyncResult.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  id: AsyncState
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: AsyncState
  nameWithType: WebClientAsyncResult.AsyncState
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "마지막 매개 변수에서 제공 되는 개체를 가져옵니다는 <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;> </xref> 메서드 비동기 호출입니다."
  syntax:
    content: public object AsyncState { get; }
    return:
      type: System.Object
      description: "<xref:System.Object>마지막 매개 변수에서 제공 되는 <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;> </xref> 메서드를 호출 합니다.</xref:System.Object>"
  overload: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  id: AsyncWaitHandle
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: AsyncWaitHandle
  nameWithType: WebClientAsyncResult.AsyncWaitHandle
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "가져옵니다는 <xref:System.Threading.WaitHandle>비동기 작업이 완료 되기를 기다리는 데 사용 되는.</xref:System.Threading.WaitHandle>"
  remarks: "<xref:System.Threading.WaitHandle>는 수행 하는 데 사용할 수는 <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, 또는 <xref:System.Threading.WaitHandle.WaitAll%2A>비동기 호출이 완료 될 때까지 기다려야 합니다.</xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.WaitHandle>       자세한 내용은 <xref:System.IAsyncResult.AsyncWaitHandle%2A>.</xref:System.IAsyncResult.AsyncWaitHandle%2A> 을 참조 하십시오."
  syntax:
    content: public System.Threading.WaitHandle AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "A <xref:System.Threading.WaitHandle>비동기 작업이 완료 되기를 기다리는 데 사용 되는.</xref:System.Threading.WaitHandle>"
  overload: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  id: CompletedSynchronously
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: CompletedSynchronously
  nameWithType: WebClientAsyncResult.CompletedSynchronously
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Begin 호출을 동기적으로 완료 되었는지 여부를 나타내는 값을 가져옵니다."
  remarks: "CompletedSynchronously로 설정 되어 있으면 `true` 내에서 <xref:System.AsyncCallback>이 호출 하는 스레드가 할 대리자를 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A>현재 스레드가.</xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> </xref:System.AsyncCallback> 이 경우 콜백 메서드에서 호출 스택이 제한 없이 증가할 수 있으므로 바인딩된 호출 하 여 계속 동기적으로 완료 하는 경우, 다른 비동기 Begin 작업에 대 한 주의 해야 합니다. 대신, 콜백 메서드 외부 원래 호출 사이트에서 호출을 완료 되어야 합니다."
  syntax:
    content: public bool CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Begin 호출, 완료 된 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  id: IsCompleted
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: IsCompleted
  nameWithType: WebClientAsyncResult.IsCompleted
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "비동기 XML 웹 서비스 요청 완료 되었는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public bool IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>비동기 XML 웹 서비스 요청이 완료 되었음을; 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: Abort()
  nameWithType: WebClientAsyncResult.Abort()
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.Abort()
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: WebClientAsyncResult.AsyncState
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: WebClientAsyncResult.AsyncWaitHandle
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: WebClientAsyncResult.CompletedSynchronously
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: WebClientAsyncResult.IsCompleted
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: Abort
  nameWithType: WebClientAsyncResult.Abort
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: WebClientAsyncResult.AsyncState
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: WebClientAsyncResult.AsyncWaitHandle
- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: WebClientAsyncResult.CompletedSynchronously
- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: WebClientAsyncResult.IsCompleted
