### YamlMime:ManagedReference
items:
- uid: System.Data.IDbCommand
  id: IDbCommand
  children:
  - System.Data.IDbCommand.Cancel
  - System.Data.IDbCommand.CommandText
  - System.Data.IDbCommand.CommandTimeout
  - System.Data.IDbCommand.CommandType
  - System.Data.IDbCommand.Connection
  - System.Data.IDbCommand.CreateParameter
  - System.Data.IDbCommand.ExecuteNonQuery
  - System.Data.IDbCommand.ExecuteReader
  - System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)
  - System.Data.IDbCommand.ExecuteScalar
  - System.Data.IDbCommand.Parameters
  - System.Data.IDbCommand.Prepare
  - System.Data.IDbCommand.Transaction
  - System.Data.IDbCommand.UpdatedRowSource
  langs:
  - csharp
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
  type: Interface
  summary: "데이터 원본에 연결 되어 있는 동안 실행 되 고 관계형 데이터베이스에 액세스 하는.NET Framework 데이터 공급자에 의해 구현 되는 SQL 문을 나타냅니다."
  remarks: "IDbCommand 인터페이스에는 데이터 원본에서 실행 되는 SQL 문을 나타내는 명령 클래스를 구현 하 상속 클래스 수 있습니다. 명령 클래스에 대 한 자세한 내용은 참조 [명령 실행](~/add/includes/ajax-current-ext-md.md)합니다.       응용 프로그램을 직접 IDbCommand 인터페이스의 인스턴스를 만들지 않는 있지만 IDbCommand 상속 하는 클래스의 인스턴스를 만듭니다.       IDbCommand 상속 된 클래스는 상속 된 모든 멤버를 구현 하 고 일반적으로 공급자 특정 기능을 추가 하려면 추가 멤버를 정의 해야 합니다. 예를 들어 IDbCommand 인터페이스 정의 <xref:System.Data.IDbCommand.ExecuteNonQuery%2A>메서드.</xref:System.Data.IDbCommand.ExecuteNonQuery%2A> 차례로 <xref:System.Data.SqlClient.SqlCommand>이 메서드를 상속 하 고 정의 하는 클래스는 <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>메서드.</xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand>"
  example:
  - "The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection>, <xref:System.Data.SqlClient.SqlCommand>, and <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it to the console. Finally, the example closes the <xref:System.Data.SqlClient.SqlDataReader>, then the <xref:System.Data.SqlClient.SqlConnection>.  \n  \n [!code-cs[Classic WebData SqlCommand Example#1](~/add/codesnippet/csharp/t-system.data.idbcommand_1.cs)]\n [!code-vb[Classic WebData SqlCommand Example#1](~/add/codesnippet/visualbasic/t-system.data.idbcommand_1.vb)]"
  syntax:
    content: 'public interface IDbCommand : IDisposable'
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.Data.IDbCommand.Cancel
  id: Cancel
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Cancel()
  nameWithType: IDbCommand.Cancel()
  fullName: System.Data.IDbCommand.Cancel()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "실행을 취소 하려고 시도 <xref href=&quot;System.Data.IDbCommand&quot;> </xref>합니다."
  remarks: "가 취소할 경우 아무 작업도 수행 합니다. 그러나 처리 중인 명령을 취소 동작이 실패 하는 경우 예외가 생성 되지 않습니다."
  syntax:
    content: public void Cancel ();
    parameters: []
  overload: System.Data.IDbCommand.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.CommandText
  id: CommandText
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: CommandText
  nameWithType: IDbCommand.CommandText
  fullName: System.Data.IDbCommand.CommandText
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "데이터 원본에 대해 실행할 텍스트 명령을 가져오거나 설정 합니다."
  remarks: "경우는 <xref:System.Data.IDbCommand.CommandType%2A>속성이 `StoredProcedure`, 저장된 프로시저의 이름으로 CommandText 속성을 설정 합니다.</xref:System.Data.IDbCommand.CommandType%2A> 사용자는 저장된 프로시저 이름에 특수 문자가 포함 되어 있는 경우 이스케이프 문자 구문을 사용 하는 데 필요한 수 있습니다. 이 명령은 Execute 메서드 중 하나를 호출 하면이 저장된 프로시저를 호출 합니다."
  example:
  - "The following example creates an instance of a derived class, <xref:System.Data.OleDb.OleDbCommand> and sets some of its properties.  \n  \n [!code-vb[Classic WebData IDbCommand.CommandText Example#1](~/add/codesnippet/visualbasic/p-system.data.idbcommand_2_1.vb)]\n [!code-cs[Classic WebData IDbCommand.CommandText Example#1](~/add/codesnippet/csharp/p-system.data.idbcommand_2_1.cs)]"
  syntax:
    content: public string CommandText { get; set; }
    return:
      type: System.String
      description: "실행할 텍스트 명령입니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Data.IDbCommand.CommandText*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.CommandTimeout
  id: CommandTimeout
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: CommandTimeout
  nameWithType: IDbCommand.CommandTimeout
  fullName: System.Data.IDbCommand.CommandTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "명령을 실행 하는 시도 종료 하 고 오류를 생성 하기 전 대기 시간을 가져오거나 설정 합니다."
  remarks: ''
  example:
  - "The following example creates an instance of a derived class, <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  \n  \n [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.idbcommand_0_1.vb)]\n [!code-cs[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/csharp/p-system.data.idbcommand_0_1.cs)]"
  syntax:
    content: public int CommandTimeout { get; set; }
    return:
      type: System.Int32
      description: "시간 (초) 명령이 실행 될 때까지 기다려야 합니다. 기본값은 30 초입니다."
  overload: System.Data.IDbCommand.CommandTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "할당 된 속성 값이 0 보다 작습니다."
  platform:
  - net462
- uid: System.Data.IDbCommand.CommandType
  id: CommandType
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: CommandType
  nameWithType: IDbCommand.CommandType
  fullName: System.Data.IDbCommand.CommandType
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "나타내거나 지정 방법을 <xref:System.Data.IDbCommand.CommandText*>속성을 해석 합니다.</xref:System.Data.IDbCommand.CommandText*>"
  remarks: "CommandType 속성을 설정 하면 `StoredProcedure`를 설정 해야는 <xref:System.Data.IDbCommand.CommandText%2A>속성을 저장된 프로시저의 이름입니다.</xref:System.Data.IDbCommand.CommandText%2A> Execute 메서드 중 하나를 호출 하면이 저장된 프로시저를 실행 하는 명령입니다."
  syntax:
    content: public System.Data.CommandType CommandType { get; set; }
    return:
      type: System.Data.CommandType
      description: "중 하나는 <xref href=&quot;System.Data.CommandType&quot;> </xref> 값입니다. 기본값은 <xref uid=&quot;langword_csharp_Text&quot; name=&quot;Text&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.IDbCommand.CommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.Connection
  id: Connection
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Connection
  nameWithType: IDbCommand.Connection
  fullName: System.Data.IDbCommand.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "가져오거나는 <xref href=&quot;System.Data.IDbConnection&quot;> </xref> 의이 인스턴스에서 사용 되는 <xref href=&quot;System.Data.IDbCommand&quot;> </xref>합니다."
  syntax:
    content: public System.Data.IDbConnection Connection { get; set; }
    return:
      type: System.Data.IDbConnection
      description: "데이터 원본에 연결 합니다."
  overload: System.Data.IDbCommand.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.CreateParameter
  id: CreateParameter
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: CreateParameter()
  nameWithType: IDbCommand.CreateParameter()
  fullName: System.Data.IDbCommand.CreateParameter()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "새 인스턴스를 만듭니다는 <xref href=&quot;System.Data.IDbDataParameter&quot;> </xref> 개체입니다."
  remarks: "상속 된 경우 <xref:System.Data.IDbCommand>, CreateParameter 한 강력한 형식의 버전을 구현 하는.NET Framework 데이터 공급자.</xref:System.Data.IDbCommand>"
  syntax:
    content: public System.Data.IDbDataParameter CreateParameter ();
    parameters: []
    return:
      type: System.Data.IDbDataParameter
      description: "<xref uid=&quot;langword_csharp_IDbDataParameter&quot; name=&quot;IDbDataParameter&quot; href=&quot;&quot;> </xref> 개체입니다."
  overload: System.Data.IDbCommand.CreateParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.ExecuteNonQuery
  id: ExecuteNonQuery
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: ExecuteNonQuery()
  nameWithType: IDbCommand.ExecuteNonQuery()
  fullName: System.Data.IDbCommand.ExecuteNonQuery()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "에 대해 SQL 문을 실행은 <xref uid=&quot;langword_csharp_Connection&quot; name=&quot;Connection&quot; href=&quot;&quot;> </xref> 의 개체는.NET Framework 데이터 공급자와 영향을 받는 행 수가 반환 합니다."
  remarks: "(예를 들어 데이터베이스의 구조를 쿼리 또는 테이블과 같은 데이터베이스 개체 만들기), 카탈로그 작업을 수행할 수 또는 사용 하지 않고 데이터베이스의 데이터를 변경 하는 ExecuteNonQuery를 사용할 수 있습니다는 <xref:System.Data.DataSet>UPDATE, INSERT 또는 DELETE 문을 실행 하 여.</xref:System.Data.DataSet>       ExecuteNonQuery 모든 행을 반환 하지 않는 있지만 모든 출력 매개 변수 또는 반환 값 매개 변수에 매핑된 데이터로 채워집니다.       UPDATE, INSERT 및 DELETE 문에 대 한 반환 값은 명령에 의해 영향을 받는 행 수입니다. 문의 다른 모든 형식에 대 한 반환 값은-1입니다."
  example:
  - "The following example creates an instance of the derived class, <xref:System.Data.OleDb.OleDbCommand>, and then executes it. To accomplish this, the method is passed a string that is a SQL SELECT statement and a string to use to connect to the data source.  \n  \n [!code-cs[Classic WebData OleDbCommand.ExecuteNonQuery Example#1](~/add/codesnippet/csharp/m-system.data.idbcommand_1_1.cs)]\n [!code-vb[Classic WebData OleDbCommand.ExecuteNonQuery Example#1](~/add/codesnippet/visualbasic/m-system.data.idbcommand_1_1.vb)]"
  syntax:
    content: public int ExecuteNonQuery ();
    parameters: []
    return:
      type: System.Int32
      description: "영향을 받는 행 수입니다."
  overload: System.Data.IDbCommand.ExecuteNonQuery*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결이 존재 하지 않습니다.       -또는-는 연결이 열려 있지 않습니다."
  platform:
  - net462
- uid: System.Data.IDbCommand.ExecuteReader
  id: ExecuteReader
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: ExecuteReader()
  nameWithType: IDbCommand.ExecuteReader()
  fullName: System.Data.IDbCommand.ExecuteReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "실행의 <> </> *>에 대해는 <> </> *>와 빌드는 <xref href=&quot;System.Data.IDataReader&quot;> </xref>합니다."
  syntax:
    content: public System.Data.IDataReader ExecuteReader ();
    parameters: []
    return:
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref> 개체입니다."
  overload: System.Data.IDbCommand.ExecuteReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)
  id: ExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: ExecuteReader(CommandBehavior)
  nameWithType: IDbCommand.ExecuteReader(CommandBehavior)
  fullName: System.Data.IDbCommand.ExecuteReader(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "실행의 <> </> *>에 대해는 <> </> *>, 및 빌드는 <xref href=&quot;System.Data.IDataReader&quot;> </xref> 중 하나를 사용 하 여는 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> 값입니다."
  remarks: "호출자에 게 호출 해야 합니다는 <xref:System.Data.IDbConnection.Open%2A>의 메서드는 <xref:System.Data.IDbCommand.Connection%2A>속성.</xref:System.Data.IDbCommand.Connection%2A> </xref:System.Data.IDbConnection.Open%2A>       경우는 <xref:System.Data.IDbCommand.CommandType%2A>속성이 `StoredProcedure`, <xref:System.Data.IDbCommand.CommandText%2A>저장된 프로시저의 이름으로 속성을 설정 해야 합니다.</xref:System.Data.IDbCommand.CommandText%2A> </xref:System.Data.IDbCommand.CommandType%2A> 명령이 <xref:System.Data.IDbCommand.ExecuteReader%2A>.</xref:System.Data.IDbCommand.ExecuteReader%2A> 를 호출 하는 경우이 저장된 프로시저 실행      > [!NOTE] > 사용 <xref:System.Data.CommandBehavior>큰 값 및 이진 데이터를 검색 합니다.</xref:System.Data.CommandBehavior> 그렇지 않은 경우는 <xref:System.OutOfMemoryException>발생할 수 있습니다 및 연결이 닫힙니다.</xref:System.OutOfMemoryException>       <xref:System.Data.IDataReader>연결 된 <xref:System.Data.IDbConnection>사용 중 <xref:System.Data.IDataReader>.</xref:System.Data.IDataReader> 처리는</xref:System.Data.IDbConnection> 사용 중인</xref:System.Data.IDataReader> 동안 이 상태 동안에 없는 다른 작업을 수행할 수 <xref:System.Data.IDbConnection>닫지 합니다.</xref:System.Data.IDbConnection> 이 때 까지는 <xref:System.Data.IDataReader.Close%2A>DataReader의 메서드가 호출 됩니다.</xref:System.Data.IDataReader.Close%2A> DataReader로 만들어 <xref:System.Data.CommandBehavior>로 설정 `CloseConnection`, DataReader 닫기 자동으로 연결을 닫습니다.</xref:System.Data.CommandBehavior>"
  syntax:
    content: public System.Data.IDataReader ExecuteReader (System.Data.CommandBehavior behavior);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "중 하나는 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> 값입니다."
    return:
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref> 개체입니다."
  overload: System.Data.IDbCommand.ExecuteReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.ExecuteScalar
  id: ExecuteScalar
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: ExecuteScalar()
  nameWithType: IDbCommand.ExecuteScalar()
  fullName: System.Data.IDbCommand.ExecuteScalar()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "쿼리를 실행 하 고 쿼리에 의해 반환 된 결과 집합에서 첫 번째 행의 첫 번째 열을 반환 합니다. 추가 열 이나 행은 무시 됩니다."
  remarks: "ExecuteScalar 메서드를 사용 하 여 데이터베이스에서 단일 값 (예를 들어 집계 값)을 검색 합니다. 이렇게 하려면 <xref:System.Data.IDbCommand.ExecuteReader%2A> <xref:System.Data.IDataReader>.</xref:System.Data.IDataReader> 반환 되는 데이터를 사용 하 여 다음 단일 값을 생성 하는 데 필요한 작업을 수행 하 고 메서드를</xref:System.Data.IDbCommand.ExecuteReader%2A> 사용 하 여 보다 적은 코드가 필요       다음 C# 예제와 같이 일반적인 ExecuteScalar 쿼리 서식을 지정할 수 있습니다: ```   CommandText = &quot;select count(*) as NumberOfRegions from region&quot;;   Int32 count = (int) ExecuteScalar();   ``` 결과 집합의 첫 번째 행의 첫 번째 열이 발견 되지 않으면 null 참조 하는 경우 (`Nothing` Visual basic에서)이 반환 됩니다. 데이터베이스의 값이 `null`, 쿼리에서 반환 `DBNull.Value`합니다."
  example:
  - "The following example creates an instance of the derived class, <xref:System.Data.SqlClient.SqlCommand>, and then executes it using <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>. The example is passed a string that is a Transact-SQL statement that returns an aggregate result, and a string to use to connect to the data source.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteScalar#1](~/add/codesnippet/csharp/m-system.data.idbcommand_0_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteScalar#1](~/add/codesnippet/visualbasic/m-system.data.idbcommand_0_1.vb)]"
  syntax:
    content: public object ExecuteScalar ();
    parameters: []
    return:
      type: System.Object
      description: "결과 집합의 첫 번째 행의 첫 번째 열입니다."
  overload: System.Data.IDbCommand.ExecuteScalar*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.Parameters
  id: Parameters
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Parameters
  nameWithType: IDbCommand.Parameters
  fullName: System.Data.IDbCommand.Parameters
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the <xref href=&quot;System.Data.IDataParameterCollection&quot;></xref>."
  remarks: ''
  example:
  - "The following example creates an instance of the derived class, <xref:System.Data.SqlClient.SqlCommand>, and displays its parameters. In the example, the application passes a <xref:System.Data.SqlClient.SqlConnection>, a query string that is a Transact-SQL SELECT statement, and an array of <xref:System.Data.SqlClient.SqlParameter> objects.  \n  \n [!code-cs[Classic WebData IDbCommand.Parameters Example#1](~/add/codesnippet/csharp/p-system.data.idbcommand_1_1.cs)]\n [!code-vb[Classic WebData IDbCommand.Parameters Example#1](~/add/codesnippet/visualbasic/p-system.data.idbcommand_1_1.vb)]"
  syntax:
    content: public System.Data.IDataParameterCollection Parameters { get; }
    return:
      type: System.Data.IDataParameterCollection
      description: "SQL 문 또는 저장된 프로시저의 매개 변수입니다."
  overload: System.Data.IDbCommand.Parameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.Prepare
  id: Prepare
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Prepare()
  nameWithType: IDbCommand.Prepare()
  fullName: System.Data.IDbCommand.Prepare()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "데이터 원본에 명령의 준비 된 (또는 컴파일된) 버전을 만듭니다."
  remarks: "경우는 <xref:System.Data.IDbCommand.CommandType%2A>속성이 `TableDirect`, 준비는 아무 작업도 수행 합니다.</xref:System.Data.IDbCommand.CommandType%2A> 경우 <xref:System.Data.IDbCommand.CommandType%2A>로 설정 된 `StoredProcedure`, 아니요-운영 될 수 있지만 준비에 대 한 호출 성공 해야</xref:System.Data.IDbCommand.CommandType%2A> 서버에서 자동으로 다시 사용할 수 있도록; 필요에 따라 계획 캐시 따라서이 메서드를 호출할 클라이언트 응용 프로그램에서 직접 않아도가 됩니다."
  example:
  - "The following example creates an instance of the derived class, <xref:System.Data.OleDb.OleDbCommand>, and opens the connection. The example then prepares a stored procedure on the data source by passing a string that is a SQL Select statement and a string to use to connect to the data source.  \n  \n [!code-vb[Classic WebData OleDbCommand.Prepare Example#1](~/add/codesnippet/visualbasic/m-system.data.idbcommand_2_1.vb)]\n [!code-cs[Classic WebData OleDbCommand.Prepare Example#1](~/add/codesnippet/csharp/m-system.data.idbcommand_2_1.cs)]"
  syntax:
    content: public void Prepare ();
    parameters: []
  overload: System.Data.IDbCommand.Prepare*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *> 설정 되지 않았습니다.       -or-       The <>*> is not <xref:System.Data.OleDb.OleDbConnection.Open*>.</xref:System.Data.OleDb.OleDbConnection.Open*>"
  platform:
  - net462
- uid: System.Data.IDbCommand.Transaction
  id: Transaction
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Transaction
  nameWithType: IDbCommand.Transaction
  fullName: System.Data.IDbCommand.Transaction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "트랜잭션을 가져오거나는 <xref uid=&quot;langword_csharp_Command&quot; name=&quot;Command&quot; href=&quot;&quot;> </xref> .NET Framework 데이터 공급자의 개체를 실행 합니다."
  syntax:
    content: public System.Data.IDbTransaction Transaction { get; set; }
    return:
      type: System.Data.IDbTransaction
      description: "<xref uid=&quot;langword_csharp_Command&quot; name=&quot;Command&quot; href=&quot;&quot;> </xref> .NET Framework 데이터 공급자의 개체를 실행 합니다. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.IDbCommand.Transaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.UpdatedRowSource
  id: UpdatedRowSource
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: UpdatedRowSource
  nameWithType: IDbCommand.UpdatedRowSource
  fullName: System.Data.IDbCommand.UpdatedRowSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "명령 결과가 적용 되는 방식을 가져오거나는 <xref href=&quot;System.Data.DataRow&quot;> </xref> 에서 사용 하는 경우는 <xref:System.Data.IDataAdapter.Update*>의 메서드는 <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>.</xref:System.Data.IDataAdapter.Update*>"
  syntax:
    content: public System.Data.UpdateRowSource UpdatedRowSource { get; set; }
    return:
      type: System.Data.UpdateRowSource
      description: "중 하나는 <xref href=&quot;System.Data.UpdateRowSource&quot;> </xref> 값입니다. 기본값은 <xref uid=&quot;langword_csharp_Both&quot; name=&quot;Both&quot; href=&quot;&quot;> </xref> 명령이 자동으로 생성 하지 않는 한 합니다. 기본값은 <xref uid=&quot;langword_csharp_None&quot; name=&quot;None&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.IDbCommand.UpdatedRowSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "입력 한 값 중 하나 였습니다는 <xref href=&quot;System.Data.UpdateRowSource&quot;> </xref> 값입니다."
  platform:
  - net462
references:
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.IDbCommand.Cancel
  parent: System.Data.IDbCommand
  isExternal: false
  name: Cancel()
  nameWithType: IDbCommand.Cancel()
  fullName: System.Data.IDbCommand.Cancel()
- uid: System.Data.IDbCommand.CommandText
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandText
  nameWithType: IDbCommand.CommandText
  fullName: System.Data.IDbCommand.CommandText
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.IDbCommand.CommandTimeout
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandTimeout
  nameWithType: IDbCommand.CommandTimeout
  fullName: System.Data.IDbCommand.CommandTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbCommand.CommandType
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandType
  nameWithType: IDbCommand.CommandType
  fullName: System.Data.IDbCommand.CommandType
- uid: System.Data.CommandType
  parent: System.Data
  isExternal: false
  name: CommandType
  nameWithType: CommandType
  fullName: System.Data.CommandType
- uid: System.Data.IDbCommand.Connection
  parent: System.Data.IDbCommand
  isExternal: false
  name: Connection
  nameWithType: IDbCommand.Connection
  fullName: System.Data.IDbCommand.Connection
- uid: System.Data.IDbConnection
  parent: System.Data
  isExternal: false
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
- uid: System.Data.IDbCommand.CreateParameter
  parent: System.Data.IDbCommand
  isExternal: false
  name: CreateParameter()
  nameWithType: IDbCommand.CreateParameter()
  fullName: System.Data.IDbCommand.CreateParameter()
- uid: System.Data.IDbDataParameter
  parent: System.Data
  isExternal: false
  name: IDbDataParameter
  nameWithType: IDbDataParameter
  fullName: System.Data.IDbDataParameter
- uid: System.Data.IDbCommand.ExecuteNonQuery
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteNonQuery()
  nameWithType: IDbCommand.ExecuteNonQuery()
  fullName: System.Data.IDbCommand.ExecuteNonQuery()
- uid: System.Data.IDbCommand.ExecuteReader
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteReader()
  nameWithType: IDbCommand.ExecuteReader()
  fullName: System.Data.IDbCommand.ExecuteReader()
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteReader(CommandBehavior)
  nameWithType: IDbCommand.ExecuteReader(CommandBehavior)
  fullName: System.Data.IDbCommand.ExecuteReader(CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.IDbCommand.ExecuteScalar
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteScalar()
  nameWithType: IDbCommand.ExecuteScalar()
  fullName: System.Data.IDbCommand.ExecuteScalar()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.IDbCommand.Parameters
  parent: System.Data.IDbCommand
  isExternal: false
  name: Parameters
  nameWithType: IDbCommand.Parameters
  fullName: System.Data.IDbCommand.Parameters
- uid: System.Data.IDataParameterCollection
  parent: System.Data
  isExternal: false
  name: IDataParameterCollection
  nameWithType: IDataParameterCollection
  fullName: System.Data.IDataParameterCollection
- uid: System.Data.IDbCommand.Prepare
  parent: System.Data.IDbCommand
  isExternal: false
  name: Prepare()
  nameWithType: IDbCommand.Prepare()
  fullName: System.Data.IDbCommand.Prepare()
- uid: System.Data.IDbCommand.Transaction
  parent: System.Data.IDbCommand
  isExternal: false
  name: Transaction
  nameWithType: IDbCommand.Transaction
  fullName: System.Data.IDbCommand.Transaction
- uid: System.Data.IDbTransaction
  parent: System.Data
  isExternal: false
  name: IDbTransaction
  nameWithType: IDbTransaction
  fullName: System.Data.IDbTransaction
- uid: System.Data.IDbCommand.UpdatedRowSource
  parent: System.Data.IDbCommand
  isExternal: false
  name: UpdatedRowSource
  nameWithType: IDbCommand.UpdatedRowSource
  fullName: System.Data.IDbCommand.UpdatedRowSource
- uid: System.Data.UpdateRowSource
  parent: System.Data
  isExternal: false
  name: UpdateRowSource
  nameWithType: UpdateRowSource
  fullName: System.Data.UpdateRowSource
- uid: System.Data.IDbCommand.Cancel*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Cancel
  nameWithType: IDbCommand.Cancel
- uid: System.Data.IDbCommand.CommandText*
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandText
  nameWithType: IDbCommand.CommandText
- uid: System.Data.IDbCommand.CommandTimeout*
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandTimeout
  nameWithType: IDbCommand.CommandTimeout
- uid: System.Data.IDbCommand.CommandType*
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandType
  nameWithType: IDbCommand.CommandType
- uid: System.Data.IDbCommand.Connection*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Connection
  nameWithType: IDbCommand.Connection
- uid: System.Data.IDbCommand.CreateParameter*
  parent: System.Data.IDbCommand
  isExternal: false
  name: CreateParameter
  nameWithType: IDbCommand.CreateParameter
- uid: System.Data.IDbCommand.ExecuteNonQuery*
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteNonQuery
  nameWithType: IDbCommand.ExecuteNonQuery
- uid: System.Data.IDbCommand.ExecuteReader*
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteReader
  nameWithType: IDbCommand.ExecuteReader
- uid: System.Data.IDbCommand.ExecuteScalar*
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteScalar
  nameWithType: IDbCommand.ExecuteScalar
- uid: System.Data.IDbCommand.Parameters*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Parameters
  nameWithType: IDbCommand.Parameters
- uid: System.Data.IDbCommand.Prepare*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Prepare
  nameWithType: IDbCommand.Prepare
- uid: System.Data.IDbCommand.Transaction*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Transaction
  nameWithType: IDbCommand.Transaction
- uid: System.Data.IDbCommand.UpdatedRowSource*
  parent: System.Data.IDbCommand
  isExternal: false
  name: UpdatedRowSource
  nameWithType: IDbCommand.UpdatedRowSource
