### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Scope
  id: Scope
  children:
  - System.IdentityModel.Scope.#ctor
  - System.IdentityModel.Scope.#ctor(System.String)
  - System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)
  - System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)
  - System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  - System.IdentityModel.Scope.AppliesToAddress
  - System.IdentityModel.Scope.EncryptingCredentials
  - System.IdentityModel.Scope.Properties
  - System.IdentityModel.Scope.ReplyToAddress
  - System.IdentityModel.Scope.SigningCredentials
  - System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  - System.IdentityModel.Scope.TokenEncryptionRequired
  langs:
  - csharp
  name: Scope
  nameWithType: Scope
  fullName: System.IdentityModel.Scope
  type: Class
  summary: "토큰 발급 요청에 대 한 구성을 나타냅니다."
  remarks: "범위 클래스는 보안 토큰 요청 (RST)와 연결 된 신뢰 당사자 (RP)에 대 한 정보를 캡슐화 합니다. 이 정보는의 구현으로 사용 됩니다는 <xref:System.IdentityModel.SecurityTokenService>보안 토큰 요청 (RST)에 응답 (RSTR)를 반환 하는 토큰 발급 파이프라인의 클래스 (STS).</xref:System.IdentityModel.SecurityTokenService>       개체 범위 RP, 암호화 및 서명 자격 증명 발급 된 보안 토큰을 함께 사용 되는 주소에 대 한 정보를 포함 하 고 토큰을 암호화 해야 자체 토큰 또는 대칭 키와 함께 발급 하는지 여부입니다. 기본적으로 토큰 및 대칭 키 암호화 됩니다. 토큰 허용 되는 유형은 RP에서 기본 토큰 수명은, 최대 토큰 수명, RP, 및 표시 됩니다. 사용 되는 알고리즘 모음은 같은 요청에 대 한 추가 정보를 수행 하기 위해 범위 클래스를 확장할 수 있습니다. 그러나 개별 요청에 대 한이 클래스에 캡슐화 된 정보 다르지 않습니다.       토큰 발급 파이프라인에서 구현 되는 <xref:System.IdentityModel.SecurityTokenService.Issue%2A>메서드와이 메서드를 호출 하는 <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>RST에 대 한 구성을 가져오는 메서드를.</xref:System.IdentityModel.SecurityTokenService.GetScope%2A> </xref:System.IdentityModel.SecurityTokenService.Issue%2A> 구현 해야 합니다는 <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>메서드가 사용자 지정 STS 및 RP 및 STS 구현에 대 한 적절 한 범위 개체를 반환 합니다.</xref:System.IdentityModel.SecurityTokenService.GetScope%2A>"
  syntax:
    content: public class Scope
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope()
  nameWithType: Scope.Scope()
  fullName: System.IdentityModel.Scope.Scope()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> 클래스입니다."
  remarks: "다음 표에서 새 항목에 대 한 초기 속성 값을 보여 줍니다. <xref:System.IdentityModel.Scope>인스턴스.</xref:System.IdentityModel.Scope>      | 속성 | 값입니다. |   |--------------|------------|   | <xref:System.IdentityModel.Scope.AppliesToAddress%2A>| `null` .|   | <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>| `null`.|   | <xref:System.IdentityModel.Scope.Properties%2A>| 빈 사전입니다. |   | <xref:System.IdentityModel.Scope.ReplyToAddress%2A>| `null`.|   | <xref:System.IdentityModel.Scope.SigningCredentials%2A>| `null`.|   | <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>| `true`.|   | <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>| `true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope ();
    parameters: []
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String)
  nameWithType: Scope.Scope(String)
  fullName: System.IdentityModel.Scope.Scope(String)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> 지정 된 appliesTo 주소를 사용 하 여 클래스입니다."
  remarks: "다음 표에서 새 항목에 대 한 초기 속성 값을 보여 줍니다. <xref:System.IdentityModel.Scope>인스턴스.</xref:System.IdentityModel.Scope>      | 속성 | 값입니다. |   |--------------|------------|   | <xref:System.IdentityModel.Scope.AppliesToAddress%2A>| 값은 `appliesToAddress` 매개 변수입니다. |   | <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>| `null`.|   | <xref:System.IdentityModel.Scope.Properties%2A>| 빈 사전입니다. |   | <xref:System.IdentityModel.Scope.ReplyToAddress%2A>| `null`.|   | <xref:System.IdentityModel.Scope.SigningCredentials%2A>| `null`.|   | <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>| `true`.|   | <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>| `true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope (string appliesToAddress);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "신뢰 당사자의 appliesTo 주소입니다. 일반적으로 URI입니다."
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)
  id: '#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String,EncryptingCredentials)
  nameWithType: Scope.Scope(String,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,EncryptingCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> 된 지정 된 appliesTo 주소 및 자격 증명을 암호화 합니다."
  remarks: "다음 표에서 새 항목에 대 한 초기 속성 값을 보여 줍니다. <xref:System.IdentityModel.Scope>인스턴스.</xref:System.IdentityModel.Scope>      | 속성 | 값입니다. |   |--------------|------------|   | <xref:System.IdentityModel.Scope.AppliesToAddress%2A>| 값은 `appliesToAddress` 매개 변수입니다. |   | <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>| `null`.|   | <xref:System.IdentityModel.Scope.Properties%2A>| 빈 사전입니다. |   | <xref:System.IdentityModel.Scope.ReplyToAddress%2A>| `null`.|   | <xref:System.IdentityModel.Scope.SigningCredentials%2A>| 값은 `signingCredentials` 매개 변수입니다. |   | <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>| `true`.|   | <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>| `true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope (string appliesToAddress, System.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "신뢰 당사자의 appliesTo 주소입니다. 일반적으로 URI입니다."
    - id: encryptingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "신뢰 당사자에 대 한 자격 증명 암호화 합니다."
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)
  id: '#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String,SigningCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> 된 지정 된 appliesTo 주소 및 자격 증명을 서명 합니다."
  remarks: "다음 표에서 새 항목에 대 한 초기 속성 값을 보여 줍니다. <xref:System.IdentityModel.Scope>인스턴스.</xref:System.IdentityModel.Scope>      | 속성 | 값입니다. |   |--------------|------------|   | <xref:System.IdentityModel.Scope.AppliesToAddress%2A>| 값은 `appliesToAddress` 매개 변수입니다. |   | <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>| `null`.|   | <xref:System.IdentityModel.Scope.Properties%2A>| 빈 사전입니다. |   | <xref:System.IdentityModel.Scope.ReplyToAddress%2A>| `null`.|   | <xref:System.IdentityModel.Scope.SigningCredentials%2A>| 값은 `signingCredentials` 매개 변수입니다. |   | <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>| `true`.|   | <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>| `true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope (string appliesToAddress, System.IdentityModel.Tokens.SigningCredentials signingCredentials);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "신뢰 당사자의 appliesTo 주소입니다. 일반적으로 URI입니다."
    - id: signingCredentials
      type: System.IdentityModel.Tokens.SigningCredentials
      description: "신뢰 당사자에 대 한 서명 자격 증명입니다."
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  id: '#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String,SigningCredentials,EncryptingCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials,EncryptingCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> 자격 증명을 서명 하 고 자격 증명을 암호화에서 지정 된 appliesTo 주소를 사용 하 여 클래스입니다."
  remarks: "다음 표에서 새 항목에 대 한 초기 속성 값을 보여 줍니다. <xref:System.IdentityModel.Scope>인스턴스.</xref:System.IdentityModel.Scope>      | 속성 | 값 |   |--------------|-----------|   | <xref:System.IdentityModel.Scope.AppliesToAddress%2A>| 값은 `appliesToAddress` 매개 변수입니다. |   | <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>| 값은 `encryptingCredentials` 매개 변수입니다. |   | <xref:System.IdentityModel.Scope.Properties%2A>| 빈 사전입니다. |   | <xref:System.IdentityModel.Scope.ReplyToAddress%2A>| `null`.|   | <xref:System.IdentityModel.Scope.SigningCredentials%2A>| 값은 `signingCredentials` 매개 변수입니다. |   | <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>| `true`.|   | <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>| `true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope (string appliesToAddress, System.IdentityModel.Tokens.SigningCredentials signingCredentials, System.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "신뢰 당사자의 appliesTo 주소입니다. 일반적으로 URI입니다."
    - id: signingCredentials
      type: System.IdentityModel.Tokens.SigningCredentials
      description: "신뢰 당사자에 대 한 서명 자격 증명입니다."
    - id: encryptingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "신뢰 당사자에 대 한 자격 증명 암호화 합니다."
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.AppliesToAddress
  id: AppliesToAddress
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: AppliesToAddress
  nameWithType: Scope.AppliesToAddress
  fullName: System.IdentityModel.Scope.AppliesToAddress
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "신뢰 당사자의 appliesTo 주소를 가져오거나 설정 합니다."
  syntax:
    content: public virtual string AppliesToAddress { get; set; }
    return:
      type: System.String
      description: "신뢰 당사자의 appliesTo 주소입니다. 일반적으로 URI입니다."
  overload: System.IdentityModel.Scope.AppliesToAddress*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.EncryptingCredentials
  id: EncryptingCredentials
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: EncryptingCredentials
  nameWithType: Scope.EncryptingCredentials
  fullName: System.IdentityModel.Scope.EncryptingCredentials
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "신뢰 당사자에 대 한 암호화 자격 증명을 가져오거나 설정 합니다."
  remarks: "경우는 <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>속성은 `true`, 발급 된 보안 토큰을 암호화 하는 자격 증명이 사용 됩니다.</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A> 경우는 <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>속성은 `true`, 자격 증명은 보안 토큰을 사용 하 여 실행 되는 대칭 키를 암호화 하는 데 사용 됩니다.</xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>"
  syntax:
    content: public virtual System.IdentityModel.Tokens.EncryptingCredentials EncryptingCredentials { get; set; }
    return:
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "신뢰 당사자에 사용할 자격 증명 암호화 합니다."
  overload: System.IdentityModel.Scope.EncryptingCredentials*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.Properties
  id: Properties
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Properties
  nameWithType: Scope.Properties
  fullName: System.IdentityModel.Scope.Properties
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "개체를 확장 하는 속성 모음을 가져옵니다."
  syntax:
    content: public virtual System.Collections.Generic.Dictionary<string,object> Properties { get; }
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: "속성 모음입니다."
  overload: System.IdentityModel.Scope.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.ReplyToAddress
  id: ReplyToAddress
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: ReplyToAddress
  nameWithType: Scope.ReplyToAddress
  fullName: System.IdentityModel.Scope.ReplyToAddress
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "신뢰 당사자의 replyTo 주소를 가져오거나 설정 합니다."
  syntax:
    content: public virtual string ReplyToAddress { get; set; }
    return:
      type: System.String
      description: "신뢰 당사자의 replyTo 주소입니다. 일반적으로 URI입니다."
  overload: System.IdentityModel.Scope.ReplyToAddress*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.SigningCredentials
  id: SigningCredentials
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: SigningCredentials
  nameWithType: Scope.SigningCredentials
  fullName: System.IdentityModel.Scope.SigningCredentials
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "신뢰 당사자에 대 한 서명 자격 증명을 가져오거나 설정 합니다."
  syntax:
    content: public virtual System.IdentityModel.Tokens.SigningCredentials SigningCredentials { get; set; }
    return:
      type: System.IdentityModel.Tokens.SigningCredentials
      description: "신뢰 당사자에 대해 사용할 서명 자격 증명입니다."
  overload: System.IdentityModel.Scope.SigningCredentials*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  id: SymmetricKeyEncryptionRequired
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: SymmetricKeyEncryptionRequired
  nameWithType: Scope.SymmetricKeyEncryptionRequired
  fullName: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "발급 된 대칭 키를 암호화 해야 하는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "SymmetricKeyEncryptionRequired 속성이 `true`에서 자격 증명을 사용 하 여 대칭 키 암호화는 <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>속성.</xref:System.IdentityModel.Scope.EncryptingCredentials%2A>"
  syntax:
    content: public virtual bool SymmetricKeyEncryptionRequired { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>대칭 키를 암호화 해야 합니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.TokenEncryptionRequired
  id: TokenEncryptionRequired
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: TokenEncryptionRequired
  nameWithType: Scope.TokenEncryptionRequired
  fullName: System.IdentityModel.Scope.TokenEncryptionRequired
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "발급 된 보안 토큰을 암호화 해야 하는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "TokenEncryptionRequired 속성이 `true`에서 자격 증명을 사용 하 여 보안 토큰은 암호화는 <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>속성.</xref:System.IdentityModel.Scope.EncryptingCredentials%2A>"
  syntax:
    content: public virtual bool TokenEncryptionRequired { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>보안 토큰을 암호화 해야 합니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Scope.TokenEncryptionRequired*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IdentityModel.Scope.#ctor
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope()
  nameWithType: Scope.Scope()
  fullName: System.IdentityModel.Scope.Scope()
- uid: System.IdentityModel.Scope.#ctor(System.String)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String)
  nameWithType: Scope.Scope(String)
  fullName: System.IdentityModel.Scope.Scope(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String,EncryptingCredentials)
  nameWithType: Scope.Scope(String,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,EncryptingCredentials)
- uid: System.IdentityModel.Tokens.EncryptingCredentials
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: EncryptingCredentials
  nameWithType: EncryptingCredentials
  fullName: System.IdentityModel.Tokens.EncryptingCredentials
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String,SigningCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials)
- uid: System.IdentityModel.Tokens.SigningCredentials
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SigningCredentials
  nameWithType: SigningCredentials
  fullName: System.IdentityModel.Tokens.SigningCredentials
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String,SigningCredentials,EncryptingCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials,EncryptingCredentials)
- uid: System.IdentityModel.Scope.AppliesToAddress
  parent: System.IdentityModel.Scope
  isExternal: false
  name: AppliesToAddress
  nameWithType: Scope.AppliesToAddress
  fullName: System.IdentityModel.Scope.AppliesToAddress
- uid: System.IdentityModel.Scope.EncryptingCredentials
  parent: System.IdentityModel.Scope
  isExternal: false
  name: EncryptingCredentials
  nameWithType: Scope.EncryptingCredentials
  fullName: System.IdentityModel.Scope.EncryptingCredentials
- uid: System.IdentityModel.Scope.Properties
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Properties
  nameWithType: Scope.Properties
  fullName: System.IdentityModel.Scope.Properties
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: Dictionary<String,Object>
  nameWithType: Dictionary<String,Object>
  fullName: System.Collections.Generic.Dictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Scope.ReplyToAddress
  parent: System.IdentityModel.Scope
  isExternal: false
  name: ReplyToAddress
  nameWithType: Scope.ReplyToAddress
  fullName: System.IdentityModel.Scope.ReplyToAddress
- uid: System.IdentityModel.Scope.SigningCredentials
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SigningCredentials
  nameWithType: Scope.SigningCredentials
  fullName: System.IdentityModel.Scope.SigningCredentials
- uid: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SymmetricKeyEncryptionRequired
  nameWithType: Scope.SymmetricKeyEncryptionRequired
  fullName: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Scope.TokenEncryptionRequired
  parent: System.IdentityModel.Scope
  isExternal: false
  name: TokenEncryptionRequired
  nameWithType: Scope.TokenEncryptionRequired
  fullName: System.IdentityModel.Scope.TokenEncryptionRequired
- uid: System.IdentityModel.Scope.#ctor*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope
  nameWithType: Scope.Scope
- uid: System.IdentityModel.Scope.AppliesToAddress*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: AppliesToAddress
  nameWithType: Scope.AppliesToAddress
- uid: System.IdentityModel.Scope.EncryptingCredentials*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: EncryptingCredentials
  nameWithType: Scope.EncryptingCredentials
- uid: System.IdentityModel.Scope.Properties*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Properties
  nameWithType: Scope.Properties
- uid: System.IdentityModel.Scope.ReplyToAddress*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: ReplyToAddress
  nameWithType: Scope.ReplyToAddress
- uid: System.IdentityModel.Scope.SigningCredentials*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SigningCredentials
  nameWithType: Scope.SigningCredentials
- uid: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SymmetricKeyEncryptionRequired
  nameWithType: Scope.SymmetricKeyEncryptionRequired
- uid: System.IdentityModel.Scope.TokenEncryptionRequired*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: TokenEncryptionRequired
  nameWithType: Scope.TokenEncryptionRequired
