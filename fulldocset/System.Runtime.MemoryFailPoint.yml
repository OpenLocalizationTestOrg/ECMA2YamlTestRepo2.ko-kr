### YamlMime:ManagedReference
items:
- uid: System.Runtime.MemoryFailPoint
  id: MemoryFailPoint
  children:
  - System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  - System.Runtime.MemoryFailPoint.Dispose
  - System.Runtime.MemoryFailPoint.Finalize
  langs:
  - csharp
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint
  fullName: System.Runtime.MemoryFailPoint
  type: Class
  summary: "작업을 실행 하기 전에 메모리 리소스가 충분 한지 확인 합니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "> [!NOTE]>이 클래스 고급 개발에 사용이 됩니다.       MemoryFailPoint 클래스의 인스턴스를 만들면 메모리 게이트를 만들어집니다. 메모리 게이트 많은 양의 메모리를 필요로 하는 활동을 시작 하기 전에 리소스가 충분 한지 확인 합니다. 로 인해 검사에 실패 한 <xref:System.InsufficientMemoryException>예외가 throw 됩니다.</xref:System.InsufficientMemoryException> 이 예외는 작업을 시작할 수 없게 되지 않으며 리소스 부족으로 인해 오류의 가능성을 줄여 줍니다. 이 사용 하도록이 설정 하면 성능이 저하 될 방지 하기 위해는 <xref:System.OutOfMemoryException>예외 및 상태 손상을 부적절 한 코드에서 임의의 위치에서 예외 처리에서 발생할 수 있습니다.</xref:System.OutOfMemoryException>      > [!IMPORTANT] >이 형식이 구현 하는 <xref:System.IDisposable>인터페이스.</xref:System.IDisposable> 형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다. 직접 형식의 삭제 하려면 해당 <xref:System.IDisposable.Dispose%2A>에서 메서드는 `try` / `catch` 블록.</xref:System.IDisposable.Dispose%2A> 작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다. 자세한 내용은의 &quot;를 사용 하는 개체는 구현 IDisposable&quot; 섹션을 참조 하십시오.는 <xref:System.IDisposable>인터페이스 항목.</xref:System.IDisposable>       throw 하 여 프로그램 <xref:System.InsufficientMemoryException>예외를 응용 프로그램와 구분할 수는 작업을 완료할 수 되지 않는 예상 부분적으로 완료 된 작업을 응용 프로그램 상태 손상 되었을 수 있습니다.</xref:System.InsufficientMemoryException> 이렇게 하면 응용 프로그램을 현재 언로드 필요할 수 있는 비관적 에스컬레이션 정책에의 빈도 줄일 수 있습니다. <xref:System.AppDomain>프로세스를 재생 합니다.</xref:System.AppDomain>       MemoryFailPoint 충분 한 메모리 및 연속 된 가상 주소 공간 힙, 모든 가비지 수집에서 사용할 수 있는 스왑 파일의 크기를 늘릴 수 있는지 여부를 확인 합니다.  MemoryFailPoint 보장 하지 않습니다는 메모리의 장기 가용성에 대 한 게이트, 수명 동안 호출자가 항상 사용 해야 하지만 <xref:System.Runtime.MemoryFailPoint.Dispose%2A>메서드 MemoryFailPoint와 관련 된 리소스를 해제 됩니다.</xref:System.Runtime.MemoryFailPoint.Dispose%2A>       메모리 게이트를 사용 하려면 MemoryFailPoint 개체 만들기 및 메모리 양 (MB)의 수를 지정 해야 다음 작업을 사용 하는 합니다. 충분 한 메모리를 사용할 수 없는 경우는 <xref:System.InsufficientMemoryException>예외가 throw 됩니다.</xref:System.InsufficientMemoryException>       생성자의 매개 변수는 양의 정수 여야 합니다. 음수 값을 발생 한 <xref:System.ArgumentOutOfRangeException>예외.</xref:System.ArgumentOutOfRangeException>       MemoryFailPoint은 16MB의 세분성에서 작동합니다. 16 MB 보다 작은 모든 값은 16MB로 되며 다른 값으로 16MB의 가장 큰 배수로 처리 됩니다."
  example:
  - "MemoryFailPoint enables an application to slow itself to avoid running out of memory in a corrupting manner.  It should be used within a lexical scope.  The following example launches threads to process items in a work queue.  Before each thread is launched, the available memory resources are checked using MemoryFailPoint.  If an exception is thrown, the main method waits until memory is available before launching the next thread.  \n  \n [!code-cs[MemoryFailPoint#1](~/add/codesnippet/csharp/t-system.runtime.memoryf_1.cs)]"
  syntax:
    content: 'public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable'
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> 성공적으로 실행에 필요한 메모리 양을 지정 하는 클래스입니다."
  remarks: "작업 항목을 처리 하려면 응용 프로그램에서 사용 된 메모리 양이 실험적으로 확인할 수 있습니다.  응용 프로그램 요청을 처리 하는 데 필요한 메모리 양을 예측을 사용 하십시오는 <xref:System.GC.GetTotalMemory%2A?displayProperty=fullName>메서드를 작업 항목을 처리 하는 메서드를 호출 후 및 하기 전에 사용 가능한 메모리의 양을 확인 합니다.</xref:System.GC.GetTotalMemory%2A?displayProperty=fullName> 참조는 <xref:System.Runtime.MemoryFailPoint>에 대 한 값을 동적으로 결정 하는 코드 예제에 대 한 클래스는 `sizeInMegabytes` 매개 변수.</xref:System.Runtime.MemoryFailPoint>"
  example:
  - "The following example demonstrates how to determine the amount of memory a method requires when executing. This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.  \n  \n [!code-cs[MemoryFailPoint#2](~/add/codesnippet/csharp/m-system.runtime.memoryf_1.cs)]"
  syntax:
    content: public MemoryFailPoint (int sizeInMegabytes);
    parameters:
    - id: sizeInMegabytes
      type: System.Int32
      description: "필요한 메모리 크기 (메가바이트)에서입니다. 양수 값 이어야 합니다."
  overload: System.Runtime.MemoryFailPoint.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "지정한 메모리 크기는 음수입니다."
  - type: System.InsufficientMemoryException
    commentId: T:System.InsufficientMemoryException
    description: "성문 보호 되는 코드 실행을 시작할 메모리가 부족 합니다."
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Dispose
  id: Dispose
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref>합니다."
  remarks: "<xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> 를 사용 하 여 작업을 마쳤으면 Dispose를 호출 합니다. Dispose 메서드는 <xref:System.Runtime.MemoryFailPoint>불안정 한 상태가.</xref:System.Runtime.MemoryFailPoint> 호출한 후 <xref:System.Runtime.MemoryFailPoint>에 대 한 모든 참조를 해제 해야는 <xref:System.Runtime.MemoryFailPoint>가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Runtime.MemoryFailPoint>차지한.</xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> 자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md) 및 [Dispose 메서드를 구현](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> 에 대 한 마지막 참조를 해제 하기 전에 항상 호출 삭제 사용 중인 리소스가 가비지 수집기 호출할 때까지 해제 되지 것입니다 그렇지 않은 경우는 <xref:System.Runtime.MemoryFailPoint>개체의 `Finalize` 메서드.</xref:System.Runtime.MemoryFailPoint>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Finalize
  id: Finalize
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "리소스가 해제 되 고 가비지 수집기가 회수 하는 경우 다른 정리 작업이 수행 되도록는 <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> 개체입니다."
  remarks: "현재 개체가 종료 될 때 가비지 수집기에서 Finalize 메서드를 호출 합니다."
  syntax:
    content: ~MemoryFailPoint ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  isExternal: false
  name: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InsufficientMemoryException
  parent: System
  isExternal: false
  name: InsufficientMemoryException
  nameWithType: InsufficientMemoryException
  fullName: System.InsufficientMemoryException
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.MemoryFailPoint.Dispose
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
- uid: System.Runtime.MemoryFailPoint.Finalize
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
- uid: System.Runtime.MemoryFailPoint.#ctor*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint.MemoryFailPoint
- uid: System.Runtime.MemoryFailPoint.Dispose*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose
  nameWithType: MemoryFailPoint.Dispose
- uid: System.Runtime.MemoryFailPoint.Finalize*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize
  nameWithType: MemoryFailPoint.Finalize
