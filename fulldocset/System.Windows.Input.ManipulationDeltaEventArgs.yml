### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.ManipulationDeltaEventArgs
  id: ManipulationDeltaEventArgs
  children:
  - System.Windows.Input.ManipulationDeltaEventArgs.Cancel
  - System.Windows.Input.ManipulationDeltaEventArgs.Complete
  - System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  - System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  - System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  - System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  - System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  - System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  - System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  - System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  - System.Windows.Input.ManipulationDeltaEventArgs.StartInertia
  - System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  langs:
  - csharp
  name: ManipulationDeltaEventArgs
  nameWithType: ManipulationDeltaEventArgs
  fullName: System.Windows.Input.ManipulationDeltaEventArgs
  type: Class
  summary: "에 대 한 데이터를 제공는 <xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;> </xref> 이벤트입니다."
  remarks: "ManipulationDeltaEventArgs 클래스 조작 하는 위치에 변경 내용에 대 한 데이터를 포함합니다. <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>속성 마지막 이후에 발생 한 변경 내용이 들어 <xref:System.Windows.UIElement.ManipulationDelta>이벤트가 발생 합니다.</xref:System.Windows.UIElement.ManipulationDelta> </xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>속성에 대 한 현재 조작 된 전체 변경 내용을 포함 합니다.</xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> 조작된 된 개체를 변환 하려면 이러한 속성 중 하나를 사용 합니다.       조작 하는 호출 하 여 종료할 수 있습니다는 <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A>메서드 또는 호출 하 여 관성을 조작 force는 <xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A>메서드.</xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> </xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A>"
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. The example also checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: 'public sealed class ManipulationDeltaEventArgs : System.Windows.Input.InputEventArgs'
  inheritance:
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  - System.Windows.Input.InputEventArgs
  implements: []
  inheritedMembers:
  - System.Windows.Input.InputEventArgs.Device
  - System.Windows.Input.InputEventArgs.Timestamp
  - System.Windows.RoutedEventArgs.Handled
  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.Windows.RoutedEventArgs.RoutedEvent
  - System.Windows.RoutedEventArgs.Source
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel
  id: Cancel
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Cancel()
  nameWithType: ManipulationDeltaEventArgs.Cancel()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Cancel()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "조작을 취소합니다."
  remarks: "메서드가 성공 하면 기본 <xref:System.Windows.Input.TouchDevice>이전 보냅니다 터치 이벤트 마우스를 또는 마우스 이동 이벤트 요소에 고 향후 조작 이벤트 발생 하지 않습니다.</xref:System.Windows.Input.TouchDevice> 터치 경우 마우스 이벤트로 승격할 수 없습니다는 <xref:System.Windows.UIElement.ManipulationCompleted>관성 중에 이벤트가 발생 합니다.</xref:System.Windows.UIElement.ManipulationCompleted>"
  syntax:
    content: public bool Cancel ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>조작은 성공적으로 취소 되었으면; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete
  id: Complete
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Complete()
  nameWithType: ManipulationDeltaEventArgs.Complete()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Complete()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "관성 없이 조작을 완료 합니다."
  remarks: "조작을 종료 하려면 Complete 메서드를 호출할 수 있습니다. 예를 들어 개체 창의 가장자리에 도달 하면 개체가 화면 오프 라인으로 전환 되지 않도록 하려면 Complete를 호출할 수 있습니다."
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Complete*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  id: CumulativeManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: CumulativeManipulation
  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "현재 조작의 누적된 된 변경 사항을 가져옵니다."
  remarks: "CumulativeManipulation 속성에는 현재 조작에 대 한 된 전체 변경 내용을 포함 합니다. 조작된 된 개체를 변환할 CumulativeManipulation를 사용할 수 있습니다."
  syntax:
    content: public System.Windows.Input.ManipulationDelta CumulativeManipulation { get; }
    return:
      type: System.Windows.Input.ManipulationDelta
      description: "현재 조작의 누적 된 변경 사항입니다."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  id: DeltaManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: DeltaManipulation
  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "현재 조작의 가장 최근 변경 내용을 가져옵니다."
  remarks: "DeltaManipulation 속성 마지막 이후에 발생 한 변경 내용이 들어 <xref:System.Windows.UIElement.ManipulationDelta>이벤트가 발생 합니다.</xref:System.Windows.UIElement.ManipulationDelta> 조작된 된 개체를 변환 하려면이 속성을 사용할 수 있습니다."
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example uses the DeltaManipulation property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public System.Windows.Input.ManipulationDelta DeltaManipulation { get; }
    return:
      type: System.Windows.Input.ManipulationDelta
      description: "현재 조작의 가장 최근의 변경 합니다."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  id: InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  syntax:
    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);
    parameters:
    - id: genericHandler
      type: System.Delegate
      description: "추가할 수 있습니다."
    - id: genericTarget
      type: System.Object
      description: "추가할 수 있습니다."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  id: IsInertial
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: IsInertial
  nameWithType: ManipulationDeltaEventArgs.IsInertial
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;> </xref> 관성 중에 이벤트가 발생 합니다."
  remarks: "확인 하려면이 메서드를 사용할 수 있는지 여부를 <xref:System.Windows.UIElement.ManipulationDelta>관성 하는 동안 또는 사용자가을 받는 요소와 연결 하는 동안 이벤트가 발생할는 <xref:System.Windows.UIElement.ManipulationDelta>이벤트.</xref:System.Windows.UIElement.ManipulationDelta> </xref:System.Windows.UIElement.ManipulationDelta>"
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public bool IsInertial { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;> </xref> 관성; 도중 이벤트 발생 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 사용자에 대 한 연결이 있을 때 이벤트의 발생 여부는 <xref href=&quot;System.Windows.UIElement&quot;> </xref>합니다."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  id: ManipulationContainer
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: ManipulationContainer
  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "조작의 좌표를 정의 하는 컨테이너를 가져옵니다."
  syntax:
    content: public System.Windows.IInputElement ManipulationContainer { get; }
    return:
      type: System.Windows.IInputElement
      description: "조작의 좌표를 정의 하는 컨테이너입니다."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  id: ManipulationOrigin
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: ManipulationOrigin
  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "조작이 시작 되는 지점을 가져옵니다."
  syntax:
    content: public System.Windows.Point ManipulationOrigin { get; }
    return:
      type: System.Windows.Point
      description: "조작이 시작 되는 점입니다."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  id: Manipulators
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Manipulators
  nameWithType: ManipulationDeltaEventArgs.Manipulators
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "조작에 대 한 터치 연락처를 나타내는 개체의 컬렉션을 가져옵니다."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator}
      description: "조작에 대 한 터치 연락처를 나타내는 개체의 컬렉션입니다."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  id: ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: ReportBoundaryFeedback(ManipulationDelta)
  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "조작을 넘어 특정 경계를 지정 합니다."
  remarks: "요소가 특정 경계를 벗어나 이동 되었음을 나타내기 위해 ReportBoundaryFeedback 메서드를 사용 합니다.  예를 들어, 사용자의 범위 밖으로 요소를 이동 하는 경우는 <xref:System.Windows.Window>, 하는 창에 보고 하기 위해이 메서드를 호출할 수 있습니다.</xref:System.Windows.Window>  ReportBoundaryFeedback를 호출 하는 경우는 <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>이벤트가 발생 합니다.</xref:System.Windows.UIElement.ManipulationBoundaryFeedback>  기본적으로는 <xref:System.Windows.Window>구독 하는 <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>경계에 도달 했습니다 사용자에 게 시각적 피드백을 제공 하는 이벤트입니다.</xref:System.Windows.UIElement.ManipulationBoundaryFeedback> </xref:System.Windows.Window>  구독할 수 있습니다 <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>사용자 지정 동작을 구현 합니다.</xref:System.Windows.UIElement.ManipulationBoundaryFeedback>"
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event that calls the ReportBoundaryFeedback method when the user moves the element over the edge of its container.  To test this example, follow the steps in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md) and replace the code in step 5 with this code.  \n  \n [!code-cs[BasicManipulation#ReportBoundaryFeedback](~/add/codesnippet/csharp/basicmanipulation/reportboundaryfeedbackexample.xaml.cs#reportboundaryfeedback)]\n [!code-vb[BasicManipulation#ReportBoundaryFeedback](~/add/codesnippet/visualbasic/basicmanipulation/reportboundaryfeedbackexample.xaml.vb#reportboundaryfeedback)]"
  syntax:
    content: public void ReportBoundaryFeedback (System.Windows.Input.ManipulationDelta unusedManipulation);
    parameters:
    - id: unusedManipulation
      type: System.Windows.Input.ManipulationDelta
      description: "조작의 부분을 나타내는 경계를 넘어 이동입니다."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>unusedManipulation</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia
  id: StartInertia
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: StartInertia()
  nameWithType: ManipulationDeltaEventArgs.StartInertia()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이후 접촉 이동을 무시 및 발생 하 여 관성 조작 시작 될는 <xref href=&quot;System.Windows.UIElement.ManipulationInertiaStarting&quot;> </xref> 이벤트입니다."
  syntax:
    content: public void StartInertia ();
    parameters: []
  overload: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  id: Velocities
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Velocities
  nameWithType: ManipulationDeltaEventArgs.Velocities
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "조작에 가장 최근의 변경의 속도를 가져옵니다."
  syntax:
    content: public System.Windows.Input.ManipulationVelocities Velocities { get; }
    return:
      type: System.Windows.Input.ManipulationVelocities
      description: "조작에 가장 최근의 변경의 속도입니다."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Velocities*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputEventArgs
  isExternal: false
  name: System.Windows.Input.InputEventArgs
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Cancel()
  nameWithType: ManipulationDeltaEventArgs.Cancel()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Cancel()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Complete()
  nameWithType: ManipulationDeltaEventArgs.Complete()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Complete()
- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: CumulativeManipulation
  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
- uid: System.Windows.Input.ManipulationDelta
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationDelta
  nameWithType: ManipulationDelta
  fullName: System.Windows.Input.ManipulationDelta
- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: DeltaManipulation
  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: IsInertial
  nameWithType: ManipulationDeltaEventArgs.IsInertial
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationContainer
  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationOrigin
  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Manipulators
  nameWithType: ManipulationDeltaEventArgs.Manipulators
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<IManipulator>
  nameWithType: IEnumerable<IManipulator>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Windows.Input.IManipulator>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.IManipulator
    name: IManipulator
    nameWithType: IManipulator
    fullName: IManipulator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ReportBoundaryFeedback(ManipulationDelta)
  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: StartInertia()
  nameWithType: ManipulationDeltaEventArgs.StartInertia()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia()
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Velocities
  nameWithType: ManipulationDeltaEventArgs.Velocities
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
- uid: System.Windows.Input.ManipulationVelocities
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationVelocities
  nameWithType: ManipulationVelocities
  fullName: System.Windows.Input.ManipulationVelocities
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Cancel
  nameWithType: ManipulationDeltaEventArgs.Cancel
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Complete
  nameWithType: ManipulationDeltaEventArgs.Complete
- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: CumulativeManipulation
  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation
- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: DeltaManipulation
  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation
- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: InvokeEventHandler
  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler
- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: IsInertial
  nameWithType: ManipulationDeltaEventArgs.IsInertial
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationContainer
  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationOrigin
  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Manipulators
  nameWithType: ManipulationDeltaEventArgs.Manipulators
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ReportBoundaryFeedback
  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback
- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: StartInertia
  nameWithType: ManipulationDeltaEventArgs.StartInertia
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Velocities
  nameWithType: ManipulationDeltaEventArgs.Velocities
