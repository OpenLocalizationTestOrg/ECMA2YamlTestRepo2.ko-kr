### YamlMime:ManagedReference
items:
- uid: System.Windows.Markup.IQueryAmbient
  id: IQueryAmbient
  children:
  - System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)
  langs:
  - csharp
  name: IQueryAmbient
  nameWithType: IQueryAmbient
  fullName: System.Windows.Markup.IQueryAmbient
  type: Interface
  summary: "있는지 여부를 지정 된 속성을 처리 해야 앰비언트로 현재 범위에 대 한 쿼리."
  remarks: "앰비언트 속성 메커니즘의 목적은 구문 분석 시간을 개선 하기 위해 여 알고 있는 경우 것은 임시 및 일반적인 런타임 응용 프로그램에 유용 하지 않은 값에 대 한 개체는 특정 개체를 인스턴스화하지 방지 하기 위해 XAML 개체 작성기입니다. 일반적으로 XAML 조회 또는 속성 get 접근자의 XAML 처리를 즉시 사용할 값이 포함 된 개체 그래프 표현에 맞게 이러한 개체를 인스턴스화하 해야 합니다.       IQueryAmbient 멤버 하나가지고: <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A>.</xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A>       IQueryAmbient는 <xref:System.Windows.Markup.AmbientAttribute>.</xref:System.Windows.Markup.AmbientAttribute> 병렬 메커니즘 IQueryAmbient는 리플렉션을 사용 하 여 정보를 확인 하 고 또한 수 act 상황을 방지 하는 특별 한 메커니즘 (지정된 된 개체는 보고서를 선택할 수 `true` 또는 `false` 에 대 한 <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A>),이 특성은 기본적으로 정적 분석 하는 반면,).</xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A> <xref:System.Windows.Markup.AmbientAttribute>XAML 개체 작성기에서 사용할 수 있는 전용 XAML 형식 시스템 속성 <xref:System.Xaml.XamlMember.IsAmbient%2A>및 <xref:System.Xaml.XamlType.IsAmbient%2A>.</xref:System.Xaml.XamlType.IsAmbient%2A> </xref:System.Xaml.XamlMember.IsAmbient%2A> 에 연결 하는 일반 메커니즘</xref:System.Windows.Markup.AmbientAttribute>      ## WPF 구현은의 IQueryAmbient WPF의, IQueryAmbient 리소스 사전 조회 프로세스에 사용 됩니다. 조회 프로세스 가져옵니다 연속 `Resources` 값 WPF 논리 트리 전체에서 발견 되는 키 될 때까지 리소스 범위의 루트를 향해 진행 또는 키 범위에 존재 하지 않도록 결정 됩니다. 일반적으로 이렇게 해야 인스턴스화하는 <xref:System.Windows.ResourceDictionary>결과를 받을 때마다.</xref:System.Windows.ResourceDictionary> 내용을 선언 `Resources` 한 앰비언트로 `Resources` 존재이 조회 프로세스를 최적화 합니다. WPF에서이 인터페이스는 다음과 같은 경우에 구현:- <xref:System.Windows.FrameworkElement>구현 <xref:System.Windows.FrameworkElement.System%23Windows%23Markup%23IQueryAmbient%23IsAmbientPropertyAvailable%2A>반환할 `true` 기존의 포함 된 모든 속성 이름을 <xref:System.Windows.ResourceDictionary>에 대 한 <xref:System.Windows.FrameworkElement.Resources%2A>에 대 한 쿼리가 하지 않으면 하다 고는 <xref:System.Windows.FrameworkElement.Resources%2A>속성 자체.</xref:System.Windows.FrameworkElement.Resources%2A> </xref:System.Windows.FrameworkElement.Resources%2A> </xref:System.Windows.ResourceDictionary> </xref:System.Windows.FrameworkElement.System%23Windows%23Markup%23IQueryAmbient%23IsAmbientPropertyAvailable%2A> </xref:System.Windows.FrameworkElement>      - <xref:System.Windows.Style>해당 <xref:System.Windows.Style.Resources%2A>.</xref:System.Windows.Style.Resources%2A> 동일한 패턴을 구현</xref:System.Windows.Style>      - <xref:System.Windows.Application>해당 <xref:System.Windows.Application.Resources%2A>.</xref:System.Windows.Application.Resources%2A> 동일한 패턴을 구현</xref:System.Windows.Application>      - <xref:System.Windows.FrameworkContentElement>해당 <xref:System.Windows.FrameworkContentElement.Resources%2A>.</xref:System.Windows.FrameworkContentElement.Resources%2A> 동일한 패턴을 구현</xref:System.Windows.FrameworkContentElement>      - <xref:System.Windows.FrameworkTemplate>해당 <xref:System.Windows.FrameworkTemplate.Resources%2A>.</xref:System.Windows.FrameworkTemplate.Resources%2A> 동일한 패턴을 구현</xref:System.Windows.FrameworkTemplate> 또한 보고 <xref:System.Windows.FrameworkTemplate.Template%2A>앰비언트 서로 반환 콘텐츠 `false` 을 쿼리 하는 경우 <xref:System.Windows.FrameworkTemplate.Template%2A>자체.</xref:System.Windows.FrameworkTemplate.Template%2A> </xref:System.Windows.FrameworkTemplate.Template%2A>      기능 각각의이 경우, 관련을 `Resources` 속성 (및 <xref:System.Windows.FrameworkTemplate.Template%2A>) <xref:System.Windows.Markup.AmbientAttribute>.</xref:System.Windows.Markup.AmbientAttribute> 특성을 사용 하는</xref:System.Windows.FrameworkTemplate.Template%2A> 일반적인 사용법은 없는 속성에 대 한 쿼리는 <xref:System.Windows.Markup.AmbientAttribute>특성이 지정 된 인터페이스를 정의 하는 개체의 속성입니다.</xref:System.Windows.Markup.AmbientAttribute> 즉, 개체 그래프를 만들 때 잠재적 실행된 시간 값을 제공 하기 위해 리소스 사전 있으면, 리소스 사전 속성 컨테이너 외에도 다른 속성과 수 앰비언트로 처리 합니다."
  syntax:
    content: public interface IQueryAmbient
  implements: []
  platform:
  - net462
- uid: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)
  id: IsAmbientPropertyAvailable(System.String)
  parent: System.Windows.Markup.IQueryAmbient
  langs:
  - csharp
  name: IsAmbientPropertyAvailable(String)
  nameWithType: IQueryAmbient.IsAmbientPropertyAvailable(String)
  fullName: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Windows.Markup
  summary: "여부 지정된 된 명명 된 속성 간주할 수 앰비언트 현재 범위에 대 한 쿼리."
  syntax:
    content: public bool IsAmbientPropertyAvailable (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "앰비언트 상태를 확인 하는 속성의 이름입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>요청된 된 속성을 앰비언트;로 간주할 수 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)
  parent: System.Windows.Markup.IQueryAmbient
  isExternal: false
  name: IsAmbientPropertyAvailable(String)
  nameWithType: IQueryAmbient.IsAmbientPropertyAvailable(String)
  fullName: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable*
  parent: System.Windows.Markup.IQueryAmbient
  isExternal: false
  name: IsAmbientPropertyAvailable
  nameWithType: IQueryAmbient.IsAmbientPropertyAvailable
