### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlSchemaContext
  id: XamlSchemaContext
  children:
  - System.Xaml.XamlSchemaContext.#ctor
  - System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})
  - System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)
  - System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)
  - System.Xaml.XamlSchemaContext.Finalize
  - System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  - System.Xaml.XamlSchemaContext.GetAllXamlNamespaces
  - System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)
  - System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)
  - System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)
  - System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)
  - System.Xaml.XamlSchemaContext.GetXamlType(System.Type)
  - System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)
  - System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])
  - System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)
  - System.Xaml.XamlSchemaContext.ReferenceAssemblies
  - System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  - System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)
  langs:
  - csharp
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
  type: Class
  summary: "해석 하거나 매핑하기 XAML 형식과 기반이 되는 어셈블리의 형식에 대 한 다시 사용할 수 있는 컨텍스트를 정의 합니다."
  remarks: "XAML 스키마 컨텍스트는 스키마 또는 XAML에 대 한 어휘와 특정 파서 구현 간의 추상화 계층을 제공합니다. 스키마 컨텍스트와의 개념을 삽입 하 여 다른 XAML 파서가 함께 스키마를 사용할 수 있습니다 하 고 스키마 컨텍스트가 특정 XAML 파서가와 상호 작용 하는 데 필요한 세부 정보가 채워집니다. 예를 들어 XAML 스키마 컨텍스트는 쿼리 또는 XAML 형식 시스템에 CLR 바인딩 XAML 개념에 관련 된 Api를 제공 합니다. 또한 XAML 스키마 컨텍스트는 지원 형식에 대 한 XAML 파서를 찾는 위치를 정의 하는 로드 된 어셈블리의 어셈블리 목록을 유지 관리 합니다."
  syntax:
    content: public class XamlSchemaContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.#ctor
  id: '#ctor'
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: XamlSchemaContext()
  nameWithType: XamlSchemaContext.XamlSchemaContext()
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext()
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 클래스입니다."
  syntax:
    content: public XamlSchemaContext ();
    parameters: []
  overload: System.Xaml.XamlSchemaContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})'
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: XamlSchemaContext(IEnumerable<Assembly>)
  nameWithType: XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 참조 어셈블리 집합에 기반 하는 클래스입니다."
  syntax:
    content: public XamlSchemaContext (System.Collections.Generic.IEnumerable<System.Reflection.Assembly> referenceAssemblies);
    parameters:
    - id: referenceAssemblies
      type: System.Collections.Generic.IEnumerable{System.Reflection.Assembly}
      description: "어셈블리 정보 항목의 열거 가능한 집합입니다. 각 어셈블리 정보 항목은 지정 된 <xref:System.Reflection.Assembly>값.</xref:System.Reflection.Assembly>"
  overload: System.Xaml.XamlSchemaContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)
  id: '#ctor(System.Xaml.XamlSchemaContextSettings)'
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: XamlSchemaContext(XamlSchemaContextSettings)
  nameWithType: XamlSchemaContext.XamlSchemaContext(XamlSchemaContextSettings)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(XamlSchemaContextSettings)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 설정 개체에 기반 하는 클래스입니다."
  remarks: "설정 개체가 텍스트 변환기 및 태그 확장 세부 스키마 컨텍스트에 대 한 정보를 저장 합니다. 자세한 내용은 <xref:System.Xaml.XamlSchemaContextSettings>.</xref:System.Xaml.XamlSchemaContextSettings> 을 참조 하십시오."
  syntax:
    content: public XamlSchemaContext (System.Xaml.XamlSchemaContextSettings settings);
    parameters:
    - id: settings
      type: System.Xaml.XamlSchemaContextSettings
      description: "설정 개체를 생성 하는 데는 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>합니다."
  overload: System.Xaml.XamlSchemaContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)'
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  nameWithType: XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 참조 어셈블리 및 설정 개체의 집합에 기반 하는 클래스입니다."
  syntax:
    content: public XamlSchemaContext (System.Collections.Generic.IEnumerable<System.Reflection.Assembly> referenceAssemblies, System.Xaml.XamlSchemaContextSettings settings);
    parameters:
    - id: referenceAssemblies
      type: System.Collections.Generic.IEnumerable{System.Reflection.Assembly}
      description: "열거 가능한 어셈블리 정보 집합입니다. 각 어셈블리 정보 항목은 지정 된 <xref:System.Reflection.Assembly>값.</xref:System.Reflection.Assembly>"
    - id: settings
      type: System.Xaml.XamlSchemaContextSettings
      description: "설정 개체를 생성 하는 데는 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>합니다."
  overload: System.Xaml.XamlSchemaContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.Finalize
  id: Finalize
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: Finalize()
  nameWithType: XamlSchemaContext.Finalize()
  fullName: System.Xaml.XamlSchemaContext.Finalize()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "비표준 제공 <xref uid=&quot;langword_csharp_Finalize&quot; name=&quot;Finalize&quot; href=&quot;&quot;> </xref> 구현을 호출 하지 않는 <xref uid=&quot;langword_csharp_Dispose&quot; name=&quot;Dispose&quot; href=&quot;&quot;> </xref>합니다."
  remarks: "XAML 스키마 컨텍스트 자동 가비지 수집에 의해 또는 수동 작업에는 삭제 해야 합니다. XAML 스키마 컨텍스트는 관리 되지 않는 리소스가 없는 <xref:System.Windows.Markup.XamlDeferLoadAttribute>속성 활성화 수 및 관련된 지연 로드 작업을 방해할 수 XAML 스키마 컨텍스트를 삭제 합니다.</xref:System.Windows.Markup.XamlDeferLoadAttribute>       <xref:System.AppDomain.AssemblyLoad>이 구현에서 내부적으로 약한 참조로 연결, 이벤트 처리기를 정리 됩니다.</xref:System.AppDomain.AssemblyLoad>"
  syntax:
    content: ~XamlSchemaContext ();
    parameters: []
  overload: System.Xaml.XamlSchemaContext.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  id: FullyQualifyAssemblyNamesInClrNamespaces
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: FullyQualifyAssemblyNamesInClrNamespaces
  nameWithType: XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  fullName: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "XAML 스키마와 해당 컨텍스트 조회 API에 의해 반환 되는 값에 정규화 된 어셈블리 이름을 사용 하는지 여부를 지정 하는 값을 가져옵니다."
  remarks: "이 속성은 반환 된 <xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName>값에 대 한 설정에서 설정 된는 <xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29>있는 생성자 시그니처의.</xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29> </xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName> 다른 서명 생성에 사용 하거나 <xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName>으로 특별히 설정 되지 않은 `true`,이 속성의 값은 `false`.</xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName>       이 속성의 값에는 <xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A>.</xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A> 반환 되는 문자열을 영향을 줍니다. FullyQualifyAssemblyNamesInClrNamespaces 이면 `true`, 문자열의 어셈블리 부분 <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName>.</xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> 을 해당 하는 보고"
  syntax:
    content: public bool FullyQualifyAssemblyNamesInClrNamespaces { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>XAML 스키마와 해당 컨텍스트 조회 Api;에 의해 반환 되는 값에서 정규화 된 어셈블리 이름을 사용 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces
  id: GetAllXamlNamespaces
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetAllXamlNamespaces()
  nameWithType: XamlSchemaContext.GetAllXamlNamespaces()
  fullName: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 보유 하 고 있는 어셈블리 검색 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 네임 스페이스의 집합을 반환 합니다."
  remarks: "이 메서드는 구문 또는 속성 설정을 통해에 전달 될 경우만 참조 어셈블리를 검색 합니다. 이 메서드의 논리 로드 된 모든 어셈블리를 검사 하 여 참조 어셈블리로 설정 된 어셈블리가 없는 경우 여기서이 <xref:System.Xaml.XamlSchemaContext>활성화 되어.</xref:System.Xaml.XamlSchemaContext>"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<string> GetAllXamlNamespaces ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "열거 가능한 집합 네임 스페이스 식별자입니다. 이러한 식별자는 문자열로 제공 됩니다."
  overload: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)
  id: GetAllXamlTypes(System.String)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetAllXamlTypes(String)
  nameWithType: XamlSchemaContext.GetAllXamlTypes(String)
  fullName: System.Xaml.XamlSchemaContext.GetAllXamlTypes(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 보유 하 고 있는 어셈블리 검색 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 지정한 XAML 네임 스페이스의 형식 집합을 반환 합니다."
  syntax:
    content: public virtual System.Collections.Generic.ICollection<System.Xaml.XamlType> GetAllXamlTypes (string xamlNamespace);
    parameters:
    - id: xamlNamespace
      type: System.String
      description: "반환 형식에 대 한 XAML 네임 스페이스입니다."
    return:
      type: System.Collections.Generic.ICollection{System.Xaml.XamlType}
      description: "열거 가능한 집합 XAML 형식입니다. 집합의 각 XAML 형식으로 표시 됩니다는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 개체입니다."
  overload: System.Xaml.XamlSchemaContext.GetAllXamlTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)
  id: GetPreferredPrefix(System.String)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetPreferredPrefix(String)
  nameWithType: XamlSchemaContext.GetPreferredPrefix(String)
  fullName: System.Xaml.XamlSchemaContext.GetPreferredPrefix(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "지정된 된 XAML 네임 스페이스를 매핑할 때 사용 하는 소비자에 대 한 기본 접두사로 보고 되는 문자열을 가져옵니다."
  remarks: "가장 시급한 소비자 정보는 일반적으로 XAML 작성기입니다. 간접 다른 소비자는 디자인 도구를 포함 합니다.       공용 언어 런타임 (CLR)에 대 한 XAML 바인딩이의 일환으로, 적용 하 여이 정보를 지정할 수 있습니다 <xref:System.Windows.Markup.XmlnsPrefixAttribute>어셈블리 수준에서.</xref:System.Windows.Markup.XmlnsPrefixAttribute>"
  syntax:
    content: public virtual string GetPreferredPrefix (string xmlns);
    parameters:
    - id: xmlns
      type: System.String
      description: "에 대 한 기본 접두사를 가져오려는 XAML 네임 스페이스입니다."
    return:
      type: System.String
      description: "소비자가 태그에 대 한 지정된 된 XAML 네임 스페이스를 매핑할 때 사용 해야 하는 문자열을 사용 합니다."
  overload: System.Xaml.XamlSchemaContext.GetPreferredPrefix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xmlns</code>null입니다."
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)
  id: GetValueConverter``1(System.Type,System.Xaml.XamlType)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetValueConverter(Type,XamlType)
  nameWithType: XamlSchemaContext.GetValueConverter(Type,XamlType)
  fullName: System.Xaml.XamlSchemaContext.GetValueConverter(Type,XamlType)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  syntax:
    content: 'protected System.Xaml.Schema.XamlValueConverter<TConverterBase> GetValueConverter<TConverterBase> (Type converterType, System.Xaml.XamlType targetType) where TConverterBase : class;'
    parameters:
    - id: converterType
      type: System.Type
      description: "추가할 수 있습니다."
    - id: targetType
      type: System.Xaml.XamlType
      description: "추가할 수 있습니다."
    return:
      type: System.Xaml.Schema.XamlValueConverter`1
      description: "추가할 수 있습니다."
  overload: System.Xaml.XamlSchemaContext.GetValueConverter<TConverterBase>*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)
  id: GetXamlDirective(System.String,System.String)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetXamlDirective(String,String)
  nameWithType: XamlSchemaContext.GetXamlDirective(String,String)
  fullName: System.Xaml.XamlSchemaContext.GetXamlDirective(String,String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref href=&quot;System.Xaml.XamlDirective&quot;> </xref> XAML 언어 또는 특정 구현에 대 한 지시문을 나타내는 값입니다."
  remarks: "파생된 된 클래스를 만드는 경우이 메서드를 재정의 <xref:System.Xaml.XamlDirective>XAML 형식 시스템의 확장 시나리오의 일부로.</xref:System.Xaml.XamlDirective>"
  syntax:
    content: public virtual System.Xaml.XamlDirective GetXamlDirective (string xamlNamespace, string name);
    parameters:
    - id: xamlNamespace
      type: System.String
      description: "명명 된 지시문이 포함 된 XAML 네임 스페이스입니다."
    - id: name
      type: System.String
      description: "가져올 지시문의 이름입니다."
    return:
      type: System.Xaml.XamlDirective
      description: "A <xref href=&quot;System.Xaml.XamlDirective&quot;> </xref> 요청된 된 지시문을 나타내는 개체입니다."
  overload: System.Xaml.XamlSchemaContext.GetXamlDirective*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xamlNamespace</code>or <code>name</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.Type)
  id: GetXamlType(System.Type)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetXamlType(Type)
  nameWithType: XamlSchemaContext.GetXamlType(Type)
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(Type)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> CLR 유형 식별자를 기반으로 하는 합니다."
  remarks: "이 오버 로드 지원 형식 시스템에 대 한 CLR을 사용 하는 것으로 가정 합니다. CLR 형식 시스템을 사용 하지 않는 경우 사용 <xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29>.</xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29>"
  syntax:
    content: public virtual System.Xaml.XamlType GetXamlType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "가져올 형식의 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 에 대 한 합니다."
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> 입력과 일치 하는 <code> type </code>합니다."
  overload: System.Xaml.XamlSchemaContext.GetXamlType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)
  id: GetXamlType(System.Xaml.Schema.XamlTypeName)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetXamlType(XamlTypeName)
  nameWithType: XamlSchemaContext.GetXamlType(XamlTypeName)
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(XamlTypeName)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML 시스템 형식 이름을 기반으로 하는 합니다."
  syntax:
    content: public System.Xaml.XamlType GetXamlType (System.Xaml.Schema.XamlTypeName xamlTypeName);
    parameters:
    - id: xamlTypeName
      type: System.Xaml.Schema.XamlTypeName
      description: "가져오려는 XAML 형식 이름은 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 에 대 한 합니다."
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> 입력과 일치 하는 <code> xamlTypeName </code>합니다."
  overload: System.Xaml.XamlSchemaContext.GetXamlType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A component of <code>xamlTypeName</code> (<>*> or <>*>) is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xamlTypeName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])
  id: GetXamlType(System.String,System.String,System.Xaml.XamlType[])
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetXamlType(String,String,XamlType[])
  nameWithType: XamlSchemaContext.GetXamlType(String,String,XamlType[])
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(String,String,XamlType[])
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML 네임 스페이스 및 형식 이름에 대 한 문자열 기반으로 하는 합니다. 이 서명은 되는 경우 원하는 형식을 제네릭 형식에 대 한 형식 인수를 지정할 수 있습니다."
  syntax:
    content: protected virtual System.Xaml.XamlType GetXamlType (string xamlNamespace, string name, System.Xaml.XamlType[] typeArguments);
    parameters:
    - id: xamlNamespace
      type: System.String
      description: "원하는 형식을 포함 하는 XAML 네임 스페이스입니다."
    - id: name
      type: System.String
      description: "원하는 종류의 문자열 이름입니다."
    - id: typeArguments
      type: System.Xaml.XamlType[]
      description: "제네릭 형식의 초기화 형식 인수입니다."
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> 입력된 기준과 일치 하는 합니다."
  overload: System.Xaml.XamlSchemaContext.GetXamlType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)
  id: OnAssemblyResolve(System.String)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: OnAssemblyResolve(String)
  nameWithType: XamlSchemaContext.OnAssemblyResolve(String)
  fullName: System.Xaml.XamlSchemaContext.OnAssemblyResolve(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 스키마 컨텍스트 포함 된 XAML 네임 스페이스를 확인 하기 위해 필요한 어셈블리를 사용 하는 작업 하는 경우 호출 됩니다."
  remarks: "내부 API는 기본 어셈블리 해결 방법을 기반으로 하는 어셈블리 이름의 다른 문자열 형식에 대 한 기본 제공 허용 값에는 <xref:System.Reflection.AssemblyName>생성 동작.</xref:System.Reflection.AssemblyName>       이 API의 목적은 대신 전역 어셈블리 캐시에 대 한 참조 어셈블리에 대해 같은 알려진된 어셈블리를 집합에 대해 첫째 확인을 사용 하도록 설정 합니다. 참조 어셈블리 목록이 채워진 경우 기본 구현에서는 알려진된 참조 어셈블리를 액세스할 수 있습니다."
  syntax:
    content: protected virtual System.Reflection.Assembly OnAssemblyResolve (string assemblyName);
    parameters:
    - id: assemblyName
      type: System.String
      description: "로드할 어셈블리의 이름입니다. 설명 부분을 참조 하십시오."
    return:
      type: System.Reflection.Assembly
      description: "확인 된 어셈블리입니다."
  overload: System.Xaml.XamlSchemaContext.OnAssemblyResolve*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.ReferenceAssemblies
  id: ReferenceAssemblies
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: ReferenceAssemblies
  nameWithType: XamlSchemaContext.ReferenceAssemblies
  fullName: System.Xaml.XamlSchemaContext.ReferenceAssemblies
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "열거 가능한 XAML 스키마 컨텍스트에 대 한 참조 어셈블리 집합을 가져옵니다."
  syntax:
    content: public System.Collections.Generic.IList<System.Reflection.Assembly> ReferenceAssemblies { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.Assembly}
      description: "열거 가능한 스키마 컨텍스트에 대 한 참조 어셈블리 집합. 각 어셈블리 정보 항목은 지정 된 <xref:System.Reflection.Assembly>값.</xref:System.Reflection.Assembly>"
  overload: System.Xaml.XamlSchemaContext.ReferenceAssemblies*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  id: SupportMarkupExtensionsWithDuplicateArity
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: SupportMarkupExtensionsWithDuplicateArity
  nameWithType: XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  fullName: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "XAML 스키마와 해당 컨텍스트 (입력된 매개 변수 개수) 같은 인자 수와 두 명의 생성자가 있는 태그 확장을 지원 하는지 여부를 지정 하는 값을 가져옵니다."
  remarks: "이 속성은 반환 된 <xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName>값에 대 한 설정에서 설정 된는 <xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29>있는 생성자 시그니처의.</xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29> </xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName> 다른 서명이 생성에 사용 하거나 <xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName>으로 특별히 설정 되지 않은 `true`,이 속성의 값은 `false`.</xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName>       XAML 사양 [MS-XAML] 섹션 6.6.7.2 태그 확장의 중복 인자 수는 구체적으로 다루지 않습니다. 즉, 태그 확장 구현에 존재할 수 있는 중복 된 숫자에 관계 없이 태그 확장에 대 한 XAML 정보 항목의 형성 같습니다. 태그 확장이 실제로 호출만 및 해당 `ProvideValue` 중복 인자 수와 관련 된 문제를 노출 합니다. 중복 인자 라는 처리 동작은 정의 되어 있지 않고 및 각 구현 XAML 스키마 컨텍스트 및 XAML 작성자가 통합 몫입니다. .NET Framework XAML 서비스 작업에 대 한 구현 된 대로 기본 XAML 스키마 컨텍스트는 중복 인자 라는;를 지원 하지 않습니다. 다양 한.NET Framework XAML 서비스 Api는 기본 중복 인자가 있는 태그 확장명 사용을 처리할 때 예외를 throw 합니다.       태그 확장을 정의 하는 방법에 대 한 자세한 내용은 참조 [XAML 개요에 대 한 태그 확장](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public bool SupportMarkupExtensionsWithDuplicateArity { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>스키마 컨텍스트; 중복 인자가 있는 태그 확장을 허용 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)
  id: TryGetCompatibleXamlNamespace(System.String,System.String@)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: TryGetCompatibleXamlNamespace(String,String)
  nameWithType: XamlSchemaContext.TryGetCompatibleXamlNamespace(String,String)
  fullName: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(String,String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "호환 되는 XAML 네임 스페이스에 대 한 요청의 성공 여부를 반환합니다. Out 매개 변수로 해당 XAML 네임 스페이스를 보고 하는 요청이 성공 합니다."
  remarks: "이 메서드는 다음과 같은 조회 순서를 사용 하는 내부적으로: 1입니다.  내부적으로 구현 된 호환성 사전에 이전 조회 하 여 구성 되었습니다.      2.  <xref:System.Windows.Markup.XmlnsCompatibleWithAttribute>매개 변수를 평가 합니다.</xref:System.Windows.Markup.XmlnsCompatibleWithAttribute>       다른 호환 네임 스페이스가 검색 되 고이 메서드가 반환 하는 경우 `false`, `compatibleNamespace` 출력 매개 변수는 동일한 값으로 할 수는 `xamlNamespace` 입력 합니다."
  syntax:
    content: public virtual bool TryGetCompatibleXamlNamespace (string xamlNamespace, out string compatibleNamespace);
    parameters:
    - id: xamlNamespace
      type: System.String
      description: "<xref uid=&quot;langword_csharp_xmlns&quot; name=&quot;xmlns&quot; href=&quot;&quot;> </xref> 호환 되는 결과 대해 확인할 XAML 네임 스페이스에 대 한 문자열입니다."
    - id: compatibleNamespace
      type: System.String
      description: "이 메서드가 반환 될 때는 <xref uid=&quot;langword_csharp_xmlns&quot; name=&quot;xmlns&quot; href=&quot;&quot;> </xref> 호환 되는 XAML 네임 스페이스 요청에 대 한 문자열입니다. 동일 때문일 `xamlNamespace` 메서드에서 반환 되 면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <code> compatibleNamespace </code> 사용 가능한 결과가 포함, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xamlNamespace</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Xaml.XamlSchemaContext.#ctor
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext()
  nameWithType: XamlSchemaContext.XamlSchemaContext()
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext()
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext(IEnumerable<Assembly>)
  nameWithType: XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>)
- uid: System.Collections.Generic.IEnumerable{System.Reflection.Assembly}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Assembly>
  nameWithType: IEnumerable<Assembly>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Assembly>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Reflection.Assembly>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: Assembly
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext(XamlSchemaContextSettings)
  nameWithType: XamlSchemaContext.XamlSchemaContext(XamlSchemaContextSettings)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(XamlSchemaContextSettings)
- uid: System.Xaml.XamlSchemaContextSettings
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContextSettings
  nameWithType: XamlSchemaContextSettings
  fullName: System.Xaml.XamlSchemaContextSettings
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  nameWithType: XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
- uid: System.Xaml.XamlSchemaContext.Finalize
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: Finalize()
  nameWithType: XamlSchemaContext.Finalize()
  fullName: System.Xaml.XamlSchemaContext.Finalize()
- uid: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: FullyQualifyAssemblyNamesInClrNamespaces
  nameWithType: XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  fullName: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetAllXamlNamespaces()
  nameWithType: XamlSchemaContext.GetAllXamlNamespaces()
  fullName: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces()
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetAllXamlTypes(String)
  nameWithType: XamlSchemaContext.GetAllXamlTypes(String)
  fullName: System.Xaml.XamlSchemaContext.GetAllXamlTypes(String)
- uid: System.Collections.Generic.ICollection{System.Xaml.XamlType}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<XamlType>
  nameWithType: ICollection<XamlType>
  fullName: System.Collections.Generic.ICollection<System.Xaml.XamlType>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Xaml.XamlType>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlType
    name: XamlType
    nameWithType: XamlType
    fullName: XamlType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetPreferredPrefix(String)
  nameWithType: XamlSchemaContext.GetPreferredPrefix(String)
  fullName: System.Xaml.XamlSchemaContext.GetPreferredPrefix(String)
- uid: System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetValueConverter(Type,XamlType)
  nameWithType: XamlSchemaContext.GetValueConverter(Type,XamlType)
  fullName: System.Xaml.XamlSchemaContext.GetValueConverter(Type,XamlType)
- uid: System.Xaml.Schema.XamlValueConverter`1
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<TConverterBase>
  nameWithType: XamlValueConverter<TConverterBase>
  fullName: System.Xaml.Schema.XamlValueConverter<TConverterBase>
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlDirective(String,String)
  nameWithType: XamlSchemaContext.GetXamlDirective(String,String)
  fullName: System.Xaml.XamlSchemaContext.GetXamlDirective(String,String)
- uid: System.Xaml.XamlDirective
  parent: System.Xaml
  isExternal: false
  name: XamlDirective
  nameWithType: XamlDirective
  fullName: System.Xaml.XamlDirective
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.Type)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlType(Type)
  nameWithType: XamlSchemaContext.GetXamlType(Type)
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(Type)
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlType(XamlTypeName)
  nameWithType: XamlSchemaContext.GetXamlType(XamlTypeName)
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(XamlTypeName)
- uid: System.Xaml.Schema.XamlTypeName
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlTypeName
  nameWithType: XamlTypeName
  fullName: System.Xaml.Schema.XamlTypeName
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlType(String,String,XamlType[])
  nameWithType: XamlSchemaContext.GetXamlType(String,String,XamlType[])
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(String,String,XamlType[])
- uid: System.Xaml.XamlType[]
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType[]
  spec.csharp:
  - uid: System.Xaml.XamlType
    name: XamlType
    nameWithType: XamlType
    fullName: XamlType[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: OnAssemblyResolve(String)
  nameWithType: XamlSchemaContext.OnAssemblyResolve(String)
  fullName: System.Xaml.XamlSchemaContext.OnAssemblyResolve(String)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Xaml.XamlSchemaContext.ReferenceAssemblies
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: ReferenceAssemblies
  nameWithType: XamlSchemaContext.ReferenceAssemblies
  fullName: System.Xaml.XamlSchemaContext.ReferenceAssemblies
- uid: System.Collections.Generic.IList{System.Reflection.Assembly}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<Assembly>
  nameWithType: IList<Assembly>
  fullName: System.Collections.Generic.IList<System.Reflection.Assembly>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Reflection.Assembly>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: Assembly
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: SupportMarkupExtensionsWithDuplicateArity
  nameWithType: XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  fullName: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
- uid: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: TryGetCompatibleXamlNamespace(String,String)
  nameWithType: XamlSchemaContext.TryGetCompatibleXamlNamespace(String,String)
  fullName: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(String,String)
- uid: System.Xaml.XamlSchemaContext.#ctor*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext.XamlSchemaContext
- uid: System.Xaml.XamlSchemaContext.Finalize*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: Finalize
  nameWithType: XamlSchemaContext.Finalize
- uid: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: FullyQualifyAssemblyNamesInClrNamespaces
  nameWithType: XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
- uid: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetAllXamlNamespaces
  nameWithType: XamlSchemaContext.GetAllXamlNamespaces
- uid: System.Xaml.XamlSchemaContext.GetAllXamlTypes*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetAllXamlTypes
  nameWithType: XamlSchemaContext.GetAllXamlTypes
- uid: System.Xaml.XamlSchemaContext.GetPreferredPrefix*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetPreferredPrefix
  nameWithType: XamlSchemaContext.GetPreferredPrefix
- uid: System.Xaml.XamlSchemaContext.GetValueConverter<TConverterBase>*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetValueConverter<TConverterBase>
  nameWithType: XamlSchemaContext.GetValueConverter<TConverterBase>
- uid: System.Xaml.XamlSchemaContext.GetXamlDirective*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlDirective
  nameWithType: XamlSchemaContext.GetXamlDirective
- uid: System.Xaml.XamlSchemaContext.GetXamlType*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlType
  nameWithType: XamlSchemaContext.GetXamlType
- uid: System.Xaml.XamlSchemaContext.OnAssemblyResolve*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: OnAssemblyResolve
  nameWithType: XamlSchemaContext.OnAssemblyResolve
- uid: System.Xaml.XamlSchemaContext.ReferenceAssemblies*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: ReferenceAssemblies
  nameWithType: XamlSchemaContext.ReferenceAssemblies
- uid: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: SupportMarkupExtensionsWithDuplicateArity
  nameWithType: XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
- uid: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: TryGetCompatibleXamlNamespace
  nameWithType: XamlSchemaContext.TryGetCompatibleXamlNamespace
