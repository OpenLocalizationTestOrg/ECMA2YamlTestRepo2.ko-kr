### YamlMime:ManagedReference
items:
- uid: System.Runtime.DurableInstancing.InstanceStore
  id: InstanceStore
  children:
  - System.Runtime.DurableInstancing.InstanceStore.#ctor
  - System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  - System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  - System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)
  - System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle
  - System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)
  - System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)
  - System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)
  - System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner
  - System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)
  - System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)
  - System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)
  - System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  - System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)
  - System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners
  - System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)
  - System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)
  - System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  - System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  - System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  - System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)
  langs:
  - csharp
  name: InstanceStore
  nameWithType: InstanceStore
  fullName: System.Runtime.DurableInstancing.InstanceStore
  type: Class
  summary: "인스턴스 저장소를 나타냅니다."
  remarks: "지 속성 공급자는 InstanceStore 클래스의 구체적인 구현을 통해 인스턴스 저장소에 대 한 액세스를 제공합니다.       지 속성 공급자는 명령 실행을 마친 후에 TryCommand에 전달 된 핸들에서 InstanceHandle.Free를 호출할 수 있습니다. 하지만 이렇게 하면 InstanceStore 가비지 수집 되지 않도록 방지할 수 대로 지 속성 공급자를 강력한 가져야 합니다. InstanceHandle 또는 InstanceOwner 개체를 참조 합니다.      > [!WARNING] > 지속형된 워크플로에 대 한 워크플로 정의 변경할 수 없습니다. 워크플로 정의 유지 된 후 변경 되 면 워크플로 런타임은 워크플로가 다시 로드할 때 작동이 중단 됩니다."
  syntax:
    content: public abstract class InstanceStore
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.#ctor
  id: '#ctor'
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: InstanceStore()
  nameWithType: InstanceStore.InstanceStore()
  fullName: System.Runtime.DurableInstancing.InstanceStore.InstanceStore()
  type: Constructor
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "인스턴스를 초기화는 <xref href=&quot;System.Runtime.DurableInstancing.InstanceStore&quot;> </xref> 클래스입니다."
  syntax:
    content: protected InstanceStore ();
    parameters: []
  overload: System.Runtime.DurableInstancing.InstanceStore.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: BeginExecute(InstanceHandle,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  nameWithType: InstanceStore.BeginExecute(InstanceHandle,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.BeginExecute(InstanceHandle,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "등을 지 속성 명령을 비동기적으로 실행 <xref href=&quot;System.Activities.DurableInstancing.LoadWorkflowCommand&quot;> </xref> 및 <xref href=&quot;System.Activities.DurableInstancing.SaveWorkflowCommand&quot;> </xref>합니다."
  remarks: "호스트는 인스턴스 핸들에 대해 지 속성 명령을 비동기적으로 실행 하는 BeginExecute 메서드를 호출 합니다. 호스트를 호출 하 여 인스턴스 핸들을 가져옵니다는 <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A>메서드.</xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> 인스턴스 핸들이 인스턴스, 인스턴스 소유자 또는 인스턴스 잠금과 같은 명령 주체 및 컨텍스트를 나타내는 엔터티에 바인딩할 수 있습니다.  하나의 명령이 한 번에 인스턴스 핸들에 대해 실행 될 수 있습니다."
  syntax:
    content: public IAsyncResult BeginExecute (System.Runtime.DurableInstancing.InstanceHandle handle, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: handle
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "인스턴스 핸들입니다."
    - id: command
      type: System.Runtime.DurableInstancing.InstancePersistenceCommand
      description: "실행할 명령입니다."
    - id: timeout
      type: System.TimeSpan
      description: "명령 실행에 대 한 제한 시간 값입니다."
    - id: callback
      type: System.AsyncCallback
      description: "비동기 작업의 완료에 대 한 알림을 수신 하는 비동기 콜백 대리자입니다."
    - id: state
      type: System.Object
      description: "상태 정보입니다."
    return:
      type: System.IAsyncResult
      description: "비동기 작업의 상태입니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.BeginExecute*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: BeginTryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  nameWithType: InstanceStore.BeginTryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "지 속성 공급자는 특정 지 속성 명령을 실행할 수 있는지 여부를 결정 하는이 메서드를 구현 합니다. 명령을 실행할 수는 명령을 비동기적으로 실행 합니다."
  remarks: "명령, 실행할 수 있으면 지 속성 공급자 명령의 결과 제공 하는 InstancePersistenceContext에서 관련 메서드를 호출 합니다.      > [!WARNING] >으로이 메서드를 선언 하는 경우에 `virtual` 대신 `abstract`, 구현은 없습니다. 기능을 제공 하기 위해이 메서드를 재정의 해야 합니다."
  syntax:
    content: protected virtual IAsyncResult BeginTryCommand (System.Runtime.DurableInstancing.InstancePersistenceContext context, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: context
      type: System.Runtime.DurableInstancing.InstancePersistenceContext
      description: "인스턴스 컨텍스트입니다."
    - id: command
      type: System.Runtime.DurableInstancing.InstancePersistenceCommand
      description: "실행할 지 속성 명령입니다."
    - id: timeout
      type: System.TimeSpan
      description: "명령 실행에 대 한 제한 시간 값입니다."
    - id: callback
      type: System.AsyncCallback
      description: "비동기 작업의 완료에 대 한 알림을 수신 하는 비동기 콜백 대리자입니다."
    - id: state
      type: System.Object
      description: "상태 정보입니다."
    return:
      type: System.IAsyncResult
      description: "비동기 작업의 상태입니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: BeginWaitForEvents(InstanceHandle,TimeSpan,AsyncCallback,Object)
  nameWithType: InstanceStore.BeginWaitForEvents(InstanceHandle,TimeSpan,AsyncCallback,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(InstanceHandle,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "특정 인스턴스 핸들에 대 한 인스턴스 저장소에서 발생 한 이벤트 수신 대기 하는 비동기 작업을 시작 합니다."
  syntax:
    content: public IAsyncResult BeginWaitForEvents (System.Runtime.DurableInstancing.InstanceHandle handle, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: handle
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "인스턴스 핸들입니다."
    - id: timeout
      type: System.TimeSpan
      description: "작업 시간이 초과 되는 기간입니다."
    - id: callback
      type: System.AsyncCallback
      description: "비동기 작업이 완료 된 후 호출 될 메서드."
    - id: state
      type: System.Object
      description: "비동기 작업과 연결 된 상태 정보를 포함 하는 개체입니다."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>개체..</xref:System.IAsyncResult> 를 반환 함"
  overload: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle
  id: CreateInstanceHandle
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: CreateInstanceHandle()
  nameWithType: InstanceStore.CreateInstanceHandle()
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle()
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "인스턴스 핸들을 만듭니다."
  syntax:
    content: public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle ();
    parameters: []
    return:
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "인스턴스 핸들입니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)
  id: CreateInstanceHandle(System.Guid)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: CreateInstanceHandle(Guid)
  nameWithType: InstanceStore.CreateInstanceHandle(Guid)
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(Guid)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "인스턴스 핸들을 만듭니다.  DefaultInstanceOwner가 설정 값은 자동으로 새 핸들의 인스턴스 소유자로 바인딩됩니다.  매개 변수로 전달 된 인스턴스 식별자는 자동으로 새 핸들의 인스턴스로 바인딩됩니다."
  syntax:
    content: public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (Guid instanceId);
    parameters:
    - id: instanceId
      type: System.Guid
      description: "인스턴스 식별자입니다. Guid.empty가 아니어야 합니다."
    return:
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "인스턴스 핸들입니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)
  id: CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: CreateInstanceHandle(InstanceOwner)
  nameWithType: InstanceStore.CreateInstanceHandle(InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(InstanceOwner)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "인스턴스 핸들을 만듭니다. 매개 변수로 전달 된 인스턴스 소유자는 null이 아니면 값은 자동으로 새 핸들의 인스턴스 소유자로 바인딩됩니다.  (그렇지 않은 경우 인스턴스 소유자가 바인딩되지 않습니다 DefaultInstanceOwner가 설정 하는 경우에.)"
  syntax:
    content: public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (System.Runtime.DurableInstancing.InstanceOwner owner);
    parameters:
    - id: owner
      type: System.Runtime.DurableInstancing.InstanceOwner
      description: "인스턴스 소유자입니다."
    return:
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "인스턴스 핸들입니다. Null 값을 새 핸들 자동으로 바인딩되지 않아야 인스턴스 소유자에 나타냅니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)
  id: CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: CreateInstanceHandle(InstanceOwner,Guid)
  nameWithType: InstanceStore.CreateInstanceHandle(InstanceOwner,Guid)
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(InstanceOwner,Guid)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "인스턴스 핸들을 만듭니다. 매개 변수로 전달 된 인스턴스 소유자는 null이 아니면 값은 자동으로 새 핸들의 인스턴스 소유자로 바인딩됩니다.  (그렇지 않은 경우 인스턴스 소유자가 바인딩되지 않습니다 DefaultInstanceOwner가 설정 하는 경우에.) 매개 변수로 전달 된 인스턴스 식별자는 자동으로 새 핸들의 인스턴스로 바인딩됩니다."
  syntax:
    content: public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (System.Runtime.DurableInstancing.InstanceOwner owner, Guid instanceId);
    parameters:
    - id: owner
      type: System.Runtime.DurableInstancing.InstanceOwner
      description: "인스턴스 소유자를 나타내는 InstanceOwner 개체입니다. 이 매개 변수를 나타내는 새 핸들 자동으로 바인딩되지 않아야 인스턴스 소유자에 대 한 값으로 null을 전달 합니다."
    - id: instanceId
      type: System.Guid
      description: "인스턴스 식별자입니다. Guid.empty가 아니어야 합니다."
    return:
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "인스턴스 핸들입니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner
  id: DefaultInstanceOwner
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: DefaultInstanceOwner
  nameWithType: InstanceStore.DefaultInstanceOwner
  fullName: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner
  type: Property
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "기본 인스턴스 소유자를 가져오거나 설정 합니다."
  remarks: "일부 호스트는이 속성을 읽어 사용할 인스턴스 소유자를 유추 합니다. WorkflowApplication이이 속성을 사용할 수 있습니다. WorkflowServiceHost에서이 속성을 사용 하지 않습니다.       DefaultInstanceOwner 속성은 더 이상 필요한 경우 null로 설정 되어야 합니다. InstanceStore 개체가 가비지 수집 DefaultInstanceOwner null이 아닐 수 있습니다.      > [!WARNING] >으로이 메서드를 선언 하는 경우에 `virtual` 대신 `abstract`, 구현은 없습니다. 기능을 제공 하기 위해이 메서드를 재정의 해야 합니다."
  syntax:
    content: public System.Runtime.DurableInstancing.InstanceOwner DefaultInstanceOwner { get; set; }
    return:
      type: System.Runtime.DurableInstancing.InstanceOwner
      description: "기본 인스턴스 소유자입니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)
  id: EndExecute(System.IAsyncResult)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: EndExecute(IAsyncResult)
  nameWithType: InstanceStore.EndExecute(IAsyncResult)
  fullName: System.Runtime.DurableInstancing.InstanceStore.EndExecute(IAsyncResult)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "비동기 작업을 종료 합니다."
  remarks: "트랜잭션에서 BeginExecute가 호출 하는 경우이 상태는 커밋되지 않은 데이터를 포함할 수 있습니다. 트랜잭션이 성공적으로 커밋되면 InstanceView 개체로 간주할 수의 데이터는 커밋된 합니다."
  syntax:
    content: public System.Runtime.DurableInstancing.InstanceView EndExecute (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "작업의 결과입니다."
    return:
      type: System.Runtime.DurableInstancing.InstanceView
      description: "명령이 완료 된 후 인스턴스의 알려진된 상태를 나타내는 InstanceView 개체입니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.EndExecute*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)
  id: EndTryCommand(System.IAsyncResult)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: EndTryCommand(IAsyncResult)
  nameWithType: InstanceStore.EndTryCommand(IAsyncResult)
  fullName: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(IAsyncResult)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "비동기 작업을 끝냅니다."
  remarks: >-
    > [!WARNING]

    >  Even though this method is declared as `virtual` rather than `abstract`, there is no implementation. This method must be overridden in order to provide functionality.
  syntax:
    content: protected virtual bool EndTryCommand (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "작업의 결과입니다."
    return:
      type: System.Boolean
      description: "지 속성 공급자 구현에서는 BeginTryCommand 메서드에 전달 된 명령을 지원 하지 않을 경우 false를 반환 해야 합니다. 그렇지 않으면 true를 반환 하거나 예외를 throw 해야 합니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)
  id: EndWaitForEvents(System.IAsyncResult)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: EndWaitForEvents(IAsyncResult)
  nameWithType: InstanceStore.EndWaitForEvents(IAsyncResult)
  fullName: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(IAsyncResult)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "시작 된 비동기 작업을 종료 하는 <xref:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents*>메서드.</xref:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents*>"
  syntax:
    content: public System.Collections.Generic.List<System.Runtime.DurableInstancing.InstancePersistenceEvent> EndWaitForEvents (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "Begin 메서드에 의해 클라이언트에 전달 된 IAsyncResult 개체."
    return:
      type: System.Collections.Generic.List{System.Runtime.DurableInstancing.InstancePersistenceEvent}
      description: "목록을 반환 <xref href=&quot;System.Runtime.DurableInstancing.InstancePersistenceEvent&quot;> </xref> 개체..."
  overload: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  id: Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: Execute(InstanceHandle,InstancePersistenceCommand,TimeSpan)
  nameWithType: InstanceStore.Execute(InstanceHandle,InstancePersistenceCommand,TimeSpan)
  fullName: System.Runtime.DurableInstancing.InstanceStore.Execute(InstanceHandle,InstancePersistenceCommand,TimeSpan)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: '지 속성 명령을 동기적으로 실행 합니다. 지 속성 명령의 예로: <xref href=&quot;System.Activities.DurableInstancing.LoadWorkflowCommand&quot;> </xref> 및 <xref href=&quot;System.Activities.DurableInstancing.SaveWorkflowCommand&quot;> </xref>합니다.'
  remarks: "호출 하 여 가져오고 호스트는 인스턴스 핸들에 대해 지 속성 명령을 실행 하려면 Execute 메서드를 호출 하는 호스트는 <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A>메서드.</xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> 인스턴스 핸들이 인스턴스, 인스턴스 소유자 또는 인스턴스 잠금과 같은 명령 주체 및 컨텍스트를 나타내는 엔터티에 바인딩할 수 있습니다.  하나의 명령이 한 번에 인스턴스 핸들에 대해 실행 될 수 있습니다.      > [!WARNING] >으로이 메서드를 실행 한 <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand>, 만들어집니다는 <xref:System.Runtime.DurableInstancing.InstanceOwner>인스턴스에 바인딩합니다.</xref:System.Runtime.DurableInstancing.InstanceOwner> </xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand> 다른 프로세스가 해당 워크플로;에 액세스할 수 됩니다. 프로세스가 종료 되 면 워크플로 복구 하거나 실행할 수 없습니다. 워크플로 다시 실행 되는 경우는 <xref:System.Runtime.DurableInstancing.InstanceLockedException>throw 됩니다.</xref:System.Runtime.DurableInstancing.InstanceLockedException>   >> If <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand>은 사용 하지 않을 경우 인스턴스 저장소 만들어집니다. 임시 <xref:System.Runtime.DurableInstancing.InstanceOwner>하는 프로세스의 끝에 삭제 됩니다.</xref:System.Runtime.DurableInstancing.InstanceOwner> </xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand> 그러나 프로세스 워크플로의 마지막 지 속성 지점 앞으로 끝나는 경우이 예외가 throw 됩니다, 시간에 지정 된 경우는 **HostLockRenewalPeriod** 매개 변수 만료 되었습니다."
  syntax:
    content: public System.Runtime.DurableInstancing.InstanceView Execute (System.Runtime.DurableInstancing.InstanceHandle handle, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout);
    parameters:
    - id: handle
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "인스턴스 핸들입니다."
    - id: command
      type: System.Runtime.DurableInstancing.InstancePersistenceCommand
      description: "실행할 명령입니다."
    - id: timeout
      type: System.TimeSpan
      description: "작업에 대 한 제한 시간 값입니다."
    return:
      type: System.Runtime.DurableInstancing.InstanceView
      description: "명령이 완료 된 후 인스턴스의 알려진된 상태를 나타내는 InstanceView 개체입니다.  트랜잭션 내에서 Execute를 호출 하는 경우이 상태는 커밋되지 않은 데이터를 포함할 수 있습니다. 트랜잭션이 성공적으로 커밋되면 InstanceView 개체로 간주할 수의 데이터는 커밋된"
  overload: System.Runtime.DurableInstancing.InstanceStore.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)
  id: GetEvents(System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: GetEvents(InstanceOwner)
  nameWithType: InstanceStore.GetEvents(InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.GetEvents(InstanceOwner)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "신호를 받은 이벤트에 바인딩된 모든 가져옵니다는 <xref href=&quot;System.Runtime.DurableInstancing.InstanceOwner&quot;> </xref> 개체입니다."
  syntax:
    content: protected System.Runtime.DurableInstancing.InstancePersistenceEvent[] GetEvents (System.Runtime.DurableInstancing.InstanceOwner owner);
    parameters:
    - id: owner
      type: System.Runtime.DurableInstancing.InstanceOwner
      description: "<xref href=&quot;System.Runtime.DurableInstancing.InstanceOwner&quot;> </xref> 인스턴스의 소유자를 나타내는 개체입니다."
    return:
      type: System.Runtime.DurableInstancing.InstancePersistenceEvent[]
      description: "배열을 반환 <xref href=&quot;System.Runtime.DurableInstancing.InstancePersistenceEvent&quot;> </xref> 개체..."
  overload: System.Runtime.DurableInstancing.InstanceStore.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners
  id: GetInstanceOwners
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: GetInstanceOwners()
  nameWithType: InstanceStore.GetInstanceOwners()
  fullName: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners()
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "유효한 인스턴스 핸들에 바인딩되거나 가비지 수집 되지 않았지만 각 InstanceOwner 개체를 가져옵니다."
  remarks: "InstanceOwner 개체 배열을 반환합니다."
  syntax:
    content: protected System.Runtime.DurableInstancing.InstanceOwner[] GetInstanceOwners ();
    parameters: []
    return:
      type: System.Runtime.DurableInstancing.InstanceOwner[]
      description: "인스턴스 소유자입니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)
  id: OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: OnFreeInstanceHandle(InstanceHandle,Object)
  nameWithType: InstanceStore.OnFreeInstanceHandle(InstanceHandle,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(InstanceHandle,Object)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "인스턴스 핸들이 해제 될 때 호출 됩니다."
  syntax:
    content: protected virtual void OnFreeInstanceHandle (System.Runtime.DurableInstancing.InstanceHandle instanceHandle, object userContext);
    parameters:
    - id: instanceHandle
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "해제 된 인스턴스 핸들입니다."
    - id: userContext
      type: System.Object
      description: "OnNewInstanceHandle이 재정의 되지 않는 경우 null 또는, OnNewInstanceHandle에서 반환 된 지 속성 공급자의 사용자 컨텍스트 정보입니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)
  id: OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: OnNewInstanceHandle(InstanceHandle)
  nameWithType: InstanceStore.OnNewInstanceHandle(InstanceHandle)
  fullName: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(InstanceHandle)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "새 인스턴스 핸들이 만들어질 때 호출 됩니다."
  syntax:
    content: protected virtual object OnNewInstanceHandle (System.Runtime.DurableInstancing.InstanceHandle instanceHandle);
    parameters:
    - id: instanceHandle
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "인스턴스 핸들입니다."
    return:
      type: System.Object
      description: "개체입니다.  이 사용자 컨텍스트 개체 핸들을 사용 하 여 명령이 실행 되 고 핸들이 해제 될 때 지 속성 공급자에 게 제공 됩니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  id: ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: ResetEvent(InstancePersistenceEvent,InstanceOwner)
  nameWithType: InstanceStore.ResetEvent(InstancePersistenceEvent,InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.ResetEvent(InstancePersistenceEvent,InstanceOwner)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "신호를 받은 이벤트를 다시 설정 하 고 인스턴스 소유자에 의해 관리 되는 신호를 받은 이벤트 목록에서 이벤트를 제거 합니다."
  syntax:
    content: protected void ResetEvent (System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent, System.Runtime.DurableInstancing.InstanceOwner owner);
    parameters:
    - id: persistenceEvent
      type: System.Runtime.DurableInstancing.InstancePersistenceEvent
      description: "이전 신호를 받은 지 속성 이벤트를 다시 설정할 수 있습니다."
    - id: owner
      type: System.Runtime.DurableInstancing.InstanceOwner
      description: "지 속성 이벤트와 연결 된 인스턴스 소유자입니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.ResetEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  id: SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: SignalEvent(InstancePersistenceEvent,InstanceOwner)
  nameWithType: InstanceStore.SignalEvent(InstancePersistenceEvent,InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.SignalEvent(InstancePersistenceEvent,InstanceOwner)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "인스턴스 저장소에 이벤트를 알리기 위해이 메서드를 호출 합니다. 이 지 속성 이벤트를 구독 하는 워크플로 호스트를 받아 적절 한 작업을 수행 합니다."
  syntax:
    content: protected void SignalEvent (System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent, System.Runtime.DurableInstancing.InstanceOwner owner);
    parameters:
    - id: persistenceEvent
      type: System.Runtime.DurableInstancing.InstancePersistenceEvent
      description: "지 속성 이벤트 신호를 보낼 수입니다."
    - id: owner
      type: System.Runtime.DurableInstancing.InstanceOwner
      description: "인스턴스 소유자입니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.SignalEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  id: TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: TryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan)
  nameWithType: InstanceStore.TryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan)
  fullName: System.Runtime.DurableInstancing.InstanceStore.TryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "지 속성 공급자는 특정 지 속성 명령이 실행 될 수 있는지 여부를 결정 하는 명령을 실행할 수 있으면이 비동기적으로 실행 하는이 메서드를 구현 합니다."
  remarks: "지 속성 공급자에서 관련 메서드를 호출 하는 경우 명령이 실행 될 수는 <xref:System.Runtime.DurableInstancing.InstancePersistenceContext>명령의 결과 제공 합니다.</xref:System.Runtime.DurableInstancing.InstancePersistenceContext>"
  syntax:
    content: protected virtual bool TryCommand (System.Runtime.DurableInstancing.InstancePersistenceContext context, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout);
    parameters:
    - id: context
      type: System.Runtime.DurableInstancing.InstancePersistenceContext
      description: "인스턴스 컨텍스트입니다."
    - id: command
      type: System.Runtime.DurableInstancing.InstancePersistenceCommand
      description: "실행할 명령입니다."
    - id: timeout
      type: System.TimeSpan
      description: "작업에 대 한 제한 시간 값입니다."
    return:
      type: System.Boolean
      description: "지 속성 공급자 구현을 반환 해야 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> ; 매개 변수로 전달 된 명령을 지원 하지 않을 경우 그렇지 않으면 반환 해야 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 이거나 예외를 throw 합니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.TryCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)
  id: WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: WaitForEvents(InstanceHandle,TimeSpan)
  nameWithType: InstanceStore.WaitForEvents(InstanceHandle,TimeSpan)
  fullName: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(InstanceHandle,TimeSpan)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "워크플로 호스트는 일반적으로 이벤트에서 신호를 받을 때까지 대기 하려면이 메서드를 호출 합니다."
  syntax:
    content: public System.Collections.Generic.List<System.Runtime.DurableInstancing.InstancePersistenceEvent> WaitForEvents (System.Runtime.DurableInstancing.InstanceHandle handle, TimeSpan timeout);
    parameters:
    - id: handle
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "이벤트에 바인딩된 인스턴스 핸들입니다."
    - id: timeout
      type: System.TimeSpan
      description: "대기 작업 시간이 초과 되는 시간 범위입니다."
    return:
      type: System.Collections.Generic.List{System.Runtime.DurableInstancing.InstancePersistenceEvent}
      description: "목록이 <xref href=&quot;System.Runtime.DurableInstancing.InstancePersistenceEvent&quot;> </xref> 개체입니다."
  overload: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.DurableInstancing.InstanceStore.#ctor
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: InstanceStore()
  nameWithType: InstanceStore.InstanceStore()
  fullName: System.Runtime.DurableInstancing.InstanceStore.InstanceStore()
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: BeginExecute(InstanceHandle,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  nameWithType: InstanceStore.BeginExecute(InstanceHandle,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.BeginExecute(InstanceHandle,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Runtime.DurableInstancing.InstanceHandle
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstanceHandle
  nameWithType: InstanceHandle
  fullName: System.Runtime.DurableInstancing.InstanceHandle
- uid: System.Runtime.DurableInstancing.InstancePersistenceCommand
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstancePersistenceCommand
  nameWithType: InstancePersistenceCommand
  fullName: System.Runtime.DurableInstancing.InstancePersistenceCommand
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: BeginTryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  nameWithType: InstanceStore.BeginTryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
- uid: System.Runtime.DurableInstancing.InstancePersistenceContext
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstancePersistenceContext
  nameWithType: InstancePersistenceContext
  fullName: System.Runtime.DurableInstancing.InstancePersistenceContext
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: BeginWaitForEvents(InstanceHandle,TimeSpan,AsyncCallback,Object)
  nameWithType: InstanceStore.BeginWaitForEvents(InstanceHandle,TimeSpan,AsyncCallback,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(InstanceHandle,TimeSpan,AsyncCallback,Object)
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: CreateInstanceHandle()
  nameWithType: InstanceStore.CreateInstanceHandle()
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle()
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: CreateInstanceHandle(Guid)
  nameWithType: InstanceStore.CreateInstanceHandle(Guid)
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: CreateInstanceHandle(InstanceOwner)
  nameWithType: InstanceStore.CreateInstanceHandle(InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(InstanceOwner)
- uid: System.Runtime.DurableInstancing.InstanceOwner
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstanceOwner
  nameWithType: InstanceOwner
  fullName: System.Runtime.DurableInstancing.InstanceOwner
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: CreateInstanceHandle(InstanceOwner,Guid)
  nameWithType: InstanceStore.CreateInstanceHandle(InstanceOwner,Guid)
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(InstanceOwner,Guid)
- uid: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: DefaultInstanceOwner
  nameWithType: InstanceStore.DefaultInstanceOwner
  fullName: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner
- uid: System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: EndExecute(IAsyncResult)
  nameWithType: InstanceStore.EndExecute(IAsyncResult)
  fullName: System.Runtime.DurableInstancing.InstanceStore.EndExecute(IAsyncResult)
- uid: System.Runtime.DurableInstancing.InstanceView
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstanceView
  nameWithType: InstanceView
  fullName: System.Runtime.DurableInstancing.InstanceView
- uid: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: EndTryCommand(IAsyncResult)
  nameWithType: InstanceStore.EndTryCommand(IAsyncResult)
  fullName: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(IAsyncResult)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: EndWaitForEvents(IAsyncResult)
  nameWithType: InstanceStore.EndWaitForEvents(IAsyncResult)
  fullName: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(IAsyncResult)
- uid: System.Collections.Generic.List{System.Runtime.DurableInstancing.InstancePersistenceEvent}
  parent: System.Collections.Generic
  isExternal: true
  name: List<InstancePersistenceEvent>
  nameWithType: List<InstancePersistenceEvent>
  fullName: System.Collections.Generic.List<System.Runtime.DurableInstancing.InstancePersistenceEvent>
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: List<System.Runtime.DurableInstancing.InstancePersistenceEvent>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Runtime.DurableInstancing.InstancePersistenceEvent
    name: InstancePersistenceEvent
    nameWithType: InstancePersistenceEvent
    fullName: InstancePersistenceEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: Execute(InstanceHandle,InstancePersistenceCommand,TimeSpan)
  nameWithType: InstanceStore.Execute(InstanceHandle,InstancePersistenceCommand,TimeSpan)
  fullName: System.Runtime.DurableInstancing.InstanceStore.Execute(InstanceHandle,InstancePersistenceCommand,TimeSpan)
- uid: System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: GetEvents(InstanceOwner)
  nameWithType: InstanceStore.GetEvents(InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.GetEvents(InstanceOwner)
- uid: System.Runtime.DurableInstancing.InstancePersistenceEvent[]
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstancePersistenceEvent
  nameWithType: InstancePersistenceEvent
  fullName: System.Runtime.DurableInstancing.InstancePersistenceEvent[]
  spec.csharp:
  - uid: System.Runtime.DurableInstancing.InstancePersistenceEvent
    name: InstancePersistenceEvent
    nameWithType: InstancePersistenceEvent
    fullName: InstancePersistenceEvent[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: GetInstanceOwners()
  nameWithType: InstanceStore.GetInstanceOwners()
  fullName: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners()
- uid: System.Runtime.DurableInstancing.InstanceOwner[]
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstanceOwner
  nameWithType: InstanceOwner
  fullName: System.Runtime.DurableInstancing.InstanceOwner[]
  spec.csharp:
  - uid: System.Runtime.DurableInstancing.InstanceOwner
    name: InstanceOwner
    nameWithType: InstanceOwner
    fullName: InstanceOwner[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: OnFreeInstanceHandle(InstanceHandle,Object)
  nameWithType: InstanceStore.OnFreeInstanceHandle(InstanceHandle,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(InstanceHandle,Object)
- uid: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: OnNewInstanceHandle(InstanceHandle)
  nameWithType: InstanceStore.OnNewInstanceHandle(InstanceHandle)
  fullName: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(InstanceHandle)
- uid: System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: ResetEvent(InstancePersistenceEvent,InstanceOwner)
  nameWithType: InstanceStore.ResetEvent(InstancePersistenceEvent,InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.ResetEvent(InstancePersistenceEvent,InstanceOwner)
- uid: System.Runtime.DurableInstancing.InstancePersistenceEvent
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstancePersistenceEvent
  nameWithType: InstancePersistenceEvent
  fullName: System.Runtime.DurableInstancing.InstancePersistenceEvent
- uid: System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: SignalEvent(InstancePersistenceEvent,InstanceOwner)
  nameWithType: InstanceStore.SignalEvent(InstancePersistenceEvent,InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.SignalEvent(InstancePersistenceEvent,InstanceOwner)
- uid: System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: TryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan)
  nameWithType: InstanceStore.TryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan)
  fullName: System.Runtime.DurableInstancing.InstanceStore.TryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan)
- uid: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: WaitForEvents(InstanceHandle,TimeSpan)
  nameWithType: InstanceStore.WaitForEvents(InstanceHandle,TimeSpan)
  fullName: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(InstanceHandle,TimeSpan)
- uid: System.Runtime.DurableInstancing.InstanceStore.#ctor*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: InstanceStore
  nameWithType: InstanceStore.InstanceStore
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginExecute*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: BeginExecute
  nameWithType: InstanceStore.BeginExecute
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: BeginTryCommand
  nameWithType: InstanceStore.BeginTryCommand
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: BeginWaitForEvents
  nameWithType: InstanceStore.BeginWaitForEvents
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: CreateInstanceHandle
  nameWithType: InstanceStore.CreateInstanceHandle
- uid: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: DefaultInstanceOwner
  nameWithType: InstanceStore.DefaultInstanceOwner
- uid: System.Runtime.DurableInstancing.InstanceStore.EndExecute*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: EndExecute
  nameWithType: InstanceStore.EndExecute
- uid: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: EndTryCommand
  nameWithType: InstanceStore.EndTryCommand
- uid: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: EndWaitForEvents
  nameWithType: InstanceStore.EndWaitForEvents
- uid: System.Runtime.DurableInstancing.InstanceStore.Execute*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: Execute
  nameWithType: InstanceStore.Execute
- uid: System.Runtime.DurableInstancing.InstanceStore.GetEvents*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: GetEvents
  nameWithType: InstanceStore.GetEvents
- uid: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: GetInstanceOwners
  nameWithType: InstanceStore.GetInstanceOwners
- uid: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: OnFreeInstanceHandle
  nameWithType: InstanceStore.OnFreeInstanceHandle
- uid: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: OnNewInstanceHandle
  nameWithType: InstanceStore.OnNewInstanceHandle
- uid: System.Runtime.DurableInstancing.InstanceStore.ResetEvent*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: ResetEvent
  nameWithType: InstanceStore.ResetEvent
- uid: System.Runtime.DurableInstancing.InstanceStore.SignalEvent*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: SignalEvent
  nameWithType: InstanceStore.SignalEvent
- uid: System.Runtime.DurableInstancing.InstanceStore.TryCommand*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: TryCommand
  nameWithType: InstanceStore.TryCommand
- uid: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: WaitForEvents
  nameWithType: InstanceStore.WaitForEvents
