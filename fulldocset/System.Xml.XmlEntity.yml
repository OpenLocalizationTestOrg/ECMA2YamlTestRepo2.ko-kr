### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlEntity
  id: XmlEntity
  children:
  - System.Xml.XmlEntity.BaseURI
  - System.Xml.XmlEntity.CloneNode(System.Boolean)
  - System.Xml.XmlEntity.InnerText
  - System.Xml.XmlEntity.InnerXml
  - System.Xml.XmlEntity.IsReadOnly
  - System.Xml.XmlEntity.LocalName
  - System.Xml.XmlEntity.Name
  - System.Xml.XmlEntity.NodeType
  - System.Xml.XmlEntity.NotationName
  - System.Xml.XmlEntity.OuterXml
  - System.Xml.XmlEntity.PublicId
  - System.Xml.XmlEntity.SystemId
  - System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)
  langs:
  - csharp
  name: XmlEntity
  nameWithType: XmlEntity
  fullName: System.Xml.XmlEntity
  type: Class
  summary: "같은 엔터티 선언을 나타냅니다 &lt;! 엔터티 중... &gt;."
  syntax:
    content: 'public class XmlEntity : System.Xml.XmlNode'
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  implements: []
  inheritedMembers:
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.CreateNavigator
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NamespaceURI
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OwnerDocument
  - System.Xml.XmlNode.ParentNode
  - System.Xml.XmlNode.Prefix
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SchemaInfo
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  platform:
  - net462
- uid: System.Xml.XmlEntity.BaseURI
  id: BaseURI
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: BaseURI
  nameWithType: XmlEntity.BaseURI
  fullName: System.Xml.XmlEntity.BaseURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "기본 식별자 URI (Uniform Resource) 현재 노드를 가져옵니다."
  remarks: "네트워크 XML 문서는 다양 한 World Wide Web Consortium (W3C) 표준 포함 메커니즘을 사용 하 여 집계 데이터의 청크 한 이루어져 서로 다른 위치에서 제공 하는 노드를 포함 합니다. `BaseURI` 이러한 노드 출처를 보여 줍니다.       이 속성의 값은 노드 유형에 따라 다릅니다. 외부 EntityReference 노드의 자식 노드인 엔터티 자체의 위치를 반환 합니다. 예를 들어 다음 XML 문서: ```   <!DOCTYPE item [   <!ENTITY xyz SYSTEM &quot;a/b.xml&quot;>   ]>   <item num=&quot;123&quot;>&xyz;</item>   ``` 여기서 외부 엔터티 `a/b.xml` XML 텍스트가 포함 `<test>123</test>`합니다.       Http://server/mydata.xml에서 문서를 로드 하는 경우 `BaseURI` 다음 반환: | NodeType | 이름 | BaseURI |   |--------------|----------|-------------|   | 특성 | num | http://server/mydata.xml |   | 문서 | #document | http://server/mydata.xml |   | DocumentType | 항목 | http://server/mydata.xml |   | 엔터티 | xyz | http://server/mydata.xml |   | 요소 | 항목 | http://server/mydata.xml |   | EntityReference | xyz | http://server/mydata.xml |   | 요소 | 테스트 | http://server/a/b.xml |   | 텍스트 | #text | http://server/a/b.xml |       `BaseURI` 엔터티 참조 경계를 찾습니다 엔터티 확장 되 면이 정보는 유지 되지 않습니다 및이 속성의 위치를 반환 하므로 `XmlDocument` 모든 경우에에서는 개체입니다.       두 번째 예로, 다음 XML 문서를 제공: ```   <!DOCTYPE Mydata SYSTEM &quot;http://localhost/doctype.dtd&quot;>   <baa>&xyz;</baa>   ``` 문서 형식 정의 (DTD) 파일에서 다음을 포함 하는 위치: ```   <!ENTITY xyz &quot;<E1>My Data</E1>&quot;>   <!ELEMENT baa #PCDATA>   <!ATTLIST baa attr1 &quot;woof&quot;>   ``` http://localhost/mydata.xml에서 XML 문서를 로드 하는 경우 `BaseURI` 각 노드에 대해 다음 반환: | NodeType | 이름 | BaseURI |   |--------------|----------|-------------|   | 문서 | #document | http://localhost/mydata.xml |   | DocumentType | Mydata | http://localhost/doctype.dtd |   | 요소 | baa | http://localhost/mydata.xml |   | 엔터티 | xyz | http://localhost/doctype.dtd |   | EntityReference | xyz | http://localhost/mydata.xml |   | 특성 | woof | http://localhost/mydata.xml |      > [!NOTE] > 기본 특성의 기본 URI가 소속 된 요소의 기본 URI와 동일 합니다.       이 속성은 문서 개체 모델 (DOM)에 Microsoft 확장입니다."
  syntax:
    content: public override string BaseURI { get; }
    return:
      type: System.String
      description: "노드가 로드 된 위치입니다."
  overload: System.Xml.XmlEntity.BaseURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlEntity.CloneNode(Boolean)
  fullName: System.Xml.XmlEntity.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "이 노드의 복제본을 만듭니다. 엔터티 노드를 복제할 수 없습니다. 이 메서드를 호출는 <xref href=&quot;System.Xml.XmlEntity&quot;> </xref> 예외를 throw 하는 개체입니다."
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정된 된 노드 아래의 하위 트리를 재귀적으로를 복제. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 노드 자체만 복제 하려면."
    return:
      type: System.Xml.XmlNode
      description: "복사본을 반환 된 <xref href=&quot;System.Xml.XmlNode&quot;> </xref> 에서 메서드를 호출 합니다."
  overload: System.Xml.XmlEntity.CloneNode*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "엔터티 노드를 복제할 수 없습니다. 이 메서드를 호출는 <xref href=&quot;System.Xml.XmlEntity&quot;> </xref> 예외를 throw 하는 개체입니다."
  platform:
  - net462
- uid: System.Xml.XmlEntity.InnerText
  id: InnerText
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: InnerText
  nameWithType: XmlEntity.InnerText
  fullName: System.Xml.XmlEntity.InnerText
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "엔터티 노드와 모든 자식의 연결된 된 값을 가져옵니다."
  remarks: "`XmlEntity`노드는 읽기 전용입니다. 이 속성을 설정 예외가 throw 됩니다.       이 속성은 문서 개체 모델 (DOM)에 Microsoft 확장입니다."
  syntax:
    content: public override string InnerText { get; set; }
    return:
      type: System.String
      description: "노드와 모든 자식의 연결 된 값."
  overload: System.Xml.XmlEntity.InnerText*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "속성을 설정 하려고 합니다."
  platform:
  - net462
- uid: System.Xml.XmlEntity.InnerXml
  id: InnerXml
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: InnerXml
  nameWithType: XmlEntity.InnerXml
  fullName: System.Xml.XmlEntity.InnerXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "이 노드의 자식을 나타내는 태그를 가져옵니다."
  remarks: "`XmlEntity`노드는 읽기 전용입니다. 이 속성을 설정 예외가 throw 됩니다.       이 속성은 문서 개체 모델 (DOM)에 Microsoft 확장입니다."
  syntax:
    content: public override string InnerXml { get; set; }
    return:
      type: System.String
      description: "에 대 한 <xref uid=&quot;langword_csharp_XmlEntity&quot; name=&quot;XmlEntity&quot; href=&quot;&quot;> </xref> 노드 String.Empty를 반환 됩니다."
  overload: System.Xml.XmlEntity.InnerXml*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "속성을 설정 하려고 합니다."
  platform:
  - net462
- uid: System.Xml.XmlEntity.IsReadOnly
  id: IsReadOnly
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: XmlEntity.IsReadOnly
  fullName: System.Xml.XmlEntity.IsReadOnly
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "노드가 읽기 전용인 지 여부를 나타내는 값을 가져옵니다."
  remarks: "읽기 전용 노드는 해당 속성, 특성 또는 자식 항목을 변경할 수 없습니다. 트리에서 읽기 전용 노드를 해제 하 고 다른 위치에 삽입 합니다."
  syntax:
    content: public override bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>노드가 읽기 전용 이면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다.       때문에 <xref uid=&quot;langword_csharp_XmlEntity&quot; name=&quot;XmlEntity&quot; href=&quot;&quot;> </xref> 노드는 읽기 전용,이 속성은 항상 반환 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xml.XmlEntity.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.LocalName
  id: LocalName
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: LocalName
  nameWithType: XmlEntity.LocalName
  fullName: System.Xml.XmlEntity.LocalName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "네임 스페이스 접두사 없이 노드의 이름을 가져옵니다."
  syntax:
    content: public override string LocalName { get; }
    return:
      type: System.String
      description: "에 대 한 <xref uid=&quot;langword_csharp_XmlEntity&quot; name=&quot;XmlEntity&quot; href=&quot;&quot;> </xref> 노드의 경우,이 속성이 엔터티의 이름을 반환 합니다."
  overload: System.Xml.XmlEntity.LocalName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.Name
  id: Name
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: Name
  nameWithType: XmlEntity.Name
  fullName: System.Xml.XmlEntity.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "노드의 이름을 가져옵니다."
  remarks: ''
  example:
  - "The following example displays information on the entities declared in the XML document.  \n  \n [!code-cs[XmlEntity#1](~/add/codesnippet/csharp/p-system.xml.xmlentity.n_2_1.cs)]\n [!code-cpp[XmlEntity#1](~/add/codesnippet/cpp/p-system.xml.xmlentity.n_2_1.cpp)]\n [!code-vb[XmlEntity#1](~/add/codesnippet/visualbasic/p-system.xml.xmlentity.n_2_1.vb)]  \n  \n The example uses the file `doment.xml` as input.  \n  \n [!code-xml[XmlEntity#2](~/add/codesnippet/xml/p-system.xml.xmlentity.n_2_2.xml)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "엔터티의 이름입니다."
  overload: System.Xml.XmlEntity.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.NodeType
  id: NodeType
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: NodeType
  nameWithType: XmlEntity.NodeType
  fullName: System.Xml.XmlEntity.NodeType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "노드의 형식을 가져옵니다."
  remarks: ''
  example:
  - "The following example displays information on the entities declared in the XML document.  \n  \n [!code-cs[XmlEntity#1](~/add/codesnippet/csharp/p-system.xml.xmlentity.n_1_1.cs)]\n [!code-cpp[XmlEntity#1](~/add/codesnippet/cpp/p-system.xml.xmlentity.n_1_1.cpp)]\n [!code-vb[XmlEntity#1](~/add/codesnippet/visualbasic/p-system.xml.xmlentity.n_1_1.vb)]  \n  \n The example uses the file `doment.xml` as input.  \n  \n [!code-xml[XmlEntity#2](~/add/codesnippet/xml/p-system.xml.xmlentity.n_1_2.xml)]"
  syntax:
    content: public override System.Xml.XmlNodeType NodeType { get; }
    return:
      type: System.Xml.XmlNodeType
      description: "노드 형식입니다. 에 대 한 <xref uid=&quot;langword_csharp_XmlEntity&quot; name=&quot;XmlEntity&quot; href=&quot;&quot;> </xref> 노드의 경우 값은 XmlNodeType.Entity 합니다."
  overload: System.Xml.XmlEntity.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.NotationName
  id: NotationName
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: NotationName
  nameWithType: XmlEntity.NotationName
  fullName: System.Xml.XmlEntity.NotationName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "엔터티 선언에서 선택적 NDATA 특성의 이름을 가져옵니다."
  remarks: ''
  example:
  - "The following example displays information on the entities declared in the XML document.  \n  \n [!code-cs[XmlEntity#1](~/add/codesnippet/csharp/p-system.xml.xmlentity.n_0_1.cs)]\n [!code-cpp[XmlEntity#1](~/add/codesnippet/cpp/p-system.xml.xmlentity.n_0_1.cpp)]\n [!code-vb[XmlEntity#1](~/add/codesnippet/visualbasic/p-system.xml.xmlentity.n_0_1.vb)]  \n  \n The example uses the file, `doment.xml`, as input.  \n  \n [!code-xml[XmlEntity#2](~/add/codesnippet/xml/p-system.xml.xmlentity.n_0_2.xml)]"
  syntax:
    content: public string NotationName { get; }
    return:
      type: System.String
      description: "NDATA 특성의 이름입니다. 없는 NDATA 경우 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 반환 됩니다."
  overload: System.Xml.XmlEntity.NotationName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.OuterXml
  id: OuterXml
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: OuterXml
  nameWithType: XmlEntity.OuterXml
  fullName: System.Xml.XmlEntity.OuterXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "이 노드 및 모든 자식을 나타내는 태그를 가져옵니다."
  remarks: "이 속성은 문서 개체 모델 (DOM)에 Microsoft 확장입니다."
  syntax:
    content: public override string OuterXml { get; }
    return:
      type: System.String
      description: "에 대 한 <xref uid=&quot;langword_csharp_XmlEntity&quot; name=&quot;XmlEntity&quot; href=&quot;&quot;> </xref> 노드 String.Empty를 반환 됩니다."
  overload: System.Xml.XmlEntity.OuterXml*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.PublicId
  id: PublicId
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: PublicId
  nameWithType: XmlEntity.PublicId
  fullName: System.Xml.XmlEntity.PublicId
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "엔터티 선언에 공개 식별자의 값을 가져옵니다."
  remarks: ''
  example:
  - "The following example displays information on the entities declared in the XML document.  \n  \n [!code-cs[XmlEntity#1](~/add/codesnippet/csharp/p-system.xml.xmlentity.p_1.cs)]\n [!code-cpp[XmlEntity#1](~/add/codesnippet/cpp/p-system.xml.xmlentity.p_1.cpp)]\n [!code-vb[XmlEntity#1](~/add/codesnippet/visualbasic/p-system.xml.xmlentity.p_1.vb)]  \n  \n The example uses the file, `doment.xml`, as input.  \n  \n [!code-xml[XmlEntity#2](~/add/codesnippet/xml/p-system.xml.xmlentity.p_2.xml)]"
  syntax:
    content: public string PublicId { get; }
    return:
      type: System.String
      description: "엔터티에 대 한 공용 식별자입니다. 공용 식별자 없으면 경우 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 반환 됩니다."
  overload: System.Xml.XmlEntity.PublicId*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.SystemId
  id: SystemId
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: SystemId
  nameWithType: XmlEntity.SystemId
  fullName: System.Xml.XmlEntity.SystemId
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "엔터티 선언에서 시스템 식별자의 값을 가져옵니다."
  remarks: ''
  example:
  - "The following example displays information on the entities declared in the XML document.  \n  \n [!code-cs[XmlEntity#1](~/add/codesnippet/csharp/p-system.xml.xmlentity.s_1.cs)]\n [!code-cpp[XmlEntity#1](~/add/codesnippet/cpp/p-system.xml.xmlentity.s_1.cpp)]\n [!code-vb[XmlEntity#1](~/add/codesnippet/visualbasic/p-system.xml.xmlentity.s_1.vb)]  \n  \n The example uses the file `doment.xml` as input.  \n  \n [!code-xml[XmlEntity#2](~/add/codesnippet/xml/p-system.xml.xmlentity.s_2.xml)]"
  syntax:
    content: public string SystemId { get; }
    return:
      type: System.String
      description: "엔터티에 대 한 시스템 식별자입니다. 시스템 식별자 없으면 경우 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 반환 됩니다."
  overload: System.Xml.XmlEntity.SystemId*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)
  id: WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlEntity.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlEntity.WriteContentTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "노드의 모든 자식을 지정 <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> 저장 에 대 한 <xref uid=&quot;langword_csharp_XmlEntity&quot; name=&quot;XmlEntity&quot; href=&quot;&quot;> </xref> 노드,이 메서드는 영향을 주지 않습니다."
  remarks: "이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  syntax:
    content: public override void WriteContentTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> 를 저장 합니다."
  overload: System.Xml.XmlEntity.WriteContentTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: WriteTo(XmlWriter)
  nameWithType: XmlEntity.WriteTo(XmlWriter)
  fullName: System.Xml.XmlEntity.WriteTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "지정 된 <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> 노드를 저장합니다. 에 대 한 <xref uid=&quot;langword_csharp_XmlEntity&quot; name=&quot;XmlEntity&quot; href=&quot;&quot;> </xref> 노드,이 메서드는 영향을 주지 않습니다."
  remarks: "이 방법은 Microsoft 문서 개체 모델 (DOM)를 확장 합니다."
  syntax:
    content: public override void WriteTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> 를 저장 합니다."
  overload: System.Xml.XmlEntity.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Xml.XmlNode
  isExternal: false
  name: System.Xml.XmlNode
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Xml.XmlEntity.BaseURI
  parent: System.Xml.XmlEntity
  isExternal: false
  name: BaseURI
  nameWithType: XmlEntity.BaseURI
  fullName: System.Xml.XmlEntity.BaseURI
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlEntity.CloneNode(System.Boolean)
  parent: System.Xml.XmlEntity
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlEntity.CloneNode(Boolean)
  fullName: System.Xml.XmlEntity.CloneNode(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlEntity.InnerText
  parent: System.Xml.XmlEntity
  isExternal: false
  name: InnerText
  nameWithType: XmlEntity.InnerText
  fullName: System.Xml.XmlEntity.InnerText
- uid: System.Xml.XmlEntity.InnerXml
  parent: System.Xml.XmlEntity
  isExternal: false
  name: InnerXml
  nameWithType: XmlEntity.InnerXml
  fullName: System.Xml.XmlEntity.InnerXml
- uid: System.Xml.XmlEntity.IsReadOnly
  parent: System.Xml.XmlEntity
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlEntity.IsReadOnly
  fullName: System.Xml.XmlEntity.IsReadOnly
- uid: System.Xml.XmlEntity.LocalName
  parent: System.Xml.XmlEntity
  isExternal: false
  name: LocalName
  nameWithType: XmlEntity.LocalName
  fullName: System.Xml.XmlEntity.LocalName
- uid: System.Xml.XmlEntity.Name
  parent: System.Xml.XmlEntity
  isExternal: false
  name: Name
  nameWithType: XmlEntity.Name
  fullName: System.Xml.XmlEntity.Name
- uid: System.Xml.XmlEntity.NodeType
  parent: System.Xml.XmlEntity
  isExternal: false
  name: NodeType
  nameWithType: XmlEntity.NodeType
  fullName: System.Xml.XmlEntity.NodeType
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: true
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.XmlEntity.NotationName
  parent: System.Xml.XmlEntity
  isExternal: false
  name: NotationName
  nameWithType: XmlEntity.NotationName
  fullName: System.Xml.XmlEntity.NotationName
- uid: System.Xml.XmlEntity.OuterXml
  parent: System.Xml.XmlEntity
  isExternal: false
  name: OuterXml
  nameWithType: XmlEntity.OuterXml
  fullName: System.Xml.XmlEntity.OuterXml
- uid: System.Xml.XmlEntity.PublicId
  parent: System.Xml.XmlEntity
  isExternal: false
  name: PublicId
  nameWithType: XmlEntity.PublicId
  fullName: System.Xml.XmlEntity.PublicId
- uid: System.Xml.XmlEntity.SystemId
  parent: System.Xml.XmlEntity
  isExternal: false
  name: SystemId
  nameWithType: XmlEntity.SystemId
  fullName: System.Xml.XmlEntity.SystemId
- uid: System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlEntity
  isExternal: false
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlEntity.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlEntity.WriteContentTo(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlEntity
  isExternal: false
  name: WriteTo(XmlWriter)
  nameWithType: XmlEntity.WriteTo(XmlWriter)
  fullName: System.Xml.XmlEntity.WriteTo(XmlWriter)
- uid: System.Xml.XmlEntity.BaseURI*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: BaseURI
  nameWithType: XmlEntity.BaseURI
- uid: System.Xml.XmlEntity.CloneNode*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: CloneNode
  nameWithType: XmlEntity.CloneNode
- uid: System.Xml.XmlEntity.InnerText*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: InnerText
  nameWithType: XmlEntity.InnerText
- uid: System.Xml.XmlEntity.InnerXml*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: InnerXml
  nameWithType: XmlEntity.InnerXml
- uid: System.Xml.XmlEntity.IsReadOnly*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlEntity.IsReadOnly
- uid: System.Xml.XmlEntity.LocalName*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: LocalName
  nameWithType: XmlEntity.LocalName
- uid: System.Xml.XmlEntity.Name*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: Name
  nameWithType: XmlEntity.Name
- uid: System.Xml.XmlEntity.NodeType*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: NodeType
  nameWithType: XmlEntity.NodeType
- uid: System.Xml.XmlEntity.NotationName*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: NotationName
  nameWithType: XmlEntity.NotationName
- uid: System.Xml.XmlEntity.OuterXml*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: OuterXml
  nameWithType: XmlEntity.OuterXml
- uid: System.Xml.XmlEntity.PublicId*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: PublicId
  nameWithType: XmlEntity.PublicId
- uid: System.Xml.XmlEntity.SystemId*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: SystemId
  nameWithType: XmlEntity.SystemId
- uid: System.Xml.XmlEntity.WriteContentTo*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: WriteContentTo
  nameWithType: XmlEntity.WriteContentTo
- uid: System.Xml.XmlEntity.WriteTo*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: WriteTo
  nameWithType: XmlEntity.WriteTo
