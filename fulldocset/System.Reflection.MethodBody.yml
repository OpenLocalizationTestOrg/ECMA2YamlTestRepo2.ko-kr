### YamlMime:ManagedReference
items:
- uid: System.Reflection.MethodBody
  id: MethodBody
  children:
  - System.Reflection.MethodBody.#ctor
  - System.Reflection.MethodBody.ExceptionHandlingClauses
  - System.Reflection.MethodBody.GetILAsByteArray
  - System.Reflection.MethodBody.InitLocals
  - System.Reflection.MethodBody.LocalSignatureMetadataToken
  - System.Reflection.MethodBody.LocalVariables
  - System.Reflection.MethodBody.MaxStackSize
  langs:
  - csharp
  name: MethodBody
  nameWithType: MethodBody
  fullName: System.Reflection.MethodBody
  type: Class
  summary: "메서드의 본문에 대 한 메타 데이터와 MSIL에 대 한 액세스를 제공합니다."
  remarks: "MethodBody 클래스 Microsoft intermediate language (MSIL) 메서드 본문을 구성 하는 지역 변수 및 메서드 본문에서 예외 처리 절에 대 한 정보에 대 한 액세스를 제공 합니다.       와 같은 모듈 클래스의 토큰 확인 메서드를 사용할 수 <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, 및 <xref:System.Reflection.Module.ResolveType%2A>에 메서드 본문에서 토큰을 확인 하려면 <xref:System.Type>개체를 <xref:System.Reflection.MethodInfo>개체 및 <xref:System.Reflection.FieldInfo>형식, 메서드 및 필드 메서드 본문에서 MSIL에서 액세스 하는 방법에 대 한 자세한 정보를 제공 하는 개체.</xref:System.Reflection.FieldInfo> </xref:System.Reflection.MethodInfo> </xref:System.Type> </xref:System.Reflection.Module.ResolveType%2A> </xref:System.Reflection.Module.ResolveMethod%2A> </xref:System.Reflection.Module.ResolveType%2A>      > [!NOTE] > 메타 데이터 및 MSIL 명령 형식 완전히 이해 해야 메서드 본문을 구문 분석 합니다. 공용 언어 인프라 (CLI) 설명서의 &quot;II: 메타 데이터 정의 및 의미&quot; 및 &quot;III 파티션: CIL 명령 집합&quot;에 정보를 찾을 수 있습니다. 이 설명서는 온라인입니다. 참조 [ECMA C# 및 Common Language Infrastructure 표준](http://go.microsoft.com/fwlink/?LinkID=99212) msdn 및 [Standard ecma-335-인프라 CLI (공용 언어)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 웹 사이트에 있습니다.       지정 된 메서드의 MethodBody 개체를 가져오려면 먼저 가져옵니다는 <xref:System.Reflection.MethodInfo>개체는 메서드에 대 한 호출에서 <xref:System.Reflection.MethodInfo>개체의 <xref:System.Reflection.MethodBase.GetMethodBody%2A>메서드.</xref:System.Reflection.MethodBase.GetMethodBody%2A> </xref:System.Reflection.MethodInfo> </xref:System.Reflection.MethodInfo>"
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a MethodBody object for the test method.  \n  \n The example uses the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and then displays their types and index order. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n [!code-cpp[MethodBody#1](~/add/codesnippet/cpp/t-system.reflection.meth_1.cpp)]\n [!code-vb[MethodBody#1](~/add/codesnippet/visualbasic/t-system.reflection.meth_1.vb)]\n [!code-cs[MethodBody#1](~/add/codesnippet/csharp/t-system.reflection.meth_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class MethodBody
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.#ctor
  id: '#ctor'
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: MethodBody()
  nameWithType: MethodBody.MethodBody()
  fullName: System.Reflection.MethodBody.MethodBody()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Reflection.MethodBody&quot;> </xref> 클래스입니다."
  remarks: "생성 하는 동안이 생성자는 파생된 클래스에서 호출 <xref:System.Reflection.MethodBody>개체입니다.</xref:System.Reflection.MethodBody>"
  syntax:
    content: protected MethodBody ();
    parameters: []
  overload: System.Reflection.MethodBody.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses
  id: ExceptionHandlingClauses
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
  fullName: System.Reflection.MethodBody.ExceptionHandlingClauses
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "메서드 본문에서 예외 처리 절을 모두 포함 하는 목록을 가져옵니다."
  remarks: "메서드 본문에서 모든 try 블록에서 모든 절을 포함 하는 목록입니다. 각 <xref:System.Reflection.ExceptionHandlingClause>개체와 관련 된 try 블록을 식별 하는 정보가 포함 되어 있습니다.</xref:System.Reflection.ExceptionHandlingClause>      > [!NOTE] > 작업 예외 처리 절에는 메타 데이터와 MSIL 명령 형식 완전히 이해 해야 합니다. 공용 언어 인프라 (CLI) 설명서의 &quot;II: 메타 데이터 정의 및 의미&quot; 및 &quot;III 파티션: CIL 명령 집합&quot;에 정보를 찾을 수 있습니다. 이 설명서는 온라인입니다. 참조 [ECMA C# 및 Common Language Infrastructure 표준](http://go.microsoft.com/fwlink/?LinkID=99212) msdn 및 [Standard ecma-335-인프라 CLI (공용 언어)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 웹 사이트에 있습니다."
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays information about its exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The ExceptionHandlingClauses property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_2_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_2_1.cs)]  \n[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/p-system.reflection.meth_2_2.cpp)]\n[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_2.vb)]\n[!code-cs[MethodBody#4](~/add/codesnippet/csharp/p-system.reflection.meth_2_2.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_2_3.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_3.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_2_3.cs)]  \n[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/p-system.reflection.meth_2_4.cpp)]\n[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_4.vb)]\n[!code-cs[MethodBody#7](~/add/codesnippet/csharp/p-system.reflection.meth_2_4.cs)]"
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause> ExceptionHandlingClauses { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}
      description: "&lt;xref:System.Collections.Generic.IList%601&gt; 의 <xref href=&quot;System.Reflection.ExceptionHandlingClause&quot;> </xref> 메서드 본문에서 예외 처리 절을 나타내는 개체입니다."
  overload: System.Reflection.MethodBody.ExceptionHandlingClauses*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.GetILAsByteArray
  id: GetILAsByteArray
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: GetILAsByteArray()
  nameWithType: MethodBody.GetILAsByteArray()
  fullName: System.Reflection.MethodBody.GetILAsByteArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "메서드 본문에 대 한 MSIL 바이트의 배열로 반환합니다."
  remarks: "와 같은 모듈 클래스의 토큰 확인 메서드를 사용할 수 <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, 및 <xref:System.Reflection.Module.ResolveMember%2A>메서드 본문에서 토큰을 확인 하 <xref:System.Type>개체 <xref:System.Reflection.MethodInfo>개체 및 <xref:System.Reflection.FieldInfo>형식, 메서드 및 필드 메서드 본문에서 MSIL에서 액세스 하는 방법에 대 한 자세한 정보를 제공 하는 개체입니다.</xref:System.Reflection.FieldInfo> </xref:System.Reflection.MethodInfo> </xref:System.Type> </xref:System.Reflection.Module.ResolveMember%2A> </xref:System.Reflection.Module.ResolveMethod%2A> </xref:System.Reflection.Module.ResolveType%2A>      > [!NOTE] > 메타 데이터 및 MSIL 명령 형식 완전히 이해 해야 메서드 본문을 구문 분석 합니다. 공용 언어 인프라 (CLI) 설명서의 &quot;II: 메타 데이터 정의 및 의미&quot; 및 &quot;III 파티션: CIL 명령 집합&quot;에 정보를 찾을 수 있습니다. 이 설명서는 온라인입니다. 참조 [ECMA C# 및 Common Language Infrastructure 표준](http://go.microsoft.com/fwlink/?LinkID=99212) msdn 및 [Standard ecma-335-인프라 CLI (공용 언어)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 웹 사이트에 있습니다."
  syntax:
    content: public virtual byte[] GetILAsByteArray ();
    parameters: []
    return:
      type: System.Byte[]
      description: "형식의 배열 <xref:System.Byte>메서드 본문에 대 한 MSIL을 포함 하는.</xref:System.Byte>"
  overload: System.Reflection.MethodBody.GetILAsByteArray*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.InitLocals
  id: InitLocals
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: InitLocals
  nameWithType: MethodBody.InitLocals
  fullName: System.Reflection.MethodBody.InitLocals
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "메서드 본문에서 지역 변수를 해당 형식에 대 한 기본값으로 초기화 되는지 여부를 나타내는 값을 가져옵니다."
  remarks: "InitLocals 속성은 초기화 되지 않은 명시적으로; 변수 참조 와 같은 구문을 사용 하 여 선언 된 변수, 즉 `int x;` C# 또는 `Dim x As Integer` Visual Basic의 합니다.       참조 변수가 초기화 됩니다 `null` 기본적으로 합니다. 숫자 변수를&0;으로 초기화 됩니다."
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and InitLocals properties are displayed.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_3_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_3_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_3_1.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_3_2.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_3_2.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_3_2.cs)]"
  syntax:
    content: public virtual bool InitLocals { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>메서드 본문에 지역 변수를 초기화 하는 코드를 포함 하는 경우 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 값 형식에 대 한&0; 초기화 값 또는 참조 형식에 대해, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Reflection.MethodBody.InitLocals*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken
  id: LocalSignatureMetadataToken
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
  fullName: System.Reflection.MethodBody.LocalSignatureMetadataToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "메타 데이터에서 메서드에 대 한 지역 변수를 설명 하는 서명에 대 한 메타 데이터 토큰을 가져옵니다."
  remarks: "사용 하 여는 <xref:System.Reflection.MethodBody.LocalVariables%2A>속성 메서드의 로컬 변수에 대 한 정보를 얻을 수 있습니다.</xref:System.Reflection.MethodBody.LocalVariables%2A>      > [!NOTE] > 공용 언어 인프라 (CLI) 설명서의 &quot;II: 메타 데이터 정의 및 의미&quot;에 로컬 변수 서명에 대 한 정보를 찾을 수 있습니다. 이 설명서는 온라인입니다. 참조 [ECMA C# 및 Common Language Infrastructure 표준](http://go.microsoft.com/fwlink/?LinkID=99212) msdn 및 [Standard ecma-335-인프라 CLI (공용 언어)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 웹 사이트에 있습니다."
  syntax:
    content: public virtual int LocalSignatureMetadataToken { get; }
    return:
      type: System.Int32
      description: "메타 데이터 토큰을 나타내는 정수입니다."
  overload: System.Reflection.MethodBody.LocalSignatureMetadataToken*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.LocalVariables
  id: LocalVariables
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
  fullName: System.Reflection.MethodBody.LocalVariables
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "메서드 본문에 선언 된 지역 변수의 목록을 가져옵니다."
  remarks: "제공 하는 로컬 변수 서명에 대 한 메타 데이터 토큰 않아도 <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A>속성.</xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A>"
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The LocalVariables property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_0_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_0_1.cs)]  \n[!code-cpp[MethodBody#3](~/add/codesnippet/cpp/p-system.reflection.meth_0_2.cpp)]\n[!code-vb[MethodBody#3](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_2.vb)]\n[!code-cs[MethodBody#3](~/add/codesnippet/csharp/p-system.reflection.meth_0_2.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_0_3.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_3.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_0_3.cs)]  \n[!code-cpp[MethodBody#6](~/add/codesnippet/cpp/p-system.reflection.meth_0_4.cpp)]\n[!code-vb[MethodBody#6](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_4.vb)]\n[!code-cs[MethodBody#6](~/add/codesnippet/csharp/p-system.reflection.meth_0_4.cs)]"
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.LocalVariableInfo> LocalVariables { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}
      description: "&lt;xref:System.Collections.Generic.IList%601&gt; 의 <xref:System.Reflection.LocalVariableInfo>메서드 본문에 선언 된 지역 변수를 설명 하는 개체입니다.</xref:System.Reflection.LocalVariableInfo>"
  overload: System.Reflection.MethodBody.LocalVariables*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.MaxStackSize
  id: MaxStackSize
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
  fullName: System.Reflection.MethodBody.MaxStackSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "메서드를 실행 하는 경우에 피연산자 스택에 최대 항목 수를 가져옵니다."
  remarks: '자세한 내용은 &quot;II: 메타 데이터 정의 및 의미&quot; 및 &quot;III 파티션: CIL 명령 집합&quot; 인프라 CLI (공용 언어) 설명서를 참조 합니다. 이 설명서는 온라인입니다. 참조 [ECMA C# 및 Common Language Infrastructure 표준](http://go.microsoft.com/fwlink/?LinkID=99212) msdn 및 [Standard ecma-335-인프라 CLI (공용 언어)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 웹 사이트에 있습니다.'
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The MaxStackSize and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_1_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_1_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_1_1.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_1_2.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_1_2.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_1_2.cs)]"
  syntax:
    content: public virtual int MaxStackSize { get; }
    return:
      type: System.Int32
      description: "메서드를 실행 하는 경우 피연산자 스택에 항목의 최대 수입니다."
  overload: System.Reflection.MethodBody.MaxStackSize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.MethodBody.#ctor
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MethodBody()
  nameWithType: MethodBody.MethodBody()
  fullName: System.Reflection.MethodBody.MethodBody()
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses
  parent: System.Reflection.MethodBody
  isExternal: false
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
  fullName: System.Reflection.MethodBody.ExceptionHandlingClauses
- uid: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<ExceptionHandlingClause>
  nameWithType: IList<ExceptionHandlingClause>
  fullName: System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Reflection.ExceptionHandlingClause>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.ExceptionHandlingClause
    name: ExceptionHandlingClause
    nameWithType: ExceptionHandlingClause
    fullName: ExceptionHandlingClause
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MethodBody.GetILAsByteArray
  parent: System.Reflection.MethodBody
  isExternal: false
  name: GetILAsByteArray()
  nameWithType: MethodBody.GetILAsByteArray()
  fullName: System.Reflection.MethodBody.GetILAsByteArray()
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.MethodBody.InitLocals
  parent: System.Reflection.MethodBody
  isExternal: false
  name: InitLocals
  nameWithType: MethodBody.InitLocals
  fullName: System.Reflection.MethodBody.InitLocals
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
  fullName: System.Reflection.MethodBody.LocalSignatureMetadataToken
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.MethodBody.LocalVariables
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
  fullName: System.Reflection.MethodBody.LocalVariables
- uid: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<LocalVariableInfo>
  nameWithType: IList<LocalVariableInfo>
  fullName: System.Collections.Generic.IList<System.Reflection.LocalVariableInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Reflection.LocalVariableInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.LocalVariableInfo
    name: LocalVariableInfo
    nameWithType: LocalVariableInfo
    fullName: LocalVariableInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MethodBody.MaxStackSize
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
  fullName: System.Reflection.MethodBody.MaxStackSize
- uid: System.Reflection.MethodBody.#ctor*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MethodBody
  nameWithType: MethodBody.MethodBody
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
- uid: System.Reflection.MethodBody.GetILAsByteArray*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: GetILAsByteArray
  nameWithType: MethodBody.GetILAsByteArray
- uid: System.Reflection.MethodBody.InitLocals*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: InitLocals
  nameWithType: MethodBody.InitLocals
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
- uid: System.Reflection.MethodBody.LocalVariables*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
- uid: System.Reflection.MethodBody.MaxStackSize*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
