### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Information
  id: Information
  children:
  - Microsoft.VisualBasic.Information.Erl
  - Microsoft.VisualBasic.Information.Err
  - Microsoft.VisualBasic.Information.IsArray(System.Object)
  - Microsoft.VisualBasic.Information.IsDate(System.Object)
  - Microsoft.VisualBasic.Information.IsDBNull(System.Object)
  - Microsoft.VisualBasic.Information.IsError(System.Object)
  - Microsoft.VisualBasic.Information.IsNothing(System.Object)
  - Microsoft.VisualBasic.Information.IsNumeric(System.Object)
  - Microsoft.VisualBasic.Information.IsReference(System.Object)
  - Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)
  - Microsoft.VisualBasic.Information.QBColor(System.Int32)
  - Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Information.SystemTypeName(System.String)
  - Microsoft.VisualBasic.Information.TypeName(System.Object)
  - Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)
  - Microsoft.VisualBasic.Information.VarType(System.Object)
  - Microsoft.VisualBasic.Information.VbTypeName(System.String)
  langs:
  - csharp
  name: Information
  nameWithType: Information
  fullName: Microsoft.VisualBasic.Information
  type: Class
  summary: "<xref uid=&quot;langword_csharp_Information&quot; name=&quot;Information&quot; href=&quot;&quot;> </xref> 모듈에 반환할 테스트 또는 정보를 확인 하는 데 사용 하는 절차가 포함 되어 있습니다."
  remarks: "이 모듈은 Visual Basic 언어 키워드와 오류 정보를 제공, 데이터 유효성 검사, 배열 범위를 결정 및 데이터 형식 및 색 정보를 검색 하는 런타임 라이브러리 멤버를 지원 합니다."
  example:
  - "The following example uses the `VbTypeName` function to return data type names for several variables.  \n  \n```  \nDim sysDateName As String = \"System.DateTime\"  \nDim sysShortName As String = \"Int16\"  \nDim sysBadName As String = \"Nonsense\"  \nDim testVbName As String  \ntestVbName = VbTypeName(sysDateName)   \n' Returns \"Date\".  \ntestVbName = VbTypeName(sysShortName)   \n' Returns \"Short\".  \ntestVbName = VbTypeName(sysBadName)   \n' Returns Nothing.  \n```"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Information
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.Erl
  id: Erl
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: Erl()
  nameWithType: Information.Erl()
  fullName: Microsoft.VisualBasic.Information.Erl()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "마지막 실행 된 문의 줄 번호를 나타내는 정수를 반환 합니다. 읽기 전용입니다."
  remarks: "줄 번호 없음를 못한 경우 0을 반환 합니다."
  example:
  - "This example uses the `Erl` property to indicate the line number.  \n  \n [!code-vb[VbVbalrErrorHandling#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._209_1.vb)]"
  syntax:
    content: public static int Erl ();
    parameters: []
    return:
      type: System.Int32
      description: "마지막 실행 된 문의 줄 번호를 나타내는 정수를 반환 합니다. 읽기 전용입니다."
  overload: Microsoft.VisualBasic.Information.Erl*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.Err
  id: Err
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: Err()
  nameWithType: Information.Err()
  fullName: Microsoft.VisualBasic.Information.Err()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "런타임 오류에 대 한 정보를 포함합니다."
  remarks: "속성은 `Err` 개체가 오류가 생성자에 의해 설정 됩니다-Visual Basic, 개체 또는 프로그래머가 합니다.       런타임 오류가 발생할 때의 속성은 `Err` 오류를 고유 하 게 식별 하는 정보로 채워진 개체를 오류를 처리 하는 데 사용할 수 있는 합니다. 코드에서 런타임 오류를 생성 하려면 사용 된 `Raise` 메서드.       `Err` 개체의 속성을&0; 또는 빈 문자열 다시 설정 됩니다 (&quot;&quot;) 한 후는 `Exit Sub`, `Exit Function`, `Exit Property`, 또는 `Resume Next` 오류 처리 루틴 내에 문의 합니다. 모든 형태를 사용 하는 `Resume` 오류 처리 루틴 외부로 다시 설정 되지 것입니다는 `Err` 개체의 속성입니다. 사용할 수는 `Clear` 메서드를 명시적으로 다시 설정할 `Err`합니다.       사용 하 여는 `Raise` 메서드 보다는 `Error` 시스템 오류에 대 한 런타임 오류를 생성 하 고 클래스 모듈 문을 합니다. 사용할지 여부를 결정 하는 `Raise` 다른 코드에서 메서드 반환 하려는 정보의 양에 따라 다릅니다.       `Err` 개체는 글로벌 범위를 갖는 내장 개체입니다. 따라서 코드에 해당 형식의 인스턴스를 만들 필요가 없습니다."
  example:
  - "This example uses the properties of the `Err` object in constructing an error-message dialog box. Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.  \n  \n [!code-vb[VbVbalrErrorHandling#3](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._32_1.vb)]"
  syntax:
    content: public static Microsoft.VisualBasic.ErrObject Err ();
    parameters: []
    return:
      type: Microsoft.VisualBasic.ErrObject
      description: "런타임 오류에 대 한 정보를 포함합니다."
  overload: Microsoft.VisualBasic.Information.Err*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsArray(System.Object)
  id: IsArray(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsArray(Object)
  nameWithType: Information.IsArray(Object)
  fullName: Microsoft.VisualBasic.Information.IsArray(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 된 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 변수가 배열을 가리키는지 여부를 나타내는 값입니다."
  remarks: '`IsArray`반환 `True` 변수가 배열을 가리키는지; 그렇지 않으면 반환 `False`합니다. `IsArray`배열을 포함 하는 개체와 특히 유용 합니다.'
  example:
  - "This example uses the `IsArray` function to check if several variables refer to an array.  \n  \n [!code-vb[VbVbalrFunctions#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._76_1.vb)]"
  syntax:
    content: public static bool IsArray (object VarName);
    parameters:
    - id: VarName
      type: System.Object
      description: "필수 사항입니다. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>변수입니다."
    return:
      type: System.Boolean
      description: "반환 된 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 변수가 배열을 가리키는지 여부를 나타내는 값입니다."
  overload: Microsoft.VisualBasic.Information.IsArray*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsDate(System.Object)
  id: IsDate(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsDate(Object)
  nameWithType: Information.IsDate(Object)
  fullName: Microsoft.VisualBasic.Information.IsDate(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 된 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 식을 유효한 나타내는지 여부를 나타내는 값 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref> 값입니다."
  remarks: "`IsDate`반환 `True` 경우 `Expression` 입니다는 <xref:System.DateTime>데이터 입력 수에 변환 된 없으면, 반환 하거나 `False`.</xref:System.DateTime>       <xref:System.DateTime>데이터 형식은 날짜 값과 시간 값을 갖습니다.</xref:System.DateTime> `IsDate`반환 `True` 경우 `Expression` 유효한 날짜, 유효한 시간 또는 유효한 날짜 및 시간을 나타냅니다."
  example:
  - "The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.  \n  \n [!code-vb[VbVbalrFunctions#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._9_1.vb)]  \n  \n In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call."
  syntax:
    content: public static bool IsDate (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "필수 사항입니다. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>식입니다."
    return:
      type: System.Boolean
      description: "반환 된 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 식을 유효한 나타내는지 여부를 나타내는 값 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref> 값입니다."
  overload: Microsoft.VisualBasic.Information.IsDate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsDBNull(System.Object)
  id: IsDBNull(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsDBNull(Object)
  nameWithType: Information.IsDBNull(Object)
  fullName: Microsoft.VisualBasic.Information.IsDBNull(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 된 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 식으로 계산 될 수 있는지 여부를 나타내는 값의 <xref href=&quot;System.DBNull&quot;> </xref> 클래스입니다."
  remarks: "`IsDBNull`반환 `True` 의 데이터 형식이 `Expression` 로 평가 되는 <xref:System.DBNull>입력; 그렇지 않으면 `IsDBNull` 반환 `False`.</xref:System.DBNull>       <xref:System.DBNull?displayProperty=fullName>값 이면는 `Object` 없거나 존재 하지 않는 데이터를 나타냅니다.</xref:System.DBNull?displayProperty=fullName> `DBNull`와 동일 하지는 `Nothing`는 변수가 초기화 되지 않았음을 나타냅니다. `DBNull`또한 같지 않습니다 길이가&0; 인 문자열 (`&quot;&quot;`), null 문자열 참조 되는 경우에 따라 있는 합니다."
  example:
  - "This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.  \n  \n [!code-vb[VbVbalrFunctions#36](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._101_1.vb)]"
  syntax:
    content: public static bool IsDBNull (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "필수 사항입니다. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>식입니다."
    return:
      type: System.Boolean
      description: "반환 된 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 식으로 계산 될 수 있는지 여부를 나타내는 값의 <xref href=&quot;System.DBNull&quot;> </xref> 클래스입니다."
  overload: Microsoft.VisualBasic.Information.IsDBNull*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsError(System.Object)
  id: IsError(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsError(Object)
  nameWithType: Information.IsError(Object)
  fullName: Microsoft.VisualBasic.Information.IsError(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 된 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 식이 예외 유형 인지를 나타내는 값입니다."
  remarks: "`IsError`반환 `True` 식이 나타내는 경우는 `Object` 변수에서 파생 되는 <xref:System.Exception>클래스에 <xref:System>네임 스페이스.</xref:System> </xref:System.Exception>       파생 되는 예외 <xref:System.Exception?displayProperty=fullName>와 낼 수 있습니다는 `Try...Catch...Finally` 문.</xref:System.Exception?displayProperty=fullName>"
  example:
  - "The following example uses the `IsError` function to check if an expression represents a system exception.  \n  \n [!code-vb[VbVbalrFunctions#37](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._164_1.vb)]"
  syntax:
    content: public static bool IsError (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "필수 사항입니다. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>식입니다."
    return:
      type: System.Boolean
      description: "반환 된 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 식이 예외 유형 인지를 나타내는 값입니다."
  overload: Microsoft.VisualBasic.Information.IsError*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsNothing(System.Object)
  id: IsNothing(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsNothing(Object)
  nameWithType: Information.IsNothing(Object)
  fullName: Microsoft.VisualBasic.Information.IsNothing(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 된 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 식에 할당 된 개체가 있는지 여부를 나타내는 값입니다."
  remarks: "`IsNothing`반환 `True` 반환 하는 경우 식이 현재 개체에 할당 된, 그렇지 않으면 되지 않는 개체 변수를 나타내는, `False`합니다.       `IsNothing`참조 형식에서 작동 하는 데 사용 됩니다. 값 형식을의 값을 보유할 수 없습니다 및 할당 하는 경우 값이 기본값으로 되돌아갑니다 `Nothing` 에 있습니다. 에 값 형식을 제공 하는 경우 `Expression`, `IsNothing` 항상 반환 `False`합니다."
  example:
  - "The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.  \n  \n [!code-vb[VbVbalrFunctions#38](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._149_1.vb)]"
  syntax:
    content: public static bool IsNothing (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "필수 사항입니다. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>식입니다."
    return:
      type: System.Boolean
      description: "반환 된 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 식에 할당 된 개체가 있는지 여부를 나타내는 값입니다."
  overload: Microsoft.VisualBasic.Information.IsNothing*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsNumeric(System.Object)
  id: IsNumeric(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsNumeric(Object)
  nameWithType: Information.IsNumeric(Object)
  fullName: Microsoft.VisualBasic.Information.IsNumeric(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 된 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 숫자 식을 계산 될 수 있는지 여부를 나타내는 값입니다."
  remarks: "`IsNumeric`returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`. 또한 반환 `True` 경우 `Expression` 는 `Char`, `String`, 또는 `Object` 숫자로 성공적으로 변환할 수 있는 합니다. `Expression`숫자가 아닌 문자를 포함할 수 있습니다. `IsNumeric`반환 `True` 경우 `Expression` 유효한&16; 진수 또는&8; 진수 숫자를 포함 하는 문자열입니다. `IsNumeric`도 반환 `True` 경우 `Expression` 로 시작 하는 유효한 숫자 식에 포함 되어는 + 또는-문자 또는 쉼표를 포함 합니다.       `IsNumeric`반환 `False` 경우 `Expression` 데이터 형식의 `Date`합니다. 반환 `False` 경우 `Expression` 는 `Char`, `String`, 또는 `Object` 를 변환할 수 없는 성공적으로 숫자입니다."
  example:
  - "The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.  \n  \n [!code-vb[VbVbalrFunctions#39](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._137_1.vb)]"
  syntax:
    content: public static bool IsNumeric (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "필수 사항입니다. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>식입니다."
    return:
      type: System.Boolean
      description: "반환 된 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 숫자 식을 계산 될 수 있는지 여부를 나타내는 값입니다."
  overload: Microsoft.VisualBasic.Information.IsNumeric*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsReference(System.Object)
  id: IsReference(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsReference(Object)
  nameWithType: Information.IsReference(Object)
  fullName: Microsoft.VisualBasic.Information.IsReference(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 된 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 식이 참조 형식으로 계산 될 수 있는지 여부를 나타내는 값입니다."
  remarks: "`IsReference`반환 `True` 경우 `Expression` 클래스 인스턴스를 같은 참조 형식, 나타냅니다는 `String` 형식 또는 모든 형식의; 배열 그렇지 `False`합니다.       참조 형식이 다른 위치에서 메모리에 저장 된 데이터에 대 한 포인터를 포함 합니다. 값 형식 자체 데이터를 포함합니다."
  example:
  - "This example uses the `IsReference` function to check if several variables refer to reference types.  \n  \n [!code-vb[VbVbalrFunctions#40](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._142_1.vb)]  \n  \n In the preceding example, the first three calls to `IsReference` return `True`. The last call returns `False`, because `Integer` is a value type, not a reference type."
  syntax:
    content: public static bool IsReference (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "필수 사항입니다. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>식입니다."
    return:
      type: System.Boolean
      description: "반환 된 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> 식이 참조 형식으로 계산 될 수 있는지 여부를 나타내는 값입니다."
  overload: Microsoft.VisualBasic.Information.IsReference*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)
  id: LBound(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: LBound(Array,Int32)
  nameWithType: Information.LBound(Array,Int32)
  fullName: Microsoft.VisualBasic.Information.LBound(Array,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "지정된 된 배열 차원의 사용할 수 있는 최저 첨자를 반환합니다."
  remarks: "배열 첨자가 0에서 시작 하므로 모든 차원에 대해 사용할 수 있는 최저 첨자는 항상 0입니다.       다음 차원 배열에 대해 `LBound` 다음 표에 값을 반환 합니다.: ```vb#   Dim a(100, 5, 4) As Byte   ``` | LBound에 대 한 호출 | 반환 값 |   |--------------------|------------------|   | `LBound(a, 1)`|0|   | `LBound(a, 2)`|0|   | `LBound(a, 3)`|0|"
  example:
  - "The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.  \n  \n [!code-vb[VbVbalrFunctions#41](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._241_1.vb)]"
  syntax:
    content: public static int LBound (Array Array, int Rank = 1);
    parameters:
    - id: Array
      type: System.Array
      description: "필수 사항입니다. 모든 데이터 형식의 배열입니다. 차원의 사용 가능한 최저 첨자를 찾으려고 할 수 있는 배열입니다."
    - id: Rank
      type: System.Int32
      description: "선택 사항입니다. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 가능한 최저 첨자 반환할 차원입니다. 2 초에 대 한 첫 번째 차원에 대 한 1을 사용 하 여 등에입니다. 경우 `Rank` 는 생략 하면 1이 사용 됩니다."
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 지정된 된 차원에 대 한 첨자는 가장 낮은 값 포함할 수 있습니다. <xref uid=&quot;langword_csharp_LBound&quot; name=&quot;LBound&quot; href=&quot;&quot;></xref>항상 0을 반환 합니다 <code> Array </code> 예를 들어 길이가 0 인 문자열인 경우 요소가 없는 경우에 초기화 되었습니다. If <code>Array</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_LBound&quot; name=&quot;LBound&quot; href=&quot;&quot;></xref> throws an <xref:System.ArgumentNullException>.</xref:System.ArgumentNullException>"
  overload: Microsoft.VisualBasic.Information.LBound*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Array</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.RankException
    commentId: T:System.RankException
    description: "<code>Rank</code>1 보다 작으면 또는 <code>Rank</code> 의 순위 보다 크면 <code>Array</code>합니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.QBColor(System.Int32)
  id: QBColor(System.Int32)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: QBColor(Int32)
  nameWithType: Information.QBColor(Int32)
  fullName: Microsoft.VisualBasic.Information.QBColor(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 된 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 숫자 색을 지정 된 해당 RGB 색 코드를 나타내는 값입니다."
  remarks: "반환된 된 값 최하위 바이트 부터는 Visual Basic 언어에서 사용 하는 RGB 시스템의 적절 한 색을 설정 하는 데 빨강, 녹색 및 파랑 값을 지정 합니다.       `Color` 인수에 이러한 설정이 있습니다.      | 숫자 | 색 | 숫자 | 색 |   |------------|-----------|------------|-----------|   |&0; | 블랙 |&8; | 회색 |   |&1; | 파란색 |&9; | 연한 파랑 |   |&2; | 녹색 |&10; | 연한 녹색 |   |&3; | 녹청 |&11; | 밝은 녹청 |   |&4; | 빨간색 |&12; | 빨간색 연한 |   |&5; | 자홍 |&13; | 자홍 연한 |   |&6; | 노란색 |&14; | 연한 노랑 |   |&7; | 흰색 |&15; | 밝은 흰색 |"
  example:
  - "This example uses the `QBColor` function to change to the color indicated by `colorInteger`. `QBColor` accepts integer values between 0 and 15.  \n  \n [!code-vb[VbVbalrCatRef#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._29_1.vb)]"
  syntax:
    content: public static int QBColor (int Color);
    parameters:
    - id: Color
      type: System.Int32
      description: "필수 사항입니다. 0에서 15 사이의 정수입니다."
    return:
      type: System.Int32
      description: "반환 된 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 숫자 색을 지정 된 해당 RGB 색 코드를 나타내는 값입니다."
  overload: Microsoft.VisualBasic.Information.QBColor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Color</code>0에서 15 까지의 범위를 벗어납니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)
  id: RGB(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: RGB(Int32,Int32,Int32)
  nameWithType: Information.RGB(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.Information.RGB(Int32,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 된 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 빨간색, 녹색 및 파란색 구성 요소 집합에서 RGB 색상 값을 나타내는 값입니다."
  remarks: "색 사양을 사용할 수 있는 응용 프로그램 메서드 및 속성 사양이 RGB를 나타내는 숫자 색 값을 기대 합니다. RGB 색상 값 빨간색, 녹색 및 파란색 표시할 특정 색의 상대 강도 지정 합니다.       경우에 대 한 인수 값 `RGB` 255 보다 크면 255가 사용 됩니다.       다음 표에서 일부 표준 색과 포함 된 빨간색, 녹색 및 파랑 값을 나열 합니다.      | 색 | 빨간색 값 | 값을 녹색 | 값을 파랑 |   |-----------|---------------|-----------------|----------------|   | 블랙 |&0; |&0; |&0; |   | 파란색 |&0; |&0; |&255; |   | 녹색 |&0; |&255; |&0; |   | 녹청 |&0; |&255; |&255; |   | 빨간색 |&255; |&0; |&0; |   | 자홍 |&255; |&0; |&255; |   | 노란색 |&255; |&255; |&0; |   | 흰색 |&255; |&255; |&255; |"
  example:
  - "This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.  \n  \n [!code-vb[VbVbalrCatRef#18](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._89_1.vb)]"
  syntax:
    content: public static int RGB (int Red, int Green, int Blue);
    parameters:
    - id: Red
      type: System.Int32
      description: "필수 사항입니다. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>0 – 255 범위에는 빨간색의 농도 나타내는입니다."
    - id: Green
      type: System.Int32
      description: "필수 사항입니다. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>0 – 255 범위에 색의 녹색의 강도 나타내는입니다."
    - id: Blue
      type: System.Int32
      description: "필수 사항입니다. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>0 – 255 범위에 색의 파랑의 강도 나타내는입니다."
    return:
      type: System.Int32
      description: "반환 된 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 빨간색, 녹색 및 파란색 구성 요소 집합에서 RGB 색상 값을 나타내는 값입니다."
  overload: Microsoft.VisualBasic.Information.RGB*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Green</code><code>Blue</code>, 또는 <code>Red</code> 0부터 255 까지의 범위를 벗어납니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.SystemTypeName(System.String)
  id: SystemTypeName(System.String)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: SystemTypeName(String)
  nameWithType: Information.SystemTypeName(String)
  fullName: Microsoft.VisualBasic.Information.SystemTypeName(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 된 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 변수 시스템 데이터 형식 이름을 포함 하는 값입니다."
  remarks: '`SystemTypeName`정규화 된 공용 언어 런타임 (CLR) 형식 이름에 해당 하는 Visual Basic 형식 이름을 반환 합니다. 예를 들어 경우 `VbName` &quot;Date&quot; 포함 `SystemTypeName` &quot;System.DateTime&quot;를 반환 합니다. 경우 `SystemTypeName` 의 값을 인식 하지 않으므로 `VbName`, 반환 `Nothing` (문자열이 아니라 &quot;없음&quot;).'
  example:
  - "The following example uses the `SystemTypeName` function to return data type names for several variables.  \n  \n [!code-vb[VbVbalrFunctions#49](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._174_1.vb)]"
  syntax:
    content: public static string SystemTypeName (string VbName);
    parameters:
    - id: VbName
      type: System.String
      description: "필수 사항입니다. A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> Visual Basic 형식 이름을 포함 하는 변수입니다."
    return:
      type: System.String
      description: "반환 된 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 변수 시스템 데이터 형식 이름을 포함 하는 값입니다."
  overload: Microsoft.VisualBasic.Information.SystemTypeName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.TypeName(System.Object)
  id: TypeName(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: TypeName(Object)
  nameWithType: Information.TypeName(Object)
  fullName: Microsoft.VisualBasic.Information.TypeName(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 된 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 변수에 대 한 데이터 형식 정보를 포함 하는 값입니다."
  remarks: "다음 표는 `String` 반환한 값 `TypeName` 의 서로 다른 내용에 대 한 `VarName`합니다.      | `VarName` 내용을 | 반환 된 문자열 |   |------------------------|---------------------|   | 16 비트 `True` 또는 `False` 값 형식 | &quot; 부울 &quot;|   | 8 비트 이진 값 형식 | &quot; 바이트 &quot;|   | 16 비트 문자 값 형식 | &quot; 문자 &quot;|   | 64 비트 날짜 및 시간 값 형식 | &quot; 날짜 &quot;|   | 참조 누락 되었거나 존재 하지 않는 데이터를 나타내는 형식 | &quot; DBNull &quot;|   | 128 비트 고정 소수점 숫자 값 형식 | &quot; 10 진수 &quot;|   | 64 비트 부동 소수점 숫자 값 형식 | &quot; 이중 &quot;|   | 32 비트 정수 값 형식 | &quot; 정수 &quot;|   | 지정 되지 않은 개체를 가리키는 형식 참조 | &quot; 개체 &quot;|   | 참조 형식 클래스에서 지정 된 개체를 가리키는 *objectclass*| &quot; *objectclass*&quot;|   | 64 비트 정수 값 형식 | &quot; 긴 &quot;|   | 참조 형식에 현재 할당 된 개체가 있는 | &quot; Nothing &quot;|   | 8 비트 부호 있는 정수 값 형식 | &quot; SByte &quot;|   | 16 비트 정수 값 형식 | &quot; 짧은 &quot;|   | 32 비트 부동 소수점 숫자 값 형식 | &quot; 단일 &quot;|   | 16 비트 문자의 문자열을 가리키는 형식 참조 | &quot; 문자열 &quot;|   | 32 비트 부호 없는 정수 값 형식 | &quot; UInteger &quot;|   | 64 비트 부호 없는 정수 값 형식 | &quot; ULong &quot;|   | 16 비트 부호 없는 정수 값 형식 | &quot; UShort &quot;|       경우 `VarName` 은 배열, 반환 되는 문자열 앞의 표에 빈 괄호가 추가 된 문자열 중 하나가 될 수 있습니다. 예를 들어 경우 `VarName` 정수의 배열을 가리킵니다 `TypeName` &quot;필수적 요소&quot;를 반환 합니다.       때 `TypeName` 참조 형식의 이름을 반환 이름만 자체를 정규화 된 이름이 아니라, 클래스 등 반환 합니다. 예를 들어 경우 `VarName` 클래스의 개체를 가리키는 <xref:System.Drawing.Printing.PaperSource?displayProperty=fullName>, `TypeName` &quot;PaperSource&quot;를 반환 합니다.</xref:System.Drawing.Printing.PaperSource?displayProperty=fullName> 변수가 특정 클래스 형식으로 선언 하지만 개체가 할당, 없는 경우에 `TypeName` &quot;없음&quot;을 반환 합니다."
  example:
  - "The following example uses the `TypeName` function to return data type information about several variables.  \n  \n [!code-vb[VbVbalrFunctions#52](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._131_1.vb)]"
  syntax:
    content: public static string TypeName (object VarName);
    parameters:
    - id: VarName
      type: System.Object
      description: "필수 사항입니다. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>변수입니다. 경우 <xref uid=&quot;langword_csharp_Option Strict&quot; name=&quot;Option Strict&quot; href=&quot;&quot;> </xref> 은 <xref uid=&quot;langword_csharp_Off&quot; name=&quot;Off&quot; href=&quot;&quot;> </xref>, 구조를 제외한 모든 데이터 형식의 변수를 전달할 수 있습니다."
    return:
      type: System.String
      description: "반환 된 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 변수에 대 한 데이터 형식 정보를 포함 하는 값입니다."
  overload: Microsoft.VisualBasic.Information.TypeName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)
  id: UBound(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: UBound(Array,Int32)
  nameWithType: Information.UBound(Array,Int32)
  fullName: Microsoft.VisualBasic.Information.UBound(Array,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "지정된 된 차원의 배열에 대 한 사용 가능한 최고 첨자를 반환합니다."
  remarks: "Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.  \n  \n For an array with the following dimensions, `UBound` returns the values in the following table:  \n  \n```vb#  \nDim a(100, 5, 4) As Byte  \n```  \n  \n|Call to UBound|Return value|  \n|--------------------|------------------|  \n|`UBound(a, 1)`|100|  \n|`UBound(a, 2)`|5|  \n|`UBound(a, 3)`|4|  \n  \n You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0. The following example calculates the total size of the array `a` in the preceding example:  \n  \n```vb#  \nDim total As Integer  \ntotal = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  \n```  \n  \n The value calculated for `total` is 3030, which is 101 * 6 \\* 5."
  example:
  - "The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.  \n  \n [!code-vb[VbVbalrFunctions#53](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._136_1.vb)]"
  syntax:
    content: public static int UBound (Array Array, int Rank = 1);
    parameters:
    - id: Array
      type: System.Array
      description: "필수 사항입니다. 모든 데이터 형식의 배열입니다. 차원의 사용 가능한 최고 첨자를 찾으려고 할 수 있는 배열입니다."
    - id: Rank
      type: System.Int32
      description: "선택 사항입니다. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 가능한 최고 첨자 반환할 차원입니다. 2 초에 대 한 첫 번째 차원에 대 한 1을 사용 하 여 등에입니다. 경우 `Rank` 는 생략 하면 1이 사용 됩니다."
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 가장 높은 값 첨자 지정된 된 차원에 포함할 수 있습니다. 경우 <code> Array </code> 요소가 하나만 <xref uid=&quot;langword_csharp_UBound&quot; name=&quot;UBound&quot; href=&quot;&quot;> </xref> 0을 반환 합니다. 경우 <code> Array </code> 예를 들어 길이가&0; 인 문자열인 경우 요소가 없는 <xref uid=&quot;langword_csharp_UBound&quot; name=&quot;UBound&quot; href=&quot;&quot;> </xref> -1을 반환 합니다."
  overload: Microsoft.VisualBasic.Information.UBound*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Array</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.RankException
    commentId: T:System.RankException
    description: "<code>Rank</code>1 보다 작으면 또는 <code>Rank</code> 의 순위 보다 크면 <code>Array</code>합니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.VarType(System.Object)
  id: VarType(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: VarType(Object)
  nameWithType: Information.VarType(Object)
  fullName: Microsoft.VisualBasic.Information.VarType(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 된 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 변수의 데이터 형식을 분류를 포함 하는 값입니다."
  remarks: "반환 된 정수 값 `VarType` <xref:Microsoft.VisualBasic.VariantType>.</xref:Microsoft.VisualBasic.VariantType> 의 구성원       다음 표에서 반환 하는 값을 보여 줍니다. `VarType` 의 특수 한 경우에 대 한 `VarName`합니다.      | 데이터 형식으로 표시 `VarName`| 반환 된 값 `VarType`|   |----------------------------------------|---------------------------------|   | [Nothing](~/add/includes/ajax-current-ext-md.md)|`VariantType.Object`|   | <xref:System.DBNull>| `VariantType.Null`|   | 열거형 | Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)|   | 배열 | 배열 요소 형식은의 비트 OR 및 `VariantType.Array`|   | 배열의 배열 | 비트 OR `VariantType.Object` 및 `VariantType.Array`|   | 구조 (<xref:System.ValueType?displayProperty=fullName>) |`VariantType.UserDefinedType`|   | <xref:System.Exception>| `VariantType.Error`|   | 알 수 없는 | `VariantType.Object`|</xref:System.Exception></xref:System.ValueType?displayProperty=fullName></xref:System.DBNull>"
  example:
  - "The following example uses the `VarType` function to return data type classification information about several variables.  \n  \n [!code-vb[VbVbalrFunctions#55](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._179_1.vb)]"
  syntax:
    content: public static Microsoft.VisualBasic.VariantType VarType (object VarName);
    parameters:
    - id: VarName
      type: System.Object
      description: "필수 사항입니다. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>변수입니다. 경우 <xref uid=&quot;langword_csharp_Option Strict&quot; name=&quot;Option Strict&quot; href=&quot;&quot;> </xref> 은 <xref uid=&quot;langword_csharp_Off&quot; name=&quot;Off&quot; href=&quot;&quot;> </xref>, 구조를 제외한 모든 데이터 형식의 변수를 전달할 수 있습니다."
    return:
      type: Microsoft.VisualBasic.VariantType
      description: "반환 된 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 변수의 데이터 형식을 분류를 포함 하는 값입니다."
  overload: Microsoft.VisualBasic.Information.VarType*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.VbTypeName(System.String)
  id: VbTypeName(System.String)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: VbTypeName(String)
  nameWithType: Information.VbTypeName(String)
  fullName: Microsoft.VisualBasic.Information.VbTypeName(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 된 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 변수의 Visual Basic 데이터 형식 이름을 포함 하는 값입니다."
  remarks: "`VbTypeName`공용 언어 런타임 형식 이름에 해당 하는 Visual Basic 형식 이름을 반환 합니다. 예를 들어 경우 `UrtName` &quot;Int32&quot; 또는 &quot;System.Int32&quot; 포함 `VbTypeName` &quot;정수&quot;를 반환 합니다. 경우 `VbTypeName` 의 값을 인식 하지 않으므로 `UrtName`, 반환 `Nothing` (문자열이 아니라 &quot;없음&quot;).       에 형식 이름을 `UrtName` 예를 들어 <xref:System.Reflection.MemberInfo.Name%2A> <xref:System.Reflection.MemberInfo> <xref:System.Type>클래스</xref:System.Type> 의 배열</xref:System.Reflection.MemberInfo> 속성</xref:System.Reflection.MemberInfo.Name%2A> 에서 다양 한 소스에서 가져올 수 있습니다"
  example:
  - "The following example uses the `VbTypeName` function to return data type names for several variables.  \n  \n [!code-vb[VbVbalrFunctions#56](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._152_1.vb)]"
  syntax:
    content: public static string VbTypeName (string UrtName);
    parameters:
    - id: UrtName
      type: System.String
      description: "필수 사항입니다. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>공용 언어 런타임에서 사용 되는 형식 이름을 포함 하는 변수입니다."
    return:
      type: System.String
      description: "반환 된 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 변수의 Visual Basic 데이터 형식 이름을 포함 하는 값입니다."
  overload: Microsoft.VisualBasic.Information.VbTypeName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.RankException
  isExternal: true
  name: System.RankException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Microsoft.VisualBasic.Information.Erl
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: Erl()
  nameWithType: Information.Erl()
  fullName: Microsoft.VisualBasic.Information.Erl()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Information.Err
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: Err()
  nameWithType: Information.Err()
  fullName: Microsoft.VisualBasic.Information.Err()
- uid: Microsoft.VisualBasic.ErrObject
  parent: Microsoft.VisualBasic
  isExternal: false
  name: ErrObject
  nameWithType: ErrObject
  fullName: Microsoft.VisualBasic.ErrObject
- uid: Microsoft.VisualBasic.Information.IsArray(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsArray(Object)
  nameWithType: Information.IsArray(Object)
  fullName: Microsoft.VisualBasic.Information.IsArray(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Information.IsDate(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsDate(Object)
  nameWithType: Information.IsDate(Object)
  fullName: Microsoft.VisualBasic.Information.IsDate(Object)
- uid: Microsoft.VisualBasic.Information.IsDBNull(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsDBNull(Object)
  nameWithType: Information.IsDBNull(Object)
  fullName: Microsoft.VisualBasic.Information.IsDBNull(Object)
- uid: Microsoft.VisualBasic.Information.IsError(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsError(Object)
  nameWithType: Information.IsError(Object)
  fullName: Microsoft.VisualBasic.Information.IsError(Object)
- uid: Microsoft.VisualBasic.Information.IsNothing(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsNothing(Object)
  nameWithType: Information.IsNothing(Object)
  fullName: Microsoft.VisualBasic.Information.IsNothing(Object)
- uid: Microsoft.VisualBasic.Information.IsNumeric(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsNumeric(Object)
  nameWithType: Information.IsNumeric(Object)
  fullName: Microsoft.VisualBasic.Information.IsNumeric(Object)
- uid: Microsoft.VisualBasic.Information.IsReference(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsReference(Object)
  nameWithType: Information.IsReference(Object)
  fullName: Microsoft.VisualBasic.Information.IsReference(Object)
- uid: Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: LBound(Array,Int32)
  nameWithType: Information.LBound(Array,Int32)
  fullName: Microsoft.VisualBasic.Information.LBound(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Microsoft.VisualBasic.Information.QBColor(System.Int32)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: QBColor(Int32)
  nameWithType: Information.QBColor(Int32)
  fullName: Microsoft.VisualBasic.Information.QBColor(Int32)
- uid: Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: RGB(Int32,Int32,Int32)
  nameWithType: Information.RGB(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.Information.RGB(Int32,Int32,Int32)
- uid: Microsoft.VisualBasic.Information.SystemTypeName(System.String)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: SystemTypeName(String)
  nameWithType: Information.SystemTypeName(String)
  fullName: Microsoft.VisualBasic.Information.SystemTypeName(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Information.TypeName(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: TypeName(Object)
  nameWithType: Information.TypeName(Object)
  fullName: Microsoft.VisualBasic.Information.TypeName(Object)
- uid: Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: UBound(Array,Int32)
  nameWithType: Information.UBound(Array,Int32)
  fullName: Microsoft.VisualBasic.Information.UBound(Array,Int32)
- uid: Microsoft.VisualBasic.Information.VarType(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: VarType(Object)
  nameWithType: Information.VarType(Object)
  fullName: Microsoft.VisualBasic.Information.VarType(Object)
- uid: Microsoft.VisualBasic.VariantType
  parent: Microsoft.VisualBasic
  isExternal: false
  name: VariantType
  nameWithType: VariantType
  fullName: Microsoft.VisualBasic.VariantType
- uid: Microsoft.VisualBasic.Information.VbTypeName(System.String)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: VbTypeName(String)
  nameWithType: Information.VbTypeName(String)
  fullName: Microsoft.VisualBasic.Information.VbTypeName(String)
- uid: Microsoft.VisualBasic.Information.Erl*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: Erl
  nameWithType: Information.Erl
- uid: Microsoft.VisualBasic.Information.Err*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: Err
  nameWithType: Information.Err
- uid: Microsoft.VisualBasic.Information.IsArray*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsArray
  nameWithType: Information.IsArray
- uid: Microsoft.VisualBasic.Information.IsDate*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsDate
  nameWithType: Information.IsDate
- uid: Microsoft.VisualBasic.Information.IsDBNull*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsDBNull
  nameWithType: Information.IsDBNull
- uid: Microsoft.VisualBasic.Information.IsError*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsError
  nameWithType: Information.IsError
- uid: Microsoft.VisualBasic.Information.IsNothing*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsNothing
  nameWithType: Information.IsNothing
- uid: Microsoft.VisualBasic.Information.IsNumeric*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsNumeric
  nameWithType: Information.IsNumeric
- uid: Microsoft.VisualBasic.Information.IsReference*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsReference
  nameWithType: Information.IsReference
- uid: Microsoft.VisualBasic.Information.LBound*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: LBound
  nameWithType: Information.LBound
- uid: Microsoft.VisualBasic.Information.QBColor*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: QBColor
  nameWithType: Information.QBColor
- uid: Microsoft.VisualBasic.Information.RGB*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: RGB
  nameWithType: Information.RGB
- uid: Microsoft.VisualBasic.Information.SystemTypeName*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: SystemTypeName
  nameWithType: Information.SystemTypeName
- uid: Microsoft.VisualBasic.Information.TypeName*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: TypeName
  nameWithType: Information.TypeName
- uid: Microsoft.VisualBasic.Information.UBound*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: UBound
  nameWithType: Information.UBound
- uid: Microsoft.VisualBasic.Information.VarType*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: VarType
  nameWithType: Information.VarType
- uid: Microsoft.VisualBasic.Information.VbTypeName*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: VbTypeName
  nameWithType: Information.VbTypeName
