### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.FromBase64Transform
  id: FromBase64Transform
  children:
  - System.Security.Cryptography.FromBase64Transform.#ctor
  - System.Security.Cryptography.FromBase64Transform.#ctor(System.Security.Cryptography.FromBase64TransformMode)
  - System.Security.Cryptography.FromBase64Transform.CanReuseTransform
  - System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks
  - System.Security.Cryptography.FromBase64Transform.Clear
  - System.Security.Cryptography.FromBase64Transform.Dispose
  - System.Security.Cryptography.FromBase64Transform.Dispose(System.Boolean)
  - System.Security.Cryptography.FromBase64Transform.Finalize
  - System.Security.Cryptography.FromBase64Transform.InputBlockSize
  - System.Security.Cryptography.FromBase64Transform.OutputBlockSize
  - System.Security.Cryptography.FromBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: FromBase64Transform
  nameWithType: FromBase64Transform
  fullName: System.Security.Cryptography.FromBase64Transform
  type: Class
  summary: "변환 된 <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> base 64 로부터 합니다."
  remarks: "사용자는 양식 임의의 비트 시퀀스를 나타내는 base 64 콘텐츠 전송 인코딩 읽을 수 있습니다."
  example:
  - "The following example decodes a base 64-encoded file to an output text file.  \n  \n [!code-cpp[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/cpp/t-system.security.crypto_20_1.cpp)]\n [!code-vb[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_20_1.vb)]\n [!code-cs[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/csharp/t-system.security.crypto_20_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class FromBase64Transform : System.Security.Cryptography.ICryptoTransform
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICryptoTransform
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.FromBase64Transform.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: FromBase64Transform()
  nameWithType: FromBase64Transform.FromBase64Transform()
  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.FromBase64Transform&quot;> </xref> 클래스입니다."
  remarks: "기본 구성으로 공백은 무시 됩니다. 참조 <xref:System.Security.Cryptography.FromBase64TransformMode>자세한 내용을 보려면.</xref:System.Security.Cryptography.FromBase64TransformMode>"
  syntax:
    content: public FromBase64Transform ();
    parameters: []
  overload: System.Security.Cryptography.FromBase64Transform.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.FromBase64Transform.#ctor(System.Security.Cryptography.FromBase64TransformMode)
  id: '#ctor(System.Security.Cryptography.FromBase64TransformMode)'
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: FromBase64Transform(FromBase64TransformMode)
  nameWithType: FromBase64Transform.FromBase64Transform(FromBase64TransformMode)
  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform(FromBase64TransformMode)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.FromBase64Transform&quot;> </xref> 지정 된 변환 모드를 사용 하 여 클래스입니다."
  remarks: ''
  example:
  - "The following example decodes a base 64-encoded file to an output text file.  \n  \n [!code-cpp[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/cpp/6e8f7a21-5a5f-4a36-9e3b-_1.cpp)]\n [!code-vb[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/visualbasic/6e8f7a21-5a5f-4a36-9e3b-_1.vb)]\n [!code-cs[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/csharp/6e8f7a21-5a5f-4a36-9e3b-_1.cs)]"
  syntax:
    content: public FromBase64Transform (System.Security.Cryptography.FromBase64TransformMode whitespaces);
    parameters:
    - id: whitespaces
      type: System.Security.Cryptography.FromBase64TransformMode
      description: "중 하나는 <xref href=&quot;System.Security.Cryptography.FromBase64Transform&quot;> </xref> 값입니다."
  overload: System.Security.Cryptography.FromBase64Transform.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.FromBase64Transform.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: FromBase64Transform.CanReuseTransform
  fullName: System.Security.Cryptography.FromBase64Transform.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 변형을 다시 사용할 수 있는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public virtual bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.FromBase64Transform.CanReuseTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: FromBase64Transform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "여러 개의 블록을 변형할 수 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "현재 구현에서는 블록을 하나만 수 변환할 한 번에 있으므로이 속성은 항상 `false`합니다."
  syntax:
    content: public bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.FromBase64Transform.Clear
  id: Clear
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: Clear()
  nameWithType: FromBase64Transform.Clear()
  fullName: System.Security.Cryptography.FromBase64Transform.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Security.Cryptography.FromBase64Transform&quot;> </xref>합니다."
  remarks: "이 메서드는 간단한 <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.</xref:System.IDisposable.Dispose%2A?displayProperty=fullName> 호출       호출 `Dispose` 에서 사용 하는 리소스는 <xref:System.Security.Cryptography.FromBase64Transform>다른 용도에 다시 할당 됩니다.</xref:System.Security.Cryptography.FromBase64Transform> 에 대 한 자세한 내용은 `Dispose`, 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.FromBase64Transform.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.FromBase64Transform.Dispose
  id: Dispose
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: Dispose()
  nameWithType: FromBase64Transform.Dispose()
  fullName: System.Security.Cryptography.FromBase64Transform.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 인스턴스에서 사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Security.Cryptography.FromBase64Transform&quot;> </xref> 클래스입니다."
  remarks: "호출 `Dispose` <xref:System.Security.Cryptography.FromBase64Transform>.</xref:System.Security.Cryptography.FromBase64Transform> 를 사용 하 여 작업을 마쳤으면 `Dispose` 메서드는 <xref:System.Security.Cryptography.FromBase64Transform>불안정 한 상태가.</xref:System.Security.Cryptography.FromBase64Transform> 호출한 후 `Dispose`에 대 한 모든 참조를 해제 해야는 <xref:System.Security.Cryptography.FromBase64Transform>가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Security.Cryptography.FromBase64Transform>차지한.</xref:System.Security.Cryptography.FromBase64Transform> </xref:System.Security.Cryptography.FromBase64Transform>       자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md) 및 [Dispose 메서드를 구현](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > 항상 호출 `Dispose` <xref:System.Security.Cryptography.FromBase64Transform>.</xref:System.Security.Cryptography.FromBase64Transform> 에 대 한 마지막 참조를 해제 하기 전에 사용 중인 리소스가 가비지 수집기 호출할 때까지 해제 되지 것입니다 그렇지 않은 경우는 <xref:System.Security.Cryptography.FromBase64Transform>개체의 `Finalize` 메서드.</xref:System.Security.Cryptography.FromBase64Transform>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.FromBase64Transform.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.FromBase64Transform.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: FromBase64Transform.Dispose(Boolean)
  fullName: System.Security.Cryptography.FromBase64Transform.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Security.Cryptography.FromBase64Transform&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public `Dispose()` 메서드 및 `Finalize` 메서드. `Dispose()`보호 된 호출 `Dispose(Boolean)` 로 설정 disposing 매개 `true`합니다. `Finalize`호출 `Dispose` 삭제로 설정 된 `false`합니다.       경우는 `disposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Security.Cryptography.FromBase64Transform>참조.</xref:System.Security.Cryptography.FromBase64Transform> 이 메서드 호출에서 `Dispose()` 각 참조 된 개체의 메서드."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Security.Cryptography.FromBase64Transform.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.FromBase64Transform.Finalize
  id: Finalize
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: Finalize()
  nameWithType: FromBase64Transform.Finalize()
  fullName: System.Security.Cryptography.FromBase64Transform.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Security.Cryptography.FromBase64Transform&quot;> </xref>합니다."
  syntax:
    content: ~FromBase64Transform ();
    parameters: []
  overload: System.Security.Cryptography.FromBase64Transform.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.FromBase64Transform.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: FromBase64Transform.InputBlockSize
  fullName: System.Security.Cryptography.FromBase64Transform.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "입력된 블록 크기를 가져옵니다."
  remarks: "이 변환의 입력된 블록 크기는&1; 바이트입니다."
  syntax:
    content: public int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "입력된 데이터의 크기 (바이트)를 차단합니다."
  overload: System.Security.Cryptography.FromBase64Transform.InputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.FromBase64Transform.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: FromBase64Transform.OutputBlockSize
  fullName: System.Security.Cryptography.FromBase64Transform.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "출력 블록 크기를 가져옵니다."
  remarks: "이 변환에 대 한 출력 블록 크기는 3 바이트입니다."
  syntax:
    content: public int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "출력 데이터의 크기 (바이트)를 차단합니다."
  overload: System.Security.Cryptography.FromBase64Transform.OutputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.FromBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Base 64 로부터 입력된 바이트 배열의 지정된 된 영역으로 변환한 결과 출력 바이트 배열의 지정된 된 영역에 복사 합니다."
  remarks: ''
  example:
  - "The following example decrypts a base 64-encoded file to an output text file.  \n  \n [!code-cpp[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/cpp/89d8dcd5-d4bc-45bd-bddf-_1.cpp)]\n [!code-vb[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/visualbasic/89d8dcd5-d4bc-45bd-bddf-_1.vb)]\n [!code-cs[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/csharp/89d8dcd5-d4bc-45bd-bddf-_1.cs)]"
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "Base 64에서 계산할 입력입니다."
    - id: inputOffset
      type: System.Int32
      description: "데이터 사용을 시작할 입력된 바이트 배열의 오프셋입니다."
    - id: inputCount
      type: System.Int32
      description: "데이터로 사용할 입력된 바이트 배열의 바이트 수입니다."
    - id: outputBuffer
      type: System.Byte[]
      description: "결과 쓸 대상의 출력입니다."
    - id: outputOffset
      type: System.Int32
      description: "데이터 쓰기를 시작할 출력 바이트 배열의 오프셋입니다."
    return:
      type: System.Int32
      description: "쓴 바이트 수입니다."
  overload: System.Security.Cryptography.FromBase64Transform.TransformBlock*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "현재 <xref href=&quot;System.Security.Cryptography.FromBase64Transform&quot;> </xref> 개체가 이미 삭제 되었습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>inputCount</code>잘못 된 값을 사용합니다.       -또는- <code>inputBuffer</code> 에 잘못 된 오프셋 길이입니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>inputOffset</code>범위를 벗어났습니다. 이 매개 변수는 음수가 아닌 숫자가 필요합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>inputBuffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Base 64에서 지정 된 바이트 배열의 지정된 된 영역을 변환합니다."
  remarks: ''
  example:
  - "The following example decrypts a base 64-encoded file to an output text file.  \n  \n [!code-cpp[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/cpp/77c58bc9-6ff0-4b4a-ba5b-_1.cpp)]\n [!code-vb[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/visualbasic/77c58bc9-6ff0-4b4a-ba5b-_1.vb)]\n [!code-cs[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/csharp/77c58bc9-6ff0-4b4a-ba5b-_1.cs)]"
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "Base 64 로부터 변환할 입력입니다."
    - id: inputOffset
      type: System.Int32
      description: "데이터 사용을 시작할 바이트 배열의 오프셋입니다."
    - id: inputCount
      type: System.Int32
      description: "데이터로 사용할 바이트 배열의 바이트 수입니다."
    return:
      type: System.Byte[]
      description: "계산 된 변환 합니다."
  overload: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "현재 <xref href=&quot;System.Security.Cryptography.FromBase64Transform&quot;> </xref> 개체가 이미 삭제 되었습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>inputBuffer</code>오프셋된 길이가 잘못 되었습니다.       -또는- <code>inputCount</code> 에 잘못 된 값입니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>inputOffset</code>범위를 벗어났습니다. 이 매개 변수는 음수가 아닌 숫자가 필요합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>inputBuffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.FromBase64Transform.#ctor
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: FromBase64Transform()
  nameWithType: FromBase64Transform.FromBase64Transform()
  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform()
- uid: System.Security.Cryptography.FromBase64Transform.#ctor(System.Security.Cryptography.FromBase64TransformMode)
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: FromBase64Transform(FromBase64TransformMode)
  nameWithType: FromBase64Transform.FromBase64Transform(FromBase64TransformMode)
  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform(FromBase64TransformMode)
- uid: System.Security.Cryptography.FromBase64TransformMode
  parent: System.Security.Cryptography
  isExternal: false
  name: FromBase64TransformMode
  nameWithType: FromBase64TransformMode
  fullName: System.Security.Cryptography.FromBase64TransformMode
- uid: System.Security.Cryptography.FromBase64Transform.CanReuseTransform
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: CanReuseTransform
  nameWithType: FromBase64Transform.CanReuseTransform
  fullName: System.Security.Cryptography.FromBase64Transform.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: FromBase64Transform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.FromBase64Transform.Clear
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: Clear()
  nameWithType: FromBase64Transform.Clear()
  fullName: System.Security.Cryptography.FromBase64Transform.Clear()
- uid: System.Security.Cryptography.FromBase64Transform.Dispose
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: Dispose()
  nameWithType: FromBase64Transform.Dispose()
  fullName: System.Security.Cryptography.FromBase64Transform.Dispose()
- uid: System.Security.Cryptography.FromBase64Transform.Dispose(System.Boolean)
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: FromBase64Transform.Dispose(Boolean)
  fullName: System.Security.Cryptography.FromBase64Transform.Dispose(Boolean)
- uid: System.Security.Cryptography.FromBase64Transform.Finalize
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: Finalize()
  nameWithType: FromBase64Transform.Finalize()
  fullName: System.Security.Cryptography.FromBase64Transform.Finalize()
- uid: System.Security.Cryptography.FromBase64Transform.InputBlockSize
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: InputBlockSize
  nameWithType: FromBase64Transform.InputBlockSize
  fullName: System.Security.Cryptography.FromBase64Transform.InputBlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.FromBase64Transform.OutputBlockSize
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: OutputBlockSize
  nameWithType: FromBase64Transform.OutputBlockSize
  fullName: System.Security.Cryptography.FromBase64Transform.OutputBlockSize
- uid: System.Security.Cryptography.FromBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.FromBase64Transform.#ctor*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: FromBase64Transform
  nameWithType: FromBase64Transform.FromBase64Transform
- uid: System.Security.Cryptography.FromBase64Transform.CanReuseTransform*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: CanReuseTransform
  nameWithType: FromBase64Transform.CanReuseTransform
- uid: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: FromBase64Transform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.FromBase64Transform.Clear*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: Clear
  nameWithType: FromBase64Transform.Clear
- uid: System.Security.Cryptography.FromBase64Transform.Dispose*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: Dispose
  nameWithType: FromBase64Transform.Dispose
- uid: System.Security.Cryptography.FromBase64Transform.Finalize*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: Finalize
  nameWithType: FromBase64Transform.Finalize
- uid: System.Security.Cryptography.FromBase64Transform.InputBlockSize*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: InputBlockSize
  nameWithType: FromBase64Transform.InputBlockSize
- uid: System.Security.Cryptography.FromBase64Transform.OutputBlockSize*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: OutputBlockSize
  nameWithType: FromBase64Transform.OutputBlockSize
- uid: System.Security.Cryptography.FromBase64Transform.TransformBlock*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: TransformBlock
  nameWithType: FromBase64Transform.TransformBlock
- uid: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: TransformFinalBlock
  nameWithType: FromBase64Transform.TransformFinalBlock
