### YamlMime:ManagedReference
items:
- uid: System.Drawing.BufferedGraphics
  id: BufferedGraphics
  children:
  - System.Drawing.BufferedGraphics.Dispose
  - System.Drawing.BufferedGraphics.Finalize
  - System.Drawing.BufferedGraphics.Graphics
  - System.Drawing.BufferedGraphics.Render
  - System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)
  - System.Drawing.BufferedGraphics.Render(System.IntPtr)
  langs:
  - csharp
  name: BufferedGraphics
  nameWithType: BufferedGraphics
  fullName: System.Drawing.BufferedGraphics
  type: Class
  summary: "이중 버퍼링 그래픽 버퍼를 제공합니다."
  remarks: "BufferedGraphics 클래스를 사용 하면 해당 그래픽에 대 한 사용자 지정 이중 버퍼링을 구현할 수 있습니다. 버퍼에 쓸 출력 장치에 해당 콘텐츠를 렌더링 하는 데 사용할 수 있는 메서드를 제공 하는 그래픽 버퍼에 대 한 래퍼를 제공 합니다.       이중 버퍼링을 사용 하는 그래픽 줄이거나 깜빡임을 표시 화면을 그려서 발생 하는 제거할 수 있습니다. 이중 버퍼링을 사용 하면 업데이트 된 그래픽 먼저 메모리에 버퍼에 그려지고이 버퍼의 내용이 표시 된 화면의 일부 또는 전부에 신속 하 게 기록 다음 합니다. 표시 된 그래픽이 상대적으로 간단 하 게 덮어쓰는 일반적으로 줄이거나 없앨 수 깜빡임을 가끔씩 그래픽을 업데이트할 때 발생 하 합니다.      > [!NOTE] > 설정 하는 이중 버퍼링을 사용 하는 가장 간단한 방법은 <xref:System.Windows.Forms.ControlStyles>컨트롤 사용 하 여 컨트롤 스타일 플래그는 <xref:System.Windows.Forms.Control.SetStyle%2A>메서드.</xref:System.Windows.Forms.Control.SetStyle%2A> </xref:System.Windows.Forms.ControlStyles> 설정의 <xref:System.Windows.Forms.ControlStyles>컨트롤 추가 코드가 필요 없이 기본 그래픽 버퍼를 통해 컨트롤에 대 한 모든 그리기를 리디렉션할에 대 한 플래그를 지정 합니다.</xref:System.Windows.Forms.ControlStyles> 이 플래그가로 설정 되어 `true` 기본적으로 합니다.       BufferedGraphics 클래스도 작성 되어야 하며 public 생성자가 없습니다는 <xref:System.Drawing.BufferedGraphicsContext>사용 하 여 응용 프로그램 도메인에 대 한 해당 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>메서드.</xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> </xref:System.Drawing.BufferedGraphicsContext> 검색할 수 있습니다는 <xref:System.Drawing.BufferedGraphicsContext>정적에서은 현재 어플리케이션 도메인에 대 한 <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=fullName>속성.</xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=fullName> </xref:System.Drawing.BufferedGraphicsContext>       <xref:System.Drawing.BufferedGraphics.Graphics%2A>그래픽 버퍼에 그리기에 대 한 속성을 사용할 수 있습니다.</xref:System.Drawing.BufferedGraphics.Graphics%2A> 이 속성에 대 한 액세스를 제공는 <xref:System.Drawing.Graphics>이 BufferedGraphics 개체에 대해 할당 된 그래픽 버퍼에 그릴 수 있는 개체입니다.</xref:System.Drawing.Graphics>       <xref:System.Drawing.BufferedGraphics.Render%2A>메서드 화면으로 그래픽의 콘텐츠를 버퍼링 없는 인수 그리기를 지정 하면 버퍼를 할당할.</xref:System.Drawing.BufferedGraphics.Render%2A> 다른 오버 로드는 <xref:System.Drawing.BufferedGraphics.Render%2A>메서드를 사용 하면 지정할 수는 <xref:System.Drawing.Graphics>개체 또는 <xref:System.IntPtr>장치 컨텍스트를 그릴 그래픽 버퍼의 내용을를 가리키는 개체입니다.</xref:System.IntPtr> </xref:System.Drawing.Graphics> </xref:System.Drawing.BufferedGraphics.Render%2A>       이중 버퍼링 된 그래픽 그리기에 대 한 자세한 내용은 참조 [이중 버퍼링 그래픽](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates using a BufferedGraphics object to draw graphics using several types of buffering implementations. Clicking the form alternately starts and stops a timer that causes draw updates. The draw updates allow you to observe the effect of double buffering. Right-clicking the form cycles through the following drawing modes:  \n  \n-   Drawing directly to the <xref:System.Windows.Forms.Control.Handle%2A> for a <xref:System.Windows.Forms.Form>.  \n  \n-   Drawing by overriding the <xref:System.Windows.Forms.Form.OnPaint%2A> method using the <xref:System.Windows.Forms.ControlStyles> control style.  \n  \n-   Drawing by overriding the <xref:System.Windows.Forms.Form.OnPaint%2A> method for the form method without using the <xref:System.Windows.Forms.ControlStyles> control style.  \n  \n In each mode, text is drawn that identifies the current mode and describes the behavior that occurs when each mouse button is pressed.  \n  \n [!code-cpp[BufferedGraphicsExample#1](~/add/codesnippet/cpp/t-system.drawing.buffere_1_1.cpp)]\n [!code-cs[BufferedGraphicsExample#1](~/add/codesnippet/csharp/t-system.drawing.buffere_1_1.cs)]\n [!code-vb[BufferedGraphicsExample#1](~/add/codesnippet/visualbasic/t-system.drawing.buffere_1_1.vb)]"
  syntax:
    content: 'public sealed class BufferedGraphics : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphics.Dispose
  id: Dispose
  parent: System.Drawing.BufferedGraphics
  langs:
  - csharp
  name: Dispose()
  nameWithType: BufferedGraphics.Dispose()
  fullName: System.Drawing.BufferedGraphics.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Drawing.BufferedGraphics&quot;> </xref> 개체입니다."
  remarks: "완료 했으면 Dispose를 호출 합니다. 사용 하는 <xref:System.Drawing.BufferedGraphics>개체입니다.</xref:System.Drawing.BufferedGraphics> Dispose 메서드는 <xref:System.Drawing.BufferedGraphics>불안정 한 상태가 개체입니다.</xref:System.Drawing.BufferedGraphics> Dispose를 호출한 후에 대 한 모든 참조를 해제 해야는 <xref:System.Drawing.BufferedGraphics>개체는 가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Drawing.BufferedGraphics>개체 차지한.</xref:System.Drawing.BufferedGraphics> </xref:System.Drawing.BufferedGraphics> 자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md) 및 [Dispose 메서드를 구현](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > 항상 호출 Dispose에 대 한 마지막 참조를 해제 하기 전에 <xref:System.Drawing.BufferedGraphics>개체입니다.</xref:System.Drawing.BufferedGraphics> 사용 중인 리소스가 가비지 수집기 호출할 때까지 해제 되지 것입니다 그렇지 않은 경우는 <xref:System.Drawing.BufferedGraphics>개체의 `Finalize` 메서드.</xref:System.Drawing.BufferedGraphics>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.BufferedGraphics.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphics.Finalize
  id: Finalize
  parent: System.Drawing.BufferedGraphics
  langs:
  - csharp
  name: Finalize()
  nameWithType: BufferedGraphics.Finalize()
  fullName: System.Drawing.BufferedGraphics.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "개체가를 리소스를 해제 하 고 가비지 수집에서 회수 하기 전에 다른 정리 작업을 수행할 수 있습니다."
  syntax:
    content: ~BufferedGraphics ();
    parameters: []
  overload: System.Drawing.BufferedGraphics.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphics.Graphics
  id: Graphics
  parent: System.Drawing.BufferedGraphics
  langs:
  - csharp
  name: Graphics
  nameWithType: BufferedGraphics.Graphics
  fullName: System.Drawing.BufferedGraphics.Graphics
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "가져옵니다는 <xref href=&quot;System.Drawing.Graphics&quot;> </xref> 그래픽 버퍼에 출력 하는 개체입니다."
  remarks: "이 속성은 제공 된 <xref:System.Drawing.Graphics>이 할당 된 그래픽 버퍼에 그릴 수 있는 개체 <xref:System.Drawing.BufferedGraphics>개체입니다.</xref:System.Drawing.BufferedGraphics> </xref:System.Drawing.Graphics>"
  syntax:
    content: public System.Drawing.Graphics Graphics { get; }
    return:
      type: System.Drawing.Graphics
      description: "A <xref href=&quot;System.Drawing.Graphics&quot;> </xref> 그래픽 버퍼에 출력 하는 개체입니다."
  overload: System.Drawing.BufferedGraphics.Graphics*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphics.Render
  id: Render
  parent: System.Drawing.BufferedGraphics
  langs:
  - csharp
  name: Render()
  nameWithType: BufferedGraphics.Render()
  fullName: System.Drawing.BufferedGraphics.Render()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "그래픽 버퍼의 내용을 기본 장치에 씁니다."
  remarks: "이 메서드를 호출 하 여 지정 된 장치를 그래픽 버퍼의 내용을 작성는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>의 메서드는 <xref:System.Drawing.BufferedGraphicsContext>만드는 데 사용한 <xref:System.Drawing.BufferedGraphics>개체입니다.</xref:System.Drawing.BufferedGraphics> </xref:System.Drawing.BufferedGraphicsContext> </xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>"
  syntax:
    content: public void Render ();
    parameters: []
  overload: System.Drawing.BufferedGraphics.Render*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)
  id: Render(System.Drawing.Graphics)
  parent: System.Drawing.BufferedGraphics
  langs:
  - csharp
  name: Render(Graphics)
  nameWithType: BufferedGraphics.Render(Graphics)
  fullName: System.Drawing.BufferedGraphics.Render(Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "지정 된 그래픽 버퍼의 내용을 씁니다 <xref href=&quot;System.Drawing.Graphics&quot;> </xref> 개체입니다."
  remarks: "이 메서드를 지정 된 그래픽 버퍼의 내용을 씁니다 <xref:System.Drawing.Graphics>개체입니다.</xref:System.Drawing.Graphics>"
  example:
  - "The following code example demonstrates rendering the contents of the graphics buffer to a specified <xref:System.Drawing.Graphics> object. This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.  \n  \n [!code-cs[BufferingExamples#5](~/add/codesnippet/csharp/m-system.drawing.buffere_1_1.cs)]\n [!code-cpp[BufferingExamples#5](~/add/codesnippet/cpp/m-system.drawing.buffere_1_1.cpp)]\n [!code-vb[BufferingExamples#5](~/add/codesnippet/visualbasic/m-system.drawing.buffere_1_1.vb)]"
  syntax:
    content: public void Render (System.Drawing.Graphics target);
    parameters:
    - id: target
      type: System.Drawing.Graphics
      description: "A <xref href=&quot;System.Drawing.Graphics&quot;> </xref> 그래픽 버퍼의 내용을 쓸 대상 개체입니다."
  overload: System.Drawing.BufferedGraphics.Render*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphics.Render(System.IntPtr)
  id: Render(System.IntPtr)
  parent: System.Drawing.BufferedGraphics
  langs:
  - csharp
  name: Render(IntPtr)
  nameWithType: BufferedGraphics.Render(IntPtr)
  fullName: System.Drawing.BufferedGraphics.Render(IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "그래픽 버퍼의 내용을 지정 된 연결 된 장치 컨텍스트에 씁니다 <xref:System.IntPtr>처리 합니다.</xref:System.IntPtr>"
  remarks: "이 메서드는 지정 된 연결 된 장치 컨텍스트에 그래픽 버퍼의 내용을 씁니다 <xref:System.IntPtr>처리 합니다.</xref:System.IntPtr>"
  example:
  - "The following code example demonstrates how to render the contents of the graphics buffer `grafx` to a specified device context. This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.  \n  \n [!code-cs[BufferingExamples#6](~/add/codesnippet/csharp/m-system.drawing.buffere_0_1.cs)]\n [!code-cpp[BufferingExamples#6](~/add/codesnippet/cpp/m-system.drawing.buffere_0_1.cpp)]\n [!code-vb[BufferingExamples#6](~/add/codesnippet/visualbasic/m-system.drawing.buffere_0_1.vb)]"
  syntax:
    content: public void Render (IntPtr targetDC);
    parameters:
    - id: targetDC
      type: System.IntPtr
      description: "<xref:System.IntPtr>그래픽 버퍼의 내용을 쓸 대상 장치 컨텍스트를 가리키는.</xref:System.IntPtr>"
  overload: System.Drawing.BufferedGraphics.Render*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Drawing.BufferedGraphics.Dispose
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Dispose()
  nameWithType: BufferedGraphics.Dispose()
  fullName: System.Drawing.BufferedGraphics.Dispose()
- uid: System.Drawing.BufferedGraphics.Finalize
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Finalize()
  nameWithType: BufferedGraphics.Finalize()
  fullName: System.Drawing.BufferedGraphics.Finalize()
- uid: System.Drawing.BufferedGraphics.Graphics
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Graphics
  nameWithType: BufferedGraphics.Graphics
  fullName: System.Drawing.BufferedGraphics.Graphics
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.BufferedGraphics.Render
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Render()
  nameWithType: BufferedGraphics.Render()
  fullName: System.Drawing.BufferedGraphics.Render()
- uid: System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Render(Graphics)
  nameWithType: BufferedGraphics.Render(Graphics)
  fullName: System.Drawing.BufferedGraphics.Render(Graphics)
- uid: System.Drawing.BufferedGraphics.Render(System.IntPtr)
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Render(IntPtr)
  nameWithType: BufferedGraphics.Render(IntPtr)
  fullName: System.Drawing.BufferedGraphics.Render(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Drawing.BufferedGraphics.Dispose*
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Dispose
  nameWithType: BufferedGraphics.Dispose
- uid: System.Drawing.BufferedGraphics.Finalize*
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Finalize
  nameWithType: BufferedGraphics.Finalize
- uid: System.Drawing.BufferedGraphics.Graphics*
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Graphics
  nameWithType: BufferedGraphics.Graphics
- uid: System.Drawing.BufferedGraphics.Render*
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Render
  nameWithType: BufferedGraphics.Render
