### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyEventArgs
  id: KeyEventArgs
  children:
  - System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)
  - System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  - System.Windows.Input.KeyEventArgs.ImeProcessedKey
  - System.Windows.Input.KeyEventArgs.InputSource
  - System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  - System.Windows.Input.KeyEventArgs.IsDown
  - System.Windows.Input.KeyEventArgs.IsRepeat
  - System.Windows.Input.KeyEventArgs.IsToggled
  - System.Windows.Input.KeyEventArgs.IsUp
  - System.Windows.Input.KeyEventArgs.Key
  - System.Windows.Input.KeyEventArgs.KeyStates
  - System.Windows.Input.KeyEventArgs.SystemKey
  langs:
  - csharp
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Input.KeyEventArgs
  type: Class
  summary: "에 대 한 데이터를 제공는 <xref href=&quot;System.Windows.UIElement.KeyUp&quot;> </xref> 및 <xref href=&quot;System.Windows.UIElement.KeyDown&quot;> </xref> 라우트된 이벤트를와 연결 된 관련으로 미리 보기 이벤트입니다."
  remarks: "이 이벤트 데이터 클래스는 다음 연결 된 이벤트와 함께 사용:- <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>- <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>- <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>- <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>이 이벤트 데이터 클래스는 기본 요소에서 다음과 같은 라우트된 이벤트에 사용할 수도 있습니다.</xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> </xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> </xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> </xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> 일반 요소 모델에 쉽게 액세스할 수 있도록 앞에 나열 된 연결 된 이벤트를 전달 하는 이러한 라우트된 이벤트의 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]합니다.      - <xref:System.Windows.UIElement.KeyUp?displayProperty=fullName>- <xref:System.Windows.UIElement.KeyDown?displayProperty=fullName>- <xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=fullName>- <xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=fullName>- <xref:System.Windows.ContentElement.KeyUp?displayProperty=fullName>- <xref:System.Windows.ContentElement.KeyDown?displayProperty=fullName>- <xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=fullName>- <xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=fullName>연결 된 이벤트와 기본 요소의 라우트된 이벤트의 이벤트 데이터를 공유 하 고 버블링 터널링 라우트된 이벤트의 버전 및 이벤트 데이터를 공유할 수도 있습니다.</xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=fullName> </xref:System.Windows.ContentElement.KeyDown?displayProperty=fullName> </xref:System.Windows.ContentElement.KeyUp?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=fullName> </xref:System.Windows.UIElement.KeyDown?displayProperty=fullName> </xref:System.Windows.UIElement.KeyUp?displayProperty=fullName> 이 경로 따라 이동할 때 이벤트의 처리 된 특성에 영향을 줄 수 있습니다. 자세한 내용은 참조 [입력 개요](~/add/includes/ajax-current-ext-md.md)합니다.       키를 시작 하 고 전환 된 상태 또는 눌러진 모두도 가능 및 상태를 설정/해제 합니다. 이러한 이유로, 키가 놓여 또는 하위 검사로 간단 하지 않습니다. 결정 하는 <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A>값을 숫자 값으로.</xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> 대신 플래그 열거형을 처리 하 여 값을 확인 해야 합니다. 사용 하 여 프로그램 `AND` 첫 번째 비트의 비교 합니다. 또는 속성 도우미를 사용 하 여 <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, 및 <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A>형식이 확인 하려면 여부 지정된 된 키를, 아래쪽, 또는 고쳐져.</xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> </xref:System.Windows.Input.KeyEventArgs.IsDown%2A> </xref:System.Windows.Input.KeyEventArgs.IsUp%2A>"
  syntax:
    content: 'public class KeyEventArgs : System.Windows.Input.KeyboardEventArgs'
  inheritance:
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  - System.Windows.Input.InputEventArgs
  - System.Windows.Input.KeyboardEventArgs
  implements: []
  inheritedMembers:
  - System.Windows.Input.InputEventArgs.Device
  - System.Windows.Input.InputEventArgs.Timestamp
  - System.Windows.Input.KeyboardEventArgs.KeyboardDevice
  - System.Windows.RoutedEventArgs.Handled
  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.Windows.RoutedEventArgs.RoutedEvent
  - System.Windows.RoutedEventArgs.Source
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)
  id: '#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)'
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  nameWithType: KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  fullName: System.Windows.Input.KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> 클래스입니다."
  syntax:
    content: public KeyEventArgs (System.Windows.Input.KeyboardDevice keyboard, System.Windows.PresentationSource inputSource, int timestamp, System.Windows.Input.Key key);
    parameters:
    - id: keyboard
      type: System.Windows.Input.KeyboardDevice
      description: "이 이벤트와 연결 된 논리 키보드 장치입니다."
    - id: inputSource
      type: System.Windows.PresentationSource
      description: "입력된 원본입니다."
    - id: timestamp
      type: System.Int32
      description: "입력이 발생 한 시간입니다."
    - id: key
      type: System.Windows.Input.Key
      description: "이벤트에서 참조 하는 키입니다."
  overload: System.Windows.Input.KeyEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  id: DeadCharProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: DeadCharProcessedKey
  nameWithType: KeyEventArgs.DeadCharProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "키를 조합 된 단일 문자를 만들기 위해 데드 키 컴퍼지션의 일부를 가져옵니다."
  remarks: "데드 키를 누르면 하면 보이지 않는 문자를 생성 합니다. 하지만 다음 문자 키를 누르면 의해 생성 된 문자와 함께 사용 하도록 키 임을 나타냅니다.  경우 <xref:System.Windows.Input.KeyEventArgs.Key%2A>반환 <xref:System.Windows.Input.Key?displayProperty=fullName>, 입력 한 실제 키를 얻기 위해이 속성을 사용할 수 있습니다.</xref:System.Windows.Input.Key?displayProperty=fullName> </xref:System.Windows.Input.KeyEventArgs.Key%2A>"
  syntax:
    content: public System.Windows.Input.Key DeadCharProcessedKey { get; }
    return:
      type: System.Windows.Input.Key
      description: "키 조합 된 단일 문자를 만들기 위해 데드 키 컴퍼지션의 일부입니다."
  overload: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey
  id: ImeProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: ImeProcessedKey
  nameWithType: KeyEventArgs.ImeProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.ImeProcessedKey
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "여는 키를 처리 하는 경우 이벤트에 의해 참조 된 키보드 키를 가져옵니다는 [!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)]합니다."
  syntax:
    content: public System.Windows.Input.Key ImeProcessedKey { get; }
    return:
      type: System.Windows.Input.Key
      description: "<xref href=&quot;System.Windows.Input.Key&quot;> </xref> 이벤트에서 참조 합니다."
  overload: System.Windows.Input.KeyEventArgs.ImeProcessedKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.InputSource
  id: InputSource
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: InputSource
  nameWithType: KeyEventArgs.InputSource
  fullName: System.Windows.Input.KeyEventArgs.InputSource
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이 입력을 제공 하는 입력된 소스를 가져옵니다."
  syntax:
    content: public System.Windows.PresentationSource InputSource { get; }
    return:
      type: System.Windows.PresentationSource
      description: "입력된 원본입니다."
  overload: System.Windows.Input.KeyEventArgs.InputSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  id: InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: KeyEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.KeyEventArgs.InvokeEventHandler(Delegate,Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이벤트 시스템 효율성을 높일 수 있는 형식별 방법으로 이벤트 처리기를 호출 합니다."
  remarks: "이 구현와으로 <xref:System.Windows.Input.KeyEventHandler>다음 호출 합니다.</xref:System.Windows.Input.KeyEventHandler> 제네릭 처리기 캐스팅 이 구현 패턴 및는 이유에 대 한 내용은 참조 하십시오. <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>및 [라우트된 이벤트 개요](~/add/includes/ajax-current-ext-md.md).</xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>"
  syntax:
    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);
    parameters:
    - id: genericHandler
      type: System.Delegate
      description: "제네릭 처리기 유형별 방식에서으로 호출입니다."
    - id: genericTarget
      type: System.Object
      description: "대상 처리기가 호출입니다."
  overload: System.Windows.Input.KeyEventArgs.InvokeEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsDown
  id: IsDown
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsDown
  nameWithType: KeyEventArgs.IsDown
  fullName: System.Windows.Input.KeyEventArgs.IsDown
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이벤트에 의해 참조 되는 키는 다운 상태에서 인지 여부를 나타내는 값을 가져옵니다."
  remarks: "<xref:System.Windows.Input.Keyboard>클래스도 키보드 키의 상태에 대 한 정보를 제공 합니다.</xref:System.Windows.Input.Keyboard> 예를 들어,는 <xref:System.Windows.Input.Keyboard.IsKeyDown%2A>메서드 다운 지정된 된 키가 있는지 여부를 반환 합니다.</xref:System.Windows.Input.Keyboard.IsKeyDown%2A>"
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by obtaining the state of the IsDown property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsDown](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsisdown)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsDown](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsisdown)]"
  syntax:
    content: public bool IsDown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>키가 중지 하도록 합니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Input.KeyEventArgs.IsDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsRepeat
  id: IsRepeat
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsRepeat
  nameWithType: KeyEventArgs.IsRepeat
  fullName: System.Windows.Input.KeyEventArgs.IsRepeat
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이벤트에서 참조 된 키보드 키 반복 되는 키가 나타내는 값을 가져옵니다."
  remarks: ''
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is a repeated key by obtaining the state of the IsRepeat property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsRepeat](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsisrepeat)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsRepeat](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsisrepeat)]"
  syntax:
    content: public bool IsRepeat { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>키; 반복 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다.  기본값을 갖지 있습니다."
  overload: System.Windows.Input.KeyEventArgs.IsRepeat*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsToggled
  id: IsToggled
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsToggled
  nameWithType: KeyEventArgs.IsToggled
  fullName: System.Windows.Input.KeyEventArgs.IsToggled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이벤트에 의해 참조 되는 키 전환 된 상태에서 인지 여부를 나타내는 값을 가져옵니다."
  remarks: "<xref:System.Windows.Input.Keyboard>클래스도 키보드 키의 상태에 대 한 정보를 제공 합니다.</xref:System.Windows.Input.Keyboard> 예를 들어,는 <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>메서드가 지정된 된 키 설정/해제 여부를 반환 합니다.</xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>"
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is toggled by obtaining the state of the IsToggled property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsToggled](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsistoggled)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsToggled](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsistoggled)]"
  syntax:
    content: public bool IsToggled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>키의 설정/해제; 한 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다.  기본값을 갖지 있습니다."
  overload: System.Windows.Input.KeyEventArgs.IsToggled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsUp
  id: IsUp
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsUp
  nameWithType: KeyEventArgs.IsUp
  fullName: System.Windows.Input.KeyEventArgs.IsUp
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이벤트에 의해 참조 되는 키 최신 상태 인지 여부를 나타내는 값을 가져옵니다."
  remarks: "<xref:System.Windows.Input.Keyboard>클래스도 키보드 키의 상태에 대 한 정보를 제공 합니다.</xref:System.Windows.Input.Keyboard>  예를 들어,는 <xref:System.Windows.Input.Keyboard.IsKeyUp%2A>메서드는 지정 된 되 인지 반환</xref:System.Windows.Input.Keyboard.IsKeyUp%2A>"
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is up by obtaining the state of the IsUp property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsUp](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsisup)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsUp](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsisup)]"
  syntax:
    content: public bool IsUp { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>키가 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다.  기본값을 갖지 있습니다."
  overload: System.Windows.Input.KeyEventArgs.IsUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.Key
  id: Key
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: Key
  nameWithType: KeyEventArgs.Key
  fullName: System.Windows.Input.KeyEventArgs.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이벤트와 연결 된 키보드 키를 가져옵니다."
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.KeyEventHandler> and checks whether the key associated with the <xref:System.Windows.Input.KeyEventArgs> is the <xref:System.Windows.Input.Key> key.  \n  \n [!code-cs[keydown#KeyDownSample](~/add/codesnippet/csharp/KeyDown/Window1.xaml.cs#keydownsample)]\n [!code-vb[keydown#KeyDownSample](~/add/codesnippet/visualbasic/KeyDown/Window1.xaml.vb#keydownsample)]"
  syntax:
    content: public System.Windows.Input.Key Key { get; }
    return:
      type: System.Windows.Input.Key
      description: "<xref href=&quot;System.Windows.Input.Key&quot;> </xref> 이벤트에서 참조 합니다."
  overload: System.Windows.Input.KeyEventArgs.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.KeyStates
  id: KeyStates
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: KeyStates
  nameWithType: KeyEventArgs.KeyStates
  fullName: System.Windows.Input.KeyEventArgs.KeyStates
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "이 이벤트와 연결 된 키보드 키의 상태를 가져옵니다."
  remarks: "키를 시작 하 고 전환 된 상태 또는 눌러진 모두도 가능 및 상태를 설정/해제 합니다. 이러한 이유로 위나 아래로 키가 있는지 여부를 결정 하지 하기만 하면 됩니다 KeyStates 값을 숫자 값을 확인 합니다. 대신 플래그 열거형을 처리 하 여 값을 확인 해야 합니다. 사용 하 여 프로그램 `AND` 첫 번째 비트의 비교 합니다. 또는 속성 도우미를 사용 하 여 <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, 및 <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A>형식이 확인 하려면 여부 지정된 된 키를, 아래쪽, 또는 고쳐져.</xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> </xref:System.Windows.Input.KeyEventArgs.IsDown%2A> </xref:System.Windows.Input.KeyEventArgs.IsUp%2A>"
  example:
  - "The following example checks whether a key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by performing a bitwise `AND` comparison on the KeyStates of the key and the <xref:System.Windows.Input.KeyStates> enumeration value.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargskeystatesdown)]\n [!code-vb[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargskeystatesdown)]"
  syntax:
    content: public System.Windows.Input.KeyStates KeyStates { get; }
    return:
      type: System.Windows.Input.KeyStates
      description: "키의 상태입니다."
  overload: System.Windows.Input.KeyEventArgs.KeyStates*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.SystemKey
  id: SystemKey
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: SystemKey
  nameWithType: KeyEventArgs.SystemKey
  fullName: System.Windows.Input.KeyEventArgs.SystemKey
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "시스템에서의 키를 처리 하는 경우 이벤트에 의해 참조 키보드 키를 가져옵니다."
  syntax:
    content: public System.Windows.Input.Key SystemKey { get; }
    return:
      type: System.Windows.Input.Key
      description: "<xref href=&quot;System.Windows.Input.Key&quot;> </xref> 이벤트에서 참조 합니다."
  overload: System.Windows.Input.KeyEventArgs.SystemKey*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.KeyboardEventArgs
  isExternal: false
  name: System.Windows.Input.KeyboardEventArgs
- uid: System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  nameWithType: KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  fullName: System.Windows.Input.KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
- uid: System.Windows.Input.KeyboardDevice
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardDevice
  nameWithType: KeyboardDevice
  fullName: System.Windows.Input.KeyboardDevice
- uid: System.Windows.PresentationSource
  parent: System.Windows
  isExternal: false
  name: PresentationSource
  nameWithType: PresentationSource
  fullName: System.Windows.PresentationSource
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: DeadCharProcessedKey
  nameWithType: KeyEventArgs.DeadCharProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: ImeProcessedKey
  nameWithType: KeyEventArgs.ImeProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.ImeProcessedKey
- uid: System.Windows.Input.KeyEventArgs.InputSource
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InputSource
  nameWithType: KeyEventArgs.InputSource
  fullName: System.Windows.Input.KeyEventArgs.InputSource
- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: KeyEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.KeyEventArgs.InvokeEventHandler(Delegate,Object)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.KeyEventArgs.IsDown
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsDown
  nameWithType: KeyEventArgs.IsDown
  fullName: System.Windows.Input.KeyEventArgs.IsDown
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.KeyEventArgs.IsRepeat
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsRepeat
  nameWithType: KeyEventArgs.IsRepeat
  fullName: System.Windows.Input.KeyEventArgs.IsRepeat
- uid: System.Windows.Input.KeyEventArgs.IsToggled
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsToggled
  nameWithType: KeyEventArgs.IsToggled
  fullName: System.Windows.Input.KeyEventArgs.IsToggled
- uid: System.Windows.Input.KeyEventArgs.IsUp
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsUp
  nameWithType: KeyEventArgs.IsUp
  fullName: System.Windows.Input.KeyEventArgs.IsUp
- uid: System.Windows.Input.KeyEventArgs.Key
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: Key
  nameWithType: KeyEventArgs.Key
  fullName: System.Windows.Input.KeyEventArgs.Key
- uid: System.Windows.Input.KeyEventArgs.KeyStates
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyStates
  nameWithType: KeyEventArgs.KeyStates
  fullName: System.Windows.Input.KeyEventArgs.KeyStates
- uid: System.Windows.Input.KeyStates
  parent: System.Windows.Input
  isExternal: false
  name: KeyStates
  nameWithType: KeyStates
  fullName: System.Windows.Input.KeyStates
- uid: System.Windows.Input.KeyEventArgs.SystemKey
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: SystemKey
  nameWithType: KeyEventArgs.SystemKey
  fullName: System.Windows.Input.KeyEventArgs.SystemKey
- uid: System.Windows.Input.KeyEventArgs.#ctor*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs.KeyEventArgs
- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: DeadCharProcessedKey
  nameWithType: KeyEventArgs.DeadCharProcessedKey
- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: ImeProcessedKey
  nameWithType: KeyEventArgs.ImeProcessedKey
- uid: System.Windows.Input.KeyEventArgs.InputSource*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InputSource
  nameWithType: KeyEventArgs.InputSource
- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InvokeEventHandler
  nameWithType: KeyEventArgs.InvokeEventHandler
- uid: System.Windows.Input.KeyEventArgs.IsDown*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsDown
  nameWithType: KeyEventArgs.IsDown
- uid: System.Windows.Input.KeyEventArgs.IsRepeat*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsRepeat
  nameWithType: KeyEventArgs.IsRepeat
- uid: System.Windows.Input.KeyEventArgs.IsToggled*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsToggled
  nameWithType: KeyEventArgs.IsToggled
- uid: System.Windows.Input.KeyEventArgs.IsUp*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsUp
  nameWithType: KeyEventArgs.IsUp
- uid: System.Windows.Input.KeyEventArgs.Key*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: Key
  nameWithType: KeyEventArgs.Key
- uid: System.Windows.Input.KeyEventArgs.KeyStates*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyStates
  nameWithType: KeyEventArgs.KeyStates
- uid: System.Windows.Input.KeyEventArgs.SystemKey*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: SystemKey
  nameWithType: KeyEventArgs.SystemKey
