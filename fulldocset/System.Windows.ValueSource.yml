### YamlMime:ManagedReference
items:
- uid: System.Windows.ValueSource
  id: ValueSource
  children:
  - System.Windows.ValueSource.BaseValueSource
  - System.Windows.ValueSource.Equals(System.Object)
  - System.Windows.ValueSource.GetHashCode
  - System.Windows.ValueSource.IsAnimated
  - System.Windows.ValueSource.IsCoerced
  - System.Windows.ValueSource.IsCurrent
  - System.Windows.ValueSource.IsExpression
  - System.Windows.ValueSource.op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)
  - System.Windows.ValueSource.op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)
  langs:
  - csharp
  name: ValueSource
  nameWithType: ValueSource
  fullName: System.Windows.ValueSource
  type: Struct
  summary: "반환 된 정보를 보고 &lt;xref:System.Windows.DependencyPropertyHelper.GetValueSource%2A?displayProperty=fullName&gt;합니다."
  remarks: "에 포함 된 대부분의 ValueSource를 전송 하는 정보는 <xref:System.Windows.ValueSource.BaseValueSource%2A>속성.</xref:System.Windows.ValueSource.BaseValueSource%2A> 이 속성의 전체 정확히 한 가지 측면을 지정 하는 열거형 값을 포함 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 속성 시스템은 종속성 속성의 유효 값에 대 한 책임 지는 합니다.       종속성 속성 값에 대 한 흥미로운 될 수 있는 다른 정보에는 기준 값 이외 여부 값은 애니메이션 효과 줄 값 (예: 바인딩 또는 동적 리소스 참조)는 식과 관련 되어 있는지 여부 및입니다. 이 정보를 보고 <xref:System.Windows.ValueSource.IsAnimated%2A>및 <xref:System.Windows.ValueSource.IsExpression%2A>각각.</xref:System.Windows.ValueSource.IsExpression%2A> </xref:System.Windows.ValueSource.IsAnimated%2A> 또한 강제 변환 속성 값에 대해 작동 하는 경우 속성은 적절된 한 값을 유지 하 고 속성 값이 특정 강제 변환의 제약 조건을 변경 되거나 리프트 원하는 값에 도달 하려고 합니다. 강제 변환된 속성 값이 적절 하지 않은 보고 합니다 <xref:System.Windows.ValueSource.IsCoerced%2A>은 `true`.</xref:System.Windows.ValueSource.IsCoerced%2A>"
  syntax:
    content: public struct ValueSource
  inheritance:
  - System.ValueType
  implements: []
  platform:
  - net462
- uid: System.Windows.ValueSource.BaseValueSource
  id: BaseValueSource
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: BaseValueSource
  nameWithType: ValueSource.BaseValueSource
  fullName: System.Windows.ValueSource.BaseValueSource
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "값을 가져옵니다는 <xref href=&quot;System.Windows.BaseValueSource&quot;> </xref> 값이 종속성 속성 시스템을 제공 하는 소스를 보고 하는 열거형입니다."
  remarks: "기본 값이 유효 값 강제 변환 또는 애니메이션이 속성에서 수행 하는 경우. 확인 <xref:System.Windows.ValueSource.IsAnimated%2A>및 <xref:System.Windows.ValueSource.IsCoerced%2A>기준 값이 유효한 지 여부를 확인 하려는 경우.</xref:System.Windows.ValueSource.IsCoerced%2A> </xref:System.Windows.ValueSource.IsAnimated%2A>       확인할 수도 있습니다 <xref:System.Windows.ValueSource.IsExpression%2A>기준 값 식을 계산 것을 볼 수 있습니다.</xref:System.Windows.ValueSource.IsExpression%2A>"
  syntax:
    content: public System.Windows.BaseValueSource BaseValueSource { get; }
    return:
      type: System.Windows.BaseValueSource
      description: "열거형의 값입니다."
  overload: System.Windows.ValueSource.BaseValueSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ValueSource.Equals(Object)
  fullName: System.Windows.ValueSource.Equals(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "나타내는 값을 반환 하는지 여부를이 <xref href=&quot;System.Windows.ValueSource&quot;> </xref> 지정 된 개체가 같은지를 합니다."
  remarks: "이 구현에서는 값이 같은지를 각각의 각 속성 값에 따라 <xref:System.Windows.ValueSource>구조.</xref:System.Windows.ValueSource>"
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "와 비교할 개체 <xref href=&quot;System.Windows.ValueSource&quot;> </xref>합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>제공 된 개체가 현재 같으면 <xref href=&quot;System.Windows.ValueSource&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.ValueSource.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.GetHashCode
  id: GetHashCode
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ValueSource.GetHashCode()
  fullName: System.Windows.ValueSource.GetHashCode()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "이 대 한 해시 코드를 반환 합니다. <xref href=&quot;System.Windows.ValueSource&quot;> </xref>합니다."
  remarks: "이 해시 코드 기반는 <xref:System.Windows.ValueSource.BaseValueSource%2A>값.</xref:System.Windows.ValueSource.BaseValueSource%2A>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "부호 없는 32 비트 정수 해시 코드입니다."
  overload: System.Windows.ValueSource.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.IsAnimated
  id: IsAnimated
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: IsAnimated
  nameWithType: ValueSource.IsAnimated
  fullName: System.Windows.ValueSource.IsAnimated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "속성이 애니메이션 되는지 여부를 선언 하는 값을 가져옵니다."
  remarks: "현재 애니메이션을 적용 하는 모든 속성에 대 한 소스에서 보고 <xref:System.Windows.ValueSource.BaseValueSource%2A>종속성 속성 보다 우선 순위가 기준 값에 애니메이션 작동 하기 때문에 즉시 관련 되지 않습니다.</xref:System.Windows.ValueSource.BaseValueSource%2A> 우선 순위 및 애니메이션에 대 한 자세한 내용은 참조 [종속성 속성 값 우선 순위](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public bool IsAnimated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>속성에 애니메이션; 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.ValueSource.IsAnimated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.IsCoerced
  id: IsCoerced
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: IsCoerced
  nameWithType: ValueSource.IsCoerced
  fullName: System.Windows.ValueSource.IsCoerced
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "이 값에서 발생 하는지 여부를 선언 하는 값을 가져옵니다는 <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> 구현 종속성 속성에 적용 합니다."
  remarks: "강제 변환 속성 값에 대해 작동 하는 경우 속성은 적절된 한 값을 유지 하 고 속성 값이 특정 강제 변환의 제약 조건을 변경 되거나 리프트 원하는 값에 도달 하려고 합니다. 강제 변환된 속성 값이 적절 하지 않은 IsCoerced 중임을 보고 됩니다 `true`합니다.       기준 값 보다 높은 우선 순위로 역할 수 있고 기본 값이 설정 되는 방식에 참여 엄밀히 말해이 강제 합니다. 이 속성의 값이 아니라 강제 변환 상태 따라서 보고 되는 <xref:System.Windows.BaseValueSource>열거형.</xref:System.Windows.BaseValueSource> 강제 변환, 기준 값 및 우선 순위에 대 한 자세한 내용은 참조 [종속성 속성 값 우선 순위](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public bool IsCoerced { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>값의 결과인 경우는 <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> 종속성 속성에 적용 되는 구현 그렇지 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.ValueSource.IsCoerced*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.IsCurrent
  id: IsCurrent
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: IsCurrent
  nameWithType: ValueSource.IsCurrent
  fullName: System.Windows.ValueSource.IsCurrent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "값에 의해 설정 된 있는지 여부를 가져옵니다는 <xref:System.Windows.DependencyObject.SetCurrentValue*>메서드.</xref:System.Windows.DependencyObject.SetCurrentValue*>"
  syntax:
    content: public bool IsCurrent { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>값에 의해 설정 된 경우는 <xref:System.Windows.DependencyObject.SetCurrentValue*>메서드, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.DependencyObject.SetCurrentValue*>"
  overload: System.Windows.ValueSource.IsCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.IsExpression
  id: IsExpression
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: IsExpression
  nameWithType: ValueSource.IsExpression
  fullName: System.Windows.ValueSource.IsExpression
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "이 값이 계산된 된 식에서 발생 하는지 여부를 선언 하는 값을 가져옵니다. 이렇게 할 수는 <xref href=&quot;System.Windows.Data.BindingExpression&quot;> </xref> 바인딩이나 지 원하는 것과 같은 내부 식을 지 원하는 [DynamicResource 태그 확장](~/add/includes/ajax-current-ext-md.md)합니다."
  remarks: "계산된 된 식에는 특정 기준 값, <xref:System.Windows.ValueSource.BaseValueSource%2A>.</xref:System.Windows.ValueSource.BaseValueSource%2A> 값으로, 식이 적용 된 상태를 설정 또한 보고 합니다. <xref:System.Windows.ValueSource.BaseValueSource%2A>여전히 매우 관련 된 모든 속성에 대 한 여기서는 먼저 IsExpression `true`.</xref:System.Windows.ValueSource.BaseValueSource%2A> 값 식을 통해 반환 되었는지 여부를 이해 하는 값이 설정 되지를 직접 같은 상속 된 속성 값 또는 서식 파일을 통해 처럼 경우에 특히 유용 될 수 있습니다.       식을 계산 하지 못하게 하는 경우 (바인딩이 실패 했습니다.; 해당 이름의 리소스가 없습니다) 기본값 값에서 가장 가능성이 높은 속성 시스템의 다른 참가자에 일부 제공 됩니다. 해당 소스 <xref:System.Windows.ValueSource.BaseValueSource%2A>.</xref:System.Windows.ValueSource.BaseValueSource%2A> 보고 됩니다. 식 계산이 실패는 반환 `false` 먼저 IsExpression에 대 한 합니다."
  syntax:
    content: public bool IsExpression { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>계산 된 식; 값이 제공 되는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.ValueSource.IsExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)
  id: op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: op_Equality(ValueSource,ValueSource)
  nameWithType: ValueSource.op_Equality(ValueSource,ValueSource)
  fullName: System.Windows.ValueSource.op_Equality(ValueSource,ValueSource)
  type: Operator
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "두 결정 <xref href=&quot;System.Windows.ValueSource&quot;> </xref> 인스턴스가 같은 값을 가져야 합니다."
  remarks: "이 구현에서는 호출 <xref:System.Windows.ValueSource.Equals%2A>, 고 지원 값 <xref:System.Windows.ValueSource>.</xref:System.Windows.ValueSource> 의 모든 속성에 따라 같음</xref:System.Windows.ValueSource.Equals%2A>"
  syntax:
    content: public static bool op_Equality (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);
    parameters:
    - id: vs1
      type: System.Windows.ValueSource
      description: "첫 번째 <xref href=&quot;System.Windows.ValueSource&quot;> </xref> 을 비교 합니다."
    - id: vs2
      type: System.Windows.ValueSource
      description: "두 번째 <xref href=&quot;System.Windows.ValueSource&quot;> </xref> 을 비교 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하는 경우 두 <xref href=&quot;System.Windows.ValueSource&quot;> </xref> 인스턴스는 해당 하 고, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.ValueSource.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)
  id: op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: op_Inequality(ValueSource,ValueSource)
  nameWithType: ValueSource.op_Inequality(ValueSource,ValueSource)
  fullName: System.Windows.ValueSource.op_Inequality(ValueSource,ValueSource)
  type: Operator
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "두 결정 <xref href=&quot;System.Windows.ValueSource&quot;> </xref> 인스턴스가 같은 값이 없습니다."
  remarks: "이 구현에서는 <xref:System.Windows.ValueSource.Equals%2A>해당 부정 및 지원 값이 같은지 <xref:System.Windows.ValueSource>.</xref:System.Windows.ValueSource> 의 모든 속성에 따라 반환,</xref:System.Windows.ValueSource.Equals%2A> 호출"
  syntax:
    content: public static bool op_Inequality (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);
    parameters:
    - id: vs1
      type: System.Windows.ValueSource
      description: "첫 번째 <xref href=&quot;System.Windows.ValueSource&quot;> </xref> 을 비교 합니다."
    - id: vs2
      type: System.Windows.ValueSource
      description: "두 번째 <xref href=&quot;System.Windows.ValueSource&quot;> </xref> 을 비교 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하는 경우 두 <xref href=&quot;System.Windows.ValueSource&quot;> </xref> 인스턴스는 해당 하 고, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.ValueSource.op_Inequality*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Windows.ValueSource.BaseValueSource
  parent: System.Windows.ValueSource
  isExternal: false
  name: BaseValueSource
  nameWithType: ValueSource.BaseValueSource
  fullName: System.Windows.ValueSource.BaseValueSource
- uid: System.Windows.BaseValueSource
  parent: System.Windows
  isExternal: false
  name: BaseValueSource
  nameWithType: BaseValueSource
  fullName: System.Windows.BaseValueSource
- uid: System.Windows.ValueSource.Equals(System.Object)
  parent: System.Windows.ValueSource
  isExternal: false
  name: Equals(Object)
  nameWithType: ValueSource.Equals(Object)
  fullName: System.Windows.ValueSource.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.ValueSource.GetHashCode
  parent: System.Windows.ValueSource
  isExternal: false
  name: GetHashCode()
  nameWithType: ValueSource.GetHashCode()
  fullName: System.Windows.ValueSource.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.ValueSource.IsAnimated
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsAnimated
  nameWithType: ValueSource.IsAnimated
  fullName: System.Windows.ValueSource.IsAnimated
- uid: System.Windows.ValueSource.IsCoerced
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsCoerced
  nameWithType: ValueSource.IsCoerced
  fullName: System.Windows.ValueSource.IsCoerced
- uid: System.Windows.ValueSource.IsCurrent
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsCurrent
  nameWithType: ValueSource.IsCurrent
  fullName: System.Windows.ValueSource.IsCurrent
- uid: System.Windows.ValueSource.IsExpression
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsExpression
  nameWithType: ValueSource.IsExpression
  fullName: System.Windows.ValueSource.IsExpression
- uid: System.Windows.ValueSource.op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)
  parent: System.Windows.ValueSource
  isExternal: false
  name: op_Equality(ValueSource,ValueSource)
  nameWithType: ValueSource.op_Equality(ValueSource,ValueSource)
  fullName: System.Windows.ValueSource.op_Equality(ValueSource,ValueSource)
- uid: System.Windows.ValueSource
  parent: System.Windows
  isExternal: false
  name: ValueSource
  nameWithType: ValueSource
  fullName: System.Windows.ValueSource
- uid: System.Windows.ValueSource.op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)
  parent: System.Windows.ValueSource
  isExternal: false
  name: op_Inequality(ValueSource,ValueSource)
  nameWithType: ValueSource.op_Inequality(ValueSource,ValueSource)
  fullName: System.Windows.ValueSource.op_Inequality(ValueSource,ValueSource)
- uid: System.Windows.ValueSource.BaseValueSource*
  parent: System.Windows.ValueSource
  isExternal: false
  name: BaseValueSource
  nameWithType: ValueSource.BaseValueSource
- uid: System.Windows.ValueSource.Equals*
  parent: System.Windows.ValueSource
  isExternal: false
  name: Equals
  nameWithType: ValueSource.Equals
- uid: System.Windows.ValueSource.GetHashCode*
  parent: System.Windows.ValueSource
  isExternal: false
  name: GetHashCode
  nameWithType: ValueSource.GetHashCode
- uid: System.Windows.ValueSource.IsAnimated*
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsAnimated
  nameWithType: ValueSource.IsAnimated
- uid: System.Windows.ValueSource.IsCoerced*
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsCoerced
  nameWithType: ValueSource.IsCoerced
- uid: System.Windows.ValueSource.IsCurrent*
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsCurrent
  nameWithType: ValueSource.IsCurrent
- uid: System.Windows.ValueSource.IsExpression*
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsExpression
  nameWithType: ValueSource.IsExpression
- uid: System.Windows.ValueSource.op_Equality*
  parent: System.Windows.ValueSource
  isExternal: false
  name: op_Equality
  nameWithType: ValueSource.op_Equality
- uid: System.Windows.ValueSource.op_Inequality*
  parent: System.Windows.ValueSource
  isExternal: false
  name: op_Inequality
  nameWithType: ValueSource.op_Inequality
