### YamlMime:ManagedReference
items:
- uid: System.IO.Packaging.PackageDigitalSignatureManager
  id: PackageDigitalSignatureManager
  children:
  - System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)
  - System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption
  - System.IO.Packaging.PackageDigitalSignatureManager.Countersign
  - System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})
  - System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm
  - System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)
  - System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm
  - System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent
  - System.IO.Packaging.PackageDigitalSignatureManager.IsSigned
  - System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow
  - System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures
  - System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)
  - System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})
  - System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})
  - System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)
  - System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})
  - System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin
  - System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType
  - System.IO.Packaging.PackageDigitalSignatureManager.Signatures
  - System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat
  - System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping
  - System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)
  langs:
  - csharp
  name: PackageDigitalSignatureManager
  nameWithType: PackageDigitalSignatureManager
  fullName: System.IO.Packaging.PackageDigitalSignatureManager
  type: Class
  summary: "생성 및에서 디지털 서명 확인에 대 한 유틸리티 클래스를 제공는 <xref href=&quot;System.IO.Packaging.Package&quot;> </xref>합니다."
  remarks: "아키텍처를 기반으로 PackageDigitalSignatureManager [!INCLUDE[TLA#tla_netframewk](~/add/includes/tlasharptla-netframewk-md.md)] 디지털 서명 클래스 및 유틸리티 클래스를 사용 하 여 디지털 서명을 사용 하 여 일반적인 작업을 수행 하는 것에 대 한 제공 <xref:System.IO.Packaging.Package>요소.</xref:System.IO.Packaging.Package>       패키지 디지털 서명에 대 한 자세한 내용은 MSDN 문서 디지털 서명 프레임 워크에서 사용할 수 있는 Open Packaging Conventions의을 참조 하십시오. [http://go.microsoft.com/fwlink/?LinkId=74494](http://go.microsoft.com/fwlink/?LinkId=74494)합니다."
  example:
  - "The following example shows how to use the PackageDigitalSignatureManager.  For the complete sample, see [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public sealed class PackageDigitalSignatureManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)
  id: '#ctor(System.IO.Packaging.Package)'
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: PackageDigitalSignatureManager(Package)
  nameWithType: PackageDigitalSignatureManager.PackageDigitalSignatureManager(Package)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.PackageDigitalSignatureManager(Package)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IO.Packaging.PackageDigitalSignatureManager&quot;> </xref> 를 지정 된 사용할 수 있도록 클래스 <xref href=&quot;System.IO.Packaging.Package&quot;> </xref>합니다."
  remarks: "서명 관리자와 연결 되는 대상 패키지 초기화 하는 동안 설정 됩니다. 설정 된 후에 서명 관리자와 연결 된 패키지를 변경할 수 없습니다. 필요에 따라 새 서명 각 패키지에 대 한 관리자를 만듭니다."
  example:
  - "The following example shows how to use this constructor.  For the complete sample, see [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public PackageDigitalSignatureManager (System.IO.Packaging.Package package);
    parameters:
    - id: package
      type: System.IO.Packaging.Package
      description: "이 서명 관리자와 연결 된 패키지입니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption
  id: CertificateOption
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: CertificateOption
  nameWithType: PackageDigitalSignatureManager.CertificateOption
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "X.509 인증서 포함 하 여 사용 되는 옵션을 가져오거나 설정 합니다.는 <xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign*>패키지 파트를 디지털로 서명 하는 메서드.</xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign*>"
  remarks: "이 속성은 파트를 디지털 서명할 때 서명자의 X.509 인증서가 저장 하는 위치를 지정 합니다."
  example:
  - "The following example shows how to set this property in preparation to digitally sign the parts within a package.  For the complete sample, see [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.IO.Packaging.CertificateEmbeddingOption CertificateOption { get; set; }
    return:
      type: System.IO.Packaging.CertificateEmbeddingOption
      description: "중 하나는 <xref href=&quot;System.IO.Packaging.CertificateEmbeddingOption&quot;> </xref> 값입니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Countersign
  id: Countersign
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Countersign()
  nameWithType: PackageDigitalSignatureManager.Countersign()
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Countersign()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "사용자가 선택한 X.509 인증서를 사용 하 여 패키지의 모든 서명을 연대 서명합니다."
  remarks: "X.509 인증서는 호출에 지정 된 경우이 메서드 서명에 사용할 인증서를 선택 하 라는 메시지는 인증서 선택 대화 상자를 엽니다.       창 핸들에서 설정는 <xref:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow%2A>인증서 선택 대화 상자를 지정된 된 창에 모달 연대를 호출 하기 전에 속성.</xref:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow%2A>"
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Countersign ();
    parameters: []
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "연대 서명으로 추가 된 서명 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 사용자 인증서 선택 대화 상자를 취소 하거나 인증서를 찾을 수 없습니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Countersign*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Countersign(X509Certificate)
  nameWithType: PackageDigitalSignatureManager.Countersign(X509Certificate)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(X509Certificate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "지정된 된 X.509 인증서를 사용 하 여 패키지의 모든 서명을 연대 서명합니다."
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Countersign (System.Security.Cryptography.X509Certificates.X509Certificate certificate);
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "연대 서명으로 서명을 추가할 X.509 인증서입니다."
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "연대 서명으로 추가 된 서명입니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Countersign*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>certificate</code>은<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>"
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})
  id: Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Countersign(X509Certificate,IEnumerable<Uri>)
  nameWithType: PackageDigitalSignatureManager.Countersign(X509Certificate,IEnumerable<Uri>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(X509Certificate,IEnumerable<Uri>)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "지정 된 X.509 인증서로 서명 목록에 연대 서명합니다."
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Countersign (System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Collections.Generic.IEnumerable<Uri> signatures);
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "지정 된 각 연대 서명할 X.509 인증서 `signatures`합니다."
    - id: signatures
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: "연대 서명할 서명 목록입니다."
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "디지털 서명을 연대 서명할 각 하는 데 사용 된 <code> signatures </code>합니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Countersign*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Either the <code>certificate</code> or <code>signatures</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "패키지에 서명 아니요 <xref href=&quot;System.IO.Packaging.PackagePart&quot;> </xref> 개체입니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "패키지 &quot; 아니요 &quot; <xref href=&quot;System.IO.Packaging.PackageDigitalSignature&quot;> </xref> 부분입니다."
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm
  id: DefaultHashAlgorithm
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: DefaultHashAlgorithm
  nameWithType: PackageDigitalSignatureManager.DefaultHashAlgorithm
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "가져옵니다는 [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] 서명을 만들고 확인 하는 데 사용 하는 기본 해시 알고리즘을 식별 하는 문자열입니다."
  remarks: "표준에 대 한 기본 해시 알고리즘 <xref:System.IO.Packaging.PackageDigitalSignatureManager>클래스는 <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url>([!INCLUDE[TLA#tla_sha1](~/add/includes/ajax-current-ext-md.md)]).</xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url> </xref:System.IO.Packaging.PackageDigitalSignatureManager>       <xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A>속성 만들고 확인 하는 데 사용은이 실제 해시 알고리즘을 설정 하거나 가져옵니다.</xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A>       DefaultHashAlgorithm 속성은 일반적으로 다시 설정 하는 데 사용 됩니다는 <xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A>임시 변경 후 다시 기본값으로 속성.</xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A>"
  syntax:
    content: public static string DefaultHashAlgorithm { get; }
    return:
      type: System.String
      description: "A [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] 서명을 만들고 확인 하는 데 사용 하는 기본 해시 알고리즘을 식별 하는 문자열입니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)
  id: GetSignature(System.Uri)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: GetSignature(Uri)
  nameWithType: PackageDigitalSignatureManager.GetSignature(Uri)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "지정 된 서명 디지털 서명을 반환 [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]합니다."
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature GetSignature (Uri signatureUri);
    parameters:
    - id: signatureUri
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] 반환할 디지털 서명 합니다."
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "지정 된 항목에 대 한 디지털 서명을 <code> signatureUri </code>, 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 하는 경우에 대 한 서명을 주어진 <code> signatureUri </code> 찾을 수 없습니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.GetSignature*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm
  id: HashAlgorithm
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: PackageDigitalSignatureManager.HashAlgorithm
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "가져오거나는 [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] 에 대 한 식별자는 <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref> 인스턴스를 만들고 확인 하는 데 사용 합니다."
  remarks: "디지털 서명 표준 관리자에 대 한 기본 해시 알고리즘 식별자는 <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url>(<xref:System.Security.Cryptography.SHA1>-Secure Hash Algorithm 버전 1.0).</xref:System.Security.Cryptography.SHA1> </xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url>       이 속성을 설정, 그렇지 않으면이 <xref:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm%2A>.</xref:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm%2A> 와 같은 값을 가져옵니다 명시적으로 하지 않는 한       HashAlgorithm 속성은 일반적으로 기본값에서 변경 되지 않습니다. 이 속성은 다른 알려진을 사용 하는 시그니처 경우에이 고 액세스 가능한 변경 해야 <xref:System.Security.Cryptography.HashAlgorithm>발생 합니다.</xref:System.Security.Cryptography.HashAlgorithm>  다른 해시 알고리즘을 사용 하는 서명을 사용 하 여 완료 되 면 호출 <xref:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm%2A>HashAlgorithm 속성 다시 기본값으로 다시 설정 합니다.</xref:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm%2A>"
  syntax:
    content: public string HashAlgorithm { get; set; }
    return:
      type: System.String
      description: "<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;> </xref> [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] 에 대 한 식별자는 <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref> 인스턴스를 만들고 확인 하는 데 사용 합니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "에 대 한 문자열의 [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] 설정 하는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "에 대 한 문자열의 [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] 설정 하려면이 비어 있습니다."
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent
  id: InvalidSignatureEvent
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: InvalidSignatureEvent
  nameWithType: PackageDigitalSignatureManager.InvalidSignatureEvent
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "발생 경우 <xref:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures*>잘못 된 서명이 발생 합니다.</xref:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures*>"
  syntax:
    content: public event System.IO.Packaging.InvalidSignatureEventHandler InvalidSignatureEvent;
    return:
      type: System.IO.Packaging.InvalidSignatureEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.IsSigned
  id: IsSigned
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: IsSigned
  nameWithType: PackageDigitalSignatureManager.IsSigned
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.IsSigned
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "패키지에 서명이 포함 되어 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "IsSigned 속성 서명 유효성 검사를 수행 하지 않습니다. 서명이 이며 IsSigned `true`, 하나 이상의 서명이 유효한 수 있습니다.  호출 <xref:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures%2A>서명이 유효 하 고 변경 되지 않았는지 확인 합니다.</xref:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures%2A>"
  example:
  - "The following example shows how to use the IsSigned property to determine if a package contains digital signatures.  For the complete sample, see [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-vb[PackageDigitalSignature#PackageDigSigValidate](~/add/codesnippet/visualbasic/packagedigitalsignature/packagedigitalsignature.vb#packagedigsigvalidate)]\n [!code-cs[PackageDigitalSignature#PackageDigSigValidate](~/add/codesnippet/csharp/PackageDigitalSignature/PackageDigitalSignature.cs#packagedigsigvalidate)]"
  syntax:
    content: public bool IsSigned { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>포함 된 서명, 패키지 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.IsSigned*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow
  id: ParentWindow
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: ParentWindow
  nameWithType: PackageDigitalSignatureManager.ParentWindow
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "인증서 선택 대화 상자를 표시 하기 위해 부모 창에 대 한 핸들을 가져오거나 설정 합니다."
  remarks: "인증서 선택 대화 상자는 경우에 표시 됩니다는 <xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A>호출에 인증서가 없습니다.</xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A> 지정 된 인증서 경우 <xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A>서명에 사용할 인증서를 선택할 수 있도록 해 주는 인증서 선택 대화 상자가 표시 됩니다.</xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A>"
  syntax:
    content: public IntPtr ParentWindow { get; set; }
    return:
      type: System.IntPtr
      description: "인증서 선택 대화 상자를 표시 하기 위해 사용할 부모 창의 핸들입니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures
  id: RemoveAllSignatures
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: RemoveAllSignatures()
  nameWithType: PackageDigitalSignatureManager.RemoveAllSignatures()
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "패키지에서 모든 디지털 서명을 제거합니다."
  remarks: "이 메서드는 또한 패키지에서 모든 X.509 인증서를 제거합니다.  모든 서명 및 인증서를 제거한 후 호출 <xref:System.IO.Packaging.Package.Flush%2A>저장소에 모든 변경 내용을 유지 합니다.</xref:System.IO.Packaging.Package.Flush%2A>"
  syntax:
    content: public void RemoveAllSignatures ();
    parameters: []
  overload: System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)
  id: RemoveSignature(System.Uri)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: RemoveSignature(Uri)
  nameWithType: PackageDigitalSignatureManager.RemoveSignature(Uri)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "지정 된 서명 디지털 서명을 제거 [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]합니다."
  remarks: "또한이 메서드는 디지털 서명에서 참조 하지 않은 경우 연결 된 X.509 인증서를 제거 합니다.       호출 시그니처를 제거한 후 <xref:System.IO.Packaging.Package.Flush%2A>저장소에 변경 내용을 유지 하려면.</xref:System.IO.Packaging.Package.Flush%2A>"
  syntax:
    content: public void RemoveSignature (Uri signatureUri);
    parameters:
    - id: signatureUri
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] 의 <xref href=&quot;System.IO.Packaging.PackageDigitalSignature&quot;> </xref> 를 제거 합니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})
  id: Sign(System.Collections.Generic.IEnumerable{System.Uri})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Sign(IEnumerable<Uri>)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "사용자에 게는 다음 지정된 된 패키지 파트 목록을 디지털 서명 하는 데 사용 되는 X.509 인증서를 메시지를 표시 합니다."
  remarks: "인증서 선택 대화 상자 모달을 특정 창 설정를 <xref:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow%2A>기호를 호출 하기 전에 속성.</xref:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow%2A>       기본 인증서 저장소에서 서명 인증서에 대 한 메시지가 나타나지 않습니다."
  example:
  - "The following example shows how to digitally sign a list of package parts.  For the complete sample, see the [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-vb[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/visualbasic/packagedigitalsignature/packagedigitalsignature.vb#packagedigsigsign)]\n [!code-cs[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/csharp/PackageDigitalSignature/PackageDigitalSignature.cs#packagedigsigsign)]"
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable<Uri> parts);
    parameters:
    - id: parts
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: "목록이 [!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)] 에 대 한는 <xref href=&quot;System.IO.Packaging.PackagePart&quot;> </xref> 요소에 서명 합니다."
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "목록에 서명 하는 데 사용 하는 디지털 서명을 <code> parts </code>합니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Sign*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)
  id: Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Sign(IEnumerable<Uri>,X509Certificate)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "지정 된 X.509 인증서를 사용 하 여 패키지 파트의 목록을 서명합니다."
  remarks: ''
  example:
  - "The following example shows how to digitally sign a list of parts within a <xref:System.IO.Packaging.Package>.  For the complete example, see the [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-vb[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/visualbasic/packagedigitalsignature/packagedigitalsignature.vb#packagedigsigsign)]\n [!code-cs[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/csharp/PackageDigitalSignature/PackageDigitalSignature.cs#packagedigsigsign)]"
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable<Uri> parts, System.Security.Cryptography.X509Certificates.X509Certificate certificate);
    parameters:
    - id: parts
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: "목록이 [!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)] 에 대 한는 <xref href=&quot;System.IO.Packaging.PackagePart&quot;> </xref> 요소에 서명 합니다."
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "지정 된 각에 디지털 서명 하는 데 X.509 인증서 `parts`합니다."
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "지정 된 목록에 서명 하는 데 사용 디지털 서명을 <code> parts </code>; 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우 인증서를 찾을 수 없습니다 또는 사용자가 클릭 한 &quot;취소&quot; 인증서 선택 대화 상자에서 합니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Sign*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})
  id: Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "패키지 파트 및 특정된 X.509 인증서로 패키지 관계 목록에 서명합니다."
  remarks: "사이의 `parts` 및 `relationshipSelectors` 서명에 하나 이상의 요소가 있어야 합니다."
  example:
  - "The following example shows how to digitally sign a list of package parts.  For the complete sample, see the [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-vb[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/visualbasic/packagedigitalsignature/packagedigitalsignature.vb#packagedigsigsign)]\n [!code-cs[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/csharp/PackageDigitalSignature/PackageDigitalSignature.cs#packagedigsigsign)]"
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable<Uri> parts, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Collections.Generic.IEnumerable<System.IO.Packaging.PackageRelationshipSelector> relationshipSelectors);
    parameters:
    - id: parts
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: "목록이 [!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)] 에 대 한는 <xref href=&quot;System.IO.Packaging.PackagePart&quot;> </xref> 서명할 개체입니다."
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "각 지정 된 파트 및 관계에 디지털 서명 하는 데 X.509 인증서입니다."
    - id: relationshipSelectors
      type: System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector}
      description: "목록이 <xref href=&quot;System.IO.Packaging.PackageRelationship&quot;> </xref> 서명할 개체입니다."
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "에 지정 된 요소에 서명 하는 데 사용 되는 디지털 서명을 <code> parts </code> 및 <code> relationshipSelectors </code> 나열 합니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Sign*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "모두 <code> parts </code> 나 <code> relationshipSelectors </code> 서명할 개체를 지정 합니다."
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)
  id: Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "패키지 파트 및 특정된 X.509 인증서로 패키지 관계 목록 서명 및 [!INCLUDE[TLA#tla_id](~/add/includes/tlasharptla-id-md.md)]합니다."
  remarks: "`parts` 목록은 비어 있을 수 또는 `null` 경우 `relationshipSelectors` 적어도 하나의 항목이 포함 되어 있습니다.       `relationshipSelectors` 목록은 비어 있을 수 또는 `null` 경우 `parts` 적어도 하나의 항목이 포함 되어 있습니다.       사이 `parts` 목록 및 `relationshipSelectors` 서명에 하나 이상의 요소가 있어야 합니다."
  example:
  - "The following example shows how to digitally sign a list of package parts.  For the complete sample, see the [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-vb[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/visualbasic/packagedigitalsignature/packagedigitalsignature.vb#packagedigsigsign)]\n [!code-cs[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/csharp/PackageDigitalSignature/PackageDigitalSignature.cs#packagedigsigsign)]"
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable<Uri> parts, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Collections.Generic.IEnumerable<System.IO.Packaging.PackageRelationshipSelector> relationshipSelectors, string signatureId);
    parameters:
    - id: parts
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: "목록이 [!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)] 에 대 한는 <xref href=&quot;System.IO.Packaging.PackagePart&quot;> </xref> 서명할 개체입니다."
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "각 지정 된 파트 및 관계에 디지털 서명 하는 데 X.509 인증서입니다."
    - id: relationshipSelectors
      type: System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector}
      description: "목록이 <xref href=&quot;System.IO.Packaging.PackageRelationship&quot;> </xref> 서명할 개체입니다."
    - id: signatureId
      type: System.String
      description: "서명을 사용 하 여 연결할 식별 문자열입니다."
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "에 지정 된 요소에 서명 하는 데 사용 되는 디지털 서명을 <code> parts </code> 및 <code> relationshipSelectors </code> 나열 합니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Sign*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "모두 <code> parts </code> 나 <code> relationshipSelectors </code> 서명할 요소를 지정 합니다."
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})
  id: Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String,IEnumerable<DataObject>,IEnumerable<Reference>)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String,IEnumerable<DataObject>,IEnumerable<Reference>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String,IEnumerable<DataObject>,IEnumerable<Reference>)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "패키지 파트, 패키지 관계 또는 지정 된 X.509 인증서와 서명을 사용 하 여 사용자 지정 개체의 목록 서명 [!INCLUDE[TLA#tla_id](~/add/includes/tlasharptla-id-md.md)]합니다."
  remarks: "로그인에 하나 이상의 요소가 있어야 `parts`, `relationshipSelectors`, `signatureObjects`, 또는 `objectReferences`합니다.      > [!NOTE] > 약관 `Object`, `Manifest`, `Reference`, `SignatureProperties`, 및 `Transform` 다음의 두 설명 부분을 요소 형식 및 W3C XML 서명 구문 및 처리 사양에 정의 된 태그를 참조 한 자세한 내용은 [http://www.w3.org/TR/xmldsig-core/](http://www.w3.org/TR/xmldsig-core/)합니다.       이 및 다른 <xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A>메서드 오버 로드에 현재 사용 하 여 <xref:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping%2A>사전 정의 하는 `Transform` 적용 하는 패키지 파트 <xref:System.IO.Packaging.PackagePart.ContentType%2A>.</xref:System.IO.Packaging.PackagePart.ContentType%2A> 에 따라</xref:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping%2A> </xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A>  Microsoft Open 패키징 규칙 (OPC) 사양 현재 허용 두 개의 올바른 `Transform` 알고리즘: C14 및 C14N 합니다.  W3C XML 서명 구문 및 처리 표준 빈 허용 하지 않습니다 `Manifest` 태그입니다.  Open Packaging Conventions 사양 필요는 <xref:System.IO.Packaging.Package>-특정 `Object` 모두 포함 된 태그 `Manifest` 및 `SignatureProperties` 태그.</xref:System.IO.Packaging.Package>  각 `Manifest` 또한 태그도 하나 이상 포함 `Reference` 태그입니다.  이러한 태그는 각 서명에 서명 하나 이상 필요 <xref:System.IO.Packaging.PackagePart>(비어 있지 않은 부분 태그) 또는 <xref:System.IO.Packaging.PackageRelationship>(비어 있지 않은 `relationshipSelectors`) 하기 위한 용도로 필요 하는 경우에 `signatureObjects` 또는 `objectReferences`.</xref:System.IO.Packaging.PackageRelationship> </xref:System.IO.Packaging.PackagePart>       이 기호 메서드는 <xref:System.Security.Cryptography.Xml.Reference.DigestMethod%2A>각각와 연결 된 속성 <xref:System.Security.Cryptography.Xml.Reference>에 정의 된 `objectReferences`.</xref:System.Security.Cryptography.Xml.Reference> </xref:System.Security.Cryptography.Xml.Reference.DigestMethod%2A>       이 기호 오버 로드의 생성에 대 한 지원을 제공 [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] 사용자 지정 해야 하는 서명을 `Object` 태그입니다.  제공 된 모든 `Object` 서명할 태그 해당 `Reference` 태그 제공 해야 합니다.는 [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)] 지정 하는 `Object` 로컬 조각 구문에서 태그입니다.  예를 들어 경우는 `Object` 태그는 URI에서 &quot;myObject&quot;의 ID는 `Reference` 태그는 &quot;#myObject&quot; 것입니다.  에 대 한 서명 되지 않은 개체를 더 `Reference` 가 필요 합니다."
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable<Uri> parts, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Collections.Generic.IEnumerable<System.IO.Packaging.PackageRelationshipSelector> relationshipSelectors, string signatureId, System.Collections.Generic.IEnumerable<System.Security.Cryptography.Xml.DataObject> signatureObjects, System.Collections.Generic.IEnumerable<System.Security.Cryptography.Xml.Reference> objectReferences);
    parameters:
    - id: parts
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: "목록이 [!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)] 에 대 한는 <xref href=&quot;System.IO.Packaging.PackagePart&quot;> </xref> 서명할 개체입니다."
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "각 지정 된 파트 및 관계에 디지털 서명 하는 데 X.509 인증서입니다."
    - id: relationshipSelectors
      type: System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector}
      description: "목록이 <xref href=&quot;System.IO.Packaging.PackageRelationship&quot;> </xref> 서명할 개체입니다."
    - id: signatureId
      type: System.String
      description: "서명을 사용 하 여 연결할 식별 문자열입니다."
    - id: signatureObjects
      type: System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject}
      description: "서명할 사용자 지정 데이터 개체의 목록입니다."
    - id: objectReferences
      type: System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference}
      description: "목록에 서명 하는 사용자 지정 개체에 대 한 참조입니다."
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "에 지정 된 요소에 서명 하는 데 사용 되는 디지털 서명을 <code> parts </code> 및 <code> relationshipSelectors </code> 나열 합니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Sign*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Neither <code>parts</code>, <code>relationshipSelectors</code>, <code>signatureObjects</code>, nor <code>objectReferences</code> specify any elements to sign."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A <> </> *> 되는 파트의 서명 된 참조는 빈 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, 또는 정의 되지 않은 <> </> *> 합니다."
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>signatureId</code>가 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 유효 하지 않거나 및 [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] 스키마 ID (예를 들어 선행 숫자가으로 시작)입니다."
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin
  id: SignatureOrigin
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: SignatureOrigin
  nameWithType: PackageDigitalSignatureManager.SignatureOrigin
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "가져옵니다는 [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)] 서명 원본 파트입니다."
  remarks: "SignatureOrigin [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)] 이름을 공식적으로 정의 되지 않았으므로 패키지에 따라 달라질 수 있습니다. 원본이 현재 <xref:System.IO.Packaging.Package>.</xref:System.IO.Packaging.Package> 에 이미 있습니다.이 속성에서 반환 되는 값은 반영이 구현 일반적으로 동일한 기본값을 사용 하는 동안"
  syntax:
    content: public Uri SignatureOrigin { get; }
    return:
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] 서명 원본 파트입니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType
  id: SignatureOriginRelationshipType
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: SignatureOriginRelationshipType
  nameWithType: PackageDigitalSignatureManager.SignatureOriginRelationshipType
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "기본 서명 원본 관계의 유형을 가져옵니다."
  syntax:
    content: public static string SignatureOriginRelationshipType { get; }
    return:
      type: System.String
      description: "기본 서명 원본 관계의 형식입니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Signatures
  id: Signatures
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Signatures
  nameWithType: PackageDigitalSignatureManager.Signatures
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Signatures
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "패키지에 포함 되었던 모든 서명의 컬렉션을 가져옵니다."
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.IO.Packaging.PackageDigitalSignature> Signatures { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Packaging.PackageDigitalSignature}
      description: "모든 컬렉션은 <xref href=&quot;System.IO.Packaging.PackageDigitalSignature&quot;> </xref> 개체입니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Signatures*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat
  id: TimeFormat
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: TimeFormat
  nameWithType: PackageDigitalSignatureManager.TimeFormat
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "<xref:System.IO.Packaging.PackageDigitalSignature.SigningTime*>.</xref:System.IO.Packaging.PackageDigitalSignature.SigningTime*> 서명을 만드는 데 사용 되는 날짜/시간 형식을 가져오거나 설정 합니다."
  remarks: "TimeFormat 기본값이 &quot;YYYY MM DDThh:mm:ss.sTZD&quot;입니다.       날짜/시간 형식에는 &quot;W3C 날짜 및 시간 형식&quot; 사양의 구문과 [http://www.w3.org/TR/Note-datetime.html](http://www.w3.org/TR/Note-datetime.html)합니다. 아래 표시 된 구성 요소가 있어야 하며 구문과 정의 된 대로 문장 부호를 사용 합니다.      | TimeFormat | 설명 | 예 |   |----------------|-----------------|-------------|   | YYYY | 연도 | 2005 |   | YYYY MM | 연도 및 월 | 2005-07 |   | YYYY-월-일 | 완료 날짜 | 2005-07-28 |   | YYYY-m M-날짜/시간입니다 | 완료 날짜와 시간 및 분 | 2005-07-28T19:20-01시 |   | YYYY-m M-DDThh:mm:ssTZD | 완료 날짜 및 시간, 분 및 초 | 2005-07-28T19:20:45-01시 |   | YYYY-m M-DDThh:mm:ss.sTZD| 완료 날짜 및 시간, 분 및 초 소수 부분 | 2005-07-28T19:20:45.75-01시 |       여기서: | | |   |-|-|   | YYYY | 네 자리 연도 (예를 들어 2005) |   | MM | 두 자리 월 (01 = 1 월) |   | DD | 월 (01-31)의 두 일 |   | Thh | 두 자리 시간 (00-23, 24 시간) |   | mm |이 분 (00-59) |   | ss | 두 자리 초 (00-59) |   | s | 10 진수 형태의 초를 나타내는 하나 이상의 숫자 |   | TZD | 시간대 지정자 (Z 나 + hh: mm 또는-hh: mm) |"
  syntax:
    content: public string TimeFormat { get; set; }
    return:
      type: System.String
      description: "<xref:System.IO.Packaging.PackageDigitalSignature.SigningTime*>.</xref:System.IO.Packaging.PackageDigitalSignature.SigningTime*> 서명을 만드는 데 사용 되는 날짜/시간 형식"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping
  id: TransformMapping
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: TransformMapping
  nameWithType: PackageDigitalSignatureManager.TransformMapping
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "정의 된 각 사전을 가져옵니다 <> </> *> 및 관련 [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref>.<> </> *> 식별자입니다."
  remarks: "각 콘텐츠 형식에 대 한 관련된 변환 알고리즘 서명 작업 하기 전에 적용 되는 <xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A>실행 됩니다.</xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A>       기본 콘텐츠 및 변환 매핑이 포함: | 콘텐츠 | ContentType | 변환 알고리즘 식별자 |   |-------------|-----------------|------------------------------------|   | 관계 | &quot; application/vnd.openxmlformats-package.relationships+xml&quot;| <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>|   | 디지털 서명 | &quot; application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml&quot;| <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>|</xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl></xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>"
  syntax:
    content: public System.Collections.Generic.Dictionary<string,string> TransformMapping { get; }
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: "사전 정의 된 각 <> </> *> 및 관련 [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref>.<> </> *> 식별자입니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: VerifyCertificate(X509Certificate)
  nameWithType: PackageDigitalSignatureManager.VerifyCertificate(X509Certificate)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(X509Certificate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "지정 된 X.509 인증서를 확인합니다."
  syntax:
    content: public static System.Security.Cryptography.X509Certificates.X509ChainStatusFlags VerifyCertificate (System.Security.Cryptography.X509Certificates.X509Certificate certificate);
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "확인할 X.509 인증서입니다."
    return:
      type: System.Security.Cryptography.X509Certificates.X509ChainStatusFlags
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509ChainStatusFlags&quot;></xref>(값 0) 인증서가 성공적으로 확인 하는 경우 그렇지 않은 경우 오류의 비트 열거형 플래그 지정합니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)
  id: VerifySignatures(System.Boolean)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: VerifySignatures(Boolean)
  nameWithType: PackageDigitalSignatureManager.VerifySignatures(Boolean)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "패키지 내에서 서명 된 모든 파트에서 서명을 확인 합니다."
  remarks: "이 메서드는 디지털 서명만; 확인 관련 된 X.509 인증서를 확인 하지 않습니다.  <xref:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate%2A>메서드 X.509 인증서는 데 사용할 수 있습니다.</xref:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate%2A>"
  example:
  - "The following example shows how to use this method to validate all signed parts within a package.  For the complete sample, see [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-vb[PackageDigitalSignature#PackageDigSigValidate](~/add/codesnippet/visualbasic/packagedigitalsignature/packagedigitalsignature.vb#packagedigsigvalidate)]\n [!code-cs[PackageDigitalSignature#PackageDigSigValidate](~/add/codesnippet/csharp/PackageDigitalSignature/PackageDigitalSignature.cs#packagedigsigvalidate)]"
  syntax:
    content: public System.IO.Packaging.VerifyResult VerifySignatures (bool exitOnFailure);
    parameters:
    - id: exitOnFailure
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>첫 번째 실패 시 종료 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 계속 해 서 모든 서명을 확인 합니다."
    return:
      type: System.IO.Packaging.VerifyResult
      description: "<xref href=&quot;System.IO.Packaging.VerifyResult&quot;></xref>(값 0) 모든 서명이 성공적으로 확인 되 면 그렇지 않으면 오류를 식별 하는 열거형입니다."
  overload: System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: PackageDigitalSignatureManager(Package)
  nameWithType: PackageDigitalSignatureManager.PackageDigitalSignatureManager(Package)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.PackageDigitalSignatureManager(Package)
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
- uid: System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: CertificateOption
  nameWithType: PackageDigitalSignatureManager.CertificateOption
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption
- uid: System.IO.Packaging.CertificateEmbeddingOption
  parent: System.IO.Packaging
  isExternal: false
  name: CertificateEmbeddingOption
  nameWithType: CertificateEmbeddingOption
  fullName: System.IO.Packaging.CertificateEmbeddingOption
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Countersign
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Countersign()
  nameWithType: PackageDigitalSignatureManager.Countersign()
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Countersign()
- uid: System.IO.Packaging.PackageDigitalSignature
  parent: System.IO.Packaging
  isExternal: false
  name: PackageDigitalSignature
  nameWithType: PackageDigitalSignature
  fullName: System.IO.Packaging.PackageDigitalSignature
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Countersign(X509Certificate)
  nameWithType: PackageDigitalSignatureManager.Countersign(X509Certificate)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(X509Certificate)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate
  nameWithType: X509Certificate
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Countersign(X509Certificate,IEnumerable<Uri>)
  nameWithType: PackageDigitalSignatureManager.Countersign(X509Certificate,IEnumerable<Uri>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(X509Certificate,IEnumerable<Uri>)
- uid: System.Collections.Generic.IEnumerable{System.Uri}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Uri>
  nameWithType: IEnumerable<Uri>
  fullName: System.Collections.Generic.IEnumerable<System.Uri>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Uri>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: DefaultHashAlgorithm
  nameWithType: PackageDigitalSignatureManager.DefaultHashAlgorithm
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: GetSignature(Uri)
  nameWithType: PackageDigitalSignatureManager.GetSignature(Uri)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(Uri)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: HashAlgorithm
  nameWithType: PackageDigitalSignatureManager.HashAlgorithm
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm
- uid: System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: InvalidSignatureEvent
  nameWithType: PackageDigitalSignatureManager.InvalidSignatureEvent
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent
- uid: System.IO.Packaging.InvalidSignatureEventHandler
  parent: System.IO.Packaging
  isExternal: false
  name: InvalidSignatureEventHandler
  nameWithType: InvalidSignatureEventHandler
  fullName: System.IO.Packaging.InvalidSignatureEventHandler
- uid: System.IO.Packaging.PackageDigitalSignatureManager.IsSigned
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: IsSigned
  nameWithType: PackageDigitalSignatureManager.IsSigned
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.IsSigned
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: ParentWindow
  nameWithType: PackageDigitalSignatureManager.ParentWindow
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: RemoveAllSignatures()
  nameWithType: PackageDigitalSignatureManager.RemoveAllSignatures()
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures()
- uid: System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: RemoveSignature(Uri)
  nameWithType: PackageDigitalSignatureManager.RemoveSignature(Uri)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(Uri)
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Sign(IEnumerable<Uri>)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>)
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Sign(IEnumerable<Uri>,X509Certificate)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate)
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>)
- uid: System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<PackageRelationshipSelector>
  nameWithType: IEnumerable<PackageRelationshipSelector>
  fullName: System.Collections.Generic.IEnumerable<System.IO.Packaging.PackageRelationshipSelector>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.Packaging.PackageRelationshipSelector>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Packaging.PackageRelationshipSelector
    name: PackageRelationshipSelector
    nameWithType: PackageRelationshipSelector
    fullName: PackageRelationshipSelector
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String)
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String,IEnumerable<DataObject>,IEnumerable<Reference>)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String,IEnumerable<DataObject>,IEnumerable<Reference>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String,IEnumerable<DataObject>,IEnumerable<Reference>)
- uid: System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<DataObject>
  nameWithType: IEnumerable<DataObject>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Cryptography.Xml.DataObject>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Cryptography.Xml.DataObject>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Cryptography.Xml.DataObject
    name: DataObject
    nameWithType: DataObject
    fullName: DataObject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Reference>
  nameWithType: IEnumerable<Reference>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Cryptography.Xml.Reference>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Cryptography.Xml.Reference>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Cryptography.Xml.Reference
    name: Reference
    nameWithType: Reference
    fullName: Reference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: SignatureOrigin
  nameWithType: PackageDigitalSignatureManager.SignatureOrigin
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin
- uid: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: SignatureOriginRelationshipType
  nameWithType: PackageDigitalSignatureManager.SignatureOriginRelationshipType
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Signatures
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Signatures
  nameWithType: PackageDigitalSignatureManager.Signatures
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Signatures
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Packaging.PackageDigitalSignature}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<PackageDigitalSignature>
  nameWithType: ReadOnlyCollection<PackageDigitalSignature>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IO.Packaging.PackageDigitalSignature>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IO.Packaging.PackageDigitalSignature>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Packaging.PackageDigitalSignature
    name: PackageDigitalSignature
    nameWithType: PackageDigitalSignature
    fullName: PackageDigitalSignature
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: TimeFormat
  nameWithType: PackageDigitalSignatureManager.TimeFormat
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat
- uid: System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: TransformMapping
  nameWithType: PackageDigitalSignatureManager.TransformMapping
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: Dictionary<String,String>
  nameWithType: Dictionary<String,String>
  fullName: System.Collections.Generic.Dictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: VerifyCertificate(X509Certificate)
  nameWithType: PackageDigitalSignatureManager.VerifyCertificate(X509Certificate)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(X509Certificate)
- uid: System.Security.Cryptography.X509Certificates.X509ChainStatusFlags
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ChainStatusFlags
  nameWithType: X509ChainStatusFlags
  fullName: System.Security.Cryptography.X509Certificates.X509ChainStatusFlags
- uid: System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: VerifySignatures(Boolean)
  nameWithType: PackageDigitalSignatureManager.VerifySignatures(Boolean)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(Boolean)
- uid: System.IO.Packaging.VerifyResult
  parent: System.IO.Packaging
  isExternal: false
  name: VerifyResult
  nameWithType: VerifyResult
  fullName: System.IO.Packaging.VerifyResult
- uid: System.IO.Packaging.PackageDigitalSignatureManager.#ctor*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: PackageDigitalSignatureManager
  nameWithType: PackageDigitalSignatureManager.PackageDigitalSignatureManager
- uid: System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: CertificateOption
  nameWithType: PackageDigitalSignatureManager.CertificateOption
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Countersign*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Countersign
  nameWithType: PackageDigitalSignatureManager.Countersign
- uid: System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: DefaultHashAlgorithm
  nameWithType: PackageDigitalSignatureManager.DefaultHashAlgorithm
- uid: System.IO.Packaging.PackageDigitalSignatureManager.GetSignature*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: GetSignature
  nameWithType: PackageDigitalSignatureManager.GetSignature
- uid: System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: HashAlgorithm
  nameWithType: PackageDigitalSignatureManager.HashAlgorithm
- uid: System.IO.Packaging.PackageDigitalSignatureManager.IsSigned*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: IsSigned
  nameWithType: PackageDigitalSignatureManager.IsSigned
- uid: System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: ParentWindow
  nameWithType: PackageDigitalSignatureManager.ParentWindow
- uid: System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: RemoveAllSignatures
  nameWithType: PackageDigitalSignatureManager.RemoveAllSignatures
- uid: System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: RemoveSignature
  nameWithType: PackageDigitalSignatureManager.RemoveSignature
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Sign
  nameWithType: PackageDigitalSignatureManager.Sign
- uid: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: SignatureOrigin
  nameWithType: PackageDigitalSignatureManager.SignatureOrigin
- uid: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: SignatureOriginRelationshipType
  nameWithType: PackageDigitalSignatureManager.SignatureOriginRelationshipType
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Signatures*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Signatures
  nameWithType: PackageDigitalSignatureManager.Signatures
- uid: System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: TimeFormat
  nameWithType: PackageDigitalSignatureManager.TimeFormat
- uid: System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: TransformMapping
  nameWithType: PackageDigitalSignatureManager.TransformMapping
- uid: System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: VerifyCertificate
  nameWithType: PackageDigitalSignatureManager.VerifyCertificate
- uid: System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: VerifySignatures
  nameWithType: PackageDigitalSignatureManager.VerifySignatures
