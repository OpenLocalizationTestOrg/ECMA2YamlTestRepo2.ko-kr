### YamlMime:ManagedReference
items:
- uid: System.AppDomainManager
  id: AppDomainManager
  children:
  - System.AppDomainManager.#ctor
  - System.AppDomainManager.ApplicationActivator
  - System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)
  - System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  - System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  - System.AppDomainManager.EntryAssembly
  - System.AppDomainManager.HostExecutionContextManager
  - System.AppDomainManager.HostSecurityManager
  - System.AppDomainManager.InitializationFlags
  - System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)
  langs:
  - csharp
  name: AppDomainManager
  nameWithType: AppDomainManager
  fullName: System.AppDomainManager
  type: Class
  summary: "관리 되지 않는 호스트의 관리 되는 항목을 제공합니다."
  remarks: "> [!IMPORTANT]\n>  Do not use AppDomainManager to configure an application domain in ASP.NET. In ASP.NET, configuration must be handled by the host.  \n  \n Implementing the AppDomainManager class enables a hosting application to participate in the creation of new application domains. To replace the default AppDomainManager, identify the assembly and type of the replacement AppDomainManager in the APPDOMAIN_MANAGER_ASM and APPDOMAIN_MANAGER_TYPE environment variables, or use the [\\<appDomainManagerAssembly>](../Topic/%3CappDomainManagerAssembly%3E%20Element.md) and [\\<appDomainManagerType>](../Topic/%3CappDomainManagerType%3E%20Element.md) elements in your configuration file. The assembly must be fully trusted and be contained in the global assembly cache or the directory of the starting application. The type and assembly names must be fully qualified in the environment variables. For example:  \n  \n `set APPDOMAIN_MANAGER_TYPE=MyNamespace.TestAppDomainManager`  \n  \n `set APPDOMAIN_MANAGER_ASM=customappDomainmanager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f1368f7b12a08d72`  \n  \n> [!IMPORTANT]\n>  If the assembly that contains your subclass of AppDomainManager depends on assemblies that are marked with the conditional <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute, you must include those assemblies in the list that you pass to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A> property of the <xref:System.AppDomainSetup> you use to create application domains. Otherwise, the assemblies that are marked with the conditional APTCA attribute will be disabled.  \n  \n The AppDomainManager is the managed equivalent of the unmanaged host. An AppDomainManager object participates in the creation of new application domains in a process and can customize the new <xref:System.AppDomain> before other managed code runs. The AppDomainManager can also supply host managers that participate in other aspects of common language runtime execution. For example, an AppDomainManager can identify a <xref:System.Security.HostSecurityManager> object that participates in the security decisions of the application domain.  \n  \n> [!NOTE]\n>  Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the [AppDomain.CreateDomain(String, Evidence, AppDomainSetup, PermissionSet, StrongName\\[\\])](assetId:///M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])?qualifyHint=True&autoUpgrade=False) method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.  \n  \n> [!NOTE]\n>  This class contains a link demand and an inheritance demand at the class level. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have infrastructure permission. For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)."
  example:
  - "The following example shows a very simple implementation of AppDomainManager.  \n  \n [!code-vb[System.AppDomainManager#1](~/add/codesnippet/visualbasic/t-system.appdomainmanager_1.vb)]\n [!code-cs[System.AppDomainManager#1](~/add/codesnippet/csharp/t-system.appdomainmanager_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Security.SecurityCritical]

      public class AppDomainManager : MarshalByRefObject
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.AppDomainManager.#ctor
  id: '#ctor'
  parent: System.AppDomainManager
  langs:
  - csharp
  name: AppDomainManager()
  nameWithType: AppDomainManager.AppDomainManager()
  fullName: System.AppDomainManager.AppDomainManager()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.AppDomainManager&quot;> </xref> 클래스입니다."
  remarks: >-
    > [!NOTE]

    >  Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the [AppDomain.CreateDomain(String, Evidence, AppDomainSetup, PermissionSet, StrongName\[\])](assetId:///M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])?qualifyHint=True&autoUpgrade=False) method can be loaded in the  AppDomainManager constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.
  syntax:
    content: public AppDomainManager ();
    parameters: []
  overload: System.AppDomainManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainManager.ApplicationActivator
  id: ApplicationActivator
  parent: System.AppDomainManager
  langs:
  - csharp
  name: ApplicationActivator
  nameWithType: AppDomainManager.ApplicationActivator
  fullName: System.AppDomainManager.ApplicationActivator
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "추가 기능 및 도메인에 대 한 응용 프로그램 매니페스트 기반 활성화를 처리 하는 응용 프로그램 활성기를 가져옵니다."
  remarks: "지정 된 인스턴스는 단일는 <xref:System.Runtime.Hosting.ApplicationActivator>각 클래스 <xref:System.AppDomain>활성화 호출 어떤 모든 추가 기능 및 매니페스트 기반 응용 프로그램에 라우팅됩니다.</xref:System.AppDomain> </xref:System.Runtime.Hosting.ApplicationActivator> <xref:System.AppDomainManager>현재 <xref:System.AppDomain>고유한 사용자 지정을 제공할 수 <xref:System.Runtime.Hosting.ApplicationActivator>, 기본 인스턴스 또는 <xref:System.Runtime.Hosting.ApplicationActivator>만들어집니다.</xref:System.Runtime.Hosting.ApplicationActivator> </xref:System.Runtime.Hosting.ApplicationActivator> </xref:System.AppDomain> </xref:System.AppDomainManager>"
  syntax:
    content: public virtual System.Runtime.Hosting.ApplicationActivator ApplicationActivator { get; }
    return:
      type: System.Runtime.Hosting.ApplicationActivator
      description: "응용 프로그램 활성기입니다."
  overload: System.AppDomainManager.ApplicationActivator*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)
  id: CheckSecuritySettings(System.Security.SecurityState)
  parent: System.AppDomainManager
  langs:
  - csharp
  name: CheckSecuritySettings(SecurityState)
  nameWithType: AppDomainManager.CheckSecuritySettings(SecurityState)
  fullName: System.AppDomainManager.CheckSecuritySettings(SecurityState)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "응용 프로그램 도메인에서 특정된 작업이 허용 되는지 여부를 나타냅니다."
  remarks: "이 메서드의 기본 구현에서는 반환 `false`합니다.       이 메서드를 호출한 경우는 <xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=fullName>격리 된 저장소 할당량을 늘리려면 메서드가 호출 되었습니다.</xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=fullName> 공용 언어 런타임 (CLR)를 호스팅하는 응용 프로그램에 따라 정책 결정을 수행 하려면 CheckSecuritySettings 메서드를 재정의 수는 <xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState>개체 (상속 되는 <xref:System.Security.SecurityState>), 및 허용 하거나 수 증가 되지 않도록 합니다.</xref:System.Security.SecurityState> </xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState> 예를 들어 호스트에서는 최종 사용자 승인 또는 거부할 할당량을 늘리려면 요청을 요구할 수 있습니다. CheckSecuritySettings 호스트의 구현을 서비스 거부 공격의 가능성을 고려해 야 합니다. 예를 들어 단추 클릭과 같은 사용자가 시작한 이벤트에서 메서드가 호출 되는 경우에 사용자를 프롬프트 해야 합니다."
  syntax:
    content: public virtual bool CheckSecuritySettings (System.Security.SecurityState state);
    parameters:
    - id: state
      type: System.Security.SecurityState
      description: "서브 클래스 <xref href=&quot;System.Security.SecurityState&quot;> </xref> 는 해당 보안 상태가 요청 된 작업을 식별 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>호스트에서 지정한 작업을 허용 하는 경우 <code> state </code> 고, 그렇지 않으면 응용 프로그램 도메인에서 수행 되도록 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.AppDomainManager.CheckSecuritySettings*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  id: CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  parent: System.AppDomainManager
  langs:
  - csharp
  name: CreateDomain(String,Evidence,AppDomainSetup)
  nameWithType: AppDomainManager.CreateDomain(String,Evidence,AppDomainSetup)
  fullName: System.AppDomainManager.CreateDomain(String,Evidence,AppDomainSetup)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "기존 또는 새 응용 프로그램 도메인을 반환합니다."
  remarks: "지정 이름은 `friendlyName` 도메인을 식별 하기 위해 사용자 인터페이스에 매개 변수를 표시할 수 있습니다. 자세한 내용은 참조는 <xref:System.AppDomain.FriendlyName%2A>속성.</xref:System.AppDomain.FriendlyName%2A>       보호 <xref:System.AppDomainManager.CreateDomainHelper%2A> <xref:System.AppDomain>.</xref:System.AppDomain> 만드는 메서드를</xref:System.AppDomainManager.CreateDomainHelper%2A> 호출 하는 기본 CreateDomain 메서드 이 메서드의 재정의 호출할 필요가 없습니다는 <xref:System.AppDomainManager.CreateDomainHelper%2A>메서드 되었지만 기존 도메인을 반환할 수 있습니다.</xref:System.AppDomainManager.CreateDomainHelper%2A>"
  syntax:
    content: public virtual AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);
    parameters:
    - id: friendlyName
      type: System.String
      description: "도메인의 이름입니다."
    - id: securityInfo
      type: System.Security.Policy.Evidence
      description: "스택 맨 위 사용 권한을 설정 하기 위해 보안 정책을 통해 매핑된 증명 정보를 포함 하는 개체를 설정 합니다."
    - id: appDomainInfo
      type: System.AppDomainSetup
      description: "응용 프로그램 도메인 초기화 정보를 포함 하는 개체입니다."
    return:
      type: System.AppDomain
      description: "기존 또는 새 응용 프로그램 도메인입니다."
  overload: System.AppDomainManager.CreateDomain*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  id: CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  parent: System.AppDomainManager
  langs:
  - csharp
  name: CreateDomainHelper(String,Evidence,AppDomainSetup)
  nameWithType: AppDomainManager.CreateDomainHelper(String,Evidence,AppDomainSetup)
  fullName: System.AppDomainManager.CreateDomainHelper(String,Evidence,AppDomainSetup)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "응용 프로그램 도메인을 만들려고 하는 도우미 메서드를 제공 합니다."
  remarks: "새 응용 프로그램 도메인의 생성을 처리 하는이 보호 된 도우미 메서드입니다.       이 이름으로 지정 된는 `friendlyName` 도메인을 식별 하기 위해 사용자 인터페이스에 매개 변수를 표시할 수 있습니다. 자세한 내용은 참조는 <xref:System.AppDomain.FriendlyName%2A>속성.</xref:System.AppDomain.FriendlyName%2A>"
  syntax:
    content: protected static AppDomain CreateDomainHelper (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);
    parameters:
    - id: friendlyName
      type: System.String
      description: "도메인의 이름입니다."
    - id: securityInfo
      type: System.Security.Policy.Evidence
      description: "스택 맨 위 사용 권한을 설정 하기 위해 보안 정책을 통해 매핑된 증명 정보를 포함 하는 개체를 설정 합니다."
    - id: appDomainInfo
      type: System.AppDomainSetup
      description: "응용 프로그램 도메인 초기화 정보를 포함 하는 개체입니다."
    return:
      type: System.AppDomain
      description: "새로 만든된 응용 프로그램 도메인입니다."
  overload: System.AppDomainManager.CreateDomainHelper*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>friendlyName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AppDomainManager.EntryAssembly
  id: EntryAssembly
  parent: System.AppDomainManager
  langs:
  - csharp
  name: EntryAssembly
  nameWithType: AppDomainManager.EntryAssembly
  fullName: System.AppDomainManager.EntryAssembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "응용 프로그램에 대 한 항목 어셈블리를 가져옵니다."
  remarks: "응용 프로그램 매니페스트 활성 응용 프로그램인 경우 항목 어셈블리가 응용 프로그램 매니페스트에서 결정 됩니다. 응용 프로그램 매니페스트 활성화를 없으면 진입 어셈블리는 기본 응용 프로그램 도메인에서 실행 되는 프로세스입니다. 항목 어셈블리가에 의해 실행 된 첫 번째 실행 파일은 다른 응용 프로그램 도메인에서는 <xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=fullName>메서드.</xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Reflection.Assembly EntryAssembly { get; }
    return:
      type: System.Reflection.Assembly
      description: "응용 프로그램에 대 한 항목 어셈블리입니다."
  overload: System.AppDomainManager.EntryAssembly*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainManager.HostExecutionContextManager
  id: HostExecutionContextManager
  parent: System.AppDomainManager
  langs:
  - csharp
  name: HostExecutionContextManager
  nameWithType: AppDomainManager.HostExecutionContextManager
  fullName: System.AppDomainManager.HostExecutionContextManager
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "실행 컨텍스트 관리자를 실행 컨텍스트의 흐름을 관리 하는 호스트를 가져옵니다."
  remarks: "이 속성을 사용 하면 호스트를 제공 하는 데는 <xref:System.Threading.HostExecutionContextManager>비동기 호출 간에 실행 컨텍스트의 흐름에 참여할 수 있는.</xref:System.Threading.HostExecutionContextManager>"
  syntax:
    content: public virtual System.Threading.HostExecutionContextManager HostExecutionContextManager { get; }
    return:
      type: System.Threading.HostExecutionContextManager
      description: "호스트 실행 컨텍스트 관리자입니다."
  overload: System.AppDomainManager.HostExecutionContextManager*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainManager.HostSecurityManager
  id: HostSecurityManager
  parent: System.AppDomainManager
  langs:
  - csharp
  name: HostSecurityManager
  nameWithType: AppDomainManager.HostSecurityManager
  fullName: System.AppDomainManager.HostSecurityManager
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "보안에 참여 하는 호스트 보안 관리자는 응용 프로그램 도메인에 대 한 결정을 가져옵니다."
  remarks: "이 속성을 사용 하면 호스트를 제공 하는 데는 <xref:System.Security.HostSecurityManager>응용 프로그램 도메인에 대 한 보안 결정에 참여할 수 있습니다.</xref:System.Security.HostSecurityManager>"
  example:
  - "The following example shows an override of the HostSecurityManager property for a custom application domain manager. This code example is part of a larger example provided for the <xref:System.AppDomainManager> class.  \n  \n [!code-vb[System.AppDomainManager#3](~/add/codesnippet/visualbasic/p-system.appdomainmanage_1.vb)]\n [!code-cs[System.AppDomainManager#3](~/add/codesnippet/csharp/p-system.appdomainmanage_1.cs)]"
  syntax:
    content: public virtual System.Security.HostSecurityManager HostSecurityManager { get; }
    return:
      type: System.Security.HostSecurityManager
      description: "호스트 보안 관리자입니다."
  overload: System.AppDomainManager.HostSecurityManager*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainManager.InitializationFlags
  id: InitializationFlags
  parent: System.AppDomainManager
  langs:
  - csharp
  name: InitializationFlags
  nameWithType: AppDomainManager.InitializationFlags
  fullName: System.AppDomainManager.InitializationFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "사용자 지정 응용 프로그램 도메인 관리자에 대 한 초기화 플래그를 가져옵니다."
  syntax:
    content: public AppDomainManagerInitializationOptions InitializationFlags { get; set; }
    return:
      type: System.AppDomainManagerInitializationOptions
      description: "초기화 수행할 동작을 설명 하는 열거형 값의 비트 조합입니다. 기본값은 <xref href=&quot;System.AppDomainManagerInitializationOptions&quot;> </xref>합니다."
  overload: System.AppDomainManager.InitializationFlags*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)
  id: InitializeNewDomain(System.AppDomainSetup)
  parent: System.AppDomainManager
  langs:
  - csharp
  name: InitializeNewDomain(AppDomainSetup)
  nameWithType: AppDomainManager.InitializeNewDomain(AppDomainSetup)
  fullName: System.AppDomainManager.InitializeNewDomain(AppDomainSetup)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "새 응용 프로그램 도메인을 초기화합니다."
  remarks: "> [!IMPORTANT]\n>  Do not use this method to initialize an application domain in ASP.NET. In ASP.NET, configuration must be handled by the host. If you use this method to initialize the application domain, the host throws <xref:System.InvalidOperationException> when it attempts to initialize the application domain. The exception message indicates that initialization has already occurred.  \n  \n This method is called immediately after the constructor. The default InitializeNewDomain implementation does nothing.  A custom implementation can set up internal classes and delegates, set up an interface with the unmanaged host interface, or set up event handlers for the new <xref:System.AppDomain>.  \n  \n Also, for add-in activations, a custom implementation could identify the current <xref:System.AppDomain> as the target application domain.  \n  \n Beginning with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], you can use this method to sandbox the default application domain at application startup, or to modify the sandbox of a new application domain. To do this, adjust the <xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A> and <xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A> properties on the <xref:System.Security.Policy.ApplicationTrust> object that is assigned to the <xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=fullName> property of `appDomainInfo`, before you initialize the application domain.  \n  \n> [!NOTE]\n>  Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the [AppDomain.CreateDomain(String, Evidence, AppDomainSetup, PermissionSet, StrongName\\[\\])](assetId:///M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])?qualifyHint=True&autoUpgrade=False) method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the InitializeNewDomain method."
  example:
  - "The following example shows an override of the InitializeNewDomain method for a custom application domain manager. This code example is part of a larger example provided for the <xref:System.AppDomainManager> class.  \n  \n [!code-vb[System.AppDomainManager#2](~/add/codesnippet/visualbasic/m-system.appdomainmanage_1.vb)]\n [!code-cs[System.AppDomainManager#2](~/add/codesnippet/csharp/m-system.appdomainmanage_1.cs)]"
  syntax:
    content: public virtual void InitializeNewDomain (AppDomainSetup appDomainInfo);
    parameters:
    - id: appDomainInfo
      type: System.AppDomainSetup
      description: "응용 프로그램 도메인 초기화 정보를 포함 하는 개체입니다."
  overload: System.AppDomainManager.InitializeNewDomain*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.AppDomainManager.#ctor
  parent: System.AppDomainManager
  isExternal: false
  name: AppDomainManager()
  nameWithType: AppDomainManager.AppDomainManager()
  fullName: System.AppDomainManager.AppDomainManager()
- uid: System.AppDomainManager.ApplicationActivator
  parent: System.AppDomainManager
  isExternal: false
  name: ApplicationActivator
  nameWithType: AppDomainManager.ApplicationActivator
  fullName: System.AppDomainManager.ApplicationActivator
- uid: System.Runtime.Hosting.ApplicationActivator
  parent: System.Runtime.Hosting
  isExternal: false
  name: ApplicationActivator
  nameWithType: ApplicationActivator
  fullName: System.Runtime.Hosting.ApplicationActivator
- uid: System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)
  parent: System.AppDomainManager
  isExternal: false
  name: CheckSecuritySettings(SecurityState)
  nameWithType: AppDomainManager.CheckSecuritySettings(SecurityState)
  fullName: System.AppDomainManager.CheckSecuritySettings(SecurityState)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecurityState
  parent: System.Security
  isExternal: false
  name: SecurityState
  nameWithType: SecurityState
  fullName: System.Security.SecurityState
- uid: System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  parent: System.AppDomainManager
  isExternal: false
  name: CreateDomain(String,Evidence,AppDomainSetup)
  nameWithType: AppDomainManager.CreateDomain(String,Evidence,AppDomainSetup)
  fullName: System.AppDomainManager.CreateDomain(String,Evidence,AppDomainSetup)
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.AppDomainSetup
  parent: System
  isExternal: false
  name: AppDomainSetup
  nameWithType: AppDomainSetup
  fullName: System.AppDomainSetup
- uid: System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  parent: System.AppDomainManager
  isExternal: false
  name: CreateDomainHelper(String,Evidence,AppDomainSetup)
  nameWithType: AppDomainManager.CreateDomainHelper(String,Evidence,AppDomainSetup)
  fullName: System.AppDomainManager.CreateDomainHelper(String,Evidence,AppDomainSetup)
- uid: System.AppDomainManager.EntryAssembly
  parent: System.AppDomainManager
  isExternal: false
  name: EntryAssembly
  nameWithType: AppDomainManager.EntryAssembly
  fullName: System.AppDomainManager.EntryAssembly
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.AppDomainManager.HostExecutionContextManager
  parent: System.AppDomainManager
  isExternal: false
  name: HostExecutionContextManager
  nameWithType: AppDomainManager.HostExecutionContextManager
  fullName: System.AppDomainManager.HostExecutionContextManager
- uid: System.Threading.HostExecutionContextManager
  parent: System.Threading
  isExternal: false
  name: HostExecutionContextManager
  nameWithType: HostExecutionContextManager
  fullName: System.Threading.HostExecutionContextManager
- uid: System.AppDomainManager.HostSecurityManager
  parent: System.AppDomainManager
  isExternal: false
  name: HostSecurityManager
  nameWithType: AppDomainManager.HostSecurityManager
  fullName: System.AppDomainManager.HostSecurityManager
- uid: System.Security.HostSecurityManager
  parent: System.Security
  isExternal: false
  name: HostSecurityManager
  nameWithType: HostSecurityManager
  fullName: System.Security.HostSecurityManager
- uid: System.AppDomainManager.InitializationFlags
  parent: System.AppDomainManager
  isExternal: false
  name: InitializationFlags
  nameWithType: AppDomainManager.InitializationFlags
  fullName: System.AppDomainManager.InitializationFlags
- uid: System.AppDomainManagerInitializationOptions
  parent: System
  isExternal: false
  name: AppDomainManagerInitializationOptions
  nameWithType: AppDomainManagerInitializationOptions
  fullName: System.AppDomainManagerInitializationOptions
- uid: System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)
  parent: System.AppDomainManager
  isExternal: false
  name: InitializeNewDomain(AppDomainSetup)
  nameWithType: AppDomainManager.InitializeNewDomain(AppDomainSetup)
  fullName: System.AppDomainManager.InitializeNewDomain(AppDomainSetup)
- uid: System.AppDomainManager.#ctor*
  parent: System.AppDomainManager
  isExternal: false
  name: AppDomainManager
  nameWithType: AppDomainManager.AppDomainManager
- uid: System.AppDomainManager.ApplicationActivator*
  parent: System.AppDomainManager
  isExternal: false
  name: ApplicationActivator
  nameWithType: AppDomainManager.ApplicationActivator
- uid: System.AppDomainManager.CheckSecuritySettings*
  parent: System.AppDomainManager
  isExternal: false
  name: CheckSecuritySettings
  nameWithType: AppDomainManager.CheckSecuritySettings
- uid: System.AppDomainManager.CreateDomain*
  parent: System.AppDomainManager
  isExternal: false
  name: CreateDomain
  nameWithType: AppDomainManager.CreateDomain
- uid: System.AppDomainManager.CreateDomainHelper*
  parent: System.AppDomainManager
  isExternal: false
  name: CreateDomainHelper
  nameWithType: AppDomainManager.CreateDomainHelper
- uid: System.AppDomainManager.EntryAssembly*
  parent: System.AppDomainManager
  isExternal: false
  name: EntryAssembly
  nameWithType: AppDomainManager.EntryAssembly
- uid: System.AppDomainManager.HostExecutionContextManager*
  parent: System.AppDomainManager
  isExternal: false
  name: HostExecutionContextManager
  nameWithType: AppDomainManager.HostExecutionContextManager
- uid: System.AppDomainManager.HostSecurityManager*
  parent: System.AppDomainManager
  isExternal: false
  name: HostSecurityManager
  nameWithType: AppDomainManager.HostSecurityManager
- uid: System.AppDomainManager.InitializationFlags*
  parent: System.AppDomainManager
  isExternal: false
  name: InitializationFlags
  nameWithType: AppDomainManager.InitializationFlags
- uid: System.AppDomainManager.InitializeNewDomain*
  parent: System.AppDomainManager
  isExternal: false
  name: InitializeNewDomain
  nameWithType: AppDomainManager.InitializeNewDomain
