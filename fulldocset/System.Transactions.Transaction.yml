### YamlMime:ManagedReference
items:
- uid: System.Transactions.Transaction
  id: Transaction
  children:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  langs:
  - csharp
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
  type: Class
  summary: "트랜잭션을 나타냅니다."
  remarks: "<xref:System.Transactions>모두는 명시적인 프로그래밍 모델을 사용 하는 암시적 프로그래밍 모델 뿐 아니라 트랜잭션 클래스에 기반을 제공 하는 네임 스페이스는 <xref:System.Transactions.TransactionScope>트랜잭션을 관리 하는 자동으로 인프라에 의해 클래스.</xref:System.Transactions.TransactionScope> </xref:System.Transactions> 개발을 위한 편리한 암시적 모델을 사용 하는 것이 좋습니다. 시작 하려면를 참조 하십시오는 [구현 하는 암시적 트랜잭션을 사용 하 여 트랜잭션 범위](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) 항목입니다. 트랜잭션 응용 프로그램 작성 방법에 대 한 자세한 내용은 참조 하십시오. [트랜잭션 응용 작성](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)합니다.       트랜잭션 클래스 인리스트먼트에 대 한 리소스 관리자를 구현 하는 개발자가 사용 되는 메서드를 포함 합니다. 또한 트랜잭션을 복제 하 고 현재 트랜잭션 컨텍스트를 제어 하기 위한 기능을 제공 합니다. 정적을 사용 하 여, 설정 된 경우 현재 트랜잭션을 가져올 수 있습니다 <xref:System.Transactions.Transaction.Current%2A>속성.</xref:System.Transactions.Transaction.Current%2A>"
  syntax:
    content: 'public class Transaction : IDisposable, System.Runtime.Serialization.ISerializable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.Transaction.Clone
  id: Clone
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: Clone()
  nameWithType: Transaction.Clone()
  fullName: System.Transactions.Transaction.Clone()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "트랜잭션의 복제본을 만듭니다."
  remarks: "트랜잭션을 전달 하기 위해 복제본을 만듭니다.  예를 들어 전달 하려는 하지는 <xref:System.Transactions.CommittableTransaction>다른 응용 프로그램에 다른 사용자가 트랜잭션을 않으려면 때문에.</xref:System.Transactions.CommittableTransaction>  마샬링하거나 트랜잭션을 serialize 하려고 하면 복제본을 자동으로 만들어집니다."
  syntax:
    content: public System.Transactions.Transaction Clone ();
    parameters: []
    return:
      type: System.Transactions.Transaction
      description: "A <xref href=&quot;System.Transactions.Transaction&quot;> </xref> 현재 트랜잭션 개체의 복사본입니다."
  overload: System.Transactions.Transaction.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.Current
  id: Current
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: Current
  nameWithType: Transaction.Current
  fullName: System.Transactions.Transaction.Current
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "앰비언트 트랜잭션을 가져오거나 설정 합니다."
  remarks: "앰비언트 트랜잭션에 대 한 자세한 내용은 &quot;TransactionScopeOption를 사용 하 여 트랜잭션 흐름을 관리 합니다.&quot; 섹션을 참조 하십시오는 [암시적 트랜잭션은 트랜잭션 범위를 사용 하 여 구현](~/add/includes/ajax-current-ext-md.md) 항목입니다.       이 속성을 사용 하 여 앰비언트 트랜잭션의 설정할 수는 있지만 사용 해야는 <xref:System.Transactions.TransactionScope>앰비언트 트랜잭션이 가능 하면 항상를 조작 하는 개체입니다.</xref:System.Transactions.TransactionScope>       이 속성은 정적 스레드입니다. 이 속성 내를 사용 하 여 앰비언트 트랜잭션을 변경 하는 경우는 <xref:System.Transactions.TransactionScope>는 <xref:System.InvalidOperationException>경우 throw 되 <xref:System.Transactions.TransactionScope.Dispose%2A>호출 됩니다 이전 앰비언트 트랜잭션을 값이 복원.</xref:System.Transactions.TransactionScope.Dispose%2A> </xref:System.InvalidOperationException> </xref:System.Transactions.TransactionScope>"
  syntax:
    content: public static System.Transactions.Transaction Current { get; set; }
    return:
      type: System.Transactions.Transaction
      description: "A <xref href=&quot;System.Transactions.Transaction&quot;> </xref> 현재 트랜잭션을 설명 하는 합니다."
  overload: System.Transactions.Transaction.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  id: DependentClone(System.Transactions.DependentCloneOption)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: DependentClone(DependentCloneOption)
  nameWithType: Transaction.DependentClone(DependentCloneOption)
  fullName: System.Transactions.Transaction.DependentClone(DependentCloneOption)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "트랜잭션이 종속 클론을 만듭니다."
  remarks: "종속 트랜잭션이 해당 결과가 복제 된 트랜잭션의 결과에 종속 되는 트랜잭션을입니다.       `cloneoption` 매개 변수를 만드는 종속 트랜잭션의 종류를 제어 합니다. 종속 트랜잭션이 <xref:System.Transactions.DependentCloneOption>커밋 프로세스는 제한 시간이 초과 될 때까지 트랜잭션 또는 <xref:System.Transactions.DependentTransaction.Complete%2A> <xref:System.Transactions.DependentTransaction>.</xref:System.Transactions.DependentTransaction> 호출</xref:System.Transactions.DependentTransaction.Complete%2A> 차단,</xref:System.Transactions.DependentCloneOption> 만들어진 경우 로 생성 하는 경우 <xref:System.Transactions.DependentCloneOption>, 경우 트랜잭션이 자동으로 중단 <xref:System.Transactions.CommittableTransaction.Commit%2A> <xref:System.Transactions.DependentTransaction.Complete%2A> <xref:System.Transactions.DependentTransaction>.</xref:System.Transactions.DependentTransaction> 호출</xref:System.Transactions.DependentTransaction.Complete%2A> 전에 호출 됩니다</xref:System.Transactions.CommittableTransaction.Commit%2A> </xref:System.Transactions.DependentCloneOption>"
  example:
  - "The following example shows you how to create a dependent transaction.  \n  \n [!code-vb[Tx_DependentTx#1](~/add/codesnippet/visualbasic/a081f0f4-5473-43fc-b7fe-_1.vb)]\n [!code-cs[Tx_DependentTx#1](~/add/codesnippet/csharp/a081f0f4-5473-43fc-b7fe-_1.cs)]"
  syntax:
    content: public System.Transactions.DependentTransaction DependentClone (System.Transactions.DependentCloneOption cloneOption);
    parameters:
    - id: cloneOption
      type: System.Transactions.DependentCloneOption
      description: "A <xref href=&quot;System.Transactions.DependentCloneOption&quot;> </xref> 만들려는 종속 된 트랜잭션의 종류를 제어 하는 합니다."
    return:
      type: System.Transactions.DependentTransaction
      description: "A <xref href=&quot;System.Transactions.DependentTransaction&quot;> </xref> 종속 복제를 나타내는입니다."
  overload: System.Transactions.Transaction.DependentClone*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.Dispose
  id: Dispose
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: Dispose()
  nameWithType: Transaction.Dispose()
  fullName: System.Transactions.Transaction.Dispose()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "개체에서 보유 하는 리소스를 해제 합니다."
  remarks: "설정 하 여 앰비언트 트랜잭션을 변경 하는 경우 <xref:System.Transactions.Transaction.Current%2A>내는 <xref:System.Transactions.TransactionScope>는 <xref:System.InvalidOperationException>경우 throw 되 <xref:System.Transactions.TransactionScope.Dispose%2A>호출 이전 앰비언트 트랜잭션을 값이 복원.</xref:System.Transactions.TransactionScope.Dispose%2A> </xref:System.InvalidOperationException> </xref:System.Transactions.TransactionScope> </xref:System.Transactions.Transaction.Current%2A>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Transactions.Transaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  id: EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "트랜잭션에 참여&2; 단계 커밋을 지 원하는 영구 리소스 관리자를 등록 합니다."
  remarks: "지속적인 인 리스트 먼 있는 리소스 관리자는 오류가 발생할 경우 복구를 수행할 수 있어야 합니다. 복구에 대 한 자세한 내용은 참조 하십시오. [복구 수행](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)합니다. 휘발성 및 지속적인 리소스: 리소스를 참여 하는 방법에 대 한 자세한 내용은 참조 하십시오. [A 리소스 관리자 구현](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)합니다.  알림 커밋하고&2; 단계 커밋을 준비 하는 리소스 관리자가 응답 하는 방법에 대 한 자세한 내용은 참조 하십시오. [커밋하는 트랜잭션에서 단일 단계 및 다중 단계](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)합니다.       이 메서드를 통해 트랜잭션에 참여 한 리소스 관리자에 정의 된 메서드에 해당 하는&2; 단계 커밋 알림을 수신는 <xref:System.Transactions.IEnlistmentNotification>인터페이스.</xref:System.Transactions.IEnlistmentNotification>"
  syntax:
    content: public System.Transactions.Enlistment EnlistDurable (Guid resourceManagerIdentifier, System.Transactions.IEnlistmentNotification enlistmentNotification, System.Transactions.EnlistmentOptions enlistmentOptions);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "리소스 관리자 오류 사이 유지 하거나 다시 부팅 해야 하는 리소스 관리자에 대 한 고유 식별자입니다."
    - id: enlistmentNotification
      type: System.Transactions.IEnlistmentNotification
      description: "구현 하는 개체는 <xref href=&quot;System.Transactions.IEnlistmentNotification&quot;> </xref> 를&2; 단계 커밋 알림을 수신할 인터페이스입니다."
    - id: enlistmentOptions
      type: System.Transactions.EnlistmentOptions
      description: "<xref href=&quot;System.Transactions.EnlistmentOptions&quot;></xref>리소스 관리자가 준비 단계 추가 작업을 수행 합니다."
    return:
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref> 참여를 설명 하는 개체입니다."
  overload: System.Transactions.Transaction.EnlistDurable*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  id: EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "트랜잭션에 참여할 수 있는 단일 단계 커밋 최적화를 지 원하는 영구 리소스 관리자를 등록 합니다."
  remarks: "지속적인 인 리스트 먼 있는 리소스 관리자는 오류가 발생할 경우 복구를 수행할 수 있어야 합니다. 복구에 대 한 자세한 내용은 참조 하십시오. [복구 수행](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)합니다. 휘발성 및 지속적인 리소스: 리소스를 참여 하는 방법에 대 한 자세한 내용은 참조 하십시오. [A 리소스 관리자 구현](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)합니다.       리소스 관리자 구현에이 방법으로 인 리스트 먼 트를 하는 경우에 해당 하지 않을 단일 단계 커밋 받는다고 점에 유의 해야 합니다. 트랜잭션 관리자&2; 단계 커밋 알림을 대신 보낼 여전히 수 있습니다. 단일 단계 커밋 최적화에 대 한 자세한 내용은 참조 하십시오. [최적화를 사용 하 여 단일 단계 커밋 및 승격 가능한 단일 단계 알림](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)합니다."
  syntax:
    content: public System.Transactions.Enlistment EnlistDurable (Guid resourceManagerIdentifier, System.Transactions.ISinglePhaseNotification singlePhaseNotification, System.Transactions.EnlistmentOptions enlistmentOptions);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "리소스 관리자 오류 사이 유지 하거나 다시 부팅 해야 하는 리소스 관리자에 대 한 고유 식별자입니다."
    - id: singlePhaseNotification
      type: System.Transactions.ISinglePhaseNotification
      description: "구현 하는 개체는 <xref href=&quot;System.Transactions.ISinglePhaseNotification&quot;> </xref> 단일 단계 커밋 및&2; 단계 커밋 알림을 받을 수 있어야 하는 인터페이스입니다."
    - id: enlistmentOptions
      type: System.Transactions.EnlistmentOptions
      description: "<xref href=&quot;System.Transactions.EnlistmentOptions&quot;></xref>리소스 관리자가 준비 단계 추가 작업을 수행 합니다."
    return:
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref> 참여를 설명 하는 개체입니다."
  overload: System.Transactions.Transaction.EnlistDurable*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  id: EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)
  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)
  fullName: System.Transactions.Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "승격할 수 있는 단일 단계 참여 (PSPE)를 통해 내부 트랜잭션이 있는 리소스 관리자를 등록 합니다."
  remarks: "트랜잭션에서 일시적입니다. 즉, 참가자의 오류를 남아 있지 않습니다. 또한이 메서드는 제안 된 컨트롤을 제기 하기 위해 트랜잭션 관리자 있지만 에스컬레이션 자체를 보장할 수 없습니다. 에스컬레이션이 실패 하면 사용자가 알림을 받지 하 고 트랜잭션이 롤백됩니다.       매개 변수 `promotableSinglePhaseNotification` 리소스 관리자의 내부 트랜잭션을 커밋하려고 시도의 결과를 트랜잭션 관리자 통신에 사용 됩니다.  데이터 불일치를 보고 하면 트랜잭션 관리자 예외를 throw 합니다. 경우는 <xref:System.Transactions.TransactionStatus>, 결과가 보고 되는 트랜잭션 관리자에서 자체 내부 인 리스트 먼 트 결과 알림을 찾아서 보고 된 응답을 무시 합니다.</xref:System.Transactions.TransactionStatus>       참여와의 트랜잭션 에스컬레이션에 대 한 자세한 내용은 참조 하십시오 [트랜잭션 관리 에스컬레이션](http://msdn.microsoft.com/en-us/5b87ae58-8ccf-4b9b-9715-41e4aade89b7)합니다. PSPE에 대 한 자세한 내용은 참조 하십시오. [최적화를 사용 하 여 단일 단계 커밋 및 승격 가능한 단일 단계 알림](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)합니다.       **하지만 참고** 이 방법은 사용 하 여 <xref:System.Security.Permissions.SecurityAction>신뢰할 수 없는 코드에서 호출 되 고 하지 못하도록; 직접 실행 호출자만 보유 하 고 필요는 `FullTrust` 사용 권한 집합입니다.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public bool EnlistPromotableSinglePhase (System.Transactions.IPromotableSinglePhaseNotification promotableSinglePhaseNotification);
    parameters:
    - id: promotableSinglePhaseNotification
      type: System.Transactions.IPromotableSinglePhaseNotification
      description: "A <xref href=&quot;System.Transactions.IPromotableSinglePhaseNotification&quot;> </xref> 참가자가 구현한 인터페이스입니다."
    return:
      type: System.Boolean
      description: "A <xref href=&quot;System.Transactions.SinglePhaseEnlistment&quot;> </xref> 인터페이스 구현을 설명 합니다."
  overload: System.Transactions.Transaction.EnlistPromotableSinglePhase*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  id: EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)
  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)
  fullName: System.Transactions.Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "승격할 수 있는 단일 단계 참여 (PSPE)를 통해 내부 트랜잭션이 있는 리소스 관리자를 등록 합니다."
  remarks: "에 대 한 지정 된 값의 `promoterType` 매개 변수는 `TransactionInterop.PromoterTypeDtc`, 트랜잭션이 **해야** MSDTC에 의해 승격 및 `byte[]` 에서 반환 된는 `IPromotableSinglePhaseNotification.Promote` 메서드 **해야** MSDTC 트랜잭션 전파 토큰 이어야 합니다.       에 대 한 지정 된 값은 `promoterType` 매개 변수는 **하지**`TransactionInterop.PromoterTypeDTC`, MSDTC를 아니라 호출자의 구현에 의해 대신 트랜잭션이 승격 되지 것입니다 `IPromotableSinglePhaseNotification`합니다. 후속 작업에서 반환 되는 트랜잭션 집합이 없는이 호출에 성공한 경우는 `TransactionPromotionException`합니다. 이러한 작업은:- `Transaction.EnlistDurable`       -    `TransactionInterop.GetDtcTransaction`       -    `TransactionInterop.GetExportCookie`       -    `TransctionInterop.GetTransmitterPropagationToken` -트랜잭션 개체의 Serialization"
  syntax:
    content: public bool EnlistPromotableSinglePhase (System.Transactions.IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Guid promoterType);
    parameters:
    - id: promotableSinglePhaseNotification
      type: System.Transactions.IPromotableSinglePhaseNotification
      description: "A <xref href=&quot;System.Transactions.IPromotableSinglePhaseNotification&quot;> </xref> 참가자가 구현한 인터페이스입니다."
    - id: promoterType
      type: System.Guid
      description: "분산된 된 트랜잭션 프로세서의 형식입니다."
    return:
      type: System.Boolean
      description: "A <xref href=&quot;System.Transactions.SinglePhaseEnlistment&quot;> </xref> 인터페이스 구현을 설명 합니다."
  overload: System.Transactions.Transaction.EnlistPromotableSinglePhase*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  id: EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "트랜잭션에 참여 하는 두 단계 커밋 지원 일시적 리소스 관리자를 등록 합니다."
  remarks: "일시적 리소스 관리자 참여 된 트랜잭션을 완료 하는 오류를 복구할 수 없습니다. 트랜잭션에서 영속적 참여 항목을 가져오려면는 <xref:System.Transactions.Transaction.EnlistDurable%2A>메서드.</xref:System.Transactions.Transaction.EnlistDurable%2A>       이 메서드를 통해 트랜잭션에 참여 한 리소스 관리자에 정의 된 메서드에 해당 하는&2; 단계 커밋 알림을 수신는 <xref:System.Transactions.IEnlistmentNotification>인터페이스.</xref:System.Transactions.IEnlistmentNotification>"
  example:
  - "The following example shows an implementation of <xref:System.Transactions.IEnlistmentNotification> interface, as well as enlisting the object as a participant in a transaction using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method.  \n  \n [!code-cs[Tx_Enlist#1](~/add/codesnippet/csharp/1d69bab4-4268-46d9-8f3f-_1.cs)]\n [!code-vb[Tx_Enlist#1](~/add/codesnippet/visualbasic/1d69bab4-4268-46d9-8f3f-_1.vb)]"
  syntax:
    content: public System.Transactions.Enlistment EnlistVolatile (System.Transactions.IEnlistmentNotification enlistmentNotification, System.Transactions.EnlistmentOptions enlistmentOptions);
    parameters:
    - id: enlistmentNotification
      type: System.Transactions.IEnlistmentNotification
      description: "구현 하는 개체는 <xref href=&quot;System.Transactions.IEnlistmentNotification&quot;> </xref> 인터페이스&2; 단계 커밋 알림을 받을 수 있습니다."
    - id: enlistmentOptions
      type: System.Transactions.EnlistmentOptions
      description: "<xref href=&quot;System.Transactions.EnlistmentOptions&quot;></xref>리소스 관리자가 준비 단계 추가 작업을 수행 합니다."
    return:
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref> 참여를 설명 하는 개체입니다."
  overload: System.Transactions.Transaction.EnlistVolatile*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  id: EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "트랜잭션에 참여할 수 있는 단일 단계 커밋 최적화를 지 원하는 volatile 리소스 관리자를 등록 합니다."
  remarks: "일시적 리소스 관리자 참여 된 트랜잭션을 완료 하는 오류를 복구할 수 없습니다. 트랜잭션에서 영속적 참여 항목을 가져오려면는 <xref:System.Transactions.Transaction.EnlistDurable%2A>메서드.</xref:System.Transactions.Transaction.EnlistDurable%2A> 휘발성 및 지속적인 리소스: 리소스를 참여 하는 방법에 대 한 자세한 내용은 참조 하십시오. [A 리소스 관리자 구현](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)합니다. 리소스 관리자가 준비 및 커밋 알림에 응답 하는 방법에 대 한 자세한 내용은 참조 하십시오. [커밋하는 트랜잭션에서 단일 단계 및 다중 단계](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)합니다.       리소스 관리자 구현에이 방법으로 인 리스트 먼 트를 하는 경우에 해당 하지 않을 단일 단계 커밋 받는다고 점에 유의 해야 합니다. 트랜잭션 관리자&2; 단계 커밋 알림을 대신 보낼 여전히 수 있습니다. 단일 단계 커밋 최적화에 대 한 자세한 내용은 참조 하십시오. [최적화를 사용 하 여 단일 단계 커밋 및 승격 가능한 단일 단계 알림](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)합니다."
  syntax:
    content: public System.Transactions.Enlistment EnlistVolatile (System.Transactions.ISinglePhaseNotification singlePhaseNotification, System.Transactions.EnlistmentOptions enlistmentOptions);
    parameters:
    - id: singlePhaseNotification
      type: System.Transactions.ISinglePhaseNotification
      description: "구현 하는 개체는 <xref href=&quot;System.Transactions.ISinglePhaseNotification&quot;> </xref> 단일 단계 커밋 및&2; 단계 커밋 알림을 받을 수 있어야 하는 인터페이스입니다."
    - id: enlistmentOptions
      type: System.Transactions.EnlistmentOptions
      description: "<xref href=&quot;System.Transactions.EnlistmentOptions&quot;></xref>리소스 관리자가 준비 단계 추가 작업을 수행 합니다."
    return:
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref> 참여를 설명 하는 개체입니다."
  overload: System.Transactions.Transaction.EnlistVolatile*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Transaction.Equals(Object)
  fullName: System.Transactions.Transaction.Equals(Object)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "이 트랜잭션이 지정된 된 개체가 같은지 여부를 결정 합니다."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "이 인스턴스와 비교할 개체입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <code> obj </code> 이 트랜잭션이 되 고, 그렇지 않으면 동일 하 고 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Transactions.Transaction.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.GetHashCode
  id: GetHashCode
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Transaction.GetHashCode()
  fullName: System.Transactions.Transaction.GetHashCode()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "이 인스턴스에 대 한 해시 코드를 반환합니다."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "부호 있는 32 비트 정수 해시 코드입니다."
  overload: System.Transactions.Transaction.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.GetPromotedToken
  id: GetPromotedToken
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: GetPromotedToken()
  nameWithType: Transaction.GetPromotedToken()
  fullName: System.Transactions.Transaction.GetPromotedToken()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "가져옵니다는 `byte[]` 에서 반환 되는 `Promote` 트랜잭션을 승격할 때 메서드."
  remarks: "이 메서드는 영향을 주는 경우 승격 되지 않아 트랜잭션의 승격이 발생 합니다.       반환 된 형식 `byte[]` 값에 의해 정의 `Transation.PromoterType` 속성입니다. 경우의 값은 `Transaction.PromoterType` 속성은 `TransactionInterop.PromoterTypeDtc` 또는 `Guid.Empty`, 하면 `byte[]` 이 메서드에서 반환 된 MSDTC 전송기 전파 토큰입니다. 에 대 한 다른 모든 값은 `Transaction.PromoterType` 속성의 호출자에 의해 정의 되는 형식을 지정 `Transaction.EnlistPromotableSinglePhase` 속성 형식 값을 지정 하는 합니다. 확장 된 해석 하기 위해서는 후자의 경우, 토큰 해야 합니다 적용 하는 코드에 대 한 설명서를 참조 하십시오.는 `EnlistPromotableSinglePhase` 호출 합니다."
  syntax:
    content: public byte[] GetPromotedToken ();
    parameters: []
    return:
      type: System.Byte[]
      description: "`byte[]` 에서 반환 되는 `Promote` 트랜잭션을 승격할 때 메서드."
  overload: System.Transactions.Transaction.GetPromotedToken*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.IsolationLevel
  id: IsolationLevel
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: IsolationLevel
  nameWithType: Transaction.IsolationLevel
  fullName: System.Transactions.Transaction.IsolationLevel
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "트랜잭션 격리 수준을 가져옵니다."
  remarks: "트랜잭션 격리 수준을 완료 되는 다른 트랜잭션이 트랜잭션 전에 휘발성 데이터에 갖는 액세스 수준이 결정 합니다. 격리 수준에 대 한 자세한 내용은 참조에 대 한 설명서는 <xref:System.Transactions.IsolationLevel>열거형.</xref:System.Transactions.IsolationLevel>"
  syntax:
    content: public System.Transactions.IsolationLevel IsolationLevel { get; }
    return:
      type: System.Transactions.IsolationLevel
      description: "중 하나는 <xref href=&quot;System.Transactions.IsolationLevel&quot;> </xref> 트랜잭션의 격리 수준을 나타내는 값입니다."
  overload: System.Transactions.Transaction.IsolationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  id: op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: op_Equality(Transaction,Transaction)
  nameWithType: Transaction.op_Equality(Transaction,Transaction)
  fullName: System.Transactions.Transaction.op_Equality(Transaction,Transaction)
  type: Operator
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "두 <xref href=&quot;System.Transactions.Transaction&quot;> </xref> 인스턴스가 동일 합니다."
  syntax:
    content: public static bool op_Equality (System.Transactions.Transaction x, System.Transactions.Transaction y);
    parameters:
    - id: x
      type: System.Transactions.Transaction
      description: "<xref href=&quot;System.Transactions.Transaction&quot;> </xref> 같음 연산자의 왼쪽에 있습니다."
    - id: y
      type: System.Transactions.Transaction
      description: "<xref href=&quot;System.Transactions.Transaction&quot;> </xref> 같음 연산자의 오른쪽에 인스턴스입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>x</code> and <code>y</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Transactions.Transaction.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  id: op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: op_Inequality(Transaction,Transaction)
  nameWithType: Transaction.op_Inequality(Transaction,Transaction)
  fullName: System.Transactions.Transaction.op_Inequality(Transaction,Transaction)
  type: Operator
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "지정 하는 값을 반환 합니다. 두 <xref href=&quot;System.Transactions.Transaction&quot;> </xref> 인스턴스가 다른 지 합니다."
  syntax:
    content: public static bool op_Inequality (System.Transactions.Transaction x, System.Transactions.Transaction y);
    parameters:
    - id: x
      type: System.Transactions.Transaction
      description: "<xref href=&quot;System.Transactions.Transaction&quot;> </xref> 같지 않음 연산자의 왼쪽에 인스턴스입니다."
    - id: y
      type: System.Transactions.Transaction
      description: "<xref href=&quot;System.Transactions.Transaction&quot;> </xref> 같지 않음 연산자의 오른쪽에 인스턴스입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>x</code> and <code>y</code> are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Transactions.Transaction.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  id: PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)
  nameWithType: Transaction.PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[.NET Framework 4.5.2 이상 버전에서 지원 됨]       트랜잭션에 참여 2 단계 커밋을 지 원하는 영구 리소스 관리자 등록 및 승격 합니다."
  syntax:
    content: public System.Transactions.Enlistment PromoteAndEnlistDurable (Guid resourceManagerIdentifier, System.Transactions.IPromotableSinglePhaseNotification promotableNotification, System.Transactions.ISinglePhaseNotification enlistmentNotification, System.Transactions.EnlistmentOptions enlistmentOptions);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "리소스 관리자 오류 사이 유지 하거나 다시 부팅 해야 하는 리소스 관리자에 대 한 고유 식별자입니다."
    - id: promotableNotification
      type: System.Transactions.IPromotableSinglePhaseNotification
      description: "내부 리소스 관리자에 게 분산 되지 않은 트랜잭션에 대 한 커밋 대리자 역할을 하는 개체입니다."
    - id: enlistmentNotification
      type: System.Transactions.ISinglePhaseNotification
      description: "구현 하는 개체는 <xref href=&quot;System.Transactions.IEnlistmentNotification&quot;> </xref> 를&2; 단계 커밋 알림을 수신할 인터페이스입니다."
    - id: enlistmentOptions
      type: System.Transactions.EnlistmentOptions
      description: "<xref href=&quot;System.Transactions.EnlistmentOptions&quot;></xref>리소스 관리자가 준비 단계 추가 작업을 수행 합니다."
    return:
      type: System.Transactions.Enlistment
      description: "[.NET Framework 4.5.2 이상 버전에서 지원 됨]       트랜잭션에 참여 2 단계 커밋을 지 원하는 영구 리소스 관리자 등록 및 승격 합니다."
  overload: System.Transactions.Transaction.PromoteAndEnlistDurable*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.PromoterType
  id: PromoterType
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: PromoterType
  nameWithType: Transaction.PromoterType
  fullName: System.Transactions.Transaction.PromoterType
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "형식을 고유 하 게 식별 된 `byte[]` 트랜잭션을 승격할 때 확장 메서드가 반환한 합니다."
  remarks: "이 속성의 값이 됩니다 트랜잭션이 승격 되지 않으며 아직 승격할 수 있는 단일 단계 참여 아직 없는 경우 `Guid.Empty`합니다. 이 속성의 값이 됩니다 경우 MSDTC를로 승격 된다는 또는 이었던 트랜잭션이 `TransactionInterop.PromoterTypeDtc`합니다. 트랜잭션이 변경 되었거나 비 MSDTC 프로모터를 통해 승격을 경우이 속성의 값에 대 한 이전 호출에 지정 된 값 됩니다 `Transaction.EnlistPromotableSinglePhase`합니다."
  syntax:
    content: public Guid PromoterType { get; }
    return:
      type: System.Guid
      description: "형식을 고유 하 게 식별 하는 guid는 `byte[]` 트랜잭션을 승격할 때 확장 메서드가 반환한 합니다."
  overload: System.Transactions.Transaction.PromoterType*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.Rollback
  id: Rollback
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: Rollback()
  nameWithType: Transaction.Rollback()
  fullName: System.Transactions.Transaction.Rollback()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "롤백 (중단) 트랜잭션이 있습니다."
  remarks: "이 메서드를 호출 하 여 트랜잭션 개체의 모든 복사본은 트랜잭션의 롤백을 시작할 수 있습니다. 만 원본 트랜잭션 개체 이며이 <xref:System.Transactions.CommittableTransaction>개체, 트랜잭션을 커밋하는 시도를 시작할 사용할 수 있습니다.</xref:System.Transactions.CommittableTransaction> 트랜잭션 결과 이미 확인 한 후이 메서드를 호출할 때 예외가 throw 됩니다."
  syntax:
    content: public void Rollback ();
    parameters: []
  overload: System.Transactions.Transaction.Rollback*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.Rollback(System.Exception)
  id: Rollback(System.Exception)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: Rollback(Exception)
  nameWithType: Transaction.Rollback(Exception)
  fullName: System.Transactions.Transaction.Rollback(Exception)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "롤백 (중단) 트랜잭션이 있습니다."
  syntax:
    content: public void Rollback (Exception e);
    parameters:
    - id: e
      type: System.Exception
      description: "롤백이 발생 한 이유에 대해 설명 합니다."
  overload: System.Transactions.Transaction.Rollback*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  id: SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)
  nameWithType: Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)
  fullName: System.Transactions.Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "비 MSDTC 프로모터를 통해 생성 된 분산된 트랜잭션 식별자를 설정 합니다."
  remarks: "이 메서드를 성공적으로 호출할 수만 동안는 `IPromotableSinglePhaseNotification.Promote` 메서드를 처리 하는 중입니다. 언제 든 지,이 메서드를 호출 하면는 `TransactionException` throw 됩니다.       지정된 된 값은 `promotableNotification` 에 원래 지정 된 동일한 개체 여야 합니다. 매개 변수는 `Transaction.EnlistPromotableSinglePhase` 호출 합니다. 이 경우, 아닌 경우 아니라면 `InvalidOperationException` throw 됩니다."
  syntax:
    content: public void SetDistributedTransactionIdentifier (System.Transactions.IPromotableSinglePhaseNotification promotableNotification, Guid distributedTransactionIdentifier);
    parameters:
    - id: promotableNotification
      type: System.Transactions.IPromotableSinglePhaseNotification
      description: "A <xref href=&quot;System.Transactions.IPromotableSinglePhaseNotification&quot;> </xref> 참가자가 구현한 인터페이스입니다."
    - id: distributedTransactionIdentifier
      type: System.Guid
      description: "분산된 트랜잭션 관리자에서 사용 하는 트랜잭션에 대 한 식별자입니다."
  overload: System.Transactions.Transaction.SetDistributedTransactionIdentifier*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Transaction.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Transactions.Transaction.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "가져옵니다는 <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> 이 트랜잭션을 직렬화 하는 데 필요한 데이터를 사용 합니다."
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> 데이터로 채울 합니다."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "대상 (참조 <xref:System.Runtime.Serialization.StreamingContext>)이이 serialization에 대 한.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.TransactionCompleted
  id: TransactionCompleted
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: TransactionCompleted
  nameWithType: Transaction.TransactionCompleted
  fullName: System.Transactions.Transaction.TransactionCompleted
  type: Event
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "트랜잭션이 완료 되었음을 나타냅니다."
  remarks: "이 이벤트의 트랜잭션에 대 한 결과 정보를 얻으려면 volatile 인 리스트 먼 트를 사용 하는 대신 등록할 수 있습니다. 에 전달 된 매개 변수는 <xref:System.Transactions.TransactionCompletedEventHandler>대리자는는 <xref:System.Transactions.Transaction>인스턴스.</xref:System.Transactions.Transaction> </xref:System.Transactions.TransactionCompletedEventHandler> 쿼리할 수 있습니다는 <xref:System.Transactions.Transaction.TransactionInformation%2A>속성의 인스턴스를 특정 인스턴스의 <xref:System.Transactions.TransactionInformation>, 해당 <xref:System.Transactions.TransactionInformation.Status%2A>사용 하 여 트랜잭션 상태를 포함 하는 속성의 <xref:System.Transactions.TransactionStatus>또는 <xref:System.Transactions.TransactionStatus>값.</xref:System.Transactions.TransactionStatus> </xref:System.Transactions.TransactionStatus> </xref:System.Transactions.TransactionInformation.Status%2A> </xref:System.Transactions.TransactionInformation> </xref:System.Transactions.Transaction.TransactionInformation%2A>       **주의** 부정적인이 이벤트에 등록에 연결 된 트랜잭션 성능에 영향을 줍니다."
  example:
  - "The following sample shows how an application can obtain the outcome of a transaction by subscribing to the TransactionCompleted event.  \n  \n [!code-cs[Tx_Outcome#1](~/add/codesnippet/csharp/e-system.transactions.tr_1.cs)]\n [!code-vb[Tx_Outcome#1](~/add/codesnippet/visualbasic/e-system.transactions.tr_1.vb)]"
  syntax:
    content: public event System.Transactions.TransactionCompletedEventHandler TransactionCompleted;
    return:
      type: System.Transactions.TransactionCompletedEventHandler
      description: "추가할 수 있습니다."
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "삭제 된 트랜잭션에 대해이 이벤트 등록 하려고 했습니다."
  platform:
  - net462
- uid: System.Transactions.Transaction.TransactionInformation
  id: TransactionInformation
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: TransactionInformation
  nameWithType: Transaction.TransactionInformation
  fullName: System.Transactions.Transaction.TransactionInformation
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "트랜잭션에 대 한 추가 정보를 검색합니다."
  syntax:
    content: public System.Transactions.TransactionInformation TransactionInformation { get; }
    return:
      type: System.Transactions.TransactionInformation
      description: "A <xref href=&quot;System.Transactions.TransactionInformation&quot;> </xref> 트랜잭션에 대 한 추가 정보가 들어 있는입니다."
  overload: System.Transactions.Transaction.TransactionInformation*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Transactions.Transaction.Clone
  parent: System.Transactions.Transaction
  isExternal: false
  name: Clone()
  nameWithType: Transaction.Clone()
  fullName: System.Transactions.Transaction.Clone()
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Transactions.Transaction.Current
  parent: System.Transactions.Transaction
  isExternal: false
  name: Current
  nameWithType: Transaction.Current
  fullName: System.Transactions.Transaction.Current
- uid: System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  parent: System.Transactions.Transaction
  isExternal: false
  name: DependentClone(DependentCloneOption)
  nameWithType: Transaction.DependentClone(DependentCloneOption)
  fullName: System.Transactions.Transaction.DependentClone(DependentCloneOption)
- uid: System.Transactions.DependentTransaction
  parent: System.Transactions
  isExternal: false
  name: DependentTransaction
  nameWithType: DependentTransaction
  fullName: System.Transactions.DependentTransaction
- uid: System.Transactions.DependentCloneOption
  parent: System.Transactions
  isExternal: false
  name: DependentCloneOption
  nameWithType: DependentCloneOption
  fullName: System.Transactions.DependentCloneOption
- uid: System.Transactions.Transaction.Dispose
  parent: System.Transactions.Transaction
  isExternal: false
  name: Dispose()
  nameWithType: Transaction.Dispose()
  fullName: System.Transactions.Transaction.Dispose()
- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)
- uid: System.Transactions.Enlistment
  parent: System.Transactions
  isExternal: false
  name: Enlistment
  nameWithType: Enlistment
  fullName: System.Transactions.Enlistment
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Transactions.IEnlistmentNotification
  parent: System.Transactions
  isExternal: false
  name: IEnlistmentNotification
  nameWithType: IEnlistmentNotification
  fullName: System.Transactions.IEnlistmentNotification
- uid: System.Transactions.EnlistmentOptions
  parent: System.Transactions
  isExternal: false
  name: EnlistmentOptions
  nameWithType: EnlistmentOptions
  fullName: System.Transactions.EnlistmentOptions
- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)
- uid: System.Transactions.ISinglePhaseNotification
  parent: System.Transactions
  isExternal: false
  name: ISinglePhaseNotification
  nameWithType: ISinglePhaseNotification
  fullName: System.Transactions.ISinglePhaseNotification
- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)
  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)
  fullName: System.Transactions.Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Transactions.IPromotableSinglePhaseNotification
  parent: System.Transactions
  isExternal: false
  name: IPromotableSinglePhaseNotification
  nameWithType: IPromotableSinglePhaseNotification
  fullName: System.Transactions.IPromotableSinglePhaseNotification
- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)
  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)
  fullName: System.Transactions.Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)
- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)
- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)
- uid: System.Transactions.Transaction.Equals(System.Object)
  parent: System.Transactions.Transaction
  isExternal: false
  name: Equals(Object)
  nameWithType: Transaction.Equals(Object)
  fullName: System.Transactions.Transaction.Equals(Object)
- uid: System.Transactions.Transaction.GetHashCode
  parent: System.Transactions.Transaction
  isExternal: false
  name: GetHashCode()
  nameWithType: Transaction.GetHashCode()
  fullName: System.Transactions.Transaction.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Transactions.Transaction.GetPromotedToken
  parent: System.Transactions.Transaction
  isExternal: false
  name: GetPromotedToken()
  nameWithType: Transaction.GetPromotedToken()
  fullName: System.Transactions.Transaction.GetPromotedToken()
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Transactions.Transaction.IsolationLevel
  parent: System.Transactions.Transaction
  isExternal: false
  name: IsolationLevel
  nameWithType: Transaction.IsolationLevel
  fullName: System.Transactions.Transaction.IsolationLevel
- uid: System.Transactions.IsolationLevel
  parent: System.Transactions
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Transactions.IsolationLevel
- uid: System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  parent: System.Transactions.Transaction
  isExternal: false
  name: op_Equality(Transaction,Transaction)
  nameWithType: Transaction.op_Equality(Transaction,Transaction)
  fullName: System.Transactions.Transaction.op_Equality(Transaction,Transaction)
- uid: System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  parent: System.Transactions.Transaction
  isExternal: false
  name: op_Inequality(Transaction,Transaction)
  nameWithType: Transaction.op_Inequality(Transaction,Transaction)
  fullName: System.Transactions.Transaction.op_Inequality(Transaction,Transaction)
- uid: System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  isExternal: false
  name: PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)
  nameWithType: Transaction.PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)
- uid: System.Transactions.Transaction.PromoterType
  parent: System.Transactions.Transaction
  isExternal: false
  name: PromoterType
  nameWithType: Transaction.PromoterType
  fullName: System.Transactions.Transaction.PromoterType
- uid: System.Transactions.Transaction.Rollback
  parent: System.Transactions.Transaction
  isExternal: false
  name: Rollback()
  nameWithType: Transaction.Rollback()
  fullName: System.Transactions.Transaction.Rollback()
- uid: System.Transactions.Transaction.Rollback(System.Exception)
  parent: System.Transactions.Transaction
  isExternal: false
  name: Rollback(Exception)
  nameWithType: Transaction.Rollback(Exception)
  fullName: System.Transactions.Transaction.Rollback(Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  parent: System.Transactions.Transaction
  isExternal: false
  name: SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)
  nameWithType: Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)
  fullName: System.Transactions.Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)
- uid: System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Transactions.Transaction
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Transaction.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Transactions.Transaction.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Transactions.Transaction.TransactionCompleted
  parent: System.Transactions.Transaction
  isExternal: false
  name: TransactionCompleted
  nameWithType: Transaction.TransactionCompleted
  fullName: System.Transactions.Transaction.TransactionCompleted
- uid: System.Transactions.TransactionCompletedEventHandler
  parent: System.Transactions
  isExternal: false
  name: TransactionCompletedEventHandler
  nameWithType: TransactionCompletedEventHandler
  fullName: System.Transactions.TransactionCompletedEventHandler
- uid: System.Transactions.Transaction.TransactionInformation
  parent: System.Transactions.Transaction
  isExternal: false
  name: TransactionInformation
  nameWithType: Transaction.TransactionInformation
  fullName: System.Transactions.Transaction.TransactionInformation
- uid: System.Transactions.TransactionInformation
  parent: System.Transactions
  isExternal: false
  name: TransactionInformation
  nameWithType: TransactionInformation
  fullName: System.Transactions.TransactionInformation
- uid: System.Transactions.Transaction.Clone*
  parent: System.Transactions.Transaction
  isExternal: false
  name: Clone
  nameWithType: Transaction.Clone
- uid: System.Transactions.Transaction.Current*
  parent: System.Transactions.Transaction
  isExternal: false
  name: Current
  nameWithType: Transaction.Current
- uid: System.Transactions.Transaction.DependentClone*
  parent: System.Transactions.Transaction
  isExternal: false
  name: DependentClone
  nameWithType: Transaction.DependentClone
- uid: System.Transactions.Transaction.Dispose*
  parent: System.Transactions.Transaction
  isExternal: false
  name: Dispose
  nameWithType: Transaction.Dispose
- uid: System.Transactions.Transaction.EnlistDurable*
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistDurable
  nameWithType: Transaction.EnlistDurable
- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase*
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistPromotableSinglePhase
  nameWithType: Transaction.EnlistPromotableSinglePhase
- uid: System.Transactions.Transaction.EnlistVolatile*
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistVolatile
  nameWithType: Transaction.EnlistVolatile
- uid: System.Transactions.Transaction.Equals*
  parent: System.Transactions.Transaction
  isExternal: false
  name: Equals
  nameWithType: Transaction.Equals
- uid: System.Transactions.Transaction.GetHashCode*
  parent: System.Transactions.Transaction
  isExternal: false
  name: GetHashCode
  nameWithType: Transaction.GetHashCode
- uid: System.Transactions.Transaction.GetPromotedToken*
  parent: System.Transactions.Transaction
  isExternal: false
  name: GetPromotedToken
  nameWithType: Transaction.GetPromotedToken
- uid: System.Transactions.Transaction.IsolationLevel*
  parent: System.Transactions.Transaction
  isExternal: false
  name: IsolationLevel
  nameWithType: Transaction.IsolationLevel
- uid: System.Transactions.Transaction.op_Equality*
  parent: System.Transactions.Transaction
  isExternal: false
  name: op_Equality
  nameWithType: Transaction.op_Equality
- uid: System.Transactions.Transaction.op_Inequality*
  parent: System.Transactions.Transaction
  isExternal: false
  name: op_Inequality
  nameWithType: Transaction.op_Inequality
- uid: System.Transactions.Transaction.PromoteAndEnlistDurable*
  parent: System.Transactions.Transaction
  isExternal: false
  name: PromoteAndEnlistDurable
  nameWithType: Transaction.PromoteAndEnlistDurable
- uid: System.Transactions.Transaction.PromoterType*
  parent: System.Transactions.Transaction
  isExternal: false
  name: PromoterType
  nameWithType: Transaction.PromoterType
- uid: System.Transactions.Transaction.Rollback*
  parent: System.Transactions.Transaction
  isExternal: false
  name: Rollback
  nameWithType: Transaction.Rollback
- uid: System.Transactions.Transaction.SetDistributedTransactionIdentifier*
  parent: System.Transactions.Transaction
  isExternal: false
  name: SetDistributedTransactionIdentifier
  nameWithType: Transaction.SetDistributedTransactionIdentifier
- uid: System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Transactions.Transaction
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: Transaction.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Transactions.Transaction.TransactionInformation*
  parent: System.Transactions.Transaction
  isExternal: false
  name: TransactionInformation
  nameWithType: Transaction.TransactionInformation
