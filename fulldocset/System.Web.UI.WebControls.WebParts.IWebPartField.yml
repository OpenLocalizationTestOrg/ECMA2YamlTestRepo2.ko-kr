### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.IWebPartField
  id: IWebPartField
  children:
  - System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(System.Web.UI.WebControls.WebParts.FieldCallback)
  - System.Web.UI.WebControls.WebParts.IWebPartField.Schema
  langs:
  - csharp
  name: IWebPartField
  nameWithType: IWebPartField
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField
  type: Interface
  summary: "단일 데이터 필드를 사용 하 여 두 개의 서버 컨트롤을 연결 하기 위한 공급자 인터페이스를 정의 합니다."
  remarks: "이 인터페이스는 웹 파트 연결에서 사용 되는 설계 되었습니다. 웹 파트 연결에 상주 하는 두 개의 서버 컨트롤에는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>영역 소비자 역할을 하는 한 컨트롤, 공급자 역할을 다른 컨트롤을 연결 및 공유 데이터를 설정 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 웹 파트 연결에서 데이터를 공유 하기 위한 메커니즘은 공급자는 콜백 메서드를 사용 하 여 소비자에 제공 하는 인터페이스 인스턴스를 합니다. 연결을 설정 하려면 소비자 및 공급자 둘 다 사용 해야 같은 인터페이스 형식을 데이터를 공유 합니다. 소비자는 공급자가 보낸 인터페이스 형식을 인식 하지 못하는 경우 컨트롤 변환기를 사용 하 여 연결할 수 있습니다 (한 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>개체) 소비자에서 인식 하는 유형으로 공급자에서 보내는 인터페이스 인스턴스를 변환 하는.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 연결에 대 한 자세한 내용은 참조 하십시오. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>및 [웹 파트 연결 개요](~/add/includes/ajax-current-ext-md.md).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>       IWebPartField 인터페이스는 데이터 필드에 따라 연결을 만들기 위한 표준 인터페이스도 설정 하는 웹 파트 컨트롤에 포함 된 공급자 인터페이스입니다. 웹 파트 연결에 사용 하는 사용자 지정 인터페이스를 만들 수도 있지만 많은 데이터 기반 웹 응용 프로그램에서 편리 하 게 일반적인 행 내용을 기반으로 한 연결을 만드는 (세부 정보를 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>인터페이스), 테이블 (세부 정보를 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.IWebPartTable>인터페이스), 또는 IWebPartField 인터페이스를 사용 하 여 데이터 원본의 필드입니다.</xref:System.Web.UI.WebControls.WebParts.IWebPartTable> </xref:System.Web.UI.WebControls.WebParts.IWebPartRow> 일반 연결에는 <xref:System.Web.UI.WebControls.WebParts.WebPart>공급자는 IWebPartField 인터페이스를 구현 하 고 특수 한 콜백 메서드에서 소비자에 게 인터페이스의 인스턴스를 제공 하는 대로 역할을 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 예를 들어 공급자가 웹 사용자의 우편 번호 데이터가 포함 된 사용자 정보 테이블의 필드에 대 한 IWebPartField 인터페이스를 구현할 수 있습니다. 다른 <xref:System.Web.UI.WebControls.WebParts.WebPart>인터페이스 인스턴스를 받을 수 다음 우편 번호 데이터를 추출 및 조회 및 우편 번호에 따라 날씨 정보를 표시 하는 특수 메서드를 정의 하는 소비자와 같이 동작을 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>       IWebPartField 인터페이스에 노출 된 두 명의 멤버가 있습니다. <xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A>에 캡슐화 된 데이터 필드에 대 한 스키마 정보를 반환 하는 속성을 <xref:System.ComponentModel.PropertyDescriptor>개체입니다.</xref:System.ComponentModel.PropertyDescriptor> </xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A> <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A>메서드 (예: 공급자 제어) 구현 자가 사용 하 여 콜백 메서드가 호출 되 면 인터페이스 인스턴스의 필드 데이터를 검색 하는 메서드 선언.</xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A>"
  example:
  - "The following code example demonstrates how to create a static connection between two controls using the IWebPartField interface. The code example has three parts:  \n  \n-   Source code for two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can form a connection using the IWebPartField interface, with one control acting as the provider, the other acting as the consumer.  \n  \n-   A Web page that hosts the controls and declares the static connection in persistence format.  \n  \n-   A description of what happens when the example code runs.  \n  \n The first part of the code example is the source code for the two custom controls. First is the code for the provider, which implements the IWebPartField interface. For simplicity in the example, the provider creates a table with some data rather than connecting to a database. The `GetConnectionInterface` method serves as the provider's connection point, the callback method that returns the interface instance to the consumer. As for the consumer, it retrieves the interface instance from the provider in its method named `SetConnectionInterface`, which is marked with a `ConnectionConsumer` attribute. After retrieving the instance of the interface, the consumer, in its `OnPreRender` method, calls the implementation of the <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> method in the provider, to retrieve the actual data.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_IWebPartField_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_353_1.cs)]\n [!code-vb[WebParts_IWebPartField_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_353_1.vb)]  \n  \n The second part of the code example is the Web page that declares the static connection and hosts the controls. Near the top of the page is a `Register` directive that declares the namespace of the source code contained in the App_Code directory. The connection is declared using an `<asp:webpartconnection>` element. The custom consumer and provider controls are declared in a `<zonetemplate>` element within an `<asp:webpartzone>` element, which is required for them to be able to connect (they must reside within a zone that inherits from the <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> class).  \n  \n [!code-cs[WebParts_IWebPartField_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_353_2.aspx)]\n [!code-vb[WebParts_IWebPartField_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_353_2.aspx)]  \n  \n Load the page in a browser. The consumer control displays the data provided from the specified field, which the provider makes available through an instance of the IWebPartField interface."
  syntax:
    content: public interface IWebPartField
  implements: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(System.Web.UI.WebControls.WebParts.FieldCallback)
  id: GetFieldValue(System.Web.UI.WebControls.WebParts.FieldCallback)
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  langs:
  - csharp
  name: GetFieldValue(FieldCallback)
  nameWithType: IWebPartField.GetFieldValue(FieldCallback)
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(FieldCallback)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "두 인터페이스에서 연결의 기본으로 사용 되는 필드의 값을 반환 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤입니다."
  remarks: "이 메서드를 사용 하 여 인터페이스에 의해 전달 된 데이터 필드 값을 검색 합니다."
  example:
  - "The following code example shows the implementation and use of the GetFieldValue method. The complete example is shown in the class overview for the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface. The provider control implements the GetFieldValue method, returning the value of a particular field in the data table. The consumer control calls the GetFieldValue method in its `OnPreRender` method, so that the value of the data can be written to the page.  \n  \n [!code-cs[WebParts_IWebPartField_Overview#2](~/add/codesnippet/csharp/c2381a5f-e812-4b8a-be4c-_1.cs)]\n [!code-vb[WebParts_IWebPartField_Overview#2](~/add/codesnippet/visualbasic/c2381a5f-e812-4b8a-be4c-_1.vb)]"
  syntax:
    content: public void GetFieldValue (System.Web.UI.WebControls.WebParts.FieldCallback callback);
    parameters:
    - id: callback
      type: System.Web.UI.WebControls.WebParts.FieldCallback
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.FieldCallback&quot;> </xref> 데이터를 수신 하는 메서드의 주소를 포함 하는 대리자입니다."
  overload: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.Schema
  id: Schema
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  langs:
  - csharp
  name: Schema
  nameWithType: IWebPartField.Schema
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField.Schema
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "두 데이터를 공유 하는 데 사용 되는 데이터 필드에 대 한 스키마 정보를 가져옵니다 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤입니다."
  remarks: "이 속성은 인터페이스에 의해 전달 되는 데이터에 대 한 속성 정보를 제공 합니다. 변환기와 소비자 컨트롤 형식, 내용에 대 한 정보를 얻으려면이 속성을 쿼리할 수 있습니다 및에 포함 된 필드의 기타 세부 정보는 <xref:System.Web.UI.WebControls.WebParts.IWebPartField>인터페이스 인스턴스 공급자가 보낸.</xref:System.Web.UI.WebControls.WebParts.IWebPartField>"
  example:
  - "The following code example shows the implementation and use of the Schema property. The complete example is shown in the class overview for the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface. The provider control implements the Schema property. Then, in its `GetFieldValue` method, it uses the property to retrieve the field value.  \n  \n [!code-cs[WebParts_IWebPartField_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_271_1.cs)]\n [!code-vb[WebParts_IWebPartField_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_271_1.vb)]"
  syntax:
    content: public System.ComponentModel.PropertyDescriptor Schema { get; }
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> 데이터 필드에 대 한 스키마 정보를 설명 하는 합니다."
  overload: System.Web.UI.WebControls.WebParts.IWebPartField.Schema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(System.Web.UI.WebControls.WebParts.FieldCallback)
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  isExternal: false
  name: GetFieldValue(FieldCallback)
  nameWithType: IWebPartField.GetFieldValue(FieldCallback)
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(FieldCallback)
- uid: System.Web.UI.WebControls.WebParts.FieldCallback
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: FieldCallback
  nameWithType: FieldCallback
  fullName: System.Web.UI.WebControls.WebParts.FieldCallback
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.Schema
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  isExternal: false
  name: Schema
  nameWithType: IWebPartField.Schema
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField.Schema
- uid: System.ComponentModel.PropertyDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue*
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  isExternal: false
  name: GetFieldValue
  nameWithType: IWebPartField.GetFieldValue
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.Schema*
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  isExternal: false
  name: Schema
  nameWithType: IWebPartField.Schema
