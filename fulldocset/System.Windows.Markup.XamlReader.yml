### YamlMime:ManagedReference
items:
- uid: System.Windows.Markup.XamlReader
  id: XamlReader
  children:
  - System.Windows.Markup.XamlReader.#ctor
  - System.Windows.Markup.XamlReader.CancelAsync
  - System.Windows.Markup.XamlReader.GetWpfSchemaContext
  - System.Windows.Markup.XamlReader.Load(System.IO.Stream)
  - System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)
  - System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)
  - System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  - System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)
  - System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)
  - System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  - System.Windows.Markup.XamlReader.LoadCompleted
  - System.Windows.Markup.XamlReader.Parse(System.String)
  - System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)
  langs:
  - csharp
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Windows.Markup.XamlReader
  type: Class
  summary: "XAML 입력을 읽고 WPF 기본 XAML 판독기 및 XAML 개체 작성기가 연결된을 사용 하 여 개체 그래프를 만듭니다."
  remarks: "동기 <xref:System.Windows.Markup.XamlReader.Load%2A>메서드는 정적 이지만 비동기 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A>메서드는 정적 및 사용할 XamlReader 클래스의 인스턴스를 필요로 합니다.</xref:System.Windows.Markup.XamlReader.LoadAsync%2A> </xref:System.Windows.Markup.XamlReader.Load%2A>       출력은 `Load` methods는 생성된 된 개체 트리 또는 개체 그래프의 루트 개체를 나타내는 단일 개체입니다. XamlReader에 의해 만들어진 개체 그래프 일반적으로 런타임 시 WPF 응용 프로그램의 기존 개체 트리에 추가 됩니다. 그렇지 않은 경우 새 개체 그래프는 WPF 응용 프로그램 모델의 목적에 대 한 연결이 끊어진 간주 됩니다. 즉, 렌더링 하지 않습니다 적용할 수 없습니다 액세스를 사용 하 여 개체 트리 기술을으로 WPF 응용 프로그램의 주 개체 트리 (예를 들어 Api <xref:System.Windows.FrameworkElement.FindName%2A>, <xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>).</xref:System.Windows.Media.VisualTreeHelper> </xref:System.Windows.LogicalTreeHelper> </xref:System.Windows.FrameworkElement.FindName%2A> 개체 트리 개념에 대 한 자세한 내용은 참조 하십시오. [In WPF](~/add/includes/ajax-current-ext-md.md)합니다.       XamlReader 다음과 같은 주요 시나리오는 지원:- **복제/개체 공장**: 참조 형식 일반적 추가적인 메커니즘 없이 WPF 개체 트리의에서 둘 이상의 위치에 포함 될 수 없습니다. (WPF에서 다시 사용할 또는 공유에 대 한 지원을 제공 하는 추가 메커니즘의 예로 기반으로 하는 개체 <xref:System.Windows.Freezable>와 같이 일반적으로 공유할 수 있는 개체에 대 한 지원 또는 <xref:System.Windows.Media.Brush>에서 항목으로 참조 되는 <xref:System.Windows.ResourceDictionary>.)</xref:System.Windows.ResourceDictionary> </xref:System.Windows.Media.Brush> </xref:System.Windows.Freezable> 개체 트리에 이미 있는 개체를 복제 하는 한 가지 방법은 <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=fullName>.</xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=fullName> 를 사용 하 여 개체를 serialize 하는 것 그런 다음 직렬화 된 문자열 입력으로 사용할 있습니다에 대 한 호출에 대 한 <xref:System.Windows.Markup.XamlReader.Load%2A>, 스트림 또는 <xref:System.Xml.XmlReader>중간자로.</xref:System.Xml.XmlReader> </xref:System.Windows.Markup.XamlReader.Load%2A>      - **적시에 정보를 기반으로 개체 생성**: 런타임에 바인딩 또는 사용자가 제공한 입력이 기존 개체의 상태를 변경 하는 다른 방법을 종종 있습니다. 예를 들어 둘 이상의 속성을 설정 하려면 동일한 값을 사용 하거나 데이터 바인딩을 사용할 수 있습니다. 여기서도 만들 개체의 형식이 결정할 수 있는 런타임 시 또는 사용자 상호 작용 하는 시나리오를 사용 하도록 설정한 경우 다음 만들어 이러한 개체에 대 한 문자열을 작성 하 여 하지만 <xref:System.Windows.Markup.XamlReader.Load%2A>입력은 종종 기술을 사용 하면 유용 합니다.</xref:System.Windows.Markup.XamlReader.Load%2A>      - **기존 리소스 기술을 사용 하 여**:는 <xref:System.IO.Stream>형식에서 자주 사용 되 다른 프레임 워크 또는 기술 응용 프로그램 경계 간의 데이터 나 개체를 전송에 대 한 또는 이와 유사한 상황에 대 한.</xref:System.IO.Stream> 그런 다음 사용할 수는 <xref:System.IO.Stream>저장 하거나 결국 응용 프로그램의 일부로 개체를 만드는 데 사용 하는 XAML 형식의 데이터를 얻을 수 있는 기술을.</xref:System.IO.Stream>      - **고정 문서:** 응용 프로그램에서 WPF 응용 프로그램 개체 트리의 UI에 대 한 로컬 또는 다운로드 한 XPS 문서를 로드할 수 있습니다.      > [!NOTE] > 개체 그래프를 개체 트리로 달리 때로는이 설명서에 설명 합니다. 엄격한 부모-자식 관계 항상 없으므로 런타임 WPF 응용 프로그램의 런타임 개체 관계에서 개체 그래프는 널리 적용 가능한 용어 합니다. 그러나 WPF에 두 개의 다른 트리 개념화 Api도 포함 되어 있으므로 (<xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>) WPF에서 대부분의 실제 경우를 트리 메타포 적절 하 게 여전히 적용 됩니다.</xref:System.Windows.Media.VisualTreeHelper> </xref:System.Windows.LogicalTreeHelper> 그러나 XAML 언어 관점에서 개체 그래프는 종종 생각 하면 XAML에서 개체 생성 방법에 대 한 XAML 언어 자체 반드시 지정 하지 않으므로 관계를 트리 구조로 더 다시 표시 하는 도우미 클래스 방법론은 가장 좋은 방법은 합니다.      ## 코드 액세스 보안, 느슨한 XAML 및 XamlReader XAML는 태그 언어 개체 인스턴스화 및 실행을 직접 나타내는입니다. 따라서 XAML에서 생성 된 요소는 생성 된 동일한 것으로 시스템 리소스 (예: 액세스, 파일 시스템 IO, 네트워크)와 상호 작용 하는 동일한 기능이 코드는 않습니다.       [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]지원 된 [!INCLUDE[TLA2#tla_net](~/add/includes/tla2sharptla-net-md.md)] 보안 프레임 워크 [!INCLUDE[TLA#tla_cas](~/add/includes/tlasharptla-cas-md.md)]합니다. 즉 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] 콘텐츠 인터넷 영역에서 실행 되는 실행 권한이 줄어듭니다. &quot;느슨한 XAML&quot; (컴파일되지 않은 XAML의 페이지 로드 시 해석 XAML 뷰어에서) 및 [!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)] 이 인터넷 영역에서 일반적으로 실행 되 고 동일한 권한 집합을 사용 합니다.  그러나 완전히 신뢰할 수 있는 응용 프로그램으로 로드 된 XAML 호스팅 응용 프로그램과 시스템 리소스에 대 한 동일한 액세스를 있습니다. 자세한 내용은 참조 [WPF 부분 신뢰 보안](~/add/includes/ajax-current-ext-md.md)합니다.       XamlReader에 대 한 이러한 문의 의미는 응용 프로그램 디자인 로드 하려는 경우 XAML에 대 한 신뢰 결정을 확인 해야 합니다. 신뢰할 수 없는 XAML을 로드 하는 경우에 결과 개체 그래프를 로드 하는 방법에 대 한 사용자 고유의 샌드 박싱 기술을 구현 하는 것이 좋습니다.       XamlReader 부분 신뢰 코드에서 호출할 수도 있습니다. 이 경우 인터넷 보안 영역의 코드 액세스 보안에 적용 됩니다. 인터넷 보안 영역에서 유효 하지 않으면 로드 된 XAML에 아무 것도 XAML 구문 분석 예외가 throw 됩니다. XBAP 및 XamlReader 인 부분을 실행 하는 플랫폼 수준에서 일부 신뢰 된 다른 경우 부분 신뢰 명시적 호출으로 동일한 예외 동작을을 가져옵니다.      ## WPF XAML, XAML 판독기/기록기 및 XAML 언어 버전 관리 [!INCLUDE[xaml2009](~/add/includes/xaml2009-md.md)] 와 같은 언어 기능을 포함 하 고 있습니다. 시그니처를 사용할 수 있습니다 `Load` 또는 `Parse` 이러한 기능을 사용 하는 XAML을 로드 합니다. 그러나, 이러한 언어 기능은 태그를 컴파일해야 하는 XAML에 대 한 지원 되지 않습니다 (에 대 한 XAML 등의 **페이지** 에서 WPF 응용 프로그램 또는 빌드 작업에서 태그 컴파일 작업와 관련 된 모든 XAML 빌드 작업).       WPF 형식 및 WPF 기술은 일반적 WPF 내부에 대 한 액세스를 사용 하는 개념을 지원 합니다. 예를 들어, WPF 종속성 속성을 구현 하는 방법을 효율적인 유형 멤버 조회에 대 한 내부 기술에 의존 합니다. 이러한 내부 구조에 대 한 액세스는 XAML 읽기 및 쓰기에 제공 된 Api에 의해 사용 하도록 설정 <xref:System.Windows.Markup.XamlWriter>및에서 XamlReader의 <xref:System.Windows.Markup>네임 스페이스 및 PresentationFramework 어셈블리.</xref:System.Windows.Markup> </xref:System.Windows.Markup.XamlWriter> 그러나 하위 XAML 판독기 및 XAML 작성기 System.Xaml 어셈블리에서 (클래스에 따라 <xref:System.Xaml.XamlReader?displayProperty=fullName>, <xref:System.Xaml.XamlWriter?displayProperty=fullName>) WPF 내부에 대 한 액세스 권한이 없습니다.</xref:System.Xaml.XamlWriter?displayProperty=fullName> </xref:System.Xaml.XamlReader?displayProperty=fullName> System.Xaml에서 모든 WPF 관련 어셈블리에 종속성이 있습니다. WPF 내부에 연결 되지 않은 System.Xaml 판독기와 작성기 올바르게 로드 하지 못했거나, 모든 WPF 저장 형식 또는 형식에 따라 WPF 형식입니다. 특히 System.Xaml 판독기와 작성기 WPF 종속성 속성을 속성 저장소 및 WPF 스타일, 리소스 사전 및 템플릿을 사용 하는 방법의 모든 문의 지원 같은 개념을 이해 하지 않습니다. 따라서는 선택할 수 있는: WPF 형식을 로드 하는 어떤 방식으로든에서 BAML 양식에서 XAML을 사용 하는 경우-PresentationFramework XAML 판독기 및 XAML 작성기를 사용 합니다.      -모든 WPF 형식 또는 BAML 형식의 XAML 사용 하지 않고도 하 고 다른 특정 기술 XAML 판독기 또는 XAML 작성기 구현 프레임 워크에 있는 관련 된 이유로 사용 하지 않는 경우 System.Xaml의 XAML 판독기 및 XAML 작성기를 사용 합니다.      ## .NET 4 XamlReader System.Xaml 백업 구현은 WPF 프레임 워크 수준 XAML 파서에 대 한 호출 가능 API 화면입니다. 같은 기본 XAML 파서가 성능도 런타임에 XAML을 로드 하 고 대상으로 하는 WPF 응용 프로그램에 대 한 구문 분석 [!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)] 및 [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]합니다.       대상으로 하는 경우 [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)], 외부 API는 같지만 구현 요소를 기반으로 만들어진는 [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] 대부분 XAML을 구문 분석의 기술 및 보고 측면의 향상 되는 System.Xaml 어셈블리의 일반 XAML 구현 합니다. 대상 지정 [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] 보고 예외는 System.Xaml에서 가져올 수 같은 구현 세부 정보는 참조로 System.Xaml를 포함 하는 포함 형식을 정의 하는 것은 아닙니다.      <a name=&quot;xamlTextUsage_XamlReader&quot;></a># # XAML 텍스트 사용"
  example:
  - "The following example converts a <xref:System.Windows.Controls.Button> into a string using the <xref:System.Windows.Markup.XamlWriter> class.  The string is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the XamlReader class.  \n  \n [!code-cs[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/add/codesnippet/csharp/XamlReaderWriterSnippets/Window1.xaml.cs#xamlreaderloadxmlreader)]\n [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/add/codesnippet/visualbasic/xamlreaderwritersnippets/window1.xaml.vb#xamlreaderloadxmlreader)]"
  syntax:
    content: public class XamlReader
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.#ctor
  id: '#ctor'
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Windows.Markup.XamlReader.XamlReader()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref> 클래스입니다."
  syntax:
    content: public XamlReader ();
    parameters: []
  overload: System.Windows.Markup.XamlReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.CancelAsync
  id: CancelAsync
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: CancelAsync()
  nameWithType: XamlReader.CancelAsync()
  fullName: System.Windows.Markup.XamlReader.CancelAsync()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "보류 중인 비동기 로드 작업이 없는 경우 현재 비동기 로드 작업을 중단 합니다."
  remarks: "Cancelasync 메서드가 비동기 작업입니다. 따라서 일부 로드에는 작업을 중단 하기 전에 발생할 수 있습니다."
  syntax:
    content: public void CancelAsync ();
    parameters: []
  overload: System.Windows.Markup.XamlReader.CancelAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.GetWpfSchemaContext
  id: GetWpfSchemaContext
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: GetWpfSchemaContext()
  nameWithType: XamlReader.GetWpfSchemaContext()
  fullName: System.Windows.Markup.XamlReader.GetWpfSchemaContext()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "반환 된 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 에 대 한 WPF 스키마 컨텍스트 설정을 나타내는 개체는 <xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>합니다."
  syntax:
    content: public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();
    parameters: []
    return:
      type: System.Xaml.XamlSchemaContext
      description: "A <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 에 대 한 WPF 스키마 컨텍스트 설정을 나타내는 개체를 <xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>합니다."
  overload: System.Windows.Markup.XamlReader.GetWpfSchemaContext*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XamlReader.Load(Stream)
  fullName: System.Windows.Markup.XamlReader.Load(Stream)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "지정 된 XAML 입력을 읽고 <xref:System.IO.Stream>반환는 <xref:System.Object>해당 개체 트리의 루트입니다.</xref:System.Object> </xref:System.IO.Stream>"
  remarks: ''
  example:
  - "The following example saves a <xref:System.Windows.Controls.Button> into a <xref:System.IO.MemoryStream> using the <xref:System.Windows.Markup.XamlWriter> class. The stream is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the <xref:System.Windows.Markup.XamlReader> class.  \n  \n [!code-cs[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/csharp/XamlReaderWriterSnippets/Window1.xaml.cs#xamlreaderloadxmlreader)]\n [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/visualbasic/xamlreaderwritersnippets/window1.xaml.vb#xamlreaderloadxmlreader)]"
  syntax:
    content: public static object Load (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "스트림 형식으로 로드 하는 XAML입니다."
    return:
      type: System.Object
      description: "만든된 개체 트리의 루트에 대 한 개체입니다."
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)
  id: Load(System.Xaml.XamlReader)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(XamlReader)
  nameWithType: XamlReader.Load(XamlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XamlReader)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "제공 된 XAML 입력을 읽고 <xref href=&quot;System.Xaml.XamlReader&quot;> </xref> 해당 개체 트리의 루트는 개체를 반환 합니다."
  remarks: "입력 <xref:System.Xaml.XamlReader> <xref:System.Windows.Baml2006.Baml2006Reader>.</xref:System.Windows.Baml2006.Baml2006Reader> 수</xref:System.Xaml.XamlReader> 실행 시 또는 지역화 도구에 BAML에 로드 하는 방법입니다."
  syntax:
    content: public static object Load (System.Xaml.XamlReader reader);
    parameters:
    - id: reader
      type: System.Xaml.XamlReader
      description: "A <xref href=&quot;System.Xaml.XamlReader&quot;></xref> object. 이 입력된 XAML을 사용 하 여 초기화 해야 합니다."
    return:
      type: System.Object
      description: "이 개체에 만든된 개체 트리의 루트입니다."
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XamlReader.Load(XmlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XmlReader)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "지정 된 XAML 입력을 읽고 <xref:System.Xml.XmlReader>해당 개체 트리의 루트는 개체를 반환 합니다.</xref:System.Xml.XmlReader>"
  remarks: ''
  example:
  - "The following example converts a <xref:System.Windows.Controls.Button> into a string using the <xref:System.Windows.Markup.XamlWriter> class.  The string is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the <xref:System.Windows.Markup.XamlReader> class.  \n  \n [!code-cs[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/csharp/XamlReaderWriterSnippets/Window1.xaml.cs#xamlreaderloadxmlreader)]\n [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/visualbasic/xamlreaderwritersnippets/window1.xaml.vb#xamlreaderloadxmlreader)]"
  syntax:
    content: public static object Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>를 이미 로드 XAML XML 형식으로 로드를 입력 합니다.</xref:System.Xml.XmlReader>"
    return:
      type: System.Object
      description: "이 개체에 만든된 개체 트리의 루트입니다."
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  id: Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(Stream,ParserContext)
  nameWithType: XamlReader.Load(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Load(Stream,ParserContext)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "지정 된 XAML 입력을 읽고 <xref:System.IO.Stream>해당 개체 트리의 루트는 개체를 반환 합니다.</xref:System.IO.Stream>"
  syntax:
    content: public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "로드할 입력 XAML이 포함 된 스트림입니다."
    - id: parserContext
      type: System.Windows.Markup.ParserContext
      description: "파서에서 사용 하는 컨텍스트 정보입니다."
    return:
      type: System.Object
      description: "이 개체에 만든된 개체 트리의 루트입니다."
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>parserContext</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)
  id: LoadAsync(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadAsync(Stream)
  nameWithType: XamlReader.LoadAsync(Stream)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "지정 된 XAML 입력을 읽고 <xref:System.IO.Stream>하 고 해당 개체 트리의 루트를 반환 합니다.</xref:System.IO.Stream>"
  remarks: "비동기 XAML 로드 작업에는 루트 개체는 순수 하 게 되는 개체가 반환 처음 됩니다. 비동기적으로 계속 XAML 다음 구문 분석 하 고 루트 아래에 자식 개체가 채워집니다. 이것이 일반적인 WPF XAML 처리 동작 및 개체 수명의 WPF 개념 상호 작용 합니다. 일반적인 (비동기) 상호 작용에 요소를 반환 하 고 로드 된 것으로 보고 하기 전에 모든 자식 컬렉션을 포함 하는 개체의 모든 속성이 채워집니다. 해당 동작 상향식 방법 사용 루트 개체인를 사용할 수 있을 마지막 개체 트리를 만드는 것과 같습니다.       하면 일반적으로 WPF 응용 프로그램의 개체 트리에 일부 위치로 반환 되는 개체를 할당 합니다, 콘텐츠 지식을 계속 채워지고 및 전체가 UI의 일부로 노출 되는 경우 증분 레이아웃 업데이트가 발생할 수 있습니다. 이러한 이유로 일반적인 격리 또는 XAML에서 비동기적으로 로드 된 모든 개체를 가상화 하 고 응용 프로그램별 논리 또는 응용 프로그램 상태를 알릴 때 사용 하는 <xref:System.Windows.Markup.XamlReader.LoadCompleted>처리 됩니다.</xref:System.Windows.Markup.XamlReader.LoadCompleted>       XAML 입력을 비동기적으로 로드 하는 LoadAsync xaml에서 루트 요소에 대 한 입력 특성 및 값 포함 해야 `x:SynchronousMode=&quot;Async&quot;`합니다. 값은 대/소문자입니다. XAML 입력된 루트가 포함 되어 있지 않으면 `x:SynchronousMode=&quot;Async&quot;`, 예외가 throw 되지 않으며 호출 동기 로드로 처리 됩니다 (참조 <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>).</xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>       인스턴스당 하나의 비동기 로드 작업은 <xref:System.Windows.Markup.XamlReader>클래스는 한 번에 수행할 수 있습니다.</xref:System.Windows.Markup.XamlReader>  동일한 인스턴스에서 둘 이상의 비동기 작업을 시도 하는 경우는 <xref:System.Windows.Markup.XamlReader>클래스는 <xref:System.InvalidOperationException>throw 됩니다.</xref:System.InvalidOperationException> </xref:System.Windows.Markup.XamlReader>"
  syntax:
    content: public object LoadAsync (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "로드할 입력 XAML을 포함 하는 스트림."
    return:
      type: System.Object
      description: "이 개체에 만든된 개체 트리의 루트입니다."
  overload: System.Windows.Markup.XamlReader.LoadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "보류 중인 여러 부하 작업이 동일한 동시 <xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)
  id: LoadAsync(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadAsync(XmlReader)
  nameWithType: XamlReader.LoadAsync(XmlReader)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(XmlReader)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "지정 된 XAML 입력을 읽고 <xref:System.Xml.XmlReader>하 고 해당 개체 트리의 루트를 반환 합니다.</xref:System.Xml.XmlReader>"
  remarks: "비동기 XAML 로드 작업에는 루트 개체는 순수 하 게 되는 개체가 반환 처음 됩니다. 비동기적으로 계속 XAML 다음 구문 분석 하 고 루트 아래에 자식 개체가 채워집니다. 이것이 일반적인 WPF XAML 처리 동작 및 개체 수명의 WPF 개념 상호 작용 합니다. 일반적인 (비동기) 상호 작용에 요소를 반환 하 고 로드 된 것으로 보고 하기 전에 모든 자식 컬렉션을 포함 하는 개체의 모든 속성이 채워집니다. 해당 동작 상향식 방법 사용 루트 개체인를 사용할 수 있을 마지막 개체 트리를 만드는 것과 같습니다.       하면 일반적으로 응용 프로그램의 개체 트리에 일부 위치로 LoadAsync에서 반환된 된 개체를 할당 합니다, 콘텐츠 지식을 계속 채워지고 및 전체가 UI의 일부로 노출 되는 경우 증분 레이아웃 업데이트가 발생할 수 있습니다. 이러한 이유로 일반적인 격리 또는 XAML에서 비동기적으로 로드 된 모든 개체를 가상화 하 고 응용 프로그램별 논리 또는 응용 프로그램 상태를 알릴 때 사용 하는 <xref:System.Windows.Markup.XamlReader.LoadCompleted>처리 됩니다.</xref:System.Windows.Markup.XamlReader.LoadCompleted>       LoadAsync 로드를 위해에서 XAML 입력을 비동기적으로, XAML 태그의 루트 요소는 특성 및 값 있어야 합니다. `x:SynchronousMode=&quot;Async&quot;`합니다. 값은 대/소문자입니다. XAML 태그 루트가 포함 되어 있지 않으면 `x:SynchronousMode=&quot;Async&quot;`, 예외가 throw 되지 않으며 호출 동기 로드로 처리 대신 됩니다 (참조 <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>).</xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>       인스턴스당 하나의 비동기 로드 작업은 <xref:System.Windows.Markup.XamlReader>클래스는 한 번에 수행할 수 있습니다.</xref:System.Windows.Markup.XamlReader>  동일한 인스턴스에서 둘 이상의 비동기 작업을 시도 하는 경우는 <xref:System.Windows.Markup.XamlReader>클래스는 <xref:System.InvalidOperationException>throw 됩니다.</xref:System.InvalidOperationException> </xref:System.Windows.Markup.XamlReader>"
  syntax:
    content: public object LoadAsync (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "기존 <xref:System.Xml.XmlReader>하에 이미 로드/읽기 XAML 입력.</xref:System.Xml.XmlReader>"
    return:
      type: System.Object
      description: "만든된 개체 트리의 루트입니다."
  overload: System.Windows.Markup.XamlReader.LoadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "여러 로드 작업은 동일한 동시에 수행 됩니다 <xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  id: LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadAsync(Stream,ParserContext)
  nameWithType: XamlReader.LoadAsync(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream,ParserContext)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "지정 된 XAML 입력을 읽고 <xref:System.IO.Stream>하 고 해당 개체 트리의 루트를 반환 합니다.</xref:System.IO.Stream>"
  remarks: "비동기 XAML 로드 작업에는 루트 개체는 순수 하 게 되는 개체가 반환 처음 됩니다. 비동기적으로 계속 XAML 다음 구문 분석 하 고 루트 아래에 자식 개체가 채워집니다. 이것이 일반적인 WPF XAML 처리 동작 및 개체 수명의 WPF 개념 상호 작용 합니다. 일반적인 (비동기) 상호 작용에 요소를 반환 하 고 로드 된 것으로 보고 하기 전에 모든 자식 컬렉션을 포함 하는 개체의 모든 속성이 채워집니다. 해당 동작 상향식 방법 사용 루트 개체인를 사용할 수 있을 마지막 개체 트리를 만드는 것과 같습니다.       하면 일반적으로 응용 프로그램의 개체 트리에 일부 위치로 반환 되는 개체를 할당 합니다, 콘텐츠 지식을 계속 채워지고 및 전체가 UI의 일부로 노출 되는 경우 증분 레이아웃 업데이트가 발생할 수 있습니다. 이러한 이유로 일반적인 격리 또는 XAML에서 비동기적으로 로드 된 모든 개체를 가상화 하 고 응용 프로그램별 논리 또는 응용 프로그램 상태를 알릴 때 사용 하는 <xref:System.Windows.Markup.XamlReader.LoadCompleted>처리 됩니다.</xref:System.Windows.Markup.XamlReader.LoadCompleted>       태그를 비동기적으로 로드 하는 LoadAsync에서 XAML 태그의 루트 요소 특성 및 값 포함 해야 `x:SynchronousMode=&quot;Async&quot;`합니다. 값은 대/소문자입니다. XAML 태그 루트가 포함 되어 있지 않으면 `x:SynchronousMode=&quot;Async&quot;`, 예외가 throw 되지 않으며 호출 동기 로드로 처리 됩니다 (참조 <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>).</xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>       인스턴스당 하나의 비동기 로드 작업은 <xref:System.Windows.Markup.XamlReader>클래스는 한 번에 수행할 수 있습니다.</xref:System.Windows.Markup.XamlReader>  동일한 인스턴스에서 둘 이상의 비동기 작업을 시도 하는 경우는 <xref:System.Windows.Markup.XamlReader>클래스는 <xref:System.InvalidOperationException>throw 됩니다.</xref:System.InvalidOperationException> </xref:System.Windows.Markup.XamlReader>"
  syntax:
    content: public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "로드할 입력 XAML을 포함 하는 스트림."
    - id: parserContext
      type: System.Windows.Markup.ParserContext
      description: "파서에서 사용 하는 컨텍스트 정보입니다."
    return:
      type: System.Object
      description: "만든된 개체 트리의 루트입니다."
  overload: System.Windows.Markup.XamlReader.LoadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "여러 로드 작업은 동일한 동시에 수행 됩니다 <xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadCompleted
  id: LoadCompleted
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadCompleted
  nameWithType: XamlReader.LoadCompleted
  fullName: System.Windows.Markup.XamlReader.LoadCompleted
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "비동기 로드 작업이 완료 될 때 발생 합니다."
  remarks: "비동기 로드 작업이 중단 LoadCompleted도 발생 합니다."
  syntax:
    content: public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;
    return:
      type: System.ComponentModel.AsyncCompletedEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Parse(System.String)
  id: Parse(System.String)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Parse(String)
  nameWithType: XamlReader.Parse(String)
  fullName: System.Windows.Markup.XamlReader.Parse(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "지정된 된 텍스트 문자열에서 XAML 입력을 읽고 지정된 된 태그의 루트에 해당 하는 개체를 반환 합니다."
  remarks: "구현 호출 하 여 <xref:System.Windows.Markup.XamlReader.Load%2A>문자열에서 스트림을 만든 후에 내부적으로.</xref:System.Windows.Markup.XamlReader.Load%2A> 참조 <xref:System.Windows.Markup.XamlReader.Load%2A>가능한 예외와 같은 추가 정보에 대 한.</xref:System.Windows.Markup.XamlReader.Load%2A>"
  syntax:
    content: public static object Parse (string xamlText);
    parameters:
    - id: xamlText
      type: System.String
      description: "XAML 하나의 텍스트 문자열로 입력 합니다."
    return:
      type: System.Object
      description: "만든된 개체 트리의 루트입니다."
  overload: System.Windows.Markup.XamlReader.Parse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)
  id: Parse(System.String,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Parse(String,ParserContext)
  nameWithType: XamlReader.Parse(String,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Parse(String,ParserContext)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "지정된 된 텍스트 문자열에서 XAML 태그를 읽고 (사용 하 여 지정 된 <xref href=&quot;System.Windows.Markup.ParserContext&quot;> </xref>) 하 고 지정된 된 태그의 루트에 해당 하는 개체를 반환 합니다."
  remarks: "구현 호출 하 여 <xref:System.Windows.Markup.XamlReader.Load%2A>문자열에서 스트림을 만든 후에 내부적으로.</xref:System.Windows.Markup.XamlReader.Load%2A> 참조 <xref:System.Windows.Markup.XamlReader.Load%2A>가능한 예외와 같은 추가 정보에 대 한.</xref:System.Windows.Markup.XamlReader.Load%2A>"
  syntax:
    content: public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);
    parameters:
    - id: xamlText
      type: System.String
      description: "XAML 하나의 텍스트 문자열로 입력 합니다."
    - id: parserContext
      type: System.Windows.Markup.ParserContext
      description: "파서에서 사용 하는 컨텍스트 정보입니다."
    return:
      type: System.Object
      description: "만든된 개체 트리의 루트입니다."
  overload: System.Windows.Markup.XamlReader.Parse*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Markup.XamlReader.#ctor
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Windows.Markup.XamlReader.XamlReader()
- uid: System.Windows.Markup.XamlReader.CancelAsync
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: CancelAsync()
  nameWithType: XamlReader.CancelAsync()
  fullName: System.Windows.Markup.XamlReader.CancelAsync()
- uid: System.Windows.Markup.XamlReader.GetWpfSchemaContext
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: GetWpfSchemaContext()
  nameWithType: XamlReader.GetWpfSchemaContext()
  fullName: System.Windows.Markup.XamlReader.GetWpfSchemaContext()
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(Stream)
  nameWithType: XamlReader.Load(Stream)
  fullName: System.Windows.Markup.XamlReader.Load(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(XamlReader)
  nameWithType: XamlReader.Load(XamlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XamlReader)
- uid: System.Xaml.XamlReader
  parent: System.Xaml
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
- uid: System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XamlReader.Load(XmlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(Stream,ParserContext)
  nameWithType: XamlReader.Load(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Load(Stream,ParserContext)
- uid: System.Windows.Markup.ParserContext
  parent: System.Windows.Markup
  isExternal: false
  name: ParserContext
  nameWithType: ParserContext
  fullName: System.Windows.Markup.ParserContext
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync(Stream)
  nameWithType: XamlReader.LoadAsync(Stream)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream)
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync(XmlReader)
  nameWithType: XamlReader.LoadAsync(XmlReader)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(XmlReader)
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync(Stream,ParserContext)
  nameWithType: XamlReader.LoadAsync(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream,ParserContext)
- uid: System.Windows.Markup.XamlReader.LoadCompleted
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadCompleted
  nameWithType: XamlReader.LoadCompleted
  fullName: System.Windows.Markup.XamlReader.LoadCompleted
- uid: System.ComponentModel.AsyncCompletedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: AsyncCompletedEventHandler
  nameWithType: AsyncCompletedEventHandler
  fullName: System.ComponentModel.AsyncCompletedEventHandler
- uid: System.Windows.Markup.XamlReader.Parse(System.String)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Parse(String)
  nameWithType: XamlReader.Parse(String)
  fullName: System.Windows.Markup.XamlReader.Parse(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Parse(String,ParserContext)
  nameWithType: XamlReader.Parse(String,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Parse(String,ParserContext)
- uid: System.Windows.Markup.XamlReader.#ctor*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader.XamlReader
- uid: System.Windows.Markup.XamlReader.CancelAsync*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: CancelAsync
  nameWithType: XamlReader.CancelAsync
- uid: System.Windows.Markup.XamlReader.GetWpfSchemaContext*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: GetWpfSchemaContext
  nameWithType: XamlReader.GetWpfSchemaContext
- uid: System.Windows.Markup.XamlReader.Load*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load
  nameWithType: XamlReader.Load
- uid: System.Windows.Markup.XamlReader.LoadAsync*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync
  nameWithType: XamlReader.LoadAsync
- uid: System.Windows.Markup.XamlReader.Parse*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Parse
  nameWithType: XamlReader.Parse
