### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IErrorHandler
  id: IErrorHandler
  children:
  - System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  - System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  langs:
  - csharp
  name: IErrorHandler
  nameWithType: IErrorHandler
  fullName: System.ServiceModel.Dispatcher.IErrorHandler
  type: Interface
  summary: "구현 자가 호출자에 게 반환 되는 오류 메시지를 제어 하 고 필요에 따라 사용자 지정 로깅 등 오류 처리를 수행할 수 있습니다."
  remarks: "예외가 throw 되 면 응용 프로그램의 동작을 명시적으로 제어를 IErrorHandler 인터페이스를 구현 하 고 추가 하는 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>의 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>속성.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcher> IErrorHandler를 사용 하면 명시적으로 생성 된 SOAP 오류를 제어 하는 클라이언트에 다시 보내고, 로깅과 같은 관련된 작업을 수행할 것인지 결정 합니다. 오류 처리기에 추가 된 순서 대로 호출 됩니다는 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>속성.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       구현 된 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>메서드를 클라이언트에 반환 되는 오류 메시지를 제어 합니다.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>       구현 된 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>로깅, 실패가 신속 하 고 확인 하 여 응용 프로그램을 종료 하는 오류를 포함 하 여 오류 관련 동작을 확인 하는 메서드.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>      > [!NOTE] > 때문에 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>여러 다른 위치에서 만든가 보장 되지 않습니다 메서드가 호출 되는 스레드에 대 한 메서드를 호출할 수 있습니다.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 에 종속 되지 않는 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>메서드가 작업 스레드에서 호출 된다고.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       모든 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>구현은 응답 메시지를 보내기 전에 처음으로 호출 됩니다.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 때 모든 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>구현은 호출 되 고 반환 하 고, 경우에 한 `fault` 이 아닌`null`, 작업 계약에 따라 클라이언트에 보내집니다.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 경우 `fault` 은 `null` 응답 메시지에 의해 제어 됩니다 모든 구현이 호출 된 후의 <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>속성 값.</xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>      > [!NOTE] > 예외가 결국 발생할 수 있습니다 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>구현이 호출 되 고 응답 메시지가 채널로 전달 됩니다.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> (예: 메시지를 직렬화 하는 데 어려움이) 채널 예외가 발생 하는 경우 IErrorHandler 개체 알림이 표시 됩니다. 이 경우 여전히 확인 해야 개발 환경의 catch 하 고 이러한 예외가 표시 또는 검색 문제를 추적 사용 하 합니다. 추적에 대 한 자세한 내용은 참조 [응용 프로그램 문제 해결에 대 한 추적 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.       응답 메시지 전송 된 후에, 모든 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>구현이 동일한 순서로 호출 됩니다.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       IErrorHandler 구현에 추가 되는 일반적으로 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>속성에는 서비스 및 클라이언트 (양방향 통신의 경우).</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       동작을 구현 하 여 런타임에 IErrorHandler를 추가할 수 있습니다 (중 하나는 <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>, 또는 <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName>개체)를 사용 하 여 동작을 프로그래밍 방식으로 구성 파일에서 또는 사용자 지정 특성 프로그램 IErrorHandler를 연결 합니다.</xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>       동작을 사용 하 여 런타임을 수정 하는 방법에 대 한 자세한 내용은 참조 [구성 하 고 런타임 동작을 확장](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates a service that implements IErrorHandler that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the IErrorHandler implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n```  \n  \n<configuration>  \n  <system.serviceModel>  \n    <services>  \n      <service   \n        name=\"Microsoft.WCF.Documentation.SampleService\"  \n        behaviorConfiguration=\"metaAndErrors\">  \n        <host>  \n          <baseAddresses>  \n            <add baseAddress=\"http://localhost:8080/SampleService\"/>  \n          </baseAddresses>  \n        </host>  \n        <endpoint  \n          address=\"\"  \n          binding=\"wsHttpBinding\"  \n          contract=\"Microsoft.WCF.Documentation.ISampleService\"  \n         />  \n        <endpoint  \n          address=\"mex\"  \n          binding=\"mexHttpBinding\"  \n          contract=\"IMetadataExchange\"  \n         />  \n      </service>  \n    </services>  \n    <behaviors>  \n      <serviceBehaviors>  \n        <behavior name=\"metaAndErrors\">  \n          <serviceDebug includeExceptionDetailInFaults=\"true\"/>  \n          <serviceMetadata httpGetEnabled=\"true\"/>  \n          <enforceGreetingFaults />  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n    <extensions>  \n      <behaviorExtensions>  \n        <add   \n          name=\"enforceGreetingFaults\"   \n          type=\"Microsoft.WCF.Documentation.EnforceGreetingFaultBehavior, HostApplication, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\"  \n        />  \n      </behaviorExtensions>  \n    </extensions>  \n  </system.serviceModel>  \n</configuration>  \n```"
  syntax:
    content: public interface IErrorHandler
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  id: HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "오류 관련 처리를 가능 하 고 발송자 세션과 특정 한 경우에는 인스턴스 컨텍스트를 중단 하는지 여부를 나타내는 값을 반환 합니다."
  remarks: "HandleError 메서드를 사용 하 여 오류 로깅, 시스템 알림, 응용 프로그램 및 등 종료와 같은 오류 관련 동작을 구현 하 고 예외가 적절 하 게 처리 되었는지 여부를 지정 하는 값을 반환 합니다.      > [!NOTE] > 있으므로 여러 다른 위치에서 만든가 보장 되지 않습니다에서 호출 하면 특정 스레드에서 HandleError 메서드를 호출할 수 있습니다. HandleError 메서드가 작업 스레드에서 호출 된다고에 종속 되지 않습니다.       모든 <xref:System.ServiceModel.Dispatcher.IErrorHandler>구현이 호출 됩니다.</xref:System.ServiceModel.Dispatcher.IErrorHandler> 기본적으로 (반환 값이 `false`), 발송자 모든 세션을 중단 하 고 중단 예외 여부는 <xref:System.ServiceModel.InstanceContext>경우 <xref:System.ServiceModel.InstanceContextMode>가 아닌 <xref:System.ServiceModel.InstanceContextMode>.</xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContext>  예외는으로 간주 됩니다 처리 되지 않은 한 모든 상태 손상 된 것으로 간주 됩니다.       반환할 `true` 이 기본 동작을 방지 하기 위해 HandleError에서 합니다. 오류 처리기를 반환 하는 경우 `true` 지시 [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] 실패 한 요청과 관련 된 상태를 계속 사용 해도 안전 하다 합니다.       오류 처리기를 반환 하는 경우 `true` 예외 것으로 간주 하는 메서드는 HandleError에서 처리 되지 않은 하 고 잠재적으로 그 결과는 중단 <xref:System.ServiceModel.InstanceContext?displayProperty=fullName>하 고 채널에서 세션 채널 또는 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName> <xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName>.</xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName> 속성이 설정 되지 않은</xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName> 통신할 때</xref:System.ServiceModel.InstanceContext?displayProperty=fullName> 기본 응답이 사용 됩니다       `error` 매개 변수는 `null` throw 된 예외 개체를 포함 합니다."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool HandleError (Exception error);
    parameters:
    - id: error
      type: System.Exception
      description: "처리 하는 동안 throw 되는 예외입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] (있는 경우) 세션을 중단 및 인스턴스 컨텍스트는 인스턴스 컨텍스트 없으면 없습니다 <xref href=&quot;System.ServiceModel.InstanceContextMode&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  id: ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "사용자 지정을 만들 수 있도록 &lt;xref:System.ServiceModel.FaultException%601&gt; 서비스 메서드 중 예외에서 반환 되는 합니다."
  remarks: "클라이언트에 반환 되는 사용자 지정 오류 메시지를 만들려면 ProvideFault 메서드를 구현 합니다.  ProvideFault 메서드는 WCF 런타임 같은 특히 심각한 예외를 인식 하 고 자체 예외를 다시 throw 하는 경우를 제외 하 고 작업을 유지 하는 예외에 대 한 항상 호출 됩니다. 모든 ProvideFault 구현이 호출 되는 오류 메시지는 클라이언트에 다시 전송 됩니다 (경우 `fault` 이 아닌`null`). 경우는 `fault` 매개 변수는 `null` 기본 오류가 클라이언트로 보내집니다.      > [!NOTE] >에서이 메서드 중 처리 오류의 원인인 인바운드 메시지를 사용할 수는 <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>속성.</xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>      > [!NOTE] > 있으므로 여러 다른 위치에서 만든가 보장 되지 않습니다 메서드가 호출 되는 스레드에 대 한 ProvideFault 메서드를 호출할 수 있습니다. ProvideFault 메서드가 작업 스레드에서 호출 된다고에 종속 되지 않습니다."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);
    parameters:
    - id: error
      type: System.Exception
      description: "<xref:System.Exception>서비스 작업 중 발생 하는 개체입니다.</xref:System.Exception>"
    - id: version
      type: System.ServiceModel.Channels.MessageVersion
      description: "메시지의 SOAP 버전입니다."
    - id: fault
      type: System.ServiceModel.Channels.Message
      description: "&lt;xref:System.ServiceModel.Channels.Message?displayProperty=fullName&gt; 클라이언트 또는 양방향 인 경우에서 서비스에 반환 되는 개체입니다."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
- uid: System.ServiceModel.Channels.MessageVersion
  parent: System.ServiceModel.Channels
  isExternal: true
  name: MessageVersion
  nameWithType: MessageVersion
  fullName: System.ServiceModel.Channels.MessageVersion
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError
  nameWithType: IErrorHandler.HandleError
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault
  nameWithType: IErrorHandler.ProvideFault
