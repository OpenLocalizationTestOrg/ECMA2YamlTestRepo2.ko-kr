### YamlMime:ManagedReference
items:
- uid: System.Windows.LogicalTreeHelper
  id: LogicalTreeHelper
  children:
  - System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)
  - System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)
  - System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)
  - System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)
  - System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)
  - System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)
  langs:
  - csharp
  name: LogicalTreeHelper
  nameWithType: LogicalTreeHelper
  fullName: System.Windows.LogicalTreeHelper
  type: Class
  summary: "논리적 트리에서 개체를 쿼리 하기 위한 정적 도우미 메서드를 제공 합니다."
  remarks: "사실 클래스 개체 또는 하위 노드가 논리 트리 내에서 특정 개체의 자식 컬렉션을 반환 하는 데 사용할 수 있는 메서드를 제공 합니다. 그러나 대부분의 일반적으로 수행 하는 개체 트리 작업은도 유사한 메서드나 <xref:System.Windows.FrameworkElement>또는 <xref:System.Windows.FrameworkContentElement>.</xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement> 속성에 의해 표시 예를 들어, 다음 시도:-정적을 호출 하는 대신 <xref:System.Windows.LogicalTreeHelper.GetChildren%2A>논리 자식에 대 한 열거자 개체를 반환 하는 메서드를 해당 개체에 대 한 콘텐츠 모델에는 표시 전용된 컬렉션을 사용 합니다.</xref:System.Windows.LogicalTreeHelper.GetChildren%2A> 콘텐츠 모델을 지 원하는 거의 모든 개체는 자식 개체의 컬렉션을 포함 하 고 해당 컬렉션에서 컬렉션 인터페이스를 직접 지원 제공 하는 일부 속성을 노출 합니다.      -대신 호출의 정적 <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>메서드 호출의 이름을 지정 하 여 자식 개체를 가져오려면는 <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName>또는 <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName>특정 개체에 메서드.</xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName> </xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> </xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>       사실 여러 수준에서 재귀적으로 논리 트리를 위아래로 이동 하 고 다양 한 부모 또는 자식 개체를 검사 하기 위한 일관 된 접근 방식을 사용 하려면 분석 시나리오에 가장 유용 합니다. 이 경우 있습니다, 정적 콘텐츠 모델의 혼합을에 액세스할 수 있는 하 고 더 많은 콘텐츠 모델을 사용 하 여 특정 Api는 너무 복잡 합니다."
  syntax:
    content: public static class LogicalTreeHelper
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)
  id: BringIntoView(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: BringIntoView(DependencyObject)
  nameWithType: LogicalTreeHelper.BringIntoView(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.BringIntoView(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "요청된 된 UI 요소 뷰를 표시 하려고 하 고 시킵니다는 <xref href=&quot;System.Windows.FrameworkElement.RequestBringIntoView&quot;> </xref> 결과 보고 하기 위해 대상에는 이벤트입니다."
  remarks: "인스턴스 메서드를 호출 하는 편리한 일반적으로 <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName>또는 <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName>이 정적 유틸리티 메서드가 아니라.</xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName> </xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName> 인스턴스 메서드의 동작은 정적 메서드의 동작 하는 것과 같습니다.       경우에는 `current` 제공 되는 UI 요소를 한 <xref:System.Windows.FrameworkContentElement>, 결과 이벤트는 여전히 동일 <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName>이벤트 발생 하 <xref:System.Windows.FrameworkContentElement>이벤트의 이벤트 데이터를 확인 하 여 식별할 수 있는.</xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName> </xref:System.Windows.FrameworkContentElement>"
  syntax:
    content: public static void BringIntoView (System.Windows.DependencyObject current);
    parameters:
    - id: current
      type: System.Windows.DependencyObject
      description: "UI 요소 뷰로 가져올입니다."
  overload: System.Windows.LogicalTreeHelper.BringIntoView*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)
  id: FindLogicalNode(System.Windows.DependencyObject,System.String)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: FindLogicalNode(DependencyObject,String)
  nameWithType: LogicalTreeHelper.FindLogicalNode(DependencyObject,String)
  fullName: System.Windows.LogicalTreeHelper.FindLogicalNode(DependencyObject,String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "찾아 지정된 된 이름을 가진 개체를 반환 하려고 시도 합니다. 검색이 지정된 된 개체에서 시작한 논리 트리 노드로 계속 합니다."
  remarks: "메서드 <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName>및 <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName>FindLogicalNode, 외견상으로 유사 하지만 서로 다른 논리에 의해 작동:-FindLogicalNode에 대 한 검색 방향을 자식 개체를 (트리); 방향으로 대 한 검색 방향을 `FindName` 메서드 (트리)를 부모 개체입니다.</xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> </xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName>      - `FindName` 메서드는 XAML 네임 스페이스의 개념에 의해 제어 됩니다. 사용 하 여 `FindName` 하나만 보장이 고유성을 적용 하는 XAML 이름 범위 이기 때문에 해당 이름의 개체가 존재 합니다. 반면, FindLogicalNode XAML 이름 범위를 무시 하 고 검색 하는 동안 XAML 이름 범위 경계를 넘을 수 있습니다. 따라서 보장이 없습니다의 고유성는 `elementName` 경계에 도달한 후 이름을 지정 합니다. XAML 이름 범위에 대 한 자세한 내용은 참조 [WPF XAML 이름 범위](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);
    parameters:
    - id: logicalTreeNode
      type: System.Windows.DependencyObject
      description: "검색을 시작할 개체입니다. 이 개체 중 하나 여야 합니다는 <xref href=&quot;System.Windows.FrameworkElement&quot;> </xref> 또는 <xref href=&quot;System.Windows.FrameworkContentElement&quot;> </xref>합니다."
    - id: elementName
      type: System.String
      description: "찾을 개체의 이름입니다."
    return:
      type: System.Windows.DependencyObject
      description: "그렇지 않은 경우 일치 하는 이름 가진 개체 반환 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우 논리적 트리에 일치 하는 이름을 찾지 못했습니다."
  overload: System.Windows.LogicalTreeHelper.FindLogicalNode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)
  id: GetChildren(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: GetChildren(DependencyObject)
  nameWithType: LogicalTreeHelper.GetChildren(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "논리적 트리를 처리 하 여 지정된 된 개체의 직계 자식 개체의 컬렉션을 반환 합니다."
  remarks: "확실 하지 않은 경우에 주로이 서명 및 도우미 메서드를 사용 하 여 여부 `current` 는 <xref:System.Windows.FrameworkElement>또는 <xref:System.Windows.FrameworkContentElement>확실 하지 않은 해당 개체의 클래스 자체의 정적 콘텐츠 모델이 컬렉션을 지원 하는지 여부 및.</xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement> 쿼리 중인 개체의 형식을 결정할 수 있습니다 하는 경우 해당 형식에 있는 사용자가 알고 있는 특정 콘텐츠 속성을 확인 합니다. 쿼리 하려는 개체를 알고 있는 경우는 예를 들어는 <xref:System.Windows.Controls.ItemsControl>, 확인 된 <xref:System.Windows.Controls.ItemsControl.Items%2A>속성은 컬렉션 인터페이스를 지원 하며 보다는 열거자 유용할 수 있는 강력한 형식의 컬렉션을 가져옵니다.</xref:System.Windows.Controls.ItemsControl.Items%2A> </xref:System.Windows.Controls.ItemsControl>"
  syntax:
    content: public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);
    parameters:
    - id: current
      type: System.Windows.DependencyObject
      description: "논리적 트리의 처리를 시작 하는 개체입니다. 중 하나 이어야 하는데이 <xref href=&quot;System.Windows.FrameworkElement&quot;> </xref> 또는 <xref href=&quot;System.Windows.FrameworkContentElement&quot;> </xref>합니다."
    return:
      type: System.Collections.IEnumerable
      description: "지정된 된 개체의 논리적 트리에서 직계 자식 개체의 열거 가능한 컬렉션입니다."
  overload: System.Windows.LogicalTreeHelper.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)
  id: GetChildren(System.Windows.FrameworkContentElement)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: GetChildren(FrameworkContentElement)
  nameWithType: LogicalTreeHelper.GetChildren(FrameworkContentElement)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "지정 된 직계 자식 개체의 컬렉션을 반환 <xref href=&quot;System.Windows.FrameworkContentElement&quot;> </xref> 논리적 트리를 처리 하 여 합니다."
  syntax:
    content: public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);
    parameters:
    - id: current
      type: System.Windows.FrameworkContentElement
      description: "논리적 트리의 처리를 시작 하는 개체입니다."
    return:
      type: System.Collections.IEnumerable
      description: "시작 하는 직계 자식 개체의 열거 가능한 컬렉션 <code> current </code> 논리적 트리에서 합니다."
  overload: System.Windows.LogicalTreeHelper.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)
  id: GetChildren(System.Windows.FrameworkElement)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: GetChildren(FrameworkElement)
  nameWithType: LogicalTreeHelper.GetChildren(FrameworkElement)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "지정 된 직계 자식 개체의 컬렉션을 반환 <xref href=&quot;System.Windows.FrameworkElement&quot;> </xref> 논리적 트리를 처리 하 여 합니다."
  syntax:
    content: public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);
    parameters:
    - id: current
      type: System.Windows.FrameworkElement
      description: "논리적 트리의 처리를 시작 하는 개체입니다."
    return:
      type: System.Collections.IEnumerable
      description: "시작 하는 직계 자식 개체의 열거 가능한 컬렉션 <code> current </code> 논리적 트리에서 합니다."
  overload: System.Windows.LogicalTreeHelper.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)
  id: GetParent(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: GetParent(DependencyObject)
  nameWithType: LogicalTreeHelper.GetParent(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.GetParent(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "논리적 트리를 처리 하 여 지정된 된 개체의 부모 개체를 반환 합니다."
  remarks: "이 메서드는 적절 한 형식 버전을 가져옵니다 되는 래퍼를 단순히 (<xref:System.Windows.FrameworkElement> 또는 <xref:System.Windows.FrameworkContentElement>)의 <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=fullName>또는 <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=fullName>속성; 하므로 알 수 없는 경우가 아니면는 `current` 형식 하려는 경우 대신 개별 인스턴스 속성을 확인 하십시오.</xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=fullName> </xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=fullName> </xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement>"
  syntax:
    content: public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);
    parameters:
    - id: current
      type: System.Windows.DependencyObject
      description: "에 대 한 부모 개체를 찾을 개체입니다. 중 하나 이어야 하는데이 <xref href=&quot;System.Windows.FrameworkElement&quot;> </xref> 또는 <xref href=&quot;System.Windows.FrameworkContentElement&quot;> </xref>합니다."
    return:
      type: System.Windows.DependencyObject
      description: "요청 된 부모 개체입니다."
  overload: System.Windows.LogicalTreeHelper.GetParent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: BringIntoView(DependencyObject)
  nameWithType: LogicalTreeHelper.BringIntoView(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.BringIntoView(DependencyObject)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: FindLogicalNode(DependencyObject,String)
  nameWithType: LogicalTreeHelper.FindLogicalNode(DependencyObject,String)
  fullName: System.Windows.LogicalTreeHelper.FindLogicalNode(DependencyObject,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetChildren(DependencyObject)
  nameWithType: LogicalTreeHelper.GetChildren(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(DependencyObject)
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetChildren(FrameworkContentElement)
  nameWithType: LogicalTreeHelper.GetChildren(FrameworkContentElement)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(FrameworkContentElement)
- uid: System.Windows.FrameworkContentElement
  parent: System.Windows
  isExternal: false
  name: FrameworkContentElement
  nameWithType: FrameworkContentElement
  fullName: System.Windows.FrameworkContentElement
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetChildren(FrameworkElement)
  nameWithType: LogicalTreeHelper.GetChildren(FrameworkElement)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(FrameworkElement)
- uid: System.Windows.FrameworkElement
  parent: System.Windows
  isExternal: false
  name: FrameworkElement
  nameWithType: FrameworkElement
  fullName: System.Windows.FrameworkElement
- uid: System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetParent(DependencyObject)
  nameWithType: LogicalTreeHelper.GetParent(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.GetParent(DependencyObject)
- uid: System.Windows.LogicalTreeHelper.BringIntoView*
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: BringIntoView
  nameWithType: LogicalTreeHelper.BringIntoView
- uid: System.Windows.LogicalTreeHelper.FindLogicalNode*
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: FindLogicalNode
  nameWithType: LogicalTreeHelper.FindLogicalNode
- uid: System.Windows.LogicalTreeHelper.GetChildren*
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetChildren
  nameWithType: LogicalTreeHelper.GetChildren
- uid: System.Windows.LogicalTreeHelper.GetParent*
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetParent
  nameWithType: LogicalTreeHelper.GetParent
