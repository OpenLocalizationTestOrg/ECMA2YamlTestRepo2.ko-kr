### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  id: LinqDataSourceStatusEventArgs
  children:
  - System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Exception)
  - System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object)
  - System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object,System.Int32)
  - System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception
  - System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled
  - System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result
  - System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount
  langs:
  - csharp
  name: LinqDataSourceStatusEventArgs
  nameWithType: LinqDataSourceStatusEventArgs
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  type: Class
  summary: "Provides data for the <xref href=&quot;System.Web.UI.WebControls.LinqDataSource.ContextCreated&quot;></xref>, <xref href=&quot;System.Web.UI.WebControls.LinqDataSource.Deleted&quot;></xref>, <xref href=&quot;System.Web.UI.WebControls.LinqDataSource.Inserted&quot;></xref>, <xref href=&quot;System.Web.UI.WebControls.LinqDataSource.Selected&quot;></xref>, and <xref href=&quot;System.Web.UI.WebControls.LinqDataSource.Updated&quot;></xref> events."
  remarks: "LinqDataSourceStatusEventArgs 클래스를 사용 하면 데이터에서 수행 된 작업의 결과 조사 하는 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤.</xref:System.Web.UI.WebControls.LinqDataSource> LinqDataSourceStatusEventArgs 개체에 대 한 이벤트 처리기로 전달 되는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, 및 <xref:System.Web.UI.WebControls.LinqDataSource.Updated>의 이벤트는 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤.</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.Updated> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted> </xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>       데이터 작업이 완료 되었습니다. 결과 데이터 개체에 저장 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>속성 및 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>속성은 `null`.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 데이터 작업이 실패 하는 경우 데이터 작업 중에 발생 한 예외에 저장 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>속성 및 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>속성은 `null`.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 으로 표시 되는 예외를 처리 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>속성 설정의 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>속성을 `true` 하는 예외를 throw 되지 것입니다.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>       통해 쿼리에서 반환 된 데이터 레코드의 총 수를 검색는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>"
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event. In the event handler, if the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property is `null`, the product ID is retrieved from the object in the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property. The product ID is a primary key for the table and is set by the database, therefore the value is not known until the insert operation has finished. The exception message is logged if the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property is not equal to `null`. The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> property is then set to `true`.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_259_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_259_1.aspx)]"
  syntax:
    content: 'public class LinqDataSourceStatusEventArgs : EventArgs'
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Exception)
  id: '#ctor(System.Exception)'
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  langs:
  - csharp
  name: LinqDataSourceStatusEventArgs(Exception)
  nameWithType: LinqDataSourceStatusEventArgs.LinqDataSourceStatusEventArgs(Exception)
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.LinqDataSourceStatusEventArgs(Exception)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&quot;> </xref> 데이터 작업의 결과로 발생 한 예외를 사용 하 여 클래스입니다."
  remarks: "이 생성자는 데이터 작업 중에 예외가 throw 될 때 사용 됩니다. <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>자동으로 속성이 `null`.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  syntax:
    content: public LinqDataSourceStatusEventArgs (Exception exception);
    parameters:
    - id: exception
      type: System.Exception
      description: "데이터 작업 중에 발생 한 오류입니다."
  overload: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  langs:
  - csharp
  name: LinqDataSourceStatusEventArgs(Object)
  nameWithType: LinqDataSourceStatusEventArgs.LinqDataSourceStatusEventArgs(Object)
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.LinqDataSourceStatusEventArgs(Object)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&quot;> </xref> 데이터 작업에서 데이터를 포함 하는 개체를 사용 하 여 클래스입니다."
  remarks: "이 생성자는 데이터 작업이 오류 없이 완료 되 면 사용 됩니다. `result` 매개 변수에 포함 데이터 작업의 결과 나타내는 개체입니다. <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>자동으로 속성이 `null`.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  syntax:
    content: public LinqDataSourceStatusEventArgs (object result);
    parameters:
    - id: result
      type: System.Object
      description: "데이터 작업에서 생성 되는 데이터를 포함 하는 개체입니다."
  overload: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object,System.Int32)
  id: '#ctor(System.Object,System.Int32)'
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  langs:
  - csharp
  name: LinqDataSourceStatusEventArgs(Object,Int32)
  nameWithType: LinqDataSourceStatusEventArgs.LinqDataSourceStatusEventArgs(Object,Int32)
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.LinqDataSourceStatusEventArgs(Object,Int32)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&quot;> </xref> 데이터 작업 및 반환 된 행 수의 데이터를 포함 하는 개체를 사용 하 여 클래스입니다."
  syntax:
    content: public LinqDataSourceStatusEventArgs (object result, int totalRowCount);
    parameters:
    - id: result
      type: System.Object
      description: "데이터 작업에서 생성 되는 데이터를 포함 하는 개체입니다."
    - id: totalRowCount
      type: System.Int32
      description: "데이터 검색 작업에서 반환 된 행의 수입니다."
  overload: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception
  id: Exception
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  langs:
  - csharp
  name: Exception
  nameWithType: LinqDataSourceStatusEventArgs.Exception
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "데이터 작업 중에 throw 된 예외를 가져옵니다."
  remarks: "데이터 작업 중에 예외가 발생 하는 경우는 예외는 Exception 속성에 저장 됩니다. 에 대 한 이벤트 처리기를 만들 수는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, 및 <xref:System.Web.UI.WebControls.LinqDataSource.Updated>이벤트 및 예외 속성을 통해 있는 경우 예외를 검색 합니다.</xref:System.Web.UI.WebControls.LinqDataSource.Updated> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted> </xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>"
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event. In the event handler, if the Exception property is `null`, the product ID is retrieved from the object in the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property. The product ID is a primary key for the table and is set by the database, so the value is not known until the insert operation has finished. The exception message is logged if the Exception property is not equal to `null`. The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> property is then set to `true`.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_503_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_503_1.aspx)]"
  syntax:
    content: public Exception Exception { get; }
    return:
      type: System.Exception
      description: "<xref:System.Exception>오류가 발생 했습니다; 예외를 나타내는 개체, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Exception>"
  overload: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled
  id: ExceptionHandled
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  langs:
  - csharp
  name: ExceptionHandled
  nameWithType: LinqDataSourceStatusEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "예외가 처리 되었는지 여부와 그 해야 throw 되지 않도록 다시를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "에 대 한 이벤트 처리기를 만들 수는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, 및 <xref:System.Web.UI.WebControls.LinqDataSource.Updated>이러한 작업 중에 발생 한 모든 예외를 검사 하는 이벤트입니다.</xref:System.Web.UI.WebControls.LinqDataSource.Updated> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted> </xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> 예외를 처리 하 고 다시 throw 하 여 원하지 않는 경우 ExceptionHandled 속성을 설정 `true`합니다. ExceptionHandled 속성을 설정 하지 않는 경우 `true`, 예외 호출 스택에 있는 다음 이벤트 처리기에 전파 됩니다."
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event. In the event handler, if the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property is `null`, the product ID is retrieved from the object in the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property. The product ID is a primary key for the table and is set by the database, therefore the value is not known until the insert operation has finished. The exception message is logged if the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property is not equal to `null`. The ExceptionHandled property is then set to `true`.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_702_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_702_1.aspx)]"
  syntax:
    content: public bool ExceptionHandled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>예외가 처리 되었습니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result
  id: Result
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  langs:
  - csharp
  name: Result
  nameWithType: LinqDataSourceStatusEventArgs.Result
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "데이터 작업의 결과 나타내는 개체를 가져옵니다."
  remarks: "데이터 작업에서 반환 된 값을 검사 하려면 결과 속성을 사용 합니다. 데이터 작업에서 출력 매개 변수를 검색 하거나 쿼리에서 반환 된 값을 수정할 수 있습니다.       결과 속성에 저장 된 데이터는 수행 된 데이터 작업의 형식에 따라 달라 집니다. 데이터를 삭제 하는 경우 결과 속성에 지정 된 형식의 개체를 포함 하는 고 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>데이터 소스에서 삭제 된 원래 값을 가진 속성입니다.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 를 삽입 하거나 데이터를 업데이트 하는 경우 결과 속성에 지정 된 형식의 개체를 포함 하는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>속성을 데이터 원본에 저장 된 새 값으로.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 데이터를 선택 하면 결과 속성은 쿼리의 결과 포함 합니다.       데이터를 그룹화 하거나에 지정 된 형식에서 속성의 하위 집합을 선택 하는 select 쿼리에 포함 되는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>동적으로 생성 된 형식의 개체를 포함 하는 속성을 결과 속성.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 결과 속성에 지정 된 형식의 개체를 포함 하는 그렇지 않은 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>"
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event. In the event handler, if the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property is `null`, the product ID is retrieved from the object in the Result property. The product ID is a primary key for the table and is set by the database, therefore the value is not known until the insert operation has finished. The exception message is logged if the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property is not equal to `null`. The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> property is then set to `true`.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_302_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_302_1.aspx)]"
  syntax:
    content: public object Result { get; }
    return:
      type: System.Object
      description: "데이터 작업에서 데이터를 포함 하는 개체입니다."
  overload: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount
  id: TotalRowCount
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  langs:
  - csharp
  name: TotalRowCount
  nameWithType: LinqDataSourceStatusEventArgs.TotalRowCount
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "데이터 검색 작업에서 데이터 집합의 총 행 수를 가져옵니다."
  remarks: "TotalRowCount 속성을 사용 하 여 데이터 검색 작업 중 데이터 집합의 레코드 수를 가져올 수 있습니다. 일반적으로 데이터 페이지를 표시 하는 때 레코드의 총 수를 표시 하려면이 속성을 검색 합니다.       데이터가 페이징 될 때 TotalRowCount 속성의 값은 쿼리에 의해 반환 되는 행의 실제 수와 다를 수 있습니다. 이 쿼리 수의 데이터의 해당 페이지에 필요한 행만 반환 합니다.       TotalRowCount 속성에 대 한 이벤트 처리기에서 액세스 될 경우에 쿼리에서 레코드 수가 포함 된 <xref:System.Web.UI.WebControls.LinqDataSource.Selected>이벤트.</xref:System.Web.UI.WebControls.LinqDataSource.Selected> 속성에 대 한 이벤트 처리기에서 액세스 될 때는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.Updated>이벤트, TotalRowCount 속성-1을 포함 합니다.</xref:System.Web.UI.WebControls.LinqDataSource.Updated> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted> </xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>       TotalRowCount 속성의 값에 따라 달라 집니다는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>속성은 <xref:System.Web.UI.WebControls.LinqDataSource>컨트롤 및는 `AllowPaging` 데이터 바인딩된 컨트롤의 속성입니다.</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 다음 표에서 TotalRowCount 속성에 대 한 가능한 값을 요약 합니다.      | LinqDataSource 컨트롤의 자동 페이지 속성 | 데이터 바인딩된 컨트롤의 AllowPaging 속성 | TotalRowCount 속성 | 결과 |   |-------------------------------------------------|-------------------------------------------------|----------------------------|-------------|   | `true`|`true`| 쿼리에 대 한 레코드 수입니다. | 데이터를 자동으로 페이징할. |   | `false`|`false`| 쿼리에 대 한 레코드 수입니다. | 데이터가 페이지 파일로 저장 되지 않습니다. |   | `true`|`false`|-1| 데이터가 페이지 파일로 저장 되지 않습니다. |   | `false`|`true`| 할당 한 값을 있습니다 <xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A>속성 이벤트 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>이벤트 처리기입니다. | 페이징을 사용자 지정할 때 지정 된 데이터 값에 따라 호출입니다. |</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A>"
  example:
  - "The following example shows a Web page with a <xref:System.Web.UI.WebControls.LinqDataSource> control, a <xref:System.Web.UI.WebControls.GridView> control, and a <xref:System.Web.UI.WebControls.Literal> control. The <xref:System.Web.UI.WebControls.LinqDataSource> control defines an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selected> event.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_60_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_60_1.aspx)]  \n  \n The following example shows the code for the event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selected> event. The value of the TotalRowCount property is assigned to the <xref:System.Web.UI.WebControls.Literal> control.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_60_2.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_60_2.cs)]"
  syntax:
    content: public int TotalRowCount { get; }
    return:
      type: System.Int32
      description: "데이터 검색 작업;에서 데이터 집합의 행의 총 수 -없으면&1;은 <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&quot;> </xref> 데이터 수정 작업 중 개체가 만들어진 이지만 사용 하도록 설정한 경우-1을 설정 하 여 페이징을 사용자 지정 <> </> *>를 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 설정 하 여 <> </> *>에 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Exception)
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  isExternal: false
  name: LinqDataSourceStatusEventArgs(Exception)
  nameWithType: LinqDataSourceStatusEventArgs.LinqDataSourceStatusEventArgs(Exception)
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.LinqDataSourceStatusEventArgs(Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object)
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  isExternal: false
  name: LinqDataSourceStatusEventArgs(Object)
  nameWithType: LinqDataSourceStatusEventArgs.LinqDataSourceStatusEventArgs(Object)
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.LinqDataSourceStatusEventArgs(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object,System.Int32)
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  isExternal: false
  name: LinqDataSourceStatusEventArgs(Object,Int32)
  nameWithType: LinqDataSourceStatusEventArgs.LinqDataSourceStatusEventArgs(Object,Int32)
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.LinqDataSourceStatusEventArgs(Object,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  isExternal: false
  name: Exception
  nameWithType: LinqDataSourceStatusEventArgs.Exception
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: LinqDataSourceStatusEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  isExternal: false
  name: Result
  nameWithType: LinqDataSourceStatusEventArgs.Result
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  isExternal: false
  name: TotalRowCount
  nameWithType: LinqDataSourceStatusEventArgs.TotalRowCount
  fullName: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  isExternal: false
  name: LinqDataSourceStatusEventArgs
  nameWithType: LinqDataSourceStatusEventArgs.LinqDataSourceStatusEventArgs
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception*
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  isExternal: false
  name: Exception
  nameWithType: LinqDataSourceStatusEventArgs.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled*
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: LinqDataSourceStatusEventArgs.ExceptionHandled
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result*
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  isExternal: false
  name: Result
  nameWithType: LinqDataSourceStatusEventArgs.Result
- uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount*
  parent: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
  isExternal: false
  name: TotalRowCount
  nameWithType: LinqDataSourceStatusEventArgs.TotalRowCount
