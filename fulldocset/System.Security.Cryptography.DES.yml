### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DES
  id: DES
  children:
  - System.Security.Cryptography.DES.#ctor
  - System.Security.Cryptography.DES.Create
  - System.Security.Cryptography.DES.Create(System.String)
  - System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  - System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  - System.Security.Cryptography.DES.Key
  langs:
  - csharp
  name: DES
  nameWithType: DES
  fullName: System.Security.Cryptography.DES
  type: Class
  summary: "모든 DES 구현이 파생 해야 표준 DES (데이터 암호화) 알고리즘에 대 한 기본 클래스를 나타냅니다."
  remarks: "이 알고리즘은 64 비트의 키 길이 지원 합니다.      > [!NOTE] > 표준 AES (고급 암호화), 최신 비대칭 암호화 알고리즘은 사용할 수 있습니다. <xref:System.Security.Cryptography.Aes>DES 클래스 대신 클래스</xref:System.Security.Cryptography.Aes> 를 사용 하는 것이 좋습니다. 레거시 응용 프로그램 및 데이터와 호환성을 위해서만 DES를 사용 합니다."
  example:
  - "The following code example uses <xref:System.Security.Cryptography.DESCryptoServiceProvider> (an implementation of DES) to encrypt a string to an in-memory buffer. It then decrypts and displays the round-tripped string.  \n  \n [!code-vb[TripleDESCryptoServiceProvider#1](~/add/codesnippet/visualbasic/t-system.security.crypto_29_1.vb)]\n [!code-cs[TripleDESCryptoServiceProvider#1](~/add/codesnippet/csharp/t-system.security.crypto_29_1.cs)]  \n  \n Decryption can be handled in the same way; use <xref:System.Security.Cryptography.DESCryptoServiceProvider.CreateDecryptor%2A> instead of <xref:System.Security.Cryptography.DESCryptoServiceProvider.CreateEncryptor%2A>. The same key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) used to encrypt the file must be used to decrypt it."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class DES : System.Security.Cryptography.SymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.SymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Clear
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  platform:
  - net462
- uid: System.Security.Cryptography.DES.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: DES()
  nameWithType: DES.DES()
  fullName: System.Security.Cryptography.DES.DES()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.DES&quot;> </xref> 클래스입니다."
  remarks: "추상 클래스의 인스턴스를 만들 수 없습니다. 응용 프로그램 코드에서는 파생된 클래스의 새 인스턴스를 만듭니다.       이 메서드는 보호 되는 필드의 초기화는 <xref:System.Security.Cryptography.SymmetricAlgorithm>클래스에는 다음 표에 표시 된 기본값입니다.</xref:System.Security.Cryptography.SymmetricAlgorithm>      | 필드 | 기본 값 |   |-----------|-------------------|   | <xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|&64; |   | <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|&64; |   | <xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|64|</xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue></xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue></xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>"
  syntax:
    content: protected DES ();
    parameters: []
  overload: System.Security.Cryptography.DES.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DES.Create
  id: Create
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Create()
  nameWithType: DES.Create()
  fullName: System.Security.Cryptography.DES.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "데이터 암호화 표준 수행 하는 암호화 개체의 인스턴스를 만듭니다 (<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>) 알고리즘."
  remarks: "인스턴스를 만듭니다는 <xref:System.Security.Cryptography.DES>데이터 암호화 및 해독에 사용할 수 있는 개체입니다.</xref:System.Security.Cryptography.DES>"
  example:
  - "The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in a file.  \n  \n [!code-vb[Cryptography.DES.Create.File#1](~/add/codesnippet/visualbasic/m-system.security.crypto_69_1.vb)]\n [!code-cpp[Cryptography.DES.Create.File#1](~/add/codesnippet/cpp/m-system.security.crypto_69_1.cpp)]\n [!code-cs[Cryptography.DES.Create.File#1](~/add/codesnippet/csharp/m-system.security.crypto_69_1.cs)]  \n  \n The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in memory.  \n  \n [!code-cs[Cryptography.DES.Create.Memory#1](~/add/codesnippet/csharp/m-system.security.crypto_69_2.cs)]\n [!code-cpp[Cryptography.DES.Create.Memory#1](~/add/codesnippet/cpp/m-system.security.crypto_69_2.cpp)]\n [!code-vb[Cryptography.DES.Create.Memory#1](~/add/codesnippet/visualbasic/m-system.security.crypto_69_2.vb)]"
  syntax:
    content: public static System.Security.Cryptography.DES Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.DES
      description: "암호화 개체입니다."
  overload: System.Security.Cryptography.DES.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DES.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Create(String)
  nameWithType: DES.Create(String)
  fullName: System.Security.Cryptography.DES.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "데이터 암호화 표준의 지정 된 구현 수행 하는 암호화 개체의 인스턴스를 만듭니다 (<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>) 알고리즘."
  remarks: ''
  example:
  - "The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in a file.  \n  \n [!code-cs[Cryptography.DES.Createstring.File#1](~/add/codesnippet/csharp/m-system.security.crypto_27_1.cs)]\n [!code-vb[Cryptography.DES.Createstring.File#1](~/add/codesnippet/visualbasic/m-system.security.crypto_27_1.vb)]\n [!code-cpp[Cryptography.DES.Createstring.File#1](~/add/codesnippet/cpp/m-system.security.crypto_27_1.cpp)]  \n  \n The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in memory.  \n  \n [!code-cs[Cryptography.DES.Createstring.Memory#1](~/add/codesnippet/csharp/m-system.security.crypto_27_2.cs)]\n [!code-cpp[Cryptography.DES.Createstring.Memory#1](~/add/codesnippet/cpp/m-system.security.crypto_27_2.cpp)]\n [!code-vb[Cryptography.DES.Createstring.Memory#1](~/add/codesnippet/visualbasic/m-system.security.crypto_27_2.vb)]"
  syntax:
    content: public static System.Security.Cryptography.DES Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "특정 구현 이름 <xref href=&quot;System.Security.Cryptography.DES&quot;> </xref> 사용 하도록 합니다."
    return:
      type: System.Security.Cryptography.DES
      description: "암호화 개체입니다."
  overload: System.Security.Cryptography.DES.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  id: IsSemiWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: IsSemiWeakKey(Byte[])
  nameWithType: DES.IsSemiWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsSemiWeakKey(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정된 된 키가 semi-weak 있는지 여부를 결정 합니다."
  remarks: "Semi-weak 키는 암호를 해독 하기 쉬운는 만드는 키 쌍입니다. 텍스트 semi-weak 키로 암호화 된 키가 semi-weak 파트너와 암호를 만들면 원본 텍스트를 반환 합니다. 6 개의 알려진된 semi-weak 키 쌍에 대 한 데이터 암호화 표준 없는 (<xref:System.Security.Cryptography.DES>) 알고리즘;이 해당 semi-weak 키에 대 한 메서드를 확인 합니다.</xref:System.Security.Cryptography.DES>       <xref:System.Security.Cryptography.CryptographicException>.</xref:System.Security.Cryptography.CryptographicException> Semi-weak 키 결과 설정 하려고 합니다. 때 <xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A>semi-weak 키 반환 되지 것입니다 임의의 키를 만들기 위해 호출 됩니다.</xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A>"
  syntax:
    content: public static bool IsSemiWeakKey (byte[] rgbKey);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "Semi-weak 인지 테스트할 비밀 키입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>키가 semi-weak; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Cryptography.DES.IsSemiWeakKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "크기는 <code> rgbKey </code> 매개 변수가 올바르지 않습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  id: IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: IsWeakKey(Byte[])
  nameWithType: DES.IsWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsWeakKey(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정된 된 키가 약한 지 여부를 결정 합니다."
  remarks: "약한 키는 암호를 해독 하기 쉬운는 만드는 키입니다. 텍스트 weak 키로 암호화 된 암호를 만들면 동일한 weak 키 다시 암호화 원본 텍스트를 반환 합니다. 한 데이터 암호화 표준에 대 한 네 가지 알려진 약한 키 (<xref:System.Security.Cryptography.DES>) 알고리즘;이 약한 해당 키에 대 한 메서드를 확인 합니다.</xref:System.Security.Cryptography.DES>       <xref:System.Security.Cryptography.CryptographicException>.</xref:System.Security.Cryptography.CryptographicException> 약한 키 결과 설정 하려고 합니다. 때 <xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A>호출 되는 임의 키를 만들려면 weak 키 반환 되지 것입니다.</xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A>"
  syntax:
    content: public static bool IsWeakKey (byte[] rgbKey);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "약한 지 테스트할 비밀 키입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>키가 약 합니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Cryptography.DES.IsWeakKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "크기는 <code> rgbKey </code> 매개 변수가 올바르지 않습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.DES.Key
  id: Key
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Key
  nameWithType: DES.Key
  fullName: System.Security.Cryptography.DES.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "데이터 암호화 표준에 대 한 비밀 키를 가져오거나 (<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>) 알고리즘."
  remarks: "이 속성이 `null` 사용 될 때 <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>새 임의 값을 만들어야 하기 위해 호출 됩니다.</xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>       키의 길이 <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>.</xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue> 동일 해야 합니다.       이 알고리즘은 64 비트의 키 길이 지원 합니다."
  syntax:
    content: public override byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "에 대 한 비밀 키의 <xref href=&quot;System.Security.Cryptography.DES&quot;> </xref> 알고리즘입니다."
  overload: System.Security.Cryptography.DES.Key*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "키를 설정 하려고 했습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "길이가 같지 않습니다. 키를 설정 하려고 했습니다 <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue&quot;> </xref>합니다."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Weak 키를 설정 하려고 했습니다 (참조 <> </> *>) 또는 semi-weak 키 (참조 <> </> *>)."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.DES.#ctor
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: DES()
  nameWithType: DES.DES()
  fullName: System.Security.Cryptography.DES.DES()
- uid: System.Security.Cryptography.DES.Create
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create()
  nameWithType: DES.Create()
  fullName: System.Security.Cryptography.DES.Create()
- uid: System.Security.Cryptography.DES
  parent: System.Security.Cryptography
  isExternal: false
  name: DES
  nameWithType: DES
  fullName: System.Security.Cryptography.DES
- uid: System.Security.Cryptography.DES.Create(System.String)
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create(String)
  nameWithType: DES.Create(String)
  fullName: System.Security.Cryptography.DES.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsSemiWeakKey(Byte[])
  nameWithType: DES.IsSemiWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsSemiWeakKey(Byte[])
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsWeakKey(Byte[])
  nameWithType: DES.IsWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsWeakKey(Byte[])
- uid: System.Security.Cryptography.DES.Key
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Key
  nameWithType: DES.Key
  fullName: System.Security.Cryptography.DES.Key
- uid: System.Security.Cryptography.DES.#ctor*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: DES
  nameWithType: DES.DES
- uid: System.Security.Cryptography.DES.Create*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create
  nameWithType: DES.Create
- uid: System.Security.Cryptography.DES.IsSemiWeakKey*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsSemiWeakKey
  nameWithType: DES.IsSemiWeakKey
- uid: System.Security.Cryptography.DES.IsWeakKey*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsWeakKey
  nameWithType: DES.IsWeakKey
- uid: System.Security.Cryptography.DES.Key*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Key
  nameWithType: DES.Key
