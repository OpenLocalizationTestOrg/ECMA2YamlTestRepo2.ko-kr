### YamlMime:ManagedReference
items:
- uid: System.Security.SuppressUnmanagedCodeSecurityAttribute
  id: SuppressUnmanagedCodeSecurityAttribute
  children:
  - System.Security.SuppressUnmanagedCodeSecurityAttribute.#ctor
  langs:
  - csharp
  name: SuppressUnmanagedCodeSecurityAttribute
  nameWithType: SuppressUnmanagedCodeSecurityAttribute
  fullName: System.Security.SuppressUnmanagedCodeSecurityAttribute
  type: Class
  summary: "관리 되는 코드가 스택 워크 없이 관리 되지 않는 코드를 호출할 수 있습니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "> [!CAUTION]> 각별히 주의 하 여이 특성을 사용 합니다. 잘못 사용 했습니다. 보안 허점이 생길 수 있습니다.       이 특성은 이렇게 할 때 런타임 보안 검사의 성능 저하를 초래 하지 않고 네이티브 코드를 호출 하려는 메서드에 적용할 수 있습니다. 비관리 코드를 호출할 때 수행 하는 스택 워크를 생략 하면 런타임 시 성능이 대폭 절약 합니다. 클래스에서이 특성을 사용 하 여 포함 된 모든 메서드에 적용 합니다.       일반적으로 관리 코드가 비관리 코드 (PInvoke 또는 COM interop를 네이티브 코드로) 하 여를 호출할 때마다는 대 한 요구는 `UnmanagedCode` 모든 호출자에 게 사용 권한을 허용 하는 데 필요한 권한이 있어야 합니다. 명시적이 특성을 적용 하 여 개발자가 런타임 시 요청을 표시 하지 않을 수 있습니다. 개발자는 비관리 코드로 전환 충분히 다른 방법으로 보호 되어 있는지 확인 하기 위해 책임을 져야 합니다. 에 대 한 요구는 `UnmanagedCode` 권한 링크 타임에 발생 합니다. 예를 들어 함수 B를 함수 호출 하는 경우 함수 B SuppressUnmanagedCodeSecurityAttribute로 함수 A-just-in-time 컴파일 동안 하지만 런타임 시 이후에 하지 비관리 코드 권한이 확인 됩니다.       이 특성은 효력이 PInvoke 메서드 (또는 PInvoke 메서드를 포함 하는 클래스)에 적용 될 때 또는 있는 interop 호출 걸 수 인터페이스의 정의 합니다. 다른 모든 컨텍스트에서 무시 됩니다.       이 특성은 관리 되지 않는 코드를 통해 시스템 리소스에 대 한 액세스를 제공 하는 클래스를 구현 하는 데 유용 합니다. 관리 되지 않는 코드에 액세스할 수 있는 권한이 없는 코드는 비관리 코드에 액세스 하려면이 특성이 있는 클래스를 호출할 수 있습니다. 이이 특성을 사용 하 여 클래스의 작성자가 보안 되도록 클래스를 프로그래밍 하는 경우 안전 하 게 보호만. 그렇지 않은 경우이 특성은 위험 하며 악용할 수를 사용 하는 코드를 허용할 수 있습니다.       이것은 아니며 선언적 보안 특성은 일반 특성 (에서 파생 <xref:System.Attribute>이 아니라 <xref:System.Security.Permissions.SecurityAttribute>).</xref:System.Security.Permissions.SecurityAttribute> </xref:System.Attribute>"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class SuppressUnmanagedCodeSecurityAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SuppressUnmanagedCodeSecurityAttribute.#ctor
  id: '#ctor'
  parent: System.Security.SuppressUnmanagedCodeSecurityAttribute
  langs:
  - csharp
  name: SuppressUnmanagedCodeSecurityAttribute()
  nameWithType: SuppressUnmanagedCodeSecurityAttribute.SuppressUnmanagedCodeSecurityAttribute()
  fullName: System.Security.SuppressUnmanagedCodeSecurityAttribute.SuppressUnmanagedCodeSecurityAttribute()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.SuppressUnmanagedCodeSecurityAttribute&quot;> </xref> 클래스입니다."
  remarks: "기본 생성자는 모든 필드를 기본값으로 초기화 합니다."
  syntax:
    content: public SuppressUnmanagedCodeSecurityAttribute ();
    parameters: []
  overload: System.Security.SuppressUnmanagedCodeSecurityAttribute.#ctor*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Security.SuppressUnmanagedCodeSecurityAttribute.#ctor
  parent: System.Security.SuppressUnmanagedCodeSecurityAttribute
  isExternal: false
  name: SuppressUnmanagedCodeSecurityAttribute()
  nameWithType: SuppressUnmanagedCodeSecurityAttribute.SuppressUnmanagedCodeSecurityAttribute()
  fullName: System.Security.SuppressUnmanagedCodeSecurityAttribute.SuppressUnmanagedCodeSecurityAttribute()
- uid: System.Security.SuppressUnmanagedCodeSecurityAttribute.#ctor*
  parent: System.Security.SuppressUnmanagedCodeSecurityAttribute
  isExternal: false
  name: SuppressUnmanagedCodeSecurityAttribute
  nameWithType: SuppressUnmanagedCodeSecurityAttribute.SuppressUnmanagedCodeSecurityAttribute
