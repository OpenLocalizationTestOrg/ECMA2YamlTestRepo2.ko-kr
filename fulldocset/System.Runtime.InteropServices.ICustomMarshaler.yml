### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.ICustomMarshaler
  id: ICustomMarshaler
  children:
  - System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  - System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  - System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  - System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  - System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  langs:
  - csharp
  name: ICustomMarshaler
  nameWithType: ICustomMarshaler
  fullName: System.Runtime.InteropServices.ICustomMarshaler
  type: Interface
  summary: "메서드 호출을 처리 하기 위한 사용자 지정 래퍼를 제공 합니다."
  remarks: "마샬러와 새 인터페이스 이전 기능 사이의 다리 합니다. 다음과 같은 이점을 제공 사용자 지정 마샬링:-새 인터페이스를 구현 하는 서버도 사용 하려면 이전 인터페이스와 함께 작동 하도록 설계 된 클라이언트 응용 프로그램 수 있습니다.      -클라이언트 응용 프로그램 새 인터페이스를 사용 하도록 빌드된 이전 인터페이스를 구현 하는 서버를 작업할 수 있습니다.       다양 한 마샬링 동작을 소개 하는 하거나에 COM 구성 요소 개체 모델 ()를 다른 방식으로 노출 되는 인터페이스를 사용 하도록 설정한 경우에 interop 마샬러만 사용 하는 대신 사용자 지정 마샬러를 디자인할 수 있습니다. 사용자 지정 마샬러를 사용 하 여 새.NET Framework 구성 요소 및 기존 COM 구성 요소 간 구분을 최소화할 수 있습니다.       예를 들어, 이라는 관리 되는 인터페이스를 개발 하는 경우 `INew`합니다. COM에는 표준 COM 호출 가능 래퍼 (CCW)를 통해이 인터페이스를 노출 하는 경우 관리 되는 인터페이스와 동일한 메서드를 포함 하 고는 interop 마샬러만에 기본 제공 마샬링 규칙을 사용 합니다. 이제 가정해 잘 알려진 COM 인터페이스 `IOld` 와 동일한 기능을 이미 제공 된 `INew` 인터페이스입니다. 사용자 지정 마샬러를 디자인 하 여 관리 되지 않는 구현을 제공할 수 있습니다 `IOld` 의 관리 되는 구현에 대 한 호출을 위임 하는 `INew` 인터페이스입니다. 따라서 사용자 지정 마샬러는 스레드와 관리 되지 않는 인터페이스 간의 다리 역할을 합니다.      > [!NOTE] > 관리 디스패치 전용 인터페이스에서 비관리 코드로 코드에서 호출 하는 경우에 사용자 지정 마샬러 호출 되지 않습니다.      ## 마샬링 유형 하기 전에 사용자 지정 마샬러를 빌드할 수를 정의 하는 관리 되는 인터페이스와 관리 되지 않는 인터페이스를 마샬링하는 정의 해야 합니다. 이러한 인터페이스는 일반적으로 동일한 기능을 수행 하지만 스레드와 관리 되지 않는 개체에 다르게 노출 됩니다.       관리 되는 컴파일러에서 메타 데이터에서 관리 되는 인터페이스 및 결과 인터페이스는 다른 관리 되는 인터페이스를 같습니다. 다음 예제에서는 일반적인 인터페이스를 보여 줍니다.       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/cpp/t-system.runtime.interop_8_1.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/csharp/t-system.runtime.interop_8_1.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_1.vb) ] 관리 되지 않는 형식에서 언어 IDL (인터페이스 정의)를 정의 하 고 인터페이스 정의 언어 (MIDL) 컴파일러를 사용 하 여 컴파일합니다.     라이브러리 문 내에서 인터페이스를 정의 하 고 다음 예제에서 보여 주듯이 인터페이스 ID 범용 고유 식별자 (UUID) 특성으로 지정 합니다.      ```    [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library OldLib {        [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]        interface IOld : IUnknown            HRESULT OldMethod();   }   ```MIDL 컴파일러에는 여러 개의 출력 파일이 생성합니다. 를 Old.idl에서 인터페이스를 정의 하는 경우 출력 파일은 Old_i.c 정의 `const` 다음 예제에서는 인터페이스의 인터페이스 (IID) 식별자와 변수입니다.      ```   const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};   ```Old.h 파일은 또한 MIDL에 의해 발생 합니다. C + + 소스 코드에 포함 될 수 있는 인터페이스의 c + + 정의 포함 합니다.      ## ICustomMarshaler 인터페이스를 사용자 지정 마샬러 구현 런타임에 적절 한 래퍼를 제공 하기 ICustomMarshaler 인터페이스를 구현 해야 합니다.       다음 C# 코드에서 모든 사용자 지정 마샬러 구현 해야 하는 기본 인터페이스를 표시 합니다.       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/cpp/t-system.runtime.interop_8_2.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/csharp/t-system.runtime.interop_8_2.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_2.vb) ] The ICustomMarshaler 인터페이스 변환 지원, 정리 지원 및 데이터를 마샬링할 수에 대 한 정보를 제공 하는 메서드가 포함 됩니다.          | 형식의 작업 | ICustomMarshaler 메서드 | 설명 |   |-----------------------|-----------------------------|-----------------|   | 변환 (코드에서 관리 되는 코드를 네이티브) | <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>| 관리 되는 개체를 네이티브 데이터에 대 한 포인터를 마샬링합니다.</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> 이 메서드는 사용자 지정 런타임 호출 가능 래퍼 RCW ()를 인수로 전달 되는 관리 되지 않는 인터페이스를 마샬링할 수 있는 반환 합니다. 마샬러는 해당 형식에 대 한 사용자 지정 RCW의 인스턴스를 반환 해야 합니다. |   | 변환 (코드에서 네이티브로 관리 코드) | <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>| 관리 되는 개체를 네이티브 데이터에 대 한 포인터를 마샬링합니다.</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> 이 메서드는 사용자 지정 COM 호출 가능 래퍼 (CCW)를 인수로 전달 되는 관리 되는 인터페이스를 마샬링할 수 있는 반환 합니다. 마샬러는 해당 형식에 대 한 사용자 지정 CCW의 인스턴스를 반환 해야 합니다. |   | 정리 (네이티브 코드용) | <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>| <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>메서드에 의해 반환 되는 원시 데이터 (CCW)를 정리 하려면 마샬러를 사용 하도록 설정 합니다. |   | 정리 (관리 코드용) | <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>| 사용 하면 마샬러가 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>메서드에 의해 반환 되는 관리 되는 데이터는 RCW ()를 정리할 수 있습니다. |   | (네이티브 코드)에 대 한 정보 | <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>| 마샬링할 수를 관리 되지 않는 데이터의 크기를 반환 합니다. |      # # # 변환 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName>네이티브 데이터에 대 한 포인터는 관리 되는 개체로 마샬링합니다.</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A> 이 메서드는 사용자 지정 런타임 호출 가능 래퍼 RCW ()를 인수로 전달 되는 관리 되지 않는 인터페이스를 마샬링할 수 있는 반환 합니다. 마샬러는 해당 형식에 대 한 사용자 지정 RCW의 인스턴스를 반환 해야 합니다.       <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName>관리 되는 개체를 네이티브 데이터에 대 한 포인터를 마샬링합니다.</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName> 이 메서드는 사용자 지정 COM 호출 가능 래퍼 (CCW)를 인수로 전달 되는 관리 되는 인터페이스를 마샬링할 수 있는 반환 합니다. 마샬러는 해당 형식에 대 한 사용자 지정 CCW의 인스턴스를 반환 해야 합니다.      ### 정리 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName>사용 마샬러가에서 반환 되는 원시 데이터 (CCW)를 정리 하는 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>메서드.</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName>       <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName>사용 하 여 반환 되는 관리 되는 데이터 (RCW)를 정리 마샬러가 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>메서드.</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A></xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName>      ### 크기 조정 정보 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName>마샬링해야 하는 관리 되지 않는 데이터의 크기를 반환 합니다.</xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName>      ## ICustomMarshaler 인터페이스를 구현 하는 것 외에도 GetInstance 메서드를 구현 하는, 사용자 지정 마샬러 구현 해야 합니다는 `static` 라는 메서드가 `GetInstance` 수락 하는 <xref:System.String>매개 변수로 ICustomMarshaler의 반환 형식을 갖습니다.</xref:System.String> 이 `static` 사용자 지정 마샬러의 인스턴스를 인스턴스화하는 공용 언어 런타임의 COM interop 계층 메서드를 호출 합니다. 에 전달 되는 문자열 `GetInstance` 는 메서드가 반환된 하는 사용자 지정 마샬러를 사용자 지정 하는 데 사용할 수 있는 쿠키입니다.      ```   static ICustomMarshaler *GetInstance(String *pstrCookie);   ```# # 사용자 지정 마샬러를 사용 하 여 MarshalAsAttribute를 적용 합니다. 적용 해야 합니다는 <xref:System.Runtime.InteropServices.MarshalAsAttribute>특성을 매개 변수 또는 필드를 마샬링할.</xref:System.Runtime.InteropServices.MarshalAsAttribute>       전달 해야 합니다는 <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>열거형 값의 <xref:System.Runtime.InteropServices.MarshalAsAttribute>생성자.</xref:System.Runtime.InteropServices.MarshalAsAttribute> </xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> 또한 지정 해야 합니다는 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>다음 매개 변수 중 하나가 지정 된 필드:- <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>(필수): 사용자 지정 마샬러의 어셈블리 한정 이름입니다.</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> </xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 네임 스페이스 및 사용자 지정 마샬러는 클래스 이름이 포함 해야 합니다. 사용자 지정 마샬러에 사용 되는 어셈블리를 정의 하지 않은 경우에 정의 되어 있는 어셈블리의 이름을 지정 해야 합니다.          > [!NOTE] > 사용할 수 있습니다는 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>필드 대신는 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>필드.</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> </xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>쉽게 지정할 수 있는 형식을 사용 합니다.</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>      - <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie>(선택 사항): 사용자 지정 마샬러에 전달 되는 쿠키.</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> 마샬러에 추가 정보를 제공 하는 쿠키를 사용할 수 있습니다. 예를 들어 동일한 마샬러는 다양 한 래퍼를 제공 하는 데 사용 되, 쿠키는 특정 래퍼를 식별 합니다. 쿠키에 전달 되는 `GetInstance` 마샬러의 메서드.       <xref:System.Runtime.InteropServices.MarshalAsAttribute>특성은 적절 한 래퍼를 활성화할 수 있도록 사용자 지정 마샬러를 식별 합니다.</xref:System.Runtime.InteropServices.MarshalAsAttribute> 공용 언어 런타임의 interop 서비스는 다음 특성을 조사 하 고 사용자 지정 마샬러 첫 번째 시간 마샬링할 인수 (매개 변수 또는 필드) 요구를 만듭니다.       호출 된 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>및 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>메서드 호출을 처리 하는 올바른 래퍼를 활성화 하려면 사용자 지정 마샬러를.</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>      ## 사용자 지정 마샬러 때 사용자 지정 마샬러를 사용 하 여가 완료 되 면 특정 형식에 대 한 사용자 지정 래퍼로 사용할 수 있습니다. 정의 표시 하는 다음 예제는 `IUserData` 관리 되는 인터페이스: [!code-cpp [System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/cpp/t-system.runtime.interop_8_3.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/csharp/t-system.runtime.interop_8_3.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_3.vb) ] 다음 예에서 `IUserData` 사용 하 여 인터페이스는 `NewOldMarshaler` 전달 하는 관리 되지 않는 클라이언트 응용 프로그램을 사용 하도록 설정 하려면 사용자 지정 마샬러는 `IOld` 인터페이스는 `DoSomeStuff` 메서드.     에 대 한 관리 되는 설명은 `DoSomeStuff` 메서드는 `INew` 반면 이전 예에서 본 것 처럼 인터페이스의 관리 되지 않는 버전 `DoSomeStuff` 사용는 `IOld` 인터페이스 포인터를 다음 예제와 같이 합니다.      ```   [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library UserLib {        [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]        interface IUserData : IUnknown            HRESULT DoSomeStuff(IUnknown* pIOld);   }   ```관리 되는 정의 의해 생성 된 형식 라이브러리 `IUserData` 표준 정의 하는 대신 다음 예와에서 같이 관리 되지 않는 정의 만듭니다. <xref:System.Runtime.InteropServices.MarshalAsAttribute>에 적용 된 특성의 `INew` 의 관리 되는 정의에 인수는 `DoSomeStuff` 메서드 인수 다음 예제와 같이 사용자 지정 마샬러를 사용 함을 나타냅니다.</xref:System.Runtime.InteropServices.MarshalAsAttribute>       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/cpp/t-system.runtime.interop_8_4.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/csharp/t-system.runtime.interop_8_4.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_4.vb)][!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/cpp/t-system.runtime.interop_8_5.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/csharp/t-system.runtime.interop_8_5.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_5.vb) ] 앞의 예에서 첫 번째 매개 변수를 제공는 <xref:System.Runtime.InteropServices.MarshalAsAttribute>특성은는 <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>열거형 값 `UnmanagedType.CustomMarshaler`.</xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> </xref:System.Runtime.InteropServices.MarshalAsAttribute>                      두 번째 매개 변수는 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>사용자 지정 마샬러의 어셈블리로 한정 된 이름을 제공 하는 필드를.</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 이 이름은 네임 스페이스 및 사용자 지정 마샬러는 클래스 (`MarshalType=&quot;MyCompany.NewOldMarshaler&quot;`)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ICustomMarshaler
  implements: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  id: CleanUpManagedData(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: CleanUpManagedData(Object)
  nameWithType: ICustomMarshaler.CleanUpManagedData(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "더 이상 필요 없는 경우 관리 되는 데이터의 필요한 정리를 수행 합니다."
  syntax:
    content: public void CleanUpManagedData (object ManagedObj);
    parameters:
    - id: ManagedObj
      type: System.Object
      description: "관리 되는 개체 소멸 될 예정입니다."
  overload: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  id: CleanUpNativeData(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: CleanUpNativeData(IntPtr)
  nameWithType: ICustomMarshaler.CleanUpNativeData(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "더 이상 필요 없는 경우 관리 되지 않는 데이터의 필요한 정리를 수행 합니다."
  syntax:
    content: public void CleanUpNativeData (IntPtr pNativeData);
    parameters:
    - id: pNativeData
      type: System.IntPtr
      description: "소멸 될 예정 관리 되지 않는 데이터에 대 한 포인터입니다."
  overload: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  id: GetNativeDataSize
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: GetNativeDataSize()
  nameWithType: ICustomMarshaler.GetNativeDataSize()
  fullName: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "마샬링할 수를 네이티브 데이터의 크기를 반환 합니다."
  syntax:
    content: public int GetNativeDataSize ();
    parameters: []
    return:
      type: System.Int32
      description: "네이티브 데이터의 바이트 크기입니다."
  overload: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  id: MarshalManagedToNative(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: MarshalManagedToNative(Object)
  nameWithType: ICustomMarshaler.MarshalManagedToNative(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "관리 되지 않는 데이터를 관리 되는 데이터를 변환합니다."
  syntax:
    content: public IntPtr MarshalManagedToNative (object ManagedObj);
    parameters:
    - id: ManagedObj
      type: System.Object
      description: "변환할 수는 관리 되는 개체입니다."
    return:
      type: System.IntPtr
      description: "관리 되는 개체의 COM 보기에 대 한 포인터입니다."
  overload: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  id: MarshalNativeToManaged(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: MarshalNativeToManaged(IntPtr)
  nameWithType: ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "관리 되는 데이터를 관리 되지 않는 데이터를 변환합니다."
  syntax:
    content: public object MarshalNativeToManaged (IntPtr pNativeData);
    parameters:
    - id: pNativeData
      type: System.IntPtr
      description: "줄 바꿈 하는 관리 되지 않는 데이터에 대 한 포인터입니다."
    return:
      type: System.Object
      description: "COM 데이터의 관리 되는 뷰를 나타내는 개체입니다."
  overload: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpManagedData(Object)
  nameWithType: ICustomMarshaler.CleanUpManagedData(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpNativeData(IntPtr)
  nameWithType: ICustomMarshaler.CleanUpNativeData(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: GetNativeDataSize()
  nameWithType: ICustomMarshaler.GetNativeDataSize()
  fullName: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalManagedToNative(Object)
  nameWithType: ICustomMarshaler.MarshalManagedToNative(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(Object)
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalNativeToManaged(IntPtr)
  nameWithType: ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(IntPtr)
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpManagedData
  nameWithType: ICustomMarshaler.CleanUpManagedData
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpNativeData
  nameWithType: ICustomMarshaler.CleanUpNativeData
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: GetNativeDataSize
  nameWithType: ICustomMarshaler.GetNativeDataSize
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalManagedToNative
  nameWithType: ICustomMarshaler.MarshalManagedToNative
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalNativeToManaged
  nameWithType: ICustomMarshaler.MarshalNativeToManaged
