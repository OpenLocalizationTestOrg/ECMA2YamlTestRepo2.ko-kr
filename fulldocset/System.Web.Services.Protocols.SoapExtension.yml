### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.SoapExtension
  id: SoapExtension
  children:
  - System.Web.Services.Protocols.SoapExtension.#ctor
  - System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)
  - System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)
  - System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)
  - System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)
  - System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)
  langs:
  - csharp
  name: SoapExtension
  nameWithType: SoapExtension
  fullName: System.Web.Services.Protocols.SoapExtension
  type: Class
  summary: "ASP.NET을 사용 하 여 만든 XML 웹 서비스에 대 한 SOAP 확장에 대 한 기본 클래스입니다."
  remarks: "ASP.NET에는 SOAP 관련 인프라를를 확장성 메커니즘을 사용 하 여 빌드할 수 있습니다. ASP.NET SOAP 확장 아키텍처를 검사 하거나 메시지를 클라이언트 또는 서버에서 처리 중인 메시지의 특정 단계에서 수정할 수 있는 확장을 중심으로 합니다.       ASP.NET SOAP 확장은 SoapExtension 클래스에서 파생 됩니다. <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>및 <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A>메서드 성능 향상을 위해 SOAP 확장을 초기화 하기 위한 대체 메커니즘을 제공 합니다.</xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> </xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>에 정의 된 각 단계에서 메서드는 대부분의 SOAP 확장의 핵심은 <xref:System.Web.Services.Protocols.SoapMessageStage>, 특정 SOAP 확장의 원하는 동작을 수행 하려면 SOAP 확장을 허용 합니다.</xref:System.Web.Services.Protocols.SoapMessageStage></xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> SOAP 요청이 나 SOAP 응답 해야 하는 SOAP 확장 수정에 대 한 <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A>네트워크를 통해 보낼 제안 된 데이터를 받을 수 있는 기회를 제공 합니다.</xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A>"
  example:
  - "The following `TraceExtension` SOAP extension outputs the SOAP request and SOAP response to a specified file when applied to an XML Web service method. If the following SOAP extension is installed to run with an XML Web service, the ASPNET user account must have permission to write to the directory in which the log file is written.  \n  \n [!code-cs[Classic SoapExtension Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_23_1.cs)]\n [!code-cpp[Classic SoapExtension Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_23_1.cpp)]\n [!code-vb[Classic SoapExtension Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_23_1.vb)]"
  syntax:
    content: public abstract class SoapExtension
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapExtension.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.SoapExtension
  langs:
  - csharp
  name: SoapExtension()
  nameWithType: SoapExtension.SoapExtension()
  fullName: System.Web.Services.Protocols.SoapExtension.SoapExtension()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Services.Protocols.SoapExtension&quot;> </xref> 클래스입니다."
  syntax:
    content: protected SoapExtension ();
    parameters: []
  overload: System.Web.Services.Protocols.SoapExtension.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)
  id: ChainStream(System.IO.Stream)
  parent: System.Web.Services.Protocols.SoapExtension
  langs:
  - csharp
  name: ChainStream(Stream)
  nameWithType: SoapExtension.ChainStream(Stream)
  fullName: System.Web.Services.Protocols.SoapExtension.ChainStream(Stream)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "파생된 클래스에서 재정의 되 면 SOAP 요청이 나 응답을 포함 하는 메모리 버퍼에 대 한 SOAP 확장 액세스를 허용 합니다."
  remarks: "ChainStream 가장 높은 우선 순위를 사용 하 여 SOAP 확장 송신 또는 네트워크를 통해 반환 되는 SOAP 메시지에 가장 가까운 실제 데이터를 수정할 수 있는지 확인 합니다.       SOAP 확장의 참조를 저장 해야는 <xref:System.IO.Stream>ChainStream에 전달 되 고 <xref:System.IO.Stream>ChainStream에서 반환 된.</xref:System.IO.Stream> </xref:System.IO.Stream> SOAP 확장 XML 웹 서비스 메서드를 사용 하 여 실행 하도록 구성 된 경우는 <xref:System.IO.Stream>로 전달 된 <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>.</xref:System.Web.Services.Protocols.SoapMessageStage></xref:System.Web.Services.Protocols.SoapMessageStage> 에서 serialize 된 SOAP 요청을 포함 하는 ChainStream</xref:System.IO.Stream> 마찬가지로, <xref:System.IO.Stream>발생 하 고 따라서 <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>.</xref:System.Web.Services.Protocols.SoapMessageStage></xref:System.Web.Services.Protocols.SoapMessageStage> serialize 된 SOAP 응답을 포함 하는 serialization ChainStream에서 반환 된 참조에 작성 됩니다</xref:System.IO.Stream>"
  example:
  - "The following example saves both the <xref:System.IO.Stream> passed into ChainStream and the <xref:System.IO.Stream> returned from ChainStream in the member variables `oldStream` and `newStream`, respectively.  \n  \n [!code-cpp[Classic SoapExtension.ChainStream Example#1](~/add/codesnippet/cpp/m-system.web.services.pr_14_1.cpp)]\n [!code-cs[Classic SoapExtension.ChainStream Example#1](~/add/codesnippet/csharp/m-system.web.services.pr_14_1.cs)]\n [!code-vb[Classic SoapExtension.ChainStream Example#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_14_1.vb)]"
  syntax:
    content: public virtual System.IO.Stream ChainStream (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "SOAP 요청이 나 응답을 포함 하는 메모리 버퍼입니다."
    return:
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>이 SOAP 확장을 수정할 수 있는 새 메모리 버퍼를 나타내는.</xref:System.IO.Stream>"
  overload: System.Web.Services.Protocols.SoapExtension.ChainStream*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)
  id: GetInitializer(System.Type)
  parent: System.Web.Services.Protocols.SoapExtension
  langs:
  - csharp
  name: GetInitializer(Type)
  nameWithType: SoapExtension.GetInitializer(Type)
  fullName: System.Web.Services.Protocols.SoapExtension.GetInitializer(Type)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "파생된 클래스에서 재정의 되 면에 XML 웹 서비스를 구현 하는 클래스에 특정 한 데이터를 초기화 하는 SOAP 확장을 사용 하면 성능 비용이 시간입니다."
  remarks: "The overload of <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> that gets called by ASP.NET depends on how the SOAP extension was specified. There are two methods for specifying a SOAP extension:  \n  \n-   Apply a custom attribute, deriving from <xref:System.Web.Services.Protocols.SoapExtensionAttribute>, to the individual XML Web service method.  \n  \n-   Add a reference in either the web.config or app.config configuration files.  \n  \n If you add a reference to one of the configuration files, the SOAP extension runs for all XML Web services within the scope of that configuration file. When specifying, a SOAP extension by referencing a configuration file, ASP.NET invokes the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> overload that passes in a <xref:System.Type>. When specifying an extension by applying a custom attribute, ASP.NET invokes the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> that passes in a <xref:System.Web.Services.Protocols.LogicalMethodInfo> and a <xref:System.Web.Services.Protocols.SoapExtensionAttribute>.  \n  \n For details on adding SOAP extensions to a configuration file, see [&#91;\\<topic://cpconconfigurationoptionsforaspnetwebservices>&#93;](http://msdn.microsoft.com/en-us/1f0d71bc-8faa-4730-b500-2a6c7b5d4f6b)."
  example:
  - "The following code demonstrates how one can save SOAP extension specific data on a per XML Web service basis. If the SOAP extension is configured using a configuration file instead of an attribute, the SOAP extension can store data for each class to which the SOAP extension is applied. This example saves the name of a file in which to log the SOAP messages sent to and from the XML Web service method based on the name of the class implementing the XML Web service into the cache. This code example is part of a full code example for a TraceExtension SOAP extension that can be found in the <xref:System.Web.Services.Protocols.SoapExtension> class overview.  \n  \n [!code-vb[SoapExtension.GetInitializer-Type#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_2_1.vb)]\n [!code-cs[SoapExtension.GetInitializer-Type#1](~/add/codesnippet/csharp/m-system.web.services.pr_2_1.cs)]\n [!code-cpp[SoapExtension.GetInitializer-Type#1](~/add/codesnippet/cpp/m-system.web.services.pr_2_1.cpp)]"
  syntax:
    content: public abstract object GetInitializer (Type serviceType);
    parameters:
    - id: serviceType
      type: System.Type
      description: "SOAP 확장이 적용 되는 XML 웹 서비스를 구현 하는 클래스의 형식입니다."
    return:
      type: System.Object
      description: "<xref:System.Object>캐싱에 대 한 SOAP 확장을 초기화 하는.</xref:System.Object>"
  overload: System.Web.Services.Protocols.SoapExtension.GetInitializer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)
  id: GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)
  parent: System.Web.Services.Protocols.SoapExtension
  langs:
  - csharp
  name: GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)
  nameWithType: SoapExtension.GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)
  fullName: System.Web.Services.Protocols.SoapExtension.GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "파생된 클래스에서 재정의 되 면 XML 웹 서비스 메서드는&1;에서 XML 웹 서비스 메서드에 적용 되는 특성을 사용 하 여 특정 데이터를 초기화 하는 SOAP 확장을 사용 하면 성능 비용이 시간입니다."
  remarks: "SOAP 확장을 사용 하 여 구성 파일 참조는 GetInitializer 오버 로드에 <xref:System.Type>.</xref:System.Type> 구성 된 경우       SOAP 확장은 세 가지 기회 데이터를 초기화 하 고 다양 한 용도 한:-클래스 생성자-클래스 생성자가 호출 될 때마다 SOAP 확장이 인스턴스화되고 일반적으로 멤버 변수를 초기화 하는 데 사용 됩니다.      그러나-GetInitializer-GetInitializer, 한 번 XML 웹에 대 한 SOAP 요청이 처음으로 서비스 메서드가 호출 됩니다. 사용자 지정 특성을 XML 웹 서비스 메서드에 적용 GetInitializer 메서드가 호출 됩니다. 이 통해는 <xref:System.Web.Services.Protocols.LogicalMethodInfo>프로토타입 정보에 대 한 또는 <xref:System.Web.Services.Protocols.SoapExtensionAttribute>.</xref:System.Web.Services.Protocols.SoapExtensionAttribute> 에서 파생 된 클래스에 의해 전달 된 확장 프로그램별 데이터에 액세스 하는 XML 웹 서비스 메서드</xref:System.Web.Services.Protocols.LogicalMethodInfo> 를 질의 하는 SOAP 확장이 반환 값은 ASP.NET에서 캐시 되 고 후속로 전달 된 <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A>메서드.</xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> 따라서 GetInitializer에서 초기화를 수행 일회성 성능 저하가에 기본적으로 캡슐화 됩니다.      - <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A>- <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A>SOAP 요청 XML 웹 서비스 메서드에 적용 되지만는 클래스 생성자의 이점을 활용 하는 때마다 호출 됩니다는 <xref:System.Object>에서 초기화 GetInitializer가 전달 됩니다</xref:System.Object> </xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> </xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A>"
  example:
  - "The following code demonstrates how you can obtain SOAP extension-specific data passed in using a class that derives from <xref:System.Web.Services.Protocols.SoapExtensionAttribute>, and then cache that data in GetInitializer. This code example is part of a full code example for a `TraceExtension` SOAP extension that can be found in the <xref:System.Web.Services.Protocols.SoapExtension> class overview. This code example relies on a `TraceExtensionAttribute` being passed into the `attribute` parameter. In the full code example, `TraceExtensionAttribute` derives from <xref:System.Web.Services.Protocols.SoapExtensionAttribute> and adds a `Filename` property, which is what GetInitializer stores in the cache.  \n  \n [!code-cpp[Classic SoapExtension.GetInitializer Example#1](~/add/codesnippet/cpp/3e28a43a-5fe0-43d3-bd26-_1.cpp)]\n [!code-cs[Classic SoapExtension.GetInitializer Example#1](~/add/codesnippet/csharp/3e28a43a-5fe0-43d3-bd26-_1.cs)]\n [!code-vb[Classic SoapExtension.GetInitializer Example#1](~/add/codesnippet/visualbasic/3e28a43a-5fe0-43d3-bd26-_1.vb)]"
  syntax:
    content: public abstract object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo, System.Web.Services.Protocols.SoapExtensionAttribute attribute);
    parameters:
    - id: methodInfo
      type: System.Web.Services.Protocols.LogicalMethodInfo
      description: "A <xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref> 특정 함수 프로토타입에 SOAP 확장이 적용 되는 XML 웹 서비스 메서드를 나타내는입니다."
    - id: attribute
      type: System.Web.Services.Protocols.SoapExtensionAttribute
      description: "<xref href=&quot;System.Web.Services.Protocols.SoapExtensionAttribute&quot;> </xref> XML 웹 서비스 메서드에 적용 합니다."
    return:
      type: System.Object
      description: "<xref:System.Object>캐싱에 대 한 SOAP 확장을 초기화 하는.</xref:System.Object>"
  overload: System.Web.Services.Protocols.SoapExtension.GetInitializer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)
  id: Initialize(System.Object)
  parent: System.Web.Services.Protocols.SoapExtension
  langs:
  - csharp
  name: Initialize(Object)
  nameWithType: SoapExtension.Initialize(Object)
  fullName: System.Web.Services.Protocols.SoapExtension.Initialize(Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "파생된 클래스에서 재정의 되 면 허용에 캐시 된 데이터를 사용 하 여 자동으로 초기화 하는 SOAP 확장의 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*>메서드.</xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*>"
  remarks: "A SOAP extension has three opportunities to initialize data and they all have different purposes:  \n  \n-   Class constructor - The class constructor is called every time a SOAP extension is instantiated and is typically used to initialize member variables.  \n  \n-   <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> - <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>, however, is called just once, the first time a SOAP request is made to an XML Web services method. If a custom attribute is applied to the XML Web service method, the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> method is invoked. This allows the SOAP extension to interrogate the <xref:System.Web.Services.Protocols.LogicalMethodInfo> of an XML Web service method for prototype information or to access extension-specific data passed by a class deriving from <xref:System.Web.Services.Protocols.SoapExtensionAttribute>. The return value is cached by ASP.NET and passed into subsequent Initialize methods. Therefore, initialization done in <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> is encapsulated essentially into a one-time performance hit.  \n  \n-   Initialize - Initialize is called every time a SOAP request is made to an XML Web service method, but has an advantage over the class constructor, in that the <xref:System.Object> initialized in <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> is passed to it.  \n  \n-  \n  \n> [!NOTE]\n>  You can also add a SOAP extension without deriving from <xref:System.Web.Services.Protocols.SoapExtensionAttribute> by using the [\\<soapExtensionTypes> Element](http://msdn.microsoft.com/en-us/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) in a configuration file. For details, see [\\<soapExtensionTypes> Element](http://msdn.microsoft.com/en-us/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) and [SOAP Message Modification Using SOAP Extensions](http://msdn.microsoft.com/en-us/97d81ace-95e7-4acc-ae39-9692a0021e95).  \n  \n-"
  example:
  - "The following example demonstrates how you can use the data cached during the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> method.  \n  \n [!code-cpp[Classic SoapExtension.Initialize Example#1](~/add/codesnippet/cpp/m-system.web.services.pr_10_1.cpp)]\n [!code-cs[Classic SoapExtension.Initialize Example#1](~/add/codesnippet/csharp/m-system.web.services.pr_10_1.cs)]\n [!code-vb[Classic SoapExtension.Initialize Example#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_10_1.vb)]"
  syntax:
    content: public abstract void Initialize (object initializer);
    parameters:
    - id: initializer
      type: System.Object
      description: "<xref:System.Object>에서 반환 된 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*>asp.</xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*> </xref:System.Object>"
  overload: System.Web.Services.Protocols.SoapExtension.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)
  id: ProcessMessage(System.Web.Services.Protocols.SoapMessage)
  parent: System.Web.Services.Protocols.SoapExtension
  langs:
  - csharp
  name: ProcessMessage(SoapMessage)
  nameWithType: SoapExtension.ProcessMessage(SoapMessage)
  fullName: System.Web.Services.Protocols.SoapExtension.ProcessMessage(SoapMessage)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "파생된 클래스에서 재정의 되 면 수신에 대 한 SOAP 확장을 사용 하면 한 <xref href=&quot;System.Web.Services.Protocols.SoapMessage&quot;> </xref> 각 프로세스에 <xref href=&quot;System.Web.Services.Protocols.SoapMessageStage&quot;> </xref>합니다."
  remarks: "ProcessMessage 전혀 라고 <xref:System.Web.Services.Protocols.SoapMessageStage>ASP.NET와 해당 클라이언트를 사용 하 여 만든 XML 웹 서비스 모두에 적용 되는 SOAP 확장에 대 한 단계.</xref:System.Web.Services.Protocols.SoapMessageStage> 각 <xref:System.Web.Services.Protocols.SoapMessageStage>에서 파생 된 클래스의 인스턴스 <xref:System.Web.Services.Protocols.SoapMessage>ProcessMessage에 전달 됩니다.</xref:System.Web.Services.Protocols.SoapMessage> </xref:System.Web.Services.Protocols.SoapMessageStage> SOAP 확장 XML 웹 서비스 클라이언트에서 실행 중인 경우는 <xref:System.Web.Services.Protocols.SoapClientMessage>개체 ProcessMessage에 전달 되지 않았으면 <xref:System.Web.Services.Protocols.SoapServerMessage>개체가 전달 되</xref:System.Web.Services.Protocols.SoapServerMessage> 는</xref:System.Web.Services.Protocols.SoapClientMessage>"
  example:
  - "The following example is the ProcessMessage portion of a SOAP extension that logs SOAP requests and SOAP responses. By logging the <xref:System.Web.Services.Protocols.SoapMessage> at the <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>, the SOAP extension accesses the <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> to be sent over the wire. If the SOAP extension is applied to an XML Web service method created using ASP.NET, then the <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> contains the SOAP response from the XML Web service method. If the SOAP extension is applied to an XML Web service client, the <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> contains the SOAP request to an XML Web service method.  \n  \n Classic SoapExtension.ProcessMessage Example#1"
  syntax:
    content: public abstract void ProcessMessage (System.Web.Services.Protocols.SoapMessage message);
    parameters:
    - id: message
      type: System.Web.Services.Protocols.SoapMessage
      description: "<xref href=&quot;System.Web.Services.Protocols.SoapMessage&quot;> </xref> 프로세스에 있습니다."
  overload: System.Web.Services.Protocols.SoapExtension.ProcessMessage*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Services.Protocols.SoapExtension.#ctor
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: SoapExtension()
  nameWithType: SoapExtension.SoapExtension()
  fullName: System.Web.Services.Protocols.SoapExtension.SoapExtension()
- uid: System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: ChainStream(Stream)
  nameWithType: SoapExtension.ChainStream(Stream)
  fullName: System.Web.Services.Protocols.SoapExtension.ChainStream(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: GetInitializer(Type)
  nameWithType: SoapExtension.GetInitializer(Type)
  fullName: System.Web.Services.Protocols.SoapExtension.GetInitializer(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)
  nameWithType: SoapExtension.GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)
  fullName: System.Web.Services.Protocols.SoapExtension.GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)
- uid: System.Web.Services.Protocols.LogicalMethodInfo
  parent: System.Web.Services.Protocols
  isExternal: false
  name: LogicalMethodInfo
  nameWithType: LogicalMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo
- uid: System.Web.Services.Protocols.SoapExtensionAttribute
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapExtensionAttribute
  nameWithType: SoapExtensionAttribute
  fullName: System.Web.Services.Protocols.SoapExtensionAttribute
- uid: System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: Initialize(Object)
  nameWithType: SoapExtension.Initialize(Object)
  fullName: System.Web.Services.Protocols.SoapExtension.Initialize(Object)
- uid: System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: ProcessMessage(SoapMessage)
  nameWithType: SoapExtension.ProcessMessage(SoapMessage)
  fullName: System.Web.Services.Protocols.SoapExtension.ProcessMessage(SoapMessage)
- uid: System.Web.Services.Protocols.SoapMessage
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapMessage
  nameWithType: SoapMessage
  fullName: System.Web.Services.Protocols.SoapMessage
- uid: System.Web.Services.Protocols.SoapExtension.#ctor*
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: SoapExtension
  nameWithType: SoapExtension.SoapExtension
- uid: System.Web.Services.Protocols.SoapExtension.ChainStream*
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: ChainStream
  nameWithType: SoapExtension.ChainStream
- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer*
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: GetInitializer
  nameWithType: SoapExtension.GetInitializer
- uid: System.Web.Services.Protocols.SoapExtension.Initialize*
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: Initialize
  nameWithType: SoapExtension.Initialize
- uid: System.Web.Services.Protocols.SoapExtension.ProcessMessage*
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: ProcessMessage
  nameWithType: SoapExtension.ProcessMessage
