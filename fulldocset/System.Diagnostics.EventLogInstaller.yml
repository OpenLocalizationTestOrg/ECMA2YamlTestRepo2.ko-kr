### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLogInstaller
  id: EventLogInstaller
  children:
  - System.Diagnostics.EventLogInstaller.#ctor
  - System.Diagnostics.EventLogInstaller.CategoryCount
  - System.Diagnostics.EventLogInstaller.CategoryResourceFile
  - System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  - System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)
  - System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  - System.Diagnostics.EventLogInstaller.Log
  - System.Diagnostics.EventLogInstaller.MessageResourceFile
  - System.Diagnostics.EventLogInstaller.ParameterResourceFile
  - System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)
  - System.Diagnostics.EventLogInstaller.Source
  - System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)
  - System.Diagnostics.EventLogInstaller.UninstallAction
  langs:
  - csharp
  name: EventLogInstaller
  nameWithType: EventLogInstaller
  fullName: System.Diagnostics.EventLogInstaller
  type: Class
  summary: "설치 하 고 응용 프로그램에서 읽거나 실행 된 경우 기록 하는 이벤트 로그를 구성할 수 있습니다."
  remarks: "The EventLogInstaller is used by the [Installutil.exe (Installer Tool)](~/add/includes/ajax-current-ext-md.md) when installing an event log. The EventLogInstaller class can install event logs only on the local computer.  \n  \n Use the EventLogInstaller class when your application writes to an event log; it is not necessary to use an event log installer for your application to read from an event log. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.  \n  \n> [!NOTE]\n>  The Security log is read-only.  \n  \n The installer creates the event source that you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property and registers it for the event log specified in <xref:System.Diagnostics.EventLogInstaller.Log%2A> property. This behavior is similar to calling <xref:System.Diagnostics.EventLog.CreateEventSource%2A> on the <xref:System.Diagnostics.EventLog> component.  \n  \n Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> methods to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \n  \n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configurations. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an EventLogInstaller, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \n  \n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \n  \n To install an event log, create a project installer class that inherits from <xref:System.Configuration.Install.Installer>, and set the <xref:System.ComponentModel.RunInstallerAttribute> for the class to `true`. Within your project, create an EventLogInstaller for each event log that your application will write to and add the instance to your project installer class.  \n  \n When the [Installutil.exe (Installer Tool)](../Topic/Installutil.exe%20\\(Installer%20Tool\\).md) is called, it looks at the <xref:System.ComponentModel.RunInstallerAttribute>. If it is `true`, the tool installs all the items in the <xref:System.Configuration.Install.Installer.Installers%2A> collection that are associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false`, the tool ignores the project installer.  \n  \n You modify other properties of an EventLogInstaller either before or after adding the instance to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer, but before the installer tool runs. You must set the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property if your application will be writing to the event log.  \n  \n Use EventLogInstaller to register a new source for a new or existing event log; do not use EventLogInstaller to change an existing source. The EventLogInstaller class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.  \n  \n You can register the event source with localized resource files for your event category and message strings. Your application can write event log entries using resource identifiers, rather than specifying the actual string. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings. You can register a separate file for event categories, messages, and parameter insertion strings, or you can register the same resource file for all three types of strings. Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, and <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> properties to configure the source to write localized entries to the event log. If your application writes strings values directly to the event log, you do not need to set these properties.  \n  \n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Create a different source without resource files and then use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \n  \n Typically, you do not call the methods of the EventLogInstaller class from within your code; they are generally called only by Installutil.exe. The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method during the installation process. It backs out failures, if necessary, by calling the <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method for the object that generated the exception."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the source name and the event log name, and adds the EventLogInstaller to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n [!code-cpp[EventLogInstaller#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_5_1.cpp)]\n [!code-cs[EventLogInstaller#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_5_1.cs)]\n [!code-vb[EventLogInstaller#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_5_1.vb)]"
  syntax:
    content: 'public class EventLogInstaller : System.Configuration.Install.ComponentInstaller'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Configuration.Install.Installer
  - System.Configuration.Install.ComponentInstaller
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Configuration.Install.Installer.AfterInstall
  - System.Configuration.Install.Installer.AfterRollback
  - System.Configuration.Install.Installer.AfterUninstall
  - System.Configuration.Install.Installer.BeforeInstall
  - System.Configuration.Install.Installer.BeforeRollback
  - System.Configuration.Install.Installer.BeforeUninstall
  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Committed
  - System.Configuration.Install.Installer.Committing
  - System.Configuration.Install.Installer.Context
  - System.Configuration.Install.Installer.HelpText
  - System.Configuration.Install.Installer.Installers
  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Parent
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: EventLogInstaller()
  nameWithType: EventLogInstaller.EventLogInstaller()
  fullName: System.Diagnostics.EventLogInstaller.EventLogInstaller()
  type: Constructor
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Diagnostics.EventLogInstaller&quot;> </xref> 클래스입니다."
  syntax:
    content: public EventLogInstaller ();
    parameters: []
  overload: System.Diagnostics.EventLogInstaller.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.CategoryCount
  id: CategoryCount
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: CategoryCount
  nameWithType: EventLogInstaller.CategoryCount
  fullName: System.Diagnostics.EventLogInstaller.CategoryCount
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "범주 리소스 파일에서 범주의 수를 가져오거나 설정 합니다."
  remarks: "CategoryCount를 사용 하 여 및 <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>지역화 된 범주 문자열을 사용 하 여 이벤트를 작성 하는 속성.</xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> 이벤트 뷰어에서 이벤트를 쓸 때 범주를 제공 하는 경우 이벤트 항목에 대 한 범주를 표시 합니다. 이벤트 로그 범주는 필터 이벤트 나 이벤트에 정보를 제공 하는 응용 프로그램 정의 문자열입니다. 예를 들어 응용 프로그램이 서로 다른 구성 요소 또는 여러 작업에 대 한 별도 범주를 정의할 수 있습니다.       이벤트 범주는 선택 사항입니다. 응용 프로그램 범주를 사용 하지 않는 경우는 CategoryCount를 설정 하지 마십시오 및 <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>속성.</xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>       에 있는 Platform SDK 설명서의 &quot;메시지 컴파일러&quot; 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [http://msdn.microsoft.com](http://msdn.microsoft.com/)합니다."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_14_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_14_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_14_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public int CategoryCount { get; set; }
    return:
      type: System.Int32
      description: "범주 리소스 파일에 있는 범주 수를 지정 합니다. 기본값은&0;입니다."
  overload: System.Diagnostics.EventLogInstaller.CategoryCount*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile
  id: CategoryResourceFile
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: CategoryResourceFile
  nameWithType: EventLogInstaller.CategoryResourceFile
  fullName: System.Diagnostics.EventLogInstaller.CategoryResourceFile
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "원본에 대 한 범주 문자열이 포함 된 리소스 파일의 경로 가져오거나 설정 합니다."
  remarks: "사용 하 여 <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>지역화 된 범주 문자열 CategoryResourceFile 쓸 속성을 사용 하 여 이벤트 및.</xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> 이벤트 뷰어에서 이벤트를 쓸 때 범주를 제공 하는 경우 이벤트 항목에 대 한 범주를 표시 합니다. 이벤트 로그 범주는 필터 이벤트 하거나 이벤트에 대 한 정보를 제공 하는 응용 프로그램 정의 문자열입니다. 예를 들어 응용 프로그램에 다른 구성 요소 또는 다른 작업에 대 한 별도 범주 있을 수 있습니다.       이벤트 범주는 선택 사항입니다. 응용 프로그램 범주를 사용 하지 않는 경우 설정 하지 마십시오는 <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>및 CategoryResourceFile 속성.</xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>       에 있는 Platform SDK 설명서의 &quot;메시지 컴파일러&quot; 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [http://msdn.microsoft.com](http://msdn.microsoft.com/)합니다."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_22_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_22_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_22_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string CategoryResourceFile { get; set; }
    return:
      type: System.String
      description: "범주 리소스 파일의 경로입니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Diagnostics.EventLogInstaller.CategoryResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  id: CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: CopyFromComponent(IComponent)
  nameWithType: EventLogInstaller.CopyFromComponent(IComponent)
  fullName: System.Diagnostics.EventLogInstaller.CopyFromComponent(IComponent)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "속성 값을 복사는 <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> 이벤트 로그에 대 한 설치 시 필요 없는 구성 요소입니다."
  remarks: "로 지정 된 구성 요소는 `component` 매개 변수 여야 합니다는 <xref:System.Diagnostics.EventLog>, 그러지 않으면 예외가 throw 됩니다.</xref:System.Diagnostics.EventLog>       일반적으로 호출 하지 않으면의 메서드는 <xref:System.Diagnostics.EventLogInstaller>에서; 코드 내에서 일반적으로 호출 에서만 [Installutil.exe (설치 관리자 도구)](~/add/includes/ajax-current-ext-md.md).</xref:System.Diagnostics.EventLogInstaller> CopyFromComponent은 Installutil.exe에서 <xref:System.Diagnostics.EventLogInstaller>기존 <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> 의 값에</xref:System.Diagnostics.EventLogInstaller> 대 한 속성 값을 설정 하는 데 사용 됩니다.       경우는 <xref:System.Diagnostics.EventLog.Log%2A>의 <xref:System.Diagnostics.EventLog>즉에 전달 하는 것은 빈 문자열 (&quot;&quot;)를 설정 해야 합니다는 <xref:System.Diagnostics.EventLog.Log%2A>설치 관리자를 실행 하기 전에 유효한 값으로 속성.</xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A>"
  syntax:
    content: public override void CopyFromComponent (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> 에 대 한 템플릿으로 사용 하 여 <xref href=&quot;System.Diagnostics.EventLogInstaller&quot;> </xref>합니다."
  overload: System.Diagnostics.EventLogInstaller.CopyFromComponent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "지정된 된 구성 요소가 없습니다는 <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>합니다.       -또는- <> </> *> 또는 <> </> *> 지정된 된 구성 요소의 속성이 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 이거나 비어 있습니다."
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)
  id: Install(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Install(IDictionary)
  nameWithType: EventLogInstaller.Install(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Install(IDictionary)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "설치를 수행 하 고 이벤트 로그 정보를 레지스트리에 씁니다."
  remarks: "설치 이벤트 로그 정보를 레지스트리에 씁니다 메서드와 이벤트 로그에 지정 된 로그를 연결 된 <xref:System.Diagnostics.EventLogInstaller.Log%2A>속성.</xref:System.Diagnostics.EventLogInstaller.Log%2A> 로그가 아직 없는 (및 소스를 지정한) 하는 경우 설치 로그를 만들고 새 소스에 연결 하 합니다.       일반적으로 호출 하지 않으면의 메서드는 <xref:System.Diagnostics.EventLogInstaller>에서; 코드 내에서 일반적으로 호출 에서만 [Installutil.exe (설치 관리자 도구)](~/add/includes/ajax-current-ext-md.md).</xref:System.Diagnostics.EventLogInstaller> 이 도구는 자동으로 설치 되 고 이벤트 로그와 연결 된 레지스트리 정보를 작성 하는 설치 과정 설치 메서드를 호출 합니다. 설치는 설치 하는 동안 설치 프로젝트 부분이 있으면 오류가 있으면 모든 이전에 설치 된 구성 요소가 롤백됩니다 설치 이전 상태로 트랜잭션. 각 구성 요소를 호출 하 여 이렇게 <xref:System.Diagnostics.EventLogInstaller.Rollback%2A>메서드.</xref:System.Diagnostics.EventLogInstaller.Rollback%2A>       사용 하 여 <xref:System.Diagnostics.EventLogInstaller>기존 또는 새 이벤트 로그;에 대 한 새 원본을 등록 하려면 사용 하지 마십시오 <xref:System.Diagnostics.EventLogInstaller>기존 소스를 변경 하려면.</xref:System.Diagnostics.EventLogInstaller> </xref:System.Diagnostics.EventLogInstaller> <xref:System.Diagnostics.EventLogInstaller>클래스는 지정 된 설치 속성에 맞게 기존 소스 구성 속성을 수정 하지 않습니다.</xref:System.Diagnostics.EventLogInstaller> 설치 방법 예외를 throw 하는 경우는 <xref:System.Diagnostics.EventLogInstaller.Source%2A>속성은 컴퓨터에서 다른 이벤트 로그에 등록 된 소스 이름과 일치할.</xref:System.Diagnostics.EventLogInstaller.Source%2A> 설치 방법 생략 하는 경우에 소스를 등록는 <xref:System.Diagnostics.EventLogInstaller.Source%2A>속성에 지정 된 동일한 이벤트 로그에 이미 등록 되어 있는 한 소스 이름과 일치 하는 <xref:System.Diagnostics.EventLogInstaller.Log%2A>속성.</xref:System.Diagnostics.EventLogInstaller.Log%2A> </xref:System.Diagnostics.EventLogInstaller.Source%2A>       응용 프로그램의 설치 루틴 프로젝트 설치 관리자를 사용 하 여 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>속성을 자동으로 설치 되어 있는 구성 요소에 대 한 정보를 유지 관리 합니다.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> 설치로 전달 되는이 상태 정보는 `stateSaver` 각 <xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller> 설치 매개 변수를 지속적으로 업데이트 됩니다 일반적으로 코드의 명시적으로이 상태 정보를 수정할 필요는 없습니다."
  syntax:
    content: public override void Install (System.Collections.IDictionary stateSaver);
    parameters:
    - id: stateSaver
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>롤백을 수행 하거나 작업을 제거 하는 데 필요한 정보를 저장 하는 데 사용 합니다.</xref:System.Collections.IDictionary>"
  overload: System.Diagnostics.EventLogInstaller.Install*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "설치 관리자가 사용 하려고 시도 플랫폼은 Windows NT 4.0 이상 없습니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.Diagnostics.EventLogInstaller.Source*>다른 이벤트 로그에 대해 속성이 이미 등록 되어</xref:System.Diagnostics.EventLogInstaller.Source*> 지정 된 이름이"
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  id: IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "설치 관리자와 지정 된 다른 동일한 소스에 참조 하는지 여부를 결정 합니다."
  remarks: "일반적으로 호출 하지 않으면의 메서드는 <xref:System.Diagnostics.EventLogInstaller>에서; 코드 내에서 일반적으로 이라고 설치 관리자 도구 (Installutil.exe)에 의해서만.</xref:System.Diagnostics.EventLogInstaller>"
  syntax:
    content: public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);
    parameters:
    - id: otherInstaller
      type: System.Configuration.Install.ComponentInstaller
      description: "설치 관리자를 비교 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 설치 관리자와 설치 관리자에서 지정 된 경우는 <code> otherInstaller </code> 매개 변수를 설치 하거나 동일한 소스를 제거 합니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Log
  id: Log
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Log
  nameWithType: EventLogInstaller.Log
  fullName: System.Diagnostics.EventLogInstaller.Log
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "소스를 설정 하는 로그의 이름을 가져오거나 설정 합니다."
  remarks: "You can use the Log property to associate the source you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property with either an existing log or a new log on the local computer. The [Installutil.exe (Installer Tool)](~/add/includes/ajax-current-ext-md.md) uses this information to map the source to the log in the computer's registry. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.  \n  \n To write entries to an event log, you must create a source and register it with an event log. An event source can only write to one log at a time. The installer uses the value of the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property to register your application with the event log as a valid source of entries. If you do not specify a log name before the installer runs, the installer registers your source to the Application log. If you specify a new source and an existing log, the installer creates a new event source and associates it with the log you specify. If you specify both a new source and a new log, the installer associates the new source with the new log in the registry, but the log is not created until the first entry is written to it.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the Log property with the \".evt\" file name extension.  \n  \n Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the Log property.  \n  \n For more detailed information about the behaviors of event logs and sources, see the <xref:System.Diagnostics.EventLog> class documentation for the <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.Source%2A> properties."
  syntax:
    content: public string Log { get; set; }
    return:
      type: System.String
      description: "로그의 이름입니다. 이 응용 프로그램, 시스템 또는 사용자 지정 로그 이름을 수 있습니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Diagnostics.EventLogInstaller.Log*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile
  id: MessageResourceFile
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: MessageResourceFile
  nameWithType: EventLogInstaller.MessageResourceFile
  fullName: System.Diagnostics.EventLogInstaller.MessageResourceFile
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "서식 지정은 원본에 대 한 문자열 메시지를 포함 하는 리소스 파일의 경로 가져오거나 설정 합니다."
  remarks: "Use the MessageResourceFile property to configure an event log source to write localized event messages. Event messages are application-defined strings that describe the event to the user.  \n  \n Your application can write event log entries using resource identifiers. A resource identifier indexes a message located in the MessageResourceFile. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings.  \n  \n The event source must be configured either for writing localized entries or for writing direct strings. Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file.  \n  \n If your application writes event message strings directly, rather than using a resource identifier in a localized resource file, do not set the MessageResourceFile property.  \n  \n If the <xref:System.Diagnostics.EventLog.MachineName%2A> property is not the local computer identifier (\".\"), the .NET Framework assumes that the resource file is on a remote computer. If the MessageResourceFile property value contains a drive letter, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\\\<drive\\>$ share (for example, \\\\\\server\\c$). If the value contains the string %systemroot%, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\admin$ share (for example, \\\\\\server\\admin$).  \n  \n For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_9_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_9_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_9_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string MessageResourceFile { get; set; }
    return:
      type: System.String
      description: "메시지 리소스 파일의 경로입니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Diagnostics.EventLogInstaller.MessageResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile
  id: ParameterResourceFile
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: ParameterResourceFile
  nameWithType: EventLogInstaller.ParameterResourceFile
  fullName: System.Diagnostics.EventLogInstaller.ParameterResourceFile
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "원본에 대 한 메시지 매개 변수 문자열을 포함 하는 리소스 파일의 경로 가져오거나 설정 합니다."
  remarks: "ParameterResourceFile 속성을 사용 하 여 삽입 된 매개 변수 문자열이 포함 된 지역화 된 이벤트 메시지를 작성 하는 이벤트 로그 소스를 구성할 수 있습니다. 에 지정 된 각 지역화 된 이벤트 메시지는 <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>속성에는 입력 문자열에 대 한 자리 표시 자가 포함 될 수 있습니다.</xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> 이러한 자리 표시자 위치 이벤트 메시지 내에서 언어에 관계 없이 문자열에 대 한 리소스 식별자를 지정 하는 데 사용 됩니다. 이벤트 뷰어는 ParameterResourceFile에서 해당 문자열으로 자리 표시자를 대체 하 고 지역화 된 이벤트 항목에 대 한 이벤트 로그 메시지의 형식을 지정 합니다.       메시지 텍스트 파일의 다음 섹션에서 매개 변수 자리 표시자와 문자열을 정의 하는 예를 들어: ```      MessageId = 1501   Severity = Success   Facility = Application   SymbolicName = COMPONENT_STARTING   Language=English   Component %%6050 is starting.   .   ``` 매개 변수 리소스 파일 내에서 삽입 문자열 함께 정의 되어야 합니다는 자리 표시자에 해당 하는 리소스 식별자 아래와 같이: ```   MessageId = 6050   Severity = Success   Facility = Application   SymbolicName = COMPONENT_NAME_MSGID   Language=English   TRIGGER.EXE   .   ``` 지역화 된 엔트리 또는 직접 문자열을 작성 하기 위한 이벤트 소스를 구성 해야 합니다. 사용 하 여는 <xref:System.Diagnostics.EventLog.WriteEvent%2A>메서드가 메시지 리소스 파일을 사용 하 여 구성 하는 원본에 대 한 지역화 된 엔트리를 작성할 수 있습니다.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       응용 프로그램 이벤트 로그에 직접 이벤트 메시지 문자열을 쓰는 경우 또는 경우에 <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>메시지가 없습니다 매개 변수 삽입 자리 표시자 ParameterResourceFile 속성을 설정 하지 마십시오.</xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>       에 있는 Platform SDK 설명서의 &quot;메시지 컴파일러&quot; 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [http://msdn.microsoft.com](http://msdn.microsoft.com/)합니다."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_26_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_26_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_26_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, the message defined for resource identifier 1004 uses a placeholder for a parameter string defined for resource identifier 5002.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string ParameterResourceFile { get; set; }
    return:
      type: System.String
      description: "메시지 매개 변수 리소스 파일의 경로입니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Diagnostics.EventLogInstaller.ParameterResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)
  id: Rollback(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Rollback(IDictionary)
  nameWithType: EventLogInstaller.Rollback(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Rollback(IDictionary)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "상태로에 설치 하기 전에 이벤트 로그 정보를 레지스트리에 작성 했습니다. 설치 절차를 롤백하여에 컴퓨터를 복원 합니다."
  remarks: "Rollback 메서드 수행한는 <xref:System.Diagnostics.EventLogInstaller.Install%2A>메서드.</xref:System.Diagnostics.EventLogInstaller.Install%2A> 설치 프로젝트의 모든 구성 요소 설치가 실패할 경우 롤백 호출 됩니다. <xref:System.Diagnostics.EventLogInstaller.Install%2A>메서드를 만들거나 이벤트 로그 및 이벤트 소스에 대 한 속성을 설정 합니다.</xref:System.Diagnostics.EventLogInstaller.Install%2A> 롤백은 이벤트 로그 및 소스를 삭제 하거나 기존 소스 속성 설치 이전 값을 기본값으로 다시 설정 합니다.       일반적으로 호출 하지 않으면의 메서드는 <xref:System.Diagnostics.EventLogInstaller>에서; 코드 내에서 일반적으로 호출 에서만 [Installutil.exe (설치 관리자 도구)](~/add/includes/ajax-current-ext-md.md).</xref:System.Diagnostics.EventLogInstaller> 이 도구를 설치, 설치 프로세스가 이미 수행 하는 모든 변경 내용을 실행 취소 또는 다른 구성 요소에 실패 한 경우 Rollback 메서드를 호출 합니다.       응용 프로그램의 설치 루틴 프로젝트 설치 관리자를 사용 하 여 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>속성을 자동으로 설치 되어 있는 구성 요소에 대 한 정보를 유지 관리 합니다.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> 으로 롤백에 전달 되는이 상태 정보는 `savedState` 도구 각 <xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller> 롤백합니다. 매개 변수를 지속적으로 업데이트 됩니다 일반적으로 코드의 명시적으로이 상태 정보를 수정할 필요는 없습니다."
  syntax:
    content: public override void Rollback (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>컴퓨터의 설치 전 상태가 포함 된.</xref:System.Collections.IDictionary>"
  overload: System.Diagnostics.EventLogInstaller.Rollback*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Source
  id: Source
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Source
  nameWithType: EventLogInstaller.Source
  fullName: System.Diagnostics.EventLogInstaller.Source
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "로그와 등록할 소스 이름을 가져오거나 설정 합니다."
  remarks: "이벤트 소스는 이벤트 로그를 나타냅니다. 것이 응용 프로그램의 이름 또는 대형 응용 프로그램 내의 구성 요소 이름입니다.       설치 관리자 항목의 유효한 소스로 이벤트 로그와 응용 프로그램을 등록 하려면 Source 속성의 값을 사용 합니다. 새 소스 이름이 기존 원본 이름 또는 기존 이벤트 로그 이름과 일치할 수 없습니다. 각 소스; 한 번에 하나의 이벤트 로그에 쓸 수만 그러나 응용 프로그램 여러 이벤트 로그에 쓸 여러 소스를 사용할 수 있습니다. 예를 들어 응용 프로그램에 다른 이벤트 로그 또는 서로 다른 리소스 파일에 대해 구성 된 여러 소스가 필요할 수 있습니다.       응용 프로그램 및 서비스 응용 프로그램 로그 나 사용자 지정 로그에 써야 합니다. 장치 드라이버 시스템 로그에 써야 합니다. 설치 관리자 실행 되기 전에 로그 이름을 지정 하지 않는 경우 설치 관리자 응용 프로그램 로그에 소스를 등록 합니다. 존재 하지 않는 로그의 이름을 지정 하면, 해당 로그에 소스를 등록 하는 시스템 이지만 로그까지 생성 되지 경우 첫 번째 항목에 기록 됩니다.       사용 하 여 <xref:System.Diagnostics.EventLogInstaller>기존 또는 새 이벤트 로그;에 대 한 새 원본을 등록 하려면 사용 하지 마십시오 <xref:System.Diagnostics.EventLogInstaller>기존 소스를 변경 하려면.</xref:System.Diagnostics.EventLogInstaller> </xref:System.Diagnostics.EventLogInstaller> <xref:System.Diagnostics.EventLogInstaller>클래스는 지정 된 설치 속성에 맞게 기존 소스 구성 속성을 수정 하지 않습니다.</xref:System.Diagnostics.EventLogInstaller> <xref:System.Diagnostics.EventLogInstaller.Install%2A>Source 속성은 컴퓨터에서 다른 이벤트 로그에 등록 된 소스 이름을 일치 하는 경우 메서드는 예외를 throw 합니다.</xref:System.Diagnostics.EventLogInstaller.Install%2A> <xref:System.Diagnostics.EventLogInstaller.Install%2A>Source 속성에 지정 된 동일한 이벤트 로그에 이미 등록 되어 있는 소스 이름과 일치 하는 경우 메서드는 소스를 등록 하지 않습니다는 <xref:System.Diagnostics.EventLogInstaller.Log%2A>속성.</xref:System.Diagnostics.EventLogInstaller.Log%2A> </xref:System.Diagnostics.EventLogInstaller.Install%2A>       이벤트 로그 및 소스 동작에 대 한 정보를 자세한 참조는 <xref:System.Diagnostics.EventLog>클래스에 대 한 설명서는 <xref:System.Diagnostics.EventLog.Log%2A>및 <xref:System.Diagnostics.EventLog.Source%2A>속성.</xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog>"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "항목의 소스로 이벤트 로그에 등록 하는 이름입니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Diagnostics.EventLogInstaller.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)
  id: Uninstall(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Uninstall(IDictionary)
  nameWithType: EventLogInstaller.Uninstall(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Uninstall(IDictionary)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "레지스트리의 이벤트 로그 정보를 제거 하 여 설치를 제거 합니다."
  remarks: "경우는 <xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A>속성 값은 `Remove`제거 메서드는 소스를 삭제 하 고 연결 된 로그 생성 하는 경우 설치 관리자는 <xref:System.Diagnostics.EventLogInstaller.Log%2A>및 <xref:System.Diagnostics.EventLogInstaller.Source%2A>속성이 새 이벤트 로그 및 소스 생성을 지정 합니다.</xref:System.Diagnostics.EventLogInstaller.Source%2A> </xref:System.Diagnostics.EventLogInstaller.Log%2A> </xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A>       일반적으로 호출 하지 않으면의 메서드는 <xref:System.Diagnostics.EventLogInstaller>에서; 코드 내에서 일반적으로 호출 에서만 [Installutil.exe (설치 관리자 도구)](~/add/includes/ajax-current-ext-md.md) 제거 모드에서.</xref:System.Diagnostics.EventLogInstaller> 이 도구는 자동으로 설치 사전 설치 하는 상태 들에 의해 영향을 받는 시스템의 부분을 복원 하려면 제거 메서드를 호출 합니다. 여기에 제거 하 고 이벤트 로그와 연결 된 레지스트리 정보를 삭제 합니다.       응용 프로그램의 설치 제거 루틴 프로젝트 설치 관리자의 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>속성을 이미 제거 하는 구성 요소에 대 한 정보를 자동으로 유지 합니다.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> 이 상태 정보로는 제거에 전달 되는 `savedState` 도구 각 <xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller> 제거 매개 변수를 지속적으로 업데이트 됩니다 일반적으로 코드의 명시적으로이 상태 정보를 수정할 필요는 없습니다."
  syntax:
    content: public override void Uninstall (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>컴퓨터의 설치 전 상태가 포함 된.</xref:System.Collections.IDictionary>"
  overload: System.Diagnostics.EventLogInstaller.Uninstall*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.UninstallAction
  id: UninstallAction
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: UninstallAction
  nameWithType: EventLogInstaller.UninstallAction
  fullName: System.Diagnostics.EventLogInstaller.UninstallAction
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "표시 하는 값을 가져오거나 설정 합니다. 여부는 [Installutil.exe (설치 관리자 도구)](~/add/includes/ajax-current-ext-md.md) 이벤트 로그 또는 leave에서 설치 된 상태에서 설치 제거를 제거 해야 합니다."
  remarks: "이벤트 로그를 설치 하면 기존 로그를 필요에 따라 연결할 수 있습니다. 이렇게 하면 로그 설치 이전 상태로 돌아갑니다 해야 아니면 현재 설치 후 상태로 남아 있어야 하는지를 결정 해야 합니다. 이벤트 로그를 설치 이전 상태로 되돌리려는 경우 설치 시의 이벤트 로그 항목에 대 한 변경 내용이 복원 되지 않습니다. 와 연결 된 이벤트 로그 속성을 다시 설정할 수 있습니다는 <xref:System.Diagnostics.EventLogInstaller>사전 설치 값.</xref:System.Diagnostics.EventLogInstaller>"
  syntax:
    content: public System.Configuration.Install.UninstallAction UninstallAction { get; set; }
    return:
      type: System.Configuration.Install.UninstallAction
      description: "중 하나는 <xref href=&quot;System.Configuration.Install.UninstallAction&quot;> </xref> 어떤 상태로 때의 이벤트 로그를 둘 것인지 여부를 나타내는 값의 <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> 제거 됩니다. 기본값은 <xref uid=&quot;langword_csharp_Remove&quot; name=&quot;Remove&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Diagnostics.EventLogInstaller.UninstallAction*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "UninstallAction 잘못 된 값을 포함합니다. 이 속성에 대 한 유효한 값은 <xref uid=&quot;langword_csharp_Remove&quot; name=&quot;Remove&quot; href=&quot;&quot;> </xref> 및 <xref uid=&quot;langword_csharp_NoAction&quot; name=&quot;NoAction&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
references:
- uid: System.Configuration.Install.ComponentInstaller
  isExternal: false
  name: System.Configuration.Install.ComponentInstaller
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Diagnostics.EventLogInstaller.#ctor
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: EventLogInstaller()
  nameWithType: EventLogInstaller.EventLogInstaller()
  fullName: System.Diagnostics.EventLogInstaller.EventLogInstaller()
- uid: System.Diagnostics.EventLogInstaller.CategoryCount
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryCount
  nameWithType: EventLogInstaller.CategoryCount
  fullName: System.Diagnostics.EventLogInstaller.CategoryCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventLogInstaller.CategoryResourceFile
  fullName: System.Diagnostics.EventLogInstaller.CategoryResourceFile
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CopyFromComponent(IComponent)
  nameWithType: EventLogInstaller.CopyFromComponent(IComponent)
  fullName: System.Diagnostics.EventLogInstaller.CopyFromComponent(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Install(IDictionary)
  nameWithType: EventLogInstaller.Install(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Install(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLogInstaller.Log
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Log
  nameWithType: EventLogInstaller.Log
  fullName: System.Diagnostics.EventLogInstaller.Log
- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventLogInstaller.MessageResourceFile
  fullName: System.Diagnostics.EventLogInstaller.MessageResourceFile
- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventLogInstaller.ParameterResourceFile
  fullName: System.Diagnostics.EventLogInstaller.ParameterResourceFile
- uid: System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Rollback(IDictionary)
  nameWithType: EventLogInstaller.Rollback(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Rollback(IDictionary)
- uid: System.Diagnostics.EventLogInstaller.Source
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Source
  nameWithType: EventLogInstaller.Source
  fullName: System.Diagnostics.EventLogInstaller.Source
- uid: System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Uninstall(IDictionary)
  nameWithType: EventLogInstaller.Uninstall(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Uninstall(IDictionary)
- uid: System.Diagnostics.EventLogInstaller.UninstallAction
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: UninstallAction
  nameWithType: EventLogInstaller.UninstallAction
  fullName: System.Diagnostics.EventLogInstaller.UninstallAction
- uid: System.Configuration.Install.UninstallAction
  parent: System.Configuration.Install
  isExternal: false
  name: UninstallAction
  nameWithType: UninstallAction
  fullName: System.Configuration.Install.UninstallAction
- uid: System.Diagnostics.EventLogInstaller.#ctor*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: EventLogInstaller
  nameWithType: EventLogInstaller.EventLogInstaller
- uid: System.Diagnostics.EventLogInstaller.CategoryCount*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryCount
  nameWithType: EventLogInstaller.CategoryCount
- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventLogInstaller.CategoryResourceFile
- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CopyFromComponent
  nameWithType: EventLogInstaller.CopyFromComponent
- uid: System.Diagnostics.EventLogInstaller.Install*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Install
  nameWithType: EventLogInstaller.Install
- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: IsEquivalentInstaller
  nameWithType: EventLogInstaller.IsEquivalentInstaller
- uid: System.Diagnostics.EventLogInstaller.Log*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Log
  nameWithType: EventLogInstaller.Log
- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventLogInstaller.MessageResourceFile
- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventLogInstaller.ParameterResourceFile
- uid: System.Diagnostics.EventLogInstaller.Rollback*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Rollback
  nameWithType: EventLogInstaller.Rollback
- uid: System.Diagnostics.EventLogInstaller.Source*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Source
  nameWithType: EventLogInstaller.Source
- uid: System.Diagnostics.EventLogInstaller.Uninstall*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Uninstall
  nameWithType: EventLogInstaller.Uninstall
- uid: System.Diagnostics.EventLogInstaller.UninstallAction*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: UninstallAction
  nameWithType: EventLogInstaller.UninstallAction
