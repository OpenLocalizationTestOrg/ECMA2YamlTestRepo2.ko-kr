### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.Rfc2898DeriveBytes
  id: Rfc2898DeriveBytes
  children:
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  - System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)
  - System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  - System.Security.Cryptography.Rfc2898DeriveBytes.Reset
  - System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  langs:
  - csharp
  name: Rfc2898DeriveBytes
  nameWithType: Rfc2898DeriveBytes
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes
  type: Class
  summary: "암호 기반 구현에 따라 의사 (pseudo) 난수 생성기를 사용 하 여 파생 기능인, PBKDF2 키 <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref>합니다."
  remarks: "Rfc2898DeriveBytes에서는 암호, 솔트 및 반복 횟수를 한 다음 호출을 통해 키를 생성 된 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>메서드.</xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>       RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다. 키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다. Rfc2898DeriveBytes 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다. 암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.       PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. &quot;PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는&quot;에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다. 자세한 내용은 5.2 &quot;PBKDF2&quot; 섹션을 참조 하십시오.      > [!IMPORTANT] > 하드 코드 하지 소스 코드에는 암호입니다.  사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/add/includes/ajax-current-ext-md.md),&16; 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다."
  example:
  - "The following code example uses the Rfc2898DeriveBytes class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.  It then encrypts and decrypts some data using the keys.  \n  \n [!code-cs[rfc28981#1](~/add/codesnippet/csharp/t-system.security.crypto_117_1.cs)]\n [!code-vb[rfc28981#1](~/add/codesnippet/visualbasic/t-system.security.crypto_117_1.vb)]\n [!code-cpp[rfc28981#1](~/add/codesnippet/cpp/t-system.security.crypto_117_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class Rfc2898DeriveBytes : System.Security.Cryptography.DeriveBytes
  inheritance:
  - System.Object
  - System.Security.Cryptography.DeriveBytes
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.DeriveBytes.Dispose
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])
  id: '#ctor(System.String,System.Byte[])'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(String,Byte[])
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[])
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;> </xref> 클래스 키를 파생할 암호 및 솔트를 사용 합니다."
  remarks: "솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 합니다.       RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다. 키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다. <xref:System.Security.Cryptography.Rfc2898DeriveBytes>클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.       PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. &quot;PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는&quot;에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다. 자세한 내용은 5.2 &quot;PBKDF2&quot; 섹션을 참조 하십시오.      > [!IMPORTANT] > 하드 코드 하지 소스 코드에는 암호입니다.  사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/add/includes/ajax-current-ext-md.md),&16; 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다."
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.  It then encrypts and decrypts some data using the keys.  \n  \n [!code-cs[rfc28981#1](~/add/codesnippet/csharp/7aa0756c-8905-4e75-ae9a-_1.cs)]\n [!code-vb[rfc28981#1](~/add/codesnippet/visualbasic/7aa0756c-8905-4e75-ae9a-_1.vb)]\n [!code-cpp[rfc28981#1](~/add/codesnippet/cpp/7aa0756c-8905-4e75-ae9a-_1.cpp)]"
  syntax:
    content: public Rfc2898DeriveBytes (string password, byte[] salt);
    parameters:
    - id: password
      type: System.String
      description: "키 파생에 사용 되는 암호입니다."
    - id: salt
      type: System.Byte[]
      description: "키 파생에 사용 되는 키 솔트입니다."
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "지정 된 솔트 크기는 8 바이트 보다 작은 또는 반복 횟수는 1 보다 작습니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "암호 또는 솔트가 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(String,Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;> </xref> 클래스 키를 파생할 암호 및 솔트 크기를 사용 합니다."
  remarks: "솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 합니다.       RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다. 키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다. <xref:System.Security.Cryptography.Rfc2898DeriveBytes>클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.       PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. &quot;PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는&quot;에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다. 자세한 내용은 5.2 &quot;PBKDF2&quot; 섹션을 참조 하십시오.      > [!IMPORTANT] > 하드 코드 하지 소스 코드에는 암호입니다.  사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/add/includes/ajax-current-ext-md.md),&16; 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다."
  syntax:
    content: public Rfc2898DeriveBytes (string password, int saltSize);
    parameters:
    - id: password
      type: System.String
      description: "키 파생에 사용 되는 암호입니다."
    - id: saltSize
      type: System.Int32
      description: "원하는 클래스에서 생성할 임의의 솔트 크기입니다."
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "지정 된 솔트 크기는 8 바이트 보다 작습니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "암호 또는 솔트가 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)
  id: '#ctor(System.Byte[],System.Byte[],System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;> </xref> 클래스 키를 파생할 암호, 솔트 및 반복 횟수를 사용 합니다."
  remarks: "솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 반복 횟수는 0 보다 커야 합니다. 최소 권장된 반복 횟수는 1000입니다.       RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다. 키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다. <xref:System.Security.Cryptography.Rfc2898DeriveBytes>클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.       PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. &quot;PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는&quot;에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다. 자세한 내용은 5.2 &quot;PBKDF2&quot; 섹션을 참조 하십시오.      > [!IMPORTANT] > 하드 코드 하지 소스 코드에는 암호입니다.  사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/add/includes/ajax-current-ext-md.md),&16; 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다."
  syntax:
    content: public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations);
    parameters:
    - id: password
      type: System.Byte[]
      description: "키 파생에 사용 되는 암호입니다."
    - id: salt
      type: System.Byte[]
      description: "키 파생에 사용 되는 키 솔트입니다."
    - id: iterations
      type: System.Int32
      description: "작업에 대 한 반복 횟수입니다."
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "지정 된 솔트 크기는 8 바이트 보다 작은 또는 반복 횟수는 1 보다 작습니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "암호 또는 솔트가 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)
  id: '#ctor(System.String,System.Byte[],System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(String,Byte[],Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[],Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[],Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;> </xref> 클래스 키를 파생할 암호, 솔트 및 반복 횟수를 사용 합니다."
  remarks: "솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 반복 횟수는 0 보다 커야 합니다. 최소 권장된 반복 횟수는 1000입니다.       RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다. 키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다. <xref:System.Security.Cryptography.Rfc2898DeriveBytes>클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.       PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. &quot;PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는&quot;에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다. 자세한 내용은 5.2 &quot;PBKDF2&quot; 섹션을 참조 하십시오.      > [!IMPORTANT] > 하드 코드 하지 소스 코드에는 암호입니다.  사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/add/includes/ajax-current-ext-md.md),&16; 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다."
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.  It then encrypts and decrypts some data using the keys.  \n  \n [!code-cs[rfc28981#1](~/add/codesnippet/csharp/8b79aa42-3b6a-4a39-985a-_1.cs)]\n [!code-vb[rfc28981#1](~/add/codesnippet/visualbasic/8b79aa42-3b6a-4a39-985a-_1.vb)]\n [!code-cpp[rfc28981#1](~/add/codesnippet/cpp/8b79aa42-3b6a-4a39-985a-_1.cpp)]"
  syntax:
    content: public Rfc2898DeriveBytes (string password, byte[] salt, int iterations);
    parameters:
    - id: password
      type: System.String
      description: "키 파생에 사용 되는 암호입니다."
    - id: salt
      type: System.Byte[]
      description: "키 파생에 사용 되는 키 솔트입니다."
    - id: iterations
      type: System.Int32
      description: "작업에 대 한 반복 횟수입니다."
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "지정 된 솔트 크기는 8 바이트 보다 작은 또는 반복 횟수는 1 보다 작습니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "암호 또는 솔트가 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(String,Int32,Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32,Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;> </xref> 클래스 키를 파생할 암호, 솔트 크기 및 반복 횟수를 사용 합니다."
  remarks: "솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 반복 횟수는 0 보다 커야 합니다. 최소 권장된 반복 횟수는 1000입니다.       RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다. 키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다. <xref:System.Security.Cryptography.Rfc2898DeriveBytes>클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.       PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. &quot;PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는&quot;에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다. 자세한 내용은 5.2 &quot;PBKDF2&quot; 섹션을 참조 하십시오.      > [!IMPORTANT] > 하드 코드 하지 소스 코드에는 암호입니다.  사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/add/includes/ajax-current-ext-md.md),&16; 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다."
  syntax:
    content: public Rfc2898DeriveBytes (string password, int saltSize, int iterations);
    parameters:
    - id: password
      type: System.String
      description: "키 파생에 사용 되는 암호입니다."
    - id: saltSize
      type: System.Int32
      description: "원하는 클래스에서 생성할 임의의 솔트 크기입니다."
    - id: iterations
      type: System.Int32
      description: "작업에 대 한 반복 횟수입니다."
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "지정 된 솔트 크기는 8 바이트 보다 작은 또는 반복 횟수는 1 보다 작습니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "암호 또는 솔트가 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>iterations </code>범위를 벗어났습니다. 이 매개 변수는 음수가 아닌 숫자가 필요합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  id: CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: CryptDeriveKey(String,String,Int32,Byte[])
  nameWithType: Rfc2898DeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "암호화 키 파생 되는 <xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;> </xref> 개체입니다."
  remarks: "이 함수는 CryptDeriveKey(), Crypto API 함수에 대 한 래퍼 이며을 Crypto API를 사용 하 여 응용 프로그램과 상호 운용성을 제공 합니다.       경우는 `keySize` 매개 변수 0 비트로 설정 된 경우 지정된 된 알고리즘에 대 한 기본 키 크기가 사용 됩니다."
  syntax:
    content: public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);
    parameters:
    - id: algname
      type: System.String
      description: "키 파생을 알고리즘 이름입니다."
    - id: alghashname
      type: System.String
      description: "키 파생에 사용할 해시 알고리즘 이름입니다."
    - id: keySize
      type: System.Int32
      description: "비트를 파생 키의 크기입니다."
    - id: rgbIV
      type: System.Byte[]
      description: "초기화 벡터 (IV) 키 파생에 사용 하도록 합니다."
    return:
      type: System.Byte[]
      description: "파생된 키입니다."
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code> keySize </code> 매개 변수가 잘못 되었습니다.       -또는-암호화 서비스 공급자 (CSP) 가져올 수 없습니다.       -또는- <code> algname </code> 매개 변수는 올바른 알고리즘 이름이 아닙니다.       -또는- <code> alghashname </code> 매개 변수가 잘못 된 해시 알고리즘 이름 않습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Rfc2898DeriveBytes.Dispose(Boolean)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;> </xref> 클래스 및 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public `Dispose()` 메서드 및 `Finalize` 메서드. `Dispose()`보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다. `Finalize`호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.       경우는 `disposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>참조.</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 이 메서드 호출에서 `Dispose()` 각 참조 된 개체의 메서드."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)
  id: GetBytes(System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: GetBytes(Int32)
  nameWithType: Rfc2898DeriveBytes.GetBytes(Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "이 개체에 대 한 의사 (pseudo) 난수 키를 반환합니다."
  remarks: "<xref:System.Security.Cryptography.Rfc2898DeriveBytes>클래스는 난수 생성기 <xref:System.Security.Cryptography.HMACSHA1>.</xref:System.Security.Cryptography.HMACSHA1> 에 따라 사용 하 여 PBKDF2 기능 구현</xref:System.Security.Cryptography.Rfc2898DeriveBytes> <xref:System.Security.Cryptography.Rfc2898DeriveBytes>클래스에서는 암호, 솔트 및 반복 횟수를 한 다음 GetBytes 메서드를 호출 하 여 키를 생성 합니다.</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 이 메서드를 반복된 하 여 호출; 같은 키를 생성 하지 않습니다. GetBytes 메서드를 두 번의 호출을 추가 하는 대신,는 `cb` 매개 변수 값의 `20` GetBytes 메서드를 호출 하면 한 번에 해당는 `cb` 매개 변수 값의 `40`합니다."
  example:
  - "The following example shows how to use the GetBytes method to get the key for an instance of <xref:System.Security.Cryptography.Rfc2898DeriveBytes>. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.  \n  \n [!code-cs[rfc28981#2](~/add/codesnippet/csharp/m-system.security.crypto_127_1.cs)]\n [!code-vb[rfc28981#2](~/add/codesnippet/visualbasic/m-system.security.crypto_127_1.vb)]\n [!code-cpp[rfc28981#2](~/add/codesnippet/cpp/m-system.security.crypto_127_1.cpp)]"
  syntax:
    content: public override byte[] GetBytes (int cb);
    parameters:
    - id: cb
      type: System.Int32
      description: "생성할 의사 (pseudo) 난수 키 바이트의 수입니다."
    return:
      type: System.Byte[]
      description: "바이트 배열 의사 (pseudo) 난수 키 바이트로 채워진입니다."
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>cb </code>범위를 벗어났습니다. 이 매개 변수는 음수가 아닌 숫자가 필요합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  id: IterationCount
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: IterationCount
  nameWithType: Rfc2898DeriveBytes.IterationCount
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "작업에 대 한 반복 횟수를 가져오거나 설정 합니다."
  remarks: "반복 횟수는 작업을 수행 하는 횟수입니다. 이 메서드에 대 한 개수가&0; 보다 커야 합니다. 최소 권장된 반복 횟수는 1000입니다."
  example:
  - "The following example shows how to use the IterationCount property to display the number of iterations used in the generation of the key. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.  \n  \n [!code-cs[rfc28981#3](~/add/codesnippet/csharp/p-system.security.crypto_117_1.cs)]\n [!code-vb[rfc28981#3](~/add/codesnippet/visualbasic/p-system.security.crypto_117_1.vb)]\n [!code-cpp[rfc28981#3](~/add/codesnippet/cpp/p-system.security.crypto_117_1.cpp)]"
  syntax:
    content: public int IterationCount { get; set; }
    return:
      type: System.Int32
      description: "작업에 대 한 반복 횟수입니다."
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "반복 횟수는 1 보다 작습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Reset
  id: Reset
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Reset()
  nameWithType: Rfc2898DeriveBytes.Reset()
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "작업의 상태를 다시 설정합니다."
  remarks: "이 메서드는 솔트 나 반복 횟수가 수정 된 경우에 자동으로 호출 됩니다."
  example:
  - "The following example shows how to use the Reset method. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.  \n  \n [!code-cs[rfc28981#5](~/add/codesnippet/csharp/m-system.security.crypto_26_1.cs)]\n [!code-vb[rfc28981#5](~/add/codesnippet/visualbasic/m-system.security.crypto_26_1.vb)]\n [!code-cpp[rfc28981#5](~/add/codesnippet/cpp/m-system.security.crypto_26_1.cpp)]"
  syntax:
    content: public override void Reset ();
    parameters: []
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  id: Salt
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Salt
  nameWithType: Rfc2898DeriveBytes.Salt
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "작업에 대 한 키 솔트 값을 가져오거나 설정 합니다."
  remarks: "솔트, 바이트의 임의 집합 확인 하기가 더 어려워지므로 메시지의 인증 되지 않은 암호를 해독 하는 데 사용 됩니다. 사전 공격이 발생할 가능성이 가장 높은 키에 대 한 이전에 계산 된 암호화 된 값이 있는 암호화 된 값을 비교 하 여 암호화 된 메시지를 해독 하는 공격자가 시도 하는 방식의 공격이입니다. 키 파생 하기 전에 암호의 끝에 솔트, 즉 임의 바이트의 도입으로 이러한 공격 하기가 훨씬 더 어려워지므로 생성 됩니다."
  syntax:
    content: public byte[] Salt { get; set; }
    return:
      type: System.Byte[]
      description: "작업에 대 한 키 솔트 값입니다."
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.Salt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "지정 된 솔트 크기는 8 바이트 보다 작습니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "솔트가 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: System.Security.Cryptography.DeriveBytes
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(String,Byte[])
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[])
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(String,Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(Byte[],Byte[],Int32)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(String,Byte[],Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[],Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[],Int32)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(String,Int32,Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32,Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32,Int32)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: CryptDeriveKey(String,String,Int32,Byte[])
  nameWithType: Rfc2898DeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Rfc2898DeriveBytes.Dispose(Boolean)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: GetBytes(Int32)
  nameWithType: Rfc2898DeriveBytes.GetBytes(Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(Int32)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: IterationCount
  nameWithType: Rfc2898DeriveBytes.IterationCount
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Reset
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Reset()
  nameWithType: Rfc2898DeriveBytes.Reset()
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Reset()
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Salt
  nameWithType: Rfc2898DeriveBytes.Salt
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Salt
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: CryptDeriveKey
  nameWithType: Rfc2898DeriveBytes.CryptDeriveKey
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Dispose
  nameWithType: Rfc2898DeriveBytes.Dispose
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: GetBytes
  nameWithType: Rfc2898DeriveBytes.GetBytes
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: IterationCount
  nameWithType: Rfc2898DeriveBytes.IterationCount
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Reset*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Reset
  nameWithType: Rfc2898DeriveBytes.Reset
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Salt*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Salt
  nameWithType: Rfc2898DeriveBytes.Salt
