### YamlMime:ManagedReference
items:
- uid: System.Windows.DataTemplate
  id: DataTemplate
  children:
  - System.Windows.DataTemplate.#ctor
  - System.Windows.DataTemplate.#ctor(System.Object)
  - System.Windows.DataTemplate.DataTemplateKey
  - System.Windows.DataTemplate.DataType
  - System.Windows.DataTemplate.Triggers
  - System.Windows.DataTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)
  langs:
  - csharp
  name: DataTemplate
  nameWithType: DataTemplate
  fullName: System.Windows.DataTemplate
  type: Class
  summary: "데이터 개체의 시각적 구조를 설명합니다."
  remarks: "DataTemplate을 사용 하 여 데이터 개체의 시각화를 지정할 수 있습니다. DataTemplate 개체는 바인딩하는 경우에 특히 유용 프로그램 <xref:System.Windows.Controls.ItemsControl>와 같은 한 <xref:System.Windows.Controls.ListBox>전체 컬렉션에.</xref:System.Windows.Controls.ListBox> </xref:System.Windows.Controls.ItemsControl> 특정 한 지침이 없으면는 <xref:System.Windows.Controls.ListBox>컬렉션에 개체의 문자열 표현을 표시 합니다.</xref:System.Windows.Controls.ListBox> 이 경우 데이터 개체의 모양을 정의 하는 DataTemplate을 사용할 수 있습니다. 프로그램 DataTemplate 내용의 데이터 개체의 시각적 구조 됩니다.       심도 있는 논의 알려면 [데이터 템플릿 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example shows how to create a DataTemplate inline. The DataTemplate specifies that each data item appears as three <xref:System.Windows.Controls.TextBlock> elements within a <xref:System.Windows.Controls.StackPanel>. In this example, the data object is a class called `Task`. Note that each <xref:System.Windows.Controls.TextBlock> element in this template is bound to a property of the `Task` class.  \n  \n [!code-xml[DataTemplatingIntro_snip#Inline](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#inline)]  \n  \n It is more common to define a DataTemplate in the resources section so it can be a reusable object, as in the following example:  \n  \n [!code-xml[DataTemplatingIntro_snip#R1](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#r1)]  \n[!code-xml[DataTemplatingIntro_snip#AsResource](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#asresource)]  \n[!code-xml[DataTemplatingIntro_snip#R2](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#r2)]  \n  \n Now you can use `myTaskTemplate` as a resource, as in the following example:  \n  \n [!code-xml[DataTemplatingIntro_snip#MyTaskTemplate](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#mytasktemplate)]  \n  \n For the complete sample, see [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009)."
  syntax:
    content: >-
      [System.Windows.Markup.DictionaryKeyProperty("DataTemplateKey")]

      public class DataTemplate : System.Windows.FrameworkTemplate
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.FrameworkTemplate
  implements: []
  inheritedMembers:
  - System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)
  - System.Windows.FrameworkTemplate.HasContent
  - System.Windows.FrameworkTemplate.IsSealed
  - System.Windows.FrameworkTemplate.LoadContent
  - System.Windows.FrameworkTemplate.RegisterName(System.String,System.Object)
  - System.Windows.FrameworkTemplate.Resources
  - System.Windows.FrameworkTemplate.Seal
  - System.Windows.FrameworkTemplate.ShouldSerializeResources(System.Windows.Markup.XamlDesignerSerializationManager)
  - System.Windows.FrameworkTemplate.ShouldSerializeVisualTree
  - System.Windows.FrameworkTemplate.System#Windows#Markup#INameScope#FindName(System.String)
  - System.Windows.FrameworkTemplate.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  - System.Windows.FrameworkTemplate.Template
  - System.Windows.FrameworkTemplate.UnregisterName(System.String)
  - System.Windows.FrameworkTemplate.VisualTree
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.DataTemplate.#ctor
  id: '#ctor'
  parent: System.Windows.DataTemplate
  langs:
  - csharp
  name: DataTemplate()
  nameWithType: DataTemplate.DataTemplate()
  fullName: System.Windows.DataTemplate.DataTemplate()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.DataTemplate&quot;> </xref> 클래스입니다."
  syntax:
    content: public DataTemplate ();
    parameters: []
  overload: System.Windows.DataTemplate.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DataTemplate.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.DataTemplate
  langs:
  - csharp
  name: DataTemplate(Object)
  nameWithType: DataTemplate.DataTemplate(Object)
  fullName: System.Windows.DataTemplate.DataTemplate(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.DataTemplate&quot;> </xref> 지정된 된 <xref:System.Windows.DataTemplate.DataType*>속성.</xref:System.Windows.DataTemplate.DataType*>"
  remarks: "클래스의 형식 이름으로 참조를 사용 하 여는 [X:type 태그 확장](~/add/includes/ajax-current-ext-md.md)합니다. 에 대 한 템플릿이 사용 되는 경우 [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] 데이터,이 데이터의 태그 이름을 나타내는 문자열입니다."
  syntax:
    content: public DataTemplate (object dataType);
    parameters:
    - id: dataType
      type: System.Object
      description: "서식 파일을 데이터 개체에 대 한 경우 데이터 개체의 형식 이름입니다."
  overload: System.Windows.DataTemplate.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DataTemplate.DataTemplateKey
  id: DataTemplateKey
  parent: System.Windows.DataTemplate
  langs:
  - csharp
  name: DataTemplateKey
  nameWithType: DataTemplate.DataTemplateKey
  fullName: System.Windows.DataTemplate.DataTemplateKey
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "기본 키를 가져옵니다는 <xref href=&quot;System.Windows.DataTemplate&quot;> </xref>합니다."
  remarks: "설정 하지 않은 경우는 [X:key 지시문](~/add/includes/ajax-current-ext-md.md) 에 <xref:System.Windows.DataTemplate>에 <xref:System.Windows.ResourceDictionary>는 DataTemplateKey 키로 사용 됩니다.</xref:System.Windows.ResourceDictionary> </xref:System.Windows.DataTemplate>"
  syntax:
    content: public object DataTemplateKey { get; }
    return:
      type: System.Object
      description: "기본 키의 <xref href=&quot;System.Windows.DataTemplate&quot;> </xref>합니다."
  overload: System.Windows.DataTemplate.DataTemplateKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DataTemplate.DataType
  id: DataType
  parent: System.Windows.DataTemplate
  langs:
  - csharp
  name: DataType
  nameWithType: DataTemplate.DataType
  fullName: System.Windows.DataTemplate.DataType
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "이 대 한 종류를 가져오거나 <xref href=&quot;System.Windows.DataTemplate&quot;> </xref> 것뿐입니다."
  remarks: "이 속성은 매우 비슷하지만 <xref:System.Windows.Style.TargetType%2A> <xref:System.Windows.Style>클래스</xref:System.Windows.Style> 의 속성</xref:System.Windows.Style.TargetType%2A> 지정 하지 않고 데이터 형식으로이 속성을 설정 하는 경우는 `x:Key`, <xref:System.Windows.DataTemplate>해당 유형의 데이터 개체에 자동으로 적용 됩니다.</xref:System.Windows.DataTemplate> 그렇게 하면 사용자에 게 유의 `x:Key` 는 암시적으로 설정 합니다. 따라서이 할당 하는 경우 <xref:System.Windows.DataTemplate>는 `x:Key` 값을 암시적으로 재정의 하는 `x:Key` 및 <xref:System.Windows.DataTemplate>자동으로 적용할 수는 없습니다.</xref:System.Windows.DataTemplate> </xref:System.Windows.DataTemplate>       또한 바인딩하는 경우 유의 <xref:System.Windows.Controls.ContentControl>의 컬렉션에 `Task` 개체는 <xref:System.Windows.Controls.ContentControl>사용 하지 않는 <xref:System.Windows.DataTemplate>자동으로.</xref:System.Windows.DataTemplate> </xref:System.Windows.Controls.ContentControl> </xref:System.Windows.Controls.ContentControl> 때문에 대 한 바인딩은 <xref:System.Windows.Controls.ContentControl>는 전체 컬렉션 또는 개별 개체에 바인딩할 인지 구분 하기 위해 더 많은 정보가 필요 합니다.</xref:System.Windows.Controls.ContentControl> 경우에 <xref:System.Windows.Controls.ContentControl>의 선택 영역 추적는 <xref:System.Windows.Controls.ItemsControl>설정할 수 있습니다 형식은 <xref:System.Windows.Data.Binding.Path%2A>속성의는 <xref:System.Windows.Controls.ContentControl>에 바인딩 &quot;`/`&quot; 현재 항목에 관심이 나타내기 위해.</xref:System.Windows.Controls.ContentControl> </xref:System.Windows.Data.Binding.Path%2A> </xref:System.Windows.Controls.ItemsControl> </xref:System.Windows.Controls.ContentControl> 예를 들어 참조 [하는 방법: 컬렉션 및 표시 선택에 따라 정보에 바인딩](~/add/includes/ajax-current-ext-md.md)합니다. 지정 하면 그렇지 않은 경우는 <xref:System.Windows.DataTemplate>명시적으로 설정 하 여는 <xref:System.Windows.Controls.ContentControl.ContentTemplate%2A>속성.</xref:System.Windows.Controls.ContentControl.ContentTemplate%2A> </xref:System.Windows.DataTemplate>       DataType 속성은 경우에 특히 유용는 <xref:System.Windows.Data.CompositeCollection>다양 한 유형의 데이터 개체입니다.</xref:System.Windows.Data.CompositeCollection>       이 속성의 기본 네임 스페이스에 없는 XML 요소를 대상으로 하는 경우 요소 이름에 네임 스페이스 또는 네임 스페이스 지정자 앞에 야 합니다. 중괄호에 표시 되는 네임 스페이스의 xml에서 LINQ를 통해 노출 하는 XML에 대 한 중괄호는 이스케이프 시퀀스 앞: ```xaml   <DataTemplate DataType=&quot;{}{http://myNamespace}Details&quot;>   ``` XML에 대 한 XPath를 통해 노출, 요소 이름 앞의 인스턴스로 설정 된 네임 스페이스 지정자 <xref:System.Windows.Data.XmlNamespaceMapping>: ```xaml   <DataTemplate DataType=&quot;mn:Details&quot;>   ``` <a name=&quot;xamlAttributeUsage_DataType&quot;> </a> # # XAML 특성 사용 ```   <object DataType=&quot;typeName&quot;/>   ``` <a name=&quot;xamlValues_DataType&quot;> </a> # # XAML 값 *typeName* 이 속성 (문자열)으로 데이터 개체의 유형 이름을 포함 된 서식 파일을 데이터 개체에 대 한 경우.            </xref:System.Windows.Data.XmlNamespaceMapping> 클래스의 형식 이름으로 참조를 사용 하 여는 [X:type 태그 확장](~/add/includes/ajax-current-ext-md.md)합니다. 에 대 한 템플릿이 사용 되는 경우 [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] 데이터를이 속성에는 XML 요소 이름을 포함 합니다. XML 요소에 대 한 기본이 아닌 네임 스페이스를 지정 하는 방법에 대 한 자세한 내용은 설명서 설명 부분을 참조 하십시오."
  syntax:
    content: public object DataType { get; set; }
    return:
      type: System.Object
      description: "기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.DataTemplate.DataType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DataTemplate.Triggers
  id: Triggers
  parent: System.Windows.DataTemplate
  langs:
  - csharp
  name: Triggers
  nameWithType: DataTemplate.Triggers
  fullName: System.Windows.DataTemplate.Triggers
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "속성 값을 적용 하거나 하나 이상의 조건에 따라 작업을 수행 하는 트리거의 컬렉션을 가져옵니다."
  remarks: "데이터 템플릿 내에 트리거를 만드는 경우 트리거 setter 데이터 서식 파일의 범위 내에 있는 속성을 설정 해야 합니다. 그렇지 않으면 데이터를 포함 하는 형식을 대상으로 하는 스타일을 사용 하 여 트리거 더 적합할 수 있습니다. 예를 들어, 바인딩하는 경우는 <xref:System.Windows.Controls.ListBox>컨트롤 컨테이너는 <xref:System.Windows.Controls.ListBoxItem>개체.</xref:System.Windows.Controls.ListBoxItem> </xref:System.Windows.Controls.ListBox> 범위에 포함 되지 않는 속성을 설정 하려면 트리거를 사용 하는 경우는 <xref:System.Windows.DataTemplate>, 더 적합할 수 있습니다는 <xref:System.Windows.Controls.ListBoxItem>스타일 및 스타일 내에서 트리거 생성.</xref:System.Windows.Controls.ListBoxItem> </xref:System.Windows.DataTemplate> 자세한 내용은 참조는 DataTemplate에 포함 되? 에 [데이터 템플릿 개요](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] >이 속성 설정할 수 있습니다 [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] 표시, 컬렉션 구문을 사용 하거나 컬렉션 개체에 액세스 하 고 추가 등의 다양 한 메서드를 사용 하 여 합니다. 컬렉션 개체 자체를 액세스 하는 속성은 읽기 전용, 컬렉션 자체는 읽기 / 쓰기입니다.      <a name=&quot;xamlPropertyElementUsage_Triggers&quot;></a># # XAML 속성 요소 사용 ```   <object>     <object.Triggers>       OneOrMoreTriggers     </object.Triggers>   </object>   ``` <a name=&quot;xamlValues_Triggers&quot;> </a> # # XAML 값 *OneOrMoreTriggers*&0; 개 이상의 <xref:System.Windows.TriggerBase>개체입니다.</xref:System.Windows.TriggerBase>      "
  example:
  - "The following <xref:System.Windows.DataTemplate> demonstrates the use of the Triggers property.  \n  \n [!code-xml[DataBindingLab#AuctionItemDataTemplate](~/add/codesnippet/xaml/DataBindingLab/DataBindingLabApp.xaml#auctionitemdatatemplate)]  \n  \n For the complete sample, see [Data Binding Demo](http://go.microsoft.com/fwlink/?LinkID=163703)."
  syntax:
    content: public System.Windows.TriggerCollection Triggers { get; }
    return:
      type: System.Windows.TriggerCollection
      description: "트리거 개체의 컬렉션입니다. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.DataTemplate.Triggers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DataTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)
  id: ValidateTemplatedParent(System.Windows.FrameworkElement)
  parent: System.Windows.DataTemplate
  langs:
  - csharp
  name: ValidateTemplatedParent(FrameworkElement)
  nameWithType: DataTemplate.ValidateTemplatedParent(FrameworkElement)
  fullName: System.Windows.DataTemplate.ValidateTemplatedParent(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "규칙의 집합에 대해 템플릿 기반 부모를 확인합니다."
  remarks: "메서드는 다음 규칙을 사용:- `templatedParent` null이 아닌 <xref:System.Windows.FrameworkElement>.</xref:System.Windows.FrameworkElement> 이어야 합니다      - <xref:System.Windows.DataTemplate> <xref:System.Windows.Controls.ContentPresenter>.</xref:System.Windows.Controls.ContentPresenter> 에 적용 되어야 합니다</xref:System.Windows.DataTemplate>"
  syntax:
    content: protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);
    parameters:
    - id: templatedParent
      type: System.Windows.FrameworkElement
      description: "이 서식 파일에 적용 되는 요소입니다."
  overload: System.Windows.DataTemplate.ValidateTemplatedParent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.FrameworkTemplate
  isExternal: false
  name: System.Windows.FrameworkTemplate
- uid: System.Windows.DataTemplate.#ctor
  parent: System.Windows.DataTemplate
  isExternal: false
  name: DataTemplate()
  nameWithType: DataTemplate.DataTemplate()
  fullName: System.Windows.DataTemplate.DataTemplate()
- uid: System.Windows.DataTemplate.#ctor(System.Object)
  parent: System.Windows.DataTemplate
  isExternal: false
  name: DataTemplate(Object)
  nameWithType: DataTemplate.DataTemplate(Object)
  fullName: System.Windows.DataTemplate.DataTemplate(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.DataTemplate.DataTemplateKey
  parent: System.Windows.DataTemplate
  isExternal: false
  name: DataTemplateKey
  nameWithType: DataTemplate.DataTemplateKey
  fullName: System.Windows.DataTemplate.DataTemplateKey
- uid: System.Windows.DataTemplate.DataType
  parent: System.Windows.DataTemplate
  isExternal: false
  name: DataType
  nameWithType: DataTemplate.DataType
  fullName: System.Windows.DataTemplate.DataType
- uid: System.Windows.DataTemplate.Triggers
  parent: System.Windows.DataTemplate
  isExternal: false
  name: Triggers
  nameWithType: DataTemplate.Triggers
  fullName: System.Windows.DataTemplate.Triggers
- uid: System.Windows.TriggerCollection
  parent: System.Windows
  isExternal: false
  name: TriggerCollection
  nameWithType: TriggerCollection
  fullName: System.Windows.TriggerCollection
- uid: System.Windows.DataTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)
  parent: System.Windows.DataTemplate
  isExternal: false
  name: ValidateTemplatedParent(FrameworkElement)
  nameWithType: DataTemplate.ValidateTemplatedParent(FrameworkElement)
  fullName: System.Windows.DataTemplate.ValidateTemplatedParent(FrameworkElement)
- uid: System.Windows.FrameworkElement
  parent: System.Windows
  isExternal: false
  name: FrameworkElement
  nameWithType: FrameworkElement
  fullName: System.Windows.FrameworkElement
- uid: System.Windows.DataTemplate.#ctor*
  parent: System.Windows.DataTemplate
  isExternal: false
  name: DataTemplate
  nameWithType: DataTemplate.DataTemplate
- uid: System.Windows.DataTemplate.DataTemplateKey*
  parent: System.Windows.DataTemplate
  isExternal: false
  name: DataTemplateKey
  nameWithType: DataTemplate.DataTemplateKey
- uid: System.Windows.DataTemplate.DataType*
  parent: System.Windows.DataTemplate
  isExternal: false
  name: DataType
  nameWithType: DataTemplate.DataType
- uid: System.Windows.DataTemplate.Triggers*
  parent: System.Windows.DataTemplate
  isExternal: false
  name: Triggers
  nameWithType: DataTemplate.Triggers
- uid: System.Windows.DataTemplate.ValidateTemplatedParent*
  parent: System.Windows.DataTemplate
  isExternal: false
  name: ValidateTemplatedParent
  nameWithType: DataTemplate.ValidateTemplatedParent
