### YamlMime:ManagedReference
items:
- uid: System.Net.HttpListenerContext
  id: HttpListenerContext
  children:
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  - System.Net.HttpListenerContext.Request
  - System.Net.HttpListenerContext.Response
  - System.Net.HttpListenerContext.User
  langs:
  - csharp
  name: HttpListenerContext
  nameWithType: HttpListenerContext
  fullName: System.Net.HttpListenerContext
  type: Class
  summary: "사용 되는 요청 및 응답 개체에 대 한 액세스를 제공는 <xref href=&quot;System.Net.HttpListener&quot;> </xref> 클래스입니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "에 의해 처리 되는 클라이언트의 하이퍼텍스트 전송 프로토콜 (HTTP) 요청에 관련 된 정보를 제공 하는이 클래스는 <xref:System.Net.HttpListener>개체입니다.</xref:System.Net.HttpListener> 이 클래스에 사용할 수 있는 메서드는 <xref:System.Net.HttpListener>WebSocket 연결을 허용 하는 개체입니다.</xref:System.Net.HttpListener>       <xref:System.Net.HttpListener.GetContext%2A>메서드 HttpListenerContext 클래스의 인스턴스를 반환 합니다.</xref:System.Net.HttpListener.GetContext%2A> 클라이언트 요청을 나타내는 개체를 가져오려면는 <xref:System.Net.HttpListenerContext.Request%2A>속성.</xref:System.Net.HttpListenerContext.Request%2A> 클라이언트로 전송 될 응답을 나타내는 개체를 가져오려면는 <xref:System.Net.HttpListener>를 사용 하 여는 <xref:System.Net.HttpListenerContext.Response%2A>속성.</xref:System.Net.HttpListenerContext.Response%2A> </xref:System.Net.HttpListener> 로그인 이름 및 그의 인증 여부, 예: 요청을 보내는 클라이언트에 대 한 사용자 정보에 속성을 쿼리할 수는 <xref:System.Security.Principal.IPrincipal>에서 반환 된 개체는 <xref:System.Net.HttpListenerContext.User%2A>속성.</xref:System.Net.HttpListenerContext.User%2A> </xref:System.Security.Principal.IPrincipal>       HttpListenerContext 개체를 닫아도 응답을 클라이언트로 보내고는 HttpListenerContext에서 사용 하는 모든 리소스를 해제 합니다. 전송 되지 않은 이미, 하 고는 HttpListenerContext에서 사용 하는 모든 리소스를 해제 하는 경우 클라이언트에 대 한 응답을 삭제 HttpListenerContext 개체를 중단 합니다. 닫거나 중단 HttpListenerContext 개체 뒤의 메서드 또는 속성을 참조할 수 없습니다. 이렇게 하면 표시 됩니다는 <xref:System.ObjectDisposedException>예외.</xref:System.ObjectDisposedException>"
  example:
  - "The following code example displays the user information for a client request.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/t-system.net.httplistene_0_1.cs)]"
  syntax:
    content: public sealed class HttpListenerContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  id: AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "비동기 작업으로 WebSocket 연결을 수락 합니다."
  remarks: "이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task%601>WebSocket 연결 수락 개체 완성 합니다.</xref:System.Threading.Tasks.Task%601>       수신 버퍼의 크기가 16,385 바이트입니다. WebSocket 연결 유지 간격 기본값인 30000 (30 초)으로 설정 됩니다."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol);
    parameters:
    - id: subProtocol
      type: System.String
      description: "지원 되는 WebSocket 하위 프로토콜입니다."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "반환 &lt;xref:System.Threading.Tasks.Task%601&gt;합니다.       비동기 작업을 나타내는 작업 개체입니다. &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; 작업 개체에서 속성 반환는 <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> 개체입니다."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>빈 문자열-또는- <code>subProtocol</code> 잘못 된 문자가 있습니다."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "WebSocket 핸드셰이크를 완료 하려면 응답을 보낼 때 오류가 있습니다."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "비동기 작업으로 지원 되는 WebSocket 하위 프로토콜 및 WebSocket 연결 유지 간격을 지정 하는 WebSocket 연결을 허용 합니다."
  remarks: "이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task%601>WebSocket 연결 수락 개체 완성 합니다.</xref:System.Threading.Tasks.Task%601>       수신 버퍼의 크기가 16,385 바이트입니다."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "지원 되는 WebSocket 하위 프로토콜입니다."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket 프로토콜 연결 유지 간격 (밀리초)입니다."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "반환 &lt;xref:System.Threading.Tasks.Task%601&gt;합니다.       비동기 작업을 나타내는 작업 개체입니다. &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; 작업 개체에서 속성 반환는 <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> 개체입니다."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>빈 문자열-또는- <code>subProtocol</code> 잘못 된 문자가 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>너무 작습니다."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "WebSocket 핸드셰이크를 완료 하려면 응답을 보낼 때 오류가 있습니다."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "지원 되는 WebSocket 하위 프로토콜을 지정 하는 WebSocket 연결 수락, 수신 버퍼 크기 및 비동기 작업으로 WebSocket 연결 유지 간격입니다."
  remarks: "이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task%601>> WebSocket 연결 수락 개체 완성 합니다.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "지원 되는 WebSocket 하위 프로토콜입니다."
    - id: receiveBufferSize
      type: System.Int32
      description: "수신 버퍼 크기 (바이트)에서입니다."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket 프로토콜 연결 유지 간격 (밀리초)입니다."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "반환 &lt;xref:System.Threading.Tasks.Task%601&gt;합니다.       비동기 작업을 나타내는 작업 개체입니다. &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; 작업 개체에서 속성 반환는 <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> 개체입니다."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>빈 문자열-또는- <code>subProtocol</code> 잘못 된 문자가 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>너무 작습니다.       -또는- <code>receiveBufferSize</code> 16 바이트 보다 작다고-또는- <code>receiveBufferSize</code> 64, 000 바이트 보다 큽니다."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "WebSocket 핸드셰이크를 완료 하려면 응답을 보낼 때 오류가 있습니다."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "지원 되는 WebSocket 하위 프로토콜을 지정 하는 WebSocket 연결 수락, 수신 버퍼 크기, WebSocket 연결 유지 간격 및 비동기 작업으로 내부 버퍼입니다."
  remarks: "이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task%601>WebSocket 연결 수락 개체 완성 합니다.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment<byte> internalBuffer);
    parameters:
    - id: subProtocol
      type: System.String
      description: "지원 되는 WebSocket 하위 프로토콜입니다."
    - id: receiveBufferSize
      type: System.Int32
      description: "수신 버퍼 크기 (바이트)에서입니다."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket 프로토콜 연결 유지 간격 (밀리초)입니다."
    - id: internalBuffer
      type: System.ArraySegment{System.Byte}
      description: "이 작업에 사용할 내부 버퍼입니다."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "반환 &lt;xref:System.Threading.Tasks.Task%601&gt;합니다.       비동기 작업을 나타내는 작업 개체입니다. &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; 작업 개체에서 속성 반환는 <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> 개체입니다."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>빈 문자열-또는- <code>subProtocol</code> 잘못 된 문자가 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>너무 작습니다.       -또는- <code>receiveBufferSize</code> 16 바이트 보다 작다고-또는- <code>receiveBufferSize</code> 64, 000 바이트 보다 큽니다."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "WebSocket 핸드셰이크를 완료 하려면 응답을 보낼 때 오류가 있습니다."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Request
  id: Request
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져옵니다는 <xref href=&quot;System.Net.HttpListenerRequest&quot;> </xref> 리소스에 대 한 클라이언트의 요청을 나타내는입니다."
  remarks: "이 닫으면 <xref:System.Net.HttpListenerContext>, 닫기는 클라이언트에 대 한 응답을 전송 합니다는 <xref:System.Net.HttpListenerResponse>닫은 응답을 포함 하는 <xref:System.Net.HttpListenerRequest>이 속성에서 반환 된 개체입니다.</xref:System.Net.HttpListenerRequest> </xref:System.Net.HttpListenerResponse> </xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example demonstrates calling this method. The `listener` variable holds an <xref:System.Net.HttpListener> object.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_16_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerRequest Request { get; }
    return:
      type: System.Net.HttpListenerRequest
      description: "<xref href=&quot;System.Net.HttpListenerRequest&quot;> </xref> 클라이언트 요청을 나타내는 개체입니다."
  overload: System.Net.HttpListenerContext.Request*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Response
  id: Response
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져옵니다는 <xref href=&quot;System.Net.HttpListenerResponse&quot;> </xref> 클라이언트의 요청에 대 한 응답에서 클라이언트로 전송 되는 개체입니다."
  remarks: "속성을 설정 하 여 응답을 구성 하는 응용 프로그램의 <xref:System.Net.HttpListenerResponse>이 속성에서 반환 된 개체입니다.</xref:System.Net.HttpListenerResponse> 응답을 구성한 후에 게 보내기 클라이언트는 응답을 닫아 하거나 닫으면이 <xref:System.Net.HttpListenerContext>개체입니다.</xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example demonstrates getting the response to a client's request and adding the response body.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_35_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerResponse Response { get; }
    return:
      type: System.Net.HttpListenerResponse
      description: "<xref href=&quot;System.Net.HttpListenerResponse&quot;> </xref> 개체를 다시 클라이언트에 대 한 응답을 보내는 데 사용 합니다."
  overload: System.Net.HttpListenerContext.Response*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.User
  id: User
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "해당 요청으로 표현 되는 클라이언트에 대 한 id, 인증 정보 및 보안 역할을 가져오는 데 사용 되는 개체를 가져옵니다 <xref href=&quot;System.Net.HttpListenerContext&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Net.HttpListener>사용 하 여 인증 해야 함을 의미는 <xref:System.Net.HttpListener.AuthenticationSchemes%2A>속성을 지정 하 여 프로그램 <xref:System.Net.AuthenticationSchemeSelector>를 사용 하 여 대리자는 <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>속성.</xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> </xref:System.Net.AuthenticationSchemeSelector> </xref:System.Net.HttpListener.AuthenticationSchemes%2A> </xref:System.Net.HttpListener>       클라이언트의 로그인 이름 및 인증 정보를 확인 하려면는 <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>이 속성에서 반환 된 개체의 속성입니다.</xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates accessing identity and authentication information about the client, and returning it to the client in the response.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/p-system.net.httplistene_19_1.cs)]"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "<xref:System.Security.Principal.IPrincipal>클라이언트를 설명 하는 개체 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우는 <xref href=&quot;System.Net.HttpListener&quot;> </xref> 이 제공 하는 <xref href=&quot;System.Net.HttpListenerContext&quot;> </xref> 인증이 필요 없는.</xref:System.Security.Principal.IPrincipal>"
  overload: System.Net.HttpListenerContext.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.WebSockets.WebSocketException
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketException
  nameWithType: WebSocketException
  fullName: System.Net.WebSockets.WebSocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpListenerWebSocketContext>
  nameWithType: Task<HttpListenerWebSocketContext>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.HttpListenerWebSocketContext
    name: HttpListenerWebSocketContext
    nameWithType: HttpListenerWebSocketContext
    fullName: HttpListenerWebSocketContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.HttpListenerContext.Request
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
- uid: System.Net.HttpListenerRequest
  parent: System.Net
  isExternal: false
  name: HttpListenerRequest
  nameWithType: HttpListenerRequest
  fullName: System.Net.HttpListenerRequest
- uid: System.Net.HttpListenerContext.Response
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
- uid: System.Net.HttpListenerResponse
  parent: System.Net
  isExternal: false
  name: HttpListenerResponse
  nameWithType: HttpListenerResponse
  fullName: System.Net.HttpListenerResponse
- uid: System.Net.HttpListenerContext.User
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync
  nameWithType: HttpListenerContext.AcceptWebSocketAsync
- uid: System.Net.HttpListenerContext.Request*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
- uid: System.Net.HttpListenerContext.Response*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
- uid: System.Net.HttpListenerContext.User*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
