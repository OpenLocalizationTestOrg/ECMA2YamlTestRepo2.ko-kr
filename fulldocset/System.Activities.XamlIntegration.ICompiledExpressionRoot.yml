### YamlMime:ManagedReference
items:
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot
  id: ICompiledExpressionRoot
  children:
  - System.Activities.XamlIntegration.ICompiledExpressionRoot.CanExecuteExpression(System.String,System.Boolean,System.Collections.Generic.IList{System.Activities.LocationReference},System.Int32@)
  - System.Activities.XamlIntegration.ICompiledExpressionRoot.GetExpressionTreeForExpression(System.Int32,System.Collections.Generic.IList{System.Activities.LocationReference})
  - System.Activities.XamlIntegration.ICompiledExpressionRoot.GetLanguage
  - System.Activities.XamlIntegration.ICompiledExpressionRoot.GetRequiredLocations(System.Int32)
  - System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(System.Int32,System.Collections.Generic.IList{System.Activities.Location})
  - System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(System.Int32,System.Collections.Generic.IList{System.Activities.LocationReference},System.Activities.ActivityContext)
  langs:
  - csharp
  name: ICompiledExpressionRoot
  nameWithType: ICompiledExpressionRoot
  fullName: System.Activities.XamlIntegration.ICompiledExpressionRoot
  type: Interface
  summary: "컴파일된 식 루트에 대 한 정보를 지정합니다."
  syntax:
    content: public interface ICompiledExpressionRoot
  implements: []
  platform:
  - net462
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.CanExecuteExpression(System.String,System.Boolean,System.Collections.Generic.IList{System.Activities.LocationReference},System.Int32@)
  id: CanExecuteExpression(System.String,System.Boolean,System.Collections.Generic.IList{System.Activities.LocationReference},System.Int32@)
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  langs:
  - csharp
  name: CanExecuteExpression(String,Boolean,IList<LocationReference>,Int32)
  nameWithType: ICompiledExpressionRoot.CanExecuteExpression(String,Boolean,IList<LocationReference>,Int32)
  fullName: System.Activities.XamlIntegration.ICompiledExpressionRoot.CanExecuteExpression(String,Boolean,IList<LocationReference>,Int32)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.XamlIntegration
  summary: "나타냅니다 여부는 <xref href=&quot;System.Activities.XamlIntegration.ICompiledExpressionRoot&quot;> </xref> 식을 실행할 수 있습니다."
  syntax:
    content: public bool CanExecuteExpression (string expressionText, bool isReference, System.Collections.Generic.IList<System.Activities.LocationReference> locations, out int expressionId);
    parameters:
    - id: expressionText
      type: System.String
      description: "사용 되는 식 텍스트입니다."
    - id: isReference
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>경우; 참조 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
    - id: locations
      type: System.Collections.Generic.IList{System.Activities.LocationReference}
      description: "위치의 컬렉션입니다."
    - id: expressionId
      type: System.Int32
      description: "식 식별자입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Activities.XamlIntegration.ICompiledExpressionRoot&quot;> </xref> 식을 실행할 수 있습니다, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Activities.XamlIntegration.ICompiledExpressionRoot.CanExecuteExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetExpressionTreeForExpression(System.Int32,System.Collections.Generic.IList{System.Activities.LocationReference})
  id: GetExpressionTreeForExpression(System.Int32,System.Collections.Generic.IList{System.Activities.LocationReference})
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  langs:
  - csharp
  name: GetExpressionTreeForExpression(Int32,IList<LocationReference>)
  nameWithType: ICompiledExpressionRoot.GetExpressionTreeForExpression(Int32,IList<LocationReference>)
  fullName: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetExpressionTreeForExpression(Int32,IList<LocationReference>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.XamlIntegration
  summary: "식에 사용 되는 식 트리를 가져옵니다."
  syntax:
    content: public System.Linq.Expressions.Expression GetExpressionTreeForExpression (int expressionId, System.Collections.Generic.IList<System.Activities.LocationReference> locationReferences);
    parameters:
    - id: expressionId
      type: System.Int32
      description: "식 식별자입니다."
    - id: locationReferences
      type: System.Collections.Generic.IList{System.Activities.LocationReference}
      description: "위치에 대 한 참조입니다."
    return:
      type: System.Linq.Expressions.Expression
      description: "식에 사용 되는 식 트리."
  overload: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetExpressionTreeForExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetLanguage
  id: GetLanguage
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  langs:
  - csharp
  name: GetLanguage()
  nameWithType: ICompiledExpressionRoot.GetLanguage()
  fullName: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetLanguage()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.XamlIntegration
  summary: "식 루트에서 사용 되는 언어를 가져옵니다."
  syntax:
    content: public string GetLanguage ();
    parameters: []
    return:
      type: System.String
      description: "사용 되는 언어입니다."
  overload: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetLanguage*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetRequiredLocations(System.Int32)
  id: GetRequiredLocations(System.Int32)
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  langs:
  - csharp
  name: GetRequiredLocations(Int32)
  nameWithType: ICompiledExpressionRoot.GetRequiredLocations(Int32)
  fullName: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetRequiredLocations(Int32)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.XamlIntegration
  summary: "식 루트에 대 한 필요한 위치 목록을 가져옵니다."
  syntax:
    content: public System.Collections.Generic.IList<string> GetRequiredLocations (int expressionId);
    parameters:
    - id: expressionId
      type: System.Int32
      description: "식 식별자입니다."
    return:
      type: System.Collections.Generic.IList{System.String}
      description: "목록 식 루트에 대 한 필요한 위치입니다."
  overload: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetRequiredLocations*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(System.Int32,System.Collections.Generic.IList{System.Activities.Location})
  id: InvokeExpression(System.Int32,System.Collections.Generic.IList{System.Activities.Location})
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  langs:
  - csharp
  name: InvokeExpression(Int32,IList<Location>)
  nameWithType: ICompiledExpressionRoot.InvokeExpression(Int32,IList<Location>)
  fullName: System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(Int32,IList<Location>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.XamlIntegration
  summary: "호출 된 <xref href=&quot;System.Activities.XamlIntegration.ICompiledExpressionRoot&quot;> </xref> 지정 된 식이 식별자 및 위치를 사용 하 여 합니다."
  syntax:
    content: public object InvokeExpression (int expressionId, System.Collections.Generic.IList<System.Activities.Location> locations);
    parameters:
    - id: expressionId
      type: System.Int32
      description: "식 식별자입니다."
    - id: locations
      type: System.Collections.Generic.IList{System.Activities.Location}
      description: "사용 되는 위치입니다."
    return:
      type: System.Object
      description: "호출 된 식입니다."
  overload: System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(System.Int32,System.Collections.Generic.IList{System.Activities.LocationReference},System.Activities.ActivityContext)
  id: InvokeExpression(System.Int32,System.Collections.Generic.IList{System.Activities.LocationReference},System.Activities.ActivityContext)
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  langs:
  - csharp
  name: InvokeExpression(Int32,IList<LocationReference>,ActivityContext)
  nameWithType: ICompiledExpressionRoot.InvokeExpression(Int32,IList<LocationReference>,ActivityContext)
  fullName: System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(Int32,IList<LocationReference>,ActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.XamlIntegration
  summary: "호출 된 <xref href=&quot;System.Activities.XamlIntegration.ICompiledExpressionRoot&quot;> </xref> 지정 된 식이 식별자, 위치 및 작업 컨텍스트를 사용 하 합니다."
  syntax:
    content: public object InvokeExpression (int expressionId, System.Collections.Generic.IList<System.Activities.LocationReference> locations, System.Activities.ActivityContext activityContext);
    parameters:
    - id: expressionId
      type: System.Int32
      description: "식 식별자입니다."
    - id: locations
      type: System.Collections.Generic.IList{System.Activities.LocationReference}
      description: "위치입니다."
    - id: activityContext
      type: System.Activities.ActivityContext
      description: "작업 컨텍스트입니다."
    return:
      type: System.Object
      description: "호출 된 식입니다."
  overload: System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.CanExecuteExpression(System.String,System.Boolean,System.Collections.Generic.IList{System.Activities.LocationReference},System.Int32@)
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  isExternal: false
  name: CanExecuteExpression(String,Boolean,IList<LocationReference>,Int32)
  nameWithType: ICompiledExpressionRoot.CanExecuteExpression(String,Boolean,IList<LocationReference>,Int32)
  fullName: System.Activities.XamlIntegration.ICompiledExpressionRoot.CanExecuteExpression(String,Boolean,IList<LocationReference>,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IList{System.Activities.LocationReference}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<LocationReference>
  nameWithType: IList<LocationReference>
  fullName: System.Collections.Generic.IList<System.Activities.LocationReference>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Activities.LocationReference>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.LocationReference
    name: LocationReference
    nameWithType: LocationReference
    fullName: LocationReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetExpressionTreeForExpression(System.Int32,System.Collections.Generic.IList{System.Activities.LocationReference})
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  isExternal: false
  name: GetExpressionTreeForExpression(Int32,IList<LocationReference>)
  nameWithType: ICompiledExpressionRoot.GetExpressionTreeForExpression(Int32,IList<LocationReference>)
  fullName: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetExpressionTreeForExpression(Int32,IList<LocationReference>)
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetLanguage
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  isExternal: false
  name: GetLanguage()
  nameWithType: ICompiledExpressionRoot.GetLanguage()
  fullName: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetLanguage()
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetRequiredLocations(System.Int32)
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  isExternal: false
  name: GetRequiredLocations(Int32)
  nameWithType: ICompiledExpressionRoot.GetRequiredLocations(Int32)
  fullName: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetRequiredLocations(Int32)
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(System.Int32,System.Collections.Generic.IList{System.Activities.Location})
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  isExternal: false
  name: InvokeExpression(Int32,IList<Location>)
  nameWithType: ICompiledExpressionRoot.InvokeExpression(Int32,IList<Location>)
  fullName: System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(Int32,IList<Location>)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{System.Activities.Location}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<Location>
  nameWithType: IList<Location>
  fullName: System.Collections.Generic.IList<System.Activities.Location>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Activities.Location>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.Location
    name: Location
    nameWithType: Location
    fullName: Location
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(System.Int32,System.Collections.Generic.IList{System.Activities.LocationReference},System.Activities.ActivityContext)
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  isExternal: false
  name: InvokeExpression(Int32,IList<LocationReference>,ActivityContext)
  nameWithType: ICompiledExpressionRoot.InvokeExpression(Int32,IList<LocationReference>,ActivityContext)
  fullName: System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(Int32,IList<LocationReference>,ActivityContext)
- uid: System.Activities.ActivityContext
  parent: System.Activities
  isExternal: false
  name: ActivityContext
  nameWithType: ActivityContext
  fullName: System.Activities.ActivityContext
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.CanExecuteExpression*
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  isExternal: false
  name: CanExecuteExpression
  nameWithType: ICompiledExpressionRoot.CanExecuteExpression
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetExpressionTreeForExpression*
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  isExternal: false
  name: GetExpressionTreeForExpression
  nameWithType: ICompiledExpressionRoot.GetExpressionTreeForExpression
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetLanguage*
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  isExternal: false
  name: GetLanguage
  nameWithType: ICompiledExpressionRoot.GetLanguage
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.GetRequiredLocations*
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  isExternal: false
  name: GetRequiredLocations
  nameWithType: ICompiledExpressionRoot.GetRequiredLocations
- uid: System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression*
  parent: System.Activities.XamlIntegration.ICompiledExpressionRoot
  isExternal: false
  name: InvokeExpression
  nameWithType: ICompiledExpressionRoot.InvokeExpression
