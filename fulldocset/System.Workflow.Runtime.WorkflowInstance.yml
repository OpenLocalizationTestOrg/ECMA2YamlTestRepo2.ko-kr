### YamlMime:ManagedReference
items:
- uid: System.Workflow.Runtime.WorkflowInstance
  id: WorkflowInstance
  children:
  - System.Workflow.Runtime.WorkflowInstance.Abort
  - System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  - System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  - System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  - System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  - System.Workflow.Runtime.WorkflowInstance.GetHashCode
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  - System.Workflow.Runtime.WorkflowInstance.InstanceId
  - System.Workflow.Runtime.WorkflowInstance.Load
  - System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  - System.Workflow.Runtime.WorkflowInstance.Resume
  - System.Workflow.Runtime.WorkflowInstance.Start
  - System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  - System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  - System.Workflow.Runtime.WorkflowInstance.TryUnload
  - System.Workflow.Runtime.WorkflowInstance.Unload
  - System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  langs:
  - csharp
  name: WorkflowInstance
  nameWithType: WorkflowInstance
  fullName: System.Workflow.Runtime.WorkflowInstance
  type: Class
  summary: "워크플로 인스턴스를 나타냅니다."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]WorkflowInstance 클래스는 워크플로 인스턴스의 실행을 제어 하는 데 사용할 수 있는 속성과 메서드를 노출 워크플로 런타임 엔진에서 사용 하는 실제 워크플로 인스턴스에 대 한 프록시 기본적으로입니다. 호스트나 서비스는 WorkflowInstance 클래스에 포함 된 적절 한 메서드를 호출 하 여 워크플로 인스턴스에서 작업을 수행 하는 워크플로 런타임 엔진에 지시할 수 있습니다.  된 다음 요청한 작업이 유효 하지 않을 경우, 예를 들어 호스트 호출 하는 경우 <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>이미 완료 된 워크플로 인스턴스의 워크플로 런타임 엔진이 해당 예외를 발생 시킵니다.</xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>      > [!NOTE] > 인스턴스를 복구 하는 유일한 방법은 런타임을 다시 시작은 워크플로 인스턴스가 응답 하지 않는 경우 호스트 응용 프로그램에 대 한 호출을 반환 하지 않으므로, 합니다. 그러나 인스턴스가 없는 경우에 강제로 언로드, 중단 또는 일시 중단 된 경우 계속할 수 있습니다를 호출 하 여는 <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName>메서드.</xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates how you can create and start a WorkflowInstance in a workflow host. The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a WorkflowInstance object. The code initializes WorkflowInstance by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it. The WorkflowInstance is started with the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method call.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#260](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#260)]\n [!code-vb[WF_Samples#260](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#260)]"
  syntax:
    content: >-
      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public sealed class WorkflowInstance
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Abort
  id: Abort
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Abort()
  nameWithType: WorkflowInstance.Abort()
  fullName: System.Workflow.Runtime.WorkflowInstance.Abort()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "워크플로 인스턴스를 중단 합니다."
  remarks: "동기 방식에서 워크플로 인스턴스가 중단 될 즉, 워크플로 인스턴스가 중단 된 후 메서드가 반환 합니다. 워크플로 런타임 엔진은 메모리에서 워크플로 인스턴스를 무효화 하 고 있는 <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>.</xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> 지웁니다. 지 속성 서비스가 워크플로 인스턴스에서 사용 된 경우 모든 이후로 수행 마지막 유지 지점 throw 됩니다. 워크플로 런타임 엔진에서 발생 된 워크플로 인스턴스를 중단 한 후의 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted>이벤트.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> 호출할 수 있습니다 <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>워크플로 인스턴스를 다시 로드 하 고 마지막 유지 지점에서 시작 합니다.</xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>       `Abort`와 다른 <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>있는 동안에 `Abort` 단순히 메모리 내 워크플로 인스턴스를 지우고 다시 시작할 수 마지막 유지 지점에서 Terminate가 메모리 내 워크플로 인스턴스를 지우고 및 지워졌음을 지 속성 서비스는 인스턴스가 메모리에서.</xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> 에 대 한는 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>,이 워크플로 인스턴스에 대 한 모든 상태 정보가 종료 시 데이터베이스에서 삭제 됨을 의미 합니다.</xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> 이전에 저장 된 유지 지점에서 워크플로 인스턴스를 다시 로드할 수 없습니다."
  example:
  - "The following example demonstrates calling Abort on a workflow instance of type Workflow1.  \n  \n [!code-cs[WF_Samples#13](~/add/codesnippet/csharp/wf_snippets/snippets.cs#13)]\n [!code-vb[WF_Samples#13](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#13)]"
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Abort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "워크플로 런타임 엔진이 실행 되지 않습니다."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  id: ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: ApplyWorkflowChanges(WorkflowChanges)
  nameWithType: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  fullName: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "로 지정 된 워크플로 인스턴스에 변경 내용을 적용는 <xref href=&quot;System.Workflow.ComponentModel.WorkflowChanges&quot;> </xref> 개체입니다."
  remarks: "워크플로 인스턴스가 이미 일시 중단 되지 않은 경우 워크플로 런타임 엔진이 변경 내용을 적용 하기 전에 인스턴스를 일시적으로 중단 합니다."
  example:
  - "The following example demonstrates calling ApplyWorkflowChanges to a <xref:System.Workflow.Runtime.WorkflowInstance> object.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c).  \n  \n [!code-cs[WF_Samples#89](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#89)]\n [!code-vb[WF_Samples#89](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#89)]"
  syntax:
    content: public void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);
    parameters:
    - id: workflowChanges
      type: System.Workflow.ComponentModel.WorkflowChanges
      description: "A <xref href=&quot;System.Workflow.ComponentModel.WorkflowChanges&quot;> </xref> 워크플로 인스턴스에 대 한 동적 업데이트를 지정 합니다."
  overload: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "워크플로 런타임 엔진이 실행 되지 않습니다."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  id: EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: EnqueueItem(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "지정 된 워크플로 큐에 메시지를 동기적으로 게시 합니다."
  remarks: "보냅니다는 `item` <xref:System.Workflow.Runtime.WorkflowQueue>.</xref:System.Workflow.Runtime.WorkflowQueue> 지정 메시지를 배달 하는 경우 알림을 받는 하려는 경우 구현할 수 있습니다 <xref:System.Workflow.Runtime.IPendingWork>서비스 및 패스는 `workItem` 및 <xref:System.Workflow.Runtime.IPendingWork>EnqueueItem 개체.</xref:System.Workflow.Runtime.IPendingWork> </xref:System.Workflow.Runtime.IPendingWork> 이러한 알림을 하지 않으려면 null 참조를 전달할 수 있습니다 (`Nothing` Visual basic에서)에 대 한 `pendingWork` 및 `workItem`합니다.       이 메서드는 상태 시스템 워크플로 사용할 때 메시지와 함께 &quot;큐 &quot; {&quot; (를) 사용 되지 않습니다.&quot; 예외가 발생할 수 있습니다. 이 상태 시스템의 현재 상태에서 특정 이벤트를 처리 하는 방법을 인식 하지 못하는 경우 발생 합니다. 현재 상태 이외의 일부 상태 있는 경우 예를 들어는 <xref:System.Workflow.Activities.EventDrivenActivity>를 포함 하는 <xref:System.Workflow.Activities.HandleExternalEventActivity>큐 (를) &quot; {&quot;으로 표시 되는.</xref:System.Workflow.Activities.HandleExternalEventActivity> </xref:System.Workflow.Activities.EventDrivenActivity>      > [!NOTE] > 메시지가 전송 된 순서 대로 워크플로 인스턴스에 의해 수신 되도록 보장 되지 않습니다. 예를 들어 (큐 A) 하면 첫 번째 메시지 이후에 보낸 메시지를 다른 메시지에 대 한 다음 수신 대기 하는 다른 큐 (큐 B)를 만드는 워크플로 큐의 기존 메시지를 받는 경우 두 번째 메시지가 먼저 도착 하 고 아직 생성 되지 않으며 해당 큐로 인해 수신 되지 것입니다 수입니다. 이 문제를 방지 하려면 두 번째 메시지를 보내지 두 번째 큐의 존재 여부 확인 될 때까지 (사용 하 여 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)</xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>"
  example:
  - "The following code example demonstrates how to use EnqueueItem. When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called. It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the EnqueueItem method along with the name of the event queue item.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#261](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#261)]\n [!code-vb[WF_Samples#261](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#261)]"
  syntax:
    content: public void EnqueueItem (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "이름에서 <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>합니다."
    - id: item
      type: System.Object
      description: "큐에 삽입할 개체입니다."
    - id: pendingWork
      type: System.Workflow.Runtime.IPendingWork
      description: "<xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> 보낸 사람에 게 사용할 수 있는 경우 알림을 받을 `item` 배달 됩니다."
    - id: workItem
      type: System.Object
      description: "개체를 전달 하도록는 <xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> 메서드."
  overload: System.Workflow.Runtime.WorkflowInstance.EnqueueItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>queueName</code>가 null 참조 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual basic에서)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "워크플로 런타임 엔진이 실행 되지 않습니다.       -또는- <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> 에 지정 된 <code> queueName </code> 존재 하지 않습니다.       -또는- <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> 에 지정 된 <code> queueName </code> 사용 되지 않습니다."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  id: EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "워크플로가 유휴 상태가 될 때 지정 된 워크플로 큐에 메시지를 게시 합니다. EnqueueItemOnIdle 워크플로가 유휴 지점 및 큐에 도달 하면 워크플로 스케줄러가 유휴 상태 인지 확인 한 후 될 때까지 대기 (즉, 활성 작업이 없는지 실행 중인)."
  remarks: "워크플로 인스턴스가 유휴 상태가 될 때까지 대기 하 고 다음 보냅니다는 `item` <xref:System.Workflow.Runtime.WorkflowQueue>.</xref:System.Workflow.Runtime.WorkflowQueue> 지정 워크플로 인스턴스가 일시 중단 된 동안 EnqueueItemOnIdle을 호출 하면 워크플로 런타임 엔진에서 throw <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> 메시지를 배달 하는 경우 알림을 받는 하려는 경우 구현할 수 있습니다 <xref:System.Workflow.Runtime.IPendingWork>서비스 및 패스는 `workItem` 및 <xref:System.Workflow.Runtime.IPendingWork> <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>.</xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> 개체</xref:System.Workflow.Runtime.IPendingWork> </xref:System.Workflow.Runtime.IPendingWork> 이러한 알림을 하지 않으려면 null 참조를 전달할 수 있습니다 (`Nothing` Visual basic에서)에 대 한 `pendingWork` 및 `workItem`합니다.       &quot;큐 &quot; {&quot; (를) 사용 되지 않습니다.&quot; 메시지를 포함 하는 예외를 상태 시스템 워크플로에이 메서드를 사용할 때 발생할 수 있습니다. 상태 시스템의 현재 상태에서 특정 이벤트를 처리 하는 방법을 인식 하지 못하는 경우 발생 합니다. 현재 상태 이외의 일부 상태 있는 경우 예를 들어는 <xref:System.Workflow.Activities.EventDrivenActivity>를 포함 하는 <xref:System.Workflow.Activities.HandleExternalEventActivity>큐 (를) &quot; {&quot;으로 표시 되는.</xref:System.Workflow.Activities.HandleExternalEventActivity> </xref:System.Workflow.Activities.EventDrivenActivity>"
  example:
  - "The following example demonstrates sending information to a workflow instance using the `EnqueueItemOnIdle` method. First, a WorkflowInstance object is created and started; next, an object that implements the <xref:System.Workflow.Runtime.IPendingWork> interface is created. `EnqueueItemOnIdle` is then called, passing in string values for the queue name, the enqueued item, and the work item to be passed to the methods of the pendingWork object.  \n  \n [!code-cs[WF_Samples#12](~/add/codesnippet/csharp/wf_snippets/snippets.cs#12)]\n [!code-vb[WF_Samples#12](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#12)]"
  syntax:
    content: public void EnqueueItemOnIdle (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "이름에서 <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>합니다."
    - id: item
      type: System.Object
      description: "큐에 삽입할 개체입니다."
    - id: pendingWork
      type: System.Workflow.Runtime.IPendingWork
      description: "<xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> 보낸 사람에 게 사용할 수 있는 경우 알림을 받을 `item` 배달 됩니다."
    - id: workItem
      type: System.Object
      description: "개체를 전달 하도록는 <xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> 메서드."
  overload: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>queueName</code>가 null 참조 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual basic에서)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "워크플로 런타임 엔진이 실행 되지 않습니다.       -또는-워크플로 인스턴스가 일시 중단 됩니다.       -또는- <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> 에 지정 된 <code> queueName </code> 존재 하지 않습니다.       -또는- <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> 에 지정 된 <code> queueName </code> 사용 되지 않습니다."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: WorkflowInstance.Equals(Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.Equals(Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "지정된 된 개체가 같은지 여부를 나타내는 값을 반환 된 <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref>합니다."
  remarks: "개체는 인스턴스 <xref:System.Workflow.Runtime.WorkflowInstance>는 동일한 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>이 <xref:System.Workflow.Runtime.WorkflowInstance>.</xref:System.Workflow.Runtime.WorkflowInstance> </xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 있고 클래스</xref:System.Workflow.Runtime.WorkflowInstance> 여야 합니다."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "비교할 개체입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 개체가이 같으면 <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Workflow.Runtime.WorkflowInstance.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode
  id: GetHashCode
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: WorkflowInstance.GetHashCode()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetHashCode()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "이 워크플로 인스턴스에 대 한 해시 코드를 반환합니다."
  remarks: "GetHashCode <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>.</xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 값에 따라 해시 코드를 반환 합니다."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "이 대 한 해시 코드 <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref>합니다."
  overload: System.Workflow.Runtime.WorkflowInstance.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  id: GetWorkflowDefinition
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowDefinition()
  nameWithType: WorkflowInstance.GetWorkflowDefinition()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "이 워크플로 인스턴스의 루트 활동을 검색합니다."
  remarks: "워크플로 활동 계층 구조를 탐색 하 여 루트 활동을 사용할 수 있습니다.       이 메서드는 스레드로부터 안전 하지 호스트가이 메서드에 대 한 호출을 동기화 해야 합니다."
  example:
  - "The following example demonstrates retrieving the workflow definition from a workflow instance.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c).  \n  \n [!code-cs[WF_Samples#86](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#86)]\n [!code-vb[WF_Samples#86](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#86)]"
  syntax:
    content: public System.Workflow.ComponentModel.Activity GetWorkflowDefinition ();
    parameters: []
    return:
      type: System.Workflow.ComponentModel.Activity
      description: "<xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> 개체입니다."
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  id: GetWorkflowNextTimerExpiration
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowNextTimerExpiration()
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "이 다음 시점 반환 시간 <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref> 타이머 메시지 배달 되도록 예약 됩니다."
  remarks: ''
  example:
  - "The following example demonstrates using the GetWorkflowNextTimerExpiration method to determine if more workflow timer messages are enqueued. This example is from the WorkflowThreading SDK sample, from the Program.cs file. For more information, see [Workflow Threading Sample](http://msdn.microsoft.com/en-us/5b650be7-09fa-47db-a2f6-523dc8ea5ee9).  \n  \n [!code-cs[WF_Samples#284](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#284)]\n [!code-vb[WF_Samples#284](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#284)]"
  syntax:
    content: public DateTime GetWorkflowNextTimerExpiration ();
    parameters: []
    return:
      type: System.DateTime
      description: "다음을 나타내는 DateTime 값 <xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt*>이 <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref> 타이머 메시지를 전달 합니다.</xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt*>"
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  id: GetWorkflowQueueData
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowQueueData()
  nameWithType: WorkflowInstance.GetWorkflowQueueData()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "컬렉션을 가져옵니다 <xref href=&quot;System.Workflow.Runtime.WorkflowQueueInfo&quot;> </xref> 이 워크플로 인스턴스와 연결 된 워크플로 큐에 대 한 활동을 구독 보류 중인 항목을 포함 하는 개체입니다."
  remarks: "컬렉션을 반환 하는 GetWorkflowQueueData <xref:System.Workflow.Runtime.WorkflowQueueInfo>개체를 각각 한이 워크플로 인스턴스와 연결 된 워크플로 큐의 상태에 대 한 정보를 포함 합니다.</xref:System.Workflow.Runtime.WorkflowQueueInfo> <xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName><xref:System.Workflow.Runtime.WorkflowQueue> <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName> <xref:System.Workflow.Runtime.WorkflowQueue>.</xref:System.Workflow.Runtime.WorkflowQueue> 항목 배달을 위한 구독 하는 활동의 목록이</xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName> 포함</xref:System.Workflow.Runtime.WorkflowQueue> 된 보류 중인 항목이</xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates how you can use the GetWorkflowQueueData method to obtain information about the state of all workflow queues associated with a <xref:System.Workflow.Runtime.WorkflowInstance> object. When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called. It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the GetWorkflowQueueData method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> method along with the name of the event queue item.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#261](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#261)]\n [!code-vb[WF_Samples#261](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#261)]"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo> GetWorkflowQueueData ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.Runtime.WorkflowQueueInfo}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; 의 <xref href=&quot;System.Workflow.Runtime.WorkflowQueueInfo&quot;> </xref> 개체입니다."
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "워크플로 런타임 엔진이 실행 되지 않습니다."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId
  id: InstanceId
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
  fullName: System.Workflow.Runtime.WorkflowInstance.InstanceId
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "워크플로 인스턴스의 고유 식별자를 가져옵니다."
  remarks: "InstanceId를 사용 하 여 워크플로 인스턴스를 참조할 수 있습니다."
  example:
  - "The following code example demonstrates how you can use the InstanceId property to obtain information about a <xref:System.Workflow.Runtime.WorkflowInstance> object. The first code snippet creates a <xref:System.Workflow.Runtime.WorkflowInstance> variable named `instanceId`.  \n  \n [!code-cs[WF_Samples#210](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#210)]\n [!code-vb[WF_Samples#210](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#210)]  \n  \n The second snippet uses the InstanceId property as the first object in an `OrderEventArgs` constructor call when the `CallBackForApproval` method is called.  \n  \n This code example is part of the Listen SDK Sample from the OrderServiceImple.cs file. For more information, see [Listen Sample](http://msdn.microsoft.com/en-us/1cec0e82-7544-429f-b717-0fc25eb42b7f).  \n  \n [!code-cs[WF_Samples#211](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#211)]\n [!code-vb[WF_Samples#211](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#211)]"
  syntax:
    content: public Guid InstanceId { get; }
    return:
      type: System.Guid
      description: "<xref:System.Guid>워크플로 인스턴스의.</xref:System.Guid>"
  overload: System.Workflow.Runtime.WorkflowInstance.InstanceId*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Load
  id: Load
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Load()
  nameWithType: WorkflowInstance.Load()
  fullName: System.Workflow.Runtime.WorkflowInstance.Load()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "이전에 언로드된 워크플로 인스턴스를 로드 합니다."
  remarks: "부하는 동기적입니다. 워크플로 인스턴스를 로드할 수 있는 경우 워크플로 인스턴스를 메모리에 로드 하 고 워크플로 런타임 엔진에 의해 예약 된 후 부하 반환 됩니다. 런타임에서 발생는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>이벤트 후 지 속성 서비스가 메모리에서 워크플로 인스턴스를 복원 했습니다 되기 전에 워크플로 런타임 엔진이 인스턴스를 예약 합니다.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>"
  example:
  - "The following example demonstrates how to load a previously unloaded <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#10](~/add/codesnippet/csharp/wf_snippets/snippets.cs#10)]\n [!code-vb[WF_Samples#10](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#10)]"
  syntax:
    content: public void Load ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Load*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "워크플로 런타임 엔진이 실행 되지 않습니다."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  id: ReloadTrackingProfiles
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: ReloadTrackingProfiles()
  nameWithType: WorkflowInstance.ReloadTrackingProfiles()
  fullName: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "이 워크플로 인스턴스에 대 한 추적 프로필을 다시 로드 합니다."
  remarks: "런타임 추적 인프라는 각 다시 로드 <xref:System.Workflow.Runtime.Tracking.TrackingProfile>와 추적 채널과 연결 된이 워크플로 인스턴스에 대 한.</xref:System.Workflow.Runtime.Tracking.TrackingProfile> 없으면 이미 일시 중단 된 상태로, 워크플로가 런타임 추적 인프라는 추적 프로필을 다시 로드 하는 동안 의해 일시 중단 됩니다."
  syntax:
    content: public void ReloadTrackingProfiles ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "워크플로 런타임 엔진이 실행 되지 않습니다."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Resume
  id: Resume
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Resume()
  nameWithType: WorkflowInstance.Resume()
  fullName: System.Workflow.Runtime.WorkflowInstance.Resume()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "이전에 일시 중단 된 워크플로 인스턴스의 실행을 다시 시작합니다."
  remarks: "호스트는 이전에 일시 중단 된 워크플로 인스턴스의 실행을 계속 하려면는 Resume을 호출할 수 있습니다. 워크플로 인스턴스가 일시 중단된 상태에 없는 경우 아무 작업도 수행 합니다. 런타임에서 발생는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>이벤트는 워크플로 인스턴스의 실행이 다시 시작 하기 바로 전에.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>"
  example:
  - "The following example demonstrates calling Resume on a previously suspended workflow instance.  This example is from the Suspend and Terminate SDK sample.  For more information, see [Suspend and Terminate Sample](http://msdn.microsoft.com/en-us/f4dffa58-d01e-44fb-b5a1-3b283d2c4517).  \n  \n [!code-cs[WF_Samples#172](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#172)]\n [!code-vb[WF_Samples#172](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#172)]"
  syntax:
    content: public void Resume ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Resume*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "워크플로 런타임 엔진이 실행 되지 않습니다."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Start
  id: Start
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Start()
  nameWithType: WorkflowInstance.Start()
  fullName: System.Workflow.Runtime.WorkflowInstance.Start()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "워크플로 인스턴스 실행을 시작합니다."
  remarks: "호출을 시작 <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A>이 워크플로 인스턴스의 루트 활동에.</xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> 호출 하 여 워크플로 인스턴스를 종료 하기 시작 예외를 발생 <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>와 <xref:System.Exception.Message%2A>종료 이유로 전달 된 예외의 속성.</xref:System.Exception.Message%2A> </xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>"
  example:
  - "The following code example demonstrates how you can use the Start method to start a <xref:System.Workflow.Runtime.WorkflowInstance> in a workflow host. The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object. It creates a <xref:System.Type> object and casts it to one of the workflow objects with which the host is associated. The code next initializes <xref:System.Workflow.Runtime.WorkflowInstance> by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it. The <xref:System.Workflow.Runtime.WorkflowInstance> is started with the Start method call.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#260](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#260)]\n [!code-vb[WF_Samples#260](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#260)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Start*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "워크플로 런타임 엔진이 실행 되지 않습니다.       -또는-워크플로 인스턴스가 이미 시작 되었습니다."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  id: Suspend(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Suspend(String)
  nameWithType: WorkflowInstance.Suspend(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Suspend(String)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "워크플로 인스턴스가 일시 중단합니다."
  remarks: "워크플로 인스턴스를 동기 방식으로 일시 중단 됩니다. 워크플로 인스턴스가 이미 일시 중단 된 경우 아무 작업도 수행 합니다. 그렇지 않으면 워크플로 런타임 엔진이 워크플로 인스턴스에서 발생을 일시 중단 된 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended>이벤트 및 전달 `reason` <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>.</xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs> </xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended>      > [!NOTE] > 일시 중단 된 워크플로 인스턴스를 언로드하지 않습니다."
  example:
  - "The following code example demonstrates calling Suspend on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#9](~/add/codesnippet/csharp/wf_snippets/snippets.cs#9)]\n [!code-vb[WF_Samples#9](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#9)]"
  syntax:
    content: public void Suspend (string error);
    parameters:
    - id: error
      type: System.String
      description: "워크플로 인스턴스를 일시 중단에 대 한 이유에 대 한 설명."
  overload: System.Workflow.Runtime.WorkflowInstance.Suspend*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "워크플로 런타임 엔진이 실행 되지 않습니다."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  id: Terminate(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Terminate(String)
  nameWithType: WorkflowInstance.Terminate(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Terminate(String)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "동기 방식으로 워크플로 인스턴스를 종료합니다."
  remarks: "워크플로 인스턴스를 동기 방식으로 종료 됩니다. 호스트는 워크플로 인스턴스를 종료 하는 종료를 호출 합니다. 워크플로 런타임 엔진은 메모리 내 워크플로 인스턴스를 지우고 지워졌음을 지 속성 서비스는 인스턴스가 메모리에서 합니다. 에 대 한는 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>,이 워크플로 인스턴스에 대 한 모든 상태 정보가 종료 시 데이터베이스에서 삭제 됨을 의미 합니다.</xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> 이전에 저장 된 유지 지점에서 워크플로 인스턴스를 다시 로드할 수 없습니다.       메모리 내 워크플로 인스턴스를 지우고 지 속성 서비스 종료를 알린 후는 `Terminate` 발생 시키는 메서드는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>이벤트 및 전달 `reason` <xref:System.Exception.Message%2A> <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>.</xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs> 에 포함 된</xref:System.Workflow.ComponentModel.WorkflowTerminatedException> 속성</xref:System.Exception.Message%2A> 에</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>       `Terminate`와 다른 <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A>을 종료 하는 동안 메모리 내 워크플로 인스턴스를 지우고 지 속성 서비스에 종료를 알리는 `Abort` 단순히는 메모리 내 워크플로 인스턴스를 지우며 마지막 유지 지점에서 다시 시작할 수 있습니다.</xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A>"
  example:
  - "The following code example demonstrates calling Terminate on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#8](~/add/codesnippet/csharp/wf_snippets/snippets.cs#8)]\n [!code-vb[WF_Samples#8](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#8)]"
  syntax:
    content: public void Terminate (string error);
    parameters:
    - id: error
      type: System.String
      description: "워크플로 인스턴스의 종료에 대 한 이유에 대 한 설명."
  overload: System.Workflow.Runtime.WorkflowInstance.Terminate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "워크플로 런타임 엔진이 실행 되지 않습니다."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload
  id: TryUnload
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: TryUnload()
  nameWithType: WorkflowInstance.TryUnload()
  fullName: System.Workflow.Runtime.WorkflowInstance.TryUnload()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "인스턴스가 일시 중단 또는 유휴 상태에 있으면 지 속성 저장소에 워크플로 인스턴스가 메모리에서 언로드합니다."
  remarks: "워크플로 인스턴스가 유휴 상태가 되거나 일시 중단 된 경우 TryUnload를 사용 하 여 지 속성 서비스가 메모리에서 워크플로 인스턴스를 제거 하 고 데이터 저장소에 유지 합니다. 등록 된 <xref:System.Workflow.Runtime.WorkflowRuntime>TryUnload throw <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> ,</xref:System.Workflow.Runtime.WorkflowRuntime> 지 속성 서비스가 없는 경우 런타임에서 발생 하는 워크플로 인스턴스가 성공적으로 지속 되 면는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>이벤트 및 반환 `true`.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>반환 `false` 워크플로 인스턴스가 이미 언로드 되었습니다, 하는 경우 종료 되었습니다, 중단 되었습니다. 또는 이미 완료 되었습니다.</xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>       호스트 TryUnload를 사용 하 여 유휴 워크플로에서 시스템 리소스를 회수할 수 있습니다."
  example:
  - "The following example demonstrates using the TryUnload method to unload a workflow when the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event fires. This example is from the Using Persistence Services SDK sample, from the Program.cs file. For more information, see [Using Persistence Services Sample](http://msdn.microsoft.com/en-us/3176b7e7-ae49-4d5c-802b-85032d6ebde6).  \n  \n [!code-cs[WF_Samples#280](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#280)]\n [!code-vb[WF_Samples#280](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#280)]"
  syntax:
    content: public bool TryUnload ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>워크플로 인스턴스가 언로드; 하지 못한 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Workflow.Runtime.WorkflowInstance.TryUnload*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "워크플로 런타임 엔진에 등록 된 지 속성 서비스가 있습니다."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Unload
  id: Unload
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Unload()
  nameWithType: WorkflowInstance.Unload()
  fullName: System.Workflow.Runtime.WorkflowInstance.Unload()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "지 속성 저장소에 워크플로 인스턴스가 메모리에서 언로드합니다. 현재 예약 된 작업이 완료 된 후이 호출 될 때까지 차단 또는 트랜잭션 범위의 끝입니다."
  remarks: "Unload는 동기적입니다. 즉, 수행 하는 모든 작업을 완료 한 후 반환 합니다. 워크플로 인스턴스가 유휴 상태가 아닌 경우 런타임에서 인스턴스를 중단할 수 될 때까지 대기 합니다. 현재 예약 된 작업 항목; 완료 된 후에 인스턴스를 중단할 수 있습니다. 이 일반적으로 현재 실행 중인 작업에서 반환 하는 경우 해당 <xref:System.Workflow.ComponentModel.Activity.Execute%2A>메서드.</xref:System.Workflow.ComponentModel.Activity.Execute%2A> 그러나 인스턴스가 실행 되는 경우는 <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, 인스턴스를 중단할 수 트랜잭션 범위가 실행을 완료 해야 합니다.</xref:System.Workflow.ComponentModel.TransactionScopeActivity> 그런 다음 unload는 지 속성 서비스를 사용 하 여 메모리에서 워크플로 인스턴스를 제거 하 고 데이터 저장소에 지속 되. 등록 된 <xref:System.Workflow.Runtime.WorkflowRuntime>언로드 throw <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> ,</xref:System.Workflow.Runtime.WorkflowRuntime> 지 속성 서비스가 없는 경우 런타임에서 발생 하는 워크플로 인스턴스가 성공적으로 지속 되 면는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>이벤트.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>       호스트 언로드를 사용 하 여 유휴 워크플로에서 시스템 리소스를 회수할 수 있습니다."
  example:
  - "The following example demonstrates calling Unload on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#11](~/add/codesnippet/csharp/wf_snippets/snippets.cs#11)]\n [!code-vb[WF_Samples#11](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#11)]"
  syntax:
    content: public void Unload ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Unload*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "워크플로 런타임 엔진에 등록 된 지 속성 서비스가 있습니다."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  id: WorkflowRuntime
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "가져옵니다는 <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime&quot;> </xref> 이 워크플로 인스턴스에 대 한 합니다."
  remarks: ''
  example:
  - "The following example demonstrates accessing the executing <xref:System.Workflow.Runtime.WorkflowRuntime> of a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#7](~/add/codesnippet/csharp/wf_snippets/snippets.cs#7)]\n [!code-vb[WF_Samples#7](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#7)]"
  syntax:
    content: public System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime { get; }
    return:
      type: System.Workflow.Runtime.WorkflowRuntime
      description: "A <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime&quot;> </xref> 이 워크플로 인스턴스가 실행 중인 실행 환경을 나타내는입니다."
  overload: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Workflow.Runtime.WorkflowInstance.Abort
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Abort()
  nameWithType: WorkflowInstance.Abort()
  fullName: System.Workflow.Runtime.WorkflowInstance.Abort()
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ApplyWorkflowChanges(WorkflowChanges)
  nameWithType: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  fullName: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
- uid: System.Workflow.ComponentModel.WorkflowChanges
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: WorkflowChanges
  nameWithType: WorkflowChanges
  fullName: System.Workflow.ComponentModel.WorkflowChanges
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItem(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
- uid: System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Workflow.Runtime.IPendingWork
  parent: System.Workflow.Runtime
  isExternal: false
  name: IPendingWork
  nameWithType: IPendingWork
  fullName: System.Workflow.Runtime.IPendingWork
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
- uid: System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Equals(Object)
  nameWithType: WorkflowInstance.Equals(Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetHashCode()
  nameWithType: WorkflowInstance.GetHashCode()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowDefinition()
  nameWithType: WorkflowInstance.GetWorkflowDefinition()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition()
- uid: System.Workflow.ComponentModel.Activity
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Workflow.ComponentModel.Activity
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowNextTimerExpiration()
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration()
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowQueueData()
  nameWithType: WorkflowInstance.GetWorkflowQueueData()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData()
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.Runtime.WorkflowQueueInfo}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<WorkflowQueueInfo>
  nameWithType: ReadOnlyCollection<WorkflowQueueInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.Runtime.WorkflowQueueInfo
    name: WorkflowQueueInfo
    nameWithType: WorkflowQueueInfo
    fullName: WorkflowQueueInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
  fullName: System.Workflow.Runtime.WorkflowInstance.InstanceId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Workflow.Runtime.WorkflowInstance.Load
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Load()
  nameWithType: WorkflowInstance.Load()
  fullName: System.Workflow.Runtime.WorkflowInstance.Load()
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ReloadTrackingProfiles()
  nameWithType: WorkflowInstance.ReloadTrackingProfiles()
  fullName: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles()
- uid: System.Workflow.Runtime.WorkflowInstance.Resume
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Resume()
  nameWithType: WorkflowInstance.Resume()
  fullName: System.Workflow.Runtime.WorkflowInstance.Resume()
- uid: System.Workflow.Runtime.WorkflowInstance.Start
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Start()
  nameWithType: WorkflowInstance.Start()
  fullName: System.Workflow.Runtime.WorkflowInstance.Start()
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Suspend(String)
  nameWithType: WorkflowInstance.Suspend(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Suspend(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Terminate(String)
  nameWithType: WorkflowInstance.Terminate(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Terminate(String)
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: TryUnload()
  nameWithType: WorkflowInstance.TryUnload()
  fullName: System.Workflow.Runtime.WorkflowInstance.TryUnload()
- uid: System.Workflow.Runtime.WorkflowInstance.Unload
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Unload()
  nameWithType: WorkflowInstance.Unload()
  fullName: System.Workflow.Runtime.WorkflowInstance.Unload()
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
- uid: System.Workflow.Runtime.WorkflowRuntime
  parent: System.Workflow.Runtime
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowRuntime
- uid: System.Workflow.Runtime.WorkflowInstance.Abort*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Abort
  nameWithType: WorkflowInstance.Abort
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ApplyWorkflowChanges
  nameWithType: WorkflowInstance.ApplyWorkflowChanges
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItem
  nameWithType: WorkflowInstance.EnqueueItem
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItemOnIdle
  nameWithType: WorkflowInstance.EnqueueItemOnIdle
- uid: System.Workflow.Runtime.WorkflowInstance.Equals*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Equals
  nameWithType: WorkflowInstance.Equals
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetHashCode
  nameWithType: WorkflowInstance.GetHashCode
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowDefinition
  nameWithType: WorkflowInstance.GetWorkflowDefinition
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowNextTimerExpiration
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowQueueData
  nameWithType: WorkflowInstance.GetWorkflowQueueData
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
- uid: System.Workflow.Runtime.WorkflowInstance.Load*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Load
  nameWithType: WorkflowInstance.Load
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ReloadTrackingProfiles
  nameWithType: WorkflowInstance.ReloadTrackingProfiles
- uid: System.Workflow.Runtime.WorkflowInstance.Resume*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Resume
  nameWithType: WorkflowInstance.Resume
- uid: System.Workflow.Runtime.WorkflowInstance.Start*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Start
  nameWithType: WorkflowInstance.Start
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Suspend
  nameWithType: WorkflowInstance.Suspend
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Terminate
  nameWithType: WorkflowInstance.Terminate
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: TryUnload
  nameWithType: WorkflowInstance.TryUnload
- uid: System.Workflow.Runtime.WorkflowInstance.Unload*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Unload
  nameWithType: WorkflowInstance.Unload
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
