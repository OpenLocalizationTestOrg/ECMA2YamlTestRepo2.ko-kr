### YamlMime:ManagedReference
items:
- uid: System.IO.Packaging.PackageRelationship
  id: PackageRelationship
  children:
  - System.IO.Packaging.PackageRelationship.Id
  - System.IO.Packaging.PackageRelationship.Package
  - System.IO.Packaging.PackageRelationship.RelationshipType
  - System.IO.Packaging.PackageRelationship.SourceUri
  - System.IO.Packaging.PackageRelationship.TargetMode
  - System.IO.Packaging.PackageRelationship.TargetUri
  langs:
  - csharp
  name: PackageRelationship
  nameWithType: PackageRelationship
  fullName: System.IO.Packaging.PackageRelationship
  type: Class
  summary: "원본 사이의 연결을 나타냅니다 <xref href=&quot;System.IO.Packaging.Package&quot;> </xref> 또는 <xref href=&quot;System.IO.Packaging.PackagePart&quot;> </xref>, 및 될 수 있는 대상 개체는 <xref href=&quot;System.IO.Packaging.PackagePart&quot;> </xref> 또는 외부 리소스입니다."
  remarks: "간의 연결을 정의 하는 PackageRelationship는 *소스* <xref:System.IO.Packaging.Package>또는 <xref:System.IO.Packaging.PackagePart>에 *대상* <xref:System.IO.Packaging.PackagePart>또는 외부 리소스.</xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.Package>  원본 개체에는 관계의 &quot;소유자&quot;으로 간주 됩니다.       PackageRelationship 클래스에는 공용 생성자가 없습니다. 두 만들기 메서드를 사용 하는 대신,: | | |   |-|-|   | <xref:System.IO.Packaging.Package>. <xref:System.IO.Packaging.Package.CreateRelationship%2A>| &quot;패키지 수준&quot; 관계를 만듭니다.-지정한 파트 또는 외부 리소스 패키지에서. |   | <xref:System.IO.Packaging.PackagePart>. <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>| &quot;파트 수준&quot; 관계를 만듭니다.-다른 부분으로 특정 부분에서 또는 외부 리소스입니다. |       원본 패키지 또는 파트도 식별 되는 <xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>관계의 속성입니다.</xref:System.IO.Packaging.PackageRelationship.SourceUri%2A> </xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.Package.CreateRelationship%2A> </xref:System.IO.Packaging.Package>  대상 파트 또는 외부 리소스도 식별 되는 <xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>관계의 속성입니다.</xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>       만들기 또는 관계를 삭제 하면 어떤 방식으로든에서 소스 또는 대상 개체에는 영향을 주지 않습니다.       원본 개체를 삭제 하는 경우 개체가 소유 하는 모든 관계가 삭제 됩니다.       관계를 사용 하면 문서와 문서 간의 탐색 합니다.  관계 기능도 사용할 연결과 같은 문서 개체 모델 서비스는 <xref:System.Printing.PrintTicket>인쇄할 때 특정 문서 요소에.</xref:System.Printing.PrintTicket>       섹션 1.3 &quot;관계&quot;의 요소 PackageRelationship에 대 한 자세한 내용은 참조는 *Open Packaging Conventions* 사양에서 다운로드할 수 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)합니다."
  syntax:
    content: public class PackageRelationship
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.Id
  id: Id
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: Id
  nameWithType: PackageRelationship.Id
  fullName: System.IO.Packaging.PackageRelationship.Id
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "관계를 식별 하는 문자열을 가져옵니다."
  remarks: "<xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>패키지 또는 파트를</xref:System.IO.Packaging.PackageRelationship.SourceUri%2A> 소유한 모든 관계에 대 한 고유 Id 속성 문자열은       에 대 한 호출에는 Id가 지정 된 **패키지**.<xref:System.IO.Packaging.Package.CreateRelationship%2A> 또는 **PackagePart**.<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> 메서드를 호출할 때 관계.</xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.Package.CreateRelationship%2A>  관계를 만든 후에 Id는 변경할 수 없습니다.       Id 속성 문자열은 유효한 XML 식별자. Id 유형 xsd: id 이며에 설명 된 명명 규칙을 따라야는 *XML 스키마 2 부: Datatypes* 사양 (참조 [http://www.w3.org/TR/xmlschema-2/#ID](http://www.w3.org/TR/xmlschema-2/))."
  syntax:
    content: public string Id { get; }
    return:
      type: System.String
      description: "관계를 식별 하는 문자열입니다."
  overload: System.IO.Packaging.PackageRelationship.Id*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.Package
  id: Package
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: Package
  nameWithType: PackageRelationship.Package
  fullName: System.IO.Packaging.PackageRelationship.Package
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "가져옵니다는 <xref href=&quot;System.IO.Packaging.Package&quot;> </xref> 이 관계를 포함 하는 합니다."
  remarks: "에 대 한 자세한 내용은 <xref:System.IO.Packaging.Package>요소 참조는 *Open Packaging Conventions* 사양에서 다운로드할 수 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255).</xref:System.IO.Packaging.Package>"
  syntax:
    content: public System.IO.Packaging.Package Package { get; }
    return:
      type: System.IO.Packaging.Package
      description: "이 관계를 포함 하는 패키지입니다."
  overload: System.IO.Packaging.PackageRelationship.Package*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.RelationshipType
  id: RelationshipType
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: RelationshipType
  nameWithType: PackageRelationship.RelationshipType
  fullName: System.IO.Packaging.PackageRelationship.RelationshipType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "관계의 정규화 된 유형 이름을 가져옵니다."
  remarks: "에 대 한 호출에 지정 된 RelationshipType는 **패키지**.<xref:System.IO.Packaging.Package.CreateRelationship%2A> 또는 **PackagePart**.<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> 메서드를 호출할 때 관계.</xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.Package.CreateRelationship%2A>  관계를 만든 후에 RelationshipType는 변경할 수 없습니다.       RelationshipType에 URI 유사 구문을 정의 하 고 관계의 역할을 식별 합니다. &quot;Http://schemas.microsoft.com/xps/2005/06/required-resource&quot;는 &quot;필요한-리소스입니다.&quot;는 대상 파트에 대 한 관계를 식별 하는 예를 들어       **패키지 전체 관계 유형** | 설명 | 관계 유형 |   |-----------------|-----------------------|   | 핵심 속성 | http://schemas.microsoft.com/package/2006/relationships/metadata/core-properties |   | 디지털 서명 | http://schemas.microsoft.com/package/2006/relationships/digital-signature/signature |   | 디지털 서명 인증서 | http://schemas.microsoft.com/package/2006/relationships/digital-signature/certificate |   | 디지털 서명 원본 | http://schemas.microsoft.com/package/2006/relationships/digital-signature/origin |   | 미리 보기 | http://schemas.microsoft.com/package/2006/relationships/metadata/thumbnail |       패키지 관계에 대 한 자세한 내용은 형식 참조 3 장 및의 부록 I는 *Open Packaging Conventions* 사양에서 다운로드할 수 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)합니다."
  syntax:
    content: public string RelationshipType { get; }
    return:
      type: System.String
      description: "관계의 정규화 된 형식 이름입니다."
  overload: System.IO.Packaging.PackageRelationship.RelationshipType*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.SourceUri
  id: SourceUri
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: SourceUri
  nameWithType: PackageRelationship.SourceUri
  fullName: System.IO.Packaging.PackageRelationship.SourceUri
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "가져옵니다는 [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] 패키지 또는 관계를 소유 하는 파트의 합니다."
  remarks: "관계 소유 하는 경우는 <xref:System.IO.Packaging.Package>, SourceUri의 URI를 반환 합니다. &quot;/&quot;.</xref:System.IO.Packaging.Package>       관계에 <xref:System.IO.Packaging.PackagePart>는 파트의 URI를 반환 하는 SourceUri,</xref:System.IO.Packaging.PackagePart> 소유 하는 경우"
  syntax:
    content: public Uri SourceUri { get; }
    return:
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] 의 <xref href=&quot;System.IO.Packaging.Package&quot;> </xref> 또는 <xref href=&quot;System.IO.Packaging.PackagePart&quot;> </xref> 소유 하는 관계입니다."
  overload: System.IO.Packaging.PackageRelationship.SourceUri*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.TargetMode
  id: TargetMode
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: TargetMode
  nameWithType: PackageRelationship.TargetMode
  fullName: System.IO.Packaging.PackageRelationship.TargetMode
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "관계의 대상 인지 여부를 나타내는 값을 가져옵니다 <xref href=&quot;System.IO.Packaging.TargetMode&quot;> </xref> 또는 <xref href=&quot;System.IO.Packaging.TargetMode&quot;> </xref> 에 <xref href=&quot;System.IO.Packaging.Package&quot;> </xref>합니다."
  remarks: "TargetMode는에 대 한 호출에 지정 된 된 **패키지**.<xref:System.IO.Packaging.Package.CreateRelationship%2A> 또는 **PackagePart**.<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> 메서드를 호출할 때 관계.</xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.Package.CreateRelationship%2A> 관계를 만든 후에 TargetMode 변경할 수 없습니다.       TargetMode 다음과 같은 경우 <xref:System.IO.Packaging.TargetMode>, <xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>상대 참조 여야 합니다.</xref:System.IO.Packaging.PackageRelationship.TargetUri%2A> </xref:System.IO.Packaging.TargetMode>  패키지 수준 관계에 대 한 상대의 참조는 <xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>소유 하 고 관계를 포함 하는 원본 패키지의 pack URI 기준으로 확인 됩니다.</xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>  (예제 원본 패키지 pack URI: &quot;pack://http:, www.adatum.com, files,datapak.package/&quot;입니다.)  파트 수준 관계에 대 한는 <xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>관계를 소유 하는 소스 파트를 기준으로 확인 됩니다 (<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A> 상대적으로 해석 <xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>).</xref:System.IO.Packaging.PackageRelationship.SourceUri%2A> </xref:System.IO.Packaging.PackageRelationship.TargetUri%2A> </xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>       TargetMode 다음과 같은 경우 <xref:System.IO.Packaging.TargetMode>, <xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>상대 참조 또는 정규화 된 URI 일 수 있습니다.</xref:System.IO.Packaging.PackageRelationship.TargetUri%2A> </xref:System.IO.Packaging.TargetMode>  경우는 <xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>상대 참조는 참조의 위치에 상대적으로 해석 되는 <xref:System.IO.Packaging.Package>이 관계를 포함 하는.</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>       TargetMode에 대 한 자세한 내용은 섹션을 참조 1.3.3 &quot;관계 태그&quot;는 *Open Packaging Conventions* 사양에서 다운로드할 수 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)합니다."
  syntax:
    content: public System.IO.Packaging.TargetMode TargetMode { get; }
    return:
      type: System.IO.Packaging.TargetMode
      description: "표시 하는 열거형 값 여부 <xref:System.IO.Packaging.PackageRelationship.TargetUri*>리소스 참조 <xref href=&quot;System.IO.Packaging.TargetMode&quot;> </xref> 또는 <xref href=&quot;System.IO.Packaging.TargetMode&quot;> </xref> 에 <xref href=&quot;System.IO.Packaging.Package&quot;> </xref>.</xref:System.IO.Packaging.PackageRelationship.TargetUri*>"
  overload: System.IO.Packaging.PackageRelationship.TargetMode*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.TargetUri
  id: TargetUri
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: TargetUri
  nameWithType: PackageRelationship.TargetUri
  fullName: System.IO.Packaging.PackageRelationship.TargetUri
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "가져옵니다는 [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] 관계의 대상 리소스의 합니다."
  remarks: "TargetUri는에 대 한 호출에 지정 된 된 **패키지**.<xref:System.IO.Packaging.Package.CreateRelationship%2A> 또는 **PackagePart**.<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> 메서드를 호출할 때 관계.</xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.Package.CreateRelationship%2A> 관계를 만든 후에 TargetUri 변경할 수 없습니다.       때 <xref:System.IO.Packaging.PackageRelationship.TargetMode%2A>은 <xref:System.IO.Packaging.TargetMode>는 TargetUri 상대 참조 여야 합니다.</xref:System.IO.Packaging.TargetMode> </xref:System.IO.Packaging.PackageRelationship.TargetMode%2A>  패키지 수준 관계는 TargetUri의 상대 참조를 소유 하 고 관계를 포함 하는 원본 패키지의 pack URI 기준으로 확인 됩니다.  (예제 원본 패키지 pack URI: &quot;pack://http:, www.adatum.com, files,datapak.package/&quot;입니다.)  TargetUri 파트 수준 관계에 대 한 관계를 소유 하는 소스 파트를 기준으로 확인 됩니다 (TargetUri 상대적으로 해석 됩니다 <xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>).</xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>       때 <xref:System.IO.Packaging.PackageRelationship.TargetMode%2A>은 <xref:System.IO.Packaging.TargetMode>, 상대 참조 또는 정규화 된 URI는 TargetUri 될 수 있습니다.</xref:System.IO.Packaging.TargetMode> </xref:System.IO.Packaging.PackageRelationship.TargetMode%2A>  참조의 위치에 상대적으로 해석 됩니다는 TargetUri 이면 상대 참조는 <xref:System.IO.Packaging.Package>이 관계를 포함 하는.</xref:System.IO.Packaging.Package>       TargetUri에 대 한 자세한 내용은 섹션을 참조 1.3.3 &quot;관계 태그&quot;는 *Open Packaging Conventions* 사양에서 다운로드할 수 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)합니다."
  syntax:
    content: public Uri TargetUri { get; }
    return:
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] 대상 리소스의 합니다."
  overload: System.IO.Packaging.PackageRelationship.TargetUri*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IO.Packaging.PackageRelationship.Id
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: Id
  nameWithType: PackageRelationship.Id
  fullName: System.IO.Packaging.PackageRelationship.Id
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Packaging.PackageRelationship.Package
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: Package
  nameWithType: PackageRelationship.Package
  fullName: System.IO.Packaging.PackageRelationship.Package
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
- uid: System.IO.Packaging.PackageRelationship.RelationshipType
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: RelationshipType
  nameWithType: PackageRelationship.RelationshipType
  fullName: System.IO.Packaging.PackageRelationship.RelationshipType
- uid: System.IO.Packaging.PackageRelationship.SourceUri
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: SourceUri
  nameWithType: PackageRelationship.SourceUri
  fullName: System.IO.Packaging.PackageRelationship.SourceUri
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.IO.Packaging.PackageRelationship.TargetMode
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: TargetMode
  nameWithType: PackageRelationship.TargetMode
  fullName: System.IO.Packaging.PackageRelationship.TargetMode
- uid: System.IO.Packaging.TargetMode
  parent: System.IO.Packaging
  isExternal: false
  name: TargetMode
  nameWithType: TargetMode
  fullName: System.IO.Packaging.TargetMode
- uid: System.IO.Packaging.PackageRelationship.TargetUri
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: TargetUri
  nameWithType: PackageRelationship.TargetUri
  fullName: System.IO.Packaging.PackageRelationship.TargetUri
- uid: System.IO.Packaging.PackageRelationship.Id*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: Id
  nameWithType: PackageRelationship.Id
- uid: System.IO.Packaging.PackageRelationship.Package*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: Package
  nameWithType: PackageRelationship.Package
- uid: System.IO.Packaging.PackageRelationship.RelationshipType*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: RelationshipType
  nameWithType: PackageRelationship.RelationshipType
- uid: System.IO.Packaging.PackageRelationship.SourceUri*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: SourceUri
  nameWithType: PackageRelationship.SourceUri
- uid: System.IO.Packaging.PackageRelationship.TargetMode*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: TargetMode
  nameWithType: PackageRelationship.TargetMode
- uid: System.IO.Packaging.PackageRelationship.TargetUri*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: TargetUri
  nameWithType: PackageRelationship.TargetUri
