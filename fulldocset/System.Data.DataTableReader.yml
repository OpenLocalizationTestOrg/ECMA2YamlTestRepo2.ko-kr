### YamlMime:ManagedReference
items:
- uid: System.Data.DataTableReader
  id: DataTableReader
  children:
  - System.Data.DataTableReader.#ctor(System.Data.DataTable)
  - System.Data.DataTableReader.#ctor(System.Data.DataTable[])
  - System.Data.DataTableReader.Close
  - System.Data.DataTableReader.Depth
  - System.Data.DataTableReader.FieldCount
  - System.Data.DataTableReader.GetBoolean(System.Int32)
  - System.Data.DataTableReader.GetByte(System.Int32)
  - System.Data.DataTableReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  - System.Data.DataTableReader.GetChar(System.Int32)
  - System.Data.DataTableReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  - System.Data.DataTableReader.GetDataTypeName(System.Int32)
  - System.Data.DataTableReader.GetDateTime(System.Int32)
  - System.Data.DataTableReader.GetDecimal(System.Int32)
  - System.Data.DataTableReader.GetDouble(System.Int32)
  - System.Data.DataTableReader.GetEnumerator
  - System.Data.DataTableReader.GetFieldType(System.Int32)
  - System.Data.DataTableReader.GetFloat(System.Int32)
  - System.Data.DataTableReader.GetGuid(System.Int32)
  - System.Data.DataTableReader.GetInt16(System.Int32)
  - System.Data.DataTableReader.GetInt32(System.Int32)
  - System.Data.DataTableReader.GetInt64(System.Int32)
  - System.Data.DataTableReader.GetName(System.Int32)
  - System.Data.DataTableReader.GetOrdinal(System.String)
  - System.Data.DataTableReader.GetProviderSpecificFieldType(System.Int32)
  - System.Data.DataTableReader.GetProviderSpecificValue(System.Int32)
  - System.Data.DataTableReader.GetProviderSpecificValues(System.Object[])
  - System.Data.DataTableReader.GetSchemaTable
  - System.Data.DataTableReader.GetString(System.Int32)
  - System.Data.DataTableReader.GetValue(System.Int32)
  - System.Data.DataTableReader.GetValues(System.Object[])
  - System.Data.DataTableReader.HasRows
  - System.Data.DataTableReader.IsClosed
  - System.Data.DataTableReader.IsDBNull(System.Int32)
  - System.Data.DataTableReader.Item(System.Int32)
  - System.Data.DataTableReader.Item(System.String)
  - System.Data.DataTableReader.NextResult
  - System.Data.DataTableReader.Read
  - System.Data.DataTableReader.RecordsAffected
  langs:
  - csharp
  name: DataTableReader
  nameWithType: DataTableReader
  fullName: System.Data.DataTableReader
  type: Class
  summary: "DataTableReader는 하나 이상의의 내용을 가져오고 <xref href=&quot;System.Data.DataTable&quot;> </xref> 개체를 하나 이상의 읽기 전용, 정방향 전용 결과 집합의 형식입니다."
  remarks: "DataTableReader과 같은 <xref:System.Data.SqlClient.SqlDataReader>한다는 점을 제외 하 고 DataTableReader에 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 의 행을 반복 하는 데 제공</xref:System.Data.SqlClient.SqlDataReader> 의 다른 데이터 판독기를 훨씬 비슷합니다. 즉, 캐시의 행을 반복 하는 것입니다. 캐시 된 데이터는 DataTableReader 활성화 되며, 판독기의 위치를 자동으로 유지 관리 하는 동안 수정할 수 있습니다.       DataTableReader를 만들 때는 <xref:System.Data.DataTable>, 결과 DataTableReader 개체 결과와 동일한 데이터 집합 하나가 포함 된 <xref:System.Data.DataTable>가 만들어진, 삭제 된 것으로 표시 된 모든 행을 제외한에서.</xref:System.Data.DataTable> </xref:System.Data.DataTable> 열이 원래 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에서와 동일한 순서로 표시 반환된 된 결과의 구조는 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 원래 스키마와 데이터와 동일 호출 하 여 만든 DataTableReader는 <xref:System.Data.DataSet.GetDataReader%2A>의 메서드는 <xref:System.Data.DataSet>경우 여러 개의 결과 집합이 포함 하는 개체는 <xref:System.Data.DataSet>둘 이상의 테이블을 포함 합니다.</xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Data.DataSet.GetDataReader%2A> 결과과 동일한 시퀀스로 <xref:System.Data.DataTable>개체에 <xref:System.Data.DataTableCollection>의 <xref:System.Data.DataSet>개체입니다.</xref:System.Data.DataSet> </xref:System.Data.DataTableCollection> </xref:System.Data.DataTable>       반환된 된 결과 집합의 현재 버전의 각각 포함 <xref:System.Data.DataRow>; 삭제 하도록 표시 된 행은 건너뜁니다.</xref:System.Data.DataRow>       `DataTableReader` 안정적인 제공 반복기, 즉의 콘텐츠는 `DataTableReader` 반복 하는 동안 기본 컬렉션의 크기를 수정 하는 경우 무효화 되지 않습니다. 예를 들어 하나 이상의 대 한에 행이 <xref:System.Data.DataTable.Rows%2A>컬렉션을 삭제 하거나 반복 내에서 현재 위치 하는 동안 제거할는 `DataTableReader` 은 적절 하 게 유지 관리 및 반복기를 무효화 하지 않습니다.</xref:System.Data.DataTable.Rows%2A>"
  syntax:
    content: 'public sealed class DataTableReader : System.Data.Common.DbDataReader'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Data.Common.DbDataReader
  implements: []
  inheritedMembers:
  - System.Data.Common.DbDataReader.Dispose
  - System.Data.Common.DbDataReader.Dispose(System.Boolean)
  - System.Data.Common.DbDataReader.GetData(System.Int32)
  - System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  - System.Data.Common.DbDataReader.GetStream(System.Int32)
  - System.Data.Common.DbDataReader.GetTextReader(System.Int32)
  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)
  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.NextResultAsync
  - System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.ReadAsync
  - System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)
  - System.Data.Common.DbDataReader.VisibleFieldCount
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.DataTableReader.#ctor(System.Data.DataTable)
  id: '#ctor(System.Data.DataTable)'
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: DataTableReader(DataTable)
  nameWithType: DataTableReader.DataTableReader(DataTable)
  fullName: System.Data.DataTableReader.DataTableReader(DataTable)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 제공 된 데이터를 사용 하 여 클래스 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다."
  syntax:
    content: public DataTableReader (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> 있는 새 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 결과 집합을 가져오는 합니다."
  overload: System.Data.DataTableReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTableReader.#ctor(System.Data.DataTable[])
  id: '#ctor(System.Data.DataTable[])'
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: DataTableReader(DataTable[])
  nameWithType: DataTableReader.DataTableReader(DataTable[])
  fullName: System.Data.DataTableReader.DataTableReader(DataTable[])
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 제공 된 배열을 사용 하 여 클래스 <xref href=&quot;System.Data.DataTable&quot;> </xref> 개체입니다."
  remarks: "만들어야 하는 경우는 <xref:System.Data.DataTableReader>전체 또는 특정 내에서 테이블의 하위 집합에 따라 <xref:System.Data.Dataset>, 호출 된 `DataSet`의 <xref:System.Data.DataSet.GetDataReader%2A>메서드.</xref:System.Data.DataSet.GetDataReader%2A> </xref:System.Data.Dataset> </xref:System.Data.DataTableReader> 새 하려면 <xref:System.Data.DataTableReader>인스턴스 그룹을 기반으로 `DataTable` 이 생성자를 사용 하는 다른 방법으로 서로 연관 되어 있습니다.</xref:System.Data.DataTableReader> 순서를 다시 정렬 하려면이 생성자의 이용할 수도 수 있습니다는 `DataTables` 내는 `DataTableReader`경우, 기본적으로 소스 내에서 나타나는 순서 `DataSet` 요구를 충족 하지 않습니다."
  example:
  - "In the following example, the TestConstructor method creates two <xref:System.Data.DataTable>instances. In order to demonstrate this constructor for the <xref:System.Data.DataTableReader> class, the sample creates a new `DataTableReader` based on an array that contains the two `DataTables`, and performs a simple operation, printing the contents from the first few columns to the console window. In order to test this application, create a new Console application, and paste the sample code into the newly created file.  \n  \n [!code-vb[DataWorks DataTableReader.ctor#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_20_1.vb)]\n [!code-cs[DataWorks DataTableReader.ctor#1](~/add/codesnippet/csharp/m-system.data.datatabler_20_1.cs)]  \n  \n The Console window displays the following results:  \n  \n```  \n1 Mary  \n2 Andy  \n3 Peter  \n4 Russ  \n1 Wireless Network Card  \n2 Hard Drive  \n3 Monitor  \n4 CPU  \n```"
  syntax:
    content: public DataTableReader (System.Data.DataTable[] dataTables);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "배열 <xref href=&quot;System.Data.DataTable&quot;> </xref> 새에 대 한 결과 제공 하는 개체 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 개체입니다."
  overload: System.Data.DataTableReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTableReader.Close
  id: Close
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: Close()
  nameWithType: DataTableReader.Close()
  fullName: System.Data.DataTableReader.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "현재 닫습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  remarks: "호출 `Close()` 닫힌에 `DataTableReader` 개체에서 오류가 발생 하지 않습니다."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.DataTableReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTableReader.Depth
  id: Depth
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: Depth
  nameWithType: DataTableReader.Depth
  fullName: System.Data.DataTableReader.Depth
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "현재 행에 대 한 중첩 깊이 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  remarks: '`DataTableReader`중첩을 지원 하지 않습니다. `Depth` 속성은 항상&0;을 반환 합니다.'
  syntax:
    content: public override int Depth { get; }
    return:
      type: System.Int32
      description: "현재 행에 대 한 중첩 깊이 항상&0;입니다."
  overload: System.Data.DataTableReader.Depth*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTableReader.FieldCount
  id: FieldCount
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: FieldCount
  nameWithType: DataTableReader.FieldCount
  fullName: System.Data.DataTableReader.FieldCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "현재 행에서 열 수를 반환합니다."
  syntax:
    content: public override int FieldCount { get; }
    return:
      type: System.Int32
      description: "0; 올바른 결과 집합에 배치 되지 않았으면 그렇지 않은 경우 현재 행에서 열 수 있습니다."
  overload: System.Data.DataTableReader.FieldCount*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "닫힌에서 필드 수를 검색 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetBoolean(System.Int32)
  id: GetBoolean(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetBoolean(Int32)
  nameWithType: DataTableReader.GetBoolean(Int32)
  fullName: System.Data.DataTableReader.GetBoolean(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 열의 값을 <xref:System.Boolean>.</xref:System.Boolean> 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 Boolean 또는 부울,으로 강제 변환 또는 예외가 생성 됩니다.       호출 <xref:System.Data.DataTableReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값이 있는 경우 볼 수 있습니다.</xref:System.Data.DataTableReader.IsDBNull%2A>"
  example:
  - "The following example displays the contents of the column numbered 2 within the passed-in <xref:System.Data.DataTableReader>. If the value the column within a particular row is null, the code displays the text \\<NULL>. If the data within the column is not the correct type, the example displays an error message for each row.  \n  \n [!code-vb[DataWorks DataTableReader.GetBoolean#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_0_1.vb)]\n [!code-cs[DataWorks DataTableReader.GetBoolean#1](~/add/codesnippet/csharp/m-system.data.datatabler_0_1.cs)]"
  syntax:
    content: public override bool GetBoolean (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Boolean
      description: "지정 된 열의 값입니다."
  overload: System.Data.DataTableReader.GetBoolean*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정 된 열에 없는 한 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetByte(System.Int32)
  id: GetByte(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetByte(Int32)
  nameWithType: DataTableReader.GetByte(Int32)
  fullName: System.Data.DataTableReader.GetByte(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 열의 값을 바이트로 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 있어야 바이트 또는 byte로 강제 변환 합니다.       호출 <xref:System.Data.DataTableReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값이 있는 경우 볼 수 있습니다.</xref:System.Data.DataTableReader.IsDBNull%2A>"
  example:
  - "The following example displays the contents of the column numbered 2 within the passed-in <xref:System.Data.DataTableReader>. If the value the column within a particular row is null, the code displays the text \\<NULL>. If the data within the column is not of the correct type, the example displays an error message for each row.  \n  \n [!code-vb[DataWorks DataTableReader.GetByte#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_8_1.vb)]\n [!code-cs[DataWorks DataTableReader.GetByte#1](~/add/codesnippet/csharp/m-system.data.datatabler_8_1.cs)]"
  syntax:
    content: public override byte GetByte (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Byte
      description: "지정 된 열의 값입니다."
  overload: System.Data.DataTableReader.GetByte*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref uid=&quot;langword_csharp_DataTableReader&quot; name=&quot;DataTableReader&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정된 된 열에 바이트가 없습니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: DataTableReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.DataTableReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정한 버퍼 오프셋에서 시작 하는 배열로 버퍼에 지정된 된 열 오프셋에서 시작 하는 바이트 스트림을 읽습니다."
  remarks: "`GetBytes`필드에 사용 가능한 바이트 수를 반환합니다. 대부분의 경우 이것은 필드의 길이입니다. 그러나 반환 된 숫자 보다 작을 수도 있습니다는 필드의 길이 경우 `GetBytes` 바이트를 얻는 필드에서 이미 사용 되었습니다. 예를 들어 있는 경우 수 있습니다 때는 <xref:System.Data.DataTableReader>버퍼를 전달 하는 경우 큰 데이터 구조를 버퍼에 읽고 `null` (`Nothing` Visual Basic의), `GetBytes` 버퍼 오프셋된 매개 변수에 따라 나머지 크기가 아니라를 바이트 단위로 전체 필드의 길이 반환 합니다.</xref:System.Data.DataTableReader>       변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 여야 바이트 배열 또는 바이트 배열에 강제 변환 합니다."
  example:
  - "The following example creates a <xref:System.Data.DataTableReader> based on data in the AdventureWorks sample database, and saves each image retrieved to a separate file in the C:\\ folder. In order to test this application, create a new Console application, reference the System.Drawing.dll assembly, and paste the sample code into the newly created file.  \n  \n [!code-cs[DataWorks DataTableReader.GetBytes#1](~/add/codesnippet/csharp/ff921727-bdbe-4741-b853-_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetBytes#1](~/add/codesnippet/visualbasic/ff921727-bdbe-4741-b853-_1.vb)]"
  syntax:
    content: public override long GetBytes (int ordinal, long dataIndex, byte[] buffer, int bufferIndex, int length);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    - id: dataIndex
      type: System.Int64
      description: "읽기 작업을 시작할 필드 내의 인덱스입니다."
    - id: buffer
      type: System.Byte[]
      description: "바이트 스트림의 읽을 버퍼입니다."
    - id: bufferIndex
      type: System.Int32
      description: "데이터 배치를 시작할 버퍼 내의 인덱스입니다."
    - id: length
      type: System.Int32
      description: "버퍼에 복사할 최대 길이입니다."
    return:
      type: System.Int64
      description: "실제 읽은 바이트 수입니다."
  overload: System.Data.DataTableReader.GetBytes*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref uid=&quot;langword_csharp_DataTableReader&quot; name=&quot;DataTableReader&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정된 된 열에 바이트 배열이 없습니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetChar(System.Int32)
  id: GetChar(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetChar(Int32)
  nameWithType: DataTableReader.GetChar(Int32)
  fullName: System.Data.DataTableReader.GetChar(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "문자로 지정 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 있어야 문자 또는 문자도 강제 변환 합니다.       호출 <xref:System.Data.DataTableReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값이 있는 경우 볼 수 있습니다.</xref:System.Data.DataTableReader.IsDBNull%2A>"
  example:
  - "The following example displays the contents of the column numbered 2 within the passed-in DataTableReader. If the value the column within a particular row is null, the code displays the text \\<NULL>. If the data within the column is not of the correct type, the example displays an error message for each row.  \n  \n [!code-vb[DataWorks DataTableReader.GetChar#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_16_1.vb)]\n [!code-cs[DataWorks DataTableReader.GetChar#1](~/add/codesnippet/csharp/m-system.data.datatabler_16_1.cs)]"
  syntax:
    content: public override char GetChar (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Char
      description: "열의 값입니다."
  overload: System.Data.DataTableReader.GetChar*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref uid=&quot;langword_csharp_DataTableReader&quot; name=&quot;DataTableReader&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정된 된 필드에는 문자가 없습니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: DataTableReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.DataTableReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 열의 값을 문자 배열로 반환합니다."
  remarks: "`GetChars`필드에 사용할 수 있는 문자 수를 반환합니다. 대부분의 경우 이것은 필드의 길이입니다. 그러나 반환 된 숫자 보다 작을 수도 있습니다는 필드의 길이 경우 `GetChars` 문자를 가져올 필드에서 이미 사용 되었습니다.       실제 읽은 문자 수는 필드의 끝에 도달할 경우 요청 된 길이 보다 작을 수 수 있습니다. 버퍼는 null을 전달 하는 경우 (`Nothing` Visual basic에서), `GetChars` 문자 버퍼 오프셋된 매개 변수에 따라 나머지 크기가 아니라 전체 필드의 길이 반환 합니다.       변환이 수행 되지 않습니다. 따라서 데이터를 검색할 수 있어야는 문자 배열 또는 문자 배열의으로 강제 변환 합니다."
  example:
  - "The following example demonstrates the `GetChars` method. The `TestGetChars` method expects to be passed a `DataTableReader` filled with two columns of data: a file name in the first column, and an array of characters in the second. In addition, `TestGetChars` lets you specify the buffer size to be used as it reads the data from the character array in the `DataTableReader`. `TestGetChars` creates a file corresponding to each row of data in the `DataTableReader`, using the supplied data in the first column of the `DataTableReader` as the file name.  \n  \n This procedure demonstrates the use of the `GetChars` method reading data that was stored in the `DataTable` as a character array. Any other type of data causes the `GetChars` method to throw an `InvalidCastException`.  \n  \n [!code-cs[DataWorks DataTableReader.GetChars#1](~/add/codesnippet/csharp/299b411e-96a3-40b6-89fc-_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetChars#1](~/add/codesnippet/visualbasic/299b411e-96a3-40b6-89fc-_1.vb)]"
  syntax:
    content: public override long GetChars (int ordinal, long dataIndex, char[] buffer, int bufferIndex, int length);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    - id: dataIndex
      type: System.Int64
      description: "읽기 작업을 시작할 필드 내의 인덱스입니다."
    - id: buffer
      type: System.Char[]
      description: "문자 스트림의 읽을 버퍼입니다."
    - id: bufferIndex
      type: System.Int32
      description: "데이터 배치를 시작할 버퍼 내의 인덱스입니다."
    - id: length
      type: System.Int32
      description: "버퍼에 복사할 최대 길이입니다."
    return:
      type: System.Int64
      description: "실제 읽은 문자 수입니다."
  overload: System.Data.DataTableReader.GetChars*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref uid=&quot;langword_csharp_DataTableReader&quot; name=&quot;DataTableReader&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정된 된 열에는 문자 배열"
  platform:
  - net462
- uid: System.Data.DataTableReader.GetDataTypeName(System.Int32)
  id: GetDataTypeName(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetDataTypeName(Int32)
  nameWithType: DataTableReader.GetDataTypeName(Int32)
  fullName: System.Data.DataTableReader.GetDataTypeName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 열의 데이터 형식을 나타내는 문자열을 가져옵니다."
  remarks: "GetDataTypeName 메서드는 항상 기본 유형을 반환 <xref:System.Data.DataColumn>공급자별 형식이 아닌.</xref:System.Data.DataColumn>"
  example:
  - "The following console application displays a list of fields and their type names from a simple <xref:System.Data.DataTable>:  \n  \n [!code-vb[DataWorks DataTableReader.GetDataTypeName#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_10_1.vb)]\n [!code-cs[DataWorks DataTableReader.GetDataTypeName#1](~/add/codesnippet/csharp/m-system.data.datatabler_10_1.cs)]  \n  \n The Console window displays the following results:  \n  \n```  \nID: Int32  \nName: String  \n```"
  syntax:
    content: public override string GetDataTypeName (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.String
      description: "열의 데이터 형식을 나타내는 문자열입니다."
  overload: System.Data.DataTableReader.GetDataTypeName*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetDateTime(System.Int32)
  id: GetDateTime(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetDateTime(Int32)
  nameWithType: DataTableReader.GetDateTime(Int32)
  fullName: System.Data.DataTableReader.GetDateTime(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 열의 값을 가져옵니다는 <xref:System.DateTime>개체입니다.</xref:System.DateTime>"
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 해야는 <xref:System.DateTime>으로 강제 변환 또는 `DataTime`.</xref:System.DateTime>       호출 <xref:System.Data.DataTableReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값이 있는 경우 볼 수 있습니다.</xref:System.Data.DataTableReader.IsDBNull%2A>"
  example:
  - "The following example displays the contents of the column numbered 2 within the passed-in <xref:System.Data.DataTableReader>. If the value the column within a particular row is null, the code displays the text \\<NULL>. If the data within the column is not of the correct type, the example displays an error message for each row.  \n  \n [!code-vb[DataWorks DataTableReader.GetDateTime#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_23_1.vb)]\n [!code-cs[DataWorks DataTableReader.GetDateTime#1](~/add/codesnippet/csharp/m-system.data.datatabler_23_1.cs)]"
  syntax:
    content: public override DateTime GetDateTime (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.DateTime
      description: "지정 된 열의 값입니다."
  overload: System.Data.DataTableReader.GetDateTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref uid=&quot;langword_csharp_DataTableReader&quot; name=&quot;DataTableReader&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정된 된 열에는 DateTime 값을 없습니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetDecimal(System.Int32)
  id: GetDecimal(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetDecimal(Int32)
  nameWithType: DataTableReader.GetDecimal(Int32)
  fullName: System.Data.DataTableReader.GetDecimal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 열의 값을 <xref:System.Decimal>.</xref:System.Decimal> 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 해야는 <xref:System.Decimal>으로 강제 변환 또는 `Decimal`.</xref:System.Decimal>       호출 <xref:System.Data.DataTableReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값이 있는 경우 볼 수 있습니다.</xref:System.Data.DataTableReader.IsDBNull%2A>"
  example:
  - "The following example displays the contents of the column numbered 2 within the passed-in <xref:System.Data.DataTableReader>. If the value the column within a particular row is null, the code displays the text \\<NULL>. If the data within the column is not of the correct type, the example displays an error message for each row.  \n  \n [!code-cs[DataWorks DataTableReader.GetDecimal#1](~/add/codesnippet/csharp/m-system.data.datatabler_4_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetDecimal#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_4_1.vb)]"
  syntax:
    content: public override decimal GetDecimal (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Decimal
      description: "지정 된 열의 값입니다."
  overload: System.Data.DataTableReader.GetDecimal*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref uid=&quot;langword_csharp_DataTableReader&quot; name=&quot;DataTableReader&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정 된 열에 없는 한 <xref uid=&quot;langword_csharp_Decimal&quot; name=&quot;Decimal&quot; href=&quot;&quot;> </xref> 값입니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetDouble(System.Int32)
  id: GetDouble(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetDouble(Int32)
  nameWithType: DataTableReader.GetDouble(Int32)
  fullName: System.Data.DataTableReader.GetDouble(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "배정밀도 부동 소수점 숫자로 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 되는 데이터 이미는 배정밀도 부동 소수점 숫자 이거나을 배정밀도 부동 소수점 숫자로 강제 변환할 수 있어야 합니다.       호출 <xref:System.Data.DataTableReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값이 있는 경우 볼 수 있습니다.</xref:System.Data.DataTableReader.IsDBNull%2A>"
  example:
  - "The following example displays the contents of the column numbered 2 within the passed-in <xref:System.Data.DataTableReader>. If the value the column within a particular row is null, the code displays the text \\<NULL>. If the data within the column is not of the correct type, the example displays an error message for each row.  \n  \n [!code-cs[DataWorks DataTableReader.GetDouble#1](~/add/codesnippet/csharp/m-system.data.datatabler_19_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetDouble#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_19_1.vb)]"
  syntax:
    content: public override double GetDouble (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "열의&0;부터 시작 서 수입니다."
    return:
      type: System.Double
      description: "지정 된 열의 값입니다."
  overload: System.Data.DataTableReader.GetDouble*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref uid=&quot;langword_csharp_DataTableReader&quot; name=&quot;DataTableReader&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정된 된 열에는 배정밀도 부동 소수점 숫자"
  platform:
  - net462
- uid: System.Data.DataTableReader.GetEnumerator
  id: GetEnumerator
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: DataTableReader.GetEnumerator()
  fullName: System.Data.DataTableReader.GetEnumerator()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "항목 컬렉션을 반복 하는 데 사용할 수 있는 열거자를 반환 합니다."
  remarks: "열거자 <xref:System.Data.DataTableReader>.</xref:System.Data.DataTableReader> 데이터를 읽기 위한 허용 내부 컬렉션을 수정 하 여 열거자를 사용할 수 없습니다.       처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다. 이 위치에서, 호출 <xref:System.Collections.IEnumerator.Current%2A>예외를 throw 합니다.</xref:System.Collections.IEnumerator.Current%2A> 따라서 호출 해야 `MoveNext` 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 `Current`합니다.       `Current`반환 된 <xref:System.Data.Common.DbDataRecord>, 될 때까지 동일한 개체를 반환 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A>또는 <xref:System.Collections.IEnumerator.Reset%2A>호출 됩니다.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Data.Common.DbDataRecord> `MoveNext`설정 `Current` 를 다음 요소로 합니다.       컬렉션의 끝이 전달 된 후 열거자는 컬렉션의 마지막 요소 뒤에 배치 하 고 호출 되 `MoveNext` false를 반환 합니다. 마지막으로 호출 하는 경우 `MoveNext` 반환 `false`호출, `Current` 예외를 throw 합니다. 또한 때문에 <xref:System.Data.DataTableReader>해당 데이터에 <xref:System.Collections.IEnumerator.Reset%2A>는 r의 throw에 <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Collections.IEnumerator.Reset%2A> 호출에 대 한 정방향 전용 액세스를 제공 합니다.</xref:System.Data.DataTableReader>       <xref:System.Data.DataTableReader>안정적인 열거자를 제공 합니다.</xref:System.Data.DataTableReader> 즉, 행 삭제 또는 추가 기본 데이터 내에서 발생 한 경우에 GetEnumerator 호출 하 여 반환 되는 열거자가 아직 유효 합니다."
  example:
  - "The following example demonstrates the use of the GetEnumerator method. This includes the behavior of the enumerator when rows are deleted from the underlying <xref:System.Data.DataTable> while the enumerator is active.  \n  \n [!code-vb[DataWorks DataTableReader.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_7_1.vb)]\n [!code-cs[DataWorks DataTableReader.GetEnumerator#1](~/add/codesnippet/csharp/m-system.data.datatabler_7_1.cs)]  \n  \n The procedure displays the following text in the Console window:  \n  \n```  \nPeter  \nMary  \nRuss  \n```"
  syntax:
    content: public override System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>항목 컬렉션을 나타내는 개체입니다.</xref:System.Collections.IEnumerator>"
  overload: System.Data.DataTableReader.GetEnumerator*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetFieldType(System.Int32)
  id: GetFieldType(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetFieldType(Int32)
  nameWithType: DataTableReader.GetFieldType(Int32)
  fullName: System.Data.DataTableReader.GetFieldType(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "가져옵니다는 <xref:System.Type>개체의 데이터 형식입니다.</xref:System.Type>"
  remarks: ''
  example:
  - "Call the following procedure, passing in a <xref:System.Data.DataTableReader> instance in order to display a list of all the fields and the full name for each type in the Console window.  \n  \n [!code-cs[DataWorks DataTableReader.GetFieldType#1](~/add/codesnippet/csharp/m-system.data.datatabler_13_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetFieldType#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_13_1.vb)]"
  syntax:
    content: public override Type GetFieldType (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Type
      description: "<xref:System.Type>개체의 데이터 형식입니다.</xref:System.Type>"
  overload: System.Data.DataTableReader.GetFieldType*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetFloat(System.Int32)
  id: GetFloat(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetFloat(Int32)
  nameWithType: DataTableReader.GetFloat(Int32)
  fullName: System.Data.DataTableReader.GetFloat(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "단 정밀도 부동 소수점 숫자의 지정된 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터 이미는 단 정밀도 부동 소수점 숫자 이거나를 단 정밀도 부동 소수점 숫자로 강제 변환할 수 있어야 합니다.       호출 <xref:System.Data.DataTableReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값이 있는 경우 볼 수 있습니다.</xref:System.Data.DataTableReader.IsDBNull%2A>"
  example:
  - "The following example displays the contents of the column numbered 2 within the passed-in <xref:System.Data.DataTableReader>. If the value the column within a particular row is null, the code displays the text \\<NULL>. If the data within the column is not of the correct type, the example displays an error message for each row.  \n  \n [!code-cs[DataWorks DataTableReader.GetFloat#1](~/add/codesnippet/csharp/m-system.data.datatabler_11_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetFloat#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_11_1.vb)]"
  syntax:
    content: public override float GetFloat (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Single
      description: "열의 값입니다."
  overload: System.Data.DataTableReader.GetFloat*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정된 된 열에는 단 정밀도 부동 소수점 숫자"
  platform:
  - net462
- uid: System.Data.DataTableReader.GetGuid(System.Int32)
  id: GetGuid(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetGuid(Int32)
  nameWithType: DataTableReader.GetGuid(Int32)
  fullName: System.Data.DataTableReader.GetGuid(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "전역적으로 고유 식별자 (GUID)로 지정 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 해야는 <xref:System.Guid>으로 강제 변환 또는 `Guid`.</xref:System.Guid>       호출 <xref:System.Data.DataTableReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값이 있는 경우 볼 수 있습니다.</xref:System.Data.DataTableReader.IsDBNull%2A>"
  example:
  - "The following example displays the contents of the column numbered 2 within the passed-in DataTableReader. If the value the column within a particular row is null, the code displays the text \\<NULL>. If the data within the column is not of the correct type, the example displays an error message for each row.  \n  \n [!code-vb[DataWorks DataTableReader.GetGuid#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_2_1.vb)]\n [!code-cs[DataWorks DataTableReader.GetGuid#1](~/add/codesnippet/csharp/m-system.data.datatabler_2_1.cs)]"
  syntax:
    content: public override Guid GetGuid (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Guid
      description: "지정 된 열의 값입니다."
  overload: System.Data.DataTableReader.GetGuid*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정된 된 열에 GUID가 없습니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetInt16(System.Int32)
  id: GetInt16(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetInt16(Int32)
  nameWithType: DataTableReader.GetInt16(Int32)
  fullName: System.Data.DataTableReader.GetInt16(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "16 비트 부호 있는 정수로 지정 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 해야 프로그램 <xref:System.Int16>으로 강제 변환 또는 `Int16`.</xref:System.Int16>       호출 <xref:System.Data.DataTableReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값이 있는 경우 볼 수 있습니다.</xref:System.Data.DataTableReader.IsDBNull%2A>"
  example:
  - "The following example displays the contents of the column numbered 2 within the passed-in <xref:System.Data.DataTableReader>. If the value the column within a particular row is null, the code displays the text \\<NULL>. If the data within the column is not of the correct type, the example displays an error message for each row.  \n  \n [!code-vb[DataWorks DataTableReader.GetInt16#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_1_1.vb)]\n [!code-cs[DataWorks DataTableReader.GetInt16#1](~/add/codesnippet/csharp/m-system.data.datatabler_1_1.cs)]"
  syntax:
    content: public override short GetInt16 (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "0부터 시작 하는 열 서 수"
    return:
      type: System.Int16
      description: "지정 된 열의 값입니다."
  overload: System.Data.DataTableReader.GetInt16*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정된 된 열에는 16 비트 부호 있는 정수가 없습니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetInt32(System.Int32)
  id: GetInt32(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetInt32(Int32)
  nameWithType: DataTableReader.GetInt32(Int32)
  fullName: System.Data.DataTableReader.GetInt32(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "부호 있는 32 비트 정수로 지정 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 해야 프로그램 <xref:System.Int32>으로 강제 변환 또는 `Int32`.</xref:System.Int32>       호출 <xref:System.Data.DataTableReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값이 있는 경우 볼 수 있습니다.</xref:System.Data.DataTableReader.IsDBNull%2A>"
  example:
  - "The following example displays the contents of the column numbered 2 within the passed-in <xref:System.Data.DataTableReader>. If the value the column within a particular row is null, the code displays the text \\<NULL>. If the data within the column is not of the correct type, the example displays an error message for each row.  \n  \n [!code-cs[DataWorks DataTableReader.GetInt32#1](~/add/codesnippet/csharp/m-system.data.datatabler_15_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetInt32#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_15_1.vb)]"
  syntax:
    content: public override int GetInt32 (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "0부터 시작 하는 열 서 수"
    return:
      type: System.Int32
      description: "지정 된 열의 값입니다."
  overload: System.Data.DataTableReader.GetInt32*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정된 된 열의 32 비트 부호 있는 정수 값이 포함 되지 않습니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetInt64(System.Int32)
  id: GetInt64(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetInt64(Int32)
  nameWithType: DataTableReader.GetInt64(Int32)
  fullName: System.Data.DataTableReader.GetInt64(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "64 비트 부호 있는 정수로 지정 된 열의 값을 가져옵니다."
  remarks: "변환이 수행 되지 않습니다. 따라서 검색 된 데이터가 이미 해야 프로그램 <xref:System.Int64>으로 강제 변환 또는 `Int64`.</xref:System.Int64>       호출 <xref:System.Data.DataTableReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값이 있는 경우 볼 수 있습니다.</xref:System.Data.DataTableReader.IsDBNull%2A>"
  example:
  - "The following example displays the contents of the column numbered 2 within the passed-in <xref:System.Data.DataTableReader>. If the value the column within a particular row is null, the code displays the text \\<NULL>. If the data within the column is not of the correct type, the example displays an error message for each row.  \n  \n [!code-vb[DataWorks DataTableReader.GetInt64#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_5_1.vb)]\n [!code-cs[DataWorks DataTableReader.GetInt64#1](~/add/codesnippet/csharp/m-system.data.datatabler_5_1.cs)]"
  syntax:
    content: public override long GetInt64 (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "0부터 시작 하는 열 서 수"
    return:
      type: System.Int64
      description: "지정 된 열의 값입니다."
  overload: System.Data.DataTableReader.GetInt64*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정된 된 열의 64 비트 부호 있는 정수 값이 포함 되지 않습니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetName(System.Int32)
  id: GetName(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetName(Int32)
  nameWithType: DataTableReader.GetName(Int32)
  fullName: System.Data.DataTableReader.GetName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 열의 값을 <xref:System.String>.</xref:System.String> 가져옵니다."
  remarks: "`GetName` 및 <xref:System.Data.DataTableReader.GetOrdinal%2A>메서드 역 기능을 제공 합니다.</xref:System.Data.DataTableReader.GetOrdinal%2A> 보류 중인 `GetOrdinal` 호출의 반환 값에 `GetName` 에 전달 된 원래 매개 변수를 반환 해야 `GetName`; 반대 순서로 프로시저를 호출 하 여 마찬가지입니다."
  example:
  - "The following simple example includes a procedure that lists the names of all the columns within the specified `DataTableReader`, and the column's ordinal position, to the Console window.  \n  \n [!code-cs[DataWorks DataTableReader.GetName#1](~/add/codesnippet/csharp/m-system.data.datatabler_6_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetName#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_6_1.vb)]"
  syntax:
    content: public override string GetName (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "0부터 시작 하는 열 서 수"
    return:
      type: System.String
      description: "지정 된 열의 이름입니다."
  overload: System.Data.DataTableReader.GetName*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetOrdinal(System.String)
  id: GetOrdinal(System.String)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetOrdinal(String)
  nameWithType: DataTableReader.GetOrdinal(String)
  fullName: System.Data.DataTableReader.GetOrdinal(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "열을 가져옵니다 서 수 이며 열의 이름을 지정 합니다."
  remarks: "대부분의 메서드를 제공 하므로 <xref:System.Data.DataTableReader>클래스는 서 수 열 번호를 사용 하면 제공 해야 합니다.는 `GetOrdinal` 열 이름이 지정 된 열 번호를 검색 하는 메서드입니다.</xref:System.Data.DataTableReader>       `GetOrdinal`대/소문자 구분 조회를 먼저 수행합니다. 실패 한 경우에 두 번째 대/소문자 구분 검색이 수행 됩니다. 열 번호를 찾을 수 없는 경우는 `IndexOutOfRangeException` throw 됩니다.       `GetOrdinal`가 되지 일본어가 나 너비 구분 됩니다.       서 수 기반 조회가 명명 된 조회 보다 효율적 이므로, 것이 없습니다 효율적 호출 `GetOrdinal` 루프 내에서. 호출 하 여 시간 절약 `GetOrdinal` 루프 내에서 사용할 정수 변수에 결과 할당 하 고 한 번"
  example:
  - "If you have only a column name, in which case the column name is user supplied, and you must retrieve information from the column, you can use a procedure like the following to extract the required information. In this example, the procedure accepts a column name and returns the data that is contained within that column for the current row in the <xref:System.Data.DataTableReader> :  \n  \n [!code-cs[DataWorks DataTableReader.GetOrdinal#1](~/add/codesnippet/csharp/m-system.data.datatabler_3_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetOrdinal#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_3_1.vb)]"
  syntax:
    content: public override int GetOrdinal (string name);
    parameters:
    - id: name
      type: System.String
      description: "열의 이름입니다."
    return:
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
  overload: System.Data.DataTableReader.GetOrdinal*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "지정 된 이름이 올바른 열 이름이 아닙니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetProviderSpecificFieldType(System.Int32)
  id: GetProviderSpecificFieldType(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetProviderSpecificFieldType(Int32)
  nameWithType: DataTableReader.GetProviderSpecificFieldType(Int32)
  fullName: System.Data.DataTableReader.GetProviderSpecificFieldType(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "공급자 관련 형식에서 지정 된 열의 형식을 가져옵니다."
  remarks: "때문에 <xref:System.Data.DataTableReader>항상의 원본으로 사용 <xref:System.Data.DataColumn>동일한 입력에 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 내에 저장 된 형식으로 반환 항상 GetProviderSpecificFieldType 메서드를 호출 하 여 반환 되는 값</xref:System.Data.DataColumn> 내에 저장 된 형식을 반환 합니다</xref:System.Data.DataTableReader> 작업을 할 때는 <xref:System.Data.DataTableReader>GetProviderSpecificFieldType 메서드를 호출 하는 클래스를 호출할 때와 동일한 형식을 반환 된 <xref:System.Type.GetType%2A>메서드.</xref:System.Type.GetType%2A> </xref:System.Data.DataTableReader>"
  syntax:
    content: public override Type GetProviderSpecificFieldType (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Type
      description: "<xref:System.Type>개체의 데이터 형식입니다.</xref:System.Type>"
  overload: System.Data.DataTableReader.GetProviderSpecificFieldType*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetProviderSpecificValue(System.Int32)
  id: GetProviderSpecificValue(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetProviderSpecificValue(Int32)
  nameWithType: DataTableReader.GetProviderSpecificValue(Int32)
  fullName: System.Data.DataTableReader.GetProviderSpecificValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "공급자 관련 형식에서 지정 된 열의 값을 가져옵니다."
  remarks: "때문에 <xref:System.Data.DataTableReader>항상의 기본 <xref:System.Data.DataColumn> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 내에 저장 된 데이터와 같은 유형의 데이터를 반환 하는 항상 GetProviderSpecificValue 메서드를 호출 하 여 반환 되는 값</xref:System.Data.DataColumn> 내에 저장 된 형식을 반환 합니다</xref:System.Data.DataTableReader> 작업을 할 때는 <xref:System.Data.DataTableReader>GetProviderSpecificValue 메서드를 호출 하는 클래스, 반환 값을 호출할 때와 입력 동일한는 <xref:System.Data.DataTableReader.GetValue%2A>메서드.</xref:System.Data.DataTableReader.GetValue%2A> </xref:System.Data.DataTableReader>"
  syntax:
    content: public override object GetProviderSpecificValue (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "해당 값을 검색 하는 열의&0;부터 시작 하는 수입니다."
    return:
      type: System.Object
      description: "지정 된 열의 공급자별 형식 값입니다."
  overload: System.Data.DataTableReader.GetProviderSpecificValue*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다.<xref href=&quot;System.Data.DataTableReader&quot;></xref>"
  platform:
  - net462
- uid: System.Data.DataTableReader.GetProviderSpecificValues(System.Object[])
  id: GetProviderSpecificValues(System.Object[])
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetProviderSpecificValues(Object[])
  nameWithType: DataTableReader.GetProviderSpecificValues(Object[])
  fullName: System.Data.DataTableReader.GetProviderSpecificValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "제공 된 배열에 있는 모든 열에 대 한 공급자 관련 형식 정보로 채웁니다는 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  remarks: "때문에 <xref:System.Data.DataTableReader>항상의 원본으로 사용 <xref:System.Data.DataColumn>메서드는 항상 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 내에 저장 된 데이터와 동일한 형식을 GetProviderSpecificValues를 호출 하 여 반환 되는 값</xref:System.Data.DataColumn> 내에 저장 된 형식의 데이터를 반환 합니다.</xref:System.Data.DataTableReader> 작업을 할 때는 <xref:System.Data.DataTableReader>GetProviderSpecificValues 메서드를 호출 하는 클래스를 호출할 때와 동일한 값과 형식을 반환 된 <xref:System.Data.DataTableReader.GetValues%2A>메서드.</xref:System.Data.DataTableReader.GetValues%2A> </xref:System.Data.DataTableReader>"
  syntax:
    content: public override int GetProviderSpecificValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "열에 대 한 형식 정보를 채울 수 있는 개체의 배열에서 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
    return:
      type: System.Int32
      description: "배열에 복사 하는 열 값의 수입니다."
  overload: System.Data.DataTableReader.GetProviderSpecificValues*
  exceptions:
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetSchemaTable
  id: GetSchemaTable
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetSchemaTable()
  nameWithType: DataTableReader.GetSchemaTable()
  fullName: System.Data.DataTableReader.GetSchemaTable()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "반환 된 <xref href=&quot;System.Data.DataTable&quot;> </xref> 의 열 메타 데이터를 설명 하는 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  remarks: "GetSchemaTable 메서드는 다음 순서 대로 각 열에 대 한 메타 데이터 반환: | DataReader 열 | 설명 |   |-----------------------|-----------------|   | ColumnName | <xref:System.Data.DataTable>에는 열의 이름이 나타납니다. |   | ColumnOrdinal | 열의 서 수 |   | ColumnSize | 경우-1은 <xref:System.Data.Common.SchemaTableColumn.ColumnSize>(또는 <xref:System.Data.DataColumn.MaxLength%2A>)는 <xref:System.Data.DataColumn>의 속성을 확인할 수 없는 하거나 관련 된; 그렇지 않으면 0 또는 양의 정수를 포함 하는 `MaxLength` 값. |   | NumericPrecision | 이 열의 최대 전체 자릿수는 열 형식 숫자 형식인 경우.</xref:System.Data.DataColumn> </xref:System.Data.DataColumn.MaxLength%2A> </xref:System.Data.Common.SchemaTableColumn.ColumnSize> </xref:System.Data.DataTable> 이 null 값을 숫자 데이터 형식 열 형식이 없는 경우. |   | NumericScale | 열 데이터 형식에는 크기 조정 구성 요소를 경우 소수점 오른쪽 자릿수를 반환 합니다. 그렇지 않은 경우 null 값을 반환 합니다. |   | 데이터 형식 | 기본 형식 열의. |   | ProviderType | 표시기는 열의 데이터 형식입니다. 이 값은 <xref:System.Object>.</xref:System.Object> 열의 데이터 형식을 행은 다양 하는 경우 이 열에 null 값을 포함할 수 없습니다. |   | IsLong | `true` 열의 데이터 형식이 <xref:System.String>및 해당 <xref:System.Data.DataColumn.MaxLength%2A>속성이-1입니다.</xref:System.Data.DataColumn.MaxLength%2A> </xref:System.String> 그렇지 않으면 `false`. |   | AllowDBNull | `true` AllowDbNull 제약 조건에는 열에 대 한 true이 고, 그렇지 않으면 설정 되어 있으면 `false`. |   | IsReadOnly | `true` 수정 되지 않으면 열 수 없는 경우 `false`. |   | Isrowversion은 | `false`, 모든 열에 대해. |   | IsUnique | `true`: 각 행에서의 <xref:System.Data.DataTable>이 열에 동일한 값을 가질 수 있습니다.</xref:System.Data.DataTable> `IsUnique`단독으로 표시 되거나이 열에만 적용 되는 UNIQUE 유형의 제약 조건이 있는 경우 해당 열이 키를 나타내는 경우 true로 보장 됩니다. `false`:이 열에 중복 된 값 수는 `DataTable`합니다. 이 열의 기본값은 `false`. |   | IsKey | `true`: 열이 열 집합 중 하나를 전체적으로 볼 때, <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 행을 고유 하 게 식별 열 집합 `IsKey` 로 설정 `true` 의 행을 고유 하 게 식별 해야 합니다는 `DataTable`합니다. 이 열 집합이 열의 최소 집합 임을 않아도가 됩니다. 이 열 집합에서 생성 될 수 있습니다는 `DataTable` 기본 키나 unique 제약 조건을 고유 인덱스입니다. `false`:이 열은 행을 식별할 필요가 없습니다. 이 값은 `true` 열이 단일 또는 복합 기본 키에 참여 하는 경우. 그렇지 않으면 해당 값은 `false`. |   | IsAutoIncrement | `true`: 고정 된 증가분의 새 행에 열 값을 할당 합니다. `false`:이 열은 고정 된 증가분의 새 행에 값을 할당 하지 않습니다. 이 열의 기본값은 `false`. |   | BaseCatalogName | 열이 포함 된 데이터 저장소에 있는 카탈로그의 이름입니다. `Null`기본 카탈로그 이름을 확인할 수 없습니다 하는 경우. 이 열에 대 한 기본값은 한 `null` 값입니다. |   | BaseSchemaName | 이 값은 항상 `Null`. |   | BaseTableName | <xref:System.Data.DataTable>의 이름입니다. |   | BaseColumnName | <xref:System.Data.DataTable>에서 열의 이름입니다. |   | AutoIncrementSeed | <xref:System.Data.DataTable>의 <xref:System.Data.DataColumn.AutoIncrementSeed%2A>속성의 값입니다. |   | AutoIncrementStep | <xref:System.Data.DataTable>의 <xref:System.Data.DataColumn.AutoIncrementStep%2A>속성의 값입니다. |   | DefaultValue | <xref:System.Data.DataColumn>의 <xref:System.Data.DataColumn.DefaultValue%2A>속성의 값입니다. |   | 식 | 식 문자열의 현재 열이 식 열 및 식에 사용 되는 모든 열이 동일 하 게 속할 경우 `T:System.Data.DataTable` 식 열을 포함 하 고, 그렇지 않으면 `null`. |   | ColumnMapping | <xref:System.Data.MappingType> <xref:System.Data.DataColumn>.</xref:System.Data.DataColumn> 와 연결 된 값</xref:System.Data.MappingType> </xref:System.Data.DataColumn.DefaultValue%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataColumn.AutoIncrementStep%2A> </xref:System.Data.DataTable> </xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataTable> 형식 중 하나일 수 있습니다 `Attribute`, `Element`, `Hidden`, 또는 `SimpleContent`합니다. 기본값은 `Element`. |   | BaseTableNamespace | <xref:System.Data.DataTable>의 <xref:System.Data.DataTable.Namespace%2A>속성의 값입니다. |   | BaseColumnNamespace | 값은 <xref:System.Data.DataColumn>의 <xref:System.Data.DataColumn.Namespace%2A>속성입니다. |</xref:System.Data.DataColumn.Namespace%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable.Namespace%2A> </xref:System.Data.DataTable>"
  example:
  - "The following console application example retrieves schema information about the specified column. Pass the `DisplaySchemaTableInfo` procedure a <xref:System.Data.DataTableReader> and an integer representing the ordinal position of a column within the `DataTableReader`, and the procedure outputs schema information to the console window.  \n  \n [!code-cs[DataWorks DataTableReader.GetSchemaTable#1](~/add/codesnippet/csharp/m-system.data.datatabler_14_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetSchemaTable#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_14_1.vb)]"
  syntax:
    content: public override System.Data.DataTable GetSchemaTable ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 열 메타 데이터를 설명 하는 합니다."
  overload: System.Data.DataTableReader.GetSchemaTable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.DataTableReader&quot;> </xref> 닫혀 있습니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetString(System.Int32)
  id: GetString(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetString(Int32)
  nameWithType: DataTableReader.GetString(Int32)
  fullName: System.Data.DataTableReader.GetString(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 열의 값을 문자열로 가져옵니다."
  remarks: "호출 <xref:System.Data.DataTableReader.IsDBNull%2A>이 메서드를 호출 하기 전에 null 값이 있는 경우 볼 수 있습니다.</xref:System.Data.DataTableReader.IsDBNull%2A>"
  example:
  - "The following example displays the contents of the column numbered 2 within the passed-in <xref:System.Data.DataTableReader>. If the value the column within a particular row is null, the code displays the text \\<NULL>. If the data within the column of the correct type, the example displays an error message for each row.  \n  \n [!code-cs[DataWorks DataTableReader.GetString#1](~/add/codesnippet/csharp/m-system.data.datatabler_17_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetString#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_17_1.vb)]"
  syntax:
    content: public override string GetString (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "0부터 시작 하는 열 서 수"
    return:
      type: System.String
      description: "지정 된 열의 값입니다."
  overload: System.Data.DataTableReader.GetString*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정된 된 열에는 문자열이 없습니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetValue(Int32)
  nameWithType: DataTableReader.GetValue(Int32)
  fullName: System.Data.DataTableReader.GetValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "네이티브 형식으로 지정 된 열의 값을 가져옵니다."
  remarks: "호출할 수 있지만 <xref:System.Data.DataTableReader.IsDBNull%2A>를 보려면이 메서드를 호출 하기 전에 null 값이 없는 경우이 작업을 수행할 필요가 없습니다.</xref:System.Data.DataTableReader.IsDBNull%2A>"
  example:
  - "The following example iterates through all the columns within the current row in a <xref:System.Data.DataTableReader>, displaying the contents of each column and the column name. Generally, if your intent is to work with all the columns within a row retrieved by a <xref:System.Data.DataTableReader>, consider using the <xref:System.Data.DataTableReader.GetValues%2A> method instead, because it is more efficient.  \n  \n [!code-cs[DataWorks DataTableReader.GetValue#1](~/add/codesnippet/csharp/m-system.data.datatabler_22_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetValue#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_22_1.vb)]"
  syntax:
    content: public override object GetValue (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "0부터 시작 하는 열 서 수"
    return:
      type: System.Object
      description: "지정 된 열의 값입니다. 이 메서드가 반환 <xref uid=&quot;langword_csharp_DBNull&quot; name=&quot;DBNull&quot; href=&quot;&quot;> </xref> null 열에 대 한 합니다."
  overload: System.Data.DataTableReader.GetValue*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 열 닫힌에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: GetValues(Object[])
  nameWithType: DataTableReader.GetValues(Object[])
  fullName: System.Data.DataTableReader.GetValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "현재 행의 열 값이 있는 개체의 배열을 채웁니다."
  remarks: "이 메서드는 대부분의 응용 프로그램에 대 한 각 열을 개별적으로 검색 하는 대신 모든 열을 검색 하는 효율적인 방법을 제공 합니다. 원래의 도와 내에서 행에서 모든 열 값을 검색 하는 경우는 <xref:System.Data.DataTableReader>, `GetValues` 메서드는 가장 효율적인 솔루션을 제공 합니다.</xref:System.Data.DataTableReader>       전달할 수는 <xref:System.Object>보다 적은 수의 결과 행에 포함 된 열에 포함 된 배열입니다.</xref:System.Object> 데이터의 양만 `Object` 배열의 배열에 복사 보유할 수 있습니다. 전달할 수도 있습니다는 `Object` 추가 배열 요소 상태를 유지 하는 경우 메서드 호출에 의해 변경 않는 결과 행에 포함 된 열의 개수 이상의 길이가 배열입니다.       이 메서드는 배치 `DBNull` null 열에 대 한 출력 배열에 있습니다."
  example:
  - "The following example demonstrates using an array that is the correct size, to read all values from the current row in the supplied <xref:System.Data.DataTableReader>. In addition, the sample demonstrates using a fixed-sized array that could be either smaller or larger than the number of available columns.  \n  \n [!code-cs[DataWorks DataTableReader.GetValueObject#1](~/add/codesnippet/csharp/m-system.data.datatabler_21_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetValueObject#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_21_1.vb)]"
  syntax:
    content: public override int GetValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "배열을 <xref:System.Object>의 열 값을 복사할 대상는 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>.</xref:System.Object>"
    return:
      type: System.Int32
      description: "배열에 복사 하는 열 값의 수입니다."
  overload: System.Data.DataTableReader.GetValues*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.HasRows
  id: HasRows
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: HasRows
  nameWithType: DataTableReader.HasRows
  fullName: System.Data.DataTableReader.HasRows
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 하나 이상의 행을 포함 합니다."
  remarks: "`HasRows` 속성 현재 결과 집합에 대 한 정보를 반환 합니다. 경우는 <xref:System.Data.DataTableReader>여러 결과 포함 집합의 값을 검사할 수 있습니다는 `HasRows` 호출한 후에 즉시 속성은 <xref:System.Data.DataTableReader.NextResult%2A>새 결과 집합에 행이 포함 되어 있는지 확인 하기 위해 메서드.</xref:System.Data.DataTableReader.NextResult%2A> </xref:System.Data.DataTableReader>       사용 하 여는 `HasRows` 호출을 방지 하기 위해 속성은 <xref:System.Data.DataTableReader.Read%2A>의 메서드는 <xref:System.Data.DataTableReader>현재 결과 집합 내에서 행이 없는 경우.</xref:System.Data.DataTableReader> </xref:System.Data.DataTableReader.Read%2A>"
  example:
  - "The following example fills two <xref:System.Data.DataTable> instances with data. The first <xref:System.Data.DataTable> contains one row, and the second contains no rows. The example then creates a <xref:System.Data.DataTableReader> that contains both <xref:System.Data.DataTable> objects, and calls the PrintData method to display the contents of each, checking the value of the HasRows property of each before it makes the call to PrintData.  \n  \n [!code-cs[DataWorks DataTableReader.HasRows#1](~/add/codesnippet/csharp/p-system.data.datatabler_1_1.cs)]\n [!code-vb[DataWorks DataTableReader.HasRows#1](~/add/codesnippet/visualbasic/p-system.data.datatabler_1_1.vb)]"
  syntax:
    content: public override bool HasRows { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 하나 이상의 행을 포함 하지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.DataTableReader.HasRows*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "닫힌 작업에 대 한 정보를 검색 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.IsClosed
  id: IsClosed
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: IsClosed
  nameWithType: DataTableReader.IsClosed
  fullName: System.Data.DataTableReader.IsClosed
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 닫혀 있습니다."
  remarks: "<xref:System.Data.DataTableReader.Close%2A>유일한 방법은 및 `IsClosed` 및 <xref:System.Data.DataTableReader.RecordsAffected%2A>후 액세스할 수 있는 속성만 <xref:System.Data.DataTableReader>닫혔습니다.</xref:System.Data.DataTableReader> </xref:System.Data.DataTableReader.RecordsAffected%2A></xref:System.Data.DataTableReader.Close%2A>"
  syntax:
    content: public override bool IsClosed { get; }
    return:
      type: System.Boolean
      description: "반환 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 경우는 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 을 닫지 않습니다 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.DataTableReader.IsClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTableReader.IsDBNull(System.Int32)
  id: IsDBNull(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: IsDBNull(Int32)
  nameWithType: DataTableReader.IsDBNull(Int32)
  fullName: System.Data.DataTableReader.IsDBNull(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "열에 존재 하지 않거나 누락 된 값이 들어 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "형식화 된 get 메서드를 호출 하기 전에 null 열 값 있는지 확인 하려면이 메서드를 호출 (예를 들어 <xref:System.Data.DataTableReader.GetByte%2A>, <xref:System.Data.DataTableReader.GetChar%2A>등)에 오류가 발생 하지 않도록 합니다.</xref:System.Data.DataTableReader.GetChar%2A> </xref:System.Data.DataTableReader.GetByte%2A>"
  example:
  - "The following example displays the contents of the column numbered 2 within the passed-in <xref:System.Data.DataTableReader>. If the value the column within a particular row is null, the code displays the text \\<NULL>. If the data within the column of the correct type, the example displays an error message for each row.  \n  \n [!code-vb[DataWorks DataTableReader.IsDbNull#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_18_1.vb)]\n [!code-cs[DataWorks DataTableReader.IsDbNull#1](~/add/codesnippet/csharp/m-system.data.datatabler_18_1.cs)]"
  syntax:
    content: public override bool IsDBNull (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "0부터 시작 하는 열 서 수"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 열 값에 해당 하는 경우 <xref href=&quot;System.DBNull&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.DataTableReader.IsDBNull*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: DataTableReader.Item(Int32)
  fullName: System.Data.DataTableReader.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "열 서 수를 지정 된 네이티브 형식으로 지정 된 열의 값을 가져옵니다."
  remarks: "이 오버 로드에 대 한 <xref:System.Data.DataTableReader.Item%2A>동일 하 게 동작의 <xref:System.Data.DataTableReader.GetValue%2A>메서드.</xref:System.Data.DataTableReader.GetValue%2A> </xref:System.Data.DataTableReader.Item%2A>"
  example:
  - "The following example displays the contents of all the columns, in all the rows from the supplied <xref:System.Data.DataTableReader>. The code uses the <xref:System.Data.DataTableReader.Item%2A> method (the indexer, in Microsoft C#) to retrieve the value that is contained in each column.  \n  \n [!code-vb[DataWorks DataTableReader.Item#1](~/add/codesnippet/visualbasic/p-system.data.datatabler_0_1.vb)]\n [!code-cs[DataWorks DataTableReader.Item#1](~/add/codesnippet/csharp/p-system.data.datatabler_0_1.cs)]"
  syntax:
    content: public override object this[int ordinal] { get; }
    parameters:
    - id: ordinal
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Object
      description: "네이티브 형식으로 지정 된 열의 값입니다."
  overload: System.Data.DataTableReader.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "전달 된 0부터 범위 밖에 있는 <xref:System.Data.DataTableReader.FieldCount*>-1.</xref:System.Data.DataTableReader.FieldCount*>"
  platform:
  - net462
- uid: System.Data.DataTableReader.Item(System.String)
  id: Item(System.String)
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: Item(String)
  nameWithType: DataTableReader.Item(String)
  fullName: System.Data.DataTableReader.Item(String)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "열 이름이 지정 된 네이티브 형식으로 지정 된 열의 값을 가져옵니다."
  remarks: "대/소문자 구분 조회를 먼저 수행 됩니다. 실패 한 경우에 두 번째 대/소문자 구분 검색이 수행 됩니다.       이 메서드는 일본어가 나 너비 구분 하지 않습니다.       이 오버 로드 된 버전의 <xref:System.Data.DataTableReader.Item%2A>호출에 해당 하는 <xref:System.Data.DataTableReader.GetOrdinal%2A>메서드를 호출한 다음는 <xref:System.Data.DataTableReader.GetValue%2A>메서드.</xref:System.Data.DataTableReader.GetValue%2A> </xref:System.Data.DataTableReader.GetOrdinal%2A> </xref:System.Data.DataTableReader.Item%2A>"
  example:
  - "Given a <xref:System.Data.DataTableReader> and a column name, the GetValueByName procedure returns the value of the specified column. Before calling this procedure, you must create a new <xref:System.Data.DataTableReader> instance and call its Read method at least one time to position the row pointer on a row of data.  \n  \n [!code-vb[DataWorks DataTableReader.ItemName#1](~/add/codesnippet/visualbasic/p-system.data.datatabler_2_1.vb)]\n [!code-cs[DataWorks DataTableReader.ItemName#1](~/add/codesnippet/csharp/p-system.data.datatabler_2_1.cs)]"
  syntax:
    content: public override object this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: "열의 이름입니다."
    return:
      type: System.Object
      description: "네이티브 형식으로 지정 된 열의 값입니다."
  overload: System.Data.DataTableReader.Item*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "지정 된 이름이 올바른 열 이름이 아닙니다."
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "삭제 된 행에서 데이터를 검색 하려고 했습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.NextResult
  id: NextResult
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: NextResult()
  nameWithType: DataTableReader.NextResult()
  fullName: System.Data.DataTableReader.NextResult()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "이동 된 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 있는 경우 다음 결과 집합입니다."
  remarks: "만들어 생성 될 수 있는 여러 개의 결과 처리 하는 데는 <xref:System.Data.DataTableReader>위에 <xref:System.Data.DataSet>두 개 이상의 테이블 또는 두 개 이상이 포함 된 배열을 포함 하는 <xref:System.Data.DataTable>인스턴스.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTableReader>       새 <xref:System.Data.DataTableReader>첫 번째 결과에 배치 됩니다.</xref:System.Data.DataTableReader>"
  example:
  - "In the following example, the TestConstructor method creates two <xref:System.Data.DataTable>instances. In order to demonstrate this constructor for the <xref:System.Data.DataTableReader> class, the sample creates a new `DataTableReader` based on an array that contains the two `DataTables`, and performs a simple operation, printing the contents from the first few columns to the console window. In order to test this application, create a new Console application, and paste the sample code into the newly created file.  \n  \n [!code-vb[DataWorks DataTableReader.NextResult#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_9_1.vb)]\n [!code-cs[DataWorks DataTableReader.NextResult#1](~/add/codesnippet/csharp/m-system.data.datatabler_9_1.cs)]  \n  \n The Console window displays the following results:  \n  \n```  \n1 Mary  \n2 Andy  \n3 Peter  \n4 Russ  \n1 Wireless Network Card  \n2 Hard Drive  \n3 Monitor  \n4 CPU  \n```"
  syntax:
    content: public override bool NextResult ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>다른 결과 집합이; 발생 한 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.DataTableReader.NextResult*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "닫힌 내에서 탐색 하려고 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.Read
  id: Read
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: Read()
  nameWithType: DataTableReader.Read()
  fullName: System.Data.DataTableReader.Read()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "이동 된 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 를 다음 레코드로 합니다."
  remarks: "기본 위치는 <xref:System.Data.DataTableReader>첫 번째 레코드 앞입니다.</xref:System.Data.DataTableReader> 따라서 호출 해야 `Read` 데이터에 액세스를 시작 합니다."
  example:
  - "The PrintColumns procedure loops through all the rows in the <xref:System.Data.DataTableReader>, displaying the contents of each column in the Console window.  \n  \n [!code-cs[DataWorks DataTableReader.Read#1](~/add/codesnippet/csharp/m-system.data.datatabler_12_1.cs)]\n [!code-vb[DataWorks DataTableReader.Read#1](~/add/codesnippet/visualbasic/m-system.data.datatabler_12_1.vb)]"
  syntax:
    content: public override bool Read ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>다른 열을 읽기, 발생 한 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.DataTableReader.Read*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "읽거나 닫힌의 열에 액세스 하려고 했습니다 <xref href=&quot;System.Data.DataTableReader&quot;> </xref> 합니다."
  platform:
  - net462
- uid: System.Data.DataTableReader.RecordsAffected
  id: RecordsAffected
  parent: System.Data.DataTableReader
  langs:
  - csharp
  name: RecordsAffected
  nameWithType: DataTableReader.RecordsAffected
  fullName: System.Data.DataTableReader.RecordsAffected
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "삽입, 변경 또는 SQL 문 실행 하 여 삭제 된 행의 수를 가져옵니다."
  syntax:
    content: public override int RecordsAffected { get; }
    return:
      type: System.Int32
      description: "<xref href=&quot;System.Data.DataTableReader&quot;> </xref> 이 속성을 지원 하지 않으며 항상 0을 반환 합니다."
  overload: System.Data.DataTableReader.RecordsAffected*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbDataReader
  isExternal: false
  name: System.Data.Common.DbDataReader
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Data.DeletedRowInaccessibleException
  parent: System.Data
  isExternal: false
  name: DeletedRowInaccessibleException
  nameWithType: DeletedRowInaccessibleException
  fullName: System.Data.DeletedRowInaccessibleException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Data.DataTableReader.#ctor(System.Data.DataTable)
  parent: System.Data.DataTableReader
  isExternal: false
  name: DataTableReader(DataTable)
  nameWithType: DataTableReader.DataTableReader(DataTable)
  fullName: System.Data.DataTableReader.DataTableReader(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataTableReader.#ctor(System.Data.DataTable[])
  parent: System.Data.DataTableReader
  isExternal: false
  name: DataTableReader(DataTable[])
  nameWithType: DataTableReader.DataTableReader(DataTable[])
  fullName: System.Data.DataTableReader.DataTableReader(DataTable[])
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTableReader.Close
  parent: System.Data.DataTableReader
  isExternal: false
  name: Close()
  nameWithType: DataTableReader.Close()
  fullName: System.Data.DataTableReader.Close()
- uid: System.Data.DataTableReader.Depth
  parent: System.Data.DataTableReader
  isExternal: false
  name: Depth
  nameWithType: DataTableReader.Depth
  fullName: System.Data.DataTableReader.Depth
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataTableReader.FieldCount
  parent: System.Data.DataTableReader
  isExternal: false
  name: FieldCount
  nameWithType: DataTableReader.FieldCount
  fullName: System.Data.DataTableReader.FieldCount
- uid: System.Data.DataTableReader.GetBoolean(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetBoolean(Int32)
  nameWithType: DataTableReader.GetBoolean(Int32)
  fullName: System.Data.DataTableReader.GetBoolean(Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataTableReader.GetByte(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetByte(Int32)
  nameWithType: DataTableReader.GetByte(Int32)
  fullName: System.Data.DataTableReader.GetByte(Int32)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Data.DataTableReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: DataTableReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.DataTableReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTableReader.GetChar(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetChar(Int32)
  nameWithType: DataTableReader.GetChar(Int32)
  fullName: System.Data.DataTableReader.GetChar(Int32)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Data.DataTableReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: DataTableReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.DataTableReader.GetChars(Int32,Int64,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTableReader.GetDataTypeName(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetDataTypeName(Int32)
  nameWithType: DataTableReader.GetDataTypeName(Int32)
  fullName: System.Data.DataTableReader.GetDataTypeName(Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataTableReader.GetDateTime(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetDateTime(Int32)
  nameWithType: DataTableReader.GetDateTime(Int32)
  fullName: System.Data.DataTableReader.GetDateTime(Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Data.DataTableReader.GetDecimal(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetDecimal(Int32)
  nameWithType: DataTableReader.GetDecimal(Int32)
  fullName: System.Data.DataTableReader.GetDecimal(Int32)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Data.DataTableReader.GetDouble(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetDouble(Int32)
  nameWithType: DataTableReader.GetDouble(Int32)
  fullName: System.Data.DataTableReader.GetDouble(Int32)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Data.DataTableReader.GetEnumerator
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetEnumerator()
  nameWithType: DataTableReader.GetEnumerator()
  fullName: System.Data.DataTableReader.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.DataTableReader.GetFieldType(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetFieldType(Int32)
  nameWithType: DataTableReader.GetFieldType(Int32)
  fullName: System.Data.DataTableReader.GetFieldType(Int32)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.DataTableReader.GetFloat(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetFloat(Int32)
  nameWithType: DataTableReader.GetFloat(Int32)
  fullName: System.Data.DataTableReader.GetFloat(Int32)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Data.DataTableReader.GetGuid(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetGuid(Int32)
  nameWithType: DataTableReader.GetGuid(Int32)
  fullName: System.Data.DataTableReader.GetGuid(Int32)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.DataTableReader.GetInt16(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetInt16(Int32)
  nameWithType: DataTableReader.GetInt16(Int32)
  fullName: System.Data.DataTableReader.GetInt16(Int32)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Data.DataTableReader.GetInt32(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetInt32(Int32)
  nameWithType: DataTableReader.GetInt32(Int32)
  fullName: System.Data.DataTableReader.GetInt32(Int32)
- uid: System.Data.DataTableReader.GetInt64(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetInt64(Int32)
  nameWithType: DataTableReader.GetInt64(Int32)
  fullName: System.Data.DataTableReader.GetInt64(Int32)
- uid: System.Data.DataTableReader.GetName(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetName(Int32)
  nameWithType: DataTableReader.GetName(Int32)
  fullName: System.Data.DataTableReader.GetName(Int32)
- uid: System.Data.DataTableReader.GetOrdinal(System.String)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetOrdinal(String)
  nameWithType: DataTableReader.GetOrdinal(String)
  fullName: System.Data.DataTableReader.GetOrdinal(String)
- uid: System.Data.DataTableReader.GetProviderSpecificFieldType(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetProviderSpecificFieldType(Int32)
  nameWithType: DataTableReader.GetProviderSpecificFieldType(Int32)
  fullName: System.Data.DataTableReader.GetProviderSpecificFieldType(Int32)
- uid: System.Data.DataTableReader.GetProviderSpecificValue(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetProviderSpecificValue(Int32)
  nameWithType: DataTableReader.GetProviderSpecificValue(Int32)
  fullName: System.Data.DataTableReader.GetProviderSpecificValue(Int32)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataTableReader.GetProviderSpecificValues(System.Object[])
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetProviderSpecificValues(Object[])
  nameWithType: DataTableReader.GetProviderSpecificValues(Object[])
  fullName: System.Data.DataTableReader.GetProviderSpecificValues(Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTableReader.GetSchemaTable
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetSchemaTable()
  nameWithType: DataTableReader.GetSchemaTable()
  fullName: System.Data.DataTableReader.GetSchemaTable()
- uid: System.Data.DataTableReader.GetString(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetString(Int32)
  nameWithType: DataTableReader.GetString(Int32)
  fullName: System.Data.DataTableReader.GetString(Int32)
- uid: System.Data.DataTableReader.GetValue(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetValue(Int32)
  nameWithType: DataTableReader.GetValue(Int32)
  fullName: System.Data.DataTableReader.GetValue(Int32)
- uid: System.Data.DataTableReader.GetValues(System.Object[])
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetValues(Object[])
  nameWithType: DataTableReader.GetValues(Object[])
  fullName: System.Data.DataTableReader.GetValues(Object[])
- uid: System.Data.DataTableReader.HasRows
  parent: System.Data.DataTableReader
  isExternal: false
  name: HasRows
  nameWithType: DataTableReader.HasRows
  fullName: System.Data.DataTableReader.HasRows
- uid: System.Data.DataTableReader.IsClosed
  parent: System.Data.DataTableReader
  isExternal: false
  name: IsClosed
  nameWithType: DataTableReader.IsClosed
  fullName: System.Data.DataTableReader.IsClosed
- uid: System.Data.DataTableReader.IsDBNull(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: IsDBNull(Int32)
  nameWithType: DataTableReader.IsDBNull(Int32)
  fullName: System.Data.DataTableReader.IsDBNull(Int32)
- uid: System.Data.DataTableReader.Item(System.Int32)
  parent: System.Data.DataTableReader
  isExternal: false
  name: Item(Int32)
  nameWithType: DataTableReader.Item(Int32)
  fullName: System.Data.DataTableReader.Item(Int32)
- uid: System.Data.DataTableReader.Item(System.String)
  parent: System.Data.DataTableReader
  isExternal: false
  name: Item(String)
  nameWithType: DataTableReader.Item(String)
  fullName: System.Data.DataTableReader.Item(String)
- uid: System.Data.DataTableReader.NextResult
  parent: System.Data.DataTableReader
  isExternal: false
  name: NextResult()
  nameWithType: DataTableReader.NextResult()
  fullName: System.Data.DataTableReader.NextResult()
- uid: System.Data.DataTableReader.Read
  parent: System.Data.DataTableReader
  isExternal: false
  name: Read()
  nameWithType: DataTableReader.Read()
  fullName: System.Data.DataTableReader.Read()
- uid: System.Data.DataTableReader.RecordsAffected
  parent: System.Data.DataTableReader
  isExternal: false
  name: RecordsAffected
  nameWithType: DataTableReader.RecordsAffected
  fullName: System.Data.DataTableReader.RecordsAffected
- uid: System.Data.DataTableReader.#ctor*
  parent: System.Data.DataTableReader
  isExternal: false
  name: DataTableReader
  nameWithType: DataTableReader.DataTableReader
- uid: System.Data.DataTableReader.Close*
  parent: System.Data.DataTableReader
  isExternal: false
  name: Close
  nameWithType: DataTableReader.Close
- uid: System.Data.DataTableReader.Depth*
  parent: System.Data.DataTableReader
  isExternal: false
  name: Depth
  nameWithType: DataTableReader.Depth
- uid: System.Data.DataTableReader.FieldCount*
  parent: System.Data.DataTableReader
  isExternal: false
  name: FieldCount
  nameWithType: DataTableReader.FieldCount
- uid: System.Data.DataTableReader.GetBoolean*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetBoolean
  nameWithType: DataTableReader.GetBoolean
- uid: System.Data.DataTableReader.GetByte*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetByte
  nameWithType: DataTableReader.GetByte
- uid: System.Data.DataTableReader.GetBytes*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetBytes
  nameWithType: DataTableReader.GetBytes
- uid: System.Data.DataTableReader.GetChar*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetChar
  nameWithType: DataTableReader.GetChar
- uid: System.Data.DataTableReader.GetChars*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetChars
  nameWithType: DataTableReader.GetChars
- uid: System.Data.DataTableReader.GetDataTypeName*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetDataTypeName
  nameWithType: DataTableReader.GetDataTypeName
- uid: System.Data.DataTableReader.GetDateTime*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetDateTime
  nameWithType: DataTableReader.GetDateTime
- uid: System.Data.DataTableReader.GetDecimal*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetDecimal
  nameWithType: DataTableReader.GetDecimal
- uid: System.Data.DataTableReader.GetDouble*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetDouble
  nameWithType: DataTableReader.GetDouble
- uid: System.Data.DataTableReader.GetEnumerator*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetEnumerator
  nameWithType: DataTableReader.GetEnumerator
- uid: System.Data.DataTableReader.GetFieldType*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetFieldType
  nameWithType: DataTableReader.GetFieldType
- uid: System.Data.DataTableReader.GetFloat*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetFloat
  nameWithType: DataTableReader.GetFloat
- uid: System.Data.DataTableReader.GetGuid*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetGuid
  nameWithType: DataTableReader.GetGuid
- uid: System.Data.DataTableReader.GetInt16*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetInt16
  nameWithType: DataTableReader.GetInt16
- uid: System.Data.DataTableReader.GetInt32*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetInt32
  nameWithType: DataTableReader.GetInt32
- uid: System.Data.DataTableReader.GetInt64*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetInt64
  nameWithType: DataTableReader.GetInt64
- uid: System.Data.DataTableReader.GetName*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetName
  nameWithType: DataTableReader.GetName
- uid: System.Data.DataTableReader.GetOrdinal*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetOrdinal
  nameWithType: DataTableReader.GetOrdinal
- uid: System.Data.DataTableReader.GetProviderSpecificFieldType*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetProviderSpecificFieldType
  nameWithType: DataTableReader.GetProviderSpecificFieldType
- uid: System.Data.DataTableReader.GetProviderSpecificValue*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetProviderSpecificValue
  nameWithType: DataTableReader.GetProviderSpecificValue
- uid: System.Data.DataTableReader.GetProviderSpecificValues*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetProviderSpecificValues
  nameWithType: DataTableReader.GetProviderSpecificValues
- uid: System.Data.DataTableReader.GetSchemaTable*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetSchemaTable
  nameWithType: DataTableReader.GetSchemaTable
- uid: System.Data.DataTableReader.GetString*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetString
  nameWithType: DataTableReader.GetString
- uid: System.Data.DataTableReader.GetValue*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetValue
  nameWithType: DataTableReader.GetValue
- uid: System.Data.DataTableReader.GetValues*
  parent: System.Data.DataTableReader
  isExternal: false
  name: GetValues
  nameWithType: DataTableReader.GetValues
- uid: System.Data.DataTableReader.HasRows*
  parent: System.Data.DataTableReader
  isExternal: false
  name: HasRows
  nameWithType: DataTableReader.HasRows
- uid: System.Data.DataTableReader.IsClosed*
  parent: System.Data.DataTableReader
  isExternal: false
  name: IsClosed
  nameWithType: DataTableReader.IsClosed
- uid: System.Data.DataTableReader.IsDBNull*
  parent: System.Data.DataTableReader
  isExternal: false
  name: IsDBNull
  nameWithType: DataTableReader.IsDBNull
- uid: System.Data.DataTableReader.Item*
  parent: System.Data.DataTableReader
  isExternal: false
  name: Item
  nameWithType: DataTableReader.Item
- uid: System.Data.DataTableReader.NextResult*
  parent: System.Data.DataTableReader
  isExternal: false
  name: NextResult
  nameWithType: DataTableReader.NextResult
- uid: System.Data.DataTableReader.Read*
  parent: System.Data.DataTableReader
  isExternal: false
  name: Read
  nameWithType: DataTableReader.Read
- uid: System.Data.DataTableReader.RecordsAffected*
  parent: System.Data.DataTableReader
  isExternal: false
  name: RecordsAffected
  nameWithType: DataTableReader.RecordsAffected
