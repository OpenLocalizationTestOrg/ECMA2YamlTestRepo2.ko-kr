### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.TripleDES
  id: TripleDES
  children:
  - System.Security.Cryptography.TripleDES.#ctor
  - System.Security.Cryptography.TripleDES.Create
  - System.Security.Cryptography.TripleDES.Create(System.String)
  - System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])
  - System.Security.Cryptography.TripleDES.Key
  langs:
  - csharp
  name: TripleDES
  nameWithType: TripleDES
  fullName: System.Security.Cryptography.TripleDES
  type: Class
  summary: "모든 TripleDES 구현이 파생 되어야 하는 Triple Data Encryption Standard 알고리즘에 대 한 기본 클래스를 나타냅니다."
  remarks: "TripleDES 사용의 세 가지 연속 반복은 <xref:System.Security.Cryptography.DES>알고리즘.</xref:System.Security.Cryptography.DES> 두 개 또는 세 개의 56 비트 키를 사용할 수 있습니다.      > [!NOTE] > 표준 AES (고급 암호화), 최신 대칭 암호화 알고리즘은 사용할 수 있습니다. <xref:System.Security.Cryptography.Aes>클래스 및 TripleDES 클래스 대신 파생된 클래스를</xref:System.Security.Cryptography.Aes> 사용 하는 것이 좋습니다. TripleDES 레거시 응용 프로그램 및 데이터와 호환성을 위해서만 사용 합니다.       이 알고리즘은 64 비트 단위로 증가 192 128 비트에서 키 길이 지원 합니다."
  example:
  - "The following code example method uses <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider> with the specified key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to encrypt a file specified by `inName`. It then outputs the encrypted result to the file specified by `outName`.  \n  \n [!code-cpp[Classic TripleDESCryptoServiceProvider Example#1](~/add/codesnippet/cpp/t-system.security.crypto_61_1.cpp)]\n [!code-cs[Classic TripleDESCryptoServiceProvider Example#1](~/add/codesnippet/csharp/t-system.security.crypto_61_1.cs)]\n [!code-vb[Classic TripleDESCryptoServiceProvider Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_61_1.vb)]  \n  \n Decryption can be handled in the same way; use <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateDecryptor%2A> instead of <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor%2A>. The same key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) used to encrypt the file must be used to decrypt it."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class TripleDES : System.Security.Cryptography.SymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.SymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Clear
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  platform:
  - net462
- uid: System.Security.Cryptography.TripleDES.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  name: TripleDES()
  nameWithType: TripleDES.TripleDES()
  fullName: System.Security.Cryptography.TripleDES.TripleDES()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.TripleDES&quot;> </xref> 클래스입니다."
  remarks: "추상 클래스의 인스턴스를 만들 수 없습니다. 응용 프로그램 코드에서는 파생된 클래스의 새 인스턴스를 만듭니다.       이 메서드는 보호 되는 필드의 초기화는 <xref:System.Security.Cryptography.SymmetricAlgorithm>다음 표에 나열 된 기본 값에는 클래스입니다.</xref:System.Security.Cryptography.SymmetricAlgorithm>      | 필드 | 기본 값 |   |-----------|-------------------|   | <xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|&192; |   | <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|&64; |   | <xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|64|</xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue></xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue></xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>"
  syntax:
    content: protected TripleDES ();
    parameters: []
  overload: System.Security.Cryptography.TripleDES.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.TripleDES.Create
  id: Create
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  name: Create()
  nameWithType: TripleDES.Create()
  fullName: System.Security.Cryptography.TripleDES.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "수행할 암호화 개체의 인스턴스를 만듭니다는 <xref href=&quot;System.Security.Cryptography.TripleDES&quot;> </xref> 알고리즘입니다."
  remarks: "<xref:System.Security.Cryptography.TripleDES>클래스</xref:System.Security.Cryptography.TripleDES> 의 새 인스턴스를 만듭니다."
  example:
  - "The following code example shows how to create and use a <xref:System.Security.Cryptography.TripleDES> object to encrypt and decrypt data in a file.  \n  \n [!code-cs[Cryptography.3DES.Create.File#1](~/add/codesnippet/csharp/m-system.security.crypto_61_1.cs)]\n [!code-cpp[Cryptography.3DES.Create.File#1](~/add/codesnippet/cpp/m-system.security.crypto_61_1.cpp)]\n [!code-vb[Cryptography.3DES.Create.File#1](~/add/codesnippet/visualbasic/m-system.security.crypto_61_1.vb)]  \n  \n The following code example shows how to create and use a <xref:System.Security.Cryptography.TripleDES> object to encrypt and decrypt data in memory.  \n  \n [!code-cpp[Cryptography.3DES.Create.Memory#1](~/add/codesnippet/cpp/m-system.security.crypto_61_2.cpp)]\n [!code-vb[Cryptography.3DES.Create.Memory#1](~/add/codesnippet/visualbasic/m-system.security.crypto_61_2.vb)]"
  syntax:
    content: public static System.Security.Cryptography.TripleDES Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.TripleDES
      description: "암호화 개체의 인스턴스입니다."
  overload: System.Security.Cryptography.TripleDES.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.TripleDES.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  name: Create(String)
  nameWithType: TripleDES.Create(String)
  fullName: System.Security.Cryptography.TripleDES.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정 된 구현의 수행 하는 암호화 개체의 인스턴스를 만듭니다는 <xref href=&quot;System.Security.Cryptography.TripleDES&quot;> </xref> 알고리즘입니다."
  remarks: ''
  example:
  - "The following code example shows how to create and use a <xref:System.Security.Cryptography.TripleDES> object to encrypt and decrypt data in a file.  \n  \n [!code-cpp[Cryptography.3DES.Createstring.File#1](~/add/codesnippet/cpp/m-system.security.crypto_55_1.cpp)]\n [!code-cs[Cryptography.3DES.Createstring.File#1](~/add/codesnippet/csharp/m-system.security.crypto_55_1.cs)]\n [!code-vb[Cryptography.3DES.Createstring.File#1](~/add/codesnippet/visualbasic/m-system.security.crypto_55_1.vb)]  \n  \n The following code example shows how to create and use a <xref:System.Security.Cryptography.TripleDES> object to encrypt and decrypt data in memory.  \n  \n [!code-cs[Cryptography.3DES.Createstring.Memory#1](~/add/codesnippet/csharp/m-system.security.crypto_55_2.cs)]\n [!code-vb[Cryptography.3DES.Createstring.Memory#1](~/add/codesnippet/visualbasic/m-system.security.crypto_55_2.vb)]\n [!code-cpp[Cryptography.3DES.Createstring.Memory#1](~/add/codesnippet/cpp/m-system.security.crypto_55_2.cpp)]"
  syntax:
    content: public static System.Security.Cryptography.TripleDES Create (string str);
    parameters:
    - id: str
      type: System.String
      description: "특정 구현 이름 <xref href=&quot;System.Security.Cryptography.TripleDES&quot;> </xref> 사용 하도록 합니다."
    return:
      type: System.Security.Cryptography.TripleDES
      description: "암호화 개체의 인스턴스입니다."
  overload: System.Security.Cryptography.TripleDES.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])
  id: IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  name: IsWeakKey(Byte[])
  nameWithType: TripleDES.IsWeakKey(Byte[])
  fullName: System.Security.Cryptography.TripleDES.IsWeakKey(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정된 된 키가 약한 지 여부를 결정 합니다."
  remarks: "약한 키는 암호를 해독 하기 쉬운는 만드는 키입니다. 텍스트 weak 키로 암호화 된 암호를 만들면 동일한 weak 키 다시 암호화 원본 텍스트를 반환 합니다. 128 비트 모드에서에서 첫 번째 64 비트 마지막 64 비트와 동일 하는 경우의 weak 키가입니다. 192 비트 모드에서에서 첫 번째 64 비트에서 두 번째 64 비트와 동일 하거나에서 두 번째 64 비트 마지막 64 비트와 동일 하는 경우의 weak 키가입니다.       <xref:System.Security.Cryptography.CryptographicException>.</xref:System.Security.Cryptography.CryptographicException> 약한 키 결과 설정 하려고 합니다. 때 <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey%2A>호출 되는 임의 키를 만들려면 weak 키 반환 되지 것입니다.</xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey%2A>"
  syntax:
    content: public static bool IsWeakKey (byte[] rgbKey);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "약한 지 테스트할 비밀 키입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>키가 약 합니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Cryptography.TripleDES.IsWeakKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "크기는 <code> rgbKey </code> 매개 변수가 올바르지 않습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.TripleDES.Key
  id: Key
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  name: Key
  nameWithType: TripleDES.Key
  fullName: System.Security.Cryptography.TripleDES.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "에 대 한 비밀 키를 가져오거나 설정 합니다.는 <xref href=&quot;System.Security.Cryptography.TripleDES&quot;> </xref> 알고리즘입니다."
  remarks: "이 알고리즘은 64 비트 단위로 증가 192 128 비트에서 키 길이 지원 합니다."
  syntax:
    content: public override byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "에 대 한 비밀 키의 <xref href=&quot;System.Security.Cryptography.TripleDES&quot;> </xref> 알고리즘입니다."
  overload: System.Security.Cryptography.TripleDES.Key*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "키를 설정 하려고 했습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "길이가 잘못 되었습니다. 키를 설정 하려고 했습니다.       -또는-weak 키를 설정 하려고 했습니다 (참조 <xref:System.Security.Cryptography.TripleDES.IsWeakKey*>).</xref:System.Security.Cryptography.TripleDES.IsWeakKey*>"
  platform:
  - net462
references:
- uid: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.TripleDES.#ctor
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: TripleDES()
  nameWithType: TripleDES.TripleDES()
  fullName: System.Security.Cryptography.TripleDES.TripleDES()
- uid: System.Security.Cryptography.TripleDES.Create
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: Create()
  nameWithType: TripleDES.Create()
  fullName: System.Security.Cryptography.TripleDES.Create()
- uid: System.Security.Cryptography.TripleDES
  parent: System.Security.Cryptography
  isExternal: false
  name: TripleDES
  nameWithType: TripleDES
  fullName: System.Security.Cryptography.TripleDES
- uid: System.Security.Cryptography.TripleDES.Create(System.String)
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: Create(String)
  nameWithType: TripleDES.Create(String)
  fullName: System.Security.Cryptography.TripleDES.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: IsWeakKey(Byte[])
  nameWithType: TripleDES.IsWeakKey(Byte[])
  fullName: System.Security.Cryptography.TripleDES.IsWeakKey(Byte[])
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.TripleDES.Key
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: Key
  nameWithType: TripleDES.Key
  fullName: System.Security.Cryptography.TripleDES.Key
- uid: System.Security.Cryptography.TripleDES.#ctor*
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: TripleDES
  nameWithType: TripleDES.TripleDES
- uid: System.Security.Cryptography.TripleDES.Create*
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: Create
  nameWithType: TripleDES.Create
- uid: System.Security.Cryptography.TripleDES.IsWeakKey*
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: IsWeakKey
  nameWithType: TripleDES.IsWeakKey
- uid: System.Security.Cryptography.TripleDES.Key*
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: Key
  nameWithType: TripleDES.Key
