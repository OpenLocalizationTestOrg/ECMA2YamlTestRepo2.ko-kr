### YamlMime:ManagedReference
items:
- uid: System.Web.Services.WebService
  id: WebService
  children:
  - System.Web.Services.WebService.#ctor
  - System.Web.Services.WebService.Application
  - System.Web.Services.WebService.Context
  - System.Web.Services.WebService.Server
  - System.Web.Services.WebService.Session
  - System.Web.Services.WebService.SoapVersion
  - System.Web.Services.WebService.User
  langs:
  - csharp
  name: WebService
  nameWithType: WebService
  fullName: System.Web.Services.WebService
  type: Class
  summary: "응용 프로그램 및 세션 상태 등의 일반 ASP.NET 개체에 대 한 직접 액세스를 제공 하는 XML 웹 서비스에 대 한 선택적 기본 클래스를 정의 합니다."
  remarks: "일반적인 ASP.NET 개체에 액세스할 필요가 없는 경우 웹 서비스에서 파생 없이 XML 웹 서비스를 만들 수 있습니다. 추가 ASP.NET 개체 <xref:System.Web.Services.WebService.Context%2A>.</xref:System.Web.Services.WebService.Context%2A> 통해 액세스할 수 있습니다.       권한이 있는 XML 웹 서비스 메서드는 <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute.OneWay%2A>속성에 대 <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>또는 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>로 설정 `true`, 해당 <xref:System.Web.HttpContext>.</xref:System.Web.HttpContext> 에 액세스할 수 없는</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> </xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> </xref:System.Web.Services.Protocols.SoapRpcMethodAttribute.OneWay%2A> 따라서 웹 서비스 클래스의 속성 중 하나에 액세스 하에서 해당 XML 웹 서비스 메서드 내의 반환 `null`합니다.       포함 하는.NET Framework 버전 1.0 XML 웹 서비스 메서드를 사용 하는 경우는 <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>또는 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>를 사용 하 여에 적용 된 특성의 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A>집합 속성을 `true`에 액세스할 수 없는 자신의 <xref:System.Web.HttpContext>정적을 사용 하 여 <xref:System.Web.HttpContext.Current%2A>속성.</xref:System.Web.HttpContext.Current%2A> </xref:System.Web.HttpContext> </xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A> </xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> </xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> 에 액세스 하려면는 <xref:System.Web.HttpContext>, 액세스 및 웹 서비스에서 XML 웹 서비스 메서드를 구현 하는 클래스를 파생 되는 <xref:System.Web.Services.WebService.Context%2A>속성.</xref:System.Web.Services.WebService.Context%2A> </xref:System.Web.HttpContext>"
  example:
  - "The example below creates an XML Web service, deriving from WebService, in order to use the <xref:System.Web.Services.WebService.Context%2A> property to obtain the time of the request on the server.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: 'public class WebService : System.ComponentModel.MarshalByValueComponent'
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements: []
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  - System.ComponentModel.MarshalByValueComponent.Site
  - System.ComponentModel.MarshalByValueComponent.ToString
  platform:
  - net462
- uid: System.Web.Services.WebService.#ctor
  id: '#ctor'
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: WebService()
  nameWithType: WebService.WebService()
  fullName: System.Web.Services.WebService.WebService()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Services.WebService&quot;> </xref> 클래스입니다."
  remarks: ''
  example:
  - '[!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]'
  syntax:
    content: public WebService ();
    parameters: []
  overload: System.Web.Services.WebService.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.Application
  id: Application
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: Application
  nameWithType: WebService.Application
  fullName: System.Web.Services.WebService.Application
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "현재 HTTP 요청에 대 한 응용 프로그램 개체를 가져옵니다."
  remarks: "XML 웹 서비스는 응용 프로그램 상태와 세션 상태를 모두 사용할 수 있습니다. 메서드에 대 한 세션 상태가 해제 되어 있는지 여부에 관계 없이 XML 웹 서비스에 액세스 하는 모든 세션에서 응용 프로그램 상태가 유지 됩니다 (사용 하 여는 <xref:System.Web.Services.WebMethodAttribute.EnableSession%2A>의 속성은 <xref:System.Web.Services.WebMethodAttribute>).</xref:System.Web.Services.WebMethodAttribute> </xref:System.Web.Services.WebMethodAttribute.EnableSession%2A>"
  example:
  - "The example below demonstrates a hit counter, incrementing the count every time a browser calls the XML Web service method.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Web.HttpApplicationState Application { get; }
    return:
      type: System.Web.HttpApplicationState
      description: "<xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> 개체입니다."
  overload: System.Web.Services.WebService.Application*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.Context
  id: Context
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: Context
  nameWithType: WebService.Context
  fullName: System.Web.Services.WebService.Context
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "ASP.NET 가져옵니다 <xref href=&quot;System.Web.HttpContext&quot;> </xref> 웹 요청을 처리 하도록 HTTP 서버에서 사용 하는 모든 HTTP 관련 컨텍스트를 캡슐화 하는 현재 요청에 대 한 합니다."
  remarks: "XML 웹 서비스 메서드 중 하나를 사용할 수 있는 <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>또는 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>를 사용 하 여에 적용 된 특성의 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A>집합 속성을 `true`에 액세스할 수 없는 자신의 <xref:System.Web.HttpContext>정적을 사용 하 여 <xref:System.Web.HttpContext.Current%2A>속성.</xref:System.Web.HttpContext.Current%2A> </xref:System.Web.HttpContext> </xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A> </xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> </xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> 액세스는 <xref:System.Web.HttpContext>에서 XML 웹 서비스 메서드를 구현 하는 클래스를 파생 <xref:System.Web.Services.WebService>컨텍스트 속성에 액세스 하 고.</xref:System.Web.Services.WebService> </xref:System.Web.HttpContext>"
  example:
  - "The Example below uses the Context property to obtain the time of the request on the server.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Web.HttpContext Context { get; }
    return:
      type: System.Web.HttpContext
      description: "ASP.NET <xref href=&quot;System.Web.HttpContext&quot;> </xref> 현재 요청에 대 한 합니다."
  overload: System.Web.Services.WebService.Context*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "<code>Context</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Services.WebService.Server
  id: Server
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: Server
  nameWithType: WebService.Server
  fullName: System.Web.Services.WebService.Server
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "가져옵니다는 <xref href=&quot;System.Web.HttpServerUtility&quot;> </xref> 현재 요청에 대 한 합니다."
  remarks: "<xref:System.Web.HttpServerUtility>클래스를 포함 하 여 웹 요청 처리에 사용할 수 있는 여러 가지 방법을 제공 <xref:System.Web.HttpServerUtility.CreateObject%2A>(에 대 한 COM 개체를 인스턴스화).</xref:System.Web.HttpServerUtility.CreateObject%2A> </xref:System.Web.HttpServerUtility>"
  example:
  - "The example below returns the computer name of the Web server using the Server property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Web.HttpServerUtility Server { get; }
    return:
      type: System.Web.HttpServerUtility
      description: "<xref href=&quot;System.Web.HttpServerUtility&quot;> </xref> 개체입니다."
  overload: System.Web.Services.WebService.Server*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.Session
  id: Session
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: Session
  nameWithType: WebService.Session
  fullName: System.Web.Services.WebService.Session
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "가져옵니다는 <xref href=&quot;System.Web.SessionState.HttpSessionState&quot;> </xref> 현재 요청에 대 한 인스턴스."
  remarks: ''
  example:
  - "The example below uses session state to determine how many times a particular session accesses the XML Web service method `SessionHitCounter`. In this example, the <xref:System.Web.Services.WebMethodAttribute.EnableSession%2A> property of the <xref:System.Web.Services.WebMethodAttribute> is set to `true` in order to gain access to session state.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Web.SessionState.HttpSessionState Session { get; }
    return:
      type: System.Web.SessionState.HttpSessionState
      description: "<xref href=&quot;System.Web.SessionState.HttpSessionState&quot;> </xref> 현재 세션에 대 한 ASP.NET 세션 상태 개체를 나타내는입니다."
  overload: System.Web.Services.WebService.Session*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.SoapVersion
  id: SoapVersion
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: SoapVersion
  nameWithType: WebService.SoapVersion
  fullName: System.Web.Services.WebService.SoapVersion
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "XML 웹 서비스 SOAP 요청을 수행 하는 데 사용 된 SOAP 프로토콜의 버전을 가져옵니다."
  remarks: "SoapVersion 속성의 값은 <xref:System.Web.Services.Protocols.SoapProtocolVersion>.</xref:System.Web.Services.Protocols.SoapProtocolVersion> HTTP GET 또는 HTTP POST 등의 XML 웹 서비스와 통신 하는 SOAP 프로토콜을 사용 되지 않은 경우       파생 되지 않은 XML 웹 서비스에 대 한는 <xref:System.Web.Services.WebService>클래스, XML 웹 서비스 수도 액세스할 수 있습니다 &quot;WebServiceSoapVersion&quot; 항목을 사용 하 여 SOAP 요청에 사용 되는 SOAP 프로토콜의 버전은 <xref:System.Web.HttpContext.Items%2A?displayProperty=fullName>속성.</xref:System.Web.HttpContext.Items%2A?displayProperty=fullName> </xref:System.Web.Services.WebService> 이름 필드에 <xref:System.Web.Services.Protocols.SoapProtocolVersion>.</xref:System.Web.Services.Protocols.SoapProtocolVersion> 의 해당 항목은"
  syntax:
    content: public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; }
    return:
      type: System.Web.Services.Protocols.SoapProtocolVersion
      description: "중 하나는 <xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;> </xref> 값입니다. 기본값은 <xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;> </xref>합니다."
  overload: System.Web.Services.WebService.SoapVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.User
  id: User
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: User
  nameWithType: WebService.User
  fullName: System.Web.Services.WebService.User
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "ASP.NET 서버 가져옵니다 <xref:System.Web.HttpContext.User*>개체입니다.</xref:System.Web.HttpContext.User*> 요청을 실행 하는 사용자가 권한이 있는지 여부를 인증 하 사용할 수 있습니다."
  remarks: "Both Internet Information Services (IIS) and the .NET Framework need to be configured for authentication in order for the User property to be meaningful. Authentication is the process of accepting credentials from a user and validating those credentials against some authority. If the credentials are valid, you have an authenticated identity. Authentication in the .NET Framework is configured by placing entries in the web.config file.  \n  \n The following example demonstrates the entries you place in the web.config file to enable Windows authentication.  \n  \n```  \n<security>  \n <authentication mode=\"Windows\"> <!-- Mode Options are Windows, Cookie, Passport and None or Empty String -->  \n </authentication>  \n </security>  \n```  \n  \n For more information on setting up security for an XML Web service see [&#91;\\<topic://cpconSecuringASPNETWebServices>&#93;](http://msdn.microsoft.com/en-us/354b2ab1-2782-4542-b32a-dc560178b90c)."
  example:
  - "The example below looks up the authenticated user name and returns that name.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "A <xref:System.Security.Principal.IPrincipal>ASP.NET 서버를 나타내는 <xref:System.Web.HttpContext.User*>개체입니다.</xref:System.Web.HttpContext.User*> </xref:System.Security.Principal.IPrincipal>"
  overload: System.Web.Services.WebService.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Web.Services.WebService.#ctor
  parent: System.Web.Services.WebService
  isExternal: false
  name: WebService()
  nameWithType: WebService.WebService()
  fullName: System.Web.Services.WebService.WebService()
- uid: System.Web.Services.WebService.Application
  parent: System.Web.Services.WebService
  isExternal: false
  name: Application
  nameWithType: WebService.Application
  fullName: System.Web.Services.WebService.Application
- uid: System.Web.HttpApplicationState
  parent: System.Web
  isExternal: false
  name: HttpApplicationState
  nameWithType: HttpApplicationState
  fullName: System.Web.HttpApplicationState
- uid: System.Web.Services.WebService.Context
  parent: System.Web.Services.WebService
  isExternal: false
  name: Context
  nameWithType: WebService.Context
  fullName: System.Web.Services.WebService.Context
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.Services.WebService.Server
  parent: System.Web.Services.WebService
  isExternal: false
  name: Server
  nameWithType: WebService.Server
  fullName: System.Web.Services.WebService.Server
- uid: System.Web.HttpServerUtility
  parent: System.Web
  isExternal: false
  name: HttpServerUtility
  nameWithType: HttpServerUtility
  fullName: System.Web.HttpServerUtility
- uid: System.Web.Services.WebService.Session
  parent: System.Web.Services.WebService
  isExternal: false
  name: Session
  nameWithType: WebService.Session
  fullName: System.Web.Services.WebService.Session
- uid: System.Web.SessionState.HttpSessionState
  parent: System.Web.SessionState
  isExternal: false
  name: HttpSessionState
  nameWithType: HttpSessionState
  fullName: System.Web.SessionState.HttpSessionState
- uid: System.Web.Services.WebService.SoapVersion
  parent: System.Web.Services.WebService
  isExternal: false
  name: SoapVersion
  nameWithType: WebService.SoapVersion
  fullName: System.Web.Services.WebService.SoapVersion
- uid: System.Web.Services.Protocols.SoapProtocolVersion
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapProtocolVersion
  nameWithType: SoapProtocolVersion
  fullName: System.Web.Services.Protocols.SoapProtocolVersion
- uid: System.Web.Services.WebService.User
  parent: System.Web.Services.WebService
  isExternal: false
  name: User
  nameWithType: WebService.User
  fullName: System.Web.Services.WebService.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Web.Services.WebService.#ctor*
  parent: System.Web.Services.WebService
  isExternal: false
  name: WebService
  nameWithType: WebService.WebService
- uid: System.Web.Services.WebService.Application*
  parent: System.Web.Services.WebService
  isExternal: false
  name: Application
  nameWithType: WebService.Application
- uid: System.Web.Services.WebService.Context*
  parent: System.Web.Services.WebService
  isExternal: false
  name: Context
  nameWithType: WebService.Context
- uid: System.Web.Services.WebService.Server*
  parent: System.Web.Services.WebService
  isExternal: false
  name: Server
  nameWithType: WebService.Server
- uid: System.Web.Services.WebService.Session*
  parent: System.Web.Services.WebService
  isExternal: false
  name: Session
  nameWithType: WebService.Session
- uid: System.Web.Services.WebService.SoapVersion*
  parent: System.Web.Services.WebService
  isExternal: false
  name: SoapVersion
  nameWithType: WebService.SoapVersion
- uid: System.Web.Services.WebService.User*
  parent: System.Web.Services.WebService
  isExternal: false
  name: User
  nameWithType: WebService.User
