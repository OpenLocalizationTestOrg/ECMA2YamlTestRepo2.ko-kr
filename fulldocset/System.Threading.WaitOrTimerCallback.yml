### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitOrTimerCallback
  id: WaitOrTimerCallback
  langs:
  - csharp
  name: WaitOrTimerCallback
  nameWithType: WaitOrTimerCallback
  fullName: System.Threading.WaitOrTimerCallback
  type: Delegate
  summary: "때 호출 될 메서드를 나타냅니다는 <xref:System.Threading.WaitHandle>신호를 받거나 시간 초과.</xref:System.Threading.WaitHandle>"
  remarks: "WaitOrTimerCallback 등록된 된 대기 핸들이 신호를 받는 하거나 시간이 초과 될 때 실행 하려는 하는 콜백 메서드를 나타냅니다. 콜백 메서드에서 WaitOrTimerCallback 생성자에 전달 하 여 대리자를 만듭니다. 메서드에 다음과 같은 서명이 있어야 합니다.       WaitOrTimerCallback 대리자와 <xref:System.Threading.WaitHandle> <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName>.</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName> 를</xref:System.Threading.WaitHandle> 전달 하 여 등록된 된 대기 핸들을 만듭니다 콜백 메서드가 실행 될 때마다는 <xref:System.Threading.WaitHandle>제한 시간이 초과 되거나 신호.</xref:System.Threading.WaitHandle>       [Visual Basic] > [!NOTE] > Visual Basic 사용자 WaitOrTimerCallback 생성자를 생략할 수 있습니다 및을 사용 하 여는 `AddressOf` <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 콜백 메서드를 전달 하는 경우 연산자 Visual Basic에서 올바른 대리 생성자를 자동으로 호출합니다.       콜백 메서드에 정보를 전달 하려는 경우 필요한 정보를 포함 하는 개체를 만들고 전달 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>등록된 된 대기 핸들을 만들 때.</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 콜백 메서드가 실행 될 때마다는 `state` 매개 변수는이 개체를 포함 합니다.       콜백 메서드를 사용 하 여 스레드 풀 스레드를 동기화 하는 방법에 대 한 자세한 내용은 참조 [관리 되는 스레드 풀](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example shows how to use the WaitOrTimerCallback delegate to represent a callback method that is executed when a wait handle is signaled.  \n  \n The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.  \n  \n The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes. The example creates a `TaskInfo` object and assigns it some string data. The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.  \n  \n In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a WaitOrTimerCallback delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.  \n  \n When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the WaitOrTimerCallback delegate is invoked. The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred. If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks. In the case of a timeout, the task continues waiting. The `WaitProc` method ends by printing a message to the console.  \n  \n [!code-cs[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/csharp/t-system.threading.waito_1.cs)]\n [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/cpp/t-system.threading.waito_1.cpp)]\n [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/visualbasic/t-system.threading.waito_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public delegate void WaitOrTimerCallback(object state, bool timedOut);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
