### YamlMime:ManagedReference
items:
- uid: System.Net.ServicePoint
  id: ServicePoint
  children:
  - System.Net.ServicePoint.Address
  - System.Net.ServicePoint.BindIPEndPointDelegate
  - System.Net.ServicePoint.Certificate
  - System.Net.ServicePoint.ClientCertificate
  - System.Net.ServicePoint.CloseConnectionGroup(System.String)
  - System.Net.ServicePoint.ConnectionLeaseTimeout
  - System.Net.ServicePoint.ConnectionLimit
  - System.Net.ServicePoint.ConnectionName
  - System.Net.ServicePoint.CurrentConnections
  - System.Net.ServicePoint.Expect100Continue
  - System.Net.ServicePoint.IdleSince
  - System.Net.ServicePoint.MaxIdleTime
  - System.Net.ServicePoint.ProtocolVersion
  - System.Net.ServicePoint.ReceiveBufferSize
  - System.Net.ServicePoint.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  - System.Net.ServicePoint.SupportsPipelining
  - System.Net.ServicePoint.UseNagleAlgorithm
  langs:
  - csharp
  name: ServicePoint
  nameWithType: ServicePoint
  fullName: System.Net.ServicePoint
  type: Class
  summary: "HTTP 연결에 대 한 연결 관리를 제공합니다."
  remarks: "ServicePoint 클래스에는 리소스의 식별자 URI (Uniform Resource)를 전달 되는 호스트 정보에 따라 인터넷 리소스에 대 한 연결을 처리 합니다. 리소스에 대 한 초기 연결에 해당 리소스에 모든 후속 요청에서 공유 됩니다는 ServicePoint 개체 유지 하는 정보를 결정 합니다.       ServicePoint 개체에서 관리 되는 <xref:System.Net.ServicePointManager>클래스 및으로 필요한 경우 생성 되는 <xref:System.Net.ServicePointManager.FindServicePoint%2A?displayProperty=fullName>메서드.</xref:System.Net.ServicePointManager.FindServicePoint%2A?displayProperty=fullName> </xref:System.Net.ServicePointManager> ServicePoint 개체는 직접 생성 되지 않습니다 되지만 항상 생성 및 관리 되는 <xref:System.Net.ServicePointManager>클래스가 있습니다.</xref:System.Net.ServicePointManager> 만들 수 있는 ServicePoint 개체의 최대 수도 설정 되어는 <xref:System.Net.ServicePointManager.MaxServicePoints%2A?displayProperty=fullName>속성.</xref:System.Net.ServicePointManager.MaxServicePoints%2A?displayProperty=fullName>       각 ServicePoint 개체와 연결을 유지 인터넷 리소스 경과 했는데도 문제가 있다면 유휴 상태가 될 때까지에 지정 된 시간 보다 오래 된 <xref:System.Net.ServicePoint.MaxIdleTime%2A>속성.</xref:System.Net.ServicePoint.MaxIdleTime%2A> ServicePoint 초과 하는 경우는 <xref:System.Net.ServicePoint.MaxIdleTime%2A>값 수를 다른 연결 재활용.</xref:System.Net.ServicePoint.MaxIdleTime%2A> 기본값 <xref:System.Net.ServicePoint.MaxIdleTime%2A>설정한는 <xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A?displayProperty=fullName>속성.</xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A?displayProperty=fullName> </xref:System.Net.ServicePoint.MaxIdleTime%2A>       경우는 <xref:System.Net.ServicePoint.ConnectionLeaseTimeout%2A>속성이-1 이외의 값으로 설정 되어 있고 지정된 된 시간이 지난 후 다음 요청을 처리 한 후 활성 ServicePoint 연결 닫힙니다.</xref:System.Net.ServicePoint.ConnectionLeaseTimeout%2A> 이 기본적으로이 무기한으로 열려 있는 활성 연결을 필요로 하지 않는 응용 프로그램에 유용 합니다.      > [!NOTE] > 높은 부하 조건에서 일부 응용 프로그램 시스템 성능이 저하 (예: 높고 변수 트랜잭션 시간이) 야기할 수 있는 스레드 풀의 자유 스레드가 부족 해질 수 있습니다. 참조 [http://msdn.microsoft.com/library/default.asp?url=/library/dnpag/html/scalenetchapt17.asp](http://msdn.microsoft.com/library/default.asp?url=/library/dnpag/html/scalenetchapt17.asp) 이 문제를 해결 하기 위한 구성 변경의 수에 대 한 합니다."
  example:
  - "The following code example creates a ServicePoint object that connects to the URI www.contoso.com.  \n  \n [!code-cpp[System.Net.ServicePoint#1](~/add/codesnippet/cpp/t-system.net.servicepoint_1.cpp)]\n [!code-vb[System.Net.ServicePoint#1](~/add/codesnippet/visualbasic/t-system.net.servicepoint_1.vb)]\n [!code-cs[System.Net.ServicePoint#1](~/add/codesnippet/csharp/t-system.net.servicepoint_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.CompilerServices.FriendAccessAllowed]

      public class ServicePoint
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.ServicePoint.Address
  id: Address
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: Address
  nameWithType: ServicePoint.Address
  fullName: System.Net.ServicePoint.Address
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "식별자 URI (Uniform Resource) 서버를 가져옵니다이 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체에 연결 합니다."
  remarks: ''
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#2](~/add/codesnippet/cpp/p-system.net.servicepoin_3_1.cpp)]\n [!code-vb[System.Net.ServicePoint#2](~/add/codesnippet/visualbasic/p-system.net.servicepoin_3_1.vb)]\n [!code-cs[System.Net.ServicePoint#2](~/add/codesnippet/csharp/p-system.net.servicepoin_3_1.cs)]"
  syntax:
    content: public Uri Address { get; }
    return:
      type: System.Uri
      description: "인스턴스는 <xref:System.Uri>인터넷 서버의 URI를 포함 하는 클래스가 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체에 연결 합니다.</xref:System.Uri>"
  overload: System.Net.ServicePoint.Address*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref> 호스트 모드에 있습니다."
  platform:
  - net462
- uid: System.Net.ServicePoint.BindIPEndPointDelegate
  id: BindIPEndPointDelegate
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: BindIPEndPointDelegate
  nameWithType: ServicePoint.BindIPEndPointDelegate
  fullName: System.Net.ServicePoint.BindIPEndPointDelegate
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "로컬 연결 하려면 대리자 지정 <xref:System.Net.IPEndPoint>와 <xref href=&quot;System.Net.ServicePoint&quot;> </xref>.</xref:System.Net.IPEndPoint>"
  remarks: "일부 부하 분산 기술을 클라이언트가 특정 로컬 IP 주소와 포트 번호를 사용 하 여 필요 하지 않고 <xref:System.Net.IPAddress.Any?displayProperty=fullName>(또는 <xref:System.Net.IPAddress.IPv6Any?displayProperty=fullName>인터넷 프로토콜 버전 6에 대 한) 및 임시 포트</xref:System.Net.IPAddress.IPv6Any?displayProperty=fullName> </xref:System.Net.IPAddress.Any?displayProperty=fullName> 프로그램 BindIPEndPointDelegate이 요구이 사항을 충족할 수 있습니다."
  syntax:
    content: public System.Net.BindIPEndPoint BindIPEndPointDelegate { get; set; }
    return:
      type: System.Net.BindIPEndPoint
      description: "하는 대리자는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 특정 로컬 IP (인터넷 프로토콜) 주소와 포트 번호를 사용 하도록 합니다. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.ServicePoint.BindIPEndPointDelegate*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.Certificate
  id: Certificate
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: Certificate
  nameWithType: ServicePoint.Certificate
  fullName: System.Net.ServicePoint.Certificate
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "이 대 한 받은 인증서를 가져옵니다 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체입니다."
  remarks: "하지만 한 <xref:System.Net.ServicePoint>개체는 인터넷 리소스에 대 한 여러 연결을 만들 수를 하나의 인증서만 유지할 수 있습니다.</xref:System.Net.ServicePoint>"
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#5](~/add/codesnippet/cpp/p-system.net.servicepoin_1_1.cpp)]\n [!code-vb[System.Net.ServicePoint#5](~/add/codesnippet/visualbasic/p-system.net.servicepoin_1_1.vb)]\n [!code-cs[System.Net.ServicePoint#5](~/add/codesnippet/csharp/p-system.net.servicepoin_1_1.cs)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509Certificate Certificate { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "인스턴스는 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;> </xref> 이 대 한 보안 인증서가 포함 된 클래스 수신 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체입니다."
  overload: System.Net.ServicePoint.Certificate*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.ClientCertificate
  id: ClientCertificate
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ClientCertificate
  nameWithType: ServicePoint.ClientCertificate
  fullName: System.Net.ServicePoint.ClientCertificate
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "서버로 보낸 마지막 클라이언트 인증서를 가져옵니다."
  remarks: ''
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#5](~/add/codesnippet/cpp/p-system.net.servicepoin_19_1.cpp)]\n [!code-vb[System.Net.ServicePoint#5](~/add/codesnippet/visualbasic/p-system.net.servicepoin_19_1.vb)]\n [!code-cs[System.Net.ServicePoint#5](~/add/codesnippet/csharp/p-system.net.servicepoin_19_1.cs)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509Certificate ClientCertificate { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;> </xref> 마지막 클라이언트 인증서의 공개 값이 포함 된 개체는 서버에 전송 합니다."
  overload: System.Net.ServicePoint.ClientCertificate*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.CloseConnectionGroup(System.String)
  id: CloseConnectionGroup(System.String)
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: CloseConnectionGroup(String)
  nameWithType: ServicePoint.CloseConnectionGroup(String)
  fullName: System.Net.ServicePoint.CloseConnectionGroup(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "이 지정 된 연결 그룹을 제거 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체입니다."
  remarks: "연결 그룹 특정 연결 또는 연결 집합을 요청 집합을 연결 합니다. 이 메서드를 제거 하 고 지정된 된 연결 그룹에 속하는 모든 연결을 닫습니다."
  syntax:
    content: public bool CloseConnectionGroup (string connectionGroupName);
    parameters:
    - id: connectionGroupName
      type: System.String
      description: "이 서비스 지점에서 닫고 제거할 연결이 들어 있는 연결 그룹의 이름입니다."
    return:
      type: System.Boolean
      description: "A <xref:System.Boolean>연결 그룹이 닫혔는지 여부를 나타내는 값입니다.</xref:System.Boolean>"
  overload: System.Net.ServicePoint.CloseConnectionGroup*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.ConnectionLeaseTimeout
  id: ConnectionLeaseTimeout
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ConnectionLeaseTimeout
  nameWithType: ServicePoint.ConnectionLeaseTimeout
  fullName: System.Net.ServicePoint.ConnectionLeaseTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "기간 (밀리초) 가져오거나 활성 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 연결이 닫힙니다."
  remarks: "이 속성을 사용 하 여 확인 하는 <xref:System.Net.ServicePoint>개체의 활성 연결이 수행 되지 무기한으로 유지 합니다.</xref:System.Net.ServicePoint> 이 속성은 시나리오에 연결 해야를 삭제 하 고 부하 분산 시나리오 예: 정기적으로 다시 설정 위한 것입니다.       기본적으로 때 <xref:System.Net.FtpWebRequest.KeepAlive%2A>은 `true` 는 요청에 <xref:System.Net.ServicePoint.MaxIdleTime%2A>닫기 위한 제한 시간을 설정 하는 속성 <xref:System.Net.ServicePoint>비활성 상태인 경우 즉시 연결.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.FtpWebRequest.KeepAlive%2A> 경우는 <xref:System.Net.ServicePoint>활성 연결을 <xref:System.Net.ServicePoint.MaxIdleTime%2A>아무 효과가 없으며 연결이 무기한으로 유지 합니다.</xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePoint>       ConnectionLeaseTimeout 속성이-1을 반환 하 고 지정된 된 시간 이후에 경과 하면 활성이 아닌 값으로 설정 된 경우 <xref:System.Net.ServicePoint>설정 하 여 요청을 처리 한 후 연결이 닫히거나 <xref:System.Net.FtpWebRequest.KeepAlive%2A>를 `false` 요청에.</xref:System.Net.FtpWebRequest.KeepAlive%2A> </xref:System.Net.ServicePoint>       이 값을 설정 하 여 관리 하는 모든 연결에 영향을 줍니다는 <xref:System.Net.ServicePoint>개체입니다.</xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets the value of this property.  \n  \n [!code-cs[NCLServicePoint#1](~/add/codesnippet/csharp/p-system.net.servicepoin_15_1.cs)]\n [!code-vb[NCLServicePoint#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_15_1.vb)]\n [!code-cpp[NCLServicePoint#1](~/add/codesnippet/cpp/p-system.net.servicepoin_15_1.cpp)]"
  syntax:
    content: public int ConnectionLeaseTimeout { get; set; }
    return:
      type: System.Int32
      description: "A <xref:System.Int32>시간 (밀리초)의 수를 지정 하는 활성 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 연결이 열린 상태로 유지 됩니다.</xref:System.Int32> 기본값은-1로, 활성 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 머물러야 하는 연결을 무기한으로 연결 합니다. 이 속성을 0으로 설정 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 연결 요청을 처리 한 후 닫습니다."
  overload: System.Net.ServicePoint.ConnectionLeaseTimeout*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Set 작업에 대해 지정 된 값에는-1 보다 작은 음수가입니다."
  platform:
  - net462
- uid: System.Net.ServicePoint.ConnectionLimit
  id: ConnectionLimit
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ConnectionLimit
  nameWithType: ServicePoint.ConnectionLimit
  fullName: System.Net.ServicePoint.ConnectionLimit
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "이 허용 되는 연결의 최대 수를 가져오거나 설정 합니다. <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체입니다."
  remarks: "ConnectionLimit 속성 최대 연결 수는 설정의 <xref:System.Net.ServicePoint>인터넷 리소스에 허용 되는 개체입니다.</xref:System.Net.ServicePoint> ConnectionLimit 속성의 값의 값으로 설정 됩니다는 <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A?displayProperty=fullName>속성 때는 <xref:System.Net.ServicePoint>개체가 만들어집니다; 후속 변경 <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A>기존에 영향을 주 <xref:System.Net.ServicePoint>개체.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> </xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A?displayProperty=fullName>"
  example:
  - "The following code example uses the ConnectionLimit property to check the maximum number of connections that the <xref:System.Net.ServicePoint> object can make to the specified Uniform Resource Identifier (URI).  \n  \n [!code-cpp[System.Net.ServicePoint#4](~/add/codesnippet/cpp/p-system.net.servicepoin_6_1.cpp)]\n [!code-vb[System.Net.ServicePoint#4](~/add/codesnippet/visualbasic/p-system.net.servicepoin_6_1.vb)]\n [!code-cs[System.Net.ServicePoint#4](~/add/codesnippet/csharp/p-system.net.servicepoin_6_1.cs)]"
  syntax:
    content: public int ConnectionLimit { get; set; }
    return:
      type: System.Int32
      description: "이 허용 되는 연결의 최대 수 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체입니다."
  overload: System.Net.ServicePoint.ConnectionLimit*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "연결 제한은 0 보다 작거나 같습니다."
  platform:
  - net462
- uid: System.Net.ServicePoint.ConnectionName
  id: ConnectionName
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ConnectionName
  nameWithType: ServicePoint.ConnectionName
  fullName: System.Net.ServicePoint.ConnectionName
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "연결 이름을 가져옵니다."
  remarks: "경우는 <xref:System.Net.ServicePoint>변수로 개체를 생성 한 <xref:System.Uri>개체 (의 <xref:System.Net.ServicePointManager.FindServicePoint%2A>또는 <xref:System.Net.ServicePointManager.FindServicePoint%2A>메서드와 같은), ConnectionName 나타냅니다는 <xref:System.Uri.Scheme%2A>의 속성은 <xref:System.Uri>사용 되는 개체.</xref:System.Uri> </xref:System.Uri.Scheme%2A> </xref:System.Net.ServicePointManager.FindServicePoint%2A> </xref:System.Net.ServicePointManager.FindServicePoint%2A> </xref:System.Uri> </xref:System.Net.ServicePoint>       경우는 <xref:System.Net.ServicePoint>네트워크 호스트 및 포트에서 생성 된 개체, ConnectionName 속성은 호스트와 네트워크를 나타내는 문자열을 포함 포트</xref:System.Net.ServicePoint> 호스트 및 포트를만에서 생성 된 때 ConnectionName 속성이 설정 되어 있으면 <xref:System.Net.WebRequest>동일한 개체 <xref:System.Net.WebRequest.ConnectionGroupName%2A>값이 사용할 수 <xref:System.Net.ServicePoint>개체입니다.</xref:System.Net.ServicePoint> </xref:System.Net.WebRequest.ConnectionGroupName%2A> </xref:System.Net.WebRequest>"
  example:
  - >-
    [!code-cpp[System.Net.ServicePoint#4](~/add/codesnippet/cpp/p-system.net.servicepoin_0_1.cpp)]
     [!code-vb[System.Net.ServicePoint#4](~/add/codesnippet/visualbasic/p-system.net.servicepoin_0_1.vb)]
     [!code-cs[System.Net.ServicePoint#4](~/add/codesnippet/csharp/p-system.net.servicepoin_0_1.cs)]
  syntax:
    content: public string ConnectionName { get; }
    return:
      type: System.String
      description: "A <xref:System.String>연결 이름을 나타내는입니다.</xref:System.String>"
  overload: System.Net.ServicePoint.ConnectionName*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.CurrentConnections
  id: CurrentConnections
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: CurrentConnections
  nameWithType: ServicePoint.CurrentConnections
  fullName: System.Net.ServicePoint.CurrentConnections
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "이 관련 된 열린 연결 수를 가져옵니다 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체입니다."
  remarks: "이 연결 된 열려 있는 인터넷 연결 수를 포함 하는 CurrentConnections 속성 <xref:System.Net.ServicePoint>개체입니다.</xref:System.Net.ServicePoint> CurrentConnections 값 <xref:System.Net.ServicePoint.ConnectionLimit%2A>안내 하십시오.</xref:System.Net.ServicePoint.ConnectionLimit%2A> 를 초과할 수 없습니다."
  example:
  - "The following code example uses the CurrentConnections property to determine the number of open Internet connections associated with this <xref:System.Net.ServicePoint> object.  \n  \n [!code-cpp[System.Net.ServicePoint#2](~/add/codesnippet/cpp/p-system.net.servicepoin_2_1.cpp)]\n [!code-vb[System.Net.ServicePoint#2](~/add/codesnippet/visualbasic/p-system.net.servicepoin_2_1.vb)]\n [!code-cs[System.Net.ServicePoint#2](~/add/codesnippet/csharp/p-system.net.servicepoin_2_1.cs)]"
  syntax:
    content: public int CurrentConnections { get; }
    return:
      type: System.Int32
      description: "이 관련 된 열린 연결 수 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체입니다."
  overload: System.Net.ServicePoint.CurrentConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.Expect100Continue
  id: Expect100Continue
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: Expect100Continue
  nameWithType: ServicePoint.Expect100Continue
  fullName: System.Net.ServicePoint.Expect100Continue
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져오거나는 <xref:System.Boolean>여부를 결정 하는 값-계속 동작이 사용 됩니다.</xref:System.Boolean>"
  remarks: "이 속성이로 설정 된 경우 `true`, 클라이언트에서 사용 하는 요청는 `POST` 메서드는 100을 받으려는-클라이언트를 게시 데이터를 전송 하도록 나타내려면 서버 로부터 응답을 계속 합니다. 이 메커니즘은 요청 헤더에 따라 서버에서 요청을 거부 하려고 할 때 네트워크를 통해 많은 양의 데이터를 보내지 못하게 하는 클라이언트 수 있습니다.       예를 들어, Expect100Continue 속성은 `false`합니다. 서버에 요청을 보내면 데이터를 포함 합니다. 요청 헤더를 읽은 후 서버 인증이 필요 하 고 401 응답을 보내면, 하는 경우 클라이언트가 적절 한 인증 헤더를 사용 하 여 데이터 다시 보내야 합니다.       Expect100Continue 속성이 `true`, 요청 헤더에는 서버에 보내집니다. 서버가 요청을 거부 했습니다, 100 보냅니다-계속 응답 신호를 보내는 데이터를 전송할 수 있습니다. 앞의 예제에서와 같이 서버 인증이 필요한 경우 401 응답을 보냅니다 및 클라이언트에 데이터를 불필요 하 게 전송 되지 않습니다.       이 속성의 값을 변경 해도 기존 연결 적용 되지 않습니다. 만 변경 이후 생성 된 새 연결은 영향을 받습니다.       Expect 100-계속 동작을 완전히 10.1.1 IETF RFC 2616 섹션에서 설명 합니다."
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#9](~/add/codesnippet/cpp/p-system.net.servicepoin_4_1.cpp)]\n [!code-vb[System.Net.ServicePoint#9](~/add/codesnippet/visualbasic/p-system.net.servicepoin_4_1.vb)]\n [!code-cs[System.Net.ServicePoint#9](~/add/codesnippet/csharp/p-system.net.servicepoin_4_1.cs)]"
  syntax:
    content: public bool Expect100Continue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>100을 기대 하는-에 대 한 응답을 계속 <xref uid=&quot;langword_csharp_POST&quot; name=&quot;POST&quot; href=&quot;&quot;> </xref> 요청; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.ServicePoint.Expect100Continue*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.IdleSince
  id: IdleSince
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: IdleSince
  nameWithType: ServicePoint.IdleSince
  fullName: System.Net.ServicePoint.IdleSince
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "날짜 및 시간을 가져옵니다는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체가 호스트에 연결 된 마지막 합니다."
  remarks: "마지막 날짜 및 시간 서비스 지점을 호스트에서 연결이 해제 되었습니다 IdleSince 속성을 기록 합니다. 현재 시간과 IdleSince 간의 차이 값을 초과 하는 경우 <xref:System.Net.ServicePoint.MaxIdleTime%2A>, <xref:System.Net.ServicePoint>개체는 재활용 작업 다른 연결을 사용할 수 있습니다.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.MaxIdleTime%2A>"
  example:
  - "The following code example uses the IdleSince property to set and retrieve the date and time that the <xref:System.Net.ServicePoint> object was last connected to a host.  \n  \n [!code-cpp[System.Net.ServicePoint#3](~/add/codesnippet/cpp/p-system.net.servicepoin_7_1.cpp)]\n [!code-vb[System.Net.ServicePoint#3](~/add/codesnippet/visualbasic/p-system.net.servicepoin_7_1.vb)]\n [!code-cs[System.Net.ServicePoint#3](~/add/codesnippet/csharp/p-system.net.servicepoin_7_1.cs)]"
  syntax:
    content: public DateTime IdleSince { get; }
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime>날짜 및 시간을 포함 하는 개체는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체가 연결 된 마지막.</xref:System.DateTime>"
  overload: System.Net.ServicePoint.IdleSince*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.MaxIdleTime
  id: MaxIdleTime
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: MaxIdleTime
  nameWithType: ServicePoint.MaxIdleTime
  fullName: System.Net.ServicePoint.MaxIdleTime
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "연결 관련 된 시간을 가져오거나 설정 합니다.는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체 유휴 상태로 있을 수 있으며 연결이 닫히거나 전에 합니다."
  remarks: "MaxIdleTime를 설정할 수 있습니다 <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>와 관련 된 연결을 나타내기 위해는 <xref:System.Net.ServicePoint>개체 시간 초과 되지 않아야 합니다.</xref:System.Net.ServicePoint> </xref:System.Threading.Timeout.Infinite?displayProperty=fullName>       MaxIdleTime 속성의 기본값은 값의 <xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A?displayProperty=fullName>속성 때는 <xref:System.Net.ServicePoint>개체가 만들어집니다.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A?displayProperty=fullName> 후속 변경은 <xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A>속성 기존에 아무 영향도 <xref:System.Net.ServicePoint>개체.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A>       연결에 대 한 MaxIdleTime 연관는 <xref:System.Net.ServicePoint>은 초과 연결은 열린 상태로 응용 프로그램에서 연결을 사용 하려고 할 때까지.</xref:System.Net.ServicePoint> 그 당시 프레임 워크는 연결을 닫고 원격 호스트에 새 연결을 만듭니다."
  example:
  - "The following code example uses the MaxIdleTime property to set and retrieve the <xref:System.Net.ServicePoint> idle time.  \n  \n [!code-cpp[System.Net.ServicePoint#3](~/add/codesnippet/cpp/p-system.net.servicepoin_11_1.cpp)]\n [!code-vb[System.Net.ServicePoint#3](~/add/codesnippet/visualbasic/p-system.net.servicepoin_11_1.vb)]\n [!code-cs[System.Net.ServicePoint#3](~/add/codesnippet/csharp/p-system.net.servicepoin_11_1.cs)]"
  syntax:
    content: public int MaxIdleTime { get; set; }
    return:
      type: System.Int32
      description: "와 관련 된 연결을 밀리초 단위로 시간의 길이 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체 수 전에 유휴 상태로 유지 닫히고 다른 연결에 다시 사용 합니다."
  overload: System.Net.ServicePoint.MaxIdleTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "로 설정 된 MaxIdleTime 보다 작은 &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; 보다 큰 &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;합니다."
  platform:
  - net462
- uid: System.Net.ServicePoint.ProtocolVersion
  id: ProtocolVersion
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ProtocolVersion
  nameWithType: ServicePoint.ProtocolVersion
  fullName: System.Net.ServicePoint.ProtocolVersion
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "HTTP 프로토콜의 버전을 가져옵니다는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체가 사용 합니다."
  remarks: "HTTP 프로토콜 버전은 HTTP/1.0 및 HTTP/1.1입니다."
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#5](~/add/codesnippet/cpp/p-system.net.servicepoin_22_1.cpp)]\n [!code-vb[System.Net.ServicePoint#5](~/add/codesnippet/visualbasic/p-system.net.servicepoin_22_1.vb)]\n [!code-cs[System.Net.ServicePoint#5](~/add/codesnippet/csharp/p-system.net.servicepoin_22_1.cs)]"
  syntax:
    content: public virtual Version ProtocolVersion { get; }
    return:
      type: System.Version
      description: "A <xref:System.Version>HTTP 프로토콜 버전을 포함 하는 개체는는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체가 사용.</xref:System.Version>"
  overload: System.Net.ServicePoint.ProtocolVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.ReceiveBufferSize
  id: ReceiveBufferSize
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ReceiveBufferSize
  nameWithType: ServicePoint.ReceiveBufferSize
  fullName: System.Net.ServicePoint.ReceiveBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "이 사용 되는 소켓의 수신 버퍼의 크기를 가져오거나 설정 합니다. <xref href=&quot;System.Net.ServicePoint&quot;> </xref>합니다."
  remarks: "자세한 내용은 <xref:System.Net.Sockets.Socket.ReceiveBufferSize%2A>.</xref:System.Net.Sockets.Socket.ReceiveBufferSize%2A> 을 참조 하십시오."
  example:
  - "The following code example sets the value of this property.  \n  \n [!code-cs[NCLServicePoint#1](~/add/codesnippet/csharp/p-system.net.servicepoin_9_1.cs)]\n [!code-vb[NCLServicePoint#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_9_1.vb)]\n [!code-cpp[NCLServicePoint#1](~/add/codesnippet/cpp/p-system.net.servicepoin_9_1.cpp)]"
  syntax:
    content: public int ReceiveBufferSize { get; set; }
    return:
      type: System.Int32
      description: "A <xref:System.Int32>수신 버퍼를 바이트 단위로 크기를 포함 하는.</xref:System.Int32> 기본값은 8192입니다."
  overload: System.Net.ServicePoint.ReceiveBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Set 작업에 지정 된 값 <xref:System.Int32>.</xref:System.Int32> 보다 큽니다."
  platform:
  - net462
- uid: System.Net.ServicePoint.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  id: SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePoint.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePoint.SetTcpKeepAlive(Boolean,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "TCP 연결에서 연결 유지 옵션을 사용 하지 않도록 설정 하거나 사용 합니다."
  remarks: "TCP/IP 공급자 TCP 연결에서 연결 유지 패킷이을 사용할 수 있도록 하는 응용 프로그램 요청할 수 있습니다. 기본값은 TCP 연결에서 연결 유지 패킷이 사용 불가능 합니다.       TCP 소켓을 경우의 기본 설정은 2 시간 설정에서 연결 유지 시간 제한 및 연결 유지 간격을 1 초로 초기화 합니다. `keepAliveTime` 매개 변수는 첫 번째 연결 유지 패킷이 전송 될 때까지 아무런 작업도 밀리초 단위로 제한 시간을 지정 합니다. `keepAliveInterval` 매개 변수는 간격을 밀리초 단위로 지정 사이 승인을 받지 못할 경우 연속 연결 유지 패킷이 전송 됩니다. 연결 유지 프로브 수를 변경할 수 없습니다 및 10으로 설정 됩니다.       연결 유지의 결과로 TCP 연결이 끊어지면는 <xref:System.Net.Sockets.SocketError>의 <xref:System.Net.Sockets.SocketError>소켓에서 진행 중인 모든 호출에 반환 된 이후의 모든 호출 실패는 <xref:System.Net.Sockets.SocketError> <xref:System.Net.Sockets.SocketError>안내 하십시오.</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> 하 고</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public void SetTcpKeepAlive (bool enabled, int keepAliveTime, int keepAliveInterval);
    parameters:
    - id: enabled
      type: System.Boolean
      description: "지정 된를 사용 하 여 활성화할 수 있는 다음 TCP 연결 유지 옵션 TCP 연결에서 true로 설정 됩니다 `keepAliveTime` 및 `keepAliveInterval` 값입니다.       False로 설정 된 다음는 TCP 연결 유지 옵션을 해제 하 고 나머지 매개 변수는 무시 됩니다.       기본값은 false입니다."
    - id: keepAliveTime
      type: System.Int32
      description: "첫 번째 연결 유지 패킷이 전송 될 때까지 아무런 작업도 밀리초 단위로 제한 시간을 지정 합니다.       값은 0 보다 커야 합니다.  0 보다 작거나 같은 값이 전달 되는 경우는 <xref:System.ArgumentOutOfRangeException>throw 됩니다.</xref:System.ArgumentOutOfRangeException>"
    - id: keepAliveInterval
      type: System.Int32
      description: "승인을 받지 못할 경우 후속 연결 유지 패킷이 전송 되 사이의 간격을 밀리초 단위로 지정 합니다.       값은 0 보다 커야 합니다.  0 보다 작거나 같은 값이 전달 되는 경우는 <xref:System.ArgumentOutOfRangeException>throw 됩니다.</xref:System.ArgumentOutOfRangeException>"
  overload: System.Net.ServicePoint.SetTcpKeepAlive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "에 지정 된 값 <code> keepAliveTime </code> 또는 <code> keepAliveInterval </code> 매개 변수는 0 보다 작습니다."
  platform:
  - net462
- uid: System.Net.ServicePoint.SupportsPipelining
  id: SupportsPipelining
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: SupportsPipelining
  nameWithType: ServicePoint.SupportsPipelining
  fullName: System.Net.ServicePoint.SupportsPipelining
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "나타냅니다 여부는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체가 파이프라인된 연결을 지원 합니다."
  remarks: "파이프라인 요청을 보내는 여러 영구 연결을 통해 각 서버의 응답을에서 기다리지 않고 클라이언트 수 있습니다. 서버 요청을 받은 대로 동일한 순서로 응답을 보냅니다.       파이프라인은 IETF RFC 2616 8.1.2.2에서에서 자세히 설명 되어 있습니다."
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#5](~/add/codesnippet/cpp/p-system.net.servicepoin_18_1.cpp)]\n [!code-vb[System.Net.ServicePoint#5](~/add/codesnippet/visualbasic/p-system.net.servicepoin_18_1.vb)]\n [!code-cs[System.Net.ServicePoint#5](~/add/codesnippet/csharp/p-system.net.servicepoin_18_1.cs)]"
  syntax:
    content: public bool SupportsPipelining { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체가 파이프라인된 연결을 지 원하는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.ServicePoint.SupportsPipelining*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.UseNagleAlgorithm
  id: UseNagleAlgorithm
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: UseNagleAlgorithm
  nameWithType: ServicePoint.UseNagleAlgorithm
  fullName: System.Net.ServicePoint.UseNagleAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져오거나는 <xref:System.Boolean>이 관리 하는 연결에 Nagle 알고리즘을 사용할지 여부를 결정 하는 값 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체입니다.</xref:System.Boolean>"
  remarks: "Nagle 알고리즘을 버퍼링 하는 작은 데이터 패킷을 단일 패킷으로 전송 하도록 사용 됩니다. &quot;Nagling&quot; 라고 하는이 프로세스를 전송 하는 패킷 수가 감소 하므로 널리 사용 되 및 패킷 당 오버 헤드를 낮춥니다.       이 속성의 값을 변경 해도 기존 연결 적용 되지 않습니다. 만 변경 이후 생성 된 새 연결은 영향을 받습니다.       Nagle 알고리즘 IETF RFC 896 완벽 하 게 설명 합니다."
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#9](~/add/codesnippet/cpp/p-system.net.servicepoin_16_1.cpp)]\n [!code-vb[System.Net.ServicePoint#9](~/add/codesnippet/visualbasic/p-system.net.servicepoin_16_1.vb)]\n [!code-cs[System.Net.ServicePoint#9](~/add/codesnippet/csharp/p-system.net.servicepoin_16_1.cs)]"
  syntax:
    content: public bool UseNagleAlgorithm { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Nagle 알고리즘을 사용 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.ServicePoint.UseNagleAlgorithm*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.ServicePoint.Address
  parent: System.Net.ServicePoint
  isExternal: false
  name: Address
  nameWithType: ServicePoint.Address
  fullName: System.Net.ServicePoint.Address
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.ServicePoint.BindIPEndPointDelegate
  parent: System.Net.ServicePoint
  isExternal: false
  name: BindIPEndPointDelegate
  nameWithType: ServicePoint.BindIPEndPointDelegate
  fullName: System.Net.ServicePoint.BindIPEndPointDelegate
- uid: System.Net.BindIPEndPoint
  parent: System.Net
  isExternal: false
  name: BindIPEndPoint
  nameWithType: BindIPEndPoint
  fullName: System.Net.BindIPEndPoint
- uid: System.Net.ServicePoint.Certificate
  parent: System.Net.ServicePoint
  isExternal: false
  name: Certificate
  nameWithType: ServicePoint.Certificate
  fullName: System.Net.ServicePoint.Certificate
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate
  nameWithType: X509Certificate
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.Net.ServicePoint.ClientCertificate
  parent: System.Net.ServicePoint
  isExternal: false
  name: ClientCertificate
  nameWithType: ServicePoint.ClientCertificate
  fullName: System.Net.ServicePoint.ClientCertificate
- uid: System.Net.ServicePoint.CloseConnectionGroup(System.String)
  parent: System.Net.ServicePoint
  isExternal: false
  name: CloseConnectionGroup(String)
  nameWithType: ServicePoint.CloseConnectionGroup(String)
  fullName: System.Net.ServicePoint.CloseConnectionGroup(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.ServicePoint.ConnectionLeaseTimeout
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionLeaseTimeout
  nameWithType: ServicePoint.ConnectionLeaseTimeout
  fullName: System.Net.ServicePoint.ConnectionLeaseTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.ServicePoint.ConnectionLimit
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionLimit
  nameWithType: ServicePoint.ConnectionLimit
  fullName: System.Net.ServicePoint.ConnectionLimit
- uid: System.Net.ServicePoint.ConnectionName
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionName
  nameWithType: ServicePoint.ConnectionName
  fullName: System.Net.ServicePoint.ConnectionName
- uid: System.Net.ServicePoint.CurrentConnections
  parent: System.Net.ServicePoint
  isExternal: false
  name: CurrentConnections
  nameWithType: ServicePoint.CurrentConnections
  fullName: System.Net.ServicePoint.CurrentConnections
- uid: System.Net.ServicePoint.Expect100Continue
  parent: System.Net.ServicePoint
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePoint.Expect100Continue
  fullName: System.Net.ServicePoint.Expect100Continue
- uid: System.Net.ServicePoint.IdleSince
  parent: System.Net.ServicePoint
  isExternal: false
  name: IdleSince
  nameWithType: ServicePoint.IdleSince
  fullName: System.Net.ServicePoint.IdleSince
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Net.ServicePoint.MaxIdleTime
  parent: System.Net.ServicePoint
  isExternal: false
  name: MaxIdleTime
  nameWithType: ServicePoint.MaxIdleTime
  fullName: System.Net.ServicePoint.MaxIdleTime
- uid: System.Net.ServicePoint.ProtocolVersion
  parent: System.Net.ServicePoint
  isExternal: false
  name: ProtocolVersion
  nameWithType: ServicePoint.ProtocolVersion
  fullName: System.Net.ServicePoint.ProtocolVersion
- uid: System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Net.ServicePoint.ReceiveBufferSize
  parent: System.Net.ServicePoint
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: ServicePoint.ReceiveBufferSize
  fullName: System.Net.ServicePoint.ReceiveBufferSize
- uid: System.Net.ServicePoint.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePoint
  isExternal: false
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePoint.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePoint.SetTcpKeepAlive(Boolean,Int32,Int32)
- uid: System.Net.ServicePoint.SupportsPipelining
  parent: System.Net.ServicePoint
  isExternal: false
  name: SupportsPipelining
  nameWithType: ServicePoint.SupportsPipelining
  fullName: System.Net.ServicePoint.SupportsPipelining
- uid: System.Net.ServicePoint.UseNagleAlgorithm
  parent: System.Net.ServicePoint
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePoint.UseNagleAlgorithm
  fullName: System.Net.ServicePoint.UseNagleAlgorithm
- uid: System.Net.ServicePoint.Address*
  parent: System.Net.ServicePoint
  isExternal: false
  name: Address
  nameWithType: ServicePoint.Address
- uid: System.Net.ServicePoint.BindIPEndPointDelegate*
  parent: System.Net.ServicePoint
  isExternal: false
  name: BindIPEndPointDelegate
  nameWithType: ServicePoint.BindIPEndPointDelegate
- uid: System.Net.ServicePoint.Certificate*
  parent: System.Net.ServicePoint
  isExternal: false
  name: Certificate
  nameWithType: ServicePoint.Certificate
- uid: System.Net.ServicePoint.ClientCertificate*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ClientCertificate
  nameWithType: ServicePoint.ClientCertificate
- uid: System.Net.ServicePoint.CloseConnectionGroup*
  parent: System.Net.ServicePoint
  isExternal: false
  name: CloseConnectionGroup
  nameWithType: ServicePoint.CloseConnectionGroup
- uid: System.Net.ServicePoint.ConnectionLeaseTimeout*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionLeaseTimeout
  nameWithType: ServicePoint.ConnectionLeaseTimeout
- uid: System.Net.ServicePoint.ConnectionLimit*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionLimit
  nameWithType: ServicePoint.ConnectionLimit
- uid: System.Net.ServicePoint.ConnectionName*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionName
  nameWithType: ServicePoint.ConnectionName
- uid: System.Net.ServicePoint.CurrentConnections*
  parent: System.Net.ServicePoint
  isExternal: false
  name: CurrentConnections
  nameWithType: ServicePoint.CurrentConnections
- uid: System.Net.ServicePoint.Expect100Continue*
  parent: System.Net.ServicePoint
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePoint.Expect100Continue
- uid: System.Net.ServicePoint.IdleSince*
  parent: System.Net.ServicePoint
  isExternal: false
  name: IdleSince
  nameWithType: ServicePoint.IdleSince
- uid: System.Net.ServicePoint.MaxIdleTime*
  parent: System.Net.ServicePoint
  isExternal: false
  name: MaxIdleTime
  nameWithType: ServicePoint.MaxIdleTime
- uid: System.Net.ServicePoint.ProtocolVersion*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ProtocolVersion
  nameWithType: ServicePoint.ProtocolVersion
- uid: System.Net.ServicePoint.ReceiveBufferSize*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: ServicePoint.ReceiveBufferSize
- uid: System.Net.ServicePoint.SetTcpKeepAlive*
  parent: System.Net.ServicePoint
  isExternal: false
  name: SetTcpKeepAlive
  nameWithType: ServicePoint.SetTcpKeepAlive
- uid: System.Net.ServicePoint.SupportsPipelining*
  parent: System.Net.ServicePoint
  isExternal: false
  name: SupportsPipelining
  nameWithType: ServicePoint.SupportsPipelining
- uid: System.Net.ServicePoint.UseNagleAlgorithm*
  parent: System.Net.ServicePoint
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePoint.UseNagleAlgorithm
