### YamlMime:ManagedReference
items:
- uid: System.Threading.Overlapped
  id: Overlapped
  children:
  - System.Threading.Overlapped.#ctor
  - System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)
  - System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)
  - System.Threading.Overlapped.AsyncResult
  - System.Threading.Overlapped.EventHandle
  - System.Threading.Overlapped.EventHandleIntPtr
  - System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)
  - System.Threading.Overlapped.OffsetHigh
  - System.Threading.Overlapped.OffsetLow
  - System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)
  - System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)
  - System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)
  - System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)
  - System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)
  langs:
  - csharp
  name: Overlapped
  nameWithType: Overlapped
  fullName: System.Threading.Overlapped
  type: Class
  summary: "관리 되는 Win32 표현을 제공 `OVERLAPPED` Overlapped 인스턴스에서 정보를 전송 하는 메서드를 포함 한 구조에는 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref> 구조입니다."
  remarks: "<xref:System.Threading.Overlapped.Pack%2A>및 <xref:System.Threading.Overlapped.UnsafePack%2A>Overlapped 개체에서 정보를 전송 하는 메서드는 <xref:System.Threading.NativeOverlapped>비동기에 대 한 Win32 API 함수에 전달할 수 있는 구조 파일 I/O.</xref:System.Threading.NativeOverlapped> </xref:System.Threading.Overlapped.UnsafePack%2A> </xref:System.Threading.Overlapped.Pack%2A> <xref:System.Threading.Overlapped.Unpack%2A> <xref:System.Threading.NativeOverlapped>Overlapped 클래스의 인스턴스로 구조</xref:System.Threading.NativeOverlapped> 에서 메서드 전송 정보</xref:System.Threading.Overlapped.Unpack%2A>       Overlapped 개체의 속성 변경 관련 <xref:System.Threading.NativeOverlapped>구조, 그 반대의.</xref:System.Threading.NativeOverlapped>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class Overlapped
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.Overlapped.#ctor
  id: '#ctor'
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Overlapped()
  nameWithType: Overlapped.Overlapped()
  fullName: System.Threading.Overlapped.Overlapped()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "새로 만든 빈 인스턴스를 초기화는 <xref href=&quot;System.Threading.Overlapped&quot;> </xref> 클래스입니다."
  syntax:
    content: public Overlapped ();
    parameters: []
  overload: System.Threading.Overlapped.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)'
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Overlapped(Int32,Int32,Int32,IAsyncResult)
  nameWithType: Overlapped.Overlapped(Int32,Int32,Int32,IAsyncResult)
  fullName: System.Threading.Overlapped.Overlapped(Int32,Int32,Int32,IAsyncResult)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Threading.Overlapped&quot;> </xref> 클래스 지정 된 파일 위치, I/O 작업이 완료 될 때 신호를 받는 이벤트와 작업의 결과 반환할 수 있는 인터페이스에 대 한 32 비트 정수 핸들입니다."
  remarks: "<xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName> <xref:System.Threading.WaitHandle>클래스</xref:System.Threading.WaitHandle> 에서 파생 된 모든 관리 되는 동기화 이벤트 핸들을 가져올 속성을</xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName> 사용 하 여       구현 <xref:System.IAsyncResult>I/O 작업에 대 한 상태 정보를 제공 합니다.</xref:System.IAsyncResult> 생성자에 전달할는 `ar` 매개 변수를 사용 하 여 나중에 검색 하 고는 <xref:System.Threading.Overlapped.AsyncResult%2A>속성.</xref:System.Threading.Overlapped.AsyncResult%2A> 에 대 한 콜백 메서드를 지정 하는 경우는 <xref:System.Threading.Overlapped.Pack%2A>또는 <xref:System.Threading.Overlapped.UnsafePack%2A>메서드를 콜백 검색할 수 있습니다 프로그램 <xref:System.IAsyncResult>압축을 풀어는 <xref:System.Threading.NativeOverlapped>수신한 구조.</xref:System.Threading.NativeOverlapped> </xref:System.IAsyncResult> </xref:System.Threading.Overlapped.UnsafePack%2A> </xref:System.Threading.Overlapped.Pack%2A>"
  syntax:
    content: public Overlapped (int offsetLo, int offsetHi, int hEvent, IAsyncResult ar);
    parameters:
    - id: offsetLo
      type: System.Int32
      description: "낮은 번호 전송을 시작 하는 파일 위치 중입니다."
    - id: offsetHi
      type: System.Int32
      description: "높은 번호 전송을 시작 하는 파일 위치 중입니다."
    - id: hEvent
      type: System.Int32
      description: "I/O 작업이 완료 될 때 신호를 받는 이벤트에 대 한 핸들입니다."
    - id: ar
      type: System.IAsyncResult
      description: "구현 하는 개체는 <xref:System.IAsyncResult>인터페이스 및 I/O 작업에 대 한 상태 정보를 제공 합니다.</xref:System.IAsyncResult>"
  overload: System.Threading.Overlapped.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)
  id: '#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)'
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  nameWithType: Overlapped.Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  fullName: System.Threading.Overlapped.Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Threading.Overlapped&quot;> </xref> 클래스 지정 된 파일 위치, I/O 작업이 완료 될 때 신호를 받는 이벤트와 작업의 결과 반환할 수 있는 인터페이스에 대 한 핸들입니다."
  remarks: "파생 되는 관리 되는 동기화 개체의 핸들을 가져오지는 <xref:System.Threading.WaitHandle>클래스를 사용 하 여는 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName>가져올 속성을 <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>개체를 호출 합니다는 <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>메서드.</xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> </xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> </xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName> </xref:System.Threading.WaitHandle>       구현 <xref:System.IAsyncResult>I/O 작업에 대 한 상태 정보를 제공 합니다.</xref:System.IAsyncResult> 생성자에 전달할는 `ar` 매개 변수를 사용 하 여 나중에 검색 하 고는 <xref:System.Threading.Overlapped.AsyncResult%2A>속성.</xref:System.Threading.Overlapped.AsyncResult%2A> 에 대 한 콜백 메서드를 지정 하는 경우는 <xref:System.Threading.Overlapped.Pack%2A>또는 <xref:System.Threading.Overlapped.UnsafePack%2A>메서드를 콜백 검색할 수 있습니다 프로그램 <xref:System.IAsyncResult>압축을 풀어는 <xref:System.Threading.NativeOverlapped>수신한 구조.</xref:System.Threading.NativeOverlapped> </xref:System.IAsyncResult> </xref:System.Threading.Overlapped.UnsafePack%2A> </xref:System.Threading.Overlapped.Pack%2A>"
  syntax:
    content: public Overlapped (int offsetLo, int offsetHi, IntPtr hEvent, IAsyncResult ar);
    parameters:
    - id: offsetLo
      type: System.Int32
      description: "낮은 번호 전송을 시작 하는 파일 위치 중입니다."
    - id: offsetHi
      type: System.Int32
      description: "높은 번호 전송을 시작 하는 파일 위치 중입니다."
    - id: hEvent
      type: System.IntPtr
      description: "I/O 작업이 완료 될 때 신호를 받는 이벤트에 대 한 핸들입니다."
    - id: ar
      type: System.IAsyncResult
      description: "구현 하는 개체는 <xref:System.IAsyncResult>인터페이스 및 I/O 작업에 대 한 상태 정보를 제공 합니다.</xref:System.IAsyncResult>"
  overload: System.Threading.Overlapped.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.AsyncResult
  id: AsyncResult
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: AsyncResult
  nameWithType: Overlapped.AsyncResult
  fullName: System.Threading.Overlapped.AsyncResult
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "I/O 작업에 대 한 상태 정보를 제공 하는 개체를 가져오거나 설정 합니다."
  syntax:
    content: public IAsyncResult AsyncResult { get; set; }
    return:
      type: System.IAsyncResult
      description: "구현 하는 개체는 <xref:System.IAsyncResult>인터페이스.</xref:System.IAsyncResult>"
  overload: System.Threading.Overlapped.AsyncResult*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.EventHandle
  id: EventHandle
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: EventHandle
  nameWithType: Overlapped.EventHandle
  fullName: System.Threading.Overlapped.EventHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "I/O 작업이 완료 될 때 신호를 받는 동기화 이벤트를 32 비트 정수 핸들을 가져오거나 설정 합니다."
  remarks: "이 속성은 64 비트 플랫폼에서 사용할 수 없습니다. 사용 하 여 <xref:System.Threading.Overlapped.EventHandleIntPtr%2A>속성 대신.</xref:System.Threading.Overlapped.EventHandleIntPtr%2A>       <xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName> <xref:System.Threading.WaitHandle>클래스</xref:System.Threading.WaitHandle> 에서 파생 된 모든 관리 되는 동기화 이벤트 핸들을 가져올 속성을</xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName> 사용 하 여"
  syntax:
    content: public int EventHandle { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>동기화 이벤트 핸들을 나타내는 값입니다.</xref:System.Int32>"
  overload: System.Threading.Overlapped.EventHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.EventHandleIntPtr
  id: EventHandleIntPtr
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: EventHandleIntPtr
  nameWithType: Overlapped.EventHandleIntPtr
  fullName: System.Threading.Overlapped.EventHandleIntPtr
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "I/O 작업이 완료 될 때 신호를 받는 동기화 이벤트에 대 한 핸들을 가져오거나 설정 합니다."
  remarks: "파생 되는 관리 되는 동기화 개체의 핸들을 가져오지는 <xref:System.Threading.WaitHandle>클래스를 사용 하 여는 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName>가져올 속성을 <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>개체를 호출 합니다는 <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>메서드.</xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> </xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> </xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName> </xref:System.Threading.WaitHandle>"
  syntax:
    content: public IntPtr EventHandleIntPtr { get; set; }
    return:
      type: System.IntPtr
      description: "<xref:System.IntPtr>이벤트의 핸들을 나타내는.</xref:System.IntPtr>"
  overload: System.Threading.Overlapped.EventHandleIntPtr*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)
  id: Free(System.Threading.NativeOverlapped*)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Free(NativeOverlapped*)
  nameWithType: Overlapped.Free(NativeOverlapped*)
  fullName: System.Threading.Overlapped.Free(NativeOverlapped*)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "에 의해 할당 하는 중첩 된 네이티브 구조체와 연결 된 관리 되지 않는 메모리를 해제는 <xref:System.Threading.Overlapped.Pack*>메서드.</xref:System.Threading.Overlapped.Pack*>"
  remarks: "정확 하 게 사용 가능한 메서드를 호출 해야에서 두 번 마다 <xref:System.Threading.NativeOverlapped>에서 수신 하는 포인터는 <xref:System.Threading.Overlapped.Pack%2A>메서드.</xref:System.Threading.Overlapped.Pack%2A> </xref:System.Threading.NativeOverlapped> Free 메서드를 호출 하지 않으면, 메모리 누수가 발생 합니다. Free 메서드를 두 번 이상 호출 하는 경우 메모리 손상 됩니다."
  syntax:
    content: public static void Free (System.Threading.NativeOverlapped* nativeOverlappedPtr);
    parameters:
    - id: nativeOverlappedPtr
      type: System.Threading.NativeOverlapped*
      description: "에 대 한 포인터는 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref> 구조를 해제 합니다."
  overload: System.Threading.Overlapped.Free*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>nativeOverlappedPtr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Threading.Overlapped.OffsetHigh
  id: OffsetHigh
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: OffsetHigh
  nameWithType: Overlapped.OffsetHigh
  fullName: System.Threading.Overlapped.OffsetHigh
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "상위 단어 전송을 시작 하는 파일 위치를 가져오거나 설정 합니다. 파일 위치는 파일의 시작 부분에서 바이트 오프셋입니다."
  syntax:
    content: public int OffsetHigh { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>높은 단어의 파일 위치를 나타내는 값입니다.</xref:System.Int32>"
  overload: System.Threading.Overlapped.OffsetHigh*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.OffsetLow
  id: OffsetLow
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: OffsetLow
  nameWithType: Overlapped.OffsetLow
  fullName: System.Threading.Overlapped.OffsetLow
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "하위 단어 전송을 시작 하는 파일 위치를 가져오거나 설정 합니다. 파일 위치는 파일의 시작 부분에서 바이트 오프셋입니다."
  syntax:
    content: public int OffsetLow { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>낮은 단어의 파일 위치를 나타내는 값입니다.</xref:System.Int32>"
  overload: System.Threading.Overlapped.OffsetLow*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)
  id: Pack(System.Threading.IOCompletionCallback)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Pack(IOCompletionCallback)
  nameWithType: Overlapped.Pack(IOCompletionCallback)
  fullName: System.Threading.Overlapped.Pack(IOCompletionCallback)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "팩의 현재 인스턴스는 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref> 구조, 비동기 I/O 작업이 완료 될 때 호출 될 대리자를 지정 합니다."
  remarks: "겹쳐진된 I/O 작업의 운영 체제에이 메서드에서 반환 되는 관리 되지 않는 포인터를 전달할 수 있습니다. <xref:System.Threading.NativeOverlapped>될 때까지 실제 메모리의 구조는 고정 되어 <xref:System.Threading.Overlapped.Unpack%2A>호출 됩니다.</xref:System.Threading.Overlapped.Unpack%2A> </xref:System.Threading.NativeOverlapped>      > [!IMPORTANT] > 호출자는 버퍼를 고정 합니다. 그러나 응용 프로그램 도메인이 언로드되면 고정된 된 버퍼에 대 한 핸들 개체가 제거 되 고 버퍼 출시 되 면 해제 된 주소에 쓰려고 I/O 작업을 종료 합니다. 이러한 이유로 사용 하 여이 <xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29>런타임 버퍼를 고정 하는 메서드 오버 로드.</xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29>"
  syntax:
    content: public System.Threading.NativeOverlapped* Pack (System.Threading.IOCompletionCallback iocb);
    parameters:
    - id: iocb
      type: System.Threading.IOCompletionCallback
      description: "<xref href=&quot;System.Threading.IOCompletionCallback&quot;> </xref> 비동기 I/O 작업이 완료 될 때 호출할 콜백 메서드를 나타내는 대리자입니다."
    return:
      type: System.Threading.NativeOverlapped*
      description: "에 대 한 관리 되지 않는 포인터는 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref> 구조입니다."
  overload: System.Threading.Overlapped.Pack*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "현재 <xref href=&quot;System.Threading.Overlapped&quot;> </xref> 이미 대기 합니다."
  platform:
  - net462
- uid: System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)
  id: Pack(System.Threading.IOCompletionCallback,System.Object)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Pack(IOCompletionCallback,Object)
  nameWithType: Overlapped.Pack(IOCompletionCallback,Object)
  fullName: System.Threading.Overlapped.Pack(IOCompletionCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "팩의 현재 인스턴스는 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref> 구조, 비동기 I/O 작업이 완료 될 때 호출 되는 대리자와 버퍼 역할을 하는 관리 되는 개체를 지정 합니다."
  remarks: "겹쳐진된 I/O 작업의 운영 체제에이 메서드에서 반환 되는 관리 되지 않는 포인터를 전달할 수 있습니다. <xref:System.Threading.NativeOverlapped>될 때까지 실제 메모리의 구조는 고정 되어 <xref:System.Threading.Overlapped.Unpack%2A>호출 됩니다.</xref:System.Threading.Overlapped.Unpack%2A> </xref:System.Threading.NativeOverlapped>       에 지정 된 버퍼가 `userData` 비동기 I/O를 수행 하는 관리 되지 않는 운영 체제 함수에 전달 된 것과 동일 해야 합니다.      > [!NOTE] > 버퍼 또는 버퍼에 지정 된 고정 하는 런타임 `userData` I/O 작업의 기간에 대 한 합니다. 응용 프로그램 도메인이 언로드되면 경우 런타임에서 I/O 작업이 완료 될 때까지 고정 된 메모리를 유지 합니다."
  syntax:
    content: public System.Threading.NativeOverlapped* Pack (System.Threading.IOCompletionCallback iocb, object userData);
    parameters:
    - id: iocb
      type: System.Threading.IOCompletionCallback
      description: "<xref href=&quot;System.Threading.IOCompletionCallback&quot;> </xref> 비동기 I/O 작업이 완료 될 때 호출할 콜백 메서드를 나타내는 대리자입니다."
    - id: userData
      type: System.Object
      description: "개체 또는 작업에 대 한 입력 또는 출력 버퍼를 나타내는 개체의 배열입니다. 각 개체에는 예를 들어 바이트 배열을 버퍼를 나타냅니다."
    return:
      type: System.Threading.NativeOverlapped*
      description: "에 대 한 관리 되지 않는 포인터는 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref> 구조입니다."
  overload: System.Threading.Overlapped.Pack*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "현재 <xref href=&quot;System.Threading.Overlapped&quot;> </xref> 이미 대기 합니다."
  platform:
  - net462
- uid: System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)
  id: Unpack(System.Threading.NativeOverlapped*)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Unpack(NativeOverlapped*)
  nameWithType: Overlapped.Unpack(NativeOverlapped*)
  fullName: System.Threading.Overlapped.Unpack(NativeOverlapped*)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "지정 된 관리 되지 않는 압축을 푼 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref> 구조를 관리 되는 <xref href=&quot;System.Threading.Overlapped&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Threading.NativeOverlapped>구조를 호출할 때까지 실제 메모리에서 해제 되지 않습니다는 <xref:System.Threading.Overlapped.Free%2A>메서드.</xref:System.Threading.Overlapped.Free%2A> </xref:System.Threading.NativeOverlapped>"
  syntax:
    content: public static System.Threading.Overlapped Unpack (System.Threading.NativeOverlapped* nativeOverlappedPtr);
    parameters:
    - id: nativeOverlappedPtr
      type: System.Threading.NativeOverlapped*
      description: "에 대 한 관리 되지 않는 포인터는 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref> 구조입니다."
    return:
      type: System.Threading.Overlapped
      description: "<xref href=&quot;System.Threading.Overlapped&quot;> </xref> 네이티브 구조체에서 압축을 푼 정보가 포함 된 개체입니다."
  overload: System.Threading.Overlapped.Unpack*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>nativeOverlappedPtr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)
  id: UnsafePack(System.Threading.IOCompletionCallback)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: UnsafePack(IOCompletionCallback)
  nameWithType: Overlapped.UnsafePack(IOCompletionCallback)
  fullName: System.Threading.Overlapped.UnsafePack(IOCompletionCallback)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "현재 인스턴스를 팩는 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref> 비동기 I/O 작업이 완료 될 때 호출할 대리자를 지정 하는 구조입니다. 호출 스택을 전파 되지 않습니다."
  remarks: "겹쳐진된 I/O 작업의 운영 체제에이 메서드에서 반환 되는 관리 되지 않는 포인터를 전달할 수 있습니다. <xref:System.Threading.NativeOverlapped>될 때까지 실제 메모리의 구조는 고정 되어 <xref:System.Threading.Overlapped.Unpack%2A>호출 됩니다.</xref:System.Threading.Overlapped.Unpack%2A> </xref:System.Threading.NativeOverlapped>       호출자는 버퍼를 고정 하는 일을 담당 합니다. 그러나 응용 프로그램 도메인이 언로드되면 고정된 된 버퍼에 대 한 핸들 개체가 제거 되 고 버퍼 출시 되 면 해제 된 주소에 쓰려고 I/O 작업을 종료 합니다. 이러한 이유로 사용 하 여이 <xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29>런타임 버퍼를 고정 하는 메서드 오버 로드.</xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29>      > [!CAUTION] >를 사용 하 여는 <xref:System.Threading.Overlapped.UnsafePack%2A>메서드 실수로 보안 문제가 열 수 있습니다.</xref:System.Threading.Overlapped.UnsafePack%2A> 코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다. <xref:System.Threading.Overlapped.UnsafePack%2A>메서드 호출 스택을 전파 하지 않습니다.</xref:System.Threading.Overlapped.UnsafePack%2A> 악성 코드가 권한 검사를 방지 하기 위해이 취약점을 악용할 수 있습니다."
  syntax:
    content: public System.Threading.NativeOverlapped* UnsafePack (System.Threading.IOCompletionCallback iocb);
    parameters:
    - id: iocb
      type: System.Threading.IOCompletionCallback
      description: "<xref href=&quot;System.Threading.IOCompletionCallback&quot;> </xref> 비동기 I/O 작업이 완료 될 때 호출할 콜백 메서드를 나타내는 대리자입니다."
    return:
      type: System.Threading.NativeOverlapped*
      description: "에 대 한 관리 되지 않는 포인터는 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref> 구조입니다."
  overload: System.Threading.Overlapped.UnsafePack*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "현재 <xref href=&quot;System.Threading.Overlapped&quot;> </xref> 이미 대기 합니다."
  platform:
  - net462
- uid: System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)
  id: UnsafePack(System.Threading.IOCompletionCallback,System.Object)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: UnsafePack(IOCompletionCallback,Object)
  nameWithType: Overlapped.UnsafePack(IOCompletionCallback,Object)
  fullName: System.Threading.Overlapped.UnsafePack(IOCompletionCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "팩의 현재 인스턴스는 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref> 구조, 비동기 I/O 작업이 완료 되 고 관리 되는 개체를 호출 하는 대리자 버퍼 역할을 지정 합니다. 호출 스택을 전파 되지 않습니다."
  remarks: "겹쳐진된 I/O 작업의 운영 체제에이 메서드에서 반환 되는 관리 되지 않는 포인터를 전달할 수 있습니다. <xref:System.Threading.NativeOverlapped>될 때까지 실제 메모리의 구조는 고정 되어 <xref:System.Threading.Overlapped.Unpack%2A>호출 됩니다.</xref:System.Threading.Overlapped.Unpack%2A> </xref:System.Threading.NativeOverlapped>       에 지정 된 버퍼가 `userData` 비동기 I/O를 수행 하는 관리 되지 않는 운영 체제 함수에 전달 된 것과 동일 해야 합니다.       버퍼 또는 버퍼에 지정 된 고정 하는 런타임`userData` I/O 작업의 기간에 대 한 합니다. 응용 프로그램 도메인이 언로드되면 경우 런타임에서 I/O 작업이 완료 될 때까지 고정 된 메모리를 유지 합니다.      > [!CAUTION] >는 UnsafePack를 사용 하 여 메서드를 실수로 열 수 보안 문제가 있습니다. 코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다. UnsafePack 메서드 호출 스택을 전파 되지 않습니다. 악성 코드가 권한 검사를 방지 하기 위해이 취약점을 악용할 수 있습니다."
  syntax:
    content: public System.Threading.NativeOverlapped* UnsafePack (System.Threading.IOCompletionCallback iocb, object userData);
    parameters:
    - id: iocb
      type: System.Threading.IOCompletionCallback
      description: "<xref href=&quot;System.Threading.IOCompletionCallback&quot;> </xref> 비동기 I/O 작업이 완료 될 때 호출할 콜백 메서드를 나타내는 대리자입니다."
    - id: userData
      type: System.Object
      description: "개체 또는 작업에 대 한 입력 또는 출력 버퍼를 나타내는 개체의 배열입니다. 각 개체에는 예를 들어 바이트 배열을 버퍼를 나타냅니다."
    return:
      type: System.Threading.NativeOverlapped*
      description: "에 대 한 관리 되지 않는 포인터는 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref> 구조입니다."
  overload: System.Threading.Overlapped.UnsafePack*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출자에 게 필요한 권한이 없습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "현재 <xref href=&quot;System.Threading.Overlapped&quot;> </xref> 이미 대기 합니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Threading.Overlapped.#ctor
  parent: System.Threading.Overlapped
  isExternal: false
  name: Overlapped()
  nameWithType: Overlapped.Overlapped()
  fullName: System.Threading.Overlapped.Overlapped()
- uid: System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Overlapped(Int32,Int32,Int32,IAsyncResult)
  nameWithType: Overlapped.Overlapped(Int32,Int32,Int32,IAsyncResult)
  fullName: System.Threading.Overlapped.Overlapped(Int32,Int32,Int32,IAsyncResult)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  nameWithType: Overlapped.Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  fullName: System.Threading.Overlapped.Overlapped(Int32,Int32,IntPtr,IAsyncResult)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Threading.Overlapped.AsyncResult
  parent: System.Threading.Overlapped
  isExternal: false
  name: AsyncResult
  nameWithType: Overlapped.AsyncResult
  fullName: System.Threading.Overlapped.AsyncResult
- uid: System.Threading.Overlapped.EventHandle
  parent: System.Threading.Overlapped
  isExternal: false
  name: EventHandle
  nameWithType: Overlapped.EventHandle
  fullName: System.Threading.Overlapped.EventHandle
- uid: System.Threading.Overlapped.EventHandleIntPtr
  parent: System.Threading.Overlapped
  isExternal: false
  name: EventHandleIntPtr
  nameWithType: Overlapped.EventHandleIntPtr
  fullName: System.Threading.Overlapped.EventHandleIntPtr
- uid: System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Free(NativeOverlapped*)
  nameWithType: Overlapped.Free(NativeOverlapped*)
  fullName: System.Threading.Overlapped.Free(NativeOverlapped*)
- uid: System.Threading.Overlapped.OffsetHigh
  parent: System.Threading.Overlapped
  isExternal: false
  name: OffsetHigh
  nameWithType: Overlapped.OffsetHigh
  fullName: System.Threading.Overlapped.OffsetHigh
- uid: System.Threading.Overlapped.OffsetLow
  parent: System.Threading.Overlapped
  isExternal: false
  name: OffsetLow
  nameWithType: Overlapped.OffsetLow
  fullName: System.Threading.Overlapped.OffsetLow
- uid: System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Pack(IOCompletionCallback)
  nameWithType: Overlapped.Pack(IOCompletionCallback)
  fullName: System.Threading.Overlapped.Pack(IOCompletionCallback)
- uid: System.Threading.IOCompletionCallback
  parent: System.Threading
  isExternal: false
  name: IOCompletionCallback
  nameWithType: IOCompletionCallback
  fullName: System.Threading.IOCompletionCallback
- uid: System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Pack(IOCompletionCallback,Object)
  nameWithType: Overlapped.Pack(IOCompletionCallback,Object)
  fullName: System.Threading.Overlapped.Pack(IOCompletionCallback,Object)
- uid: System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Unpack(NativeOverlapped*)
  nameWithType: Overlapped.Unpack(NativeOverlapped*)
  fullName: System.Threading.Overlapped.Unpack(NativeOverlapped*)
- uid: System.Threading.Overlapped
  parent: System.Threading
  isExternal: false
  name: Overlapped
  nameWithType: Overlapped
  fullName: System.Threading.Overlapped
- uid: System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)
  parent: System.Threading.Overlapped
  isExternal: false
  name: UnsafePack(IOCompletionCallback)
  nameWithType: Overlapped.UnsafePack(IOCompletionCallback)
  fullName: System.Threading.Overlapped.UnsafePack(IOCompletionCallback)
- uid: System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)
  parent: System.Threading.Overlapped
  isExternal: false
  name: UnsafePack(IOCompletionCallback,Object)
  nameWithType: Overlapped.UnsafePack(IOCompletionCallback,Object)
  fullName: System.Threading.Overlapped.UnsafePack(IOCompletionCallback,Object)
- uid: System.Threading.Overlapped.#ctor*
  parent: System.Threading.Overlapped
  isExternal: false
  name: Overlapped
  nameWithType: Overlapped.Overlapped
- uid: System.Threading.Overlapped.AsyncResult*
  parent: System.Threading.Overlapped
  isExternal: false
  name: AsyncResult
  nameWithType: Overlapped.AsyncResult
- uid: System.Threading.Overlapped.EventHandle*
  parent: System.Threading.Overlapped
  isExternal: false
  name: EventHandle
  nameWithType: Overlapped.EventHandle
- uid: System.Threading.Overlapped.EventHandleIntPtr*
  parent: System.Threading.Overlapped
  isExternal: false
  name: EventHandleIntPtr
  nameWithType: Overlapped.EventHandleIntPtr
- uid: System.Threading.Overlapped.Free*
  parent: System.Threading.Overlapped
  isExternal: false
  name: Free
  nameWithType: Overlapped.Free
- uid: System.Threading.Overlapped.OffsetHigh*
  parent: System.Threading.Overlapped
  isExternal: false
  name: OffsetHigh
  nameWithType: Overlapped.OffsetHigh
- uid: System.Threading.Overlapped.OffsetLow*
  parent: System.Threading.Overlapped
  isExternal: false
  name: OffsetLow
  nameWithType: Overlapped.OffsetLow
- uid: System.Threading.Overlapped.Pack*
  parent: System.Threading.Overlapped
  isExternal: false
  name: Pack
  nameWithType: Overlapped.Pack
- uid: System.Threading.Overlapped.Unpack*
  parent: System.Threading.Overlapped
  isExternal: false
  name: Unpack
  nameWithType: Overlapped.Unpack
- uid: System.Threading.Overlapped.UnsafePack*
  parent: System.Threading.Overlapped
  isExternal: false
  name: UnsafePack
  nameWithType: Overlapped.UnsafePack
