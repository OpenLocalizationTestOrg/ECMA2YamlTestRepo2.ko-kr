### YamlMime:ManagedReference
items:
- uid: System.Web.Routing.PageRouteHandler
  id: PageRouteHandler
  children:
  - System.Web.Routing.PageRouteHandler.#ctor(System.String)
  - System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  - System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  - System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  - System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  - System.Web.Routing.PageRouteHandler.VirtualPath
  langs:
  - csharp
  name: PageRouteHandler
  nameWithType: PageRouteHandler
  fullName: System.Web.Routing.PageRouteHandler
  type: Class
  summary: "URL을 실제 파일에 매핑되는 방식을 정의 하기 위한 메서드와 속성을 제공 합니다."
  remarks: "에 PageRouteHandler의 인스턴스를 전달는 <xref:System.Web.Routing.Route>물리적 파일의 URL을 매핑하려면 생성자.</xref:System.Web.Routing.Route> PageRouteHandler 개체는 물리적 파일의 가상 경로 지정 하 고 실제 URL에 대 한 권한 부여 규칙 선택 되었는지 여부를 결정 합니다."
  syntax:
    content: 'public class PageRouteHandler : System.Web.Routing.IRouteHandler'
  inheritance:
  - System.Object
  implements:
  - System.Web.Routing.IRouteHandler
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: PageRouteHandler(String)
  nameWithType: PageRouteHandler.PageRouteHandler(String)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Routing.PageRouteHandler&quot;> </xref> 클래스입니다."
  remarks: "이 생성자를 사용 하는 경우는 <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>속성이 `true`.</xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>"
  syntax:
    content: public PageRouteHandler (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "이 대 한 실제 파일의 가상 경로 <xref:System.Web.Routing.RouteData.Route*>개체입니다.</xref:System.Web.Routing.RouteData.Route*> 파일이 현재 응용 프로그램에 있어야 합니다. 따라서 경로 물결표 (~)로 시작 해야 합니다."
  overload: System.Web.Routing.PageRouteHandler.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> virtualPath </code> 매개 변수는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 은 빈 문자열 또는 숫자로 시작 하지 않는 &quot;~ /&quot;입니다."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: PageRouteHandler(String,Boolean)
  nameWithType: PageRouteHandler.PageRouteHandler(String,Boolean)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.Routing.PageRouteHandler&quot;> </xref> 클래스입니다."
  remarks: "기본적으로는 <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>속성은 `true`.</xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> 따라서, 물리적 페이지의 URL과 경로 URL을 적용 하는 권한 부여 규칙을 사용 하도록 하려는 경우 사용할 수 있습니다는 <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29>이 생성자 대신.</xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29>"
  syntax:
    content: public PageRouteHandler (string virtualPath, bool checkPhysicalUrlAccess);
    parameters:
    - id: virtualPath
      type: System.String
      description: "이 대 한 실제 파일의 가상 경로 <xref:System.Web.Routing.RouteData.Route*>개체입니다.</xref:System.Web.Routing.RouteData.Route*> 파일이 현재 응용 프로그램에 있어야 합니다. 따라서 경로 물결표 (~)로 시작 해야 합니다."
    - id: checkPhysicalUrlAccess
      type: System.Boolean
      description: "이 속성은로 설정 하는 경우 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, 물리적 페이지의 URL 아니라 요청 URL에 권한 부여 규칙을 적용 됩니다. 이 속성은로 설정 하는 경우 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, 물리적 페이지의 URL과 요청 url 권한 부여 규칙을 적용 됩니다."
  overload: System.Web.Routing.PageRouteHandler.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> virtualPath </code> 매개 변수는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 은 빈 문자열 또는 숫자로 시작 하지 않는 &quot;~ /&quot;입니다."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  id: CheckPhysicalUrlAccess
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
  fullName: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "권한 부여 규칙 물리적 파일의 URL에 적용 되었는지 여부를 결정 하는 값을 가져옵니다."
  remarks: "사용 하는 경우 CheckPhysicalUrlAccess 속성을 설정할 수 있습니다는 <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29>생성자.</xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29>       CheckPhysicalUrlAccess 속성의 값에 따라 결정 여부는 <xref:System.Web.Routing.PageRouteHandler>개체는 물리적 페이지와 경로 URL 또는 경로 URL에 대 한 보안 권한을 확인 합니다.</xref:System.Web.Routing.PageRouteHandler>       CheckPhysicalUrlAccess 속성이로 설정 된 경우 `true` (기본값) 인 사용자는 경로 URL 및 실제 URL 모두를 액세스할 수 있는 권한이 있어야 합니다. CheckPhysicalUrlAccess 속성이로 설정 되 면 `false`, 사용자가 필요로 하는 경로 URL 액세스 권한만 및 실제 URL에 대 한 권한을 확인 하지 않습니다.       다음 예제와 같이 권한이 Web.config 파일에 정의 되어: ```   <configuration>     <location path=&quot;categoriespage.aspx&quot;>       <system.web>         <authorization>           <allow roles=&quot;admin&quot;/>           <deny users=&quot;*&quot;/>         </authorization>       </system.web>     </location>     <location path=&quot;category&quot;>       <system.web>         <authorization>           <allow users=&quot;*&quot;/>         </authorization>       </system.web>     </location>   </configuration>   ``` 포함 된 요청 URL에 대 한 `Category/food/show` 경로의 URL 패턴을 하는 경우 도메인 이름 뒤에 오는 `Category/{action}/{categoryName}` 물리적 페이지는 Categoriespage.aspx, [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] 다음 방법 중 하나에 앞의 예에서 정의 된 사용 권한을 적용: CheckPhysicalUrlAccess 속성이- `false`, 모든 사용자에 게 액세스 권한이 부여 된 모든 사용자가 액세스를 부여한로 시작 하는 URL 패턴, `category`합니다.      -CheckPhysicalUrlAccess 속성이 이면 `true`만 `admin` 사용자에 대 한 액세스 권한이 부여 됩니다. 모든 사용자가로 시작 하는 URL 패턴에 대 한 액세스 `category`만 `admin` 사용자 Categoriespage.aspx 물리적 페이지에 액세스 해야 합니다."
  syntax:
    content: public bool CheckPhysicalUrlAccess { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경로와 연결 된 실제 파일의 URL에 대 한 권한 부여를 확인 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  id: GetHttpHandler(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: GetHttpHandler(RequestContext)
  nameWithType: PageRouteHandler.GetHttpHandler(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetHttpHandler(RequestContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "요청을 처리 하는 개체를 반환 합니다."
  syntax:
    content: public virtual System.Web.IHttpHandler GetHttpHandler (System.Web.Routing.RequestContext requestContext);
    parameters:
    - id: requestContext
      type: System.Web.Routing.RequestContext
      description: "요청에 대 한 정보를 캡슐화 하는 개체입니다."
    return:
      type: System.Web.IHttpHandler
      description: "요청을 처리 하는 개체입니다."
  overload: System.Web.Routing.PageRouteHandler.GetHttpHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestContext</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  id: GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: GetSubstitutedVirtualPath(RequestContext)
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "대체가 대체 매개 변수에 적용 된 후에 경로 대 한 실제 파일의 가상 경로 반환 합니다."
  remarks: "경우는 <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>값이 대체 매개 변수를 포함 하지,와 동일한 값을 반환 하는 GetSubstitutedVirtualPath 메서드는 <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>속성.</xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> </xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>"
  syntax:
    content: public string GetSubstitutedVirtualPath (System.Web.Routing.RequestContext requestContext);
    parameters:
    - id: requestContext
      type: System.Web.Routing.RequestContext
      description: "요청에 대 한 정보를 캡슐화 하는 개체입니다."
    return:
      type: System.String
      description: "실제 파일 경로에서 생성 된을의 URL입니다."
  overload: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestContext</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.VirtualPath
  id: VirtualPath
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
  fullName: System.Web.Routing.PageRouteHandler.VirtualPath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "이 경로와 연결 된 웹 페이지의 가상 경로 가져옵니다."
  remarks: "VirtualPath 속성에서 설정 된 <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName>생성자 또는 <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName>생성자.</xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName> </xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName>"
  syntax:
    content: public string VirtualPath { get; }
    return:
      type: System.String
      description: "대체 매개 변수 대체가 적용 되기 전에 웹 페이지의 URL입니다."
  overload: System.Web.Routing.PageRouteHandler.VirtualPath*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler(String)
  nameWithType: PageRouteHandler.PageRouteHandler(String)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler(String,Boolean)
  nameWithType: PageRouteHandler.PageRouteHandler(String,Boolean)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
  fullName: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetHttpHandler(RequestContext)
  nameWithType: PageRouteHandler.GetHttpHandler(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetHttpHandler(RequestContext)
- uid: System.Web.IHttpHandler
  parent: System.Web
  isExternal: false
  name: IHttpHandler
  nameWithType: IHttpHandler
  fullName: System.Web.IHttpHandler
- uid: System.Web.Routing.RequestContext
  parent: System.Web.Routing
  isExternal: true
  name: RequestContext
  nameWithType: RequestContext
  fullName: System.Web.Routing.RequestContext
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetSubstitutedVirtualPath(RequestContext)
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
- uid: System.Web.Routing.PageRouteHandler.VirtualPath
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
  fullName: System.Web.Routing.PageRouteHandler.VirtualPath
- uid: System.Web.Routing.PageRouteHandler.#ctor*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler
  nameWithType: PageRouteHandler.PageRouteHandler
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetHttpHandler
  nameWithType: PageRouteHandler.GetHttpHandler
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetSubstitutedVirtualPath
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath
- uid: System.Web.Routing.PageRouteHandler.VirtualPath*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
