### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.UdpClient
  id: UdpClient
  children:
  - System.Net.Sockets.UdpClient.#ctor
  - System.Net.Sockets.UdpClient.#ctor(System.Int32)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Active
  - System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  - System.Net.Sockets.UdpClient.Available
  - System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.Client
  - System.Net.Sockets.UdpClient.Close
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Dispose
  - System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  - System.Net.Sockets.UdpClient.DontFragment
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.EnableBroadcast
  - System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  - System.Net.Sockets.UdpClient.ExclusiveAddressUse
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.MulticastLoopback
  - System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.ReceiveAsync
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Ttl
  langs:
  - csharp
  name: UdpClient
  nameWithType: UdpClient
  fullName: System.Net.Sockets.UdpClient
  type: Class
  summary: "데이터 그램 프로토콜 UDP (User) 네트워크 서비스를 제공합니다."
  remarks: "The UdpClient class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways:  \n  \n-   Create an instance of the UdpClient class using the remote host name and port number as parameters.  \n  \n-   Create an instance of the UdpClient class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.  \n  \n You can use any of the send methods provided in the UdpClient to send data to a remote device. Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.  \n  \n> [!NOTE]\n>  Do not call [Send(Byte\\[\\], Int32, IPEndPoint)](assetId:///M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)?qualifyHint=False&autoUpgrade=True) using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host. If you do, UdpClient will throw an exception.  \n  \n UdpClient methods also allow you to send and receive multicast datagrams. Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a UdpClient to a multicast group. Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a UdpClient from a multicast group."
  example:
  - "The following example establishes a UdpClient connection using the host name www.contoso.com on port 11000. A small string message is sent to two separate remote host machines. The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until a message is received. Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.  \n  \n [!code-vb[Classic UdpClientExample#1](~/add/codesnippet/visualbasic/t-system.net.sockets.udp_1.vb)]\n [!code-cpp[Classic UdpClientExample#1](~/add/codesnippet/cpp/t-system.net.sockets.udp_1.cpp)]\n [!code-cs[Classic UdpClientExample#1](~/add/codesnippet/csharp/t-system.net.sockets.udp_1.cs)]"
  syntax:
    content: 'public class UdpClient : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor
  id: '#ctor'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 클래스입니다."
  remarks: "이 생성자는 새 만듭니다 <xref:System.Net.Sockets.UdpClient>가장 적절 한 로컬 IPv4 주소와 포트 번호를 할당 하려면 기본 서비스 공급자 수 있습니다.</xref:System.Net.Sockets.UdpClient> 이 생성자를 사용 하는 경우는 <xref:System.Net.Sockets.UdpClient>인스턴스는 변경 하거나 IPv6 대상 사용 하 여 connect 메서드 호출에 의해 덮어쓸 수 없는 IPv4 주소 패밀리도 설정 됩니다.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > 수신 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다.       이 생성자 소켓 바인딩을 수행 하지 않으므로 멀티 캐스트 그룹에 가입에 적합 하지 않습니다. IPv4 주소 형식에만 작동합니다."
  example:
  - "The following example demonstrates how to use the default constructor to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/csharp/m-system.net.sockets.udp_11_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/cpp/m-system.net.sockets.udp_11_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_11_1.vb)]"
  syntax:
    content: public UdpClient ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 클래스를 제공 하는 로컬 포트 번호에 바인딩합니다."
  remarks: "이 생성자는 기본 만듭니다 <xref:System.Net.Sockets.Socket>통신 하려는 포트 번호에 바인딩합니다.</xref:System.Net.Sockets.Socket> 로컬 포트 번호를 설정 하려는 경우이 생성자를 사용 합니다. 기본 서비스 공급자는 로컬 IP 주소를 할당 합니다. 생성자에 0을 전달 하는 경우 기본 서비스 공급자가 포트 번호를 할당 합니다. 이 생성자를 사용 하는 경우는 <xref:System.Net.Sockets.UdpClient>인스턴스는 변경 하거나 IPv6 대상 사용 하 여 connect 메서드 호출에 의해 덮어쓸 수 없는 IPv4 주소 패밀리도 설정 됩니다.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > 수신 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다.       이 생성자는 IPv4 주소 유형 에서만 작동합니다."
  example:
  - "The following example demonstrates using a local port number to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_4_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_4_1.vb)]"
  syntax:
    content: public UdpClient (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "통신 하려는 로컬 포트 번호입니다."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> port </code> 매개 변수 <xref:System.Net.IPEndPoint.MaxPort>또는 <xref:System.Net.IPEndPoint.MinPort>.</xref:System.Net.IPEndPoint.MinPort> 보다 작은</xref:System.Net.IPEndPoint.MaxPort> 보다 큽니다."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 클래스 지정된 된 로컬 끝점에 바인딩합니다."
  remarks: "이 생성자는 새 만듭니다 <xref:System.Net.Sockets.UdpClient>에 바인딩합니다는 <xref:System.Net.IPEndPoint>에 지정 된는 `localEP` 매개 변수.</xref:System.Net.IPEndPoint> </xref:System.Net.Sockets.UdpClient> 이 생성자를 호출 하기 전에 만들어야 합니다는 <xref:System.Net.IPEndPoint>보내고 받는 데이터를 가져오려는 IP 주소와 포트 번호를 사용 하 여.</xref:System.Net.IPEndPoint> 데이터 보내기 및 받기에 대 한 로컬 IP 주소와 포트 번호를 지정할 필요가 없습니다. 그렇지 않으면 내부 서비스 공급자가 가장 적절 한 로컬 IP 주소와 포트 번호를 할당 합니다.       이 생성자를 사용 하는 경우는 <xref:System.Net.Sockets.UdpClient>인스턴스에 의해 지정 된 주소 집합으로 설정 된는 `localEP` 매개 변수를 변경 하거나 다른 주소 패밀리 connect 메서드 호출에 의해 덮어쓸 수 없습니다.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > 수신 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다."
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a local endpoint.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_9_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_9_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_9_1.vb)]"
  syntax:
    content: public UdpClient (System.Net.IPEndPoint localEP);
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>나타내는 UDP 연결을 바인딩할 로컬 끝점입니다.</xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localEP</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 클래스입니다."
  remarks: "`family` 매개 변수는 수신기 IP 버전 4 주소 (IPv4) 또는 IP 버전 6 (IPv6)를 사용 하는지를 결정 주소입니다. IPv4 주소를 사용 하려면 전달 된 <xref:System.Net.Sockets.AddressFamily>값.</xref:System.Net.Sockets.AddressFamily> IPv6 주소를 사용 하려면 전달 된 <xref:System.Net.Sockets.AddressFamily>값.</xref:System.Net.Sockets.AddressFamily> 다른 값을 전달 하면 <xref:System.ArgumentException>.</xref:System.ArgumentException> throw 메서드       이 생성자를 사용 하는 경우는 <xref:System.Net.Sockets.UdpClient>인스턴스에 의해 지정 된 주소 집합으로 설정 된는 `family` 매개 변수를 변경 하거나 다른 주소 패밀리 connect 메서드 호출에 의해 덮어쓸 수 없습니다.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > 수신 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다.       UdpClient 소켓 바인딩을 수행 하지 않으므로 멀티 캐스트 그룹에 가입에 적합 하지 않습니다."
  syntax:
    content: public UdpClient (System.Net.Sockets.AddressFamily family);
    parameters:
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "중 하나는 <xref:System.Net.Sockets.AddressFamily>소켓의 주소 지정 체계를 지정 하는 값입니다.</xref:System.Net.Sockets.AddressFamily>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code>is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Int32,System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 클래스를 제공 하는 로컬 포트 번호에 바인딩합니다."
  remarks: "이 생성자는 기본 만듭니다 <xref:System.Net.Sockets.Socket>통신 하려는 포트 번호에 바인딩합니다.</xref:System.Net.Sockets.Socket>       `family` 매개 변수는 수신기 IP 버전 4 주소 (IPv4) 또는 IP 버전 6 (IPv6)를 사용 하는지를 결정 주소입니다. IPv4 주소를 사용 하려면 전달 된 <xref:System.Net.Sockets.AddressFamily>값.</xref:System.Net.Sockets.AddressFamily> IPv6 주소를 사용 하려면 전달 된 <xref:System.Net.Sockets.AddressFamily>값.</xref:System.Net.Sockets.AddressFamily> 다른 값을 전달 하면 <xref:System.ArgumentException>.</xref:System.ArgumentException> throw 메서드       이 생성자를 사용 하는 경우는 <xref:System.Net.Sockets.UdpClient>인스턴스에 의해 지정 된 주소 집합으로 설정 된는 `family` 매개 변수를 변경 하거나 다른 주소 패밀리 connect 메서드 호출에 의해 덮어쓸 수 없습니다.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > 수신 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후 설명서를 참조는 Windows 소켓 버전 2 API 오류 코드 MSDN에서 오류에 대 한 자세한 설명은."
  example:
  - "The following code example shows how to create a UDP client to use in a multicast group.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/cpp/c2c91fdb-fd73-47cc-8239-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/visualbasic/c2c91fdb-fd73-47cc-8239-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/csharp/c2c91fdb-fd73-47cc-8239-_1.cs)]"
  syntax:
    content: public UdpClient (int port, System.Net.Sockets.AddressFamily family);
    parameters:
    - id: port
      type: System.Int32
      description: "들어오는 연결 시도를 수신 대기할 포트입니다."
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "중 하나는 <xref:System.Net.Sockets.AddressFamily>소켓의 주소 지정 체계를 지정 하는 값입니다.</xref:System.Net.Sockets.AddressFamily>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code>is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>보다 큰 <xref:System.Net.IPEndPoint.MaxPort> 또는 미만 <xref:System.Net.IPEndPoint.MinPort>합니다."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 클래스 및 기본 원격 호스트를 설정 합니다."
  remarks: "이 생성자는 새 <xref:System.Net.Sockets.UdpClient>를 사용 하 여 원격 호스트를 설정 하 고는 `hostname` 및 `port` 매개 변수.</xref:System.Net.Sockets.UdpClient> 기본 원격 호스트를 설정 하는 것은 선택 사항입니다. 이 생성자를 사용 하는 경우를 호출할 때마다 원격 호스트를 지정할 필요가 없습니다는 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드.</xref:System.Net.Sockets.UdpClient.Send%2A> 기본 원격 호스트를 지정 하면 해당 호스트에만 제한 됩니다. 기본 원격 호스트를 호출 하 여 언제 든 지 변경할 수 있습니다는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드.</xref:System.Net.Sockets.UdpClient.Connect%2A> 원격 호스트에 대 한 호출에서 지정 하려는 경우는 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드를이 생성자를 사용 하지 마십시오.</xref:System.Net.Sockets.UdpClient.Send%2A>      > [!NOTE] > 수신 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다."
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a host name and port number.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/csharp/m-system.net.sockets.udp_7_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/cpp/m-system.net.sockets.udp_7_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_7_1.vb)]"
  syntax:
    content: public UdpClient (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "연결 하려는 원격 DNS 호스트의 이름입니다."
    - id: port
      type: System.Int32
      description: "연결 하려는 원격 포트 번호입니다."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hostname</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>사이 있지 않은 <xref:System.Net.IPEndPoint.MinPort> 및 <xref:System.Net.IPEndPoint.MaxPort>합니다."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Active
  id: Active
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "기본 원격 호스트를 설정 되었는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "파생 된 클래스 <xref:System.Net.Sockets.UdpClient>기본 원격 호스트를 설정 된 경우를 확인 하려면이 속성을 사용할 수 있습니다.</xref:System.Net.Sockets.UdpClient> 적절 한 생성자를 사용 하 여 또는 호출 하 여 기본 원격 호스트를 설정할 수 있습니다는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드.</xref:System.Net.Sockets.UdpClient.Connect%2A> <xref:System.Net.Sockets.UdpClient.Send%2A>.</xref:System.Net.Sockets.UdpClient.Send%2A> 를 호출 하 여 원격 호스트에서 기본 원격 호스트를 설정 하는 경우 지정할 수 없습니다."
  syntax:
    content: protected bool Active { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>연결이 활성 상태 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.Sockets.UdpClient.Active*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  id: AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "네트워크 주소 변환 (NAT) 순회를 사용할지는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 인스턴스."
  remarks: "활성화 하거나 비활성화에 대 한 NAT 통과 하 고 AllowNatTraversal 메서드를 사용 하는 한 <xref:System.Net.Sockets.UdpClient>인스턴스.</xref:System.Net.Sockets.UdpClient> Teredo, 6to4 또는 ISATAP 터널을 사용 하 여 NAT 통과 제공할 수 있습니다.       경우는 `allowed` false 이면 매개 변수는 <xref:System.Net.Sockets.SocketOptionName>관련된 소켓의 옵션은 <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> 로 설정</xref:System.Net.Sockets.SocketOptionName> 이 명시적으로 사용 하지 않도록 설정에 대 한 NAT 통과 한 <xref:System.Net.Sockets.UdpClient>인스턴스.</xref:System.Net.Sockets.UdpClient>       경우는 `allowed` 매개 변수는 true 이면 <xref:System.Net.Sockets.SocketOptionName>연결된 된 소켓에 옵션이 <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> 로 설정 되어</xref:System.Net.Sockets.SocketOptionName> 에 대 한 NAT 통과 허용할 수 있습니다이 <xref:System.Net.Sockets.UdpClient>시스템의 방화벽 규칙에 따라.</xref:System.Net.Sockets.UdpClient>       Teredo 주소는 IPv6 주소 2001 접두사로:: / 32입니다. Teredo 주소는 일반 DNS 이름 확인을 통해 반환 또는 로컬 인터페이스에 할당 된 IPv6 주소로 열거 수 있습니다."
  syntax:
    content: public void AllowNatTraversal (bool allowed);
    parameters:
    - id: allowed
      type: System.Boolean
      description: "NAT 통과 사용할지 여부를 지정 하는 부울 값입니다."
  overload: System.Net.Sockets.UdpClient.AllowNatTraversal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Available
  id: Available
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "읽을 수 있는 네트워크에서 받은 데이터의 양을 가져옵니다."
  remarks: "사용 가능한 속성은 읽기에 대 한 네트워크 버퍼에 대기 하는 데이터의 양을 결정 하는 데이터를 사용할 수 있으면 호출 <xref:System.Net.Sockets.NetworkStream.Read%2A>데이터를 가져올 수 있습니다.</xref:System.Net.Sockets.NetworkStream.Read%2A> 사용할 수 있는 데이터가 없는 경우 사용 가능한 속성 0을 반환 합니다.       원격 호스트 종료 되거나 사용할 수 있는 속성 throw에 <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException>      > [!NOTE] > 나타나면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 MSDN library에서 Windows 소켓 버전 2 API 오류 코드 설명서를 참조 [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/ 오류에 대 한 자세한 설명은.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException>"
  example:
  - "The following code example shows the use of the Available property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_1_1.cpp)]"
  syntax:
    content: public int Available { get; }
    return:
      type: System.Int32
      description: "네트워크에서 받은 데이터의 바이트 수입니다."
  overload: System.Net.Sockets.UdpClient.Available*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 동안 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.Net.Sockets.Socket>닫혔습니다.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  id: BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "원격 호스트에서 비동기적으로 데이터 그램을 받습니다."
  remarks: "호출 하 여 비동기 BeginReceive 작업을 완료 해야는 <xref:System.Net.Sockets.UdpClient.EndReceive%2A>메서드.</xref:System.Net.Sockets.UdpClient.EndReceive%2A> 메서드는 일반적으로 `requestCallback` 위임 합니다.       이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다. 작업이 완료 될 때까지 차단 된 <xref:System.Net.Sockets.UdpClient.Receive%2A>메서드.</xref:System.Net.Sockets.UdpClient.Receive%2A>       비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example uses BeginReceive to asynchronously receive a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_12_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_12_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);
    parameters:
    - id: requestCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>작업이 완료 될 때 호출할 메서드를 참조 하는 대리자입니다.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "수신 작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다. 이 개체에 전달 되는 `requestCallback` 작업이 완료 될 때 위임 합니다."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>비동기 수신을 참조 하는 개체입니다.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginReceive*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "데이터 그램 원격 호스트에 비동기적으로 보냅니다. 대상은 <xref:System.Net.Sockets.UdpClient.Connect*>.</xref:System.Net.Sockets.UdpClient.Connect*> 를 호출 하 여 이전에 지정 된"
  remarks: "호출 하 여 비동기 BeginSend 작업을 완료 해야는 <xref:System.Net.Sockets.UdpClient.EndSend%2A>메서드.</xref:System.Net.Sockets.UdpClient.EndSend%2A> 메서드는 일반적으로 `requestCallback` 위임 합니다.       이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다. 작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드 오버 로드.</xref:System.Net.Sockets.UdpClient.Send%2A>       비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example uses BeginSend to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "A <xref:System.Byte>보낼 데이터가 들어 있는 배열입니다.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "보낼 바이트 수입니다."
    - id: requestCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>작업이 완료 될 때 호출할 메서드를 참조 하는 대리자입니다.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "또한 보내기 작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다. 이 개체에 전달 되는 `requestCallback` 작업이 완료 될 때 위임 합니다."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>비동기 발신 참조 하는 개체입니다.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "데이터 그램 대상에 비동기적으로 보냅니다. 대상은 <xref:System.Net.EndPoint>.</xref:System.Net.EndPoint> 지정"
  remarks: "호출 하 여 비동기 BeginSend 작업을 완료 해야는 <xref:System.Net.Sockets.UdpClient.EndSend%2A>메서드.</xref:System.Net.Sockets.UdpClient.EndSend%2A> 메서드는 일반적으로 `requestCallback` 위임 합니다.       이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다. 작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드 오버 로드.</xref:System.Net.Sockets.UdpClient.Send%2A>       비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "A <xref:System.Byte>보낼 데이터가 들어 있는 배열입니다.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "보낼 바이트 수입니다."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.EndPoint>데이터 대상을 나타내는.</xref:System.Net.EndPoint>"
    - id: requestCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>작업이 완료 될 때 호출할 메서드를 참조 하는 대리자입니다.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "또한 보내기 작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다. 이 개체에 전달 되는 `requestCallback` 작업이 완료 될 때 위임 합니다."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>비동기 발신 참조 하는 개체입니다.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "데이터 그램 대상에 비동기적으로 보냅니다. 대상 호스트 이름으로 지정 하 고 포트 번호입니다."
  remarks: "호출 하 여 비동기 BeginSend 작업을 완료 해야는 <xref:System.Net.Sockets.UdpClient.EndSend%2A>메서드.</xref:System.Net.Sockets.UdpClient.EndSend%2A> 메서드는 일반적으로 `requestCallback` 위임 합니다.       이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다. 작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드 오버 로드.</xref:System.Net.Sockets.UdpClient.Send%2A>       비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "A <xref:System.Byte>보낼 데이터가 들어 있는 배열입니다.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "보낼 바이트 수입니다."
    - id: hostname
      type: System.String
      description: "대상 호스트입니다."
    - id: port
      type: System.Int32
      description: "대상 포트 번호입니다."
    - id: requestCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>작업이 완료 될 때 호출할 메서드를 참조 하는 대리자입니다.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "또한 보내기 작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다. 이 개체에 전달 되는 `requestCallback` 작업이 완료 될 때 위임 합니다."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>비동기 발신 참조 하는 개체입니다.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Client
  id: Client
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "기본 네트워크 <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> 을 가져오거나 설정 합니다."
  remarks: "<xref:System.Net.Sockets.UdpClient>만듭니다는 <xref:System.Net.Sockets.Socket>네트워크를 통해 데이터를 송수신 하는 데 사용 합니다.</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient> <xref:System.Net.Sockets.UdpClient>이 속성을 가져오거나이 <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> 설정 사용</xref:System.Net.Sockets.UdpClient> 에서 파생 된 클래스 기본 사용 하 여 <xref:System.Net.Sockets.Socket>그 외에도 액세스 해야 하는 경우 클라이언트에서 반환 되는 <xref:System.Net.Sockets.UdpClient>제공.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.Socket> 또한 클라이언트를 사용 하 여 설정 하는 기본 <xref:System.Net.Sockets.Socket>기존 <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.Socket> 수 있습니다. 단순 하기 때문에 <xref:System.Net.Sockets.UdpClient>기존 <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> 를 사용 하 여</xref:System.Net.Sockets.UdpClient> 기능을 활용 하려는 경우에 유용"
  example:
  - "The following example demonstrates the use of the Client property. In this example, broadcasting is enabled for the underlying <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cs[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_0_1.cs)]\n [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_0_1.cpp)]\n [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/p-system.net.sockets.udp_0_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket Client { get; set; }
    return:
      type: System.Net.Sockets.Socket
      description: "기본 네트워크 <xref:System.Net.Sockets.Socket>입니다.</xref:System.Net.Sockets.Socket>"
  overload: System.Net.Sockets.UdpClient.Client*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Close
  id: Close
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "UDP 연결을 닫습니다."
  remarks: "닫기 기본 <xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.UdpClient>.</xref:System.Net.Sockets.UdpClient> 와 관련 된 모든 관리 되는 관리 되지 않는 리소스를 해제 하 고</xref:System.Net.Sockets.Socket> 사용 하지 않도록 설정      > [!NOTE] > 수신 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다."
  example:
  - "The following example demonstrates closing a <xref:System.Net.Sockets.UdpClient> by calling the Close method.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/csharp/m-system.net.sockets.udp_10_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/cpp/m-system.net.sockets.udp_10_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_10_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Close*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  id: Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "지정된 된 네트워크 끝점을 사용 하 여 기본 원격 호스트를 설정 합니다."
  remarks: "<xref:System.Net.Sockets.UdpClient.Connect%2A>메서드 설정에 지정 된 값을 사용 하 여 기본 원격 호스트는 `endPoint` 매개 변수.</xref:System.Net.Sockets.UdpClient.Connect%2A> 설정 되 고 나면 필요가 없습니다를 호출할 때마다에서 원격 호스트를 지정 하는 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드.</xref:System.Net.Sockets.UdpClient.Send%2A>       기본 원격 호스트를 설정 하는 것은 선택 사항입니다. 기본 원격 호스트를 지정 하면 해당 호스트에만 제한 됩니다. 다른 호출 해야 다른 원격 호스트에 데이터 그램을 보내려는 경우는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드 또는 다른 만들 <xref:System.Net.Sockets.UdpClient>기본 원격 호스트 하지 않고.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.Connect%2A> 기본 원격을 사용 하도록 설정한 경우 호스트 하는 원격 호스트 호출 된 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드, <xref:System.Net.Sockets.UdpClient.Send%2A> <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> 을 throw 합니다.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> 표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다.       호출 하는 경우는 <xref:System.Net.Sockets.Socket.Connect%2A>메서드를 지정된 된 기본 되는데 것과 다른 주소에서 도착 하는 모든 데이터 그램.</xref:System.Net.Sockets.Socket.Connect%2A> 기본 원격 호스트에서 상속 하는 경우가 아니면이 메서드를 사용 하 여 브로드캐스트 주소를 설정할 수 없습니다 <xref:System.Net.Sockets.UdpClient>, 클라이언트 메서드를 사용 하 여 기본 가져올 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> 소켓 옵션을 설정 하 고</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       그러나 수, 지정 하는 경우 데이터를 기본 브로드캐스트 브로드캐스트 주소, 255.255.255.255 <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>한 호출에 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> <xref:System.Net.Sockets.Socket>클래스</xref:System.Net.Sockets.Socket> 를 사용 하 여으로 되돌릴 수 응용 프로그램에 브로드캐스트 주소에 대 한 제어 강화, 필요한 경우      > [!NOTE] > 이후 the UDP 프로토콜은 연결는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드 차단 하지 않습니다.</xref:System.Net.Sockets.UdpClient.Connect%2A> 호출 하지 마십시오는 <xref:System.Net.Sockets.UdpClient.Connect%2A>멀티 데이터 그램을 받으려는 경우.</xref:System.Net.Sockets.UdpClient.Connect%2A>"
  example:
  - "The following example uses an <xref:System.Net.IPEndPoint> to establish a default remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/csharp/m-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/cpp/m-system.net.sockets.udp_1_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_1_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPEndPoint endPoint);
    parameters:
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>데이터를 보내는 네트워크 끝점을 지정 하는.</xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>endPoint</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 닫혀 있습니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  id: Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "지정된 된 IP 주소와 포트 번호를 사용 하 여 기본 원격 호스트를 설정 합니다."
  remarks: "<xref:System.Net.Sockets.UdpClient.Connect%2A>메서드 설정에 지정 된 값을 사용 하 여 기본 원격 호스트는 `addr` 및 `port` 매개 변수.</xref:System.Net.Sockets.UdpClient.Connect%2A> 설정 되 고 나면 필요가 없습니다를 호출할 때마다에서 원격 호스트를 지정 하는 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드.</xref:System.Net.Sockets.UdpClient.Send%2A>       기본 원격 호스트를 설정 하는 것은 선택 사항입니다. 기본 원격 호스트를 지정 하면 해당 호스트에만 제한 됩니다. 다른 호출 해야 다른 원격 호스트에 데이터 그램을 보내려는 경우는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드 또는 다른 만들 <xref:System.Net.Sockets.UdpClient>기본 원격 호스트 하지 않고.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.Connect%2A> 기본 원격을 사용 하도록 설정한 경우 호스트 하는 원격 호스트 호출 된 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드, <xref:System.Net.Sockets.UdpClient.Send%2A> <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> 을 throw 합니다.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> 표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다.       호출 하는 경우는 <xref:System.Net.Sockets.Socket.Connect%2A>메서드를 지정된 된 기본 되는데 것과 다른 주소에서 도착 하는 모든 데이터 그램.</xref:System.Net.Sockets.Socket.Connect%2A> 기본 원격 호스트에서 상속 하는 경우가 아니면이 메서드를 사용 하 여 브로드캐스트 주소를 설정할 수 없습니다 <xref:System.Net.Sockets.UdpClient>, 클라이언트 메서드를 사용 하 여 기본 가져올 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> 소켓 옵션을 설정 하 고</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       그러나 수, 지정 하는 경우 데이터를 기본 브로드캐스트 브로드캐스트 주소, 255.255.255.255 <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>한 호출에 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> <xref:System.Net.Sockets.Socket>클래스</xref:System.Net.Sockets.Socket> 를 사용 하 여으로 되돌릴 수 응용 프로그램에 브로드캐스트 주소에 대 한 제어 강화, 필요한 경우      > [!NOTE] > 이후 the UDP 프로토콜은 연결는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드 차단 하지 않습니다.</xref:System.Net.Sockets.UdpClient.Connect%2A> 호출 하지 마십시오는 <xref:System.Net.Sockets.UdpClient.Connect%2A>멀티 데이터 그램을 받으려는 경우.</xref:System.Net.Sockets.UdpClient.Connect%2A>"
  example:
  - "The following example uses an IP address and port number to connect with a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/csharp/m-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/cpp/m-system.net.sockets.udp_6_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_6_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPAddress addr, int port);
    parameters:
    - id: addr
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>데이터를 보내는 원격 호스트의.</xref:System.Net.IPAddress>"
    - id: port
      type: System.Int32
      description: "데이터를 전송 하는 포트 번호입니다."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>가 닫혀 있습니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>addr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>사이 있지 않은 <xref:System.Net.IPEndPoint.MinPort> 및 <xref:System.Net.IPEndPoint.MaxPort>합니다."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  id: Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "지정 된를 사용 하 여 기본 원격 호스트를 설정 호스트 이름과 포트 번호입니다."
  remarks: "Connect 메서드 설정에 지정 된 값을 사용 하 여 기본 원격 호스트는 `port` 및 `hostname` 매개 변수입니다. 설정 되 고 나면 필요가 없습니다를 호출할 때마다에서 원격 호스트를 지정 하는 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드.</xref:System.Net.Sockets.UdpClient.Send%2A>       기본 원격 호스트를 설정 하는 것은 선택 사항입니다. 기본 원격 호스트를 지정 하면 해당 호스트에만 제한 됩니다. Connect 메서드를 호출 하거나 다른 만들 다른 확인 해야 다른 원격 호스트에 데이터 그램을 보내려는 경우 <xref:System.Net.Sockets.UdpClient>기본 원격 호스트 하지 않고.</xref:System.Net.Sockets.UdpClient>       기본 원격을 사용 하도록 설정한 경우 호스트 하는 원격 호스트 호출 된 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드, <xref:System.Net.Sockets.UdpClient.Send%2A> <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> 을 throw 합니다.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> 표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다.       호출 하는 경우는 <xref:System.Net.Sockets.Socket.Connect%2A>메서드를 지정된 된 기본 되는데 것과 다른 주소에서 도착 하는 모든 데이터 그램.</xref:System.Net.Sockets.Socket.Connect%2A> 기본 원격 호스트에서 상속 하는 경우가 아니면이 메서드를 사용 하 여 브로드캐스트 주소를 설정할 수 없습니다 <xref:System.Net.Sockets.UdpClient>, 클라이언트 메서드를 사용 하 여 기본 가져올 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> 소켓 옵션을 설정 하 고</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       그러나 수, 지정 하는 경우 데이터를 기본 브로드캐스트 브로드캐스트 주소, 255.255.255.255 <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>한 호출에 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> <xref:System.Net.Sockets.Socket>클래스</xref:System.Net.Sockets.Socket> 를 사용 하 여으로 되돌릴 수 응용 프로그램에 브로드캐스트 주소에 대 한 제어 강화, 필요한 경우      > [!NOTE] > 이후 the UDP 프로토콜은 연결, Connect 메서드를 차단 하지 않습니다. 멀티 데이터 그램을 받으려는 경우에 Connect 메서드를 호출 하지 마십시오."
  example:
  - "The following example uses the host name and port number to connect to a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/csharp/m-system.net.sockets.udp_13_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/cpp/m-system.net.sockets.udp_13_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_13_1.vb)]"
  syntax:
    content: public void Connect (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "데이터 전송 하려는 원격 호스트의 DNS 이름입니다."
    - id: port
      type: System.Int32
      description: "데이터를 보내는 원격 호스트에 포트 번호입니다."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 닫혀 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>사이 있지 않은 <xref:System.Net.IPEndPoint.MinPort> 및 <xref:System.Net.IPEndPoint.MaxPort>합니다."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose
  id: Dispose
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "사용 하는 스레드와 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>합니다."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public `Dispose()`메서드 및 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> `Dispose()`보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다. <xref:System.Object.Finalize%2A>호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</xref:System.Object.Finalize%2A>       경우는 `disposing` 매개 변수가 true 이면이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Net.Sockets.UdpClient>참조.</xref:System.Net.Sockets.UdpClient> 이 메서드 호출에서 `Dispose()` 각 참조 된 개체의 메서드."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DontFragment
  id: DontFragment
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "가져오거나는 <xref:System.Boolean>지정 하는 값 여부는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 조각화 데이터 그램 IP (인터넷 프로토콜)를 허용 합니다.</xref:System.Boolean>"
  remarks: "데이터 그램 크기의 최대 전송 단위 (MTU)의 전송 매체를 초과 하는 경우 조각화가 필요 합니다. 송신 호스트 하거나 중간 라우터 하 여 데이터 그램을 조각화 될 수 있습니다. 데이터 그램을 조각화 합니다, 그리고 및 <xref:System.Net.Sockets.Socket.DontFragment%2A>옵션 설정 하 고 데이터 그램 무시 되는 데이터 그램의 보낸 사람에 게 제어 메시지 ICMP (Internet Protocol) 오류 메시지가 전송 됩니다.</xref:System.Net.Sockets.Socket.DontFragment%2A>"
  example:
  - "The following code example shows the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#2](~/add/codesnippet/csharp/p-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#2](~/add/codesnippet/cpp/p-system.net.sockets.udp_5_1.cpp)]"
  syntax:
    content: public bool DontFragment { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 데이터 그램 조각화를 허용 하면, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.Sockets.UdpClient.DontFragment*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "이 속성을 사용 하는 소켓에 대해서만 설정할 수 있습니다는 <xref:System.Net.Sockets.AddressFamily>플래그 또는 <xref:System.Net.Sockets.AddressFamily>플래그.</xref:System.Net.Sockets.AddressFamily> </xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  id: DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "멀티 캐스트 그룹을 유지합니다."
  remarks: "<xref:System.Net.Sockets.UdpClient>에 지정 된 <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> 식별 된 멀티 캐스트 그룹에서</xref:System.Net.Sockets.UdpClient> DropMulticastGroup 메서드 인출 내부 DropMulticastGroup 메서드를 호출한 후 <xref:System.Net.Sockets.Socket>라우터에서 멀티 캐스트 그룹에서 제거 하는 라우터를 그룹 관리 IGMP (Internet Protocol) 패킷을 보냅니다.</xref:System.Net.Sockets.Socket> 이후에 <xref:System.Net.Sockets.UdpClient>인출 그룹에서 더 이상 됩니다 해당 그룹에 보낸 데이터 그램을 받을 수 없습니다.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > 수신 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다."
  example:
  - "The following example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_3_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_3_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_3_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>나갈 멀티 캐스트 그룹입니다.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "내부 <xref:System.Net.Sockets.Socket>닫혔습니다.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP 주소와 호환 되지 않습니다.는 <xref:System.Net.Sockets.AddressFamily>소켓의 주소 지정 체계를 정의 하는 값입니다.</xref:System.Net.Sockets.AddressFamily>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  id: DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "멀티 캐스트 그룹을 유지합니다."
  remarks: "<xref:System.Net.Sockets.UdpClient>에 지정 된 <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> 식별 된 멀티 캐스트 그룹에서</xref:System.Net.Sockets.UdpClient> DropMulticastGroup 메서드 인출 내부 DropMulticastGroup 메서드를 호출한 후 <xref:System.Net.Sockets.Socket>라우터에서 멀티 캐스트 그룹에서 제거 하는 라우터를 그룹 관리 IGMP (Internet Protocol) 패킷을 보냅니다.</xref:System.Net.Sockets.Socket> 이후에 <xref:System.Net.Sockets.UdpClient>인출 그룹에서 더 이상 됩니다 해당 그룹에 보낸 데이터 그램을 받을 수 없습니다.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > 나타나면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>속성을 특정 오류 코드를 가져옵니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다."
  example:
  - "The following code example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/d83f3217-6e3e-43a5-a5d8-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/d83f3217-6e3e-43a5-a5d8-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/d83f3217-6e3e-43a5-a5d8-_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>나갈 멀티 캐스트 그룹입니다.</xref:System.Net.IPAddress>"
    - id: ifindex
      type: System.Int32
      description: "로컬 주소는 멀티 캐스트 그룹입니다."
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "내부 <xref:System.Net.Sockets.Socket>닫혔습니다.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP 주소와 호환 되지 않습니다.는 <xref:System.Net.Sockets.AddressFamily>소켓의 주소 지정 체계를 정의 하는 값입니다.</xref:System.Net.Sockets.AddressFamily>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  id: EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "가져오거나는 <xref:System.Boolean>지정 하는 값 여부는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 브로드캐스트 패킷 수를 주고받을 수 있습니다.</xref:System.Boolean>"
  remarks: "브로드캐스트는 특정 서브넷으로 제한 됩니다. 255.255.255.255;로 패킷을 전송 하 여 로컬 서브넷에 브로드캐스트할 수 있습니다. 또는 네트워크 부분의 모든 비트가 호스트 부분에 설정 된 IP (인터넷 프로토콜) 주소는 지정 된 브로드캐스트 주소로 사용할 수 있습니다. 예를 들어 사용자의 IP 주소 (처음 세 옥텟은 네트워크 부분이와 호스트 부분 클래스 C 주소는 마지막 8 진수는) 192.168.1.40 이면 사용자 지정 된 브로드캐스트 주소로 192.168.1.255입니다."
  example:
  - "The following code example shows the use of the EnableBroadcast property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#3](~/add/codesnippet/csharp/p-system.net.sockets.udp_3_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#3](~/add/codesnippet/cpp/p-system.net.sockets.udp_3_1.cpp)]"
  syntax:
    content: public bool EnableBroadcast { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 브로드캐스트 패킷 수, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.Sockets.UdpClient.EnableBroadcast*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  id: EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "종료는 보류 중인 비동기를 수신 합니다."
  remarks: "이 메서드 차단 작업이 때까지 완료 합니다.       이 작업을 동기적으로 수행 하려면는 <xref:System.Net.Sockets.UdpClient.Receive%2A>메서드.</xref:System.Net.Sockets.UdpClient.Receive%2A>"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous receive of a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/5ace0ab2-d0e9-4f1f-a415-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/5ace0ab2-d0e9-4f1f-a415-_1.cs)]"
  syntax:
    content: public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult> <xref:System.Net.Sockets.UdpClient.BeginReceive*>.</xref:System.Net.Sockets.UdpClient.BeginReceive*> 에 대 한 호출에서 반환 된 개체</xref:System.IAsyncResult>"
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "지정된 된 원격 끝점입니다."
    return:
      type: System.Byte[]
      description: "성공 하면 받은 바이트 수입니다. 실패할 경우이 메서드는 0을 반환 합니다."
  overload: System.Net.Sockets.UdpClient.EndReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>에 대 한 호출에서 반환 하지 않았습니다 고 <xref:System.Net.Sockets.UdpClient.BeginReceive*> 메서드."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndReceive 비동기 읽기를 위해 이전에 호출 되었습니다."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "기본 <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> 에 액세스 하려고 할 때 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "내부 <xref:System.Net.Sockets.Socket>닫혔습니다.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  id: EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "보류 중인 비동기 발신을 종료 됩니다."
  remarks: "이 메서드 차단 작업이 때까지 완료 합니다.       이 작업을 동기적으로 수행 하려면는 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous send of a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_0_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_0_1.cs)]"
  syntax:
    content: public int EndSend (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult> <xref:System.Net.Sockets.UdpClient.BeginSend*>.</xref:System.Net.Sockets.UdpClient.BeginSend*> 에 대 한 호출에서 반환 된 개체</xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "성공적 이면 바이트 수가 보낸에 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>합니다."
  overload: System.Net.Sockets.UdpClient.EndSend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>에 대 한 호출에서 반환 하지 않았습니다 고 <xref:System.Net.Sockets.Socket.BeginSend*> 메서드."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.Sockets.Socket.EndSend*>비동기 읽기를 위해 이전에 호출 되었습니다.</xref:System.Net.Sockets.Socket.EndSend*>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "내부 소켓에 액세스 하려고 할 때 오류가 있습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "내부 <xref:System.Net.Sockets.Socket>닫혔습니다.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "가져오거나는 <xref:System.Boolean>지정 하는 값 여부는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 하나의 클라이언트는 포트를 사용 하도록 허용 하면</xref:System.Boolean>"
  remarks: "기본적으로 여러 클라이언트가 특정 포트를 사용할 수 있습니다. 그러나 클라이언트 중 하나에만 포트에 전송 되는 네트워크 트래픽에 대 한 작업을 수행할 수 있습니다. 여러 클라이언트가 특정 포트를 사용 하지 않도록 설정 하는 ExclusiveAddressUse 속성을 사용할 수 있습니다.       이 속성은 기본 소켓 클라이언트 포트에 바인딩하기 전에 설정 되어야 합니다. 호출 하는 경우 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>생성자의 부작용으로 클라이언트 포트 바인딩되어 및 ExclusiveAddressUse 속성을 설정할 수 없습니다</xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName> 또는</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>"
  example:
  - "The following code example creates a <xref:System.Net.Sockets.UdpClient>, and gets and sets the ExclusiveAddressUse property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#4](~/add/codesnippet/csharp/p-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#4](~/add/codesnippet/cpp/p-system.net.sockets.udp_4_1.cpp)]"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 하나만 클라이언트가 특정 포트를 사용 하는 데 사용 그렇지 않은 경우 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Windows Server 2003 및 Windows XP 서비스 팩 2 이상 및 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 다른 모든 버전."
  overload: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "내부 소켓에 액세스 하려고 할 때 오류가 있습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "내부 <xref:System.Net.Sockets.Socket>닫혔습니다.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "추가 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 멀티 캐스트 그룹에 있습니다."
  remarks: "<xref:System.Net.Sockets.UdpClient>멀티 캐스트 그룹을 사용 하 여 지정한 <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> JoinMulticastGroup 메서드 구독 내부 JoinMulticastGroup 메서드를 호출한 후 <xref:System.Net.Sockets.Socket>멀티 캐스트 그룹에 멤버 자격을 요청 하는 라우터를 그룹 관리 IGMP (Internet Protocol) 패킷을 보냅니다.</xref:System.Net.Sockets.Socket> 멀티 캐스트 주소 범위는 224.0.0.0에서 239.255.255.255 사이입니다. 이 범위를 벗어나서 주소를 지정 하는 경우 또는 요청이 수행 됩니다 라우터 멀티 캐스트 없으면 설정 <xref:System.Net.Sockets.UdpClient>에 <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> 을 throw 합니다.</xref:System.Net.Sockets.UdpClient> 표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다. 한 번의 <xref:System.Net.Sockets.UdpClient>나열 된 멀티 캐스트 그룹의 구성원으로 라우터를 사용 하 여 지정 된 <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> 보낸 멀티 데이터 그램을 받을 수 됩니다</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > 만들어야는 <xref:System.Net.Sockets.UdpClient>는 멀티 캐스트 포트 번호를 사용 하 여 이렇게 하지 않으면 됩니다 멀티 수.</xref:System.Net.Sockets.UdpClient> 호출 하지 마십시오는 <xref:System.Net.Sockets.UdpClient.Connect%2A>JoinMulticastGroup 메서드를 호출 하기 전에 메서드 또는 <xref:System.Net.Sockets.UdpClient.Receive%2A>메서드가 작동 하지 것입니다.</xref:System.Net.Sockets.UdpClient.Receive%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> 데이터 그램을 보내려면 멀티 캐스트 IP 주소에 멀티 캐스트 그룹에 포함할 필요가 없습니다.       멀티 캐스트 그룹에 가입 하기 전에 소켓 포트 또는 끝점에 바인딩되어 있는지를 확인 합니다. 그렇게 하려면 포트나 끝점 매개 변수로 사용 하는 생성자 중 하나를 호출 합니다.       멀티 데이터 그램을 받는 작업을 중지 하려면 호출는 <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>메서드를 제공 하 고는 <xref:System.Net.IPAddress>있는 인출 하려는 그룹의.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>      > [!NOTE] > IPv6 경우에는 여러 멀티 캐스트 주소 범위에서 선택할 수 있습니다. IETF RFC 2375를 참조 하십시오.      > [!NOTE] >를 호출할 수 없습니다 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>에 <xref:System.Net.Sockets.UdpClient>특정 로컬 포트 없이 생성 된 (즉, 사용 하는 <xref:System.Net.Sockets.UdpClient.%23ctor>또는 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>생성자).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following code example demonstrates how to join a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_8_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_8_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_8_1.cs)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "멀티 캐스트 <xref:System.Net.IPAddress>조인 하려는 그룹의.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "내부 <xref:System.Net.Sockets.Socket>닫혔습니다.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP 주소와 호환 되지 않습니다.는 <xref:System.Net.Sockets.AddressFamily>소켓의 주소 지정 체계를 정의 하는 값입니다.</xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "추가 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 멀티 캐스트 그룹에 있습니다."
  remarks: "멀티 캐스트 그룹에 가입 하기 전에 소켓 포트 또는 끝점에 바인딩되어 있어야 합니다. 이렇게 하려면 포트 또는 끝점을 매개 변수로 허용 하는 생성자 중 하나를 호출 합니다.       `infindex` 매개 변수를 사용 하 고 동일한 링크의 하드웨어 인터페이스를 식별 합니다.      > [!NOTE] > 여러 멀티 캐스트 주소 범위에서 선택할 수 있습니다. IETF RFC 2375 참조 하십시오.      > [!NOTE] >를 호출할 수 없습니다 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>에 <xref:System.Net.Sockets.UdpClient>특정 로컬 포트 없이 생성 된 (즉, 사용 하는 <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName>또는 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName>생성자).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - >-
    [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/cpp/f675abdc-8a60-48f5-a8c6-_1.cpp)]
     [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/visualbasic/f675abdc-8a60-48f5-a8c6-_1.vb)]
     [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/csharp/f675abdc-8a60-48f5-a8c6-_1.cs)]
  syntax:
    content: public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);
    parameters:
    - id: ifindex
      type: System.Int32
      description: "멀티 캐스트 그룹을 조인할 로컬 IP 주소와 연결 된 인터페이스 인덱스입니다."
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "멀티 캐스트 <xref:System.Net.IPAddress>조인 하려는 그룹의.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "내부 <xref:System.Net.Sockets.Socket>닫혔습니다.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "추가 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 지정된 된 시간을 TTL (Live)으로 멀티 캐스트 그룹에 있습니다."
  remarks: "<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>메서드는 구독합니다 <xref:System.Net.Sockets.UdpClient>에 지정 된 <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> 를 사용 하 여 멀티 캐스트 그룹에</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> 호출한 후의 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>메서드를 기본 <xref:System.Net.Sockets.Socket>멀티 캐스트 그룹에 멤버 자격을 요청 하는 라우터를 그룹 관리 IGMP (Internet Protocol) 패킷을 보냅니다.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> 멀티 캐스트 주소 범위는 224.0.0.0에서 239.255.255.255 사이입니다. 이 범위를 벗어나서 주소를 지정 하는 경우 또는 요청이 수행 됩니다 라우터 멀티 캐스트 없으면 설정 <xref:System.Net.Sockets.UdpClient>에 <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> 을 throw 합니다.</xref:System.Net.Sockets.UdpClient> 표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다. `timeToLive` 매개 변수 라우터 홉 수 삭제 되기 전에 멀티 데이터 그램에 대 한 허용 되도록 지정 합니다. 한 번의 <xref:System.Net.Sockets.UdpClient>나열 된 멀티 캐스트 그룹의 구성원으로 라우터를 사용 하 여 지정 된 <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> 보낸 멀티 데이터 그램을 받을 수 됩니다</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > 만들어야는 <xref:System.Net.Sockets.UdpClient>캐스트 포트 번호를 사용 하 여 그렇지 않은 경우 됩니다 멀티 수.</xref:System.Net.Sockets.UdpClient> 호출 하지 마십시오는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드를 호출 하기 전에 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>메서드 또는 receive 메서드가 작동 하지 것입니다.</xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> 데이터 그램을 보내려면 멀티 캐스트 IP 주소에 멀티 캐스트 그룹에 포함할 필요가 없습니다.       멀티 캐스트 그룹에 가입 시키기 전에 소켓 포트 또는 끝점에 바인딩되어 있는지를 확인 합니다. 그렇게 하려면 포트나 끝점 매개 변수로 사용 하는 생성자 중 하나를 호출 합니다.       멀티 데이터 그램을 받는 작업을 중지 하려면 호출는 <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>메서드를 제공 하 고는 <xref:System.Net.IPAddress>있는 인출 하려는 그룹의.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>      > [!NOTE] >를 호출할 수 없습니다 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>에 <xref:System.Net.Sockets.UdpClient>특정 로컬 포트 없이 생성 된 (즉, 사용 하는 <xref:System.Net.Sockets.UdpClient.%23ctor>또는 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>생성자).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/csharp/2ab5d1d5-1bd6-4398-ae63-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/cpp/2ab5d1d5-1bd6-4398-ae63-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/visualbasic/2ab5d1d5-1bd6-4398-ae63-_1.vb)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>의 멀티 캐스트 그룹에 조인 합니다.</xref:System.Net.IPAddress>"
    - id: timeToLive
      type: System.Int32
      description: "TTL (to Live)을 시간 단위로 라우터 홉을 지정 합니다."
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "제공 된 TTL이 0에서 255 사이의"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "내부 <xref:System.Net.Sockets.Socket>닫혔습니다.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP 주소와 호환 되지 않습니다.는 <xref:System.Net.Sockets.AddressFamily>소켓의 주소 지정 체계를 정의 하는 값입니다.</xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "추가 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 멀티 캐스트 그룹에 있습니다."
  remarks: "멀티 캐스트 그룹에 가입 하기 전에 소켓 포트 또는 끝점에 바인딩되어 있음을 해야 합니다. 이렇게 하려면 포트 또는 끝점을 매개 변수로 허용 하는 생성자 중 하나를 호출 합니다.      > [!NOTE] > 여러 멀티 캐스트 주소 범위에서 선택할 수 있습니다. IETF RFC 2375에서 찾을 수 있습니다.      > [!NOTE] >를 호출할 수 없습니다 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>에 <xref:System.Net.Sockets.UdpClient>특정 로컬 포트 없이 생성 된 (즉, 사용 하는 <xref:System.Net.Sockets.UdpClient.%23ctor>또는 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>생성자).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following code example shows the use of the JoinMulticastGroup method.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#6](~/add/codesnippet/csharp/83ef7d63-bccd-4c55-a88d-_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#6](~/add/codesnippet/cpp/83ef7d63-bccd-4c55-a88d-_1.cpp)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "멀티 캐스트 <xref:System.Net.IPAddress>조인 하려는 그룹의.</xref:System.Net.IPAddress>"
    - id: localAddress
      type: System.Net.IPAddress
      description: "로컬 <xref:System.Net.IPAddress>입니다.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "내부 <xref:System.Net.Sockets.Socket>닫혔습니다.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "가져오거나는 <xref:System.Boolean>나가는 멀티 캐스트 패킷을 보내는 응용 프로그램으로 전달할지 여부를 지정 하는 값입니다.</xref:System.Boolean>"
  remarks: "멀티 캐스트는 인터넷에서 다 대 다 통신에 대 한 확장 가능한 방법입니다. 프로세스 멀티 캐스트 주소를 구독 하는 경우에서 보낸 모든 패킷을 프로세스가 멀티 캐스트 주소에 등록 된 다른 모든 프로세스에서 수신 됩니다."
  example:
  - "The following code example shows the use of the MulticastLoopback property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#7](~/add/codesnippet/csharp/p-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#7](~/add/codesnippet/cpp/p-system.net.sockets.udp_2_1.cpp)]"
  syntax:
    content: public bool MulticastLoopback { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 나가는 멀티 캐스트 패킷을; 받으면 그렇지 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.Sockets.UdpClient.MulticastLoopback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  id: Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "원격 호스트에 의해 전송 된 UDP 데이터 그램을 반환 합니다."
  remarks: "Receive 메서드는 원격 호스트에서 데이터 그램 도착할 때까지 차단 됩니다. 데이터를 사용할 수는 Receive 메서드 첫 큐에 대기 된 데이터 그램 읽고 데이터 부분을 바이트 배열로 반환 됩니다. 이 메서드는 `remoteEP` 매개 변수는 <xref:System.Net.IPAddress>및 보낸 사람의 포트 번호.</xref:System.Net.IPAddress>       기본 원격 호스트를 지정 하는 경우는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드를 Receive 메서드가 데이터 그램만 해당 호스트에서 허용 됩니다.</xref:System.Net.Sockets.UdpClient.Connect%2A> 다른 모든 데이터 그램 무시 됩니다.       표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다.      > [!NOTE] > 멀티 데이터 그램을 수신 하려는 경우를 호출 하지 마십시오는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드는 Receive 메서드 호출 하기 전에.</xref:System.Net.Sockets.UdpClient.Connect%2A> <xref:System.Net.Sockets.UdpClient>수신 하는 데 캐스트 포트 번호를 사용 하 여 데이터 그램을 만들어야 합니다.</xref:System.Net.Sockets.UdpClient>"
  example:
  - "The following example demonstrates the Receive method. The Receive method blocks execution until it receives a message. Using the <xref:System.Net.IPEndPoint> passed to Receive, the identity of the responding host is revealed.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/csharp/m-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/cpp/m-system.net.sockets.udp_5_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_5_1.vb)]"
  syntax:
    content: public byte[] Receive (ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>데이터를 보낸 원격 호스트를 나타내는.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Byte[]
      description: "형식의 배열 <xref:System.Byte>데이터 그램 데이터가 포함 된.</xref:System.Byte>"
  overload: System.Net.Sockets.UdpClient.Receive*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "내부 <xref:System.Net.Sockets.Socket>닫혔습니다.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  id: ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "원격 호스트에 의해 전송 된 비동기적으로 UDP 데이터 그램을 반환 합니다."
  remarks: "이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task%601>> 개체는 UDP 패킷을 수신 된 후 완료 됩니다.</xref:System.Threading.Tasks.Task%601>       기본 원격 호스트를 지정 하는 경우는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드에서이 메서드는 데이터 그램만 해당 호스트에서 허용 됩니다.</xref:System.Net.Sockets.UdpClient.Connect%2A> 다른 모든 데이터 그램 무시 됩니다.       표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다.      > [!WARNING] > 멀티 데이터 그램을 수신 하려는 경우를 호출 하지 마십시오는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드가이 메서드를 호출 하기 전에.</xref:System.Net.Sockets.UdpClient.Connect%2A> <xref:System.Net.Sockets.UdpClient>수신 하는 데 캐스트 포트 번호를 사용 하 여 데이터 그램을 만들어야 합니다.</xref:System.Net.Sockets.UdpClient>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult> ReceiveAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
      description: "반환 &lt;xref:System.Threading.Tasks.Task%601&gt;합니다.       비동기 작업을 나타내는 작업 개체입니다."
  overload: System.Net.Sockets.UdpClient.ReceiveAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "내부 <xref:System.Net.Sockets.Socket>닫혔습니다.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  id: Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "원격 호스트에 UDP 데이터 그램을 보냅니다."
  remarks: "이 오버 로드에 설정 된 원격 호스트에 데이터 그램을 보냅니다는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드와 보낸 바이트 수를 반환 합니다.</xref:System.Net.Sockets.UdpClient.Connect%2A> <xref:System.Net.Sockets.UdpClient.Connect%2A> <xref:System.Net.Sockets.UdpClient.Send%2A>메서드는 <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> throw</xref:System.Net.Sockets.UdpClient.Send%2A> 이 오버 로드를 호출 하기 전에</xref:System.Net.Sockets.UdpClient.Connect%2A> 호출 하지 않는 경우 표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다.       다른 원격 호스트에 데이터 그램을 보내려는 호출 해야 합니다는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드 원하는 원격 호스트를 지정 합니다.</xref:System.Net.Sockets.UdpClient.Connect%2A> 다른 중 하나를 사용 하 여 <xref:System.Net.Sockets.UdpClient.Send%2A>에 브로드캐스트 주소 데이터 그램을 보내려는 메서드 오버 로드.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. You must establish a default remote host prior to using this overload.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/csharp/m-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/cpp/m-system.net.sockets.udp_2_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_2_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "형식의 배열 <xref:System.Byte>보내려는 UDP 데이터 그램의 바이트 배열로 나타낸를 지정 하는.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "데이터 그램의 바이트 수입니다."
    return:
      type: System.Int32
      description: "보낸 바이트 수입니다."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 기본 원격 호스트를 이미 설정 했습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 닫혀 있습니다."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "지정된 된 원격 끝점에서 호스트에 UDP 데이터 그램을 보냅니다."
  remarks: "Send 메서드가 데이터 그램을 지정된 된 끝점으로 보내고 성공적으로 보낸 바이트 수를 반환 합니다. 이 오버 로드를 호출 하기 전에 먼저 만들어야 합니다는 <xref:System.Net.IPEndPoint>데이터 그램이 배달 될 원격 호스트의 IP 주소와 포트 번호를 사용 하 여.</xref:System.Net.IPEndPoint> 기본 브로드캐스트 주소로 255.255.255.255 <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> <xref:System.Net.IPAddress.Address%2A> <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> 속성</xref:System.Net.IPAddress.Address%2A> 에 대해</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> 지정 하 여 데이터 그램을 보낼 수 있습니다. 이 만든 후 <xref:System.Net.IPEndPoint>, Send 메서드에으로 전달는 `endPoint` 매개 변수.</xref:System.Net.IPEndPoint>       사용 하 여 다른 브로드캐스트 주소로 데이터 그램을 보내려는 경우는 <xref:System.Net.Sockets.UdpClient.Client%2A>내부를 얻는 메서드를 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> 소켓 옵션을 설정 하 고</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> <xref:System.Net.Sockets.Socket>클래스</xref:System.Net.Sockets.Socket> 를 사용 하 여 되돌릴 수 있습니다.      > [!NOTE] > 제공 하지 않는 한 `endPoint` 매개 변수를 사용 하는 원격 호스트를 이미 설정한 경우이 메서드는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드.</xref:System.Net.Sockets.UdpClient.Connect%2A> 이렇게 하면 Send 메서드가 <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> 을 throw 합니다. 표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다."
  example:
  - "The following example demonstrates the Send method. This example uses an <xref:System.Net.IPEndPoint> to specify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/csharp/2c594ef1-b462-42a1-adc5-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/cpp/2c594ef1-b462-42a1-adc5-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/visualbasic/2c594ef1-b462-42a1-adc5-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "형식의 배열 <xref:System.Byte>보내려는, 바이트 배열로 표현 하는 UDP 데이터 그램을 지정 하는.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "데이터 그램의 바이트 수입니다."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>호스트 및 포트를 데이터 그램을 보낼를 나타내는입니다.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Int32
      description: "보낸 바이트 수입니다."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>기본 원격 호스트를 이미 설정 했습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>가 닫혀 있습니다."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  id: Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "지정 된 원격 호스트에 지정된 된 포트에 UDP 데이터 그램을 보냅니다."
  remarks: "<xref:System.Net.Sockets.UdpClient.Send%2A>메서드 데이터 그램을 통해 지정 된 값을 보내는 `hostname` 및 `port` 매개 변수 및 반환 성공적으로 보낸 바이트 수입니다.</xref:System.Net.Sockets.UdpClient.Send%2A> 에 대 한 &quot;255.255.255.255&quot;를 지정 하 여 기본 브로드캐스트 주소에 데이터 그램을 보낼 수는 `hostname` 매개 변수 값입니다.       사용 하 여 다른 브로드캐스트 주소로 데이터 그램을 보내려는 경우는 <xref:System.Net.Sockets.UdpClient.Client%2A>내부를 얻는 메서드를 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> 소켓 옵션을 설정 하 고</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> <xref:System.Net.Sockets.Socket>클래스</xref:System.Net.Sockets.Socket> 를 사용 하 여 되돌릴 수 있습니다.      > [!NOTE] > 호스트 이름을 지정 하지 않거나 원격 호스트를 이미 설정한 경우 포트 번호가이 메서드를는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드.</xref:System.Net.Sockets.UdpClient.Connect%2A> 이렇게 하면 <xref:System.Net.Sockets.UdpClient.Send%2A>메서드는 <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> throw</xref:System.Net.Sockets.UdpClient.Send%2A> 표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다."
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. This example uses a host name and a port number to identify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/csharp/5d28964f-8575-4595-a91e-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/cpp/5d28964f-8575-4595-a91e-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/visualbasic/5d28964f-8575-4595-a91e-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, string hostname, int port);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "형식의 배열 <xref:System.Byte>보내려는 UDP 데이터 그램의 바이트 배열로 나타낸를 지정 하는.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "데이터 그램의 바이트 수입니다."
    - id: hostname
      type: System.String
      description: "데이터 그램을 보내려는 원격 호스트의 이름입니다."
    - id: port
      type: System.Int32
      description: "통신 하려는 원격 포트 번호입니다."
    return:
      type: System.Int32
      description: "보낸 바이트 수입니다."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 기본 원격 호스트를 이미 설정 했습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 닫혀 있습니다."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  id: SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "원격 호스트에 UDP 데이터 그램을 비동기적으로 보냅니다."
  remarks: "이 오버 로드에 설정 된 원격 호스트에 데이터 그램을 보냅니다는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드.</xref:System.Net.Sockets.UdpClient.Connect%2A> <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드는 <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> 을 throw 하는 데이 오버 로드를 호출 하기 전에</xref:System.Net.Sockets.UdpClient.Connect%2A> 호출 하지 않으면 표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다.       다른 원격 호스트에 데이터 그램을 보내려는 호출 해야 합니다는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드 원하는 원격 호스트를 지정 합니다.</xref:System.Net.Sockets.UdpClient.Connect%2A> 다른 중 하나를 사용 하 여 <xref:System.Net.Sockets.UdpClient.SendAsync%2A>에 브로드캐스트 주소 데이터 그램을 보내려는 메서드 오버 로드.</xref:System.Net.Sockets.UdpClient.SendAsync%2A>"
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "형식의 배열 <xref:System.Byte>보내려는 UDP 데이터 그램의 바이트 배열로 나타낸를 지정 하는.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "데이터 그램의 바이트 수입니다."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "반환 &lt;xref:System.Threading.Tasks.Task%601&gt;합니다."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 기본 원격 호스트를 이미 설정 했습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 닫혀 있습니다."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "원격 호스트에 UDP 데이터 그램을 비동기적으로 보냅니다."
  remarks: "이 메서드는 지정된 된 끝점으로 데이터 그램을 보냅니다. 이 오버 로드를 호출 하기 전에 먼저 만들어야 합니다는 <xref:System.Net.IPEndPoint>데이터 그램이 배달 될 원격 호스트의 IP 주소와 포트 번호를 사용 하 여.</xref:System.Net.IPEndPoint> 기본 브로드캐스트 주소로 255.255.255.255 <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> <xref:System.Net.IPAddress.Address%2A> <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> 속성</xref:System.Net.IPAddress.Address%2A> 에 대해</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> 지정 하 여 데이터 그램을 보낼 수 있습니다. 이 만든 후 <xref:System.Net.IPEndPoint>,으로이 메서드에 전달 된 `endPoint` 매개 변수.</xref:System.Net.IPEndPoint>       사용 하 여 다른 브로드캐스트 주소로 데이터 그램을 보내려는 경우는 <xref:System.Net.Sockets.UdpClient.Client%2A>내부를 얻는 메서드를 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> 소켓 옵션을 설정 하 고</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> <xref:System.Net.Sockets.Socket>클래스</xref:System.Net.Sockets.Socket> 를 사용 하 여 되돌릴 수 있습니다.      > [!WARNING] > 제공 하지 않는 한 `endPoint` 매개 변수를 사용 하는 원격 호스트를 이미 설정한 경우이 메서드는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드.</xref:System.Net.Sockets.UdpClient.Connect%2A> 이 메서드는 <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> throw 이렇게 하면 표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "형식의 배열 <xref:System.Byte>보내려는 UDP 데이터 그램의 바이트 배열로 나타낸를 지정 하는.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "데이터 그램의 바이트 수입니다."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>호스트 및 포트를 데이터 그램을 보낼를 나타내는입니다.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "반환 &lt;xref:System.Threading.Tasks.Task%601&gt;합니다."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>기본 원격 호스트를 이미 설정 했습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>가 닫혀 있습니다."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  id: SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "원격 호스트에 UDP 데이터 그램을 비동기적으로 보냅니다."
  remarks: "이 메서드는 지정 된 값에 데이터 그램 전송는 `hostname` 및 `port` 매개 변수입니다. 에 대 한 &quot;255.255.255.255&quot;를 지정 하 여 기본 브로드캐스트 주소에 데이터 그램을 보낼 수는 `hostname` 매개 변수 값입니다.       사용 하 여 다른 브로드캐스트 주소로 데이터 그램을 보내려는 경우는 <xref:System.Net.Sockets.UdpClient.Client%2A>내부를 얻는 메서드를 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> 소켓 옵션을 설정 하 고</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> <xref:System.Net.Sockets.Socket>클래스</xref:System.Net.Sockets.Socket> 를 사용 하 여 되돌릴 수 있습니다.      > [!WARNING] > 호스트 이름을 지정 하지 않거나 원격 호스트를 이미 설정한 경우 포트 번호가이 메서드를는 <xref:System.Net.Sockets.UdpClient.Connect%2A>메서드.</xref:System.Net.Sockets.UdpClient.Connect%2A> 이 메서드는 <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> throw 이렇게 하면 표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>특정 오류 코드를 얻어야 합니다.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> 이 코드를 가져온 후에 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서 오류에 대 한 자세한 설명은 참조할 수 있습니다."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, string hostname, int port);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "형식의 배열 <xref:System.Byte>보내려는 UDP 데이터 그램의 바이트 배열로 나타낸를 지정 하는.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "데이터 그램의 바이트 수입니다."
    - id: hostname
      type: System.String
      description: "데이터 그램을 보내려는 원격 호스트의 이름입니다."
    - id: port
      type: System.Int32
      description: "통신 하려는 원격 포트 번호입니다."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "반환 &lt;xref:System.Threading.Tasks.Task%601&gt;합니다."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 기본 원격 호스트를 이미 설정 했습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> 닫혀 있습니다."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "소켓에 액세스 하는 오류가 발생 했습니다. 자세한 내용은 설명 섹션을 참조 합니다."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Ttl
  id: Ttl
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "시간에서 전송 되는 IP (인터넷 프로토콜) 패킷의 TTL (Live) 값을 지정 하는 값을 가져오거나 설정 합니다.는 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>합니다."
  remarks: "TTL 값은 라우터 라우터 패킷 및는 제어 메시지 ICMP (Internet Protocol) &quot;TTL 초과&quot;를 삭제 하기 전에 패킷이 이동할 수의 최대 수를 나타내는 오류 메시지가 보낸 사람에 게 반환 됩니다."
  example:
  - "The following code example shows the use of the Ttl property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#5](~/add/codesnippet/csharp/p-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#5](~/add/codesnippet/cpp/p-system.net.sockets.udp_6_1.cpp)]"
  syntax:
    content: public short Ttl { get; set; }
    return:
      type: System.Int16
      description: "TTL 값입니다."
  overload: System.Net.Sockets.UdpClient.Ttl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.Sockets.UdpClient.#ctor
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: true
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Sockets.UdpClient.Active
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
- uid: System.Net.Sockets.UdpClient.Available
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.Client
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: true
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.UdpClient.Close
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
- uid: System.Net.Sockets.UdpClient.Dispose
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
- uid: System.Net.Sockets.UdpClient.DontFragment
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
- uid: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<UdpReceiveResult>
  nameWithType: Task<UdpReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Sockets.UdpReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    nameWithType: UdpReceiveResult
    fullName: UdpReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.Ttl
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Net.Sockets.UdpClient.#ctor*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient
  nameWithType: UdpClient.UdpClient
- uid: System.Net.Sockets.UdpClient.Active*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal
  nameWithType: UdpClient.AllowNatTraversal
- uid: System.Net.Sockets.UdpClient.Available*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive
  nameWithType: UdpClient.BeginReceive
- uid: System.Net.Sockets.UdpClient.BeginSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend
  nameWithType: UdpClient.BeginSend
- uid: System.Net.Sockets.UdpClient.Client*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
- uid: System.Net.Sockets.UdpClient.Close*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close
  nameWithType: UdpClient.Close
- uid: System.Net.Sockets.UdpClient.Connect*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect
  nameWithType: UdpClient.Connect
- uid: System.Net.Sockets.UdpClient.Dispose*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose
  nameWithType: UdpClient.Dispose
- uid: System.Net.Sockets.UdpClient.DontFragment*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup
  nameWithType: UdpClient.DropMulticastGroup
- uid: System.Net.Sockets.UdpClient.EnableBroadcast*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive
  nameWithType: UdpClient.EndReceive
- uid: System.Net.Sockets.UdpClient.EndSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend
  nameWithType: UdpClient.EndSend
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup
  nameWithType: UdpClient.JoinMulticastGroup
- uid: System.Net.Sockets.UdpClient.MulticastLoopback*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive
  nameWithType: UdpClient.Receive
- uid: System.Net.Sockets.UdpClient.ReceiveAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync
  nameWithType: UdpClient.ReceiveAsync
- uid: System.Net.Sockets.UdpClient.Send*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send
  nameWithType: UdpClient.Send
- uid: System.Net.Sockets.UdpClient.SendAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync
  nameWithType: UdpClient.SendAsync
- uid: System.Net.Sockets.UdpClient.Ttl*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
