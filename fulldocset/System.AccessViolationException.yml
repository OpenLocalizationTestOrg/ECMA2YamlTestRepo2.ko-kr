### YamlMime:ManagedReference
items:
- uid: System.AccessViolationException
  id: AccessViolationException
  children:
  - System.AccessViolationException.#ctor
  - System.AccessViolationException.#ctor(System.String)
  - System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.AccessViolationException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  name: AccessViolationException
  nameWithType: AccessViolationException
  fullName: System.AccessViolationException
  type: Class
  summary: "보호 된 메모리를 읽기 또는 쓰기를 시도 하는 경우 throw 되는 예외입니다."
  remarks: "An access violation occurs in unmanaged or unsafe code when the code attempts to read or write to memory that has not been allocated, or to which it does not have access. This usually occurs because a pointer has a bad value. Not all reads or writes through bad pointers lead to access violations, so an access violation usually indicates that several reads or writes have occurred through bad pointers, and that memory might be corrupted. Thus, access violations almost always indicate serious programming errors. An AccessViolationException clearly identifies these serious errors.  \n  \n In programs consisting entirely of verifiable managed code, all references are either valid or null, and access violations are impossible. Any operation that attempts to reference a null reference in verifiable code throws a <xref:System.NullReferenceException> exception. An AccessViolationException occurs only when verifiable managed code interacts with unmanaged code or with unsafe managed code.  \n  \n## Troubleshooting AccessViolationException exceptions  \n An AccessViolationException exception can occur only in unsafe managed code or when verifiable managed code interacts with unmanaged code:  \n  \n-   An access violation that occurs in unsafe managed code can be expressed as either a <xref:System.NullReferenceException> exception or an AccessViolationException exception, depending on the platform.  \n  \n-   An access violation in unmanaged code that bubbles up to managed code is always wrapped in an AccessViolationException exception.  \n  \n In either case, you can identify and correct the cause of the AccessViolationException exception as follows:  \n  \n Make sure that the memory that you are attempting to access has been allocated.  \n An AccessViolationException exception is always thrown by an attempt to access protected memory -- that is, to access memory that is not allocated or that is not owned by a process.  \n  \n Automatic memory management is one of the services that the common language runtime provides. If managed code provides the same functionality as your unmanagede code, you may wish to move to managed code to take advantage of this functionality. For more information, see [Automatic Memory Management](~/add/includes/ajax-current-ext-md.md).  \n  \n Make sure that the memory that you are attempting to access has not been corrupted.  \n If several read or write operations have occurred through bad pointers, memory may be corrupted. This typically occurs when reading or writing to addresses outside of a predefined buffer.  \n  \n## AccessViolationException and try/catch blocks  \n Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], AccessViolationException exceptions thrown by the common language runtime are not handled by the `catch` statement in a structured exception handler if the exception occurs outside of the memory reserved by the common language runtime. To handle such an AccessViolationException exception, you should apply the  <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute to the method in which the exception is thrown. This change does not affect AccessViolationException exceptions thrown by user code, which can continue to be caught by a `catch` statement. For code written for previous versions of the .NET Framework that you want to recompile and run without modification on the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], you can add the [\\<legacyCorruptedStateExceptionsPolicy>](../Topic/%3ClegacyCorruptedStateExceptionsPolicy%3E%20Element.md) element to your app's configuration file. Note that you can also receive notification of the exceptions if you have defined a handler for the <xref:System.AppDomain.FirstChanceException?displayProperty=fullName> or <xref:System.AppDomain.UnhandledException?displayProperty=fullName> event.  \n  \n## Version Information  \n This exception is thrown in the .NET Framework 2.0 and later versions. In earlier versions of the .NET Framework, an access violation in unmanaged code or unsafe managed code is represented by a <xref:System.NullReferenceException> in managed code. A <xref:System.NullReferenceException> is also thrown when a null reference is dereferenced in verifiable managed code, an occurrence that does not involve data corruption, and there is no way to distinguish between the two situations in versions 1.0 or 1.1.  \n  \n Administrators can allow selected applications to revert to the behavior of the .NET Framework version 1.1. Place the following line in the [\\&lt;runtime\\&gt; Element](../Topic/%3Cruntime%3E%20Element.md) section of the configuration file for the application:  \n  \n```  \n<legacyNullReferenceExceptionPolicy enabled = \"1\"/>  \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class AccessViolationException : SystemException
  inheritance:
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.AccessViolationException.#ctor
  id: '#ctor'
  parent: System.AccessViolationException
  langs:
  - csharp
  name: AccessViolationException()
  nameWithType: AccessViolationException.AccessViolationException()
  fullName: System.AccessViolationException.AccessViolationException()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.AccessViolationException&quot;> </xref> 오류를 설명 하는 시스템 제공 메시지로 클래스입니다."
  remarks: "이 생성자는 <xref:System.Exception.Message%2A>와 같은 오류를 설명 하는 시스템 제공 메시지로 새 인스턴스의 속성을 &quot;보호 된 메모리를 읽거나 하려고 했습니다.</xref:System.Exception.Message%2A> 이 대개는 다른 메모리가 손상 되었습니다. &quot; 이 메시지는 현재 시스템 문화권을 고려 합니다.       다음 표에서 <xref:System.AccessViolationException>안내 하십시오.</xref:System.AccessViolationException> 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 값 |   |--------------|-----------|   | <xref:System.Exception.InnerException%2A>| `null`.|   | <xref:System.Exception.Message%2A>| 지역화 된 오류 메시지 문자열입니다. |</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public AccessViolationException ();
    parameters: []
  overload: System.AccessViolationException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.AccessViolationException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.AccessViolationException
  langs:
  - csharp
  name: AccessViolationException(String)
  nameWithType: AccessViolationException.AccessViolationException(String)
  fullName: System.AccessViolationException.AccessViolationException(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.AccessViolationException&quot;> </xref> 지정 된 메시지 오류를 설명 하는 클래스입니다."
  remarks: "다음 표에서 <xref:System.AccessViolationException>안내 하십시오.</xref:System.AccessViolationException> 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 값 |   |--------------|-----------|   | <xref:System.Exception.InnerException%2A>| `null`.|   | <xref:System.Exception.Message%2A>| 에 지정 된 오류 메시지 문자열 `message`. |</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public AccessViolationException (string message);
    parameters:
    - id: message
      type: System.String
      description: "예외를 설명 하는 메시지입니다. 이 생성자의 호출자는이 문자열이 현재 시스템 문화권에 맞게 지역화 되었는지 확인 해야 합니다."
  overload: System.AccessViolationException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.AccessViolationException
  langs:
  - csharp
  name: AccessViolationException(SerializationInfo,StreamingContext)
  nameWithType: AccessViolationException.AccessViolationException(SerializationInfo,StreamingContext)
  fullName: System.AccessViolationException.AccessViolationException(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.AccessViolationException&quot;> </xref> serialize 된 데이터 클래스입니다."
  remarks: "이 생성자는 스트림을 통해 전송 된 예외 개체를 다시 구성 하기 위해 역직렬화 하는 동안 호출 됩니다. 자세한 내용은 참조 [XML 및 SOAP Serialization](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: protected AccessViolationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> 직렬화 된 개체 데이터를 보유 하 합니다."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>소스 또는 대상에 대 한 컨텍스트 정보를 포함 하는.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.AccessViolationException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.AccessViolationException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.AccessViolationException
  langs:
  - csharp
  name: AccessViolationException(String,Exception)
  nameWithType: AccessViolationException.AccessViolationException(String,Exception)
  fullName: System.AccessViolationException.AccessViolationException(String,Exception)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.AccessViolationException&quot;> </xref> 지정된 된 오류 메시지와 해당 예외의 원인인 내부 예외에 대 한 참조를 사용 하 여 클래스입니다."
  remarks: "이전 예외의 직접적인 결과에 이전 예외에 대 한 참조가 들어 있어야 throw 되는 예외는 <xref:System.Exception.InnerException%2A>속성.</xref:System.Exception.InnerException%2A> <xref:System.Exception.InnerException%2A>속성은 생성자에 전달 되는 동일한 값을 반환 하거나 `null` 경우는 <xref:System.Exception.InnerException%2A>생성자에 내부 예외 값을 제공 하지 않는.</xref:System.Exception.InnerException%2A> </xref:System.Exception.InnerException%2A>       다음 표에서 <xref:System.AccessViolationException>안내 하십시오.</xref:System.AccessViolationException> 인스턴스에 대 한 초기 속성 값을 보여 줍니다.      | 속성 | 값 |   |--------------|-----------|   | <xref:System.Exception.InnerException%2A>| `null`.|   | <xref:System.Exception.Message%2A>| 에 지정 된 오류 메시지 문자열 `message`. |</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public AccessViolationException (string message, Exception innerException);
    parameters:
    - id: message
      type: System.String
      description: "예외를 설명 하는 메시지입니다. 이 생성자의 호출자는이 문자열이 현재 시스템 문화권에 맞게 지역화 되었는지 확인 해야 합니다."
    - id: innerException
      type: System.Exception
      description: "현재 예외의 원인인 예외입니다. 경우는 `innerException` 매개 변수가 않습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>에서 현재 예외가 발생 한 <xref uid=&quot;langword_csharp_catch&quot; name=&quot;catch&quot; href=&quot;&quot;> </xref> 내부 예외를 처리 하는 블록입니다."
  overload: System.AccessViolationException.#ctor*
  exceptions: []
  platform:
  - net462
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.AccessViolationException.#ctor
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException()
  nameWithType: AccessViolationException.AccessViolationException()
  fullName: System.AccessViolationException.AccessViolationException()
- uid: System.AccessViolationException.#ctor(System.String)
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException(String)
  nameWithType: AccessViolationException.AccessViolationException(String)
  fullName: System.AccessViolationException.AccessViolationException(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException(SerializationInfo,StreamingContext)
  nameWithType: AccessViolationException.AccessViolationException(SerializationInfo,StreamingContext)
  fullName: System.AccessViolationException.AccessViolationException(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.AccessViolationException.#ctor(System.String,System.Exception)
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException(String,Exception)
  nameWithType: AccessViolationException.AccessViolationException(String,Exception)
  fullName: System.AccessViolationException.AccessViolationException(String,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.AccessViolationException.#ctor*
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException
  nameWithType: AccessViolationException.AccessViolationException
