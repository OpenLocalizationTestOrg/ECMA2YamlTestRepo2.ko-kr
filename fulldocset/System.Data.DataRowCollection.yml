### YamlMime:ManagedReference
items:
- uid: System.Data.DataRowCollection
  id: DataRowCollection
  children:
  - System.Data.DataRowCollection.Add(System.Data.DataRow)
  - System.Data.DataRowCollection.Add(System.Object[])
  - System.Data.DataRowCollection.Clear
  - System.Data.DataRowCollection.Contains(System.Object)
  - System.Data.DataRowCollection.Contains(System.Object[])
  - System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)
  - System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)
  - System.Data.DataRowCollection.Count
  - System.Data.DataRowCollection.Find(System.Object)
  - System.Data.DataRowCollection.Find(System.Object[])
  - System.Data.DataRowCollection.GetEnumerator
  - System.Data.DataRowCollection.IndexOf(System.Data.DataRow)
  - System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)
  - System.Data.DataRowCollection.Item(System.Int32)
  - System.Data.DataRowCollection.Remove(System.Data.DataRow)
  - System.Data.DataRowCollection.RemoveAt(System.Int32)
  langs:
  - csharp
  name: DataRowCollection
  nameWithType: DataRowCollection
  fullName: System.Data.DataRowCollection
  type: Class
  summary: "에 대 한 행의 컬렉션을 나타냅니다는 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다."
  remarks: "DataRowCollection <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 의 주요 구성 요소인 동안는 <xref:System.Data.DataColumnCollection>의 스키마 정의 DataRowCollection 테이블의 테이블에 대 한 실제 데이터를 포함 여기서 각 <xref:System.Data.DataRow>는 DataRowCollection에 하나의 행을 나타냅니다.</xref:System.Data.DataRow> </xref:System.Data.DataColumnCollection>       호출할 수 있습니다는 <xref:System.Data.DataRowCollection.Add%2A>및 <xref:System.Data.DataRowCollection.Remove%2A>삽입 및 삭제 하는 메서드를 <xref:System.Data.DataRow>개체는 DataRowCollection에서.</xref:System.Data.DataRow> </xref:System.Data.DataRowCollection.Remove%2A> </xref:System.Data.DataRowCollection.Add%2A> 호출할 수도 있습니다는 <xref:System.Data.DataRowCollection.Find%2A>검색할 메서드의 <xref:System.Data.DataRow>기본 키 열에 있는 특정 값을 포함 하는 개체 및 <xref:System.Data.DataRowCollection.Contains%2A>메서드를 한 단어 또는 구를 문자 기반 데이터를 검색 합니다.</xref:System.Data.DataRowCollection.Contains%2A> </xref:System.Data.DataRow> </xref:System.Data.DataRowCollection.Find%2A>       정렬 또는 DataRowCollection, 필터링 등의 다른 작업에 대 한. DataRowCollection의 관련된 의 메서드를 사용"
  example:
  - "The first example in this section prints the value of column 1 for every row in a DataRowCollection. The second example adds a new row created by using the <xref:System.Data.DataTable.NewRow%2A> method to the DataRowCollection.  \n  \n [!code-cs[Classic WebData DataRowCollection Example#1](~/add/codesnippet/csharp/t-system.data.datarowcol_1.cs)]\n [!code-vb[Classic WebData DataRowCollection Example#1](~/add/codesnippet/visualbasic/t-system.data.datarowcol_1.vb)]"
  syntax:
    content: 'public sealed class DataRowCollection : System.Data.InternalDataCollectionBase'
  inheritance:
  - System.Object
  - System.Data.InternalDataCollectionBase
  implements: []
  inheritedMembers:
  - System.Data.InternalDataCollectionBase.IsReadOnly
  - System.Data.InternalDataCollectionBase.IsSynchronized
  - System.Data.InternalDataCollectionBase.List
  - System.Data.InternalDataCollectionBase.SyncRoot
  platform:
  - net462
- uid: System.Data.DataRowCollection.Add(System.Data.DataRow)
  id: Add(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Add(DataRow)
  nameWithType: DataRowCollection.Add(DataRow)
  fullName: System.Data.DataRowCollection.Add(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 추가 <xref href=&quot;System.Data.DataRow&quot;> </xref> 에 <xref href=&quot;System.Data.DataRowCollection&quot;> </xref> 개체입니다."
  remarks: "새 <xref:System.Data.DataRow> <xref:System.Data.DataTable.NewRow%2A> <xref:System.Data.DataTable>클래스</xref:System.Data.DataTable> 의 메서드</xref:System.Data.DataTable.NewRow%2A> 를 사용 하 여</xref:System.Data.DataRow> 를 만들려면 사용 하는 경우의 <xref:System.Data.DataTable.NewRow%2A>메서드를 <xref:System.Data.DataRow>부모 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 의 스키마를 사용 하 여 개체를 반환 하</xref:System.Data.DataRow> 는 새</xref:System.Data.DataTable.NewRow%2A> 만든 후의 <xref:System.Data.DataRow>개체 및의 각 열에 대 한 값을 설정, Add 메서드를 사용 하 여 개체를 컬렉션에 추가 합니다.</xref:System.Data.DataRow>       사용자에서 예외를 생성 하는 경우 예외를 생성 된 <xref:System.Data.DataTable.RowChanging>이벤트.</xref:System.Data.DataTable.RowChanging> 예외가 발생 하는 경우 테이블에 행 추가 되지 않습니다."
  example:
  - "The following example uses the Add method to add a new <xref:System.Data.DataRow> to a <xref:System.Data.DataRowCollection> object.  \n  \n [!code-cs[Classic WebData DataRowCollection.Add Example#1](~/add/codesnippet/csharp/m-system.data.datarowcol_2_1.cs)]\n [!code-vb[Classic WebData DataRowCollection.Add Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_2_1.vb)]"
  syntax:
    content: public void Add (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "The <xref href=&quot;System.Data.DataRow&quot;></xref> to add."
  overload: System.Data.DataRowCollection.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "행은 null입니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "행을 다른 테이블에 속해 또는이 테이블에 이미 속해 있습니다."
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "추가 제약 조건을 무효화합니다."
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "추가 시도에 null을 저장 하는 <xref href=&quot;System.Data.DataColumn&quot;> </xref> 여기서 <xref:System.Data.DataColumn.AllowDBNull*>가 false.</xref:System.Data.DataColumn.AllowDBNull*>"
  platform:
  - net462
- uid: System.Data.DataRowCollection.Add(System.Object[])
  id: Add(System.Object[])
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Add(Object[])
  nameWithType: DataRowCollection.Add(Object[])
  fullName: System.Data.DataRowCollection.Add(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 값을 사용 하 여 행을 만들고에 추가 된 <xref href=&quot;System.Data.DataRowCollection&quot;> </xref>합니다."
  remarks: "경우는 <xref:System.Data.DataColumn>개체에 해당 <xref:System.Data.DataColumn.AutoIncrement%2A>True로 설정 된 null이 전달 되어야 해당 열에 대 한 기본값을 가져오려는.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn>       예외는 수행 하는 동안 예외를 생성 하는 경우에 발생할 수 있습니다는 <xref:System.Data.DataTable.ColumnChanging>또는 <xref:System.Data.DataTable.RowChanging>이벤트.</xref:System.Data.DataTable.RowChanging> </xref:System.Data.DataTable.ColumnChanging> 예외가 발생 하는 경우 테이블에 행 추가 되지 않습니다."
  example:
  - "The following example uses the <xref:System.Data.DataRowCollection.Add%2A> method to create and add a new <xref:System.Data.DataRow> object to a <xref:System.Data.DataRowCollection>.  \n  \n [!code-cs[Classic WebData DataRowCollection.Add1 Example#1](~/add/codesnippet/csharp/m-system.data.datarowcol_5_1.cs)]\n [!code-vb[Classic WebData DataRowCollection.Add1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_5_1.vb)]"
  syntax:
    content: public System.Data.DataRow Add (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "새 행을 만들고 사용 되는 값의 배열입니다."
    return:
      type: System.Data.DataRow
      description: "없음."
  overload: System.Data.DataRowCollection.Add*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "배열의는 테이블의 열 개수 보다 큽니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "값을 해당 열 형식과 일치 하지 않습니다."
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "제약 조건을 무효화 행을 추가 합니다."
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "열에 null을 추가 하려는 위치 <xref:System.Data.DataColumn.AllowDBNull*>은 false입니다.</xref:System.Data.DataColumn.AllowDBNull*>"
  platform:
  - net462
- uid: System.Data.DataRowCollection.Clear
  id: Clear
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: DataRowCollection.Clear()
  fullName: System.Data.DataRowCollection.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "모든 행의 컬렉션을 지웁니다."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.DataRowCollection.Clear*
  exceptions:
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "A <xref href=&quot;System.Data.ForeignKeyConstraint&quot;> </xref> 에 적용 된 <xref href=&quot;System.Data.DataRowCollection&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Data.DataRowCollection.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: DataRowCollection.Contains(Object)
  fullName: System.Data.DataRowCollection.Contains(Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "컬렉션에 있는 모든 행의 기본 키에 지정 된 값이 들어 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "Contains 메서드를 사용 하는 <xref:System.Data.DataTable>있는 개체를는 <xref:System.Data.DataRowCollection>개체가 있어야 속한 기본 키 열으로 지정 된 열이 하나 이상.</xref:System.Data.DataRowCollection> </xref:System.Data.DataTable> 참조는 <xref:System.Data.DataTable.PrimaryKey%2A>기본 키 열을 만드는 방법에 대 한 자세한 내용은.</xref:System.Data.DataTable.PrimaryKey%2A>       사용할 수는 행에 지정된 된 값이 포함 되어 있는지를 확인 한으로 <xref:System.Data.DataRowCollection.Find%2A>특정을 반환 하는 메서드 <xref:System.Data.DataRow>개체 값입니다.</xref:System.Data.DataRow> </xref:System.Data.DataRowCollection.Find%2A>"
  example:
  - "The following Visual Basic example uses the Contains method to determine whether a <xref:System.Data.DataRowCollection> object contains a specific value.  \n  \n [!code-vb[Classic WebData DataRowCollection.Contains Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_7_1.vb)]"
  syntax:
    content: public bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "테스트 하기 위해 기본 키의 값입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>컬렉션에 있으면는 <xref href=&quot;System.Data.DataRow&quot;> </xref> 지정 된 기본 키 값입니다; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.DataRowCollection.Contains*
  exceptions:
  - type: System.Data.MissingPrimaryKeyException
    commentId: T:System.Data.MissingPrimaryKeyException
    description: "테이블에 기본 키가 없는 합니다."
  platform:
  - net462
- uid: System.Data.DataRowCollection.Contains(System.Object[])
  id: Contains(System.Object[])
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Contains(Object[])
  nameWithType: DataRowCollection.Contains(Object[])
  fullName: System.Data.DataRowCollection.Contains(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "컬렉션에 있는 모든 행의 기본 키 열을 개체 배열에 지정 된 값을 포함 하는지 여부를 나타내는 값을 가져옵니다."
  remarks: "사용 하는 <xref:System.Data.DataRowCollection.Contains%2A>값의 배열 사용 하 여 메서드는 <xref:System.Data.DataTable>있는 개체를는 <xref:System.Data.DataRowCollection>개체가 속해 있어야 기본 키로 지정 된 열 세트가 있습니다.</xref:System.Data.DataRowCollection> </xref:System.Data.DataTable> </xref:System.Data.DataRowCollection.Contains%2A> 참조는 <xref:System.Data.DataTable.PrimaryKey%2A>배열을의 기본 키 열을 만드는 방법에 대 한 자세한 내용은.</xref:System.Data.DataTable.PrimaryKey%2A> 배열 요소의 수 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 기본 키 열의 수와 일치 해야 합니다.       사용 하 여 행에 지정된 된 값을 결정 했으면으로 <xref:System.Data.DataRowCollection.Find%2A>특정을 반환 하는 메서드 <xref:System.Data.DataRow>개체 값입니다.</xref:System.Data.DataRow> </xref:System.Data.DataRowCollection.Find%2A>"
  example:
  - "The following Visual Basic example uses the <xref:System.Data.DataRowCollection.Contains%2A> method to find a particular row in a <xref:System.Data.DataRowCollection> object. The example creates an array of values, one element for each primary key in the table, and then passes the array to the method to return a `true` or `false`.  \n  \n [!code-vb[Classic WebData DataRowCollection.Contains1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_4_1.vb)]"
  syntax:
    content: public bool Contains (object[] keys);
    parameters:
    - id: keys
      type: System.Object[]
      description: "테스트 하기 위해 기본 키 값의 배열입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Data.DataRowCollection&quot;> </xref> 포함 한 <xref href=&quot;System.Data.DataRow&quot;> </xref> ; 지정 된 키 값을 가진 그렇지 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.DataRowCollection.Contains*
  exceptions:
  - type: System.Data.MissingPrimaryKeyException
    commentId: T:System.Data.MissingPrimaryKeyException
    description: "테이블에 기본 키가 없는 합니다."
  platform:
  - net462
- uid: System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: DataRowCollection.CopyTo(Array,Int32)
  fullName: System.Data.DataRowCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "모든 복사는 <xref href=&quot;System.Data.DataRow&quot;> </xref> 지정 된 대상 배열 인덱스부터 지정된 된 배열에 컬렉션에서 개체입니다."
  syntax:
    content: public override void CopyTo (Array ar, int index);
    parameters:
    - id: ar
      type: System.Array
      description: "복사한 요소의 대상인&1; 차원 배열에서 <xref uid=&quot;langword_csharp_DataRowCollection&quot; name=&quot;DataRowCollection&quot; href=&quot;&quot;> </xref>합니다. 배열에는&0;부터 시작 하는 인덱스가 있어야 합니다."
    - id: index
      type: System.Int32
      description: "복사를 시작할 배열 인덱스는&0;부터 시작을 시작 합니다."
  overload: System.Data.DataRowCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)
  id: CopyTo(System.Data.DataRow[],System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: CopyTo(DataRow[],Int32)
  nameWithType: DataRowCollection.CopyTo(DataRow[],Int32)
  fullName: System.Data.DataRowCollection.CopyTo(DataRow[],Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "모든 복사는 <xref href=&quot;System.Data.DataRow&quot;> </xref> 지정 된 대상 배열 인덱스부터 지정된 된 배열에 컬렉션에서 개체입니다."
  syntax:
    content: public void CopyTo (System.Data.DataRow[] array, int index);
    parameters:
    - id: array
      type: System.Data.DataRow[]
      description: "복사한 요소의 대상인&1; 차원 배열에서 <xref uid=&quot;langword_csharp_DataRowCollection&quot; name=&quot;DataRowCollection&quot; href=&quot;&quot;> </xref>합니다. 배열에는&0;부터 시작 하는 인덱스가 있어야 합니다."
    - id: index
      type: System.Int32
      description: "복사를 시작할 배열 인덱스는&0;부터 시작을 시작 합니다."
  overload: System.Data.DataRowCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.Count
  id: Count
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Count
  nameWithType: DataRowCollection.Count
  fullName: System.Data.DataRowCollection.Count
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "총 수를 가져옵니다 <xref href=&quot;System.Data.DataRow&quot;> </xref> 이 컬렉션의 개체입니다."
  syntax:
    content: public override int Count { get; }
    return:
      type: System.Int32
      description: "총 <xref href=&quot;System.Data.DataRow&quot;> </xref> 이 컬렉션의 개체입니다."
  overload: System.Data.DataRowCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.Find(System.Object)
  id: Find(System.Object)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Find(Object)
  nameWithType: DataRowCollection.Find(Object)
  fullName: System.Data.DataRowCollection.Find(Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "기본 키 값으로 지정 된 행을 가져옵니다."
  remarks: "사용 하는 `Find` 메서드를는 <xref:System.Data.DataTable>있는 개체를는 <xref:System.Data.DataRowCollection>개체가 속한 해야 기본 키 열으로 지정 된 열이 하나 이상.</xref:System.Data.DataRowCollection> </xref:System.Data.DataTable> 참조는 <xref:System.Data.DataTable.PrimaryKey%2A>기본 키 열을 만드는 방법에 대 한 자세한 내용은.</xref:System.Data.DataTable.PrimaryKey%2A>"
  example:
  - "The following example uses the Find method to find the primary key value \"2\" in a collection of <xref:System.Data.DataRow> objects. The method returns the specific <xref:System.Data.DataRow> object letting you change its values, as needed.  \n  \n [!code-vb[Classic WebData DataRowCollection.Find Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_0_1.vb)]\n [!code-cs[Classic WebData DataRowCollection.Find Example#1](~/add/codesnippet/csharp/m-system.data.datarowcol_0_1.cs)]"
  syntax:
    content: public System.Data.DataRow Find (object key);
    parameters:
    - id: key
      type: System.Object
      description: "기본 키 값은 <xref href=&quot;System.Data.DataRow&quot;> </xref> 찾으려고 합니다."
    return:
      type: System.Data.DataRow
      description: "A <xref href=&quot;System.Data.DataRow&quot;> </xref> null 기본 키 값에 존재 하지 않는 경우 값이 고, 그렇지 않으면 지정 된 기본 키 값을 포함 하는 <xref href=&quot;System.Data.DataRowCollection&quot;> </xref>합니다."
  overload: System.Data.DataRowCollection.Find*
  exceptions:
  - type: System.Data.MissingPrimaryKeyException
    commentId: T:System.Data.MissingPrimaryKeyException
    description: "테이블에 기본 키가 없는 합니다."
  platform:
  - net462
- uid: System.Data.DataRowCollection.Find(System.Object[])
  id: Find(System.Object[])
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Find(Object[])
  nameWithType: DataRowCollection.Find(Object[])
  fullName: System.Data.DataRowCollection.Find(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 기본 키 값이 포함 된 행을 가져옵니다."
  remarks: "사용 하는 <xref:System.Data.DataRowCollection.Find%2A>메서드를는 <xref:System.Data.DataTable>있는 개체를는 <xref:System.Data.DataRowCollection>개체가 속한 해야 기본 키 열으로 지정 된 열이 하나 이상.</xref:System.Data.DataRowCollection> </xref:System.Data.DataTable> </xref:System.Data.DataRowCollection.Find%2A> 두 개 이상의 행이 동일한 기본 키 값을가지고 때 찾은 첫 번째 행이 반환 됩니다. 이럴 때 <xref:System.Data.DataSet.EnforceConstraints%2A>false로 설정 됩니다.</xref:System.Data.DataSet.EnforceConstraints%2A> 참조는 <xref:System.Data.DataTable.PrimaryKey%2A>를 만드는 방법에 대 한 자세한 내용은 <xref:System.Data.DataTable.PrimaryKey%2A>열 또는 배열을 <xref:System.Data.DataColumn>개체는 테이블에 둘 이상의 기본 키.</xref:System.Data.DataColumn> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataTable.PrimaryKey%2A>"
  example:
  - "The following example uses the values of an array to find a specific row in a collection of <xref:System.Data.DataRow> objects. The method assumes that a <xref:System.Data.DataTable> exists with three primary key columns. After creating an array of the values, the code uses the <xref:System.Data.DataRowCollection.Find%2A> method with the array to get the particular object that you want.  \n  \n [!code-cs[Classic WebData DataRowCollection.Find1 Example#1](~/add/codesnippet/csharp/m-system.data.datarowcol_6_1.cs)]\n [!code-vb[Classic WebData DataRowCollection.Find1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_6_1.vb)]"
  syntax:
    content: public System.Data.DataRow Find (object[] keys);
    parameters:
    - id: keys
      type: System.Object[]
      description: "찾을 수 있는 기본 키 값의 배열입니다. 배열 형식이 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Data.DataRow
      description: "A <xref href=&quot;System.Data.DataRow&quot;> </xref> 지정 된 기본 키 값을 포함 하는 개체, 그렇지 않은 경우에 null 값이 기본 키 값에 존재 하지 않는 경우는 <xref href=&quot;System.Data.DataRowCollection&quot;> </xref>합니다."
  overload: System.Data.DataRowCollection.Find*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "행이 해당 인덱스 값에 해당합니다."
  - type: System.Data.MissingPrimaryKeyException
    commentId: T:System.Data.MissingPrimaryKeyException
    description: "테이블에 기본 키가 없는 합니다."
  platform:
  - net462
- uid: System.Data.DataRowCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: DataRowCollection.GetEnumerator()
  fullName: System.Data.DataRowCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "가져옵니다는 <xref:System.Collections.IEnumerator>이 컬렉션에 대 한.</xref:System.Collections.IEnumerator>"
  syntax:
    content: public override System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>이 컬렉션에 대 한.</xref:System.Collections.IEnumerator>"
  overload: System.Data.DataRowCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.IndexOf(System.Data.DataRow)
  id: IndexOf(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: IndexOf(DataRow)
  nameWithType: DataRowCollection.IndexOf(DataRow)
  fullName: System.Data.DataRowCollection.IndexOf(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 인덱스를 가져옵니다 <xref href=&quot;System.Data.DataRow&quot;> </xref> 개체입니다."
  syntax:
    content: public int IndexOf (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "<xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> 을 찾으려고 합니다."
    return:
      type: System.Int32
      description: "행 또는 행 컬렉션에 없는 경우-1의&0;부터 시작 하는 인덱스입니다."
  overload: System.Data.DataRowCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)
  id: InsertAt(System.Data.DataRow,System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: InsertAt(DataRow,Int32)
  nameWithType: DataRowCollection.InsertAt(DataRow,Int32)
  fullName: System.Data.DataRowCollection.InsertAt(DataRow,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "컬렉션에서 지정된 된 위치에 새 행을 삽입합니다."
  remarks: "행의 순서에 따라서만 InsertAt로 지정 된 위치 반영 되는 <xref:System.Data.DataRowCollection>만.</xref:System.Data.DataRowCollection> 에 둘 이상의 행이 반환 되는 <xref:System.Data.DataRow>배열에 삽입된 된 행 InsertAt에서 지정한 위치에 반환 될 수 있습니다.</xref:System.Data.DataRow> 예를 들어는 <xref:System.Data.DataTable.Rows%2A>속성이 지정 된 삽입 위치에 행을 반환 합니다.</xref:System.Data.DataTable.Rows%2A> <xref:System.Data.DataTable.Select%2A>및 <xref:System.Data.DataRow.GetChildRows%2A>하지 않을 수 있습니다.</xref:System.Data.DataRow.GetChildRows%2A></xref:System.Data.DataTable.Select%2A> <xref:System.Data.DataRowCollection>XML의 <xref:System.Data.DataSet.WriteXml%2A>행에 <xref:System.Data.DataRowCollection>.</xref:System.Data.DataRowCollection> 지정 된 순서에 따라 기록 되 고,</xref:System.Data.DataSet.WriteXml%2A> 예를 들어로</xref:System.Data.DataRowCollection> 콘텐츠를 작성 하는 경우       에 대 한 지정 된 값은 `pos` 매개 변수가 컬렉션의 행 수보다 크면 새 행의 끝에 추가 됩니다."
  syntax:
    content: public void InsertAt (System.Data.DataRow row, int pos);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "The <xref href=&quot;System.Data.DataRow&quot;></xref> to add."
    - id: pos
      type: System.Int32
      description: "추가 하려는 컬렉션에 (0부터 시작) 위치는 <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.DataRowCollection.InsertAt*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: DataRowCollection.Item(Int32)
  fullName: System.Data.DataRowCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정된 된 인덱스에서 행을 가져옵니다."
  remarks: "사용 하 여는 <xref:System.Data.DataRowCollection.Contains%2A>메서드는 행의 키 열에 특정 값이 있는지 여부를 확인 합니다.</xref:System.Data.DataRowCollection.Contains%2A>"
  example:
  - "The following example prints the value of column 1 of each row in a <xref:System.Data.DataRowCollection>.  \n  \n [!code-vb[Classic WebData DataRowCollection.this Example#1](~/add/codesnippet/visualbasic/p-system.data.datarowcol_1.vb)]\n [!code-cs[Classic WebData DataRowCollection.this Example#1](~/add/codesnippet/csharp/p-system.data.datarowcol_1.cs)]"
  syntax:
    content: public System.Data.DataRow this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "반환할 행의&0;부터 시작 하는 인덱스입니다."
    return:
      type: System.Data.DataRow
      description: "지정 된 <xref href=&quot;System.Data.DataRow&quot;> </xref>합니다."
  overload: System.Data.DataRowCollection.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "인덱스 값이 컬렉션의 항목 개수 보다 큽니다."
  platform:
  - net462
- uid: System.Data.DataRowCollection.Remove(System.Data.DataRow)
  id: Remove(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Remove(DataRow)
  nameWithType: DataRowCollection.Remove(DataRow)
  fullName: System.Data.DataRowCollection.Remove(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "지정 된 제거 <xref href=&quot;System.Data.DataRow&quot;> </xref> 컬렉션에서 합니다."
  remarks: "행이 제거 되는 행의 모든 데이터가 손실 됩니다. 호출할 수도 있습니다는 <xref:System.Data.DataRow.Delete%2A>의 메서드는 <xref:System.Data.DataRow>에게만 클래스 제거에 대 한 행을 표시 합니다.</xref:System.Data.DataRow> </xref:System.Data.DataRow.Delete%2A> 호출 `Remove` 호출 <xref:System.Data.DataRow.Delete%2A>하 고 호출할 <xref:System.Data.DataRow.AcceptChanges%2A>.</xref:System.Data.DataRow.AcceptChanges%2A> </xref:System.Data.DataRow.Delete%2A> 와 같습니다       제거 호출 하지 않아야 foreach 루프에서 반복 하는 동안는 <xref:System.Data.DataRowCollection>개체입니다.</xref:System.Data.DataRowCollection> 제거는 컬렉션의 상태를 수정합니다.       사용할 수도 있습니다는 <xref:System.Data.DataRowCollection.Clear%2A>메서드를 한 번에 컬렉션의 모든 구성원을 제거 합니다.</xref:System.Data.DataRowCollection.Clear%2A>"
  example:
  - "The following example uses the Remove method to delete a found row in a <xref:System.Data.DataRowCollection> object. The example first uses the <xref:System.Data.DataRowCollection.Contains%2A> method to determine whether the rows collection contains a row. If it does, the <xref:System.Data.DataRowCollection.Find%2A> method is used to find the specific row, and the Remove method is then used to remove the row.  \n  \n [!code-vb[Classic WebData DataRowCollection.Remove Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_1_1.vb)]"
  syntax:
    content: public void Remove (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "<xref href=&quot;System.Data.DataRow&quot;> </xref> 를 제거 합니다."
  overload: System.Data.DataRowCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: DataRowCollection.RemoveAt(Int32)
  fullName: System.Data.DataRowCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "컬렉션에서 지정된 된 인덱스에서 행을 제거합니다."
  remarks: "행이 제거 되는 행의 모든 데이터가 손실 됩니다. 호출할 수도 있습니다는 <xref:System.Data.DataRow.Delete%2A>의 메서드는 <xref:System.Data.DataRow>에게만 클래스 제거에 대 한 행을 표시 합니다.</xref:System.Data.DataRow> </xref:System.Data.DataRow.Delete%2A> 호출 `RemoveAt` 호출 <xref:System.Data.DataRow.Delete%2A>하 고 호출할 <xref:System.Data.DataRow.AcceptChanges%2A>.</xref:System.Data.DataRow.AcceptChanges%2A> </xref:System.Data.DataRow.Delete%2A> 와 같습니다       사용할 수는 <xref:System.Data.DataRowCollection.Clear%2A>메서드를 한 번에 컬렉션의 모든 구성원을 제거 합니다.</xref:System.Data.DataRowCollection.Clear%2A>"
  example:
  - "The following example removes the last row in a <xref:System.Data.DataRowCollection> by calling the RemoveAt method.  \n  \n [!code-vb[Classic WebData DataRowCollection.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_3_1.vb)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "제거할 행의 인덱스입니다."
  overload: System.Data.DataRowCollection.RemoveAt*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.InternalDataCollectionBase
  isExternal: false
  name: System.Data.InternalDataCollectionBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.ConstraintException
  parent: System.Data
  isExternal: false
  name: ConstraintException
  nameWithType: ConstraintException
  fullName: System.Data.ConstraintException
- uid: System.Data.NoNullAllowedException
  parent: System.Data
  isExternal: false
  name: NoNullAllowedException
  nameWithType: NoNullAllowedException
  fullName: System.Data.NoNullAllowedException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Data.InvalidConstraintException
  parent: System.Data
  isExternal: false
  name: InvalidConstraintException
  nameWithType: InvalidConstraintException
  fullName: System.Data.InvalidConstraintException
- uid: System.Data.MissingPrimaryKeyException
  parent: System.Data
  isExternal: false
  name: MissingPrimaryKeyException
  nameWithType: MissingPrimaryKeyException
  fullName: System.Data.MissingPrimaryKeyException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Data.DataRowCollection.Add(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Add(DataRow)
  nameWithType: DataRowCollection.Add(DataRow)
  fullName: System.Data.DataRowCollection.Add(DataRow)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DataRowCollection.Add(System.Object[])
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Add(Object[])
  nameWithType: DataRowCollection.Add(Object[])
  fullName: System.Data.DataRowCollection.Add(Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRowCollection.Clear
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Clear()
  nameWithType: DataRowCollection.Clear()
  fullName: System.Data.DataRowCollection.Clear()
- uid: System.Data.DataRowCollection.Contains(System.Object)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Contains(Object)
  nameWithType: DataRowCollection.Contains(Object)
  fullName: System.Data.DataRowCollection.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataRowCollection.Contains(System.Object[])
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Contains(Object[])
  nameWithType: DataRowCollection.Contains(Object[])
  fullName: System.Data.DataRowCollection.Contains(Object[])
- uid: System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: DataRowCollection.CopyTo(Array,Int32)
  fullName: System.Data.DataRowCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: CopyTo(DataRow[],Int32)
  nameWithType: DataRowCollection.CopyTo(DataRow[],Int32)
  fullName: System.Data.DataRowCollection.CopyTo(DataRow[],Int32)
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRowCollection.Count
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Count
  nameWithType: DataRowCollection.Count
  fullName: System.Data.DataRowCollection.Count
- uid: System.Data.DataRowCollection.Find(System.Object)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Find(Object)
  nameWithType: DataRowCollection.Find(Object)
  fullName: System.Data.DataRowCollection.Find(Object)
- uid: System.Data.DataRowCollection.Find(System.Object[])
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Find(Object[])
  nameWithType: DataRowCollection.Find(Object[])
  fullName: System.Data.DataRowCollection.Find(Object[])
- uid: System.Data.DataRowCollection.GetEnumerator
  parent: System.Data.DataRowCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: DataRowCollection.GetEnumerator()
  fullName: System.Data.DataRowCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.DataRowCollection.IndexOf(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: IndexOf(DataRow)
  nameWithType: DataRowCollection.IndexOf(DataRow)
  fullName: System.Data.DataRowCollection.IndexOf(DataRow)
- uid: System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: InsertAt(DataRow,Int32)
  nameWithType: DataRowCollection.InsertAt(DataRow,Int32)
  fullName: System.Data.DataRowCollection.InsertAt(DataRow,Int32)
- uid: System.Data.DataRowCollection.Item(System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: DataRowCollection.Item(Int32)
  fullName: System.Data.DataRowCollection.Item(Int32)
- uid: System.Data.DataRowCollection.Remove(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Remove(DataRow)
  nameWithType: DataRowCollection.Remove(DataRow)
  fullName: System.Data.DataRowCollection.Remove(DataRow)
- uid: System.Data.DataRowCollection.RemoveAt(System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: DataRowCollection.RemoveAt(Int32)
  fullName: System.Data.DataRowCollection.RemoveAt(Int32)
- uid: System.Data.DataRowCollection.Add*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Add
  nameWithType: DataRowCollection.Add
- uid: System.Data.DataRowCollection.Clear*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Clear
  nameWithType: DataRowCollection.Clear
- uid: System.Data.DataRowCollection.Contains*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Contains
  nameWithType: DataRowCollection.Contains
- uid: System.Data.DataRowCollection.CopyTo*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: CopyTo
  nameWithType: DataRowCollection.CopyTo
- uid: System.Data.DataRowCollection.Count*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Count
  nameWithType: DataRowCollection.Count
- uid: System.Data.DataRowCollection.Find*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Find
  nameWithType: DataRowCollection.Find
- uid: System.Data.DataRowCollection.GetEnumerator*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: DataRowCollection.GetEnumerator
- uid: System.Data.DataRowCollection.IndexOf*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: IndexOf
  nameWithType: DataRowCollection.IndexOf
- uid: System.Data.DataRowCollection.InsertAt*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: InsertAt
  nameWithType: DataRowCollection.InsertAt
- uid: System.Data.DataRowCollection.Item*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Item
  nameWithType: DataRowCollection.Item
- uid: System.Data.DataRowCollection.Remove*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Remove
  nameWithType: DataRowCollection.Remove
- uid: System.Data.DataRowCollection.RemoveAt*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: RemoveAt
  nameWithType: DataRowCollection.RemoveAt
