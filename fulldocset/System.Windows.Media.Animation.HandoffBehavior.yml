### YamlMime:ManagedReference
items:
- uid: System.Windows.Media.Animation.HandoffBehavior
  id: HandoffBehavior
  children:
  - System.Windows.Media.Animation.HandoffBehavior.Compose
  - System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace
  langs:
  - csharp
  name: HandoffBehavior
  nameWithType: HandoffBehavior
  fullName: System.Windows.Media.Animation.HandoffBehavior
  type: Enum
  summary: "지정 방법을 새 애니메이션이 이미 속성에 적용 되는 기존 애니메이션과 상호 작용 합니다."
  remarks: "적용 하는 경우는 <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, 또는 <xref:System.Windows.Media.Animation.AnimationClock>어떤 Compose를 사용 하 여 속성에 <xref:System.Windows.Media.Animation.Clock>해당 속성을 이전에 연관 된 개체가 시스템 리소스를 소비한 계속 있으며 타이밍 시스템 시계를 자동으로 제거 되지 것입니다.</xref:System.Windows.Media.Animation.Clock> </xref:System.Windows.Media.Animation.AnimationClock> </xref:System.Windows.Media.Animation.AnimationTimeline> </xref:System.Windows.Media.Animation.Storyboard>       많은 수의 작성을 사용 하 여 클럭을 적용할 때 성능 문제를 방지 하려면 완성 한 후 속성에서 구성 중인 clock 제거 해야 있습니다. 클록을 제거 하는 방법은 여러 가지가:-모든 clock 속성에서 제거을 사용 하려면는 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>또는 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>애니메이션된 된 개체의 메서드.</xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> </xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 `null` 를 두 번째입니다. 모든 애니메이션 클록 속성에서 제거 합니다.      -특정 <xref:System.Windows.Media.Animation.AnimationClock>시계를 목록에서 <xref:System.Windows.Media.Animation.Clock.Controller%2A> <xref:System.Windows.Media.Animation.AnimationClock>a <xref:System.Windows.Media.Animation.ClockController> <xref:System.Windows.Media.Animation.ClockController.Remove%2A> <xref:System.Windows.Media.Animation.ClockController>.</xref:System.Windows.Media.Animation.ClockController> 메서드</xref:System.Windows.Media.Animation.ClockController.Remove%2A> 호출을</xref:System.Windows.Media.Animation.ClockController> 검색 하</xref:System.Windows.Media.Animation.AnimationClock> 방법의 속성</xref:System.Windows.Media.Animation.Clock.Controller%2A> 을 사용 하 여</xref:System.Windows.Media.Animation.AnimationClock> 제거 하려면 이 일반적으로 수행 된 <xref:System.Windows.Media.Animation.Clock.Completed>클록에 대 한 이벤트 처리기.</xref:System.Windows.Media.Animation.Clock.Completed> 유일한 루트 클록을 제어할 수 있는 참고는 <xref:System.Windows.Media.Animation.ClockController>; <xref:System.Windows.Media.Animation.Clock.Controller%2A>자식 클록의 속성을 반환 `null`.</xref:System.Windows.Media.Animation.Clock.Controller%2A> </xref:System.Windows.Media.Animation.ClockController> 또한는 <xref:System.Windows.Media.Animation.Clock.Completed>클록의 유효 기간이 무제한 인 경우 이벤트를 발생 하지 것입니다.</xref:System.Windows.Media.Animation.Clock.Completed>  이 경우 사용자 <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</xref:System.Windows.Media.Animation.ClockController.Remove%2A> 를 호출 하는 경우 결정 해야       이 주로 수명이 긴 개체에 애니메이션에 대 한 문제입니다.  개체가 가비지 수집 된 경우 해당 clock도 끊어집니다 및 가비지 수집 합니다.       클록 개체에 대 한 자세한 내용은 참조 [애니메이션 및 타이밍 시스템 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public enum HandoffBehavior
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.Windows.Media.Animation.HandoffBehavior.Compose
  id: Compose
  parent: System.Windows.Media.Animation.HandoffBehavior
  langs:
  - csharp
  name: Compose
  nameWithType: HandoffBehavior.Compose
  fullName: System.Windows.Media.Animation.HandoffBehavior.Compose
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "새 애니메이션이 기존 애니메이션과 새 애니메이션을 컴퍼지션 체인의 끝에 추가 하 여 결합 됩니다."
  syntax:
    content: Compose
    return:
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace
  id: SnapshotAndReplace
  parent: System.Windows.Media.Animation.HandoffBehavior
  langs:
  - csharp
  name: SnapshotAndReplace
  nameWithType: HandoffBehavior.SnapshotAndReplace
  fullName: System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "새 애니메이션이 적용 되는 속성에서 기존 애니메이션을 대체 합니다."
  syntax:
    content: SnapshotAndReplace
    return:
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Windows.Media.Animation.HandoffBehavior.Compose
  parent: System.Windows.Media.Animation.HandoffBehavior
  isExternal: false
  name: Compose
  nameWithType: HandoffBehavior.Compose
  fullName: System.Windows.Media.Animation.HandoffBehavior.Compose
- uid: System.Windows.Media.Animation.HandoffBehavior
  parent: System.Windows.Media.Animation
  isExternal: false
  name: HandoffBehavior
  nameWithType: HandoffBehavior
  fullName: System.Windows.Media.Animation.HandoffBehavior
- uid: System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace
  parent: System.Windows.Media.Animation.HandoffBehavior
  isExternal: false
  name: SnapshotAndReplace
  nameWithType: HandoffBehavior.SnapshotAndReplace
  fullName: System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace
