### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.WebPartManager
  id: WebPartManager
  children:
  - System.Web.UI.WebControls.WebParts.WebPartManager.#ctor
  - System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections
  - System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  - System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart
  - System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers
  - System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode
  - System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  - System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  - System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode
  - System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript
  - System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning
  - System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode
  - System.Web.UI.WebControls.WebParts.WebPartManager.Connections
  - System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated
  - System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating
  - System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  - System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  - System.Web.UI.WebControls.WebParts.WebPartManager.Controls
  - System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(System.Type)
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(System.String,System.String,System.String,System.String,System.String)
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning
  - System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode
  - System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)
  - System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode
  - System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged
  - System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging
  - System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes
  - System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections
  - System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode
  - System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript
  - System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming
  - System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting
  - System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing
  - System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning
  - System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)
  - System.Web.UI.WebControls.WebParts.WebPartManager.Focus
  - System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager(System.Web.UI.Page)
  - System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(System.Xml.XmlReader,System.String@)
  - System.Web.UI.WebControls.WebParts.WebPartManager.Internals
  - System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty
  - System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState(System.Object)
  - System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  - System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet
  - System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet
  - System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.Personalization
  - System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript
  - System.Web.UI.WebControls.WebParts.WebPartManager.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState
  - System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  - System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart
  - System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged
  - System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging
  - System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty
  - System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.SkinID
  - System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections
  - System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes
  - System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty
  - System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  - System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  - System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState
  - System.Web.UI.WebControls.WebParts.WebPartManager.Visible
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebParts
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting
  - System.Web.UI.WebControls.WebParts.WebPartManager.Zones
  langs:
  - csharp
  name: WebPartManager
  nameWithType: WebPartManager
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager
  type: Class
  summary: "모든 웹 파트 컨트롤, 기능 및 관리 웹 페이지에서 발생 하는 이벤트 웹 파트 컨트롤 집합의 중앙 클래스로 사용 됩니다."
  remarks: "WebPartManager 컨트롤 허브 또는 제어 센터의 웹 파트 응용 프로그램 역할을 합니다. -1과 (와)-웹 파트 컨트롤을 사용 하는 모든 페이지에 WebPartManager 컨트롤 인스턴스에 있어야 합니다. 웹 파트 응용 프로그램의 대부분의 측면에서와 마찬가지로 WebPartManager 컨트롤 인증 된 사용자만 작동 합니다. 또한의 기능은 거의 모두 사용할 <xref:System.Web.UI.WebControls.WebParts.WebZone>클래스</xref:System.Web.UI.WebControls.WebParts.WebZone> 에서 상속 하는 웹 파트 영역 내에 상주 하는 서버 컨트롤 페이지에서 이러한 영역 외부에 있는 서버 컨트롤 거의 웹 파트 기능이 나 WebPartManager 제어와의 상호 작용을 가질 수 있습니다.       페이지에 웹 파트 기능에 대 한 허브로 WebPartManager 컨트롤 종류는 다음 표에 설명 된 작업의 수행 합니다.      | 작업 범주 | 컨트롤에서 수행 하는 작업 |   |-------------------|---------------------------|   | 웹 파트 컨트롤 추적 | <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤, 연결, 영역 및 다른 사용자를 포함 하 여 웹 파트 기능을 제공 하는 페이지에 컨트롤의 다른 많은 종류의 추적입니다. |   | 웹 파트 컨트롤 추가 및 제거 | 추가, 삭제 및 <xref:System.Web.UI.WebControls.WebParts.WebPart>페이지에 있는 컨트롤을 닫기 위한 메서드를 제공 합니다. |   | 연결 관리 | 컨트롤 간의 연결을 만들고 추가 하 고 제거 프로세스 뿐만 아니라 연결을 모니터링 합니다. |   | 컨트롤 및 페이지를 개인 설정 | 사용자가 페이지에 다른 위치로 컨트롤을 이동할 수 있으며 특정 모양, 속성 및 컨트롤의 동작을 사용자가 편집할 수 있는 뷰를 실행 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> 각 페이지에는 사용자별 개인 설정을 유지 관리 합니다. |   | 다른 페이지 뷰 간의 전환 | 페이지는 페이지의 다른 특수 한 보기 간에 전환 되므로 사용자가 페이지 레이아웃을 변경 하거나 편집 컨트롤과 같은 작업을 수행할 수 있습니다. |   | 웹 파트 수명 주기 이벤트를 발생 시키는 | 컨트롤 추가 될 때, 이동, 연결 또는 삭제와 같은 웹 파트 컨트롤의 수명 주기 이벤트를 처리할 수 있도록 개발자 및 발생 시키고 정의 합니다. |   | 컨트롤의 가져오기와 내보내기를 사용 하도록 설정 | <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 속성의 상태를 포함 하는 XML 스트림의 내보내고 손쉽게 복잡 한 컨트롤에서 다른 페이지 또는 사이트를 개인 설정에 대 한 파일을 가져올 수 있습니다. |       WebPartManager 클래스에는 다양 한 속성.</xref:System.Web.UI.WebControls.WebParts.WebPart> 다른 컨트롤을 추적 WebPartManager 역할과 일치, 있기 다양 한 웹 파트 컨트롤 또는 다른 웹 파트는 특정 개체의 컬렉션을 참조 하는 속성입니다. <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A>, 및 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A>속성에서 추적 및 기타 관리 작업에 대 한 WebPartManager 컨트롤에서 사용 하는 모든 컬렉션은.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers%2A>       다른 속성 그룹에는 웹 파트 응용 프로그램에서 발생 하는 특정 시나리오에 적용 되는 사용자 지정 가능한 경고가 포함 되어 있습니다. 여기에 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A>, 및 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning%2A>속성.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A>       대부분의 웹 서버 컨트롤에서 사용 되는 해당 기본 상속 된 속성 중 일부를 재정의 합니다. 여기에 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SkinID%2A>, 및 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A>속성.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SkinID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming%2A>       마지막으로, 없는 속성 그룹을 응용 프로그램의 현재 상태에 액세스 하는 데 유용 합니다. <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A>속성 페이지가 인치 되는지 현재 표시 모드를 나타냅니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript%2A>속성 컨트롤을 렌더링 하는 경우 사용자에 게 다른 기능을 사용 하는 브라우저 되거나 종료 스크립트 수와 관련 되는 클라이언트 쪽 스크립트 수 있는지 여부를 나타냅니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A>속성은 다양 한 확장성 사례에 사용 되는 중요 한 웹 파트 방법에 대 한 호출을 포함 하는 유틸리티 클래스를 참조 하는 데 유용 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> 이러한 메서드는 별도 클래스에 대 한 호출을 숨겨 (의 <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals>클래스), WebPartManager 클래스의 API는 단순화 된 시나리오를 소유 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A>속성은 사용자의 개인 설정을 저장 하 고 해당 데이터를 영구 저장소를 유지 하는 개인 설정 개체에 대 한 액세스를 제공 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>속성 줍니다 <xref:System.Web.UI.WebControls.WebParts.WebPart>페이지 컨트롤에는 사용자 또는 응용 프로그램에서 현재 선택 되어 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A>속성 표시 여부를 사용자 지정 개인 설정 데이터를는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 변경 되었습니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A>       WebPartManager 컨트롤에 포함 된&5; 기본 제공 디스플레이 모드 또는 웹 페이지의 보기입니다. 개발자 확장할 수 있습니다이 기능을 사용자 지정 디스플레이 모드 같은 <xref:System.Web.UI.WebControls.WebParts.WebZone>클래스 또는 <xref:System.Web.UI.WebControls.WebParts.ToolZone>클래스</xref:System.Web.UI.WebControls.WebParts.ToolZone> </xref:System.Web.UI.WebControls.WebParts.WebZone> 형식을 확장 하 여 만들기 사용자는 적절 한 종류의 지정된 된 디스플레이 모드에 해당 하는 컨트롤 요소가 페이지에 있는 페이지를 다양 한 디스플레이 모드를 전환할 수 있습니다.      > [!NOTE] > 사용자가 페이지에 해당 하는 영역 필요 없이 사용자 지정 디스플레이 모드를 전환할 수 있도록이 기능을 확장할 수 있습니다. 그러나 기본 동작은 디스플레이 모드 영역에 해당 합니다.       표준 디스플레이 모드 WebPartManager 클래스의 public 필드도 표시 됩니다. 다음 표에서 필드 및를 참조 하는 디스플레이 모드 요약 되어 있습니다. 페이지의 현재 표시 모드 위에서 언급 했 듯이 항상 참조에 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A>속성과 페이지에 있는 영역 종류에 따라 해당 특정 페이지에서 사용할 수 있는 디스플레이 모드 집합에 포함 되어는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>속성.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A>      | 필드 | 디스플레이 모드 정보 |   |-----------|--------------------------|   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>| 웹 페이지;의 일반 사용자 보기 기본 및 가장 일반적인 디스플레이 모드. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>| 사용자를 다시 정렬할 수 또는 페이지 레이아웃을 변경 하는 컨트롤을 삭제할 뷰의. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode>| 편집 사용자 인터페이스 (UI)가 표시 되는 뷰로 사용자는 모양, 속성 및 표준 찾아보기 모드에서 표시 되는 컨트롤의 동작을 편집할 수 있습니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>| 카탈로그 UI가 표시 되는 뷰로 사용자가 사용할 수 있는 컨트롤의 카탈로그에서 페이지에 컨트롤을 추가할 수 있습니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>| 연결 UI가 표시 되는 뷰로 사용자가 연결, 관리 또는, 컨트롤 간의 연결을 끊을 수 있습니다. |       WebPartManager 컨트롤도 다양 한 웹 파트 페이지 및 컨트롤의 수명 주기에서 중요 한 이벤트를 포함 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> 이러한 이벤트는 웹 파트 컨트롤의 동작을 보다 정밀 하 게 프로그래밍 방식 제어를 제공합니다. 대부분의 메서드와 직접 관련 되어 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 (또는 다른 서버 또는 사용자 컨트롤에 배치 된 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>처럼 동작할 수 있도록 영역 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤).</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> 그러나 몇 가지 이벤트 페이지 또는 페이지에는 연결의 상태와 관련이 있습니다. 다음 표에서 사용할 수 있는 이벤트를 나열 하 고 용도 요약 합니다.      > [!NOTE] > 모든 경우에는 다음 표에, &quot;컨트롤&quot; 라는 단어를 의미는 <xref:System.Web.UI.WebControls.WebParts.WebPart>제어 또는 모든 서버 컨트롤 영역에 있는 사용 하 여 래핑는 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>런타임에.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart>      | 이벤트 | 설명 |   |-----------|-----------------|   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>| 권한이 있는지 확인 하는 페이지에 컨트롤 추가 되는 바로 전에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>| 페이지에 모든 연결이 활성화 된 후에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating>| 페이지에서 모든 연결을 활성화 하는 과정 직전에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged>| 페이지의 현재 표시 모드 변경 된 후 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging>| 페이지의 디스플레이 모드를 변경 하는 과정 직전에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged>| 컨트롤의 선택 취소 된 후에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>| 컨트롤의 선택이 취소 프로세스 직전에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>| 컨트롤 영역에 추가한 후에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding>| 영역에는 컨트롤을 추가 하는 프로세스 직전에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>| 컨트롤 닫힌 (페이지에서 제거 됨) 한 후에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>| 컨트롤을 닫는 프로세스 직전에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>| (1 개를 프로그래밍 방식으로 만들거나 카탈로그에서 추가) 동적 컨트롤의 인스턴스 영구적으로 삭제 된 후 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting>| 동적 컨트롤을 삭제 하는 바로 전에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>| 영역 내에서 또는 다른 영역으로 컨트롤이 이동 된 후에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving>| 컨트롤을 이동 프로세스 직전에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>| 연결에 참여 하도록 선택 된 두 개의 연결을 설정한 후에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting>| 두 컨트롤을 연결 하는 과정 직전에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>| 두 개의 연결 된 컨트롤의 연결이 끊어진 후에 발생 합니다. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>| 두 개의 연결을 끊을 프로세스 직전에 발생 합니다. |       WebPartManager 컨트롤에는 웹 파트 페이지를 관리 하기 위한 다양 한 메서드가.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> 다양 한 메서드는 여기에 나열 되지 가지가 이름이 On의 형태를 취하*EventName*합니다. 이러한 메서드는 일반적으로 관련 된 이벤트를 발생 시키는 고 <xref:System.Web.UI.WebControls.WebParts.WebPartEventHandler>.</xref:System.Web.UI.WebControls.WebParts.WebPartEventHandler> 형식의 처리기와 이벤트를 제공 합니다. WebPartManager 클래스에서 상속 하는 개발자도 대부분의 이러한 메서드를 재정의할 수 있습니다. 또한 페이지 개발자가 이러한 방법과 관련 된 이벤트에 대 한 사용자 지정 처리기를 제공할 수 있습니다. 예를 들어의 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>이벤트 페이지 개발자 추가할 수는 `OnWebPartAdded` 특성을 `<asp:webpartmanager>` 요소에 사용자 지정 메서드 이벤트에 대 한 사용자 지정 처리를 제공할 수 있는 특성 이름을 웹 페이지 및 할당 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> 특성에 해당 하는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A>메서드와 대부분 웹 파트 이벤트와 관련된 메서드에 대 한 작동을 처리 하는 이벤트의이 기본 패턴.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A>       또한 WebPartManager 컨트롤에 관리 작업에 특정 한 메서드 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 (사용 되는 서버 또는 사용자 컨트롤 및 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤).</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> These methods include <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>, and <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A>.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart></xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A>       메서드의 다른 집합은 연결에 대 한 특수화 된 것입니다. This includes methods such as <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>, and <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A>       마지막으로 일부 WebPartManager 메서드 개인 설정 하는 기능에 집중 합니다. These include <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Load%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A>, and <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState%2A>.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Load%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization%2A>       <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals>클래스</xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> 에 대 한 설명서를 참조 하는 속성을</xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> 통해 액세스할 수 있는 다른 WebPartManager 메서드에 대 한 자세한 내용은"
  example:
  - "The following code example demonstrates both declarative and programmatic use of the WebPartManager control.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected, and an `<asp:webpartmanager>` element.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom interface.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The user control has a drop-down list control that shows the possible display modes on a page, given the Web Parts controls that are present on the page. In the Web page for this code example, this user control is declared just below the WebPartManager element in the page's markup, and there is a `Register` directive near the top of the Web page to register the control. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_SimpleConnection#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_345_1.ascx)]\n [!code-vb[WebParts_WebPartManager_SimpleConnection#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_345_1.ascx)]  \n  \n The declarative markup for the Web page contains `Register` directives for both the user control and the custom controls. There is an `<asp:webpartmanager>` element, an `<asp:webpartzone>` element to contain the custom controls, and an `<asp:connectionszone>` element. The page also contains some inline code that handles connection-related events for the WebPartManager control; you can see the effect of this code as you connect and disconnect controls.  \n  \n [!code-cs[WebParts_WebPartManager_SimpleConnection#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_345_2.aspx)]\n [!code-vb[WebParts_WebPartManager_SimpleConnection#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_345_2.aspx)]  \n  \n The third part of the example is the source code for the controls. Note that there is an interface named `IZipCode`, and this interface is implemented in the `ZipCodeWebPart` class. This class has a special callback method named `ProvideIZipCode` that serves as a provider. The other type, named `WeatherWebPart`, is also implemented with a special method named `GetIZipCode`, which enables the control to act as a consumer of the other control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example assumes that you have compiled the source into an assembly, and the `Register` directive in the Web page references the assembly name. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_SimpleConnection#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_345_3.cs)]\n [!code-vb[WebParts_WebPartManager_SimpleConnection#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_345_3.vb)]  \n  \n After you have loaded the Web page in a browser, click the **Display Mode** drop-down list control and select **Connect** to switch the page to connect mode. Connect mode uses the `<asp:connectionszone>` element to enable you to create connections between controls. In connect mode, click the downward arrow in the title bar of the **ZIP Code** control to activate its verbs menu, and then click **Connect**. After the connection UI appears, click the **Create a connection to a Consumer** link. A cell appears that has a drop-down list control. Select **Weather Control** in the drop-down list, and then click **Connect** to complete the connection of the two controls. Click **Close**, and then use the **Display Mode** drop-down list to return the page to normal browse mode. You can enter a ZIP Code, and the consumer control will be updated with the value you enter. Because the `ZipCode` property was marked with the `Personalizable` attribute in the source code, this property value will persist across browser sessions, thus saving the value entered by a user. A more sophisticated consumer control could take the ZIP code information, look up weather information based on the code, and display it to a user."
  syntax:
    content: >-
      [System.ComponentModel.Bindable(false)]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.WebPartManagerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Web.UI.NonVisualControl]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      [System.Web.UI.ViewStateModeById]

      public class WebPartManager : System.Web.UI.Control, System.Web.UI.INamingContainer, System.Web.UI.WebControls.WebParts.IPersonalizable
  inheritance:
  - System.Object
  - System.Web.UI.Control
  implements:
  - System.Web.UI.INamingContainer
  - System.Web.UI.WebControls.WebParts.IPersonalizable
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientID
  - System.Web.UI.Control.ClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String)
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasControls
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadViewState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveViewState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartManager()
  nameWithType: WebPartManager.WebPartManager()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartManager()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 클래스입니다."
  remarks: "WebPartManager 생성자에서 사용 하는 몇 가지 중요 한 변수는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 모든 웹 파트 페이지에 직접적인 영향을 하나의 할당은 기본 페이지 디스플레이 모드 찾아보기 모드로 설정 되어 있다는 사실을 (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>).</xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>"
  syntax:
    content: public WebPartManager ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections
  id: ActivateConnections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ActivateConnections()
  nameWithType: WebPartManager.ActivateConnections()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "웹 페이지에서 현재 활성화 되어 있는 모든 연결이 활성 상태로 만듭니다."
  remarks: "ActivateConnections 메서드 간의 기존 연결을 활성화 하는 페이지에 각 요청에 대해 <xref:System.Web.UI.WebControls.WebParts.WebPart>에 있는 기타 서버 컨트롤과 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>영역.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> 경우에 따라 충돌 하는이 방법 활성화 되는 연결에 다시 경우 인스턴스가 호출에 대 한는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>메서드 문제가 있는 연결을 종료 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> 연결을 끊는 동안는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>이벤트가 발생 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> 일반적으로 개발자가이 이벤트를 취소할 수 있지만 경우에 때문에 이것이 취소할 수 없으며 연결 간에 충돌이 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>제어 연결을 활성화 하는 과정을 완료 하려면 충돌을 해결 해야 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 자세한 내용은 참조 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>"
  syntax:
    content: protected virtual void ActivateConnections ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  id: AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: AddWebPart(WebPart,WebPartZoneBase,Int32)
  nameWithType: WebPartManager.AddWebPart(WebPart,WebPartZoneBase,Int32)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(WebPart,WebPartZoneBase,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "추가 하기 위한 표준 프로그래밍 방법을 제공 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 웹 페이지에는 컨트롤입니다."
  remarks: "AddWebPart 메서드는 새 동적 추가 둘 다 <xref:System.Web.UI.WebControls.WebParts.WebPart>페이지에 및를 페이지에 이미 닫혀 있는 정적 또는 동적 컨트롤을 다시 열을 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 실제로에서 참조 된 컨트롤의 복사본을 만드는 새 컨트롤을 추가 하는 메서드를 호출 하는 경우는 `webPart` 매개 변수입니다. 새 ID를 컨트롤의 복사본에 대 한 생성 개발자 참조 해야 하므로 <xref:System.Web.UI.WebControls.WebParts.WebPart>새 ID 값을 가져오는 방법에서 컨트롤이 반환 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 이전에 닫힌된 컨트롤을 다시 열려면 메서드는 참조 하는 컨트롤에 대 한 직접 참조 반환은 `webPart` 매개 변수입니다.      > [!IMPORTANT] > 항상 AddWebPart 메서드를 사용 해야 보다는 <xref:System.Web.UI.ControlCollection.Add%2A>참조 하는 컨트롤의 컬렉션의 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A?displayProperty=fullName>추가할 속성 <xref:System.Web.UI.WebControls.WebParts.WebPart>사용 하 고 있으므로 페이지에 프로그래밍 방식으로 컨트롤는 <xref:System.Web.UI.ControlCollection.Add%2A>메서드에서 예외를 throw 합니다.</xref:System.Web.UI.ControlCollection.Add%2A> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A?displayProperty=fullName> </xref:System.Web.UI.ControlCollection.Add%2A> 하지 않은 컨트롤을 추가 하려면는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 (즉, 래핑 하는 서버 컨트롤은 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>런타임 시 컨트롤)를 먼저 호출 해야는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A>컨트롤을 만들고 다음 컨트롤을 추가할 AddWebPart 메서드를 호출 하는 메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> 이 방법의 데모를 보려면 &quot;예&quot; 섹션을 참조 하십시오."
  example:
  - "The following code example demonstrates use of the AddWebPart method to add a server control programmatically to a page. The page markup contains an empty `<asp:webpartzone>` element, and an `<asp:webpartmanager>` element. The first time the **Add Calendar** button is clicked, the code in the event handler creates a <xref:System.Web.UI.WebControls.Calendar> control, and adds it to a zone as a <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> object, calling the AddWebPart method.  \n  \n [!code-cs[WebParts_WebPartManager_DeleteWebPart#1](~/add/codesnippet/csharp/6da004d9-95d1-4401-9d7e-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_DeleteWebPart#1](~/add/codesnippet/visualbasic/6da004d9-95d1-4401-9d7e-_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart AddWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int zoneIndex);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> (또는 서버 또는 사용자 정의 컨트롤)를 웹 페이지에 추가 하거나 페이지에서 열."
    - id: zone
      type: System.Web.UI.WebControls.WebParts.WebPartZoneBase
      description: "<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 하 `webPart` 에 추가 되 고 있습니다."
    - id: zoneIndex
      type: System.Int32
      description: "서 수를 나타내는 정수 위치를 지정 하는 `webPart` 의 차지 `zone`, 다른 컨트롤에서 상대 `zone`합니다."
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 페이지에 추가 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>zone</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>zone</code> is not registered in the <xref href=\"System.Web.UI.WebControls.WebParts.WebPartManager\"></xref> control's collection of zones.  \n  \n \\- or -  \n  \n <code>webPart</code> is already in <code>zone</code>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "값 <code> zoneIndex </code> 가&0; 보다 작습니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart
  id: AuthorizeWebPart
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: AuthorizeWebPart
  nameWithType: WebPartManager.AuthorizeWebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생 때는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized*>메서드 결정 하는 여부는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 페이지에 서버 컨트롤을 추가할 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized*>"
  remarks: "AuthorizeWebPart 이벤트가 발생할 때마다는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤이 페이지에 추가 될.</xref:System.Web.UI.WebControls.WebParts.WebPart> 페이지에 컨트롤을 추가할 수 있는 일반적인 시나리오는 여러 가지가 있습니다. 에 대 한 전체 설명은 이러한에 대 한 설명 섹션을 참조는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> 컨트롤이 추가 되 면 체크 볼 수 있는지 여부를 해당 <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>속성이 설정 되었는지, 그렇다면 여부 컨트롤 하기 및 페이지에 추가 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>       개발자는 컨트롤에 대 한 필터링 기능을 제공할 AuthorizeWebPart 이벤트에 대 한 이벤트 처리기를 만들 수 있습니다. 컨트롤의 <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>속성 값 이벤트 처리기 코드에서 조건을 충족 하지 않는 컨트롤에 추가 되지 않습니다는 페이지입니다.</xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>"
  example:
  - "The following code example demonstrates how to set a custom event handler for the AuthorizeWebPart event, which automatically overrides the default <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> method.  \n  \n The code in the `mgr1_AuthorizeWebPart` method checks whether the controls on the page have their respective <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property values set to `user` and, if so, returns `true`, which means that they will be authorized and added to the page. This assumes the default approach is to allow users to view controls with a page in user personalization scope. Notice, however, that in the example one of the controls has its <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property value set to `admin`. Developers might place this filter on a specialized control that was designed for only administrative users to see. This control will fail the authorization check during the AuthorizeWebPart event, and will not be displayed. Note that controls that do not have the property set are displayed as well; they are assumed not to be part of a filtering scenario because their <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> properties are not set.  \n  \n [!code-vb[WebParts_WebPartManager_AuthorizeWebPart#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_9_1.aspx)]\n [!code-cs[WebParts_WebPartManager_AuthorizeWebPart#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_9_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler AuthorizeWebPart;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers
  id: AvailableTransformers
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: AvailableTransformers
  nameWithType: WebPartManager.AvailableTransformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "컬렉션을 가져옵니다 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> 서버 컨트롤 간의 웹 파트 연결을 만드는 사용할 수 있는 개체를 사용 합니다."
  remarks: "이 속성에 사용 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers%2A>메서드 컬렉션을 만듭니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers%2A> 기본적으로 응용 프로그램 구성 파일에서 사용 가능한 변환기를 읽습니다."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.TransformerTypeCollection AvailableTransformers { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.TransformerTypeCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.TransformerTypeCollection&quot;> </xref> 의 집합이 포함 된 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> 개체입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(System.Web.UI.WebControls.WebParts.WebPart)
  id: BeginWebPartConnecting(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: BeginWebPartConnecting(WebPart)
  nameWithType: WebPartManager.BeginWebPartConnecting(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "두 개의 연결 하는 프로세스를 시작 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤입니다."
  remarks: "BeginWebPartConnecting 메서드 존재 하므로 개발자가 연결 프로세스를 더 많이 제어할 수 있도록 별도 단계에서 컨트롤 간의 연결을 설정 하는 과정을 수행할 수 있습니다. 메서드는 일련의 되도록 초기 검사 수행 `webPart` 에 대 한 연결을 합법적인 방식으로 설정할 수 있는 상태입니다. 경우 `webPart` 모든 검사를 통과 현재 선택 된 컨트롤로 설정 합니다 (참조는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>속성), 고 연결 프로세스를 계속할 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>"
  syntax:
    content: public virtual void BeginWebPartConnecting (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "형성 되 고 연결 하는 컨트롤입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "페이지에 현재 표시 모드 않습니다 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode&quot;> </xref>합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>webPart</code> is closed.  \n  \n \\- or -  \n  \n <code>webPart</code> is not part of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls*> collection.  \n  \n -or -  \n  \n <code>webPart</code> is equal to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*> control."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(System.Web.UI.WebControls.WebParts.WebPart)
  id: BeginWebPartEditing(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: BeginWebPartEditing(WebPart)
  nameWithType: WebPartManager.BeginWebPartEditing(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "편집으로 인해 프로세스가 시작 되는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 제어 합니다."
  remarks: "BeginWebPartEditing 메서드 존재 하므로 개발자가 프로세스를 더 많이 제어할 수 있도록 별도 단계에 편집 컨트롤의 프로세스를 수행할 수 있습니다. 메서드는 일련의 되도록 초기 검사 수행 `webPart` 편집할 수 있는 상태입니다. 경우 `webPart` 모든 검사를 통과 현재 선택 된 컨트롤로 설정 합니다 (참조는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>속성), 고 편집 프로세스를 계속할 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>"
  syntax:
    content: public virtual void BeginWebPartEditing (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "컨트롤을 편집할 수 있습니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "페이지에 현재 표시 모드 않습니다 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode&quot;> </xref>합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>webPart</code> is closed.  \n  \n \\- or -  \n  \n <code>webPart</code> is not part of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls*> collection.  \n  \n -or -  \n  \n <code>webPart</code> is equal to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*> control."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode
  id: BrowseDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: BrowseDisplayMode
  nameWithType: WebPartManager.BrowseDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "웹 파트 컨트롤을 포함 하는 페이지에 대 한 기본 표시 모드를 나타냅니다. 이 필드는 읽기 전용입니다."
  remarks: "BrowseDisplayMode 필드 사용자 지정 참조 <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>만들어지고에 포함 된 개체는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> 정적 개체 이므로 참조할 수 있습니다를 통해 직접는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤의 인스턴스를 필요로 하지 않고 클래스.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       첫 번째 로드를 제어 하는 웹 파트를 포함 하는 페이지, BrowseDisplayMode (찾아보기 모드) 기본적으로 됩니다. 일반적인 웹 페이지에서 사용자 찾아보기 단순히만 페이지 찾아보기 모드에 남아 있습니다. 페이지를 통해 사용할 수 있는 특수 디스플레이 모드 중 하나로 전환 해야 사용자가 페이지의 레이아웃, 컨트롤, 모양 또는 동작 개인 설정 하려고 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>속성.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>"
  example:
  - "The following code example demonstrates how to work with the BrowseDisplayMode field programmatically. The code populates a drop-down list with the supported display modes, which in this case are browse and design. Notice that, in the `Page_PreRender` method, the code checks whether the current <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> property is set to BrowseDisplayMode. If so, `Label1` will be visible, and if not, `Label1` will be hidden.  \n  \n [!code-cs[WebParts_WebPartManager_BrowseDisplayMode#1](~/add/codesnippet/csharp/f-system.web.ui.webcontr_5_1.aspx)]\n [!code-vb[WebParts_WebPartManager_BrowseDisplayMode#1](~/add/codesnippet/visualbasic/f-system.web.ui.webcontr_5_1.aspx)]  \n  \n After you load the page in a browser, you are in browse mode by default. Notice the label on the page that indicates you are in browse mode. Use the drop-down list control to switch the page to design mode. Notice that, because of the code in the `Page_PreRender` method, the label is now hidden."
  syntax:
    content: public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode BrowseDisplayMode;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  id: CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  nameWithType: WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "검사는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 소비자 및 공급자 컨트롤에는 호환 되는 인터페이스가 연결 되 고 수 있는지 여부를 결정 하는 연결에 참여할 컨트롤 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> 개체가 필요 하지 않습니다."
  remarks: "이 메서드는 연결에 사용 되 `provider` 및 `consumer` 두 컨트롤에 호환 되는 연결 지점 형식이 있으면 있도록는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>개체가 필요 하지 않습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 두 컨트롤을 호출 하기 전에 연결할 수 있는지 확인 하려면이 메서드를 사용 하려는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>프로그래밍 방식으로 연결을 만듭니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>       이 오버 로드와 동일한 구현 사용의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>변환기가 오버이 로드는 필요 하지 않다는 것을 유일한 제외 된 메서드 오버 로드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>"
  example:
  - "The following code example demonstrates how to use this method.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected, an `<asp:webpartmanager>` element, and some event-handling code that creates a connection using the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> method.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom interface.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The declarative markup for the Web page contains `Register` directives for both the user control and the custom controls. There is an `<asp:webpartmanager>` element, an `<asp:webpartzone>` element to contain the custom controls, and an `<asp:connectionszone>` element. Notice that in the `Page_Load` method, the code checks whether the connection can be made and, if so, defines a provider, a consumer, and their respective connection points, and then adds a new connection to the set of static connections referenced by the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> property.  \n  \n [!code-cs[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/csharp/6c629474-a5b1-438b-b1c7-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/visualbasic/6c629474-a5b1-438b-b1c7-_1.aspx)]  \n  \n The third part of the example is the source code for the controls. It contains an interface and two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, one acting as a provider, and the other as a consumer. Because they have compatible connection points (both of them recognize the `IZipCode` interface), a transformer is not needed to make the connection. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_StaticConnections#2](~/add/codesnippet/csharp/6c629474-a5b1-438b-b1c7-_2.cs)]\n [!code-vb[WebParts_WebPartManager_StaticConnections#2](~/add/codesnippet/visualbasic/6c629474-a5b1-438b-b1c7-_2.vb)]  \n  \n After you have loaded the Web page in a browser, click the **Display Mode** drop-down list control and select **Connect** to switch the page to connect mode. Connect mode uses the `<asp:connectionszone>` element to enable you to create connections between controls. In connect mode, click the downward arrow in the title bar of the **ZIP Code** control to activate its verbs menu, and then click **Connect**. After the connection user interface (UI) appears, notice that a connection has already been created by the code contained in the `Page_Load` method."
  syntax:
    content: public bool CanConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint);
    parameters:
    - id: provider
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "데이터를 제공 하는 컨트롤 `consumer` 연결 될 때입니다."
    - id: providerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> 수 있게 해 주는 `provider` 연결에 참여 합니다."
    - id: consumer
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "데이터를 받는 컨트롤 `provider` 연결 될 때입니다."
    - id: consumerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> 역할을 하는 콜백 메서드 하므로 `consumer` 연결에 참여할 수 있습니다."
    return:
      type: System.Boolean
      description: "나타내는 부울 값 여부 <code> provider </code> 및 <code> consumer </code> 연결 될 수 있습니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  id: CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  nameWithType: WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "검사는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> , 연결할 수 있는지 확인에 대 한 연결에 참여 하 고 사용 하는 컨트롤은 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> 개체는 호환 되지 않는 소비자 및 공급자 사이의 연결을 만듭니다."
  remarks: "이 메서드는 연결에 사용 되 `provider` 및 `consumer` 두 컨트롤 있으면 지점 형식이 호환 되지 않는 연결 하는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>개체가 필요 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 두 컨트롤을 호출 하기 전에 연결할 수 있는지 확인 하려면이 메서드를 사용 하려는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>프로그래밍 방식으로 연결을 만듭니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>       이 오버 로드와 동일한 구현 사용의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%29>이 오버 로드는 변환기 필요 하다는 것을 유일한 제외 된 메서드 오버 로드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%29>"
  syntax:
    content: public virtual bool CanConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPartTransformer transformer);
    parameters:
    - id: provider
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "데이터를 제공 하는 컨트롤 `consumer` 연결 될 때입니다."
    - id: providerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> 역할을 하는 콜백 메서드 하므로 `provider` 연결에 참여할 수 있습니다."
    - id: consumer
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "데이터를 받는 컨트롤 `provider` 연결 될 때입니다."
    - id: consumerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> 역할을 하는 콜백 메서드 하므로 `consumer` 연결에 참여할 수 있습니다."
    - id: transformer
      type: System.Web.UI.WebControls.WebParts.WebPartTransformer
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> 호환 되지 않는 수 있게 해 주는 `provider` 및 `consumer` 연결 합니다."
    return:
      type: System.Boolean
      description: "나타내는 부울 값 여부 <code> provider </code> 및 <code> consumer </code> 연결을 설정할 수 있습니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode
  id: CatalogDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CatalogDisplayMode
  nameWithType: WebPartManager.CatalogDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "웹 페이지에 컨트롤의 카탈로그에서 서버 컨트롤을 추가 하는 데 사용 되는 디스플레이 모드를 나타냅니다. 이 필드는 읽기 전용입니다."
  remarks: "CatalogDisplayMode 필드 사용자 지정 참조 <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>만들어지고에 포함 된 개체는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> 정적 개체 이므로 참조할 수 있습니다를 통해 직접는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤의 인스턴스를 필요로 하지 않고 클래스.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       사용자가 서버 컨트롤의 카탈로그를 사용할 수 있는 경우 페이지에 컨트롤을 추가 하려고 하면 페이지 CatalogDisplayMode (카탈로그 모드)를 전환할 수 있습니다 및 카탈로그 사용자 인터페이스 (UI) 나타납니다. 웹 파트 카탈로그에 대 한 UI에서 제공 되는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>영역 컨트롤.</xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 개발자는 디자인 타임에이 영역 페이지에 추가 하 고 사용자는 런타임에 해당 컨트롤을 페이지에 추가할 수 있도록 서버 컨트롤 영역에 추가 합니다. 개발자가 이러한 컨트롤을 추가한 후 필요한 컨트롤 카탈로그 모드를 활성화 하는 때문에 카탈로그 모드로 페이지에서 지원 되는 디스플레이 모드를 됩니다.       사용자가 페이지를 모드, 영역 및 모든 서버 컨트롤에 표시 되므로 추가 된 카탈로그를 전환 하 고 사용자를 페이지에 추가 하 여 페이지에서 컨트롤을 제거 합니다. 카탈로그에서 컨트롤을 선택할 수 때 됩니다. 페이지에 컨트롤을 추가한 후 표준 찾아보기 모드에서 표시 되 고 페이지가 업데이트 됩니다."
  example:
  - "The following code example demonstrates how to work with the CatalogDisplayMode field programmatically. The code populates a drop-down list with the supported display modes for the page, which in this case are browse, design, and catalog. The catalog mode is available because of the `<asp:CatalogZone>` element and its child elements in the Web page. Notice that, in the `Page_PreRender` method, the code checks whether the current <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> property is set to CatalogDisplayMode. If so, `Label1` will be visible, and if not, `Label1` will be hidden.  \n  \n [!code-vb[WebParts_WebPartManager_CatalogDisplayMode#1](~/add/codesnippet/visualbasic/f-system.web.ui.webcontr_3_1.aspx)]\n [!code-cs[WebParts_WebPartManager_CatalogDisplayMode#1](~/add/codesnippet/csharp/f-system.web.ui.webcontr_3_1.aspx)]  \n  \n After you load the page in a browser, you are in browse mode by default. Notice that the label on the page is hidden. Use the drop-down list control to switch the page to catalog mode. Notice that, because of the code in the `Page_PreRender` method, the label is now visible. You can select the control in the catalog and add it to either of the two zones on the page."
  syntax:
    content: public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode CatalogDisplayMode;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript
  id: CheckRenderClientScript
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CheckRenderClientScript()
  nameWithType: WebPartManager.CheckRenderClientScript()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "값과는 요청 하는 브라우저의 기능을 확인는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript*>클라이언트를 렌더링할지 여부를 결정 하려면 스크립트</xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript*>"
  syntax:
    content: protected virtual bool CheckRenderClientScript ();
    parameters: []
    return:
      type: System.Boolean
      description: "클라이언트 스크립트를 렌더링할지 여부를 나타내는 부울 값입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning
  id: CloseProviderWarning
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CloseProviderWarning
  nameWithType: WebPartManager.CloseProviderWarning
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "사용자가을 공급자에 대 한 연결의 다른 컨트롤과으로 사용 되는 컨트롤을 닫을 때 표시 되는 경고를 설정 하거나 가져옵니다."
  remarks: "하면 사용자가을 <xref:System.Web.UI.WebControls.WebParts.WebPart>제어, 일반적으로 메시지가 표시 됩니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤을 의미 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A>       그러나 컨트롤이 다른 컨트롤에 연결 된 역할을 다른 컨트롤에 데이터 공급자를 사용자가 컨트롤을 닫고 하는 기본 경고 메시지가 표시 됩니다. 메시지는 공급자 컨트롤 인지를 닫으려고, 소비자가 사용할 데이터의 모든가 더 이상 처럼이 공급자에 연결 되는 방법을 제어 하는 사용자가 지시 합니다. CloseProviderWarning 속성에는 개발자가 사용자에 게 표시 되는 경고 메시지를 사용자 지정할 수 있습니다.       페이지 개발자는이 속성에는 비어 있거나 null 문자열 값을 할당, 없음 경고 메시지 상자가 표시 됩니다는 사용자가 닫을 때는 <xref:System.Web.UI.WebControls.WebParts.WebPart>공급자에 있는 컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates how to use the CloseProviderWarning property to display a custom warning to users.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls and a custom interface.  \n  \n-   A Web page that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected and an `<asp:webpartmanager>` element.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The following code contains only the Web page portion of the example. You will also need the custom user control and the source code for the custom controls mentioned above. Obtain these two items from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview.  \n  \n The following Web page code demonstrates how to assign a custom warning message to the CloseProviderWarning property in declarative markup in the `<asp:webpartmanager>` element.  \n  \n [!code-cs[WebParts_WebPartManager_CloseProviderWarning#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_979_1.aspx)]\n [!code-vb[WebParts_WebPartManager_CloseProviderWarning#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_979_1.aspx)]  \n  \n After you have loaded the Web page in a browser, click the **Display Mode** drop-down list control and select **Connect** to switch the page to connect mode. Connect mode uses the `<asp:connectionszone>` element to enable you to create connections between controls. In connect mode, click the downward arrow in the title bar of the **ZIP Code** control to activate its verbs menu, and then click **Connect**. After the connection user interface (UI) appears, click the **Create a connection to a Consumer** link. A cell appears that has a drop-down list control. Select **Weather Control** in the drop-down list, and click **Connect** to complete the connection of the two controls. Click **Close**, and then use the **Display Mode** drop-down list to return the page to normal browse mode. Finally, click the verbs menu for the **ZIP Code** control (which is the provider control in this case) and select **Close**. The custom message you assigned to the CloseProviderWarning property is displayed."
  syntax:
    content: public virtual string CloseProviderWarning { get; set; }
    return:
      type: System.String
      description: "경고 메시지를 포함 하는 문자열입니다. 기본값은.NET Framework에서 제공 하는 culture 별 메시지."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  id: CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CloseWebPart(WebPart)
  nameWithType: WebPartManager.CloseWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "닫습니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 웹 페이지에서 렌더링 되지 않습니다 것 같지만 다시 시작 하는 방식으로 제어 합니다."
  remarks: "CloseWebPart 메서드 제거 <xref:System.Web.UI.WebControls.WebParts.WebPart>하거나 다른 서버 제어 합니다. 원래 포함 하는 웹 페이지에 렌더링 되지 않습니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 닫힌된 컨트롤에 추가 되는 <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>개체 닫힌된 컨트롤에 대 한 참조를 유지 되며 컨트롤은 페이지에 복원 될 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> 닫힌 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤이 참조 하는 컬렉션에 여전히 표시 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A>속성.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPart>       컨트롤을 닫는 하는 것은 삭제 다릅니다. 닫힌된 컨트롤은 페이지에 복원할 수 있습니다. 하지만 삭제 된 컨트롤 인스턴스는 영구적으로 제거 및 복원할 수 없습니다. 여부에 관계 없이 <xref:System.Web.UI.WebControls.WebParts.WebPart>또는 (페이지의 태그에 선언 됨) 정적 또는 동적 (페이지에 추가 사용자 또는 프로그래밍 방식으로 웹 파트 카탈로그에서) 서버 컨트롤은, 닫힌 후 페이지에는 다시 열 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>       일반적으로 사용자가 닫을 수는 <xref:System.Web.UI.WebControls.WebParts.WebPart>동사 메뉴를 클릭 하 고 닫기 동사를 선택 하 여 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤을 직접 CloseWebPart 메서드를 호출 하 고 여기에 대 한 참조를 전달 하 여 닫을 수도 `webPart`합니다.       페이지에 있는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 닫혔을, 개발자가 선언 된 경우는 `<asp:catalogzone>` 요소를 그 안에 추가 `<asp:pagecatalogpart>` 요소를 페이지에 실행 시 닫힌된 컨트롤을 복원 하는 사용자에 대 한 간단한 사용자 인터페이스 (UI) 제공 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 사용자가 페이지 카탈로그 디스플레이 모드를 전환할 수 있습니다 및 닫힌된 컨트롤 페이지 카탈로그 내에서 표시 됩니다. 사용자가 닫힌된 컨트롤을 선택 하 고 추가할 수 있어서 원하는 위치에 대 한 페이지에 다시 다음 하 고 선택 된 컨트롤은 페이지에 복원 일반적인 방식으로 렌더링 합니다.       이벤트가 발생 CloseWebPart 메서드를 호출 하는 경우: <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>(많은 경우 여러 개의 컨트롤), 및 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>(있는 경우 연결 된 컨트롤).</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> 취소할 수 것 특정 한 경우에만 일반적으로 개발자가 이러한 이벤트를 취소할 수 있습니다. 자세한 내용은 설명서를 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>, 및 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>"
  example:
  - "The following code example demonstrates how to use the CloseWebPart method.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change page display modes.  \n  \n-   A custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  \n  \n-   A Web page.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The second part of the code example is the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This example uses the dynamic compilation approach; thus there is no `Assembly` attribute in the `Register` directive for this control at the top of the Web page. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartManager_CloseWebPart#3](~/add/codesnippet/visualbasic/b26a8753-d277-40c2-ba47-_1.vb)]\n [!code-cs[WebParts_WebPartManager_CloseWebPart#3](~/add/codesnippet/csharp/b26a8753-d277-40c2-ba47-_1.cs)]  \n  \n The third part of the code example is the Web page. The page contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zone, with an <`asp:pagecatalogpart>` element declared within it. This is what will contain the closed <xref:System.Web.UI.WebControls.WebParts.WebPart> control and enable users to add it back to the page. The `Button1_Click` method directly calls the CloseWebPart method to close the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control, although a user can also close the control through the verbs menu.  \n  \n [!code-cs[WebParts_WebPartManager_CloseWebPart#1](~/add/codesnippet/csharp/b26a8753-d277-40c2-ba47-_2.aspx)]\n [!code-vb[WebParts_WebPartManager_CloseWebPart#1](~/add/codesnippet/visualbasic/b26a8753-d277-40c2-ba47-_2.aspx)]  \n  \n After you load the page in a browser, close the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control by clicking the verbs menu (the arrow symbol) in the header of the control, and clicking **Close**. Now change the page to catalog mode by selecting **Catalog** in the **Display Mode** drop-down list control. The page catalog appears with the closed control. Select the check box next to the closed control, click **Add** to add it to the page, and then click **Close** to return the page to browse mode. The control is restored to the page. Now close it again, this time by clicking the **Close WebPart** button."
  syntax:
    content: public void CloseWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는에서 종결 되는 서버 컨트롤을 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>webPart</code> is not in the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls*> collection.  \n  \n \\- or -  \n  \n <code>webPart</code> is a shared control and has already been closed by another user."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode
  id: ConnectDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ConnectDisplayMode
  nameWithType: WebPartManager.ConnectDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "간의 연결을 관리 하는 사용자에 대 한 특수 한 사용자 인터페이스 (UI)를 표시 하는 데 디스플레이 모드를 나타냅니다 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤입니다. 이 필드는 읽기 전용입니다."
  remarks: "ConnectDisplayMode 필드 사용자 지정 참조 <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>만들어지고에 포함 된 개체는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> 정적 개체 이므로 참조할 수 있습니다를 통해 직접는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤의 인스턴스를 필요로 하지 않고 클래스.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       사용자가 간의 연결을 관리 하려는 경우 <xref:System.Web.UI.WebControls.WebParts.WebPart>경우 웹 페이지에 제어는 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>영역이 선언 된 페이지에서 페이지 ConnectDisplayMode 모드로 전환할 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> </xref:System.Web.UI.WebControls.WebParts.WebPart> 연결 디스플레이 모드 컨트롤 연결 끊기 또는 연결 하 고 기존 연결의 세부 정보를 편집할 수 있는 기능을 포함 하는 연결을 관리 하기 위한 특별 한 UI를 표시 합니다.       웹 파트 컨트롤 집합에서 제공 하는 UI를 사용 하 여 연결을 관리 하는 기능 사용자에 게 제공 하려는 경우를 선언 해야는 `<asp:connectionszone>` 요소 페이지의 태그에 있습니다. 다른 유형의 요소와는 달리 <xref:System.Web.UI.WebControls.WebParts.WebZone>영역,이 요소 내에서 다른 태그를 추가할 필요는 없습니다; 단독으로 요소를 간단히 선언 합니다.</xref:System.Web.UI.WebControls.WebParts.WebZone>"
  example:
  - "The following code example demonstrates the usage of the ConnectDisplayMode mode.  \n  \n The code example has three parts:  \n  \n-   A source file that contains an interface and custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can form a connection.  \n  \n-   A Web page that provides a connection UI and demonstrates working with the ConnectDisplayMode mode.  \n  \n-   An explanation of how to run the example.  \n  \n The first part of the code example is a source file that contains an interface and two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that are designed so they can be connected. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses the dynamic compilation approach. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_ConnectDisplayMode#2](~/add/codesnippet/csharp/f-system.web.ui.webcontr_1_1.cs)]\n [!code-vb[WebParts_WebPartManager_ConnectDisplayMode#2](~/add/codesnippet/visualbasic/f-system.web.ui.webcontr_1_1.vb)]  \n  \n The second part of the example is a Web page that hosts the custom controls. Within the server `<script>` tags on the page are several methods that populate a drop-down list with the display modes available on the page. A user can select these from the drop-down list to change the page's display mode. One of the available display modes is connect display mode, because an `<asp:connectionszone>` element is declared in the page's markup. Notice that this element does not contain any other child elements; it exists only to enable the connection management UI for users.  \n  \n The ConnectDisplayMode mode appears in this example in two places. First, in the `Page_Init` method, the connect display mode is added to the drop-down list of display modes, as the code loops through the collection referenced in the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> property. Second, the `Page_PreRender` method checks the current display mode on the page, and if the current mode is ConnectDisplayMode, a message is displayed in a <xref:System.Web.UI.WebControls.Label> control.  \n  \n [!code-cs[WebParts_WebPartManager_ConnectDisplayMode#1](~/add/codesnippet/csharp/f-system.web.ui.webcontr_1_2.aspx)]\n [!code-vb[WebParts_WebPartManager_ConnectDisplayMode#1](~/add/codesnippet/visualbasic/f-system.web.ui.webcontr_1_2.aspx)]  \n  \n After you load the page in a browser, click the drop-down list and select **Connect** to switch the page into connect display mode. Notice that a message appears, telling you that the page is in connect display mode. Now click the verbs menu (an arrow symbol) in the title bar of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and then click **Connect** in the verbs menu. After the connection UI is displayed, click the link to create a connection. Use the drop-down list within the connection UI that appears, select the other control that will participate in the connection, and click the **Connect** button. The connection is established. Click the **Close** button, and then use the drop-down list at the top of the page to return the page to browse display mode."
  syntax:
    content: public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode ConnectDisplayMode;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Connections
  id: Connections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Connections
  nameWithType: WebPartManager.Connections
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Connections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "웹 페이지에서 모든 현재 연결의 컬렉션에 대 한 참조를 가져옵니다."
  remarks: "연결 속성에는 현재 연결 집합을 한 페이지에 액세스 하는 방법을 제공 합니다. 컬렉션에서 특정 연결을 조작 하려는 개발자 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>및 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 같은 메서드</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 를 사용 해야 하 고 컬렉션 자체는 읽기 전용"
  example:
  - "The following code example demonstrates declarative and programmatic use of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected, and an `<asp:webpartmanager>` element.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls and a custom interface.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The following code contains only the Web page portion of the example. You will also need the custom user control and the source code for the custom controls mentioned above. Obtain these two items from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview.  \n  \n The following Web page code demonstrates how to use the Connections property programmatically to get the count of current connections on a page. Note that in the `<script>` tag section, the code to handle two events for the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control accesses the Connections property to obtain the count.  \n  \n [!code-cs[WebParts_WebPartManager_SimpleConnection#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_34_1.aspx)]\n [!code-vb[WebParts_WebPartManager_SimpleConnection#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_34_1.aspx)]  \n  \n After you have loaded the Web page in a browser, click the **Display Mode** drop-down list control and select **Connect** to switch the page to connect mode. Connect mode uses the `<asp:connectionszone>` element to enable you to create connections between controls. In connect mode, click the downward arrow in the title bar of the **ZIP Code** control to activate its verbs menu, and then click **Connect**. After the connection user interface (UI) displays, click the **Create a connection to a Consumer** link. A cell appears that has a drop-down list control. Select **Weather Control** in the drop-down list, and click **Connect** to complete the connection of the two controls. Click **Close**, and then use the **Display Mode** drop-down list to return the page to normal browse mode. Note that a label now displays the number of connections and the number of <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. If you now return to connect mode and disconnect the two controls, when you return to browse mode, the label's content should be updated and there should be no connections."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartConnectionCollection Connections { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnectionCollection&quot;> </xref> 의 집합이 포함 된 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> 개체입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Connections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated
  id: ConnectionsActivated
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ConnectionsActivated
  nameWithType: WebPartManager.ConnectionsActivated
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "페이지에서 모든 현재 웹 파트 연결만 연결 되지 않은 있지만 하기 시작한 각 연결에 관련 된 소비자 및 공급자 컨트롤 간의 데이터에 적극적으로 공유 후 발생 합니다."
  remarks: "연결의 수명 주기에서이 이벤트는 페이지에 로드 프로세스가 완료 된 후 발생 합니다. 또한이 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>를 나타내는 이벤트는 <xref:System.Web.UI.WebControls.WebParts.WebPart>서버 컨트롤의 특정 연결에 관련 된 연결 또는.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> 환경에서 페이지에 여러 연결이 있는 ConnectionsActivated 메서드 페이지에서 유효한 모든 웹 파트 연결 활성 상태이 고 데이터를 공유할 수 이제 되는 것입니다. 활성 상태인 모든 연결이 알고 있으면 개발자가 수행할 수 등의 모든 연결의 상태는 사용자에 게 알림 태스크를 개수에 관계 없이 라고 소비자 컨트롤에 처리 하 고 해당 공급자의 데이터를 표시 하 고 등.       이 이벤트와 연결 된는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated%2A>메서드를 개발자가 사용자 지정 이벤트 처리기를 만들 수 있도록 해 주는 이벤트를 발생 시킵니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated%2A>       페이지 개발자가 추가 하 여 이벤트에 대 한 사용자 지정 처리기를 만들 수는 `OnConnectionsActivated` 특성을 `<asp:webpartmanager>` 페이지에서 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: public event EventHandler ConnectionsActivated;
    return:
      type: System.EventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating
  id: ConnectionsActivating
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ConnectionsActivating
  nameWithType: WebPartManager.ConnectionsActivating
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "웹 페이지에 설정 된 모든 웹 파트 연결을 활성화 하는 동안 발생 합니다."
  remarks: "연결의 수명 주기에서이 이벤트가 발생 한 페이지를 완료 하 고 로드 프로세스가 바로 앞의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A>메서드를 호출 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> 와 다른는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting>간에 특정 연결을 포함 하는 이벤트 <xref:System.Web.UI.WebControls.WebParts.WebPart>또는 기타 서버 컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> 페이지에서 가능한 모든 연결 연결 되어 있어야 하 고 활성화 하려고 ConnectionsActivating 이벤트 발생 합니다.       ConnectionsActivating 이벤트와 연결 된는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A>메서드는 이벤트를 발생 시킵니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A> 페이지에 추가할 수 있는 연결의 해당 형식을 확장 하는 컨트롤 개발자는 보호 된 재정의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A>메서드 및 다른 유형의 연결을 활성화 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A>       페이지 개발자가 추가 하 여 이벤트에 대 한 사용자 지정 처리기를 만들 수는 `OnConnectionsActivating` 특성을 `<asp:webpartmanager>` 페이지에서 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: public event EventHandler ConnectionsActivating;
    return:
      type: System.EventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  id: ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  nameWithType: WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "두 개의 간의 연결을 만듭니다 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> 컨트롤 및 컨트롤의 지정 된에 대 한 참조만을 사용 하 여 제어 <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> 개체입니다."
  remarks: "이 오버 로드는 연결점을 사용 하지 않고 연결할 수 있는 호환 충분히 때 컨트롤을 연결에 사용 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>개체입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 메서드의이 오버 로드를 호출할 때 단순히 메서드의 다른 오버 로드 된 버전에 대 한 호출을 전달 하 고 전달 `null` 필요로 하는 매개 변수에 대 한 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>개체입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       두 컨트롤을 프로그래밍 방식으로 연결 하려고 하는 경우 사용할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A>메서드는 컨트롤을 직접 연결할 수 있는지 여부를 결정 하는 조건부 검사에서.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A>"
  example:
  - "The following code example demonstrates how to use this method to create a connection programmatically. For the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. From that example, you will need the source code for the user control that allows you to change display modes on the page, and the source code for the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n The code for the Web page that hosts the two controls follows. The page uses `Register` directives at the top to declare the user control and the custom controls. The custom controls are then referenced declaratively within an `<asp:webpartzone>` element. The code that handles the `Button1_Click` method creates a connection between the controls by using the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method.  \n  \n [!code-cs[WebParts_WebPartManager_ConnectWebParts1#1](~/add/codesnippet/csharp/4892fea4-8419-4966-aca7-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_ConnectWebParts1#1](~/add/codesnippet/visualbasic/4892fea4-8419-4966-aca7-_1.aspx)]  \n  \n After you load the page in a browser, click the **Connect WebPart Controls** button to form the connection. You can then enter some data in the text box, and click the **Enter 5-digit ZIP Code** button to demonstrate that the controls are connected, and that data entered in the first control is updated in the second."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint);
    parameters:
    - id: provider
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 제어는 역할을 다른 데이터를 제공 하는 컨트롤을 연결 합니다."
    - id: providerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "연결에 대 한 콜백 메서드로 사용 되는 메서드. 이 메서드는 웹 파트 컨트롤 집합에 구현 된 대로 `provider` 로 표시 되는 <xref uid=&quot;langword_csharp_ConnectionProvider&quot; name=&quot;ConnectionProvider&quot; href=&quot;&quot;> </xref> 메타 데이터 특성입니다."
    - id: consumer
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤에서 데이터를 받아 역할이 있는 `provider`, 한 다음 처리 하거나 표시 합니다."
    - id: consumerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "연결 하는 메서드 `providerConnectionPoint` 연결에 대 한 데이터를 받을 수 있습니다. 이 메서드는 웹 파트 컨트롤 집합에 구현 된 대로 `consumer` 로 표시 되는 <xref uid=&quot;langword_csharp_ConnectionConsumer&quot; name=&quot;ConnectionConsumer&quot; href=&quot;&quot;> </xref> 메타 데이터 특성입니다."
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> 공급자 및 연결에 필요한 소비자에 대 한 다양 한 정보가 들어 있는입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 동적 컬렉션의 컨트롤의 컬렉션은 읽기 전용입니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  id: ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  nameWithType: WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "두 개의 간의 연결을 만듭니다 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> 의 지정 된 컨트롤에 대 한 참조를 사용 하 여 제어 <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> 개체 및 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> 개체입니다."
  remarks: "이 오버 로드는 연결점 호환 되지 않을 때 컨트롤을 연결 하는 데 사용 됩니다. 비 호환성이 발생 때 `consumer` 보다 다른 인터페이스를 구현 `provider` 으로 연결 합니다. 변환기에서 인식할 수 있는 형식으로 데이터를 변환 `consumer`합니다."
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPartTransformer transformer);
    parameters:
    - id: provider
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 역할 연결 된 다른 컨트롤에 대 한 데이터 제공을 포함 하는 합니다."
    - id: providerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "공용 메서드에 `provider` 로 표시 되는 <xref uid=&quot;langword_csharp_ConnectionProvider&quot; name=&quot;ConnectionProvider&quot; href=&quot;&quot;> </xref> 메타 데이터의 특성 및 연결에 대 한 콜백 메서드로 사용 합니다."
    - id: consumer
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 에서 데이터를 받아 역할이 있는 `provider` 또는 `transformer`, 한 다음 처리 하거나 표시 합니다."
    - id: consumerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "공용 메서드에 `consumer` 로 표시 되는 <xref uid=&quot;langword_csharp_ConnectionConsumer&quot; name=&quot;ConnectionConsumer&quot; href=&quot;&quot;> </xref> 메타 데이터 특성 후 연결할 `providerConnectionPoint` 연결에 대 한 데이터를 받도록 합니다."
    - id: transformer
      type: System.Web.UI.WebControls.WebParts.WebPartTransformer
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> 에서 데이터를 변환 하 여 두 컨트롤 간의 연결 수 있게 해 주는 `provider` 형식으로는 `consumer` 처리할 수 있습니다."
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> 공급자, 소비자 및 연결에 필요한 변환기에 대 한 정보가 들어 있는입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "연결에서 활성화 된 <xref href=&quot;System.Web.UI.Control.PreRender&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Controls
  id: Controls
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Controls
  nameWithType: WebPartManager.Controls
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Controls
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "모든 컬렉션을 가져옵니다 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>, 서버 또는 사용자 정의 컨트롤에 포함 된 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 웹 페이지에 영역 및에서 관리 되는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 제어 합니다."
  remarks: "컨트롤 속성에서 참조 되는 다른 컨트롤을 참조 하지 않습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>다양 한 영역 컨트롤와 같은 제어 <xref:System.Web.UI.WebControls.WebParts.EditorPart>또는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart>컨트롤 및 다른.</xref:System.Web.UI.WebControls.WebParts.CatalogPart> </xref:System.Web.UI.WebControls.WebParts.EditorPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>       이 속성은 사용자 코드에서 호출할 수에 적합 하지 않습니다 대부분의 개발 환경에서 웹 파트 컨트롤 집합을 사용 합니다. 이러한 이유로 속성은 public 이지만 IntelliSense에서 표시 되지 합니다. 컬렉션에 액세스 하는 개발자 <xref:System.Web.UI.WebControls.WebParts.WebPart>또는 관리 하는 다른 서버 컨트롤의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>사용 해야 해당 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A>속성.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPart>"
  syntax:
    content: public override System.Web.UI.ControlCollection Controls { get; }
    return:
      type: System.Web.UI.ControlCollection
      description: "A <xref href=&quot;System.Web.UI.ControlCollection&quot;> </xref> 에서 관리 하는 모든 컨트롤을 포함 하는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 제어 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Controls*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  id: CopyWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CopyWebPart(WebPart)
  nameWithType: WebPartManager.CopyWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "웹 파트 컨트롤 집합의 복사본을 만드는 사용 되는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 웹 페이지에 컨트롤을 추가 하기 위해 서버 컨트롤입니다."
  remarks: "사용자 코드에서 직접 CopyWebPart 메서드를 호출할 수 없습니다. 이 메서드는 내부적으로 호출 됩니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>새 동적 추가 하는 과정의 일부로 컨트롤 <xref:System.Web.UI.WebControls.WebParts.WebPart>또는 페이지에는 서버 컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> 동적 컨트롤 페이지에 추가 되는 프로그래밍 방식이 나 웹 파트 사용자 인터페이스 (UI)를 통해 예를 들어 컨트롤 페이지의 태그에 직접 선언가 static 컨트롤의 반대 개념의 카탈로그에서 컨트롤을 추가 하는 사용자가 있습니다.      > [!NOTE] > 개발자가 추가 컨트롤 복사 시나리오를 처리할 메서드를 사용 하도록 설정 하려는 경우 파생된 클래스에서 메서드를 재정의할 수 있습니다. 자세한 내용은 상속자 참고 사항 섹션에 메모를 참조 하세요.       이 경우, 새로운 동적 컨트롤이 추가 되는 <xref:System.Web.UI.WebControls.WebParts.WebPart>CopyWebPart 메서드 컨트롤을 컨트롤의 새 인스턴스를 반환 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 추가할 컨트롤이 이면 다른 유형의 서버 컨트롤 (예: 사용자 정의 컨트롤, 사용자 지정 컨트롤 또는 ASP.NET 컨트롤) 컨트롤은 이미 래핑으로 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>웹 파트 컨트롤 집합 개체입니다.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> CopyWebPart 메서드를 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>제어 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>합니다. 내에서 래핑된 자식 컨트롤의 새 인스턴스를 컨트롤</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 의 새 인스턴스를 반환</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 하는 발생 했을 때       CopyWebPart 메서드가 반환 하는 컨트롤의 새 복사본을 만들면 다시 설정 모든 속성의 값을 해당 기본값으로 합니다. 방법은 있고 개인 설정 가능한 속성의 값을 유지 하려는 경우 새 컨트롤 인스턴스에 복사 하는,를 호출 해야는 <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.CopyPersonalizationState%2A>메서드 역시.</xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.CopyPersonalizationState%2A> 메서드를 호출 하는 CopyWebPart에 의해 수행 되는 마지막 단계는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID%2A>컨트롤에 대 한 새 ID를 얻는 메서드를.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID%2A>      > [!NOTE] > 메서드는 복사 된 컨트롤에 대 한 새 ID를 얻고 때문에 원래 ID 페이지에 추가 되는 동적 컨트롤을 참조 하 되지는지 않습니다 대신, 메서드에 의해 반환 된 컨트롤의 새 인스턴스를 참조 해야 합니다."
  syntax:
    content: protected virtual System.Web.UI.WebControls.WebParts.WebPart CopyWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 서버 컨트롤을 복사 합니다."
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 페이지에 추가할 수 있습니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers
  id: CreateAvailableTransformers
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreateAvailableTransformers()
  nameWithType: WebPartManager.CreateAvailableTransformers()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "웹 사이트의 구성 파일에 지정 된 변환기 집합을 만들고 변환기에서 참조의 컬렉션에 추가 합니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers*>속성.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers*>"
  syntax:
    content: protected virtual System.Web.UI.WebControls.WebParts.TransformerTypeCollection CreateAvailableTransformers ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.WebParts.TransformerTypeCollection
      description: "웹 사이트의 구성 파일에 지정 된 변환기의 컬렉션입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection
  id: CreateControlCollection
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreateControlCollection()
  nameWithType: WebPartManager.CreateControlCollection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "관리 되는 모든 컨트롤의 컬렉션을 반환 하는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 웹 페이지에 컨트롤입니다. 이 클래스는 상속 될 수 없습니다."
  syntax:
    content: protected override sealed System.Web.UI.ControlCollection CreateControlCollection ();
    parameters: []
    return:
      type: System.Web.UI.ControlCollection
      description: "A <xref href=&quot;System.Web.UI.ControlCollection&quot;> </xref> 모든 다양 한 웹 파트 컨트롤에서 관리 하는 구성 된는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 제어 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes
  id: CreateDisplayModes
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreateDisplayModes()
  nameWithType: WebPartManager.CreateDisplayModes()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "웹 파트 응용 프로그램에 대 한 모든 가능한 디스플레이 모드의 집합을 만듭니다."
  remarks: "이 메서드는 특정 페이지에서 지원 되는 디스플레이 모드 뿐 아니라 모든 가능한 표시 모드 목록을 만듭니다. 지원 되는 디스플레이 모드에 대 한 자세한 내용은 참조는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>속성.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>       기본적으로 웹 파트 컨트롤 집합의 다음 집합을 만듭니다 디스플레이 웹 파트 페이지에서 사용할 모드:- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode>- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>개발자가 사용 하거나 사용 하지 않고에서 파생 되는 사용자 지정 영역 지정 디스플레이 모드를 만들 수는 <xref:System.Web.UI.WebControls.WebParts.WebZone>또는 <xref:System.Web.UI.WebControls.WebParts.ToolZone>클래스.</xref:System.Web.UI.WebControls.WebParts.ToolZone> </xref:System.Web.UI.WebControls.WebParts.WebZone> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> 상속 해야 지정 디스플레이 모드를 만들려면는 <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>클래스에서 상속 해야 디스플레이 모드는 페이지에서 지원 되는 모드를 추가 하 고는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>클래스 및 CreateDisplayModes 메서드를 재정의 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>       디스플레이 모드를 사용 하 여 추가 되는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection.Add%2A>메서드를 추가 해야 해당 사용자 인터페이스 (UI) 컨트롤에 표시할 원하는 순서로 (같은 <xref:System.Web.UI.WebControls.ListBox>제어)를 제공 하는 사용자에 게 가능한 디스플레이 모드는 페이지에서.</xref:System.Web.UI.WebControls.ListBox> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection.Add%2A>"
  example:
  - "The following code example demonstrates how to use the CreateDisplayModes method.  \n  \n The code example has five parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that hosts the other controls.  \n  \n-   A user control that resides in a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zone on the Web page, and enables you to enter and display text in a label.  \n  \n-   A source code file that contains two controls. One is a custom <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, and the other is a custom <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> object to add to the page's default display modes.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom interface.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The second part of the example is the Web page. It contains two <xref:System.Web.UI.WebControls.WebParts.WebPartZone> controls, both user controls, and the custom <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Notice the `Register` directives at the top of the page to reference the user controls and namespace for the compiled controls.  \n  \n [!code-cs[Webparts_WebPartManager_CreateDisplayModes#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_187_1.aspx)]\n [!code-vb[Webparts_WebPartManager_CreateDisplayModes#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_187_1.aspx)]  \n  \n The third part of the example is the user control for entering and displaying text. It uses a <xref:System.Web.UI.WebControls.MultiView> control to create multiple views of the UI. One view appears with the `Button1` button, the other without. Notice that in the overridden `OnPreRender` method, the code checks to see whether the page is currently in the custom display mode and, if so, displays the first view of the user control, which includes the button. If the page is not in the custom display mode, for example if the page is in browse or design mode, the button is hidden.  \n  \n [!code-cs[Webparts_WebPartManager_CreateDisplayModes#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_187_2.ascx)]\n [!code-vb[Webparts_WebPartManager_CreateDisplayModes#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_187_2.ascx)]  \n  \n The fourth part of the example is the source file for the two custom classes. Notice that the custom <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overrides the CreateDisplayModes method, and that it first calls the base method to add all the default display modes, and then adds the custom display mode. The custom display mode class, `InLineEditDisplayMode`, simply inherits from <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>, sets the name of the display mode in the constructor, and overrides a number of the base properties to establish the characteristics of the custom display.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[Webparts_WebPartManager_CreateDisplayModes#3](~/add/codesnippet/csharp/m-system.web.ui.webcontr_187_3.cs)]\n [!code-vb[Webparts_WebPartManager_CreateDisplayModes#3](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_187_3.vb)]  \n  \n To run the code example, load the page in a browser. Notice that the page is currently in browse mode, and no button is visible. Using the **Display Mode** drop-down list control, change the page to **Inline Edit Display** mode, and notice that now the `Button1` button is visible in the lower user control. Add some text, and click the button to update the control. Notice that the page display is returned to browse mode, the text you entered is now displayed, and the button is once again hidden because the page is no longer in the custom display mode."
  syntax:
    content: protected virtual System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection CreateDisplayModes ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection&quot;> </xref> 지원 되는 모든 디스플레이 모드를 포함 하 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID
  id: CreateDynamicConnectionID
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreateDynamicConnectionID()
  nameWithType: WebPartManager.CreateDynamicConnectionID()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "동적 연결에 대 한 ID 역할을 하는 고유 값을 가져옵니다."
  remarks: "CreateDynamicConnectionID 메서드는 GUID 값을 생성 하 고 연결에 대 한 고유 ID로 사용할 문자열로 변환 합니다. 메서드는 동적 연결 생성 될 때마다 호출 됩니다."
  syntax:
    content: protected virtual string CreateDynamicConnectionID ();
    parameters: []
    return:
      type: System.String
      description: "연결에 대 한 고유 ID를 포함 하는 문자열입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(System.Type)
  id: CreateDynamicWebPartID(System.Type)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreateDynamicWebPartID(Type)
  nameWithType: WebPartManager.CreateDynamicWebPartID(Type)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "고유 id에 대 한 동적 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 제어 합니다."
  remarks: "때 <xref:System.Web.UI.WebControls.WebParts.WebPart>웹 페이지에 컨트롤을 추가 하는 일 수 있습니다 (즉, 페이지 태그에서 컨트롤을 선언한) 정적 또는 동적 (즉, 프로그래밍 방식으로 추가 됩니다).</xref:System.Web.UI.WebControls.WebParts.WebPart> 모든 시나리오에서 여기서 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤이 고유한 ID를 생성 하려면이 메서드를 호출 하는 것은 페이지에 추가할 새 동적 컨트롤을 만들고</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       메서드는 개발자가 ID를 생성 하기 위한 사용자 지정 구현을 제공 하는 경우 해당 재정의할 수 있도록 가상"
  syntax:
    content: protected virtual string CreateDynamicWebPartID (Type webPartType);
    parameters:
    - id: webPartType
      type: System.Type
      description: "<xref:System.Type>ID 생성 되는 컨트롤의.</xref:System.Type>"
    return:
      type: System.String
      description: "컨트롤에 대 한 고유 ID를 포함 하는 문자열입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPartType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(System.String,System.String,System.String,System.String,System.String)
  id: CreateErrorWebPart(System.String,System.String,System.String,System.String,System.String)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreateErrorWebPart(String,String,String,String,String)
  nameWithType: WebPartManager.CreateErrorWebPart(String,String,String,String,String)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(String,String,String,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "페이지에 삽입 되 고 최종 사용자가 로드 하거나 동적 하려고 할 때 표시 되는 특수 컨트롤을 만듭니다. <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤 몇 가지 이유로 실패 합니다."
  remarks: "웹 파트 컨트롤 집합을 로드 하거나 동적의 인스턴스를 만들 때 CreateErrorWebPart 메서드가 호출 <xref:System.Web.UI.WebControls.WebParts.WebPart>서버 컨트롤을 몇 가지 이유로 실패할 또는.</xref:System.Web.UI.WebControls.WebParts.WebPart> 메서드가 만듭니다 <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart>개체, 오류 메시지를 반환 합니다.</xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart>컨트롤 실패 했거나 컨트롤 대신 삽입 되 고 해당 오류 메시지는 페이지에 표시 됩니다.</xref:System.Web.UI.WebControls.WebParts.ErrorWebPart>       사용자 코드에서 직접 CreateErrorWebPart 메서드를 호출할 수 없습니다. 그러나에서 상속할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>클래스 및 메서드를 확장 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 자세한 내용은 상속자 참고 사항 섹션에 대 한 메모를 참조 하세요.       최종 사용자가 작업할 수는 <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart>제어 페이지에 매우 일반적인 경우 처럼 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> 오류 메시지를 제거 하려면 지점을 컨트롤에 추가 됩니다 닫기 동사를 클릭 하 여 컨트롤을 닫을 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>개체를 다른 컨트롤 처럼.</xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> 최종 사용자를 삭제 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart>컨트롤, 서버 컨트롤에 로드 하지 못한 페이지에서 삭제 됩니다.</xref:System.Web.UI.WebControls.WebParts.ErrorWebPart>"
  syntax:
    content: protected virtual System.Web.UI.WebControls.WebParts.ErrorWebPart CreateErrorWebPart (string originalID, string originalTypeName, string originalPath, string genericWebPartID, string errorMessage);
    parameters:
    - id: originalID
      type: System.String
      description: "문자열은 실패 한 컨트롤의 ID입니다. 경우는 <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> 모니터 실패의 경우 ID는 자식 서버 컨트롤의 ID입니다."
    - id: originalTypeName
      type: System.String
      description: "이름 문자열은 <xref:System.Type>실패 한 컨트롤의.</xref:System.Type> 경우는 <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> 관련 된 오류를 형식 이름이 자식 서버 컨트롤의 형식입니다."
    - id: originalPath
      type: System.String
      description: "경우에 사용자 정의 컨트롤에 대 한 경로 포함 하는 문자열은 <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> 자식이 포함 되어 있는 사용자 정의 컨트롤은 오류와 관련 된 합니다."
    - id: genericWebPartID
      type: System.String
      description: "ID를 반환 하는 문자열을 <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref>종류의 컨트롤을 로드 하거나 컨트롤을 만드는 데 오류와 관련 된 경우."
    - id: errorMessage
      type: System.String
      description: "페이지에 표시할 오류 메시지를 포함 하는 문자열입니다."
    return:
      type: System.Web.UI.WebControls.WebParts.ErrorWebPart
      description: "<xref href=&quot;System.Web.UI.WebControls.WebParts.ErrorWebPart&quot;> </xref> 를 로드 하거나 만들 실패 한 컨트롤 대신 페이지에 삽입 됩니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization
  id: CreatePersonalization
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreatePersonalization()
  nameWithType: WebPartManager.CreatePersonalization()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "현재 웹 페이지에 대 한 사용자의 개인 설정 데이터를 포함 하는 개인 설정 개체를 반환 합니다."
  remarks: "CreatePersonalization 메서드 포함 하 고 현재 페이지에 대 한 사용자의 개인 설정을 관리할 개체를 반환 합니다. <xref:System.Web.UI.WebControls.WebParts.WebPartManager>이 개체를 관리 하는 컨트롤입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  syntax:
    content: protected virtual System.Web.UI.WebControls.WebParts.WebPartPersonalization CreatePersonalization ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartPersonalization
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartPersonalization&quot;> </xref> 사용자의 개인 설정 데이터를 포함 시키십시오."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(System.Web.UI.Control)
  id: CreateWebPart(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreateWebPart(Control)
  nameWithType: WebPartManager.CreateWebPart(Control)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "아닌 서버 컨트롤을 래핑하는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 보호로 <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> 개체를 컨트롤에는 웹 파트 기능이 가질 수 있습니다."
  remarks: "CreateWebPart 메서드는 사용 되지 않는 서버 컨트롤을 위한 기본 메커니즘 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤을 동일한 기능을 수행할 수는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 이므로 웹 파트 응용 프로그램에 완전히 참여.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> 크게 개발자가이 메서드를 사용 하 여 웹 파트 응용 프로그램에서 사용할 수 있는 서버 컨트롤의 수, 하므로 서버 거의 모든 형식의 표준 ASP.NET 컨트롤, 사용자 정의 컨트롤 및 사용자 지정 컨트롤-사용할 수 있습니다 클릭 합니다.       <xref:System.Web.UI.WebControls.WebParts.WebPartManager>제어도이 방법을 사용 하 여이 다른 두 가지 시나리오에서 사용 하 여 서버 컨트롤을 래핑하는 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>개체입니다.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> 때 사용자가 서버 컨트롤을 추가 페이지를 사용 하 여는 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>없으면 가져온된 컨트롤 제어는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 CreateWebPart 메서드를 호출 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 서버 컨트롤 내에서 일관 된 형식에서 선언 되는 경우에 또한는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>되지 않는 모든 컨트롤에 대 한 메서드는 CreateWebPart 웹 페이지에는 영역 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       일반적인 방법은 CreateWebPart 메서드를 사용 하 여 사용 하 여 컨트롤을 프로그래밍 방식으로 서버 컨트롤 영역에 추가 하면 한 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>개체를 호출 합니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A>컨트롤의 모든 컬렉션에 추가 하는 방법을 <xref:System.Web.UI.WebControls.WebParts.WebPart>에서 참조 하는 페이지에 있는 컨트롤의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A>속성.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart>"
  example:
  - "The following code example demonstrates use of the CreateWebPart method. In the `Button2_Click method`, the CreateWebPart method is called to wrap a <xref:System.Web.UI.WebControls.Calendar> control with a <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> object before adding it to the zone.  \n  \n [!code-cs[WebParts_WebPartManager_DeleteWebPart#1](~/add/codesnippet/csharp/6552ec5d-43c0-4c29-a8a1-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_DeleteWebPart#1](~/add/codesnippet/visualbasic/6552ec5d-43c0-4c29-a8a1-_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.GenericWebPart CreateWebPart (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "아닌 서버 컨트롤을 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 제어 합니다."
    return:
      type: System.Web.UI.WebControls.WebParts.GenericWebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> 를 래핑하는 <code> control </code> 진정한 클라이언트로 작동할 수 있도록 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 제어 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning
  id: DeleteWarning
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DeleteWarning
  nameWithType: WebPartManager.DeleteWarning
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "컨트롤을 삭제할 때 최종 사용자에 게 표시 되는 사용자 지정 경고 메시지를 가져오거나 설정 합니다."
  remarks: "사용자를 삭제 한 <xref:System.Web.UI.WebControls.WebParts.WebPart>제어, 일반적으로 기본 경고 메시지가 표시 됩니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤의이 인스턴스를 삭제 하면 삭제는 영구적 사용자 경고 합니다. 페이지 개발자 페이지에 컨트롤의 새 인스턴스를 추가 하는 방법을 사용자가 제공할 수 있습니다 (같은의 카탈로그를 통해 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 또는 프로그래밍 방식), 삭제 하는 컨트롤의 현재 인스턴스는 영구적으로 제거 하지만.</xref:System.Web.UI.WebControls.WebParts.WebPart> 필요한 경우의 삭제를 취소 하려면 사용자에 대 한 단추를 포함 하는 경고를 표시 하는 대화 상자의 합니다.       DeleteWarning 속성에는 개발자가 사용자에 게 표시 되는 경고 메시지를 설정할 수 있습니다.       페이지 개발자 할당 빈 문자열 (&quot;&quot;)를 삭제할 때 값이 속성에 경고 메시지 대화 상자가 표시 됩니다는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart>      > [!NOTE] > The DeleteWarning 속성이 정적의 경우 표시 되지 않습니다 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 및 컨트롤 서버.</xref:System.Web.UI.WebControls.WebParts.WebPart> 정적 컨트롤 내에 선언 된 서버 컨트롤은 한 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>웹 페이지의 태그를 영역.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 이러한 컨트롤은 정적 이므로 삭제할 수 없습니다, 때문 delete 경고 메시지가 경우 표시 되지 않습니다. 사용자가 정적 컨트롤을 닫을 수 있지만 닫힌된 컨트롤이 있는 것 수로 다시 추가할 수는 페이지는 사용자가 반면 삭제 된 컨트롤을 복구할 수 없습니다 페이지 카탈로그에 추가 됩니다."
  example:
  - "The following code example demonstrates the use of the DeleteWarning property declaratively and programmatically.  \n  \n There are four parts to the code example:  \n  \n-   A user control that enables you to change page display modes.  \n  \n-   A custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  \n  \n-   A Web page.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The second part of the code example is the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This example uses the dynamic compilation approach; thus there is no `Assembly` attribute in the `Register` directive for this control at the top of the Web page. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_DeleteWarning#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_226_1.cs)]\n [!code-vb[WebParts_WebPartManager_DeleteWarning#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_226_1.vb)]  \n  \n The third part of the code example is the Web page. The page contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zone, with the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control declared in the zone, so that a user can add it to the page at run time. Note that only dynamic controls (controls that are added to a page programmatically or from a catalog like this one) can be deleted from a page. Static controls (controls that are declared within a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone in the markup of a page) can be closed, but never deleted. The `<asp:webpartmanager>` element declares a custom value for the DeleteWarning property by using the `DeleteWarning` attribute. The `Button1_Click` method assigns another custom value to the DeleteWarning property.  \n  \n [!code-cs[WebParts_WebPartManager_DeleteWarning#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_226_2.aspx)]\n [!code-vb[WebParts_WebPartManager_DeleteWarning#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_226_2.aspx)]  \n  \n After you load the page in a browser, you need to add the <xref:System.Web.UI.WebControls.WebParts.WebPart> control to the page. Using the **Display Mode** drop-down list control, select catalog mode. When the catalog appears, select the check box next to the custom control, click **Add** to add it to the page, and then click **Close** to return the page to browse mode. Now that the control is visible, you can delete it. Using the **Display Mode** control again, switch the page into design mode (you cannot delete controls while the page is in browse mode). Click the verbs menu (the arrow symbol) in the header of the <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and select **Delete**. The warning that you set on the `DeleteWarning` attribute appears. Click **Cancel**. Now click the button labeled **Change Delete Warning**, which changes the property value programmatically. From the verbs menu on the control, select **Delete** again, and notice that this time the other warning message appears."
  syntax:
    content: public virtual string DeleteWarning { get; set; }
    return:
      type: System.String
      description: "경고 메시지의 텍스트를 포함 하는 문자열입니다. 기본값은 지역화 된 경고 메시지입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  id: DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DeleteWebPart(WebPart)
  nameWithType: WebPartManager.DeleteWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "동적 인스턴스를 영구적으로 제거는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 웹 페이지에서 제어 합니다."
  remarks: "DeleteWebPart 메서드 나타내는 컨트롤을 영구적으로 제거는 `webPart` 페이지에서 매개 변수입니다. 닫힌 컨트롤에 추가 되는 <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>제어 하 고 삭제 된 컨트롤 인스턴스 페이지에 다시 추가할 수 없습니다는 페이지에 다시 추가할 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>      > [!NOTE] >는 웹 파트 컨트롤에 의해 구현 된 설정, 동적을 삭제 하려면 사용자를 위한 기능 <xref:System.Web.UI.WebControls.WebParts.WebPart>제어 사용자와 페이지에 컨트롤이 추가 된 개인 설정 범위에 따라 달라 집니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 (권한이 있는 사용자)에 의해 페이지가 공유 범위에 있을 때 추가 되 면 다음 컨트롤 경우 삭제할 수 없습니다 개별 사용자가 페이지는 사용자 범위에 있습니다.       동적 컨트롤에만 삭제할 수 있습니다. 동적 컨트롤은 프로그래밍 방식으로 또는 카탈로그에서 컨트롤을 추가 하는 사용자가 페이지에 추가 됩니다. 정적 컨트롤 태그 또는 지 속성 형식에서 선언적으로 페이지에 추가 됩니다. 선언적 태그 인 태그에 영구적으로 존재 하기 때문에 정적 컨트롤을 삭제할 수 있습니다 하지만 닫은 후 다시 수 있습니다."
  example:
  - "The following code example demonstrates how to use the DeleteWebPart method. The first time the **Add Calendar** button is clicked, the code in the event handler creates a <xref:System.Web.UI.WebControls.Calendar> control, and adds it to a zone as a <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> object. Because the control is added programmatically, it is a dynamic control, and therefore it can be deleted. When a user clicks the **Delete Calendar** button, the code ensures that the control exists, and then deletes it by calling the DeleteWebPart method.  \n  \n [!code-cs[WebParts_WebPartManager_DeleteWebPart#1](~/add/codesnippet/csharp/116fed0f-0c12-4700-9cde-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_DeleteWebPart#1](~/add/codesnippet/visualbasic/116fed0f-0c12-4700-9cde-_1.aspx)]"
  syntax:
    content: public void DeleteWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "삭제할 서버 컨트롤입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode
  id: DesignDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DesignDisplayMode
  nameWithType: WebPartManager.DesignDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "웹 파트 컨트롤을 포함 하는 웹 페이지의 레이아웃을 변경 하는 데 사용 되는 디스플레이 모드를 나타냅니다. 이 필드는 읽기 전용입니다."
  remarks: "DesignDisplayMode 필드 사용자 지정 참조 <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>만들어지고에 포함 된 개체는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> 정적 개체 이므로 참조할 수 있습니다를 통해 직접는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤의 인스턴스를 필요로 하지 않고 클래스.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       웹 파트를 포함 하는 페이지를 처음 로드할을 제어 하는 경우 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>(찾아보기 모드) 기본적으로.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> 사용자가 서로 다른 시간대 또는 현재 영역 내에서 컨트롤을 이동 하 여 페이지의 레이아웃을 변경 하려면 먼저 DesignDisplayMode (디자인 모드)에 페이지를 전환 해야 합니다. 디자인 모드에서 다양 한 영역에 대 한 사용자 인터페이스 (UI) 나타나고 사용자 레이아웃을 변경 하는 컨트롤을 끌어 놓을 수 있습니다."
  example:
  - "The following code example demonstrates how to work with the DesignDisplayMode field programmatically. The code populates a drop-down list with the supported display modes for the page, which in this case are browse and design. Notice that, in the `Page_PreRender` method, the code checks whether the current <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> property is set to DesignDisplayMode. If so, `Label1` will be visible, and if not, `Label1` will be hidden.  \n  \n [!code-vb[WebParts_WebPartManager_DesignDisplayMode#1](~/add/codesnippet/visualbasic/f-system.web.ui.webcontr_6_1.aspx)]\n [!code-cs[WebParts_WebPartManager_DesignDisplayMode#1](~/add/codesnippet/csharp/f-system.web.ui.webcontr_6_1.aspx)]  \n  \n After you load the page in a browser, you are in browse mode by default. Notice that the label on the page is hidden. Use the drop-down list control to switch the page to design mode. Notice that, because of the code in the `Page_PreRender` method, the label is now visible."
  syntax:
    content: public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode DesignDisplayMode;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  id: DisconnectWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DisconnectWebPart(WebPart)
  nameWithType: WebPartManager.DisconnectWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "제거는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 서버 컨트롤 되 고 닫혀 있지 않거나에 참여 하는 모든 연결에서 삭제 합니다."
  remarks: "DisconnectWebPart 메서드는 웹 파트 컨트롤 집합 컨트롤이 페이지에 종료 되거나 페이지에서 삭제할 때 의해 내부적으로 호출 됩니다. 이러한 시나리오에서는 메서드 소비자 또는 공급자와 연관 된 모든 연결에서 컨트롤을 제거 하려면 호출 됩니다. 모든 연결에서 컨트롤이 제거 되 면 하는 경우이 메서드 호출의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>모든 연결을 종료 하는 메서드 `webPart` 참여 했습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>       발생 DisconnectWebPart 메서드를 호출 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> 일반적으로이 이벤트를 취소할 수 있지만 두 가지 경우에는 취소할 수 없습니다. 페이지에 요청 중 한 가지 경우에 발생 때는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A>메서드를 호출 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> 기존 연결 간에 충돌이 발생 하 고이 인스턴스의 충돌 하는 연결 중 하나를 닫는 DisconnectWebPart 메서드가 호출 됩니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>충돌을 해결할 수 있어야 하기 때문에 이벤트를 취소할 수 없습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>       다른 사례 발생 때는 <xref:System.Web.UI.WebControls.WebParts.WebPart>또는 현재 연결 된 서버 컨트롤 종료 하거나 삭제 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 제어로 인해이 경우 종료 되 게도 따라서 취소 하는 것이 불가능 설계 연결 요구 사항이 해당 페이지에서 제거 되 고 됩니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>이벤트의 연결을 종료 프로세스를 중단할.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> 자세한 내용은 참조는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>"
  example:
  - "The following code example demonstrates how to use the DisconnectWebPart method. Using two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, the Web page enables you to create a connection between the controls by clicking a button, while another button enables you to disconnect the controls. If you close one of the controls while the page is in browse mode and the controls are connected, an override of the DisconnectWebPart method disconnects the closed control, ends the connection, and displays a message.  \n  \n The code example has four parts:  \n  \n-   A user control for changing display modes.  \n  \n-   A source file containing custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n-   A Web page to host the controls.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The second part is the file containing the source code for the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that will be connected, and a custom <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This example uses dynamic compilation, so the `Register` directive that references these components in the Web page is declared accordingly at the top of the Web page. For a walkthrough that demonstrates compiling options, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n In the source code, notice the inherited control `MyWebPartManager` that overrides the DisconnectWebPart method. This method checks each connection in a page to see whether the control being closed participates in the connection and, if so, calls the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> method to end the connection. This is identical to the base implementation of the method in the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. The overridden method then customizes the base implementation by writing a message to the page.  \n  \n [!code-cs[WebParts_WebPartManager_DisconnectWebParts#2](~/add/codesnippet/csharp/71ce8e23-5620-4b82-8ba7-_1.cs)]\n [!code-vb[WebParts_WebPartManager_DisconnectWebParts#2](~/add/codesnippet/visualbasic/71ce8e23-5620-4b82-8ba7-_1.vb)]  \n  \n The third part of the code example is the Web page. Notice that near the top, it contains `Register` directives to register the user control, and the dynamically compiled assembly with the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The page has two primary methods. The `Button1_Click` method creates a connection between the controls, while the `Button2_Click` method disconnects the controls.  \n  \n [!code-cs[WebParts_WebPartManager_DisconnectWebParts#1](~/add/codesnippet/csharp/71ce8e23-5620-4b82-8ba7-_2.aspx)]\n [!code-vb[WebParts_WebPartManager_DisconnectWebParts#1](~/add/codesnippet/visualbasic/71ce8e23-5620-4b82-8ba7-_2.aspx)]  \n  \n After you load the page, click the **Connect** button to connect the controls. Then click the verbs menu in one of the controls (the downward arrow in the header of the control), and select **Close** from the verbs menu. When you try to close the control, the overridden method is called, the connection is ended, and the message is written to the page. If you want to reset the page to restore the closed control and experiment with other options, click the **Reset User State** link to remove personalization data and restore the page's original state."
  syntax:
    content: protected virtual void DisconnectWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 연결을 끊을 제어 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)
  id: DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DisconnectWebParts(WebPartConnection)
  nameWithType: WebPartManager.DisconnectWebParts(WebPartConnection)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(WebPartConnection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "웹 페이지에 연결 된 서버 컨트롤을 연결 해제 하는 과정을 수행 합니다."
  remarks: "DisconnectWebParts 메서드는 전체 프로세스 간의 연결을 종료를 수행 <xref:System.Web.UI.WebControls.WebParts.WebPart>나 서버 컨트롤에 전달할 때의 `connection` 매개 변수.</xref:System.Web.UI.WebControls.WebParts.WebPart>       이 메서드는 컨트롤을 배치할 때 연결을 끊을 데는 `<asp:connectionszone>` 연결 관리에 대 한 사용자 인터페이스 (UI)를 제공 하는 웹 페이지의 요소입니다. 페이지에 있으면 연결 디스플레이 모드 (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>), 및 현재 연결이 있는, 사용자가 연결을 종료 하는 DisconnectWebParts 메서드를 호출 하는 단추를 클릭할 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>       또한 경우 호출할 수 있습니다는 DisconnectWebParts 메서드 사용자 코드에서 직접 추가 하지 않고 프로그래밍 방식으로 고 컨트롤을 분리 하려면는 `<asp:connectionszone>` 요소는 페이지입니다."
  example:
  - "The following code example demonstrates how to use the DisconnectWebParts method. Using two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, the Web page enables you to create a connection between the controls by clicking a button, while another button enables you to disconnect the controls.  \n  \n The code example has four parts:  \n  \n-   A user control for changing display modes.  \n  \n-   A source file containing custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n-   A Web page to host the controls.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The second part is a file containing the source code for the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that will be connected. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This example uses dynamic compilation, so the `Register` directive that references these components in the Web page is declared accordingly at the top of the Web page. For a walkthrough that demonstrates compiling options, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_DisconnectWebParts#2](~/add/codesnippet/csharp/01708fce-976e-4f0e-bfeb-_1.cs)]\n [!code-vb[WebParts_WebPartManager_DisconnectWebParts#2](~/add/codesnippet/visualbasic/01708fce-976e-4f0e-bfeb-_1.vb)]  \n  \n The third part of the code example is the Web page. Notice that near the top, it contains `Register` directives to register the user control and the dynamically compiled assembly with the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The page has two primary methods. The `Button1_Click` method creates a connection between the controls, and the `Button2_Click` method disconnects the controls.  \n  \n [!code-cs[WebParts_WebPartManager_DisconnectWebParts#1](~/add/codesnippet/csharp/01708fce-976e-4f0e-bfeb-_2.aspx)]\n [!code-vb[WebParts_WebPartManager_DisconnectWebParts#1](~/add/codesnippet/visualbasic/01708fce-976e-4f0e-bfeb-_2.aspx)]  \n  \n After you load the page, you can click the **Connect** button to connect the controls. If you enter some text in the text box control, and then click the **Enter** button, the text will be displayed in the connected control (it would not be displayed if the controls were disconnected). If you click the **Disconnect** button, the controls will be disconnected. You can verify the connection status of the controls by using the **Display Mode** drop-down list control to switch the page into **Connect** mode. After doing that, click the verbs menu (represented by an arrow) in the title bar of one of the controls, and select the **Connect** item. The connection UI is displayed; it is available because there is an `<asp:connectionszone>` element declared in the page. You can also connect and disconnect the controls from this UI."
  syntax:
    content: public virtual void DisconnectWebParts (System.Web.UI.WebControls.WebParts.WebPartConnection connection);
    parameters:
    - id: connection
      type: System.Web.UI.WebControls.WebParts.WebPartConnection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> 서버 컨트롤 간의 연결을 나타내는입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>connection</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>connection</code>중 하나에 포함 되지 않은 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections*> 또는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections*>합니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections*> is read-only.  \n  \n \\- or -  \n  \n <code>connection</code> has already been disconnected from <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections*>.  \n  \n \\- or -  \n  \n <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections*> is read-only.  \n  \n \\- or -  \n  \n <code>connection</code> has already been disconnected from <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections*>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode
  id: DisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DisplayMode
  nameWithType: WebPartManager.DisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "웹 파트 컨트롤을 포함 하는 웹 페이지에 대 한 활성 표시 모드를 가져오거나 설정 합니다."
  remarks: "웹 파트 컨트롤을 포함 하는 페이지는 항상 여러 개의 가능한 디스플레이 모드 중 하나입니다. 디스플레이 모드에 대 한 세부 정보를 참조 하십시오. [웹 파트 페이지 디스플레이 모드](~/add/includes/ajax-current-ext-md.md)합니다.       <xref:System.Web.UI.WebControls.WebParts.WebPartManager>클래스는 웹 페이지에 대 한 디스플레이 모드를 만듭니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 기본을 사용 하 여 <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>클래스는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 웹 파트 컨트롤을 포함 하는 페이지에 사용할 수 있는 여러 가지 표준 디스플레이 모드 개체를 만듭니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> 에 설명 되어 이러한 표준 디스플레이 모드는 <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>클래스 개요.</xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>       <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤에 웹 파트 컨트롤을 사용 하는 페이지에 대 한 디스플레이 모드도 관리 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> DisplayMode 속성을 사용 하 여 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤은 페이지에 현재 표시 모드에 대 한 참조를 유지 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 또한 페이지는 서로 다른 디스플레이 모드를 전환 하려면 DisplayMode 속성을 사용할 수 있습니다. 웹 파트 컨트롤을 사용 하는 페이지에서 디스플레이 모드 변경의 예제를 보려면 [연습: 웹 파트 페이지에](~/add/includes/ajax-current-ext-md.md)합니다.       디스플레이 모드 관리의 일부로 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 이벤트 및 이벤트 처리기와 같은 디스플레이 모드와 관련 된 제공 된 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged%2A>메서드 및 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> 이러한 메서드는 페이지의 동작을 사용자 지정 하 고 사용자 지정 디스플레이 모드를 추가 하는 데에 메커니즘을 제공 합니다."
  example:
  - "The following code example demonstrates programmatic use of the DisplayMode property. After loading the page in a browser, you can use the buttons near the bottom of the page to switch display modes. The page is in browse mode by default when it loads. If you switch to design mode, you can drag the server controls from one zone to another, or arrange two controls within one zone. If you switch to edit mode, you can click the verbs menu in the header of either of the server controls, select **Edit**, and edit the control using the provided editing user interface (UI).  \n  \n> [!NOTE]\n>  Switching among display modes in a Web Parts application is very common, and you might want to provide a consistent, reusable way to do this on all your pages that contain Web Parts controls. For an example of a user control that changes display modes and that can be reused on many pages, see [Walkthrough: Changing Display Modes on a Web Parts Page](../Topic/Walkthrough:%20Changing%20Display%20Modes%20on%20a%20Web%20Parts%20Page.md).  \n  \n [!code-cs[WebParts_WebPartManager_DisplayMode#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_632_1.aspx)]\n [!code-vb[WebParts_WebPartManager_DisplayMode#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_632_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.WebPartDisplayMode DisplayMode { get; set; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayMode&quot;> </xref> 페이지의 디스플레이 모드를 결정 하는 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayMode&quot;> </xref> 개체에 속성에 할당 되 고 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref href=\"System.Web.UI.WebControls.WebParts.WebPartDisplayMode\"></xref> object being assigned to the property is not one of the supported display modes.  \n  \n \\- or -  \n  \n The <xref href=\"System.Web.UI.WebControls.WebParts.WebPartDisplayMode\"></xref> object being assigned to the property is disabled."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged
  id: DisplayModeChanged
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DisplayModeChanged
  nameWithType: WebPartManager.DisplayModeChanged
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "페이지가 변경 웹 파트에서 현재 디스플레이 모드 후 발생 합니다."
  remarks: "디스플레이 모드는 웹 파트 응용 프로그램의 필수적인 부분입니다. 사용자가 웹 페이지의 다른 디스플레이 모드를 전환 하는 경우 페이지는 매우 다른 모양의 새 디스플레이 모드의 목적에 따라을 자주 수행 합니다. 디스플레이 모드 변경 된 후에 선택한 UI 요소의 모양 변경 특정 컨트롤을 표시 하거나 숨길 같은 사용자 인터페이스 (UI)에 특정 변경 해야 할 수도 있으며 등 수 있습니다.      > [!NOTE] > 디스플레이 모드에 대 한 자세한 내용은 참조 하십시오. [웹 파트 페이지 디스플레이 모드](~/add/includes/ajax-current-ext-md.md)합니다. 이벤트 사용에 대 한 자세한 내용은 참조 하십시오. [하는 방법: Web Forms 응용 프로그램에](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler DisplayModeChanged;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging
  id: DisplayModeChanging
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DisplayModeChanging
  nameWithType: WebPartManager.DisplayModeChanging
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "사용자가 다른 디스플레이 모드를 변경 하는 과정을 시작 하는 웹 페이지에 있는 동사를 클릭 한 후에 발생 합니다."
  remarks: "디스플레이 모드는 웹 파트 응용 프로그램의 필수적인 부분입니다. 사용자가 웹 페이지의 다른 디스플레이 모드를 전환 하는 경우 페이지는 매우 다른 모양의 새 디스플레이 모드의 목적에 따라을 자주 수행 합니다. 특정 사용자 인터페이스 (UI)에서 사용 하 여 변경 하려는 사용자가 동사를 클릭 하 여 새 디스플레이 모드를 변경 하는 과정을 시작 후는 <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs.NewDisplayMode%2A>속성을 다음 다양 한 UI 요소를 적절 하 게 변경 하 고 새 디스플레이 모드는 것을 확인 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs.NewDisplayMode%2A> 이 작업을 수행 하는 유용한 방법은 재정의 하는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A>UI를 사용자 지정 메서드입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A>      > [!NOTE] > 디스플레이 모드에 대 한 자세한 내용은 참조 하십시오. [웹 파트 페이지 디스플레이 모드](~/add/includes/ajax-current-ext-md.md)합니다. 이벤트 사용에 대 한 자세한 내용은 참조 하십시오. [하는 방법: Web Forms 응용 프로그램에](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler DisplayModeChanging;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes
  id: DisplayModes
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DisplayModes
  nameWithType: WebPartManager.DisplayModes
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "연결 된 모든 디스플레이 모드의 읽기 전용 컬렉션을 가져옵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 제어 합니다."
  remarks: "관련 된 모든 디스플레이 모드와 달리 DisplayModes 속성 참조는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>디스플레이 모드 사용할 수 있는 현재 페이지에서 (지원)를 참조 하는 속성.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>       제공 된 디스플레이 모드, 찾아보기, 디자인, 두 가지는 페이지에 항상 지원 됩니다. 다른 세 가지 표시 모드, 편집, 카탈로그 및 연결을 페이지에는 해당 영역에서 실행 되도록 특정 디스플레이 모드에 필요한 형식이 있을 때만 지원 됩니다. 예를 들어, 페이지에 포함 되어 있지 않으면는 <xref:System.Web.UI.WebControls.WebParts.EditorZone>영역을 편집 디스플레이 모드는 DisplayModes 속성에서 참조 하는 컬렉션에 나타나지만 참조 컬렉션에 나타나지 않으므로 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>속성.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> </xref:System.Web.UI.WebControls.WebParts.EditorZone>"
  example:
  - "The following code example shows the programmatic use of the DisplayModes property. The code uses this property to populate the list with all the display modes available in the Web Parts control set, even those that are not supported on the current page. In this case, the catalog and connect display modes are not supported, because their corresponding required zones are not on the page.  \n  \n The other three display modes--browse, design, and edit--are supported on the page. Edit mode is supported because the page contains an <xref:System.Web.UI.WebControls.WebParts.EditorZone> zone, while browse and design modes are always supported.  \n  \n After you load the page in a browser, you can use the drop-down list control to switch the page from browse mode to design mode, and then to edit mode. In edit mode, you can click the drop-down verbs menu in the header of one of the server controls, and select **Edit** to edit the control. Note that if you select **Catalog** or **Connect** in the drop-down list, an error page is generated.  \n  \n [!code-cs[WebParts_WebPartManager_DisplayModes#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_572_1.aspx)]\n [!code-vb[WebParts_WebPartManager_DisplayModes#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_572_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection DisplayModes { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection&quot;> </xref> 집합이 들어 있는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayMode&quot;> </xref> 와 연결 된 개체는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 제어 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections
  id: DynamicConnections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DynamicConnections
  nameWithType: WebPartManager.DynamicConnections
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "웹 페이지에 현재 있는 모든 동적 연결의 컬렉션을 가져옵니다."
  remarks: "동적 연결에 프로그래밍 방식으로 정적이 아니라 만들어진 연결이 있습니다. 정적 연결은 Web Forms 페이지의 태그에 선언 하 여 만듭니다. 동적 연결을 프로그래밍 방식으로 또는 연결 사용자 인터페이스 (UI)를 사용 하 여 연결을 만드는 사용자가을 구성 합니다.       DynamicConnections 컬렉션이 기능은 읽기 전용 이며 해당 내용을 변경할 수 없습니다, 각 동적 연결 개체에 대 한 프로그래밍 방식의 액세스를 제공지 않습니다.      > [!NOTE] > 연결 또는 연결 끊기와 같은 일반적인 작업을 수행할 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 개발자가에서 공용 메서드를 사용 해야는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>클래스 같은 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>및 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>, 직접 DynamicConnections 컬렉션에 있는 연결 개체를 수정 하려고 하는 대신.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPart>"
  syntax:
    content: protected System.Web.UI.WebControls.WebParts.WebPartConnectionCollection DynamicConnections { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnectionCollection&quot;> </xref> 페이지의 모든 동적 연결에 대 한 참조가 들어 있는입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode
  id: EditDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: EditDisplayMode
  nameWithType: WebPartManager.EditDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "디스플레이 모드를는 최종 사용자가 편집 하 고 수정할 수 서버 컨트롤을 나타냅니다. 이 필드는 읽기 전용입니다."
  remarks: "EditDisplayMode 필드 사용자 지정 참조 <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>만들어지고에 포함 된 개체는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> 정적 개체 이므로 참조할 수 있습니다를 통해 직접는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤의 인스턴스를 필요로 하지 않고 클래스.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       웹 파트를 포함 하는 페이지를 처음 로드할을 제어 하는 경우 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>(찾아보기 모드) 기본적으로.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> 사용자가 편집 하거나 서버 컨트롤을 수정 하려면, 먼저 EditDisplayMode (편집 모드에서)를 페이지를 전환 해야 합니다. 둘째, 특정 서버 컨트롤의 편집 동사 해당 컨트롤의 헤더에 있는 동사 메뉴를 클릭 하 여 편집을 선택 해야 합니다. 컨트롤이 편집 모드에 있으면 선택한 컨트롤을 편집 하기 위해 편집 사용자 인터페이스 (UI) 나타납니다.       페이지에서 편집 모드를 사용 하려면 페이지 해야 하나 이상 포함 <xref:System.Web.UI.WebControls.WebParts.EditorZone>와 같은 제공 되는 편집 중 하나 이상이 포함 된 영역 컨트롤의 <xref:System.Web.UI.WebControls.WebParts.LayoutEditorPart>컨트롤 또는 사용자 지정 편집 컨트롤이.</xref:System.Web.UI.WebControls.WebParts.LayoutEditorPart> </xref:System.Web.UI.WebControls.WebParts.EditorZone>"
  example:
  - "The following code example demonstrates how to work with the EditDisplayMode field programmatically. The code populates a drop-down list with the supported display modes for the page, which in this case are browse, design, and edit. To support editing, an `<asp:EditorZone>` element is in the page. Notice that, in the `Page_PreRender` method, the code checks whether the current <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> property is set to EditDisplayMode. If so, `Label1` will be visible, and if not, `Label1` will be hidden.  \n  \n [!code-cs[WebParts_WebPartManager_EditDisplayMode#1](~/add/codesnippet/csharp/f-system.web.ui.webcontr_7_1.aspx)]\n [!code-vb[WebParts_WebPartManager_EditDisplayMode#1](~/add/codesnippet/visualbasic/f-system.web.ui.webcontr_7_1.aspx)]  \n  \n After you load the page in a browser, you are in browse mode by default. Notice the label on the page is hidden. Use the drop-down list control to switch the page to edit mode. Notice that, because of the code in the `Page_PreRender` method, the label is now visible. Click the **Edit** verb in the verbs menu on one of the controls, to enable editing of that specific control."
  syntax:
    content: public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode EditDisplayMode;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript
  id: EnableClientScript
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: EnableClientScript
  nameWithType: WebPartManager.EnableClientScript
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "클라이언트 쪽 스크립트를 포함 하는 웹 페이지에서 사용 되는지 여부를 결정 하는 값을 가져오거나 설정 합니다.는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 제어 합니다."
  remarks: "EnableClientScript 속성에는 개발자가 클라이언트 스크립트를 사용 하지 않도록 설정할 수 있는 방법을 제공 합니다. 클라이언트 보안을 위해 스크립트를 사용 하지 않도록 설정 하거나 갖도록 하는 데는 페이지의 모든 사용자는 유사한 사용자 환경, 다양 한 브라우저를 사용 하는 경우에 할 수 있습니다.       클라이언트를 추가 하 여 스크립트를 사용 하지 않도록 설정할 수는 `EnableClientScript` 특성을 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>선언적 코드의 다음 줄에서와 같이 웹 페이지: `<asp:webpartmanager id=&quot;manager&quot; runat=&quot;server&quot;` `EnableClientScript=&quot;false&quot; />` 개발자가에서 상속 하 여이 속성을 제거할 수는 또한는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>클래스 및 기본 설정 값을 `false`.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>        </xref:System.Web.UI.WebControls.WebParts.WebPartManager>       웹 파트 컨트롤 집합에는 클라이언트는 클라이언트의 일부 UI (사용자 인터페이스) 및 개인 설정 기능을 제공 하는 데 스크립팅을 사용 합니다. 클라이언트를 사용 하지 않도록 설정 스크립팅, 웹 파트 컨트롤은 여전히 작동 하지만 일부 기능은 사용할 수 없습니다. 다른 영역으로 컨트롤을 끌어다 놓을 수 있는 기능 (동사는 대신 컨트롤의 제목 표시줄에서 링크로 표시 됨) 하는 컨트롤의 제목 표시줄에 있는 드롭 다운 동사 메뉴를 렌더링 하는 기능과 더불어 비활성화 됩니다."
  syntax:
    content: public virtual bool EnableClientScript { get; set; }
    return:
      type: System.Boolean
      description: "클라이언트 스크립트 페이지에서 실행할 수 있는지 여부를 나타내는 부울 값입니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming
  id: EnableTheming
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: EnableTheming
  nameWithType: WebPartManager.EnableTheming
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "테마 사용 웹 페이지에서 사용 하도록 설정 되어 있는지를 나타내는 값을 가져옵니다."
  remarks: "<xref:System.Web.UI.WebControls.WebParts.WebPartManager>기본 재정의 <xref:System.Web.UI.Control.EnableTheming%2A>속성 값이 항상 반환 하는지 확인을 `true`.</xref:System.Web.UI.Control.EnableTheming%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> 웹 파트 컨트롤 집합에서는 웹 파트를 렌더링 하는 테마를 사용 하는 컨트롤의 자식 컨트롤 때문에 이렇게는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>를 구성 하는 웹 페이지의 사용자 인터페이스 (UI).</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 예를 들어 테마는 다양 한 영역을 렌더링 하는 데 및 다양 한 유형의 비롯 하 여 해당 영역에 있는 컨트롤 파트 컨트롤 (에서 상속 하는 컨트롤의 <xref:System.Web.UI.WebControls.WebParts.Part>클래스), 사용자 정의 컨트롤, ASP.NET 서버 컨트롤 및 사용자 지정 서버 컨트롤.</xref:System.Web.UI.WebControls.WebParts.Part>       설계 해야 항상 반환 값이 속성을 설정할 수 없습니다 재정의 EnableTheming 속성은 기본 속성에 따라 읽기/쓰기 속성으로 구현, 있지만 `true`합니다. 속성을 설정 하려고 하면는 <xref:System.NotSupportedException>예외가 throw 됩니다.</xref:System.NotSupportedException>"
  syntax:
    content: public override bool EnableTheming { get; set; }
    return:
      type: System.Boolean
      description: "테마를 사용할 수 있는지 여부를 나타내는 부울 값입니다. <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>모든 경우"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "속성 값을 설정 하려고 했습니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting
  id: EndWebPartConnecting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: EndWebPartConnecting()
  nameWithType: WebPartManager.EndWebPartConnecting()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "연결 하는 프로세스를 완료 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 를 다른 컨트롤로 제어 합니다."
  remarks: "EndWebPartConnecting 메서드에 연결 하는 프로세스를 완료 한 <xref:System.Web.UI.WebControls.WebParts.WebPart>다른 컨트롤에 컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> 그는는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A>       EndWebPartConnecting 메서드를 사용 하면 참조 하는 개인 설정 개체가 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A>유형이 기 때문에 대 한 연결을 형성 자체는 개인 설정 하는 필요한 속성은 수정할 수 있는.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> 다음 메서드를를 사용 하면는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>개체가 아닙니다 `null`, 호출의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>"
  syntax:
    content: public virtual void EndWebPartConnecting ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "참조 하는 컨트롤의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*>속성은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing
  id: EndWebPartEditing
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: EndWebPartEditing()
  nameWithType: WebPartManager.EndWebPartEditing()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "편집으로 인해 프로세스를 완료 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 제어 합니다."
  remarks: "EndWebPartEditing 메서드 편집 하는 프로세스를 완료 한 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> 그는는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A>       EndWebPartEditing 메서드를 사용 하면 참조 하는 개인 설정 개체가 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A>속성, 필요한 되는 것 이므로 편집 컨트롤에는 개인 설정 변경 해야 하는 프로세스입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> 다음 메서드를를 사용 하면는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>개체가 아닙니다 `null`되도록, 현재 선택 된 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤을 변경 하 고 마지막를 호출 하는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>"
  syntax:
    content: public virtual void EndWebPartEditing ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "참조 하는 컨트롤의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*>속성은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning
  id: ExportSensitiveDataWarning
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ExportSensitiveDataWarning
  nameWithType: WebPartManager.ExportSensitiveDataWarning
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "사용자가 중요 한 상태 데이터를 내보낼 때 표시 되는 경고 메시지의 텍스트를 가져오거나 설정 합니다.는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 제어 합니다."
  remarks: "사용자가 중요 한 상태 데이터를 내보낼 하려고 할 때는 <xref:System.Web.UI.WebControls.WebParts.WebPart>제어, 소스 코드의 중요 한 정보로 표시 된 멤버에서 가져온 데이터를 내보내고 중요 한 데이터를 내보내고 알려 고 내보내기 취소할 수를 제공 하는 메시지 상자에 사용자에 게 경고 메시지가 표시 됩니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 개발자가 설정 하 여 중요 한 특정 멤버의 데이터를 표시할 수는 `isSensitive` 의 매개 변수는 `[Personalizable]` 특성을 `true` 멤버입니다. 이 특성 및 매개 변수에 대 한 자세한 내용은 <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute>클래스</xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute> 를 참조 하십시오.      > [!IMPORTANT] > 권한이 없는 사용자가 잠재적으로 중요 한 데이터를 내보낼 수도 있습니다 웹 파트의 내보내기 기능을 사용 합니다. 이 위협 으로부터 보호 하는 방법에 대 한 세부 정보를 참조 하십시오. [보안 웹 파트 페이지](~/add/includes/ajax-current-ext-md.md)합니다.       기본 메시지는 사용자가 내보내기를 시도할 때마다 표시 됩니다. 그러나 ExportSensitiveDataWarning 속성에는 값을 할당 하 여 사용자 지정 경고 메시지를 제공할 수 있습니다."
  example:
  - "The following code example demonstrates the declarative use of the ExportSensitiveDataWarning property.  \n  \n The code for the following Web page uses a standard <xref:System.Web.UI.WebControls.BulletedList> control and places it in a zone. The control will be wrapped with a <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control at run time, which enables it to act as a true <xref:System.Web.UI.WebControls.WebParts.WebPart> control. To make the control exportable, an `ExportMode` attribute is added to the `<asp:bulletedlist>` element, and the attribute value is set to <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, which means that both sensitive and non-sensitive data can be exported. Note also that in the `<asp:webpartmanager>` element, the `ExportSensitiveDataWarning` attribute is assigned a custom value.  \n  \n Note that for the code example to work, there is a setting you must add in the Web.config file to enable exporting Web Parts description files. Ensure that you have a Web.config file in the same directory as the Web page for this code example. Within the `<system.web>` section, make sure there is a `<webParts>` element with an `enableExport` attribute set to `true`, as in the following markup.  \n  \n `<webParts enableExport=\"true\">`  \n  \n `...`  \n  \n `</webParts>`  \n  \n [!code-vb[WebParts_WebPartManager_ExportSensitiveData#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1033_1.aspx)]\n [!code-cs[WebParts_WebPartManager_ExportSensitiveData#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1033_1.aspx)]  \n  \n After you load the page in a browser, click the verbs menu (represented by a downward arrow) in the title bar of the control that contains the links. In the verbs menu, select **Export**, and notice that a message box appears with the custom warning. If you want to continue with the export, click **OK**, which will allow you to save a local copy of an XML description file with all the data about the control."
  syntax:
    content: public virtual string ExportSensitiveDataWarning { get; set; }
    return:
      type: System.String
      description: "경고 메시지를 포함 하는 문자열입니다. 기본 메시지에는.NET Framework에서 제공 되는 culture 별 값입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)
  id: ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ExportWebPart(WebPart,XmlWriter)
  nameWithType: WebPartManager.ExportWebPart(WebPart,XmlWriter)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(WebPart,XmlWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "서버 컨트롤에 대 한 상태 및 속성 데이터를 포함 하는 XML 설명 파일을 만듭니다."
  remarks: "다양 한 상태 및 속성 데이터를 조합 하는 ExportWebPart 메서드 `webPart` XML 파일에 있습니다. 데이터에는 해당 어셈블리, 상태 데이터 및 속성 데이터를 포함 하 여 컨트롤 자체에 대 한 정보가 포함 됩니다. 내보내기를 시작 하는 사용자 로컬 컴퓨터 또는 네트워크의 디스크에 XML 파일을 저장할 수 있습니다. 다른 사용자가 다음 description 파일 다른 페이지 또는 웹 사이트를 가져오고 수 상태 및 속성 데이터의 다른 인스턴스에 적용 `webPart`합니다. 따라서 사용자가 공유 하 고 서버 컨트롤에서 해당 설정을 다시 사용할 수에 대 한 빠르고 편리한 메커니즘을 제공 하며 모양과 내보낸 / 가져온 컨트롤의 동작을 제어 하는 방법을 개발자를 제공 합니다.       속성에 `webPart` 기본적으로 내보내지 않습니다. 내보낼 속성을 사용 하려면 표시 해야 사용 하 여는 `[Personalizable]` 소스 코드에서. 내보낼 수 있는 속성을 설정 하 여 중요 한 데이터를 포함 하는 것도 선택적으로 표시할 수 있습니다는 `isSensitive` 의 매개 변수는 `[Personalizable]` 특성을 `true`합니다. 기본적으로 `isSensitive` 은 `false`합니다. 개발자는 매개 변수 설정할 수 있습니다 `true` 중요 한 데이터 임을 나타냅니다.       사용할 수 있도록 `webPart` 를 내보낼 수는 개발자는 다음과 같이 설정 됩니다. 해당 <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>속성 값을 <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>(개인 및 중요 한 속성을 모두 포함), 또는 <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, 중요 한 속성을 제외한 모든 내보내기를.</xref:System.Web.UI.WebControls.WebParts.WebPartExportMode> </xref:System.Web.UI.WebControls.WebParts.WebPartExportMode> </xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>      > [!IMPORTANT] > 사용자가 컨트롤에서 데이터를 내보내려면 및 다른 컨트롤에 데이터를 가져올 수 있도록 몇 가지 보안 위험을 수반 합니다. 중요 한 데이터를 보호 하기 위해 위에서 설명한 방법을 사용 해야 하며 이러한 데이터를 모두 노출의 위험을 방지 하는 경우에 내보내기를 허용 하지는 마십시오 `webPart` 전혀 합니다. 웹 파트 보안 문제에 대 한 세부 정보를 참조 하십시오. [보안 웹 파트 페이지](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public virtual void ExportWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Xml.XmlWriter writer);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "데이터를 내보낼 컨트롤입니다."
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>내보낸된 데이터를 쓰는 `webPart` XML 설명 파일에.</xref:System.Xml.XmlWriter>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>writer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>webPart</code> is not contained in the collection of controls referenced in <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls*>.  \n  \n \\- or -  \n  \n The <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode*> property of <code>webPart</code> is set to a value of <xref href=\"System.Web.UI.WebControls.WebParts.WebPartExportMode\"></xref>, which means that export is disabled for <code>webPart</code>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Focus
  id: Focus
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Focus()
  nameWithType: WebPartManager.Focus()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Focus()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "포커스에 설정 하지 않도록 설정 하려면 재정의 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 없는 UI (사용자 인터페이스) 있기 때문에 제어 합니다."
  remarks: "포커스 메서드 재정의 기본 <xref:System.Web.UI.Control.Focus%2A?displayProperty=fullName>메서드를 호출자의 메서드를 호출 하는 경우 예외를 throw 합니다.</xref:System.Web.UI.Control.Focus%2A?displayProperty=fullName> 때문에 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>포커스를 자체에서 설정할 수 없도록 수에 UI 컨트롤과 사용자에 게 표시 되지 않습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  syntax:
    content: public override void Focus ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Focus*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "호출자는 UI 컨트롤에서 지원 되지 않는 포커스 메서드를 호출 하려고 시도 합니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  id: GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: GetConsumerConnectionPoints(WebPart)
  nameWithType: WebPartManager.GetConsumerConnectionPoints(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "컬렉션을 검색 <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> 개체는 서버에서 연결 지점으로 사용할 수 있는 제어 즉 웹 파트 연결 소비자 역할을 합니다."
  remarks: "웹 파트 연결에서 항상 정확히 두 개의 컨트롤의 데이터를 데이터 소비자 공급자 역할을 하나 포함 됩니다. 각 컨트롤에는 하나 이상의 정의 된 메서드는 연결 지점으로 있어야 합니다. 연결 지점은 소비자 컨트롤의 경우 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>개체입니다.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 소비자 연결 지점 검색은 필요한 단계는 웹 파트 연결을 설정 합니다.       소비자는 항상 하나 이상의 연결점을 대 한 연결을 설정할 수 있어야 합니다. GetConsumerConnectionPoints 메서드 소비자 컨트롤을 확인 하 고 모든 연결 지점의 컬렉션을 검색 합니다. 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 연결 요소가 없으면, 메서드가 빈 컬렉션을 반환 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates how to use the GetConsumerConnectionPoints method.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected, and an `<asp:webpartmanager>` element.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls and a custom interface.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see the topic [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The declarative markup for the Web page contains `Register` directives for both the user control and the custom controls. There is an `<asp:webpartmanager>` element, an `<asp:webpartzone>` element to contain the custom controls, and an `<asp:connectionszone>` element. Notice that in the `Page_Load` method, the code checks to see whether a connection already exists and, if not, defines a provider, a consumer, and their respective connection points, and then adds a new connection to the set of static connections referenced by the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> property. Note that the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection> object that is retrieved by using the GetConsumerConnectionPoints method is then passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> method to determine whether a connection between the two controls can be created.  \n  \n [!code-cs[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/csharp/02749d07-cefa-48e1-9ad7-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/visualbasic/02749d07-cefa-48e1-9ad7-_1.aspx)]  \n  \n The third part of the example is the source code for the controls. You can obtain this code, and instructions for compiling it, from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview.  \n  \n After you have loaded the Web page in a browser, click the **Display Mode** drop-down list control and select **Connect** to switch the page to connect mode. Connect mode uses the `<asp:connectionszone>` element to enable you to create connections between controls. In connect mode, click the downward arrow in the title bar of the **ZIP Code** control to activate its verbs menu, and then click **Connect**. After the connection user interface (UI) appears, notice that a connection has already been created by the code contained in the `Page_Load` method. If you return to this page in a later browser session, this static connection will already be established and will not need to be recreated each time the page loads."
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection GetConsumerConnectionPoints (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "연결에서 소비자로 사용 되는 서버 컨트롤입니다."
    return:
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection&quot;> </xref> 소비자의 모든 연결 지점이 들어 있는입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager(System.Web.UI.Page)
  id: GetCurrentWebPartManager(System.Web.UI.Page)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: GetCurrentWebPartManager(Page)
  nameWithType: WebPartManager.GetCurrentWebPartManager(Page)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager(Page)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "검색의 현재 인스턴스에 대 한 참조는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 페이지에 컨트롤입니다."
  remarks: "GetCurrentWebPartManager 메서드는 현재에 대 한 참조를 검색 하려는 상황에서 유용 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 이런 문제가 발생 하는 일반적인 시나리오는의 ID 개발 하는 동안 알 수 없는 사용자 지정 컨트롤을 작성 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>해당 페이지에 컨트롤 됩니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>      > [!NOTE] >의 인스턴스를 필요로 하지 않고 직접 호출할 수 있도록 the GetCurrentWebPartManager 메서드는 정적는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       와 같은 일부 컨트롤에서 웹 파트 컨트롤 집합 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤는 <xref:System.Web.UI.WebControls.WebParts.WebPart.WebPartManager%2A>현재에 대 한 참조를 검색할 수 있는 속성 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPart.WebPartManager%2A> </xref:System.Web.UI.WebControls.WebParts.WebPart> 따라서 이러한 컨트롤을 사용 하는 경우이 속성 대 한 참조를 사용 해야 합니다.       <xref:System.Web.UI.WebControls.WebParts.WebPartManager>제어 하 고, 가장 간단 하 고 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>ID를 사용 하 여 컨트롤</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 을 직접 참조 하는 가장 효율적인 되었기 웹 페이지 내에서 인라인 코드를 작성 하는 등</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 의 ID를 알고 있는 컨텍스트에서 코딩 하는 경우"
  example:
  - "The following code example demonstrates how to use the GetCurrentWebPartManager method. The example has two parts: a custom server control, and a Web page that hosts the control.  \n  \n The custom <xref:System.Web.UI.WebControls.Label> control uses the GetCurrentWebPartManager method to retrieve the ID of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control on the current page, and then displays the ID.  \n  \n [!code-cs[WebParts_WebPartManager_GetCurrentWebPartManager#2](~/add/codesnippet/csharp/42edcc7a-0f38-4926-86e7-_1.cs)]\n [!code-vb[WebParts_WebPartManager_GetCurrentWebPartManager#2](~/add/codesnippet/visualbasic/42edcc7a-0f38-4926-86e7-_1.vb)]  \n  \n The following code example provides the Web page that hosts the control in a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zone.  \n  \n [!code-cs[WebParts_WebPartManager_GetCurrentWebPartManager#1](~/add/codesnippet/csharp/42edcc7a-0f38-4926-86e7-_2.aspx)]\n [!code-vb[WebParts_WebPartManager_GetCurrentWebPartManager#1](~/add/codesnippet/visualbasic/42edcc7a-0f38-4926-86e7-_2.aspx)]  \n  \n After you load the page in a browser, notice that the ID of the current <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control is displayed within the custom <xref:System.Web.UI.WebControls.Label> control."
  syntax:
    content: public static System.Web.UI.WebControls.WebParts.WebPartManager GetCurrentWebPartManager (System.Web.UI.Page page);
    parameters:
    - id: page
      type: System.Web.UI.Page
      description: "인스턴스를 포함 하는 웹 페이지는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref>합니다."
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartManager
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 페이지에 컨트롤의 현재 인스턴스를 참조 하는 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>page</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle(System.Web.UI.WebControls.WebParts.WebPart)
  id: GetDisplayTitle(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: GetDisplayTitle(WebPart)
  nameWithType: WebPartManager.GetDisplayTitle(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "에 대 한 값을 포함 하는 문자열을 가져옵니다는 <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle*>속성은 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle*>"
  remarks: "계산 된 값을 가져옵니다는 <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A>속성에 대 한 `webPart`.</xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A> 개발자에 값을 할당 하지 않는 경우는 <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A>속성은 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤,이 메서드는 제목으로 표시할 값을 생성 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> 현재 영역 내에서 컨트롤의 시퀀스를 나타내는 숫자와 문자열에 숫자가 제목 없는 컨트롤에 대 한 계산 된 값으로 구성 됩니다."
  syntax:
    content: protected virtual string GetDisplayTitle (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "컨트롤의 메서드 <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle*>.</xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle*> 값 반환"
    return:
      type: System.String
      description: "계산된 된 값을 포함 하는 문자열 <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle*>에 대 한 <code> webPart </code>.</xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle*>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>webPart</code>이 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls*> 컬렉션입니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl(System.Web.UI.WebControls.WebParts.WebPart)
  id: GetExportUrl(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: GetExportUrl(WebPart)
  nameWithType: WebPartManager.GetExportUrl(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "상대 가상 경로 가져오고 내보내려면 사용자가 요청에 포함 된 쿼리 문자열을 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 제어 합니다."
  remarks: "GetExportUrl 메서드에 의해 반환 된 값은 서버에 제출 내보내기 요청을 구성 하는 추가 된 쿼리 문자열 값을 더한 컨트롤을 포함 하는 페이지의 서버 위치를 상대 가상 경로입니다. GetExportUrl 메서드 스크립트 악의적인 공격 으로부터 보호 하기 위해 전송 되도록 요청을 허용 하기 전에 문자열을 인코딩합니다.      > [!NOTE] > 웹 파트 응용 프로그램 보안에 대 한 자세한 내용은 참조 [보안 웹 파트 페이지](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public string GetExportUrl (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 하 되 고 내보내집니다."
    return:
      type: System.String
      description: "상대 가상 경로 쿼리를 포함 하는 문자열에는 구성 하는 컨트롤을 내보내기 요청을 문자열입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart(System.Web.UI.Control)
  id: GetGenericWebPart(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: GetGenericWebPart(Control)
  nameWithType: WebPartManager.GetGenericWebPart(Control)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "인스턴스에 대 한 참조를 가져옵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> 서버 컨트롤이 포함 된 컨트롤입니다."
  remarks: "일반적으로 개발자에 배치 하는 컨트롤의 두 가지 범주가 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>웹 파트 응용 프로그램에 참여: <xref:System.Web.UI.WebControls.WebParts.WebPart>에서 상속 되는 제어는 <xref:System.Web.UI.WebControls.WebParts.WebPart>기본 클래스 및 표준 ASP.NET 컨트롤, 사용자 지정 컨트롤 또는 사용자 정의 컨트롤 수 있는 기타 서버 컨트롤과.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 이러한 컨트롤 중 하나를 배치 하면는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>의 기능에 걸리는 영역을 한 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> A <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤에는이 기능이 기본적으로, 하지만 다른 종류의 서버 컨트롤 하지 않습니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 역할을 하도록 다른 서버 컨트롤을 사용 하도록 설정 하려면 <xref:System.Web.UI.WebControls.WebParts.WebPart>에 저장 될 때 제어는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>를 사용 하 여 영역, ASP.NET 래핑하는 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> 때문에 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>컨트롤에서 직접 상속 된 <xref:System.Web.UI.WebControls.WebParts.WebPart>클래스, 해당 자식 컨트롤에 제공 true 웹 파트 기능.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart>       런타임 시 종종 페이지 개발자에 대 한 참조를 얻으려고 경우가 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>영역에 서버 컨트롤 중 하나를 포함 하는 컨트롤입니다.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> GetGenericWebPart 메서드를 사용 하면에 대 한 참조를 검색 하는 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart>"
  example:
  - "The following code example demonstrates the use of the GetGenericWebPart method. The code example contains a <xref:System.Web.UI.WebControls.Calendar> control declared within a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zone. The `Button1_Click` method first prints the ID of the <xref:System.Web.UI.WebControls.Calendar> control to a label, and then uses the GetGenericWebPart method to retrieve a reference to the <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control that wraps the calendar. The ID of the <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control, and the ID of its child control (which is the <xref:System.Web.UI.WebControls.Calendar> control), are both printed to a second label.  \n  \n [!code-cs[WebParts_WebPartManager_GetGenericWebPart#1](~/add/codesnippet/csharp/d656242f-a1d2-490c-85d4-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_GetGenericWebPart#1](~/add/codesnippet/visualbasic/d656242f-a1d2-490c-85d4-_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.GenericWebPart GetGenericWebPart (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "서버 컨트롤에 존재 하는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 의 자식 컨트롤로 래핑되는 <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> 런타임 시."
    return:
      type: System.Web.UI.WebControls.WebParts.GenericWebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> 를 래핑하는 <code> control </code> 자식 컨트롤로 합니다. 메서드가 반환 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 경우 <code> control </code> 에 포함 되지 않은 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  id: GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: GetProviderConnectionPoints(WebPart)
  nameWithType: WebPartManager.GetProviderConnectionPoints(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "컬렉션을 검색 <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> 개체는 서버에서 연결 지점으로 사용할 수 있는 제어 즉 웹 파트 연결 공급자 역할을 합니다."
  remarks: "웹 파트 연결에서 항상 정확히 두 개의 컨트롤의 데이터를 데이터 소비자 공급자 역할을 하나 포함 됩니다. 각 컨트롤에는 하나 이상의 정의 된 메서드는 연결 지점으로 있어야 합니다. 연결 지점은 공급자 컨트롤의 경우는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>개체입니다.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       공급자에는 항상 하나 이상의 연결점을 대 한 연결을 설정할 수 있어야 합니다. GetProviderConnectionPoints 메서드는 공급자 컨트롤을 확인 하 고 모든 연결 지점의 컬렉션을 검색 합니다. 공급자 연결 지점 검색은 필요한 단계는 웹 파트 연결을 설정 합니다."
  example:
  - "The following code example demonstrates how to use the GetProviderConnectionPoints method.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected, and an `<asp:webpartmanager>` element.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls and a custom interface.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The declarative markup for the Web page contains `Register` directives for both the user control and the custom controls. There is an `<asp:webpartmanager>` element, an `<asp:webpartzone>` element to contain the custom controls, and an `<asp:connectionszone>` element. Notice that in the `Page_Load` method, the code checks to see whether a connection already exists and, if not, defines a provider, a consumer, and their respective connection points, and then adds a new connection to the set of static connections referenced by the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> property. Note that the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection> object that is retrieved by using the GetProviderConnectionPoints method is then passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> method to determine whether a connection between the two controls can be created.  \n  \n [!code-cs[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/csharp/7aa405f8-9f90-4b6f-8d66-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/visualbasic/7aa405f8-9f90-4b6f-8d66-_1.aspx)]  \n  \n The third part of the example is the source code for the controls. You can obtain this code, and instructions for compiling it, from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview.  \n  \n After you have loaded the Web page in a browser, click the **Display Mode** drop-down list control and select **Connect** to switch the page to connect mode. Connect mode uses the `<asp:connectionszone>` element to enable you to create connections between controls. In connect mode, click the downward arrow in the title bar of the **ZIP Code** control to activate its verbs menu, and then click **Connect**. After the connection user interface (UI) appears, notice that a connection has already been created by the code contained in the `Page_Load` method. If you return to this page in a later browser session, this static connection will already be established and will not need to be recreated each time the page loads."
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection GetProviderConnectionPoints (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "연결에서 공급자도 사용 되는 서버 컨트롤입니다."
    return:
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection&quot;> </xref> 공급자에서 모든 연결 지점이 들어 있는입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(System.Xml.XmlReader,System.String@)
  id: ImportWebPart(System.Xml.XmlReader,System.String@)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ImportWebPart(XmlReader,String)
  nameWithType: WebPartManager.ImportWebPart(XmlReader,String)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(XmlReader,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "에 대 한 상태 및 속성 데이터를 포함 하는 XML 설명 파일을 가져옵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤을 컨트롤에 데이터를 적용 합니다."
  remarks: "ImportWebPart 메서드 가져오는 데 사용 하 여 만든 XML 설명 파일은 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A>서버 컨트롤에 대 한 메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A> 가져온 경우 실제 서버 컨트롤은 컨트롤에 대 한 상태 및 속성 데이터를 포함 하는 설명 파일만 아닙니다. 이미 제어 및 description 파일에 참조 된 어셈블리 설명 파일을 가져오려면는 사용자가 서버에서 사용할 수 여야 합니다.       가져오기는 컨트롤을 사용 하려면를 추가 해야 하는 개발자는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>가져오기를 사용할지 페이지에 컨트롤.</xref:System.Web.UI.WebControls.WebParts.CatalogZone> 영역 내는 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>컨트롤을 추가 해야 합니다.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 이 컨트롤은 사용자가을 가져오는 설명 파일을 찾을 수 있는 파일 대화 상자.       사용자 설명 파일을 찾거나 가져오기를 시작한 후 ImportWebPart 메서드 설명 파일을 읽습니다. 오류가 없는 경우 서버 컨트롤은 내에서 카탈로그를 추가 어셈블리 및 제어 발견 되 면는 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>제어 및 다양 한 속성 및 상태 데이터 설명 파일에 지정 된 컨트롤에 적용 됩니다.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 다음 사용자 컨트롤을 선택 하 고 페이지에 추가할 수 있습니다.      > [!IMPORTANT] >와 같은 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A>메서드, ImportWebPart 메서드 보안 위험에 대 한 몇 가지 가능성이 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A> 웹 사이트에 데이터를 가져올 해야 하기 때문에 악의적인 사용자 가져온 설명 파일에 잘못 된 데이터 또는 짝수 스크립트 코드를 삽입 하려고 할 수 있습니다. 잘못 된 데이터 또는 데이터베이스를 페이지에 표시 될 수 또는 삽입 된 스크립트를 실행할 수 있습니다. Description 파일 및 이러한 위험을 방지 방법을 가져오기와 관련 된 잠재적 위험의 개요를 참조 하십시오. [보안 웹 파트 페이지](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.WebPart ImportWebPart (System.Xml.XmlReader reader, out string errorMessage);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>가져올 XML 설명 파일에서 상태 및 속성 데이터를 읽는.</xref:System.Xml.XmlReader>"
    - id: errorMessage
      type: System.String
      description: "A <xref:System.String>가져오는 동안 오류가 발생 하는 경우 사용자에 게 표시 됩니다.</xref:System.String>"
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> (또는 서버 컨트롤에서 래핑된는 <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> 로 취급는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>) 가져온된 XML 설명 파일에서 참조 하는 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "<code>reader</code> could not read the file.  \n  \n \\- or -  \n  \n <code>reader</code> needed to display an import error message but did not find one in the file.  \n  \n \\- or -  \n  \n <code>reader</code> reached the end of the file without finding the XML element that contains the exported data."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Internals
  id: Internals
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Internals
  nameWithType: WebPartManager.Internals
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Internals
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "에 대 한 참조는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManagerInternals&quot;> </xref> 결합 하 고에서 실제로 구현 하는 메서드 집합을 구분 하는 데 사용 되는 클래스는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 클래스 같지만 주로 컨트롤 개발자가 하는 데 유용 합니다."
  remarks: "내부 속성 집합으로 호출 하는 Api를 제공 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>확장성 사례에서 주로 사용 되는 메서드입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       이러한 내부 메서드를 사용 하도록 디자인 된 방법은 내부 속성을 통해 액세스 하는 데는 것입니다. 속성을 보호 하기 때문에 액세스를 호출할 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> <xref:System.Web.UI.WebControls.WebParts.WebPartManager>클래스</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 에서 상속 하 여 클래스</xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> 의 인스턴스 내에서 메서드      > [!NOTE] >에 IntelliSense에서이 속성은 [!INCLUDE[vsprvsext](~/add/includes/ajax-current-ext-md.md)]합니다. 그러나 파생에서 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>클래스, 속성 및 해당 다양 한 멤버에 액세스할 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  syntax:
    content: protected System.Web.UI.WebControls.WebParts.WebPartManagerInternals Internals { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartManagerInternals
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManagerInternals&quot;> </xref>는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 구분에 포함 되는 다양 한 메서드를 참조할 수는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManagerInternals&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Internals*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Web.UI.WebControls.WebParts.WebPart)
  id: IsAuthorized(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: IsAuthorized(WebPart)
  nameWithType: WebPartManager.IsAuthorized(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "컨트롤이 페이지에 추가할 수 있는 권한이 있는지 확인 하는 초기 단계를 수행 합니다."
  remarks: "IsAuthorized 메서드는에 대 한 권한 부여를 확인 하도록 설정 하는 웹 파트 컨트롤에서 호출 된 초기 메서드에서 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> 허용 `webPart` 를 매개 변수로 궁극적으로 컨트롤이 페이지에 추가할지를 결정 하는 프로세스를 시작 합니다. 제공 된 컨트롤의 허용 되는지 여부를 확인 해야 할 때 사용자 코드에서이 메서드를 직접 호출 합니다.       컨트롤에서 상속 되는지 여부를 결정 하는 초기 작업을 수행이 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPart>아니거나 클래스는 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>제어 하 고 그렇다면 어떤 유형의 자식 제어 포함.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> 권한 부여 작업을 완료 하려면 호출는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29>메서드를 오버 로드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29>"
  example:
  - "The following code example demonstrates how to call the IsAuthorized method from your code to determine whether a control is authorized to be added to a page.  \n  \n The code example has three parts:  \n  \n-   A custom <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control that overrides the IsAuthorized method.  \n  \n-   A Web page that creates a filter for a <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  \n  \n-   An explanation of how to run the code example.  \n  \n This code example uses a custom <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control that overrides the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload method to provide custom handling of the <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property. This control checks for a property value of `admin` and, if the value is present, authorizes the control. If a control has a different value, it is not authorized; controls without the property value are authorized as well, as they are presumed not to be part of the filtering scenario.  \n  \n For this code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses the dynamic compile method. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_IsAuthorized#2](~/add/codesnippet/csharp/9c13e351-e761-4514-8860-_1.cs)]\n [!code-vb[WebParts_WebPartManager_IsAuthorized#2](~/add/codesnippet/visualbasic/9c13e351-e761-4514-8860-_1.vb)]  \n  \n The second part of the code example creates a filter that can potentially exclude a control. The following Web page contains three ASP.NET server controls in an `<asp:webpartzone>` element. Notice that the first and second controls have their <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> properties set to different values, and the third does not assign the property. This authorization value can be checked at run time, and the control can be added to the page if the filter matches criteria set by the developer. Notice also that in the `Page_Load` method, the code calls the IsAuthorized method to determine whether each of the controls is authorized, and if so, it sets each control's <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> property.  \n  \n [!code-cs[WebParts_WebPartManager_IsAuthorized#1](~/add/codesnippet/csharp/9c13e351-e761-4514-8860-_2.aspx)]\n [!code-vb[WebParts_WebPartManager_IsAuthorized#1](~/add/codesnippet/visualbasic/9c13e351-e761-4514-8860-_2.aspx)]  \n  \n Note that for the code example to work, you must add a setting in the Web.config file to enable exporting Web Parts description files. Ensure that you have a Web.config file in the same directory as the Web page for this code example. Within the `<system.web>` section, make sure there is a `<webParts>` element with an `enableExport` attribute set to `true`, as in the following markup.  \n  \n `<webParts enableExport=\"true\">`  \n  \n `...`  \n  \n `</webParts>`  \n  \n After you load the page in a browser, note that the first control is displayed, because it matches the criteria in the overridden method. The second control is not added to the page, because it is excluded by the filter. The third control is also added, because it does not have its <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property set. Notice that if you click the verbs menu icon in the title bar of either control, they can both be exported because their respective <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> property values were assigned."
  syntax:
    content: public bool IsAuthorized (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 권한을 확인할 다른 서버 컨트롤입니다."
    return:
      type: System.Boolean
      description: "나타내는 부울 값 여부 <code> webPart </code> 페이지에 추가할 수 있습니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Type,System.String,System.String,System.Boolean)
  id: IsAuthorized(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: IsAuthorized(Type,String,String,Boolean)
  nameWithType: WebPartManager.IsAuthorized(Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(Type,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "컨트롤이 페이지에 추가할 수 있는 권한이 있는지 확인 하는 마지막 단계를 수행 합니다."
  remarks: "IsAuthorized 오버 로드 메서드가 컨트롤이 페이지에 추가할 수 있는 권한이 있는지 확인 하는 마지막 단계를 수행 합니다. 메서드를 사용 하면 `type` 유효한 형식이 고 `path` 사용자 정의 컨트롤 경우에 값이 있습니다. 중요 한 호출 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A>"
  example:
  - "The following code example demonstrates how to override the IsAuthorized method to determine whether a control is authorized to be added to a page.  \n  \n The first step is to create a filter that can potentially exclude a control. The following Web page contains three ASP.NET server controls in an `<asp:webpartzone>` element. Notice that the first and second controls have their <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> properties set to different values, and the third does not assign the property. This authorization value can be checked at run time, and the control can be added to the page if the filter matches criteria set by the developer.  \n  \n [!code-cs[WebParts_WebPartManager_IsAuthorized#1](~/add/codesnippet/csharp/c3cfcde3-abf1-45f3-ace8-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_IsAuthorized#1](~/add/codesnippet/visualbasic/c3cfcde3-abf1-45f3-ace8-_1.aspx)]  \n  \n The second step is to override the IsAuthorized method, and create custom handling for authorization filters. Note that the code first checks whether the property has a value, so that any control that does not assign the <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property will be added automatically. If a control has a filter, the code returns `true` only if the filter value is equal to `admin`. This demonstrates a simple mechanism you can use for displaying certain controls to certain users, depending on their role. While a full example using roles is beyond the scope of this topic, you could use the same logic as the overridden method in this code example, except that you could check whether the current user is in a role that matches the authorization filter value, and then add the control only for that user. This would enable you to create pages where some users would see all the controls, and other users would see only selected controls. This is how the logic that checks the filter might look if you used roles:  \n  \n [Visual Basic]  \n  \n```  \nIf Roles.IsUserInRole(Page.User.Identity.Name, authorizationFilter) Then  \n  return True  \nElse  \n  return False  \nEnd If  \n```  \n  \n [C#]  \n  \n```  \nif(Roles.IsUserInRole(Page.User.Identity.Name, authorizationFilter))  \n    return true;  \nelse  \n    return false;  \n```  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses the dynamic compile method. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_IsAuthorized#2](~/add/codesnippet/csharp/c3cfcde3-abf1-45f3-ace8-_2.cs)]\n [!code-vb[WebParts_WebPartManager_IsAuthorized#2](~/add/codesnippet/visualbasic/c3cfcde3-abf1-45f3-ace8-_2.vb)]  \n  \n After you load the page in a browser, note that the first control is displayed, because it matches the criteria in the overridden method. The second control is not added to the page, because its filter value is excluded. The third control is added, because it does not have its <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property set. If you change the property value on the second control to match that of the first control, and then run the page again, the second control is added as well."
  syntax:
    content: public virtual bool IsAuthorized (Type type, string path, string authorizationFilter, bool isShared);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>권한을 확인할 컨트롤의.</xref:System.Type>"
    - id: path
      type: System.String
      description: "컨트롤이 사용자 정의 컨트롤 경우 권한이 부여 될 컨트롤에 대 한 소스 파일에 응용 프로그램 상대 경로입니다."
    - id: authorizationFilter
      type: System.String
      description: "에 할당 하는 임의의 문자열 값의 <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter*>속성은 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤을 페이지에는 컨트롤을 추가할 수 인지 여부를 확인 하는 데 사용 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter*>"
    - id: isShared
      type: System.Boolean
      description: "권한 부여를 위해 확인할은 응용 프로그램의 여러 또는 모든 사용자에 게 표시 되었는지 공유 컨트롤 인지를 나타내는 및 해당 <xref:System.Web.UI.WebControls.WebParts.WebPart.IsShared*>속성 값으로 설정 됩니다 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Web.UI.WebControls.WebParts.WebPart.IsShared*>"
    return:
      type: System.Boolean
      description: "컨트롤이 페이지에 추가할 수 있는 권한이 있는지 여부를 나타내는 부울 값입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>type</code> is a user control, and <code>path</code> is either <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\").  \n  \n \\- or -  \n  \n <code>type</code> is not a user control, and <code>path</code> has a value assigned to it."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty
  id: IsCustomPersonalizationStateDirty
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: IsCustomPersonalizationStateDirty
  nameWithType: WebPartManager.IsCustomPersonalizationStateDirty
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "에 의해 제어 되는 페이지 수준 개인 설정 세부 정보에 영향을 주는 개인 설정 변경 사항이 있는지 여부를 나타내는 값을 가져옵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 제어 합니다."
  remarks: "<xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 속성을 사용 IsCustomPersonalizationStateDirty 내부적으로 관리 하는 데이터가 변경 된 페이지 수준 개인 설정의 여부를 추적 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 개인 설정 데이터가 변경 되는 사용자가 추가 또는 제거 등 페이지 수준에서 다양 한 개인 설정 동작을 수행할 때 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤, 연결 또는 컨트롤 및 기타 작업을 이동 하 여 페이지의 레이아웃을 변경 하는 컨트롤 연결 끊기.</xref:System.Web.UI.WebControls.WebParts.WebPart>      > [!NOTE] > 사용자가 수행할 수도 제어 수준에서 특정 컨트롤에 개인 설정 변경 내용을 확인 하는 개인 설정 및 변경 내용이 해당 컨트롤에만 적용 합니다. 예제는 컨트롤을 편집 하 고 제목 텍스트 또는 해당 배경색 변경 게 됩니다. 제어 수준 개인 설정 하 여 추적 된 페이지 수준 개인 설정 데이터에는 영향을 주지는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 IsCustomPersonalizationStateDirty 속성 값이를 변경 되지 않으므로 `true` 제어 수준 개인 설정 발생할 때.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       하지만 메서드가 보호 되 고, 호출자가 직접 액세스할 수 없습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A>속성 호출자가 직접 액세스할 수 있으며이 속성의 값을 반환 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A>"
  syntax:
    content: protected virtual bool IsCustomPersonalizationStateDirty { get; }
    return:
      type: System.Boolean
      description: "개인 설정 변경 사항이 있는지 여부를 나타내는 부울 값입니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState(System.Object)
  id: LoadControlState(System.Object)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: LoadControlState(Object)
  nameWithType: WebPartManager.LoadControlState(Object)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "로드 컨트롤 상태 데이터를 저장 한 이전 페이지 요청에서 하 고 후속 요청에 복원 해야 합니다."
  remarks: "메서드는 페이지의 게시할을 유지 해야 하는 속성 데이터를 복원 하는 데 도움이 됩니다. LoadControlState 경우에는 <xref:System.Web.UI.Control.EnableViewState%2A>속성이 `false`.</xref:System.Web.UI.Control.EnableViewState%2A>"
  syntax:
    content: protected override void LoadControlState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "유지 된 상태 데이터를 로드할 수를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>savedState</code>유효 하지 않거나 <xref:System.Web.UI.PageStatePersister.ControlState*>합니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  id: LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: LoadCustomPersonalizationState(PersonalizationDictionary)
  nameWithType: WebPartManager.LoadCustomPersonalizationState(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(PersonalizationDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "에 전달 된 사용자 지정 개인 설정 데이터가 저장 되는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 초기화 프로세스 동안 나중에 사용할 개인 설정 개체에 의해 제어 됩니다."
  remarks: "형식으로 저장 된 상태 데이터를 제공 하는 LoadCustomPersonalizationState 메서드는 <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary>개체입니다.</xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> 이 데이터는 웹 파트 컨트롤에 개인 설정 데이터를 로드 하 고 다른 초기화 작업을 수행 하기에 결국 사용 됩니다.      > [!NOTE] >이 메서드는 때 시작 되는 일련의 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState%2A>메서드를 처음 연결 된 요청 <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization>개인 설정 데이터를 제공 하는 개체는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState%2A>       사용자 코드에서 직접이 메서드를 호출할 수 없습니다. 그러나 직접 호출할 수, 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Load%2A>메서드는 자체 LoadCustomPersonalizationState 메서드를 호출 하 고 개인 설정 데이터를 반환 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Load%2A>"
  syntax:
    content: protected virtual void LoadCustomPersonalizationState (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);
    parameters:
    - id: state
      type: System.Web.UI.WebControls.WebParts.PersonalizationDictionary
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.PersonalizationDictionary&quot;> </xref> 로드 되도록 상태 데이터를 포함 하는 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet
  id: MediumPermissionSet
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: MediumPermissionSet
  nameWithType: WebPartManager.MediumPermissionSet
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "가져옵니다는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 만 사용할 수 있는 개체 <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref> 권한 및 <xref href=&quot;System.Web.AspNetHostingPermissionLevel&quot;> </xref> 권한."
  remarks: "<xref:System.Security.PermissionSet>형식 역직렬화에 가져오는 동안이 속성에서 반환 되는 개체를 사용 합니다.</xref:System.Security.PermissionSet>"
  syntax:
    content: protected virtual System.Security.PermissionSet MediumPermissionSet { get; }
    return:
      type: System.Security.PermissionSet
      description: "A <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 만 사용할 수 있는 개체 <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref> 권한 및 <xref href=&quot;System.Web.AspNetHostingPermissionLevel&quot;> </xref> 권한."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet
  id: MinimalPermissionSet
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: MinimalPermissionSet
  nameWithType: WebPartManager.MinimalPermissionSet
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "가져옵니다는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 만 사용할 수 있는 개체 <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref> 권한 및 <xref href=&quot;System.Web.AspNetHostingPermissionLevel&quot;> </xref> 권한."
  remarks: "<xref:System.Security.PermissionSet>형식 역직렬화 점을 제외 하 고 모든 항목에 대해 가져오는 동안이 속성에서 반환 하는 개체를 사용 합니다.</xref:System.Security.PermissionSet>"
  syntax:
    content: protected virtual System.Security.PermissionSet MinimalPermissionSet { get; }
    return:
      type: System.Security.PermissionSet
      description: "가져옵니다는 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 만 사용할 수 있는 개체 <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref> 권한 및 <xref href=&quot;System.Web.AspNetHostingPermissionLevel&quot;> </xref> 권한."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  id: MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: MoveWebPart(WebPart,WebPartZoneBase,Int32)
  nameWithType: WebPartManager.MoveWebPart(WebPart,WebPartZoneBase,Int32)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(WebPart,WebPartZoneBase,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "이동 된 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 하나에서 서버 컨트롤 또는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 영역 간에 또는 동일한 영역 내에서 새 위치로 합니다."
  remarks: "<xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 MoveWebPart 메서드를 사용 하 여 이동 하려면 `webPart` 같은 영역에서 또는 다른 영역에 새 위치를.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 코드에서 직접이 메서드를 호출할 수 및 다양 한 옵션을 사용 하 여 웹 파트 사용자 인터페이스 (UI)에서 새 위치로 컨트롤을 이동 하면 호출 됩니다.       다양 한 조건 충족 해야 `webPart` 이동할 수 있습니다 및 이들 중 대부분은이 항목의 예외 섹션에 나열 된 항목으로 표시 됩니다. 경우 `webPart` 에 포함 되지 않은 한 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>영역으로 시작 영역으로 이동할 수 없습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       이동 하는 다음과 같은 일련의 동작을 발생 조건을 만족 한 후에 `webPart`: 1입니다.  <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A>발생 시키는 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A>      2.  `webPart`(필요한 경우) 현재 영역에서 제거 되 고 새 영역이 나 현재 영역 내의 새 위치에 추가 합니다.      3.  <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A>발생 시키는 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A>      4.  `zoneIndex` 의 모든 <xref:System.Web.UI.WebControls.WebParts.WebPart>원점과 대상 영역에는 제어 이동된 된 컨트롤을 반영 하도록 다시 설정 됩니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates how to call the MoveWebPart method directly from code to move a <xref:System.Web.UI.WebControls.WebParts.WebPart> control from one zone to another.  \n  \n The code example has three parts:  \n  \n-   A user control for changing display modes.  \n  \n-   A Web page to host the controls.  \n  \n-   An explanation of how to run the code example.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The second part of the example is a Web page that contains two zones, each of which contains two server controls. When a user clicks the **Move WebPart** button on the page, the code in the `Button1_Click` method moves a control from the first zone to a new position in the second zone. Notice that the code first must call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A> method to retrieve the <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> object that wraps the `list1` control. This is required because the first parameter of the MoveWebPart method requires a <xref:System.Web.UI.WebControls.WebParts.WebPart> control, whereas `list1` is an ASP.NET server control.  \n  \n [!code-cs[WebParts_WebPartManager_MoveWebPart#1](~/add/codesnippet/csharp/49caf3f6-e63d-4133-bdf2-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_MoveWebPart#1](~/add/codesnippet/visualbasic/49caf3f6-e63d-4133-bdf2-_1.aspx)]  \n  \n After the page loads, click the **Move WebPart** button, and note that the control that contains the links moves into the middle position in the second zone. This movement of the control is accomplished programmatically by calling the MoveWebPart method. You can also use the **Display Mode** drop-down list control to switch the page to design mode, and in design mode, you can drag the controls to different zones or different positions within their zones. The MoveWebPart method is also called by the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control to handle such user-initiated moves."
  syntax:
    content: public virtual void MoveWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int zoneIndex);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 기타 서버 컨트롤을 이동 합니다."
    - id: zone
      type: System.Web.UI.WebControls.WebParts.WebPartZoneBase
      description: "대상 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 를 `webPart` 를 이동 합니다."
    - id: zoneIndex
      type: System.Int32
      description: "인덱스를 나타내는 정수 `webPart` 내의 다른 컨트롤에 상대적인 `zone`합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>webPart</code> is not contained in the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls*> collection of the <xref href=\"System.Web.UI.WebControls.WebParts.WebPartManager\"></xref> control.  \n  \n \\- or -  \n  \n <code>zone</code> is not contained in the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones*> collection of the <xref href=\"System.Web.UI.WebControls.WebParts.WebPartManager\"></xref> control.  \n  \n \\- or -  \n  \n The zone referenced by the <code>webPart</code> control's <xref:System.Web.UI.WebControls.WebParts.WebPart.Zone*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, which means that <code>webPart</code> is not currently contained in a zone."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>or <code>zone</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>zoneIndex</code>가&0; 보다 작습니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)
  id: OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnAuthorizeWebPart(WebPartAuthorizationEventArgs)
  nameWithType: WebPartManager.OnAuthorizeWebPart(WebPartAuthorizationEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(WebPartAuthorizationEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart&quot;> </xref> 이벤트 있는 경우 이벤트에 대 한 처리기를 호출 합니다."
  remarks: "OnAuthorizeWebPart 메서드에 의해 호출 됩니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤이 페이지에 추가할 수 있는 인증에 대 한 확인 중인.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> 발생 OnAuthorizeWebPart 메서드를 호출 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>이벤트, 이벤트에 대 한 처리기 메서드인 경우 처리기를 호출 하 고.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>       권한 확인 프로세스 <xref:System.Web.UI.WebControls.WebParts.WebPart>제어는 중요 한 웹 파트 기능.</xref:System.Web.UI.WebControls.WebParts.WebPart> 모든 <xref:System.Web.UI.WebControls.WebParts.WebPart>또는 서버 컨트롤에 의해 영역에 추가 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 컨트롤을 추가할 수 있는지 여부를 결정 하는 권한 부여 프로세스를 거칩니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPart> 기본적으로 웹 파트 컨트롤 집합에는 컨트롤 영역에 추가 되지 않도록 방지 하기 위해 필터링 조건을 제공 하지 않습니다. 하지만 컨트롤 집합에서는 개발자가 자신의 필터링 조건을 만드는 데 필요한 메커니즘을 제공 합니다. 이러한 메커니즘을 사용 하 여 사용자 지정 필터링 시나리오를 만들 수 있습니다. 예를 들어 페이지가 렌더링 되 고 사용자 역할에 사용자가을 하는 경우 해당 컨트롤이 추가 되지 특정 컨트롤 영역에 추가 관리자 역할에 사용자가을 하는 경우 되도록 필터를 만들 수 있습니다.       권한 부여 프로세스 중 컨트롤을 필터링 하기 위한 메커니즘은는 <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>속성 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤은 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>및 OnAuthorizeWebPart 메서드 및 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>이벤트에는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>       필터링 시나리오를 만들려면는 기본적으로 두 가지 작업이 있습니다. 에 문자열을 할당 하는 먼저는 <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>각 속성 <xref:System.Web.UI.WebControls.WebParts.WebPart>필터링 할 컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> 이러한 문자열 값 임의적이 될 수 있지만 기준으로 필터링 할 조건이 포함 해야 합니다. 예를 들어 지정 된 컨트롤이 필요한 경우 사용자가 페이지에 추가할 경우에만 관리자가 보고 한 다음의 문자열 값을 할당할 수 있습니다 `admin` 속성에 있습니다. 다음 ASP.NET 역할 기능을 사용 하 여 하 고 사이트의 모든 사용자가 관리자, 관리자 및 사용자 등의 다양 한 역할에 추가할 수 없습니다. 필터링 코드 페이지가 로드 하는 경우 사용자 역할을 확인를 검사 중인에 권한 부여 필터 값과 비교 하 고 관리자 역할에 사용자가 예를 들면 고 컨트롤의 경우 <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>값을 `admin`, 컨트롤을 추가할 수 없습니다.</xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>       필터링 시나리오를 만드는 두 번째 단계 검사 하는 코드를 작성 하는 것은 <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>속성 값에 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤과 해당 영역에 추가 되기 전에 각 컨트롤 허용 되는지 여부를 확인 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> 필터링이 코드의 배치 위치는 두 가지 옵션이 있습니다. 첫 번째 옵션 페이지 개발자에 대 한 기본 옵션이입니다. 처리 하는 메서드를 만들 수는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>이벤트 코드 분리 파일 또는 웹 페이지 서버 스크립트 코드에서 직접.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> 메서드를 추가 하 여 이벤트와 연결할는 `OnAuthorizeWebPart` 특성을 태그에 대 한는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>다음 샘플 태그 코드에 표시 된 대로 페이지에서 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>      ```   <asp:webpartmanager id=&quot;manager1&quot; runat=&quot;server&quot;       OnAuthorizeWebPart=&quot;manager1_AuthorizeWebPart&quot; />   ```각 확인은 작업을 수행 하 여 사용자 지정 메서드는이 <xref:System.Web.UI.WebControls.WebParts.WebPart>필터링 조건에 대 한 제어 하 고 결과에 따라에 부울 값을 할당 하는 다음을 <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs.IsAuthorized%2A>속성의는 <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs>개체를 나타내는 여부를 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤을 추가할 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs> </xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs.IsAuthorized%2A> </xref:System.Web.UI.WebControls.WebParts.WebPart> &quot;예&quot; 섹션의 코드에는이 작업을 수행 하는 방법을 보여 줍니다.       상속 하는 어디에 배치할지 필터링 코드에 대 한 두 번째 옵션의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>클래스 하 고 필터 조건을 확인 하는 메서드를 재정의 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 이 수행 하기 위해 재정의할 수는 두 가지 방법에서 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=fullName>OnAuthorizeWebPart 메서드 또는.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=fullName> 두 방법 중 하나는 사용 되지만, 대부분의 경우에서 것이 재정의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>메서드를 제공 하므로 전체 권한 부여 프로세스를 통해 프로그래밍 방식 제어를 강화 OnAuthorizeWebPart 메서드는 이벤트를 올리고 처리기에 대 한 확인 하는 하나의 특정 작업을 수행 하는 반면.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> 사용자 지정의 코드 예제를 보려면 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>재정의 하는 클래스는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>메서드를 참조는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=fullName>메서드의 오버 로드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example demonstrates how to set a custom event handler for the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> event, so that the handler can provide custom filtering code for the OnAuthorizeWebPart method. This example would be a typical way for a page developer to provide a filtering scenario and authorization of <xref:System.Web.UI.WebControls.WebParts.WebPart> controls to be added to a page.  \n  \n In the Web page, notice that the `<asp:webpartmanager>` element has the `OnAuthorizeWebPart` attribute with the name of the event handler assigned to it. The method checks whether the controls on the page have their respective <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property values set to `admin` and, if so, returns `true`, which means that they will be authorized and added to the page.  \n  \n> [!NOTE]\n>  Note that controls that do not have any value assigned to the <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property are added as well, because they are assumed not to be part of a filtering scenario. This would be a common approach in a filtering scenario: some controls would be filtered, and others would not be, because they are presumed to be available for all users.  \n  \n [!code-vb[WebParts_WebPartManager_AuthorizeWebPart#1](~/add/codesnippet/visualbasic/fb74240d-1119-4128-abbc-_1.aspx)]\n [!code-cs[WebParts_WebPartManager_AuthorizeWebPart#1](~/add/codesnippet/csharp/fb74240d-1119-4128-abbc-_1.aspx)]  \n  \n Because setting up users in roles is beyond the scope of this topic, this code example does not check user roles in the filtering. However, the scenario of filtering controls according to user roles is likely to be one of the most common uses of this filtering feature. If you have roles on your site, and you want to check user roles in this method to filter controls, the method would resemble the following code block (versus the simpler approach in the preceding code example, which does not use roles).  \n  \n [Visual Basic]  \n  \n```  \nProtected Sub WebPartManager1_AuthorizeWebPart(ByVal sender _  \n  As Object, ByVal e As WebPartAuthorizationEventArgs)  \n  \n  If String.IsNullOrEmpty(e.AuthorizationFilter) Then  \n    If Roles.IsUserInRole(Page.User.Identity.Name, _  \n      e.AuthorizationFilter) Then  \n  \n      e.IsAuthorized = True  \n    Else  \n      e.IsAuthorized = False  \n    End If  \n  End If  \n  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void mgr1_AuthorizeWebPart(object sender,   \n  WebPartAuthorizationEventArgs e)  \n{  \n  if (!String.IsNullOrEmpty(e.AuthorizationFilter))  \n  {  \n    if(Roles.IsUserInRole(Page.User.Identity.Name, e.authorizationFilter))  \n      e.IsAuthorized = true;  \n    else  \n      e.IsAuthorized = false;  \n  }  \n}  \n```"
  syntax:
    content: protected virtual void OnAuthorizeWebPart (System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)
  id: OnConnectionsActivated(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnConnectionsActivated(EventArgs)
  nameWithType: WebPartManager.OnConnectionsActivated(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated&quot;> </xref> 표시 되는 페이지와 해당 컨트롤에 로드 되 면 데이터를 공유 하려면 페이지에서 연결이 활성화 된 이벤트입니다."
  remarks: "OnConnectionsActivated 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>페이지 로드 프로세스를 완료 된 후에 이벤트입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> 메서드는 이벤트에 대 한 처리기를 추가 하는 방법을 제공 합니다.       페이지 개발자가 추가 하 여 이벤트에 대 한 사용자 지정 처리기를 추가할 수는 `OnConnectionsActivated` 특성을 `<asp:webpartmanager>` 페이지에서 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: protected virtual void OnConnectionsActivated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>이벤트 데이터를 포함 하는.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)
  id: OnConnectionsActivating(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnConnectionsActivating(EventArgs)
  nameWithType: WebPartManager.OnConnectionsActivating(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생 된 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating&quot;> </xref> 페이지와 해당 컨트롤이 로드 및 연결을 활성화 하는 과정을 시작할 수 있음을 나타내는 이벤트를 합니다."
  remarks: "OnConnectionsActivating 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating>개발자에 게 연결을 활성화 하는 과정을 프로그래밍 방식으로 사용자 지정 하기 위한 메커니즘을 제공 하는 이벤트입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating>       페이지 개발자가 추가 하 여 이벤트에 대 한 사용자 지정 처리기를 추가할 수는 `OnConnectionsActivating` 특성을 `<asp:webpartmanager>` 페이지에서 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: protected virtual void OnConnectionsActivating (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>이벤트 데이터를 포함 하는.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)
  id: OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnDisplayModeChanged(WebPartDisplayModeEventArgs)
  nameWithType: WebPartManager.OnDisplayModeChanged(WebPartDisplayModeEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(WebPartDisplayModeEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged&quot;> </xref> 임을 나타내는 이벤트는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 컨트롤이 웹 페이지에서 다른 특정 디스플레이 모드 전환 하는 과정을 완료 합니다."
  remarks: "OnDisplayModeChanged 메서드 바탕에만 발생 시킵니다 형성는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged>"
  syntax:
    content: protected virtual void OnDisplayModeChanged (System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs&quot;> </xref> 변경된 된 디스플레이 모드와 관련 된 이벤트 데이터를 포함 하 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)
  id: OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnDisplayModeChanging(WebPartDisplayModeCancelEventArgs)
  nameWithType: WebPartManager.OnDisplayModeChanging(WebPartDisplayModeCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(WebPartDisplayModeCancelEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생 시킵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging&quot;> </xref> 임을 나타내는 이벤트는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 제어 하는 웹 페이지에서 다른 특정 디스플레이 모드 전환 중입니다."
  remarks: "OnDisplayModeChanging 메서드 바탕에만 발생 시킵니다 형성는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging>"
  syntax:
    content: protected virtual void OnDisplayModeChanging (System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs
      description: "<xref:System.EventArgs>변경 디스플레이 모드와 관련 된 이벤트 데이터가 들어 있는.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: WebPartManager.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생 시킵니다는 <xref href=&quot;System.Web.UI.Control.Init&quot;> </xref> 첫 번째 이벤트는 이벤트에는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 수명 주기를 제어 합니다."
  remarks: "OnInit 메서드를 발생 시키는 기본 메서드를 호출 하는 <xref:System.Web.UI.Control.Init>컨트롤을 선택한 다음의 인스턴스 하나만 있는지 확인 하는 등 몇 가지 준비 단계를 수행 하는 이벤트는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>, 페이지에서 제어 하 고 개인 설정 데이터를 로드 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.Control.Init>"
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>이벤트 데이터를 포함 하는.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnInit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "다른 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 페이지에 컨트롤"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender(System.EventArgs)
  id: OnPreRender(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnPreRender(EventArgs)
  nameWithType: WebPartManager.OnPreRender(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생는 <xref href=&quot;System.Web.UI.Control.PreRender&quot;> </xref> 이벤트를 발생 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 컨트롤이 웹 페이지에 렌더링 됩니다."
  remarks: "OnPreRender 메서드를 발생 시키는 기본 메서드를 호출 하는 <xref:System.Web.UI.Control.PreRender>컨트롤을 선택한 다음 레지스터 이벤트 웹 파트를 포함 하는 페이지에 필요한 여러 가지 클라이언트 스크립트를 제어 합니다.</xref:System.Web.UI.Control.PreRender>"
  syntax:
    content: protected override void OnPreRender (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>이벤트 데이터를 포함 하는.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  id: OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnSelectedWebPartChanged(WebPartEventArgs)
  nameWithType: WebPartManager.OnSelectedWebPartChanged(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(WebPartEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged&quot;> </xref> 이벤트를 발생 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 제어 하거나 새로 선택 하지 않았거나 해당 선택 항목 선택을 취소 합니다."
  remarks: "OnSelectedWebPartChanged 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged>이벤트는 일반적으로 지점 개발자 사용자 인터페이스 (UI)의 모양을 변경 해야 할 수는 위치를.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged> 예를 들어, 새 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤을 선택 하면 웹 파트 컨트롤 설정 변경 내용을 새로 선택 된 컨트롤의 렌더링.</xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤의 선택이 취소 후 렌더링 정상적으로 반환 됩니다.       사용자가 특정을 선택한 후 <xref:System.Web.UI.WebControls.WebParts.WebPart>편집을 위해 제어, OnSelectedWebPartChanged 메서드를 호출 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 사용자 컨트롤 편집을 완료 하 여 결과 컨트롤의 선택이 취소 하는 경우 OnSelectedWebPartChanged 메서드를 다시 호출 합니다."
  syntax:
    content: protected virtual void OnSelectedWebPartChanged (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  id: OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnSelectedWebPartChanging(WebPartCancelEventArgs)
  nameWithType: WebPartManager.OnSelectedWebPartChanging(WebPartCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(WebPartCancelEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생 시킵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging&quot;> </xref> 이벤트를 변경 하는 프로세스 중 발생 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤에서 현재 선택 되어 있습니다."
  remarks: "OnSelectedWebPartChanging 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>이벤트를 변경 하는 프로세스 중 발생 <xref:System.Web.UI.WebControls.WebParts.WebPart>현재 선택 된 컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>       <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤이 메서드와 연결된 된 이벤트를 사용 하 여 선택한 컨트롤 변경 되는 프로세스를 취소할 수 있도록 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 내에서 메서드가 호출 예를 들어는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A>메서드를 및 내 에서도 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A>방법에서 프로세스를 취소 하는 방법을 제공 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A> 사용자가 편집 되는 컨트롤에 취소 동사를 클릭 하면 컨트롤을 더 이상 선택 및 편집 내용이 모두 저장 되지 않습니다, OnSelectedWebPartChanging 메서드를 사용 하면 편집 내용이 취소할 수 있으므로 합니다.      > [!NOTE] > 시작 되 고 연결 하는 프로세스를 종료 하는 메서드에서도 메서드는 비슷하게는 <xref:System.Web.UI.WebControls.WebParts.WebPart>해당 프로세스를 취소할 수 있도록 다른 컨트롤에 컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart>       페이지 개발자에 대 한 사용자 지정 처리기를 만들 수는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>추가 하 여 이벤트는 `OnSelectedWebPartChanging` 특성을 `<asp:webpartmanager>` 선언적 페이지 태그 요소와 특성에는 사용자 지정 메서드의 이름을 할당 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>"
  syntax:
    content: protected virtual void OnSelectedWebPartChanging (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload(System.EventArgs)
  id: OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnUnload(EventArgs)
  nameWithType: WebPartManager.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "기본 발생 <xref href=&quot;System.Web.UI.Control.Unload&quot;> </xref> 이벤트 설정 하 고 제거는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 웹 페이지에서 인스턴스."
  syntax:
    content: protected override void OnUnload (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "컨트롤이 제거와 관련 된 이벤트 데이터입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  id: OnWebPartAdded(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartAdded(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartAdded(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(WebPartEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded&quot;> </xref> 이벤트를 발생 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤이 페이지에 추가 되었습니다."
  remarks: "OnWebPartAdded 메서드 추가 하는 과정 동안 호출 되는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 (또는 다른 서버 컨트롤에 추가 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>영역) 페이지에.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>       페이지 개발자에 대 한 사용자 지정 처리기를 만들 수는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>추가 하 여 이벤트는 `OnWebPartAdded` 특성을 `asp:webpartmanager>` 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>"
  syntax:
    content: protected virtual void OnWebPartAdded (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)
  id: OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartAdding(WebPartAddingEventArgs)
  nameWithType: WebPartManager.OnWebPartAdding(WebPartAddingEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(WebPartAddingEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생 시킵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding&quot;> </xref> 이벤트를 추가 하는 프로세스 중 발생 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤 (또는 서버 또는 사용자 정의 컨트롤)에 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 영역입니다."
  remarks: "OnWebPartAdding 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding>는 컨트롤이 추가 되는 동안 나타내는 이벤트가.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding> 메서드는 또한 추가 프로세스를 취소 하는 옵션을 제공 합니다. 컨트롤 성공적으로 추가 되는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>이벤트가 발생 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>       페이지 개발자가 추가 하 여 연결된 된 이벤트에 대 한 사용자 지정 처리기를 제공할 수는 `OnWebPartAdding` 특성을 `<asp:webpartmanager>` 요소에는 웹 페이지 및 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: protected virtual void OnWebPartAdding (System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  id: OnWebPartClosed(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartClosed(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartClosed(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(WebPartEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed&quot;> </xref> 나타내도록 이벤트를 페이지에서 컨트롤이 제거 되었습니다."
  remarks: "OnWebPartClosed 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>임을 나타내는 이벤트는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 (또는 다른 서버 또는 사용자 정의 컨트롤) 성공적으로 닫힌 페이지에.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>       닫으려면는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 렌더링 되지 않습니다 및 특별 한에 저장 개체 라고도 페이지 카탈로그 않도록 페이지에서 제거할 것을 의미 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 에 해당 하는 페이지 카탈로그는 <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>제어 하 고, 닫힌에 대 한 참조를 유지 관리 <xref:System.Web.UI.WebControls.WebParts.WebPart>각 페이지에 대 한 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> 경우는 <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>내에 있는 페이지에 컨트롤을 선언한는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>영역을 사용자가 페이지 카탈로그 디스플레이 모드를 전환 하 고 이전에 닫힌 모든 컨트롤을 페이지에 다시 추가할 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.CatalogZone> </xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>       OnWebPartClosed 메서드를 사용에 대 한 사용자 지정 처리기를 만드는 개발자를 위한는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> 페이지 개발자가 추가 하 여 이벤트에 대 한 사용자 지정 처리기를 추가할 수는 `OnWebPartClosed` 특성을 `<asp:webpartmanager>` 페이지에서 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다. 하나 이상의 유용한 태스크 개발자는이 방법에서는 수행할 수 한 자리 표시 자가 닫힌된 컨트롤 대신, 페이지로 컨트롤을 추가 하는 방법을 사용자에 게 알려 주는 도구 설명이를 완료 하는 것입니다."
  syntax:
    content: protected virtual void OnWebPartClosed (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  id: OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartClosing(WebPartCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartClosing(WebPartCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(WebPartCancelEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing&quot;> </xref> 이벤트는 프로세스 중 발생 하는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 페이지에서 제거 되 고 서버 컨트롤입니다."
  remarks: "OnWebPartClosing 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>컨트롤 중임 닫혀 있지 않거나 페이지에서 제거 되 고 있음을 나타내는 이벤트를.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> 메서드는 또한 닫는 프로세스를 취소 하는 옵션을 제공 합니다. 컨트롤의 페이지에서 제거 되는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>이벤트가 발생 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>       페이지 개발자가 추가 하 여 연결된 된 이벤트에 대 한 사용자 지정 처리기를 제공할 수는 `OnWebPartClosinging` 특성을 `<asp:webpartmanager>` 요소에는 웹 페이지 및 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: protected virtual void OnWebPartClosing (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  id: OnWebPartDeleted(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartDeleted(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartDeleted(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(WebPartEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생 시킵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted&quot;> </xref> 이벤트를 발생 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 제어 페이지에서 영구적으로 삭제 되었습니다."
  remarks: "OnWebPartDeleted 메서드가 삭제 하는 동안에 호출 된 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 (또는 기타 서버 컨트롤에 추가 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>영역) 페이지에서.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>       페이지 개발자에 대 한 사용자 지정 처리기를 만들 수는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>추가 하 여 이벤트는 `OnWebPartDeleted` 특성을 `asp:webpartmanager>` 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>"
  syntax:
    content: protected virtual void OnWebPartDeleted (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  id: OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartDeleting(WebPartCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartDeleting(WebPartCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(WebPartCancelEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생 시킵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting&quot;> </xref> 것임을 나타내는 이벤트 동적 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤 (또는에 포함 된 서버 또는 사용자 정의 컨트롤을 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 영역) 삭제 되는 중입니다."
  remarks: "동적 <xref:System.Web.UI.WebControls.WebParts.WebPart>및 컨트롤을 삭제할 수 있습니다, 컨트롤이 삭제 됩니다 컨트롤 인스턴스 페이지에서 영구적으로 제거 되 고 복원할 수 없습니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 동적 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤은 프로그래밍 방식으로 추가 된 웹 파트 카탈로그에서 정적 컨트롤의 반대 개념에 선언 된 웹 페이지의 태그 또는.</xref:System.Web.UI.WebControls.WebParts.WebPart>       OnWebPartDeleting 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting>컨트롤은 해당 영역에서 영구적으로 삭제 되 고 있음을 나타내는 이벤트를.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting> 메서드는 또한 삭제 프로세스를 취소할 수 있는 기회를 제공 합니다. 컨트롤이 페이지에서 성공적으로 삭제 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>이벤트가 발생 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>       페이지 개발자가 추가 하 여 연결된 된 이벤트에 대 한 사용자 지정 처리기를 제공할 수는 `OnWebPartDeleting` 특성을 `<asp:webpartmanager>` 요소에는 웹 페이지 및 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: protected virtual void OnWebPartDeleting (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  id: OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartMoved(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartMoved(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(WebPartEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved&quot;> </xref> 이벤트를 발생 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 제어 페이지에서 다른 위치로 이동 되었습니다."
  remarks: "OnWebPartMoved 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>의 거의 마지막 이벤트는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A>하 여 모든 코드가 이벤트 처리기가 실행 되기 전에 컨트롤을 이동 하는 프로세스 완료 되었음을 보장 하는 메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>       <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>현재 영역 내에서 또는 다른 영역으로 컨트롤 이동 되 고 프로그래밍 방식으로 또는 사용자 컨트롤을 끌어 이동을 수행 됩니다 여부는 중요 하지 않습니다 때 이벤트가 발생 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>       페이지 개발자에 대 한 사용자 지정 처리기를 만들 수는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>추가 하 여 이벤트는 `OnWebPartMoved` 특성을 `asp:webpartmanager>` 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>"
  syntax:
    content: protected virtual void OnWebPartMoved (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)
  id: OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartMoving(WebPartMovingEventArgs)
  nameWithType: WebPartManager.OnWebPartMoving(WebPartMovingEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(WebPartMovingEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving&quot;> </xref> 것임을 나타내는 이벤트는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 서버 또는 사용자 컨트롤에는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 영역 이동 하는 중입니다."
  remarks: "OnWebPartMoving 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving>이벤트를 발생 때는 <xref:System.Web.UI.WebControls.WebParts.WebPart>또는 기타 서버 컨트롤 영역 내에서 또는 다른 영역으로 이동 됩니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> 메서드는 또한 이동 하는 프로세스를 취소할 수 있는 기회를 제공 합니다. 이동이 성공적으로 완료 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>이벤트가 발생 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>       페이지 개발자가 추가 하 여 연결된 된 이벤트에 대 한 사용자 지정 처리기를 제공할 수는 `OnWebPartMoving` 특성을 `<asp:webpartmanager>` 요소에는 웹 페이지 및 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: protected virtual void OnWebPartMoving (System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  id: OnWebPartsConnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartsConnected(WebPartConnectionsEventArgs)
  nameWithType: WebPartManager.OnWebPartsConnected(WebPartConnectionsEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(WebPartConnectionsEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected&quot;> </xref> 간에 연결을 설정한 후에 발생 하는 이벤트 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤입니다."
  remarks: "OnWebPartsConnected 메서드 맨 끝에서 해당 이벤트를 발생 시킵니다.는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>메서드를 이벤트 처리기의 코드를 실행 하기 전에 두 컨트롤을 연결 하는 데 필요한 단계는 완료 되도록 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>       메서드 연결을 만드는 과정을 제어 하며, 관련된 이벤트를 적절 한 시기에 사용자 인터페이스 (UI)를 업데이트 하거나 연결 된 사용자에 게 알리려면.       페이지 개발자에 대 한 사용자 지정 처리기를 만들 수는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>추가 하 여 이벤트는 `OnWebPartsConnected` 특성을 `asp:webpartmanager>` 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>"
  syntax:
    content: protected virtual void OnWebPartsConnected (System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  id: OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartsConnecting(WebPartConnectionsCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartsConnecting(WebPartConnectionsCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(WebPartConnectionsCancelEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting&quot;> </xref> 두 연결을 설정 하는 동안 발생 하는 이벤트 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는에 포함 된 서버 또는 사용자 컨트롤은 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 영역입니다."
  remarks: "OnWebPartsConnecting 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting>이벤트를 두 개의 연결을 설정 하려고 할 때 발생 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> 메서드는 연결 시도 취소할 수 있는 기회를 제공 합니다. 연결이 성공 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>이벤트가 발생 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>       페이지 개발자가 추가 하 여 연결된 된 이벤트에 대 한 사용자 지정 처리기를 제공할 수는 `OnWebPartsConnecting` 특성을 `<asp:webpartmanager>` 요소에는 웹 페이지 및 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: protected virtual void OnWebPartsConnecting (System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  id: OnWebPartsDisconnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartsDisconnected(WebPartConnectionsEventArgs)
  nameWithType: WebPartManager.OnWebPartsDisconnected(WebPartConnectionsEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(WebPartConnectionsEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected&quot;> </xref> 사이의 연결 후 발생 하는 이벤트 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤 종료 되었습니다."
  remarks: "OnWebPartsDisconnected 메서드 맨 끝에서 해당 이벤트는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>두 컨트롤 간의 연결을 종료 프로세스를 수행 하는 메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>       연결을 종료 하는 과정을 통해 프로그래밍 방식 제어를 제공 하는 메서드, 개발자가 사용자에 게 알려 줄 수를 있도록 사용자 인터페이스 (UI)를 변경 하 또는 응용 프로그램에 다른 변경을 수행 합니다.       페이지 개발자에 대 한 사용자 지정 처리기를 만들 수는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>추가 하 여 이벤트는 `OnWebPartsDisconnected` 특성을 `asp:webpartmanager>` 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>"
  syntax:
    content: protected virtual void OnWebPartsDisconnected (System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  id: OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartsDisconnecting(WebPartConnectionsCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartsDisconnecting(WebPartConnectionsCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(WebPartConnectionsCancelEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생 시킵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting&quot;> </xref> 두를 나타내는 이벤트 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 서버 또는 사용자 컨트롤에는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 영역 하는 연결을 종료 하는 중입니다."
  remarks: "OnWebPartsDisconnecting 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>이벤트를 두 개의 컨트롤은 연결을 종료 하는 경우 발생 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> 메서드는 연결 끊기 프로세스를 취소할 수 있는 기회를 제공 합니다. 연결이 성공적으로 제거 되는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>이벤트가 발생 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>       페이지 개발자가 추가 하 여 연결된 된 이벤트에 대 한 사용자 지정 처리기를 제공할 수는 `OnWebPartsDisconnecting` 특성을 `<asp:webpartmanager>` 요소에는 웹 페이지 및 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: protected virtual void OnWebPartsDisconnecting (System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Personalization
  id: Personalization
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Personalization
  nameWithType: WebPartManager.Personalization
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Personalization
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "웹 페이지에 대 한 개인 설정 데이터를 포함 하는 개체에 대 한 참조를 가져옵니다."
  remarks: "개인 설정 속성에 액세스 하는 방법을 제공는 <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization>통해 페이지와 연관 된 개체는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization> 이 속성을 사용 하 여 개인 설정 개체의 다양 한 멤버를 액세스할 수 있습니다. 예를 들어, 사용할 수는 <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.ToggleScope%2A>메서드는 페이지의 개인 설정 범위에서 전환할 사용자 범위 또는 그 반대로 공유.</xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.ToggleScope%2A> 개인 설정 데이터 등에 사용 되는 공급자 페이지에서 개인 설정도 사용 여부를 페이지의 현재 개인 설정 범위 아웃 찾을 수 있습니다.       개인 설정 속성에서 참조 하는 데이터는 페이지 수준 개인 설정 데이터에서 추적 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 에 있는 개인 설정 가능한 속성의 값과 같은 컨트롤 관련 개인 설정 데이터 <xref:System.Web.UI.WebControls.WebParts.WebPart>제어, 개인 설정 속성의 일부가 아닙니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>      > [!NOTE] > 개인 설정 웹 파트에 대 한 자세한 내용은 참조 하십시오. [웹 파트 개인 설정 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates how to use the Personalization property programmatically.  \n  \n The following Web page allows a user to enter edit mode to edit certain aspects of the <xref:System.Web.UI.WebControls.Calendar> control. The **Toggle Scope** button switches the page to user or shared personalization scope. The **Edit Mode** and **Browse Mode** buttons each switch the page into the appropriate display mode. Notice that in the `<script>` tag section of the file, two of the methods that handle events use the Personalization property to access useful members of the underlying object. Specifically, these methods use the <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.ToggleScope%2A> method and the <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A> property on the object accessed through the Personalization property.  \n  \n [!code-cs[WebParts_WebPartManager_Personalization#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_970_1.aspx)]\n [!code-vb[WebParts_WebPartManager_Personalization#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_970_1.aspx)]  \n  \n For the code example to run, you also must enable a user or users to personalize pages in shared scope. Add an entry to the Web.config file, within the `<system.web>` section, that looks like the following markup.  \n  \n```  \n<webParts>  \n  <personalization>  \n    <authorization>  \n      <allow  \n        users=\"[Replace the text and brackets with a user name or   \n           group.]\"  \n        roles=\"admin\"   \n        verbs=\"enterSharedScope\"  />  \n    </authorization>  \n  </personalization>  \n</webParts>   \n```  \n  \n After you load the page in a browser, click the **Toggle Scope** button, and notice that the page now says the scope is shared. Click **Edit Mode** to change the display mode, click the verbs menu on the visible control, and select **Edit** from the menu. Notice that the user interface (UI) for both editing controls appears. Now click **Browse Mode** to return to normal browsing. If the page says it is in shared scope, click **Toggle Scope** again to ensure the page is in user scope. Next, follow the same steps to edit the control again, but notice that now in the editing UI, the <xref:System.Web.UI.WebControls.WebParts.BehaviorEditorPart> control does not appear. That is because this control only works when the page is in shared personalization scope."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartPersonalization Personalization { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartPersonalization
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartPersonalization&quot;> </xref> 개인 설정 데이터를 포함 하 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Personalization*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript
  id: RegisterClientScript
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: RegisterClientScript()
  nameWithType: WebPartManager.RegisterClientScript()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "사용 하도록 설정 된 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 컨트롤을 끌어 오는 경우 처럼 다양 한 개인 설정 기능에 사용 되는 클라이언트 쪽 스크립트를 내보낼 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 웹 페이지에서 컨트롤."
  syntax:
    content: protected virtual void RegisterClientScript ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Render(System.Web.UI.HtmlTextWriter)
  id: Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Render(HtmlTextWriter)
  nameWithType: WebPartManager.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Render(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "방지 하기 위해 재정의 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 컨트롤 내용을 렌더링 합니다."
  syntax:
    content: protected override void Render (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "<xref href=&quot;System.Web.UI.HtmlTextWriter&quot;> </xref> 페이지에 쓸 컨트롤의 콘텐츠를 받는입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Render*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState
  id: SaveControlState
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SaveControlState()
  nameWithType: WebPartManager.SaveControlState()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "상태 데이터를 저장 된 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 컨트롤을 포함 하는 웹 페이지에 대 한 이후 요청에서 데이터를 복원할 수 있도록 합니다."
  remarks: "경우에 페이지 포스트백 동안 유지 해야 하는 속성에 대 한 상태 데이터를 저장 하는 메서드 SaveControlState는 <xref:System.Web.UI.Control.EnableViewState%2A>속성이 `false`.</xref:System.Web.UI.Control.EnableViewState%2A>"
  syntax:
    content: protected override object SaveControlState ();
    parameters: []
    return:
      type: System.Object
      description: "<xref:System.Object>컨트롤을 포함 하도록의 저장 된 상태 데이터입니다.</xref:System.Object>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  id: SaveCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SaveCustomPersonalizationState(PersonalizationDictionary)
  nameWithType: WebPartManager.SaveCustomPersonalizationState(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(PersonalizationDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "유지 관리 하는 사용자 지정 개인 설정 상태 데이터를 저장 된 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 페이지를 다시 로드 될 때마다이 데이터 다시 로드 될 수 있도록 컨트롤입니다."
  remarks: "SaveCustomPersonalizationState 방법은 향후 브라우저 세션을 위해 저장할 개인 설정 된 사용자 설정을 사용 하도록 설정 하 고 페이지 방문 있기 때문에 개인 설정, 프로세스에서 중요 합니다. 개인 설정 사용자 지정 상태 데이터를 저장 하는 메서드: 동적 <xref:System.Web.UI.WebControls.WebParts.WebPart>또는 페이지에 추가 되거나 페이지; 페이지에서 이동 된 컨트롤 및 만들거나 삭제 하는 동적 연결에서 삭제 된 서버 컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart>       사용자 코드에서 직접이 메서드를 호출할 수 없습니다. 그러나 호출할 수는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A>메서드는 자체 개인 설정 데이터를 저장 하려면이 메서드를 호출 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A>"
  syntax:
    content: protected virtual void SaveCustomPersonalizationState (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);
    parameters:
    - id: state
      type: System.Web.UI.WebControls.WebParts.PersonalizationDictionary
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.PersonalizationDictionary&quot;> </xref> 로드 되도록 상태 데이터를 포함 하는 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart
  id: SelectedWebPart
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SelectedWebPart
  nameWithType: WebPartManager.SelectedWebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "에 대 한 참조는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 편집을 위해 또는 다른 컨트롤과 연결을 만들기 위한 현재 선택 되어 있는 기타 서버 컨트롤입니다."
  remarks: "SelectedWebPart 속성에 대 한 참조를 반환 합니다.는 <xref:System.Web.UI.WebControls.WebParts.WebPart>또는 편집을 위해 또는 다른 컨트롤과 연결을 만들기 위한 현재 선택 되어 있는 기타 서버 컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart>       <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤은 컨트롤을 선택 하는 과정을 처리 하기 위한 몇 가지 유용한 메서드 및 이벤트를 제공 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>이벤트는 컨트롤을 선택한 후에 바로 전에 발생 변경 되는.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> 선택 된 후에 컨트롤에서 작업을 수행 하려면 재정의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> 예를 들어 다음 하는 컨트롤의 선택 되어 있지만 아직 변경 되지 않은 시각적으로 강조 하는 컨트롤을 선택 모양을 변경 하는 것이 좋습니다.       <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged>방금 선택한 컨트롤 변경 된 후에 이벤트가 발생 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged> 변경 된 후에 컨트롤에 대해 일부 작업을 수행 하려면 재정의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A>"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart SelectedWebPart { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 편집 하거나 연결을 설정 하기 위해 현재 선택 된 컨트롤입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged
  id: SelectedWebPartChanged
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SelectedWebPartChanged
  nameWithType: WebPartManager.SelectedWebPartChanged
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "하나를 선택 후 발생 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤 변경 되 고 웹 페이지에서 다른 컨트롤로 이동 합니다."
  remarks: "이 이벤트와 함께에서 사용할 수는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A>선택 된 컨트롤의 사용자 인터페이스 (UI)를 변경 하려면 메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> 예를 들어, 사용자가 페이지 디자인 모드로 전환 하는 경우 (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>), 다음을 선택 하 고는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤을 새 위치로 끌어 목적으로의 테두리 색을 변경 하 여 예를 들어 선택한 컨트롤의 렌더링을 변경 또는 선택 된 상태를 백그라운드에 공통 되기.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>      > [!NOTE] > 이벤트 사용에 대 한 자세한 내용은 참조 하십시오. [하는 방법: Web Forms 응용 프로그램에](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartEventHandler SelectedWebPartChanged;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging
  id: SelectedWebPartChanging
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SelectedWebPartChanging
  nameWithType: WebPartManager.SelectedWebPartChanging
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "변경 하는 과정에서 발생 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 웹 페이지에서 서버 컨트롤 현재 선택 되어 있습니다."
  remarks: "이 이벤트와 함께에서 사용할 수는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> 페이지 개발자가 코드에 추가 하 여에 이벤트 처리기를 만들 수 있습니다는 `OnSelectedWebPartChanging` 특성을 `<asp:webpartmanager>` 이벤트를 처리할 요소에는 페이지 및 사용자 지정 메서드의 이름으로 특성의 값을 설정 합니다.       이 이벤트는 시작 및 끝 컨트롤을 편집 하는 때와 컨트롤 간의 연결을 종료 또는 시작 프로세스 중 발생 합니다. 자세한 내용은 참조는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A>       일반적으로 선택된 된 컨트롤을 변경 하는 사용자의 동작의 직접적인 결과로 SelectedWebPartChanging 이벤트가 발생 하는 경우 이벤트를 취소할 수 있습니다. 그러나 이벤트를 취소할 수 없는 시나리오가 있습니다. 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone>컨트롤이 삭제 되는 <xref:System.Web.UI.WebControls.WebParts.WebPart>분리는 그렇지 않은 경우, 포함 된 컨트롤 모두 닫아야 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZone> 이 경우에 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>닫히는 제어는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤, 사용자 및가 아닌 것과 결정 해야 컨트롤에서 현재 선택 된 중단 될 가능성 없이 선택 영역을 변경 하는 경우의 모든 컨트롤을 정리 프로세스를 완료할 수 있도록 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> 따라서이 시나리오는 SelectedWebPartChanging 설계상 메서드 취소할 수 없습니다. 취소할 수 있는 관련된 이벤트에 대 한 참조는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>"
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler SelectedWebPartChanging;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty
  id: SetPersonalizationDirty
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SetPersonalizationDirty()
  nameWithType: WebPartManager.SetPersonalizationDirty()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "에 대 한 해당 사용자 지정 개인 설정 데이터를 나타내는 플래그를 설정 하는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 컨트롤 변경 되었습니다."
  remarks: "SetPersonalizationDirty 메서드 궁극적으로 업데이트 된 개인 설정 데이터를 저장 하도록 설정 하는 웹 파트 컨트롤에 개인 설정 구성 요소를 설정 하는 플래그를 설정 합니다. 추적 개인 설정 데이터를 변경 시킬 수 있는 시나리오에 대 한 자세한 내용은 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>제어, 참조는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A>속성.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>       SetPersonalizationDirty 메서드 사용자 코드에서 직접 호출할 수 없습니다 하며 웹 파트 개인 설정 기능이의 일부로 설정 하는 웹 파트 컨트롤에 의해 내부적으로 사용 되기 때문에 재정의할 수 없습니다."
  syntax:
    content: protected void SetPersonalizationDirty ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  id: SetSelectedWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SetSelectedWebPart(WebPart)
  nameWithType: WebPartManager.SetSelectedWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "설정 된 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*>에 현재 선택 된 속성 값 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 서버 컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*>"
  remarks: "시작 하거나 종료 하 여 지정 된 컨트롤의 편집 프로세스 동안 SetSelectedWebPart 메서드가 호출 되는 `webPart` 을 시작 하거나 포함 된 연결을 종료 하 고 매개 변수를 `webPart`합니다.       편집 및 연결 프로세스의 시작 부분에서 `webPart` 편집 하거나 연결에 참여 하려면 선택 된 컨트롤입니다.       편집 및 연결 프로세스가 끝날 때 `null` SetSelectedWebPart 메서드에 종료 될 때는 현재 선택 된 컨트롤에 전달 됩니다."
  syntax:
    content: protected void SetSelectedWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 선택 된 서버 컨트롤입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SkinID
  id: SkinID
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SkinID
  nameWithType: WebPartManager.SkinID
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SkinID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "빈 문자열을 가져오거나 설정 합니다. (&quot;&quot;) 스킨에 적용할 수 있도록는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 제어 합니다."
  remarks: "SkinID 속성을 상속 된 재정의 <xref:System.Web.UI.Control.SkinID%2A?displayProperty=fullName>를 방지 하려면 속성에서 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 스킨을 사용 하 여에서 보이지 않는 컨트롤입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.Control.SkinID%2A?displayProperty=fullName> 항상 빈 문자열을 반환 하 여 할당 되지 스킨을 방지 하는 속성의 구현을 `get` 값을 설정 하는 시도 하는 경우 항상 예외를 throw 하 고, 접근자는 `set` 접근자입니다."
  syntax:
    content: public override string SkinID { get; set; }
    return:
      type: System.String
      description: "빈 문자열을 방해 하는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 컨트롤 스킨에 할당 하는 것과 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.SkinID*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "속성 값을 설정 하려고 했습니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections
  id: StaticConnections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: StaticConnections
  nameWithType: WebPartManager.StaticConnections
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "모든 컬렉션에 대 한 참조 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> 정적 연결으로 정의 된 웹 페이지에 있는 개체입니다."
  remarks: "StaticConnections 속성은 사용 된 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤을 추적 하 고 페이지의 모든 정적 연결을 관리 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 동적 연결과 달리 정적 연결 될 때마다 페이지가 렌더링 되는 페이지에 추가할 필요는 없습니다.       프로그래밍 방식으로 만든 또는 지정 된 페이지에 있는 모든 정적 연결을 포함 하는이 속성에서 참조 하는 컬렉션 한 `<asp:webpartconnection>` 페이지의 태그에는 요소입니다."
  example:
  - "The following code example demonstrates programmatic use of the StaticConnections property.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls and a custom interface.  \n  \n-   A Web page that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected, and an `<asp:webpartmanager>` element.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The following code contains only the Web page portion of the example. You will also need to obtain the first two parts of the example--the custom user control and the source code for the custom controls and interface--from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. That topic also explains your options for compiling the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n The third part of the code example is the Web page. The declarative markup for the page contains `Register` directives for both the user control and the custom controls. There is an `<asp:webpartmanager>` element, an `<asp:webpartzone>` element to contain the custom controls, and an `<asp:connectionszone>` element. Notice that in the `Page_Load` method, the code checks to see whether a connection already exists and, if not, defines a provider, a consumer, and their respective connection points, and then adds a new connection to the set of static connections referenced by the StaticConnections property.  \n  \n [!code-cs[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_98_1.aspx)]\n [!code-vb[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_98_1.aspx)]  \n  \n After you have loaded the Web page in a browser, click the **Display Mode** drop-down list control and select **Connect** to switch the page to connect mode. Connect mode uses the `<asp:connectionszone>` element to enable you to create connections between controls. In connect mode, click the downward arrow in the title bar of the **ZIP Code** control to activate its verbs menu, and then click **Connect**. After the connection user interface (UI) appears, notice that a connection has already been created by the code contained in the `Page_Load` method. If you return to this page in a later browser session, this static connection will already be established and will not need to be recreated each time the page loads."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartConnectionCollection StaticConnections { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnectionCollection&quot;> </xref> 페이지에서 모든 정적 연결을 포함 하는 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes
  id: SupportedDisplayModes
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SupportedDisplayModes
  nameWithType: WebPartManager.SupportedDisplayModes
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "특정 웹 페이지에서 사용할 수 있는 모든 디스플레이 모드의 읽기 전용 컬렉션을 가져옵니다."
  remarks: "SupportedDisplayModes 속성 페이지에 있는 영역 컨트롤의 종류에 따라 해당 페이지에서 실제로 사용할 수 있는 디스플레이 모드를 포함 합니다.      > [!NOTE] > 디스플레이 모드를 사용 하지 않도록 설정 하는 경우 추가 되지 않은 SupportedDisplayModes 컬렉션에 해당 형식의 해당 디스플레이 모드를 지 원하는 영역 페이지에 있는 경우에 및 디스플레이 모드를 해제할 수 있습니다.       찾아보기 모드와 디자인 모드는 항상 지원 됩니다. 다를 수 있는 디스플레이 모드는 편집, 카탈로그 및 모드를 연결 합니다. 이러한 각 디스플레이 모드의 특정 형식과 연결 된 <xref:System.Web.UI.WebControls.WebParts.ToolZone>컨트롤.</xref:System.Web.UI.WebControls.WebParts.ToolZone> 것 SupportedDisplayModes 속성에서 참조 하는 컬렉션에 추가할 특정 디스플레이 모드를 발생 시키는 웹 페이지에 해당 특정 형식의 영역이의 존재 합니다. 예를 들어, 웹 페이지에는 <xref:System.Web.UI.WebControls.WebParts.EditorZone>되지 않은 영역을 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>영역을 편집 디스플레이 모드를 사용 하면 해당 페이지에서 지원 되는 모드 중 하나인 되지만 카탈로그 디스플레이 모드 지원 되지 않습니다.</xref:System.Web.UI.WebControls.WebParts.CatalogZone> </xref:System.Web.UI.WebControls.WebParts.EditorZone>      > [!NOTE] >에서 다른 the SupportedDisplayModes 속성은 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A>현재 사용할 수 있는 모든 디스플레이 모드를 포함 하는 컬렉션을 참조 하는 속성 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>제어 붙지 않은 특정 페이지에서 지원 되지 않습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A>"
  example:
  - "The following code example shows the programmatic use of the SupportedDisplayModes property. The code uses this property to populate the list with only the display modes available in the current Web page.  \n  \n There are three supported display modes on this page: browse, design, and edit. The first two are always available, and the edit mode is available in this code example because the page contains an <xref:System.Web.UI.WebControls.WebParts.EditorZone> control. The catalog and connect display modes are not shown, because their corresponding zones are not on this page.  \n  \n [!code-vb[WebParts_WebPartManager_SupportedDisplayModes#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_388_1.aspx)]\n [!code-cs[WebParts_WebPartManager_SupportedDisplayModes#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_388_1.aspx)]  \n  \n After you load the page in a browser, you can use the drop-down list control to switch the page from browse mode to design mode, and then to edit mode. In edit mode, you can click the drop-down verbs menu in the header of one of the server controls, and select **Edit** to edit the control."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection SupportedDisplayModes { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection&quot;> </xref> 집합이 들어 있는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayMode&quot;> </xref> 특정 웹 페이지에서 사용할 수 있는 개체입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty
  id: System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty
  isEii: true
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "개인 설정 사용자 지정 상태 데이터 관리 하는 지 여부를 나타내는 값을 가져옵니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 컨트롤이 웹 페이지에서 변경 합니다."
  remarks: "IPersonalizable.IsDirty 속성 호출자가 확인할 수 있는 방법을 제공 개인 설정 상태에서 관리 되는 데이터 여부는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 변경 되었습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 때 사용자 개인 설정 페이지 수준 세부 정보, 예를 들어 페이지 레이아웃 변경, 생성 또는 연결을 삭제 하 여 컨트롤 추가 및 삭제를 개인 설정 데이터에서 및 관리 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>변경 내용을 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 이 호출자에 게 보호 된 값을 반환 하는 통과 방법 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty%2A>속성으로, 호출자가 직접 액세스할 수 없습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty%2A>      > [!NOTE] > The IPersonalizable.IsDirty 속성 나타내지 않습니다 여부를 개인 설정할 수 있는 속성 값 또는 개인의 모양에 영향을 주는 개별 속성 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 변경 되었습니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 개인 설정 컨트롤 수준 각 컨트롤에 대해 개별적으로 추적 됩니다. IPersonalizable.IsDirty 속성만 나타내므로 여부를 개인 설정 데이터를 페이지 수준에서 관리 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 변경 되었습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       다음 목록에서는 IPersonalizable.IsDirty 속성의 값을 반환 해야 하는 개인 설정의 몇 가지 일반적인 경우를 설명 `true`한다는 표시 이므로 하는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤에 일부 변경 된 개인 설정 데이터가:-정적 닫는 <xref:System.Web.UI.WebControls.WebParts.WebPart>페이지에 컨트롤 (또는 서버 또는 사용자 정의 컨트롤).</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>      -닫힌된 정적 복원 <xref:System.Web.UI.WebControls.WebParts.WebPart>페이지로 다시 페이지 카탈로그에서 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>      -또는 다른 영역 영역 내에서 모든 컨트롤을 이동 합니다.      -의 카탈로그에서 컨트롤을 추가 합니다. <xref:System.Web.UI.WebControls.WebParts.WebPart>서버 컨트롤 또는 컨트롤을 프로그래밍 방식으로 추가 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>      -간 연결 만들기 <xref:System.Web.UI.WebControls.WebParts.WebPart>프로그래밍 방식으로 또는 연결 사용자 인터페이스 (UI)를 사용 하 여 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>      --간 연결을 삭제 하는 중 <xref:System.Web.UI.WebControls.WebParts.WebPart>프로그래밍 방식으로 또는 연결 UI를 사용 하 여 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>       이 속성 값에 액세스 하려면 캐스팅 해야 합니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 인스턴스는 <xref:System.Web.UI.WebControls.WebParts.IPersonalizable>인터페이스; 다음 읽기는 <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A>속성 값.</xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> </xref:System.Web.UI.WebControls.WebParts.IPersonalizable> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example demonstrates a simple usage of the IPersonalizable.IsDirty property, to indicate some common page personalization instances that cause a <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control's personalization data to change.  \n  \n The code example has four parts:  \n  \n-   A user control that allows you to change display modes on a page that contains Web Parts controls.  \n  \n-   A source file that contains the code for two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected, and an interface.  \n  \n-   A Web page that hosts all the controls.  \n  \n-   An explanation of how the code example works.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The second part of the example is the source file with the custom controls and the interface. Notice that the `IZipCode` interface exposes one method, and that this method as implemented in the custom `ZipCodeWebPart` control serves as a callback method to enable `ZipCodeWebPart` to act as a provider in a connection scenario. The other control, `WeatherWebPart`, acts as the consumer control in a connection; it can consume the particular interface provided by `ZipCodeWebPart`. In a real application, `WeatherWebPart` could consume a personalized ZIP Code value from the provider, and then provide graphical weather information to users.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation; therefore, notice that the `Register` directive for this component at the top of the Web page contains only `TagPrefix` and `Namespace` attributes, without an `Assembly` attribute. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_IsDirty#2](~/add/codesnippet/csharp/c24ecc1a-95a5-4007-8876-_1.cs)]\n [!code-vb[WebParts_WebPartManager_IsDirty#2](~/add/codesnippet/visualbasic/c24ecc1a-95a5-4007-8876-_1.vb)]  \n  \n The third part of the code example is the Web page. Notice that it contains two <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zones, with the first one containing the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. There is also a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zone, which contains a standard <xref:System.Web.UI.WebControls.Calendar> control that users can add to the page. The `<asp:connectionszone>` element provides a connection UI for users to create connections between controls. In the `Page_PreRender` method, notice that it checks to see whether the personalization data has changed and, if so, updates the text of `Label1`.  \n  \n [!code-cs[WebParts_WebPartManager_IsDirty#1](~/add/codesnippet/csharp/c24ecc1a-95a5-4007-8876-_2.aspx)]\n [!code-vb[WebParts_WebPartManager_IsDirty#1](~/add/codesnippet/visualbasic/c24ecc1a-95a5-4007-8876-_2.aspx)]  \n  \n After you load the page in a browser, try to create some of the scenarios listed in the Remarks section of this topic that will change the personalization data. As you make various changes, when a change involves one of the personalization scenarios tracked by the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, the text of the `Label1` control is displayed to indicate that personalization data has changed. For example, you can:  \n  \n-   Create a connection between controls by clicking the **Connect WebPart Controls** button.  \n  \n-   Use the **Display Mode** drop-down list control to switch the page to catalog mode, and add the **My Calendar** control to the second <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zone.  \n  \n-   Change the page back to browse mode, click on the verbs menu (shown with an arrow symbol in the title bar) for the **My Calendar** control, and select **Close** to close it and add it to the page catalog.  \n  \n-   Return the page to catalog mode, and add the **My Calendar** control back to the page.  \n  \n-   Use the **Display Mode** control to switch the page to design mode, and rearrange the layout of the controls by dragging one or more of them to another zone, or to a different position in the same zone."
  syntax:
    content: bool System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty { get; }
    return:
      type: System.Boolean
      description: "개인 설정 상태 데이터가 변경 되었는지 여부를 나타내는 부울 값입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  id: System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  isEii: true
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary)
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "반환에 로드 되어야 하는 사용자 지정 개인 설정 상태 데이터를 이전에 저장 된 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 제어 합니다."
  remarks: "이 메서드는의 구현에서 <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A?displayProperty=fullName>집합에 대 한 웹 파트 컨트롤 직접 액세스로 보호 되는 방법을 제공 하는 메서드를 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState%2A?displayProperty=fullName>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A?displayProperty=fullName> 관리 되는 개인 설정 된 사용자 지정 데이터를 저장이 메서드가 호출 될 때는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤과 이전에 초기화 프로세스의 뒷부분에 나오는 사용 하기 위해 영구 데이터 저장소에 저장 된.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>      > [!NOTE] > 대부분의 경우에서 페이지 및 컨트롤에 해당 하는 개발자의 코드 하지 않아도이 메서드를 호출 하는 주로 웹 파트 컨트롤 집합 개인 설정 데이터를 검색 하기 위한 메커니즘으로 사용 하기 때문에 있습니다."
  syntax:
    content: void IPersonalizable.Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);
    parameters:
    - id: state
      type: System.Web.UI.WebControls.WebParts.PersonalizationDictionary
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.PersonalizationDictionary&quot;> </xref> 로드 되도록 상태 데이터를 포함 하는 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  id: System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  isEii: true
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary)
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "관리 되는 개인 설정 사용자 지정 상태 데이터를 저장 된 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 제어 합니다."
  remarks: "IPersonalizable.Save 메서드는의 구현에서 <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A?displayProperty=fullName>집합에 대 한 웹 파트 컨트롤 직접 액세스로 보호 되는 방법을 제공 하는 메서드를 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A?displayProperty=fullName>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A?displayProperty=fullName> 관리 되는 모든 개인 설정된 데이터가 저장이 메서드가 호출 될 때는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>웹 파트 응용 프로그램에 대해 구성 된 영구 데이터 저장소를 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>      > [!NOTE] > 대부분의 경우에서 페이지 및 컨트롤에 해당 하는 개발자의 코드 하지 않아도이 메서드를 호출 하는 주로 웹 파트 컨트롤 집합 개인 설정 데이터를 저장 하기 위한 메커니즘으로 사용 하기 때문에 있습니다."
  syntax:
    content: void IPersonalizable.Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);
    parameters:
    - id: state
      type: System.Web.UI.WebControls.WebParts.PersonalizationDictionary
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.PersonalizationDictionary&quot;> </xref> 상태 데이터를 저장할 수 있는 합니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: WebPartManager.TrackViewState()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "개인 설정 상태 데이터를 적용 하는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 컨트롤과 호출 추적을 사용 하려면 기본 메서드는 컨트롤에 대 한 뷰 상태 데이터를 변경 합니다."
  remarks: "뷰 상태 데이터는 변경 내용이 저장 되는 <xref:System.Web.UI.StateBag>개체를 컨트롤의를 통해 액세스할 수 <xref:System.Web.UI.Control.ViewState%2A>속성.</xref:System.Web.UI.Control.ViewState%2A> </xref:System.Web.UI.StateBag>"
  syntax:
    content: protected override void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Visible
  id: Visible
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Visible
  nameWithType: WebPartManager.Visible
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Visible
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "자식 컨트롤이 표시 될 수 있도록 값을 가져옵니다."
  remarks: "<xref:System.Web.UI.WebControls.WebParts.WebPartManager>기본 재정의 <xref:System.Web.UI.Control.Visible%2A?displayProperty=fullName>속성의 값을 항상 반환을 `true` Visible 속성에 대 한.</xref:System.Web.UI.Control.Visible%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> 경우에는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>자체 컨트롤이 표시 되지 않으면, Visible 속성 설정 해야 합니다. `true` 모든 해당 자식 컨트롤이 기본적으로 볼 수 있도록 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Visible 속성의 값을 설정 하려고 하면 항상 오류가 생성 하기 때문에 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 기준 속성 동작을 재정의 하 고 속성에 값을 할당 하지 못하도록 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       이 속성 비주얼 디자이너에서 바인딩 가능한 않으며 런타임에 바인딩할 수입니다. 자세한 내용은 <xref:System.ComponentModel.BindableAttribute>.</xref:System.ComponentModel.BindableAttribute> 을 참조 하십시오."
  syntax:
    content: public override bool Visible { get; set; }
    return:
      type: System.Boolean
      description: "나타내는 부울 값 여부는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 컨트롤과 해당 자식 컨트롤이 표시 됩니다. <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>모든 경우"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Visible*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "속성에 값을 할당 하려고 했습니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded
  id: WebPartAdded
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartAdded
  nameWithType: WebPartManager.WebPartAdded
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "동적 뒤에 오는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 기타 서버 컨트롤에 추가 되었습니다는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 영역을 나타내는 컨트롤 성공적으로 추가 되었습니다."
  remarks: "WebPartAdded 이벤트는 동적 컨트롤 (페이지 태그에서 선언 되는 대신 프로그래밍 방식으로 추가 하는 컨트롤)는 영역에 추가한 성공적으로 나타내는 경우에 유용 합니다. 와 함께에서 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A>메서드, 이벤트 사용자 인터페이스 (UI)를 업데이트 하거나 컨트롤을 성공적으로 추가 된 사용자에 게 알릴 방법을 개발자에 게 제공 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A>"
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartAdded;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding
  id: WebPartAdding
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartAdding
  nameWithType: WebPartManager.WebPartAdding
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "동적 추가 하는 과정에서 발생 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 기타 서버 컨트롤을 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 영역입니다."
  remarks: "WebPartAdding 이벤트에 의해 발생 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding%2A>메서드 영역에는 컨트롤을 추가 하는 프로세스가 시작 된 후.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding%2A> 이 이벤트는 완료 되기 전에 프로세스를 취소 하는 기회를 제공 합니다. 이 이벤트 다음 추가 프로세스에 성공한 경우의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>       페이지 개발자가 추가 하 여 이벤트에 대 한 사용자 지정 처리기를 제공할 수는 `OnWebPartAdding` 특성을 `<asp:webpartmanager>` 의 요소는 페이지 및 사용자 지정 메서드 이름 특성에 할당 합니다."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler WebPartAdding;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed
  id: WebPartClosed
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartClosed
  nameWithType: WebPartManager.WebPartClosed
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "발생 경우는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤 (또는 서버 또는 사용자 정의 컨트롤) 페이지에서 제거 됩니다."
  remarks: "WebPartClosed이 이벤트는 컨트롤 닫 혔 음 성공적으로, 사용자가 또는 프로그래밍 방식으로 나타냅니다. 닫으려면는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 렌더링 되지 않습니다 및 특별 한에 저장 개체 라고도 페이지 카탈로그 않도록 페이지에서 제거할 것을 의미 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 에 해당 하는 페이지 카탈로그는 <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>제어 하 고, 닫힌에 대 한 참조를 유지 관리 <xref:System.Web.UI.WebControls.WebParts.WebPart>각 페이지에 대 한 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> 경우는 <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>내에 있는 페이지에 컨트롤을 선언한는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>영역을 사용자가 한 페이지 카탈로그 디스플레이 모드를 전환 하 고 이전에 닫힌 모든 컨트롤을 페이지에 다시 추가할 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.CatalogZone> </xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>       WebPartClosed 이벤트는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed%2A>메서드, 이벤트를 발생와 절차 처리기를 제공 하</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed%2A> 는 연결 된       페이지 개발자가 추가 하 여 이벤트에 대 한 사용자 지정 처리기를 추가할 수는 `OnWebPartClosed` 특성을 `<asp:webpartmanager>` 페이지에서 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartClosed;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing
  id: WebPartClosing
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartClosing
  nameWithType: WebPartManager.WebPartClosing
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "제거 과정에서 발생 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 페이지에서 컨트롤 (또는 서버 또는 사용자 정의 컨트롤)."
  remarks: "WebPartClosing 이벤트에 의해 발생 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing%2A>메서드 때는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>제어 하는 컨트롤을 닫는 중입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing%2A> 컨트롤의 제거 되 면이 이벤트가 다음는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>       페이지 개발자가 추가 하 여 이벤트에 대 한 사용자 지정 처리기를 제공할 수는 `OnWebPartClosed` 특성을 `asp:webpartmanager>` 의 요소는 페이지 및 사용자 지정 메서드 이름 특성에 할당 합니다.       일반적으로 WebPartClosing 이벤트가 발생 한 경우 닫는 사용자의 직접적인 결과로 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤, 이벤트를 취소할 수 있습니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 그러나 이벤트를 취소할 수 없는 시나리오가 있습니다. 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone>컨트롤이 삭제 되는 <xref:System.Web.UI.WebControls.WebParts.WebPart>분리는 그렇지 않은 경우, 포함 된 컨트롤 모두 닫아야 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZone> 이 경우에 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>닫히는 제어는 <xref:System.Web.UI.WebControls.WebParts.WebPart>사용자 아니라를 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> 시기는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤을 호출 하는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A>각 컨트롤을 닫는 메서드, 및 WebPartClosing 이벤트가 발생 하면 때문에 디자인에 따라 이벤트를 취소할 수 없는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>의 모든 영역 컨트롤 정리 작업을 완료 해야 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartClosing;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted
  id: WebPartDeleted
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartDeleted
  nameWithType: WebPartManager.WebPartDeleted
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "후에 발생 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 다른 서버 컨트롤에서 삭제 되었거나 또는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 영역입니다."
  remarks: "WebPartDeleted 이벤트는 동적 컨트롤 (페이지 태그에서 선언 되는 대신 프로그래밍 방식으로 추가 하는 컨트롤) 영역에서 삭제 되었습니다 있는지를 나타내는 경우에 유용 합니다. 와 함께에서 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted%2A>메서드, 이벤트 사용자 인터페이스 (UI)를 업데이트 하거나 컨트롤을 성공적으로 삭제 된 사용자에 게 알릴 방법을 개발자에 게 제공 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted%2A>"
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartDeleted;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting
  id: WebPartDeleting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartDeleting
  nameWithType: WebPartManager.WebPartDeleting
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "동적의 인스턴스를 삭제 하는 프로세스 중에 발생 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 기타 서버 컨트롤에서는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 영역입니다."
  remarks: "WebPartDeleting 이벤트에 의해 발생 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting%2A>메서드 (사용자 웹 파트 사용자 인터페이스를 통해 또는 프로그래밍 방식으로 추가 된 하나) 동적 컨트롤을 삭제 하는 과정입니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting%2A> 이벤트 완료 되기 전에 프로세스를 취소 하는 기회를 제공 합니다. 삭제 프로세스가 완료 되 면이 이벤트가 다음는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>       페이지 개발자가 추가 하 여 이벤트에 대 한 사용자 지정 처리기를 제공할 수는 `OnWebPartDeleting` 특성을 `<asp:webpartmanager>` 의 요소는 페이지 및 사용자 지정 메서드 이름 특성에 할당 합니다."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartDeleting;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved
  id: WebPartMoved
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartMoved
  nameWithType: WebPartManager.WebPartMoved
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "다음에 발생 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 서버 컨트롤이 웹 페이지에서 다른 위치로 이동 되었습니다."
  remarks: "이 이벤트는 static (웹 페이지의 태그에 선언 됨) 및 동적 컨트롤에 적용 됩니다. 과 연관 된 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A> 이동이 완료 한 후 이벤트 발생 하기 때문에 개발자가 사용자, 일부 유효성 검사 또는 기타 작업에 몇 가지 알림을 제공 하는 이벤트 처리기를 포함할 수 있습니다. 이벤트 처리기를 추가 하려면 추가할 수 있습니다는 `OnWebPartMoved` 특성을 `<asp:webpartmanager>` 요소에는 페이지 및 특성에는 사용자 지정 메서드 이름 할당 합니다."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartMoved;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving
  id: WebPartMoving
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartMoving
  nameWithType: WebPartManager.WebPartMoving
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "이동 하는 과정에서 발생 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 기타 서버 컨트롤에 포함 된 한 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 영역입니다."
  remarks: "WebPartMoving 이벤트가 발생할 때는 <xref:System.Web.UI.WebControls.WebParts.WebPart>자체 영역 내에서 또는 다른 영역으로 이동 되 고 다른 서버 컨트롤 또는.</xref:System.Web.UI.WebControls.WebParts.WebPart> 이 사용자 컨트롤을 끌 때와 프로그래밍 방식으로 이동할 때 발생할 수 있습니다.       WebPartMoving 이벤트에 의해 발생 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A>메서드를 완료 되기 전에 이동 프로세스를 취소할 수 있는 기회를 제공 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A> 이동이 완료 되 고이 이벤트에서 다음 컨트롤을 새 위치에 배치 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>       페이지 개발자가 추가 하 여 이벤트에 대 한 사용자 지정 처리기를 만들 수는 `OnWebPartMoving` 특성을 `<asp:webpartmanager>` 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler WebPartMoving;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebParts
  id: WebParts
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebParts
  nameWithType: WebPartManager.WebParts
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebParts
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "모두에 대 한 참조 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤이 관리 하는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> 웹 페이지에 컨트롤입니다."
  remarks: "웹 파트 속성에서 사용 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 모든 추적을 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤 내에 포함 된 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>페이지의 영역에.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> 컬렉션이 읽기 전용으로 설정 되지만 개별 액세스할 수 <xref:System.Web.UI.WebControls.WebParts.WebPart>방식으로 컬렉션 변경할을 통해 프로그래밍 방식으로 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>      > [!NOTE] > 할 수는 <xref:System.Web.UI.WebControls.WebParts.WebPart>외부의 페이지에 컨트롤 배치는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone>영역에서 추적 되지 않는 컨트롤에는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>제어 하거나 해당 웹 파트 컬렉션에 참조 된.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartZone> </xref:System.Web.UI.WebControls.WebParts.WebPart> 그러나는 거의 사용 하는 이유는 <xref:System.Web.UI.WebControls.WebParts.WebPart>그런 다음 웹 파트 기능을 손실 하 고 일반적인 서버 컨트롤의 역할을 하기 때문에 영역을 외부에서 제어 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart>       모든 형식의 사용자 지정 영역에 배치할 수 있는 컨트롤 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤, 표준 ASP.NET 컨트롤, 사용자 정의 컨트롤 또는 사용자 지정 서버 컨트롤으로 처리 될 수는 <xref:System.Web.UI.WebControls.WebParts.WebPart>런타임 시 컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> 때 되지 않는 컨트롤은 <xref:System.Web.UI.WebControls.WebParts.WebPart>에 배치는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone>ASP.NET으로 컨트롤을 래핑하는 실행 시 영역은 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>개체 컨트롤은 진정한 처럼 동작할 수 있도록 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZone> </xref:System.Web.UI.WebControls.WebParts.WebPart> 따라서 사용 하 여 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤 모든 종류의 <xref:System.Web.UI.WebControls.WebParts.WebPart>클래스</xref:System.Web.UI.WebControls.WebParts.WebPart> 에서 파생 되었는지 여부에 관계 없이 서버 컨트롤을 추적할 수</xref:System.Web.UI.WebControls.WebParts.WebPartManager> 는 웹 파트 속성"
  example:
  - "The following code example demonstrates how to use the WebParts property programmatically to access individual <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Notice that in the declarative markup for the Web page, within the `<asp:webpartzone>` element there are two standard ASP.NET server controls. Although these do not inherit from the <xref:System.Web.UI.WebControls.WebParts.WebPart> class, because they are in a zone they will be wrapped with a <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> object at run time, and thus will be included in the collection referenced by the WebParts property. You could also add custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, user controls, or custom server controls in this zone, and they would be handled the same way.  \n  \n [!code-vb[WebParts_WebPartManager_WebParts#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_992_1.aspx)]\n [!code-cs[WebParts_WebPartManager_WebParts#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_992_1.aspx)]  \n  \n Note that for the code example to work, you must add a setting in the Web.config file to enable exporting Web Parts description files. Ensure that you have a Web.config file in the same directory as the Web page for this code example. Within the `<system.web>` section, make sure there is a `<webParts>` element with an `enableExport` attribute set to `true`, as in the following markup.  \n  \n `<webParts enableExport=\"true\">`  \n  \n `...`  \n  \n `</webParts>`  \n  \n After you load the page into a browser, if you click the **WebPart Count** button, the code uses the WebParts property to return the count of controls in the collection. If you click the **Hide Calendar Title** button, the code changes the calendar so that it renders with only a border and not a title."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartCollection WebParts { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartCollection&quot;> </xref> 집합에 대 한 참조를 포함 하는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.WebParts*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected
  id: WebPartsConnected
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartsConnected
  nameWithType: WebPartManager.WebPartsConnected
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "특정 연결 간에 설정 된 후 발생 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤 (또는 서버 또는 사용자 컨트롤)."
  remarks: "WebPartsConnected 이벤트와 연결 된는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected%2A>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected%2A> 연결이 완료 되었음을 확인 했으면 하려는 경우도 팩트를 사용자에 게 알리는 또는 페이지의 사용자 인터페이스 (UI)를 변경할 수도 있으므로 이벤트 유용 합니다. 예를 들어 두 컨트롤 간에 성공적으로 연결을 제안 하는 몇 가지 그래픽 이미지를 표시 하려는 경우 간단한 메시지를 표시 한 후 변경 페이지 디스플레이 모드를 또는 찾아보기 모드입니다.       페이지 개발자가 추가 하 여이 이벤트와 사용자 지정 이벤트 처리기에 연결할 수는 `OnWebPartsConnected` 특성을 `<asp:webpartmanager>` 페이지에서 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsConnected;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting
  id: WebPartsConnecting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartsConnecting
  nameWithType: WebPartManager.WebPartsConnecting
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "간의 연결을 만드는 과정에서 발생 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 컨트롤 (또는 서버 또는 사용자 컨트롤에는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 영역)."
  remarks: "WebPartsConnecting 이벤트에 의해 발생 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting%2A>메서드는 연결 작업이 시작 신호를 줍니다 (예를 들어 사용자가 컨트롤을 선택 하 고 연결 동사를 클릭), 아직 완료 되지.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting%2A> 이벤트 완료 되기 전에 연결을 취소할 수를 제공 합니다. 연결이 성공적으로 완료 되 면이 이벤트가 다음는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>       페이지 개발자가 추가 하 여 이벤트에 대 한 사용자 지정 처리기를 추가할 수는 `OnWebPartsConnecting` 특성을 `<asp:webpartmanager>` 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsConnecting;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected
  id: WebPartsDisconnected
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartsDisconnected
  nameWithType: WebPartManager.WebPartsDisconnected
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "두 연결 후에 발생 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 없거나 서버 컨트롤 종료 되었습니다."
  remarks: "WebPartsDisconnected 이벤트와 연결 된는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected%2A>메서드.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected%2A> 이 이벤트는 연결이 종료 되었음을 확인 했으면 하려는 사용자에 게 알립니다를 코드에서 일부 정리 작업을 수행 하거나 사용자 인터페이스 (UI)에 대 한 다른 변경 때문에 유용 합니다.       페이지 개발자가 추가 하 여이 이벤트와 사용자 지정 이벤트 처리기에 연결할 수는 `OnWebPartsDisConnected` 특성을 `<asp:webpartmanager>` 페이지에서 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsDisconnected;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting
  id: WebPartsDisconnecting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartsDisconnecting
  nameWithType: WebPartManager.WebPartsDisconnecting
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "연결을 종료 프로세스 중에 발생 이전에 연결한 간의 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> 또는 서버 컨트롤입니다."
  remarks: "WebPartsDisconnecting 이벤트에 의해 발생 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting%2A>메서드를 알립니다 사용자가 연결 끊기 동사를 클릭 또는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>그렇지 않으면 메서드가 호출 되었습니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting%2A> 이벤트 완료 되기 전에 연결을 종료 하는 과정을 취소할 수를 제공 합니다. 연결이 성공적으로 종료 되 면이 이벤트가 다음는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>       페이지 개발자가 추가 하 여 이벤트에 대 한 사용자 지정 처리기를 추가할 수는 `OnWebPartsDisconnecting` 특성을 `<asp:webpartmanager>` 요소와 특성에 사용자 지정 메서드 이름을 할당 합니다.       일반적으로 한 연결을 종료 하는 사용자의 작업의 직접적인 결과로 WebPartsDisconnecting 이벤트가 발생 하는 경우 이벤트를 취소할 수 있습니다. 그러나 이벤트를 취소할 수 없는 몇 가지 시나리오가 있습니다. 첫 번째 시나리오는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone>컨트롤이 삭제 되는 <xref:System.Web.UI.WebControls.WebParts.WebPart>분리는 그렇지 않은 경우, 포함 된 컨트롤 모두 닫아야 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZone> 이 경우에 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>닫히는 제어는 <xref:System.Web.UI.WebControls.WebParts.WebPart>컨트롤, 사용자 및가 아닌 것도 할 수 있어야 중단 될 가능성 없이 연결 된 컨트롤의 연결을 종료를 정리 하 고 닫으면 모든 컨트롤의 프로세스를 완료할 수 있도록 합니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> 따라서이 시나리오는 WebPartsDisconnecting 설계상 메서드 취소할 수 없습니다. 취소할 수 있는 관련된 이벤트에 대 한 참조는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>이벤트.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>       WebPartsDisconnecting 이벤트를 취소할 수 없는 두 번째 시나리오는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A>메서드 (이 예를 들어 페이지에 각 요청 하는 동안 호출)를 호출 하 고 일부 유형의 페이지에는 기존 연결에 충돌.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> 예를 들어 한 사용자 제어 y로 제어 x가 하지만 공유 사용자가 컨트롤 제어 z, x와 아직 x 컨트롤은 여러 연결을 구성할 수 없습니다. 이 경우 연결에 대 한 개별 사용자의 설정을, 우선 순위가 높은 및 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>호출 하 여 충돌을 해결 하는 제어는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>메서드 간의 연결을 종료 하 고 x 및 특정 사용자에 대 한 z.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> 이 연결을이 끊는 충돌을 해결 하는 데 필수적인 이기 때문에이 시나리오는 WebPartsDisconnecting 디자인 하 여 이벤트를 취소할 수 없습니다.       WebPartsDisconnecting 메서드를 취소할 수 없는 세 번째 시나리오는 <xref:System.Web.UI.WebControls.WebParts.WebPart>또는 현재 연결 된 서버 컨트롤 삭제 되거나 닫힙니다.</xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤이 페이지에서 제거 하려는 확실 하 게 되므로 연결을 제거 하는 논리적으로 필수적입니다. 따라서,는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤이 호출는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>디자인으로는 이벤트를 취소 될 가능성이, 메서드는 WebPartsDisconnecting 이벤트를 발생 시킵니다.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsDisconnecting;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Zones
  id: Zones
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Zones
  nameWithType: WebPartManager.Zones
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Zones
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "모든 컬렉션에 대 한 참조는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 웹 페이지의 영역입니다."
  remarks: "영역 속성은 사용는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>컨트롤을 추적 하는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>웹 페이지에 있는 영역의.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> 참고 속성이 모든 형식의 영역을 참조 하지 않습니다 파생 되는 영역만 참조는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>클래스를 포함 하 여 <xref:System.Web.UI.WebControls.WebParts.WebPartZone>영역.</xref:System.Web.UI.WebControls.WebParts.WebPartZone> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       속성에서 참조 하는 컬렉션이 읽기 전용 이지만, 개별 개체 컬렉션에 액세스 하 고 프로그래밍 방식으로 작업을 사용할 수 있습니다."
  example:
  - "The following code example demonstrates how to use the Zones property programmatically to access individual <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone controls. Notice that in the declarative markup for the Web page, there are two `<asp:webpartzone>` elements, each containing a server control. In the `<script>` section of the page, the code uses the Zones property to access the individual zones, listing all the zone IDs and then changing the background color on the second zone.  \n  \n [!code-cs[WebParts_WebPartManager_Zones#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_860_1.aspx)]\n [!code-vb[WebParts_WebPartManager_Zones#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_860_1.aspx)]  \n  \n Note that for the code example to work, you must add a setting in the Web.config file to enable exporting Web Parts description files. Ensure that you have a Web.config file in the same directory as the Web page for this code example. Within the `<system.web>` section, make sure there is a `<webParts>` element with an `enableExport` attribute set to `true`, as in the following markup.  \n  \n `<webParts enableExport=\"true\">`  \n  \n `...`  \n  \n `</webParts>`  \n  \n After you load the page into a browser, if you click the **List Zone IDs** button, the code uses the Zones property to list the IDs of all zones in the collection. If you click the **Change Zone BackColor** button, the code changes the background color of the second zone."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartZoneCollection Zones { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartZoneCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneCollection&quot;> </xref> 집합이 참조 하는 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> 영역입니다."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Zones*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.Control
  isExternal: false
  name: System.Web.UI.Control
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.IO.EndOfStreamException
  isExternal: true
  name: System.IO.EndOfStreamException
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.#ctor
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartManager()
  nameWithType: WebPartManager.WebPartManager()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartManager()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ActivateConnections()
  nameWithType: WebPartManager.ActivateConnections()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: AddWebPart(WebPart,WebPartZoneBase,Int32)
  nameWithType: WebPartManager.AddWebPart(WebPart,WebPartZoneBase,Int32)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(WebPart,WebPartZoneBase,Int32)
- uid: System.Web.UI.WebControls.WebParts.WebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPart
  nameWithType: WebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartZoneBase
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartZoneBase
  nameWithType: WebPartZoneBase
  fullName: System.Web.UI.WebControls.WebParts.WebPartZoneBase
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: AuthorizeWebPart
  nameWithType: WebPartManager.AuthorizeWebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartAuthorizationEventHandler
  nameWithType: WebPartAuthorizationEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: AvailableTransformers
  nameWithType: WebPartManager.AvailableTransformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers
- uid: System.Web.UI.WebControls.WebParts.TransformerTypeCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: TransformerTypeCollection
  nameWithType: TransformerTypeCollection
  fullName: System.Web.UI.WebControls.WebParts.TransformerTypeCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: BeginWebPartConnecting(WebPart)
  nameWithType: WebPartManager.BeginWebPartConnecting(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: BeginWebPartEditing(WebPart)
  nameWithType: WebPartManager.BeginWebPartEditing(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: BrowseDisplayMode
  nameWithType: WebPartManager.BrowseDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDisplayMode
  nameWithType: WebPartDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  nameWithType: WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  nameWithType: WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformer
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformer
  nameWithType: WebPartTransformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformer
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CatalogDisplayMode
  nameWithType: WebPartManager.CatalogDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CheckRenderClientScript()
  nameWithType: WebPartManager.CheckRenderClientScript()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CloseProviderWarning
  nameWithType: WebPartManager.CloseProviderWarning
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CloseWebPart(WebPart)
  nameWithType: WebPartManager.CloseWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ConnectDisplayMode
  nameWithType: WebPartManager.ConnectDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Connections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Connections
  nameWithType: WebPartManager.Connections
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Connections
- uid: System.Web.UI.WebControls.WebParts.WebPartConnectionCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartConnectionCollection
  nameWithType: WebPartConnectionCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnectionCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ConnectionsActivated
  nameWithType: WebPartManager.ConnectionsActivated
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ConnectionsActivating
  nameWithType: WebPartManager.ConnectionsActivating
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  nameWithType: WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartConnection
  nameWithType: WebPartConnection
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  nameWithType: WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Controls
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Controls
  nameWithType: WebPartManager.Controls
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Controls
- uid: System.Web.UI.ControlCollection
  parent: System.Web.UI
  isExternal: false
  name: ControlCollection
  nameWithType: ControlCollection
  fullName: System.Web.UI.ControlCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CopyWebPart(WebPart)
  nameWithType: WebPartManager.CopyWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateAvailableTransformers()
  nameWithType: WebPartManager.CreateAvailableTransformers()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateControlCollection()
  nameWithType: WebPartManager.CreateControlCollection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateDisplayModes()
  nameWithType: WebPartManager.CreateDisplayModes()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes()
- uid: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDisplayModeCollection
  nameWithType: WebPartDisplayModeCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateDynamicConnectionID()
  nameWithType: WebPartManager.CreateDynamicConnectionID()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(System.Type)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateDynamicWebPartID(Type)
  nameWithType: WebPartManager.CreateDynamicWebPartID(Type)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(System.String,System.String,System.String,System.String,System.String)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateErrorWebPart(String,String,String,String,String)
  nameWithType: WebPartManager.CreateErrorWebPart(String,String,String,String,String)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(String,String,String,String,String)
- uid: System.Web.UI.WebControls.WebParts.ErrorWebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ErrorWebPart
  nameWithType: ErrorWebPart
  fullName: System.Web.UI.WebControls.WebParts.ErrorWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreatePersonalization()
  nameWithType: WebPartManager.CreatePersonalization()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization()
- uid: System.Web.UI.WebControls.WebParts.WebPartPersonalization
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartPersonalization
  nameWithType: WebPartPersonalization
  fullName: System.Web.UI.WebControls.WebParts.WebPartPersonalization
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateWebPart(Control)
  nameWithType: WebPartManager.CreateWebPart(Control)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(Control)
- uid: System.Web.UI.WebControls.WebParts.GenericWebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: GenericWebPart
  nameWithType: GenericWebPart
  fullName: System.Web.UI.WebControls.WebParts.GenericWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DeleteWarning
  nameWithType: WebPartManager.DeleteWarning
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DeleteWebPart(WebPart)
  nameWithType: WebPartManager.DeleteWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DesignDisplayMode
  nameWithType: WebPartManager.DesignDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisconnectWebPart(WebPart)
  nameWithType: WebPartManager.DisconnectWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisconnectWebParts(WebPartConnection)
  nameWithType: WebPartManager.DisconnectWebParts(WebPartConnection)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(WebPartConnection)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisplayMode
  nameWithType: WebPartManager.DisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisplayModeChanged
  nameWithType: WebPartManager.DisplayModeChanged
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged
- uid: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDisplayModeEventHandler
  nameWithType: WebPartDisplayModeEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisplayModeChanging
  nameWithType: WebPartManager.DisplayModeChanging
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging
- uid: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDisplayModeCancelEventHandler
  nameWithType: WebPartDisplayModeCancelEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisplayModes
  nameWithType: WebPartManager.DisplayModes
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DynamicConnections
  nameWithType: WebPartManager.DynamicConnections
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EditDisplayMode
  nameWithType: WebPartManager.EditDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EnableClientScript
  nameWithType: WebPartManager.EnableClientScript
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EnableTheming
  nameWithType: WebPartManager.EnableTheming
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EndWebPartConnecting()
  nameWithType: WebPartManager.EndWebPartConnecting()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EndWebPartEditing()
  nameWithType: WebPartManager.EndWebPartEditing()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ExportSensitiveDataWarning
  nameWithType: WebPartManager.ExportSensitiveDataWarning
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ExportWebPart(WebPart,XmlWriter)
  nameWithType: WebPartManager.ExportWebPart(WebPart,XmlWriter)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(WebPart,XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Focus
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Focus()
  nameWithType: WebPartManager.Focus()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Focus()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetConsumerConnectionPoints(WebPart)
  nameWithType: WebPartManager.GetConsumerConnectionPoints(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(WebPart)
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConsumerConnectionPointCollection
  nameWithType: ConsumerConnectionPointCollection
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager(System.Web.UI.Page)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetCurrentWebPartManager(Page)
  nameWithType: WebPartManager.GetCurrentWebPartManager(Page)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager(Page)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartManager
  nameWithType: WebPartManager
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager
- uid: System.Web.UI.Page
  parent: System.Web.UI
  isExternal: false
  name: Page
  nameWithType: Page
  fullName: System.Web.UI.Page
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetDisplayTitle(WebPart)
  nameWithType: WebPartManager.GetDisplayTitle(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetExportUrl(WebPart)
  nameWithType: WebPartManager.GetExportUrl(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetGenericWebPart(Control)
  nameWithType: WebPartManager.GetGenericWebPart(Control)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart(Control)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetProviderConnectionPoints(WebPart)
  nameWithType: WebPartManager.GetProviderConnectionPoints(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(WebPart)
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ProviderConnectionPointCollection
  nameWithType: ProviderConnectionPointCollection
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(System.Xml.XmlReader,System.String@)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ImportWebPart(XmlReader,String)
  nameWithType: WebPartManager.ImportWebPart(XmlReader,String)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(XmlReader,String)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Internals
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Internals
  nameWithType: WebPartManager.Internals
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Internals
- uid: System.Web.UI.WebControls.WebParts.WebPartManagerInternals
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartManagerInternals
  nameWithType: WebPartManagerInternals
  fullName: System.Web.UI.WebControls.WebParts.WebPartManagerInternals
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: IsAuthorized(WebPart)
  nameWithType: WebPartManager.IsAuthorized(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: IsAuthorized(Type,String,String,Boolean)
  nameWithType: WebPartManager.IsAuthorized(Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(Type,String,String,Boolean)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: IsCustomPersonalizationStateDirty
  nameWithType: WebPartManager.IsCustomPersonalizationStateDirty
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState(System.Object)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: LoadControlState(Object)
  nameWithType: WebPartManager.LoadControlState(Object)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: LoadCustomPersonalizationState(PersonalizationDictionary)
  nameWithType: WebPartManager.LoadCustomPersonalizationState(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(PersonalizationDictionary)
- uid: System.Web.UI.WebControls.WebParts.PersonalizationDictionary
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: PersonalizationDictionary
  nameWithType: PersonalizationDictionary
  fullName: System.Web.UI.WebControls.WebParts.PersonalizationDictionary
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: MediumPermissionSet
  nameWithType: WebPartManager.MediumPermissionSet
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: MinimalPermissionSet
  nameWithType: WebPartManager.MinimalPermissionSet
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: MoveWebPart(WebPart,WebPartZoneBase,Int32)
  nameWithType: WebPartManager.MoveWebPart(WebPart,WebPartZoneBase,Int32)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(WebPart,WebPartZoneBase,Int32)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnAuthorizeWebPart(WebPartAuthorizationEventArgs)
  nameWithType: WebPartManager.OnAuthorizeWebPart(WebPartAuthorizationEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(WebPartAuthorizationEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartAuthorizationEventArgs
  nameWithType: WebPartAuthorizationEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnConnectionsActivated(EventArgs)
  nameWithType: WebPartManager.OnConnectionsActivated(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnConnectionsActivating(EventArgs)
  nameWithType: WebPartManager.OnConnectionsActivating(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(EventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnDisplayModeChanged(WebPartDisplayModeEventArgs)
  nameWithType: WebPartManager.OnDisplayModeChanged(WebPartDisplayModeEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(WebPartDisplayModeEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDisplayModeEventArgs
  nameWithType: WebPartDisplayModeEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnDisplayModeChanging(WebPartDisplayModeCancelEventArgs)
  nameWithType: WebPartManager.OnDisplayModeChanging(WebPartDisplayModeCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(WebPartDisplayModeCancelEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDisplayModeCancelEventArgs
  nameWithType: WebPartDisplayModeCancelEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: WebPartManager.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnInit(EventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnPreRender(EventArgs)
  nameWithType: WebPartManager.OnPreRender(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender(EventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnSelectedWebPartChanged(WebPartEventArgs)
  nameWithType: WebPartManager.OnSelectedWebPartChanged(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(WebPartEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartEventArgs
  nameWithType: WebPartEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnSelectedWebPartChanging(WebPartCancelEventArgs)
  nameWithType: WebPartManager.OnSelectedWebPartChanging(WebPartCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(WebPartCancelEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartCancelEventArgs
  nameWithType: WebPartCancelEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnUnload(EventArgs)
  nameWithType: WebPartManager.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload(EventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartAdded(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartAdded(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(WebPartEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartAdding(WebPartAddingEventArgs)
  nameWithType: WebPartManager.OnWebPartAdding(WebPartAddingEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(WebPartAddingEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartAddingEventArgs
  nameWithType: WebPartAddingEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartClosed(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartClosed(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(WebPartEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartClosing(WebPartCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartClosing(WebPartCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(WebPartCancelEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartDeleted(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartDeleted(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(WebPartEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartDeleting(WebPartCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartDeleting(WebPartCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(WebPartCancelEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartMoved(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartMoved(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(WebPartEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartMoving(WebPartMovingEventArgs)
  nameWithType: WebPartManager.OnWebPartMoving(WebPartMovingEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(WebPartMovingEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartMovingEventArgs
  nameWithType: WebPartMovingEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsConnected(WebPartConnectionsEventArgs)
  nameWithType: WebPartManager.OnWebPartsConnected(WebPartConnectionsEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(WebPartConnectionsEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartConnectionsEventArgs
  nameWithType: WebPartConnectionsEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsConnecting(WebPartConnectionsCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartsConnecting(WebPartConnectionsCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(WebPartConnectionsCancelEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartConnectionsCancelEventArgs
  nameWithType: WebPartConnectionsCancelEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsDisconnected(WebPartConnectionsEventArgs)
  nameWithType: WebPartManager.OnWebPartsDisconnected(WebPartConnectionsEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(WebPartConnectionsEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsDisconnecting(WebPartConnectionsCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartsDisconnecting(WebPartConnectionsCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(WebPartConnectionsCancelEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Personalization
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Personalization
  nameWithType: WebPartManager.Personalization
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Personalization
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: RegisterClientScript()
  nameWithType: WebPartManager.RegisterClientScript()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Render(HtmlTextWriter)
  nameWithType: WebPartManager.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Render(HtmlTextWriter)
- uid: System.Web.UI.HtmlTextWriter
  parent: System.Web.UI
  isExternal: false
  name: HtmlTextWriter
  nameWithType: HtmlTextWriter
  fullName: System.Web.UI.HtmlTextWriter
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SaveControlState()
  nameWithType: WebPartManager.SaveControlState()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SaveCustomPersonalizationState(PersonalizationDictionary)
  nameWithType: WebPartManager.SaveCustomPersonalizationState(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(PersonalizationDictionary)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SelectedWebPart
  nameWithType: WebPartManager.SelectedWebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SelectedWebPartChanged
  nameWithType: WebPartManager.SelectedWebPartChanged
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged
- uid: System.Web.UI.WebControls.WebParts.WebPartEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartEventHandler
  nameWithType: WebPartEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SelectedWebPartChanging
  nameWithType: WebPartManager.SelectedWebPartChanging
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging
- uid: System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartCancelEventHandler
  nameWithType: WebPartCancelEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SetPersonalizationDirty()
  nameWithType: WebPartManager.SetPersonalizationDirty()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SetSelectedWebPart(WebPart)
  nameWithType: WebPartManager.SetSelectedWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SkinID
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SkinID
  nameWithType: WebPartManager.SkinID
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SkinID
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: StaticConnections
  nameWithType: WebPartManager.StaticConnections
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SupportedDisplayModes
  nameWithType: WebPartManager.SupportedDisplayModes
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary)
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary)
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: TrackViewState()
  nameWithType: WebPartManager.TrackViewState()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Visible
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Visible
  nameWithType: WebPartManager.Visible
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Visible
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartAdded
  nameWithType: WebPartManager.WebPartAdded
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartAdding
  nameWithType: WebPartManager.WebPartAdding
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding
- uid: System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartAddingEventHandler
  nameWithType: WebPartAddingEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartClosed
  nameWithType: WebPartManager.WebPartClosed
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartClosing
  nameWithType: WebPartManager.WebPartClosing
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartDeleted
  nameWithType: WebPartManager.WebPartDeleted
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartDeleting
  nameWithType: WebPartManager.WebPartDeleting
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartMoved
  nameWithType: WebPartManager.WebPartMoved
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartMoving
  nameWithType: WebPartManager.WebPartMoving
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving
- uid: System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartMovingEventHandler
  nameWithType: WebPartMovingEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebParts
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebParts
  nameWithType: WebPartManager.WebParts
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebParts
- uid: System.Web.UI.WebControls.WebParts.WebPartCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartCollection
  nameWithType: WebPartCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartsConnected
  nameWithType: WebPartManager.WebPartsConnected
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected
- uid: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartConnectionsEventHandler
  nameWithType: WebPartConnectionsEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartsConnecting
  nameWithType: WebPartManager.WebPartsConnecting
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting
- uid: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartConnectionsCancelEventHandler
  nameWithType: WebPartConnectionsCancelEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartsDisconnected
  nameWithType: WebPartManager.WebPartsDisconnected
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartsDisconnecting
  nameWithType: WebPartManager.WebPartsDisconnecting
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Zones
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Zones
  nameWithType: WebPartManager.Zones
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Zones
- uid: System.Web.UI.WebControls.WebParts.WebPartZoneCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartZoneCollection
  nameWithType: WebPartZoneCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartZoneCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.#ctor*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartManager
  nameWithType: WebPartManager.WebPartManager
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ActivateConnections
  nameWithType: WebPartManager.ActivateConnections
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: AddWebPart
  nameWithType: WebPartManager.AddWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: AvailableTransformers
  nameWithType: WebPartManager.AvailableTransformers
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: BeginWebPartConnecting
  nameWithType: WebPartManager.BeginWebPartConnecting
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: BeginWebPartEditing
  nameWithType: WebPartManager.BeginWebPartEditing
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CanConnectWebParts
  nameWithType: WebPartManager.CanConnectWebParts
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CheckRenderClientScript
  nameWithType: WebPartManager.CheckRenderClientScript
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CloseProviderWarning
  nameWithType: WebPartManager.CloseProviderWarning
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CloseWebPart
  nameWithType: WebPartManager.CloseWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Connections*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Connections
  nameWithType: WebPartManager.Connections
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ConnectWebParts
  nameWithType: WebPartManager.ConnectWebParts
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Controls*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Controls
  nameWithType: WebPartManager.Controls
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CopyWebPart
  nameWithType: WebPartManager.CopyWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateAvailableTransformers
  nameWithType: WebPartManager.CreateAvailableTransformers
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateControlCollection
  nameWithType: WebPartManager.CreateControlCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateDisplayModes
  nameWithType: WebPartManager.CreateDisplayModes
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateDynamicConnectionID
  nameWithType: WebPartManager.CreateDynamicConnectionID
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateDynamicWebPartID
  nameWithType: WebPartManager.CreateDynamicWebPartID
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateErrorWebPart
  nameWithType: WebPartManager.CreateErrorWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreatePersonalization
  nameWithType: WebPartManager.CreatePersonalization
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateWebPart
  nameWithType: WebPartManager.CreateWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DeleteWarning
  nameWithType: WebPartManager.DeleteWarning
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DeleteWebPart
  nameWithType: WebPartManager.DeleteWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisconnectWebPart
  nameWithType: WebPartManager.DisconnectWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisconnectWebParts
  nameWithType: WebPartManager.DisconnectWebParts
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisplayMode
  nameWithType: WebPartManager.DisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisplayModes
  nameWithType: WebPartManager.DisplayModes
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DynamicConnections
  nameWithType: WebPartManager.DynamicConnections
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EnableClientScript
  nameWithType: WebPartManager.EnableClientScript
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EnableTheming
  nameWithType: WebPartManager.EnableTheming
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EndWebPartConnecting
  nameWithType: WebPartManager.EndWebPartConnecting
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EndWebPartEditing
  nameWithType: WebPartManager.EndWebPartEditing
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ExportSensitiveDataWarning
  nameWithType: WebPartManager.ExportSensitiveDataWarning
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ExportWebPart
  nameWithType: WebPartManager.ExportWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Focus*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Focus
  nameWithType: WebPartManager.Focus
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetConsumerConnectionPoints
  nameWithType: WebPartManager.GetConsumerConnectionPoints
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetCurrentWebPartManager
  nameWithType: WebPartManager.GetCurrentWebPartManager
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetDisplayTitle
  nameWithType: WebPartManager.GetDisplayTitle
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetExportUrl
  nameWithType: WebPartManager.GetExportUrl
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetGenericWebPart
  nameWithType: WebPartManager.GetGenericWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetProviderConnectionPoints
  nameWithType: WebPartManager.GetProviderConnectionPoints
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ImportWebPart
  nameWithType: WebPartManager.ImportWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Internals*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Internals
  nameWithType: WebPartManager.Internals
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: IsAuthorized
  nameWithType: WebPartManager.IsAuthorized
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: IsCustomPersonalizationStateDirty
  nameWithType: WebPartManager.IsCustomPersonalizationStateDirty
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: LoadControlState
  nameWithType: WebPartManager.LoadControlState
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: LoadCustomPersonalizationState
  nameWithType: WebPartManager.LoadCustomPersonalizationState
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: MediumPermissionSet
  nameWithType: WebPartManager.MediumPermissionSet
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: MinimalPermissionSet
  nameWithType: WebPartManager.MinimalPermissionSet
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: MoveWebPart
  nameWithType: WebPartManager.MoveWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnAuthorizeWebPart
  nameWithType: WebPartManager.OnAuthorizeWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnConnectionsActivated
  nameWithType: WebPartManager.OnConnectionsActivated
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnConnectionsActivating
  nameWithType: WebPartManager.OnConnectionsActivating
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnDisplayModeChanged
  nameWithType: WebPartManager.OnDisplayModeChanged
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnDisplayModeChanging
  nameWithType: WebPartManager.OnDisplayModeChanging
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnInit*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnInit
  nameWithType: WebPartManager.OnInit
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnPreRender
  nameWithType: WebPartManager.OnPreRender
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnSelectedWebPartChanged
  nameWithType: WebPartManager.OnSelectedWebPartChanged
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnSelectedWebPartChanging
  nameWithType: WebPartManager.OnSelectedWebPartChanging
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnUnload
  nameWithType: WebPartManager.OnUnload
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartAdded
  nameWithType: WebPartManager.OnWebPartAdded
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartAdding
  nameWithType: WebPartManager.OnWebPartAdding
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartClosed
  nameWithType: WebPartManager.OnWebPartClosed
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartClosing
  nameWithType: WebPartManager.OnWebPartClosing
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartDeleted
  nameWithType: WebPartManager.OnWebPartDeleted
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartDeleting
  nameWithType: WebPartManager.OnWebPartDeleting
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartMoved
  nameWithType: WebPartManager.OnWebPartMoved
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartMoving
  nameWithType: WebPartManager.OnWebPartMoving
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsConnected
  nameWithType: WebPartManager.OnWebPartsConnected
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsConnecting
  nameWithType: WebPartManager.OnWebPartsConnecting
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsDisconnected
  nameWithType: WebPartManager.OnWebPartsDisconnected
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsDisconnecting
  nameWithType: WebPartManager.OnWebPartsDisconnecting
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Personalization*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Personalization
  nameWithType: WebPartManager.Personalization
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: RegisterClientScript
  nameWithType: WebPartManager.RegisterClientScript
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Render*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Render
  nameWithType: WebPartManager.Render
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SaveControlState
  nameWithType: WebPartManager.SaveControlState
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SaveCustomPersonalizationState
  nameWithType: WebPartManager.SaveCustomPersonalizationState
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SelectedWebPart
  nameWithType: WebPartManager.SelectedWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SetPersonalizationDirty
  nameWithType: WebPartManager.SetPersonalizationDirty
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SetSelectedWebPart
  nameWithType: WebPartManager.SetSelectedWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SkinID*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SkinID
  nameWithType: WebPartManager.SkinID
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: StaticConnections
  nameWithType: WebPartManager.StaticConnections
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SupportedDisplayModes
  nameWithType: WebPartManager.SupportedDisplayModes
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.Load
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Load
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.Save
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Save
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: TrackViewState
  nameWithType: WebPartManager.TrackViewState
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Visible*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Visible
  nameWithType: WebPartManager.Visible
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebParts*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebParts
  nameWithType: WebPartManager.WebParts
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Zones*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Zones
  nameWithType: WebPartManager.Zones
