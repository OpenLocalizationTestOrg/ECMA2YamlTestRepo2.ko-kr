### YamlMime:ManagedReference
items:
- uid: System.Activities.Presentation.Model.ModelItem
  id: ModelItem
  children:
  - System.Activities.Presentation.Model.ModelItem.#ctor
  - System.Activities.Presentation.Model.ModelItem.Attributes
  - System.Activities.Presentation.Model.ModelItem.BeginEdit
  - System.Activities.Presentation.Model.ModelItem.BeginEdit(System.Boolean)
  - System.Activities.Presentation.Model.ModelItem.BeginEdit(System.String)
  - System.Activities.Presentation.Model.ModelItem.BeginEdit(System.String,System.Boolean)
  - System.Activities.Presentation.Model.ModelItem.Content
  - System.Activities.Presentation.Model.ModelItem.GetCurrentValue
  - System.Activities.Presentation.Model.ModelItem.ItemType
  - System.Activities.Presentation.Model.ModelItem.Name
  - System.Activities.Presentation.Model.ModelItem.Parent
  - System.Activities.Presentation.Model.ModelItem.Parents
  - System.Activities.Presentation.Model.ModelItem.Properties
  - System.Activities.Presentation.Model.ModelItem.PropertyChanged
  - System.Activities.Presentation.Model.ModelItem.Root
  - System.Activities.Presentation.Model.ModelItem.Source
  - System.Activities.Presentation.Model.ModelItem.Sources
  - System.Activities.Presentation.Model.ModelItem.ToString
  - System.Activities.Presentation.Model.ModelItem.View
  langs:
  - csharp
  name: ModelItem
  nameWithType: ModelItem
  fullName: System.Activities.Presentation.Model.ModelItem
  type: Class
  summary: "편집 모델의 단일 항목을 나타냅니다. 항목 색 또는 정수 복잡 한 데이터 구조에서 아무 것도 될 수 있습니다."
  remarks: "항목의 속성을 통해 액세스할 수 있습니다는 <xref:System.Activities.Presentation.Model.ModelItem.Properties%2A>컬렉션 속성의 값을 변경 합니다.</xref:System.Activities.Presentation.Model.ModelItem.Properties%2A>       ModelItem은 기본 데이터 모델 디자이너의 래퍼입니다. 기본 모델을 통해 액세스할 수 있습니다는 <xref:System.Activities.Presentation.Model.ModelItem.GetCurrentValue%2A>메서드.</xref:System.Activities.Presentation.Model.ModelItem.GetCurrentValue%2A>      > [!NOTE] >에서 반환 된 개체에 적용 한 변경 내용에서 <xref:System.Activities.Presentation.Model.ModelItem.GetCurrentValue%2A>메서드 디자이너의 serialization 및 실행 취소 시스템에 의해 적용 되지 것입니다.</xref:System.Activities.Presentation.Model.ModelItem.GetCurrentValue%2A>"
  example:
  - "The ModelItem can be thought of as a thin proxy for an object at which it points. First define a simple `Animal` object.  \n  \n```  \n  \npublic class Animal  \n{  \n    // simple property  \n    public string Name { get; set; }  \n    // complex property   \n    public Location Residence { get; set; }   \n    // list   \n    public List<Animal> CloseRelatives { get; set; }  \n    // dictionary  \n    public Dictionary<string, object> Features { get; set; }   \n}  \n  \npublic class Location  \n{  \n    public string StreetAddress { get; set; }  \n    public string City { get; set; }  \n    public string State { get; set; }   \n}  \n  \n```  \n  \n Secondly, create an instance of that `Animal` and a ModelItem that is a proxy for it. The object can then be retrieved by calling <xref:System.Activities.Presentation.Model.ModelItem.GetCurrentValue%2A>. The following code also shows how to use other properties defined by ModelItem.  \n  \n```  \n  \nEditingContext ec = new EditingContext();  \nvar companion1 = new Animal { Name = \"Houdini the parakeet\" };  \nvar companion2 = new Animal { Name = \"Groucho the fish\" };  \nvar animal = new Animal   \n   {  \n      Name = \"Sasha the pug\",  \n      Residence = new Location   \n      {  \n         StreetAddress = \"123 Main Street\",  \n         City = \"AnyTown\",  \n         State = \"Washington\"  \n      },  \n      Features = new Dictionary<string, object> {   \n         {\"noise\", \"snort\" },  \n         {\"MeanTimeUntilNaps\", TimeSpan.FromMinutes(15) }  \n      },  \n      CloseRelatives = new List<Animal> { companion1, companion2 }   \n   };  \nModelTreeManager mtm = new ModelTreeManager(ec);  mtm.Load(animal);  \nModelItem mi = mtm.Root;  \n  \n//Testing other properties of the class  \nModelItem root = mtm.Root;  \nAssert.IsTrue(root.GetCurrentValue() == animal, \"GetCurrentValue() returns same object\");  \nAssert.IsTrue(root.ItemType == typeof(Animal),\"ItemType describes the item\");  \nAssert.IsTrue(root.Parent == null,\"root parent is null\");  \nAssert.IsTrue(root.Source == null, \"root source is null\");  \nAssert.IsTrue(((List<Animal>)root.Properties[\"CloseRelatives\"].ComputedValue)[0] == companion1,   \n   \"ComputedValue of prop == actual object\");  \nAssert.IsFalse(((List<Animal>)root.Properties[\"CloseRelatives\"].ComputedValue)[0] == companion2,   \n   \"ComputedValue of prop == actual object\");  \nAssert.AreEqual(root.Properties[\"Residence\"].  \n   Value.  \n   Properties[\"StreetAddress\"].  \n   Value.GetCurrentValue(), \"123 Main Street\", \"get actual value back out\");  \nAssert.AreEqual(root, root.Properties[\"Residence\"].Parent, \"property points to owner\");  \nModelItem location = root.Properties[\"Residence\"].Value;  \nAssert.AreEqual(root.Properties[\"Residence\"], location.Source, \"sources point to the right place\");  \n  \n```"
  syntax:
    content: 'public abstract class ModelItem : System.ComponentModel.INotifyPropertyChanged'
  inheritance:
  - System.Object
  implements:
  - System.ComponentModel.INotifyPropertyChanged
  inheritedMembers: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.#ctor
  id: '#ctor'
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: ModelItem()
  nameWithType: ModelItem.ModelItem()
  fullName: System.Activities.Presentation.Model.ModelItem.ModelItem()
  type: Constructor
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "새 인스턴스를 만듭니다는 <xref href=&quot;System.Activities.Presentation.Model.ModelItem&quot;> </xref> 클래스입니다."
  syntax:
    content: protected ModelItem ();
    parameters: []
  overload: System.Activities.Presentation.Model.ModelItem.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.Attributes
  id: Attributes
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: Attributes
  nameWithType: ModelItem.Attributes
  fullName: System.Activities.Presentation.Model.ModelItem.Attributes
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "이 항목에 대해 선언 된 특성을 가져옵니다."
  syntax:
    content: public abstract System.ComponentModel.AttributeCollection Attributes { get; }
    return:
      type: System.ComponentModel.AttributeCollection
      description: "항목의 특성을 포함 하는 컬렉션입니다."
  overload: System.Activities.Presentation.Model.ModelItem.Attributes*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.BeginEdit
  id: BeginEdit
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: BeginEdit()
  nameWithType: ModelItem.BeginEdit()
  fullName: System.Activities.Presentation.Model.ModelItem.BeginEdit()
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "디자이너의 편집 범위를 엽니다. 편집 범위를 연 후 트랜잭션을 완료 하거나 되돌릴 때까지 모든 개체의 변경 내용이 모두 범위에 저장 됩니다. 편집 범위는 중첩할 수 있지만 순서 대로 커밋해야 합니다."
  remarks: "편집 범위는 여러 모델을 단일 트랜잭션으로 적용할 변경 수 있습니다. 변경 내용을 편집 범위 내의 모든 트랜잭션이 완료 되기 전에 언제 든 지 되돌릴 수 있습니다.       편집 범위는 디자이너 전체에입니다. 디자이너에서 모든 항목에 대해 편집 범위를 만들 수 있습니다. 변경 중인 특정 항목에 대 한 편집 범위를 만들 필요가 없습니다."
  syntax:
    content: public abstract System.Activities.Presentation.Model.ModelEditingScope BeginEdit ();
    parameters: []
    return:
      type: System.Activities.Presentation.Model.ModelEditingScope
      description: "A <xref href=&quot;System.Activities.Presentation.Model.ModelEditingScope&quot;> </xref>는 해야 완료 하거나 되돌려야 합니다."
  overload: System.Activities.Presentation.Model.ModelItem.BeginEdit*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.BeginEdit(System.Boolean)
  id: BeginEdit(System.Boolean)
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: BeginEdit(Boolean)
  nameWithType: ModelItem.BeginEdit(Boolean)
  fullName: System.Activities.Presentation.Model.ModelItem.BeginEdit(Boolean)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "디자이너의 편집 범위를 엽니다."
  syntax:
    content: public virtual System.Activities.Presentation.Model.ModelEditingScope BeginEdit (bool shouldApplyChangesImmediately);
    parameters:
    - id: shouldApplyChangesImmediately
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>변경 내용을 즉시 적용 해야 나타내기 위해 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Activities.Presentation.Model.ModelEditingScope
      description: "A <xref href=&quot;System.Activities.Presentation.Model.ModelEditingScope&quot;> </xref>는 해야 완료 하거나 되돌려야 합니다."
  overload: System.Activities.Presentation.Model.ModelItem.BeginEdit*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.BeginEdit(System.String)
  id: BeginEdit(System.String)
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: BeginEdit(String)
  nameWithType: ModelItem.BeginEdit(String)
  fullName: System.Activities.Presentation.Model.ModelItem.BeginEdit(String)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "디자이너의 편집 범위를 엽니다. 편집 범위를 연 후 트랜잭션을 완료 하거나 되돌릴 때까지 모든 개체의 변경 내용이 모두 범위에 저장 됩니다. 편집 범위는 중첩할 수 있지만 순서 대로 커밋해야 합니다."
  remarks: "편집 범위는 여러 모델을 단일 트랜잭션으로 적용할 변경 수 있습니다. 변경 내용을 편집 범위 내의 모든 트랜잭션이 완료 되기 전에 언제 든 지 되돌릴 수 있습니다.       편집 범위는 디자이너 전체에입니다. 디자이너에서 모든 항목에 대해 편집 범위를 만들 수 있습니다. 변경 중인 특정 항목에 대 한 편집 범위를 만들 필요가 없습니다."
  syntax:
    content: public abstract System.Activities.Presentation.Model.ModelEditingScope BeginEdit (string description);
    parameters:
    - id: description
      type: System.String
      description: "변경의 선택적 설명입니다. 로 설정 됩니다는 <xref:System.Activities.Presentation.Model.ModelEditingScope.Description*>편집 범위의 속성.</xref:System.Activities.Presentation.Model.ModelEditingScope.Description*>"
    return:
      type: System.Activities.Presentation.Model.ModelEditingScope
      description: "A <xref href=&quot;System.Activities.Presentation.Model.ModelEditingScope&quot;> </xref>는 해야 완료 하거나 되돌려야 합니다."
  overload: System.Activities.Presentation.Model.ModelItem.BeginEdit*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.BeginEdit(System.String,System.Boolean)
  id: BeginEdit(System.String,System.Boolean)
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: BeginEdit(String,Boolean)
  nameWithType: ModelItem.BeginEdit(String,Boolean)
  fullName: System.Activities.Presentation.Model.ModelItem.BeginEdit(String,Boolean)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "디자이너의 편집 범위를 엽니다."
  syntax:
    content: public virtual System.Activities.Presentation.Model.ModelEditingScope BeginEdit (string description, bool shouldApplyChangesImmediately);
    parameters:
    - id: description
      type: System.String
      description: "변경의 선택적 설명입니다. 로 설정 됩니다는 <xref:System.Activities.Presentation.Model.ModelEditingScope.Description*>편집 범위의 속성.</xref:System.Activities.Presentation.Model.ModelEditingScope.Description*>"
    - id: shouldApplyChangesImmediately
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>변경 내용을 즉시 적용 해야 나타내기 위해 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Activities.Presentation.Model.ModelEditingScope
      description: "A <xref href=&quot;System.Activities.Presentation.Model.ModelEditingScope&quot;> </xref>는 해야 완료 하거나 되돌려야 합니다."
  overload: System.Activities.Presentation.Model.ModelItem.BeginEdit*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.Content
  id: Content
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: Content
  nameWithType: ModelItem.Content
  fullName: System.Activities.Presentation.Model.ModelItem.Content
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "가져옵니다는 <xref uid=&quot;langword_csharp_ContentPropertyAttribute&quot; name=&quot;ContentPropertyAttribute&quot; href=&quot;&quot;> </xref> 항목 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  syntax:
    content: public abstract System.Activities.Presentation.Model.ModelProperty Content { get; }
    return:
      type: System.Activities.Presentation.Model.ModelProperty
      description: "The <xref uid=&quot;langword_csharp_ContentPropertyAttribute&quot; name=&quot;ContentPropertyAttribute&quot; href=&quot;&quot;></xref> of the item as a <xref href=&quot;System.Activities.Presentation.Model.ModelProperty&quot;></xref>. 경우는 <xref uid=&quot;langword_csharp_ContentPropertyAttribute&quot; name=&quot;ContentPropertyAttribute&quot; href=&quot;&quot;> </xref> 에서 선언 되지 않습니다는 <xref:System.Activities.Presentation.Model.ModelItem.ItemType*>이 항목의 내용 반환 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Activities.Presentation.Model.ModelItem.ItemType*>"
  overload: System.Activities.Presentation.Model.ModelItem.Content*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.GetCurrentValue
  id: GetCurrentValue
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: GetCurrentValue()
  nameWithType: ModelItem.GetCurrentValue()
  fullName: System.Activities.Presentation.Model.ModelItem.GetCurrentValue()
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "기본 모델 개체의 현재 값을 반환 하며는 <xref href=&quot;System.Activities.Presentation.Model.ModelItem&quot;> </xref> 배치 됩니다."
  remarks: "이 개체를 검사할 수 있지만 하면 안 변경 내용을에. 반환 되는 개체의 변경 디자이너에 통합 되지 않습니다. GetCurrentValue 메서드는 개체의 기존 또는 새로운 복제 된 인스턴스 중 하나를 반환할 수 있습니다."
  syntax:
    content: public abstract object GetCurrentValue ();
    parameters: []
    return:
      type: System.Object
      description: "지정 된 기본 모델 개체는 <xref href=&quot;System.Activities.Presentation.Model.ModelItem&quot;> </xref> 은 <xref:System.Object>.</xref:System.Object> 래핑"
  overload: System.Activities.Presentation.Model.ModelItem.GetCurrentValue*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.ItemType
  id: ItemType
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: ItemType
  nameWithType: ModelItem.ItemType
  fullName: System.Activities.Presentation.Model.ModelItem.ItemType
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "항목을 나타내는 개체의 유형을 가져옵니다."
  syntax:
    content: public abstract Type ItemType { get; }
    return:
      type: System.Type
      description: "형식 항목을 나타내는 개체입니다."
  overload: System.Activities.Presentation.Model.ModelItem.ItemType*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.Name
  id: Name
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: Name
  nameWithType: ModelItem.Name
  fullName: System.Activities.Presentation.Model.ModelItem.Name
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "이름 또는 항목의 ID 값을 가져오거나 설정 합니다."
  remarks: "모든 항목 이름이 필요,이 반환할 수 있도록 `null`합니다. 계층에 위치 하 고 항목의 형식에 따라 항상 아닐 이름을 항목에 설정할 수 있습니다. 경우는 <xref:System.Activities.Presentation.Model.ModelItem.ItemType%2A>이 항목의 선언 된 `RuntimeNamePropertyAttribute`, Name 속성은 해당 특성이 속성에 직접 매핑할.</xref:System.Activities.Presentation.Model.ModelItem.ItemType%2A>"
  syntax:
    content: public abstract string Name { get; set; }
    return:
      type: System.String
      description: "이름 또는 <xref:System.String>.</xref:System.String> 항목의 ID"
  overload: System.Activities.Presentation.Model.ModelItem.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.Parent
  id: Parent
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: Parent
  nameWithType: ModelItem.Parent
  fullName: System.Activities.Presentation.Model.ModelItem.Parent
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "이 항목의 부모 항목을 가져옵니다."
  syntax:
    content: public abstract System.Activities.Presentation.Model.ModelItem Parent { get; }
    return:
      type: System.Activities.Presentation.Model.ModelItem
      description: "A <xref href=&quot;System.Activities.Presentation.Model.ModelItem&quot;> </xref> 이 항목의 부모입니다. 항목이 컬렉션 또는 사전에 포함 되 면 컬렉션 또는 사전이 소유 하는 개체가 대신 반환 됩니다."
  overload: System.Activities.Presentation.Model.ModelItem.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.Parents
  id: Parents
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: Parents
  nameWithType: ModelItem.Parents
  fullName: System.Activities.Presentation.Model.ModelItem.Parents
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "이 항목의 모든 부모를 가져옵니다."
  syntax:
    content: public abstract System.Collections.Generic.IEnumerable<System.Activities.Presentation.Model.ModelItem> Parents { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Activities.Presentation.Model.ModelItem}
      description: "이 항목의 부모입니다."
  overload: System.Activities.Presentation.Model.ModelItem.Parents*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.Properties
  id: Properties
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: Properties
  nameWithType: ModelItem.Properties
  fullName: System.Activities.Presentation.Model.ModelItem.Properties
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "이 항목에 대해 공용 속성을 가져옵니다."
  remarks: "반환 되는 속성 집합 편집 범위에 연결 된 속성이 나 변경 내용에 따라 변경 될 수 있습니다."
  syntax:
    content: public abstract System.Activities.Presentation.Model.ModelPropertyCollection Properties { get; }
    return:
      type: System.Activities.Presentation.Model.ModelPropertyCollection
      description: "A <xref href=&quot;System.Activities.Presentation.Model.ModelItemCollection&quot;> </xref> 이 항목의 공용 속성이 들어 있는입니다."
  overload: System.Activities.Presentation.Model.ModelItem.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.PropertyChanged
  id: PropertyChanged
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: PropertyChanged
  nameWithType: ModelItem.PropertyChanged
  fullName: System.Activities.Presentation.Model.ModelItem.PropertyChanged
  type: Event
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "구현 <xref uid=&quot;langword_csharp_INotifyPropertyChanged&quot; name=&quot;INotifyPropertyChanged&quot; href=&quot;&quot;> </xref>합니다. 이 이벤트를 사용 하 여 모델에 변경 내용을 수신 대기 합니다. 이 WPF의 데이터 바인딩 기능 에서도 사용 됩니다."
  remarks: "이러한을 마쳤으면 항목에서 이벤트를 분리 합니다. 이렇게 하지 않으면 가비지 수집기에서 더 이상 사용 중인 항목 삭제 하지 못할 수도 없습니다."
  syntax:
    content: public abstract event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.Root
  id: Root
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: Root
  nameWithType: ModelItem.Root
  fullName: System.Activities.Presentation.Model.ModelItem.Root
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "이 트리의 루트 항목을 가져옵니다."
  syntax:
    content: public abstract System.Activities.Presentation.Model.ModelItem Root { get; }
    return:
      type: System.Activities.Presentation.Model.ModelItem
      description: "A <xref href=&quot;System.Activities.Presentation.Model.ModelItem&quot;> </xref> 이 트리의 루트 즉 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 이 항목이 트리의 일부가 아닌 경우."
  overload: System.Activities.Presentation.Model.ModelItem.Root*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.Source
  id: Source
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: Source
  nameWithType: ModelItem.Source
  fullName: System.Activities.Presentation.Model.ModelItem.Source
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "이 값을 제공 하는 속성을 가져옵니다."
  remarks: "항목이 경우 개체 그래프의 루트를 나타내는,이 반환 됩니다 `null`합니다. 항목이 컬렉션 또는 사전의 멤버인 경우 Source에서 반환 되는 속성 컬렉션 또는 사전이 제공한 의사 속성이 됩니다. 다른 값에 대 한 Source 속성은 속성 값이 설정 실제로 반환 합니다. 따라서 값이 상속 되는 경우 소스는 원래 값을 제공한 확인할 수 있습니다."
  syntax:
    content: public abstract System.Activities.Presentation.Model.ModelProperty Source { get; }
    return:
      type: System.Activities.Presentation.Model.ModelProperty
      description: "A <xref href=&quot;System.Activities.Presentation.Model.ModelProperty&quot;> </xref> 이 값의 소스를 나타내는입니다."
  overload: System.Activities.Presentation.Model.ModelItem.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.Sources
  id: Sources
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: Sources
  nameWithType: ModelItem.Sources
  fullName: System.Activities.Presentation.Model.ModelItem.Sources
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "이 값을 포함 하는 모든 속성을 가져옵니다."
  syntax:
    content: public abstract System.Collections.Generic.IEnumerable<System.Activities.Presentation.Model.ModelProperty> Sources { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Activities.Presentation.Model.ModelProperty}
      description: "이 값의 소스입니다."
  overload: System.Activities.Presentation.Model.ModelItem.Sources*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.ToString
  id: ToString
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: ToString()
  nameWithType: ModelItem.ToString()
  fullName: System.Activities.Presentation.Model.ModelItem.ToString()
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "이 모델 항목에 포함 된 기본 모델 개체의 문자열 표현을 반환 합니다."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "이 모델 항목에 포함 된 기본 모델 개체의 문자열 표현입니다."
  overload: System.Activities.Presentation.Model.ModelItem.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.ModelItem.View
  id: View
  parent: System.Activities.Presentation.Model.ModelItem
  langs:
  - csharp
  name: View
  nameWithType: ModelItem.View
  fullName: System.Activities.Presentation.Model.ModelItem.View
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "가져옵니다는 <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> 이 항목을 그래픽으로 나타내는입니다."
  syntax:
    content: public abstract System.Windows.DependencyObject View { get; }
    return:
      type: System.Windows.DependencyObject
      description: "A <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> 이 항목을 그래픽으로 나타내는 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 표현인 없는 경우."
  overload: System.Activities.Presentation.Model.ModelItem.View*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Activities.Presentation.Model.ModelItem.#ctor
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: ModelItem()
  nameWithType: ModelItem.ModelItem()
  fullName: System.Activities.Presentation.Model.ModelItem.ModelItem()
- uid: System.Activities.Presentation.Model.ModelItem.Attributes
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Attributes
  nameWithType: ModelItem.Attributes
  fullName: System.Activities.Presentation.Model.ModelItem.Attributes
- uid: System.ComponentModel.AttributeCollection
  parent: System.ComponentModel
  isExternal: false
  name: AttributeCollection
  nameWithType: AttributeCollection
  fullName: System.ComponentModel.AttributeCollection
- uid: System.Activities.Presentation.Model.ModelItem.BeginEdit
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: BeginEdit()
  nameWithType: ModelItem.BeginEdit()
  fullName: System.Activities.Presentation.Model.ModelItem.BeginEdit()
- uid: System.Activities.Presentation.Model.ModelEditingScope
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelEditingScope
  nameWithType: ModelEditingScope
  fullName: System.Activities.Presentation.Model.ModelEditingScope
- uid: System.Activities.Presentation.Model.ModelItem.BeginEdit(System.Boolean)
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: BeginEdit(Boolean)
  nameWithType: ModelItem.BeginEdit(Boolean)
  fullName: System.Activities.Presentation.Model.ModelItem.BeginEdit(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Activities.Presentation.Model.ModelItem.BeginEdit(System.String)
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: BeginEdit(String)
  nameWithType: ModelItem.BeginEdit(String)
  fullName: System.Activities.Presentation.Model.ModelItem.BeginEdit(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activities.Presentation.Model.ModelItem.BeginEdit(System.String,System.Boolean)
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: BeginEdit(String,Boolean)
  nameWithType: ModelItem.BeginEdit(String,Boolean)
  fullName: System.Activities.Presentation.Model.ModelItem.BeginEdit(String,Boolean)
- uid: System.Activities.Presentation.Model.ModelItem.Content
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Content
  nameWithType: ModelItem.Content
  fullName: System.Activities.Presentation.Model.ModelItem.Content
- uid: System.Activities.Presentation.Model.ModelProperty
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelProperty
  nameWithType: ModelProperty
  fullName: System.Activities.Presentation.Model.ModelProperty
- uid: System.Activities.Presentation.Model.ModelItem.GetCurrentValue
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: GetCurrentValue()
  nameWithType: ModelItem.GetCurrentValue()
  fullName: System.Activities.Presentation.Model.ModelItem.GetCurrentValue()
- uid: System.Activities.Presentation.Model.ModelItem.ItemType
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: ItemType
  nameWithType: ModelItem.ItemType
  fullName: System.Activities.Presentation.Model.ModelItem.ItemType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Activities.Presentation.Model.ModelItem.Name
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Name
  nameWithType: ModelItem.Name
  fullName: System.Activities.Presentation.Model.ModelItem.Name
- uid: System.Activities.Presentation.Model.ModelItem.Parent
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Parent
  nameWithType: ModelItem.Parent
  fullName: System.Activities.Presentation.Model.ModelItem.Parent
- uid: System.Activities.Presentation.Model.ModelItem
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelItem
  nameWithType: ModelItem
  fullName: System.Activities.Presentation.Model.ModelItem
- uid: System.Activities.Presentation.Model.ModelItem.Parents
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Parents
  nameWithType: ModelItem.Parents
  fullName: System.Activities.Presentation.Model.ModelItem.Parents
- uid: System.Collections.Generic.IEnumerable{System.Activities.Presentation.Model.ModelItem}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ModelItem>
  nameWithType: IEnumerable<ModelItem>
  fullName: System.Collections.Generic.IEnumerable<System.Activities.Presentation.Model.ModelItem>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Activities.Presentation.Model.ModelItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.Presentation.Model.ModelItem
    name: ModelItem
    nameWithType: ModelItem
    fullName: ModelItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Presentation.Model.ModelItem.Properties
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Properties
  nameWithType: ModelItem.Properties
  fullName: System.Activities.Presentation.Model.ModelItem.Properties
- uid: System.Activities.Presentation.Model.ModelPropertyCollection
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelPropertyCollection
  nameWithType: ModelPropertyCollection
  fullName: System.Activities.Presentation.Model.ModelPropertyCollection
- uid: System.Activities.Presentation.Model.ModelItem.PropertyChanged
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: PropertyChanged
  nameWithType: ModelItem.PropertyChanged
  fullName: System.Activities.Presentation.Model.ModelItem.PropertyChanged
- uid: System.ComponentModel.PropertyChangedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
- uid: System.Activities.Presentation.Model.ModelItem.Root
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Root
  nameWithType: ModelItem.Root
  fullName: System.Activities.Presentation.Model.ModelItem.Root
- uid: System.Activities.Presentation.Model.ModelItem.Source
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Source
  nameWithType: ModelItem.Source
  fullName: System.Activities.Presentation.Model.ModelItem.Source
- uid: System.Activities.Presentation.Model.ModelItem.Sources
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Sources
  nameWithType: ModelItem.Sources
  fullName: System.Activities.Presentation.Model.ModelItem.Sources
- uid: System.Collections.Generic.IEnumerable{System.Activities.Presentation.Model.ModelProperty}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ModelProperty>
  nameWithType: IEnumerable<ModelProperty>
  fullName: System.Collections.Generic.IEnumerable<System.Activities.Presentation.Model.ModelProperty>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Activities.Presentation.Model.ModelProperty>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.Presentation.Model.ModelProperty
    name: ModelProperty
    nameWithType: ModelProperty
    fullName: ModelProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Presentation.Model.ModelItem.ToString
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: ToString()
  nameWithType: ModelItem.ToString()
  fullName: System.Activities.Presentation.Model.ModelItem.ToString()
- uid: System.Activities.Presentation.Model.ModelItem.View
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: View
  nameWithType: ModelItem.View
  fullName: System.Activities.Presentation.Model.ModelItem.View
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Activities.Presentation.Model.ModelItem.#ctor*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: ModelItem
  nameWithType: ModelItem.ModelItem
- uid: System.Activities.Presentation.Model.ModelItem.Attributes*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Attributes
  nameWithType: ModelItem.Attributes
- uid: System.Activities.Presentation.Model.ModelItem.BeginEdit*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: BeginEdit
  nameWithType: ModelItem.BeginEdit
- uid: System.Activities.Presentation.Model.ModelItem.Content*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Content
  nameWithType: ModelItem.Content
- uid: System.Activities.Presentation.Model.ModelItem.GetCurrentValue*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: GetCurrentValue
  nameWithType: ModelItem.GetCurrentValue
- uid: System.Activities.Presentation.Model.ModelItem.ItemType*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: ItemType
  nameWithType: ModelItem.ItemType
- uid: System.Activities.Presentation.Model.ModelItem.Name*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Name
  nameWithType: ModelItem.Name
- uid: System.Activities.Presentation.Model.ModelItem.Parent*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Parent
  nameWithType: ModelItem.Parent
- uid: System.Activities.Presentation.Model.ModelItem.Parents*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Parents
  nameWithType: ModelItem.Parents
- uid: System.Activities.Presentation.Model.ModelItem.Properties*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Properties
  nameWithType: ModelItem.Properties
- uid: System.Activities.Presentation.Model.ModelItem.Root*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Root
  nameWithType: ModelItem.Root
- uid: System.Activities.Presentation.Model.ModelItem.Source*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Source
  nameWithType: ModelItem.Source
- uid: System.Activities.Presentation.Model.ModelItem.Sources*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: Sources
  nameWithType: ModelItem.Sources
- uid: System.Activities.Presentation.Model.ModelItem.ToString*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: ToString
  nameWithType: ModelItem.ToString
- uid: System.Activities.Presentation.Model.ModelItem.View*
  parent: System.Activities.Presentation.Model.ModelItem
  isExternal: false
  name: View
  nameWithType: ModelItem.View
