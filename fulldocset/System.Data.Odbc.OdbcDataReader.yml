### YamlMime:ManagedReference
items:
- uid: System.Data.Odbc.OdbcDataReader
  id: OdbcDataReader
  children:
  - System.Data.Odbc.OdbcDataReader.Close
  - System.Data.Odbc.OdbcDataReader.Depth
  - System.Data.Odbc.OdbcDataReader.Dispose(System.Boolean)
  - System.Data.Odbc.OdbcDataReader.FieldCount
  - System.Data.Odbc.OdbcDataReader.GetBoolean(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetByte(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetChar(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetDataTypeName(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetDate(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetDateTime(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetDecimal(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetDouble(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetEnumerator
  - System.Data.Odbc.OdbcDataReader.GetFieldType(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetFloat(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetGuid(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetInt16(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetInt32(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetInt64(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetName(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetOrdinal(System.String)
  - System.Data.Odbc.OdbcDataReader.GetSchemaTable
  - System.Data.Odbc.OdbcDataReader.GetString(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetTime(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetValue(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetValues(System.Object[])
  - System.Data.Odbc.OdbcDataReader.HasRows
  - System.Data.Odbc.OdbcDataReader.IsClosed
  - System.Data.Odbc.OdbcDataReader.IsDBNull(System.Int32)
  - System.Data.Odbc.OdbcDataReader.Item(System.Int32)
  - System.Data.Odbc.OdbcDataReader.Item(System.String)
  - System.Data.Odbc.OdbcDataReader.NextResult
  - System.Data.Odbc.OdbcDataReader.Read
  - System.Data.Odbc.OdbcDataReader.RecordsAffected
  langs:
  - csharp
  name: OdbcDataReader
  nameWithType: OdbcDataReader
  fullName: System.Data.Odbc.OdbcDataReader
  type: Class
  summary: "데이터 원본에서 데이터 행의 정방향 전용 스트림을 읽는 방법을 제공 합니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "호출 해야 OdbcDataReader를 만들려면는 <xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A>의 메서드는 <xref:System.Data.Odbc.OdbcCommand>직접 생성자를 사용 하는 대신 개체입니다.</xref:System.Data.Odbc.OdbcCommand> </xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A>       OdbcDataReader를 사용 하는 동안에서 관련 된 <xref:System.Data.Odbc.OdbcConnection>사용 중 처리 된 OdbcDataReader을 이며 <xref:System.Data.Odbc.OdbcConnection>합니다. 닫지</xref:System.Data.Odbc.OdbcConnection> 에 없는 다른 작업을 수행할 수</xref:System.Data.Odbc.OdbcConnection> 이것은 때 까지는 <xref:System.Data.Odbc.OdbcDataReader.Close%2A>는 OdbcDataReader의 메서드가 호출 됩니다.</xref:System.Data.Odbc.OdbcDataReader.Close%2A> <xref:System.Data.Odbc.OdbcDataReader.Close%2A>.</xref:System.Data.Odbc.OdbcDataReader.Close%2A> 호출 될 때까지 출력 매개 변수를 검색할 수 없습니다 예를 들어       결과 데이터를 읽는 동안 다른 프로세스 또는 스레드별로 집합이 변경은 OdbcDataReader의 사용자에 게 표시 될 수 있습니다. 그러나 정확한 동작은 드라이버와 시간에 따라 다릅니다.       <xref:System.Data.Odbc.OdbcDataReader.IsClosed%2A>및 <xref:System.Data.Odbc.OdbcDataReader.RecordsAffected%2A>호출할 수 있는 속성만 여 OdbcDataReader를 닫은 후.</xref:System.Data.Odbc.OdbcDataReader.RecordsAffected%2A></xref:System.Data.Odbc.OdbcDataReader.IsClosed%2A> <xref:System.Data.Odbc.OdbcDataReader.Close%2A> <xref:System.Data.Odbc.OdbcDataReader.RecordsAffected%2A>.</xref:System.Data.Odbc.OdbcDataReader.RecordsAffected%2A> 를 호출 하기 전에</xref:System.Data.Odbc.OdbcDataReader.Close%2A> 호출 해야 경우에 따라"
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcConnection>, an <xref:System.Data.Odbc.OdbcCommand>, and an OdbcDataReader. The example reads through the data, writing it out to the console. Finally, the example closes the OdbcDataReader, and then the <xref:System.Data.Odbc.OdbcConnection>.  \n  \n [!code-vb[Classic WebData OdbcDataReader#1](~/add/codesnippet/visualbasic/t-system.data.odbc.odbcd_0_1.vb)]\n [!code-cs[Classic WebData OdbcDataReader#1](~/add/codesnippet/csharp/t-system.data.odbc.odbcd_0_1.cs)]"
  syntax:
    content: 'public sealed class OdbcDataReader : System.Data.Common.DbDataReader'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Data.Common.DbDataReader
  implements: []
  inheritedMembers:
  - System.Data.Common.DbDataReader.Dispose
  - System.Data.Common.DbDataReader.GetData(System.Int32)
  - System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  - System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)
  - System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)
  - System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])
  - System.Data.Common.DbDataReader.GetStream(System.Int32)
  - System.Data.Common.DbDataReader.GetTextReader(System.Int32)
  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)
  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.NextResultAsync
  - System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.ReadAsync
  - System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)
  - System.Data.Common.DbDataReader.VisibleFieldCount
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.Close
  id: Close
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: Close()
  nameWithType: OdbcDataReader.Close()
  fullName: System.Data.Odbc.OdbcDataReader.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "닫습니다는 <xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref> 개체입니다."
  remarks: "끝나면 Close 메서드를 명시적으로 호출 해야를 사용 하는 <xref:System.Data.Odbc.OdbcDataReader>연결 된 사용 하도록 <xref:System.Data.Odbc.OdbcConnection>다른 용도로.</xref:System.Data.Odbc.OdbcConnection> </xref:System.Data.Odbc.OdbcDataReader>      > [!CAUTION] > 호출 하지 않으면 `Close` 또는 `Dispose` 연결, DataReader, 또는 다른 관리 개체에는 `Finalize` 클래스의 메서드로 합니다. 종료자에서만 클래스에 직접 속한 관리 되지 않는 리소스를 해제 해야 합니다. 클래스에 관리 되지 않는 리소스가 없는 경우 포함 되지 않습니다는 `Finalize` 클래스 정의에 메서드. 자세한 내용은 참조 [가비지 수집](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcConnection>, an <xref:System.Data.Odbc.OdbcCommand>, and an <xref:System.Data.Odbc.OdbcDataReader>. The example reads through the data, writing it out to the console. Finally, the example closes the <xref:System.Data.Odbc.OdbcDataReader>, and then the <xref:System.Data.Odbc.OdbcConnection>.  \n  \n [!code-cs[Classic WebData IDataReader.Read Example#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcd_4_1.cs)]\n [!code-vb[Classic WebData IDataReader.Read Example#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcd_4_1.vb)]"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.Odbc.OdbcDataReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.Depth
  id: Depth
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: Depth
  nameWithType: OdbcDataReader.Depth
  fullName: System.Data.Odbc.OdbcDataReader.Depth
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "현재 행의 중첩 깊이 나타내는 값을 가져옵니다."
  remarks: "가장 바깥쪽 테이블의 중첩 수준은&0;입니다."
  syntax:
    content: public override int Depth { get; }
    return:
      type: System.Int32
      description: "현재 행의 중첩 깊이입니다."
  overload: System.Data.Odbc.OdbcDataReader.Depth*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: OdbcDataReader.Dispose(Boolean)
  fullName: System.Data.Odbc.OdbcDataReader.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "추가할 수 있습니다."
  overload: System.Data.Odbc.OdbcDataReader.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.FieldCount
  id: FieldCount
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: FieldCount
  nameWithType: OdbcDataReader.FieldCount
  fullName: System.Data.Odbc.OdbcDataReader.FieldCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "현재 행에서 열 수를 가져옵니다."
  remarks: "숨김된 필드도 포함 됩니다. 사용 하 여 <xref:System.Data.Common.DbDataReader.VisibleFieldCount%2A>숨겨진된 필드를 제외 하려면.</xref:System.Data.Common.DbDataReader.VisibleFieldCount%2A>       행을 반환 하지 않는 쿼리를 실행 하 고 나면 FieldCount 0을 반환 합니다."
  syntax:
    content: public override int FieldCount { get; }
    return:
      type: System.Int32
      description: "위치 하지 않은 경우에 올바른 레코드 집합 0; 그렇지 않으면 현재 레코드에 있는 열의 수입니다. 기본값은-1입니다."
  overload: System.Data.Odbc.OdbcDataReader.FieldCount*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "데이터 소스에 현재 연결이 없습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetBoolean(System.Int32)
  id: GetBoolean(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetBoolean(Int32)
  nameWithType: OdbcDataReader.GetBoolean(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetBoolean(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "부울으로 지정 된 열의 값을 가져옵니다."
  remarks: "변환은은 ODBC 드라이버의 기본 기능에 따라 수행 됩니다. 변환이 지원 되지 않는 경우 메서드 호출이 실패 합니다.       호출 <xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>에이 메서드를 호출 하기 전에 null 값을 찾습니다.</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override bool GetBoolean (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Boolean
      description: "부울은 열의 값입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetBoolean*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetByte(System.Int32)
  id: GetByte(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetByte(Int32)
  nameWithType: OdbcDataReader.GetByte(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetByte(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "지정 된 열의 값을 바이트로 가져옵니다."
  remarks: "변환은은 ODBC 드라이버의 기본 기능에 따라 수행 됩니다. 변환이 지원 되지 않는 경우 메서드 호출이 실패 합니다.       호출 <xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>에이 메서드를 호출 하기 전에 null 값을 찾습니다.</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override byte GetByte (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Byte
      description: "값을 byte로 지정된 된 열입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetByte*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: OdbcDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "지정한 열 오프셋에서의 바이트 스트림을 특정 버퍼 오프셋에서 시작 하는 배열로 버퍼로 읽습니다."
  remarks: "GetBytes 필드에 사용 가능한 바이트 수를 반환합니다. 대부분의 경우 이것은 필드의 길이입니다. 그러나 GetBytes 바이트를 얻는 필드에서 이미 사용 하는 경우에 반환 되는 숫자 필드의 길이 보다 작을 수도 있습니다. 이 있는 경우 예를 들어 경우 수는 <xref:System.Data.Odbc.OdbcDataReader>버퍼에 대형 데이터 구조를 읽고.</xref:System.Data.Odbc.OdbcDataReader> 자세한 내용은 참조는 `SequentialAccess` <xref:System.Data.CommandBehavior>.</xref:System.Data.CommandBehavior> 에 대 한 설정       버퍼를 null 값을 전달 하면 GetBytes 필드의 길이 바이트 단위로 반환 합니다.       변환은은 ODBC 드라이버의 기본 기능에 따라 수행 됩니다. 변환이 지원 되지 않는 경우 메서드 호출이 실패 합니다.      > [!NOTE] > 하면 예외가 throw 됩니다 값 `bufferIndex` 배열 밖에 있습니다. 없는 데이터를 읽 및 메서드가 0을 반환 합니다."
  syntax:
    content: public override long GetBytes (int i, long dataIndex, byte[] buffer, int bufferIndex, int length);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    - id: dataIndex
      type: System.Int64
      description: "읽기 작업을 시작할 필드 내의 인덱스입니다."
    - id: buffer
      type: System.Byte[]
      description: "바이트 스트림의 읽을 버퍼입니다."
    - id: bufferIndex
      type: System.Int32
      description: "내에 있는 인덱스는 `buffer` 쓰기 작업이 시작 되는 위치입니다."
    - id: length
      type: System.Int32
      description: "읽을 바이트 수입니다."
    return:
      type: System.Int64
      description: "실제 읽은 바이트 수입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetBytes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetChar(System.Int32)
  id: GetChar(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetChar(Int32)
  nameWithType: OdbcDataReader.GetChar(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetChar(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "문자로 지정 된 열의 값을 가져옵니다."
  remarks: "변환은은 ODBC 드라이버의 기본 기능에 따라 수행 됩니다. 변환이 지원 되지 않는 경우 메서드 호출이 실패 합니다.       호출 <xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>에이 메서드를 호출 하기 전에 null 값을 찾습니다.</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override char GetChar (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Char
      description: "문자로 지정 된 열의 값입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetChar*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: OdbcDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "특정 버퍼 오프셋에서 시작 하는 배열로 지정된 된 열 오프셋 버퍼에 문자 스트림을 읽습니다."
  remarks: "GetChars 필드에 사용할 수 있는 문자 수를 반환합니다. 대부분의 경우 이것은 필드의 길이입니다. 그러나 GetChars 문자를 가져올 필드에서 이미 사용 하는 경우에 반환 되는 숫자 필드의 길이 보다 작을 수도 있습니다. 이 있는 경우 예를 들어 경우 수는 <xref:System.Data.Odbc.OdbcDataReader>버퍼에 대형 데이터 구조를 읽고.</xref:System.Data.Odbc.OdbcDataReader> 자세한 내용은 참조는 `SequentialAccess` <xref:System.Data.CommandBehavior>.</xref:System.Data.CommandBehavior> 에 대 한 설정       버퍼를 null 값을 전달 하면 GetChars 필드의 길이 문자 단위로 반환 합니다.       변환은은 ODBC 드라이버의 기본 기능에 따라 수행 됩니다. 변환이 지원 되지 않는 경우 메서드 호출이 실패 합니다.      > [!NOTE] > 하면 예외가 throw 됩니다 값 `bufferIndex` 배열 밖에 있습니다. 없는 데이터를 읽 및 메서드가 0을 반환 합니다."
  syntax:
    content: public override long GetChars (int i, long dataIndex, char[] buffer, int bufferIndex, int length);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    - id: dataIndex
      type: System.Int64
      description: "읽기 작업을 시작할 행 내의 인덱스입니다."
    - id: buffer
      type: System.Char[]
      description: "데이터를 복사할 대상 버퍼입니다."
    - id: bufferIndex
      type: System.Int32
      description: "내에 있는 인덱스는 `buffer` 쓰기 작업이 시작 되는 위치입니다."
    - id: length
      type: System.Int32
      description: "읽을 문자 수입니다."
    return:
      type: System.Int64
      description: "실제 읽은 문자 수입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetChars*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetDataTypeName(System.Int32)
  id: GetDataTypeName(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetDataTypeName(Int32)
  nameWithType: OdbcDataReader.GetDataTypeName(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDataTypeName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "원본 데이터 형식의 이름을 가져옵니다."
  syntax:
    content: public override string GetDataTypeName (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.String
      description: "원본 데이터 형식의 이름입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetDataTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetDate(System.Int32)
  id: GetDate(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetDate(Int32)
  nameWithType: OdbcDataReader.GetDate(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDate(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "지정 된 열의 값을 가져옵니다는 <xref:System.DateTime>개체입니다.</xref:System.DateTime>"
  syntax:
    content: public DateTime GetDate (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.DateTime
      description: "지정 된 열의 값을 <xref:System.DateTime>개체입니다.</xref:System.DateTime>"
  overload: System.Data.Odbc.OdbcDataReader.GetDate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetDateTime(System.Int32)
  id: GetDateTime(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetDateTime(Int32)
  nameWithType: OdbcDataReader.GetDateTime(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDateTime(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "지정 된 열의 값을 가져옵니다는 <xref:System.DateTime>개체입니다.</xref:System.DateTime>"
  remarks: "변환은은 ODBC 드라이버의 기본 기능에 따라 수행 됩니다. 변환이 지원 되지 않는 경우 메서드 호출이 실패 합니다.       호출 <xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>에이 메서드를 호출 하기 전에 null 값을 찾습니다.</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override DateTime GetDateTime (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.DateTime
      description: "지정 된 열의 값을 <xref:System.DateTime>개체입니다.</xref:System.DateTime>"
  overload: System.Data.Odbc.OdbcDataReader.GetDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetDecimal(System.Int32)
  id: GetDecimal(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetDecimal(Int32)
  nameWithType: OdbcDataReader.GetDecimal(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDecimal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "지정 된 열의 값을 가져옵니다는 <xref:System.Decimal>개체입니다.</xref:System.Decimal>"
  remarks: "변환은은 ODBC 드라이버의 기본 기능에 따라 수행 됩니다. 변환이 지원 되지 않는 경우 메서드 호출이 실패 합니다.       호출 <xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>에이 메서드를 호출 하기 전에 null 값을 찾습니다.</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>       GetDecimal 최대 전체 자릿수는 28 사이 있습니다. 더 큰 전체 자릿수를 사용 하 여&10; 진수 데이터를 검색 하려고 하면 예외가 발생 합니다. 한 가지 해결 더 작은 데이터 형식에&10; 진수 형식을 캐스팅 하도록 쿼리를 변경 하거나 문자열 또는 이진으로 변환 하는 것입니다."
  syntax:
    content: public override decimal GetDecimal (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Decimal
      description: "지정 된 열의 값을 <xref:System.Decimal>개체입니다.</xref:System.Decimal>"
  overload: System.Data.Odbc.OdbcDataReader.GetDecimal*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetDouble(System.Int32)
  id: GetDouble(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetDouble(Int32)
  nameWithType: OdbcDataReader.GetDouble(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDouble(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "배정밀도 부동 소수점 숫자로 지정 된 열의 값을 가져옵니다."
  remarks: "변환은은 ODBC 드라이버의 기본 기능에 따라 수행 됩니다. 변환이 지원 되지 않는 경우 메서드 호출이 실패 합니다.       호출 <xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>에이 메서드를 호출 하기 전에 null 값을 찾습니다.</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override double GetDouble (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Double
      description: "배정밀도 부동 소수점 숫자로 지정 된 열의 값입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetDouble*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetEnumerator
  id: GetEnumerator
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: OdbcDataReader.GetEnumerator()
  fullName: System.Data.Odbc.OdbcDataReader.GetEnumerator()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "반환 된 <xref:System.Collections.IEnumerator>데이터 판독기의 행을 반복에 사용할 수 있는.</xref:System.Collections.IEnumerator>"
  remarks: "이 메서드를 사용 하 여 명시적 열거자를 검색할 수 있지만 지 원하는 언어는 `foreach` 구성 하는 것이 데이터 판독기의 행을 반복 하는 직접 루프 구문을 사용 합니다."
  syntax:
    content: public override System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>데이터 판독기의 행을 반복에 사용할 수 있는.</xref:System.Collections.IEnumerator>"
  overload: System.Data.Odbc.OdbcDataReader.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetFieldType(System.Int32)
  id: GetFieldType(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetFieldType(Int32)
  nameWithType: OdbcDataReader.GetFieldType(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetFieldType(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "가져옵니다는 <xref:System.Type>개체의 데이터 형식입니다.</xref:System.Type>"
  syntax:
    content: public override Type GetFieldType (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Type
      description: "<xref:System.Type>개체의 데이터 형식입니다.</xref:System.Type>"
  overload: System.Data.Odbc.OdbcDataReader.GetFieldType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetFloat(System.Int32)
  id: GetFloat(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetFloat(Int32)
  nameWithType: OdbcDataReader.GetFloat(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetFloat(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "단 정밀도 부동 소수점 숫자로 지정 된 열의 값을 가져옵니다."
  remarks: "변환은은 ODBC 드라이버의 기본 기능에 따라 수행 됩니다. 변환이 지원 되지 않는 경우 메서드 호출이 실패 합니다.       호출 <xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>에이 메서드를 호출 하기 전에 null 값을 찾습니다.</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override float GetFloat (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Single
      description: "단 정밀도 부동 소수점 숫자로 지정 된 열의 값입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetFloat*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetGuid(System.Int32)
  id: GetGuid(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetGuid(Int32)
  nameWithType: OdbcDataReader.GetGuid(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetGuid(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "전역 고유 식별자 (GUID)로 지정 된 열의 값을 가져옵니다."
  remarks: "변환은은 ODBC 드라이버의 기본 기능에 따라 수행 됩니다. 변환이 지원 되지 않는 경우 메서드 호출이 실패 합니다.       호출 <xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>에이 메서드를 호출 하기 전에 null 값을 찾습니다.</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override Guid GetGuid (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Guid
      description: "GUID로 지정 된 열의 값입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetGuid*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetInt16(System.Int32)
  id: GetInt16(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetInt16(Int32)
  nameWithType: OdbcDataReader.GetInt16(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetInt16(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "16 비트 부호 있는 정수로 지정 된 열의 값을 가져옵니다."
  remarks: "변환은은 ODBC 드라이버의 기본 기능에 따라 수행 됩니다. 변환이 지원 되지 않는 경우 메서드 호출이 실패 합니다.       호출 <xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>에이 메서드를 호출 하기 전에 null 값을 찾습니다.</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override short GetInt16 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Int16
      description: "16 비트 부호 있는 정수로 지정 된 열의 값입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetInt16*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetInt32(System.Int32)
  id: GetInt32(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetInt32(Int32)
  nameWithType: OdbcDataReader.GetInt32(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetInt32(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "부호 있는 32 비트 정수로 지정 된 열의 값을 가져옵니다."
  remarks: "변환은은 ODBC 드라이버의 기본 기능에 따라 수행 됩니다. 변환이 지원 되지 않는 경우 메서드 호출이 실패 합니다.       호출 <xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>에이 메서드를 호출 하기 전에 null 값을 찾습니다.</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override int GetInt32 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Int32
      description: "부호 있는 32 비트 정수로 지정 된 열의 값입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetInt32*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetInt64(System.Int32)
  id: GetInt64(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetInt64(Int32)
  nameWithType: OdbcDataReader.GetInt64(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetInt64(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "64 비트 부호 있는 정수로 지정 된 열의 값을 가져옵니다."
  remarks: "변환은은 ODBC 드라이버의 기본 기능에 따라 수행 됩니다. 변환이 지원 되지 않는 경우 메서드 호출이 실패 합니다.       호출 <xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>에이 메서드를 호출 하기 전에 null 값을 찾습니다.</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override long GetInt64 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Int64
      description: "64 비트 부호 있는 정수로 지정 된 열의 값입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetInt64*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetName(System.Int32)
  id: GetName(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetName(Int32)
  nameWithType: OdbcDataReader.GetName(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "지정 된 열의 이름을 가져옵니다."
  syntax:
    content: public override string GetName (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.String
      description: "지정 된 열의 이름에 해당 하는 문자열입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetOrdinal(System.String)
  id: GetOrdinal(System.String)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetOrdinal(String)
  nameWithType: OdbcDataReader.GetOrdinal(String)
  fullName: System.Data.Odbc.OdbcDataReader.GetOrdinal(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "열을 가져옵니다 서 수 이며 열의 이름을 지정 합니다."
  remarks: "GetOrdinal 대/소문자 구분 조회를 먼저 수행합니다. 실패 한 경우에 두 번째 대/소문자 구분 검색이 수행 됩니다. 메서드에서 throw 된 `IndexOutOfRange` 서 수는&0;부터 시작 하는 열을 찾을 수 없는 경우 예외입니다.       GetOrdinal은 일본어가 나 너비 구분 하지 않는 것입니다.       서 수 기반 조회가 명명 된 조회 보다 효율적 이므로 루프 내 효율적인있지 않습니다. 대신, GetOrdinal 한 번 호출 하 고 루프 내에서 사용할 정수 변수에 결과 할당 합니다."
  example:
  - "The following example demonstrates how to use the GetOrdinal method.  \n  \n [!code-vb[Classic WebData OdbcDataReader.GetOrdinal#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcd_3_1.vb)]\n [!code-cs[Classic WebData OdbcDataReader.GetOrdinal#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcd_3_1.cs)]"
  syntax:
    content: public override int GetOrdinal (string value);
    parameters:
    - id: value
      type: System.String
      description: "열의 이름입니다."
    return:
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetOrdinal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetSchemaTable
  id: GetSchemaTable
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetSchemaTable()
  nameWithType: OdbcDataReader.GetSchemaTable()
  fullName: System.Data.Odbc.OdbcDataReader.GetSchemaTable()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "반환 된 <xref href=&quot;System.Data.DataTable&quot;> </xref> 의 열 메타 데이터를 설명 하는 <xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref>합니다."
  remarks: "GetSchemaTable 메서드는 다음 순서 대로 각 열에 대 한 메타 데이터 반환: | DataReader 열 | 설명 |   |-----------------------|-----------------|   | ColumnName | 열의 이름입니다. 이 고유 아닐 수 있습니다. 열 이름을 확인할 수 없으면 null 값이 반환 됩니다. 이 이름은 항상 현재 보기 또는 명령 텍스트에 있는 열의 최근 이름 지정을 반영 합니다. |   | ColumnOrdinal | 열의&0;부터 시작 서 수입니다. 이 열에 null 값을 포함할 수 없습니다. |   | ColumnSize | 열에 있는 값의 가능한 최대 길이입니다. 고정 길이 데이터 형식을 사용 하는 열에 대 한 데이터 형식의 크기입니다. |   | NumericPrecision | 경우 <xref:System.Data.DbType>숫자 데이터 형식 열의 최대 전체 자릿수입니다.</xref:System.Data.DbType> 전체 자릿수는 열의 정의에 따라 달라 집니다. 경우 <xref:System.Data.DbType>없는 숫자 데이터 형식,이 열에 데이터를 사용 하지 마십시오.</xref:System.Data.DbType> 기본 ODBC 드라이버에서 숫자가 아닌 데이터 형식에 대 한 전체 자릿수 값을 반환 하는 경우이 값은 스키마 테이블에 사용 합니다. |   | NumericScale | 경우 <xref:System.Data.DbType>은 <xref:System.Data.DbType>, 소수점 오른쪽 자릿수입니다.</xref:System.Data.DbType> </xref:System.Data.DbType> 그렇지 않으면 null 값입니다. 기본 ODBC 드라이버에서 숫자가 아닌 데이터 형식에 대 한 전체 자릿수 값을 반환 하는 경우이 값은 스키마 테이블에 사용 합니다. |   | 데이터 형식 | <xref:System.Data.DbType>의 공용 언어 런타임 형식에 매핑됩니다. |   | ProviderType | 기본 드라이버 형식입니다. |   | IsLong | `true` 는 긴 BLOB (Binary Object) 매우 긴 데이터가 포함 된 열에 포함 된 경우.</xref:System.Data.DbType> 매우 긴 데이터의 정의 드라이버별. |   | AllowDBNull | `true` 드라이버 소비자가 열을 null 값으로 설정할 수 있는지 여부를 확인할 수 없는 경우 또는 소비자를 null 값 열을 설정할 수 있습니다. 그렇지 않으면 `false`합니다. 열은 null 값으로 설정할 수 없습니다 하는 경우에 null 값 포함 될 수 있습니다. |   | IsReadOnly | `true` 수정 되지 않으면 열 수 없는 경우 `false`. |   | Isrowversion은 | 열에 쓸 수 없는 영구 행 식별자를 포함 하 고 행 id에만 의미가 경우에 설정 합니다. |   | IsUnique | `true`: 기본 테이블의 각 행이이 열에 동일한 값 가질 수 있습니다 (BaseTableName에서 반환 된 테이블). IsUnique 되도록 보장 `true` 열 자체 키를 나타내는 경우 또는이 열에만 적용 되는 UNIQUE 유형의 제약 조건이 있는 경우.<br /><br /> `false`:이 열은 기본 테이블에서 중복 값을 포함할 수 있습니다. 이 열에 대 한 기본값은 `false`. |   | IsKey | `true`: 열이 행 집합의 열 집합 중 하나를 전체적으로 볼 때, 해당 행을 고유 하 게 식별 합니다. IsKey 된 열 집합으로 설정 `true` 행 집합의 행을 고유 하 게 식별 해야 합니다. 이 열 집합이 열의 최소 집합 임을 않아도가 됩니다. 기본 테이블 기본 키, 고유 제약 조건 또는 고유 인덱스에서이 열 집합을 생성할 수 있습니다.<br /><br /> `false`:이 열은 행을 식별할 필요가 없습니다. |   | IsAutoIncrement | `true` 열 고정 된 증가분; 새 행에 값을 할당 하는 경우 그러지 않으면 `false`합니다. 이 열에 대 한 기본값은 `false`. |   | BaseSchemaName | 열이 포함 된 데이터 원본에 있는 스키마의 이름입니다. 기본 카탈로그 이름을 확인할 수 없는 경우 NULL입니다. 이 열에 대 한 기본값은 null 값입니다. |   | BaseCatalogName | 열이 포함 된 데이터 저장소에 있는 카탈로그의 이름입니다. 기본 카탈로그 이름을 확인할 수 없는 경우 NULL입니다. 이 열에 대 한 기본값은 null 값입니다. |   | BaseTableName | 테이블 또는 뷰의 열이 포함 된 데이터 저장소의 이름입니다. 기본 테이블 이름을 확인할 수 없는 경우 null 값입니다. 이 열의 기본 null 값입니다. |   | BaseColumnName | 데이터 저장소에 있는 열의 이름입니다. 별칭이 사용 된 경우 열 이름 열에 반환 된 열 이름과 다를 수 있습니다. 데이터의 열 저장소 행 집합 열이 파생 되지만 동일 하지는 않습니다, 하는 경우 또는 기본 열 이름을 확인할 수 없는 경우 null 값입니다. 이 열에 대 한 기본값은 null 값입니다. |       결과 집합의 모든 열에 대해 행이 반환 됩니다.       .NET Framework Data Provider for ODBC 중 한 가지 메타 데이터 정보는 ODBC 드라이버에서 사용할 수 있는 것으로 가정 **SQLPrepare**, **SQLExecute**, 또는 **SQLExecuteDirect** 함수가 호출 됩니다. &quot;SchemaOnly&quot;에 대 한 명령을 제대로 작동 하려면 동작 **SQLPrepare** 필요한 메타 데이터 정보를 반환 해야 합니다. 일부 ODBC 드라이버는이 기능을 지원 하거나 메타 데이터 정보를 반환 합니다. 이 경우 일부 또는 모든 SchemaTable에 정보가 누락 됩니다. 호출한 후 **SQLPrepare**, 데이터 공급자는 ODBC 호출 **SQLColAttribute** 함수 (예: IsLong, 고유, AllowDBNull, BaseTableName, BaseColumnName) 쿼리 결과의 각 열에 관한 메타 데이터 정보를 찾을 수 있습니다. 기본 드라이버를 반환 하지 않으면이 정보 중 일부가 SchemaTable의 해당 값 올바르게 설정 되지 않습니다.       .NET Framework Data Provider for ODBC 호출 또한 **SQLPrimaryKeys** 모든 테이블에 대 한 주요 정보를 검색 합니다. 데이터 공급자를 호출 하는 기본 ODBC 드라이버는이 함수를 지원 하지 않습니다, **SQLStatistics** 고유 인덱스 중 하나는 테이블에 대 한 기본 키로 선택 하 고 있습니다. 이 항상 올바르게 원하는 결과입니다.       <xref:System.Data.Odbc.OdbcCommandBuilder>올바르게 작동 하려면 테이블의 기본 키를 올바로 식별을 해야 합니다.</xref:System.Data.Odbc.OdbcCommandBuilder> 쿼리 결과에 모든 열에 대해 BaseTableName에서 반환 되지 않으면.NET Framework Data Provider for ODBC 쿼리에 포함 된 테이블 이름을 찾으려면 SQL 문을 구문 분석 하려고 합니다. 보안 그룹은 UPDATE, INSERT, DELETE 및 간단한 SELECT 문으로 있고 저장된 프로시저 또는 조인을 기반으로 하는 SELECT 문을 사용 하지 않습니다. 이 테이블에서 스키마 정보를 일부 또는 모든 없으면는 <xref:System.Data.Odbc.OdbcCommandBuilder>부족 하 여 스키마 정보를 올바른 INSERT, UPDATE 또는 DELETE 문을 자동으로 생성 되었기 때문에 속성이 제대로 작동 하지 것입니다.</xref:System.Data.Odbc.OdbcCommandBuilder>       올바른 정보를 반환 하는 메타 데이터 열, 호출 해야 되도록 <xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A>KeyInfo로 설정 동작 매개 변수를 사용 합니다.</xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A> 그렇지 않으면 스키마 테이블의 열 중 일부 기본값, null 또는 잘못 된 데이터를 반환할 수 있습니다.       Oracle를 ODBC.NET를 사용 하 여 ODBC 드라이버를 통해 키 열 별칭이 지정 된 키로 인식 되지 않습니다. 이 OdbcDataReader 스키마 테이블에 IsKey 및 IsUnique 열을 영향을 줍니다. 업데이트 논리를 생성 하는 OdbcCommandBuilder 능력을 영향을 줍니다. 기본 키 열에 대 한 별칭을 사용 하지 것이 좋습니다.      > [!NOTE] > The Microsoft Jet ODBC 드라이버는 항상 고유 인덱스와 기본 키 열 null 허용 여부는 nullable 인지에 관계 없이으로 반환 합니다. 드라이버도 기본 키 정보와; 반환 하지 않습니다. 고유 인덱스 및 열, 기본 키 열을 포함 하 여 이들 사이에서 구분 하지 않고의 목록을 반환 합니다."
  syntax:
    content: public override System.Data.DataTable GetSchemaTable ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 열 메타 데이터를 설명 하는 합니다."
  overload: System.Data.Odbc.OdbcDataReader.GetSchemaTable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref> 닫혀 있습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetString(System.Int32)
  id: GetString(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetString(Int32)
  nameWithType: OdbcDataReader.GetString(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetString(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "지정 된 열의 값을 <xref:System.String>.</xref:System.String> 가져옵니다."
  remarks: "변환은은 ODBC 드라이버의 기본 기능에 따라 수행 됩니다. 변환이 지원 되지 않는 경우 메서드 호출이 실패 합니다.       호출 <xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>에이 메서드를 호출 하기 전에 null 값을 찾습니다.</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override string GetString (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.String
      description: "에 <xref:System.String>.</xref:System.String> 로 지정 된 열 값"
  overload: System.Data.Odbc.OdbcDataReader.GetString*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "지정한 캐스트가 잘못 되었습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetTime(System.Int32)
  id: GetTime(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetTime(Int32)
  nameWithType: OdbcDataReader.GetTime(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetTime(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "지정 된 열의 값을 가져옵니다는 <xref:System.TimeSpan>개체입니다.</xref:System.TimeSpan>"
  syntax:
    content: public TimeSpan GetTime (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.TimeSpan
      description: "지정 된 열의 값을 <xref:System.TimeSpan>개체입니다.</xref:System.TimeSpan>"
  overload: System.Data.Odbc.OdbcDataReader.GetTime*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetValue(Int32)
  nameWithType: OdbcDataReader.GetValue(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "네이티브 형식으로 지정 된 서 수 열 값을 가져옵니다."
  remarks: "이 메서드가 반환 <xref:System.DBNull>null 데이터베이스 열에 대 한.</xref:System.DBNull>"
  syntax:
    content: public override object GetValue (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Object
      description: "반환할 값입니다."
  overload: System.Data.Odbc.OdbcDataReader.GetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetValues(Object[])
  nameWithType: OdbcDataReader.GetValues(Object[])
  fullName: System.Data.Odbc.OdbcDataReader.GetValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "현재 행의 열 값이 있는 개체의 배열을 채웁니다."
  remarks: "대부분의 응용 프로그램에 대 한는 <xref:System.Data.Odbc.OdbcDataReader.GetValues%2A>메서드 각 열을 개별적으로 검색 하는 대신 모든 열을 검색 하는 효율적인 방법을 제공 합니다.</xref:System.Data.Odbc.OdbcDataReader.GetValues%2A>       전달할 수는 <xref:System.Object>보다 적은 수의 결과 행에 포함 된 열에 포함 된 배열입니다.</xref:System.Object> 데이터의 양만 <xref:System.Object>배열 저장 배열에 복사 합니다.</xref:System.Object> 전달할 수도 있습니다는 <xref:System.Object>결과 행에 포함 된 열의 개수 이상의 길이가.</xref:System.Object>       이 메서드가 반환 <xref:System.DBNull>null 데이터베이스 열에 대 한.</xref:System.DBNull>"
  example:
  - >-
    [!code-vb[OdbcDataReader_GetValues#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcd_5_1.vb)]
     [!code-cs[OdbcDataReader_GetValues#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcd_5_1.cs)]
  syntax:
    content: public override int GetValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "형식의 배열 <xref:System.Object>특성 열을 복사할 대상.</xref:System.Object>"
    return:
      type: System.Int32
      description: "인스턴스 수가 <xref:System.Object>배열의.</xref:System.Object>"
  overload: System.Data.Odbc.OdbcDataReader.GetValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.HasRows
  id: HasRows
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: HasRows
  nameWithType: OdbcDataReader.HasRows
  fullName: System.Data.Odbc.OdbcDataReader.HasRows
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "나타내는 값을 가져옵니다 여부는 <xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref> 하나 이상의 행을 포함 합니다."
  syntax:
    content: public override bool HasRows { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref> 하나 이상의 행을 포함 하지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Odbc.OdbcDataReader.HasRows*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.IsClosed
  id: IsClosed
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: IsClosed
  nameWithType: OdbcDataReader.IsClosed
  fullName: System.Data.Odbc.OdbcDataReader.IsClosed
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "나타냅니다 여부는 <xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref> 닫혀 있습니다."
  remarks: "IsClosed 및 <xref:System.Data.Odbc.OdbcDataReader.RecordsAffected%2A>후 호출할 수 있는 속성만 <xref:System.Data.Odbc.OdbcDataReader>닫힙니다.</xref:System.Data.Odbc.OdbcDataReader> </xref:System.Data.Odbc.OdbcDataReader.RecordsAffected%2A>"
  syntax:
    content: public override bool IsClosed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref> 닫혀 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Odbc.OdbcDataReader.IsClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.IsDBNull(System.Int32)
  id: IsDBNull(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: IsDBNull(Int32)
  nameWithType: OdbcDataReader.IsDBNull(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.IsDBNull(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "열에 존재 하지 않거나 누락 된 값이 들어 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "오류 발생을 방지 하려면이 메서드는 형식화 된를 호출 하기 전에 null 열 값 get 메서드를 호출 (예를 들어 <xref:System.Data.Odbc.OdbcDataReader.GetByte%2A>, <xref:System.Data.Odbc.OdbcDataReader.GetChar%2A>등).</xref:System.Data.Odbc.OdbcDataReader.GetChar%2A> </xref:System.Data.Odbc.OdbcDataReader.GetByte%2A>"
  syntax:
    content: public override bool IsDBNull (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "서 수는&0;부터 시작 열입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 열 값에 해당 하는 경우 <xref href=&quot;System.DBNull&quot;> </xref>고, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Odbc.OdbcDataReader.IsDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: OdbcDataReader.Item(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "열 서 수를 지정 된 네이티브 형식으로 지정 된 열의 값을 가져옵니다."
  syntax:
    content: public override object this[int i] { get; }
    parameters:
    - id: i
      type: System.Int32
      description: "열 서 수입니다."
    return:
      type: System.Object
      description: "네이티브 형식으로 지정 된 열의 값입니다."
  overload: System.Data.Odbc.OdbcDataReader.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "전달 된 <xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*> 0k 범위를 벗어납니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.Item(System.String)
  id: Item(System.String)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: Item(String)
  nameWithType: OdbcDataReader.Item(String)
  fullName: System.Data.Odbc.OdbcDataReader.Item(String)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "열 이름이 지정 된 네이티브 형식으로 지정 된 열의 값을 가져옵니다."
  remarks: "대/소문자 구분 조회를 먼저 수행 됩니다. 실패 한 경우에 두 번째 대/소문자 구분 검색이 수행 됩니다.       이 메서드는 일본어가 나 너비 구분 하지 않습니다."
  syntax:
    content: public override object this[string value] { get; }
    parameters:
    - id: value
      type: System.String
      description: "열 이름입니다."
    return:
      type: System.Object
      description: "네이티브 형식으로 지정 된 열의 값입니다."
  overload: System.Data.Odbc.OdbcDataReader.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "지정한 이름 가진 열을 찾았습니다."
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.NextResult
  id: NextResult
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: NextResult()
  nameWithType: OdbcDataReader.NextResult()
  fullName: System.Data.Odbc.OdbcDataReader.NextResult()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "이동의 <xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref> 일괄 처리 SQL 문의 결과를 읽을 때 다음 결과입니다."
  remarks: "일괄 처리 SQL 문을 실행 하 여 생성 될 수 있는 여러 결과 처리 하는 데 사용 합니다.       기본적으로는 <xref:System.Data.Odbc.OdbcDataReader>첫 번째 결과에 배치 됩니다.</xref:System.Data.Odbc.OdbcDataReader>"
  syntax:
    content: public override bool NextResult ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>결과 집합이 더 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Odbc.OdbcDataReader.NextResult*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.Read
  id: Read
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: Read()
  nameWithType: OdbcDataReader.Read()
  fullName: System.Data.Odbc.OdbcDataReader.Read()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "이동 된 <xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref> 를 다음 레코드로 합니다."
  remarks: "기본 위치는 <xref:System.Data.Odbc.OdbcDataReader>첫 번째 레코드 앞입니다.</xref:System.Data.Odbc.OdbcDataReader> 따라서 데이터에 액세스 하려면 Read를 호출 해야 합니다.       반면는 <xref:System.Data.Odbc.OdbcDataReader>사용 중인 연결 <xref:System.Data.Odbc.OdbcConnection>중인 <xref:System.Data.Odbc.OdbcDataReader.Close%2A>.</xref:System.Data.Odbc.OdbcDataReader.Close%2A> 를 호출할 때까지</xref:System.Data.Odbc.OdbcConnection> </xref:System.Data.Odbc.OdbcDataReader>"
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcConnection>, an <xref:System.Data.Odbc.OdbcCommand>, and an <xref:System.Data.Odbc.OdbcDataReader>. The example reads through the data, writing it out to the console. Finally, the example closes the <xref:System.Data.Odbc.OdbcDataReader>, and then the <xref:System.Data.Odbc.OdbcConnection>.  \n  \n [!code-cs[Classic WebData IDataReader.Read Example#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcd_0_1.cs)]\n [!code-vb[Classic WebData IDataReader.Read Example#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcd_0_1.vb)]"
  syntax:
    content: public override bool Read ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>행이 더 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Odbc.OdbcDataReader.Read*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.RecordsAffected
  id: RecordsAffected
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: RecordsAffected
  nameWithType: OdbcDataReader.RecordsAffected
  fullName: System.Data.Odbc.OdbcDataReader.RecordsAffected
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "변경, 삽입 또는 SQL 문 실행 하 여 삭제 된 행의 수를 가져옵니다."
  remarks: "모든 행을 <xref:System.Data.Odbc.OdbcDataReader>.</xref:System.Data.Odbc.OdbcDataReader> 를 닫을 때까지 RecordsAffected 속성이 설정 되지       이 속성의 값은 누적 합니다. 예를 들어 일괄 처리 모드에 두 개의 레코드를 삽입 하는 경우 RecordsAffected의 값은 2가 됩니다.       <xref:System.Data.Odbc.OdbcDataReader.IsClosed%2A>RecordsAffected 후 호출할 수 있는 유일한 속성은 및에서 <xref:System.Data.Odbc.OdbcDataReader>닫힙니다.</xref:System.Data.Odbc.OdbcDataReader></xref:System.Data.Odbc.OdbcDataReader.IsClosed%2A>"
  syntax:
    content: public override int RecordsAffected { get; }
    return:
      type: System.Int32
      description: "변경, 삽입 또는 삭제 된 행의 수입니다. SELECT 문의;에 대 한-1 행이 없는 영향을 받았는지 또는 문이 실패 한 경우 0입니다."
  overload: System.Data.Odbc.OdbcDataReader.RecordsAffected*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbDataReader
  isExternal: false
  name: System.Data.Common.DbDataReader
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Data.Odbc.OdbcDataReader.Close
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Close()
  nameWithType: OdbcDataReader.Close()
  fullName: System.Data.Odbc.OdbcDataReader.Close()
- uid: System.Data.Odbc.OdbcDataReader.Depth
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Depth
  nameWithType: OdbcDataReader.Depth
  fullName: System.Data.Odbc.OdbcDataReader.Depth
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Odbc.OdbcDataReader.Dispose(System.Boolean)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: OdbcDataReader.Dispose(Boolean)
  fullName: System.Data.Odbc.OdbcDataReader.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Odbc.OdbcDataReader.FieldCount
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: FieldCount
  nameWithType: OdbcDataReader.FieldCount
  fullName: System.Data.Odbc.OdbcDataReader.FieldCount
- uid: System.Data.Odbc.OdbcDataReader.GetBoolean(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetBoolean(Int32)
  nameWithType: OdbcDataReader.GetBoolean(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetBoolean(Int32)
- uid: System.Data.Odbc.OdbcDataReader.GetByte(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetByte(Int32)
  nameWithType: OdbcDataReader.GetByte(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetByte(Int32)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Data.Odbc.OdbcDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: OdbcDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Odbc.OdbcDataReader.GetChar(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetChar(Int32)
  nameWithType: OdbcDataReader.GetChar(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetChar(Int32)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Data.Odbc.OdbcDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: OdbcDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Odbc.OdbcDataReader.GetDataTypeName(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDataTypeName(Int32)
  nameWithType: OdbcDataReader.GetDataTypeName(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDataTypeName(Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Odbc.OdbcDataReader.GetDate(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDate(Int32)
  nameWithType: OdbcDataReader.GetDate(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDate(Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Data.Odbc.OdbcDataReader.GetDateTime(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDateTime(Int32)
  nameWithType: OdbcDataReader.GetDateTime(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDateTime(Int32)
- uid: System.Data.Odbc.OdbcDataReader.GetDecimal(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDecimal(Int32)
  nameWithType: OdbcDataReader.GetDecimal(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDecimal(Int32)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Data.Odbc.OdbcDataReader.GetDouble(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDouble(Int32)
  nameWithType: OdbcDataReader.GetDouble(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDouble(Int32)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Data.Odbc.OdbcDataReader.GetEnumerator
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetEnumerator()
  nameWithType: OdbcDataReader.GetEnumerator()
  fullName: System.Data.Odbc.OdbcDataReader.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.Odbc.OdbcDataReader.GetFieldType(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetFieldType(Int32)
  nameWithType: OdbcDataReader.GetFieldType(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetFieldType(Int32)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.Odbc.OdbcDataReader.GetFloat(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetFloat(Int32)
  nameWithType: OdbcDataReader.GetFloat(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetFloat(Int32)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Data.Odbc.OdbcDataReader.GetGuid(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetGuid(Int32)
  nameWithType: OdbcDataReader.GetGuid(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetGuid(Int32)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.Odbc.OdbcDataReader.GetInt16(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetInt16(Int32)
  nameWithType: OdbcDataReader.GetInt16(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetInt16(Int32)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Data.Odbc.OdbcDataReader.GetInt32(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetInt32(Int32)
  nameWithType: OdbcDataReader.GetInt32(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetInt32(Int32)
- uid: System.Data.Odbc.OdbcDataReader.GetInt64(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetInt64(Int32)
  nameWithType: OdbcDataReader.GetInt64(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetInt64(Int32)
- uid: System.Data.Odbc.OdbcDataReader.GetName(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetName(Int32)
  nameWithType: OdbcDataReader.GetName(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetName(Int32)
- uid: System.Data.Odbc.OdbcDataReader.GetOrdinal(System.String)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetOrdinal(String)
  nameWithType: OdbcDataReader.GetOrdinal(String)
  fullName: System.Data.Odbc.OdbcDataReader.GetOrdinal(String)
- uid: System.Data.Odbc.OdbcDataReader.GetSchemaTable
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetSchemaTable()
  nameWithType: OdbcDataReader.GetSchemaTable()
  fullName: System.Data.Odbc.OdbcDataReader.GetSchemaTable()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Odbc.OdbcDataReader.GetString(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetString(Int32)
  nameWithType: OdbcDataReader.GetString(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetString(Int32)
- uid: System.Data.Odbc.OdbcDataReader.GetTime(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetTime(Int32)
  nameWithType: OdbcDataReader.GetTime(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetTime(Int32)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Data.Odbc.OdbcDataReader.GetValue(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetValue(Int32)
  nameWithType: OdbcDataReader.GetValue(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetValue(Int32)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Odbc.OdbcDataReader.GetValues(System.Object[])
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetValues(Object[])
  nameWithType: OdbcDataReader.GetValues(Object[])
  fullName: System.Data.Odbc.OdbcDataReader.GetValues(Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Odbc.OdbcDataReader.HasRows
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: HasRows
  nameWithType: OdbcDataReader.HasRows
  fullName: System.Data.Odbc.OdbcDataReader.HasRows
- uid: System.Data.Odbc.OdbcDataReader.IsClosed
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: IsClosed
  nameWithType: OdbcDataReader.IsClosed
  fullName: System.Data.Odbc.OdbcDataReader.IsClosed
- uid: System.Data.Odbc.OdbcDataReader.IsDBNull(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: IsDBNull(Int32)
  nameWithType: OdbcDataReader.IsDBNull(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.IsDBNull(Int32)
- uid: System.Data.Odbc.OdbcDataReader.Item(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Item(Int32)
  nameWithType: OdbcDataReader.Item(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.Item(Int32)
- uid: System.Data.Odbc.OdbcDataReader.Item(System.String)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Item(String)
  nameWithType: OdbcDataReader.Item(String)
  fullName: System.Data.Odbc.OdbcDataReader.Item(String)
- uid: System.Data.Odbc.OdbcDataReader.NextResult
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: NextResult()
  nameWithType: OdbcDataReader.NextResult()
  fullName: System.Data.Odbc.OdbcDataReader.NextResult()
- uid: System.Data.Odbc.OdbcDataReader.Read
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Read()
  nameWithType: OdbcDataReader.Read()
  fullName: System.Data.Odbc.OdbcDataReader.Read()
- uid: System.Data.Odbc.OdbcDataReader.RecordsAffected
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: RecordsAffected
  nameWithType: OdbcDataReader.RecordsAffected
  fullName: System.Data.Odbc.OdbcDataReader.RecordsAffected
- uid: System.Data.Odbc.OdbcDataReader.Close*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Close
  nameWithType: OdbcDataReader.Close
- uid: System.Data.Odbc.OdbcDataReader.Depth*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Depth
  nameWithType: OdbcDataReader.Depth
- uid: System.Data.Odbc.OdbcDataReader.Dispose*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Dispose
  nameWithType: OdbcDataReader.Dispose
- uid: System.Data.Odbc.OdbcDataReader.FieldCount*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: FieldCount
  nameWithType: OdbcDataReader.FieldCount
- uid: System.Data.Odbc.OdbcDataReader.GetBoolean*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetBoolean
  nameWithType: OdbcDataReader.GetBoolean
- uid: System.Data.Odbc.OdbcDataReader.GetByte*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetByte
  nameWithType: OdbcDataReader.GetByte
- uid: System.Data.Odbc.OdbcDataReader.GetBytes*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetBytes
  nameWithType: OdbcDataReader.GetBytes
- uid: System.Data.Odbc.OdbcDataReader.GetChar*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetChar
  nameWithType: OdbcDataReader.GetChar
- uid: System.Data.Odbc.OdbcDataReader.GetChars*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetChars
  nameWithType: OdbcDataReader.GetChars
- uid: System.Data.Odbc.OdbcDataReader.GetDataTypeName*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDataTypeName
  nameWithType: OdbcDataReader.GetDataTypeName
- uid: System.Data.Odbc.OdbcDataReader.GetDate*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDate
  nameWithType: OdbcDataReader.GetDate
- uid: System.Data.Odbc.OdbcDataReader.GetDateTime*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDateTime
  nameWithType: OdbcDataReader.GetDateTime
- uid: System.Data.Odbc.OdbcDataReader.GetDecimal*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDecimal
  nameWithType: OdbcDataReader.GetDecimal
- uid: System.Data.Odbc.OdbcDataReader.GetDouble*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDouble
  nameWithType: OdbcDataReader.GetDouble
- uid: System.Data.Odbc.OdbcDataReader.GetEnumerator*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetEnumerator
  nameWithType: OdbcDataReader.GetEnumerator
- uid: System.Data.Odbc.OdbcDataReader.GetFieldType*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetFieldType
  nameWithType: OdbcDataReader.GetFieldType
- uid: System.Data.Odbc.OdbcDataReader.GetFloat*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetFloat
  nameWithType: OdbcDataReader.GetFloat
- uid: System.Data.Odbc.OdbcDataReader.GetGuid*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetGuid
  nameWithType: OdbcDataReader.GetGuid
- uid: System.Data.Odbc.OdbcDataReader.GetInt16*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetInt16
  nameWithType: OdbcDataReader.GetInt16
- uid: System.Data.Odbc.OdbcDataReader.GetInt32*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetInt32
  nameWithType: OdbcDataReader.GetInt32
- uid: System.Data.Odbc.OdbcDataReader.GetInt64*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetInt64
  nameWithType: OdbcDataReader.GetInt64
- uid: System.Data.Odbc.OdbcDataReader.GetName*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetName
  nameWithType: OdbcDataReader.GetName
- uid: System.Data.Odbc.OdbcDataReader.GetOrdinal*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetOrdinal
  nameWithType: OdbcDataReader.GetOrdinal
- uid: System.Data.Odbc.OdbcDataReader.GetSchemaTable*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetSchemaTable
  nameWithType: OdbcDataReader.GetSchemaTable
- uid: System.Data.Odbc.OdbcDataReader.GetString*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetString
  nameWithType: OdbcDataReader.GetString
- uid: System.Data.Odbc.OdbcDataReader.GetTime*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetTime
  nameWithType: OdbcDataReader.GetTime
- uid: System.Data.Odbc.OdbcDataReader.GetValue*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetValue
  nameWithType: OdbcDataReader.GetValue
- uid: System.Data.Odbc.OdbcDataReader.GetValues*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetValues
  nameWithType: OdbcDataReader.GetValues
- uid: System.Data.Odbc.OdbcDataReader.HasRows*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: HasRows
  nameWithType: OdbcDataReader.HasRows
- uid: System.Data.Odbc.OdbcDataReader.IsClosed*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: IsClosed
  nameWithType: OdbcDataReader.IsClosed
- uid: System.Data.Odbc.OdbcDataReader.IsDBNull*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: IsDBNull
  nameWithType: OdbcDataReader.IsDBNull
- uid: System.Data.Odbc.OdbcDataReader.Item*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Item
  nameWithType: OdbcDataReader.Item
- uid: System.Data.Odbc.OdbcDataReader.NextResult*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: NextResult
  nameWithType: OdbcDataReader.NextResult
- uid: System.Data.Odbc.OdbcDataReader.Read*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Read
  nameWithType: OdbcDataReader.Read
- uid: System.Data.Odbc.OdbcDataReader.RecordsAffected*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: RecordsAffected
  nameWithType: OdbcDataReader.RecordsAffected
