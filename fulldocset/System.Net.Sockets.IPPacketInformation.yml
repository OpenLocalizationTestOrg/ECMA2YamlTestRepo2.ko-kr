### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.IPPacketInformation
  id: IPPacketInformation
  children:
  - System.Net.Sockets.IPPacketInformation.Address
  - System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  - System.Net.Sockets.IPPacketInformation.GetHashCode
  - System.Net.Sockets.IPPacketInformation.Interface
  - System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  - System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  langs:
  - csharp
  name: IPPacketInformation
  nameWithType: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
  type: Struct
  summary: "제공 되는 패킷 정보에 대 한 호출에서 <> </> *> 또는 <> </> *> 합니다."
  syntax:
    content: public struct IPPacketInformation
  inheritance:
  - System.ValueType
  implements: []
  platform:
  - net462
- uid: System.Net.Sockets.IPPacketInformation.Address
  id: Address
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  name: Address
  nameWithType: IPPacketInformation.Address
  fullName: System.Net.Sockets.IPPacketInformation.Address
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "호출 결과로 받은 패킷 원본 정보를 가져옵니다는 <> </> *> 메서드 또는 <> </> *> 메서드."
  syntax:
    content: public System.Net.IPAddress Address { get; }
    return:
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>호출한 결과로 받은 패킷 출처 정보를 나타내는 <> </> *> 메서드 또는 <> </> *> 메서드.</xref:System.Net.IPAddress> 유니캐스트 주소에서 전송 된 패킷에 대 한 주소 속성은의 <xref:System.Net.IPAddress>Address 속성은 멀티 캐스트를 반환 합니다. 보낸 사람의; 멀티 캐스트 또는 브로드캐스트 패킷 또는 <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> 브로드캐스트</xref:System.Net.IPAddress> 반환"
  overload: System.Net.Sockets.IPPacketInformation.Address*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: IPPacketInformation.Equals(Object)
  fullName: System.Net.Sockets.IPPacketInformation.Equals(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "이 인스턴스가 지정한 개체와 같은지 여부를 나타내는 값을 반환 합니다."
  syntax:
    content: public override bool Equals (object comparand);
    parameters:
    - id: comparand
      type: System.Object
      description: "이 인스턴스와 비교할 개체입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <code> comparand </code> 의 인스턴스가 <xref href=&quot;System.Net.Sockets.IPPacketInformation&quot;> </xref> 인스턴스 값이 고, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.Sockets.IPPacketInformation.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.IPPacketInformation.GetHashCode
  id: GetHashCode
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: IPPacketInformation.GetHashCode()
  fullName: System.Net.Sockets.IPPacketInformation.GetHashCode()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "이 인스턴스에 대 한 해시 코드를 반환합니다."
  remarks: "해시 코드의 값에서 생성 되는 <xref:System.Net.Sockets.IPPacketInformation.Address%2A>및 <xref:System.Net.Sockets.IPPacketInformation.Interface%2A>속성.</xref:System.Net.Sockets.IPPacketInformation.Interface%2A> </xref:System.Net.Sockets.IPPacketInformation.Address%2A>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Int32 해시 코드입니다."
  overload: System.Net.Sockets.IPPacketInformation.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.IPPacketInformation.Interface
  id: Interface
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  name: Interface
  nameWithType: IPPacketInformation.Interface
  fullName: System.Net.Sockets.IPPacketInformation.Interface
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "호출 하 여 연결 된 네트워크 인터페이스 정보를 가져옵니다 <> </> *> 또는 <> </> *> 합니다."
  syntax:
    content: public int Interface { get; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>네트워크 인터페이스의 인덱스를 나타내는 값입니다.</xref:System.Int32> 이 인덱스를 사용할 수 있습니다 <xref:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces*>관련 인터페이스에 대 한 자세한 정보를 보려면.</xref:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces*>"
  overload: System.Net.Sockets.IPPacketInformation.Interface*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  id: op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  name: op_Equality(IPPacketInformation,IPPacketInformation)
  nameWithType: IPPacketInformation.op_Equality(IPPacketInformation,IPPacketInformation)
  fullName: System.Net.Sockets.IPPacketInformation.op_Equality(IPPacketInformation,IPPacketInformation)
  type: Operator
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "두 <xref href=&quot;System.Net.Sockets.IPPacketInformation&quot;> </xref> 인스턴스가 동일 합니다."
  remarks: "이 연산자는 둘 다 테스트는 <xref:System.Net.Sockets.IPPacketInformation.Address%2A>및 <xref:System.Net.Sockets.IPPacketInformation.Interface%2A>두 인수 값입니다.</xref:System.Net.Sockets.IPPacketInformation.Interface%2A> </xref:System.Net.Sockets.IPPacketInformation.Address%2A>"
  syntax:
    content: public static bool op_Equality (System.Net.Sockets.IPPacketInformation packetInformation1, System.Net.Sockets.IPPacketInformation packetInformation2);
    parameters:
    - id: packetInformation1
      type: System.Net.Sockets.IPPacketInformation
      description: "<xref href=&quot;System.Net.Sockets.IPPacketInformation&quot;> </xref> 같음 연산자의 왼쪽에 있습니다."
    - id: packetInformation2
      type: System.Net.Sockets.IPPacketInformation
      description: "<xref href=&quot;System.Net.Sockets.IPPacketInformation&quot;> </xref> 같음 연산자의 오른쪽에 인스턴스입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>packetInformation1</code> and <code>packetInformation2</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Sockets.IPPacketInformation.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  id: op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  name: op_Inequality(IPPacketInformation,IPPacketInformation)
  nameWithType: IPPacketInformation.op_Inequality(IPPacketInformation,IPPacketInformation)
  fullName: System.Net.Sockets.IPPacketInformation.op_Inequality(IPPacketInformation,IPPacketInformation)
  type: Operator
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "두 <xref href=&quot;System.Net.Sockets.IPPacketInformation&quot;> </xref> 인스턴스가 다른 지 합니다."
  remarks: "이 연산자는 둘 다 테스트는 <xref:System.Net.Sockets.IPPacketInformation.Address%2A>및 <xref:System.Net.Sockets.IPPacketInformation.Interface%2A>두 인수 값입니다.</xref:System.Net.Sockets.IPPacketInformation.Interface%2A> </xref:System.Net.Sockets.IPPacketInformation.Address%2A>"
  syntax:
    content: public static bool op_Inequality (System.Net.Sockets.IPPacketInformation packetInformation1, System.Net.Sockets.IPPacketInformation packetInformation2);
    parameters:
    - id: packetInformation1
      type: System.Net.Sockets.IPPacketInformation
      description: "<xref href=&quot;System.Net.Sockets.IPPacketInformation&quot;> </xref> 같지 않음 연산자의 왼쪽에 인스턴스입니다."
    - id: packetInformation2
      type: System.Net.Sockets.IPPacketInformation
      description: "<xref href=&quot;System.Net.Sockets.IPPacketInformation&quot;> </xref> 같지 않음 연산자의 오른쪽에 인스턴스입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>packetInformation1</code> and <code>packetInformation2</code> are unequal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Sockets.IPPacketInformation.op_Inequality*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Net.Sockets.IPPacketInformation.Address
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: Address
  nameWithType: IPPacketInformation.Address
  fullName: System.Net.Sockets.IPPacketInformation.Address
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: Equals(Object)
  nameWithType: IPPacketInformation.Equals(Object)
  fullName: System.Net.Sockets.IPPacketInformation.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.Sockets.IPPacketInformation.GetHashCode
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: GetHashCode()
  nameWithType: IPPacketInformation.GetHashCode()
  fullName: System.Net.Sockets.IPPacketInformation.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.IPPacketInformation.Interface
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: Interface
  nameWithType: IPPacketInformation.Interface
  fullName: System.Net.Sockets.IPPacketInformation.Interface
- uid: System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: op_Equality(IPPacketInformation,IPPacketInformation)
  nameWithType: IPPacketInformation.op_Equality(IPPacketInformation,IPPacketInformation)
  fullName: System.Net.Sockets.IPPacketInformation.op_Equality(IPPacketInformation,IPPacketInformation)
- uid: System.Net.Sockets.IPPacketInformation
  parent: System.Net.Sockets
  isExternal: false
  name: IPPacketInformation
  nameWithType: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
- uid: System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: op_Inequality(IPPacketInformation,IPPacketInformation)
  nameWithType: IPPacketInformation.op_Inequality(IPPacketInformation,IPPacketInformation)
  fullName: System.Net.Sockets.IPPacketInformation.op_Inequality(IPPacketInformation,IPPacketInformation)
- uid: System.Net.Sockets.IPPacketInformation.Address*
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: Address
  nameWithType: IPPacketInformation.Address
- uid: System.Net.Sockets.IPPacketInformation.Equals*
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: Equals
  nameWithType: IPPacketInformation.Equals
- uid: System.Net.Sockets.IPPacketInformation.GetHashCode*
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: GetHashCode
  nameWithType: IPPacketInformation.GetHashCode
- uid: System.Net.Sockets.IPPacketInformation.Interface*
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: Interface
  nameWithType: IPPacketInformation.Interface
- uid: System.Net.Sockets.IPPacketInformation.op_Equality*
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: op_Equality
  nameWithType: IPPacketInformation.op_Equality
- uid: System.Net.Sockets.IPPacketInformation.op_Inequality*
  parent: System.Net.Sockets.IPPacketInformation
  isExternal: false
  name: op_Inequality
  nameWithType: IPPacketInformation.op_Inequality
