### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlType
  id: XamlType
  children:
  - System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)
  - System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlType.AllowedContentTypes
  - System.Xaml.XamlType.BaseType
  - System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)
  - System.Xaml.XamlType.ConstructionRequiresArguments
  - System.Xaml.XamlType.ContentProperty
  - System.Xaml.XamlType.ContentWrappers
  - System.Xaml.XamlType.DeferringLoader
  - System.Xaml.XamlType.Equals(System.Object)
  - System.Xaml.XamlType.Equals(System.Xaml.XamlType)
  - System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)
  - System.Xaml.XamlType.GetAllAttachableMembers
  - System.Xaml.XamlType.GetAllMembers
  - System.Xaml.XamlType.GetAttachableMember(System.String)
  - System.Xaml.XamlType.GetHashCode
  - System.Xaml.XamlType.GetMember(System.String)
  - System.Xaml.XamlType.GetPositionalParameters(System.Int32)
  - System.Xaml.XamlType.GetXamlNamespaces
  - System.Xaml.XamlType.Invoker
  - System.Xaml.XamlType.IsAmbient
  - System.Xaml.XamlType.IsArray
  - System.Xaml.XamlType.IsCollection
  - System.Xaml.XamlType.IsConstructible
  - System.Xaml.XamlType.IsDictionary
  - System.Xaml.XamlType.IsGeneric
  - System.Xaml.XamlType.IsMarkupExtension
  - System.Xaml.XamlType.IsNameScope
  - System.Xaml.XamlType.IsNameValid
  - System.Xaml.XamlType.IsNullable
  - System.Xaml.XamlType.IsPublic
  - System.Xaml.XamlType.IsUnknown
  - System.Xaml.XamlType.IsUsableDuringInitialization
  - System.Xaml.XamlType.IsWhitespaceSignificantCollection
  - System.Xaml.XamlType.IsXData
  - System.Xaml.XamlType.ItemType
  - System.Xaml.XamlType.KeyType
  - System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)
  - System.Xaml.XamlType.LookupAllAttachableMembers
  - System.Xaml.XamlType.LookupAllMembers
  - System.Xaml.XamlType.LookupAllowedContentTypes
  - System.Xaml.XamlType.LookupAttachableMember(System.String)
  - System.Xaml.XamlType.LookupBaseType
  - System.Xaml.XamlType.LookupCollectionKind
  - System.Xaml.XamlType.LookupConstructionRequiresArguments
  - System.Xaml.XamlType.LookupContentProperty
  - System.Xaml.XamlType.LookupContentWrappers
  - System.Xaml.XamlType.LookupCustomAttributeProvider
  - System.Xaml.XamlType.LookupDeferringLoader
  - System.Xaml.XamlType.LookupInvoker
  - System.Xaml.XamlType.LookupIsAmbient
  - System.Xaml.XamlType.LookupIsConstructible
  - System.Xaml.XamlType.LookupIsMarkupExtension
  - System.Xaml.XamlType.LookupIsNameScope
  - System.Xaml.XamlType.LookupIsNullable
  - System.Xaml.XamlType.LookupIsPublic
  - System.Xaml.XamlType.LookupIsUnknown
  - System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection
  - System.Xaml.XamlType.LookupIsXData
  - System.Xaml.XamlType.LookupItemType
  - System.Xaml.XamlType.LookupKeyType
  - System.Xaml.XamlType.LookupMarkupExtensionReturnType
  - System.Xaml.XamlType.LookupMember(System.String,System.Boolean)
  - System.Xaml.XamlType.LookupPositionalParameters(System.Int32)
  - System.Xaml.XamlType.LookupSetMarkupExtensionHandler
  - System.Xaml.XamlType.LookupSetTypeConverterHandler
  - System.Xaml.XamlType.LookupTrimSurroundingWhitespace
  - System.Xaml.XamlType.LookupTypeConverter
  - System.Xaml.XamlType.LookupUnderlyingType
  - System.Xaml.XamlType.LookupUsableDuringInitialization
  - System.Xaml.XamlType.LookupValueSerializer
  - System.Xaml.XamlType.MarkupExtensionReturnType
  - System.Xaml.XamlType.Name
  - System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  - System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  - System.Xaml.XamlType.PreferredXamlNamespace
  - System.Xaml.XamlType.SchemaContext
  - System.Xaml.XamlType.ToString
  - System.Xaml.XamlType.TrimSurroundingWhitespace
  - System.Xaml.XamlType.TypeArguments
  - System.Xaml.XamlType.TypeConverter
  - System.Xaml.XamlType.UnderlyingType
  - System.Xaml.XamlType.ValueSerializer
  langs:
  - csharp
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
  type: Class
  summary: ".NET Framework XAML 서비스에서 구현 되는 전체 XAML 시스템의 일부로 XAML 형식에 대 한 정보를 보고 합니다."
  remarks: "XamlType 클래스의 대부분의 Api에 대해 보고 개념은 XAML 사양 [MS XAML]의 특정 섹션으로 비슷하지만 XAML 형식에 대 한 정보를 제공 합니다.       XamlType는 XAML 형식에 대 한 보고 정보에 대 한.NET Framework XAML 서비스 API에서 광범위 하 게 사용 됩니다. XamlType는 인스턴스를 사용 하기 위해 또는 XAML 노드 스트림을 또는 유사한 XAML 표현에서 해당 멤버에 액세스 하는 XAML 형식에 대해 알아야 할 수 있는 정보를 보고 합니다. 보고 하는 것은 어떻게 비슷합니다 <xref:System.Type>CLR 형식 시스템에서 리플렉션 클래스와 함께 같은 <xref:System.Reflection.MemberInfo>, CLR 유형 및 그 사용법에 대 한 정보를 제공 합니다.</xref:System.Reflection.MemberInfo> </xref:System.Type>       XAML 형식 시스템을 확장 하려면 XamlType에서 파생할 수 있습니다. 효과적으로 수행 하려면 또한 해야 <xref:System.Xaml.Schema.XamlTypeInvoker>.</xref:System.Xaml.Schema.XamlTypeInvoker> 구현 <xref:System.Xaml.Schema.XamlTypeInvoker>호출 동작의 일부로 지정 하는 백업 유형 시스템에서 사용 하 여 일반화 된 XAML 형식 시스템을 사용 하도록 설정 합니다.</xref:System.Xaml.Schema.XamlTypeInvoker> 특정 사용자 지정 <xref:System.Xaml.Schema.XamlTypeInvoker>기본 XamlType 동작에 의해 사용 되는 CLR 형식 시스템에 대 한 종속성을 줄일 수 있는 방법을 제공 합니다.</xref:System.Xaml.Schema.XamlTypeInvoker>"
  syntax:
    content: 'public class XamlType : IEquatable<System.Xaml.XamlType>'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Xaml.XamlType>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Type,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(Type,XamlSchemaContext)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 클래스 기본 CLR 형식 정보에 기반 합니다."
  syntax:
    content: public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: underlyingType
      type: System.Type
      description: "기본 CLR <xref:System.Type>를 생성 하려면 XAML 형식에 대 한.</xref:System.Type>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "XAML 판독기 또는 XAML 작성기에 대 한 XAML 스키마 컨텍스트."
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>underlyingType</code> or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 클래스 형식에 대 한 문자열 이름을 기반으로 합니다."
  remarks: "protected 생성자입니다. 현재 공용 파생된 클래스가 생성을 위해이 특정 경로 사용 하는 있습니다. 기존 소비자로 <xref:System.Xaml.XamlType>, 다른 생성자 시그니처를 사용 해야 합니다 (<xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29>, <xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29>, 또는 <xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>) 초기화 하는 <xref:System.Xaml.XamlType>개체입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> </xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29> </xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29> </xref:System.Xaml.XamlType>"
  syntax:
    content: protected XamlType (string typeName, System.Collections.Generic.IList<System.Xaml.XamlType> typeArguments, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: typeName
      type: System.String
      description: "만들려는 형식의 이름입니다."
    - id: typeArguments
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "에 대 한 형식 인수는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 제네릭 형식을 나타내는입니다. 하며 될 수 있습니다 (자주) <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, 제네릭 형식 아님을 나타냅니다."
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "XAML 판독기 및 XAML 작성기에 대 한 XAML 스키마 컨텍스트."
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>typeName</code> or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)
  id: '#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 기본 형식 정보에 따라 클래스 및 <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref> 구현 합니다."
  syntax:
    content: public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlTypeInvoker invoker);
    parameters:
    - id: underlyingType
      type: System.Type
      description: "생성 하려면 XAML 형식에 대 한 내부 형식입니다."
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "XAML 판독기에 대 한 XAML 스키마 컨텍스트입니다."
    - id: invoker
      type: System.Xaml.Schema.XamlTypeInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref> 런타임 리플렉션을 처리 하는 구현에 대 한 호출에서 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>underlyingType</code> or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 클래스는 XAML 네임 스페이스 및 유형에 대 한 문자열 이름에 기반 합니다. 이 생성자는 단독으로 분석 및 XAML 노드는 지원 형식 시스템 및 XAML 스키마 컨텍스트에는 백업에 알려진 형식 사용 기록 합니다."
  remarks: "내부 형식 시스템에 매핑되는 XAML 형식의 사용할 수 있는 &quot;알 수 없음된&quot; 형식에 대해서만이 생성자를 사용 합니다. 이 생성자의 결과 생성할 수 없습니다 여기서 <xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName>는 `true`.</xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName> 기본 reflector 논리 <xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName>.</xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName> 내부 형식에 보고 하는 대신, 그러나이 동작 때문에 변경할 수는 <xref:System.Xaml.XamlType.LookupIsUnknown%2A>재정의.</xref:System.Xaml.XamlType.LookupIsUnknown%2A>"
  syntax:
    content: public XamlType (string unknownTypeNamespace, string unknownTypeName, System.Collections.Generic.IList<System.Xaml.XamlType> typeArguments, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: unknownTypeNamespace
      type: System.String
      description: "문자열 형식에 대 한 XAML 네임 스페이스입니다."
    - id: unknownTypeName
      type: System.String
      description: "제공 된 형식의 이름을 `unknownTypeNamespace` XAML 네임 스페이스입니다."
    - id: typeArguments
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "에 대 한 형식 인수는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 제네릭 형식을 나타내는입니다. 하며 될 수 있습니다 (자주) <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, 제네릭 형식 아님을 나타냅니다."
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "XAML 판독기 또는 XAML 작성기에 대 한 XAML 스키마 컨텍스트."
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>unknownTypeNamespace</code>, <code>unknownTypeName</code>, or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.AllowedContentTypes
  id: AllowedContentTypes
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: AllowedContentTypes
  nameWithType: XamlType.AllowedContentTypes
  fullName: System.Xaml.XamlType.AllowedContentTypes
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "읽기 전용으로 사용할 수 있는 형식 컬렉션을 가져옵니다는 <xref:System.Xaml.XamlType.ContentProperty*>값이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>.</xref:System.Xaml.XamlType.ContentProperty*>"
  remarks: "할당 가능한 형식 (예: 콘텐츠 형식으로 허용 되는 기본 형식에 할당할 수)를 특정 콘텐츠 형식 여러 유형의 용도로 AllowedContentTypes 간주 되지 않습니다.       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A> </xref:System.Xaml.XamlType>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> AllowedContentTypes { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "가능한 콘텐츠 형식의 읽기 전용 컬렉션입니다."
  overload: System.Xaml.XamlType.AllowedContentTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.BaseType
  id: BaseType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: BaseType
  nameWithType: XamlType.BaseType
  fullName: System.Xaml.XamlType.BaseType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 직접적인이 XAML 형식의 기본 형식에 대 한 합니다. 이 값의 결정이 내부 형식에 기반 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 및 스키마 컨텍스트."
  remarks: "에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupBaseType%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupBaseType%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupBaseType%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupBaseType%2A> 기본적으로 BaseType 반환 나타내는 내부 상수는 <xref:System.Object>경우 <xref:System.Xaml.XamlType.UnderlyingType%2A>은 `null`.</xref:System.Xaml.XamlType.UnderlyingType%2A> </xref:System.Object>      > [!IMPORTANT] > <xref:System.Xaml.XamlType.LookupBaseType%2A>는 가상 함수 이며 따라서 재정의할 수 있습니다.</xref:System.Xaml.XamlType.LookupBaseType%2A> 재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템의 정보는 XAML 형식에 대 한 보고 된 형식 정보를 변경할 수 없습니다. 할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다."
  syntax:
    content: public System.Xaml.XamlType BaseType { get; }
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> 직접적인이 XAML 형식의 기본 형식에 대 한 합니다."
  overload: System.Xaml.XamlType.BaseType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)
  id: CanAssignTo(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: CanAssignTo(XamlType)
  nameWithType: XamlType.CanAssignTo(XamlType)
  fullName: System.Xaml.XamlType.CanAssignTo(XamlType)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 반환 하는지 여부를이 인스턴스의 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 가 지정 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 할당 가능한 형식 목록에 합니다."
  remarks: "할당 가능한 형식이 참조 형식의 모든 기능을 제공 하지는 않지만 할당을 위해 사용할 수 있습니다. 예를 들어 속성의 값에 대 한 형식 일치 하는 할당을 사용할 수 있습니다. XAML에서 할당할 수 있는 형식의 개념은 CLR 형식 시스템에서 위로 캐스팅의 개념과 비슷합니다. 예를 들어 CLR 형식 시스템에서 모든 형식에는 <xref:System.Object>할당 가능한 형식 목록에.</xref:System.Object>       경우 둘 중 <xref:System.Xaml.XamlType>사용 되는 인스턴스 비교에 <xref:System.Xaml.XamlType.IsUnknown%2A>같음 `true`,이 메서드는 반환 하는 특별 한 알 수 없는 모드 `true` 경우 두 <xref:System.Xaml.XamlType>인스턴스가 동일 합니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.IsUnknown%2A> </xref:System.Xaml.XamlType>       CLR을 사용 하 여 기본 구현은 <xref:System.Type>에서 <xref:System.Xaml.XamlType.UnderlyingType%2A>이 <xref:System.Xaml.XamlType>입력 <xref:System.Xaml.XamlType>, 및 호출 <xref:System.Type.IsAssignableFrom%2A>.</xref:System.Type.IsAssignableFrom%2A> </xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.UnderlyingType%2A> </xref:System.Type> 서로 다른 할당 가능한 형식 확인 하려는 경우이 메서드를 재정의 합니다.       Null을 전달 `xamlType` 예외를 throw 하지 않으며 항상 반환 `false`합니다.      > [!IMPORTANT] > CanAssignTo는 가상 함수 이며 따라서 재정의할 수 있습니다. 재정의 (악의적인 목적 여부 등) XAML 형식의 않든 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 캐스팅 동작 하도록 변경 해야 합니다. 할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다."
  syntax:
    content: public virtual bool CanAssignTo (System.Xaml.XamlType xamlType);
    parameters:
    - id: xamlType
      type: System.Xaml.XamlType
      description: "형식에 대해 현재 확인할 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <code> xamlType </code> 할당 가능한 형식 목록에는 이렇게 하지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.CanAssignTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ConstructionRequiresArguments
  id: ConstructionRequiresArguments
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ConstructionRequiresArguments
  nameWithType: XamlType.ConstructionRequiresArguments
  fullName: System.Xaml.XamlType.ConstructionRequiresArguments
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 인수가 있어야 합니다 (제네릭 제약 조건을 통해 <xref uid=&quot;langword_csharp_x:TypeArguments&quot; name=&quot;x:TypeArguments&quot; href=&quot;&quot;> </xref>, 초기화 텍스트 또는 기타 XAML 기술을) 형식의 올바른 인스턴스를 구성 하려면."
  remarks: "에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A>"
  syntax:
    content: public bool ConstructionRequiresArguments { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>인스턴스를 생성; 일부 인수 값이 필요한 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.ConstructionRequiresArguments*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ContentProperty
  id: ContentProperty
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ContentProperty
  nameWithType: XamlType.ContentProperty
  fullName: System.Xaml.XamlType.ContentProperty
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 이의 content 속성에 대 한 정보 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "때 바인딩을 사용 하 여 또는 CLR 형식 시스템의 백업, XAML 콘텐츠 속성인 지정할 수 있습니다 형식에 적용 하 여 <xref:System.Windows.Markup.ContentPropertyAttribute>형식 정의에.</xref:System.Windows.Markup.ContentPropertyAttribute>       이 속성에 맞춥니다.이 `[content property]` [MS XAML] 사양에 대 한 정보 항목입니다.       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupContentProperty%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupContentProperty%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupContentProperty%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupContentProperty%2A>"
  syntax:
    content: public System.Xaml.XamlMember ContentProperty { get; }
    return:
      type: System.Xaml.XamlMember
      description: "<xref href=&quot;System.Xaml.XamlMember&quot;></xref>이 콘텐츠 속성에 대 한 정보 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다. 되었을 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 콘텐츠 속성이 없는 경우."
  overload: System.Xaml.XamlType.ContentProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ContentWrappers
  id: ContentWrappers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ContentWrappers
  nameWithType: XamlType.ContentWrappers
  fullName: System.Xaml.XamlType.ContentWrappers
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "강력한 형식의 문자열 같은 엄격한 형식 일치 항목이 없을 때 콘텐츠 속성에 대 한 콘텐츠를 래핑하는 데 사용 되는 형식을 가져옵니다 <xref uid=&quot;langword_csharp_Collection&lt;T&gt;&quot; name=&quot;Collection&lt;T&gt;&quot; href=&quot;&quot;> </xref>합니다."
  remarks: "이 속성은 형식 일치 완화 시키는 래퍼가 없으면 인 `null`합니다.       형식으로 평가 하는 <xref:System.Xaml.XamlType.CanAssignTo%2A>를 특정 콘텐츠 형식에 대 한 여러 유형의 용도로 ContentWrappers 고려 되지 않습니다.</xref:System.Xaml.XamlType.CanAssignTo%2A>       <xref:System.Xaml> <xref:System.Xaml.XamlType>XAML 콘텐츠 래퍼 형식에 <xref:System.Windows.Markup.ContentWrapperAttribute>.</xref:System.Windows.Markup.ContentWrapperAttribute> 로 형식에 지정할 수 있습니다, 그리고</xref:System.Xaml.XamlType> 및</xref:System.Xaml> 에 대 한 CLR 바인딩에       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupContentWrappers%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupContentWrappers%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupContentWrappers%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupContentWrappers%2A>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> ContentWrappers { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "가능한 콘텐츠 래퍼; 형식의 읽기 전용 컬렉션 그렇지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다. 설명 부분을 참조 하십시오."
  overload: System.Xaml.XamlType.ContentWrappers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.DeferringLoader
  id: DeferringLoader
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: DeferringLoader
  nameWithType: XamlType.DeferringLoader
  fullName: System.Xaml.XamlType.DeferringLoader
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 나타내는 지연 된 로드이 형식에 대 한 변환 동작 합니다."
  remarks: "WPF의 XAML 템플릿 동작은 지연 된 로드 동작의 예시입니다.       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupDeferringLoader%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupDeferringLoader%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupDeferringLoader%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupDeferringLoader%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> DeferringLoader { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 와 <xref href=&quot;System.Xaml.XamlDeferringLoader&quot;> </xref> 이 형식에 대 한 지연 된 로드 동작을 나타내는 제약 조건입니다."
  overload: System.Xaml.XamlType.DeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: XamlType.Equals(Object)
  fullName: System.Xaml.XamlType.Equals(Object)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "현재 개체가 다른 개체와 같은지 여부를 나타냅니다."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "이 개체와 비교할 개체입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 개체가 같은지를 하는 경우는 <code> obj </code> 매개 변수, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Equals(System.Xaml.XamlType)
  id: Equals(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Equals(XamlType)
  nameWithType: XamlType.Equals(XamlType)
  fullName: System.Xaml.XamlType.Equals(XamlType)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다."
  syntax:
    content: public bool Equals (System.Xaml.XamlType other);
    parameters:
    - id: other
      type: System.Xaml.XamlType
      description: "이 개체와 비교할 개체입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 개체가 같은지를 하는 경우는 <code> other </code> 매개 변수, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)
  id: GetAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAliasedProperty(XamlDirective)
  nameWithType: XamlType.GetAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.GetAliasedProperty(XamlDirective)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 XAML 지시문에 별칭을 있는 XAML 멤버를 반환 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 메서드를 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupAliasedProperty%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAliasedProperty%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupAliasedProperty%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupAliasedProperty%2A>"
  syntax:
    content: public System.Xaml.XamlMember GetAliasedProperty (System.Xaml.XamlDirective directive);
    parameters:
    - id: directive
      type: System.Xaml.XamlDirective
      description: "찾을 별칭이 지정 된 멤버에 대 한 지시문입니다."
    return:
      type: System.Xaml.XamlMember
      description: "별칭이 지정 된 멤버 경우 반환 합니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.GetAliasedProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAllAttachableMembers
  id: GetAllAttachableMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAllAttachableMembers()
  nameWithType: XamlType.GetAllAttachableMembers()
  fullName: System.Xaml.XamlType.GetAllAttachableMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 노출 되는 모든 연결 가능한 속성이 포함 된 컬렉션을 반환 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "각 <xref:System.Xaml.XamlMember>반환된 된 컬렉션의 개념을 지 원하는 값을 포함 해야 하는 <xref:System.Xaml.XamlMember>멤버에 연결할 수 있습니다.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember> 예를 들어 멤버를 반환할지 `true` 에 대 한 <xref:System.Xaml.XamlMember.IsAttachable%2A>에 대 한 유형을 <xref:System.Xaml.XamlMember.TargetType%2A>등.</xref:System.Xaml.XamlMember.TargetType%2A> </xref:System.Xaml.XamlMember.IsAttachable%2A>       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 메서드를 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>"
  syntax:
    content: public System.Collections.Generic.ICollection<System.Xaml.XamlMember> GetAllAttachableMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Xaml.XamlMember}
      description: "0 또는 그 이상 포함 하는 컬렉션 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 값입니다."
  overload: System.Xaml.XamlType.GetAllAttachableMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAllMembers
  id: GetAllMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAllMembers()
  nameWithType: XamlType.GetAllMembers()
  fullName: System.Xaml.XamlType.GetAllMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 노출 되는 모든 멤버가 포함 된 컬렉션을 반환 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "이 메서드의 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupAllMembers%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAllMembers%2A>"
  syntax:
    content: public System.Collections.Generic.ICollection<System.Xaml.XamlMember> GetAllMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Xaml.XamlMember}
      description: "0 또는 그 이상 포함 하는 컬렉션 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 값입니다."
  overload: System.Xaml.XamlType.GetAllMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAttachableMember(System.String)
  id: GetAttachableMember(System.String)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAttachableMember(String)
  nameWithType: XamlType.GetAttachableMember(String)
  fullName: System.Xaml.XamlType.GetAttachableMember(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 연결 가능한 소속 라는 특정 나타내는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "이 메서드의 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupAttachableMember%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAttachableMember%2A>      > [!IMPORTANT] > <xref:System.Xaml.XamlType.LookupAttachableMember%2A>는 가상 함수 이며 따라서 재정의할 수 있습니다.</xref:System.Xaml.XamlType.LookupAttachableMember%2A> 재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 <xref:System.ComponentModel.TypeDescriptor> `Get*` 기본 CLR 형식에 대 한 정보.</xref:System.ComponentModel.TypeDescriptor> 보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다."
  syntax:
    content: public System.Xaml.XamlMember GetAttachableMember (string name);
    parameters:
    - id: name
      type: System.String
      description: "가져올에 연결할 수 있는 멤버의 이름 `ownerTypeName.MemberName` 폼입니다."
    return:
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 요청 된 연결 가능한 멤버;에 대 한 개체, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>해당 이름으로 연결할 수 있는 멤버가 있는 경우."
  overload: System.Xaml.XamlType.GetAttachableMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetHashCode
  id: GetHashCode
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: XamlType.GetHashCode()
  fullName: System.Xaml.XamlType.GetHashCode()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 개체에 대 한 해시 코드를 반환합니다."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "정수 해시 코드입니다."
  overload: System.Xaml.XamlType.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetMember(System.String)
  id: GetMember(System.String)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetMember(String)
  nameWithType: XamlType.GetMember(String)
  fullName: System.Xaml.XamlType.GetMember(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 멤버에서 명명 된 특정 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "에 대 한 값 `name` 정규화 되지 않은 것으로 예상 됩니다. 연결 된 멤버를 나타내는 정규화 된 형식 이름에 제출 해야 <xref:System.Xaml.XamlType.GetAttachableMember%2A>대신.</xref:System.Xaml.XamlType.GetAttachableMember%2A> 접두사가 붙은 이름을 사용할 수 없습니다; 멤버 접두사는 상황에서 사용량에 따라 및 XAML 형식 시스템은 이러한 사용의 컨텍스트 및 접두사 매핑되는 방법을 알 수 없습니다.       이 메서드의 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupMember%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupMember%2A>      > [!IMPORTANT] > <xref:System.Xaml.XamlType.LookupMember%2A>는 가상 함수 이며 따라서 재정의할 수 있습니다.</xref:System.Xaml.XamlType.LookupMember%2A> 재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 <xref:System.ComponentModel.TypeDescriptor> `Get*` 기본 CLR 형식에 대 한 정보.</xref:System.ComponentModel.TypeDescriptor> 보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다."
  syntax:
    content: public System.Xaml.XamlMember GetMember (string name);
    parameters:
    - id: name
      type: System.String
      description: "(String)로 가져올 멤버의 이름입니다."
    return:
      type: System.Xaml.XamlMember
      description: "<xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 이러한 구성원이 없으면 되었으면 멤버에 대 한 정보 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.GetMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetPositionalParameters(System.Int32)
  id: GetPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetPositionalParameters(Int32)
  nameWithType: XamlType.GetPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.GetPositionalParameters(Int32)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "태그 확장 형식에이 대 한 특정 태그 확장 사용에서 지원 되는 위치 매개 변수의 형식을 반환 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "이 API는 경우이 해당만 <xref:System.Xaml.XamlType>태그 확장을 나타내는 (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> 은 `true`).</xref:System.Xaml.XamlType.IsMarkupExtension%2A> </xref:System.Xaml.XamlType>       입력 `parameterCount` 요청 특정 위치 매개 변수 형식에 대 한 않습니다. 태그 확장 사용의 인자 수 지정 됩니다. 태그 확장 사용은 종종 여러 &quot;서명&quot; 하 고 구분 하기 위해 다른 매개 변수 인자 (개수)의 위치 매개 변수를 사용 합니다. 그러나 중복 arities를 허용 하기 위해 차이점에 대 한 종류의 위치 매개 변수를 사용 하 여 스키마 컨텍스트를 구성할 수 있습니다. 자세한 내용은 <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>.</xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A> 을 참조 하십시오. 특정 인자 (개수)에 대 한 매개 변수 위치와 형식 달라질 수 있습니다. 위치 형식을 특정 인자 태그 확장 사용을 가져오려면 먼저 GetPositionalParameters 인자 개수로 호출 합니다. 그런 다음 반환된 된 컬렉션에서 해당 위치의 항목을 가져옵니다.       이 메서드의 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupPositionalParameters%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupPositionalParameters%2A>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> GetPositionalParameters (int parameterCount);
    parameters:
    - id: parameterCount
      type: System.Int32
      description: "에 대 한 정보를 원하는 특정 구문 또는 생성자 모드의 수 (숫자)입니다."
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "목록이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 값, 여기서 각 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 구문에서 해당 위치에 대 한 형식입니다. 태그 확장에 대 한 태그 입력을 제공할 경우 동일한 순서로 종류를 지정 해야 합니다."
  overload: System.Xaml.XamlType.GetPositionalParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetXamlNamespaces
  id: GetXamlNamespaces
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetXamlNamespaces()
  nameWithType: XamlType.GetXamlNamespaces()
  fullName: System.Xaml.XamlType.GetXamlNamespaces()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "형식에 포함 된 XAML 네임 스페이스에 대 한 문자열 식별자의 목록을 반환 합니다."
  remarks: "일반적인 XAML 네임 스페이스 식별자는 URI 형식의 문자열입니다.       기본 구현에서는 다음을 순서 대로 검사: 구문에서 제공 되는 XAML 네임 스페이스 (<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> 서명만 수행); 및 스키마 컨텍스트를 사용할 수 있는 네임 스페이스.</xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> 각각 `null`, 단일 빈 문자열을 포함 하는 새 목록이 생성 됩니다. 조회 방법을 변경 하려면이 메서드를 재정의할 수 있습니다."
  syntax:
    content: public virtual System.Collections.Generic.IList<string> GetXamlNamespaces ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
      description: "각 문자열은 XAML 네임 스페이스에 대 한 URI 식별자의 문자열 값의 목록."
  overload: System.Xaml.XamlType.GetXamlNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Invoker
  id: Invoker
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Invoker
  nameWithType: XamlType.Invoker
  fullName: System.Xaml.XamlType.Invoker
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref> 과 관련 구현 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>, 호출자를 호출 하거나 호출할 수 <xref:System.Xaml.XamlType.LookupInvoker%2A>또는 해당 메서드의 특정 재정의.</xref:System.Xaml.XamlType.LookupInvoker%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupInvoker%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupInvoker%2A>       경우는 <xref:System.Xaml.XamlType.LookupInvoker%2A>반환 재정의 `null`, 기본 구현은 반환 하는 경우 또는 `null` <xref:System.Xaml.XamlType.UnderlyingType%2A>이 <xref:System.Xaml.XamlType>호출자 <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName>.</xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName> 를 반환 하는 다음</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.UnderlyingType%2A> 의 부족으로 인해</xref:System.Xaml.XamlType.LookupInvoker%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlTypeInvoker Invoker { get; }
    return:
      type: System.Xaml.Schema.XamlTypeInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref> 과 관련 구현 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.Invoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsAmbient
  id: IsAmbient
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsAmbient
  nameWithType: XamlType.IsAmbient
  fullName: System.Xaml.XamlType.IsAmbient
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML 정의 기준으로 하는 앰비언트 형식을 나타냅니다."
  remarks: "에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsAmbient%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsAmbient%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupIsAmbient%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupIsAmbient%2A>"
  syntax:
    content: public bool IsAmbient { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 앰비언트 유형을 나타내며, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.IsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsArray
  id: IsArray
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsArray
  nameWithType: XamlType.IsArray
  fullName: System.Xaml.XamlType.IsArray
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 배열을 나타냅니다."
  remarks: "에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupCollectionKind%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupCollectionKind%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupCollectionKind%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: public bool IsArray { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 배열을 나타냅니다, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.IsArray*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsCollection
  id: IsCollection
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsCollection
  nameWithType: XamlType.IsCollection
  fullName: System.Xaml.XamlType.IsCollection
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 컬렉션을 나타냅니다."
  remarks: "에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupCollectionKind%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupCollectionKind%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupCollectionKind%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: public bool IsCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 컬렉션을 나타냅니다; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.IsCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsConstructible
  id: IsConstructible
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsConstructible
  nameWithType: XamlType.IsConstructible
  fullName: System.Xaml.XamlType.IsConstructible
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML 정의 기준으로 하는 생성 가능 유형을 나타냅니다."
  remarks: "이 속성에 맞춥니다.이 `[is default constructible]` [MS XAML] 사양에 대 한 정보 항목입니다.       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsConstructible%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsConstructible%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupIsConstructible%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupIsConstructible%2A>"
  syntax:
    content: public bool IsConstructible { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 생성 가능 형식을 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.IsConstructible*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsDictionary
  id: IsDictionary
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsDictionary
  nameWithType: XamlType.IsDictionary
  fullName: System.Xaml.XamlType.IsDictionary
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML 정의 기준으로 사전을 나타냅니다."
  remarks: "이 속성에 맞춥니다.이 `[is dictionary]` [MS XAML] 사양에 대 한 정보 항목입니다.       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupCollectionKind%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupCollectionKind%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupCollectionKind%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: public bool IsDictionary { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 사전을 나타냅니다, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.IsDictionary*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsGeneric
  id: IsGeneric
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsGeneric
  nameWithType: XamlType.IsGeneric
  fullName: System.Xaml.XamlType.IsGeneric
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 제네릭 형식을 나타냅니다."
  remarks: "이 속성은 <xref:System.Xaml.XamlType.TypeArguments%2A>안내 하십시오.</xref:System.Xaml.XamlType.TypeArguments%2A> null 값을 확인 하는 도우미 속성 관련 없는 `Lookup` IsGeneric 관련 된 메서드."
  syntax:
    content: public bool IsGeneric { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 제네릭 형식을 나타내면, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.IsGeneric*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsMarkupExtension
  id: IsMarkupExtension
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsMarkupExtension
  nameWithType: XamlType.IsMarkupExtension
  fullName: System.Xaml.XamlType.IsMarkupExtension
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 태그 확장을 나타냅니다."
  remarks: "XAML 사양 측면에서이 형식에 할당할 수 있어야 `x:MarkupExtension` 반환 하기 위해 `true` IsMarkupExtension에 대 한 합니다.       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A>"
  syntax:
    content: public bool IsMarkupExtension { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 태그 확장을 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.IsMarkupExtension*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsNameScope
  id: IsNameScope
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsNameScope
  nameWithType: XamlType.IsNameScope
  fullName: System.Xaml.XamlType.IsNameScope
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML 정의 기준으로 XAML 이름 범위를 나타냅니다."
  remarks: "속성 또는 속성에 사용 되는 이름의 고유성을 적용 하는 XAML 이름 범위 `x:Name`  /  `[name property]`합니다. IsNameScope 이면 `true`, 고유성을 적용 하기 위한 메커니즘이 있어야 하 고 XAML 이름 범위를 소유 하는이 형식의 관점에서 평가 해야 합니다. 그런 다음 XAML 이름 범위 다른 XAML 이름 범위 소유 하는 형식이 발견 될 때까지 형식 내용으로 확장 합니다.       이 속성에 맞춥니다.이 `[is name scope]` [MS XAML] 사양에 대 한 정보 항목입니다.       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsNameScope%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsNameScope%2A> </xref:System.Xaml.XamlType>"
  syntax:
    content: public bool IsNameScope { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML 이름 범위를 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.IsNameScope*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsNameValid
  id: IsNameValid
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsNameValid
  nameWithType: XamlType.IsNameValid
  fullName: System.Xaml.XamlType.IsNameValid
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 유효한를 사용 하 여 초기화 <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> 해당 <xref:System.Xaml.XamlType.Name*>.</xref:System.Xaml.XamlType.Name*> 문자열"
  syntax:
    content: public bool IsNameValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 유효한를 사용 하 여 초기화 <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> 문자열; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.IsNameValid*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsNullable
  id: IsNullable
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsNullable
  nameWithType: XamlType.IsNullable
  fullName: System.Xaml.XamlType.IsNullable
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML 정의 기준으로 null 허용 형식을 나타냅니다."
  remarks: "이 속성에 맞춥니다.이 `[is nullable]` [MS XAML] 사양에 대 한 정보 항목입니다.       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsNullable%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsNullable%2A> </xref:System.Xaml.XamlType>"
  syntax:
    content: public bool IsNullable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> nullable 형식을 나타내는지, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.IsNullable*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsPublic
  id: IsPublic
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsPublic
  nameWithType: XamlType.IsPublic
  fullName: System.Xaml.XamlType.IsPublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 관련 형식 시스템에서 공용 형식을 나타냅니다."
  remarks: "에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsPublic%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsPublic%2A> </xref:System.Xaml.XamlType>      > [!IMPORTANT] > <xref:System.Xaml.XamlType.LookupIsPublic%2A>는 가상 함수 이며 따라서 재정의할 수 있습니다.</xref:System.Xaml.XamlType.LookupIsPublic%2A> 재정의 (악의적인 목적 여부 또는 기타) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템 및 액세스 정보 XAML 형식에 대 한 보고 된 액세스 정보를 변경할 수 없습니다. 할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다."
  syntax:
    content: public bool IsPublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> public 형식을 나타내는지, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.IsPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsUnknown
  id: IsUnknown
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsUnknown
  nameWithType: XamlType.IsUnknown
  fullName: System.Xaml.XamlType.IsUnknown
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 기본 형식 시스템에서 확인할 수 없는 형식을 나타냅니다."
  remarks: "에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsUnknown%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsUnknown%2A> </xref:System.Xaml.XamlType>       과 관련 된 로드 경로 대 한 <xref:System.Xaml.XamlObjectWriter>, <xref:System.Xaml.XamlType>올려진 `true` 에 IsUnknown 개체 그래프에 쓸 수 없습니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlObjectWriter> 기본 구현에서 <xref:System.Xaml>, <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName>throw 호출는 <xref:System.Xaml.XamlObjectWriterException>때 관련 <xref:System.Xaml.XamlType>보고서 `true` IsUnknown에 대 한.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName> </xref:System.Xaml> 전달 해서는 안는 <xref:System.Xaml.XamlType>IsUnknown으로 올려진 `true` 에서 예외를 처리할 준비가 있지 않은 경우 <xref:System.Xaml.XamlObjectWriter>, 또는 다른 방법으로 조정할 수 있는 <xref:System.Xaml.XamlObjectWriter>동작 또는 개체 그래프를 쓰기 전에 XAML 노드 스트림을.</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlType>"
  syntax:
    content: public bool IsUnknown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 확인할 수 없는 유형을 나타내며, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.IsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsUsableDuringInitialization
  id: IsUsableDuringInitialization
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsUsableDuringInitialization
  nameWithType: XamlType.IsUsableDuringInitialization
  fullName: System.Xaml.XamlType.IsUsableDuringInitialization
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부를이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 상-XAML 초기화 하는 동안 만들어집니다."
  remarks: "위에서 아래로 개체 그래프를 만들 때 XAML 프로세서 동작에 근접 하는 메타포. 위에서 아래로 작성할 때 형식이 인스턴스화되고 부모에 연결 된 다음 해당 속성이 설정 됩니다. 하향식 생성 속성 변경 처리기를 여러 번 호출 하는 발생 하지 않습니다. 이러한 처리는 개체 그래프를 위로 잔물결 및 따라서 여러 처리기 호출을 제거 하 고이 개체 그래프의 시작을 위해 성능을 최적화 만듭니다.       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A>"
  syntax:
    content: public bool IsUsableDuringInitialization { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 고, 그렇지 않으면 XAML 초기화 하는 동안 하향식 빌드될 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.IsUsableDuringInitialization*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsWhitespaceSignificantCollection
  id: IsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsWhitespaceSignificantCollection
  nameWithType: XamlType.IsWhitespaceSignificantCollection
  fullName: System.Xaml.XamlType.IsWhitespaceSignificantCollection
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XML 정의 기준으로 공백 의미 컬렉션을 나타냅니다."
  remarks: "에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>"
  syntax:
    content: public bool IsWhitespaceSignificantCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 는 공백 의미 컬렉션을 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.IsWhitespaceSignificantCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsXData
  id: IsXData
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsXData
  nameWithType: XamlType.IsXData
  fullName: System.Xaml.XamlType.IsXData
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XML 나타냅니다 <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;> </xref>, XAML 정의 기준으로 합니다."
  remarks: "이 속성에 맞춥니다.이 `[is xdata]` [MS XAML] 사양에 대 한 정보 항목입니다.       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsXData%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsXData%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupIsXData%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupIsXData%2A>"
  syntax:
    content: public bool IsXData { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsXData*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ItemType
  id: ItemType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ItemType
  nameWithType: XamlType.ItemType
  fullName: System.Xaml.XamlType.ItemType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "에 대 한 형식 정보를 제공 하는 값을 가져옵니다는 <xref uid=&quot;langword_csharp_Items&quot; name=&quot;Items&quot; href=&quot;&quot;> </xref> 속성 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "이 속성은이 경우 관련만 <xref:System.Xaml.XamlType>컬렉션을 나타냅니다 (<xref:System.Xaml.XamlType.IsCollection%2A> 은 `true`).</xref:System.Xaml.XamlType.IsCollection%2A> </xref:System.Xaml.XamlType> `Items` 속성은 해당 유형의 컬렉션 또는 배열 항목을 보유 한 모든 속성.       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupItemType%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupItemType%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupItemType%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupItemType%2A>"
  syntax:
    content: public System.Xaml.XamlType ItemType { get; }
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 컬렉션에 항목의 형식에 대 한 개체, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>,이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 컬렉션을 나타내지 않습니다."
  overload: System.Xaml.XamlType.ItemType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.KeyType
  id: KeyType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: KeyType
  nameWithType: XamlType.KeyType
  fullName: System.Xaml.XamlType.KeyType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 키 속성에 대 한 형식 정보를 제공 하는 값을 가져옵니다 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>경우는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 사전을 나타냅니다."
  remarks: "이 속성은이 경우 관련만 <xref:System.Xaml.XamlType>사전을 나타냅니다 (<xref:System.Xaml.XamlType.IsDictionary%2A> 은 `true`).</xref:System.Xaml.XamlType.IsDictionary%2A> </xref:System.Xaml.XamlType>       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupKeyType%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupKeyType%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupKeyType%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupKeyType%2A>"
  syntax:
    content: public System.Xaml.XamlType KeyType { get; }
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 그렇지 사전 사용에 대 한 키의 형식에 대 한 개체 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>,이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 사전을 나타내지 않습니다."
  overload: System.Xaml.XamlType.KeyType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)
  id: LookupAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAliasedProperty(XamlDirective)
  nameWithType: XamlType.LookupAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.LookupAliasedProperty(XamlDirective)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 XAML 지시문에 별칭을 있는 XAML 멤버를 반환 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "호출자가 <xref:System.Xaml.XamlType.GetAliasedProperty%2A>.</xref:System.Xaml.XamlType.GetAliasedProperty%2A> 값을 가져올 때이 메서드를 호출할 수 있습니다.       기본 구현은 다음 XAML 지시문에 대 한 결과 반환할 수 있습니다: `Key`; `Name`; `Uid`; and `xml:lang`. 값은 기본 리플렉션 달라 지 며 여전히를 반환할 수 있습니다 이러한 `null` 별칭이 지정 된 속성이 없는 경우.       XAML 형식 시스템의 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다."
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupAliasedProperty (System.Xaml.XamlDirective directive);
    parameters:
    - id: directive
      type: System.Xaml.XamlDirective
      description: "찾을 별칭이 지정 된 멤버에 대 한 지시문입니다."
    return:
      type: System.Xaml.XamlMember
      description: "별칭이 지정 된 멤버 경우 반환 합니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupAliasedProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAllAttachableMembers
  id: LookupAllAttachableMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAllAttachableMembers()
  nameWithType: XamlType.LookupAllAttachableMembers()
  fullName: System.Xaml.XamlType.LookupAllAttachableMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 노출 되는 모든 연결 가능한 속성을 포함 하는 열거 가능한 집합을 반환 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "호출자가 <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>.</xref:System.Xaml.XamlType.GetAllAttachableMembers%2A> 값을 가져올 때이 메서드를 호출할 수 있습니다.       하지만 <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>제네릭 컬렉션을 반환이 `Lookup` 메서드 제네릭 열거 가능한 집합을 반환 합니다.</xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>       기본 구현은 내부 CLR 리플렉션을 사용 합니다. 때 <xref:System.Xaml.XamlType.UnderlyingType%2A>은 `null`, 기본 구현은 צ ְ ײ <xref:System.Xaml.XamlType.BaseType%2A>사용할 수 있으면.</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.UnderlyingType%2A> 올바른 기본 형식을 찾으려고 시도에 LookupAllAttachableMembers 재귀적으로 호출 하 고 반환 하는이 동작 `null` 올바른 기본 형식이 있는 경우.       XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다. Null 반환 형식 시스템 또는 리플렉션 지원 부족으로 인해 정보를 확인할 수 없는 경우에 예약 되어야 합니다. 빈 형식이 유효한 및 리플렉션 또는 기타 기술을 사용할 수 있는 이지만 형식에 연결할 수 있는 멤버가 없을 경우 대신 반환 해야 <xref:System.Collections.Generic.IEnumerable%601>설정.</xref:System.Collections.Generic.IEnumerable%601>"
  syntax:
    content: protected virtual System.Collections.Generic.IEnumerable<System.Xaml.XamlMember> LookupAllAttachableMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xaml.XamlMember}
      description: "0 또는 그 이상 포함 하는 열거 가능한 집합 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 값, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupAllAttachableMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAllMembers
  id: LookupAllMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAllMembers()
  nameWithType: XamlType.LookupAllMembers()
  fullName: System.Xaml.XamlType.LookupAllMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 노출 되는 모든 멤버가 포함 된 열거 가능한 집합을 반환 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "호출자가 <xref:System.Xaml.XamlType.GetAllMembers%2A>.</xref:System.Xaml.XamlType.GetAllMembers%2A> 값을 가져올 때이 메서드를 호출할 수 있습니다.       하지만 <xref:System.Xaml.XamlType.GetAllMembers%2A>제네릭 컬렉션을 반환이 `Lookup` 메서드 제네릭 열거 가능한 집합을 반환 합니다.</xref:System.Xaml.XamlType.GetAllMembers%2A>       기본 구현은 내부 CLR 리플렉션을 사용 합니다. 사례에 대 한 위치 <xref:System.Xaml.XamlType.UnderlyingType%2A>은 `null`, 기본 구현은 צ ְ ײ <xref:System.Xaml.XamlType.BaseType%2A>사용할 수 있으면.</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.UnderlyingType%2A> 올바른 기본 형식을 찾으려고 시도에 LookupAllMembers 재귀적으로 호출 하 고 반환 하는이 동작 `null` 올바른 기본 형식이 있는 경우.       XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다. Null 반환 형식 시스템 또는 리플렉션 지원 부족으로 인해 정보를 확인할 수 없는 경우에 예약 되어야 합니다. 리플렉션 또는 기타 기술을 형식이 유효한 경우을 사용할 수 있습니다. 형식에 멤버가 없을 경우 대신 빈을 반환 해야 <xref:System.Collections.Generic.IEnumerable%601>설정.</xref:System.Collections.Generic.IEnumerable%601>       LookupAllMembers에 대 한 값을 반환 하 고 <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>상호 배타적인 이어야 합니다.</xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 지원 형식 시스템 속성이 연결 가능한 사용 뿐만 아니라 표준 인스턴스 사용을 지원할 수 있는 상황을 설정한 경우 해당 멤버 서로 다른 두 성공으로 보고 됩니다 <xref:System.Xaml.XamlMember>연결할 수 있는 목록 및 다른 표준 멤버 목록에서에 표시 되는 하나의 값과 값.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Collections.Generic.IEnumerable<System.Xaml.XamlMember> LookupAllMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xaml.XamlMember}
      description: "0 또는 그 이상 포함 하는 열거 가능한 집합 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 값입니다."
  overload: System.Xaml.XamlType.LookupAllMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAllowedContentTypes
  id: LookupAllowedContentTypes
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAllowedContentTypes()
  nameWithType: XamlType.LookupAllowedContentTypes()
  fullName: System.Xaml.XamlType.LookupAllowedContentTypes()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 형식으로 사용할 수 있는 목록이 <xref:System.Xaml.XamlType.ContentProperty*>값이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>.</xref:System.Xaml.XamlType.ContentProperty*>"
  remarks: "호출자가 <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.</xref:System.Xaml.XamlType.AllowedContentTypes%2A> 값을 가져올 때이 메서드를 호출할 수 있습니다.       <xref:System.Xaml.XamlType.CanAssignTo%2A>특정 콘텐츠 형식에 대 한는 아닙니다 <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.</xref:System.Xaml.XamlType.AllowedContentTypes%2A> 의 목적을 위해 여러 형식으로</xref:System.Xaml.XamlType.CanAssignTo%2A> 평가 하는 형식       기본 구현은의 다른 속성을 사용할 수 <xref:System.Xaml.XamlType>(<xref:System.Xaml.XamlType.ContentWrappers%2A>, <xref:System.Xaml.XamlType.ContentProperty%2A>, 또는 <xref:System.Xaml.XamlType.ItemType%2A>) 결과를 얻기.</xref:System.Xaml.XamlType.ItemType%2A> </xref:System.Xaml.XamlType.ContentProperty%2A> </xref:System.Xaml.XamlType.ContentWrappers%2A> </xref:System.Xaml.XamlType> `Lookup` 이전 속성 목록이이 결정에서 호출 될 수도 있습니다을 재정의 합니다.       XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다."
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupAllowedContentTypes ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "목록 가능한 콘텐츠 형식입니다."
  overload: System.Xaml.XamlType.LookupAllowedContentTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAttachableMember(System.String)
  id: LookupAttachableMember(System.String)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAttachableMember(String)
  nameWithType: XamlType.LookupAttachableMember(String)
  fullName: System.Xaml.XamlType.LookupAttachableMember(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 특정이를 통해 연결할 수 있는 명명 된 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "호출자가 <xref:System.Xaml.XamlType.GetAttachableMember%2A>.</xref:System.Xaml.XamlType.GetAttachableMember%2A> 값을 가져올 때이 메서드를 호출할 수 있습니다.       기본 구현은 내부 CLR 리플렉션을 사용 합니다. 때 <xref:System.Xaml.XamlType.UnderlyingType%2A>은 `null`, 기본 구현은 צ ְ ײ <xref:System.Xaml.XamlType.BaseType%2A>사용할 수 있으면.</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.UnderlyingType%2A> 올바른 기본 형식을 찾으려고 시도에 LookupAttachableMember 재귀적으로 호출 하 고 반환 하는이 동작 `null` 올바른 기본 형식이 있는 경우.       XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.      > [!IMPORTANT] > LookupAttachableMember는 가상 함수 이며 따라서 재정의할 수 있습니다. 재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 <xref:System.ComponentModel.TypeDescriptor> `Get*` 기본 CLR 형식에 대 한 정보.</xref:System.ComponentModel.TypeDescriptor> 보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다."
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupAttachableMember (string name);
    parameters:
    - id: name
      type: System.String
      description: "가져올에 연결할 수 있는 멤버의 이름 `ownerTypeName.MemberName` 폼입니다."
    return:
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 요청 된 연결 가능한 멤버;에 대 한 개체, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>해당 이름으로 연결할 수 있는 멤버가 있는 경우."
  overload: System.Xaml.XamlType.LookupAttachableMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupBaseType
  id: LookupBaseType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupBaseType()
  nameWithType: XamlType.LookupBaseType()
  fullName: System.Xaml.XamlType.LookupBaseType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 직접적인이 XAML 형식의 기본 형식에 대 한 합니다. 이 값의 결정이 내부 형식에 기반 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 및 스키마 컨텍스트."
  remarks: "호출자가 <xref:System.Xaml.XamlType.BaseType%2A>.</xref:System.Xaml.XamlType.BaseType%2A> 값을 가져올 때이 메서드를 호출할 수 있습니다.       기본 구현은 나타내는 내부 상수를 반환할 수 있습니다는 <xref:System.Object>경우 <xref:System.Xaml.XamlType.UnderlyingType%2A>은 `null`.</xref:System.Xaml.XamlType.UnderlyingType%2A> </xref:System.Object>       XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.      > [!IMPORTANT] > LookupBaseType는 가상 함수 이며 따라서 재정의할 수 있습니다. 재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템의 정보는 XAML 형식에 대 한 보고 된 형식 정보를 변경할 수 없습니다. 할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다."
  syntax:
    content: protected virtual System.Xaml.XamlType LookupBaseType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> 직접적인이 XAML 형식의 기본 형식에 대 한 합니다."
  overload: System.Xaml.XamlType.LookupBaseType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupCollectionKind
  id: LookupCollectionKind
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupCollectionKind()
  nameWithType: XamlType.LookupCollectionKind()
  fullName: System.Xaml.XamlType.LookupCollectionKind()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "값을 반환 된 <xref href=&quot;System.Xaml.Schema.XamlCollectionKind&quot;> </xref> 는 특정 컬렉션을 선언 하는 열거형에 다음과 같이 입력 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 사용 합니다."
  remarks: "이 메서드는 내부 전용 메서드를 호출한 (public `CollectionKind` 또는 `GetCollectionKind` api <xref:System.Xaml.XamlType>).</xref:System.Xaml.XamlType>       기본 구현은 내부 CLR 리플렉션을 사용 합니다. 사례에 대 한 위치 <xref:System.Xaml.XamlType.UnderlyingType%2A>은 `null`, 기본 구현은 צ ְ ײ <xref:System.Xaml.XamlType.BaseType%2A>사용할 수 있으면.</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.UnderlyingType%2A> 이 동작을 올바른 기본 유형이; 찾습니다 LookupCollectionKind 재귀적으로 직접 호출 반환 <xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>올바른 기본 형식이 있는 경우.</xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName> 기본 구현은 찾으려고 시도 하는 일반적으로 `Add` 리플렉션에 의해 기본 형식의 메서드. 경우 발견 된 <xref:System.Reflection.MethodInfo>의 `Add` 메서드 충분 한 정보를 확인 하는 <xref:System.Xaml.Schema.XamlCollectionKind>값이 반환 됩니다.</xref:System.Xaml.Schema.XamlCollectionKind> </xref:System.Reflection.MethodInfo> 그러지 않으면 <xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>.</xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName> 반환       XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다."
  syntax:
    content: protected virtual System.Xaml.Schema.XamlCollectionKind LookupCollectionKind ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlCollectionKind
      description: "값은 <xref href=&quot;System.Xaml.Schema.XamlCollectionKind&quot;> </xref> 열거 합니다."
  overload: System.Xaml.XamlType.LookupCollectionKind*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupConstructionRequiresArguments
  id: LookupConstructionRequiresArguments
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupConstructionRequiresArguments()
  nameWithType: XamlType.LookupConstructionRequiresArguments()
  fullName: System.Xaml.XamlType.LookupConstructionRequiresArguments()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 반환 하는지 여부를이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 인수가 있어야 합니다 (제네릭 제약 조건을 통해 <xref uid=&quot;langword_csharp_x:TypeArguments&quot; name=&quot;x:TypeArguments&quot; href=&quot;&quot;> </xref>, 초기화 텍스트 또는 기타 XAML 기술을) 형식의 올바른 인스턴스를 구성 하려면."
  remarks: "호출자가 <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>.</xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A> 값을 가져올 때이 메서드를 호출할 수 있습니다.       기본 구현은 반환 `false` CLR에서 값 형식으로 간주 되는 형식에 대 한 형식 시스템. 값 형식, CLR 리플렉션이 아닌 <xref:System.Reflection.ConstructorInfo>기본 생성자가 있는지 여부를 확인 하는 데 사용 됩니다.</xref:System.Reflection.ConstructorInfo>       XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다."
  syntax:
    content: protected virtual bool LookupConstructionRequiresArguments ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>인스턴스를 생성; 일부 인수 값이 필요한 경우 그렇지 않으면 false입니다."
  overload: System.Xaml.XamlType.LookupConstructionRequiresArguments*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupContentProperty
  id: LookupContentProperty
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupContentProperty()
  nameWithType: XamlType.LookupContentProperty()
  fullName: System.Xaml.XamlType.LookupContentProperty()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 이의 content 속성에 대 한 정보 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "호출자가 <xref:System.Xaml.XamlType.ContentProperty%2A>.</xref:System.Xaml.XamlType.ContentProperty%2A> 값을 가져올 때이 메서드를 호출할 수 있습니다.       기본 구현에 대 한 확인 <xref:System.Windows.Markup.ContentPropertyAttribute>형식 정의에.</xref:System.Windows.Markup.ContentPropertyAttribute> 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A>내부 형식에 특성이 있으면 특성에 대 한.</xref:System.Xaml.XamlType.BaseType%2A> 기본 구현에서 반환 하는 경우 이러한 검사에는 콘텐츠 형식을 검색 하지 않으면, `null`합니다.       XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다."
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupContentProperty ();
    parameters: []
    return:
      type: System.Xaml.XamlMember
      description: "<xref href=&quot;System.Xaml.XamlMember&quot;></xref>이 콘텐츠 속성에 대 한 정보 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다. May be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupContentProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupContentWrappers
  id: LookupContentWrappers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupContentWrappers()
  nameWithType: XamlType.LookupContentWrappers()
  fullName: System.Xaml.XamlType.LookupContentWrappers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "목록을 가져옵니다 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 이 대 한 콘텐츠 래퍼를 표시 하는 값 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "콘텐츠 래퍼는 해당 컬렉션에 사용 되는 형식이 형식 시스템에 연속 되지 않을 때 컬렉션 콘텐츠 형식을 나타내는 클래스입니다. 콘텐츠 래퍼에 대 한 컬렉션 항목의 형식은 이외의 다른 방법으로 제한 될 것으로 예상 되 <xref:System.Object>또는 이와 동등한 중립 개체.</xref:System.Object> 그러나이 제한 사항은 형식 시스템 아니라에 의해 디자인 또는 해당 형식을 사용 하는 속성의 목적에만 적용 됩니다. 둘 이상의 콘텐츠 래퍼 형식에 있을 수 있습니다.       예제 클래스 및 WPF XAML 구현과에서 시나리오에 대 한 참조 <xref:System.Windows.Documents.InlineCollection>.</xref:System.Windows.Documents.InlineCollection>"
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupContentWrappers ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "목록이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 이 대 한 콘텐츠 래퍼를 표시 하는 값 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupContentWrappers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupCustomAttributeProvider
  id: LookupCustomAttributeProvider
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupCustomAttributeProvider()
  nameWithType: XamlType.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlType.LookupCustomAttributeProvider()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "파생된 클래스에서 구현 하는 경우 반환 된 <xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref> 구현 합니다."
  remarks: "내부 리플렉션 CLR 특성 값을 얻을 수 있는 대체 방법으로 제공 하려면이 메서드를 재정의 합니다. 재정의가 없는 경우, 내부 반영자는 일반적인 CLR 리플렉션 논리를 사용 합니다.       기본 구현은 반환 `null`합니다."
  syntax:
    content: protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();
    parameters: []
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: "<xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref> 구현 합니다."
  overload: System.Xaml.XamlType.LookupCustomAttributeProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupDeferringLoader
  id: LookupDeferringLoader
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupDeferringLoader()
  nameWithType: XamlType.LookupDeferringLoader()
  fullName: System.Xaml.XamlType.LookupDeferringLoader()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; XAML 선언 된 개체의 지연 된 로드에 사용 되는 개체입니다."
  remarks: "호출자가 <xref:System.Xaml.XamlType.DeferringLoader%2A>.</xref:System.Xaml.XamlType.DeferringLoader%2A> 값을 가져올 때이 메서드를 호출할 수 있습니다. 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.DeferringLoader%2A>반환 다른 값은 기본적으로 활성화 내부 리플렉션 및 제공 하는 사용자 지정 <xref:System.Xaml.Schema.XamlTypeInvoker>정보.</xref:System.Xaml.Schema.XamlTypeInvoker> </xref:System.Xaml.XamlType.DeferringLoader%2A>       기본 구현은 <xref:System.Windows.Markup.XamlDeferLoadAttribute>.</xref:System.Windows.Markup.XamlDeferLoadAttribute> 읽는 개체를 반환 합니다. 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A>내부 형식에 특성이 있으면 특성에 대 한.</xref:System.Xaml.XamlType.BaseType%2A> 이 메서드는 반환 값을 사용할 수 없으면 `null`합니다."
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> LookupDeferringLoader ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 올려진는 <xref href=&quot;System.Xaml.XamlDeferringLoader&quot;> </xref> 제네릭에 대 한 제약 조건입니다."
  overload: System.Xaml.XamlType.LookupDeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupInvoker
  id: LookupInvoker
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupInvoker()
  nameWithType: XamlType.LookupInvoker()
  fullName: System.Xaml.XamlType.LookupInvoker()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref> 이와 연결 된 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "<xref:System.Xaml.XamlType.Invoker%2A>.</xref:System.Xaml.XamlType.Invoker%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현은 것을 요구 하지 않는 <xref:System.Xaml.XamlType>초기 <xref:System.Xaml.Schema.XamlTypeInvoker>.</xref:System.Xaml.Schema.XamlTypeInvoker> 를 전달 하는 생성자 중 하나를 사용 하 여 생성할 수</xref:System.Xaml.XamlType> 그러나는 <xref:System.Xaml.XamlType.UnderlyingType%2A>값에 대 한 있어야는 <xref:System.Xaml.XamlType>, 그렇지 않으면 기본 구현에서는 반환 `null`.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.UnderlyingType%2A>       파생된 클래스에서 <xref:System.Xaml.Schema.XamlTypeInvoker>파생 된 클래스를 반환 하 고</xref:System.Xaml.Schema.XamlTypeInvoker> 도 만들려는 경우이 메서드를 재정의 합니다. 반환 하는 경우 `null`, <xref:System.Xaml.XamlType.Invoker%2A>반환 <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName>호출자에 게.</xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlType.Invoker%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlTypeInvoker LookupInvoker ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlTypeInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref> 이 대 한 정보 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupInvoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsAmbient
  id: LookupIsAmbient
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsAmbient()
  nameWithType: XamlType.LookupIsAmbient()
  fullName: System.Xaml.XamlType.LookupIsAmbient()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 반환 하는지 여부를이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML 정의 기준으로 하는 앰비언트 형식을 나타냅니다."
  remarks: "<xref:System.Xaml.XamlType.IsAmbient%2A>.</xref:System.Xaml.XamlType.IsAmbient%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       에 CLR 리플렉션을 사용 하는 기본 구현에서 <xref:System.Xaml.XamlType.UnderlyingType%2A>기본 형식을 확인할 수 있습니다.</xref:System.Xaml.XamlType.UnderlyingType%2A> 이 구현에 대 한 검사는 <xref:System.Windows.Markup.AmbientAttribute>를 반환 하는 클래스 수준에는 관련 형식의 정의에 적용 되는 `true` 이 예제의.</xref:System.Windows.Markup.AmbientAttribute> 다른 모든 경우에 반환할 `false`합니다.       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsAmbient%2A>은 기본적으로 활성화 내부 리플렉션 다른 값을 반환 합니다.</xref:System.Xaml.XamlType.IsAmbient%2A>"
  syntax:
    content: protected virtual bool LookupIsAmbient ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 앰비언트 유형을 나타내며, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupIsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsConstructible
  id: LookupIsConstructible
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsConstructible()
  nameWithType: XamlType.LookupIsConstructible()
  fullName: System.Xaml.XamlType.LookupIsConstructible()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 반환 하는지 여부를이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML 정의 기준으로 하는 생성 가능 유형을 나타냅니다."
  remarks: "<xref:System.Xaml.XamlType.IsConstructible%2A>.</xref:System.Xaml.XamlType.IsConstructible%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현에 <xref:System.Xaml.XamlType.UnderlyingType%2A>했습니다.</xref:System.Xaml.XamlType.UnderlyingType%2A> CLR 리플렉션을 사용합니다 형식은 구체적인, 비중첩 및 닫힌 이어야 합니다. 기본 구현에서는 값 형식 및 <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>.</xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A> 의 반환 형식이 인지 확인 Null에 대 한 <xref:System.Xaml.XamlType.UnderlyingType%2A>,이 메서드가 반환 `true`.</xref:System.Xaml.XamlType.UnderlyingType%2A>       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsConstructible%2A>은 기본적으로 활성화 내부 리플렉션 다른 값을 반환 합니다.</xref:System.Xaml.XamlType.IsConstructible%2A>"
  syntax:
    content: protected virtual bool LookupIsConstructible ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 생성 가능 형식을 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupIsConstructible*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsMarkupExtension
  id: LookupIsMarkupExtension
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsMarkupExtension()
  nameWithType: XamlType.LookupIsMarkupExtension()
  fullName: System.Xaml.XamlType.LookupIsMarkupExtension()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 반환 하는지 여부를이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 태그 확장을 나타냅니다."
  remarks: "<xref:System.Xaml.XamlType.IsMarkupExtension%2A>.</xref:System.Xaml.XamlType.IsMarkupExtension%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현은이 호출은 구성 되어: `return CanAssignTo(XamlLanguage.MarkupExtension);` 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsMarkupExtension%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.IsMarkupExtension%2A>       XAML 사양 측면에서이 형식에 할당할 수 있어야 `x:MarkupExtension` 반환 하기 위해 `true` <xref:System.Xaml.XamlType.IsMarkupExtension%2A>.</xref:System.Xaml.XamlType.IsMarkupExtension%2A>"
  syntax:
    content: protected virtual bool LookupIsMarkupExtension ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 태그 확장을 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupIsMarkupExtension*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsNameScope
  id: LookupIsNameScope
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsNameScope()
  nameWithType: XamlType.LookupIsNameScope()
  fullName: System.Xaml.XamlType.LookupIsNameScope()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 반환 하는지 여부를이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML 정의 기준으로 XAML 이름 범위를 나타냅니다."
  remarks: "<xref:System.Xaml.XamlType.IsNameScope%2A>.</xref:System.Xaml.XamlType.IsNameScope%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현에서는 <xref:System.Xaml.XamlType.CanAssignTo%2A> <xref:System.Windows.Markup.INameScope>.</xref:System.Windows.Markup.INameScope> 유형에 대해 간접적으로 호출 합니다.</xref:System.Xaml.XamlType.CanAssignTo%2A> <xref:System.Windows.Markup.INameScope>WindowsBase 어셈블리에 정의 된 인터페이스가입니다.</xref:System.Windows.Markup.INameScope> XAML 이름 범위 id에 대 한이 방법을 사용 되는 WPF에서 모두 및 [!INCLUDE[TLA#tla_workflow](~/add/includes/tlasharptla-workflow-md.md)] XAML의 구현입니다.       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsNameScope%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.IsNameScope%2A>       속성 또는 속성에 사용 되는 이름의 고유성을 적용 하는 XAML 이름 범위 `x:Name`  /  `[name property]`합니다. 경우 <xref:System.Xaml.XamlType.IsNameScope%2A>은 `true`, 고유성을 적용 하기 위한 메커니즘이 있어야 하 고 XAML 이름 범위를 소유 하는이 형식의 관점에서 평가 해야 합니다.</xref:System.Xaml.XamlType.IsNameScope%2A> 그런 다음 XAML 이름 범위 XAML 이름 범위 소유 다른 형식이 발견 될 때까지 형식 내용으로 확장 합니다."
  syntax:
    content: protected virtual bool LookupIsNameScope ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML 이름 범위를 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupIsNameScope*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsNullable
  id: LookupIsNullable
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsNullable()
  nameWithType: XamlType.LookupIsNullable()
  fullName: System.Xaml.XamlType.LookupIsNullable()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 반환 하는지 여부를이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML 정의 기준으로 null 허용 형식을 나타냅니다."
  remarks: "<xref:System.Xaml.XamlType.IsNullable%2A>.</xref:System.Xaml.XamlType.IsNullable%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현에서는 개념에 따라 CLR 핵심 라이브러리 nullable, <xref:System.Xaml.XamlType.UnderlyingType%2A>.</xref:System.Xaml.XamlType.UnderlyingType%2A> 여부를 검사 하는 결정 Null에 대 한 <xref:System.Xaml.XamlType.UnderlyingType%2A>, 반환 `true`.</xref:System.Xaml.XamlType.UnderlyingType%2A>       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsNullable%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.IsNullable%2A>"
  syntax:
    content: protected virtual bool LookupIsNullable ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> nullable 형식을 나타내는지, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupIsNullable*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsPublic
  id: LookupIsPublic
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsPublic()
  nameWithType: XamlType.LookupIsPublic()
  fullName: System.Xaml.XamlType.LookupIsPublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 반환 하는지 여부를이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 관련 형식 시스템에서 공용 형식을 나타냅니다."
  remarks: "<xref:System.Xaml.XamlType.IsPublic%2A>.</xref:System.Xaml.XamlType.IsPublic%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현은 null이 아닌 <xref:System.Xaml.XamlType.UnderlyingType%2A>.</xref:System.Xaml.XamlType.UnderlyingType%2A> 에 대해 CLR 리플렉션을 사용 하 여 Null에 대 한 <xref:System.Xaml.XamlType.UnderlyingType%2A>, 반환 `true`.</xref:System.Xaml.XamlType.UnderlyingType%2A>       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsPublic%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.IsPublic%2A>      > [!IMPORTANT] > LookupIsPublic는 가상 함수 이며 따라서 재정의할 수 있습니다. 재정의 (악의적인 목적 여부 또는 기타) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템 또는 액세스 정보 XAML 형식에 대 한 보고 된 액세스 정보를 변경할 수 없습니다. 할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다."
  syntax:
    content: protected virtual bool LookupIsPublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> public 형식을 나타내는지, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupIsPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsUnknown
  id: LookupIsUnknown
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsUnknown()
  nameWithType: XamlType.LookupIsUnknown()
  fullName: System.Xaml.XamlType.LookupIsUnknown()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 반환 하는지 여부를이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 기본 형식 시스템에서 확인할 수 없는 형식을 나타냅니다."
  remarks: "<xref:System.Xaml.XamlType.IsUnknown%2A>.</xref:System.Xaml.XamlType.IsUnknown%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현은 CLR 리플렉션을 사용할 수 있습니다. Null에 대 한 <xref:System.Xaml.XamlType.UnderlyingType%2A>, 반환 `true`.</xref:System.Xaml.XamlType.UnderlyingType%2A>       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsUnknown%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.IsUnknown%2A>"
  syntax:
    content: protected virtual bool LookupIsUnknown ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> nonresolvable 형식을 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupIsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection
  id: LookupIsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsWhitespaceSignificantCollection()
  nameWithType: XamlType.LookupIsWhitespaceSignificantCollection()
  fullName: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 반환 하는지 여부를이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XML 정의 기준으로 공백 의미 컬렉션을 나타냅니다."
  remarks: "<xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>.</xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현은 <xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute>.</xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute> 읽기에 따라 값을 반환 또한 확인할 수는 <xref:System.Xaml.XamlType.BaseType%2A>내부 형식에 특성이 있으면 특성에 대 한.</xref:System.Xaml.XamlType.BaseType%2A> 반환 값을 사용할 수 없으면 `false`합니다.       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>"
  syntax:
    content: protected virtual bool LookupIsWhitespaceSignificantCollection ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 는 공백 의미 컬렉션을 나타내는, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsXData
  id: LookupIsXData
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsXData()
  nameWithType: XamlType.LookupIsXData()
  fullName: System.Xaml.XamlType.LookupIsXData()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 반환 하는지 여부를이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XML 나타냅니다 <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;> </xref>, XAML 정의 기준으로 합니다."
  remarks: "<xref:System.Xaml.XamlType.IsXData%2A>.</xref:System.Xaml.XamlType.IsXData%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현에서는 <xref:System.Xaml.XamlType.CanAssignTo%2A> <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> 유형에 대해 간접적으로 호출 합니다.</xref:System.Xaml.XamlType.CanAssignTo%2A>       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsXData%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.IsXData%2A>"
  syntax:
    content: protected virtual bool LookupIsXData ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupIsXData*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupItemType
  id: LookupItemType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupItemType()
  nameWithType: XamlType.LookupItemType()
  fullName: System.Xaml.XamlType.LookupItemType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "에 대 한 형식 정보를 제공 하는 값을 반환 합니다.는 <xref uid=&quot;langword_csharp_Items&quot; name=&quot;Items&quot; href=&quot;&quot;> </xref> 속성 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "<xref:System.Xaml.XamlType.ItemType%2A>.</xref:System.Xaml.XamlType.ItemType%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현에 대 한 확인 하는 등의 CLR 리플렉션 개념을 사용할 수는 `Add` 메서드를 <xref:System.Reflection.MethodInfo>를 사용 하 고는 <xref:System.Reflection.ParameterInfo>검사; <xref:System.Xaml.XamlType.IsArray%2A>; 및 검사 <xref:System.Xaml.XamlType.BaseType%2A>하 고 그 동일한 논리를 시도 합니다.</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.IsArray%2A> </xref:System.Reflection.ParameterInfo> </xref:System.Reflection.MethodInfo>       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.ItemType%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.ItemType%2A> 인 사례 <xref:System.Xaml.XamlType.LookupCollectionKind%2A>반환 <xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>반환할지 `null`.</xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName> </xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupItemType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 컬렉션에 항목의 형식에 대 한 개체, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 컬렉션을 나타내지 않습니다."
  overload: System.Xaml.XamlType.LookupItemType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupKeyType
  id: LookupKeyType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupKeyType()
  nameWithType: XamlType.LookupKeyType()
  fullName: System.Xaml.XamlType.LookupKeyType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 키 속성에 대 한 형식 정보를 제공 하는 값을 반환 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>경우는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 사전을 나타냅니다."
  remarks: "<xref:System.Xaml.XamlType.KeyType%2A>.</xref:System.Xaml.XamlType.KeyType%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현은 확인 등과 같은 CLR 리플렉션 개념을 사용할 수는 `Add` 메서드를 <xref:System.Reflection.MethodInfo>를 사용 하 고는 <xref:System.Reflection.ParameterInfo>; 및 검사 <xref:System.Xaml.XamlType.BaseType%2A>하 고 그 동일한 논리를 시도 합니다.</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Reflection.ParameterInfo> </xref:System.Reflection.MethodInfo>       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.KeyType%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.KeyType%2A> 인 사례 <xref:System.Xaml.XamlType.LookupCollectionKind%2A>반환 하지 않는 <xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>반환할지 `null`.</xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName> </xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupKeyType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 사전 사용에 대 한 키의 형식에 대 한 개체 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 사전을 나타내지 않습니다"
  overload: System.Xaml.XamlType.LookupKeyType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupMarkupExtensionReturnType
  id: LookupMarkupExtensionReturnType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupMarkupExtensionReturnType()
  nameWithType: XamlType.LookupMarkupExtensionReturnType()
  fullName: System.Xaml.XamlType.LookupMarkupExtensionReturnType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 작업에 대 한 형식 정보를 제공 하는 값을 반환 <xref uid=&quot;langword_csharp_ProvideValue&quot; name=&quot;ProvideValue&quot; href=&quot;&quot;> </xref> 이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>태그 확장을 나타내는 경우, 합니다."
  remarks: "<xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>.</xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현에서는 한 <xref:System.Xaml.XamlType> <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>.</xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> 읽기를 기반으로</xref:System.Xaml.XamlType> 반환 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A>내부 형식에 특성이 있으면 특성에 대 한.</xref:System.Xaml.XamlType.BaseType%2A> 반환 값을 사용할 수 없으면 `null`합니다.       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupMarkupExtensionReturnType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;> </xref> ; 태그 확장 사용에 대 한 반환 형식에 대 한 개체, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>,이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 태그 확장을 나타내지 않습니다."
  overload: System.Xaml.XamlType.LookupMarkupExtensionReturnType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupMember(System.String,System.Boolean)
  id: LookupMember(System.String,System.Boolean)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupMember(String,Boolean)
  nameWithType: XamlType.LookupMember(String,Boolean)
  fullName: System.Xaml.XamlType.LookupMember(String,Boolean)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 멤버에서 명명 된 특정 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "<xref:System.Xaml.XamlType.GetMember%2A>.</xref:System.Xaml.XamlType.GetMember%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현은 반환 하는 <xref:System.Xaml.XamlType>내부 CLR 리플렉션 및 스키마 컨텍스트는 평가에 따라.</xref:System.Xaml.XamlType>       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.GetMember%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.GetMember%2A>      > [!IMPORTANT] > LookupMember는 가상 함수 이며 따라서 재정의할 수 있습니다. 재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 <xref:System.ComponentModel.TypeDescriptor> `Get*` 기본 CLR 형식에 대 한 정보.</xref:System.ComponentModel.TypeDescriptor> 보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다."
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupMember (string name, bool skipReadOnlyCheck);
    parameters:
    - id: name
      type: System.String
      description: "(String)로 가져올 멤버의 이름입니다."
    - id: skipReadOnlyCheck
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>해당 멤버의 경우에 멤버를 반환 하는 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 값 &lt;xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName&gt;; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 반환 되지 않도록 한 &lt;xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName&gt; 멤버입니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Xaml.XamlMember
      description: "<xref href=&quot;System.Xaml.XamlMember&quot;> </xref> 구성원이 검색 되지 않으면 멤버에 대 한 정보 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupPositionalParameters(System.Int32)
  id: LookupPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupPositionalParameters(Int32)
  nameWithType: XamlType.LookupPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.LookupPositionalParameters(Int32)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "태그 확장 형식에이 대 한 특정 태그 확장 사용에서 지원 되는 위치 매개 변수의 형식을 반환 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "<xref:System.Xaml.XamlType.GetPositionalParameters%2A>.</xref:System.Xaml.XamlType.GetPositionalParameters%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현에서는 생성자를 찾아서 인자 수를 확인 하는 중에 따라 내부 리플렉션 정보를 사용 합니다. 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.GetPositionalParameters%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.GetPositionalParameters%2A>       이 API는 경우이 해당만 <xref:System.Xaml.XamlType>태그 확장을 나타내는 (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> 은 `true`).</xref:System.Xaml.XamlType.IsMarkupExtension%2A> </xref:System.Xaml.XamlType>       입력 `parameterCount` 요청 특정 위치 매개 변수 형식에 대 한 않습니다. 태그 확장 사용의 인자 수 지정 됩니다. 태그 확장 사용에 여러 개의 시그니처가 간격과 다른 매개 변수 인자 (개수)의 위치 매개 변수를 사용 하 여 구분 합니다. 그러나 중복 arities를 허용 하기 위해 차이점에 대 한 종류의 위치 매개 변수를 사용 하 여 스키마 컨텍스트를 구성할 수 있습니다. 자세한 내용은 <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>.</xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A> 을 참조 하십시오. 특정 인자 개수에 대 한 매개 변수 위치와 형식 달라질 수 있습니다. 위치 형식을 특정 인자 태그 확장 사용을 가져오려면 먼저 호출 <xref:System.Xaml.XamlType.GetPositionalParameters%2A>인자 수가.</xref:System.Xaml.XamlType.GetPositionalParameters%2A> 그런 다음 반환된 된 컬렉션에서 해당 위치의 항목을 가져옵니다."
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupPositionalParameters (int parameterCount);
    parameters:
    - id: parameterCount
      type: System.Int32
      description: "에 대 한 정보를 원하는 특정 구문 또는 생성자 모드의 수 (숫자)입니다."
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "목록이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 경우 값 이러한 각 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 구문에서 해당 위치에 대 한 형식입니다. 태그 확장에 대 한 태그 입력을 제공할 때 동일한 순서로 해당 종류를 지정 해야 합니다."
  overload: System.Xaml.XamlType.LookupPositionalParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupSetMarkupExtensionHandler
  id: LookupSetMarkupExtensionHandler
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupSetMarkupExtensionHandler()
  nameWithType: XamlType.LookupSetMarkupExtensionHandler()
  fullName: System.Xaml.XamlType.LookupSetMarkupExtensionHandler()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "태그 확장의 집합 작업에 사용할 수 있는 처리기 콜백을 반환 합니다."
  remarks: "기본 구현은 <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>.</xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute> 읽기에 따라 값을 반환 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A>내부 형식에 특성이 있으면 특성에 대 한.</xref:System.Xaml.XamlType.BaseType%2A> 반환 값을 사용할 수 없으면 `null`합니다."
  syntax:
    content: protected virtual EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs> LookupSetMarkupExtensionHandler ();
    parameters: []
    return:
      type: System.EventHandler{System.Windows.Markup.XamlSetMarkupExtensionEventArgs}
      description: "태그 확장의 집합 작업에 사용 하는 처리기 콜백."
  overload: System.Xaml.XamlType.LookupSetMarkupExtensionHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupSetTypeConverterHandler
  id: LookupSetTypeConverterHandler
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupSetTypeConverterHandler()
  nameWithType: XamlType.LookupSetTypeConverterHandler()
  fullName: System.Xaml.XamlType.LookupSetTypeConverterHandler()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "사용할 형식 변환기의 경우 설정에 대 한 처리기를 반환 합니다."
  remarks: "기본 구현은 <xref:System.Windows.Markup.XamlSetTypeConverterAttribute>.</xref:System.Windows.Markup.XamlSetTypeConverterAttribute> 읽기에 따라 값을 반환 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A>내부 형식에 특성이 있으면 특성에 대 한.</xref:System.Xaml.XamlType.BaseType%2A> 반환 값을 사용할 수 없으면 `null`합니다."
  syntax:
    content: protected virtual EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs> LookupSetTypeConverterHandler ();
    parameters: []
    return:
      type: System.EventHandler{System.Windows.Markup.XamlSetTypeConverterEventArgs}
      description: "형식 변환기의 경우 설정에 사용 하는 처리기."
  overload: System.Xaml.XamlType.LookupSetTypeConverterHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupTrimSurroundingWhitespace
  id: LookupTrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupTrimSurroundingWhitespace()
  nameWithType: XamlType.LookupTrimSurroundingWhitespace()
  fullName: System.Xaml.XamlType.LookupTrimSurroundingWhitespace()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 반환 하는지 여부를이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 주변 공백을 삭제 하는 모드를 사용 하 여 serialize 되어야 합니다."
  remarks: "<xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A>.</xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현은 <xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute>.</xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute> 읽기에 따라 값을 반환 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A>내부 형식에 특성이 있으면 특성에 대 한.</xref:System.Xaml.XamlType.BaseType%2A> 반환 값을 사용할 수 없으면 `false`합니다."
  syntax:
    content: protected virtual bool LookupTrimSurroundingWhitespace ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 주변 공백을 삭제 하는 모드에서 serialize 된 건너뛸 필요가 없으면, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupTrimSurroundingWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupTypeConverter
  id: LookupTypeConverter
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupTypeConverter()
  nameWithType: XamlType.LookupTypeConverter()
  fullName: System.Xaml.XamlType.LookupTypeConverter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 있는 <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> 제약 조건 값이에 대 한 형식 변환 동작을 나타내는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "<xref:System.Xaml.XamlType.TypeConverter%2A>.</xref:System.Xaml.XamlType.TypeConverter%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현은 <xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute> 읽기에 따라 값을 반환 기본 구현은 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A>내부 형식에 특성이 있으면 특성에 대 한.</xref:System.Xaml.XamlType.BaseType%2A> 열거형, 공용 값 형식 및 제네릭 기본 변환 위한 특수 논리가 포함 됩니다. 반환 값을 사용할 수 없으면 `null`합니다.       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.TypeConverter%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.TypeConverter%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> LookupTypeConverter ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 와 <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> 이 값에 대 한 형식 변환 동작을 나타내는 제약 조건 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupTypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupUnderlyingType
  id: LookupUnderlyingType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupUnderlyingType()
  nameWithType: XamlType.LookupUnderlyingType()
  fullName: System.Xaml.XamlType.LookupUnderlyingType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "CLR 반환 <xref:System.Type>이 기반이 되 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>.</xref:System.Type>"
  remarks: "<xref:System.Xaml.XamlType.UnderlyingType%2A>.</xref:System.Xaml.XamlType.UnderlyingType%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현은 내부 필드를 반환합니다. 해당 필드는 일반적으로 생성 하는 동안 초기화 하 고 해당 값은 어떤 생성자를 호출 하 고 사용자가 제공한 정보에 기반 합니다.       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.UnderlyingType%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.UnderlyingType%2A>"
  syntax:
    content: protected virtual Type LookupUnderlyingType ();
    parameters: []
    return:
      type: System.Type
      description: "CLR <xref:System.Type>이 기반이 되 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  overload: System.Xaml.XamlType.LookupUnderlyingType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupUsableDuringInitialization
  id: LookupUsableDuringInitialization
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupUsableDuringInitialization()
  nameWithType: XamlType.LookupUsableDuringInitialization()
  fullName: System.Xaml.XamlType.LookupUsableDuringInitialization()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 반환 하는지 여부를이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 상-XAML 초기화 하는 동안 만들어집니다."
  remarks: "위에서 아래로 개체 그래프를 만들 때 XAML 프로세서 동작에 근접 하는 메타포. 위에서 아래로 작성할 때 형식, 부모에 연결 된 인스턴스화되고 해당 속성이 설정 됩니다. 하향식 생성 속성 변경 처리기를 여러 번 호출 하는 발생 하지 않습니다. 이러한 처리는 개체 그래프를 위로 잔물결 및 따라서 여러 처리기 호출을 제거 하 고이 개체 그래프의 시작을 위해 성능을 최적화 만듭니다.       <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>.</xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현은 <xref:System.Windows.Markup.UsableDuringInitializationAttribute>.</xref:System.Windows.Markup.UsableDuringInitializationAttribute> 읽기에 따라 값을 반환 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A>내부 형식에 특성이 있으면 특성에 대 한.</xref:System.Xaml.XamlType.BaseType%2A> 반환 값을 사용할 수 없으면 `false`합니다.       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>"
  syntax:
    content: protected virtual bool LookupUsableDuringInitialization ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 고, 그렇지 않으면 XAML 초기화 하는 동안 하향식 빌드될 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.LookupUsableDuringInitialization*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupValueSerializer
  id: LookupValueSerializer
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupValueSerializer()
  nameWithType: XamlType.LookupValueSerializer()
  fullName: System.Xaml.XamlType.LookupValueSerializer()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 있는 <xref:System.Windows.Markup.ValueSerializer>제약 조건 값이에 대 한 serialization 동작 값을 나타내는 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>.</xref:System.Windows.Markup.ValueSerializer>"
  remarks: "<xref:System.Xaml.XamlType.ValueSerializer%2A>.</xref:System.Xaml.XamlType.ValueSerializer%2A> 를 호출 하 여이 메서드를 호출할 수 있습니다.       기본 구현은 <xref:System.Windows.Markup.ValueSerializerAttribute>.</xref:System.Windows.Markup.ValueSerializerAttribute> 읽기에 따라 값을 반환 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A>내부 형식에 특성이 있으면 특성에 대 한.</xref:System.Xaml.XamlType.BaseType%2A> 열거형, 공통 값 형식 또는 제네릭의 기본 직렬화를 위한 특수 논리가 포함 됩니다. 반환 값을 사용할 수 없으면 `null`합니다.       원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.ValueSerializer%2A>다른 논리를 사용 하도록 합니다.</xref:System.Xaml.XamlType.ValueSerializer%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> LookupValueSerializer ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 와 <xref:System.Windows.Markup.ValueSerializer>이 값에 대 한 serialization 동작 값을 나타내는 제약 조건 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlType.LookupValueSerializer*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.MarkupExtensionReturnType
  id: MarkupExtensionReturnType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: MarkupExtensionReturnType
  nameWithType: XamlType.MarkupExtensionReturnType
  fullName: System.Xaml.XamlType.MarkupExtensionReturnType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "반환 된 작업에 대 한 형식 정보를 제공 하는 값을 가져옵니다 <xref uid=&quot;langword_csharp_ProvideValue&quot; name=&quot;ProvideValue&quot; href=&quot;&quot;> </xref> 이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>태그 확장을 나타내는 경우, 합니다."
  remarks: "이 속성은이 경우 관련만 <xref:System.Xaml.XamlType>태그 확장을 나타내는 (`x:MarkupExtension` 할당 가능한 형식 목록에).</xref:System.Xaml.XamlType>       에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A>"
  syntax:
    content: public System.Xaml.XamlType MarkupExtensionReturnType { get; }
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;> </xref> ; 태그 확장 사용에 대 한 반환 형식에 대 한 개체, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>,이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 태그 확장을 나타내지 않습니다."
  overload: System.Xaml.XamlType.MarkupExtensionReturnType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Name
  id: Name
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Name
  nameWithType: XamlType.Name
  fullName: System.Xaml.XamlType.Name
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "형식의 문자열 이름을 가져옵니다이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 나타냅니다."
  remarks: "이 속성은 일반적으로 스키마 생성 이름을 가져옵니다 (당는 <xref:System.Xaml.XamlType.%23ctor%2A>서명), 또는 이름으로는 <xref:System.Type>CLR 형식 시스템의 적절 한 생성자를 사용 하 여 생성 된 경우,.</xref:System.Type> </xref:System.Xaml.XamlType.%23ctor%2A>"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "이 XAML 형식의 문자열 이름입니다."
  overload: System.Xaml.XamlType.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  id: op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: op_Equality(XamlType,XamlType)
  nameWithType: XamlType.op_Equality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Equality(XamlType,XamlType)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "지정 된 두 확인 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 동일한 값을 포함 하는 개체입니다."
  syntax:
    content: public static bool op_Equality (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);
    parameters:
    - id: xamlType1
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlType2
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하는 경우의 값 <code> xamlType1 </code> 의 값과 같습니다 <code> xamlType2 </code>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  id: op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: op_Inequality(XamlType,XamlType)
  nameWithType: XamlType.op_Inequality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Inequality(XamlType,XamlType)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "지정 된 두 확인 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 다른 값을 가질 개체입니다."
  syntax:
    content: public static bool op_Inequality (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);
    parameters:
    - id: xamlType1
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlType2
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하는 경우의 값 <code> xamlType1 </code> 의 값과에서 다른 지 <code> xamlType2 </code>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.PreferredXamlNamespace
  id: PreferredXamlNamespace
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: PreferredXamlNamespace
  nameWithType: XamlType.PreferredXamlNamespace
  fullName: System.Xaml.XamlType.PreferredXamlNamespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "단일 XAML 네임 스페이스는이 대 한 기본 XAML 네임 스페이스를 가져옵니다 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "이 구현을 호출할 때와 동일한 값을 제공 <xref:System.Xaml.XamlType.GetXamlNamespaces%2A>한 다음 반환 된 열거 가능한 집합에서 첫 번째 값 문자열을 가져와.</xref:System.Xaml.XamlType.GetXamlNamespaces%2A>"
  syntax:
    content: public string PreferredXamlNamespace { get; }
    return:
      type: System.String
      description: "이 XAML 형식에 대 한 기본 XAML 네임 스페이스를 문자열로 식별자입니다."
  overload: System.Xaml.XamlType.PreferredXamlNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.SchemaContext
  id: SchemaContext
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: SchemaContext
  nameWithType: XamlType.SchemaContext
  fullName: System.Xaml.XamlType.SchemaContext
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "활성 가져옵니다 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 이 처리를 위한 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "<xref:System.Xaml.XamlSchemaContext>필수 매개 변수 항목은 <xref:System.Xaml.XamlType>.</xref:System.Xaml.XamlType> 를 만들 때</xref:System.Xaml.XamlSchemaContext>"
  syntax:
    content: public System.Xaml.XamlSchemaContext SchemaContext { get; }
    return:
      type: System.Xaml.XamlSchemaContext
      description: "활성 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> 이 처리를 위한 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.SchemaContext*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ToString
  id: ToString
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ToString()
  nameWithType: XamlType.ToString()
  fullName: System.Xaml.XamlType.ToString()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "이 문자열 표현을 반환 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "<xref:System.Xaml.XamlType> <xref:System.Object.ToString%2A> <xref:System.Xaml.XamlType.Name%2A> <xref:System.Xaml.XamlType>.</xref:System.Xaml.XamlType> 의 속성</xref:System.Xaml.XamlType.Name%2A> 을 반환</xref:System.Object.ToString%2A> 하는의 구현</xref:System.Xaml.XamlType>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "이 항목의 문자열 표현을 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.TrimSurroundingWhitespace
  id: TrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: TrimSurroundingWhitespace
  nameWithType: XamlType.TrimSurroundingWhitespace
  fullName: System.Xaml.XamlType.TrimSurroundingWhitespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "나타내는 값을 가져옵니다 여부이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 공백 콘텐츠에서 주변 공백을 삭제 합니다. serialization에 대 한 동작을 처리 했습니다."
  remarks: "에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>"
  syntax:
    content: public bool TrimSurroundingWhitespace { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 공백을 사용 하는 형식을 나타내는 고, 그렇지 않으면 트림 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.TrimSurroundingWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.TypeArguments
  id: TypeArguments
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: TypeArguments
  nameWithType: XamlType.TypeArguments
  fullName: System.Xaml.XamlType.TypeArguments
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "사례에 대 한 형식 인수 목록을 가져옵니다 여기서이 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 제네릭을 나타냅니다."
  remarks: "에 대 한 특정 시나리오는 <xref:System.Xaml.XamlType>여기서 호출 TypeArguments 매개 변수 목록을 반환 유형은 아직 열려 있습니다.</xref:System.Xaml.XamlType> 반환 된이 경우, 하나 이상의 <xref:System.Xaml.XamlType>값에 대 한 자리 표시자 값을 갖게 됩니다 <xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName>와 같은 `T`제네릭이 계속 열려 있다고 나타내기 위해.</xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName> </xref:System.Xaml.XamlType> 이 시나리오는 발생 하는 경우에 발생할 수 있습니다는 <xref:System.Xaml.XamlType>호출에서 <xref:System.Xaml.XamlSchemaContext.GetXamlType%2A>, 대신 XAML 판독기 구현과에서.</xref:System.Xaml.XamlSchemaContext.GetXamlType%2A> </xref:System.Xaml.XamlType>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> TypeArguments { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "형식 인수; 형식의 목록 그렇지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>,이 경우 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> 제네릭을 나타내지 않습니다."
  overload: System.Xaml.XamlType.TypeArguments*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.TypeConverter
  id: TypeConverter
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: TypeConverter
  nameWithType: XamlType.TypeConverter
  fullName: System.Xaml.XamlType.TypeConverter
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 와 <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> 형식을 나타내는 변환 동작의 값에는 제약 조건 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  remarks: "에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupTypeConverter%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupTypeConverter%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupTypeConverter%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupTypeConverter%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> TypeConverter { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 와 <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> 형식을 나타내는 변환 동작의 값에는 제약 조건 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>합니다."
  overload: System.Xaml.XamlType.TypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.UnderlyingType
  id: UnderlyingType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: UnderlyingType
  nameWithType: XamlType.UnderlyingType
  fullName: System.Xaml.XamlType.UnderlyingType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "CLR 가져옵니다 <xref:System.Type>이 기반이 되 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>.</xref:System.Type>"
  syntax:
    content: public Type UnderlyingType { get; }
    return:
      type: System.Type
      description: "CLR <xref:System.Type>이 기반이 되 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>.</xref:System.Type>"
  overload: System.Xaml.XamlType.UnderlyingType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ValueSerializer
  id: ValueSerializer
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ValueSerializer
  nameWithType: XamlType.ValueSerializer
  fullName: System.Xaml.XamlType.ValueSerializer
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "가져옵니다는 &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 와 <xref:System.Windows.Markup.ValueSerializer>이 값에 대 한 serialization 동작 값을 나타내는 제약 조건 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>.</xref:System.Windows.Markup.ValueSerializer>"
  remarks: "에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupValueSerializer%2A>에 재정의 <xref:System.Xaml.XamlType>파생 클래스입니다.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupValueSerializer%2A> </xref:System.Xaml.XamlType> 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupValueSerializer%2A>이 형식에 대해.</xref:System.Xaml.XamlType.LookupValueSerializer%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> ValueSerializer { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; 와 <xref:System.Windows.Markup.ValueSerializer>이 값에 대 한 serialization 동작 값을 나타내는 제약 조건 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlType.ValueSerializer*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(Type,XamlSchemaContext)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IList{System.Xaml.XamlType}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<XamlType>
  nameWithType: IList<XamlType>
  fullName: System.Collections.Generic.IList<System.Xaml.XamlType>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Xaml.XamlType>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlType
    name: XamlType
    nameWithType: XamlType
    fullName: XamlType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
- uid: System.Xaml.Schema.XamlTypeInvoker
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlTypeInvoker
  nameWithType: XamlTypeInvoker
  fullName: System.Xaml.Schema.XamlTypeInvoker
- uid: System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
- uid: System.Xaml.XamlType.AllowedContentTypes
  parent: System.Xaml.XamlType
  isExternal: false
  name: AllowedContentTypes
  nameWithType: XamlType.AllowedContentTypes
  fullName: System.Xaml.XamlType.AllowedContentTypes
- uid: System.Xaml.XamlType.BaseType
  parent: System.Xaml.XamlType
  isExternal: false
  name: BaseType
  nameWithType: XamlType.BaseType
  fullName: System.Xaml.XamlType.BaseType
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: CanAssignTo(XamlType)
  nameWithType: XamlType.CanAssignTo(XamlType)
  fullName: System.Xaml.XamlType.CanAssignTo(XamlType)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlType.ConstructionRequiresArguments
  parent: System.Xaml.XamlType
  isExternal: false
  name: ConstructionRequiresArguments
  nameWithType: XamlType.ConstructionRequiresArguments
  fullName: System.Xaml.XamlType.ConstructionRequiresArguments
- uid: System.Xaml.XamlType.ContentProperty
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentProperty
  nameWithType: XamlType.ContentProperty
  fullName: System.Xaml.XamlType.ContentProperty
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlType.ContentWrappers
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentWrappers
  nameWithType: XamlType.ContentWrappers
  fullName: System.Xaml.XamlType.ContentWrappers
- uid: System.Xaml.XamlType.DeferringLoader
  parent: System.Xaml.XamlType
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlType.DeferringLoader
  fullName: System.Xaml.XamlType.DeferringLoader
- uid: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<XamlDeferringLoader>
  nameWithType: XamlValueConverter<XamlDeferringLoader>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Xaml.XamlDeferringLoader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlDeferringLoader
    name: XamlDeferringLoader
    nameWithType: XamlDeferringLoader
    fullName: XamlDeferringLoader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.Equals(System.Object)
  parent: System.Xaml.XamlType
  isExternal: false
  name: Equals(Object)
  nameWithType: XamlType.Equals(Object)
  fullName: System.Xaml.XamlType.Equals(Object)
- uid: System.Xaml.XamlType.Equals(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: Equals(XamlType)
  nameWithType: XamlType.Equals(XamlType)
  fullName: System.Xaml.XamlType.Equals(XamlType)
- uid: System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAliasedProperty(XamlDirective)
  nameWithType: XamlType.GetAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.GetAliasedProperty(XamlDirective)
- uid: System.Xaml.XamlDirective
  parent: System.Xaml
  isExternal: false
  name: XamlDirective
  nameWithType: XamlDirective
  fullName: System.Xaml.XamlDirective
- uid: System.Xaml.XamlType.GetAllAttachableMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllAttachableMembers()
  nameWithType: XamlType.GetAllAttachableMembers()
  fullName: System.Xaml.XamlType.GetAllAttachableMembers()
- uid: System.Collections.Generic.ICollection{System.Xaml.XamlMember}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<XamlMember>
  nameWithType: ICollection<XamlMember>
  fullName: System.Collections.Generic.ICollection<System.Xaml.XamlMember>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Xaml.XamlMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlMember
    name: XamlMember
    nameWithType: XamlMember
    fullName: XamlMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.GetAllMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllMembers()
  nameWithType: XamlType.GetAllMembers()
  fullName: System.Xaml.XamlType.GetAllMembers()
- uid: System.Xaml.XamlType.GetAttachableMember(System.String)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAttachableMember(String)
  nameWithType: XamlType.GetAttachableMember(String)
  fullName: System.Xaml.XamlType.GetAttachableMember(String)
- uid: System.Xaml.XamlType.GetHashCode
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetHashCode()
  nameWithType: XamlType.GetHashCode()
  fullName: System.Xaml.XamlType.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xaml.XamlType.GetMember(System.String)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetMember(String)
  nameWithType: XamlType.GetMember(String)
  fullName: System.Xaml.XamlType.GetMember(String)
- uid: System.Xaml.XamlType.GetPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetPositionalParameters(Int32)
  nameWithType: XamlType.GetPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.GetPositionalParameters(Int32)
- uid: System.Xaml.XamlType.GetXamlNamespaces
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetXamlNamespaces()
  nameWithType: XamlType.GetXamlNamespaces()
  fullName: System.Xaml.XamlType.GetXamlNamespaces()
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.Invoker
  parent: System.Xaml.XamlType
  isExternal: false
  name: Invoker
  nameWithType: XamlType.Invoker
  fullName: System.Xaml.XamlType.Invoker
- uid: System.Xaml.XamlType.IsAmbient
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsAmbient
  nameWithType: XamlType.IsAmbient
  fullName: System.Xaml.XamlType.IsAmbient
- uid: System.Xaml.XamlType.IsArray
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsArray
  nameWithType: XamlType.IsArray
  fullName: System.Xaml.XamlType.IsArray
- uid: System.Xaml.XamlType.IsCollection
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsCollection
  nameWithType: XamlType.IsCollection
  fullName: System.Xaml.XamlType.IsCollection
- uid: System.Xaml.XamlType.IsConstructible
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsConstructible
  nameWithType: XamlType.IsConstructible
  fullName: System.Xaml.XamlType.IsConstructible
- uid: System.Xaml.XamlType.IsDictionary
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsDictionary
  nameWithType: XamlType.IsDictionary
  fullName: System.Xaml.XamlType.IsDictionary
- uid: System.Xaml.XamlType.IsGeneric
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsGeneric
  nameWithType: XamlType.IsGeneric
  fullName: System.Xaml.XamlType.IsGeneric
- uid: System.Xaml.XamlType.IsMarkupExtension
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsMarkupExtension
  nameWithType: XamlType.IsMarkupExtension
  fullName: System.Xaml.XamlType.IsMarkupExtension
- uid: System.Xaml.XamlType.IsNameScope
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameScope
  nameWithType: XamlType.IsNameScope
  fullName: System.Xaml.XamlType.IsNameScope
- uid: System.Xaml.XamlType.IsNameValid
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameValid
  nameWithType: XamlType.IsNameValid
  fullName: System.Xaml.XamlType.IsNameValid
- uid: System.Xaml.XamlType.IsNullable
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNullable
  nameWithType: XamlType.IsNullable
  fullName: System.Xaml.XamlType.IsNullable
- uid: System.Xaml.XamlType.IsPublic
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsPublic
  nameWithType: XamlType.IsPublic
  fullName: System.Xaml.XamlType.IsPublic
- uid: System.Xaml.XamlType.IsUnknown
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUnknown
  nameWithType: XamlType.IsUnknown
  fullName: System.Xaml.XamlType.IsUnknown
- uid: System.Xaml.XamlType.IsUsableDuringInitialization
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUsableDuringInitialization
  nameWithType: XamlType.IsUsableDuringInitialization
  fullName: System.Xaml.XamlType.IsUsableDuringInitialization
- uid: System.Xaml.XamlType.IsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsWhitespaceSignificantCollection
  nameWithType: XamlType.IsWhitespaceSignificantCollection
  fullName: System.Xaml.XamlType.IsWhitespaceSignificantCollection
- uid: System.Xaml.XamlType.IsXData
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsXData
  nameWithType: XamlType.IsXData
  fullName: System.Xaml.XamlType.IsXData
- uid: System.Xaml.XamlType.ItemType
  parent: System.Xaml.XamlType
  isExternal: false
  name: ItemType
  nameWithType: XamlType.ItemType
  fullName: System.Xaml.XamlType.ItemType
- uid: System.Xaml.XamlType.KeyType
  parent: System.Xaml.XamlType
  isExternal: false
  name: KeyType
  nameWithType: XamlType.KeyType
  fullName: System.Xaml.XamlType.KeyType
- uid: System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAliasedProperty(XamlDirective)
  nameWithType: XamlType.LookupAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.LookupAliasedProperty(XamlDirective)
- uid: System.Xaml.XamlType.LookupAllAttachableMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllAttachableMembers()
  nameWithType: XamlType.LookupAllAttachableMembers()
  fullName: System.Xaml.XamlType.LookupAllAttachableMembers()
- uid: System.Collections.Generic.IEnumerable{System.Xaml.XamlMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<XamlMember>
  nameWithType: IEnumerable<XamlMember>
  fullName: System.Collections.Generic.IEnumerable<System.Xaml.XamlMember>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Xaml.XamlMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlMember
    name: XamlMember
    nameWithType: XamlMember
    fullName: XamlMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupAllMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllMembers()
  nameWithType: XamlType.LookupAllMembers()
  fullName: System.Xaml.XamlType.LookupAllMembers()
- uid: System.Xaml.XamlType.LookupAllowedContentTypes
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllowedContentTypes()
  nameWithType: XamlType.LookupAllowedContentTypes()
  fullName: System.Xaml.XamlType.LookupAllowedContentTypes()
- uid: System.Xaml.XamlType.LookupAttachableMember(System.String)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAttachableMember(String)
  nameWithType: XamlType.LookupAttachableMember(String)
  fullName: System.Xaml.XamlType.LookupAttachableMember(String)
- uid: System.Xaml.XamlType.LookupBaseType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupBaseType()
  nameWithType: XamlType.LookupBaseType()
  fullName: System.Xaml.XamlType.LookupBaseType()
- uid: System.Xaml.XamlType.LookupCollectionKind
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCollectionKind()
  nameWithType: XamlType.LookupCollectionKind()
  fullName: System.Xaml.XamlType.LookupCollectionKind()
- uid: System.Xaml.Schema.XamlCollectionKind
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlCollectionKind
  nameWithType: XamlCollectionKind
  fullName: System.Xaml.Schema.XamlCollectionKind
- uid: System.Xaml.XamlType.LookupConstructionRequiresArguments
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupConstructionRequiresArguments()
  nameWithType: XamlType.LookupConstructionRequiresArguments()
  fullName: System.Xaml.XamlType.LookupConstructionRequiresArguments()
- uid: System.Xaml.XamlType.LookupContentProperty
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentProperty()
  nameWithType: XamlType.LookupContentProperty()
  fullName: System.Xaml.XamlType.LookupContentProperty()
- uid: System.Xaml.XamlType.LookupContentWrappers
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentWrappers()
  nameWithType: XamlType.LookupContentWrappers()
  fullName: System.Xaml.XamlType.LookupContentWrappers()
- uid: System.Xaml.XamlType.LookupCustomAttributeProvider
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCustomAttributeProvider()
  nameWithType: XamlType.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlType.LookupCustomAttributeProvider()
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Xaml.XamlType.LookupDeferringLoader
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupDeferringLoader()
  nameWithType: XamlType.LookupDeferringLoader()
  fullName: System.Xaml.XamlType.LookupDeferringLoader()
- uid: System.Xaml.XamlType.LookupInvoker
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupInvoker()
  nameWithType: XamlType.LookupInvoker()
  fullName: System.Xaml.XamlType.LookupInvoker()
- uid: System.Xaml.XamlType.LookupIsAmbient
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsAmbient()
  nameWithType: XamlType.LookupIsAmbient()
  fullName: System.Xaml.XamlType.LookupIsAmbient()
- uid: System.Xaml.XamlType.LookupIsConstructible
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsConstructible()
  nameWithType: XamlType.LookupIsConstructible()
  fullName: System.Xaml.XamlType.LookupIsConstructible()
- uid: System.Xaml.XamlType.LookupIsMarkupExtension
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsMarkupExtension()
  nameWithType: XamlType.LookupIsMarkupExtension()
  fullName: System.Xaml.XamlType.LookupIsMarkupExtension()
- uid: System.Xaml.XamlType.LookupIsNameScope
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNameScope()
  nameWithType: XamlType.LookupIsNameScope()
  fullName: System.Xaml.XamlType.LookupIsNameScope()
- uid: System.Xaml.XamlType.LookupIsNullable
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNullable()
  nameWithType: XamlType.LookupIsNullable()
  fullName: System.Xaml.XamlType.LookupIsNullable()
- uid: System.Xaml.XamlType.LookupIsPublic
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsPublic()
  nameWithType: XamlType.LookupIsPublic()
  fullName: System.Xaml.XamlType.LookupIsPublic()
- uid: System.Xaml.XamlType.LookupIsUnknown
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsUnknown()
  nameWithType: XamlType.LookupIsUnknown()
  fullName: System.Xaml.XamlType.LookupIsUnknown()
- uid: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsWhitespaceSignificantCollection()
  nameWithType: XamlType.LookupIsWhitespaceSignificantCollection()
  fullName: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection()
- uid: System.Xaml.XamlType.LookupIsXData
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsXData()
  nameWithType: XamlType.LookupIsXData()
  fullName: System.Xaml.XamlType.LookupIsXData()
- uid: System.Xaml.XamlType.LookupItemType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupItemType()
  nameWithType: XamlType.LookupItemType()
  fullName: System.Xaml.XamlType.LookupItemType()
- uid: System.Xaml.XamlType.LookupKeyType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupKeyType()
  nameWithType: XamlType.LookupKeyType()
  fullName: System.Xaml.XamlType.LookupKeyType()
- uid: System.Xaml.XamlType.LookupMarkupExtensionReturnType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMarkupExtensionReturnType()
  nameWithType: XamlType.LookupMarkupExtensionReturnType()
  fullName: System.Xaml.XamlType.LookupMarkupExtensionReturnType()
- uid: System.Xaml.XamlType.LookupMember(System.String,System.Boolean)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMember(String,Boolean)
  nameWithType: XamlType.LookupMember(String,Boolean)
  fullName: System.Xaml.XamlType.LookupMember(String,Boolean)
- uid: System.Xaml.XamlType.LookupPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupPositionalParameters(Int32)
  nameWithType: XamlType.LookupPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.LookupPositionalParameters(Int32)
- uid: System.Xaml.XamlType.LookupSetMarkupExtensionHandler
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetMarkupExtensionHandler()
  nameWithType: XamlType.LookupSetMarkupExtensionHandler()
  fullName: System.Xaml.XamlType.LookupSetMarkupExtensionHandler()
- uid: System.EventHandler{System.Windows.Markup.XamlSetMarkupExtensionEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<XamlSetMarkupExtensionEventArgs>
  nameWithType: EventHandler<XamlSetMarkupExtensionEventArgs>
  fullName: System.EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.XamlSetMarkupExtensionEventArgs
    name: XamlSetMarkupExtensionEventArgs
    nameWithType: XamlSetMarkupExtensionEventArgs
    fullName: XamlSetMarkupExtensionEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupSetTypeConverterHandler
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetTypeConverterHandler()
  nameWithType: XamlType.LookupSetTypeConverterHandler()
  fullName: System.Xaml.XamlType.LookupSetTypeConverterHandler()
- uid: System.EventHandler{System.Windows.Markup.XamlSetTypeConverterEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<XamlSetTypeConverterEventArgs>
  nameWithType: EventHandler<XamlSetTypeConverterEventArgs>
  fullName: System.EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.XamlSetTypeConverterEventArgs
    name: XamlSetTypeConverterEventArgs
    nameWithType: XamlSetTypeConverterEventArgs
    fullName: XamlSetTypeConverterEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupTrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTrimSurroundingWhitespace()
  nameWithType: XamlType.LookupTrimSurroundingWhitespace()
  fullName: System.Xaml.XamlType.LookupTrimSurroundingWhitespace()
- uid: System.Xaml.XamlType.LookupTypeConverter
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTypeConverter()
  nameWithType: XamlType.LookupTypeConverter()
  fullName: System.Xaml.XamlType.LookupTypeConverter()
- uid: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<TypeConverter>
  nameWithType: XamlValueConverter<TypeConverter>
  fullName: System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.ComponentModel.TypeConverter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.TypeConverter
    name: TypeConverter
    nameWithType: TypeConverter
    fullName: TypeConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupUnderlyingType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUnderlyingType()
  nameWithType: XamlType.LookupUnderlyingType()
  fullName: System.Xaml.XamlType.LookupUnderlyingType()
- uid: System.Xaml.XamlType.LookupUsableDuringInitialization
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUsableDuringInitialization()
  nameWithType: XamlType.LookupUsableDuringInitialization()
  fullName: System.Xaml.XamlType.LookupUsableDuringInitialization()
- uid: System.Xaml.XamlType.LookupValueSerializer
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupValueSerializer()
  nameWithType: XamlType.LookupValueSerializer()
  fullName: System.Xaml.XamlType.LookupValueSerializer()
- uid: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<ValueSerializer>
  nameWithType: XamlValueConverter<ValueSerializer>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Windows.Markup.ValueSerializer>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.ValueSerializer
    name: ValueSerializer
    nameWithType: ValueSerializer
    fullName: ValueSerializer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.MarkupExtensionReturnType
  parent: System.Xaml.XamlType
  isExternal: false
  name: MarkupExtensionReturnType
  nameWithType: XamlType.MarkupExtensionReturnType
  fullName: System.Xaml.XamlType.MarkupExtensionReturnType
- uid: System.Xaml.XamlType.Name
  parent: System.Xaml.XamlType
  isExternal: false
  name: Name
  nameWithType: XamlType.Name
  fullName: System.Xaml.XamlType.Name
- uid: System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Equality(XamlType,XamlType)
  nameWithType: XamlType.op_Equality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Equality(XamlType,XamlType)
- uid: System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Inequality(XamlType,XamlType)
  nameWithType: XamlType.op_Inequality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Inequality(XamlType,XamlType)
- uid: System.Xaml.XamlType.PreferredXamlNamespace
  parent: System.Xaml.XamlType
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlType.PreferredXamlNamespace
  fullName: System.Xaml.XamlType.PreferredXamlNamespace
- uid: System.Xaml.XamlType.SchemaContext
  parent: System.Xaml.XamlType
  isExternal: false
  name: SchemaContext
  nameWithType: XamlType.SchemaContext
  fullName: System.Xaml.XamlType.SchemaContext
- uid: System.Xaml.XamlType.ToString
  parent: System.Xaml.XamlType
  isExternal: false
  name: ToString()
  nameWithType: XamlType.ToString()
  fullName: System.Xaml.XamlType.ToString()
- uid: System.Xaml.XamlType.TrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  isExternal: false
  name: TrimSurroundingWhitespace
  nameWithType: XamlType.TrimSurroundingWhitespace
  fullName: System.Xaml.XamlType.TrimSurroundingWhitespace
- uid: System.Xaml.XamlType.TypeArguments
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeArguments
  nameWithType: XamlType.TypeArguments
  fullName: System.Xaml.XamlType.TypeArguments
- uid: System.Xaml.XamlType.TypeConverter
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeConverter
  nameWithType: XamlType.TypeConverter
  fullName: System.Xaml.XamlType.TypeConverter
- uid: System.Xaml.XamlType.UnderlyingType
  parent: System.Xaml.XamlType
  isExternal: false
  name: UnderlyingType
  nameWithType: XamlType.UnderlyingType
  fullName: System.Xaml.XamlType.UnderlyingType
- uid: System.Xaml.XamlType.ValueSerializer
  parent: System.Xaml.XamlType
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlType.ValueSerializer
  fullName: System.Xaml.XamlType.ValueSerializer
- uid: System.Xaml.XamlType.#ctor*
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType
  nameWithType: XamlType.XamlType
- uid: System.Xaml.XamlType.AllowedContentTypes*
  parent: System.Xaml.XamlType
  isExternal: false
  name: AllowedContentTypes
  nameWithType: XamlType.AllowedContentTypes
- uid: System.Xaml.XamlType.BaseType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: BaseType
  nameWithType: XamlType.BaseType
- uid: System.Xaml.XamlType.CanAssignTo*
  parent: System.Xaml.XamlType
  isExternal: false
  name: CanAssignTo
  nameWithType: XamlType.CanAssignTo
- uid: System.Xaml.XamlType.ConstructionRequiresArguments*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ConstructionRequiresArguments
  nameWithType: XamlType.ConstructionRequiresArguments
- uid: System.Xaml.XamlType.ContentProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentProperty
  nameWithType: XamlType.ContentProperty
- uid: System.Xaml.XamlType.ContentWrappers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentWrappers
  nameWithType: XamlType.ContentWrappers
- uid: System.Xaml.XamlType.DeferringLoader*
  parent: System.Xaml.XamlType
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlType.DeferringLoader
- uid: System.Xaml.XamlType.Equals*
  parent: System.Xaml.XamlType
  isExternal: false
  name: Equals
  nameWithType: XamlType.Equals
- uid: System.Xaml.XamlType.GetAliasedProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAliasedProperty
  nameWithType: XamlType.GetAliasedProperty
- uid: System.Xaml.XamlType.GetAllAttachableMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllAttachableMembers
  nameWithType: XamlType.GetAllAttachableMembers
- uid: System.Xaml.XamlType.GetAllMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllMembers
  nameWithType: XamlType.GetAllMembers
- uid: System.Xaml.XamlType.GetAttachableMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAttachableMember
  nameWithType: XamlType.GetAttachableMember
- uid: System.Xaml.XamlType.GetHashCode*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetHashCode
  nameWithType: XamlType.GetHashCode
- uid: System.Xaml.XamlType.GetMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetMember
  nameWithType: XamlType.GetMember
- uid: System.Xaml.XamlType.GetPositionalParameters*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetPositionalParameters
  nameWithType: XamlType.GetPositionalParameters
- uid: System.Xaml.XamlType.GetXamlNamespaces*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetXamlNamespaces
  nameWithType: XamlType.GetXamlNamespaces
- uid: System.Xaml.XamlType.Invoker*
  parent: System.Xaml.XamlType
  isExternal: false
  name: Invoker
  nameWithType: XamlType.Invoker
- uid: System.Xaml.XamlType.IsAmbient*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsAmbient
  nameWithType: XamlType.IsAmbient
- uid: System.Xaml.XamlType.IsArray*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsArray
  nameWithType: XamlType.IsArray
- uid: System.Xaml.XamlType.IsCollection*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsCollection
  nameWithType: XamlType.IsCollection
- uid: System.Xaml.XamlType.IsConstructible*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsConstructible
  nameWithType: XamlType.IsConstructible
- uid: System.Xaml.XamlType.IsDictionary*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsDictionary
  nameWithType: XamlType.IsDictionary
- uid: System.Xaml.XamlType.IsGeneric*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsGeneric
  nameWithType: XamlType.IsGeneric
- uid: System.Xaml.XamlType.IsMarkupExtension*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsMarkupExtension
  nameWithType: XamlType.IsMarkupExtension
- uid: System.Xaml.XamlType.IsNameScope*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameScope
  nameWithType: XamlType.IsNameScope
- uid: System.Xaml.XamlType.IsNameValid*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameValid
  nameWithType: XamlType.IsNameValid
- uid: System.Xaml.XamlType.IsNullable*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNullable
  nameWithType: XamlType.IsNullable
- uid: System.Xaml.XamlType.IsPublic*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsPublic
  nameWithType: XamlType.IsPublic
- uid: System.Xaml.XamlType.IsUnknown*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUnknown
  nameWithType: XamlType.IsUnknown
- uid: System.Xaml.XamlType.IsUsableDuringInitialization*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUsableDuringInitialization
  nameWithType: XamlType.IsUsableDuringInitialization
- uid: System.Xaml.XamlType.IsWhitespaceSignificantCollection*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsWhitespaceSignificantCollection
  nameWithType: XamlType.IsWhitespaceSignificantCollection
- uid: System.Xaml.XamlType.IsXData*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsXData
  nameWithType: XamlType.IsXData
- uid: System.Xaml.XamlType.ItemType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ItemType
  nameWithType: XamlType.ItemType
- uid: System.Xaml.XamlType.KeyType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: KeyType
  nameWithType: XamlType.KeyType
- uid: System.Xaml.XamlType.LookupAliasedProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAliasedProperty
  nameWithType: XamlType.LookupAliasedProperty
- uid: System.Xaml.XamlType.LookupAllAttachableMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllAttachableMembers
  nameWithType: XamlType.LookupAllAttachableMembers
- uid: System.Xaml.XamlType.LookupAllMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllMembers
  nameWithType: XamlType.LookupAllMembers
- uid: System.Xaml.XamlType.LookupAllowedContentTypes*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllowedContentTypes
  nameWithType: XamlType.LookupAllowedContentTypes
- uid: System.Xaml.XamlType.LookupAttachableMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAttachableMember
  nameWithType: XamlType.LookupAttachableMember
- uid: System.Xaml.XamlType.LookupBaseType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupBaseType
  nameWithType: XamlType.LookupBaseType
- uid: System.Xaml.XamlType.LookupCollectionKind*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCollectionKind
  nameWithType: XamlType.LookupCollectionKind
- uid: System.Xaml.XamlType.LookupConstructionRequiresArguments*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupConstructionRequiresArguments
  nameWithType: XamlType.LookupConstructionRequiresArguments
- uid: System.Xaml.XamlType.LookupContentProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentProperty
  nameWithType: XamlType.LookupContentProperty
- uid: System.Xaml.XamlType.LookupContentWrappers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentWrappers
  nameWithType: XamlType.LookupContentWrappers
- uid: System.Xaml.XamlType.LookupCustomAttributeProvider*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCustomAttributeProvider
  nameWithType: XamlType.LookupCustomAttributeProvider
- uid: System.Xaml.XamlType.LookupDeferringLoader*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupDeferringLoader
  nameWithType: XamlType.LookupDeferringLoader
- uid: System.Xaml.XamlType.LookupInvoker*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupInvoker
  nameWithType: XamlType.LookupInvoker
- uid: System.Xaml.XamlType.LookupIsAmbient*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsAmbient
  nameWithType: XamlType.LookupIsAmbient
- uid: System.Xaml.XamlType.LookupIsConstructible*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsConstructible
  nameWithType: XamlType.LookupIsConstructible
- uid: System.Xaml.XamlType.LookupIsMarkupExtension*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsMarkupExtension
  nameWithType: XamlType.LookupIsMarkupExtension
- uid: System.Xaml.XamlType.LookupIsNameScope*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNameScope
  nameWithType: XamlType.LookupIsNameScope
- uid: System.Xaml.XamlType.LookupIsNullable*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNullable
  nameWithType: XamlType.LookupIsNullable
- uid: System.Xaml.XamlType.LookupIsPublic*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsPublic
  nameWithType: XamlType.LookupIsPublic
- uid: System.Xaml.XamlType.LookupIsUnknown*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsUnknown
  nameWithType: XamlType.LookupIsUnknown
- uid: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsWhitespaceSignificantCollection
  nameWithType: XamlType.LookupIsWhitespaceSignificantCollection
- uid: System.Xaml.XamlType.LookupIsXData*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsXData
  nameWithType: XamlType.LookupIsXData
- uid: System.Xaml.XamlType.LookupItemType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupItemType
  nameWithType: XamlType.LookupItemType
- uid: System.Xaml.XamlType.LookupKeyType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupKeyType
  nameWithType: XamlType.LookupKeyType
- uid: System.Xaml.XamlType.LookupMarkupExtensionReturnType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMarkupExtensionReturnType
  nameWithType: XamlType.LookupMarkupExtensionReturnType
- uid: System.Xaml.XamlType.LookupMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMember
  nameWithType: XamlType.LookupMember
- uid: System.Xaml.XamlType.LookupPositionalParameters*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupPositionalParameters
  nameWithType: XamlType.LookupPositionalParameters
- uid: System.Xaml.XamlType.LookupSetMarkupExtensionHandler*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetMarkupExtensionHandler
  nameWithType: XamlType.LookupSetMarkupExtensionHandler
- uid: System.Xaml.XamlType.LookupSetTypeConverterHandler*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetTypeConverterHandler
  nameWithType: XamlType.LookupSetTypeConverterHandler
- uid: System.Xaml.XamlType.LookupTrimSurroundingWhitespace*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTrimSurroundingWhitespace
  nameWithType: XamlType.LookupTrimSurroundingWhitespace
- uid: System.Xaml.XamlType.LookupTypeConverter*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTypeConverter
  nameWithType: XamlType.LookupTypeConverter
- uid: System.Xaml.XamlType.LookupUnderlyingType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUnderlyingType
  nameWithType: XamlType.LookupUnderlyingType
- uid: System.Xaml.XamlType.LookupUsableDuringInitialization*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUsableDuringInitialization
  nameWithType: XamlType.LookupUsableDuringInitialization
- uid: System.Xaml.XamlType.LookupValueSerializer*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupValueSerializer
  nameWithType: XamlType.LookupValueSerializer
- uid: System.Xaml.XamlType.MarkupExtensionReturnType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: MarkupExtensionReturnType
  nameWithType: XamlType.MarkupExtensionReturnType
- uid: System.Xaml.XamlType.Name*
  parent: System.Xaml.XamlType
  isExternal: false
  name: Name
  nameWithType: XamlType.Name
- uid: System.Xaml.XamlType.op_Equality*
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Equality
  nameWithType: XamlType.op_Equality
- uid: System.Xaml.XamlType.op_Inequality*
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Inequality
  nameWithType: XamlType.op_Inequality
- uid: System.Xaml.XamlType.PreferredXamlNamespace*
  parent: System.Xaml.XamlType
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlType.PreferredXamlNamespace
- uid: System.Xaml.XamlType.SchemaContext*
  parent: System.Xaml.XamlType
  isExternal: false
  name: SchemaContext
  nameWithType: XamlType.SchemaContext
- uid: System.Xaml.XamlType.ToString*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ToString
  nameWithType: XamlType.ToString
- uid: System.Xaml.XamlType.TrimSurroundingWhitespace*
  parent: System.Xaml.XamlType
  isExternal: false
  name: TrimSurroundingWhitespace
  nameWithType: XamlType.TrimSurroundingWhitespace
- uid: System.Xaml.XamlType.TypeArguments*
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeArguments
  nameWithType: XamlType.TypeArguments
- uid: System.Xaml.XamlType.TypeConverter*
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeConverter
  nameWithType: XamlType.TypeConverter
- uid: System.Xaml.XamlType.UnderlyingType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: UnderlyingType
  nameWithType: XamlType.UnderlyingType
- uid: System.Xaml.XamlType.ValueSerializer*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlType.ValueSerializer
