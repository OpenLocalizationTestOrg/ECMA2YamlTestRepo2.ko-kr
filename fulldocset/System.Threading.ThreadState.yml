### YamlMime:ManagedReference
items:
- uid: System.Threading.ThreadState
  id: ThreadState
  children:
  - System.Threading.ThreadState.Aborted
  - System.Threading.ThreadState.AbortRequested
  - System.Threading.ThreadState.Background
  - System.Threading.ThreadState.Running
  - System.Threading.ThreadState.Stopped
  - System.Threading.ThreadState.StopRequested
  - System.Threading.ThreadState.Suspended
  - System.Threading.ThreadState.SuspendRequested
  - System.Threading.ThreadState.Unstarted
  - System.Threading.ThreadState.WaitSleepJoin
  langs:
  - csharp
  name: ThreadState
  nameWithType: ThreadState
  fullName: System.Threading.ThreadState
  type: Enum
  summary: "실행 상태를 지정 된 <xref href=&quot;System.Threading.Thread&quot;> </xref>합니다."
  remarks: "몇 가지에만 관심 ThreadState 열거형은 디버깅 시나리오입니다. 코드 스레드 활동을 동기화 할 스레드 상태를 사용해 해야 합니다.       ThreadState 일련의 스레드에 대 한 모든 가능한 실행 상태를 정의합니다. 만든 스레드는 종료 될 때까지 상태 중 하나 이상에 있습니다. 공용 언어 런타임 내에서 만들어진 스레드는 초기는 `Unstarted` 상태인을 런타임에 제공 되는 외부 스레드에 이미 있는 반면는 `Running` 상태입니다. `Unstarted` 스레드를 전환 되 고 `Running` <xref:System.Threading.Thread.Start%2A>.</xref:System.Threading.Thread.Start%2A> 를 호출 하 여 상태 모든 조합의 `ThreadState` 유효한 값은; 모두에 스레드 수 없습니다. 예를 들어는 `Aborted` 및 `Unstarted` 상태입니다.      > [!IMPORTANT] > 두 스레드 상태 열거형, ThreadState 및 <xref:System.Diagnostics.ThreadState?displayProperty=fullName>.</xref:System.Diagnostics.ThreadState?displayProperty=fullName> 없는       다음 표에서 상태 변경이 발생 하는 작업을 보여 줍니다.      | 작업 | ThreadState |   |------------|-----------------|   | 공용 언어 런타임 내에서 스레드가 생성 됩니다. | 시작 되지 않은 |   | 다른 스레드 호출에서 <xref:System.Threading.Thread.Start%2A?displayProperty=fullName>새 스레드 및 호출에 메서드를 반환 합니다.</xref:System.Threading.Thread.Start%2A?displayProperty=fullName><br /><br /> <xref:System.Threading.Thread.Start%2A>새 스레드가 실행을 시작할 때까지 메서드는 반환 하지 않습니다.</xref:System.Threading.Thread.Start%2A> 어느 시점에서 새 스레드 실행을 시작 합니다, <xref:System.Threading.Thread.Start%2A>호출 하는 동안 알 수 있는 방법이 있습니다. | 실행 |   | 스레드 호출 <xref:System.Threading.Thread.Sleep%2A>| WaitSleepJoin |   | 다른 개체에 스레드 호출 <xref:System.Threading.Monitor.Wait%2A>. | WaitSleepJoin |   | 다른 스레드의 스레드 호출 <xref:System.Threading.Thread.Join%2A>. | WaitSleepJoin |   | 다른 스레드 호출 <xref:System.Threading.Thread.Interrupt%2A>| 실행 |   | 다른 스레드 호출 <xref:System.Threading.Thread.Suspend%2A>| SuspendRequested |   | 스레드가 <xref:System.Threading.Thread.Suspend%2A>요청에 응답 합니다. | 일시 중단 |   | 다른 스레드 호출 <xref:System.Threading.Thread.Resume%2A>| 실행 |   | 다른 스레드 호출 <xref:System.Threading.Thread.Abort%2A>| AbortRequested |   | 스레드가 <xref:System.Threading.Thread.Abort%2A>요청에 응답 합니다. | 중지 |   | 스레드가 종료 됩니다. | 중지 |       위에서 설명한 상태 외에 `Background` 를 배경이 나 전경에서 스레드가 실행 되 고 있는지 여부를 나타내는 상태.</xref:System.Threading.Thread.Abort%2A> </xref:System.Threading.Thread.Abort%2A> </xref:System.Threading.Thread.Resume%2A> </xref:System.Threading.Thread.Suspend%2A> </xref:System.Threading.Thread.Suspend%2A> </xref:System.Threading.Thread.Interrupt%2A> </xref:System.Threading.Thread.Join%2A> </xref:System.Threading.Monitor.Wait%2A> </xref:System.Threading.Thread.Sleep%2A> </xref:System.Threading.Thread.Start%2A>       스레드는 한 번에 둘 이상의 상태일 수 있습니다. 예를 들어에 대 한 호출에서 스레드가 차단 되 면 <xref:System.Threading.Monitor.Wait%2A>, 및 다른 스레드 호출 <xref:System.Threading.Thread.Abort%2A>에 차단 된 스레드는 차단 된 스레드가 모두 됩니다는 `WaitSleepJoin` 및 `AbortRequested` 동시에 상태.</xref:System.Threading.Thread.Abort%2A> </xref:System.Threading.Monitor.Wait%2A> 이 경우 스레드가에 대 한 호출에서 반환 되는 즉시 <xref:System.Threading.Monitor.Wait%2A>아니거나 중단 되 면 수신는 <xref:System.Threading.ThreadAbortException>중단 하려면.</xref:System.Threading.ThreadAbortException> </xref:System.Threading.Monitor.Wait%2A>       <xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName>스레드 속성은 스레드의 현재 상태를 제공 합니다.</xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName> 응용 프로그램 스레드가 실행 되 고 있는지 확인 하는 비트 마스크를 사용 해야 합니다. 에 대 한 값이 이후 `Running` 영 (0), 스레드가 같은 C# 코드를 사용 하 여 실행 중인지 여부를 테스트 `(myThread.ThreadState & (ThreadState.Stopped | ThreadState.Unstarted)) == 0` 또는 Visual Basic 코드와 같은 `(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`합니다."
  syntax:
    content: >-
      [System.Flags]

      [System.Runtime.InteropServices.ComVisible(true)]

      public enum ThreadState
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.Threading.ThreadState.Aborted
  id: Aborted
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: Aborted
  nameWithType: ThreadState.Aborted
  fullName: System.Threading.ThreadState.Aborted
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "스레드 상태 AbortRequested를 포함 하 고, 이제는 스레드가 되지만 상태로 아직 중지 됨으로 변경 되지 않은."
  syntax:
    content: Aborted
    return:
      type: System.Threading.ThreadState
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.AbortRequested
  id: AbortRequested
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: AbortRequested
  nameWithType: ThreadState.AbortRequested
  fullName: System.Threading.ThreadState.AbortRequested
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt; 스레드에서 메서드를 호출 하지만 스레드가 아직 받지 못한는 보류 중인 <xref href=&quot;System.Threading.ThreadAbortException&quot;> </xref> 를 종료 하려고 합니다."
  syntax:
    content: AbortRequested
    return:
      type: System.Threading.ThreadState
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.Background
  id: Background
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: Background
  nameWithType: ThreadState.Background
  fullName: System.Threading.ThreadState.Background
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "포그라운드 스레드 달리 백그라운드 스레드로 스레드가 실행 중입니다. 이 상태를 설정 하 여 제어 되는 &lt;xref:System.Threading.Thread.IsBackground%2A?displayProperty=fullName&gt; 속성입니다."
  syntax:
    content: Background
    return:
      type: System.Threading.ThreadState
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.Running
  id: Running
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: Running
  nameWithType: ThreadState.Running
  fullName: System.Threading.ThreadState.Running
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "스레드가 시작 하 고 차단 되지 않습니다는 보류 중인 더 <xref href=&quot;System.Threading.ThreadAbortException&quot;> </xref>합니다."
  syntax:
    content: Running
    return:
      type: System.Threading.ThreadState
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.Stopped
  id: Stopped
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: Stopped
  nameWithType: ThreadState.Stopped
  fullName: System.Threading.ThreadState.Stopped
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "스레드가 중지 되었습니다."
  syntax:
    content: Stopped
    return:
      type: System.Threading.ThreadState
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.StopRequested
  id: StopRequested
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: StopRequested
  nameWithType: ThreadState.StopRequested
  fullName: System.Threading.ThreadState.StopRequested
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "스레드 중지 요청 되 고 됩니다. 내부 전용입니다."
  syntax:
    content: StopRequested
    return:
      type: System.Threading.ThreadState
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.Suspended
  id: Suspended
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: Suspended
  nameWithType: ThreadState.Suspended
  fullName: System.Threading.ThreadState.Suspended
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "스레드가 일시 중단 되었습니다."
  syntax:
    content: Suspended
    return:
      type: System.Threading.ThreadState
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.SuspendRequested
  id: SuspendRequested
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: SuspendRequested
  nameWithType: ThreadState.SuspendRequested
  fullName: System.Threading.ThreadState.SuspendRequested
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "스레드를 일시 중단 요청 되 고 됩니다."
  syntax:
    content: SuspendRequested
    return:
      type: System.Threading.ThreadState
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.Unstarted
  id: Unstarted
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: Unstarted
  nameWithType: ThreadState.Unstarted
  fullName: System.Threading.ThreadState.Unstarted
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "&lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt; 스레드에서 메서드를 호출 되지 않았습니다."
  syntax:
    content: Unstarted
    return:
      type: System.Threading.ThreadState
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.WaitSleepJoin
  id: WaitSleepJoin
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: WaitSleepJoin
  nameWithType: ThreadState.WaitSleepJoin
  fullName: System.Threading.ThreadState.WaitSleepJoin
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "스레드가 차단 됩니다. 이 호출의 결과 수 &lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt; 또는 &lt;xref:System.Threading.Thread.Join%2A?displayProperty=fullName&gt;, 잠금을 요청-호출 하 여 예를 들어 &lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName&gt; 또는 &lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName&gt; -또는 <xref:System.Threading.ManualResetEvent>.</xref:System.Threading.ManualResetEvent> 같은 스레드 동기화 개체에 대해 대기 중"
  syntax:
    content: WaitSleepJoin
    return:
      type: System.Threading.ThreadState
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Threading.ThreadState.Aborted
  parent: System.Threading.ThreadState
  isExternal: false
  name: Aborted
  nameWithType: ThreadState.Aborted
  fullName: System.Threading.ThreadState.Aborted
- uid: System.Threading.ThreadState
  parent: System.Threading
  isExternal: false
  name: ThreadState
  nameWithType: ThreadState
  fullName: System.Threading.ThreadState
- uid: System.Threading.ThreadState.AbortRequested
  parent: System.Threading.ThreadState
  isExternal: false
  name: AbortRequested
  nameWithType: ThreadState.AbortRequested
  fullName: System.Threading.ThreadState.AbortRequested
- uid: System.Threading.ThreadState.Background
  parent: System.Threading.ThreadState
  isExternal: false
  name: Background
  nameWithType: ThreadState.Background
  fullName: System.Threading.ThreadState.Background
- uid: System.Threading.ThreadState.Running
  parent: System.Threading.ThreadState
  isExternal: false
  name: Running
  nameWithType: ThreadState.Running
  fullName: System.Threading.ThreadState.Running
- uid: System.Threading.ThreadState.Stopped
  parent: System.Threading.ThreadState
  isExternal: false
  name: Stopped
  nameWithType: ThreadState.Stopped
  fullName: System.Threading.ThreadState.Stopped
- uid: System.Threading.ThreadState.StopRequested
  parent: System.Threading.ThreadState
  isExternal: false
  name: StopRequested
  nameWithType: ThreadState.StopRequested
  fullName: System.Threading.ThreadState.StopRequested
- uid: System.Threading.ThreadState.Suspended
  parent: System.Threading.ThreadState
  isExternal: false
  name: Suspended
  nameWithType: ThreadState.Suspended
  fullName: System.Threading.ThreadState.Suspended
- uid: System.Threading.ThreadState.SuspendRequested
  parent: System.Threading.ThreadState
  isExternal: false
  name: SuspendRequested
  nameWithType: ThreadState.SuspendRequested
  fullName: System.Threading.ThreadState.SuspendRequested
- uid: System.Threading.ThreadState.Unstarted
  parent: System.Threading.ThreadState
  isExternal: false
  name: Unstarted
  nameWithType: ThreadState.Unstarted
  fullName: System.Threading.ThreadState.Unstarted
- uid: System.Threading.ThreadState.WaitSleepJoin
  parent: System.Threading.ThreadState
  isExternal: false
  name: WaitSleepJoin
  nameWithType: ThreadState.WaitSleepJoin
  fullName: System.Threading.ThreadState.WaitSleepJoin
