### YamlMime:ManagedReference
items:
- uid: System.Windows.Threading.DispatcherObject
  id: DispatcherObject
  children:
  - System.Windows.Threading.DispatcherObject.#ctor
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  langs:
  - csharp
  name: DispatcherObject
  nameWithType: DispatcherObject
  fullName: System.Windows.Threading.DispatcherObject
  type: Class
  summary: "연결 된 개체를 나타냅니다는 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>합니다."
  remarks: "스레드만 하는 <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>생성에 DispatcherObject에 직접 액세스할 수 있습니다.</xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>  호출에 DispatcherObject 만들어진 스레드가 아닌 스레드에서 DispatcherObject에 액세스 하려면 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>에 <xref:System.Windows.Threading.Dispatcher>는 DispatcherObject 연관.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>       스레드로부터의 안전성을 적용 해야 하는 DispatcherObject의 서브 클래스 그렇게 할 수를 호출 하 여 <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>에서 모든 공용 메서드.</xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>  이렇게 호출 하는 스레드에서 DispatcherObject 생성 된 스레드입니다.       DispatcherObject 독립적으로 인스턴스화할 수 없습니다. 즉, 모든 생성자 보호 됩니다.       DispatcherObject에서 파생 된 개체는 스레드 선호도 있습니다.       파생 된 개체 <xref:System.Windows.Freezable>는 자유 스레드 고정 된 경우.</xref:System.Windows.Freezable>  자세한 내용은 참조는 [Freezable 개체 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public abstract class DispatcherObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.#ctor
  id: '#ctor'
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: DispatcherObject()
  nameWithType: DispatcherObject.DispatcherObject()
  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref> 클래스입니다."
  syntax:
    content: protected DispatcherObject ();
    parameters: []
  overload: System.Windows.Threading.DispatcherObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.CheckAccess
  id: CheckAccess
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: CheckAccess()
  nameWithType: DispatcherObject.CheckAccess()
  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "호출 스레드가이에 액세스할 수 있는지 여부를 결정 <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>합니다."
  remarks: "스레드는 <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>만들어진 <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> 액세스할 수 있습니다</xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>       모든 스레드에서이 <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> 를 수행할 액세스 권한이 있는지 여부를 확인 하려면 확인할 수 있습니다.       CheckAccess 사이의 차이 및 <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>은 CheckAccess 호출 스레드에서이에 액세스할 수 있는지 여부를 지정 하는 부울 값을 반환 하는 <xref:System.Windows.Threading.DispatcherObject>및 <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>호출 스레드가이 권한이 없는 경우 예외를 throw <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>       이 메서드를 호출 하는 것은 호출 동일 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>은 관련 <xref:System.Windows.Threading.Dispatcher>개체.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>"
  example:
  - "The following example uses CheckAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  The CheckAccess method on the <xref:System.Windows.Controls.Button> is called to verify access to the thread.  If the calling thread has access, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is posted onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.  \n  \n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/visualbasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/csharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]"
  syntax:
    content: public bool CheckAccess ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>호출 스레드가이 개체에 액세스할 수 있으면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Threading.DispatcherObject.CheckAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.Dispatcher
  id: Dispatcher
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
  fullName: System.Windows.Threading.DispatcherObject.Dispatcher
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "가져옵니다는 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> 이 <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref> 연관 됩니다."
  remarks: "발송자 생성 된 스레드에서만 액세스할 수 있습니다는 <xref:System.Windows.Threading.DispatcherObject>직접.</xref:System.Windows.Threading.DispatcherObject>  에 액세스 하려면는 <xref:System.Windows.Threading.DispatcherObject>스레드가 아닌 스레드에서 <xref:System.Windows.Threading.DispatcherObject>만들어진 켜 짐 호출 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>에 <xref:System.Windows.Threading.Dispatcher>는 <xref:System.Windows.Threading.DispatcherObject>관련 된.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject>"
  syntax:
    content: public System.Windows.Threading.Dispatcher Dispatcher { get; }
    return:
      type: System.Windows.Threading.Dispatcher
      description: "발송자입니다."
  overload: System.Windows.Threading.DispatcherObject.Dispatcher*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess
  id: VerifyAccess
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: VerifyAccess()
  nameWithType: DispatcherObject.VerifyAccess()
  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "호출 스레드가이 액세스 권한이 있는 적용 <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>합니다."
  remarks: "스레드는 <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>만들어진 <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> 액세스할 수 있습니다</xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>       모든 스레드에서이 <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> 를 수행할 액세스 권한이 있는지 여부를 확인 하려면 확인할 수 있습니다.       차이 <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>and VerifyAccess <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>호출 스레드에서이에 액세스할 수 있는지 여부를 지정 하는 부울 값을 반환 <xref:System.Windows.Threading.DispatcherObject>VerifyAccess 호출 스레드가이 권한이 없는 경우 예외를 throw <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> </xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>"
  example:
  - "The following example uses VerifyAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.  \n  \n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/visualbasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/csharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]"
  syntax:
    content: public void VerifyAccess ();
    parameters: []
  overload: System.Windows.Threading.DispatcherObject.VerifyAccess*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "호출 스레드를이 권한이 않은 <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>합니다."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Threading.DispatcherObject.#ctor
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: DispatcherObject()
  nameWithType: DispatcherObject.DispatcherObject()
  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()
- uid: System.Windows.Threading.DispatcherObject.CheckAccess
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: CheckAccess()
  nameWithType: DispatcherObject.CheckAccess()
  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Threading.DispatcherObject.Dispatcher
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
  fullName: System.Windows.Threading.DispatcherObject.Dispatcher
- uid: System.Windows.Threading.Dispatcher
  parent: System.Windows.Threading
  isExternal: false
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: VerifyAccess()
  nameWithType: DispatcherObject.VerifyAccess()
  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()
- uid: System.Windows.Threading.DispatcherObject.#ctor*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: DispatcherObject
  nameWithType: DispatcherObject.DispatcherObject
- uid: System.Windows.Threading.DispatcherObject.CheckAccess*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: CheckAccess
  nameWithType: DispatcherObject.CheckAccess
- uid: System.Windows.Threading.DispatcherObject.Dispatcher*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: VerifyAccess
  nameWithType: DispatcherObject.VerifyAccess
