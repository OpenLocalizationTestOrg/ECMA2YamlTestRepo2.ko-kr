### YamlMime:ManagedReference
items:
- uid: System.Data.IDataAdapter
  id: IDataAdapter
  children:
  - System.Data.IDataAdapter.Fill(System.Data.DataSet)
  - System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.IDataAdapter.GetFillParameters
  - System.Data.IDataAdapter.MissingMappingAction
  - System.Data.IDataAdapter.MissingSchemaAction
  - System.Data.IDataAdapter.TableMappings
  - System.Data.IDataAdapter.Update(System.Data.DataSet)
  langs:
  - csharp
  name: IDataAdapter
  nameWithType: IDataAdapter
  fullName: System.Data.IDataAdapter
  type: Interface
  summary: "일련의 메서드와 채우고 업데이트 하는 데 사용 되는 매핑 작업 관련 속성을 나타내고 개체가 DataAdapter를 구현할 수 있도록는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 데이터 소스를 업데이트 합니다.       <xref href=&quot;System.Data.IDbDataAdapter&quot;></xref>데이터 소스는 (또는 유사한) 텍스트 명령 사용 하 여 관계형 데이터베이스에는 인스턴스는 (같은 [!INCLUDE[tsql](~/add/includes/tsql-md.md)]), IDataAdapter 인스턴스에서 모든 유형의 데이터 소스를 사용할 수 없습니다."
  remarks: "IDataAdapter 인터페이스 데이터 원본과 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 간의 브리지를 나타내는 DataAdapter 클래스를 구현 하려면 상속 하는 클래스를 사용 합니다. DataAdapter 클래스에 대 한 자세한 내용은 참조 [DataAdapter에서 DataSet 채우기](~/add/includes/ajax-current-ext-md.md)합니다.       응용 프로그램을 직접 IDataAdapter 인터페이스의 인스턴스를 만들지 않습니다 되지만 IDataAdapter 상속 하는 클래스의 인스턴스를 구현 합니다.       IDataAdapter 상속 된 클래스는 상속 된 멤버를 구현 해야 하 고 일반적으로 공급자 특정 기능을 추가 하기 위한 추가 멤버를 정의 합니다. 예를 들어 IDataAdapter 인터페이스 정의 <xref:System.Data.IDataAdapter.Fill%2A>를 받는 메서드에 <xref:System.Data.DataSet>매개 변수로.</xref:System.Data.DataSet> </xref:System.Data.IDataAdapter.Fill%2A> 차례로 <xref:System.Data.OleDb.OleDbDataAdapter>클래스 상속는 <xref:System.Data.Common.DbDataAdapter.Fill%2A>메서드 정의의 두 추가 오버 로드는 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>ADO 레코드 집합 개체를 매개 변수로 메서드.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter>"
  example:
  - "The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, and <xref:System.Data.SqlClient.SqlConnection>, to select records from a database. The filled <xref:System.Data.DataSet> is then returned. To do this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.  \n  \n [!code-vb[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.idataadapter_1.vb)]\n [!code-cs[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.idataadapter_1.cs)]"
  syntax:
    content: public interface IDataAdapter
  implements: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: IDataAdapter.Fill(DataSet)
  fullName: System.Data.IDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "행을 업데이트 하거나 추가 <xref href=&quot;System.Data.DataSet&quot;> </xref> 사용 하 여 데이터 소스에 맞게는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 이름을 지정 하 고 만듭니다는 <xref href=&quot;System.Data.DataTable&quot;> </xref> &quot;Table&quot; 이라는 합니다."
  remarks: "연결 된 지정 된 SELECT 문에서 사용 하 여 데이터 원본에서 행을 검색 하는 채우기 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>속성.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> SELECT 문은 연결 된 연결 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다. 채우기가 호출 되기 전에 연결이 닫혀 있는 경우 데이터를 검색에 대 한 열은 다음 종료 합니다. 채우기가 호출 되기 전에 연결이 열려 있으면 열린 상태로 유지 합니다.       그런 다음이 채우기 작업 대상에 행을 추가 <xref:System.Data.DataTable>개체에 <xref:System.Data.DataSet>만들기는 <xref:System.Data.DataTable>경우 이미 없는 개체.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> 만들 때 <xref:System.Data.DataTable>개체 채우기 작업은 일반적으로 열만 이름 메타 데이터를 만듭니다.</xref:System.Data.DataTable> 그러나 경우는 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>속성이 `AddWithKey`, 적절 한 기본 키와 제약 조건도 만들어집니다.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       경우는 `SelectCommand` OUTER JOIN의 결과 반환 된 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 결과 대 한 값</xref:System.Data.DataTable.PrimaryKey%2A> 을 설정 하지 않습니다 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 참조 [기본 키 정의](~/add/includes/ajax-current-ext-md.md)합니다.       경우는 <xref:System.Data.IDataAdapter>중복 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴 &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; 및 등을 사용 하 여 연속 열에 대 한 이름을 생성 합니다.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> 배치 되는 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet> 여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>, 각 결과 집합은 별도 테이블에 저장 됩니다.</xref:System.Data.DataSet> 추가 결과 집합이 지정한 테이블 이름 (예: &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 응용 프로그램은 열 및 테이블 이름을 사용 하 여 이러한 명명 패턴과 충돌이 발생 하지 않도록 주의 해야 합니다.       때 채우는 데 사용 되는 SELECT 문에 <xref:System.Data.DataSet>여러 결과 반환 일괄 SQL 문과 같은 결과 중 하나에 오류가 포함 되어 있는 경우 모든 후속 결과 건너뛰고 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 추가 되지</xref:System.Data.DataSet>       동일한 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 여러 번 Fill 메서드를 사용할 수 있습니다. 기본 키가 있는 경우 이미 존재 하는 일치 하는 행과 들어오는 행이 병합 됩니다. 기본 키가 없으면 들어오는 행을 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 추가      > [!NOTE] > 채우기의 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리 하는 경우 및 <xref:System.Data.IDataAdapter.FillSchema%2A>.NET Framework 데이터에 대 한 공급자만 첫 번째 결과 대 한 스키마 정보를 검색 합니다.</xref:System.Data.IDataAdapter.FillSchema%2A>"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> 레코드로 채울 및 필요한 경우 스키마입니다."
    return:
      type: System.Int32
      description: "행 수가 성공적으로 추가 하거나 새로 고쳐지지는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다. 이 행을 반환 하지 않는 문에 의해 영향을 받는 행을 포함 되지 않습니다."
  overload: System.Data.IDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: IDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.IDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "추가 <xref href=&quot;System.Data.DataTable&quot;> </xref> 지정 된 &quot;Table&quot; 이라는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 데이터 원본의 기반으로 지정 하는 스키마와 일치 하도록 구성 하 고 <xref href=&quot;System.Data.SchemaType&quot;> </xref>합니다."
  remarks: "FillSchema 메서드 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 를 사용 하 여 데이터 원본에서 스키마를 검색 합니다. 와 연결 된 연결 개체는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>유효 해야 하지만 열려 있이 필요는 없습니다.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> FillSchema가 호출 되기 전에 연결이 닫혀 있는 경우 데이터를 검색에 대 한 열은 다음 종료 합니다. FillSchema가 호출 되기 전에 연결이 열려 있으면 열린 상태로 유지 합니다.       FillSchema 작업 <xref:System.Data.DataTable> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 대상</xref:System.Data.DataTable> 추가 그런 다음 열을 추가 <xref:System.Data.DataColumnCollection>의 <xref:System.Data.DataTable>하 고 다음 구성 <xref:System.Data.DataColumn>속성 데이터 원본에 존재 하는 경우:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> 설정 해야 <xref:System.Data.DataColumn.AutoIncrementStep%2A>및 <xref:System.Data.DataColumn.AutoIncrementSeed%2A>별도로.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A>FillSchema 또한 구성 된 <xref:System.Data.DataTable.PrimaryKey%2A>및 <xref:System.Data.DataTable.Constraints%2A>다음 규칙에 따라 속성:-의 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 대 한 기본 키 열으로 사용 하</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 여 하나 이상의 기본 키 열이 반환 하는 경우</xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -기본 키 열이 반환 되지 않지만 고유 열, 경우에 모든 고유 열이 nullable이 아닌 경우 고유한 열 기본 키로 사용 됩니다. 열이 null을 허용 하는 경우는 <xref:System.Data.UniqueConstraint>에 추가 되는 <xref:System.Data.ConstraintCollection>, 하지만 <xref:System.Data.DataTable.PrimaryKey%2A>속성이 설정 되지 않았습니다.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      - <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 대 한 기본 키 열으로 기본 키 열은 사용 기본 키 열과 고유 열이 모두 반환 하는 경우       기본 키와 unique 제약 조건에 추가 된 <xref:System.Data.ConstraintCollection>이전 규칙 하지만 다른 제약 조건에 따라 형식이 추가 되지 않습니다.</xref:System.Data.ConstraintCollection>       고유 클러스터형 인덱스가 하나 이상의 SQL Server 테이블의 열에 정의 된 및 기본 키 제약 조건을 별도의 열 집합에 정의 되어 클러스터형된 인덱스에 있는 열의 이름이 반환 됩니다. 기본 키 열 이름으로를 반환 하려면 기본 키 인덱스의 이름을 지정 하는 SELECT 문을 사용 하 여 쿼리 힌트를 사용 합니다. 쿼리 힌트를 지정 하는 방법에 대 한 자세한 내용은 참조 [쿼리 힌트 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)합니다.       경우는 <xref:System.Data.IDataAdapter>중복 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴 &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; 및 등을 사용 하 여 연속 열에 대 한 이름을 생성 합니다.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> 배치 되는 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet> 여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>, 각 결과 집합은 별도 테이블에 저장 됩니다.</xref:System.Data.DataSet> 추가 결과 집합이 지정한 테이블 이름 (예: &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 응용 프로그램은 열 및 테이블 이름을 사용 하 여 이러한 명명 패턴과 충돌이 발생 하지 않도록 주의 해야 합니다.       FillSchema 행을 반환 합니다. <xref:System.Data.IDataAdapter.Fill%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 행을 추가 하는 메서드</xref:System.Data.IDataAdapter.Fill%2A> 를 사용 하 여"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> 하 여 데이터 원본에서 스키마로 채워집니다."
    - id: schemaType
      type: System.Data.SchemaType
      description: "중 하나는 <xref href=&quot;System.Data.SchemaType&quot;> </xref> 값입니다."
    return:
      type: System.Data.DataTable[]
      description: "배열을 <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보를 포함 하는 개체 데이터 소스에서 반환 합니다."
  overload: System.Data.IDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: IDataAdapter.GetFillParameters()
  fullName: System.Data.IDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "SQL SELECT 문을 실행할 때 사용자가 설정 된 매개 변수를 가져옵니다."
  remarks: "```  \nprivate static void GetParameters(String connectiongString) {  \n           using (SqlConnection conn = new SqlConnection(connectiongString)) {  \n              String queryString = \"Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credits]>=@Credits\";   \n              SqlParameter year = new SqlParameter(\"@Year\", 2012);   \n              SqlParameter credits = new SqlParameter(\"@Credits\", SqlDbType.Int, 4, \"Credits\");   \n              credits.Value = 4; SqlCommand command = new SqlCommand(queryString, conn);   \n              command.Parameters.Add(year);   \n              command.Parameters.Add(credits);   \n              IDbDataAdapter mySchool = new SqlDataAdapter(command);   \n              IDataParameter[] parameters = mySchool.GetFillParameters();  \n              Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", \"ParameterName\", \"SourceColumn\", \"Direction\", \"DbType\", \"Value\");   \n              foreach (IDataParameter parameter in parameters) {   \n                 Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);   \n              }  \n           }  \n        }  \n```"
  syntax:
    content: public System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "배열을 <xref href=&quot;System.Data.IDataParameter&quot;> </xref> 사용자가 매개 변수를 포함 하는 개체를 설정 합니다."
  overload: System.Data.IDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.MissingMappingAction
  id: MissingMappingAction
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
  fullName: System.Data.IDataAdapter.MissingMappingAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "매핑되지 않은 원본 테이블 또는 열 전달 되는지를 소스 이름과 함께 필터링 하기 위해 또는 오류가 발생 하도록 지정 하거나 나타냅니다."
  remarks: "<xref:System.Data.IDataAdapter.TableMappings%2A>속성은 반환 되는 레코드 및 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 사이 마스터 매핑을 제공합니다</xref:System.Data.IDataAdapter.TableMappings%2A>"
  syntax:
    content: public System.Data.MissingMappingAction MissingMappingAction { get; set; }
    return:
      type: System.Data.MissingMappingAction
      description: "중 하나는 <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref> 값입니다. 기본값은 <xref uid=&quot;langword_csharp_Passthrough&quot; name=&quot;Passthrough&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.IDataAdapter.MissingMappingAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "설정 된 값 중 하나이 고 <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref> 값입니다."
  platform:
  - net462
- uid: System.Data.IDataAdapter.MissingSchemaAction
  id: MissingSchemaAction
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
  fullName: System.Data.IDataAdapter.MissingSchemaAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "누락 된 소스 테이블, 열 및 관계를 무시 되는 데이터 집합 스키마에 추가 또는 오류를 발생을 지정 하거나 나타냅니다."
  syntax:
    content: public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }
    return:
      type: System.Data.MissingSchemaAction
      description: "중 하나는 <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> 값입니다. 기본값은 <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.IDataAdapter.MissingSchemaAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "설정 된 값 중 하나이 고 <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> 값입니다."
  platform:
  - net462
- uid: System.Data.IDataAdapter.TableMappings
  id: TableMappings
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
  fullName: System.Data.IDataAdapter.TableMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "원본 테이블 데이터 집합 테이블에 매핑되는 방식을 나타냅니다."
  remarks: "<xref:System.Data.IDataAdapter>&quot;Table&quot; 이라는 원본 테이블에 대 한 매핑을 사용 합니다.</xref:System.Data.IDataAdapter> 모든 SELECT, INSERT, DELETE 및 UPDATE 문의 데이터를 반환 연결 해야를 사용 하 여 일관 된 열 이름을 지정 합니다. 레코드에 반환 된 열 이름은 고유 해야, 그렇지 않은 경우 열 이름이 중복 된 이전 데이터를 덮어쓰게 됩니다. <xref:System.Data.IDataAdapter.Update%2A>&quot;Table&quot; 이라는 원본 테이블에 매핑되는 테이블이 포함할 조정 하는 변경 내용을 필요 합니다.</xref:System.Data.IDataAdapter.Update%2A>"
  syntax:
    content: public System.Data.ITableMappingCollection TableMappings { get; }
    return:
      type: System.Data.ITableMappingCollection
      description: "반환 되는 레코드 사이 마스터 매핑을 제공 하는 컬렉션 및 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다. 기본값은 빈 컬렉션입니다."
  overload: System.Data.IDataAdapter.TableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: IDataAdapter.Update(DataSet)
  fullName: System.Data.IDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "삽입, 업데이트 또는 지정 된 행을 삭제할 각에 대해 INSERT, UPDATE 또는 DELETE 문을 각각 호출 <xref href=&quot;System.Data.DataSet&quot;> </xref> 에서 <xref href=&quot;System.Data.DataTable&quot;> </xref> &quot;Table&quot; 이라는 합니다."
  remarks: "응용 프로그램에서 Update 메서드를 호출 하는 경우는 <xref:System.Data.IDataAdapter>검사 하는 <xref:System.Data.DataRow.RowState%2A>속성을 반복적으로 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 구성 된 인덱스 순서에 따라 각 행에 대 한 필요한 INSERT, UPDATE 또는 DELETE 문을 실행 하 고</xref:System.Data.DataRow.RowState%2A> </xref:System.Data.IDataAdapter> 업데이트는 INSERT 문과 다른 DELETE 문이 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 의 행 순서 때문에 다음을 DELETE 문을 실행 예를 들어       이러한 문은 일괄 처리 프로세스로 수행 되지 않습니다 수 각 행은 개별적으로 업데이트 됩니다. 응용 프로그램에서 호출할 수는 <xref:System.Data.DataSet.GetChanges%2A>메서드 (예를 들어 업데이트 하기 전에 삽입) 명령문의 시퀀스를 제어 해야 하는 경우.</xref:System.Data.DataSet.GetChanges%2A> 자세한 내용은 참조 [Dataadapter로 데이터 원본 업데이트](~/add/includes/ajax-current-ext-md.md)합니다.       경우 INSERT, UPDATE 또는 DELETE 문이 지정 되지 않았습니다는 <xref:System.Data.Common.DataAdapter.Update%2A>메서드 예외를 생성 합니다.</xref:System.Data.Common.DataAdapter.Update%2A> 만들 수 있습니다는 <xref:System.Data.SqlClient.SqlCommandBuilder>또는 <xref:System.Data.OleDb.OleDbCommandBuilder>설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> 그런 다음 설정 하지 않는 추가적인 모든 SQL 문은 CommandBuilder에 의해 생성 됩니다. 이 세대 논리 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 키 열 정보를 적용. 자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다.       <xref:System.Data.Common.DataAdapter.Update%2A>메서드는 업데이트를 수행 하기 전에 첫 번째 매핑에 나열 된 테이블에서 행을 검색 합니다.</xref:System.Data.Common.DataAdapter.Update%2A> <xref:System.Data.Common.DataAdapter.Update%2A>의 값을 사용 하 여 행을 업데이트 한 다음는 <xref:System.Data.IDbCommand.UpdatedRowSource%2A>속성.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DataAdapter.Update%2A> 반환 된 추가 행은 무시 됩니다.       모든 데이터에 다시 로드 되는 <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 하는 조정 된 검사 <xref:System.Data.DataSet>행 및 모든 출력 매개 변수는 명령에서 반환 된.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> 행이 성공적으로 업데이트 한 후 해당 행에 변경 내용은 허용 됩니다.       업데이트를 사용할 경우의 실행 순서는 다음과 같습니다: 1.  값은 <xref:System.Data.DataRow>매개 변수 값으로 이동 됩니다.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  명령을 실행합니다.      4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`, 첫 번째 반환 결과 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 에 저장      5.  <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 배치 되 출력 매개 변수가 있는 경우      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>가 호출 됩니다.</xref:System.Data.DataRow.AcceptChanges%2A>       <xref:System.Data.IDataAdapter>일반적으로 이와 관련 된 매개 변수 컬렉션을 포함</xref:System.Data.IDataAdapter> 하는와 연결 된 각 명령 매개 변수를 통해 현재 행에 매핑됩니다.는 `SourceColumn` 및 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스입니다. `SourceColumn`참조 하는 <xref:System.Data.DataTable>열 하는 <xref:System.Data.IDataAdapter>현재 행에 대 한 매개 변수 값을 가져오기에 대 한 참조.</xref:System.Data.IDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`테이블 매핑이 적용 되기 전에 매핑되지 않은 열 이름을 참조 합니다. 경우 `SourceColumn` 참조 존재 하지 않는 열에는 다음 중 하나에 따라 다른 동작이 수행 <xref:System.Data.MissingMappingAction>값.</xref:System.Data.MissingMappingAction>      | 열거형 값 | 수행 작업 |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| 매핑이 없는 있는 경우에 <xref:System.Data.DataSet>원본 열 이름 및 테이블 이름을 사용 합니다. |   | `MissingMappingAction.Ignore`| A <xref:System.SystemException>생성 됩니다.</xref:System.SystemException> </xref:System.Data.DataSet> 매핑이 명시적으로 설정 된 경우, 일반적으로 입력된 매개 변수는 오류로 인해 발생에 대 한 누락 된 매핑이 있습니다. |   | `MissingMappingAction.Error`| <xref:System.SystemException>생성 됩니다. |       `SourceColumn` 속성은 또한 출력에 대 한 값에 매핑할 사용 입/출력 매개 변수를 또는 `DataSet`.</xref:System.SystemException> 존재 하지 않는 열을 참조 하는 경우 예외가 생성 됩니다.       `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스 사용 여부를 결정은 `Original`, `Current`, 또는 `Proposed` 열 값의 버전입니다. 이 기능은 낙관적 동시성 위반을 확인 하는 UPDATE 문의 WHERE 절에 원래 값을 포함 하려면 자주 사용 됩니다.      > [!NOTE] > 행을 업데이트 하는 동안 오류가 발생 하는 경우 예외가 throw 되 고 업데이트의 실행이 중단 됩니다. 설정 오류가 발생 하는 경우 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>속성을 `true` <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> 를 호출 하기 전에</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 내에서 각 행 마다 별로 오류를 선택할 수 있습니다는 `RowUpdated` DataAdapter의 이벤트입니다. 내에서 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 `RowUpdated` <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> 속성</xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 을 설정 하는 이벤트"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to <xref:System.Data.Common.DataAdapter.Update%2A> the data source. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.idataadapt_1.cs)]\n [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.idataadapt_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> 데이터 소스를 업데이트 하는 데 사용 합니다."
    return:
      type: System.Int32
      description: "성공적으로 업데이트 된 행 수는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  overload: System.Data.IDataAdapter.Update*
  exceptions:
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "INSERT, UPDATE 또는 DELETE 문을 실행 하려고 영향을 받는&0; 개 레코드에서 발생 했습니다."
  platform:
  - net462
references:
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.IDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: IDataAdapter.Fill(DataSet)
  fullName: System.Data.IDataAdapter.Fill(DataSet)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: IDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.IDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.IDataAdapter.GetFillParameters
  parent: System.Data.IDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: IDataAdapter.GetFillParameters()
  fullName: System.Data.IDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.IDataAdapter.MissingMappingAction
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
  fullName: System.Data.IDataAdapter.MissingMappingAction
- uid: System.Data.MissingMappingAction
  parent: System.Data
  isExternal: false
  name: MissingMappingAction
  nameWithType: MissingMappingAction
  fullName: System.Data.MissingMappingAction
- uid: System.Data.IDataAdapter.MissingSchemaAction
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
  fullName: System.Data.IDataAdapter.MissingSchemaAction
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.IDataAdapter.TableMappings
  parent: System.Data.IDataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
  fullName: System.Data.IDataAdapter.TableMappings
- uid: System.Data.ITableMappingCollection
  parent: System.Data
  isExternal: false
  name: ITableMappingCollection
  nameWithType: ITableMappingCollection
  fullName: System.Data.ITableMappingCollection
- uid: System.Data.IDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: IDataAdapter.Update(DataSet)
  fullName: System.Data.IDataAdapter.Update(DataSet)
- uid: System.Data.IDataAdapter.Fill*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Fill
  nameWithType: IDataAdapter.Fill
- uid: System.Data.IDataAdapter.FillSchema*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: IDataAdapter.FillSchema
- uid: System.Data.IDataAdapter.GetFillParameters*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: IDataAdapter.GetFillParameters
- uid: System.Data.IDataAdapter.MissingMappingAction*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
- uid: System.Data.IDataAdapter.MissingSchemaAction*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
- uid: System.Data.IDataAdapter.TableMappings*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
- uid: System.Data.IDataAdapter.Update*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Update
  nameWithType: IDataAdapter.Update
