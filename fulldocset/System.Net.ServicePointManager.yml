### YamlMime:ManagedReference
items:
- uid: System.Net.ServicePointManager
  id: ServicePointManager
  children:
  - System.Net.ServicePointManager.CertificatePolicy
  - System.Net.ServicePointManager.CheckCertificateRevocationList
  - System.Net.ServicePointManager.DefaultConnectionLimit
  - System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  - System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  - System.Net.ServicePointManager.DnsRefreshTimeout
  - System.Net.ServicePointManager.EnableDnsRoundRobin
  - System.Net.ServicePointManager.EncryptionPolicy
  - System.Net.ServicePointManager.Expect100Continue
  - System.Net.ServicePointManager.FindServicePoint(System.Uri)
  - System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  - System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  - System.Net.ServicePointManager.MaxServicePointIdleTime
  - System.Net.ServicePointManager.MaxServicePoints
  - System.Net.ServicePointManager.ReusePort
  - System.Net.ServicePointManager.SecurityProtocol
  - System.Net.ServicePointManager.ServerCertificateValidationCallback
  - System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  - System.Net.ServicePointManager.UseNagleAlgorithm
  langs:
  - csharp
  name: ServicePointManager
  nameWithType: ServicePointManager
  fullName: System.Net.ServicePointManager
  type: Class
  summary: "컬렉션을 관리 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체입니다."
  remarks: "ServicePointManager는 만들기, 유지 관리 및 <xref:System.Net.ServicePoint>클래스</xref:System.Net.ServicePoint> 의 인스턴스를 삭제 하는 데 사용 하는 정적 클래스       ServicePointManager 반환 ServicePointManager 개체를 통해 인터넷 리소스 식별자 URI (Uniform Resource)에 대 한 연결을 요청 하는 응용 프로그램을 <xref:System.Net.ServicePoint>호스트와 URI로 식별 되는 스키마에 대 한 연결 정보를 포함 하는 개체입니다.</xref:System.Net.ServicePoint> 기존 경우 <xref:System.Net.ServicePoint>개체에 대 한 호스트와 스키마 ServicePointManager 개체 반환 하는지 기존 <xref:System.Net.ServicePoint>개체; ServicePointManager 개체를 새로 만들고, <xref:System.Net.ServicePoint>개체입니다.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint>       .NET Framework 4.6에는 안전 하지 않은 암호화 및 해시 알고리즘에 대 한 연결을 차단 하는 새로운 보안 기능이 포함 되어 있습니다. .NET Framework 4.6을 대상으로 지정 및 HttpClient, HttpWebRequest, FTPClient, SmtpClient, SslStream 등의 Api 통해 TLS/SSL을 사용 하 여 응용 프로그램 기본적으로 보안 수준이 높은 동작을 가져옵니다.       개발자가 RC4 서비스를 지 원하는 기존 SSL3 서비스 또는 TLS와의 상호 운용성을 유지 하기 위해이 동작을 취소 하려고 할 수 있습니다. [이 문서](https://support.microsoft.com/kb/3069494) 를 새 동작을 사용할 수 없습니다. 코드를 수정 하는 방법에 설명 합니다."
  example:
  - "The following code example creates a <xref:System.Net.ServicePoint> object for connections to the URI www.contoso.com.  \n  \n [!code-cs[Classic ServicePoint Example#1](~/add/codesnippet/csharp/t-system.net.servicepoin_1.cs)]\n [!code-cpp[Classic ServicePoint Example#1](~/add/codesnippet/cpp/t-system.net.servicepoin_1.cpp)]\n [!code-vb[Classic ServicePoint Example#1](~/add/codesnippet/visualbasic/t-system.net.servicepoin_1.vb)]"
  syntax:
    content: public class ServicePointManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CertificatePolicy
  id: CertificatePolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "서버 인증서에 대 한 정책을 설정 하거나 가져옵니다."
  remarks: "CertificatePolicy 속성이로 설정 된 경우는 <xref:System.Net.ICertificatePolicy>인터페이스 개체는 <xref:System.Net.ServicePointManager>개체는 해당 인스턴스 대신 기본 인증 정책에에서 정의 된 인증 정책을 사용 합니다.</xref:System.Net.ServicePointManager> </xref:System.Net.ICertificatePolicy>       기본 인증 정책에 유효한 인증서 및 만료 된 유효한 인증서를 허용 합니다."
  example:
  - "The following code example shows how to catch a certificate policy exception for a custom certificate policy. It assumes that the certificate policy object has been defined, that the Uniform Resource Identifier (URI) for the Web resource is contained in the variable `myUri`, and that there is a method named `ProcessResponse` that performs the work of the application.  \n  \n [!code-cpp[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/cpp/p-system.net.servicepoin_14_1.cpp)]\n [!code-cs[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/csharp/p-system.net.servicepoin_14_1.cs)]\n [!code-vb[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_14_1.vb)]"
  syntax:
    content: public static System.Net.ICertificatePolicy CertificatePolicy { get; set; }
    return:
      type: System.Net.ICertificatePolicy
      description: "구현 하는 개체는 <xref href=&quot;System.Net.ICertificatePolicy&quot;> </xref> 인터페이스입니다."
  overload: System.Net.ServicePointManager.CertificatePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  id: CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져오거나는 <xref:System.Boolean>인증서 인증 기관의 해지 목록을 검사할지 여부를 나타내는 값입니다.</xref:System.Boolean>"
  remarks: "CheckCertificateRevocationList 다음과 같은 경우 `true`, 인증서가 인증서 유효성 검사 프로세스의 일부로 인증 기관의 해지 목록을 검사 합니다. 기본값은 `false`합니다."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_13_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_13_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_13_1.cs)]"
  syntax:
    content: public static bool CheckCertificateRevocationList { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>인증서 해지 목록을 확인 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.ServicePointManager.CheckCertificateRevocationList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  id: DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "허용 하는 동시 연결의 최대 수를 가져오거나 설정 합니다.는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체입니다."
  remarks: "DefaultConnectionLimit 속성 기본 최대 동시 연결 수는 설정는 <xref:System.Net.ServicePointManager>개체에 할당 된 <xref:System.Net.ServicePoint.ConnectionLimit%2A>속성을 만들 때 <xref:System.Net.ServicePoint>개체.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.ConnectionLimit%2A> </xref:System.Net.ServicePointManager>       기존에 영향을 주지 DefaultConnectionLimit 속성을 변경 <xref:System.Net.ServicePoint>개체이 고,만 영향을 줍니다 <xref:System.Net.ServicePoint>변경 후 초기화 하는 개체입니다.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> 이 속성의 값에 직접 또는 구성을 통해 설정 되지, 기본적으로 값은 상수로 <xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>.</xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>      > [!NOTE] > DefaultConnectionLimit 속성을 변경한 HTTP 1.0 및 HTTP 1.1 연결 모두에 영향을 줍니다. 개별적으로 HTTP 1.0 및 HTTP 1.1 프로토콜에 대 한 연결 제한을 변경 하는 것이 불가능 합니다. 환경에서 사용할 경우는 서버 (ASP.NET) 연결을 높은 숫자로 DefaultConnectionLimit 기본값은 10입니다."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_8_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_8_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_8_1.cs)]"
  syntax:
    content: public static int DefaultConnectionLimit { get; set; }
    return:
      type: System.Int32
      description: "허용 하는 동시 연결의 최대 수는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체입니다. 기본값은 2입니다. 자동 구성 속성이로 설정 된 경우 구성 파일을 통해이 속성의 값을 변경할 수 없는 앱이 ASP.NET 호스트로 실행 되는 경우 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다. 그러나 값 변경할 수 있습니다는 프로그래밍 방식으로 자동 구성 속성이 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다. AppDomain이 로드 하는 경우 원하는 값을 한 번 설정 합니다."
  overload: System.Net.ServicePointManager.DefaultConnectionLimit*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "DefaultConnectionLimit 보다 작거나 0입니다."
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  id: DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "에 허용 된 비 영구적인 연결 (4)의 기본 수는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체가 HTTP/1.0 이상의 서버에 연결 합니다. 이 필드는 상수 이지만.NET Framework 2.0에서 사용 되지 않습니다."
  syntax:
    content: public const int DefaultNonPersistentConnectionLimit = 4;
    return:
      type: System.Int32
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  id: DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "에 허용 된 영구 연결 (2)의 기본 수는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체가 HTTP/1.1 이상의 서버에 연결 합니다. 이 필드는 상수 이며 초기화 하는 데 사용 되는 <> </> *> 속성 경우의 값은 <> </> *> 속성이 직접 또는 구성을 통해 설정 되지 않았습니다."
  remarks: ''
  example:
  - "The following code example sets the <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> property using this field.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/f-system.net.servicepoin_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/f-system.net.servicepoin_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/f-system.net.servicepoin_1.cs)]"
  syntax:
    content: public const int DefaultPersistentConnectionLimit = 2;
    return:
      type: System.Int32
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  id: DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "기간을 서비스 DNS (Domain Name) 해상도 유효한 것으로 간주를 나타내는 값을 가져오거나 설정 합니다."
  remarks: ''
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_21_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_21_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_21_1.cs)]"
  syntax:
    content: public static int DnsRefreshTimeout { get; set; }
    return:
      type: System.Int32
      description: "제한 시간 값 (밀리초)에서입니다. 값이-1 시간을 제한이 없음을 나타냅니다. 기본값은 120, 000 밀리초 (2 분)입니다."
  overload: System.Net.ServicePointManager.DnsRefreshTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  id: EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "도메인 이름 서비스 (DNS) 확인 적절 한 IP (인터넷 프로토콜) 주소 사이에서 순환 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "여러 개의 IP 주소가 호스트 이름과 관련 된 경우 DNS 확인 시 일반적으로 첫 번째 IP 주소만을 반환 합니다. 이 속성을 설정 하는 경우 `true`, 후속 DNS 확인은 특정 호스트에 대 한 모든 사용 가능한 IP 주소가 순환 합니다. 이 옵션은 서비스 DNS를 사용 하 여 부하 분산 서버 또는 서버 클러스터 간의 메커니즘으로 하는 경우에 유용 합니다."
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_17_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_17_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_17_1.cs)]"
  syntax:
    content: public static bool EnableDnsRoundRobin { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>DNS 확인 항상 특정 호스트에 대 한 첫 번째 IP 주소를 반환 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.ServicePointManager.EnableDnsRoundRobin*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EncryptionPolicy
  id: EncryptionPolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져옵니다는 <xref href=&quot;System.Net.Security.EncryptionPolicy&quot;> </xref> 이 <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> 인스턴스."
  remarks: "<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> EncryptionPolicy 속성의 기본값 구성 파일에는 값을 지정 하지 않으면, 이 SSL/TLS 세션에 적용 되는이 <xref:System.Net.ServicePointManager>인스턴스.</xref:System.Net.ServicePointManager>       Null 암호화 사용은 암호화 정책을 <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> 로 설정 된 경우에 필요"
  syntax:
    content: public static System.Net.Security.EncryptionPolicy EncryptionPolicy { get; }
    return:
      type: System.Net.Security.EncryptionPolicy
      description: "이 작업에 사용할 암호화 정책 <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> 인스턴스."
  overload: System.Net.ServicePointManager.EncryptionPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.Expect100Continue
  id: Expect100Continue
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "가져오거나는 <xref:System.Boolean>여부를 결정 하는 값-계속 동작이 사용 됩니다.</xref:System.Boolean>"
  remarks: "이 속성이로 설정 된 경우 `true`, 100-계속 동작이 사용 됩니다. 클라이언트에서 사용 하는 요청은 `PUT` 및 `POST` 메서드는 Expect 헤더를에 추가 요청 Expect100Continue 속성은 `true` 및 <xref:System.Net.HttpWebRequest.ContentLength%2A>속성은&0; 보다 큰 또는 <xref:System.Net.HttpWebRequest.SendChunked%2A>속성이 true 이면.</xref:System.Net.HttpWebRequest.SendChunked%2A> </xref:System.Net.HttpWebRequest.ContentLength%2A> 클라이언트는을 받게 것을 예상-클라이언트를 게시 데이터를 전송 하도록 나타내려면 서버 로부터 응답을 계속 합니다. 이 메커니즘은 요청 헤더에 따라 서버에서 요청을 거부 하려고 할 때 네트워크를 통해 많은 양의 데이터를 보내지 못하게 하는 클라이언트 수 있습니다.       예를 들어, Expect100Continue 속성은 `false`합니다. 서버에 요청을 보내면 데이터를 포함 합니다. 요청 헤더를 읽은 후 서버 인증이 필요 하 고 401 응답을 보내야 합니다, 하는 경우 클라이언트가 적절 한 인증 헤더를 사용 하 여 데이터 다시 보내야 합니다.       이 속성이 `true`, 요청 헤더에는 서버에 보내집니다. 서버가 요청을 거부 했습니다, 100 보냅니다-계속 응답 신호를 보내는 데이터를 전송할 수 있습니다. 앞의 예제에서와 같이 서버 인증이 필요한 경우 401 응답을 보냅니다 및 클라이언트에 데이터를 불필요 하 게 전송 되지 않습니다.       이 속성의 값을 변경 해도 기존 <xref:System.Net.ServicePoint>개체입니다.</xref:System.Net.ServicePoint> 새로운만 <xref:System.Net.ServicePoint>변경 이후 생성 되는 개체에 영향을.</xref:System.Net.ServicePoint>       100-동작이 속성을 설정 하는 경우에 하지 HTTP 1.0 요청에 사용 되므로 계속 `true`합니다.       Expect 100-계속 동작을 완전히 10.1.1 IETF RFC 2616 섹션에서 설명 합니다."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_12_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_12_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_12_1.cs)]"
  syntax:
    content: public static bool Expect100Continue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>100을 사용 하도록 설정 하려면-n u e 동작 합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.ServicePointManager.Expect100Continue*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  id: FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "기존 찾습니다 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 또는 개체를 새로 만들고 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 지정 된 통신을 관리 하는 개체 <xref:System.Uri>개체입니다.</xref:System.Uri>"
  remarks: "FindServicePoint 메서드는 반환 된 <xref:System.Net.ServicePoint>지정 된 인터넷 호스트 이름과 관련 된 개체입니다.</xref:System.Net.ServicePoint> 없는 경우 <xref:System.Net.ServicePoint>개체가 해당 호스트에 대해는 <xref:System.Net.ServicePointManager>개체 하나를 만듭니다.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: "<xref:System.Uri>연결할 인터넷 리소스의 개체입니다.</xref:System.Uri>"
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref> 요청에 대 한 통신을 관리 하는 개체입니다."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "최대 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 에 정의 된 개체 <xref:System.Net.ServicePointManager.MaxServicePoints*>에 도달 했습니다.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  id: FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "기존 찾습니다 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 또는 개체를 새로 만들고 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체와는 지정 된 식별자 URI (Uniform Resource)의 통신을 관리 합니다."
  remarks: "<xref:System.Net.ServicePointManager.FindServicePoint%2A>메서드가 반환 되는 <xref:System.Net.ServicePoint>지정 된 인터넷 호스트 이름과 관련 된 개체입니다.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.FindServicePoint%2A> 없는 경우 <xref:System.Net.ServicePoint>개체가 해당 호스트에 대해는 <xref:System.Net.ServicePointManager>개체 하나를 만듭니다.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example demonstrates calling this method to access a <xref:System.Net.ServicePoint> object.  \n  \n [!code-cpp[System.Net.ServicePoint#7](~/add/codesnippet/cpp/2fec5056-1106-4a0b-b9b3-_1.cpp)]\n [!code-vb[System.Net.ServicePoint#7](~/add/codesnippet/visualbasic/2fec5056-1106-4a0b-b9b3-_1.vb)]\n [!code-cs[System.Net.ServicePoint#7](~/add/codesnippet/csharp/2fec5056-1106-4a0b-b9b3-_1.cs)]"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (string uriString, System.Net.IWebProxy proxy);
    parameters:
    - id: uriString
      type: System.String
      description: "연결할 인터넷 리소스의 URI입니다."
    - id: proxy
      type: System.Net.IWebProxy
      description: "이 요청에 대 한 프록시 데이터입니다."
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref> 요청에 대 한 통신을 관리 하는 개체입니다."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "URI에 지정 된 <code> uriString </code> 올바르지 않습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "최대 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 에 정의 된 개체 <xref:System.Net.ServicePointManager.MaxServicePoints*>에 도달 했습니다.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  id: FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "기존 찾습니다 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 또는 개체를 새로 만들고 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 지정 된 통신을 관리 하는 개체 <xref:System.Uri>개체입니다.</xref:System.Uri>"
  remarks: "<xref:System.Net.ServicePointManager.FindServicePoint%2A>메서드가 반환 되는 <xref:System.Net.ServicePoint>지정 된 인터넷 호스트 이름과 관련 된 개체입니다.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.FindServicePoint%2A> 없는 경우 <xref:System.Net.ServicePoint>개체가 해당 호스트에 대해는 <xref:System.Net.ServicePointManager>개체 하나를 만듭니다.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address, System.Net.IWebProxy proxy);
    parameters:
    - id: address
      type: System.Uri
      description: "A <xref:System.Uri>연결할 인터넷 리소스의 주소를 포함 하는 개체입니다.</xref:System.Uri>"
    - id: proxy
      type: System.Net.IWebProxy
      description: "이 요청에 대 한 프록시 데이터입니다."
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref> 요청에 대 한 통신을 관리 하는 개체입니다."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "최대 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 에 정의 된 개체 <xref:System.Net.ServicePointManager.MaxServicePoints*>에 도달 했습니다.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  id: MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "최대 유휴 시간을 가져오거나 설정 합니다.는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체입니다."
  remarks: "MaxServicePointIdleTime 속성 집합의 최대 유휴 시간은 <xref:System.Net.ServicePointManager>개체에 할당 된 <xref:System.Net.ServicePoint.MaxIdleTime%2A>속성을 만들 때 <xref:System.Net.ServicePoint>개체.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePointManager> 이 값에 대 한 변경에만 영향을 <xref:System.Net.ServicePoint>값이 변경 후 초기화 하는 개체입니다.</xref:System.Net.ServicePoint>       후는 <xref:System.Net.ServicePoint>개체에 지정 된 시간 동안 유휴 상태가 되었습니다 <xref:System.Net.ServicePoint.MaxIdleTime%2A>, 가비지 수집의 대상이 됩니다.</xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePoint> A <xref:System.Net.ServicePoint>개체는 유휴 연결 목록에 연결 된 경우는 <xref:System.Net.ServicePoint>개체가 비어 있습니다.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_5_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_5_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_5_1.cs)]"
  syntax:
    content: public static int MaxServicePointIdleTime { get; set; }
    return:
      type: System.Int32
      description: "최대 유휴 시간을 밀리초 단위로는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체입니다. 기본값은 100, 000 밀리초 (100 초)입니다."
  overload: System.Net.ServicePointManager.MaxServicePointIdleTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePointIdleTime는 보다 작은 &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; 보다 큰 &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;합니다."
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePoints
  id: MaxServicePoints
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "최대 수를 가져오거나 설정 합니다. <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 언제 든 지 유지 관리 하는 개체입니다."
  remarks: "수 아래 MaxServicePoints 속성 줄일 때 <xref:System.Net.ServicePoint>의 현재 개체는 <xref:System.Net.ServicePointManager>삭제는 <xref:System.Net.ServicePoint>유휴 시간이 가장 긴를 사용 하 여 개체.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint> 경우 수가 <xref:System.Net.ServicePoint>활성 연결을 사용 하 여 개체 MaxServicePoints의 값 보다 크면는 <xref:System.Net.ServicePointManager>삭제 개체의 <xref:System.Net.ServicePoint>유휴 상태가 될 때 개체.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_10_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_10_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_10_1.cs)]"
  syntax:
    content: public static int MaxServicePoints { get; set; }
    return:
      type: System.Int32
      description: "최대 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체를 유지 관리 합니다. 기본값은 0의 수에 제한이 없음을 의미 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 개체입니다."
  overload: System.Net.ServicePointManager.MaxServicePoints*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePoints가 0 보다 작거나 보다 큰 &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;합니다."
  platform:
  - net462
- uid: System.Net.ServicePointManager.ReusePort
  id: ReusePort
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "이 속성 값을 설정 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 소켓에 네이티브 소켓 옵션 SO_REUSE_UNICASTPORT를 사용 하려면 HttpWebRequest의 모든 아웃 바운드 TCP 연결 하면 됩니다. 이렇게 하면 기본 송신 포트를 공유할 수 있습니다. 많은 수의 보내는 연결 포트가 앱 위험과 짧은 시간에 수행 되는 시나리오에 유용 합니다."
  remarks: "기본값은 `false`입니다."
  syntax:
    content: public static bool ReusePort { get; set; }
    return:
      type: System.Boolean
      description: "<xref:System.Boolean>입니다.</xref:System.Boolean> 반환"
  overload: System.Net.ServicePointManager.ReusePort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SecurityProtocol
  id: SecurityProtocol
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "사용 하는 보안 프로토콜을 가져오거나 설정 합니다.는 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> 하 여 관리 되는 개체는 <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> 개체입니다."
  remarks: "이 속성에만 사용 합니다; Secure Hypertext Transfer Protocol (HTTPS) 체계를 사용 하는 새 연결에 사용 하려면 Secure Sockets Layer (SSL) 또는 보안 TLS (전송 계층) 프로토콜의 버전을 선택 기존 연결은 변경 되지 않습니다.       기본값이 사용 되지 않는이 속성에 대해 의도적으로 나열 되어 있는지 확인 합니다. 보안 계획 지속적으로 변경 하 고 기본 프로토콜 및 보호 수준이 알려진된 약점을 방지 하기 위해 시간이 지남에 따라 변경 됩니다. 기본값은 개별 컴퓨터 구성에 따라 달라 집니다 및 패치가 적용 되었는지에 소프트웨어를 설치 하 고 있습니다.       코드 또는 특정 보호 수준을 사용 하 여 보안 수준을 기본적으로 사용 되는 가정에 종속 되지 암시적으로 되어야 합니다. 특정 보안 수준 사용할에 종속 되는 앱에 해당 수준을 명시적으로 지정 하 고에 설정 된 연결에서 사용 중인 실제로 인지 있는지 확인 해야 합니다. 또한 프로토콜은 지원 되는 변경에 관계 없이 강력해 하도록 코드를 디자인 해야, 따라서 자주 변경 거의 미리 확인할 수 있는 새로운 위협 완화 하기 위해.       .NET Framework 4.6에는 안전 하지 않은 암호화 및 해시 알고리즘에 대 한 연결을 차단 하는 새로운 보안 기능이 포함 되어 있습니다. .NET Framework 4.6을 대상으로 지정 및 HttpClient, HttpWebRequest, FTPClient, SmtpClient, SslStream 등의 Api 통해 TLS/SSL을 사용 하 여 응용 프로그램 기본적으로 보안 수준이 높은 동작을 가져옵니다.       개발자가 RC4 서비스를 지 원하는 기존 SSL3 서비스 또는 TLS와의 상호 운용성을 유지 하기 위해이 동작을 취소 하려고 할 수 있습니다. [이 문서](https://support.microsoft.com/kb/3069494) 를 새 동작을 사용할 수 없습니다. 코드를 수정 하는 방법에 설명 합니다."
  syntax:
    content: public static System.Net.SecurityProtocolType SecurityProtocol { get; set; }
    return:
      type: System.Net.SecurityProtocolType
      description: "에 정의 된 값 중 하나는 <xref href=&quot;System.Net.SecurityProtocolType&quot;> </xref> 열거 합니다."
  overload: System.Net.ServicePointManager.SecurityProtocol*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "속성을 설정할 지정 된 값이 유효한 <xref href=&quot;System.Net.SecurityProtocolType&quot;> </xref> 열거형 값입니다."
  platform:
  - net462
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  id: ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "서버 인증서 유효성 검사 콜백을 가져오거나 설정 합니다."
  remarks: "응용 프로그램 서버 인증서의 클라이언트에서 사용자 지정 유효성 검사를 사용 하는 메서드에 ServerCertificateValidationCallback 속성을 설정할 수 있습니다. 사용자 지정 유효성 검사를 수행 하는 경우는 `sender` 에 전달 된 매개 변수는 <xref:System.Net.Security.RemoteCertificateValidationCallback>호스트 문자열 이름이 될 수 있습니다 또는 개체에서 파생 된 <xref:System.Net.WebRequest>(<xref:System.Net.HttpWebRequest>예를 들면)에 따라는 <xref:System.Net.ServicePointManager.CertificatePolicy%2A>속성.</xref:System.Net.ServicePointManager.CertificatePolicy%2A> </xref:System.Net.HttpWebRequest> </xref:System.Net.WebRequest> </xref:System.Net.Security.RemoteCertificateValidationCallback>       사용자 지정 유효성 검사를 사용 하지 않는 경우 인증서 이름은 요청을 만드는 사용 되는 호스트 이름 비교 합니다. 예를 들어 경우 <xref:System.Net.WebRequest.Create%28System.String%29>매개 변수가 전달 되었습니다 &quot;https://www.contoso.com/default.hmtl&quot;의 기본 동작은 www.contoso.com에 대 한 인증서를 확인 하기 위해 클라이언트에 대 한.</xref:System.Net.WebRequest.Create%28System.String%29>"
  syntax:
    content: public static System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
    return:
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref>. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  id: SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "TCP 연결에서 연결 유지 옵션을 사용 하지 않도록 설정 하거나 사용 합니다."
  remarks: "TCP/IP 공급자 TCP 연결에서 연결 유지 패킷이을 사용할 수 있도록 하는 응용 프로그램 요청할 수 있습니다. 기본값은 TCP 연결에서 연결 유지 패킷이 사용 불가능 합니다.       TCP 소켓을 경우의 기본 설정은 2 시간 설정에서 연결 유지 시간 제한 및 연결 유지 간격을 1 초로 초기화 합니다. `keepAliveTime` 매개 변수는 첫 번째 연결 유지 패킷이 전송 될 때까지 아무런 작업도 밀리초 단위로 제한 시간을 지정 합니다. `keepAliveInterval` 매개 변수는 간격을 밀리초 단위로 지정 사이 승인을 받지 못할 경우 연속 연결 유지 패킷이 전송 됩니다. 연결 유지 프로브 수를 변경할 수 없습니다 및 10으로 설정 됩니다.       연결 유지의 결과로 TCP 연결이 끊어지면는 <xref:System.Net.Sockets.SocketError>의 <xref:System.Net.Sockets.SocketError>소켓에서 진행 중인 모든 호출에 반환 된 이후의 모든 호출 실패는 <xref:System.Net.Sockets.SocketError> <xref:System.Net.Sockets.SocketError>안내 하십시오.</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> 하 고</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public static void SetTcpKeepAlive (bool enabled, int keepAliveTime, int keepAliveInterval);
    parameters:
    - id: enabled
      type: System.Boolean
      description: "지정 된를 사용 하 여 활성화할 수 있는 다음 TCP 연결 유지 옵션 TCP 연결에서 true로 설정 됩니다 `keepAliveTime` 및 `keepAliveInterval` 값입니다.       False로 설정 된 다음는 TCP 연결 유지 옵션을 해제 하 고 나머지 매개 변수는 무시 됩니다.       기본값은 false입니다."
    - id: keepAliveTime
      type: System.Int32
      description: "첫 번째 연결 유지 패킷이 전송 될 때까지 아무런 작업도 밀리초 단위로 제한 시간을 지정 합니다.       값은 0 보다 커야 합니다.  0 보다 작거나 같은 값이 전달 되는 경우는 <xref:System.ArgumentOutOfRangeException>throw 됩니다.</xref:System.ArgumentOutOfRangeException>"
    - id: keepAliveInterval
      type: System.Int32
      description: "승인을 받지 못할 경우 후속 연결 유지 패킷이 전송 되 사이의 간격을 밀리초 단위로 지정 합니다.       값은 0 보다 커야 합니다.  0 보다 작거나 같은 값이 전달 되는 경우는 <xref:System.ArgumentOutOfRangeException>throw 됩니다.</xref:System.ArgumentOutOfRangeException>"
  overload: System.Net.ServicePointManager.SetTcpKeepAlive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "에 지정 된 값 <code> keepAliveTime </code> 또는 <code> keepAliveInterval </code> 매개 변수는 0 보다 작습니다."
  platform:
  - net462
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  id: UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "이 관리 하는 서비스 지점 Nagle 알고리즘을 사용할지 결정 <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> 개체입니다."
  remarks: "Nagle 알고리즘은 작은 데이터 패킷을 버퍼링 하 고 단일 패킷으로 전송 하 여 네트워크 트래픽을 줄이기 위해 사용 됩니다. 이 과정을 &quot;nagling&quot;; &quot;이 라고도 전송 된 패킷 수가 감소 하므로 널리 사용 됩니다 하 고 패킷 당 오버 헤드를 낮춥니다.       이 속성의 값을 변경 해도 기존 <xref:System.Net.ServicePoint>개체입니다.</xref:System.Net.ServicePoint> 새 서비스 지점만 변경 이후 생성에 영향을 받습니다.       Nagle 알고리즘 IETF RFC 896 완벽 하 게 설명 합니다."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_20_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_20_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_20_1.cs)]"
  syntax:
    content: public static bool UseNagleAlgorithm { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Nagle 알고리즘을 사용 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.ServicePointManager.UseNagleAlgorithm*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Net.ServicePointManager.CertificatePolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
- uid: System.Net.ICertificatePolicy
  parent: System.Net
  isExternal: false
  name: ICertificatePolicy
  nameWithType: ICertificatePolicy
  fullName: System.Net.ICertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
- uid: System.Net.Security.EncryptionPolicy
  parent: System.Net.Security
  isExternal: false
  name: EncryptionPolicy
  nameWithType: EncryptionPolicy
  fullName: System.Net.Security.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
- uid: System.Net.ServicePoint
  parent: System.Net
  isExternal: false
  name: ServicePoint
  nameWithType: ServicePoint
  fullName: System.Net.ServicePoint
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.IWebProxy
  parent: System.Net
  isExternal: true
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
- uid: System.Net.SecurityProtocolType
  parent: System.Net
  isExternal: false
  name: SecurityProtocolType
  nameWithType: SecurityProtocolType
  fullName: System.Net.SecurityProtocolType
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
- uid: System.Net.ServicePointManager.CertificatePolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
- uid: System.Net.ServicePointManager.DefaultConnectionLimit*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint
  nameWithType: ServicePointManager.FindServicePoint
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive
  nameWithType: ServicePointManager.SetTcpKeepAlive
- uid: System.Net.ServicePointManager.UseNagleAlgorithm*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
