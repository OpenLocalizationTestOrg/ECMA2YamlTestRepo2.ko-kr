### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser
  id: TextFieldParser
  children:
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Close
  - Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
  - Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize
  - Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
  - Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
  - Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd
  - Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])
  - Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])
  - Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
  - Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
  langs:
  - csharp
  name: TextFieldParser
  nameWithType: TextFieldParser
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser
  type: Class
  summary: "구조화 된 텍스트를 구문 분석을 위한 메서드 및 속성을 제공 파일입니다."
  remarks: "`TextFieldParser` 구조화 된 텍스트 파일 구문 분석에 대 한 속성 및 메서드를 제공 하는 개체입니다. 텍스트 파일을 구문 분석의 `TextFieldParser` 텍스트 파일을 반복 하는 것과 비슷합니다 동안는 `ReadFields` 텍스트의 필드를 추출 하는 메서드는 문자열을 분할 합니다.       `TextFieldParser` 두 유형의 파일을 구문 분석할 수 있습니다: 구분 또는 고정 너비입니다. 일부 속성와 같은 `Delimiters` 및 `HasFieldsEnclosedInQuotes` 는 의미가 동안 구분 기호로 분리 된 파일을 사용 하는 경우는 `FieldWidths` 속성은 고정 너비 파일을 사용 하는 경우에 의미가 있습니다.       다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `Microsoft.VisualBasic.FileIO.TextFieldParser` 개체입니다.      | | 참조 |   |--------|---------|   | 구분 기호로 분리 된 텍스트 파일에서 읽기 | [하는 방법: 쉼표로 구분 된 텍스트 파일에서 읽은](~/add/includes/ajax-current-ext-md.md)|   | 고정 너비 텍스트 파일에서 읽기 | [하는 방법: 고정 너비 텍스트 파일에서 읽은](~/add/includes/ajax-current-ext-md.md)|   | 여러 형식의 텍스트 파일에서 읽기 | [하는 방법: 여러 형식의 텍스트 파일에서 읽기](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example parses through a tab-delimited text file, `Bigfile`.  \n  \n [!code-vb[VbVbalrTextFieldParser#17](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._9_1.vb)]"
  syntax:
    content: 'public class TextFieldParser : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(Stream)
  nameWithType: TextFieldParser.TextFieldParser(Stream)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "새 인스턴스를 초기화는 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref> 클래스입니다."
  remarks: "새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `stream` 매개 변수입니다."
  syntax:
    content: public TextFieldParser (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>.</xref:System.IO.Stream> 구문 분석할 수 있는 스트림."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>읽을 수 없습니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)
  id: '#ctor(System.IO.TextReader)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(TextReader)
  nameWithType: TextFieldParser.TextFieldParser(TextReader)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(TextReader)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "새 인스턴스를 초기화는 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref> 클래스입니다."
  remarks: "새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `reader` 매개 변수입니다."
  syntax:
    content: public TextFieldParser (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "<xref:System.IO.TextReader>.</xref:System.IO.TextReader> <xref:System.IO.TextReader>스트림 구문 분석할 수 있습니다.</xref:System.IO.TextReader>"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(String)
  nameWithType: TextFieldParser.TextFieldParser(String)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "새 인스턴스를 초기화는 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref> 클래스입니다."
  remarks: "새 `TextFieldParser` 로 지정 된 파일을 구문 분석 하는 개체는 `path` 매개 변수입니다."
  syntax:
    content: public TextFieldParser (string path);
    parameters:
    - id: path
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 구문 분석 될 파일의 전체 경로입니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>빈 문자열입니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)
  id: '#ctor(System.IO.Stream,System.Text.Encoding)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(Stream,Encoding)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "새 인스턴스를 초기화는 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref> 클래스입니다."
  remarks: "새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `stream` 매개 변수입니다.      > [!CAUTION] > 문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색은 해석할 수 없어 문자와를 throw 하면 예외가 발생 합니다."
  syntax:
    content: public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>.</xref:System.IO.Stream> 구문 분석할 수 있는 스트림."
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> 문자 인코딩을 사용 하도록 인코딩 파일에서 결정 되지 않습니다. 기본값은 <xref:System.Text.Encoding.UTF8*>.</xref:System.Text.Encoding.UTF8*>"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>or <code>defaultEncoding</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>읽을 수 없습니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)
  id: '#ctor(System.String,System.Text.Encoding)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(String,Encoding)
  nameWithType: TextFieldParser.TextFieldParser(String,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String,Encoding)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "새 인스턴스를 초기화는 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref> 클래스입니다."
  remarks: "새 `TextFieldParser` 로 지정 된 파일을 구문 분석 하는 개체는 `path` 매개 변수입니다.      > [!CAUTION] > 문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색은 해석할 수 없어 문자와를 throw 하면 예외가 발생 합니다."
  syntax:
    content: public TextFieldParser (string path, System.Text.Encoding defaultEncoding);
    parameters:
    - id: path
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 구문 분석 될 파일의 전체 경로입니다."
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> 문자 인코딩을 사용 하도록 인코딩 파일에서 결정 되지 않습니다. 기본값은 <xref:System.Text.Encoding.UTF8*>.</xref:System.Text.Encoding.UTF8*>"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>빈 문자열 또는 <code>defaultEncoding</code> 은 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(Stream,Encoding,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding,Boolean)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "새 인스턴스를 초기화는 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref> 클래스입니다."
  remarks: "새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `stream` 매개 변수입니다.       경우는 `detectEncoding` 매개 변수는 `True`를이 생성자의 파일 또는 스트림의 처음 세 바이트 확인 하 여 인코딩 검색을 시도 합니다. 자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일 적절 한 바이트 순서 표시로 시작 합니다. 그렇지 않으면 하 여 지정 된 인코딩을 `defaultEncoding` 사용 됩니다.      > [!CAUTION] > 문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색은 해석할 수 없어 문자와를 throw 하면 예외가 발생 합니다."
  syntax:
    content: public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>.</xref:System.IO.Stream> 구문 분석할 수 있는 스트림."
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> 문자 인코딩을 사용 하도록 인코딩 파일에서 결정 되지 않습니다. 기본값은 <xref:System.Text.Encoding.UTF8*>.</xref:System.Text.Encoding.UTF8*>"
    - id: detectEncoding
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. 파일의 시작 부분에서 바이트 순서 표시에 대 한 확인 여부를 나타냅니다. 기본값은 <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>or <code>defaultEncoding</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>읽을 수 없습니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)
  id: '#ctor(System.String,System.Text.Encoding,System.Boolean)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(String,Encoding,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(String,Encoding,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String,Encoding,Boolean)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "새 인스턴스를 초기화는 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref> 클래스입니다."
  remarks: "새 `TextFieldParser` 로 지정 된 파일을 구문 분석 하는 개체는 `path` 매개 변수입니다.       경우는 `detectEncoding` 매개 변수는 `True`를이 생성자의 파일 또는 스트림의 처음 세 바이트 확인 하 여 인코딩 검색을 시도 합니다. 자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일 적절 한 바이트 순서 표시로 시작 합니다. 그렇지 않으면 하 여 지정 된 인코딩을 `defaultEncoding` 사용 됩니다.      > [!CAUTION] > 문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색은 해석할 수 없어 문자와를 throw 하면 예외가 발생 합니다."
  syntax:
    content: public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);
    parameters:
    - id: path
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 구문 분석 될 파일의 전체 경로입니다."
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> 문자 인코딩을 사용 하도록 인코딩 파일에서 결정 되지 않습니다. 기본값은 <xref:System.Text.Encoding.UTF8*>.</xref:System.Text.Encoding.UTF8*>"
    - id: detectEncoding
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. 파일의 시작 부분에서 바이트 순서 표시에 대 한 확인 여부를 나타냅니다. 기본값은 <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>빈 문자열 또는 <code>defaultEncoding</code> 은 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(Stream,Encoding,Boolean,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding,Boolean,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding,Boolean,Boolean)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "새 인스턴스를 초기화는 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref> 클래스입니다."
  remarks: "새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `stream` 매개 변수입니다.       경우는 `detectEncoding` 매개 변수는 `True`를이 생성자의 파일 또는 스트림의 처음 세 바이트 확인 하 여 인코딩 검색을 시도 합니다. 자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일 적절 한 바이트 순서 표시로 시작 합니다. 그렇지 않으면 하 여 지정 된 인코딩을 `defaultEncoding` 사용 됩니다.      > [!CAUTION] > 문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색은 해석할 수 없어 문자와를 throw 하면 예외가 발생 합니다."
  syntax:
    content: public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>.</xref:System.IO.Stream> 구문 분석할 수 있는 스트림."
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> 문자 인코딩을 사용 하도록 인코딩 파일에서 결정 되지 않습니다. 기본값은 <xref:System.Text.Encoding.UTF8*>.</xref:System.Text.Encoding.UTF8*>"
    - id: detectEncoding
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. 파일의 시작 부분에서 바이트 순서 표시에 대 한 확인 여부를 나타냅니다. 기본값은 <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>합니다."
    - id: leaveOpen
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. 상태로 둘지 여부를 나타내는 `stream` 시 열려는 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref> 개체가 닫혀 있습니다. 기본값은 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>or <code>defaultEncoding</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>읽을 수 없습니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Close
  id: Close
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Close()
  nameWithType: TextFieldParser.Close()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Close()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "현재 닫습니다 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref> 개체입니다."
  remarks: ''
  example:
  - "This example closes the `TextFieldParser``FileReader`.  \n  \n [!code-vb[VbVbalrTextFieldParser#14](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._27_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Close*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
  id: CommentTokens
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: CommentTokens
  nameWithType: TextFieldParser.CommentTokens
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "주석 토큰을 정의합니다. 주석 토큰은 문자열, 하는 줄의 시작 부분에 놓으면 나타냅니다 줄 주석 이므로 파서에서 무시 해야 합니다."
  remarks: "고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 **모든** 탭 합니다.       길이가&0; 인 주석 토큰은 무시 됩니다."
  example:
  - "This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.  \n  \n [!code-vb[VbVbalrTextFieldParser#5](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._69_1.vb)]"
  syntax:
    content: public string[] CommentTokens { get; set; }
    return:
      type: System.String[]
      description: "모든 메모를 포함 하는 문자열 배열에 대 한 토큰의 <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref> 개체입니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "주석 토큰에 공백이 포함 되어 있습니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
  id: Delimiters
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Delimiters
  nameWithType: TextFieldParser.Delimiters
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "텍스트 파일에 대 한 구분 기호를 정의합니다."
  remarks: "이 속성은 의미 있는 경우에만 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>속성이 `FieldType.Delimited`.</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>       텍스트 파일을 구현에 대 한 구분 기호를 정의 고 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A>메서드.</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A>       다음 표에서 관련 된 작업의 예는 `Delimiters` 속성입니다.      | | 참조 |   |--------|---------|   | 구분 기호로 분리 된 텍스트 파일에서 읽기 | [하는 방법: 쉼표로 구분 된 텍스트 파일에서 읽기](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).  \n  \n [!code-vb[VbVbalrTextFieldParser#9](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._88_1.vb)]"
  syntax:
    content: public string[] Delimiters { get; set; }
    return:
      type: System.String[]
      description: "모든의 필드 구분 기호를 포함 하는 문자열 배열에서 <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref> 개체입니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "구분 기호 값이 빈 문자열인 경우 줄 바꿈 문자인 설정 또는 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose
  id: Dispose
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Dispose()
  nameWithType: TextFieldParser.Dispose()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "사용 하는 리소스를 해제는 <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref> 개체입니다."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: TextFieldParser.Dispose(Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "사용 하는 리소스를 해제는 <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref> 개체입니다."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "부울 값입니다. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>리소스 관리와 관리 되지 않는 리소스를 해제합니다. <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스만 해제 합니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
  id: EndOfData
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: EndOfData
  nameWithType: TextFieldParser.EndOfData
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "반환 <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> 주석이 없는 줄 현재 커서 위치와 파일의 끝 사이 공백이 없을 경우."
  remarks: "이 속성을 읽고 있는 데이터의 끝을 확인할 파일에서 읽을 때 사용할 수 있습니다.       다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `EndOfData` 속성입니다.      | | 참조 |   |--------|---------|   | 구분 기호로 분리 된 파일에서 읽기 | [하는 방법: 쉼표로 구분 된 텍스트 파일에서 읽은](~/add/includes/ajax-current-ext-md.md)|   | 고정 너비 파일에서 읽기 | [하는 방법: 고정 너비 텍스트 파일에서 읽기](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.  \n  \n [!code-vb[VbVbalrTextFieldParser#6](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._28_1.vb)]"
  syntax:
    content: public bool EndOfData { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>읽기, 데이터가 더 이상 없는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
  id: ErrorLine
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ErrorLine
  nameWithType: TextFieldParser.ErrorLine
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "가장 최근에 발생 한 줄을 반환 <xref href=&quot;Microsoft.VisualBasic.FileIO.MalformedLineException&quot;> </xref> 예외입니다."
  remarks: "없는 경우 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException>예외가 throw 되지 빈 문자열이 반환 됩니다.</xref:Microsoft.VisualBasic.FileIO.MalformedLineException>       <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A>예외를 발생 하는 줄의 번호를 표시 속성을 사용할 수 있습니다.</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A>       다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `ErrorLine` 속성입니다.      | | 참조 |   |--------|---------|   | 구분 기호로 분리 된 파일에서 읽기 | [하는 방법: 쉼표로 구분 된 텍스트 파일에서 읽은](~/add/includes/ajax-current-ext-md.md)|   | 고정 너비 파일에서 읽기 | [하는 방법: 고정 너비 텍스트 파일에서 읽기](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.  \n  \n [!code-vb[VbVbalrTextFieldParser#1](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._53_1.vb)]"
  syntax:
    content: public string ErrorLine { get; }
    return:
      type: System.String
      description: "가장 최근에 발생 한 줄 <xref href=&quot;Microsoft.VisualBasic.FileIO.MalformedLineException&quot;> </xref> 예외입니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
  id: ErrorLineNumber
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ErrorLineNumber
  nameWithType: TextFieldParser.ErrorLineNumber
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "가장 최근에 발생 한 줄의 번호를 반환 <xref href=&quot;Microsoft.VisualBasic.FileIO.MalformedLineException&quot;> </xref> 예외입니다."
  remarks: "없는 경우 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException>예외가 throw 되었습니다,-1이 반환 됩니다.</xref:Microsoft.VisualBasic.FileIO.MalformedLineException>       <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A>예외를 발생 하는 줄의 번호를 표시 속성을 사용할 수 있습니다.</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> 줄 번호를 결정할 때에 빈 줄과 주석을 무시 되지 않습니다.       다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `ErrorLineNumber` 속성입니다.      | | 참조 |   |--------|---------|   | 구분 기호로 분리 된 파일에서 읽기 | [하는 방법: 쉼표로 구분 된 텍스트 파일에서 읽은](~/add/includes/ajax-current-ext-md.md)|   | 고정 너비 파일에서 읽기 | [하는 방법: 고정 너비 텍스트 파일에서 읽기](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.  \n  \n [!code-vb[VbVbalrTextFieldParser#3](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._11_1.vb)]"
  syntax:
    content: public long ErrorLineNumber { get; }
    return:
      type: System.Int64
      description: "가장 최근에 발생 한 줄 번호 <xref href=&quot;Microsoft.VisualBasic.FileIO.MalformedLineException&quot;> </xref> 예외입니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
  id: FieldWidths
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: FieldWidths
  nameWithType: TextFieldParser.FieldWidths
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "구문 분석 하는 텍스트 파일에 있는 각 열의 너비를 나타냅니다."
  remarks: "이 속성은 의미 있는 경우에만 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>속성이 `FieldType.FixedWidth`.</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> 배열의 마지막 항목 보다 작거나&0;이 하 이면 필드 가변 폭으로 간주 됩니다.       <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A>메서드 필드의 너비를 사용할 수도 있습니다.</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A>       다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `FieldWidths` 속성입니다.      | | 참조 |   |--------|---------|   | 고정 너비 텍스트 파일에서 읽기 | [하는 방법: 고정 너비 텍스트 파일에서 읽기](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width  \n  \n [!code-vb[VbVbalrTextFieldParser#16](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._92_1.vb)]"
  syntax:
    content: public int[] FieldWidths { get; set; }
    return:
      type: System.Int32[]
      description: "구문 분석 되는 텍스트 파일에 있는 각 열의 너비를 포함 하는 정수 배열입니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "배열의 마지막 항목 이외의 위치를 불문 너비 값 보다 작거나&0;입니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize
  id: Finalize
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Finalize()
  nameWithType: TextFieldParser.Finalize()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "허용 된 <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref> 리소스를 해제 하 고 가비지 수집에서 회수 하기 전에 다른 정리 작업을 수행 하려고 하는 개체입니다."
  syntax:
    content: ~TextFieldParser ();
    parameters: []
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
  id: HasFieldsEnclosedInQuotes
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: HasFieldsEnclosedInQuotes
  nameWithType: TextFieldParser.HasFieldsEnclosedInQuotes
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "구분 기호로 분리 된 파일을 구문 분석 되 고 필드를 따옴표로 묶여 있는지 여부를 나타냅니다."
  remarks: "고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 **모든** 탭 합니다.       속성이 `True`, 파서가 가정 필드가 따옴표로 묶여 있는지 (&quot;&quot;) 및 줄 끝을 포함할 수 있습니다.       예를 들어 필드 따옴표에 포함 되어 있으면 `abc, &quot;field2a,field2b&quot;, field3` 하며이 속성은 `True`, 다음 따옴표로 묶인 모든 텍스트는 있는 그대로 반환 됩니다;이 예에서는 되돌아가 `abc|field2a,field2b|field3`합니다. 이 속성을 설정 `False` 이 예제에서는 반환 하 게 만드는 `abc|&quot;field2a|field2b&quot;|field3`합니다."
  example:
  - "This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.  \n  \n [!code-vb[VbVbalrTextFieldParser#18](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._33_1.vb)]"
  syntax:
    content: public bool HasFieldsEnclosedInQuotes { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>필드가 따옴표로 묶여 있는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
  id: LineNumber
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: LineNumber
  nameWithType: TextFieldParser.LineNumber
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "현재 줄 번호를 반환 하거나 스트림의 문자가 더 이상 없는 경우-1을 반환 합니다."
  remarks: "고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 **모든** 탭 합니다.       줄 번호를 결정할 때에 빈 줄과 주석을 무시 되지 않습니다."
  example:
  - "This example searches for the name \"Jones\" in the text file and reports what line(s) it occurs on.  \n  \n [!code-vb[VbVbalrTextFieldParser#11](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._89_1.vb)]"
  syntax:
    content: public long LineNumber { get; }
    return:
      type: System.Int64
      description: "현재 줄 번호입니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)
  id: PeekChars(System.Int32)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: PeekChars(Int32)
  nameWithType: TextFieldParser.PeekChars(Int32)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "커서를 이동 하지 않고 지정한 개수의 문자를 읽습니다."
  remarks: "`numberOfChars` 값 전체 줄의 문자 수보다 작아야 합니다. 없는 경우, 반환 하는 문자열 `PeekChars` 줄 길이에 잘립니다.       빈 줄은 무시 됩니다.       줄 끝 문자 반환 되지 않습니다.       `PeekChars` 메서드 수행 구문 분석 하지 않으면 구분된 된 필드에서 줄 끝 문자는 실제 줄 끝으로 해석 됩니다.       다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `PeekChars` 메서드.      | | 참조 |   |--------|---------|   | 필드의 형식을 구문 분석 하기 전에 확인 | [하는 방법: 여러 형식의 텍스트 파일에서 읽기](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.  \n  \n [!code-vb[VbVbalrTextFieldParser#8](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._48_1.vb)]"
  syntax:
    content: public string PeekChars (int numberOfChars);
    parameters:
    - id: numberOfChars
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Int32&quot; name=&quot;Int32&quot; href=&quot;&quot;></xref>. 읽을 문자 수입니다. 필수 사항입니다."
    return:
      type: System.String
      description: "지정한 개수의 문자를 포함 하는 문자열을 읽습니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>numberOfChars</code>0 보다 작습니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields
  id: ReadFields
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ReadFields()
  nameWithType: TextFieldParser.ReadFields()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "현재 줄에서 모든 필드를 읽고 문자열의 배열 하 고 데이터를 포함 하는 다음 줄으로 커서를 이동 합니다."
  remarks: "사용자가 여러 형식의 텍스트 파일을 구문 분석할 수 있도록 하기 위해는 `ReadFields` 의 값을 검사 하는 메서드 `TextFieldType`, `Delimiters`, 및 `FieldWidths`를 지정 하는 경우 호출 될 때마다 합니다. 사용자가 올바르게 구성 해야는 `TextFieldType` 및 `FieldWidths` 또는 `Delimiters` 속성을 적절 하 게 합니다. 경우 `TextFieldType` 로 설정 되어 `Delimited`, 및 `Delimiters` 설정 되지 않은 경우 `TextFieldType` 로 설정 된 `FixedWidth` 및 `FieldWidths`, 예외가 throw 됩니다.       경우 `ReadFields` 을 건너뛰고 다음 줄이 반환 됩니다.       경우는 `ReadFields` 메서드는 현재 줄을 구문 분석할 수 없습니다, 예외가 발생 하 고 다음 줄으로 이동 하지 않습니다. 이 통해 응용 프로그램을 다시 줄을 구문 분석을 시도 합니다.       다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `ReadFields` 메서드.      | | 참조 |   |--------|---------|   | 구분 기호로 분리 된 파일에서 읽기 | [하는 방법: 쉼표로 구분 된 텍스트 파일에서 읽은](~/add/includes/ajax-current-ext-md.md)|   | 고정 너비 파일에서 읽기 | [하는 방법: 고정 너비 텍스트 파일에서 읽기](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`. The example writes the fields to `Testfile.txt`.  \n  \n [!code-vb[VbVbalrTextFieldParser#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._242_1.vb)]"
  syntax:
    content: public string[] ReadFields ();
    parameters: []
    return:
      type: System.String[]
      description: "현재 줄에 대 한 필드 값이 포함 된 문자열의 배열입니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields*
  exceptions:
  - type: Microsoft.VisualBasic.FileIO.MalformedLineException
    commentId: T:Microsoft.VisualBasic.FileIO.MalformedLineException
    description: "지정 된 형식을 사용 하 여 필드를 구문 분석할 수 없습니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine
  id: ReadLine
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ReadLine()
  nameWithType: TextFieldParser.ReadLine()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "현재 줄을 문자열로 반환 하 고 줄으로 커서를 이동 합니다."
  remarks: "`ReadLine` 메서드 수행 구문 분석 하지 않으면 구분된 된 필드에서 줄 끝 문자는 실제 줄 끝으로 해석 됩니다.       `Nothing`파일의 끝에 도달 하는 경우 반환 됩니다."
  example:
  - "This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.  \n  \n [!code-vb[VbVbalrTextFieldParser#15](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._138_1.vb)]  \n  \n If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.  \n  \n This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line."
  syntax:
    content: public string ReadLine ();
    parameters: []
    return:
      type: System.String
      description: "파일 또는 스트림의 현재 줄."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd
  id: ReadToEnd
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ReadToEnd()
  nameWithType: TextFieldParser.ReadToEnd()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "텍스트 파일의 나머지를 읽고 문자열로 반환 합니다."
  remarks: "고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 **모든** 탭 합니다.       더 이상 읽을 파일의 끝에 도달 했으므로 내용이 없는 경우 `Nothing` 반환 됩니다.       `ReadToEnd` 빈 줄과 주석을 메서드를 무시 하지 않습니다."
  example:
  - "This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.  \n  \n [!code-vb[VbVbalrTextFieldParser#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._200_1.vb)]  \n  \n If `Testfile.txt` does not exist, it is created by the `WriteAllText` method."
  syntax:
    content: public string ReadToEnd ();
    parameters: []
    return:
      type: System.String
      description: "파일 또는 스트림에서 나머지 텍스트입니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])
  id: SetDelimiters(System.String[])
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: SetDelimiters(String[])
  nameWithType: TextFieldParser.SetDelimiters(String[])
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(String[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "지정된 된 값으로 판독기에 대 한 구분 기호를 설정 하 고 필드 형식을 설정 <xref uid=&quot;langword_csharp_Delimited&quot; name=&quot;Delimited&quot; href=&quot;&quot;> </xref>합니다."
  remarks: "기존 내용을 `Delimiters` 속성은이 메서드에 설정 된 경우 해제 됩니다.       이 메서드는 배열을 만들지 않고 구분 기호를 설정 하는 방법을 제공 합니다.       다음 표에서 관련 된 작업의 예는 `SetDelimiters` 메서드.      | | 참조 |   |--------|---------|   | 텍스트 파일 구문 분석 | [TextFieldParser 개체를 사용 하 여 텍스트 파일을 구문 분석](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens a text field parser and defines the delimiter as `vbTab`.  \n  \n [!code-vb[VbVbalrTextFieldParser#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._239_1.vb)]  \n  \n Replace the path `C:\\logs\\test.log` with the path and name of the file you wish to parse."
  syntax:
    content: public void SetDelimiters (string[] delimiters);
    parameters:
    - id: delimiters
      type: System.String[]
      description: "형식의 배열 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "구분 기호는 길이가&0;입니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])
  id: SetFieldWidths(System.Int32[])
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: SetFieldWidths(Int32[])
  nameWithType: TextFieldParser.SetFieldWidths(Int32[])
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(Int32[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "지정된 된 값으로 판독기에 대 한 구분 기호를 설정합니다."
  remarks: "기존 내용을 `Delimiters` 설정 하면 속성이 지워집니다.       이 메서드는 배열을 만들지 않고 구분 기호를 설정 하는 방법을 제공 합니다.       다음 표에서 관련 된 작업의 예제는 `SetFieldWidths` 메서드.      | | 참조 |   |--------|---------|   | 텍스트 파일 구문 분석 합니다. | [TextFieldParser 개체를 사용 하 여 텍스트 파일을 구문 분석](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens a text-field parser and defines the field width as `5`.  \n  \n [!code-vb[VbVbalrTextFieldParser#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._56_1.vb)]  \n  \n Replace the path `C:\\logs\\test.log` with the path and name of the file you wish to parse.  \n  \n The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.  \n  \n [!code-vb[VbVbalrTextFieldParser#13](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._56_2.vb)]  \n  \n Replace the path `C:\\logs\\test.log` with the path and name of the file you wish to parse."
  syntax:
    content: public void SetFieldWidths (int[] fieldWidths);
    parameters:
    - id: fieldWidths
      type: System.Int32[]
      description: "Array of <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
  id: TextFieldType
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldType
  nameWithType: TextFieldParser.TextFieldType
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "파일을 구문 분석할 수 구분 여부 또는 고정 너비를 나타냅니다."
  remarks: "이 속성의 기본값을 구분 합니다.       다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `TextFieldType` 속성입니다.      | | 참조 |   |--------|---------|   | 구분 기호로 분리 된 텍스트 파일에서 읽기 | [하는 방법: 쉼표로 구분 된 텍스트 파일에서 읽은](~/add/includes/ajax-current-ext-md.md)|   | 고정 너비 텍스트 파일에서 읽기 | [하는 방법: 고정 너비 텍스트 파일에서 읽은](~/add/includes/ajax-current-ext-md.md)|   | 여러 형식의 텍스트 파일에서 읽기 | [하는 방법: 여러 형식의 텍스트 파일에서 읽기](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.  \n  \n [!code-vb[VbVbalrTextFieldParser#19](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._100_1.vb)]  \n  \n This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.  \n  \n [!code-vb[VbVbalrTextFieldParser#20](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._100_2.vb)]"
  syntax:
    content: public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }
    return:
      type: Microsoft.VisualBasic.FileIO.FieldType
      description: "구문 분석할 수 파일은 구분 여부 또는 고정 너비를 나타내는 TextFieldType 값입니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
  id: TrimWhiteSpace
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TrimWhiteSpace
  nameWithType: TextFieldParser.TrimWhiteSpace
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "필드 값에서 선행 및 후행 공백 트리밍 해야 하는지 여부를 나타냅니다."
  remarks: "이 속성에 대 한 기본값은 `True`합니다."
  example:
  - "This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.  \n  \n [!code-vb[VbVbalrTextFieldParser#7](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._12_1.vb)]"
  syntax:
    content: public bool TrimWhiteSpace { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>필드 값에서 선행 및 후행 공백을 트리밍 해야 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Microsoft.VisualBasic.FileIO.MalformedLineException
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: MalformedLineException
  nameWithType: MalformedLineException
  fullName: Microsoft.VisualBasic.FileIO.MalformedLineException
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(Stream)
  nameWithType: TextFieldParser.TextFieldParser(Stream)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(TextReader)
  nameWithType: TextFieldParser.TextFieldParser(TextReader)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(String)
  nameWithType: TextFieldParser.TextFieldParser(String)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(Stream,Encoding)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding)
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(String,Encoding)
  nameWithType: TextFieldParser.TextFieldParser(String,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String,Encoding)
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(Stream,Encoding,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(String,Encoding,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(String,Encoding,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String,Encoding,Boolean)
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(Stream,Encoding,Boolean,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding,Boolean,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding,Boolean,Boolean)
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Close
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Close()
  nameWithType: TextFieldParser.Close()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Close()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: CommentTokens
  nameWithType: TextFieldParser.CommentTokens
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Delimiters
  nameWithType: TextFieldParser.Delimiters
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Dispose()
  nameWithType: TextFieldParser.Dispose()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: TextFieldParser.Dispose(Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(Boolean)
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: EndOfData
  nameWithType: TextFieldParser.EndOfData
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ErrorLine
  nameWithType: TextFieldParser.ErrorLine
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ErrorLineNumber
  nameWithType: TextFieldParser.ErrorLineNumber
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: FieldWidths
  nameWithType: TextFieldParser.FieldWidths
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Finalize()
  nameWithType: TextFieldParser.Finalize()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: HasFieldsEnclosedInQuotes
  nameWithType: TextFieldParser.HasFieldsEnclosedInQuotes
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: LineNumber
  nameWithType: TextFieldParser.LineNumber
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: PeekChars(Int32)
  nameWithType: TextFieldParser.PeekChars(Int32)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadFields()
  nameWithType: TextFieldParser.ReadFields()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadLine()
  nameWithType: TextFieldParser.ReadLine()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadToEnd()
  nameWithType: TextFieldParser.ReadToEnd()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: SetDelimiters(String[])
  nameWithType: TextFieldParser.SetDelimiters(String[])
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(String[])
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: SetFieldWidths(Int32[])
  nameWithType: TextFieldParser.SetFieldWidths(Int32[])
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(Int32[])
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldType
  nameWithType: TextFieldParser.TextFieldType
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
- uid: Microsoft.VisualBasic.FileIO.FieldType
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: FieldType
  nameWithType: FieldType
  fullName: Microsoft.VisualBasic.FileIO.FieldType
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TrimWhiteSpace
  nameWithType: TextFieldParser.TrimWhiteSpace
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser
  nameWithType: TextFieldParser.TextFieldParser
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Close*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Close
  nameWithType: TextFieldParser.Close
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: CommentTokens
  nameWithType: TextFieldParser.CommentTokens
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Delimiters
  nameWithType: TextFieldParser.Delimiters
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Dispose
  nameWithType: TextFieldParser.Dispose
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: EndOfData
  nameWithType: TextFieldParser.EndOfData
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ErrorLine
  nameWithType: TextFieldParser.ErrorLine
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ErrorLineNumber
  nameWithType: TextFieldParser.ErrorLineNumber
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: FieldWidths
  nameWithType: TextFieldParser.FieldWidths
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Finalize
  nameWithType: TextFieldParser.Finalize
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: HasFieldsEnclosedInQuotes
  nameWithType: TextFieldParser.HasFieldsEnclosedInQuotes
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: LineNumber
  nameWithType: TextFieldParser.LineNumber
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: PeekChars
  nameWithType: TextFieldParser.PeekChars
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadFields
  nameWithType: TextFieldParser.ReadFields
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadLine
  nameWithType: TextFieldParser.ReadLine
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadToEnd
  nameWithType: TextFieldParser.ReadToEnd
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: SetDelimiters
  nameWithType: TextFieldParser.SetDelimiters
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: SetFieldWidths
  nameWithType: TextFieldParser.SetFieldWidths
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldType
  nameWithType: TextFieldParser.TextFieldType
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TrimWhiteSpace
  nameWithType: TextFieldParser.TrimWhiteSpace
