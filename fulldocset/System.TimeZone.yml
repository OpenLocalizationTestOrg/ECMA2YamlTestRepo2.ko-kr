### YamlMime:ManagedReference
items:
- uid: System.TimeZone
  id: TimeZone
  children:
  - System.TimeZone.#ctor
  - System.TimeZone.CurrentTimeZone
  - System.TimeZone.DaylightName
  - System.TimeZone.GetDaylightChanges(System.Int32)
  - System.TimeZone.GetUtcOffset(System.DateTime)
  - System.TimeZone.IsDaylightSavingTime(System.DateTime)
  - System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  - System.TimeZone.StandardName
  - System.TimeZone.ToLocalTime(System.DateTime)
  - System.TimeZone.ToUniversalTime(System.DateTime)
  langs:
  - csharp
  name: TimeZone
  nameWithType: TimeZone
  fullName: System.TimeZone
  type: Class
  summary: "표준 시간대를 나타냅니다."
  remarks: "표준 시간대는 동일한 표준 시간대 사용 되는 지리적 영역입니다.      > [!IMPORTANT] > 가능 하면 <xref:System.TimeZoneInfo>표준 시간대 클래스 대신 클래스</xref:System.TimeZoneInfo> 사용       현재 표준 시간대에 대 한 정보를 검색 하 고 시간을 현지 시간에서 utc (협정 세계시)로 또는 그 반대로 변환할 수는 표준 시간대 클래스를 사용할 수 있습니다. 그러나 로컬 영역 이외의 다른 시간대 하거나 다른 한 표준 시간대의 날짜 및 시간 변환을 처리 하는 표준 시간대 클래스를 사용할 수 없습니다. <xref:System.TimeZoneInfo>클래스</xref:System.TimeZoneInfo> 를 사용 하 여이 위해 이 클래스를 사용자 지정 표준 시간대를 만들고 시간을 한 표준 시간대에서 다른 변환할를 로컬 시스템에 정의 된 표준 시간대에 대 한 정보를 검색에 사용할 수 있습니다.       표준 시간대 클래스 현지 표준 시간대에 대 한만 하나의 일광 절약 시간 조정 규칙을 지원합니다. 결과적으로, 표준 시간대 클래스 수 정확 하 게 일광 절약 시간 정보를 보고 하거나는 최신 조정 규칙이 적용 되는 기간에 대 한 UTC와 현지 시간 사이의 변환 합니다. 반면,는 <xref:System.TimeZoneInfo>클래스 여러 조정 규칙이 지원 시간대 기록 데이터로 작업할 수 있습니다.</xref:System.TimeZoneInfo>"
  example:
  - "The following example references and displays selected `TimeZone` class elements.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/t-system.timezone_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/t-system.timezone_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/t-system.timezone_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class TimeZone
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.TimeZone.#ctor
  id: '#ctor'
  parent: System.TimeZone
  langs:
  - csharp
  name: TimeZone()
  nameWithType: TimeZone.TimeZone()
  fullName: System.TimeZone.TimeZone()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.TimeZone&quot;> </xref> 클래스입니다."
  syntax:
    content: protected TimeZone ();
    parameters: []
  overload: System.TimeZone.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.CurrentTimeZone
  id: CurrentTimeZone
  parent: System.TimeZone
  langs:
  - csharp
  name: CurrentTimeZone
  nameWithType: TimeZone.CurrentTimeZone
  fullName: System.TimeZone.CurrentTimeZone
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "현재 컴퓨터의 표준 시간대를 가져옵니다."
  remarks: "현재 표준 시간대 속성에 해당 하는 <xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>속성.</xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName> 사용 가능한 경우 항상는 <xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>속성.</xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>"
  example:
  - "The following example references the `CurrentTimeZone` property and displays the names for standard time and daylight saving time for the local time zone.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/p-system.timezone.curren_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/p-system.timezone.curren_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/p-system.timezone.curren_1.cs)]"
  syntax:
    content: public static TimeZone CurrentTimeZone { get; }
    return:
      type: System.TimeZone
      description: "A <xref href=&quot;System.TimeZone&quot;> </xref> 현재 현지 표준 시간대를 나타내는 개체입니다."
  overload: System.TimeZone.CurrentTimeZone*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.DaylightName
  id: DaylightName
  parent: System.TimeZone
  langs:
  - csharp
  name: DaylightName
  nameWithType: TimeZone.DaylightName
  fullName: System.TimeZone.DaylightName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "일광 절약 시간제 영역 이름을 가져옵니다."
  remarks: "빈 문자열 표준 시간대의 일광 절약 시간제를 사용 하지 않는 경우 (&quot;&quot;)이 반환 됩니다.       DaylightName 속성에 해당 하는 <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=fullName>속성.</xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=fullName> 사용 가능한 경우 항상는 <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=fullName>속성.</xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=fullName>"
  example:
  - "The following example references and displays the `DaylightName` property of the current time zone.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/p-system.timezone.daylig_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/p-system.timezone.daylig_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/p-system.timezone.daylig_1.cs)]"
  syntax:
    content: public abstract string DaylightName { get; }
    return:
      type: System.String
      description: "일광 절약 시간제 영역 이름입니다."
  overload: System.TimeZone.DaylightName*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.GetDaylightChanges(System.Int32)
  id: GetDaylightChanges(System.Int32)
  parent: System.TimeZone
  langs:
  - csharp
  name: GetDaylightChanges(Int32)
  nameWithType: TimeZone.GetDaylightChanges(Int32)
  fullName: System.TimeZone.GetDaylightChanges(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "특정 연도 대 한 일광 절약 시간 기간을 반환 합니다."
  remarks: "연간 일광 절약 시간제 마침표를 하나만 사용할 수 있습니다.       반환 값은 현재 표준 시간대의 일광 절약 시간제를 사용 하지 않으면는 <xref:System.Globalization.DaylightTime>개체를 여기서 값 <xref:System.Globalization.DaylightTime.Start%2A>및 <xref:System.Globalization.DaylightTime.End%2A>은 <xref:System.DateTime.MinValue?displayProperty=fullName>의 값 <xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=fullName>는 <xref:System.TimeSpan>틱 수가 0으로 초기화 합니다.</xref:System.TimeSpan> </xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=fullName> </xref:System.DateTime.MinValue?displayProperty=fullName> </xref:System.Globalization.DaylightTime.End%2A> </xref:System.Globalization.DaylightTime.Start%2A> </xref:System.Globalization.DaylightTime>"
  syntax:
    content: public abstract System.Globalization.DaylightTime GetDaylightChanges (int year);
    parameters:
    - id: year
      type: System.Int32
      description: "일광 절약 시간이 적용 되는 연도입니다."
    return:
      type: System.Globalization.DaylightTime
      description: "A <xref href=&quot;System.Globalization.DaylightTime&quot;> </xref> 에서 일광 절약 시간제에 맞게 시작 및 종료 날짜를 포함 하는 개체 <code> year </code>합니다."
  overload: System.TimeZone.GetDaylightChanges*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>가 1 보다 작거나 9999 보다 큽니다."
  platform:
  - net462
- uid: System.TimeZone.GetUtcOffset(System.DateTime)
  id: GetUtcOffset(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: GetUtcOffset(DateTime)
  nameWithType: TimeZone.GetUtcOffset(DateTime)
  fullName: System.TimeZone.GetUtcOffset(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "지정된 된 현지 시간에 대 한 utc (협정 세계시) 오프셋을 반환 합니다."
  remarks: "이 메서드는 반환 오프셋 또는 차이 사이 `time` 매개 변수 및 utc (협정 세계시)입니다. 즉: `time` UTC +에서 보다 크거나의 표준 시간대 오프셋 = `time` 에 따라 해당 <xref:System.DateTime.Kind%2A>속성.</xref:System.DateTime.Kind%2A> 하는 경우의 값은 <xref:System.DateTime.Kind%2A>속성은 <xref:System.DateTimeKind?displayProperty=fullName>또는 <xref:System.DateTimeKind?displayProperty=fullName>의 현지 표준 시간대 오프셋을 반환 하는 메서드.</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime.Kind%2A> 경우 <xref:System.DateTime.Kind%2A>속성은 <xref:System.DateTimeKind?displayProperty=fullName>메서드에서 반환 <xref:System.TimeSpan.Zero?displayProperty=fullName>.</xref:System.TimeSpan.Zero?displayProperty=fullName> 같음 오프셋은</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime.Kind%2A> 값       현지 표준 시간대가 일광 절약 시간제를 따르는, 경우 GetUtcOffset에 현재 조정 규칙을 적용 `time` 현지 표준 시간대 오프셋 결정할 때. 즉, GetUtcOffset 반환한 오프셋 반영 있는지 여부를 `time` 속하는 표준 시간대의 표준 시간 또는 일광 절약 시간.      > [!NOTE] > The GetUtcOffset 메서드는 현재 일광 절약 시간 조정에 대 한 규칙만 현지 표준 시간대를 인식 합니다. 결과적으로, 정확 하 게 반환 현지 시간 변수의 UTC 오프셋이 있는 최신 조정 규칙이 적용 되는 기간 동안에 보장 됩니다. 경우에 부정확 한 결과가 반환 될 수 있습니다 `time` 가 기록 날짜 및 이전 조정 규칙에 종속 되는 시간 값입니다.       에 해당 하는 GetUtcOffset 메서드는 <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=fullName>메서드.</xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=fullName> 가능 하면 사용 된 <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=fullName>메서드.</xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=fullName>       날짜 및 시간 값 표현 되므로 `time` UTC에서의 해당이 값의이 오프셋 느슨한, 로컬 또는 지정 되지 않은 날짜 및 시간 값에는 경우 다른 컴퓨터에서 실행 하거나 다른 표준 시간대 아래에 있는 동일한 컴퓨터에서 실행 시점에 다른 오프셋된 값을 반환할 수 있습니다. 사용 하 여이 동작이 필요 없는 경우는 <xref:System.DateTimeOffset>값을 대신 합니다.</xref:System.DateTimeOffset> <xref:System.DateTimeOffset>데이터 형식 밀접 하 게 결합 날짜 및 시간 값의 오프셋으로 측정 된 UTC에서.</xref:System.DateTimeOffset>"
  syntax:
    content: public abstract TimeSpan GetUtcOffset (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "날짜 및 시간 값입니다."
    return:
      type: System.TimeSpan
      description: "Utc (협정 세계시) 오프셋이 <code> time </code>합니다."
  overload: System.TimeZone.GetUtcOffset*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime)
  id: IsDaylightSavingTime(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: IsDaylightSavingTime(DateTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "지정 된 날짜 및 시간 일광 절약 시간 기간 내에 있는지 여부를 나타내는 값을 반환 합니다."
  remarks: "일광 절약 시간이 적용 되는 연도에서 파생 됩니다는 `time` 매개 변수입니다.       때문에 <xref:System.TimeZone>IsDaylightSavingTime 메서드 조정 규칙 했는지 여부에 적용 해당 날짜에 관계 없이 모든 날짜에 현재 조정 규칙을 적용, 클래스에는 하나의 일광 절약 시간 조정 규칙을 지원 합니다.</xref:System.TimeZone> 사용 하 여 더 정확한 결과 사용할 수 있는 운영 체제 자체에 정확 하 게 일광 절약 시간 기록 데이터가 있다고 가정할 경우는 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>메서드.</xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName> 가능 하면 사용 된 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>메서드.</xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>"
  syntax:
    content: public virtual bool IsDaylightSavingTime (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "날짜 및 시간입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <code> time </code> 는 일광 절약 시간을 단축 하 고, 그러지 않으면 기간에 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.TimeZone.IsDaylightSavingTime*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  id: IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: IsDaylightSavingTime(DateTime,DaylightTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "지정 된 날짜 및 시간 지정된 일광 절약 시간 기간 내에 있는지 여부를 나타내는 값을 반환 합니다."
  remarks: "<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>메서드 IsDaylightSavingTime 메서드의이 오버 로드와 동일한 기능을 제공 합니다.</xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName> 가능 하면 사용 된 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>메서드.</xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>"
  syntax:
    content: public static bool IsDaylightSavingTime (DateTime time, System.Globalization.DaylightTime daylightTimes);
    parameters:
    - id: time
      type: System.DateTime
      description: "날짜 및 시간입니다."
    - id: daylightTimes
      type: System.Globalization.DaylightTime
      description: "추가할 수 있습니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>time</code> is in <code>daylightTimes</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.TimeZone.IsDaylightSavingTime*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>daylightTimes</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.TimeZone.StandardName
  id: StandardName
  parent: System.TimeZone
  langs:
  - csharp
  name: StandardName
  nameWithType: TimeZone.StandardName
  fullName: System.TimeZone.StandardName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "표준 시간대 이름을 가져옵니다."
  remarks: "StandardName 속성에 해당 하는 <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=fullName>속성.</xref:System.TimeZoneInfo.StandardName%2A?displayProperty=fullName> 사용 가능한 경우 항상는 <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=fullName>속성.</xref:System.TimeZoneInfo.StandardName%2A?displayProperty=fullName>"
  example:
  - "The following example references and displays the `StandardName` property of the current time zone.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/p-system.timezone.standa_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/p-system.timezone.standa_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/p-system.timezone.standa_1.cs)]"
  syntax:
    content: public abstract string StandardName { get; }
    return:
      type: System.String
      description: "표준 시간대 이름입니다."
  overload: System.TimeZone.StandardName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "이 속성을 설정 하려고 했습니다 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.TimeZone.ToLocalTime(System.DateTime)
  id: ToLocalTime(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: ToLocalTime(DateTime)
  nameWithType: TimeZone.ToLocalTime(DateTime)
  fullName: System.TimeZone.ToLocalTime(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "지정 된 날짜 및 시간 값에 해당 하는 현지 시간을 반환 합니다."
  remarks: "다음 표에서 간의 관계를 보여 줍니다.는 `time` 매개 변수 및 <xref:System.DateTime>이 메서드에서 반환 된 값.</xref:System.DateTime>      | `time` 매개 변수 | 동작 | 반환 값 |   |----------------------|--------------|------------------|   | Utc (협정 세계시) 시간 (<xref:System.DateTimeKind?displayProperty=fullName>). | 현지 시간에서 UTC 시간으로 변환 합니다. | 값은 현지 시간에 해당 하는 <xref:System.DateTime>개체 `time`. |   | 현지 시간 (<xref:System.DateTimeKind?displayProperty=fullName>). | 변환할 필요가 없습니다. | 이 나타내는 동일한 <xref:System.DateTime>값은 `time` 매개 변수입니다. |   | 지정 되지 않은 시간 (<xref:System.DateTimeKind?displayProperty=fullName>). | 시간이 UTC 이며 현지 시간으로 측정 된 UTC에서 변환 한다고 가정 합니다. | 값은 현지 시간에 해당 하는 <xref:System.DateTime>개체 `time`. |       경우 ToLocalTime을 현재 조정 규칙을 적용 현지 표준 시간대가 일광 절약 시간제를 따르는, 경우 `time` 변환을 수행할 때.</xref:System.DateTime> </xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> </xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> </xref:System.DateTimeKind?displayProperty=fullName>      > [!NOTE] >의 경우 ToLocalTime 메서드는 현재 일광 절약 시간 조정에 대 한 규칙만 현지 표준 시간대를 인식 합니다. 결과적으로,는 최신 조정 규칙이 적용 되는 기간 동안에 특정 UTC 시간에 해당 하는 현지 시간을 정확 하 게 반환할 보장 됩니다. 경우에 부정확 한 결과가 반환 될 수 있습니다 `time` 가 기록 날짜 및 이전 조정 규칙에 종속 되는 시간 값입니다.       에 해당 하는 경우 ToLocalTime 메서드는 <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=fullName>메서드를 해당 `destinationTimeZone` 매개 변수 설정 <xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>.</xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName> </xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=fullName> 가능 하면 사용 된 <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=fullName>메서드.</xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=fullName>"
  syntax:
    content: public virtual DateTime ToLocalTime (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "Utc (협정 세계시) 시간입니다."
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime>값은 현지 시간에 해당 하는 개체 <code> time </code>.</xref:System.DateTime>"
  overload: System.TimeZone.ToLocalTime*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.ToUniversalTime(System.DateTime)
  id: ToUniversalTime(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: ToUniversalTime(DateTime)
  nameWithType: TimeZone.ToUniversalTime(DateTime)
  fullName: System.TimeZone.ToUniversalTime(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "지정된 된 시간에 해당 하는 utc (협정 세계시)를 반환 합니다."
  remarks: "경우 ToUniversalTime에 현재 조정 규칙을 적용 현지 표준 시간대가 일광 절약 시간제를 준수 하는 경우는 `time` 변환을 수행할 때 매개 변수입니다.      > [!NOTE] >의 경우 ToUniversalTime 메서드는 현재 일광 절약 시간 조정에 대 한 규칙만 현지 표준 시간대를 인식 합니다. 결과적으로 Utc (협정 세계시)는 최신 조정 규칙이 적용 되는 기간 동안에 해당 하는 특정 현지 시간을 정확 하 게 반환할 보장 됩니다. 경우에 부정확 한 결과가 반환 될 수 있습니다 `time` 가 기록 날짜 및 이전 조정 규칙에 종속 되는 시간 값입니다.       경우는 `time` 매개 변수는 모호한 시간, 메서드는 표준 시간 임을 가정 합니다. (모호한 시간은 표준 시간 또는 현지 표준 시간대의 일광 절약 시간제에 매핑할 수 있는.) 경우 `time` 잘못 된 시간인 메서드 오프셋 UTC를 반환 하는 현지 표준 시간대의 UTC에서 로컬 시간을 빼서 합니다. (잘못 된 시간은 일광 절약 시간 조정 규칙을 적용 하는 때문에 존재 하지 않는 하나.)       때문에 `time` 해석 되는 현재 시스템에서 현재 표준 시간대를 기준으로이 메서드에서 반환 된 시간과 날짜 다를 수 있습니다는 응용 프로그램에 서로 다른 컴퓨터에 또는 동일한 컴퓨터에서 다른 표준 시간대 함께 실행 될 경우. 시간에서 날짜 및 시간 값 명확한를 단일 지점을 나타내야 합니다는 경우를 사용 하 여 한 <xref:System.DateTimeOffset>현지 시간을 나타내는 값입니다.</xref:System.DateTimeOffset>       에 해당 하는 경우 ToUniversalTime 메서드는 <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=fullName>메서드 오버 로드와는 <xref:System.DateTime>매개 변수 <xref:System.DateTime.Kind%2A>속성 <xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName> 같지 않음</xref:System.DateTime.Kind%2A> </xref:System.DateTime> </xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=fullName> 가능 하면 사용 된 <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=fullName>메서드 오버 로드.</xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=fullName>"
  syntax:
    content: public virtual DateTime ToUniversalTime (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "날짜 및 시간입니다."
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime>값을 가진 개체에 해당 하는 utc (협정 세계시) <code> time </code>.</xref:System.DateTime>"
  overload: System.TimeZone.ToUniversalTime*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.TimeZone.#ctor
  parent: System.TimeZone
  isExternal: false
  name: TimeZone()
  nameWithType: TimeZone.TimeZone()
  fullName: System.TimeZone.TimeZone()
- uid: System.TimeZone.CurrentTimeZone
  parent: System.TimeZone
  isExternal: false
  name: CurrentTimeZone
  nameWithType: TimeZone.CurrentTimeZone
  fullName: System.TimeZone.CurrentTimeZone
- uid: System.TimeZone
  parent: System
  isExternal: false
  name: TimeZone
  nameWithType: TimeZone
  fullName: System.TimeZone
- uid: System.TimeZone.DaylightName
  parent: System.TimeZone
  isExternal: false
  name: DaylightName
  nameWithType: TimeZone.DaylightName
  fullName: System.TimeZone.DaylightName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.TimeZone.GetDaylightChanges(System.Int32)
  parent: System.TimeZone
  isExternal: false
  name: GetDaylightChanges(Int32)
  nameWithType: TimeZone.GetDaylightChanges(Int32)
  fullName: System.TimeZone.GetDaylightChanges(Int32)
- uid: System.Globalization.DaylightTime
  parent: System.Globalization
  isExternal: false
  name: DaylightTime
  nameWithType: DaylightTime
  fullName: System.Globalization.DaylightTime
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeZone.GetUtcOffset(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: GetUtcOffset(DateTime)
  nameWithType: TimeZone.GetUtcOffset(DateTime)
  fullName: System.TimeZone.GetUtcOffset(DateTime)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: IsDaylightSavingTime(DateTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  parent: System.TimeZone
  isExternal: false
  name: IsDaylightSavingTime(DateTime,DaylightTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
- uid: System.TimeZone.StandardName
  parent: System.TimeZone
  isExternal: false
  name: StandardName
  nameWithType: TimeZone.StandardName
  fullName: System.TimeZone.StandardName
- uid: System.TimeZone.ToLocalTime(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: ToLocalTime(DateTime)
  nameWithType: TimeZone.ToLocalTime(DateTime)
  fullName: System.TimeZone.ToLocalTime(DateTime)
- uid: System.TimeZone.ToUniversalTime(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: ToUniversalTime(DateTime)
  nameWithType: TimeZone.ToUniversalTime(DateTime)
  fullName: System.TimeZone.ToUniversalTime(DateTime)
- uid: System.TimeZone.#ctor*
  parent: System.TimeZone
  isExternal: false
  name: TimeZone
  nameWithType: TimeZone.TimeZone
- uid: System.TimeZone.CurrentTimeZone*
  parent: System.TimeZone
  isExternal: false
  name: CurrentTimeZone
  nameWithType: TimeZone.CurrentTimeZone
- uid: System.TimeZone.DaylightName*
  parent: System.TimeZone
  isExternal: false
  name: DaylightName
  nameWithType: TimeZone.DaylightName
- uid: System.TimeZone.GetDaylightChanges*
  parent: System.TimeZone
  isExternal: false
  name: GetDaylightChanges
  nameWithType: TimeZone.GetDaylightChanges
- uid: System.TimeZone.GetUtcOffset*
  parent: System.TimeZone
  isExternal: false
  name: GetUtcOffset
  nameWithType: TimeZone.GetUtcOffset
- uid: System.TimeZone.IsDaylightSavingTime*
  parent: System.TimeZone
  isExternal: false
  name: IsDaylightSavingTime
  nameWithType: TimeZone.IsDaylightSavingTime
- uid: System.TimeZone.StandardName*
  parent: System.TimeZone
  isExternal: false
  name: StandardName
  nameWithType: TimeZone.StandardName
- uid: System.TimeZone.ToLocalTime*
  parent: System.TimeZone
  isExternal: false
  name: ToLocalTime
  nameWithType: TimeZone.ToLocalTime
- uid: System.TimeZone.ToUniversalTime*
  parent: System.TimeZone
  isExternal: false
  name: ToUniversalTime
  nameWithType: TimeZone.ToUniversalTime
