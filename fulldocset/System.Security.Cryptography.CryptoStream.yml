### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CryptoStream
  id: CryptoStream
  children:
  - System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  - System.Security.Cryptography.CryptoStream.CanRead
  - System.Security.Cryptography.CryptoStream.CanSeek
  - System.Security.Cryptography.CryptoStream.CanWrite
  - System.Security.Cryptography.CryptoStream.Clear
  - System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  - System.Security.Cryptography.CryptoStream.Flush
  - System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  - System.Security.Cryptography.CryptoStream.FlushFinalBlock
  - System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  - System.Security.Cryptography.CryptoStream.Length
  - System.Security.Cryptography.CryptoStream.Position
  - System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  - System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  langs:
  - csharp
  name: CryptoStream
  nameWithType: CryptoStream
  fullName: System.Security.Cryptography.CryptoStream
  type: Class
  summary: "데이터 스트림을 암호화 변형에 연결 하는 스트림을 정의 합니다."
  remarks: "공용 언어 런타임에서 암호화에 대 한 스트림 지향 디자인을 사용 합니다. 이 디자인의 핵심 CryptoStream입니다. CryptoStream를 구현 하는 모든 암호화 개체를 구현 하는 모든 개체와 연결할 수 <xref:System.IO.Stream>이므로 스트리밍된 출력 한 개체의 다른 개체의 입력으로 제공 받을 수 있습니다.</xref:System.IO.Stream> 중간 결과 (첫 번째 개체에서 출력)를 따로 저장 될 필요는 없습니다.      > [!IMPORTANT] >이 형식이 구현 하는 <xref:System.IDisposable>인터페이스.</xref:System.IDisposable> 형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 호출 하 여 해당 <xref:System.Security.Cryptography.CryptoStream.Clear%2A>메서드를 호출 하 여 해당 <xref:System.IDisposable>구현.</xref:System.IDisposable> </xref:System.Security.Cryptography.CryptoStream.Clear%2A> 직접 형식의 삭제 하려면 해당 <xref:System.Security.Cryptography.CryptoStream.Clear%2A>에서 메서드는 `try` / `catch` 블록.</xref:System.Security.Cryptography.CryptoStream.Clear%2A> 작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다. 자세한 내용은의 &quot;를 사용 하는 개체는 구현 IDisposable&quot; 섹션을 참조 하십시오.는 <xref:System.IDisposable>인터페이스 항목.</xref:System.IDisposable>       완료 한 후 CryptoStream 개체를 항상 명시적으로 닫아야 호출 하 여 사용 하 여 <xref:System.Security.Cryptography.CryptoStream.Clear%2A>메서드.</xref:System.Security.Cryptography.CryptoStream.Clear%2A>  이렇게 하면 내부 스트림도 플러시합니다 고 나머지 모든 블록이 CryptoStream 개체에서 처리 되도록 데이터.  그러나 호출 하기 전에 예외가 발생 하는 경우는 <xref:System.IO.Stream.Close%2A>메서드, CryptoStream 개체가 닫혔을 수 있습니다.</xref:System.IO.Stream.Close%2A>  되도록는 <xref:System.IO.Stream.Close%2A>메서드가 항상 호출를 호출 하 여 배치는 <xref:System.Security.Cryptography.CryptoStream.Clear%2A>내에서 메서드는 `finally` 블록는 `try` / `catch` 문.</xref:System.Security.Cryptography.CryptoStream.Clear%2A> </xref:System.IO.Stream.Close%2A>"
  example:
  - "The following example demonstrates how to use a CryptoStream to encrypt a string. This method uses <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>).  \n  \n [!code-cs[Cryptography.Rijndael.Create.File#1](~/add/codesnippet/csharp/t-system.security.crypto_78_1.cs)]\n [!code-vb[Cryptography.Rijndael.Create.File#1](~/add/codesnippet/visualbasic/t-system.security.crypto_78_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class CryptoStream : System.IO.Stream
  inheritance:
  - System.IO.Stream
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  id: '#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)'
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  nameWithType: CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  fullName: System.Security.Cryptography.CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> 대상 데이터 스트림, 사용할 변환 및 스트림 모드를 사용 하 여 클래스입니다."
  remarks: "파생 된 모든 개체 <xref:System.IO.Stream>에 전달할 수는 `stream` 매개 변수.</xref:System.IO.Stream> 구현 하는 모든 개체 <xref:System.Security.Cryptography.ICryptoTransform>(같은 <xref:System.Security.Cryptography.HashAlgorithm>)에 전달할 수는 `transform` 매개 변수.</xref:System.Security.Cryptography.HashAlgorithm> </xref:System.Security.Cryptography.ICryptoTransform>"
  syntax:
    content: public CryptoStream (System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "암호화 변형을 수행할 스트림."
    - id: transform
      type: System.Security.Cryptography.ICryptoTransform
      description: "암호화 변환 스트림에 대해 수행 하는 것입니다."
    - id: mode
      type: System.Security.Cryptography.CryptoStreamMode
      description: "중 하나는 <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> 값입니다."
  overload: System.Security.Cryptography.CryptoStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>잘못 되었습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.CanRead
  id: CanRead
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CanRead
  nameWithType: CryptoStream.CanRead
  fullName: System.Security.Cryptography.CryptoStream.CanRead
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "나타내는 값을 가져옵니다 여부 현재 <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> 읽을 수 있습니다."
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 스트림이 읽을 수 있습니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Cryptography.CryptoStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.CanSeek
  id: CanSeek
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: CryptoStream.CanSeek
  fullName: System.Security.Cryptography.CryptoStream.CanSeek
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 검색할 수 있는지 여부를 나타내는 값을 가져옵니다 <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref>합니다."
  remarks: "검색에서 사용 되지 않습니다는 <xref:System.Security.Cryptography.CryptoStream>이므로이 메서드는 항상 반환 `false`.</xref:System.Security.Cryptography.CryptoStream>"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.CryptoStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.CanWrite
  id: CanWrite
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: CryptoStream.CanWrite
  fullName: System.Security.Cryptography.CryptoStream.CanWrite
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "나타내는 값을 가져옵니다 여부 현재 <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> 쓸 수 있습니다."
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>현재 스트림이 쓰기 가능한; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Cryptography.CryptoStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Clear
  id: Clear
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Clear()
  nameWithType: CryptoStream.Clear()
  fullName: System.Security.Cryptography.CryptoStream.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref>합니다."
  remarks: "이 메서드는 형식에 대 한 호출을 래핑합니다 <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>구현.</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>       호출 `Dispose` 에서 사용 하는 리소스는 <xref:System.Security.Cryptography.CryptoStream>다른 용도에 다시 할당 됩니다.</xref:System.Security.Cryptography.CryptoStream> 에 대 한 자세한 내용은 `Dispose`, 참조 [관리 되지 않는 리소스 정리](~/add/includes/ajax-current-ext-md.md)"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.CryptoStream.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: CryptoStream.Dispose(Boolean)
  fullName: System.Security.Cryptography.CryptoStream.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public `Dispose()` 메서드 및 `Finalize` 메서드. `Dispose()`보호 된 호출 `Dispose(Boolean)` 로 설정 disposing 매개 `true`합니다. `Finalize`호출 `Dispose` 삭제로 설정 된 `false`합니다.       경우는 `disposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Security.Cryptography.CryptoStream>참조.</xref:System.Security.Cryptography.CryptoStream> 이 메서드 호출에서 `Dispose()` 각 참조 된 개체의 메서드."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Security.Cryptography.CryptoStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Flush
  id: Flush
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Flush()
  nameWithType: CryptoStream.Flush()
  fullName: System.Security.Cryptography.CryptoStream.Flush()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 스트림에 대해 모든 버퍼를 지우고 버퍼링 된 모든 데이터가 내부 장치에 쓰여지도록 합니다."
  remarks: "플러시 나 <xref:System.IO.Stream.Close%2A>.</xref:System.IO.Stream.Close%2A> 명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 않습니다. 설정 <xref:System.IO.StreamWriter.AutoFlush%2A>를 `true` 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태 플러시되지 것입니다 있다는 것을 의미 합니다.</xref:System.IO.StreamWriter.AutoFlush%2A> 따라서 올바르게 문자의 다음 블록을 인코딩할 수 있도록 (부분 문자)의 상태를 유지 하기 위해 인코더 수 있습니다. 이 시나리오는 u t f&8;와 UTF7 인코더는 인접 한 문자를 받은 후 특정 문자를 인코딩할만 수 있는 위치에 적용 됩니다.      > [!NOTE] > 중 하나를 호출 해야는 <xref:System.IO.Stream.Close%2A>메서드 또는 <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>버퍼 플러시를 완료 하는 메서드.</xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> </xref:System.IO.Stream.Close%2A>"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Security.Cryptography.CryptoStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: FlushAsync(CancellationToken)
  nameWithType: CryptoStream.FlushAsync(CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.FlushAsync(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 스트림에 대 한 모든 버퍼를 비동기적으로 지우고, 버퍼링 된 모든 데이터가 내부 장치에 쓰여지도록 하 고 취소 요청을 모니터링 합니다."
  remarks: "와 FlushAsync 호출 하 여 시작 해야 합니다는 `await` (C#) 또는 `Await` (Visual Basic) 연산자는 작업이 완료 될 때까지 메서드의 실행을 일시 중단 합니다. 자세한 내용은 참조 [Async 및 Await를 사용한 비동기 프로그래밍](~/add/includes/ajax-current-ext-md.md)합니다.       반환된 된 작업에 포함 된 완료 되기 전에 작업이 취소 되는 경우는 <xref:System.Threading.Tasks.TaskStatus>에 대 한 값은 <xref:System.Threading.Tasks.Task.Status%2A>속성.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus>"
  syntax:
    content: public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "취소 요청을 모니터링할 토큰입니다. 기본값은 <xref:System.Threading.CancellationToken.None*>.</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task
      description: "비동기 플러시 작업을 나타내는 작업입니다."
  overload: System.Security.Cryptography.CryptoStream.FlushAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "스트림이 삭제 되었습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock
  id: FlushFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: FlushFinalBlock()
  nameWithType: CryptoStream.FlushFinalBlock()
  fullName: System.Security.Cryptography.CryptoStream.FlushFinalBlock()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "내부 데이터 소스 또는 리포지토리에 버퍼의 현재 상태를 업데이트 한 다음 버퍼를 지웁니다."
  remarks: "호출 된 <xref:System.IO.Stream.Close%2A>FlushFinalBlock 메서드를 호출 합니다.</xref:System.IO.Stream.Close%2A> 호출 하지 않으면 <xref:System.IO.Stream.Close%2A>, 버퍼 플러시를 완료 하려면 FlushFinalBlock 호출.</xref:System.IO.Stream.Close%2A> 모든 스트림 작업이 완료 될 경우에 FlushFinalBlock를 호출 합니다."
  syntax:
    content: public void FlushFinalBlock ();
    parameters: []
  overload: System.Security.Cryptography.CryptoStream.FlushFinalBlock*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "키가 손상 된 스트림에 잘못 된 패딩 될 수 있습니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "현재 스트림에 쓸 수 없는 경우       -또는-마지막 블록 이미 변환 되었습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  id: HasFlushedFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: HasFlushedFinalBlock
  nameWithType: CryptoStream.HasFlushedFinalBlock
  fullName: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "마지막 버퍼 블록을 내부 스트림에 썼는지 여부를 나타내는 값을 가져옵니다."
  remarks: "이 속성이 설정 되어 `true` 때는 <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>메서드를 호출 합니다.</xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>"
  syntax:
    content: public bool HasFlushedFinalBlock { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>마지막 블록을 플러시 했으면; 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Length
  id: Length
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Length
  nameWithType: CryptoStream.Length
  fullName: System.Security.Cryptography.CryptoStream.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "스트림의 바이트 길이 가져옵니다."
  remarks: "이 속성에서 상속 하기 위해서만 존재 <xref:System.IO.Stream>, 사용할 수 없습니다.</xref:System.IO.Stream>"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "이 속성은 지원 되지 않습니다."
  overload: System.Security.Cryptography.CryptoStream.Length*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "이 속성은 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Position
  id: Position
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Position
  nameWithType: CryptoStream.Position
  fullName: System.Security.Cryptography.CryptoStream.Position
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 스트림 내의 위치를 가져오거나 설정 합니다."
  remarks: "이 속성에서 상속 하기 위해서만 존재 <xref:System.IO.Stream>, 사용할 수 없습니다.</xref:System.IO.Stream>"
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "이 속성은 지원 되지 않습니다."
  overload: System.Security.Cryptography.CryptoStream.Position*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "이 속성은 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Read(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 스트림에서 바이트 시퀀스를 읽고 읽은 바이트 수 만큼 스트림 내 위치를 앞으로 이동 합니다."
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "바이트 배열입니다. 최대 `count` 바이트가 현재 스트림에서 읽은 /에 저장 된 `buffer`합니다."
    - id: offset
      type: System.Int32
      description: "바이트 오프셋 `buffer` 현재 스트림에서 읽은 데이터를 저장 하기 시작 하는 합니다."
    - id: count
      type: System.Int32
      description: "현재 스트림에서 읽을 바이트의 최대 수입니다."
    return:
      type: System.Int32
      description: "바이트은 버퍼 안으로 읽어들인 총 수입니다. 이 바이트 수가 경우 요청 된 바이트 수를 현재 사용할 수 없는 경우&0;은 스트림의 끝에 도달한 수보다 작을 수 있습니다."
  overload: System.Security.Cryptography.CryptoStream.Read*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> 현재와 관련 된 <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> 개체가 내부 스트림에 일치 하지 않습니다.  사용 하는 경우이 예외가 throw 되는 예를 들어 <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> 를 쓰기 전용인 기본 스트림을 사용 합니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> offset </code> 매개 변수는&0; 보다 작은 합니다.       -또는- <code> count </code> 매개 변수는&0; 보다 작은 합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "합계가 <code> count </code> 및 <code> offset </code> 매개 변수 버퍼의 길이 보다 깁니다."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 스트림에서 바이트의 시퀀스를 비동기적으로 읽고, 읽은 바이트 수 만큼 스트림 내 위치를 이동 하 고 취소 요청을 모니터링 합니다."
  remarks: "ReadAsync와를 호출 하 여 시작 해야 합니다는 `await` (C#) 또는 `Await` (Visual Basic) 연산자는 작업이 완료 될 때까지 메서드의 실행을 일시 중단 합니다. 자세한 내용은 참조 [Async 및 Await를 사용한 비동기 프로그래밍](~/add/includes/ajax-current-ext-md.md)합니다.       반환된 된 작업에 포함 된 완료 되기 전에 작업이 취소 되는 경우는 <xref:System.Threading.Tasks.TaskStatus>에 대 한 값은 <xref:System.Threading.Tasks.Task.Status%2A>속성.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus>"
  syntax:
    content: public override System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "데이터를 쓸 버퍼입니다."
    - id: offset
      type: System.Int32
      description: "바이트 오프셋 `buffer` 데이터 스트림에서 쓰기를 시작할입니다."
    - id: count
      type: System.Int32
      description: "읽을 바이트 수의 최대 수입니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "취소 요청을 모니터링할 토큰입니다. 기본값은 <xref:System.Threading.CancellationToken.None*>.</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "나타내는 비동기 읽기 작업입니다. 작업 개체의 값 <code> TResult </code> 바이트은 버퍼 안으로 읽어들인 총 수를 포함 하는 매개 변수입니다. 결과는 바이트 수가 요청 된 수보다 작을 경우 현재 사용 가능한 바이트 수가 요청 된 수보다 작으면 스트림의 끝에 도달한 경우 0 (영) 수 수 있습니다."
  overload: System.Security.Cryptography.CryptoStream.ReadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>또는 <code>count</code> 음수입니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "총 <code> offset </code> 및 <code> count </code> 버퍼 길이 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "스트림이 읽기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "스트림이 삭제 되었습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "스트림을 현재 이전 읽기 작업에서 사용 중입니다."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: CryptoStream.Seek(Int64,SeekOrigin)
  fullName: System.Security.Cryptography.CryptoStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 스트림 내의 위치를 설정 합니다."
  remarks: "이 메서드를 상속 하기 위해서만 존재 <xref:System.IO.Stream>, 사용할 수 없습니다.</xref:System.IO.Stream>"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "변수에 상대적인 바이트 오프셋은 `origin` 매개 변수입니다."
    - id: origin
      type: System.IO.SeekOrigin
      description: "A <xref:System.IO.SeekOrigin>새 위치를 가져오는 데 참조 위치를 나타내는 개체입니다.</xref:System.IO.SeekOrigin>"
    return:
      type: System.Int64
      description: "이 메서드가 지원 되지 않습니다."
  overload: System.Security.Cryptography.CryptoStream.Seek*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "이 메서드가 지원 되지 않습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: CryptoStream.SetLength(Int64)
  fullName: System.Security.Cryptography.CryptoStream.SetLength(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 스트림의 길이 가져오거나 설정 합니다."
  remarks: "이 속성에서 상속 하기 위해서만 존재 <xref:System.IO.Stream>, 사용할 수 없습니다.</xref:System.IO.Stream>"
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "현재 스트림에 바이트에서의 원하는 길이입니다."
  overload: System.Security.Cryptography.CryptoStream.SetLength*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "이 속성에서 상속 하기 위해서만 존재 <xref:System.IO.Stream>, 사용할 수 없습니다.</xref:System.IO.Stream>"
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Write(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 바이트 시퀀스를 쓰고 <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> 쓴 바이트 수 만큼 스트림 내의 현재 위치를 앞으로 이동 합니다."
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "바이트 배열입니다. 이 메서드는 복사 `count` 바이트 `buffer` 를 현재 스트림에 합니다."
    - id: offset
      type: System.Int32
      description: "바이트 오프셋 `buffer` 를 현재 스트림에 바이트 복사를 시작 하는 합니다."
    - id: count
      type: System.Int32
      description: "현재 스트림에 쓸 바이트의 수입니다."
  overload: System.Security.Cryptography.CryptoStream.Write*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> 현재와 관련 된 <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> 개체가 내부 스트림에 일치 하지 않습니다.  사용 하는 경우이 예외가 throw 되는 예를 들어 <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> 만 읽을 수 있는 기본 스트림을 사용 합니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> offset </code> 매개 변수는&0; 보다 작은 합니다.       -또는- <code> count </code> 매개 변수는&0; 보다 작은 합니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "합계는 <code> count </code> 및 <code> offset </code> 매개 변수 버퍼의 길이 보다 깁니다."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재 스트림에 바이트 시퀀스를 비동기적으로 씁니다, 그리고 쓰여진 바이트 수 만큼 스트림 내의 현재 위치를 이동 하 고 취소 요청을 모니터링 합니다."
  remarks: "WriteAsync와를 호출 하 여 시작 해야 합니다는 `await` (C#) 또는 `Await` (Visual Basic) 연산자는 작업이 완료 될 때까지 메서드의 실행을 일시 중단 합니다. 자세한 내용은 참조 [Async 및 Await를 사용한 비동기 프로그래밍](~/add/includes/ajax-current-ext-md.md)합니다.       반환된 된 작업에 포함 된 완료 되기 전에 작업이 취소 되는 경우는 <xref:System.Threading.Tasks.TaskStatus>에 대 한 값은 <xref:System.Threading.Tasks.Task.Status%2A>속성.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus>"
  syntax:
    content: public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "데이터를 쓸 버퍼입니다."
    - id: offset
      type: System.Int32
      description: "0부터 시작 하는 바이트 오프셋 `buffer` 스트림에 바이트를 쓰기 시작할입니다."
    - id: count
      type: System.Int32
      description: "쓸 바이트의 최대 수입니다."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "취소 요청을 모니터링할 토큰입니다. 기본값은 <xref:System.Threading.CancellationToken.None*>.</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task
      description: "비동기 쓰기 작업을 나타내는 작업입니다."
  overload: System.Security.Cryptography.CryptoStream.WriteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>또는 <code>count</code> 음수입니다."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "총 <code> offset </code> 및 <code> count </code> 버퍼 길이 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "스트림이 쓰기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "스트림이 삭제 되었습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "스트림을 현재 이전 쓰기 작업에서 사용 중입니다."
  platform:
  - net462
references:
- uid: System.IO.Stream
  isExternal: false
  name: System.IO.Stream
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  nameWithType: CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  fullName: System.Security.Cryptography.CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Security.Cryptography.CryptoStreamMode
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptoStreamMode
  nameWithType: CryptoStreamMode
  fullName: System.Security.Cryptography.CryptoStreamMode
- uid: System.Security.Cryptography.CryptoStream.CanRead
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanRead
  nameWithType: CryptoStream.CanRead
  fullName: System.Security.Cryptography.CryptoStream.CanRead
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CryptoStream.CanSeek
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanSeek
  nameWithType: CryptoStream.CanSeek
  fullName: System.Security.Cryptography.CryptoStream.CanSeek
- uid: System.Security.Cryptography.CryptoStream.CanWrite
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanWrite
  nameWithType: CryptoStream.CanWrite
  fullName: System.Security.Cryptography.CryptoStream.CanWrite
- uid: System.Security.Cryptography.CryptoStream.Clear
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Clear()
  nameWithType: CryptoStream.Clear()
  fullName: System.Security.Cryptography.CryptoStream.Clear()
- uid: System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: CryptoStream.Dispose(Boolean)
  fullName: System.Security.Cryptography.CryptoStream.Dispose(Boolean)
- uid: System.Security.Cryptography.CryptoStream.Flush
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Flush()
  nameWithType: CryptoStream.Flush()
  fullName: System.Security.Cryptography.CryptoStream.Flush()
- uid: System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushAsync(CancellationToken)
  nameWithType: CryptoStream.FlushAsync(CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.FlushAsync(CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushFinalBlock()
  nameWithType: CryptoStream.FlushFinalBlock()
  fullName: System.Security.Cryptography.CryptoStream.FlushFinalBlock()
- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: HasFlushedFinalBlock
  nameWithType: CryptoStream.HasFlushedFinalBlock
  fullName: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
- uid: System.Security.Cryptography.CryptoStream.Length
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Length
  nameWithType: CryptoStream.Length
  fullName: System.Security.Cryptography.CryptoStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Security.Cryptography.CryptoStream.Position
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Position
  nameWithType: CryptoStream.Position
  fullName: System.Security.Cryptography.CryptoStream.Position
- uid: System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Read(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Read(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: CryptoStream.Seek(Int64,SeekOrigin)
  fullName: System.Security.Cryptography.CryptoStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: CryptoStream.SetLength(Int64)
  fullName: System.Security.Cryptography.CryptoStream.SetLength(Int64)
- uid: System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Write(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Write(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.Security.Cryptography.CryptoStream.#ctor*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CryptoStream
  nameWithType: CryptoStream.CryptoStream
- uid: System.Security.Cryptography.CryptoStream.CanRead*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanRead
  nameWithType: CryptoStream.CanRead
- uid: System.Security.Cryptography.CryptoStream.CanSeek*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanSeek
  nameWithType: CryptoStream.CanSeek
- uid: System.Security.Cryptography.CryptoStream.CanWrite*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanWrite
  nameWithType: CryptoStream.CanWrite
- uid: System.Security.Cryptography.CryptoStream.Clear*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Clear
  nameWithType: CryptoStream.Clear
- uid: System.Security.Cryptography.CryptoStream.Dispose*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Dispose
  nameWithType: CryptoStream.Dispose
- uid: System.Security.Cryptography.CryptoStream.Flush*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Flush
  nameWithType: CryptoStream.Flush
- uid: System.Security.Cryptography.CryptoStream.FlushAsync*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushAsync
  nameWithType: CryptoStream.FlushAsync
- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushFinalBlock
  nameWithType: CryptoStream.FlushFinalBlock
- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: HasFlushedFinalBlock
  nameWithType: CryptoStream.HasFlushedFinalBlock
- uid: System.Security.Cryptography.CryptoStream.Length*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Length
  nameWithType: CryptoStream.Length
- uid: System.Security.Cryptography.CryptoStream.Position*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Position
  nameWithType: CryptoStream.Position
- uid: System.Security.Cryptography.CryptoStream.Read*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Read
  nameWithType: CryptoStream.Read
- uid: System.Security.Cryptography.CryptoStream.ReadAsync*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: ReadAsync
  nameWithType: CryptoStream.ReadAsync
- uid: System.Security.Cryptography.CryptoStream.Seek*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Seek
  nameWithType: CryptoStream.Seek
- uid: System.Security.Cryptography.CryptoStream.SetLength*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: SetLength
  nameWithType: CryptoStream.SetLength
- uid: System.Security.Cryptography.CryptoStream.Write*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Write
  nameWithType: CryptoStream.Write
- uid: System.Security.Cryptography.CryptoStream.WriteAsync*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: WriteAsync
  nameWithType: CryptoStream.WriteAsync
