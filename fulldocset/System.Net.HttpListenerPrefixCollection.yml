### YamlMime:ManagedReference
items:
- uid: System.Net.HttpListenerPrefixCollection
  id: HttpListenerPrefixCollection
  children:
  - System.Net.HttpListenerPrefixCollection.Add(System.String)
  - System.Net.HttpListenerPrefixCollection.Clear
  - System.Net.HttpListenerPrefixCollection.Contains(System.String)
  - System.Net.HttpListenerPrefixCollection.CopyTo(System.Array,System.Int32)
  - System.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)
  - System.Net.HttpListenerPrefixCollection.Count
  - System.Net.HttpListenerPrefixCollection.GetEnumerator
  - System.Net.HttpListenerPrefixCollection.IsReadOnly
  - System.Net.HttpListenerPrefixCollection.IsSynchronized
  - System.Net.HttpListenerPrefixCollection.Remove(System.String)
  - System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: HttpListenerPrefixCollection
  nameWithType: HttpListenerPrefixCollection
  fullName: System.Net.HttpListenerPrefixCollection
  type: Class
  summary: "에 대 한 식별자 URI (Uniform Resource) 접두사를 저장 하는 데 컬렉션을 나타냅니다 <xref href=&quot;System.Net.HttpListener&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Net.HttpListener.Prefixes%2A>속성이이 컬렉션의 인스턴스를 반환 합니다.</xref:System.Net.HttpListener.Prefixes%2A>"
  example:
  - "The following code example creates an <xref:System.Net.HttpListener> and adds user-specified prefixes to its HttpListenerPrefixCollection.  \n  \n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/t-system.net.httplistene_1_1.cs)]"
  syntax:
    content: 'public class HttpListenerPrefixCollection : System.Collections.Generic.ICollection<string>, System.Collections.Generic.IEnumerable<string>'
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<System.String>
  - System.Collections.Generic.IEnumerable<System.String>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.HttpListenerPrefixCollection.Add(System.String)
  id: Add(System.String)
  parent: System.Net.HttpListenerPrefixCollection
  langs:
  - csharp
  name: Add(String)
  nameWithType: HttpListenerPrefixCollection.Add(String)
  fullName: System.Net.HttpListenerPrefixCollection.Add(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "컬렉션에 식별자 URI (Uniform Resource) 접두사를 추가합니다."
  remarks: "이 메서드는 연결 된 관리 되는 접두사의 집합에는 URI 접두사는 추가 <xref:System.Net.HttpListener>개체입니다.</xref:System.Net.HttpListener> 확인할 때 `uriPrefix` 유효한 지 확인, 대/소문자는 무시 됩니다.       URI 접두사 문자열은 이루어져 체계 (http 또는 https), 호스트, 포트는 (옵션) 및 선택적 경로 예를 들어 &quot;`http://www.contoso.com:8080/customerData``/`&quot;입니다. 접두사는 슬래시 (&quot;/&quot;)으로 종결 되어야 합니다. <xref:System.Net.HttpListener>가장 일치 하는 요청된 URI 접두사와 함께 요청에 응답 합니다.</xref:System.Net.HttpListener> 여러 <xref:System.Net.HttpListener>개체 같은 접두사를 추가할 수 없습니다.</xref:System.Net.HttpListener> <xref:System.Net.HttpListenerException>이면 예외가 발생 한 <xref:System.Net.HttpListener>접두사를 이미 사용 하 여 추가 합니다.</xref:System.Net.HttpListener> </xref:System.Net.HttpListenerException>       호스트 요소로 바꿀 수 있습니다는 포트를 지정 하는 경우 &quot;`*`&quot; 임을 나타내는 <xref:System.Net.HttpListener>요청된 된 URI는 다른 접두사와 일치 하지 않으면 포트에 전송 된 요청을 수락 합니다.</xref:System.Net.HttpListener> 예를 들어 모든 요청을 받을 때 요청된 된 URI에서 다른 처리 되지 않은 경우 8080 포트로 전송 <xref:System.Net.HttpListener>, 접두사는 &quot;`http://*:8080``/`&quot;.</xref:System.Net.HttpListener> 마찬가지로, 지정 하는 <xref:System.Net.HttpListener>포트에 전송 하는 모든 요청을 수락 호스트 요소와 바꿀는 &quot;`+`&quot;character&quot;`https://+:8080`/&quot;.</xref:System.Net.HttpListener> &quot;`*`&quot;및&quot;`+`&quot; 문자는 한 경로가 포함 된 접두사에 사용할 수 있습니다.       4.5.3.NET 및 Windows 10 부터는 와일드 카드 하위 도메인에서 관리 되는 URI 접두사에 지원 됩니다는 <xref:System.Net.HttpListener>개체입니다.</xref:System.Net.HttpListener> 와일드 카드 하위 도메인을 지정 하려면 사용는 &quot;*&quot; 문자는 URI 접두사 호스트의 일부로: 예를 들어 `http://*.foo.com/`, HttpListenerPrefixCollection.Add 메서드에 인수로 전달이 하입니다. 4.5.3.NET 및 Windows 10;이 작업은 이전 버전에서는이 생성 한<xref:System.Net.HttpListenerException></xref:System.Net.HttpListenerException>"
  example:
  - "The following code example creates an <xref:System.Net.HttpListener> and adds user-specified prefixes to its <xref:System.Net.HttpListenerPrefixCollection>.  \n  \n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/m-system.net.httplistene_16_1.cs)]"
  syntax:
    content: public void Add (string uriPrefix);
    parameters:
    - id: uriPrefix
      type: System.String
      description: "A <xref:System.String>들어오는 요청에서 비교 되는 URI 정보를 식별 하는.</xref:System.String> 접두사는 슬래시 (&quot;/&quot;)으로 종결 되어야 합니다."
  overload: System.Net.HttpListenerPrefixCollection.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>uriPrefix</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>uriPrefix</code>http:// 또는 https:// 체계를 사용 하지 않습니다. 에 대해 지원 되는 스키마만 이들은 <xref href=&quot;System.Net.HttpListener&quot;> </xref> 개체입니다.       -또는- <code>uriPrefix</code> 올바른 형식의 URI 접두사가 아닙니다. 있는지 확인 하십시오 문자열으로 종료 되는 &quot;/&quot;입니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.HttpListener&quot;> </xref> 와 연결 된 컬렉션 닫혀 있습니다."
  - type: System.Net.HttpListenerException
    commentId: T:System.Net.HttpListenerException
    description: "Windows 함수 호출에 실패 했습니다. 예외의 <xref:System.Net.HttpListenerException.ErrorCode*>예외의 원인을 확인 하는 속성.</xref:System.Net.HttpListenerException.ErrorCode*> 다른 경우이 예외가 throw 됩니다 <xref href=&quot;System.Net.HttpListener&quot;> </xref> 접두사를 이미 추가한 <code> uriPrefix </code>합니다."
  platform:
  - net462
- uid: System.Net.HttpListenerPrefixCollection.Clear
  id: Clear
  parent: System.Net.HttpListenerPrefixCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: HttpListenerPrefixCollection.Clear()
  fullName: System.Net.HttpListenerPrefixCollection.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "컬렉션에서 모든 식별자 URI (Uniform Resource) 접두사를 제거합니다."
  remarks: "이 메서드를 호출한 후를 시작할 수 없는 연결 된 <xref:System.Net.HttpListener>; 새로운 접두사를 추가 하지 않고 작업을 하려고 하면 예외가 throw 됩니다.</xref:System.Net.HttpListener>"
  example:
  - "The following code example removes all prefixes in an <xref:System.Net.HttpListenerPrefixCollection>.  \n  \n [!code-cs[Net_Listener_Basic#6](~/add/codesnippet/csharp/m-system.net.httplistene_7_1.cs)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Net.HttpListenerPrefixCollection.Clear*
  exceptions:
  - type: System.Net.HttpListenerException
    commentId: T:System.Net.HttpListenerException
    description: "Windows 함수 호출에 실패 했습니다. 예외의 <xref:System.Net.HttpListenerException.ErrorCode*>예외의 원인을 확인 하는 속성.</xref:System.Net.HttpListenerException.ErrorCode*>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.HttpListener&quot;> </xref> 와 연결 된 컬렉션 닫혀 있습니다."
  platform:
  - net462
- uid: System.Net.HttpListenerPrefixCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.Net.HttpListenerPrefixCollection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: HttpListenerPrefixCollection.Contains(String)
  fullName: System.Net.HttpListenerPrefixCollection.Contains(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "반환 된 <xref:System.Boolean>지정된 된 접두사의 컬렉션에 포함 되어 있는지 여부를 나타내는 값입니다.</xref:System.Boolean>"
  remarks: "지정된 된 접두사 기존 값과 정확히 일치 해야 합니다."
  example:
  - "The following code example checks to see whether a user-specified prefix is contained in the prefix collection of an <xref:System.Net.HttpListener>.  \n  \n [!code-cs[Net_Listener_Basic#4](~/add/codesnippet/csharp/m-system.net.httplistene_14_1.cs)]"
  syntax:
    content: public bool Contains (string uriPrefix);
    parameters:
    - id: uriPrefix
      type: System.String
      description: "<xref:System.String>테스트할 식별자 URI (Uniform Resource) 접두사를 포함 하</xref:System.String> 는"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 컬렉션에 지정 된 접두사가 포함 되어 있으면 <code> uriPrefix </code>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.HttpListenerPrefixCollection.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>uriPrefix</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.HttpListenerPrefixCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Net.HttpListenerPrefixCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: HttpListenerPrefixCollection.CopyTo(Array,Int32)
  fullName: System.Net.HttpListenerPrefixCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "내용을 복사는 <xref href=&quot;System.Net.HttpListenerPrefixCollection&quot;> </xref> 지정 된 배열입니다."
  remarks: "배열은 문자열을 포함할 수 있어야 하며 다차원 수 없습니다."
  example:
  - "The following code example copies the prefixes in a <xref:System.Net.HttpListenerPrefixCollection>.  \n  \n [!code-cs[Net_Listener_Basic#7](~/add/codesnippet/csharp/m-system.net.httplistene_18_1.cs)]"
  syntax:
    content: public void CopyTo (Array array, int offset);
    parameters:
    - id: array
      type: System.Array
      description: "1 차원 <xref:System.Array>이 컬렉션의 식별자 URI (Uniform Resource) 접두사 문자열을 받는.</xref:System.Array>"
    - id: offset
      type: System.Int32
      description: "인덱스는&0;부터 시작 `array` 복사가 시작 되는 합니다."
  overload: System.Net.HttpListenerPrefixCollection.CopyTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>차원이 여러 개 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "이 컬렉션에 저장할 수 있는 보다 더 많은 요소를 포함 <code> array </code> 부터 <code> offset </code>합니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.HttpListener&quot;> </xref> 와 연결 된 컬렉션 닫혀 있습니다."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>array</code>문자열 값을 저장할 수 없습니다."
  platform:
  - net462
- uid: System.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)
  id: CopyTo(System.String[],System.Int32)
  parent: System.Net.HttpListenerPrefixCollection
  langs:
  - csharp
  name: CopyTo(String[],Int32)
  nameWithType: HttpListenerPrefixCollection.CopyTo(String[],Int32)
  fullName: System.Net.HttpListenerPrefixCollection.CopyTo(String[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "내용을 복사는 <xref href=&quot;System.Net.HttpListenerPrefixCollection&quot;> </xref> 지정 된 문자열 배열입니다."
  remarks: "배열은 문자열을 포함할 수 있어야 하며 다차원 수 없습니다."
  example:
  - "The following code example copies the prefixes in a <xref:System.Net.HttpListenerPrefixCollection>.  \n  \n [!code-cs[Net_Listener_Basic#7](~/add/codesnippet/csharp/m-system.net.httplistene_6_1.cs)]"
  syntax:
    content: public void CopyTo (string[] array, int offset);
    parameters:
    - id: array
      type: System.String[]
      description: "이 컬렉션의 식별자 URI (Uniform Resource) 접두사 문자열을 수신 하는 하나의 차원 문자열 배열입니다."
    - id: offset
      type: System.Int32
      description: "인덱스는&0;부터 시작 `array` 복사가 시작 되는 합니다."
  overload: System.Net.HttpListenerPrefixCollection.CopyTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>차원이 여러 개 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "이 컬렉션에 저장할 수 있는 보다 더 많은 요소를 포함 <code> array </code> 부터 <code> offset </code>합니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.HttpListener&quot;> </xref> 와 연결 된 컬렉션 닫혀 있습니다."
  platform:
  - net462
- uid: System.Net.HttpListenerPrefixCollection.Count
  id: Count
  parent: System.Net.HttpListenerPrefixCollection
  langs:
  - csharp
  name: Count
  nameWithType: HttpListenerPrefixCollection.Count
  fullName: System.Net.HttpListenerPrefixCollection.Count
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "컬렉션에 포함 된 접두사의 수를 가져옵니다."
  remarks: ''
  example:
  - "The following code example displays the prefixes in a collection.  \n  \n [!code-cs[Net_Listener_Basic#1](~/add/codesnippet/csharp/p-system.net.httplistene_43_1.cs)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>이 컬렉션에는 접두사 수를 포함 하는.</xref:System.Int32>"
  overload: System.Net.HttpListenerPrefixCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerPrefixCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Net.HttpListenerPrefixCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: HttpListenerPrefixCollection.GetEnumerator()
  fullName: System.Net.HttpListenerPrefixCollection.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "컬렉션을 반복 하는 데 사용할 수 있는 개체를 반환 합니다."
  remarks: "이 메서드에 의해 반환 되는 개체는 처음이 컬렉션의 첫 번째 요소 앞에 배치 됩니다. 호출 해야 합니다는 <xref:System.Collections.IEnumerator.MoveNext%2A>메서드 전에 첫 번째 요소에 액세스할 수 있습니다.</xref:System.Collections.IEnumerator.MoveNext%2A> 현재 위치에 있는 요소에 액세스 하려면 호출는 <xref:System.Collections.IEnumerator.Current%2A>속성.</xref:System.Collections.IEnumerator.Current%2A>       열거자를 사용 하는 동안 컬렉션을 수정 하지 마십시오. 열거자 중인 동안 컬렉션이 수정 되는 경우 사용 하 여, <xref:System.Collections.IEnumerator.MoveNext%2A>또는 <xref:System.Collections.IEnumerator.Reset%2A> <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> 로 설정 하면</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 호출 하 여 위치를 설정 하지       열거자의 대 한 자세한 내용은 설명서를 참조 하십시오.는 <xref:System.Collections.IEnumerator>클래스 및 <xref:System.Collections.IEnumerable.GetEnumerator%2A>메서드.</xref:System.Collections.IEnumerable.GetEnumerator%2A> </xref:System.Collections.IEnumerator>"
  example:
  - "The following code example demonstrates enumerating through a collection. Note that the Visual Basic and C# examples use language specific statements to enumerate through the collection instead of retrieving the enumerator.  \n  \n [!code-cs[Net_Listener_Basic#1](~/add/codesnippet/csharp/m-system.net.httplistene_8_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerator<string> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.String}
      description: "구현 하는 개체는 <xref:System.Collections.IEnumerator>인터페이스를이 컬렉션의 문자열에 대 한 액세스를 제공 합니다.</xref:System.Collections.IEnumerator>"
  overload: System.Net.HttpListenerPrefixCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerPrefixCollection.IsReadOnly
  id: IsReadOnly
  parent: System.Net.HttpListenerPrefixCollection
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: HttpListenerPrefixCollection.IsReadOnly
  fullName: System.Net.HttpListenerPrefixCollection.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "읽기 전용 컬렉션에 대 한 액세스 적용 되는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "항상 반환 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.HttpListenerPrefixCollection.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerPrefixCollection.IsSynchronized
  id: IsSynchronized
  parent: System.Net.HttpListenerPrefixCollection
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: HttpListenerPrefixCollection.IsSynchronized
  fullName: System.Net.HttpListenerPrefixCollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "(스레드로부터 안전한 지) 컬렉션에 대 한 액세스가 동기화 되어 있는지 여부를 나타내는 값을 가져옵니다."
  remarks: "컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다. 을 열거 하는 동안 스레드로부터 안전을 보장 하려면 전체 열거 동안 컬렉션을 잠글 또는 다른 스레드에서 변경 된 내용에서 발생 한 예외를 catch 합니다."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "이 속성은 항상 반환 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.HttpListenerPrefixCollection.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerPrefixCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.Net.HttpListenerPrefixCollection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: HttpListenerPrefixCollection.Remove(String)
  fullName: System.Net.HttpListenerPrefixCollection.Remove(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "지정 된 식별자 URI (Uniform Resource)에 의해 처리 되는 접두사의 목록에서 제거 된 <xref href=&quot;System.Net.HttpListener&quot;> </xref> 개체입니다."
  remarks: "경우 `uriPrefix` 되는 컬렉션에 없는이 메서드는 없습니다."
  syntax:
    content: public bool Remove (string uriPrefix);
    parameters:
    - id: uriPrefix
      type: System.String
      description: "A <xref:System.String>제거 하려면 URI 접두사를 포함 하는.</xref:System.String>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <code> uriPrefix </code> 에 <xref href=&quot;System.Net.HttpListenerPrefixCollection&quot;> </xref> 제거 하 고 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.HttpListenerPrefixCollection.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>uriPrefix</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.HttpListenerException
    commentId: T:System.Net.HttpListenerException
    description: "Windows 함수 호출에 실패 했습니다. 예외의 이유를 확인 하는 예외 오류 코드를 확인 합니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.HttpListener&quot;> </xref> 와 연결 된 컬렉션 닫혀 있습니다."
  platform:
  - net462
- uid: System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Net.HttpListenerPrefixCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: HttpListenerPrefixCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Net.HttpListenerPrefixCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "컬렉션을 반복 하는 데 사용할 수 있는 개체를 반환 합니다."
  remarks: "이 메서드에 의해 반환 되는 개체는 처음이 컬렉션의 첫 번째 요소 앞에 배치 됩니다. 호출 해야 합니다는 <xref:System.Collections.IEnumerator.MoveNext%2A>메서드 전에 첫 번째 요소에 액세스할 수 있습니다.</xref:System.Collections.IEnumerator.MoveNext%2A> 현재 위치에 있는 요소에 액세스 하려면 호출는 <xref:System.Collections.IEnumerator.Current%2A>속성.</xref:System.Collections.IEnumerator.Current%2A>       열거자를 사용 하는 동안 컬렉션을 수정 하지 마십시오. 열거자 중인 동안 컬렉션이 수정 되는 경우 사용 하 여, <xref:System.Collections.IEnumerator.MoveNext%2A>또는 <xref:System.Collections.IEnumerator.Reset%2A> <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> 로 설정 하면</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 호출 하 여 위치를 설정 하지       열거자의 대 한 자세한 내용은 설명서를 참조 하십시오.는 <xref:System.Collections.IEnumerator>클래스 및 <xref:System.Collections.IEnumerable.GetEnumerator%2A>메서드.</xref:System.Collections.IEnumerable.GetEnumerator%2A> </xref:System.Collections.IEnumerator>"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "구현 하는 개체는 <xref:System.Collections.IEnumerator>인터페이스를이 컬렉션의 문자열에 대 한 액세스를 제공 합니다.</xref:System.Collections.IEnumerator>"
  overload: System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Net.HttpListenerException
  parent: System.Net
  isExternal: false
  name: HttpListenerException
  nameWithType: HttpListenerException
  fullName: System.Net.HttpListenerException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Net.HttpListenerPrefixCollection.Add(System.String)
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: Add(String)
  nameWithType: HttpListenerPrefixCollection.Add(String)
  fullName: System.Net.HttpListenerPrefixCollection.Add(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpListenerPrefixCollection.Clear
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: Clear()
  nameWithType: HttpListenerPrefixCollection.Clear()
  fullName: System.Net.HttpListenerPrefixCollection.Clear()
- uid: System.Net.HttpListenerPrefixCollection.Contains(System.String)
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: Contains(String)
  nameWithType: HttpListenerPrefixCollection.Contains(String)
  fullName: System.Net.HttpListenerPrefixCollection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.HttpListenerPrefixCollection.CopyTo(System.Array,System.Int32)
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: HttpListenerPrefixCollection.CopyTo(Array,Int32)
  fullName: System.Net.HttpListenerPrefixCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: CopyTo(String[],Int32)
  nameWithType: HttpListenerPrefixCollection.CopyTo(String[],Int32)
  fullName: System.Net.HttpListenerPrefixCollection.CopyTo(String[],Int32)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.HttpListenerPrefixCollection.Count
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: Count
  nameWithType: HttpListenerPrefixCollection.Count
  fullName: System.Net.HttpListenerPrefixCollection.Count
- uid: System.Net.HttpListenerPrefixCollection.GetEnumerator
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: HttpListenerPrefixCollection.GetEnumerator()
  fullName: System.Net.HttpListenerPrefixCollection.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<String>
  nameWithType: IEnumerator<String>
  fullName: System.Collections.Generic.IEnumerator<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.HttpListenerPrefixCollection.IsReadOnly
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: HttpListenerPrefixCollection.IsReadOnly
  fullName: System.Net.HttpListenerPrefixCollection.IsReadOnly
- uid: System.Net.HttpListenerPrefixCollection.IsSynchronized
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: HttpListenerPrefixCollection.IsSynchronized
  fullName: System.Net.HttpListenerPrefixCollection.IsSynchronized
- uid: System.Net.HttpListenerPrefixCollection.Remove(System.String)
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: Remove(String)
  nameWithType: HttpListenerPrefixCollection.Remove(String)
  fullName: System.Net.HttpListenerPrefixCollection.Remove(String)
- uid: System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: HttpListenerPrefixCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Net.HttpListenerPrefixCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Net.HttpListenerPrefixCollection.Add*
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: Add
  nameWithType: HttpListenerPrefixCollection.Add
- uid: System.Net.HttpListenerPrefixCollection.Clear*
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: Clear
  nameWithType: HttpListenerPrefixCollection.Clear
- uid: System.Net.HttpListenerPrefixCollection.Contains*
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: Contains
  nameWithType: HttpListenerPrefixCollection.Contains
- uid: System.Net.HttpListenerPrefixCollection.CopyTo*
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: CopyTo
  nameWithType: HttpListenerPrefixCollection.CopyTo
- uid: System.Net.HttpListenerPrefixCollection.Count*
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: Count
  nameWithType: HttpListenerPrefixCollection.Count
- uid: System.Net.HttpListenerPrefixCollection.GetEnumerator*
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: HttpListenerPrefixCollection.GetEnumerator
- uid: System.Net.HttpListenerPrefixCollection.IsReadOnly*
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: HttpListenerPrefixCollection.IsReadOnly
- uid: System.Net.HttpListenerPrefixCollection.IsSynchronized*
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: HttpListenerPrefixCollection.IsSynchronized
- uid: System.Net.HttpListenerPrefixCollection.Remove*
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: Remove
  nameWithType: HttpListenerPrefixCollection.Remove
- uid: System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Net.HttpListenerPrefixCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: HttpListenerPrefixCollection.System.Collections.IEnumerable.GetEnumerator
