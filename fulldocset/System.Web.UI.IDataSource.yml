### YamlMime:ManagedReference
items:
- uid: System.Web.UI.IDataSource
  id: IDataSource
  children:
  - System.Web.UI.IDataSource.DataSourceChanged
  - System.Web.UI.IDataSource.GetView(System.String)
  - System.Web.UI.IDataSource.GetViewNames
  langs:
  - csharp
  name: IDataSource
  nameWithType: IDataSource
  fullName: System.Web.UI.IDataSource
  type: Interface
  summary: "데이터 바인딩된 컨트롤에 바인딩하는 추상 데이터 원본을 나타냅니다."
  remarks: "ASP.NET 웹 서버 컨트롤의 데이터를 일관성 있게에 바인딩할 수 있도록 하는 컨트롤 데이터 바인딩 아키텍처를 지원 합니다. 데이터에 바인딩되는 웹 서버 컨트롤은 데이터 바인딩된 컨트롤 및 데이터 소스 제어 바인딩 이라고 하는 클래스 라고 합니다. 데이터 소스 제어에서 모든 데이터 소스를 나타낼 수 있습니다: 관계형 데이터베이스, 파일, 스트림, 비즈니스 개체 및 등입니다. 데이터 원본 소스 나 기본 데이터의 형식에 관계 없이 데이터 바인딩된 컨트롤에 일관 된 방식으로의 데이터 표시를 제어합니다.       사용자 고유의 사용자 지정 ASP.NET 데이터 소스 제어를 구현 하려는 경우에 IDataSource 인터페이스를 구현 합니다.       IDataSource 인터페이스를 구현 하는 모든 클래스는 데이터 소스 제어입니다. IDataSource 인터페이스는 해당 역할을 제어 하 고는 두 가지 방법으로 기본 데이터 바인딩 아키텍처 개념 중 하나를 정의 하는 모든 ASP.NET 데이터 원본에 대 한 기초:는 <xref:System.Web.UI.IDataSource.GetView%2A>메서드 및 <xref:System.Web.UI.IDataSource.GetViewNames%2A>메서드.</xref:System.Web.UI.IDataSource.GetViewNames%2A> </xref:System.Web.UI.IDataSource.GetView%2A> 이 개념은 모든 데이터 소스 컨트롤이 데이터에 대해 하나 이상의 명명 된 뷰를 지원 합니다. 데이터 원본 뷰 개체는 비슷합니다는 <xref:System.Data.DataView>추상화는 <xref:System.Data>네임 스페이스: 정렬, 필터링 및 보기를 정의 하는 다른 데이터 작업에 대 한 데이터의 보기를 사용자 지정 된 된 데이터 바인딩 가능 합니다.</xref:System.Data> </xref:System.Data.DataView> 본질적으로 데이터 소스 제어는 아무 작업도 수행 이상은 뷰 데이터를 검색 합니다.       데이터 소스 제어는 하나 이상의 연결 된 데이터 원본 뷰 개체를 가질 수 있습니다. 일부 데이터 소스와 같은 관계형 데이터베이스를 표시 하는 것을 포함 하 여 컨트롤 <xref:System.Web.UI.WebControls.SqlDataSource>및 <xref:System.Web.UI.WebControls.AccessDataSource>, 보기가 하나만 지원 합니다.</xref:System.Web.UI.WebControls.AccessDataSource> </xref:System.Web.UI.WebControls.SqlDataSource> 다른 데이터 소스와 같은 계층적 데이터 소스 컨트롤을 포함 하 여 컨트롤 <xref:System.Web.UI.WebControls.SiteMapDataSource>, 여러 뷰를 지원 합니다.</xref:System.Web.UI.WebControls.SiteMapDataSource> 데이터 원본 뷰는 데이터 원본 및 지 원하는 작업의 기능을 정의 합니다.       요약 하면, 데이터 소스 컨트롤 IDataSource 인터페이스를 구현, 나타내는 데이터 원본에서 데이터 검색을 항상 지원을 나타내지만, 데이터에 대해 하나 이상의 명명 된 뷰를 지원 합니다. 데이터 소스 컨트롤은 항상 경우와 같이 필요에 따라 데이터를 검색 `DataBind` 데이터 바인딩된 컨트롤에서 호출 됩니다."
  example:
  - "The following code example demonstrates how a class can implement the methods defined by the IDataSource interface to provide data to data-bound controls. The data source control in this example acts as a data source on a comma-separated value file, and can be used by any data-bound control to display comma-separated file data. This code example is part of a larger example provided for the <xref:System.Web.UI.DataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#1](~/add/codesnippet/csharp/t-system.web.ui.idatasou_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#1](~/add/codesnippet/visualbasic/t-system.web.ui.idatasou_1.vb)]"
  syntax:
    content: public interface IDataSource
  implements: []
  platform:
  - net462
- uid: System.Web.UI.IDataSource.DataSourceChanged
  id: DataSourceChanged
  parent: System.Web.UI.IDataSource
  langs:
  - csharp
  name: DataSourceChanged
  nameWithType: IDataSource.DataSourceChanged
  fullName: System.Web.UI.IDataSource.DataSourceChanged
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "데이터 바인딩된 컨트롤에 영향을 주는 방식으로 데이터 소스 제어 변경 될 때 발생 합니다."
  remarks: "DataSourceChanged 이벤트는 데이터 바인딩된 컨트롤과 데이터 간의 데이터 바인딩에 영향을 주는 방식으로 데이터 바인딩된 컨트롤 또는 기본 데이터의 속성 변경 될 때입니다. 예를 들어는 이벤트는 같은 파일 이름 속성이 <xref:System.Web.UI.WebControls.AccessDataSource.DataFile%2A>파일 기반 데이터 소스 제어에서 속성이 변경 되.</xref:System.Web.UI.WebControls.AccessDataSource.DataFile%2A>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  syntax:
    content: public event EventHandler DataSourceChanged;
    return:
      type: System.EventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IDataSource.GetView(System.String)
  id: GetView(System.String)
  parent: System.Web.UI.IDataSource
  langs:
  - csharp
  name: GetView(String)
  nameWithType: IDataSource.GetView(String)
  fullName: System.Web.UI.IDataSource.GetView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "데이터 소스 컨트롤과 연결 된 명명 된 데이터 원본 뷰를 가져옵니다."
  remarks: "데이터 소스 컨트롤 클래스는 내부 데이터에 하나 이상의 뷰를 지원할 수 있습니다. 이러한 뷰 <xref:System.Web.UI.DataSourceView>클래스</xref:System.Web.UI.DataSourceView> 의 인스턴스로 표현 됩니다. 데이터 원본 뷰는 데이터 소스 컨트롤의 기능을 정의 하 고 기본 데이터 저장소에서 데이터를 검색 및 정렬, 삽입, 삭제 및 업데이트 같은 작업을 수행 하는 데 필요한 모든 작업을 수행 합니다.       데이터 원본 <xref:System.Web.UI.IDataSource>클래스와 연결 된 강력한 형식의 뷰 개체를 반환 하려면 가지 메서드를 구현 하는 인터페이스</xref:System.Web.UI.IDataSource> 를 구현 하는 컨트롤 클래스"
  example:
  - "The following code example demonstrates how a data source control class that implements the <xref:System.Web.UI.IDataSource> interface implements the GetView method, returning a strongly typed instance of the <xref:System.Web.UI.DataSourceView> class. Because the data source control supports only one view, it ignores the name and returns a view named with the default view name. This code example is part of a larger example provided for the <xref:System.Web.UI.DataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#3](~/add/codesnippet/csharp/m-system.web.ui.idatasou_0_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#3](~/add/codesnippet/visualbasic/m-system.web.ui.idatasou_0_1.vb)]"
  syntax:
    content: public System.Web.UI.DataSourceView GetView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "검색할 보기의 이름입니다."
    return:
      type: System.Web.UI.DataSourceView
      description: "명명 된 <xref href=&quot;System.Web.UI.DataSourceView&quot;> </xref> 연관 된 <xref href=&quot;System.Web.UI.IDataSource&quot;> </xref>합니다."
  overload: System.Web.UI.IDataSource.GetView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IDataSource.GetViewNames
  id: GetViewNames
  parent: System.Web.UI.IDataSource
  langs:
  - csharp
  name: GetViewNames()
  nameWithType: IDataSource.GetViewNames()
  fullName: System.Web.UI.IDataSource.GetViewNames()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "보기 개체와 연결 된 목록을 나타내는 이름의 컬렉션을 가져옵니다는 <xref href=&quot;System.Web.UI.IDataSource&quot;> </xref> 인터페이스입니다."
  remarks: "데이터 소스 컨트롤 클래스는 내부 데이터에 하나 이상의 명명 된 뷰를 지원할 수 있습니다. 여기서 메서드 뷰 이름은 현재 인스턴스와 관련 된 데이터 소스 컨트롤의 컬렉션을 반환 합니다. 호출자의 뷰 이름 컬렉션을 반복 하 고 개별 검색 <xref:System.Web.UI.DataSourceView>개체와 <xref:System.Web.UI.IDataSource.GetView%2A>메서드.</xref:System.Web.UI.IDataSource.GetView%2A> </xref:System.Web.UI.DataSourceView>       <xref:System.Web.UI.IDataSource>인터페이스 구현 현재 데이터 소스 컨트롤 클래스와 연결 된 개체를 보고 하는 모든 데이터 원본을 나타내는 이름 컬렉션을 반환 하려면 여기서 메서드를</xref:System.Web.UI.IDataSource> 구현 하는 클래스를 제어 하는 데이터 원본"
  example:
  - "The following code example demonstrates how a data source control that implements the <xref:System.Web.UI.IDataSource> interface implements the GetViewNames method, returning an <xref:System.Collections.ICollection> collection of names. Because the data source supports only one view, the method returns a collection of one element using the default name for the view. This code example is part of a larger example provided for the <xref:System.Web.UI.DataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#4](~/add/codesnippet/csharp/m-system.web.ui.idatasou_1_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#4](~/add/codesnippet/visualbasic/m-system.web.ui.idatasou_1_1.vb)]"
  syntax:
    content: public System.Collections.ICollection GetViewNames ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>와 관련 된 보기의 이름을 포함 하는 <xref href=&quot;System.Web.UI.IDataSource&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Web.UI.IDataSource.GetViewNames*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.IDataSource.DataSourceChanged
  parent: System.Web.UI.IDataSource
  isExternal: false
  name: DataSourceChanged
  nameWithType: IDataSource.DataSourceChanged
  fullName: System.Web.UI.IDataSource.DataSourceChanged
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Web.UI.IDataSource.GetView(System.String)
  parent: System.Web.UI.IDataSource
  isExternal: false
  name: GetView(String)
  nameWithType: IDataSource.GetView(String)
  fullName: System.Web.UI.IDataSource.GetView(String)
- uid: System.Web.UI.DataSourceView
  parent: System.Web.UI
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.IDataSource.GetViewNames
  parent: System.Web.UI.IDataSource
  isExternal: false
  name: GetViewNames()
  nameWithType: IDataSource.GetViewNames()
  fullName: System.Web.UI.IDataSource.GetViewNames()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.IDataSource.GetView*
  parent: System.Web.UI.IDataSource
  isExternal: false
  name: GetView
  nameWithType: IDataSource.GetView
- uid: System.Web.UI.IDataSource.GetViewNames*
  parent: System.Web.UI.IDataSource
  isExternal: false
  name: GetViewNames
  nameWithType: IDataSource.GetViewNames
