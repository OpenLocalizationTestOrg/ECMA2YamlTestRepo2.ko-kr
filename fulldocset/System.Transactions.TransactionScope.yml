### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionScope
  id: TransactionScope
  children:
  - System.Transactions.TransactionScope.#ctor
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.Complete
  - System.Transactions.TransactionScope.Dispose
  langs:
  - csharp
  name: TransactionScope
  nameWithType: TransactionScope
  fullName: System.Transactions.TransactionScope
  type: Class
  summary: "트랜잭션 코드 블록을 만듭니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "<xref:System.Transactions>인프라가 모두 명시적 프로그래밍 모델과 기반는 <xref:System.Transactions.Transaction>으로 클래스는 트랜잭션을 자동으로 관리 인프라에 의해 TransactionScope 클래스를 사용 하는 암시적 프로그래밍 모델을.</xref:System.Transactions.Transaction> </xref:System.Transactions>      > [!IMPORTANT] > 앰비언트 트랜잭션 컨텍스트에 자동으로 관리 되도록 TransactionScope 클래스를 사용 하 여 암시적 트랜잭션을 만드는 것이 좋습니다. TransactionScope에도 사용 해야 하 고 <xref:System.Transactions.DependentTransaction>여러 함수 호출이 나 여러 스레드 호출에서 동일한 트랜잭션 사용 해야 하는 응용 프로그램에 대 한 클래스입니다.</xref:System.Transactions.DependentTransaction> 이 모델에 대 한 자세한 내용은 참조는 [구현 하는 암시적 트랜잭션을 사용 하 여 트랜잭션 범위](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) 항목입니다. 트랜잭션 응용 프로그램 작성 방법에 대 한 자세한 내용은 참조 하십시오. [트랜잭션 응용 작성](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)합니다.       하 여 TransactionScope를 인스턴스화할 때는 `new` 문, 트랜잭션 관리자에 참여 하는 트랜잭션을 결정 합니다. 일단 결정 되 면 범위는 항상 해당 트랜잭션에 참여 합니다. 두 가지 요인에 따라 결정 됩니다: 앰비언트 트랜잭션이 있는지 여부의 값과는 `TransactionScopeOption` 생성자에서 매개 변수입니다.  앰비언트 트랜잭션이 코드에서 실행 되는 트랜잭션입니다. 정적 <xref:System.Transactions.Transaction.Current%2A> <xref:System.Transactions.Transaction>클래스</xref:System.Transactions.Transaction> 의 속성</xref:System.Transactions.Transaction.Current%2A> 을 호출 하 여 앰비언트 트랜잭션에 대 한 참조를 가져올 수 있습니다. 이 매개 변수를 사용 하는 방법에 대 한 자세한 내용은 &quot;트랜잭션 흐름 관리&quot; 섹션을 참조 하십시오는 [구현 하는 암시적 트랜잭션을 사용 하 여 트랜잭션 범위](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) 항목입니다.       예외가 발생 하지 않으면 트랜잭션 범위 내에서 (TransactionScope 초기화 사이의 개체 즉, 호출의 해당 <xref:System.Transactions.TransactionScope.Dispose%2A>메서드), 범위 참여 하는 트랜잭션은 계속 진행 합니다.</xref:System.Transactions.TransactionScope.Dispose%2A> 트랜잭션 범위 내에서 예외가 발생, 참여 하는 트랜잭션이 롤백됩니다.       트랜잭션에서 수행 하려는, 호출 해야 모든 작업을 완료 하는 응용 프로그램은 <xref:System.Transactions.TransactionScope.Complete%2A>메서드를 한 번만 트랜잭션을 커밋하는 허용 되는지 해당 트랜잭션 관리자에 게 알리기 위해.</xref:System.Transactions.TransactionScope.Complete%2A> 이 메서드를 호출 하지 못하면 트랜잭션을 중단 합니다.       에 대 한 호출에서 <xref:System.Transactions.TransactionScope.Dispose%2A>메서드 트랜잭션 범위의 끝을 표시 합니다.</xref:System.Transactions.TransactionScope.Dispose%2A> 이 메서드를 호출한 후에 발생 하는 예외는 트랜잭션에 영향을 주지 않을 수 있습니다.       값을 수정 하는 경우 <xref:System.Transactions.Transaction.Current%2A>는 범위 안에 동안 예외가 throw <xref:System.Transactions.TransactionScope.Dispose%2A>호출 됩니다.</xref:System.Transactions.TransactionScope.Dispose%2A> </xref:System.Transactions.Transaction.Current%2A> 그러나 범위 끝날 때 이전 값이 복원 합니다. 또한 호출 하는 경우 <xref:System.Transactions.TransactionScope.Dispose%2A>에 <xref:System.Transactions.Transaction.Current%2A>트랜잭션을 생성 하는 트랜잭션 범위 안에 범위의 끝에서 트랜잭션이 중단 됩니다.</xref:System.Transactions.Transaction.Current%2A> </xref:System.Transactions.TransactionScope.Dispose%2A>"
  example:
  - "The following example demonstrates how to use the TransactionScope class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/t-system.transactions.tr_0_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/t-system.transactions.tr_0_1.cs)]"
  syntax:
    content: 'public sealed class TransactionScope : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor
  id: '#ctor'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope()
  nameWithType: TransactionScope.TransactionScope()
  fullName: System.Transactions.TransactionScope.TransactionScope()
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> 클래스입니다."
  remarks: "이 생성자는 새 트랜잭션 범위가 만들어집니다 트랜잭션 범위 옵션으로 <xref:System.Transactions.TransactionScopeOption>.</xref:System.Transactions.TransactionScopeOption> 같음 즉, 새 범위에 트랜잭션이 필요 하 고 앰비언트 트랜잭션이 이미 있는 경우 사용 됩니다. 그렇지 않으면 범위를 입력 하기 전에 새 트랜잭션을 만듭니다."
  syntax:
    content: public TransactionScope ();
    parameters: []
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  id: '#ctor(System.Transactions.Transaction)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction)
  nameWithType: TransactionScope.TransactionScope(Transaction)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> 클래스 및 범위에서 수행 하는 트랜잭션 작업에이 트랜잭션을 사용 하 여 지정 된 트랜잭션이 앰비언트 트랜잭션으로 설정 합니다."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "범위에서 수행 하는 트랜잭션 작업에이 트랜잭션을 사용 하 여 앰비언트 트랜잭션을으로 설정 하도록 트랜잭션."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[.NET Framework 4.5.1 이상 버전에서 지원 됨]       새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> 지정 된 비동기 흐름 옵션을 사용 하 여 클래스입니다."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> 작업 또는 async/await.NET 비동기 프로그래밍 패턴을 사용 하는 경우 스레드 연속에서 트랜잭션 범위와 연결 된 앰비언트 트랜잭션이 됩니다 이동할지 여부를 설명 하는 열거형입니다."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  id: '#ctor(System.Transactions.TransactionScopeOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> 지정된 된 요구 사항과 사용 하 여 클래스입니다."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> 이 트랜잭션 범위와 연결 된 트랜잭션 요구 사항에 설명 하는 열거형입니다."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> 지정한 시간 제한 값을 사용 하 여 클래스 범위에서 수행 하는 트랜잭션 작업에는이 트랜잭션이 사용 되도록 지정 된 트랜잭션이 앰비언트 트랜잭션을로 설정 합니다."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "범위에서 수행 하는 트랜잭션 작업에이 트랜잭션을 사용 하 여 앰비언트 트랜잭션을으로 설정 하도록 트랜잭션."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>트랜잭션 범위 제한 시간이 초과 되어 트랜잭션이 중단 되는.</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[.NET Framework 4.5.1 이상 버전에서 지원 됨]       새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> 클래스 및 범위에서 수행 하는 트랜잭션 작업에이 트랜잭션을 사용 하 여 지정 된 트랜잭션이 앰비언트 트랜잭션으로 설정 합니다."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "범위에서 수행 하는 트랜잭션 작업에이 트랜잭션을 사용 하 여 앰비언트 트랜잭션을으로 설정 하도록 트랜잭션."
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> 작업 또는 async/await.NET 비동기 프로그래밍 패턴을 사용 하는 경우 스레드 연속에서 트랜잭션 범위와 연결 된 앰비언트 트랜잭션이 됩니다 이동할지 여부를 설명 하는 열거형입니다."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> 된 지정 된 시간 제한 값 및 요구 사항입니다."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> 이 트랜잭션 범위와 연결 된 트랜잭션 요구 사항에 설명 하는 열거형입니다."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>트랜잭션 범위 제한 시간이 초과 되어 트랜잭션이 중단 되는.</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> 지정된 된 요구 사항과 사용 하 여 클래스입니다."
  remarks: "사용 하는 경우는 `transactionOptions` 지정 하려면 매개 변수는 <xref:System.Transactions.IsolationLevel>, 및 범위에는 나중에 트랜잭션을 만들면, 새 트랜잭션이 지정된 된 격리 수준에 연관 된.</xref:System.Transactions.IsolationLevel> 격리 수준을 트랜잭션에 함께 전달 되, 같아야 하며 수준이, 또는 예외가 throw 됩니다."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> 이 트랜잭션 범위와 연결 된 트랜잭션 요구 사항에 설명 하는 열거형입니다."
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> 새 트랜잭션이 만들어진 경우 사용할 트랜잭션 옵션을 설명 하는 구조입니다. 기존 트랜잭션에 사용 되는 경우이 매개 변수에서 제한 시간 값에는 트랜잭션 범위에 적용 됩니다. 이 시간 범위를 삭제 하기 전에 만료 되 면 트랜잭션이 중단 됩니다."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[.NET Framework 4.5.1 이상 버전에서 지원 됨]       새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> 지정 된 요구 사항 및 비동기 흐름 옵션 클래스입니다."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> 이 트랜잭션 범위와 연결 된 트랜잭션 요구 사항에 설명 하는 열거형입니다."
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> 작업 또는 async/await.NET 비동기 프로그래밍 패턴을 사용 하는 경우 스레드 연속에서 트랜잭션 범위와 연결 된 앰비언트 트랜잭션이 됩니다 이동할지 여부를 설명 하는 열거형입니다."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> 지정한 시간 제한 값 및 COM + 상호 운용성 요구 사항, 클래스 범위에서 수행 하는 트랜잭션 작업에는이 트랜잭션이 사용 되도록 지정 된 트랜잭션이 앰비언트 트랜잭션을로 설정 합니다."
  remarks: '**하지만 참고** 이 방법은 사용 하 여 <xref:System.Security.Permissions.SecurityAction>신뢰할 수 없는 코드에서 호출 되 고 하지 못하도록; 직접 실행 호출자만 보유 하 고 필요는 `FullTrust` 사용 권한 집합입니다.</xref:System.Security.Permissions.SecurityAction>'
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.EnterpriseServicesInteropOption interopOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "범위에서 수행 하는 트랜잭션 작업에이 트랜잭션을 사용 하 여 앰비언트 트랜잭션을으로 설정 하도록 트랜잭션."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>트랜잭션 범위 제한 시간이 초과 되어 트랜잭션이 중단 되는.</xref:System.TimeSpan>"
    - id: interopOption
      type: System.Transactions.EnterpriseServicesInteropOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.EnterpriseServicesInteropOption&quot;> </xref> 관련된 트랜잭션 COM + 트랜잭션을 상호 작용 하는 방법을 설명 하는 열거형입니다."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[.NET Framework 4.5.1 이상 버전에서 지원 됨]       새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> 지정한 시간 제한 값을 사용 하 여 클래스 범위에서 수행 하는 트랜잭션 작업에는이 트랜잭션이 사용 되도록 지정 된 트랜잭션이 앰비언트 트랜잭션을로 설정 합니다."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "범위에서 수행 하는 트랜잭션 작업에이 트랜잭션을 사용 하 여 앰비언트 트랜잭션을으로 설정 하도록 트랜잭션."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>트랜잭션 범위 제한 시간이 초과 되어 트랜잭션이 중단 되는.</xref:System.TimeSpan>"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> 작업 또는 async/await.NET 비동기 프로그래밍 패턴을 사용 하는 경우 스레드 연속에서 트랜잭션 범위와 연결 된 앰비언트 트랜잭션이 됩니다 이동할지 여부를 설명 하는 열거형입니다."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[.NET Framework 4.5.1 이상 버전에서 지원 됨]       새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> 지정한 시간 제한 값, 요구 사항 및 비동기 흐름 옵션 클래스입니다."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> 이 트랜잭션 범위와 연결 된 트랜잭션 요구 사항에 설명 하는 열거형입니다."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>트랜잭션 범위 제한 시간이 초과 되어 트랜잭션이 중단 되는.</xref:System.TimeSpan>"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> 작업 또는 async/await.NET 비동기 프로그래밍 패턴을 사용 하는 경우 스레드 연속에서 트랜잭션 범위와 연결 된 앰비언트 트랜잭션이 됩니다 이동할지 여부를 설명 하는 열거형입니다."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> 지정 된 범위 및 COM + 상호 운용성 요구 사항 및 트랜잭션 옵션을 사용 하 여 클래스입니다."
  remarks: "사용 하는 경우는 `transactionOptions` 지정 하려면 매개 변수는 <xref:System.Transactions.IsolationLevel>, 및 범위에는 나중에 트랜잭션을 만들면, 새 트랜잭션이 지정된 된 격리 수준에 연관 된.</xref:System.Transactions.IsolationLevel> 격리 수준을 트랜잭션에 함께 전달 되, 같아야 하며 수준이, 또는 예외가 throw 됩니다.       **하지만 참고** 이 방법은 사용 하 여 <xref:System.Security.Permissions.SecurityAction>신뢰할 수 없는 코드에서 호출 되 고 하지 못하도록; 직접 실행 호출자만 보유 하 고 필요는 `FullTrust` 사용 권한 집합입니다.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.EnterpriseServicesInteropOption interopOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> 이 트랜잭션 범위와 연결 된 트랜잭션 요구 사항에 설명 하는 열거형입니다."
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> 새 트랜잭션이 만들어진 경우 사용할 트랜잭션 옵션을 설명 하는 구조입니다. 기존 트랜잭션에 사용 되는 경우이 매개 변수에서 제한 시간 값에는 트랜잭션 범위에 적용 됩니다. 이 시간 범위를 삭제 하기 전에 만료 되 면 트랜잭션이 중단 됩니다."
    - id: interopOption
      type: System.Transactions.EnterpriseServicesInteropOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.EnterpriseServicesInteropOption&quot;> </xref> 관련된 트랜잭션 COM + 트랜잭션을 상호 작용 하는 방법을 설명 하는 열거형입니다."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[.NET Framework 4.5.1 이상 버전에서 지원 됨]       새 인스턴스를 초기화는 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> 지정 된 요구 사항 및 비동기 흐름 옵션 클래스입니다."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> 이 트랜잭션 범위와 연결 된 트랜잭션 요구 사항에 설명 하는 열거형입니다."
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> 새 트랜잭션이 만들어진 경우 사용할 트랜잭션 옵션을 설명 하는 구조입니다. 기존 트랜잭션에 사용 되는 경우이 매개 변수에서 제한 시간 값에는 트랜잭션 범위에 적용 됩니다. 이 시간 범위를 삭제 하기 전에 만료 되 면 트랜잭션이 중단 됩니다."
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "인스턴스는 <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> 작업 또는 async/await.NET 비동기 프로그래밍 패턴을 사용 하는 경우 스레드 연속에서 트랜잭션 범위와 연결 된 앰비언트 트랜잭션이 됩니다 이동할지 여부를 설명 하는 열거형입니다."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.Complete
  id: Complete
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: Complete()
  nameWithType: TransactionScope.Complete()
  fullName: System.Transactions.TransactionScope.Complete()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "범위 내의 모든 작업은 성공적으로 완료 되었음을 나타냅니다."
  remarks: "만족 되 면 범위 내의 모든 작업을 성공적으로 완료, 모든 리소스의 상태가 일관 되 고 트랜잭션을 커밋할 수 있는 해당 트랜잭션 관리자를 알리기 위해이 메서드를 한 번만 호출 해야 합니다. 매우 것이 좋습니다의 마지막 문으로 호출을 배치 하는 `using` 블록입니다.       이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조는 [구현 하는 암시적 트랜잭션을 사용 하 여 트랜잭션 범위](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) 항목입니다.       이 메서드를 호출 하지 못하면 트랜잭션을 중단 트랜잭션 관리자는이 시스템 오류로 해석 하기 때문에 또는 트랜잭션 범위 내에서 발생 한 예외입니다. 그러나 또한 점에 유의 해야이 메서드를 호출 하는 트랜잭션의 커밋을 보장 하지 않습니다. 되었기의 트랜잭션 관리자에 게 상태를 알리는 수 단일 뿐입니다. 이 메서드를 호출한 후 더 이상 액세스할 수 통해 앰비언트 트랜잭션에 <xref:System.Transactions.Transaction.Current%2A>속성과으로 발생 하면 예외가 throw 됩니다.</xref:System.Transactions.Transaction.Current%2A>       리소스 관리자 간의 커밋의 실제 작업에서 발생 된 `End Using` 문을 경우는 <xref:System.Transactions.TransactionScope>개체 트랜잭션을 만든.</xref:System.Transactions.TransactionScope> 트랜잭션이 만들지 않은 경우 때마다 커밋이 발생 <xref:System.Transactions.CommittableTransaction.Commit%2A>의 소유자에 의해 호출 됩니다는 <xref:System.Transactions.CommittableTransaction>개체입니다.</xref:System.Transactions.CommittableTransaction> </xref:System.Transactions.CommittableTransaction.Commit%2A> 트랜잭션 관리자는 리소스 관리자를 호출 하 고 commit 또는 rollback을이 메서드를 호출한 여부에 따라 중 하나를 알리는 해당 시점에서 <xref:System.Transactions.TransactionScope>개체입니다.</xref:System.Transactions.TransactionScope>"
  example:
  - "The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_1_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_1_1.cs)]"
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Transactions.TransactionScope.Complete*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이 메서드가 호출 이미 한 번입니다."
  platform:
  - net462
- uid: System.Transactions.TransactionScope.Dispose
  id: Dispose
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: Dispose()
  nameWithType: TransactionScope.Dispose()
  fullName: System.Transactions.TransactionScope.Dispose()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "트랜잭션 범위를 종료 합니다."
  remarks: "이 메서드를 호출 하면 트랜잭션 범위의 끝을 표시 합니다. 경우는 <xref:System.Transactions.TransactionScope>개체 트랜잭션을 만든 및 <xref:System.Transactions.TransactionScope.Complete%2A>범위에가 호출 된는 <xref:System.Transactions.TransactionScope>개체가이 메서드는 트랜잭션을 커밋할 하려고 합니다.</xref:System.Transactions.TransactionScope> </xref:System.Transactions.TransactionScope.Complete%2A> </xref:System.Transactions.TransactionScope>       C#의 사용 `using` 생성 하면 예외가 발생 하는 경우에이 메서드가 호출 됩니다. 이 메서드를 호출한 후에 발생 하는 예외는 트랜잭션에 영향을 주지 않을 수 있습니다. 또한이 메서드 앰비언트 트랜잭션이 원래 상태를 복원합니다. A <xref:System.Transactions.TransactionAbortedException>트랜잭션이 실제로 커밋된 경우에 throw 됩니다.</xref:System.Transactions.TransactionAbortedException>       이 메서드는 동기적 이므로 트랜잭션이 커밋 또는 중단 될 때까지 차단 합니다. 이 때문에 Windows Form (WinForm) 응용 프로그램에서는이 메서드를 사용 하는 경우에 매우 주의 해야 하거나 교착 상태가 발생할 수 있습니다. (예: 단추 클릭), 하나의 WinForm 컨트롤 이벤트 내에서이 메서드를 호출 하 고 동기를 사용 하는 경우 <xref:System.Windows.Forms.Control.Invoke%2A>컨트롤 교착 상태가 발생 하는 트랜잭션을 처리 하는 동안 일부 UI 작업 (예를 들어 변경 색)을 수행 하는 메서드.</xref:System.Windows.Forms.Control.Invoke%2A> 때문에 이것이 <xref:System.Windows.Forms.Control.Invoke%2A>메서드는 동기적 이므로 UI 스레드 작업을 완료 될 때까지 작업자 스레드를 차단 합니다.</xref:System.Windows.Forms.Control.Invoke%2A> 시나리오에서 UI 스레드 또한 트랜잭션을 커밋하는 작업자 스레드 대기 됩니다. 결과를 계속할 수 없는 및 범위는 커밋이 완료에 대 한 무기한 대기입니다. 사용 해야 <xref:System.Windows.Forms.Control.BeginInvoke%2A>대신 <xref:System.Windows.Forms.Control.Invoke%2A>비동기적이 고 교착 상태가 발생할 가능성이 적으므로 이기 때문에 가능 합니다.</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control.BeginInvoke%2A>       이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조는 [구현 하는 암시적 트랜잭션을 사용 하 여 트랜잭션 범위](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) 항목입니다."
  example:
  - "The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_0_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_0_1.cs)]"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Transactions.TransactionScope.Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Transactions.TransactionScope.#ctor
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope()
  nameWithType: TransactionScope.TransactionScope()
  fullName: System.Transactions.TransactionScope.TransactionScope()
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction)
  nameWithType: TransactionScope.TransactionScope(Transaction)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScopeAsyncFlowOption
  parent: System.Transactions
  isExternal: false
  name: TransactionScopeAsyncFlowOption
  nameWithType: TransactionScopeAsyncFlowOption
  fullName: System.Transactions.TransactionScopeAsyncFlowOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)
- uid: System.Transactions.TransactionScopeOption
  parent: System.Transactions
  isExternal: false
  name: TransactionScopeOption
  nameWithType: TransactionScopeOption
  fullName: System.Transactions.TransactionScopeOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
- uid: System.Transactions.TransactionOptions
  parent: System.Transactions
  isExternal: false
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: System.Transactions.TransactionOptions
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
- uid: System.Transactions.EnterpriseServicesInteropOption
  parent: System.Transactions
  isExternal: false
  name: EnterpriseServicesInteropOption
  nameWithType: EnterpriseServicesInteropOption
  fullName: System.Transactions.EnterpriseServicesInteropOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.Complete
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Complete()
  nameWithType: TransactionScope.Complete()
  fullName: System.Transactions.TransactionScope.Complete()
- uid: System.Transactions.TransactionScope.Dispose
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Dispose()
  nameWithType: TransactionScope.Dispose()
  fullName: System.Transactions.TransactionScope.Dispose()
- uid: System.Transactions.TransactionScope.#ctor*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope
  nameWithType: TransactionScope.TransactionScope
- uid: System.Transactions.TransactionScope.Complete*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Complete
  nameWithType: TransactionScope.Complete
- uid: System.Transactions.TransactionScope.Dispose*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Dispose
  nameWithType: TransactionScope.Dispose
