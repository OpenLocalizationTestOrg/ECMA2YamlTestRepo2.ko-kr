### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.SqlDataSource
  id: SqlDataSource
  children:
  - System.Web.UI.WebControls.SqlDataSource.#ctor
  - System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)
  - System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)
  - System.Web.UI.WebControls.SqlDataSource.CacheDuration
  - System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  - System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  - System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  - System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  - System.Web.UI.WebControls.SqlDataSource.ConnectionString
  - System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)
  - System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  - System.Web.UI.WebControls.SqlDataSource.Delete
  - System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  - System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  - System.Web.UI.WebControls.SqlDataSource.Deleted
  - System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  - System.Web.UI.WebControls.SqlDataSource.Deleting
  - System.Web.UI.WebControls.SqlDataSource.EnableCaching
  - System.Web.UI.WebControls.SqlDataSource.FilterExpression
  - System.Web.UI.WebControls.SqlDataSource.Filtering
  - System.Web.UI.WebControls.SqlDataSource.FilterParameters
  - System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory
  - System.Web.UI.WebControls.SqlDataSource.GetView(System.String)
  - System.Web.UI.WebControls.SqlDataSource.GetViewNames
  - System.Web.UI.WebControls.SqlDataSource.Insert
  - System.Web.UI.WebControls.SqlDataSource.InsertCommand
  - System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  - System.Web.UI.WebControls.SqlDataSource.Inserted
  - System.Web.UI.WebControls.SqlDataSource.Inserting
  - System.Web.UI.WebControls.SqlDataSource.InsertParameters
  - System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  - System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.SqlDataSource.ProviderName
  - System.Web.UI.WebControls.SqlDataSource.SaveViewState
  - System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)
  - System.Web.UI.WebControls.SqlDataSource.SelectCommand
  - System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  - System.Web.UI.WebControls.SqlDataSource.Selected
  - System.Web.UI.WebControls.SqlDataSource.Selecting
  - System.Web.UI.WebControls.SqlDataSource.SelectParameters
  - System.Web.UI.WebControls.SqlDataSource.SortParameterName
  - System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  - System.Web.UI.WebControls.SqlDataSource.TrackViewState
  - System.Web.UI.WebControls.SqlDataSource.Update
  - System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  - System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  - System.Web.UI.WebControls.SqlDataSource.Updated
  - System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  - System.Web.UI.WebControls.SqlDataSource.Updating
  langs:
  - csharp
  name: SqlDataSource
  nameWithType: SqlDataSource
  fullName: System.Web.UI.WebControls.SqlDataSource
  type: Class
  summary: "데이터 바인딩된 컨트롤에는 SQL 데이터베이스를 나타냅니다."
  remarks: "이 항목의:- [소개](#introduction)      -   [데이터 연결](#data_connections)      -   [데이터 작업을 수행](#performing_data_operations)      -   [데이터 공급자](#data_provider)      -   [캐싱](#caching)      -   [추가 기능](#additional_features)      -   [데이터 원본 뷰](#data_source_view)      -   [선언적 구문](#declarative_syntax) <a name=&quot;introduction&quot;> </a> # # 소개 The SqlDataSource 데이터 소스 제어 데이터 바인딩된 컨트롤에는 SQL 관계형 데이터베이스의 데이터를 나타냅니다.       관계형 데이터베이스에서 데이터를 검색 하 고 표시, 편집 및 코드를 거의 사용 하지 않고 웹 페이지에서 데이터를 정렬 하는 데이터 바인딩된 컨트롤에 함께 SqlDataSource 컨트롤을 사용할 수 있습니다.      <a name=&quot;data_connections&quot;></a># # 데이터베이스에 연결 데이터 연결을 설정 해야 합니다는 <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>속성을 유효한 연결 문자열.</xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> SqlDataSource 같은 ADO.NET 공급자를 사용 하 여 연결할 수 있는 모든 SQL 관계형 데이터베이스를 지원할 수는 `SqlClient`, `OleDb`, `Odbc`, 또는 `OracleClient` 공급자입니다. 연결 문자열을 보호 하는 방법에 대 한 정보를 참조 하십시오. [How To:를 사용 하 여 데이터 소스를 제어 하는 경우 보안 연결 문자열](~/add/includes/ajax-current-ext-md.md)합니다.       기본 데이터베이스에서 데이터를 검색 하려면 설정는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>SQL 쿼리를 사용 하 여 속성.</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> SqlDataSource 연관 된 데이터베이스 저장된 프로시저를 지원 하는 경우 설정할 수 있습니다는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>속성을 저장된 프로시저의 이름입니다.</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 지정 하는 SQL 쿼리 매개 변수가 있는 쿼리 될 수도 있습니다. 추가할 수 있습니다 <xref:System.Web.UI.WebControls.Parameter>매개 변수가 있는 쿼리를와 연결 된 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.Parameter> 매개 변수가 있는 SQL 쿼리 및 해당 구문에 대 한 자세한 내용은 참조 [필터링에 대 한 데이터 소스 컨트롤과 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.       SqlDataSource 컨트롤 데이터를 검색할 때마다는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드를 호출 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 이 메서드는 지정 된 메서드에 프로그래밍 방식의 액세스를 제공 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>속성.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>자동으로 메서드는 SqlDataSource에 바인딩된 컨트롤을 때 해당 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>메서드를 호출 합니다.</xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> </xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 설정 하는 경우는 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A>데이터 바인딩된 컨트롤의 속성, 컨트롤 자동으로 데이터에 바인딩하 필요에 따라 데이터 원본의.</xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A> 설정의 `DataSourceID` 속성은 바인딩에 대 한 권장 되는 방법 한 <xref:System.Web.UI.WebControls.ObjectDataSource>컨트롤을 데이터 바인딩된 컨트롤.</xref:System.Web.UI.WebControls.ObjectDataSource> 사용할 수 있습니다는 `DataSource` 속성이 아니라 다음 명시적으로 호출 해야는 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>데이터 바인딩된 컨트롤의.</xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> SqlDataSource를 사용할 수 있는 데이터 바인딩된 컨트롤의 예로 <xref:System.Web.UI.WebControls.DataGrid>, <xref:System.Web.UI.WebControls.DetailsView>, <xref:System.Web.UI.WebControls.DataList>, 및 <xref:System.Web.UI.WebControls.DropDownList>.</xref:System.Web.UI.WebControls.DropDownList> </xref:System.Web.UI.WebControls.DataList> </xref:System.Web.UI.WebControls.DetailsView> </xref:System.Web.UI.WebControls.DataGrid> 호출할 수 있습니다는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드 프로그래밍 방식으로 언제 든 지 기본 데이터베이스에서 데이터를 검색 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>       선언적 방법과 프로그래밍 ASP.NET 시나리오에서 설정할 수 있습니다는 <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>SqlDataSource 컨트롤의 ID로 데이터 바인딩된 컨트롤의 속성입니다.</xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> SqlDataSource 클래스의 인스턴스를 할당할 수도 있습니다는 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A>데이터 바인딩된 컨트롤의 속성입니다.</xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> 데이터 바인딩된 컨트롤을 데이터 소스 컨트롤 바인딩에 대 한 자세한 내용은 참조 [ASP.NET 데이터 액세스 옵션](http://msdn.microsoft.com/en-us/a5ff235e-397f-4bbe-9bfe-2720b6e7ab9d)합니다.      <a name=&quot;performing_data_operations&quot;></a># # 제품과 SqlDataSource 클래스의 인스턴스 구성 데이터베이스 수행 작업에 따라 데이터의 기본 기능에, 업데이트, 삽입 및 삭제 같은 데이터 작업을 수행할 수 있습니다. 이러한 데이터 작업을 수행 하려면 적절 한 명령 텍스트 및 수행 하려는 작업에 대 한 관련된 매개 변수를 설정 합니다. 예를 들어 업데이트 작업에 대 한 설정에서 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>SQL 문자열 또는 저장된 프로시저의 이름으로 속성에 필수 매개 변수를 추가 하 고는 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> 업데이트가 수행 되는 경우는 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>메서드가 호출 되는 데이터 바인딩된 컨트롤에서 사용자 코드에서 명시적으로 또는 자동으로.</xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 동일한 일반 패턴에 대 한 뒤 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>및 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>작업.</xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> </xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>       SQL 쿼리 및에서 사용 하는 명령에서 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>, 및 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>속성을 매개 변수화 할 수 있습니다.</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 즉, 쿼리 또는 명령이 리터럴 값 대신 자리 표시자를 사용할 수 있으며 응용 프로그램 또는 사용자 정의 변수를 자리 표시자를 바인딩합니다. 세션 변수, Web Forms 페이지에 대 한 쿼리 문자열에 전달 되는 값, 다른 서버 컨트롤 등의 속성 값을 SQL 쿼리의 매개 변수를 바인딩할 수 있습니다. SqlDataSource SQL 쿼리의 매개 변수를 사용 하는 방법에 대 한 자세한 내용은 참조 [필터링에 대 한 데이터 소스 컨트롤과 매개 변수를 사용 하 여](../Topic/Using%20Parameters%20with%20Data%20Source%20Controls%20for%20Filtering.md) 및 [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] > 매개 변수 중 하나가 기본적으로 `null` 실행 하는 동안 한 `Select` 명령, 데이터가 반환 되 고 예외가 throw 됩니다. 설정 하 여이 동작을 변경할 수는 <xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A>속성을 `false`.</xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A>      <a name=&quot;data_provider&quot;></a># # 데이터 공급자 기본적으로 SqlDataSource 컨트롤은.NET Framework Data Provider for SQL Server SqlDataSource 되지 않은 Microsoft SQL Server 관련 됩니다. 관리 되는 ADO.NET 공급자가 데이터베이스 제품 SqlDataSource 컨트롤을 연결할 수 있습니다. 와 함께 사용할 경우의 <xref:System.Data.OleDb?displayProperty=fullName>공급자, OLE DB 호환 데이터베이스와 SqlDataSource를 사용할 수 있습니다.</xref:System.Data.OleDb?displayProperty=fullName> 와 함께 사용할 경우의 <xref:System.Data.Odbc?displayProperty=fullName>모든 ODBC 드라이버와 IBM DB2, MySQL, PostgreSQL 등 데이터베이스 공급자, SqlDataSource를 사용할 수 있습니다.</xref:System.Data.Odbc?displayProperty=fullName> 와 함께 사용할 경우의 <xref:System.Data.OracleClient?displayProperty=fullName>공급자, SqlDataSource 및 이후 버전 8.1.7 Oracle 데이터베이스와 함께 사용할 수 있습니다.</xref:System.Data.OracleClient?displayProperty=fullName> 허용 가능한 공급자 목록에 등록 되어는 `DbProviderFactories` Machine.config 또는 Web.config 파일에 구성 파일의 섹션입니다. 자세한 내용은 참조 [SqlDataSource 컨트롤을 사용 하 여 데이터를 선택](~/add/includes/ajax-current-ext-md.md)합니다.      <a name=&quot;caching&quot;></a># # 캐싱 SqlDataSource 컨트롤을 사용 하 여 페이지의 데이터를 표시 하는 경우 데이터 캐싱 데이터 소스 컨트롤의 기능을 사용 하 여 페이지의 성능을 높일 수 있습니다. 웹 서버의 메모리 소모 데이터베이스 서버의 처리 부하를 줄일 수 캐싱 대부분의 경우에서 좋은 절충안입니다. 데이터를 자동으로 캐시 하는 SqlDataSource 때는 <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>속성이로 설정 되어 `true` 및 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>속성은 캐시는 캐시 엔트리가 삭제 되기 전에 데이터를 저장 하는 시간 (초)의 수.</xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> 지정할 수 있습니다는 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>선택적 <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A>값.</xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> </xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>      <a name=&quot;additional_features&quot;></a># # 추가 기능 SqlDataSource 다음 표에 나열 된 추가 기능을 제공 합니다.      | 기능 | 요구 사항 |   |----------------|------------------|   | 캐싱 | <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>속성 <xref:System.Web.UI.WebControls.SqlDataSourceMode>값, <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>속성을 설정 `true`, 및는 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>및 캐시 된 데이터에 대해 원하는 캐싱 동작에 따라 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>속성입니다. |   | 삭제 | 설정 된 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>속성을 데이터를 삭제 하는 데 사용 되는 SQL 문으로.</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 이 문은 일반적으로 매개 변수화 합니다. |   | 필터링 | 설정 된 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>속성을는 <xref:System.Web.UI.WebControls.SqlDataSourceMode>값.</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드를 호출할 때 데이터를 필터링 하는 데 사용 되는 필터링 식에 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>속성을 설정 합니다. |   | 삽입 | 설정 된 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>속성을 데이터를 삽입 하는 데 사용 되는 SQL 문으로.</xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>  </xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A></xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 이 문은 일반적으로 매개 변수화 합니다. |   | 페이징 | 하지만 <xref:System.Web.UI.WebControls.GridView>, 같은 일부 데이터 바인딩된 컨트롤 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>속성 <xref:System.Web.UI.WebControls.SqlDataSourceMode>값을 설정 하는 경우 페이징 지원, SqlDataSource에서 현재 지원 되지 않습니다. |   | 선택 하면 | 데이터를 검색 하는 데 사용 되는 SQL 문으로 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>속성을 설정 합니다. |   | 정렬 | <xref:System.Web.UI.WebControls.SqlDataSourceMode> <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>속성을 설정 합니다. |   | 업데이트 | 설정 된 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>속성을 데이터를 업데이트 하는 데 사용 되는 SQL 문으로.</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>  </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A></xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> </xref:System.Web.UI.WebControls.GridView> 이 문은 일반적으로 매개 변수화 합니다. |      <a name=&quot;data_source_view&quot;> </a> # # 데이터 원본 뷰 이름으로 모든 데이터 소스 컨트롤과 SqlDataSource 컨트롤은 데이터 원본 뷰 클래스와 연결 합니다. SqlDataSource 컨트롤에 연결 된 하나만 <xref:System.Web.UI.WebControls.SqlDataSourceView>, 이름은 항상 및 `Table`.</xref:System.Web.UI.WebControls.SqlDataSourceView>       시각적으로 SqlDataSource 컨트롤; 렌더링 되지는 컨트롤을 만들 수 있습니다 선언적으로 및 필요에 따라, 상태 관리에 참여 하도록 허용할 수 있도록 구현 됩니다. 결과적으로, SqlDataSource에서 제공 되는 것과 같은 시각적 기능을 지원 하지 않습니다는 <xref:System.Web.UI.DataSourceControl.EnableTheming%2A>또는 <xref:System.Web.UI.DataSourceControl.SkinID%2A>속성.</xref:System.Web.UI.DataSourceControl.SkinID%2A> </xref:System.Web.UI.DataSourceControl.EnableTheming%2A>      <a name=&quot;declarative_syntax&quot;></a>    ## Declarative Syntax      ```   <asp:SqlDataSource       CacheDuration=&quot;string|Infinite&quot;       CacheExpirationPolicy=&quot;Absolute|Sliding&quot;       CacheKeyDependency=&quot;string&quot;       CancelSelectOnNullParameter=&quot;True|False&quot;       ConflictDetection=&quot;OverwriteChanges|CompareAllValues&quot;       ConnectionString=&quot;string&quot;       DataSourceMode=&quot;DataReader|DataSet&quot;       DeleteCommand=&quot;string&quot;       DeleteCommandType=&quot;Text|StoredProcedure&quot;       EnableCaching=&quot;True|False&quot;       EnableTheming=&quot;True|False&quot;       EnableViewState=&quot;True|False&quot;       FilterExpression=&quot;string&quot;       ID=&quot;string&quot;       InsertCommand=&quot;string&quot;       InsertCommandType=&quot;Text|StoredProcedure&quot;       OldValuesParameterFormatString=&quot;string&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDeleted=&quot;Deleted event handler&quot;       OnDeleting=&quot;Deleting event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnFiltering=&quot;Filtering event handler&quot;       OnInit=&quot;Init event handler&quot;       OnInserted=&quot;Inserted event handler&quot;       OnInserting=&quot;Inserting event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnSelected=&quot;Selected event handler&quot;       OnSelecting=&quot;Selecting event handler&quot;       OnUnload=&quot;Unload event handler&quot;       OnUpdated=&quot;Updated event handler&quot;       OnUpdating=&quot;Updating event handler&quot;       ProviderName=&quot;string|System.Data.Odbc|System.Data.OleDb|           System.Data.OracleClient|System.Data.SqlClient|           Microsoft.SqlServerCe.Client&quot;       runat=&quot;server&quot;       SelectCommand=&quot;string&quot;       SelectCommandType=&quot;Text|StoredProcedure&quot;       SkinID=&quot;string&quot;       SortParameterName=&quot;string&quot;       SqlCacheDependency=&quot;string&quot;       UpdateCommand=&quot;string&quot;       UpdateCommandType=&quot;Text|StoredProcedure&quot;       Visible=&quot;True|False&quot;   >           <DeleteParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </DeleteParameters>           <FilterParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </FilterParameters>           <InsertParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </InsertParameters>           <SelectParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </SelectParameters>           <UpdateParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </UpdateParameters>   </asp:SqlDataSource>   ```"
  example:
  - "A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=192424).  \n  \n This section contains four code examples:  \n  \n-   The first code example demonstrates how to display data from SQL Server in a <xref:System.Web.UI.WebControls.GridView> control using declarative syntax.  \n  \n-   The second code example demonstrates how to display data from an ODBC-compliant database in a <xref:System.Web.UI.WebControls.GridView> control using declarative syntax.  \n  \n-   The third code example demonstrates how to display and update data in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n-   The fourth code example demonstrates how to display and update data in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n    > [!NOTE]\n    >  These examples show how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n The following code example demonstrates how to use a SqlDataSource control declaratively to retrieve data from SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_1.aspx)]  \n  \n The following code example demonstrates how to use a SqlDataSource control declaratively to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property is the name of the .NET Framework Data Provider for ODBC, which is <xref:System.Data.Odbc?displayProperty=fullName>.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_2.aspx)]  \n  \n The following code example demonstrates a common display and update scenario with the <xref:System.Web.UI.WebControls.GridView> control. As with the previous examples, data from the Northwind database is displayed in the <xref:System.Web.UI.WebControls.GridView> control. Additionally, because an <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property is specified and the <xref:System.Web.UI.WebControls.GridView.AutoGenerateEditButton%2A> property is set to `true`, you can edit and update the records with no additional code. The <xref:System.Web.UI.WebControls.GridView> control automatically handles adding parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method when the **Update** button in the <xref:System.Web.UI.WebControls.GridView> control is clicked.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_3.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_3.aspx)]  \n  \n The following code example demonstrates a common display and update scenario with the <xref:System.Web.UI.WebControls.DropDownList> and <xref:System.Web.UI.WebControls.TextBox> controls. The <xref:System.Web.UI.WebControls.DropDownList> control does not automatically add update parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection nor call the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method, so you must do so. The update parameters are specified declaratively and you can add an event handler to perform the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> operation when an event is raised.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_4.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("SelectQuery")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.SqlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.SqlDataSource))]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class SqlDataSource : System.Web.UI.DataSourceControl
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  implements: []
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlDataSource()
  nameWithType: SqlDataSource.SqlDataSource()
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 클래스입니다."
  syntax:
    content: public SqlDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.SqlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlDataSource(String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 지정 된 연결 문자열과 Select 명령을 사용 하 여 클래스입니다."
  remarks: "데이터베이스 제품 마다 다양 한 구문에 대 한 SQL 사용 하기 때문에 `selectCommand` 했는지에 따라는 현재 사용 중인 ADO.NET 공급자를 식별 되는 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>속성.</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> SQL 문자열이 매개 변수가 있는 쿼리 또는 명령 이면 매개 변수 자리 표시자도 사용 중인 ADO.NET 공급자에 따라 다릅니다. 예를 들어 공급자는 <xref:System.Data.SqlClient?displayProperty=fullName>, 하는 기본 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource>클래스 매개 변수의 자리 표시자는 `&quot;@parameterName&quot;`.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 그러나 공급자로 설정 된 경우는 <xref:System.Data.Odbc?displayProperty=fullName>또는 <xref:System.Data.OleDb?displayProperty=fullName>, 매개 변수의 자리 표시자는 `&quot;?&quot;`.</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.       <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>값일 수 SQL 문자열 또는 저장된 프로시저의 이름을 데이터 원본에서 저장된 프로시저를 지원 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>"
  example:
  - "The following code example demonstrates how to create a <xref:System.Web.UI.WebControls.SqlDataSource> control using the SqlDataSource constructor. The example is unusual in that the <xref:System.Web.UI.WebControls.SqlDataSource> control is being used not on a Web Forms page, but in the implementation of a middle-tier object as a simple way for a business object to interact with a database. The example uses a connection string that is stored in the Web.config file.  \n  \n This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#3](~/add/codesnippet/csharp/m-system.web.ui.webcontr_142_1.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#3](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_142_1.vb)]"
  syntax:
    content: public SqlDataSource (string connectionString, string selectCommand);
    parameters:
    - id: connectionString
      type: System.String
      description: "내부 데이터베이스에 연결 하는 데 사용 되는 연결 문자열입니다."
    - id: selectCommand
      type: System.String
      description: "기본 데이터베이스에서 데이터를 검색 하는 데 사용 되는 SQL 쿼리. 추가 해야 SQL 쿼리 매개 변수가 있는 SQL 문자열인 경우 <xref href=&quot;System.Web.UI.WebControls.Parameter&quot;> </xref> 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>컬렉션.</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>"
  overload: System.Web.UI.WebControls.SqlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlDataSource(String,String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 지정 된 연결 문자열과 Select 명령을 사용 하 여 클래스입니다."
  remarks: "데이터베이스 제품 마다 다양 한 SQL의 구문 사용 하기 때문에 `selectCommand` 했는지에 따라는 현재 사용 중인 ADO.NET 공급자를 식별 되는 `providerName` 매개 변수입니다. SQL 문자열이 매개 변수가 있는 쿼리 또는 명령 이면 매개 변수 자리 표시자도 사용 중인 ADO.NET 공급자에 따라 다릅니다. 예를 들어 공급자가 <xref:System.Data.SqlClient?displayProperty=fullName>, 하는 대 한 기본 공급자는 <xref:System.Web.UI.WebControls.SqlDataSource>클래스 매개 변수의 자리 표시자는 `&quot;@parameterName&quot;`.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 그러나 공급자로 설정 된 경우는 <xref:System.Data.Odbc?displayProperty=fullName>또는 <xref:System.Data.OleDb?displayProperty=fullName>, 매개 변수의 자리 표시자는 `&quot;?&quot;`.</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.       <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>속성 수 SQL 문자열 또는 저장된 프로시저의 이름을 데이터 원본에서 저장된 프로시저를 지원 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>"
  syntax:
    content: public SqlDataSource (string providerName, string connectionString, string selectCommand);
    parameters:
    - id: providerName
      type: System.String
      description: "데이터 공급자의 이름을 하는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 사용 합니다. 공급자가 없습니다 설정 된 경우는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 기본적으로 Microsoft SQL Server 용 ADO.NET 공급자를 사용 합니다."
    - id: connectionString
      type: System.String
      description: "내부 데이터베이스에 연결 하는 데 사용 되는 연결 문자열입니다."
    - id: selectCommand
      type: System.String
      description: "기본 데이터베이스에서 데이터를 검색 하는 데 사용 되는 SQL 쿼리. 추가 해야 SQL 쿼리 매개 변수가 있는 SQL 문자열인 경우 <xref href=&quot;System.Web.UI.WebControls.Parameter&quot;> </xref> 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>컬렉션.</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>"
  overload: System.Web.UI.WebControls.SqlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CacheDuration
  id: CacheDuration
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CacheDuration
  nameWithType: SqlDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheDuration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "초 단위로 데이터 소스 제어의 데이터를 캐시에서 검색 되는 시간 길이 가져오거나는 <xref:System.Web.UI.WebControls.SqlDataSource.Select*>메서드.</xref:System.Web.UI.WebControls.SqlDataSource.Select*>"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>컨트롤이 데이터 캐싱을 지원 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> 데이터가 캐시 된 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드는 기본 데이터베이스 대신 캐시에서 데이터를 검색 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 캐시가 만료 되는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드는 기본 데이터베이스에서 데이터를 검색 하 고 다시 데이터를 캐시 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>       <xref:System.Web.UI.WebControls.SqlDataSource>데이터를 자동으로 캐시 하는 컨트롤 때는 <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>속성이 `true` CacheDuration 속성 캐시는 캐시 엔트리가 삭제 되기 전에 데이터를 저장 하는 시간 (초)의 수를 나타내는 0 보다 큰 값으로 설정 됩니다.</xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.SqlDataSource> 값이 0 무한정 캐시를 나타냅니다.       캐시의 동작은 기간의 조합으로 결정 되 고 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>속성.</xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> 경우는 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>속성이로 설정 되는 <xref:System.Web.UI.DataSourceCacheExpiry>값은 <xref:System.Web.UI.WebControls.SqlDataSource>첫 번째 데이터 검색 작업에 데이터를 캐시, 많아야 CacheDuration 속성에 의해 지정 된 기간 동안 메모리에 보관 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> 메모리가 필요한 경우 데이터 지속 시간 이전 해제 될 수 있습니다. 다음 작업 중에 캐시 한 다음 새로 고쳐집니다. 경우는 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>속성이로 설정 되는 <xref:System.Web.UI.DataSourceCacheExpiry>값, 데이터 소스 제어의 첫 번째 데이터 검색 작업에서 데이터를 캐시 하지만 각 후속 작업에 대 한 캐시를 보유 하는 시간 창을 다시 설정 합니다.</xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> 마지막 이후 CacheDuration 값과 같은 시간에 대 한 작업이 수행 되지 않은 경우 캐시 만료 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>작업.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>       <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤의 경우에 데이터를 캐시할 수 <xref:System.Web.UI.WebControls.SqlDataSourceMode>모드.</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource> A <xref:System.NotSupportedException>예외를 throw 하는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드를 하는 경우는 <xref:System.Web.UI.WebControls.SqlDataSource>로 설정 되어는 <xref:System.Web.UI.WebControls.SqlDataSourceMode>값 및 캐시도 사용 합니다.</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> </xref:System.NotSupportedException>      > [!IMPORTANT] > Microsoft Windows 인증에서 클라이언트 가장을 사용 하는 첫 번째 사용자 데이터에 액세스 하는 경우 데이터 캐시 됩니다. 다른 사용자가 동일한 데이터를 요청 하는 경우 데이터 캐시에서 검색 됩니다. 데이터에 대 한 사용자의 액세스를 확인 하려면 데이터베이스에 다른 호출 하 여 데이터를 검색 되지 않습니다. 데이터에 액세스할 수 있는 둘 이상의 사용자 다시 데이터베이스에 대 한 보안 구성으로 확인 하려면 데이터에 각 검색, 캐싱을 사용 하지 마십시오."
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. The CacheDuration is set to 20 seconds and, because the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value by default, users of this page will see fresh data every 20 seconds.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_599_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_599_1.aspx)]"
  syntax:
    content: public virtual int CacheDuration { get; set; }
    return:
      type: System.Int32
      description: "시간 (초)의 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 의 결과 캐시 한 <xref:System.Web.UI.WebControls.SqlDataSource.Select*>작업.</xref:System.Web.UI.WebControls.SqlDataSource.Select*> 기본값은 0입니다. 값은 음수일 수 없습니다."
  overload: System.Web.UI.WebControls.SqlDataSource.CacheDuration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  id: CacheExpirationPolicy
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CacheExpirationPolicy
  nameWithType: SqlDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "캐시 만료 동작은 가져오거나, 기간, 함께 사용 하면 데이터 소스 제어를 사용 하는 캐시의 동작을 설명 합니다."
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>컨트롤이 데이터 캐싱을 지원 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> 데이터가 캐시 된 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드는 기본 데이터베이스 대신 캐시에서 데이터를 검색 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 캐시가 만료 되는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드는 기본 데이터베이스에서 데이터를 검색 하 고 다시 데이터를 캐시 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>       캐시의 동작의 조합으로 결정 되는 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>및 CacheExpirationPolicy 설정.</xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> CacheExpirationPolicy 속성이로 설정 된 경우는 <xref:System.Web.UI.DataSourceCacheExpiry>값은 <xref:System.Web.UI.WebControls.SqlDataSource>첫 번째 데이터 검색 작업에 데이터를 캐시 하 여 지정 된 시간 동안 메모리에 보유 한 다음는 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>속성 경과 되 고 나면 다음 삭제 하 고.</xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> 다음 작업 중에 캐시 한 다음 새로 고쳐집니다. CacheExpirationPolicy 속성이로 설정 된 경우는 <xref:System.Web.UI.DataSourceCacheExpiry>값, 데이터 소스 제어의 첫 번째 데이터 검색 작업에서 데이터를 캐시 하지만 각 후속 작업에 대 한 캐시를 보유 하는 시간 창을 다시 설정 합니다.</xref:System.Web.UI.DataSourceCacheExpiry> 해당 하는 한 번에 대 한 작업이 수행 되지 않은 경우 캐시 만료는 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>마지막 이후 값 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>작업.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> </xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>       <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤에 데이터를 캐시할 수의 경우에만 <xref:System.Web.UI.WebControls.SqlDataSourceMode>모드.</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource> A <xref:System.NotSupportedException>예외를 throw 하는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드를 하는 경우는 <xref:System.Web.UI.WebControls.SqlDataSource>로 설정 되어는 <xref:System.Web.UI.WebControls.SqlDataSourceMode>값 및 캐시도 사용 합니다.</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> </xref:System.NotSupportedException>      > [!IMPORTANT] > Microsoft Windows 인증에서 클라이언트 가장을 사용 하는 첫 번째 사용자 데이터에 액세스 하는 경우 데이터 캐시 됩니다. 다른 사용자가 동일한 데이터를 요청 하는 경우 데이터 캐시에서 검색 됩니다. 데이터에 대 한 사용자의 액세스를 확인 하려면 데이터베이스에 다른 호출 하 여 데이터를 검색 되지 않습니다. 데이터에 액세스할 수 있는 둘 이상의 사용자 다시 데이터베이스에 대 한 보안 구성으로 확인 하려면 데이터에 각 검색, 캐싱을 사용 하지 마십시오."
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. Because the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, users will not see fresh data even though the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> value is 20 seconds. The cached data is refreshed only if there is no activity on the page for more than 20 seconds since the last page load.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_249_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_249_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }
    return:
      type: System.Web.UI.DataSourceCacheExpiry
      description: "중 하나는 <xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;> </xref> 값입니다. 기본값은는 <xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;> </xref> 값입니다."
  overload: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  id: CacheKeyDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CacheKeyDependency
  nameWithType: SqlDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "캐시 개체 데이터 소스 제어에 의해 만들어진 모든 데이터에 연결 된 사용자 정의 키 종속성을 가져오거나 설정 합니다. 키 만료 되 면 모든 캐시 개체도 명시적으로 만료 됩니다."
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>컨트롤이 데이터 캐싱을 지원 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> 데이터가 캐시 된 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드는 기본 데이터베이스 대신 캐시에서 데이터를 검색 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 캐시가 만료 되는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드는 기본 데이터베이스에서 데이터를 검색 하 고 다시 데이터를 캐시 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>       에 의해 만들어진 모든 캐시 항목 간의 종속성을 만들려면 CacheKeyDependency 속성을 설정할 수는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤과 키.</xref:System.Web.UI.WebControls.SqlDataSource> 키 만료 시켜 언제 든 지 모든 캐시 항목을 만료 프로그래밍 방식으로 있습니다.       <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤에 데이터를 캐시할 수의 경우에만 <xref:System.Web.UI.WebControls.SqlDataSourceMode>모드.</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource> A <xref:System.NotSupportedException>예외를 throw 하는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드를 하는 경우는 <xref:System.Web.UI.WebControls.SqlDataSource>로 설정 되어는 <xref:System.Web.UI.WebControls.SqlDataSourceMode>값 및 캐시도 사용 합니다.</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> </xref:System.NotSupportedException>       모든 조합에 대 한 고유 캐시 엔트리가 만들어집니다는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>, 및 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>속성.</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> </xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 여러 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤 동일한 캐시 항목 시나리오에서 사용할 수는 컨트롤 같은 기본 데이터베이스를 동일한 데이터를 로드 합니다.</xref:System.Web.UI.WebControls.SqlDataSource>      > [!IMPORTANT] > Microsoft Windows 인증에서 클라이언트 가장을 사용 하는 첫 번째 사용자 데이터에 액세스 하는 경우 데이터 캐시 됩니다. 다른 사용자가 동일한 데이터를 요청 하는 경우 데이터 캐시에서 검색 됩니다. 데이터에 대 한 사용자의 액세스를 확인 하려면 데이터베이스에 다른 호출 하 여 데이터를 검색 되지 않습니다. 데이터에 액세스할 수 있는 둘 이상의 사용자 다시 데이터베이스에 대 한 보안 구성으로 확인 하려면 데이터에 각 검색, 캐싱을 사용 하지 마십시오."
  syntax:
    content: public virtual string CacheKeyDependency { get; set; }
    return:
      type: System.String
      description: "만든 모든 캐시 개체를 식별 하는 키의 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  id: CancelSelectOnNullParameter
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSource.CancelSelectOnNullParameter
  fullName: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "모든 매개 변수 하는 데이터 검색 작업이 취소 되었는지를 나타내는 값을 가져오거나 설정 합니다.에 포함 된는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>컬렉션으로 계산 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>"
  remarks: "속성은 CancelSelectOnNullParameter 값 뷰 상태에 저장 합니다."
  syntax:
    content: public virtual bool CancelSelectOnNullParameter { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>에 매개 변수를 포함 하는 경우 데이터 검색 작업이 취소 되 면는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>컬렉션으로 계산 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*> 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  id: ConflictDetection
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: ConflictDetection
  nameWithType: SqlDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "나타내는 값을 가져오거나 방법을 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 컨트롤이 업데이트를 수행 및 내부 행의에서 데이터를 데이터베이스 작업의 시간 동안 변경 내용을 삭제 합니다."
  remarks: "ConflictDetection 속성에 이전 및 새 값에 대 한 매개 변수 적용 되었는지 여부를 결정은 `Update` 메서드. 명령 하는 경우 등으로 지정 된는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>속성에서 반환은 <xref:System.Data.DataTable>열이 포함 된 개체 `Name` 및 `Number` ConflictDetection 속성을로 설정 하 고는 <xref:System.Web.UI.ConflictOptions>값 매개 변수가 대 한 만들어집니다 `Name` 및 `Number` 에 대 한는 `Update` 메서드.</xref:System.Web.UI.ConflictOptions> </xref:System.Data.DataTable> </xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> ConflictDetection 속성이로 설정 된 경우는 <xref:System.Web.UI.ConflictOptions>값 매개 변수가 대해 만들어진 `Name`, `Number`, `original_Name`, 및 `original_Number`.</xref:System.Web.UI.ConflictOptions> (원래 값에 대 한 정확한 이름은 매개 변수는 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>속성입니다.)</xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> <xref:System.Web.UI.WebControls.SqlDataSource>제어 하는 경우 다음 확인은 `Update` 에 지정 된 메서드는 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>속성에 일치 하는 매개 변수가.</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource>       동시성 제어에는 데이터는 읽기 및 여러 클라이언트가 액세스 하 고 동일한 데이터를 조작 하는 경우 저장소에서 변경 하는 방법을 제어 하려면 데이터 저장소를 사용 하는 기술입니다. 예를 들어 하나의 클라이언트 데이터 읽고는 사용자에 게 제공 하는 동안 다른 클라이언트가 동일한 데이터를 읽는 다른 사용자에 게 제공 합니다. 두 사용자가 데이터를 업데이트 하는 데이터 저장소에 제출 하는 경우 두 클라이언트 모두 동일한 데이터에 대해 서로 다른 값을 업데이트할 수 없기 때문에 예기치 않은 결과가 발생할 수 있습니다. 충돌로 간주 됩니다. ConflictDetection 속성을 설정 하 여는 <xref:System.Web.UI.ConflictOptions>값, 프로그램 `Update` 후에 충돌을 감지 하 고 처리할 필요에 따라 데이터 원본에 이전 및 새 값을 비교 수 있습니다.</xref:System.Web.UI.ConflictOptions>       ConflictDetection 속성에 위임는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>의 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>"
  syntax:
    content: public System.Web.UI.ConflictOptions ConflictDetection { get; set; }
    return:
      type: System.Web.UI.ConflictOptions
      description: "중 하나는 <xref href=&quot;System.Web.UI.ConflictOptions&quot;> </xref> 값입니다. 기본값은는 <xref href=&quot;System.Web.UI.ConflictOptions&quot;> </xref> 값입니다."
  overload: System.Web.UI.WebControls.SqlDataSource.ConflictDetection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.ConnectionString
  id: ConnectionString
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: ConnectionString
  nameWithType: SqlDataSource.ConnectionString
  fullName: System.Web.UI.WebControls.SqlDataSource.ConnectionString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "ADO.NET 공급자 특정 연결 문자열을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 내부 데이터베이스에 연결 하는 데 사용 하 여 제어 합니다."
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>ADO.NET 공급자의 다양 한 컨트롤을 사용할 수 있습니다 및 데이터 원본에 연결 하는 데 사용 되는 연결 문자열의 구문은 공급자에 게 특정.</xref:System.Web.UI.WebControls.SqlDataSource>       구성 하는 경우는 <xref:System.Web.UI.WebControls.SqlDataSource>설정한 컨트롤은 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>속성을 데이터베이스의 형식 (기본값은 <xref:System.Data.SqlClient?displayProperty=fullName>), 데이터베이스에 연결 하는 데 필요한 정보를 포함 하 여 연결 문자열로 ConnectionString 속성을 설정 합니다.</xref:System.Data.SqlClient?displayProperty=fullName> </xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> </xref:System.Web.UI.WebControls.SqlDataSource> 연결 문자열의 내용은 데이터 소스 제어에 액세스 하는 데이터베이스의 유형에 따라 다릅니다. 예를 들어는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤을 사용 하려면 서버 이름, 데이터베이스 (카탈로그) 이름 및 SQL Server에 연결할 때 사용자를 인증 하는 방법에 대 한 정보.</xref:System.Web.UI.WebControls.SqlDataSource> 콘텐츠에 대 한 연결 문자열의 정보 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> <xref:System.Data.SqlClient.SqlConnection>클래스, <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> <xref:System.Data.OracleClient.OracleConnection>클래스, <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>속성을 <xref:System.Data.OleDb.OleDbConnection>클래스 또는 <xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A> <xref:System.Data.Odbc.OdbcConnection>클래스</xref:System.Data.Odbc.OdbcConnection> 에 대 한 속성</xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A> </xref:System.Data.OleDb.OleDbConnection> </xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> </xref:System.Data.OracleClient.OracleConnection> 에 대 한 속성</xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> </xref:System.Data.SqlClient.SqlConnection> 에 대 한 속성</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> 을 참조 하십시오.       ConnectionString 속성을 변경 하는 경우는 <xref:System.Web.UI.IDataSource.DataSourceChanged>이벤트에 바인딩된 모든 컨트롤을 일으키는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤 바인딩됩니다.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.IDataSource.DataSourceChanged>      > [!IMPORTANT] > 연결 문자열을 저장 하는 방법에 대 한 정보를 참조 하십시오. [How To:를 사용 하 여 데이터 소스 제어 하는 경우의 보안 연결 문자열](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "This section contains two code examples. The first code example demonstrates how to set the ConnectionString property to connect to a Microsoft SQL Server database and display the results of the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property in a <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates a more complex scenario, where a <xref:System.Web.UI.WebControls.SqlDataSource> control is used to display and update data in a password-protected Microsoft Access database. In each case, the `connectionStrings` element of the Web.config file is shown first, followed by the ASP.NET page that contains the <xref:System.Web.UI.WebControls.SqlDataSource> control.  \n  \n The following code example demonstrates how to set the ConnectionString property to connect to a SQL Server database and display the results of the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_2.aspx)]  \n  \n The following code example demonstrates a more complex scenario than the preceding code example, where a <xref:System.Web.UI.WebControls.SqlDataSource> control is used to display and update data in a password-protected Access database. Because the <xref:System.Web.UI.WebControls.SqlDataSource> is used with Access, the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property is set to the <xref:System.Data.OleDb> provider, and the ConnectionString property is set to an appropriate connection string for a UNC-shared Access database. A <xref:System.Web.UI.WebControls.GridView> control displays orders with shipment dates. You can update an order by checking the appropriate check box, and then clicking the **Update** button.  \n  \n> [!IMPORTANT]\n>  This example includes a password in plain text only for illustration purposes. In a production application, connection strings that include passwords should be encrypted. For more information, see [Protecting Connection Information](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_3.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_3.aspx)]  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_4.aspx)]"
  syntax:
    content: public virtual string ConnectionString { get; set; }
    return:
      type: System.String
      description: ".NET Framework 데이터 공급자 관련 문자열에서 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 표시 되는 SQL 데이터베이스에 연결 하기 위해 사용 합니다. 기본값은 빈 문자열 (&quot;&quot;)."
  overload: System.Web.UI.WebControls.SqlDataSource.ConnectionString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)
  id: CreateDataSourceView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CreateDataSourceView(String)
  nameWithType: SqlDataSource.CreateDataSourceView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "데이터 소스 컨트롤과 연결 된 데이터 원본 뷰 개체를 만듭니다."
  remarks: "파생 된 클래스는 <xref:System.Web.UI.WebControls.SqlDataSource>클래스 강력한 형식의 데이터 원본 뷰 개체를 반환 하려면 CreateDataSourceView 메서드를 재정의할 수 있습니다.</xref:System.Web.UI.WebControls.SqlDataSource>"
  syntax:
    content: protected virtual System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "데이터 원본 뷰의 이름입니다."
    return:
      type: System.Web.UI.WebControls.SqlDataSourceView
      description: "A <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;> </xref> 과 연관 된 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  id: DataSourceMode
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DataSourceMode
  nameWithType: SqlDataSource.DataSourceMode
  fullName: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "데이터 검색 모드를 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 컨트롤 사용 하 여 데이터를 가져옵니다."
  remarks: "데이터 검색 모드 어떻게는 <xref:System.Web.UI.WebControls.SqlDataSource>제어 기본 데이터베이스에서 데이터를 검색 합니다.</xref:System.Web.UI.WebControls.SqlDataSource>       DataSourceMode 속성으로 설정 된 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceMode>값 데이터가에 로드 되는 <xref:System.Data.DataSet>개체 및 서버에서 메모리에 저장 된.</xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.SqlDataSourceMode> 이 시나리오와 같은 사용자 인터페이스 컨트롤에서 통해 <xref:System.Web.UI.WebControls.GridView>, 정렬, 필터링 및 페이징 기능을 제공 합니다.</xref:System.Web.UI.WebControls.GridView>       DataSourceMode 속성으로 설정 된 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceMode>여 데이터를 검색 값을 한 <xref:System.Data.IDataReader>개체는 읽기 전용, 정방향 전용 커서입니다.</xref:System.Data.IDataReader> </xref:System.Web.UI.WebControls.SqlDataSourceMode> 특정 유형의 <xref:System.Data.IDataReader>개체 순수한 데이터 공급자에 따라 하는 <xref:System.Web.UI.WebControls.SqlDataSource>으로 식별 되는 사용 하 여는 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>속성.</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> </xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.IDataReader> 기본적으로는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤의 공급자를 사용 하 여 Microsoft SQL server는 <xref:System.Data.SqlClient?displayProperty=fullName>, 및 데이터 판독기가는 <xref:System.Data.SqlClient.SqlDataReader>개체.</xref:System.Data.SqlClient.SqlDataReader> </xref:System.Data.SqlClient?displayProperty=fullName> </xref:System.Web.UI.WebControls.SqlDataSource>       DataSourceMode 속성을 변경 하는 경우는 <xref:System.Web.UI.IDataSource.DataSourceChanged>이벤트에 바인딩된 모든 컨트롤을 일으키는 <xref:System.Web.UI.WebControls.SqlDataSource>바인딩됩니다.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.IDataSource.DataSourceChanged>       속성은 DataSourceMode 값 뷰 상태에 저장 합니다."
  example:
  - "The following code example demonstrates how to set the DataSourceMode property of the <xref:System.Web.UI.WebControls.SqlDataSource> control to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value for a scenario with a <xref:System.Web.UI.WebControls.ListBox> control that requires no sorting, paging, nor filtering.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_5_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_5_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceMode
      description: "중 하나는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;> </xref> 값입니다. 기본값은는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;> </xref> 값입니다."
  overload: System.Web.UI.WebControls.SqlDataSource.DataSourceMode*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "DataSourceMode 속성에 정의 된 값 중 하나는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Delete
  id: Delete
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Delete()
  nameWithType: SqlDataSource.Delete()
  fullName: System.Web.UI.WebControls.SqlDataSource.Delete()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "사용 하 여 삭제 작업을 수행 합니다.는 <> </> *>에 SQL 문자열 및 매개 변수는 <> </> *> 컬렉션입니다."
  remarks: "삭제 작업을 수행 하기 전에 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSource.Deleting>이벤트.</xref:System.Web.UI.WebControls.SqlDataSource.Deleting> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> 이 이벤트는 매개 변수의 값을 확인 하 고 작업을 삭제 하기 전에 전처리를 수행할 수를 처리할 수 있습니다.       작업이 완료 되는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSource.Deleted>이벤트.</xref:System.Web.UI.WebControls.SqlDataSource.Deleted> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> 모든 반환 값과 오류 코드를 검사 하 고 사후 처리를 수행 하려면이 이벤트를 처리할 수 있습니다.       Delete 메서드 프로그래밍 방식의 액세스를 위해 제공 됩니다는 `Delete` 메서드. 경우는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤이 데이터 바인딩된 컨트롤에 연결 되 면 데이터 바인딩된 컨트롤이 자동으로 호출 된 **삭제** 메서드.</xref:System.Web.UI.WebControls.SqlDataSource>       Delete 메서드는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>의 메서드는 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> 작업을 수행 하기는 <xref:System.Web.UI.WebControls.SqlDataSourceView>빌드는 <xref:System.Data.Common.DbCommand>를 사용 하 여 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>텍스트와 모든 관련 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>값, 및 다음 실행에서 <xref:System.Data.Common.DbCommand>기본 데이터베이스에 대해.</xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> </xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView>"
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> text to delete an order from the Northwind database. Initially, data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.DropDownList> control. You must explicitly declare the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> property and call the Delete method when using data-bound controls, such as the <xref:System.Web.UI.WebControls.DropDownList> (unlike other controls, such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, which automatically populate the parameters and call the Delete method on a data source control). In this example, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is delegated to the private `OnDelete` event handler, which explicitly calls the Delete method of the <xref:System.Web.UI.WebControls.SqlDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_3_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_3_1.aspx)]"
  syntax:
    content: public int Delete ();
    parameters: []
    return:
      type: System.Int32
      description: "기본 데이터베이스에서 삭제 된 행의 수를 나타내는 값입니다."
  overload: System.Web.UI.WebControls.SqlDataSource.Delete*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 기본 데이터 원본과 연결을 설정할 수 없습니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  id: DeleteCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: SqlDataSource.DeleteCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "SQL 문자열을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 컨트롤 사용 기본 데이터베이스에서 데이터를 삭제 합니다."
  remarks: "DeleteCommand SQL 쿼리 또는 저장된 프로시저의 이름을 나타내고에서 사용 되는 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>메서드.</xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>       데이터베이스 제품 마다 다양 한 SQL 사용 하기 때문에 SQL 문자열의 구문은 공급자에 따라 현재 ADO.NET 사용 중인으로 식별 된 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>속성.</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> SQL 문자열이 매개 변수가 있는 쿼리 또는 명령 이면 매개 변수 구문의 사용 중인 ADO.NET 공급자에 따라 다릅니다. 예를 들어 공급자는 <xref:System.Data.SqlClient?displayProperty=fullName>, 하는 기본 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource>클래스의 매개 변수 구문은 `&quot;@parameterName&quot;`.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 그러나 공급자로 설정 된 경우는 <xref:System.Data.Odbc?displayProperty=fullName>또는 <xref:System.Data.OleDb?displayProperty=fullName>, 매개 변수의 자리 표시자는 `&quot;?&quot;`.</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.       DeleteCommand 속성 SQL 문자열이 나 저장 프로시저를 데이터베이스에서 지 원하는 경우, 저장된 프로시저의 이름입니다.       DeleteCommand 속성에 위임는 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>의 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>      > [!IMPORTANT] > 보안상의 이유로 DeleteCommand 속성은 뷰 상태에 저장 합니다. 클라이언트에서 상태 보기의 내용을 디코딩할 수 있기 때문에 보기에 데이터베이스 구조에 대 한 중요 한 정보를 저장 상태로 될 수 정보 공개 문제점 취약점이 있습니다."
  example:
  - "The following code example demonstrates how to set the DeleteCommand text to delete an order from the Northwind database Orders table. Data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.GridView> renders a **Delete** button automatically when the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`. Additionally, when the **Delete** button is clicked, the <xref:System.Web.UI.WebControls.GridView> control automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> collection and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method. Finally, because this code example deletes data, an event handler is added to attempt to back up the database to disk before the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation is performed.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_45_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_45_1.aspx)]"
  syntax:
    content: public string DeleteCommand { get; set; }
    return:
      type: System.String
      description: "SQL 문자열의 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 데이터를 삭제 하려면 사용 합니다."
  overload: System.Web.UI.WebControls.SqlDataSource.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  id: DeleteCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DeleteCommandType
  nameWithType: SqlDataSource.DeleteCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "나타내는 값을 가져오거나 여부에서 텍스트는 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>속성은 SQL 문 또는 저장된 프로시저의 이름입니다.</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>"
  remarks: "DeleteCommandType 속성에 위임는 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A>의 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A>"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "중 하나는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref> 값입니다. 기본값은는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref> 값입니다."
  overload: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: SqlDataSource.Deleted
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "삭제 작업이 완료 되 면 발생 합니다."
  remarks: "삭제 작업이 완료 된 후 출력 매개 변수 값을 확인 하려면 삭제 된 이벤트를 처리 합니다. 출력 매개 변수는 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>이벤트와 연결 된 개체입니다.</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: SqlDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "사용 되는 매개 변수를 포함 하는 매개 변수 컬렉션을 가져옵니다는 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>에서 속성의 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;> </xref> 연결 된 개체에는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>"
  remarks: "경우는 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>매개 변수가 있는 SQL 쿼리를 포함 하는 속성, DeleteParameters 컬렉션에 포함 되어 있는 <xref:System.Web.UI.WebControls.Parameter>SQL 문자열의 매개 변수 자리 표시자에 해당 하는 개체입니다.</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>      > [!NOTE] > 있는지 확인 없는 <xref:System.Web.UI.WebControls.BoundField>컨트롤에 바인딩할 수 있는 데이터 바인딩된 컨트롤에는 <xref:System.Web.UI.WebControls.SqlDataSource>제어 DeleteParameters 컬렉션의 모든 매개 변수 이름과 일치 하는 이름을 갖는.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.BoundField> 바인딩된 필드 &quot;매개 변수가 제공 되지 않았습니다.&quot; 오류 및 SQL 명령에서 제외 된와 동일한 이름을 가진 매개 변수가 발생할 수 있습니다.       경우는 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>속성이로 설정 되는 <xref:System.Web.UI.ConflictOptions>값, 매개 변수 데이터의 이전 및 새 값에 대해 만들어집니다.</xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> 매개 변수를 이전 값에 따라 지정 됩니다는 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>속성.</xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>       ADO.NET 공급자에 따라 DeleteParameters 컬렉션에서 매개 변수의 순서 중요할 수 있습니다. <xref:System.Data.OleDb?displayProperty=fullName>및 <xref:System.Data.Odbc?displayProperty=fullName>공급자 매개 변수가 있는 SQL 쿼리에 표시 되는 매개 변수 순서에 따라 컬렉션의 매개 변수를 연결 합니다.</xref:System.Data.Odbc?displayProperty=fullName> </xref:System.Data.OleDb?displayProperty=fullName> <xref:System.Data.SqlClient?displayProperty=fullName>는 기본 ADO.NET 공급자는 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource>제어 하 고, 매개 변수의 이름을 SQL 쿼리의 자리 표시자와 비교 하 여 컬렉션의 매개 변수를 연결 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.       DeleteParameters 속성 검색은 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>에 포함 된 속성의 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>      > [!IMPORTANT] > 값이 매개 변수 유효성 검사 잠재적 보안 위협이 없이 삽입 합니다. 사용 하 여는 <xref:System.Web.UI.WebControls.SqlDataSource.Deleting>을 쿼리를 실행 하기 전에 매개 변수 값을 검사 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Deleting> 자세한 내용은 참조 [스크립트에 의해 악용 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> text to delete an order from the Northwind database. Initially, data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.DropDownList> control. You must explicitly declare DeleteParameters property and call the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method when using data-bound controls, such as <xref:System.Web.UI.WebControls.DropDownList> (unlike other controls, such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, which automatically populate the parameters and call <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> on a data source control). In this example, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is delegated to the private `OnDelete` event handler, which explicitly calls the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method of the <xref:System.Web.UI.WebControls.SqlDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_121_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_121_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> 에서 사용 하는 매개 변수를 포함 하는 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>속성.</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>"
  overload: System.Web.UI.WebControls.SqlDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: SqlDataSource.Deleting
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "삭제 작업이 수행 되기 전에 발생합니다."
  remarks: "매개 변수 값의 유효성을 검사 하는 응용 프로그램에 적용 되는 추가 초기화 작업을 수행 하려면 Deleting 이벤트를 처리 또는 하기 전에 값을 매개 변수를 변경 하는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤이 삭제 작업을 수행 합니다.</xref:System.Web.UI.WebControls.SqlDataSource>       이벤트 처리기 대리자를 호출할 때 데이터 원본에 대 한 연결 열려 아직 있지 않습니다. 직접 호출 하 여 작업을 취소할 수 없습니다 따라서는 <xref:System.Data.Common.DbCommand.Cancel%2A>에서 메서드는 <xref:System.Data.Common.DbCommand>의해 노출 되는 개체는 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>개체입니다.</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.Data.Common.DbCommand> </xref:System.Data.Common.DbCommand.Cancel%2A> 그러나 설정 하 여 데이터베이스 작업을 취소할 수 있습니다는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A>의 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>개체를 `true`.</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  example:
  - "The following code example demonstrates how to handle the Deleting event that is raised before a <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation occurs. Because this example deletes data from the Northwind database, an <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> handler is added to attempt to back up the database to disk before the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation is performed.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_101_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_101_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.EnableCaching
  id: EnableCaching
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: EnableCaching
  nameWithType: SqlDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.SqlDataSource.EnableCaching
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "나타내는 값을 가져오거나 여부는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 컨트롤에 데이터 캐싱을 사용 하도록 설정 합니다."
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>컨트롤이 데이터 캐싱을 지원 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> 데이터가 캐시 된 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드는 기본 데이터베이스 대신 캐시에서 데이터를 검색 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 캐시가 만료 되는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드는 기본 데이터베이스에서 데이터를 검색 하 고 다시 데이터를 캐시 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>       <xref:System.Web.UI.WebControls.SqlDataSource>EnableCaching 속성이로 설정 된 경우 자동으로 데이터를 캐시 제어 `true` 및 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>속성 캐시 새로운 집합을 검색 하기 전에 데이터를 저장 하는 시간 (초)의 수를 나타내는 0 보다 큰 값으로 설정 됩니다.</xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.SqlDataSource>      > [!IMPORTANT] > Microsoft Windows 인증에서 클라이언트 가장을 사용 하는 첫 번째 사용자 데이터에 액세스 하는 경우 데이터 캐시 됩니다. 다른 사용자가 동일한 데이터를 요청 하는 경우 데이터 캐시에서 검색 됩니다. 데이터에 대 한 사용자의 액세스를 확인 하려면 데이터베이스에 다른 호출 하 여 데이터를 검색 되지 않습니다. 데이터에 액세스할 수 있는 둘 이상의 사용자 다시 데이터베이스에 대 한 보안 구성으로 확인 하려면 데이터에 각 검색, 캐싱을 사용 하지 마십시오."
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. The EnableCaching property is set to `true` and the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> is set to 20 seconds. Because the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> field by default, users of this page will see fresh data every 20 seconds.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_591_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_591_1.aspx)]"
  syntax:
    content: public virtual bool EnableCaching { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>데이터 소스 제어를 위해 데이터 캐싱을 사용 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.SqlDataSource.EnableCaching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "EnableCaching 속성이로 설정 되어 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 경우 캐시에서 지원 되지 않습니다는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.FilterExpression
  id: FilterExpression
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: FilterExpression
  nameWithType: SqlDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterExpression
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "필터링 식을 가져오거나 때 적용 되는 <xref:System.Web.UI.WebControls.SqlDataSource.Select*>메서드를 호출 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Select*>"
  remarks: "FilterExpression 속성 값은 형식 문자열 식 (문자열에 의해 처리 되는 <xref:System.String.Format%2A?displayProperty=fullName>메서드) 문자열에 포함 된 대체 매개 변수에 대 한 FilterExpression 컬렉션의 값을 사용 하는.</xref:System.String.Format%2A?displayProperty=fullName> 필터 식 구문은에 허용 되는 동일한 구문을 <xref:System.Data.DataView.RowFilter%2A>속성을 필터 식에 적용 되므로 <xref:System.Data.DataView.RowFilter%2A>속성은 <xref:System.Data.DataView>실행에서 반환 되는 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> </xref:System.Data.DataView> </xref:System.Data.DataView.RowFilter%2A> </xref:System.Data.DataView.RowFilter%2A> 자세한 내용은 <xref:System.Data.DataColumn.Expression%2A>.</xref:System.Data.DataColumn.Expression%2A> 을 참조 하십시오.       매개 변수를 추가 하는 경우는 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>컬렉션 형식 문자열 자리 표시자를 포함할 수도 있습니다 (예를 들어 `&quot;{0}&quot;)` 매개 변수 값에 대 한 대체 식에.</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 인덱스에 있는 매개 변수 자리 표시자는는 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 에 있는 개체가 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>컬렉션이 `null`, 개체가 빈 문자열로 바뀝니다.</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>       FilterExpression 속성에 매개 변수를 포함할 수 있습니다. 매개 변수는 문자열 또는 문자 형식인 경우 매개 변수를 작은따옴표로 묶어야 합니다. 매개 변수가 숫자 형식인 경우에 인용 부호를 필요 하지 않습니다. <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>FilterExpression 속성에 있는 자리 표시자에 대 한 계산 되는 매개 변수를 포함 하는 컬렉션.</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>       <xref:System.Web.UI.WebControls.SqlDataSource>데이터 필터링을 지원 하는 컨트롤의 경우에만 <xref:System.Web.UI.WebControls.SqlDataSourceMode>모드.</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource>       FilterExpression 속성에 위임는 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>의 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database and filter it using a FilterExpression string and the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. The FilterExpression property is applied any time the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is executed to retrieve data. In this example, the FilterExpression contains a placeholder for a filter parameter, which is contained in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. In addition, the filter parameter is a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> property of the <xref:System.Web.UI.WebControls.DropDownList> control. Because the <xref:System.Web.UI.WebControls.DropDownList> control has its <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> property set to `true`, any change in the selection for the <xref:System.Web.UI.WebControls.DropDownList> control causes the page to post information back to the server and the <xref:System.Web.UI.WebControls.GridView> control to rebind to the data source control with the new filter.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_89_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_89_1.aspx)]"
  syntax:
    content: public string FilterExpression { get; set; }
    return:
      type: System.String
      description: "사용 하 여 데이터를 검색할 때 적용 되는 필터링 식을 나타내는 문자열의 <xref:System.Web.UI.WebControls.SqlDataSource.Select*>메서드.</xref:System.Web.UI.WebControls.SqlDataSource.Select*>"
  overload: System.Web.UI.WebControls.SqlDataSource.FilterExpression*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "FilterExpression 속성에 설정 및 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 중인 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;> </xref> 모드입니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Filtering
  id: Filtering
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Filtering
  nameWithType: SqlDataSource.Filtering
  fullName: System.Web.UI.WebControls.SqlDataSource.Filtering
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "필터 작업 전에 발생합니다."
  remarks: "필터링 이벤트를 처리 하기 전에 필터 매개 변수 값에 대해 유효성 검사 작업을 수행할는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤이 필터 작업을 수행 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> 취소할 수 있습니다는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>설정 하 여 메서드는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A>의 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs>개체를 `true`.</xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A> </xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 경우에 이벤트가 발생 된 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>속성을 설정 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>       필터링 이벤트에 위임는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering?displayProperty=fullName>의 이벤트는 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering?displayProperty=fullName>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.FilterParameters
  id: FilterParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: FilterParameters
  nameWithType: SqlDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "에 있는 모든 매개 변수 자리 표시자와 관련 된 매개 변수 컬렉션을 가져옵니다는 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression*>문자열.</xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression*>"
  remarks: "FilterParameters 컬렉션의 매개 변수는에 지정 된 매개 변수와 연결 된 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>속성.</xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 에 지정 된 매개 변수 자리 표시자는 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>속성 순서 FilterParameters 컬렉션의 매개 변수 개체에 일치 하는 경우는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드는.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> </xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>       FilterParameters 속성 검색은 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>에 포함 된 속성의 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>      > [!IMPORTANT] > 값이 매개 변수 유효성 검사 잠재적 보안 위협이 없이 삽입 합니다. 사용 하 여는 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>을 쿼리를 실행 하기 전에 매개 변수 값을 검사 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 자세한 내용은 참조 [스크립트에 의해 악용 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database and filter it using the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and FilterParameters properties. The <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSource> control is applied anytime the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is executed to retrieve data. In this example, the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property contains a placeholder for a filter parameter, which is contained in the FilterParameters collection. In addition, the filter parameter is a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> property of the <xref:System.Web.UI.WebControls.DropDownList> control. Because the <xref:System.Web.UI.WebControls.DropDownList> control has its <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> property set to `true`, any change in the <xref:System.Web.UI.WebControls.DropDownList> selection causes the page to post information back to the server and the <xref:System.Web.UI.WebControls.GridView> control to rebind to the data source control with the new filter.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1207_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1207_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> 에 모든 매개 변수 자리 표시자와 연관 된 매개 변수 집합을 포함 하는 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression*>속성.</xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression*>"
  overload: System.Web.UI.WebControls.SqlDataSource.FilterParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory
  id: GetDbProviderFactory
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: GetDbProviderFactory()
  nameWithType: SqlDataSource.GetDbProviderFactory()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "반환 된 <xref href=&quot;System.Data.Common.DbProviderFactory&quot;> </xref> 로 식별 되는 ADO.NET 공급자와 연결 된 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName*>속성.</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName*>"
  remarks: "<xref:System.Data.Common.DbProviderFactory>속성은 사용 된 <xref:System.Web.UI.WebControls.SqlDataSource>올바른 ADO.NET 연결, 명령 및 매개 변수 개체를 데이터베이스와 상호 작용할 때 만들 컨트롤을.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.Common.DbProviderFactory>"
  syntax:
    content: protected virtual System.Data.Common.DbProviderFactory GetDbProviderFactory ();
    parameters: []
    return:
      type: System.Data.Common.DbProviderFactory
      description: "A <xref href=&quot;System.Data.Common.DbProviderFactory&quot;> </xref> 식별 된 ADO.NET 공급자를 나타내는 고, 그렇지 않으면, 및의 인스턴스는 <xref href=&quot;System.Data.SqlClient&quot;> </xref>없는 공급자가 설정 하는 경우."
  overload: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.GetView(System.String)
  id: GetView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: GetView(String)
  nameWithType: SqlDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.GetView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "데이터 소스 컨트롤과 연결 된 명명 된 데이터 원본 뷰를 가져옵니다."
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>컨트롤은 하나의 데이터 원본 뷰를 지원 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> 모든 데이터 원본 뷰 개체와 마찬가지로 <xref:System.Web.UI.WebControls.SqlDataSourceView>개체 데이터 소스 제어와 연결 된 해당 기능을 정의 기본 데이터베이스에서 데이터를 검색 하는 데 필요한 되며 정렬, 삽입, 삭제 및 업데이트 같은 작업을 수행 하는 모든 작업을 수행 합니다.</xref:System.Web.UI.WebControls.SqlDataSourceView>"
  syntax:
    content: protected override System.Web.UI.DataSourceView GetView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "검색할 보기의 이름입니다. 때문에 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 하나의 뷰만 지원 `viewName` 는 무시 됩니다."
    return:
      type: System.Web.UI.DataSourceView
      description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;> </xref> 연관 된 &quot;Table&quot; 이라는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.SqlDataSource.GetView*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>viewName</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 아닌 `Table`합니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.GetViewNames
  id: GetViewNames
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: GetViewNames()
  nameWithType: SqlDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetViewNames()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "와 연결 된 뷰 개체의 목록을 나타내는 이름 컬렉션을 가져옵니다는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 제어 합니다."
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>컨트롤에서 명명 된 원본 데이터를 하나의 뷰만 지원 `&quot;Table&quot;`.</xref:System.Web.UI.WebControls.SqlDataSource> 여기서 메서드는이 뷰 이름만의 단일 요소 컬렉션을 반환합니다."
  syntax:
    content: protected override System.Collections.ICollection GetViewNames ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>와 관련 된 보기의 이름을 포함 하는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Web.UI.WebControls.SqlDataSource.GetViewNames*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Insert
  id: Insert
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Insert()
  nameWithType: SqlDataSource.Insert()
  fullName: System.Web.UI.WebControls.SqlDataSource.Insert()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "사용 하 여 insert 작업 수행은 <> </> *>에 있는 SQL 문자열 및 매개 변수는 <> </> *> 컬렉션입니다."
  remarks: "삽입 작업을 수행 하기 전에 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSource.Inserting>이벤트.</xref:System.Web.UI.WebControls.SqlDataSource.Inserting> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 이 이벤트는 매개 변수의 값을 확인 하 고 삽입 작업 전에 전처리를 수행할 수를 처리할 수 있습니다. 삽입 작업을 수행 하는 <xref:System.Web.UI.WebControls.SqlDataSourceView>개체는 <xref:System.Data.Common.DbCommand>를 사용 하 여 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>텍스트와 모든 관련 <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>속성을 빌드한 다음 실행의 <xref:System.Data.Common.DbCommand>기본 데이터베이스에 대 한 개체입니다.</xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> </xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView>       작업이 완료 되는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted>이벤트.</xref:System.Web.UI.WebControls.SqlDataSource.Inserted> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 모든 반환 값과 오류 코드를 검사 하 고 사후 처리를 수행 하려면이 이벤트를 처리할 수 있습니다.       Insert 메서드 프로그래밍 방식의 액세스를 위해 제공 됩니다는 `Insert` 메서드. 경우는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤이 데이터 바인딩된 컨트롤에 연결 되 면 데이터 바인딩된 컨트롤이 자동으로 호출 된 `Insert` 메서드.</xref:System.Web.UI.WebControls.SqlDataSource>       Insert 메서드는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>의 메서드는 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>      > [!IMPORTANT] > 값이 매개 변수 유효성 검사 잠재적 보안 위협이 없이 삽입 합니다. 사용 하 여는 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>을 쿼리를 실행 하기 전에 매개 변수 값을 검사 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 자세한 내용은 참조 [스크립트에 의해 악용 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values in the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and then the <xref:System.Web.UI.WebControls.DropDownList> is refreshed.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_101_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_101_1.aspx)]"
  syntax:
    content: public int Insert ();
    parameters: []
    return:
      type: System.Int32
      description: "기본 데이터베이스에 삽입 된 행 수를 나타내는 값입니다."
  overload: System.Web.UI.WebControls.SqlDataSource.Insert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 기본 데이터 원본과 연결을 설정할 수 없습니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommand
  id: InsertCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: InsertCommand
  nameWithType: SqlDataSource.InsertCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "SQL 문자열을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 컨트롤 사용 기본 데이터베이스에 데이터를 삽입 합니다."
  remarks: "InsertCommand SQL 쿼리 또는 저장된 프로시저의 이름을 나타내고에서 사용 되는 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>메서드.</xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>       데이터베이스 제품 마다 다양 한 SQL 사용 하기 때문에 SQL 문자열의 구문은 공급자에 따라 현재 ADO.NET 사용 중인으로 식별 된 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>속성.</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> SQL 문자열이 매개 변수가 있는 쿼리 또는 명령 이면 매개 변수 자리 표시자도 사용 중인 ADO.NET 공급자에 따라 다릅니다. 예를 들어 공급자는 <xref:System.Data.SqlClient?displayProperty=fullName>, 하는 기본 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource>클래스 매개 변수의 자리 표시자는 `&quot;@parameterName&quot;`.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 그러나 공급자로 설정 된 경우는 <xref:System.Data.Odbc?displayProperty=fullName>또는 <xref:System.Data.OleDb?displayProperty=fullName>, 매개 변수의 자리 표시자는 `&quot;?&quot;`.</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.       데이터 원본에서 저장된 프로시저를 지원 InsertCommand SQL 문자열 또는 저장된 프로시저의 이름 수 있습니다.       이 속성에 위임는 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>의 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceView>연관 된는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>      > [!IMPORTANT] > 보안을 위해 속성은 저장 되지 InsertCommand는 보기 상태입니다. 클라이언트에서 상태 보기의 내용을 디코딩할 수 있기 때문에 보기에 데이터베이스 구조에 대 한 중요 한 정보를 저장 상태로 될 수 정보 공개 문제점 취약점이 있습니다.      > [!IMPORTANT] > 값이 매개 변수 유효성 검사 잠재적 보안 위협이 없이 삽입 합니다. 사용 하 여는 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>을 쿼리를 실행 하기 전에 매개 변수 값을 검사 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 자세한 내용은 참조 [스크립트에 의해 악용 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "This section contains two code examples. The first code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The second code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row into the <xref:System.Web.UI.WebControls.GridView> control and as a form to insert new records.  \n  \n> [!NOTE]\n>  These examples show how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values into the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and the <xref:System.Web.UI.WebControls.DropDownList> control is refreshed.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_805_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_805_1.aspx)]  \n  \n The following code example demonstrates how to retrieve data from SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> control and as a form to insert new records.  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_805_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_805_2.aspx)]"
  syntax:
    content: public string InsertCommand { get; set; }
    return:
      type: System.String
      description: "SQL 문자열의 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 사용 하 여 데이터를 삽입 합니다."
  overload: System.Web.UI.WebControls.SqlDataSource.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  id: InsertCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: InsertCommandType
  nameWithType: SqlDataSource.InsertCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "나타내는 값을 가져오거나 여부에서 텍스트는 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>속성은 SQL 문 또는 저장된 프로시저의 이름입니다.</xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>"
  remarks: "InsertCommandType 속성에 위임는 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A>의 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A>"
  example:
  - "The following code example demonstrates how to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.GridView> control. It also demonstrates how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n The <xref:System.Web.UI.WebControls.GridView> control displays a set of data and the <xref:System.Web.UI.WebControls.DetailsView> displays the details for a particular row. If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. The stored procedure name is set in the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> property and identified as a stored procedure by setting the InsertCommandType property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value.  \n  \n After data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_948_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_948_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "중 하나는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref> 값입니다. 기본값은는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref> 값입니다."
  overload: System.Web.UI.WebControls.SqlDataSource.InsertCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: SqlDataSource.Inserted
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "삽입 작업이 완료 되 면 발생 합니다."
  remarks: "삽입 작업이 완료 된 후 출력 매개 변수 값을 확인 하려면 Inserted 이벤트를 처리 합니다. 출력 매개 변수는 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>이벤트와 연결 된 개체입니다.</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  example:
  - "The following code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the Inserted event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_73_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_73_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: SqlDataSource.Inserting
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "삽입 작업이 수행 되기 전에 발생합니다."
  remarks: "삽입 이벤트를 처리 매개 변수 값의 유효성을 검사 하는 응용 프로그램에 적용 되는 추가 초기화 작업을 수행할 또는 하기 전에 값을 매개 변수를 변경 하는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤 삽입 작업을 수행 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> 이벤트 처리기 대리자를 호출할 때 데이터 원본에 대 한 연결 열려 아직 있지 않습니다. 직접 호출 하 여 작업을 취소할 수 없습니다 따라서는 <xref:System.Data.Common.DbCommand.Cancel%2A>에서 메서드는 <xref:System.Data.Common.DbCommand>의해 노출 되는 개체는 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>속성.</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.Data.Common.DbCommand> </xref:System.Data.Common.DbCommand.Cancel%2A> 그러나 설정 하 여 데이터베이스 작업을 취소할 수 있습니다는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A>의 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>개체를 `true`.</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  example:
  - "The following code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the `DataBind` method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_151_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_151_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: SqlDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "사용 되는 매개 변수를 포함 하는 매개 변수 컬렉션을 가져옵니다는 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>에서 속성의 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;> </xref> 연결 된 개체에는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>"
  remarks: "InsertParameters 속성 검색은 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A>에 포함 된 속성의 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A>       경우는 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>매개 변수가 있는 SQL 쿼리를 포함 하는 속성, InsertParameters 컬렉션에 포함 되어 있는 <xref:System.Web.UI.WebControls.Parameter>SQL 문자열의 매개 변수 자리 표시자에 해당 하는 개체입니다.</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>       ADO.NET 공급자에 따라 InsertParameters 컬렉션에서 매개 변수의 순서 중요할 수 있습니다. <xref:System.Data.OleDb?displayProperty=fullName>및 <xref:System.Data.Odbc?displayProperty=fullName>공급자 매개 변수가 있는 SQL 쿼리는 매개 변수가 표시 되는 순서에 따라 컬렉션의 매개 변수를 연결 합니다.</xref:System.Data.Odbc?displayProperty=fullName> </xref:System.Data.OleDb?displayProperty=fullName> <xref:System.Data.SqlClient?displayProperty=fullName>는 기본 ADO.NET 공급자는 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource>제어 하 고, SQL 쿼리의 자리 표시자 별칭을 가진 매개 변수의 이름과 일치 하 여 컬렉션의 매개 변수를 연결 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.      > [!IMPORTANT] > 값이 매개 변수 유효성 검사 잠재적 보안 위협이 없이 삽입 합니다. 사용 하 여는 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>을 쿼리를 실행 하기 전에 매개 변수 값을 검사 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 자세한 내용은 참조 [스크립트에 의해 악용 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values in the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and the <xref:System.Web.UI.WebControls.DropDownList> control is refreshed.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_596_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_596_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> 에서 사용 하는 매개 변수를 포함 하는 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>속성.</xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>"
  overload: System.Web.UI.WebControls.SqlDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)
  id: LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: LoadViewState(Object)
  nameWithType: SqlDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.SqlDataSource.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "에 있는 속성의 상태를 로드는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 유지 해야 하는 컨트롤입니다."
  remarks: "LoadViewState 메서드는 이전에 저장 된 뷰 상태를 로드 하는 데 사용 되는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource>"
  syntax:
    content: protected override void LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "상태를 나타내는 개체는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.SqlDataSource.LoadViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  id: OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "에 전달 되는 모든 매개 변수 이름에 적용할 형식 문자열을 가져오거나 설정 합니다.는 <> </> *> 또는 <> </> *> 메서드."
  remarks: "OldValuesParameterFormatString 형식 문자열이으로 식별 하는 것과 같은 기본 키에만 적용 되는 `DataKeyNames` 삭제 또는 연결된 된 데이터 바인딩 컨트롤의 속성 업데이트 시나리오 및 위치는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>속성이로 설정 되어는 <xref:System.Web.UI.ConflictOptions>값과 집합이 `oldValues` 해당 데이터 메서드에 전달 됩니다.</xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 형식 문자열의 각 매개 변수 이름에 적용 되는 경우에 `oldValues` 컬렉션입니다.       OldValuesParameterFormatString 속성을 변경할 수 있는 두 가지 일반적인 시나리오는 다음과 같습니다.-업데이트에 이전 및 새 값을 구분할 수 있습니다. 경우는 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>속성이로 설정 되는 <xref:System.Web.UI.ConflictOptions>의 값, 매개 변수는 원래 값과 새 값 모두에 추가 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>컬렉션.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> 서식 문자열 사용 하지 않고 동일한 이름 가진 두 개의 매개 변수는 각 데이터 필드에 대 한 만들어졌습니다. 원래 값 매개 변수의 이름을 변경 하 여 충돌을 감지 하 고 키 값을 비교 하려면 데이터 원본에 데이터를 비교할 수 있습니다.      -일부 비주얼 디자이너에는 원래 값 및 키에 대 한 특정 이름 지정 체계를 구현 합니다."
  syntax:
    content: public string OldValuesParameterFormatString { get; set; }
    return:
      type: System.String
      description: "모든 이름에 적용 된 형식 문자열을 나타내는 문자열로 <code> oldValues </code> 에 전달 된 매개 변수는 <> </> *> 또는 <> </> *> 메서드. 기본값은 &quot;{&quot;이 (0)."
  overload: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: SqlDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "추가 <xref href=&quot;System.Web.UI.Page.LoadComplete&quot;> </xref> 에 이벤트 처리기는 <xref href=&quot;System.Web.UI.Page&quot;> </xref> 포함 된 컨트롤은 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 제어 합니다."
  remarks: "추가 되는 이벤트 처리기는 <xref:System.Web.UI.WebControls.SqlDataSource>업데이트 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>및 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>값.</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource> 값이 업데이트 되는 <xref:System.Web.UI.IDataSource.DataSourceChanged>이벤트에 바인딩된 모든 컨트롤을 일으키는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤 바인딩됩니다.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.IDataSource.DataSourceChanged>"
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>이벤트 데이터를 포함 하는.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.SqlDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.ProviderName
  id: ProviderName
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: ProviderName
  nameWithType: SqlDataSource.ProviderName
  fullName: System.Web.UI.WebControls.SqlDataSource.ProviderName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: ".NET Framework 데이터 공급자의 이름을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 는 기본 데이터 원본에 연결 하는 데 사용 하 여 제어 합니다."
  remarks: ".NET Framework는 다음과 같은 데이터 공급자:- <xref:System.Data.SqlClient?displayProperty=fullName>공급자는.NET Framework Data Provider for SQL Server 기본.</xref:System.Data.SqlClient?displayProperty=fullName>      - <xref:System.Data.OleDb?displayProperty=fullName>공급자는.NET Framework Data Provider for OLE DB.</xref:System.Data.OleDb?displayProperty=fullName>      - <xref:System.Data.Odbc?displayProperty=fullName>공급자는.NET Framework Data Provider for ODBC.</xref:System.Data.Odbc?displayProperty=fullName>      - <xref:System.Data.OracleClient?displayProperty=fullName>공급자는.NET Framework Data Provider for Oracle.</xref:System.Data.OracleClient?displayProperty=fullName>       ProviderName 속성은는 관리 되지 않는 ADO.NET 공급자의 이름으로 같은 설정 되지 `MSDAORA`합니다. 자세한 내용은 참조 [SqlDataSource 컨트롤을 사용 하 여 데이터를 선택](~/add/includes/ajax-current-ext-md.md)합니다.       ProviderName 속성을 변경 하는 경우는 <xref:System.Web.UI.IDataSource.DataSourceChanged>이벤트에 바인딩된 모든 컨트롤을 일으키는 <xref:System.Web.UI.WebControls.SqlDataSource>바인딩됩니다.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.IDataSource.DataSourceChanged>       사용 가능한 공급자 목록에 지정 된 된 `DbProviderFactories` 하위 섹션은 `system.data` Machine.config 파일의 섹션입니다."
  example:
  - "This section contains two code examples. The first code demonstrates how to connect to a SQL Server database using the default .NET Framework Data Provider for SQL Server for the <xref:System.Web.UI.WebControls.SqlDataSource> control, the <xref:System.Data.SqlClient?displayProperty=fullName>. The second code example demonstrates how to connect to an ODBC database using the .NET Framework Data Provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>.  \n  \n The following code example demonstrates how to connect to a SQL Server database using the default data provider for the <xref:System.Web.UI.WebControls.SqlDataSource> control, the <xref:System.Data.SqlClient?displayProperty=fullName>. Whenever the ProviderName property is not explicitly set, the default provider is used. The <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is provider-specific.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1309_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1309_1.aspx)]  \n  \n The following code example, which is functionally the same as the preceding code example, demonstrates how to connect to an ODBC database using the .NET Framework Data Provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>. The <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is set to the name of an ODBC data source name (DSN) that is used to connect to the ODBC database.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1309_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1309_2.aspx)]"
  syntax:
    content: public virtual string ProviderName { get; set; }
    return:
      type: System.String
      description: "데이터 공급자의 이름 하는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> ;을 사용 하 여 그렇지 않은 경우 공급자가 없습니다 설정 된 경우 Microsoft SQL Server 용 ADO.NET 공급자입니다. 기본값은 Microsoft SQL Server 용 ADO.NET 공급자."
  overload: System.Web.UI.WebControls.SqlDataSource.ProviderName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SaveViewState
  id: SaveViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SaveViewState()
  nameWithType: SqlDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "현재 뷰 상태를 저장 된 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 제어 합니다."
  syntax:
    content: protected override object SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "저장된 된 상태를 포함 하는 개체는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.SqlDataSource.SaveViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)
  id: Select(System.Web.UI.DataSourceSelectArguments)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Select(DataSourceSelectArguments)
  nameWithType: SqlDataSource.Select(DataSourceSelectArguments)
  fullName: System.Web.UI.WebControls.SqlDataSource.Select(DataSourceSelectArguments)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "사용 하 여 기본 데이터베이스에서 데이터를 검색 된 <> </> *>에 SQL 문자열 및 매개 변수는 <> </> *> 컬렉션입니다."
  remarks: "선택 메서드 중 자동으로 호출 됩니다는 <xref:System.Web.UI.Control.PreRender>의 페이지 수명 주기 단계.</xref:System.Web.UI.Control.PreRender> 에 연결 되는 데이터 바인딩된 컨트롤에 의해 호출 됩니다는 <xref:System.Web.UI.WebControls.SqlDataSource>제어를 통해 자신의 <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>속성.</xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> </xref:System.Web.UI.WebControls.SqlDataSource>       <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>메서드가 반환 되는 <xref:System.Data.DataView>경우 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>속성이로 설정 되는 <xref:System.Web.UI.WebControls.SqlDataSourceMode>값.</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> </xref:System.Data.DataView> </xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>메서드가 반환 되는 <xref:System.Data.IDataReader>경우 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>속성이로 설정 되는 <xref:System.Web.UI.WebControls.SqlDataSourceMode>값.</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> </xref:System.Data.IDataReader> </xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 닫기는 <xref:System.Data.IDataReader>끝나면 데이터를 읽는 개체입니다.</xref:System.Data.IDataReader>       선택 작업을 수행 하기 전에 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSource.Selecting>이벤트.</xref:System.Web.UI.WebControls.SqlDataSource.Selecting> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> 매개 변수의 값을 확인 하 고 작업을 선택 하기 전에 처리를 수행 하려면이 이벤트를 처리할 수 있습니다.       선택 작업이 완료 되 면는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSource.Selected>이벤트.</xref:System.Web.UI.WebControls.SqlDataSource.Selected> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> 모든 반환 값과 오류 코드를 검사 하 고 사후 처리를 수행 하려면이 이벤트를 처리할 수 있습니다.       경우는 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>속성이 <xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName>캐싱을 사용 하 고, <xref:System.Web.UI.WebControls.SqlDataSource>개체에서 데이터를 검색 및 선택 작업 동안 데이터를 캐시에 저장 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 캐시 또는 생성 된 경우 삭제 된 새로 고침의 조합에 의해 지정 된 캐싱 동작에 따라는 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>및 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>속성.</xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>      > [!IMPORTANT] > Microsoft Windows 인증에서 클라이언트 가장을 사용 하는 첫 번째 사용자 데이터에 액세스 하는 경우 데이터 캐시 됩니다. 다른 사용자가 동일한 데이터를 요청 하는 경우 데이터 캐시에서 검색 됩니다. 데이터에 대 한 사용자의 액세스를 확인 하려면 데이터베이스에 다른 호출 하 여 데이터를 검색 되지 않습니다. 데이터에 액세스할 수 있는 둘 이상의 사용자 다시 데이터베이스에 대 한 보안 구성에 의해 확인할 데이터의 각 검색, 캐싱을 사용 하지 마십시오.       경우는 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>속성이 <xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName>및 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>속성이 지정 된 경우, 제공 된 필터 식이 평가 됩니다 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>속성 및 결과 필터 데이터 목록에 선택 작업 동안 적용 됩니다.</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> </xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>       Select 메서드는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>의 메서드는 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 데이터 검색 작업을 수행 하는 <xref:System.Web.UI.WebControls.SqlDataSourceView>빌드는 <xref:System.Data.Common.DbCommand>사용 하 여 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>텍스트와 모든 관련 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>값, 및 다음 실행에서 <xref:System.Data.Common.DbCommand>기본 데이터베이스에 대해.</xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> </xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView>      > [!IMPORTANT] > 값이 매개 변수 유효성 검사 잠재적 보안 위협이 없이 삽입 합니다. 사용 하 여는 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>을 쿼리를 실행 하기 전에 매개 변수 값을 검사 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 자세한 내용은 참조 [스크립트에 의해 악용 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following examples show how to programmatically call the Select method and set values based on the result of the query. The following example shows the declarative code for the Web controls.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource.Select#1](~/add/codesnippet/csharp/475f4e1e-4832-4407-9121-_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#1](~/add/codesnippet/visualbasic/475f4e1e-4832-4407-9121-_1.aspx)]  \n  \n The following example shows how to programmatically call the Select method. The <xref:System.Web.UI.WebControls.SqlDataSource> control returns an integer. The value of the integer is used to set the text of a <xref:System.Web.UI.WebControls.Label> control and to determine whether to display a <xref:System.Web.UI.WebControls.HyperLink> control.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#2](~/add/codesnippet/visualbasic/475f4e1e-4832-4407-9121-_2.vb)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource.Select#2](~/add/codesnippet/csharp/475f4e1e-4832-4407-9121-_2.cs)]"
  syntax:
    content: public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);
    parameters:
    - id: arguments
      type: System.Web.UI.DataSourceSelectArguments
      description: "A <xref href=&quot;System.Web.UI.DataSourceSelectArguments&quot;> </xref> 기본 데이터 검색 범위를 벗어난 데이터에 대 한 작업을 요청 하는 데 사용 되는 개체입니다."
    return:
      type: System.Collections.IEnumerable
      description: "<xref:System.Collections.IEnumerable>데이터 행 목록입니다.</xref:System.Collections.IEnumerable>"
  overload: System.Web.UI.WebControls.SqlDataSource.Select*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 개체는 기본 데이터 원본과 연결을 설정할 수 없습니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommand
  id: SelectCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SelectCommand
  nameWithType: SqlDataSource.SelectCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "SQL 문자열을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 컨트롤 사용 기본 데이터베이스에서 데이터를 검색 합니다."
  remarks: "SelectCommand 속성이 SQL 쿼리 또는 저장된 프로시저의 이름을 나타내고에서 사용 되는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>메서드는 SQL Server 데이터베이스에서 데이터를 검색 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Select 명령에는 별표 (*)를 사용 하 여 모든 열을 선택 하 고 업데이트를 수행 하거나 삭제 작업을 자동 코드 생성을 사용 하는 경우 있는지 확인 하는 열이 없는 경우 이름에 공백이 있습니다.       데이터베이스 제품 마다 다양 한 SQL 사용 하기 때문에 SQL 문자열의 구문은 공급자에 따라 현재 ADO.NET 사용 중인으로 식별 된 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>속성.</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> SQL 문자열이 매개 변수가 있는 쿼리 또는 명령 이면 매개 변수 자리 표시자도 사용 중인 ADO.NET 공급자에 따라 다릅니다. 예를 들어 공급자는 <xref:System.Data.SqlClient?displayProperty=fullName>, 하는 기본 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource>클래스 매개 변수의 자리 표시자는 `&quot;@parameterName&quot;`.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 그러나 공급자로 설정 된 경우는 <xref:System.Data.Odbc?displayProperty=fullName>또는 <xref:System.Data.OleDb?displayProperty=fullName>, 매개 변수의 자리 표시자는 `&quot;?&quot;`.</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.       SelectCommand 속성은 데이터 소스에서 저장된 프로시저를 지원 하는 경우 SQL 문자열 또는 저장된 프로시저의 이름 수 있습니다.       SelectCommand 속성에 위임는 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>의 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>      > [!IMPORTANT] > 보안상의 이유로 SelectCommand 속성이 저장 되지 않습니다는 보기 상태입니다. 클라이언트에서 상태 보기의 내용을 디코딩할 수 있기 때문에 보기에 데이터베이스 구조에 대 한 중요 한 정보를 저장 상태로 될 수 정보 공개 문제점 취약점이 있습니다.      > [!IMPORTANT] > 값이 매개 변수 유효성 검사 잠재적 보안 위협이 없이 삽입 합니다. 사용 하 여는 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>을 쿼리를 실행 하기 전에 매개 변수 값을 검사 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 자세한 내용은 참조 [스크립트에 의해 악용 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "This section contains two code examples. The first code example demonstrates how to set the SelectCommand text to a basic SQL query to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates how to set the SelectCommand text to the name of a stored procedure and the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n In both examples, there is no need to explicitly call the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method because the data-bound controls that are attached to the data source control through the <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> property will automatically call the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method during the <xref:System.Web.UI.Control.PreRender> phase.  \n  \n The following code example demonstrates how to set the SelectCommand text to a basic SQL query to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1253_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1253_1.aspx)]  \n  \n The following code example demonstrates how to set the SelectCommand text to the name of a stored procedure and the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value to retrieve data from a SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control. The SelectCommand property can be an SQL query or the name of a stored procedure, if the data source supports stored procedures.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1253_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1253_2.aspx)]"
  syntax:
    content: public string SelectCommand { get; set; }
    return:
      type: System.String
      description: "SQL 문자열 또는 저장된 프로시저의 이름을 하는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 사용 하 여 데이터를 검색 합니다."
  overload: System.Web.UI.WebControls.SqlDataSource.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  id: SelectCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SelectCommandType
  nameWithType: SqlDataSource.SelectCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "나타내는 값을 가져오거나 여부에서 텍스트는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>속성이 SQL 쿼리 또는 저장된 프로시저의 이름입니다.</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>"
  remarks: "SelectCommandType 속성에 위임는 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A>의 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A>"
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> text to the name of a stored procedure and the SelectCommandType property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value, in order to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_358_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_358_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "중 하나는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref> 값입니다. 기본값은는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref> 값입니다."
  overload: System.Web.UI.WebControls.SqlDataSource.SelectCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: SqlDataSource.Selected
  fullName: System.Web.UI.WebControls.SqlDataSource.Selected
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "데이터 검색 작업이 완료 되 면 발생 합니다."
  remarks: "데이터 검색 작업이 완료 된 후의 출력 매개 변수 값을 확인 하려면 선택한 이벤트를 처리 합니다. 출력 매개 변수는 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>이벤트와 연결 된 개체입니다.</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: SqlDataSource.Selecting
  fullName: System.Web.UI.WebControls.SqlDataSource.Selecting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "데이터 검색 작업을 하기 전에 발생합니다."
  remarks: "매개 변수 값의 유효성을 검사 하는 응용 프로그램에 적용 되는 추가 초기화 작업을 수행 하려면 Selecting 이벤트를 처리 하거나 하기 전에 값을 매개 변수를 변경 하는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤이 선택 작업을 수행 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> 사용할 수 있는 선택 인수는 <xref:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs>이벤트와 연결 된 개체입니다.</xref:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: SqlDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "사용 되는 매개 변수를 포함 하는 매개 변수 컬렉션을 가져옵니다는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>에서 속성의 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;> </xref> 연결 된 개체에는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>"
  remarks: "경우는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>매개 변수가 있는 SQL 쿼리를 포함 하는 속성, SelectParameters 컬렉션에 포함 되어 있는 <xref:System.Web.UI.WebControls.Parameter>SQL 문자열의 매개 변수 자리 표시자에 해당 하는 개체입니다.</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>       ADO.NET 공급자에 따라 SelectParameters 컬렉션에서 매개 변수의 순서 중요할 수 있습니다. <xref:System.Data.OleDb?displayProperty=fullName>및 <xref:System.Data.Odbc?displayProperty=fullName>공급자 매개 변수가 있는 SQL 쿼리는 매개 변수가 표시 되는 순서에 따라 컬렉션의 매개 변수를 연결 합니다.</xref:System.Data.Odbc?displayProperty=fullName> </xref:System.Data.OleDb?displayProperty=fullName> <xref:System.Data.SqlClient?displayProperty=fullName>는 기본 ADO.NET 공급자는 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource>제어 하 고, SQL 쿼리의 자리 표시자 별칭을 가진 매개 변수의 이름과 일치 하 여 컬렉션의 매개 변수를 연결 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.       SelectParameters 속성 검색은 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A>에 포함 된 속성의 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A>      > [!IMPORTANT] > 값이 매개 변수 유효성 검사 잠재적 보안 위협이 없이 삽입 합니다. 사용 하 여는 <xref:System.Web.UI.WebControls.SqlDataSource.Selecting>을 쿼리를 실행 하기 전에 매개 변수 값을 검사 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Selecting> 자세한 내용은 참조 [스크립트에 의해 악용 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server by setting the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property to an SQL query. The SQL query is parameterized and the placeholder in the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property is matched to the <xref:System.Web.UI.WebControls.ControlParameter> object that is added to the SelectParameters collection. The <xref:System.Web.UI.WebControls.DropDownList> control, which the <xref:System.Web.UI.WebControls.ControlParameter> is bound to, acts as a filter for what is displayed in the <xref:System.Web.UI.WebControls.ListBox> control.  \n  \n For information about other types of parameters you can use, see the <xref:System.Web.UI.WebControls.Parameter> class overview.  \n  \n> [!NOTE]\n>  Because the parameter is used in a WHERE clause, the use of the SelectParameters property in the code example is functionally equivalent to using the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1230_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1230_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> 에서 사용 하는 매개 변수를 포함 하는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>속성.</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>"
  overload: System.Web.UI.WebControls.SqlDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SortParameterName
  id: SortParameterName
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SortParameterName
  nameWithType: SqlDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.SqlDataSource.SortParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "저장된 프로시저를 사용 하 여 데이터 검색을 수행할 때 검색 된 데이터를 정렬 하는 데 사용 되는 저장된 프로시저 매개 변수의 이름을 가져오거나 설정 합니다."
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>속성이 확인 된는 SQL 명령이 포함 된만 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>속성은 저장된 프로시저의 이름입니다.</xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> 이 경우 SortParameterName 속성을 설정 하는 경우 저장된 프로시저의 결과 정렬 하는 데 사용 되는 매개 변수의 이름을 포함 합니다.       경우는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>속성이 설정 되어 있으면 앞에 추가 되는 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>속성.</xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>"
  syntax:
    content: public string SortParameterName { get; set; }
    return:
      type: System.String
      description: "저장된 프로시저를 사용 하 여 데이터 검색을 수행할 때 검색 된 데이터를 정렬 하는 데 사용 되는 저장된 프로시저 매개 변수의 이름입니다."
  overload: System.Web.UI.WebControls.SqlDataSource.SortParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  id: SqlCacheDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlCacheDependency
  nameWithType: SqlDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "데이터베이스 및 Microsoft SQL Server 캐시 종속성에 사용할 테이블을 지정 하는 세미콜론으로 구분 된 문자열을 가져오거나 설정 합니다."
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>컨트롤이 선택적 만료 정책에 따라 지 원하는 <xref:System.Web.Caching.SqlCacheDependency>(데이터베이스 서버에 대 한 서비스 구성 해야 합니다) 데이터 캐시에 대 한 개체입니다.</xref:System.Web.Caching.SqlCacheDependency> </xref:System.Web.UI.WebControls.SqlDataSource>       데이터베이스 및 테이블에서 사용 되는 동일한 형식에 따라 식별 하는 SqlCacheDependency 문자열은 `@ Page` 지시문을 문자열의 첫 번째 부분 인 Microsoft SQL Server 데이터베이스에 연결 문자열 뒤에 마지막으로 데이터베이스 테이블의 이름 (예를 들어 `&quot;connectionstring1:table1&quot;`). 연결 문자열 및 테이블 이름 쌍은 세미콜론으로 구분 SqlCacheDependency 속성 둘 이상의 테이블에 의존 하는 경우 (예를 들어 `&quot;connectionstring1:table1&quot;;connectionstring2:table2&quot;`).      > [!IMPORTANT] > Microsoft Windows 인증에서 클라이언트 가장을 사용 하는 첫 번째 사용자 데이터에 액세스 하는 경우 데이터 캐시 됩니다. 다른 사용자가 동일한 데이터를 요청 하는 경우 데이터 캐시에서 검색 됩니다. 데이터에 대 한 사용자의 액세스를 확인 하려면 데이터베이스에 다른 호출 하 여 데이터를 검색 되지 않습니다. 데이터에 액세스할 수 있는 둘 이상의 사용자 다시 데이터베이스에 대 한 보안 구성으로 확인 하려면 데이터에 각 검색, 캐싱을 사용 하지 마십시오."
  example:
  - "The following code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.SqlDataSource> control. In this example, the database is polled every 120 seconds. If the data in the Northwind Traders Employees table changes during that time, any data that is cached by the <xref:System.Web.UI.WebControls.SqlDataSource> control and displayed by the <xref:System.Web.UI.WebControls.GridView> control is refreshed by the <xref:System.Web.UI.WebControls.SqlDataSource> control the next time the database is polled.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_795_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_795_1.aspx)]"
  syntax:
    content: public virtual string SqlCacheDependency { get; set; }
    return:
      type: System.String
      description: "문자열 데이터베이스를 나타내며 SQL Server 캐시 종속성에 사용할 테이블입니다."
  overload: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: SqlDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "뷰 상태 변경 내용을 추적은 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 에 변경 내용을 저장할 수 있도록 컨트롤의 <xref href=&quot;System.Web.UI.StateBag&quot;> </xref> 컨트롤에 대 한 개체입니다."
  remarks: "TrackViewState 메서드는 컨트롤에 대 한 뷰 상태의 일부로 컨트롤의 변경 내용을 추적 하 고 저장을 시작 하려면 시작 위치를 표시 하도록 재정의 됩니다."
  syntax:
    content: protected override void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.SqlDataSource.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Update
  id: Update
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Update()
  nameWithType: SqlDataSource.Update()
  fullName: System.Web.UI.WebControls.SqlDataSource.Update()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "사용 하 여 업데이트 작업을 수행 된 <> </> *>에 SQL 문자열 및 매개 변수는 <> </> *> 컬렉션입니다."
  remarks: "큐브의 Update 메서드에 의해 자동으로 호출 됩니다는 <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, 및 <xref:System.Web.UI.WebControls.FormView>데이터가 변경 된 경우 다시 게시 하는 동안 제어.</xref:System.Web.UI.WebControls.FormView> </xref:System.Web.UI.WebControls.DetailsView> </xref:System.Web.UI.WebControls.GridView> 다른 컨트롤에서 변경 된 데이터에 대 한 Update 메서드 수 명시적으로 호출 될 동안 다시 게시는 <xref:System.Windows.Forms.Form.Load>이벤트.</xref:System.Windows.Forms.Form.Load>       업데이트 작업을 수행 하기 전에 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSource.Updating>이벤트.</xref:System.Web.UI.WebControls.SqlDataSource.Updating> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> 이 이벤트는 매개 변수의 값을 확인 하 고 업데이트 작업 전에 전처리를 수행할 수를 처리할 수 있습니다.       업데이트 작업이 완료 되 면는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A>를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSource.Updated>이벤트.</xref:System.Web.UI.WebControls.SqlDataSource.Updated> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> 모든 반환 값과 오류 코드를 검사 하 고 사후 처리를 수행 하려면이 이벤트를 처리할 수 있습니다.       큐브의 Update 메서드에 위임는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>의 메서드는 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> 업데이트 작업을 수행 하는 <xref:System.Web.UI.WebControls.SqlDataSourceView>빌드는 <xref:System.Data.Common.DbCommand>를 사용 하 여 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>텍스트와 모든 관련 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>속성을 빌드한 다음 실행는 <xref:System.Data.Common.DbCommand>기본 데이터베이스에 대 한 개체입니다.</xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> </xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView>      > [!IMPORTANT] > 값이 매개 변수 유효성 검사 잠재적 보안 위협이 없이 삽입 합니다. 사용 하 여는 <xref:System.Web.UI.WebControls.SqlDataSource.Updating>을 쿼리를 실행 하기 전에 매개 변수 값을 검사 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Updating> 자세한 내용은 참조 [스크립트에 의해 악용 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The second code example demonstrates how to display data that is retrieved from a Microsoft SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control.  \n  \n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property is set with a parameterized SQL statement, and two <xref:System.Web.UI.WebControls.ControlParameter> parameters are added to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection. When the **Submit** button is clicked, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is handled to call the Update method explicitly.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_109_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_109_1.aspx)]  \n  \n The following code example demonstrates how to display data that is retrieved from a SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control. The example shows how you can use a <xref:System.Data.Common.DbTransaction> object to add transaction context when using the <xref:System.Web.UI.WebControls.SqlDataSource> control to update data.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_109_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_109_2.aspx)]"
  syntax:
    content: public int Update ();
    parameters: []
    return:
      type: System.Int32
      description: "기본 데이터베이스에서 업데이트 된 행 수를 나타내는 값입니다."
  overload: System.Web.UI.WebControls.SqlDataSource.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 기본 데이터 원본과 연결을 설정할 수 없습니다."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  id: UpdateCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: SqlDataSource.UpdateCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "SQL 문자열을 가져오거나는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 컨트롤 사용 기본 데이터베이스의 데이터를 업데이트 합니다."
  remarks: "UpdateCommand SQL 쿼리 또는 저장된 프로시저의 이름을 나타내고에서 사용 되는 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>메서드.</xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>       데이터베이스 제품 마다 다양 한 SQL 사용 하기 때문에 SQL 문자열의 구문은 공급자에 따라 현재 ADO.NET 사용 중인으로 식별 된 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>속성.</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> SQL 문자열이 매개 변수가 있는 쿼리 또는 명령 이면 매개 변수 자리 표시자도 사용 중인 ADO.NET 공급자에 따라 다릅니다. 예를 들어 공급자는 <xref:System.Data.SqlClient?displayProperty=fullName>, 하는 기본 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource>클래스 매개 변수의 자리 표시자는 `&quot;@parameterName&quot;`.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 그러나 공급자로 설정 된 경우는 <xref:System.Data.Odbc?displayProperty=fullName>또는 <xref:System.Data.OleDb?displayProperty=fullName>, 매개 변수의 자리 표시자는 `&quot;?&quot;`.</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.       UpdateCommand 속성은 데이터 소스에서 저장된 프로시저를 지원 하는 경우 SQL 문자열 또는 저장된 프로시저의 이름 수 있습니다.       UpdateCommand 속성에 위임는 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>의 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>      > [!IMPORTANT] > 보안상의 이유로 UpdateCommand 속성은 저장 되지 않습니다는 보기 상태입니다. 클라이언트에서 상태 보기의 내용을 디코딩할 수 있기 때문에 보기에 데이터베이스 구조에 대 한 중요 한 정보를 저장 상태로 될 수 정보 공개 문제점 취약점이 있습니다.      > [!IMPORTANT] > 값이 매개 변수 유효성 검사 잠재적 보안 위협이 없이 삽입 합니다. 사용 하 여는 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>을 쿼리를 실행 하기 전에 매개 변수 값을 검사 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 자세한 내용은 참조 [스크립트에 의해 악용 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "This section contains two code examples. The first code example demonstrates how to set the UpdateCommand property of the <xref:System.Web.UI.WebControls.SqlDataSource> control and update data in a Microsoft SQL Server database using the <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates how to update data in an ODBC database using the <xref:System.Web.UI.WebControls.GridView> control.  \n  \n The following code example demonstrates how to set the UpdateCommand property of the <xref:System.Web.UI.WebControls.SqlDataSource> control and update data in a SQL Server database using the <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.GridView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection, inferring the parameters from the <xref:System.Web.UI.WebControls.BoundField> objects, and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method when the **Update** link on the editable <xref:System.Web.UI.WebControls.GridView> is selected. This example also includes some post-processing: after a record is updated, a notification e-mail message is sent.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_301_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_301_1.aspx)]  \n  \n The following code example, which is functionally identical to the preceding code example, demonstrates how to update data in an ODBC database using the <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> is set to the ADO.NET provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>, and the <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is set to the name of an ODBC data source name (DSN).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_301_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_301_2.aspx)]"
  syntax:
    content: public string UpdateCommand { get; set; }
    return:
      type: System.String
      description: "SQL 문자열의 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 데이터 업데이트를 사용 하 여 합니다."
  overload: System.Web.UI.WebControls.SqlDataSource.UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  id: UpdateCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: UpdateCommandType
  nameWithType: SqlDataSource.UpdateCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "나타내는 값을 가져오거나 여부에서 텍스트는 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>속성은 SQL 문 또는 저장된 프로시저의 이름입니다.</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>"
  remarks: "UpdateCommandType 속성에 위임는 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A>의 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A>"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "중 하나는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref> 값입니다. 기본값은는 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref> 값입니다."
  overload: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: SqlDataSource.Updated
  fullName: System.Web.UI.WebControls.SqlDataSource.Updated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "업데이트 작업이 완료 되 면 발생 합니다."
  remarks: "업데이트 작업이 완료 된 후의 출력 매개 변수 값을 확인 하려면 업데이트 된 이벤트를 처리 합니다. 출력 매개 변수는 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>이벤트와 연결 된 개체입니다.</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다."
  example:
  - "The following code example demonstrates how to display and update data that is retrieved from an ODBC database in a <xref:System.Web.UI.WebControls.GridView> control. After a record is successfully updated, the Updated event is handled by an event handler to perform a post-processing step where an e-mail notification is sent.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_103_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_103_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: SqlDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "사용 되는 매개 변수를 포함 하는 매개 변수 컬렉션을 가져옵니다는 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>속성은 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;> </xref> 연관 된 컨트롤의 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> 컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>"
  remarks: "경우는 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>매개 변수가 있는 SQL 쿼리를 포함 하는 속성, UpdateParameters 컬렉션에 포함 되어 있는 <xref:System.Web.UI.WebControls.Parameter>SQL 문자열의 매개 변수 자리 표시자에 해당 하는 개체입니다.</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>       매개 변수 이름은 영향을 받을 수는 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>속성 이름을 사용 하 여 지정 된 키와 같은 기본 키를 식별 하는 경우에 특히는 `DataKeyNames` 삭제 또는 데이터 바인딩된 컨트롤의 속성 업데이트 시나리오 및 위치는 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>속성이로 설정 되는 <xref:System.Web.UI.ConflictOptions>값과 집합이 `oldValues` 해당 데이터 메서드에 전달 됩니다.</xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> </xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> 형식 문자열의 각 매개 변수 이름에 적용 되는 경우에 `oldValues` 컬렉션입니다.       UpdateParameters 컬렉션에서 매개 변수의 순서는 ADO.NET 공급자에 따라 중요할 수 있습니다. <xref:System.Data.OleDb?displayProperty=fullName>및 <xref:System.Data.Odbc?displayProperty=fullName>공급자 매개 변수가 있는 SQL 쿼리는 매개 변수가 표시 되는 순서에 따라 컬렉션의 매개 변수를 연결 합니다.</xref:System.Data.Odbc?displayProperty=fullName> </xref:System.Data.OleDb?displayProperty=fullName> <xref:System.Data.SqlClient?displayProperty=fullName>는 기본 ADO.NET 공급자는 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource>제어 하 고, SQL 쿼리의 자리 표시자 별칭을 가진 매개 변수의 이름과 일치 하 여 컬렉션의 매개 변수를 연결 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](~/add/includes/ajax-current-ext-md.md)합니다.       UpdateParameters 속성 검색은 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>에 포함 된 속성의 <xref:System.Web.UI.WebControls.SqlDataSourceView>연결 된 개체에는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>      > [!IMPORTANT] > 값이 매개 변수 유효성 검사 잠재적 보안 위협이 없이 삽입 합니다. 사용 하 여는 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>을 쿼리를 실행 하기 전에 매개 변수 값을 검사 합니다.</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 자세한 내용은 참조 [스크립트에 의해 악용 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> is set with a parameterized SQL statement and two <xref:System.Web.UI.WebControls.ControlParameter> parameters are added to the UpdateParameters collection. When the **Submit** button is clicked, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is handled to call the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method explicitly.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1200_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1200_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> 에서 사용 하는 매개 변수를 포함 하는 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>속성.</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>"
  overload: System.Web.UI.WebControls.SqlDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: SqlDataSource.Updating
  fullName: System.Web.UI.WebControls.SqlDataSource.Updating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "업데이트 작업이 수행 되기 전에 발생합니다."
  remarks: "매개 변수 값의 유효성을 검사 하는 응용 프로그램에 적용 되는 추가 초기화 작업을 수행 하려면 업데이트 이벤트를 처리 또는 하기 전에 값을 매개 변수를 변경 하는 <xref:System.Web.UI.WebControls.SqlDataSource>컨트롤이 업데이트 작업을 수행 합니다.</xref:System.Web.UI.WebControls.SqlDataSource> 이벤트 처리기 대리자를 호출할 때 데이터 원본에 대 한 연결 열려 아직 있지 않습니다. 따라서 직접을 취소할 수 없습니다는 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>호출 하 여 데이터베이스 작업에는 <xref:System.Data.Common.DbCommand.Cancel%2A>에서 메서드는 <xref:System.Data.Common.DbCommand>의해 노출 되는 개체는 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>개체.</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.Data.Common.DbCommand> </xref:System.Data.Common.DbCommand.Cancel%2A> </xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 그러나 설정 하 여 데이터베이스 작업을 취소할 수 있습니다는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A>속성은 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>를 `true`.</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.      > [!IMPORTANT] > 값이 매개 변수 유효성 검사 잠재적 보안 위협이 없이 삽입 합니다. 쿼리를 실행 하기 전에 매개 변수 값의 유효성 검사를 업데이트 하는 중 이벤트를 사용 합니다. 자세한 내용은 참조 [스크립트에 의해 악용 개요](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "The following code example demonstrates how to display data that is retrieved from a Microsoft SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control. The example shows how you can use a <xref:System.Data.Common.DbTransaction> object to add transaction context when using the <xref:System.Web.UI.WebControls.SqlDataSource> control to update data.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_75_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_75_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.DataSourceControl
  isExternal: false
  name: System.Web.UI.DataSourceControl
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource()
  nameWithType: SqlDataSource.SqlDataSource()
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource()
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource(String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource(String,String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String,String)
- uid: System.Web.UI.WebControls.SqlDataSource.CacheDuration
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: SqlDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheDuration
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: SqlDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
- uid: System.Web.UI.DataSourceCacheExpiry
  parent: System.Web.UI
  isExternal: false
  name: DataSourceCacheExpiry
  nameWithType: DataSourceCacheExpiry
  fullName: System.Web.UI.DataSourceCacheExpiry
- uid: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: SqlDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSource.CancelSelectOnNullParameter
  fullName: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: SqlDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
- uid: System.Web.UI.ConflictOptions
  parent: System.Web.UI
  isExternal: false
  name: ConflictOptions
  nameWithType: ConflictOptions
  fullName: System.Web.UI.ConflictOptions
- uid: System.Web.UI.WebControls.SqlDataSource.ConnectionString
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConnectionString
  nameWithType: SqlDataSource.ConnectionString
  fullName: System.Web.UI.WebControls.SqlDataSource.ConnectionString
- uid: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CreateDataSourceView(String)
  nameWithType: SqlDataSource.CreateDataSourceView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(String)
- uid: System.Web.UI.WebControls.SqlDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceView
  nameWithType: SqlDataSourceView
  fullName: System.Web.UI.WebControls.SqlDataSourceView
- uid: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DataSourceMode
  nameWithType: SqlDataSource.DataSourceMode
  fullName: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
- uid: System.Web.UI.WebControls.SqlDataSourceMode
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceMode
  nameWithType: SqlDataSourceMode
  fullName: System.Web.UI.WebControls.SqlDataSourceMode
- uid: System.Web.UI.WebControls.SqlDataSource.Delete
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Delete()
  nameWithType: SqlDataSource.Delete()
  fullName: System.Web.UI.WebControls.SqlDataSource.Delete()
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommand
  nameWithType: SqlDataSource.DeleteCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommandType
  nameWithType: SqlDataSource.DeleteCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
- uid: System.Web.UI.WebControls.SqlDataSourceCommandType
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceCommandType
  nameWithType: SqlDataSourceCommandType
  fullName: System.Web.UI.WebControls.SqlDataSourceCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Deleted
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Deleted
  nameWithType: SqlDataSource.Deleted
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleted
- uid: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceStatusEventHandler
  nameWithType: SqlDataSourceStatusEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: SqlDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.SqlDataSource.Deleting
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Deleting
  nameWithType: SqlDataSource.Deleting
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleting
- uid: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceCommandEventHandler
  nameWithType: SqlDataSourceCommandEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.EnableCaching
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: SqlDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.SqlDataSource.EnableCaching
- uid: System.Web.UI.WebControls.SqlDataSource.FilterExpression
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: SqlDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterExpression
- uid: System.Web.UI.WebControls.SqlDataSource.Filtering
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Filtering
  nameWithType: SqlDataSource.Filtering
  fullName: System.Web.UI.WebControls.SqlDataSource.Filtering
- uid: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceFilteringEventHandler
  nameWithType: SqlDataSourceFilteringEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.FilterParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: SqlDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterParameters
- uid: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetDbProviderFactory()
  nameWithType: SqlDataSource.GetDbProviderFactory()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory()
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Web.UI.WebControls.SqlDataSource.GetView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetView(String)
  nameWithType: SqlDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.GetView(String)
- uid: System.Web.UI.DataSourceView
  parent: System.Web.UI
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
- uid: System.Web.UI.WebControls.SqlDataSource.GetViewNames
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetViewNames()
  nameWithType: SqlDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetViewNames()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.WebControls.SqlDataSource.Insert
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Insert()
  nameWithType: SqlDataSource.Insert()
  fullName: System.Web.UI.WebControls.SqlDataSource.Insert()
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommand
  nameWithType: SqlDataSource.InsertCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommand
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommandType
  nameWithType: SqlDataSource.InsertCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Inserted
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Inserted
  nameWithType: SqlDataSource.Inserted
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserted
- uid: System.Web.UI.WebControls.SqlDataSource.Inserting
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Inserting
  nameWithType: SqlDataSource.Inserting
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserting
- uid: System.Web.UI.WebControls.SqlDataSource.InsertParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: SqlDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertParameters
- uid: System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: LoadViewState(Object)
  nameWithType: SqlDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.SqlDataSource.LoadViewState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: SqlDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.SqlDataSource.ProviderName
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ProviderName
  nameWithType: SqlDataSource.ProviderName
  fullName: System.Web.UI.WebControls.SqlDataSource.ProviderName
- uid: System.Web.UI.WebControls.SqlDataSource.SaveViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SaveViewState()
  nameWithType: SqlDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.SaveViewState()
- uid: System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Select(DataSourceSelectArguments)
  nameWithType: SqlDataSource.Select(DataSourceSelectArguments)
  fullName: System.Web.UI.WebControls.SqlDataSource.Select(DataSourceSelectArguments)
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Web.UI.DataSourceSelectArguments
  parent: System.Web.UI
  isExternal: false
  name: DataSourceSelectArguments
  nameWithType: DataSourceSelectArguments
  fullName: System.Web.UI.DataSourceSelectArguments
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommand
  nameWithType: SqlDataSource.SelectCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommand
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommandType
  nameWithType: SqlDataSource.SelectCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Selected
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Selected
  nameWithType: SqlDataSource.Selected
  fullName: System.Web.UI.WebControls.SqlDataSource.Selected
- uid: System.Web.UI.WebControls.SqlDataSource.Selecting
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Selecting
  nameWithType: SqlDataSource.Selecting
  fullName: System.Web.UI.WebControls.SqlDataSource.Selecting
- uid: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceSelectingEventHandler
  nameWithType: SqlDataSourceSelectingEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.SelectParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: SqlDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectParameters
- uid: System.Web.UI.WebControls.SqlDataSource.SortParameterName
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: SqlDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.SqlDataSource.SortParameterName
- uid: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: SqlDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.SqlDataSource.TrackViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: TrackViewState()
  nameWithType: SqlDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.TrackViewState()
- uid: System.Web.UI.WebControls.SqlDataSource.Update
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Update()
  nameWithType: SqlDataSource.Update()
  fullName: System.Web.UI.WebControls.SqlDataSource.Update()
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommand
  nameWithType: SqlDataSource.UpdateCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommandType
  nameWithType: SqlDataSource.UpdateCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Updated
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Updated
  nameWithType: SqlDataSource.Updated
  fullName: System.Web.UI.WebControls.SqlDataSource.Updated
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: SqlDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.SqlDataSource.Updating
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Updating
  nameWithType: SqlDataSource.Updating
  fullName: System.Web.UI.WebControls.SqlDataSource.Updating
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource
  nameWithType: SqlDataSource.SqlDataSource
- uid: System.Web.UI.WebControls.SqlDataSource.CacheDuration*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: SqlDataSource.CacheDuration
- uid: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: SqlDataSource.CacheExpirationPolicy
- uid: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: SqlDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSource.CancelSelectOnNullParameter
- uid: System.Web.UI.WebControls.SqlDataSource.ConflictDetection*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: SqlDataSource.ConflictDetection
- uid: System.Web.UI.WebControls.SqlDataSource.ConnectionString*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConnectionString
  nameWithType: SqlDataSource.ConnectionString
- uid: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CreateDataSourceView
  nameWithType: SqlDataSource.CreateDataSourceView
- uid: System.Web.UI.WebControls.SqlDataSource.DataSourceMode*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DataSourceMode
  nameWithType: SqlDataSource.DataSourceMode
- uid: System.Web.UI.WebControls.SqlDataSource.Delete*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Delete
  nameWithType: SqlDataSource.Delete
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommand
  nameWithType: SqlDataSource.DeleteCommand
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommandType
  nameWithType: SqlDataSource.DeleteCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: SqlDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.SqlDataSource.EnableCaching*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: SqlDataSource.EnableCaching
- uid: System.Web.UI.WebControls.SqlDataSource.FilterExpression*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: SqlDataSource.FilterExpression
- uid: System.Web.UI.WebControls.SqlDataSource.FilterParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: SqlDataSource.FilterParameters
- uid: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetDbProviderFactory
  nameWithType: SqlDataSource.GetDbProviderFactory
- uid: System.Web.UI.WebControls.SqlDataSource.GetView*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetView
  nameWithType: SqlDataSource.GetView
- uid: System.Web.UI.WebControls.SqlDataSource.GetViewNames*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetViewNames
  nameWithType: SqlDataSource.GetViewNames
- uid: System.Web.UI.WebControls.SqlDataSource.Insert*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Insert
  nameWithType: SqlDataSource.Insert
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommand
  nameWithType: SqlDataSource.InsertCommand
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommandType
  nameWithType: SqlDataSource.InsertCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: SqlDataSource.InsertParameters
- uid: System.Web.UI.WebControls.SqlDataSource.LoadViewState*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: LoadViewState
  nameWithType: SqlDataSource.LoadViewState
- uid: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.SqlDataSource.OnInit*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OnInit
  nameWithType: SqlDataSource.OnInit
- uid: System.Web.UI.WebControls.SqlDataSource.ProviderName*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ProviderName
  nameWithType: SqlDataSource.ProviderName
- uid: System.Web.UI.WebControls.SqlDataSource.SaveViewState*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SaveViewState
  nameWithType: SqlDataSource.SaveViewState
- uid: System.Web.UI.WebControls.SqlDataSource.Select*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Select
  nameWithType: SqlDataSource.Select
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommand
  nameWithType: SqlDataSource.SelectCommand
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommandType
  nameWithType: SqlDataSource.SelectCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: SqlDataSource.SelectParameters
- uid: System.Web.UI.WebControls.SqlDataSource.SortParameterName*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: SqlDataSource.SortParameterName
- uid: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: SqlDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.SqlDataSource.TrackViewState*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: TrackViewState
  nameWithType: SqlDataSource.TrackViewState
- uid: System.Web.UI.WebControls.SqlDataSource.Update*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Update
  nameWithType: SqlDataSource.Update
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommand
  nameWithType: SqlDataSource.UpdateCommand
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommandType
  nameWithType: SqlDataSource.UpdateCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: SqlDataSource.UpdateParameters
